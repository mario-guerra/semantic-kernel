[
    {
        "README_text": "# Azure Resource Manager Advisor client library for Java\n\nAzure Resource Manager Advisor client library for Java.\n\nThis package contains Microsoft Azure SDK for Advisor Management SDK. REST APIs for Azure Advisor. Package tag package-2020-01. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-advisor;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-advisor</artifactId>\n    <version>1.0.0-beta.2</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nAdvisorManager manager = AdvisorManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/advisor/azure-resourcemanager-advisor/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "advisor/azure-resourcemanager-advisor",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/advisor/azure-resourcemanager-advisor",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager AgriFood client library for Java\n\nAzure Resource Manager AgriFood client library for Java.\n\nThis package contains Microsoft Azure SDK for AgriFood Management SDK. APIs documentation for Azure AgFoodPlatform Resource Provider Service. Package tag package-preview-2021-09. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-agrifood;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-agrifood</artifactId>\n    <version>1.0.0-beta.1</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nAgriFoodManager manager = AgriFoodManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/agrifood/azure-resourcemanager-agrifood/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n",
        "repo_name": "agrifood/azure-resourcemanager-agrifood",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/agrifood/azure-resourcemanager-agrifood",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure FarmBeats client library for Java\n\nFarmBeats is a B2B PaaS offering from Microsoft that makes it easy for AgriFood companies to build intelligent digital agriculture solutions on Azure.\u202fFarmBeats\u202fallows\u202fusers\u202fto acquire, aggregate, and process agricultural data from various sources (farm equipment, weather, satellite) without the need to invest in deep data\u202fengineering resources.\u202f Customers can build SaaS solutions on top of FarmBeats and leverage first class support for model building to generate insights at scale.\n\nUse FarmBeats client library for Python to do the following. \n\n- Create & update parties, farms, fields, seasonal fields and boundaries.\n- Ingest satellite and weather data for areas of interest.\n- Ingest farm operations data covering tilling, planting, harvesting and application of farm inputs.\n\n[Source code][source_code] | [Package (Maven)][package] | [Product Documentation][product_documentation] | [Samples][samples_readme]\n\n## Getting started\n\n### Prerequisites\n\n- A [Java Development Kit (JDK)][jdk_link], version 8 or later.\n- [Azure Subscription][azure_subscription]\n- AgriFood (FarmBeats) resource - [Install FarmBeats][install_farmbeats]\n\n### Include the Package\n\n[//]: # ({x-version-update-start;com.azure:azure-verticals-agrifood-farming;current})\n```xml\n<dependency>\n  <groupId>com.azure</groupId>\n  <artifactId>azure-verticals-agrifood-farming</artifactId>\n  <version>1.0.0-beta.3</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Authenticate the client\n\n#### Using Azure Active Directory\n\nIn order to interact with the Azure FarmBeats service, your client must present an Azure Active Directory bearer token to the service.\n\nThe simplest way of providing a bearer token is to use the `DefaultAzureCredential` authentication method by providing client secret credentials is being used in this getting started section but you can find more ways to authenticate with [azure-identity][azure_identity].\n\nYou can authenticate with Azure Active Directory using the [Azure Identity library][azure_identity].\n\nTo use the [DefaultAzureCredential][DefaultAzureCredential] provider shown below, or other credential providers provided with the Azure SDK, please include the `azure-identity` package:\n\n[//]: # ({x-version-update-start;com.azure:azure-identity;dependency})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-identity</artifactId>\n    <version>1.9.0</version>\n</dependency>\n```\n\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: AZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET.\n\n##### Example - Create Parties Client\n\n```java readme-sample-createPartiesClient\nString endpoint = \"https://<farmbeats-endpoint>.farmbeats.azure.net\";\n\n// Create Parties Client\nPartiesClientBuilder partiesBuilder = new PartiesClientBuilder()\n    .endpoint(endpoint)\n    .credential(new DefaultAzureCredentialBuilder().build());\nPartiesAsyncClient partiesClient = partiesBuilder.buildAsyncClient();\n\n```\n\n##### Example - Create Boundaries Client\n```java readme-sample-createBoundariesClient\n// Create Boundaries Client\nBoundariesClientBuilder boundariesBuilder = new BoundariesClientBuilder()\n    .endpoint(endpoint)\n    .credential(new DefaultAzureCredentialBuilder().build());\nBoundariesAsyncClient boundariesClient = boundariesBuilder.buildAsyncClient();\n```\n\n##### Example - Create Scenes Client\n```java readme-sample-createScenesClient\n// Create Scenes Client\nScenesClientBuilder scenesBuilder = new ScenesClientBuilder()\n    .endpoint(endpoint)\n    .credential(new DefaultAzureCredentialBuilder().build());\nScenesAsyncClient scenesClient = scenesBuilder.buildAsyncClient();\n```\n\n## Key concepts\n\nBasic understanding of below terms will help to get started with FarmBeats client library.\n\n### [Farm Hierarchy][farm_hierarchy]\nFarm hierarchy is a collection of below entities.\n- Party - is the custodian of all the agronomic data.\n- Farm - is a logical collection of fields and/or seasonal fields. They do not have any area associated with them.\n- Field - is a multi-polygon area. This is expected to be stable across seasons.\n- Seasonal field - is a multi-polygon area. To define a seasonal boundary we need the details of area (boundary), time (season) and crop. New seasonal fields are expected to be created for every growing season.\n- Boundary - is the actual multi-polygon area expressed as a geometry (in geojson). It is normally associated with a field or a seasonal field. Satellite, weather and farm operations data is linked to a boundary.\n- Cascade delete - Agronomic data is stored hierarchically with party as the root. The hierarchy includes Party -> Farms -> Fields -> Seasonal Fields -> Boundaries -> Associated data (satellite, weather, farm operations). Cascade delete refers to the process of deleting any node and its subtree. \n\n#### Example\n\n```java readme-sample-createFarmHierarchy\n// Create Party\nJSONObject object = new JSONObject().appendField(\"name\", \"party1\");\nBinaryData party = BinaryData.fromObject(object);\npartiesClient.createOrUpdateWithResponse(\"contoso-party\", party, null).block();\n\n// Get Party\nResponse<BinaryData> response = partiesClient.getWithResponse(\"contoso-party\", new RequestOptions()).block();\nSystem.out.println(response.getValue());\n\n// Create Boundary\nBinaryData boundary = BinaryData.fromString(\"{\\\"geometry\\\":{\\\"type\\\":\\\"Polygon\\\",\\\"coordinates\\\":[[[73.70457172393799,20.545385304358106],[73.70457172393799,20.545385304358106],[73.70448589324951,20.542411534243367],[73.70877742767334,20.541688176010233],[73.71023654937744,20.545083911372505],[73.70663166046143,20.546992723579137],[73.70457172393799,20.545385304358106]]]},\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\"}\");\nresponse = boundariesClient.createOrUpdateWithResponse(\"contoso-party\", \"contoso-boundary\", boundary, null).block();\nSystem.out.println(response.getValue());\n```\n\n### [Scenes][scenes]\nScenes refers to images normally ingested using satellite APIs. This includes raw bands and derived bands (Ex: NDVI). Scenes may also include spatial outputs of an inference or AI/ML model (Ex: LAI).\n\n#### Example\n\n```java readme-sample-ingestSatelliteData\n// Trigger Satellite job and wait for completion\nBinaryData satelliteJob = BinaryData.fromString(\"{\\\"boundaryId\\\":\\\"contoso-boundary\\\",\\\"endDateTime\\\":\\\"2022-02-01T00:00:00Z\\\",\\\"partyId\\\":\\\"contoso-party\\\",\\\"source\\\":\\\"Sentinel_2_L2A\\\",\\\"startDateTime\\\":\\\"2022-01-01T00:00:00Z\\\",\\\"provider\\\":\\\"Microsoft\\\",\\\"data\\\":{\\\"imageNames\\\":[\\\"NDVI\\\"],\\\"imageFormats\\\":[\\\"TIF\\\"],\\\"imageResolutions\\\":[10]},\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\"}\");\nscenesClient.beginCreateSatelliteDataIngestionJob(\"contoso-job-46856\", satelliteJob, null).getSyncPoller().waitForCompletion();\nSystem.out.println(scenesClient.getSatelliteDataIngestionJobDetailsWithResponse(\"contoso-job-46856\", null).block().getValue());\n\n// Iterate through ingested scenes\nIterable<BinaryData> scenes = scenesClient.list(\"Microsoft\", \"contoso-party\", \"contoso-boundary\", \"Sentinel_2_L2A\", null).toIterable();\nscenes.forEach(scene -> System.out.println(scene));\n```\n\n### [Farm Operations][farm_operations_docs]\nFam operations includes details pertaining to tilling, planting, application of pesticides & nutrients, and harvesting. This can either be manually pushed into FarmBeats using APIs or the same information can be pulled from farm equipment service providers like John Deere. \n\n## Examples\nMore examples can be found in [samples][samples_code].\n\n## Troubleshooting\n\n### Enabling Logging\n\nAzure SDKs for Java offer a consistent logging story to help aid in troubleshooting application errors and expedite\ntheir resolution. The logs produced will capture the flow of an application before reaching the terminal state to help\nlocate the root issue. View the [logging][logging] wiki for guidance about enabling logging.\n\n## Next steps\nFor more extensive documentation please check our [Product Documentation][product_documentation].\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, view [Microsoft's CLA](https://cla.microsoft.com).\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\n<!-- LINKS -->\n[samples]: src/samples/java/com/azure/verticals/agrifood/farming\n[source_code]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/agrifood/azure-verticals-agrifood-farming/src\n[samples_code]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/agrifood/azure-verticals-agrifood-farming/src/samples/\n[azure_subscription]: https://azure.microsoft.com/free/\n[product_documentation]: https://aka.ms/FarmBeatsProductDocumentationPaaS\n[azure_portal]: https://portal.azure.com\n[jdk_link]: https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable\n[package]: https://mvnrepository.com/artifact/com.azure/azure-verticals-agrifood-farming\n[samples_readme]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/agrifood/azure-verticals-agrifood-farming/src/samples/README.md\n[farm_hierarchy]: https://aka.ms/FarmBeatsFarmHierarchyDocs\n[farm_operations_docs]: https://aka.ms/FarmBeatsFarmOperationsDocumentation\n[scenes]: https://aka.ms/FarmBeatsSatellitePaaSDocumentation\n[install_farmbeats]: https://aka.ms/FarmBeatsInstallDocumentationPaaS\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[logging]: https://github.com/Azure/azure-sdk-for-java/wiki/Logging-with-Azure-SDK\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fagrifood%2Fazure-verticals-agrifood-farming%2FREADME.png)\n",
        "repo_name": "agrifood/azure-verticals-agrifood-farming",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/agrifood/azure-verticals-agrifood-farming",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager AlertsManagement client library for Java\n\nAzure Resource Manager AlertsManagement client library for Java.\n\nThis package contains Microsoft Azure SDK for AlertsManagement Management SDK. AlertsManagement Client. Package tag package-2021-08. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-alertsmanagement;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-alertsmanagement</artifactId>\n    <version>1.0.0-beta.1</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nAlertsManagementManager manager = AlertsManagementManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/alertsmanagement/azure-resourcemanager-alertsmanagement/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n",
        "repo_name": "alertsmanagement/azure-resourcemanager-alertsmanagement",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/alertsmanagement/azure-resourcemanager-alertsmanagement",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Anomaly Detector client library for Java\n\n[Anomaly Detector](https://learn.microsoft.com/azure/cognitive-services/Anomaly-Detector/overview) is an AI service with a set of APIs, which enables you to monitor and detect anomalies in your time series data with little machine learning (ML) knowledge, either batch validation or real-time inference.\n\n[Source code][source_code] | [Package (Maven)][package] | [API reference documentation][api_reference_doc] | [Product Documentation][product_documentation] | [Samples][samples_readme]\n\n## Getting started\n\n### Prerequisites\n\n- A [Java Development Kit (JDK)][jdk_link], version 11 or later.\n- [Azure Subscription][azure_subscription]\n- An existing Cognitive Services or Anomaly Detector resource.\n\nFor more information about creating the resource or how to get the location and sku information see [here][cognitive_resource_cli].\n\n### Include the Package\n\n[//]: # ({x-version-update-start;com.azure:azure-ai-anomalydetector;current})\n\n```xml\n<dependency>\n  <groupId>com.azure</groupId>\n  <artifactId>azure-ai-anomalydetector</artifactId>\n  <version>3.0.0-beta.5</version>\n</dependency>\n```\n\n[//]: # ({x-version-update-end})\n\n### Authenticate the client\n\nIn order to interact with the Anomaly Detector service, you'll need to create an instance of the [`AnomalyDetectorClient`][anomaly_detector_client_class] class.  You will need an **endpoint** and an **API key** to instantiate a client object.  \n\n#### Get API Key\n\nYou can obtain the endpoint and API key from the resource information in the [Azure Portal][azure_portal].\n\nAlternatively, you can use the [Azure CLI][azure_cli] snippet below to get the API key from the Anomaly Detector resource.\n\n```bash\naz cognitiveservices account keys list --resource-group <your-resource-group-name> --name <your-resource-name>\n```\n\n#### Create AnomalyDetectorClient with Azure Active Directory Credential\n\nYou can authenticate with Azure Active Directory using the [Azure Identity library][azure_identity]. Note that regional endpoints do not support AAD authentication. Create a [custom subdomain][custom_subdomain] for your resource in order to use this type of authentication.\n\nTo use the [DefaultAzureCredential][DefaultAzureCredential] provider shown below, or other credential providers provided with the Azure SDK, please include the `azure-identity` package:\n\n[//]: # ({x-version-update-start;com.azure:azure-identity;dependency})\n\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-identity</artifactId>\n    <version>1.9.0</version>\n</dependency>\n```\n\nYou will also need to [register a new AAD application][register_aad_app] and [grant access][aad_grant_access] to Anomaly Detector by assigning the `\"Cognitive Services User\"` role to your service principal.\n\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: AZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET.\n\n##### Sync client\n\n```java readme-sample-createAnomalyDetectorClient\nString endpoint = Configuration.getGlobalConfiguration().get(\"AZURE_ANOMALY_DETECTOR_ENDPOINT\");\nString key = Configuration.getGlobalConfiguration().get(\"AZURE_ANOMALY_DETECTOR_API_KEY\");\n\nAnomalyDetectorClient anomalyDetectorClient =\n    new AnomalyDetectorClientBuilder()\n        .credential(new AzureKeyCredential(key))\n        .endpoint(endpoint)\n        .buildClient();\n```\n\n## Key concepts\n\nWith the Anomaly Detector, you can either detect anomalies in one variable using **Univariate Anomaly Detection**, or detect anomalies in multiple variables with **Multivariate Anomaly Detection**.\n\n|Feature  |Description  |\n|---------|---------|\n|Univariate Anomaly Detection | Detect anomalies in one variable, like revenue, cost, etc. The model was selected automatically based on your data pattern. |\n|Multivariate Anomaly Detection| Detect anomalies in multiple variables with correlations, which are usually gathered from equipment or other complex system. The underlying model used is Graph attention network.|\n\n### Univariate Anomaly Detection\n\nThe Univariate Anomaly Detection API enables you to monitor and detect abnormalities in your time series data without having to know machine learning. The algorithms adapt by automatically identifying and applying the best-fitting models to your data, regardless of industry, scenario, or data volume. Using your time series data, the API determines boundaries for anomaly detection, expected values, and which data points are anomalies.\n\nUsing the Anomaly Detector doesn't require any prior experience in machine learning, and the REST API enables you to easily integrate the service into your applications and processes.\n\nWith the Univariate Anomaly Detection, you can automatically detect anomalies throughout your time series data, or as they occur in real-time.\n\n|Feature  |Description  |\n|---------|---------|\n| Streaming detection| Detect anomalies in your streaming data by using previously seen data points to determine if your latest one is an anomaly. This operation generates a model using the data points you send, and determines if the target point is an anomaly. By calling the API with each new data point you generate, you can monitor your data as it's created. |\n| Batch detection | Use your time series to detect any anomalies that might exist throughout your data. This operation generates a model using your entire time series data, with each point analyzed with the same model.         |\n| Change points detection | Use your time series to detect any trend change points that exist in your data. This operation generates a model using your entire time series data, with each point analyzed with the same model.    |\n\n### Multivariate Anomaly Detection\n\nThe **Multivariate Anomaly Detection** APIs further enable developers by easily integrating advanced AI for detecting anomalies from groups of metrics, without the need for machine learning knowledge or labeled data. Dependencies and inter-correlations between up to 300 different signals are now automatically counted as key factors. This new capability helps you to proactively protect your complex systems such as software applications, servers, factory machines, spacecraft, or even your business, from failures.\n\nWith the Multivariate Anomaly Detection, you can automatically detect anomalies throughout your time series data, or as they occur in real-time. There are three processes to use Multivariate Anomaly Detection.\n\n- **Training**: Use Train Model API to create and train a model, then use Get Model Status API to get the status and model metadata.\n- **Inference**:\n  - Use Async Inference API to trigger an asynchronous inference process and use Get Inference results API to get detection results on a batch of data.\n  - You could also use Sync Inference API to trigger a detection on one timestamp every time.\n- **Other operations**: List Model API and Delete Model API are supported in Multivariate Anomaly Detection model for model management.\n\n### Thread safety\n\nWe guarantee that all client instance methods are thread-safe and independent of each other ([guideline](https://azure.github.io/azure-sdk/dotnet_introduction.html#dotnet-service-methods-thread-safety)). This ensures that the recommendation of reusing client instances is always safe, even across threads.\n\n## Examples\n\nThe following section provides several code snippets covering some of the most common Anomaly Detector service tasks, including:\n\n- [Univariate Anomaly Detection - Batch detection](#batch-detection)\n- [Univariate Anomaly Detection - Streaming detection](#streaming-detection)\n- [Univariate Anomaly Detection - Detect change points](#detect-change-points)\n- [Multivariate Anomaly Detection](#multivariate-anomaly-detection-sample)\n\n### Create client\n\n```java readme-sample-createAnomalyDetectorClient\nString endpoint = Configuration.getGlobalConfiguration().get(\"AZURE_ANOMALY_DETECTOR_ENDPOINT\");\nString key = Configuration.getGlobalConfiguration().get(\"AZURE_ANOMALY_DETECTOR_API_KEY\");\n\nAnomalyDetectorClient anomalyDetectorClient =\n    new AnomalyDetectorClientBuilder()\n        .credential(new AzureKeyCredential(key))\n        .endpoint(endpoint)\n        .buildClient();\n```\n\n### Batch detection\n\nFor batch detection in univariate anomaly detection, please go to this sample for better understanding the workflow: [DetectAnomaliesEntireSeries.java](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/anomalydetector/azure-ai-anomalydetector/src/samples/java/com/azure/ai/anomalydetector/DetectAnomaliesEntireSeries.java)\n\n### Streaming detection\n\nFor streaming/last detection in univariate anomaly detection, please go to this sample for better understanding the workflow: [DetectAnomaliesLastPoint.java](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/anomalydetector/azure-ai-anomalydetector/src/samples/java/com/azure/ai/anomalydetector/DetectAnomaliesLastPoint.java)\n\n### Detect change points\n\nFor change points detection in univariate anomaly detection, please go to this sample for better understanding the workflow: [DetectChangePoints.java](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/anomalydetector/azure-ai-anomalydetector/src/samples/java/com/azure/ai/anomalydetector/DetectChangePoints.java)\n\n### Multivariate Anomaly Detection Sample\n\nTo see how to use Anomaly Detector library to conduct Multivariate Anomaly Detection, see this [MultivariateSample.java](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/anomalydetector/azure-ai-anomalydetector/src/samples/java/com/azure/ai/anomalydetector/MultivariateSample.java).\n\n## Troubleshooting\n\n### Enabling Logging\n\nAzure SDKs for Java offer a consistent logging story to help aid in troubleshooting application errors and expedite\ntheir resolution. The logs produced will capture the flow of an application before reaching the terminal state to help\nlocate the root issue. View the [logging][logging] wiki for guidance about enabling logging.\n\n## Next steps\n\nThese code samples show common scenario operations with the Azure Anomaly Detector library. More samples can be found under the [samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/anomalydetector/azure-ai-anomalydetector/src/samples/java/com/azure/ai/anomalydetector) directory.\n\nFor more extensive documentation on Azure Anomaly Detector, see the [Anomaly Detector documentation](https://learn.microsoft.com/azure/cognitive-services/anomaly-detector/overview) on docs.microsoft.com.\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [cla.microsoft.com][cla].\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n[cla]: https://cla.microsoft.com\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n[samples]: src/samples/java/com/azure/ai/anomalydetector\n[source_code]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/anomalydetector/azure-ai-anomalydetector/src\n[samples_code]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/anomalydetector/azure-ai-anomalydetector/src/samples/\n[azure_subscription]: https://azure.microsoft.com/free/\n[api_reference_doc]: https://azure.github.io/azure-sdk-for-java/\n[product_documentation]: https://docs.microsoft.com/azure/cognitive-services/anomaly-detector/\n[cognitive_resource_cli]: https://docs.microsoft.com/azure/cognitive-services/cognitive-services-apis-create-account-cli\n[anomaly_detector_client_class]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/anomalydetector/azure-ai-anomalydetector/src/main/java/com/azure/ai/anomalydetector/AnomalyDetectorClient.java\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/identity/azure-identity\n[DefaultAzureCredential]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity/README.md#defaultazurecredential\n[custom_subdomain]: https://docs.microsoft.com/azure/cognitive-services/authentication#create-a-resource-with-a-custom-subdomain\n[register_aad_app]: https://docs.microsoft.com/azure/cognitive-services/authentication#assign-a-role-to-a-service-principal\n[aad_grant_access]: https://docs.microsoft.com/azure/cognitive-services/authentication#assign-a-role-to-a-service-principal\n[jdk_link]: https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable\n[package]: https://mvnrepository.com/artifact/com.azure/azure-ai-anomalydetector\n[samples_readme]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/anomalydetector/azure-ai-anomalydetector/src/samples/README.md\n[logging]: https://github.com/Azure/azure-sdk-for-java/wiki/Logging-with-Azure-SDK\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fanomalydetector%2Fazure-ai-anomalydetector%2FREADME.png)\n",
        "repo_name": "anomalydetector/azure-ai-anomalydetector",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/anomalydetector/azure-ai-anomalydetector",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure GraalVM performance testing configuration client library for Java\n\n## Getting started\n\n### Prerequisites\n- A [Java Development Kit (JDK)][jdk_link], version 8 or later.\n- [Azure Subscription][azure_subscription]\n- [GraalVM][graalvm]\n\n### Include the package\n\n[//]: # ({x-version-update-start;com.azure:azure-aot-graalvm-perf;current})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-aot-graalvm-perf</artifactId>\n    <version>1.0.0-beta.1</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n## Key concepts\n\n## Examples\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License\nAgreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution.\nFor details, visit [https://cla.microsoft.com](https://cla.microsoft.com).\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the\nPR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this\nonce across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact\n[opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\n<!-- LINKS -->\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n[jdk_link]: https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable\n[azure_subscription]: https://azure.microsoft.com/free\n[graalvm]: https://www.graalvm.org/downloads/\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Faot%2Fazure-aot-graalvm-perf%2FREADME.png)\n",
        "repo_name": "aot/azure-aot-graalvm-perf",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/aot/azure-aot-graalvm-perf",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure GraalVM samples client library for Java\n\n## Getting started\n\n### Prerequisites\n- A [Java Development Kit (JDK)][jdk_link], version 8 or later.\n- [Azure Subscription][azure_subscription]\n- [GraalVM][graalvm]\n### Include the package\n\n[//]: # ({x-version-update-start;com.azure:azure-aot-graalvm-samples;current})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-aot-graalvm-samples</artifactId>\n    <version>1.0.0-beta.1</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n## Key concepts\n\n## Examples\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License\nAgreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution.\nFor details, visit [https://cla.microsoft.com](https://cla.microsoft.com).\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the\nPR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this\nonce across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact\n[opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\n<!-- LINKS -->\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n[jdk_link]: https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable\n[azure_subscription]: https://azure.microsoft.com/free\n[graalvm]: https://www.graalvm.org/downloads/\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Faot%2Fazure-aot-graalvm-samples%2FREADME.png)\n",
        "repo_name": "aot/azure-aot-graalvm-samples",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/aot/azure-aot-graalvm-samples",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure GraalVM Netty Support client library for Java\n\n> **IMPORTANT** Please note that this package is deprecated and will no longer be updated. The necessary configuration files to support\n> native image compilation using GraalVM is now directly available on respective client libraries. It is no longer required\n> to add this package as a dependency to build native images with Azure SDK for Java. - Marked this library as deprecated. \n> Please refer to the [blog post](https://devblogs.microsoft.com/azure-sdk/announcing-graalvm-support-in-azure-sdk-for-java-and-spring-cloud-azure-libraries/) for more details on GraalVM support in Azure SDK for Java.\n\nThe Azure GraalVM Netty Support client library provides support for applications using\n[Azure client libraries](https://azure.github.io/azure-sdk/releases/latest/java.html) that take a dependency on\n[azure-core-http-netty](https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/core/azure-core-http-netty) to be\nbuilt as [GraalVM native images](https://www.graalvm.org/22.0/reference-manual/native-image/). The library contains all the necessary\n[configuration files](https://www.graalvm.org/22.0/reference-manual/native-image/BuildConfiguration/) and [GraalVM\nfeatures](https://www.graalvm.org/sdk/javadoc/index.html?org/graalvm/nativeimage/hosted/Feature.html) required to build\na native image of an application that uses Azure client libraries.\n\n**NOTE:**: This library is a preview and is intended to enable applications using Azure client libraries to quickly\nbuild and validate native images. However, this is not a stable, GA version and is not officially supported to use in production\nenvironments.\n\n## Getting started\n\n### Prerequisites\n- A [Java Development Kit (JDK)][jdk_link], version 8 or later.\n- [Azure Subscription][azure_subscription]\n- [GraalVM](https://www.graalvm.org/downloads/) version 22 or later.\n- [GraalVM Native Image](https://www.graalvm.org/22.0/reference-manual/native-image/)\n\n### Include the package\n\nInclude both the packages below:\n\n[//]: # ({x-version-update-start;com.azure:azure-aot-graalvm-support;current})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-aot-graalvm-support</artifactId>\n    <version>1.0.0-beta.3</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n[//]: # ({x-version-update-start;com.azure:azure-aot-graalvm-support-netty;current})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-aot-graalvm-support-netty</artifactId>\n    <version>1.0.0-beta.3</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n## Key concepts\n\nPlease refer to the [Key Concepts](https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/aot/azure-aot-graalvm-support#key-concepts) section of the azure-aot-graalvm-support library.\n\n## Examples\n\nPlease refer to the [Examples](https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/aot/azure-aot-graalvm-support#examples) section of the\n`azure-aot-graalvm-support` library.\n\n## Troubleshooting\nPlease refer to the [Troubleshooting](https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/aot/azure-aot-graalvm-support#troubleshooting) section of the\n`azure-aot-graalvm-support` library.\n\n## Next steps\nPlease refer to the [Next Steps](https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/aot/azure-aot-graalvm-support#next-steps) section of the\n`azure-aot-graalvm-support` library.\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License\nAgreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution.\nFor details, visit [https://cla.microsoft.com](https://cla.microsoft.com).\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the\nPR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this\nonce across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact\n[opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\n<!-- LINKS -->\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n[jdk_link]: https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable\n[azure_subscription]: https://azure.microsoft.com/free\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Faot%2Fazure-aot-graalvm-support-netty%2FREADME.png)\n",
        "repo_name": "aot/azure-aot-graalvm-support-netty",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/aot/azure-aot-graalvm-support-netty",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure GraalVM Support client library for Java\n\n> **IMPORTANT** Please note that this package is deprecated and will no longer be updated. The necessary configuration files to support\n> native image compilation using GraalVM is now directly available on respective client libraries. It is no longer required\n> to add this package as a dependency to build native images with Azure SDK for Java.\n> Please refer to the [blog post](https://devblogs.microsoft.com/azure-sdk/announcing-graalvm-support-in-azure-sdk-for-java-and-spring-cloud-azure-libraries/) for more details on GraalVM support in Azure SDK for Java.\n \nThe Azure GraalVM Support client library provides support for applications using [Azure client libraries](https://azure.github.io/azure-sdk/releases/latest/java.html) to be built as [GraalVM native\nimages](https://www.graalvm.org/22.0/reference-manual/native-image/). The library contains all the necessary\n[configuration files](https://www.graalvm.org/22.0/reference-manual/native-image/BuildConfiguration/) and [GraalVM\nfeatures](https://www.graalvm.org/sdk/javadoc/index.html?org/graalvm/nativeimage/hosted/Feature.html) required to build\na native image of an application that uses Azure client libraries.\n\n**NOTE:**: This library is a preview and is intended to enable applications using Azure client libraries to quickly\nbuild and validate native images. However, this is not a stable, GA version and is not officially supported to use in production\nenvironments.\n\n## Getting started\n\n### Prerequisites\n- A [Java Development Kit (JDK)][jdk_link], version 8 or later.\n- [Azure Subscription][azure_subscription]\n- [GraalVM](https://www.graalvm.org/downloads/) version 22 or later.\n- [GraalVM Native Image](https://www.graalvm.org/22.0/reference-manual/native-image/)\n\nFor more details, please refer to [Getting started with GraalVM](https://www.graalvm.org/22.0/docs/getting-started/)\ndocumentation.\n\n### Include the package\n\n[//]: # ({x-version-update-start;com.azure:azure-aot-graalvm-support;current})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-aot-graalvm-support</artifactId>\n    <version>1.0.0-beta.3</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\nAlso, include the `azure-aot-graalvm-support-netty` package to bring in the configuration files required for Netty HTTP\nclient.  For more details on this library, please refer to [this README](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/aot/azure-aot-graalvm-support-netty/README.md).\n\n[//]: # ({x-version-update-start;com.azure:azure-aot-graalvm-support-netty;current})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-aot-graalvm-support-netty</artifactId>\n    <version>1.0.0-beta.3</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n## Key concepts\n\n### Native Image creation\n\nNative Image is a technology to compile your Java application ahead of time into a native image which can run as a\nstandalone application. The native image created through this ahead-of-time compilation will include all the\nnecessary classes from the application, it's dependencies and any other natively linked JDK code. For more details\non creating the native image please refer to [building a native image](https://www.graalvm.org/22.0/reference-manual/native-image/#build-a-native-image) documentation.\n\n### GraalVM configuration files\n\nGraalVM is a high-performance runtime that creates native images by compiling the Java code ahead of time. Due to\nthis ahead-of-time compilation into a native image, the native image creation requires statically analyzing all\nclasses of the application and their dependencies to determine which classes and methods are reachable during the\napplication execution. However, there are scenarios where Java allows looking up classes, methods and fields at\nruntime through reflection. While GraalVM does a best-effort discovery of all classes ahead of time, it will not be\nable to detect all classes that are reflectively accessed. So, developers can provide configuration files that\ncontain details of all necessary classes that are reflectively accessed. This supplementary information is then used\nto create the native image and make these classes available at runtime.\n\nThis library provides all the necessary configuration files for using Azure client libraries.\n\n## Examples\n\n#### App Configuration\n- [Sample demonstrating the creation and use of App Configuration client](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/aot/azure-aot-graalvm-samples/src/main/java/com/azure/aot/graalvm/samples/appconfiguration/AppConfigurationSample.java)\n\nPlease refer to [Application Configuration](https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/appconfiguration/azure-data-appconfiguration) client library documentation for more details.\n\n#### Key Vault\n- [Sample demonstrating the creation and use of Key Vault Certificates client](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/aot/azure-aot-graalvm-samples/src/main/java/com/azure/aot/graalvm/samples/keyvault/certificates/KeyVaultCertificatesSample.java)\n- [Sample demonstrating the creation and use of Key Vault Keys client](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/aot/azure-aot-graalvm-samples/src/main/java/com/azure/aot/graalvm/samples/keyvault/keys/KeyVaultKeysSample.java)\n- [Sample demonstrating the creation and use of Key Vault Secrets client](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/aot/azure-aot-graalvm-samples/src/main/java/com/azure/aot/graalvm/samples/keyvault/secrets/KeyVaultSecretsSample.java)\n\nPlease refer to [Key Vault](https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/keyvault) client library documentation for more details.\n\n#### Storage Blob\n- [Sample demonstrating the creation and use of Storage Blob client](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/aot/azure-aot-graalvm-samples/src/main/java/com/azure/aot/graalvm/samples/storage/blob/StorageBlobSample.java)\n\nPlease refer to [Storage Blob](https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/storage/azure-storage-blob) client library documentation for more details.\n\n#### Event Hubs\n- [Sample demonstrating the creation and use of Event Hubs producer client](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/aot/azure-aot-graalvm-samples/src/main/java/com/azure/aot/graalvm/samples/eventhubs/EventHubsSample.java)\n\nPlease refer to [Event Hubs](https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/eventhubs/azure-messaging-eventhubs) client library documentation for more details.\n\n#### Form Recognizer\n- [Sample demonstrating the creation and use of Form Recognizer client](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/aot/azure-aot-graalvm-samples/src/main/java/com/azure/aot/graalvm/samples/formrecognizer/FormRecognizerSample.java)\n\nPlease refer to [Form Recognizer](https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/formrecognizer/azure-ai-formrecognizer) client library documentation for more details.\n\n#### Text Analytics\n- [Sample demonstrating the creation and use of Text Analytics client](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/aot/azure-aot-graalvm-samples/src/main/java/com/azure/aot/graalvm/samples/textanalytics/TextAnalyticsSample.java)\n\nPlease refer to [Text Analytics](https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/textanalytics/azure-ai-textanalytics) client library documentation for more details.\n\n## Troubleshooting\n\n## Next steps\nThe [azure-aot-graalvm-samples](https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/aot/azure-aot-graalvm-samples)\nlibrary consists of all above samples bundled into a single Maven project that can be compiled with `mvn clean\ninstall -Pnative` to build the native image and execute all the samples.\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License\nAgreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution.\nFor details, visit [https://cla.microsoft.com](https://cla.microsoft.com).\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the\nPR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this\nonce across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact\n[opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\n<!-- LINKS -->\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n[jdk_link]: https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable\n[azure_subscription]: https://azure.microsoft.com/free\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Faot%2Fazure-aot-graalvm-support%2FREADME.png)\n",
        "repo_name": "aot/azure-aot-graalvm-support",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/aot/azure-aot-graalvm-support",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager ApiManagement client library for Java\n\nAzure Resource Manager ApiManagement client library for Java.\n\nThis package contains Microsoft Azure SDK for ApiManagement Management SDK. ApiManagement Client. Package tag package-2021-08. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-apimanagement;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-apimanagement</artifactId>\n    <version>1.0.0-beta.3</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nApiManagementManager manager = ApiManagementManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/apimanagement/azure-resourcemanager-apimanagement/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n",
        "repo_name": "apimanagement/azure-resourcemanager-apimanagement",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/apimanagement/azure-resourcemanager-apimanagement",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager AppComplianceAutomation client library for Java\n\nAzure Resource Manager AppComplianceAutomation client library for Java.\n\nThis package contains Microsoft Azure SDK for AppComplianceAutomation Management SDK. App Compliance Automation Tool for Microsoft 365 API spec. Package tag package-2022-11-16-preview. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-appcomplianceautomation;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-appcomplianceautomation</artifactId>\n    <version>1.0.0-beta.1</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nAppComplianceAutomationManager manager = AppComplianceAutomationManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/appcomplianceautomation/azure-resourcemanager-appcomplianceautomation/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "appcomplianceautomation/azure-resourcemanager-appcomplianceautomation",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/appcomplianceautomation/azure-resourcemanager-appcomplianceautomation",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure App Configuration Performance test client library for Java\n\nRepresents Performance tests for Azure App Configuration SDK for Java.\n\n## Getting started\n\n### Prerequisites\n\n- A [Java Development Kit (JDK)][jdk_link], version 8 or later.\n- [Azure Subscription][azure_subscription]\n- [App Configuration Store][app_config_store]\n\n#### Setup for test resources\n\nYou will need the following environment variables for running the tests to access the live resources:\n\n```\nAZURE_APPCONFIG_CONNECTION_STRING=<app-configuration-connection-string>\n```\n\n### Adding the package to your product\n\n## Key concepts\n\n## Examples\n#### Executing the performance test\n1. Compile the performance project into a standalone jar using the command from the root of the perf project folder\n   ```\n   mvn clean package -f sdk\\appconfiguration\\azure-data-appconfiguration-perf\\pom.xml\n\n2. Execute the corresponding perf test in the project using the command.\n   ```\n   java -jar <path-to-packaged-jar-with-dependencies-from-step-1> <options-for-the-test>\n   java -jar sdk\\appconfiguration\\azure-data-appconfiguration-perf\\target\\azure-data-appconfiguration-perf-1.0.0-beta.1-jar-with-dependencies.jar listconfigurationsettings --warmup 1 --iterations 1 --parallel 6 --duration 10 --count 20\n\n#### Common perf test command line options for App Configuration\n- `--duration` - Number of seconds to run the main test for. Default is 10.\n- `--iterations` - Number of iterations of main test loop.\n- `--parallel` - Number of operations to execute in parallel,\n- `--warmup` - Duration of test warmup time in seconds before the test attributes are calculated.\n\nUse [PerfStressOptions](https://github.com/Azure/azure-sdk-for-java/blob/main/common/perf-test-core/src/main/java/com/azure/perf/test/core/PerfStressOptions.java)\nfor the other command line options that could be used.\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[app_config_store]: https://docs.microsoft.com/azure/azure-app-configuration/quickstart-dotnet-core-app#create-an-app-configuration-store\n[azure_subscription]: https://azure.microsoft.com/free\n[jdk_link]: https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable\n",
        "repo_name": "appconfiguration/azure-data-appconfiguration-perf",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/appconfiguration/azure-data-appconfiguration-perf",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure App Configuration client library for Java\nAzure App Configuration is a managed service that helps developers centralize their application configurations simply and securely.\n\nModern programs, especially programs running in a cloud, generally have many components that are distributed in nature. Spreading configuration settings across these components can lead to hard-to-troubleshoot errors during an application deployment. Use App Configuration to store all the settings for your application and secure their accesses in one place.\n\nUse the client library for App Configuration to create and manage application configuration settings.\n\n[Source code][source_code] | [Package (Maven)][package] | [API reference documentation][api_documentation]\n| [Product documentation][azconfig_docs] | [Samples][samples] | [Troubleshooting][troubleshooting]\n\n## Getting started\n\n### Prerequisites\n\n- A [Java Development Kit (JDK)][jdk_link], version 8 or later.\n- [Azure Subscription][azure_subscription]\n- [App Configuration Store][app_config_store]\n\n### Include the Package\n#### Include the BOM file\n\nPlease include the azure-sdk-bom to your project to take dependency on the General Availability (GA) version of the library. In the following snippet, replace the {bom_version_to_target} placeholder with the version number.\nTo learn more about the BOM, see the [AZURE SDK BOM README](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/boms/azure-sdk-bom/README.md).\n\n```xml\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>com.azure</groupId>\n            <artifactId>azure-sdk-bom</artifactId>\n            <version>{bom_version_to_target}</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n```\nand then include the direct dependency in the dependencies section without the version tag as shown below.\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-data-appconfiguration</artifactId>\n  </dependency>\n</dependencies>\n```\n\n#### Include direct dependency\nIf you want to take dependency on a particular version of the library that is not present in the BOM,\nadd the direct dependency to your project as follows.\n\n[//]: # ({x-version-update-start;com.azure:azure-data-appconfiguration;current})\n```xml\n<dependency>\n  <groupId>com.azure</groupId>\n  <artifactId>azure-data-appconfiguration</artifactId>\n  <version>1.4.5</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n#### Create an App Configuration Store\n\nTo create a Configuration Store you can use the Azure Portal or [Azure CLI][azure_cli].\n\nYou need to install the Azure App Configuration CLI extension first by executing the following command:\n\n```bash\naz extension add -n appconfig\n```\n\nAfter that, create the Configuration Store:\n\n```bash\naz appconfig create --name <config-store-name> --resource-group <resource-group-name> --location eastus\n```\n\n### Authenticate the client\n\nIn order to interact with the App Configuration service you'll need to create an instance of the Configuration Client \nclass. To make this possible you'll need the connection string of the Configuration Store. Alternatively, use AAD token\nto connect to the service.\n\n#### Use connection string\n\n##### Get credentials\n\nUse the [Azure CLI][azure_cli] snippet below to get the connection string from the Configuration Store.\n\n```bash\naz appconfig credential list --name <config-store-name>\n```\n\nAlternatively, get the connection string from the Azure Portal.\n\n##### Create a Configuration Client\n\nOnce you have the value of the connection string you can create the configuration client:\n\n```java readme-sample-createClient\nConfigurationClient configurationClient = new ConfigurationClientBuilder()\n    .connectionString(connectionString)\n    .buildClient();\n```\n\nor\n\n```java readme-sample-createAsyncClient\nConfigurationAsyncClient configurationClient = new ConfigurationClientBuilder()\n    .connectionString(connectionString)\n    .buildAsyncClient();\n```\n\n#### Use AAD token\n\nHere we demonstrate using [DefaultAzureCredential][default_cred_ref]\nto authenticate as a service principal. However, the configuration client\naccepts any [azure-identity][azure_identity] credential. See the\n[azure-identity][azure_identity] documentation for more information about other\ncredentials.\n\n##### Create a service principal (optional)\nThis [Azure CLI][azure_cli] snippet shows how to create a\nnew service principal. Before using it, replace \"your-application-name\" with\nthe appropriate name for your service principal.\n\nCreate a service principal:\n```bash\naz ad sp create-for-rbac --name http://my-application --skip-assignment\n```\n\nOutput:\n```json\n {\n     \"appId\": \"generated app id\",\n     \"displayName\": \"my-application\",\n     \"name\": \"http://my-application\",\n     \"password\": \"random password\",\n     \"tenant\": \"tenant id\"\n }\n```\n\nUse the output to set **AZURE_CLIENT_ID** (\"appId\" above), **AZURE_CLIENT_SECRET**\n(\"password\" above) and **AZURE_TENANT_ID** (\"tenant\" above) environment variables.\nThe following example shows a way to do this in Bash:\n```bash\nexport AZURE_CLIENT_ID=\"generated app id\"\nexport AZURE_CLIENT_SECRET=\"random password\"\nexport AZURE_TENANT_ID=\"tenant id\"\n```\n\nAssign one of the applicable [App Configuration roles][app_config_role] to the service principal.\n\n##### Create a client\nOnce the **AZURE_CLIENT_ID**, **AZURE_CLIENT_SECRET** and\n**AZURE_TENANT_ID** environment variables are set,\n[DefaultAzureCredential][default_cred_ref] will be able to authenticate the\nconfiguration client.\n\nConstructing the client also requires your configuration store's URL, which you can\nget from the Azure CLI or the Azure Portal. In the Azure Portal, the URL can be found listed as the service \"Endpoint\".\n\n```java readme-sample-aadAuthentication\nDefaultAzureCredential credential = new DefaultAzureCredentialBuilder().build();\nConfigurationClient configurationClient = new ConfigurationClientBuilder()\n    .credential(credential)\n    .endpoint(endpoint)\n    .buildClient();\n```\n\n## Key concepts\n\n### Configuration Setting\n\nA configuration setting is the fundamental resource within a configuration store. In its simplest form it is a key and a value. However, there are additional properties such as the modifiable content type and tags fields that allow the value to be interpreted or associated in different ways.\n\nThe Label property of a configuration setting provides a way to separate configuration settings into different dimensions. These dimensions are user defined and can take any form. Some common examples of dimensions to use for a label include regions, semantic versions, or environments. Many applications have a required set of configuration keys that have varying values as the application exists across different dimensions. For example, MaxRequests may be 100 in \"NorthAmerica\", and 200 in \"WestEurope\". By creating a configuration setting named MaxRequests with a label of \"NorthAmerica\" and another, only with a different value, in the \"WestEurope\" label, a solution can be achieved that allows the application to seamlessly retrieve Configuration Settings as it runs in these two dimensions.\n\n### Configuration Client\n\nThe client performs the interactions with the App Configuration service, getting, setting, deleting, and selecting configuration settings. An asynchronous, `ConfigurationAsyncClient`, and synchronous, `ConfigurationClient`, client exists in the SDK allowing for selection of a client based on an application's use case.\n\nAn application that needs to retrieve startup configurations is better suited using the synchronous client, for example setting up a SQL connection.\n\n```java readme-sample-sqlExample\nConfigurationClient configurationClient = new ConfigurationClientBuilder()\n    .connectionString(connectionString)\n    .buildClient();\n\n// urlLabel is optional\nString url = configurationClient.getConfigurationSetting(urlKey, urlLabel).getValue();\nConnection conn = null;\ntry {\n    conn = DriverManager.getConnection(url);\n} catch (SQLException ex) {\n    System.out.printf(\"Failed to get connection using url %s\", url);\n} finally {\n    if (conn != null) {\n        try {\n            conn.close();\n        } catch (SQLException ex) {\n            System.out.printf(\"Failed to close connection, url %s\", url);\n        }\n    }\n}\n```\n\nAn application that has a large set of configurations that it needs to periodically update is be better suited using the asynchronous client, for example all settings with a specific label are periodically updated.\n\n```java readme-sample-listConfigurationsExample\nConfigurationAsyncClient configurationClient = new ConfigurationClientBuilder()\n    .connectionString(connectionString)\n    .buildAsyncClient();\n\nconfigurationClient.listConfigurationSettings(new SettingSelector().setLabelFilter(periodicUpdateLabel))\n    .subscribe(setting -> updateConfiguration(setting));\n```\n\n## Examples\n\nThe following sections provide several code snippets covering some of the most common configuration service tasks, including:\nFor \"Feature Flag\" and \"Secret Reference\" configuration settings, see [samples][samples_readme] for more detail.\n\n### Create a Configuration Client\n\nCreate a configuration client by using `ConfigurationClientBuilder` by passing connection string.\n\n```java readme-sample-createClient\nConfigurationClient configurationClient = new ConfigurationClientBuilder()\n    .connectionString(connectionString)\n    .buildClient();\n```\n\n### Create a Configuration Setting\n\nCreate a configuration setting to be stored in the configuration store. There are two ways to store a configuration setting:\n\n- `addConfigurationSetting` creates a setting only if the setting does not already exist in the store.\n\n```java readme-sample-addConfigurationSetting\nConfigurationSetting setting = configurationClient.addConfigurationSetting(\"new_key\", \"new_label\", \"new_value\");\n```\n\nOr\n\n- `setConfigurationSetting` creates a setting if it doesn't exist or overrides an existing setting.\n\n```java readme-sample-setConfigurationSetting\nConfigurationSetting setting = configurationClient.setConfigurationSetting(\"some_key\", \"some_label\", \"some_value\");\n```\n\nCreate a Feature Flag configuration setting or Secrete Reference configuration setting to be stored in the\nconfiguration store. \n\n```java readme-sample-addFeatureFlagConfigurationSetting\nString key = \"some_key\";\nString filterName = \"{filter_name}\"; // such as \"Microsoft.Percentage\"\nString filterParameterKey = \"{filter_parameter_key}\"; // \"Value\"\nObject filterParameterValue = 30; // Any value. Could be String, primitive value, or Json Object\nFeatureFlagFilter percentageFilter = new FeatureFlagFilter(filterName)\n                                         .addParameter(filterParameterKey, filterParameterValue);\nFeatureFlagConfigurationSetting featureFlagConfigurationSetting =\n    new FeatureFlagConfigurationSetting(key, true)\n        .setClientFilters(Arrays.asList(percentageFilter));\n\nFeatureFlagConfigurationSetting setting = (FeatureFlagConfigurationSetting)\n    configurationClient.addConfigurationSetting(featureFlagConfigurationSetting);\n```\n```java readme-sample-addSecretReferenceConfigurationSetting\nString key = \"{some_key}\";\nString keyVaultReference = \"{key_vault_reference}\";\n\nSecretReferenceConfigurationSetting referenceConfigurationSetting =\n    new SecretReferenceConfigurationSetting(key, keyVaultReference);\n\nSecretReferenceConfigurationSetting setting = (SecretReferenceConfigurationSetting)\n    configurationClient.addConfigurationSetting(referenceConfigurationSetting);\n```\n\n### Retrieve a Configuration Setting\n\nRetrieve a previously stored configuration setting by calling `getConfigurationSetting`.\n\n```java readme-sample-getConfigurationSetting\nConfigurationSetting setting = configurationClient.setConfigurationSetting(\"some_key\", \"some_label\", \"some_value\");\nConfigurationSetting retrievedSetting = configurationClient.getConfigurationSetting(\"some_key\", \"some_label\");\n```\n\nFor conditional request, if you want to conditionally fetch a configuration setting, set `ifChanged` to true. \nWhen `ifChanged` is true, the configuration setting is only retrieved if it is different from the given `setting`. \nThis is determined by comparing the ETag of the `setting` to the one in the service to see if they are the same or not.\nIf the ETags are not the same, it means the configuration setting is different, and its value is retrieved.\n\n```java readme-sample-getConfigurationSettingConditionally\nConfigurationSetting setting = configurationClient.setConfigurationSetting(\"some_key\", \"some_label\", \"some_value\");\nResponse<ConfigurationSetting> settingResponse = configurationClient.getConfigurationSettingWithResponse(setting, null, true, Context.NONE);\n```\n\nRetrieve a Feature Flag configuration setting or Secrete Reference configuration setting in the configuration store.\n\n```java readme-sample-getFeatureFlagConfigurationSetting\nFeatureFlagConfigurationSetting setting = (FeatureFlagConfigurationSetting)\n    configurationClient.getConfigurationSetting(featureFlagConfigurationSetting);\n```\n```java readme-sample-getSecretReferenceConfigurationSetting\nSecretReferenceConfigurationSetting setting = (SecretReferenceConfigurationSetting)\n    configurationClient.getConfigurationSetting(referenceConfigurationSetting);\n```\n\n### Update an existing Configuration Setting\n\nUpdate an existing configuration setting by calling `setConfigurationSetting`.\n\n```java readme-sample-updateConfigurationSetting\nConfigurationSetting setting = configurationClient.setConfigurationSetting(\"some_key\", \"some_label\", \"some_value\");\nConfigurationSetting updatedSetting = configurationClient.setConfigurationSetting(\"some_key\", \"some_label\", \"new_value\");\n```\n\nFor conditional request, if you want to conditionally update a configuration setting, set the `ifUnchanged` parameter to\ntrue. When `ifUnchanged` is true, the configuration setting is only updated if it is same as the given `setting`.\nThis is determined by comparing the ETag of the `setting` to the one in the service to see if they are the same or not.\nIf the ETag are the same, it means the configuration setting is same, and its value is updated.\n\n```java readme-sample-updateConfigurationSettingConditionally\nConfigurationSetting setting = configurationClient.setConfigurationSetting(\"some_key\", \"some_label\", \"some_value\");\nResponse<ConfigurationSetting> settingResponse = configurationClient.setConfigurationSettingWithResponse(setting, true, Context.NONE);\n```\n\nUpdate a Feature Flag configuration setting or Secrete Reference configuration setting in the configuration store.\n\n```java readme-sample-updateFeatureFlagConfigurationSetting\nFeatureFlagConfigurationSetting setting = (FeatureFlagConfigurationSetting)\n    configurationClient.setConfigurationSetting(featureFlagConfigurationSetting);\n```\n```java readme-sample-updateSecretReferenceConfigurationSetting\nSecretReferenceConfigurationSetting setting = (SecretReferenceConfigurationSetting)\n    configurationClient.setConfigurationSetting(referenceConfigurationSetting);\n```\n\n### Delete a Configuration Setting\n\nDelete an existing configuration setting by calling `deleteConfigurationSetting`.\n\n```java readme-sample-deleteConfigurationSetting\nConfigurationSetting setting = configurationClient.setConfigurationSetting(\"some_key\", \"some_label\", \"some_value\");\nConfigurationSetting deletedSetting = configurationClient.deleteConfigurationSetting(\"some_key\", \"some_label\");\n```\nFor conditional request, if you want to conditionally delete a configuration setting, set the `ifUnchanged` parameter \nto true. When `ifUnchanged` parameter to true. When `ifUnchanged` is true, the configuration setting is only deleted if \nit is same as the given `setting`. This is determined by comparing the ETag of the `setting` to the one in the service \nto see if they are the same or not. If the ETag are same, it means the configuration setting is same, and its value is deleted.\n\n```java readme-sample-deleteConfigurationSettingConditionally\nConfigurationSetting setting = configurationClient.setConfigurationSetting(\"some_key\", \"some_label\", \"some_value\");\nResponse<ConfigurationSetting> settingResponse = configurationClient.deleteConfigurationSettingWithResponse(setting, true, Context.NONE);\n```\n\nDelete a Feature Flag configuration setting or Secrete Reference configuration setting in the configuration store.\n\n```java readme-sample-deleteFeatureFlagConfigurationSetting\nFeatureFlagConfigurationSetting setting = (FeatureFlagConfigurationSetting)\n    configurationClient.deleteConfigurationSetting(featureFlagConfigurationSetting);\n```\n```java readme-sample-deleteSecretReferenceConfigurationSetting\nSecretReferenceConfigurationSetting setting = (SecretReferenceConfigurationSetting)\n    configurationClient.deleteConfigurationSetting(referenceConfigurationSetting);\n```\n\n### List Configuration Settings with multiple keys\n\nList multiple configuration settings by calling `listConfigurationSettings`.\nPass a null `SettingSelector` into the method if you want to fetch all the configuration settings and their fields.\n\n```java readme-sample-listConfigurationSetting\nString key = \"some_key\";\nString key2 = \"new_key\";\nconfigurationClient.setConfigurationSetting(key, \"some_label\", \"some_value\");\nconfigurationClient.setConfigurationSetting(key2, \"new_label\", \"new_value\");\nSettingSelector selector = new SettingSelector().setKeyFilter(key + \",\" + key2);\nPagedIterable<ConfigurationSetting> settings = configurationClient.listConfigurationSettings(selector);\n```\n\n### List revisions of multiple Configuration Settings\n\nList all revisions of a configuration setting by calling `listRevisions`.\n\n```java readme-sample-listRevisions\nString key = \"revisionKey\";\nconfigurationClient.setConfigurationSetting(key, \"some_label\", \"some_value\");\nconfigurationClient.setConfigurationSetting(key, \"new_label\", \"new_value\");\nSettingSelector selector = new SettingSelector().setKeyFilter(key);\nPagedIterable<ConfigurationSetting> settings = configurationClient.listRevisions(selector);\n```\n\n### Set a Configuration Setting to read only\n\nSet a configuration setting to read-only status.\n\n```java readme-sample-setReadOnly\nconfigurationClient.setConfigurationSetting(\"some_key\", \"some_label\", \"some_value\");\nConfigurationSetting setting = configurationClient.setReadOnly(\"some_key\", \"some_label\", true);\n```\n### Clear read only from a Configuration Setting\n\nClear read-only from a configuration setting.\n\n```java readme-sample-clearReadOnly\nConfigurationSetting setting = configurationClient.setReadOnly(\"some_key\", \"some_label\", false);\n```\n\n### Create a client with Proxy Options\n\nCreate a configuration client with proxy options.\n\n```java readme-sample-createClientWithProxyOption\n// Proxy options\nfinal String hostname = \"{your-host-name}\";\nfinal int port = 447; // your port number\n\nProxyOptions proxyOptions = new ProxyOptions(ProxyOptions.Type.HTTP,\n    new InetSocketAddress(hostname, port));\nHttpClient httpClient = new NettyAsyncHttpClientBuilder()\n    .proxy(proxyOptions)\n    .build();\nConfigurationAsyncClient configurationAsyncClient = new ConfigurationClientBuilder()\n    .connectionString(\"{your_connection_string}\")\n    .httpClient(httpClient)\n    .buildAsyncClient();\n```\n\n## Troubleshooting\n\n### General\n\nWhen you interact with App Configuration using this Java client library, errors returned by the service correspond to the same HTTP status codes returned for [REST API][rest_api] requests. For example, if you try to retrieve a configuration setting that doesn't exist in your configuration store, a `404` error is returned, indicating `Not Found`.\n\nApp Configuration provides a way to define customized headers through `Context` object in the public API. \n\n```java readme-sample-customHeaders\n// Add your headers\nHttpHeaders headers = new HttpHeaders();\nheaders.set(\"my-header1\", \"my-header1-value\");\nheaders.set(\"my-header2\", \"my-header2-value\");\nheaders.set(\"my-header3\", \"my-header3-value\");\n// Call API by passing headers in Context.\nconfigurationClient.addConfigurationSettingWithResponse(\n    new ConfigurationSetting().setKey(\"key\").setValue(\"value\"),\n    new Context(AddHeadersFromContextPolicy.AZURE_REQUEST_HTTP_HEADERS_KEY, headers));\n// Above three HttpHeader will be added in outgoing HttpRequest.\n```\nFor more detail information, check out the [AddHeadersFromContextPolicy][add_headers_from_context_policy]\n\n### Default HTTP Client\nAll client libraries by default use the Netty HTTP client. Adding the above dependency will automatically configure \nthe client library to use the Netty HTTP client. Configuring or changing the HTTP client is detailed in the\n[HTTP clients wiki](https://github.com/Azure/azure-sdk-for-java/wiki/HTTP-clients).\n\n### Default SSL library\nAll client libraries, by default, use the Tomcat-native Boring SSL library to enable native-level performance for SSL \noperations. The Boring SSL library is an uber jar containing native libraries for Linux / macOS / Windows, and provides \nbetter performance compared to the default SSL implementation within the JDK. For more information, including how to \nreduce the dependency size, refer to the [performance tuning][performance_tuning] section of the wiki.\n\n## Next steps\n\n- Samples are explained in detail [here][samples_readme].\n- [Quickstart: Create a Java Spring app with App Configuration][spring_quickstart]\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a [Contributor License Agreement (CLA)][cla] declaring that you have the right to, and actually do, grant us the rights to use your contribution.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n[add_headers_from_context_policy]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core/src/main/java/com/azure/core/http/policy/AddHeadersFromContextPolicy.java\n[api_documentation]: https://aka.ms/java-docs\n[app_config_store]: https://docs.microsoft.com/azure/azure-app-configuration/quickstart-dotnet-core-app#create-an-app-configuration-store\n[app_config_role]: https://docs.microsoft.com/azure/azure-app-configuration/rest-api-authorization-azure-ad#roles\n[azconfig_docs]: https://docs.microsoft.com/azure/azure-app-configuration\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/identity/azure-identity\n[azure_subscription]: https://azure.microsoft.com/free\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n[default_cred_ref]: https://azuresdkdocs.blob.core.windows.net/$web/java/azure-identity/1.0.1/com/azure/identity/DefaultAzureCredential.html\n[jdk_link]: https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable\n[maven]: https://maven.apache.org/\n[package]: https://search.maven.org/artifact/com.azure/azure-data-appconfiguration\n[performance_tuning]: https://github.com/Azure/azure-sdk-for-java/wiki/Performance-Tuning\n[rest_api]: https://github.com/Azure/AppConfiguration#rest-api-reference\n[samples]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/appconfiguration/azure-data-appconfiguration/src/samples/java/com/azure/data/appconfiguration\n[samples_readme]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/appconfiguration/azure-data-appconfiguration/src/samples/README.md\n[source_code]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/appconfiguration/azure-data-appconfiguration/src\n[spring_quickstart]: https://docs.microsoft.com/azure/azure-app-configuration/quickstart-java-spring-app\n[troubleshooting]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/appconfiguration/azure-data-appconfiguration/TROUBLESHOOTING.md\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fappconfiguration%2Fazure-data-appconfiguration%2FREADME.png)\n",
        "repo_name": "appconfiguration/azure-data-appconfiguration",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/appconfiguration/azure-data-appconfiguration",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager AppConfiguration client library for Java\n\nAzure Resource Manager AppConfiguration client library for Java.\n\nThis package contains Microsoft Azure SDK for AppConfiguration Management SDK.  Package tag package-2023-03-01. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-appconfiguration;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-appconfiguration</artifactId>\n    <version>1.0.0-beta.7</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nAppConfigurationManager manager = AppConfigurationManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/appconfiguration/azure-resourcemanager-appconfiguration/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "appconfiguration/azure-resourcemanager-appconfiguration",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/appconfiguration/azure-resourcemanager-appconfiguration",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager ContainerAppsApi client library for Java\n\nAzure Resource Manager ContainerAppsApi client library for Java.\n\nThis package contains Microsoft Azure SDK for ContainerAppsApi Management SDK.  Package tag package-preview-2022-11. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-appcontainers;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-appcontainers</artifactId>\n    <version>1.0.0-beta.5</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nContainerAppsApiManager manager = ContainerAppsApiManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/appcontainers/azure-resourcemanager-appcontainers/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "appcontainers/azure-resourcemanager-appcontainers",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/appcontainers/azure-resourcemanager-appcontainers",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager ApplicationInsights client library for Java\n\nAzure Resource Manager ApplicationInsights client library for Java.\n\nThis package contains Microsoft Azure SDK for ApplicationInsights Management SDK. Composite Swagger for Application Insights Management Client. Package tag package-2022-04-01. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-applicationinsights;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-applicationinsights</artifactId>\n    <version>1.0.0-beta.5</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nApplicationInsightsManager manager = ApplicationInsightsManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/applicationinsights/azure-resourcemanager-applicationinsights/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n",
        "repo_name": "applicationinsights/azure-resourcemanager-applicationinsights",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/applicationinsights/azure-resourcemanager-applicationinsights",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Application Insights Query client library for Java\n\n> A newer package [com.azure:azure-monitor-query](https://search.maven.org/artifact/com.azure/azure-monitor-query)\n> for [Azure Application Insights Query](https://azure.microsoft.com/services/monitor/) is available as of October 2021. While this\n> package will continue to receive critical bug fixes and security fixes, we strongly encourage you to upgrade to the new package.\n> Read the [migration guide](https://aka.ms/azsdk/java/migrate/monitorquery) for more details.\n\n\nThis project provides client tools or utilities in Java to query data in [Azure Application Insights](https://azure.microsoft.com/services/application-insights/). For reference documentation on classes and models, see the [Azure SDK for Java reference](https://docs.microsoft.com/java/api/overview/azure/?view=azure-java-stable). \n\nAzure Application Insights provides SDKs for telemetry collection and enables deep analytics via a [rich query language](https://docs.microsoft.com/azure/azure-monitor/logs/log-analytics-overview). This library provides query access to data already stored in Application Insights. To start monitoring a Java application, see the [quickstart](https://docs.microsoft.com/azure/application-insights/app-insights-java-quick-start). \n\n## Examples\n\nPlease see [here](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/applicationinsights/microsoft-azure-applicationinsights-query/samples/src/main/java/com/microsoft/azure/applicationinsights/query/samples) for code examples using this library. \n\n## Download\n\n### Latest release\n\nTo get the binaries of the official Microsoft Azure Log Analytics SDK as distributed by Microsoft, ready for use within your project, you can use Maven.\n\n[//]: # ({x-version-update-start;com.microsoft.azure:azure-applicationinsights-query;current})\n```xml\n<dependency>\n    <groupId>com.microsoft.azure</groupId>\n    <artifactId>azure-applicationinsights-query</artifactId>\n    <version>1.0.0-Preview-2</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n## Prerequisites\n\n- A Java Developer Kit (JDK), v 1.7 or later\n- Maven\n\n## Help and Issues\n\nIf you encounter any bugs with this library, open an issue via [Issues](https://github.com/Azure/azure-sdk-for-java/issues) or see [StackOverflow for Azure Java SDK](https://stackoverflow.com/questions/tagged/azure-java-sdk).\n\n## Contribute Code\n\nIf you would like to become an active contributor to this project please follow the instructions provided in [Microsoft Azure Projects Contribution Guidelines](https://azure.github.io/guidelines.html).\n\n1. Fork it\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create new Pull Request\n\n## More information\n- [Azure Java SDKs](https://docs.microsoft.com/java/azure/)\n- If you don't have a Microsoft Azure subscription you can get a FREE trial account [here](https://go.microsoft.com/fwlink/?LinkId=330212)\n\n---\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fapplicationinsights%2Fmicrosoft-azure-applicationinsights-query%2FREADME.png)\n",
        "repo_name": "applicationinsights/microsoft-azure-applicationinsights-query",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/applicationinsights/microsoft-azure-applicationinsights-query",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager Attestation client library for Java\n\nAzure Resource Manager Attestation client library for Java.\n\nThis package contains Microsoft Azure SDK for Attestation Management SDK. Various APIs for managing resources in attestation service. This primarily encompasses per-provider management. Package tag package-2020-10-01. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-attestation;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-attestation</artifactId>\n    <version>1.0.0-beta.2</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nAttestationManager manager = AttestationManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/attestation/azure-resourcemanager-attestation/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "attestation/azure-resourcemanager-attestation",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/attestation/azure-resourcemanager-attestation",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Attestation client library for Java\n\nMicrosoft Azure Attestation (preview) is a unified solution for remotely verifying the trustworthiness of a platform and integrity of the binaries running inside it. The service supports attestation of the platforms backed by Trusted Platform Modules (TPMs) alongside the ability to attest to the state of Trusted Execution Environments (TEEs) such as Intel\u00ae Software Guard Extensions (SGX) enclaves and Virtualization-based Security (VBS) enclaves.\n\nAttestation is a process for demonstrating that software binaries were properly instantiated on a trusted platform. Remote relying parties can then gain confidence that only such intended software is running on trusted hardware. Azure Attestation is a unified customer-facing service and framework for attestation.\n\nAzure Attestation enables cutting-edge security paradigms such as Azure Confidential computing and Intelligent Edge protection. Customers have been requesting the ability to independently verify the location of a machine, the posture of a virtual machine (VM) on that machine, and the environment within which enclaves are running on that VM. Azure Attestation will empower these and many additional customer requests.\n\nAzure Attestation receives evidence from compute entities, turns them into a set of claims, validates them against configurable policies, and produces cryptographic proofs for claims-based applications (for example, relying parties and auditing authorities).\n\n> NOTE: This is a preliminary SDK for the Microsoft Azure Attestation service. It provides all the essential functionality to access the Azure Attestation service, but requires a significant amount of infrastructure to work correctly.\n\n## Getting started\n\n### Include the package\n\n#### Include the BOM file\n\nPlease include the azure-sdk-bom to your project to take dependency on the General Availability (GA) version of the library. In the following snippet, replace the {bom_version_to_target} placeholder with the version number.\nTo learn more about the BOM, see the [AZURE SDK BOM README](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/boms/azure-sdk-bom/README.md).\n\n```xml\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>com.azure</groupId>\n            <artifactId>azure-sdk-bom</artifactId>\n            <version>{bom_version_to_target}</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n```\nand then include the direct dependency in the dependencies section without the version tag as shown below.\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-security-attestation</artifactId>\n  </dependency>\n</dependencies>\n```\n\n#### Include direct dependency\nIf you want to take dependency on a particular version of the library that is not present in the BOM,\nadd the direct dependency to your project as follows.\n\n[//]: # ({x-version-update-start;com.azure:azure-security-attestation;current})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-security-attestation</artifactId>\n    <version>1.1.13</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Prerequisites\n\n- A [Java Development Kit (JDK)][jdk_link], version 8 or later.\n- [Azure Subscription][azure_subscription]\n- An existing [Azure Attestation instance][azure_attestation]. If you need to create an attestation instance, you can use the [Azure Cloud Shell][azure_cloud_shell] to create one with this Azure CLI command. Replace `<your-resource-group-name>` and `<your-instance-name>` with your own, unique names:\n\n```bash\naz attestation create --resource-group <your-resource-group-name> --name <your-instance-name>\n```\n\n### Authenticate the client\n\nIn order to interact with the Azure Attestation service, your client must present an Azure Active Directory bearer token to the service.\n\nThe simplest way of providing a bearer token is to use the  `DefaultAzureCredential` authentication method by providing client secret credentials is being used in this getting started section, but you can find more ways to authenticate with [azure-identity][azure_identity].\n\n## Key concepts\n\nThe Microsoft Azure Attestation service runs in two separate modes: \"Isolated\" and \"AAD\". When the service is running in \"Isolated\" mode, the customer needs to\nprovide additional information beyond their authentication credentials to verify that they are authorized to modify the state of an attestation instance.\n\nThere are four major client types provided in this preview SDK:\n\n- [SGX and TPM enclave attestation.](#attestation)\n- [MAA Attestation Token signing certificate discovery and validation.](#attestation-token-signing-certificate-discovery-and-validation)  \n- [Attestation Policy management.](#policy-management)\n- [Attestation policy management certificate management](#policy-management-certificate-management) (yes, policy management management).\n\nEach attestation instance operates in one of two separate modes of operation:\n\n- AAD mode.\n- Isolated mode\n\nIn \"AAD\" mode, access to the service is controlled solely by Azure Role Based Access Control.  In \"Isolated\" mode,\nthe client is expected to provide additional evidence to prove that the client is authorized\nto modify the service.\n\nFinally, each region in which the Microsoft Azure Attestation service is available supports a \"shared\" instance, which\ncan be used to attest SGX enclaves which only need verification against the azure baseline (there are no policies applied to the shared instance). TPM attestation is not available in the shared instance.\nWhile the shared instance requires AAD authentication, it does not have any RBAC policies - any customer with a valid AAD bearer token can attest using the shared instance.\n\n### Attestation\n\nSGX or TPM attestation is the process of validating evidence collected from\na trusted execution environment to ensure that it meets both the Azure baseline for that environment and customer defined policies applied to that environment.\n\n### Attestation token signing certificate discovery and validation\n\nMost responses from the MAA service are expressed in the form of a JSON Web Token. This token will be signed by a signing certificate\nissued by the MAA service for the specified instance. If the MAA service instance is running in a region where the service runs in an SGX enclave, then\nthe certificate issued by the server can be verified using the [oe_verify_attestation_certificate() API](https://openenclave.github.io/openenclave/api/enclave_8h_a3b75c5638360adca181a0d945b45ad86.html).\n\n### Policy Management\n\nEach attestation service instance has a policy applied to it which defines additional criteria which the customer has defined.\n\nFor more information on attestation policies, see [Attestation Policy](https://docs.microsoft.com/azure/attestation/author-sign-policy)\n\n### Policy Management certificate management\n\nWhen an attestation instance is running in \"Isolated\" mode, the customer who created the instance will have provided\na policy management certificate at the time the instance is created. All policy modification operations require that the customer sign\nthe policy data with one of the existing policy management certificates. The Policy Management Certificate Management APIs enable\nclients to add, remove or enumerate the policy management certificates.\n\n## Examples\n\n- [Instantiate a synchronous attestation client](#instantiate-a-synchronous-attestation-client)\n- [Retrieve token validation certificates](#retrieve-token-validation-certificates)\n- [Attest an SGX enclave](#attest-an-sgx-enclave)\n- [Instantiate a synchronous administrative client](#instantiate-a-synchronous-administrative-client)\n- [Get attestation policy](#get-attestation-policy)\n- [Set unsigned attestation policy](#set-unsigned-attestation-policy)\n- [Set signed attestation policy](#set-signed-attestation-policy)\n- [List policy management certificates](#list-policy-management-certificates)\n- [Add policy management certificate](#add-policy-management-certificate)\n- [Remove attestation signing certificate](#remove-attestation-signing-certificate)\n\n### Instantiate a synchronous attestation client\n\nThe `AttestationClientBuilder` class is used to create instances of the attestation client:\n\n```java readme-sample-create-synchronous-client\nAttestationClientBuilder attestationBuilder = new AttestationClientBuilder();\n// Note that the \"attest\" calls do not require authentication.\nAttestationClient client = attestationBuilder\n    .endpoint(endpoint)\n    .buildClient();\n```\n\n### Retrieve token validation certificates\n\nUse `listAttestationSigners` to retrieve the set of certificates, which can be used to validate the token returned from the attestation service.\nNormally, this information is not required as the attestation SDK will perform the validation as a part of the interaction with the\nattestation service, however the APIs are provided for completeness and to facilitate customer's independently validating\nattestation results.\n\n```java readme-sample-getSigningCertificates\nAttestationSignerCollection certs = client.listAttestationSigners();\n\ncerts.getAttestationSigners().forEach(cert -> {\n    System.out.println(\"Found certificate.\");\n    if (cert.getKeyId() != null) {\n        System.out.println(\"    Certificate Key ID: \" + cert.getKeyId());\n    } else {\n        System.out.println(\"    Signer does not have a Key ID\");\n    }\n    cert.getCertificates().forEach(chainElement -> {\n        System.out.println(\"        Cert Subject: \" + chainElement.getSubjectDN().getName());\n        System.out.println(\"        Cert Issuer: \" + chainElement.getIssuerDN().getName());\n    });\n});\n```\n\n### Attest an SGX Enclave\n\nUse the `attestSgxEnclave` method to attest an SGX enclave.\n\n```java readme-sample-attest-sgx-enclave\nBinaryData decodedRuntimeData = BinaryData.fromBytes(SampleCollateral.getRunTimeData());\nBinaryData sgxQuote = BinaryData.fromBytes(SampleCollateral.getSgxEnclaveQuote());\n\n// Attest evidence from an OpenEnclave enclave specifying runtime data which should be\n// interpreted as binary data.\nAttestationResult result = client.attestSgxEnclave(new AttestationOptions(sgxQuote)\n    .setRunTimeData(\n        new AttestationData(decodedRuntimeData, AttestationDataInterpretation.BINARY)));\n\nString issuer = result.getIssuer();\n\nSystem.out.println(\"Attest Sgx Enclave completed. Issuer: \" + issuer);\nSystem.out.printf(\"Runtime Data Length: %d\\n\", result.getEnclaveHeldData().getLength());\n```\n\n### Instantiate a synchronous administrative client\n\nAll administrative clients are authenticated.\n\n```java readme-sample-create-admin-client\nAttestationAdministrationClientBuilder attestationBuilder = new AttestationAdministrationClientBuilder();\n// Note that the \"policy\" calls require authentication.\nAttestationAdministrationClient client = attestationBuilder\n    .endpoint(endpoint)\n    .credential(new DefaultAzureCredentialBuilder().build())\n    .buildClient();\n```\n\n### Get attestation policy\n\nUse the `getAttestationPolicy` API to retrieve the current attestation policy for a given TEE.\n\n```java readme-sample-getCurrentPolicy\nString currentPolicy = client.getAttestationPolicy(AttestationType.OPEN_ENCLAVE);\nSystem.out.printf(\"Current policy for OpenEnclave is: %s\\n\", currentPolicy);\n```\n\n### Set unsigned attestation policy\n\nWhen an attestation instance is in AAD mode, the caller can use a convenience method to set an unsigned attestation\npolicy on the instance.\n\n```java readme-sample-set-unsigned-policy\n// Set the listed policy on an attestation instance. Please note that this particular policy will deny all\n// attestation requests and should not be used in production.\nPolicyResult policyResult = client.setAttestationPolicy(AttestationType.OPEN_ENCLAVE,\n    \"version=1.0; authorizationrules{=> deny();}; issuancerules{};\");\nSystem.out.printf(\"Policy set for OpenEnclave result: %s\\n\", policyResult.getPolicyResolution());\n```\n\n### Set signed attestation policy\n\nFor isolated mode attestation instances, the set or reset policy request must be signed using the key that is associated\nwith the attestation signing certificates configured on the attestation instance.\n\n```java readme-sample-set-signed-policy\n// Set the listed policy on an attestation instance using a signed policy token.\nPolicyResult policyResult = client.setAttestationPolicy(AttestationType.SGX_ENCLAVE,\n    new AttestationPolicySetOptions()\n        .setAttestationPolicy(\"version=1.0; authorizationrules{=> permit();}; issuancerules{};\")\n            .setAttestationSigner(new AttestationSigningKey(certificate, privateKey)));\nSystem.out.printf(\"Policy set for Sgx result: %s\\n\", policyResult.getPolicyResolution());\n```\n\n### List policy management certificates\n\nWhen an attestation instance is in `Isolated` mode, the policy APIs need additional proof of authorization. This proof is\nprovided via the `AttestationSigningKey` parameter passed into the set and reset policy APIs.\n\nEach `Isolated` mode instance has a set of certificates, which determine whether a caller has the authority to set an\nattestation policy. When an attestation policy is set, the client presents a signed \"token\" to the service, which is signed\nby the key in the `AttestationSigningKey`. The signed token, including the certificate in the `AttestationSigningKey` is\nsent to the attestation service, which verifies that the token was signed with the private key corresponding to the\npublic key in the token. The set or reset policy operation will only succeed if the certificate in the token is one of\nthe policy management tokens. This interaction ensures that the client is in possession of the private key associated with\none of the policy management certificates and is thus authorized to perform the operation.\n\n```java readme-sample-listPolicyCertificates\nAttestationSignerCollection signers = client.listPolicyManagementCertificates();\nSystem.out.printf(\"Instance %s contains %d signers.\\n\", endpoint, signers.getAttestationSigners().size());\nfor (AttestationSigner signer : signers.getAttestationSigners()) {\n    System.out.printf(\"Certificate Subject: %s\", signer.getCertificates().get(0).getSubjectDN().toString());\n}\n```\n\n### Add policy management certificate\n\nAdds a new certificate to the set of policy management certificates. The request to add the policy management certificate\nmust be signed with the private key associated with one of the existing policy management certificates (this ensures that\nthe caller is authorized to update the set of policy certificates).\n\nNote: Adding the same certificate twice is not considered an error - if the certificate is already present, the addition is\nignored (this possibly surprising behavior is there because retries could cause the addition to be executed multiple times)\n\n```java readme-sample-addPolicyManagementCertificate\nSystem.out.printf(\"Adding new certificate %s\\n\", certificateToAdd.getSubjectDN().toString());\nPolicyCertificatesModificationResult modificationResult = client.addPolicyManagementCertificate(\n    new PolicyManagementCertificateOptions(certificateToAdd,\n        new AttestationSigningKey(isolatedCertificate, isolatedKey)));\nSystem.out.printf(\"Updated policy certificate, certificate add result: %s\\n\",\n    modificationResult.getCertificateResolution());\nSystem.out.printf(\"Added certificate thumbprint: %s\\n\", modificationResult.getCertificateThumbprint());\n```\n\n### Remove attestation signing certificate\n\nRemoves a certificate from the set of policy management certificates. The request to remove the policy management certificate\nmust be signed with the private key associated with one of the existing policy management certificates (this ensures that\nthe caller is authorized to update the set of policy certificates).\n\nNote: Removing a non-existent certificate is not considered an error - if the certificate is not present, the removal is\nignored (this possibly surprising behavior is there because retries could cause the removal to be executed multiple times)\n\n```java readme-sample-removePolicyManagementCertificate\nSystem.out.printf(\"Removing existing certificate %s\\n\", certificateToRemove.getSubjectDN().toString());\nPolicyCertificatesModificationResult modificationResult = client.deletePolicyManagementCertificate(\n    new PolicyManagementCertificateOptions(certificateToRemove,\n        new AttestationSigningKey(isolatedCertificate, isolatedKey)));\nSystem.out.printf(\"Updated policy certificate, certificate remove result: %s\\n\",\n    modificationResult.getCertificateResolution());\nSystem.out.printf(\"Removed certificate thumbprint: %s\\n\", modificationResult.getCertificateThumbprint());\n```\n\n## Troubleshooting\n\nTroubleshooting information for the MAA service can be found [here](https://docs.microsoft.com/azure/attestation/troubleshoot-guide)\n\n## Next steps\n\nFor more information about the Microsoft Azure Attestation service, please see our [documentation page](https://docs.microsoft.com/azure/attestation/).\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][microsoft_code_of_conduct]. For more information, see the Code of Conduct FAQ or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[style-guide-msft]: https://docs.microsoft.com/style-guide/capitalization\n[api_documentation]: https://azure.github.io/azure-sdk-for-java\n[azure_attestation]: https://docs.microsoft.com/azure/attestation\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/identity/azure-identity\n[maven]: https://maven.apache.org/\n[azure_subscription]: https://azure.microsoft.com/\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[rest_api]: https://docs.microsoft.com/rest/api/attestation/\n[azure_create_application_in_portal]: https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal\n[performance_tuning]: https://github.com/Azure/azure-sdk-for-java/wiki/Performance-Tuning\n[jdk_link]: https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable\n[azure_cloud_shell]: https://shell.azure.com/bash\n[http_clients_wiki]: https://github.com/Azure/azure-sdk-for-java/wiki/HTTP-clients\n[microsoft_code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fattestation%2Fazure-security-attestation%2FREADME.png)\n",
        "repo_name": "attestation/azure-security-attestation",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/attestation/azure-security-attestation",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager Automanage client library for Java\n\nAzure Resource Manager Automanage client library for Java.\n\nThis package contains Microsoft Azure SDK for Automanage Management SDK. Automanage Client. Package tag package-2022-05. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-automanage;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-automanage</artifactId>\n    <version>1.0.0-beta.1</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nAutomanageManager manager = AutomanageManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/automanage/azure-resourcemanager-automanage/SAMPLE.md)\n\n### Create Custom Configuration Profile\n\n```java\nMap<String, String> tags = Map.of(\"environment\", \"prod\");\n\nString configuration = \"{\" +\n        \"\\\"Antimalware/Enable\\\":false,\" +\n        \"\\\"AzureSecurityCenter/Enable\\\":true,\" +\n        \"\\\"Backup/Enable\\\":false,\" +\n        \"\\\"BootDiagnostics/Enable\\\":true,\" +\n        \"\\\"ChangeTrackingAndInventory/Enable\\\":true,\" +\n        \"\\\"GuestConfiguration/Enable\\\":true,\" +\n        \"\\\"LogAnalytics/Enable\\\":true,\" +\n        \"\\\"UpdateManagement/Enable\\\":true,\" +\n        \"\\\"VMInsights/Enable\\\":true\" +\n        \"}\";\n\nclient\n        .configurationProfiles()\n        .define(\"configurationProfileName\")\n        .withRegion(\"East US\")\n        .withExistingResourceGroup(\"resourceGroup\")\n        .withTags(tags)\n        .withProperties(\n            new ConfigurationProfileProperties()\n                .withConfiguration(\n                    SerializerFactory\n                        .createDefaultManagementSerializerAdapter()\n                        .deserialize(\n                            configuration,\n                            Object.class,\n                            SerializerEncoding.JSON)))\n        .create();\n```\n\n### Delete Custom Configuration Profile by Resource ID\n\n```java\nclient.configurationProfiles().deleteById(\"<resource ID>\");\n```\n\n### Delete Custom Configuration Profile by Resource Group \n\n```java\nclient.configurationProfiles().deleteByResourceGroup(\"resourceGroup\", \"configurationProfileName\");\n```\n\n### Get Custom Configuration Profile by Resource ID\n\n```java\nConfigurationProfile profile = client.configurationProfiles().getById(\"<resource ID>\");\nSystem.out.println(profile.innerModel().properties().configuration());\n```\n\n### Create Best Practices Production Profile Assignment \n\n```java\nString configProfile = \"/providers/Microsoft.Automanage/bestPractices/AzureBestPracticesProduction\";\nclient\n    .configurationProfileAssignments()\n    .define(\"default\") // name must be default\n    .withExistingVirtualMachine(\"resourceGroup\", \"vmName\")\n    .withProperties(\n        new ConfigurationProfileAssignmentProperties()\n            .withConfigurationProfile(\"configurationProfileName\"))\n    .create();\n```\n\n### Create Custom Profile Assignment \n\n```java\nString configProfile = \"/subscriptions/<subscription ID>/resourceGroups/resourceGroup/providers/Microsoft.Automanage/configurationProfiles/configurationProfileName\";\n\nclient\n    .configurationProfileAssignments()\n    .define(\"default\") // name must be default\n    .withExistingVirtualMachine(\"resourceGroup\", \"vmName\")\n    .withProperties(\n        new ConfigurationProfileAssignmentProperties()\n            .withConfigurationProfile(\"configurationProfileName\"))\n    .create();\n```\n\n### Get Profile Assignment \n\n```java \nConfigurationProfileAssignment assignment = client.configurationProfileAssignments().get(\"resourceGroup\", \"default\", \"vmName\"); // name must be default\n```\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n",
        "repo_name": "automanage/azure-resourcemanager-automanage",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/automanage/azure-resourcemanager-automanage",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager Automation client library for Java\n\nAzure Resource Manager Automation client library for Java.\n\nThis package contains Microsoft Azure SDK for Automation Management SDK. Automation Client. Package tag package-2022-02-22. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-automation;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-automation</artifactId>\n    <version>1.0.0-beta.2</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nAutomationManager manager = AutomationManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/automation/azure-resourcemanager-automation/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n",
        "repo_name": "automation/azure-resourcemanager-automation",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/automation/azure-resourcemanager-automation",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager Avs client library for Java\n\nAzure Resource Manager Avs client library for Java.\n\nThis package contains Microsoft Azure SDK for Avs Management SDK. Azure VMware Solution API. Package tag package-2022-05-01. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-avs;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-avs</artifactId>\n    <version>1.0.0</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nAvsManager manager = AvsManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/avs/azure-resourcemanager-avs/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "avs/azure-resourcemanager-avs",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/avs/azure-resourcemanager-avs",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager ExternalIdentitiesConfiguration client library for Java\n\nAzure Resource Manager ExternalIdentitiesConfiguration client library for Java.\n\nThis package contains Microsoft Azure SDK for ExternalIdentitiesConfiguration Management SDK. External Identities Configuration Client. Package tag package-2021-04-01. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-azureadexternalidentities;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-azureadexternalidentities</artifactId>\n    <version>1.0.0-beta.1</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nExternalIdentitiesConfigurationManager manager = ExternalIdentitiesConfigurationManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/azureadexternalidentities/azure-resourcemanager-azureadexternalidentities/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n",
        "repo_name": "azureadexternalidentities/azure-resourcemanager-azureadexternalidentities",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/azureadexternalidentities/azure-resourcemanager-azureadexternalidentities",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager AzureArcData client library for Java\n\nAzure Resource Manager AzureArcData client library for Java.\n\nThis package contains Microsoft Azure SDK for AzureArcData Management SDK. The AzureArcData management API provides a RESTful set of web APIs to manage Azure Data Services on Azure Arc Resources. Package tag package-2021-08-01. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-azurearcdata;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-azurearcdata</artifactId>\n    <version>1.0.0-beta.3</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nAzureArcDataManager manager = AzureArcDataManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/azurearcdata/azure-resourcemanager-azurearcdata/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "azurearcdata/azure-resourcemanager-azurearcdata",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/azurearcdata/azure-resourcemanager-azurearcdata",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager AzureStack client library for Java\n\nAzure Resource Manager AzureStack client library for Java.\n\nThis package contains Microsoft Azure SDK for AzureStack Management SDK. Azure Stack. Package tag package-2022-06. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-azurestack;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-azurestack</artifactId>\n    <version>1.0.0-beta.2</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nAzureStackManager manager = AzureStackManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/azurestack/azure-resourcemanager-azurestack/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "azurestack/azure-resourcemanager-azurestack",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/azurestack/azure-resourcemanager-azurestack",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager AzureStackHci client library for Java\n\nAzure Resource Manager AzureStackHci client library for Java.\n\nThis package contains Microsoft Azure SDK for AzureStackHci Management SDK. Azure Stack HCI management service. Package tag package-2022-05. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-azurestackhci;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-azurestackhci</artifactId>\n    <version>1.0.0-beta.3</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nAzureStackHciManager manager = AzureStackHciManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/azurestackhci/azure-resourcemanager-azurestackhci/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n",
        "repo_name": "azurestackhci/azure-resourcemanager-azurestackhci",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/azurestackhci/azure-resourcemanager-azurestackhci",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager BareMetalInfrastructure client library for Java\n\nAzure Resource Manager BareMetalInfrastructure client library for Java.\n\nThis package contains Microsoft Azure SDK for BareMetalInfrastructure Management SDK. The BareMetalInfrastructure Management client. Package tag package-2021-08-09. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-baremetalinfrastructure;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-baremetalinfrastructure</artifactId>\n    <version>1.0.0-beta.2</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nBareMetalInfrastructureManager manager = BareMetalInfrastructureManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/baremetalinfrastructure/azure-resourcemanager-baremetalinfrastructure/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "baremetalinfrastructure/azure-resourcemanager-baremetalinfrastructure",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/baremetalinfrastructure/azure-resourcemanager-baremetalinfrastructure",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager Batch client library for Java\n\nAzure Resource Manager Batch client library for Java.\n\nThis package contains Microsoft Azure SDK for Batch Management SDK. Batch Client. Package tag package-2022-10. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-batch;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-batch</artifactId>\n    <version>1.1.0-beta.1</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nBatchManager manager = BatchManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n```java\n// batch account\naccount = batchManager\n    .batchAccounts()\n    .define(batchAccountName)\n    .withRegion(REGION)\n    .withExistingResourceGroup(resourceGroup)\n    .create();\n\n// batch pool create\npool = batchManager.pools()\n    .define(poolName)\n    .withExistingBatchAccount(resourceGroup, batchAccountName)\n    .withDisplayName(poolDisplayName)\n    .withDeploymentConfiguration(\n        new DeploymentConfiguration()\n            .withCloudServiceConfiguration(\n                new CloudServiceConfiguration().withOsFamily(\"4\")))\n    .withScaleSettings(\n        new ScaleSettings()\n            .withFixedScale(\n                new FixedScaleSettings()\n                    .withResizeTimeout(Duration.parse(\"PT8M\"))\n                    .withTargetDedicatedNodes(1)\n                    .withTargetLowPriorityNodes(1)\n                    .withNodeDeallocationOption(ComputeNodeDeallocationOption.TASK_COMPLETION)))\n    .withVmSize(\"Standard_D1\")\n    .create();\n```\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/batch/azure-resourcemanager-batch/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "batch/azure-resourcemanager-batch",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/batch/azure-resourcemanager-batch",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "## Azure Batch Libraries for Java\n\nThis README is based on the latest released version Azure Batch SDK (7.0.0). If you are looking for other releases, see the [More Information](#more-information) section below.\n\nThe Azure Batch Libraries for Java is a higher-level, object-oriented API for interacting with the Azure Batch service.\n\n\n> **7.0.0** is a release that supports all features of Azure Batch service with API version \"2019-08-01.10.0\". We will be adding support for more new features and tweaking the API associated with Azure Batch service newer release.\n\n**Azure Batch Authentication**\n\nYou need to create a Batch account through the [Azure portal](https://portal.azure.com) or Azure cli.\n\n* Use the account name, key, and URL to create a `BatchSharedKeyCredentials` instance for authentication with the Azure Batch service.\nThe `BatchClient` class is the simplest entry point for creating and interacting with Azure Batch objects.\n\n```java\nBatchSharedKeyCredentials cred = new BatchSharedKeyCredentials(batchUri, batchAccount, batchKey);\nBatchClient client = BatchClient.open(cred);\n```\n\n* The other way is using AAD (Azure Active Directory) authentication to create the client. See this [document](https://docs.microsoft.com/azure/batch/batch-aad-auth) for detail.\n\n```java\nBatchApplicationTokenCredentials cred = new BatchApplicationTokenCredentials(batchEndpoint, clientId, applicationSecret, applicationDomain, null, null);\nBatchClient client = BatchClient.open(cred);\n```\n\n**Create a pool using an Azure Marketplace image**\n\nYou can create a pool of Azure virtual machines which can be used to execute tasks.\n\n```java\nSystem.out.println(\"Created a pool using an Azure Marketplace image.\");\n\nVirtualMachineConfiguration configuration = new VirtualMachineConfiguration();\nconfiguration.withNodeAgentSKUId(skuId).withImageReference(imageRef);\nclient.poolOperations().createPool(poolId, poolVMSize, configuration, poolVMCount);\n\nSystem.out.println(\"Created a Pool: \" + poolId);\n```\n\n**Create a Job**\n\nYou can create a job by using the recently created pool.\n\n```java\nPoolInformation poolInfo = new PoolInformation();\npoolInfo.withPoolId(poolId);\nclient.jobOperations().createJob(jobId, poolInfo);\n```\n\n# Sample Code\n\nYou can find sample code that illustrates Batch usage scenarios in https://github.com/azure/azure-batch-samples\n\n\n# Download\n\n[//]: # ({x-version-update-start;com.microsoft.azure:azure-batch;current})\n```xml\n<dependency>\n    <groupId>com.microsoft.azure</groupId>\n    <artifactId>azure-batch</artifactId>\n    <version>8.1.0</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n# Pre-requisites\n\n- [A Java Developer Kit (JDK)](https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable), v 1.7 or later\n- [Maven](https://search.maven.org/artifact/com.microsoft.azure/azure-batch)\n- Azure Service Principal - see [how to create authentication info](https://docs.microsoft.com/azure/batch/batch-aad-auth#use-a-service-principal).\n\n\n## Help\n\nIf you encounter any bugs with these libraries, please file issues via [Issues](https://github.com/Azure/azure-sdk-for-java) or checkout [StackOverflow for Azure Java SDK](https://stackoverflow.com/questions/tagged/azure-java-sdk).\n\n# Contribute Code\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create new Pull Request\n\n# Build Code\nTo build the code open a console, navigate to the git repository, and run\n```\nmaven build\n```\n\n# Test Code\n\nAll tests are run from the `sdk/batch` directory. They can be run either on the command line or from a Java IDE, such as Eclipse.\n\n## Step 1: Run tests in Record mode\n\n1. Deploy test resources in Azure and set the following environment variables:\n\n    * APPLICATION_SECRET\n    * AZURE_BATCH_ACCESS_KEY\n    * AZURE_BATCH_ACCOUNT\n    * AZURE_BATCH_ENDPOINT\n    * AZURE_BATCH_REGION\n    * AZURE_VNET\n    * AZURE_VNET_ADDRESS_SPACE\n    * AZURE_VNET_RESOURCE_GROUP\n    * AZURE_VNET_SUBNET\n    * AZURE_VNET_SUBNET_ADDRESS_SPACE\n    * CLIENT_ID\n    * STORAGE_ACCOUNT_KEY\n    * STORAGE_ACCOUNT_NAME\n    * SUBSCRIPTION_ID\n\n1. Set `AZURE_TEST_MODE` to `Record`\n1. Run the tests in `src/test/java`\n    1. From the command-line, run `mvn test` (can also supply `-DAZURE_TEST_MODE=Record` instead of setting environment variable)\n1. Test recordings will be created in `microsoft-azure-batch/target/test-classes/session-records`\n1. Copy these recordings to `microsoft-azure-batch/src/test/resources/test-recordings`\n\n## Step 2: Run tests in Playback mode\n\n1. Set `AZURE_TEST_MODE` to `Playback`\n1. Run the Jetty test server\n    1. CLI: `mvn jetty:start`\n    1. Eclipse: Install Jetty plugin for Eclipse from marketplace and create two run configurations (one for 11080 and one for 11081)\n1. Run the tests\n    1. CLI: `mvn test -DAZURE_TEST_MODE=Playback`\n\n# More Information\n\n* [Javadoc](https://docs.microsoft.com/java/api/overview/azure/batch?view=azure-java-stable)\n* [https://azure.com/java](https://azure.com/java)\n* If you don't have a Microsoft Azure subscription you can get a FREE trial account [here](https://go.microsoft.com/fwlink/?LinkId=330212)\n\n---\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fbatch%2Fmicrosoft-azure-batch%2FREADME.png)\n",
        "repo_name": "batch/microsoft-azure-batch",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/batch/microsoft-azure-batch",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager BatchAI client library for Java\n\nAzure Resource Manager BatchAI client library for Java.\n\nThis package contains Microsoft Azure SDK for BatchAI Management SDK. The Azure BatchAI Management API. Package tag package-2018-05. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-batchai;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-batchai</artifactId>\n    <version>1.0.0-beta.1</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nBatchAIManager manager = BatchAIManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n",
        "repo_name": "batchai/azure-resourcemanager-batchai",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/batchai/azure-resourcemanager-batchai",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager Billing client library for Java\n\nAzure Resource Manager Billing client library for Java.\n\nThis package contains Microsoft Azure SDK for Billing Management SDK. Billing client provides access to billing resources for Azure subscriptions. Package tag package-2020-05. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-billing;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-billing</artifactId>\n    <version>1.0.0-beta.3</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nBillingManager manager = BillingManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/billing/azure-resourcemanager-billing/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "billing/azure-resourcemanager-billing",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/billing/azure-resourcemanager-billing",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager BillingBenefits client library for Java\n\nAzure Resource Manager BillingBenefits client library for Java.\n\nThis package contains Microsoft Azure SDK for BillingBenefits Management SDK. Azure Benefits RP let users create and manage benefits like savings plan. Package tag package-2022-11-01. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-billingbenefits;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-billingbenefits</artifactId>\n    <version>1.0.0-beta.1</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nBillingBenefitsManager manager = BillingBenefitsManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/billingbenefits/azure-resourcemanager-billingbenefits/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "billingbenefits/azure-resourcemanager-billingbenefits",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/billingbenefits/azure-resourcemanager-billingbenefits",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure BOM for client libraries\nThe Azure BOM for client libraries provides a verified group of Azure client libraries that are known to share common \ndependencies. It provides a simple and elegant way to orchestrate using multiple Azure client libraries while ensuring \nminimal dependency conflicts.\n\n## Table of contents\n- [Getting started](#getting-started)\n  - [Adding the BOM to your project](#adding-the-bom-to-your-project)\n  - [Adding libraries to your project](#adding-libraries-to-your-project)\n\n## Getting started\n\n### Adding the BOM to your project\n\nTo consume the BOM include it in the `dependencyManagement` section of your project's POM. Note that this **does not**\nresult in all dependencies being included in your project.\n\n```xml\n<dependencyManagement>\n  <dependencies>\n    <dependency>\n      <groupId>com.azure</groupId>\n      <artifactId>azure-sdk-bom</artifactId>\n      <version>1.2.13</version>\n      <type>pom</type>\n      <scope>import</scope>\n    </dependency>\n  </dependencies>\n</dependencyManagement>\n```\n\n**NOTE**: In **Spring Boot** application, you can choose **azure-sdk-bom**'s version according to [Spring-Versions-Mapping](https://aka.ms/spring/versions).\n\n### Adding libraries to your project\n\nAfter adding the BOM, Azure client libraries included in the BOM are now available to be added as a dependency without \nlisting the artifact's version.\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-storage-blob</artifactId>\n  </dependency>\n  <dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-security-keyvault-secrets</artifactId>\n  </dependency>\n  <dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-identity</artifactId>\n  </dependency>\n</dependencies>\n```\n\n### Overview\n\n#### Release cadence\n\nCurrently, the `azure-sdk-bom` releases monthly using the latest globally available(GA) versions of managed libraries.\n\n#### Included library requirements\n\nOnly GA'd Azure SDKs in the `com.azure` group are permitted to be managed dependencies in the `azure-sdk-bom`. SDKs \nthat have yet to be GA'd won't be considered at this time as the `azure-sdk-bom` is meant to act as a production ready \ndependency management system for applications built using Azure SDKs.\n",
        "repo_name": "boms/azure-sdk-bom",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/boms/azure-sdk-bom",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure BOM for testing the release pipeline\nThis is just a BOM which was created for the purposes of testing the bom release pipeline.\nThis BOM should not be used by anyone as it provides absolutely nothing. The only entry in\nthis BOM file will be azure-sdk-template which is our library used for testing the release\npipeline for libraries.\n\n## Table of contents\n\n## Getting started\n\n### Adding the BOM to your project\n\n### Adding libraries to your project\n\n### Adding library dependencies to your project\n",
        "repo_name": "boms/azure-sdk-template-bom",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/boms/azure-sdk-template-bom",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager BotService client library for Java\n\nAzure Resource Manager BotService client library for Java.\n\nThis package contains Microsoft Azure SDK for BotService Management SDK. Azure Bot Service is a platform for creating smart conversational agents. Package tag package-preview-2021-05. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-botservice;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-botservice</artifactId>\n    <version>1.0.0-beta.5</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nBotServiceManager manager = BotServiceManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/botservice/azure-resourcemanager-botservice/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n",
        "repo_name": "botservice/azure-resourcemanager-botservice",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/botservice/azure-resourcemanager-botservice",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager AzureChangeAnalysis client library for Java\n\nAzure Resource Manager AzureChangeAnalysis client library for Java.\n\nThis package contains Microsoft Azure SDK for AzureChangeAnalysis Management SDK.  Package tag package-2021-04-01. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-changeanalysis;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-changeanalysis</artifactId>\n    <version>1.0.1</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nAzureChangeAnalysisManager manager = AzureChangeAnalysisManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/changeanalysis/azure-resourcemanager-changeanalysis/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "changeanalysis/azure-resourcemanager-changeanalysis",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/changeanalysis/azure-resourcemanager-changeanalysis",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager CognitiveServices client library for Java\n\nAzure Resource Manager CognitiveServices client library for Java.\n\nThis package contains Microsoft Azure SDK for CognitiveServices Management SDK. Cognitive Services Management Client. Package tag package-2022-12. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-cognitiveservices;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-cognitiveservices</artifactId>\n    <version>1.0.0</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nCognitiveServicesManager manager = CognitiveServicesManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/cognitiveservices/azure-resourcemanager-cognitiveservices/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "cognitiveservices/azure-resourcemanager-cognitiveservices",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/cognitiveservices/azure-resourcemanager-cognitiveservices",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "## Microsoft Azure Text Analytics Client SDK library for Java\n\n**NOTE:** This is a legacy version that works with the V2.1 version of the service API. For the new set of libraries \nthat support newer service versions please see\n[azure-ai-textanalytics](https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/textanalytics/azure-ai-textanalytics).\n\nThis is the Microsoft Azure Cognitive Services Text Analytics Client\nLibrary.\n\n## Usage\n\nFor code examples, see [Cognitive Services Text\nAnalytics](https://docs.microsoft.com/java/api/overview/azure/cognitiveservices/client/textanalytics?view=azure-java-stable)\non docs.microsoft.com.\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in\nthe [Issues](https://github.com/Azure/azure-sdk-for-java/issues)\nsection of the project.\n\n![image](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fazure-cognitiveservices-language-textanalytics%2FREADME.png)\n",
        "repo_name": "cognitiveservices/ms-azure-cs-textanalytics",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/cognitiveservices/ms-azure-cs-textanalytics",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager Usage client library for Java\n\nAzure Resource Manager Usage client library for Java.\n\nThis package contains Microsoft Azure SDK for Usage Management SDK.  Package tag package-2015-06-preview. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-commerce;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-commerce</artifactId>\n    <version>1.0.0-beta.2</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nUsageManager manager = UsageManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/commerce/azure-resourcemanager-commerce/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "commerce/azure-resourcemanager-commerce",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/commerce/azure-resourcemanager-commerce",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Communication Call Automation Service client library for Java\n\nThis package contains a Java SDK for Azure Communication Call Automation Service.\n\n[Source code][source] | [Package (Maven)][package] | [API reference documentation][api_documentation]\n| [Product documentation][product_docs]\n\n## Getting started\n\n### Prerequisites\n\n- An Azure account with an active subscription. [Create an account for free](https://azure.microsoft.com/free/?WT.mc_id=A261C142F).\n- [Java Development Kit (JDK)](https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable) version 8 or above.\n- [Apache Maven](https://maven.apache.org/download.cgi).\n- A deployed Communication Services resource. You can use the [Azure Portal](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource?tabs=windows&pivots=platform-azp) or the [Azure PowerShell](https://docs.microsoft.com/powershell/module/az.communication/new-azcommunicationservice) to set it up.\n\n### Include the package\n\n[//]: # ({x-version-update-start;com.azure:azure-communication-callautomation;current})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-communication-callautomation</artifactId>\n    <version>1.0.0-beta.2</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n## Key concepts\nThis is the restart of Call Automation Service. It is renamed to Call Automation service and being more intuitive to use.\n\n`CallAutomationClient` provides the functionality to make call, answer/reject incoming call and redirect a call.\n\n`CallConnection` provides the functionality to perform actions in an established call connection such as adding participants and terminate the call.\n\n`CallMedia` introduces media related functionalities into the call.\n\n`CallRecording` provides the functionality of recording the call.\n\n`EventHandler` provides the functionality to handle events from the ACS resource.\n\n## Examples\n\nTo be determined.\n\n## Troubleshooting\n\nIf you recieve a CommunicationErrorException with the messagae: \"Action is invalid when call is not in Established state.\" This usually means the call has ended. This can occur if the participants all leave\nthe call, or participants did not accept the call before the call timed out.\n\nIf you fail to start a call because of an HMAC validation error, be sure your access key is correct, and\nthat you are passing in a valid conversation id.\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a [Contributor License Agreement (CLA)][cla] declaring that you have the right to, and actually do, grant us the rights to use your contribution.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n## Next steps\n\n- [Read more about Call Automation in Azure Communication Services][call_automation_apis_overview]\n- [Read more about Call Recording in Azure Communication Services][call_recording_overview]\n- For a basic guide on how to record and download calls with Event Grid please refer to the [Record and download calls with Event Grid][record_and_download_calls_with_event_grid].\n\n<!-- LINKS -->\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n[product_docs]: https://docs.microsoft.com/azure/communication-services/\n[package]: https://dev.azure.com/azure-sdk/public/_artifacts/feed/azure-sdk-for-java-communication-interaction\n[api_documentation]: https://aka.ms/java-docs\n[call_automation_apis_overview]:https://docs.microsoft.com/azure/communication-services/concepts/voice-video-calling/call-automation-apis\n[call_recording_overview]:https://docs.microsoft.com/azure/communication-services/concepts/voice-video-calling/call-recording\n[record_and_download_calls_with_event_grid]:https://docs.microsoft.com/azure/communication-services/quickstarts/voice-video-calling/download-recording-file-sample\n[source]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/communication/azure-communication-callautomation/src\n",
        "repo_name": "communication/azure-communication-callautomation",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/communication/azure-communication-callautomation",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Communication CallingServer Service client library for Java\n\nThis package contains a Java SDK for Azure Communication CallingServer Service. Server Test\n\n[Source code][source] | [Package (Maven)][package] | [API reference documentation][api_documentation]\n| [Product documentation][product_docs]\n\n## Getting started\n\n### Prerequisites\n\n- An Azure account with an active subscription. [Create an account for free](https://azure.microsoft.com/free/?WT.mc_id=A261C142F).\n- [Java Development Kit (JDK)](https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable) version 8 or above.\n- [Apache Maven](https://maven.apache.org/download.cgi).\n- A deployed Communication Services resource. You can use the [Azure Portal](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource?tabs=windows&pivots=platform-azp) or the [Azure PowerShell](https://docs.microsoft.com/powershell/module/az.communication/new-azcommunicationservice) to set it up.\n\n### Include the package\n\n[//]: # ({x-version-update-start;com.azure:azure-communication-callingserver;current})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-communication-callingserver</artifactId>\n    <version>1.0.0-beta.5</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n## Key concepts\nThis is the restart of CallingServer Service. It is renamed to Call Automation service and being more intuitive to use.\n\n`CallAutomationClient` provides the functionality to make call, answer/reject incoming call and redirect a call.\n\n`CallConnection` provides the functionality to perform actions in an established call connection such as adding participants and terminate the call.\n\n`CallMedia` introduces media related functionalities into the call.\n\n`CallRecording` provides the functionality of recording the call.\n\n`EventHandler` provides the functionality to handle events from the ACS resource.\n\n## Examples\n\nTo be determined.\n\n## Troubleshooting\n\nIf you recieve a CommunicationErrorException with the messagae: \"Action is invalid when call is not in Established state.\" This usually means the call has ended. This can occur if the participants all leave\nthe call, or participants did not accept the call before the call timed out. \n\nIf you fail to start a call because of an HMAC validation error, be sure your access key is correct, and\nthat you are passing in a valid conversation id.\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a [Contributor License Agreement (CLA)][cla] declaring that you have the right to, and actually do, grant us the rights to use your contribution.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n## Next steps\n\n- [Read more about CallingServer Call Automation in Azure Communication Services][call_automation_apis_overview]\n- [Read more about CallingServer Call Recording in Azure Communication Services][call_recording_overview]\n- For a basic guide on how to record and download calls with Event Grid please refer to the [Record and download calls with Event Grid][record_and_download_calls_with_event_grid].\n\n<!-- LINKS -->\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n[product_docs]: https://docs.microsoft.com/azure/communication-services/\n[package]: https://dev.azure.com/azure-sdk/public/_artifacts/feed/azure-sdk-for-java-communication-interaction\n[api_documentation]: https://aka.ms/java-docs\n[call_automation_apis_overview]:https://docs.microsoft.com/azure/communication-services/concepts/voice-video-calling/call-automation-apis\n[call_recording_overview]:https://docs.microsoft.com/azure/communication-services/concepts/voice-video-calling/call-recording\n[record_and_download_calls_with_event_grid]:https://docs.microsoft.com/azure/communication-services/quickstarts/voice-video-calling/download-recording-file-sample\n[source]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/communication/azure-communication-callingserver/src\n",
        "repo_name": "communication/azure-communication-callingserver",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/communication/azure-communication-callingserver",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Communication Chat client library for Java\n\nAzure Communication Chat contains the APIs used in chat applications for Azure Communication Services.  \n\n[Source code][source] | [Package (Maven)][package] | [API reference documentation][api_documentation]\n| [Product documentation][product_docs]\n\n## Getting started\n\n### Prerequisites\n\n- An Azure account with an active subscription. [Create an account for free](https://azure.microsoft.com/free/?WT.mc_id=A261C142F).\n- [Java Development Kit (JDK)](https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable) version 8 or above.\n- [Apache Maven](https://maven.apache.org/download.cgi).\n- A deployed Communication Services resource. You can use the [Azure Portal](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource?tabs=windows&pivots=platform-azp) or the [Azure PowerShell](https://docs.microsoft.com/powershell/module/az.communication/new-azcommunicationservice) to set it up.\n### Include the package\n#### Include the BOM file\n\nPlease include the azure-sdk-bom to your project to take dependency on the General Availability (GA) version of the library. In the following snippet, replace the {bom_version_to_target} placeholder with the version number.\nTo learn more about the BOM, see the [AZURE SDK BOM README](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/boms/azure-sdk-bom/README.md).\n\n```xml\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>com.azure</groupId>\n            <artifactId>azure-sdk-bom</artifactId>\n            <version>{bom_version_to_target}</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n```\nand then include the direct dependency in the dependencies section without the version tag.\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-communication-chat</artifactId>\n  </dependency>\n</dependencies>\n```\n\n#### Include direct dependency\nIf you want to take dependency on a particular version of the library that is not present in the BOM,\nadd the direct dependency to your project as follows.\n\n[//]: # ({x-version-update-start;com.azure:azure-communication-chat;current})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-communication-chat</artifactId>\n    <version>1.3.8</version>\n</dependency>\n```\n\n## Key concepts\n\nA chat conversation is represented by a chat thread. Each user in the chat thread is called a participant. Participants can chat with one another privately in a 1:1 chat or huddle up in a 1:N group chat.\n\nOnce you initialized a `ChatClient` and a `ChatThreadClient` class, you can do the following chat operations:\n\n### Create, get, list, update, and delete chat threads\n\n### Send, get, list, update, and delete chat messages\n\n### Get, add, and remove participants\n\n### Send and get read receipts\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a [Contributor License Agreement (CLA)][cla] declaring that you have the right to, and actually do, grant us the rights to use your contribution.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n### Set Azure Communication Resource endpoint after it is created\n\nendpoint = \"https://*Azure-Communication-Resource-Name*.communications.azure.com\"\n\n### Request a User Access Token\n\nUser access tokens enable you to build client applications that directly authenticate to Azure Communication Services. \nYou generate these tokens on your server, pass them back to a client device, and then use them to initialize the Communication Services SDKs. \n\nLearn how to generate user access tokens from [User Access Tokens](https://docs.microsoft.com/azure/communication-services/quickstarts/access-tokens?pivots=programming-language-java#issue-user-access-tokens)\n\n## Examples\n\nThe following sections provide several code snippets covering some of the most common tasks, including:\n\n- [Create the Chat Client](#create-the-chat-client)\n- [Chat Thread Operations](#chat-thread-operations)\n- [Chat Message Operations](#chat-message-operations)\n- [Chat Thread Participant Operations](#chat-thread-participant-operations)\n- [Read Receipt Operations](#read-receipt-operations)\n- [Typing Notification Operations](#typing-notification-operations)\n\n### Create the Chat Client\n\n```java readme-sample-createChatClient\nString endpoint = \"https://<RESOURCE_NAME>.communcationservices.azure.com\";\n\n// Your user access token retrieved from your trusted service\nString token = \"SECRET\";\nCommunicationTokenCredential credential = new CommunicationTokenCredential(token);\n\n// Initialize the chat client\nfinal ChatClientBuilder builder = new ChatClientBuilder();\nbuilder.endpoint(endpoint)\n    .credential(credential);\nChatClient chatClient = builder.buildClient();\n```\n\n### Chat Thread Operations\n\n#### Create a chat thread\n\nTo create a chat client, you will use the Communications Service endpoint and the access token that was generated as part of pre-requisite steps. User access tokens enable you to build client applications that directly authenticate to Azure Communication Services. Once you generate these tokens on your server, pass them back to a client device. You need to use the CommunicationTokenCredential class from the Common SDK to pass the token to your chat client.\n\nUse the `createChatThread` method to create a chat thread.\n`createChatThreadOptions` is used to describe the thread request, an example is shown in the code snippet below.\n\n- Use `topic` to give a thread topic;\n- Use `participants` to list the thread participants to be added to the thread;\n\n`CreateChatThreadResult` is the response returned from creating a chat thread. \nIt contains a `getChatThread()` method which returns the `ChatThread` object that can be used to get the thread client from which you can get the `ChatThreadClient` for performing operations on the created thread: add participants, send message, etc.\nThe `ChatThread` object also contains the `getId()` method which retrieves the unique ID of the thread.\n\n```java readme-sample-createChatThread\nList<ChatParticipant> participants = new ArrayList<ChatParticipant>();\n\nChatParticipant firstParticipant = new ChatParticipant()\n    .setCommunicationIdentifier(user1)\n    .setDisplayName(\"Participant Display Name 1\");\n\nChatParticipant secondParticipant = new ChatParticipant()\n    .setCommunicationIdentifier(user2)\n    .setDisplayName(\"Participant Display Name 2\");\n\nparticipants.add(firstParticipant);\nparticipants.add(secondParticipant);\n\nCreateChatThreadOptions createChatThreadOptions = new CreateChatThreadOptions(\"Topic\")\n    .setParticipants(participants);\nCreateChatThreadResult result = chatClient.createChatThread(createChatThreadOptions);\n\nString chatThreadId = result.getChatThread().getId();\n```\n\n#### Get a chat thread properties\n\nThe `getChatThreadProperties` method retrieves a thread's properties from the service.\n\n```java readme-sample-getChatThread\nChatThreadClient chatThreadClient = chatClient.getChatThreadClient(\"Id\");\nChatThreadProperties chatThreadProperties = chatThreadClient.getProperties();\n```\n\n#### Delete a thread\n\nUse `deleteChatThread` method to delete a chat thread\n`chatThreadId` is the unique ID of the chat thread.\n\n```java readme-sample-deleteChatThread\nString chatThreadId = \"Id\";\nchatClient.deleteChatThread(chatThreadId);\n```\n\n#### Get a chat thread client\n\nThe `getChatThreadClient` method returns a thread client for a thread that already exists. It can be used for performing operations on the created thread: add participants, send message, etc.\n`chatThreadId` is the unique ID of the existing chat thread.\n\n```java readme-sample-getChatThreadClient\nString chatThreadId = \"Id\";\nChatThreadClient chatThreadClient = chatClient.getChatThreadClient(chatThreadId);\n```\n\n#### Update a chat thread topic\n\nUse `updateTopic` method to update a thread's topic\n`topic` is used to hold the new topic of the thread.\n\n```java readme-sample-updateTopic\nchatThreadClient.updateTopic(\"New Topic\");\n```\n\n### Chat Message Operations\n\n#### Send a chat message\n\nUse the `sendMessage` method to send a chat message to the chat thread that the `chatThreadClient` was created with.\n`sendChatMessageOptions` is used to describe the chat message request, an example is shown in the code snippet below.\n\n- Use `content` to provide the chat message content;\n- Use `priority` to specify the chat message priority level, such as 'Normal' or 'High';\n- Use `senderDisplayName` to specify the display name of the sender;\n\nA `SendChatMessageResult` response returned from sending a chat message, it contains an id, which is the unique ID of the message.\n\n```java readme-sample-sendChatMessage\nSendChatMessageOptions sendChatMessageOptions = new SendChatMessageOptions()\n    .setContent(\"Message content\")\n    .setSenderDisplayName(\"Sender Display Name\");\n\nSendChatMessageResult sendResult = chatThreadClient.sendMessage(sendChatMessageOptions);\n```\n\n#### Get a chat message\n\nThe `getMessage` method retrieves a chat message from the service.\n`chatMessageId` is the unique ID of the chat message.\n\n```java readme-sample-getChatMessage\nString chatMessageId = \"Id\";\nChatMessage chatMessage = chatThreadClient.getMessage(chatMessageId);\n```\n\n#### Get chat messages\n\nYou can retrieve chat messages using the `listMessages` method on the chat thread client at specified intervals (polling).\n\n```java readme-sample-getChatMessages\nPagedIterable<ChatMessage> chatMessagesResponse = chatThreadClient.listMessages();\nchatMessagesResponse.iterableByPage().forEach(resp -> {\n    System.out.printf(\"Response headers are %s. Url %s  and status code %d %n\", resp.getHeaders(),\n        resp.getRequest().getUrl(), resp.getStatusCode());\n    resp.getElements().forEach(message ->\n        System.out.printf(\"Message id is %s.\", message.getId()));\n});\n```\n\n`listMessages` returns the latest version of the message, including any edits or deletes that happened to the message using `.editMessage()` and `.deleteMessage()`. \n\nFor deleted messages, `chatMessage.getDeletedOn()` returns a datetime value indicating when that message was deleted. \n\nFor edited messages, `chatMessage.getEditedOn()` returns a datetime indicating when the message was edited. \n\nThe original time of message creation can be accessed using `chatMessage.getCreatedOn()`, and it can be used for ordering the messages.\n\nlistMessages returns different types of messages which can be identified by `chatMessage.getType()`. These types are:\n\n- `text`: Regular chat message sent by a thread participant.\n\n- `html`: HTML chat message sent by a thread participant.\n\n- `topicUpdated`: System message that indicates the topic has been updated.\n\n- `participantAdded`: System message that indicates one or more participants have been added to the chat thread.\n\n- `participantRemoved`: System message that indicates a participant has been removed from the chat thread.\n\nFor more details, see [Message Types](https://docs.microsoft.com/azure/communication-services/concepts/chat/concepts#message-types).\n\n#### Update a chat message\n\nUse `updateMessage` to update a chat message identified by chatThreadId and messageId.\n`chatMessageId` is the unique ID of the chat message.\n`updateChatMessageOptions` is used to describe the request of a chat message update, an example is shown in the code snippet below.\n\n- Use `content` to provide a new chat message content;\n\n```java readme-sample-updateChatMessage\nString chatMessageId = \"Id\";\nUpdateChatMessageOptions updateChatMessageOptions = new UpdateChatMessageOptions()\n    .setContent(\"Updated message content\");\n\nchatThreadClient.updateMessage(chatMessageId, updateChatMessageOptions);\n```\n\n#### Delete a chat message\n\nUse `updateMessage` to update a chat message identified by chatMessageId.\n`chatMessageId` is the unique ID of the chat message.\n\n```java readme-sample-deleteChatMessage\nString chatMessageId = \"Id\";\nchatThreadClient.deleteMessage(chatMessageId);\n```\n\n### Chat Thread Participant Operations\n\n#### List chat participants\n\nUse `listParticipants` to retrieve a paged collection containing the participants of the chat thread.\n\n```java readme-sample-listChatParticipants\nPagedIterable<ChatParticipant> chatParticipantsResponse = chatThreadClient.listParticipants();\nchatParticipantsResponse.iterableByPage().forEach(resp -> {\n    System.out.printf(\"Response headers are %s. Url %s  and status code %d %n\", resp.getHeaders(),\n        resp.getRequest().getUrl(), resp.getStatusCode());\n    resp.getElements().forEach(chatParticipant ->\n        System.out.printf(\"Participant id is %s.\", ((CommunicationUserIdentifier) chatParticipant.getCommunicationIdentifier()).getId()));\n});\n```\n\n#### Add participants\n\nUse `addParticipants` method to add participants to the chat thread.\n`participants` list of participants to be added to the thread;\n\n- `communicationIdentifier`, required, is the CommunicationIdentifier you've created by using the CommunicationIdentityClient. More info at: [Create A User](https://docs.microsoft.com/azure/communication-services/quickstarts/access-tokens?pivots=programming-language-java#create-a-user).\n- `display_name`, optional, is the display name for the thread member.\n- `share_history_time`, optional, is the time from which the chat history is shared with the member. To share history since the inception of the chat thread, set this property to any date equal to, or less than the thread creation time. To share no history previous to when the member was added, set it to the current date. To share partial history, set it to the required date.\n\n```java readme-sample-addChatParticipants\nList<ChatParticipant> participants = new ArrayList<ChatParticipant>();\n\nChatParticipant firstParticipant = new ChatParticipant()\n    .setCommunicationIdentifier(user1)\n    .setDisplayName(\"Display Name 1\");\n\nChatParticipant secondParticipant = new ChatParticipant()\n    .setCommunicationIdentifier(user2)\n    .setDisplayName(\"Display Name 2\");\n\nparticipants.add(firstParticipant);\nparticipants.add(secondParticipant);\n\nchatThreadClient.addParticipants(participants);\n```\n\n#### Remove participant\n\nUse `removeParticipant` method to remove a participant from the chat thread.\n`identifier` is the CommunicationIdentifier you've created.\n\n```java readme-sample-removeChatParticipant\nchatThreadClient.removeParticipant(user);\n```\n\n### Read Receipt Operations\n\n#### Send read receipt\n\nUse `sendReadReceipt` method to post a read receipt event to a chat thread, on behalf of a user.\n`chatMessageId` is the unique ID of the chat message that was read.\n\n```java readme-sample-sendReadReceipt\nString chatMessageId = \"Id\";\nchatThreadClient.sendReadReceipt(chatMessageId);\n```\n\n#### Get read receipts\n\n`getReadReceipts` method retrieves read receipts for a chat thread.\n\n```java readme-sample-listReadReceipts\nPagedIterable<ChatMessageReadReceipt> readReceiptsResponse = chatThreadClient.listReadReceipts();\nreadReceiptsResponse.iterableByPage().forEach(resp -> {\n    System.out.printf(\"Response headers are %s. Url %s  and status code %d %n\", resp.getHeaders(),\n        resp.getRequest().getUrl(), resp.getStatusCode());\n    resp.getElements().forEach(readReceipt ->\n        System.out.printf(\"Read message id is %s.\", readReceipt.getChatMessageId()));\n});\n```\n\n### Typing Notification Operations\n\n#### Send typing notification\n\nUse `sendTypingNotification` method to post a typing notification event to a chat thread, on behalf of a user.\n`typingNotificationOptions` is used to describe the typing notification request.\n\n- Use `senderDisplayName` to set the display name of the notification sender;\n\n```java readme-sample-sendTypingNotification\nTypingNotificationOptions options = new TypingNotificationOptions();\noptions.setSenderDisplayName(\"Sender Display Name\");\nchatThreadClient.sendTypingNotificationWithResponse(options, Context.NONE);\n```\n\n## Troubleshooting\n\nIn progress.\n\n## Next steps\n\nCheck out other client libraries for Azure communication service\n\n<!-- LINKS -->\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n[product_docs]: https://docs.microsoft.com/azure/communication-services/\n[package]: https://search.maven.org/artifact/com.azure/azure-communication-chat\n[api_documentation]: https://aka.ms/java-docs\n[source]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/communication/azure-communication-chat/src\n",
        "repo_name": "communication/azure-communication-chat",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/communication/azure-communication-chat",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Communication Common Performance test client library for Java\n\nRepresents Performance tests for Azure Communication Common for Java.\n\n## Getting started\n\n### Prerequisites\n\n- A [Java Development Kit (JDK)][jdk_link], version 8 or later.\n\n### Adding the package to your product\n\n### Adding the package to your product\n## Key concepts\n\n## Examples\n### Executing the performance test\n1. Compile the performance project into a standalone jar using the command from the root of the perf project folder\n```\nmvn clean package -f sdk/communication/azure-communication-common-perf/pom.xml\n```\n\n2. Execute the corresponding perf test in the project using the command.\n```\njava -jar <path-to-packaged-jar-with-dependencies-from-step-1> <options-for-the-test>\njava -jar sdk/communication/azure-communication-common-perf/target/azure-communication-common-perf-1.0.0-beta.1-jar-with-dependencies.jar hmacauthenticationpolicy --warmup 1 --iterations 1 --parallel 50 --duration 15\n```\n\n### Common perf test command line options for Text Analytics\n- `--duration` - Number of seconds to run the main test for. Default is 10.\n- `--iterations` - Number of iterations of main test loop.\n- `--parallel` - Number of operations to execute in parallel,\n- `--warmup` - Duration of test warmup time in seconds before the test attributes are calculated.\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/master/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fcommunication%2Fazure-communication-common-perf%2FREADME.png)\n",
        "repo_name": "communication/azure-communication-common-perf",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/communication/azure-communication-common-perf",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Communication Service Common client library for Java\n\nAzure Communication Common contains data structures commonly used for communicating with Azure Communication Services. \nIt is intended to provide cross-cutting concerns, e.g. authentication. \n\n## Getting started\n\n### Prerequisites\n\n- An Azure account with an active subscription. [Create an account for free](https://azure.microsoft.com/free/?WT.mc_id=A261C142F).\n- [Java Development Kit (JDK)](https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable) version 8 or above.\n- [Apache Maven](https://maven.apache.org/download.cgi).\n- A deployed Communication Services resource.\n\n#### Include the BOM file\n\nPlease include the azure-sdk-bom to your project to take dependency on the General Availability (GA) version of the library. In the following snippet, replace the {bom_version_to_target} placeholder with the version number.\nTo learn more about the BOM, see the [AZURE SDK BOM README](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/boms/azure-sdk-bom/README.md).\n\n```xml\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>com.azure</groupId>\n            <artifactId>azure-sdk-bom</artifactId>\n            <version>{bom_version_to_target}</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n```\nand then include the direct dependency in the dependencies section without the version tag.\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-communication-common</artifactId>\n  </dependency>\n</dependencies>\n```\n\n#### Include direct dependency\n\nIf you want to take dependency on a particular version of the library that is not present in the BOM,\nadd the direct dependency to your project as follows.\n\n[//]: # ({x-version-update-start;com.azure:azure-communication-common;current})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-communication-common</artifactId>\n    <version>2.0.0-beta.1</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n## Key concepts\n\nTo work with Azure Communication Services, a resource access key is used for authentication.\n\nAzure Communication Service supports HMAC authentication with resource access key. To\napply HMAC authentication, construct `CommunicationClientCredential` with the access key and instantiate\na `CommunicationIdentityClient` to manage users and tokens.\n\n### CommunicationTokenCredential\n\nThe `CommunicationTokenCredential` object is used to authenticate a user with Communication Services, such as Chat or Calling. It optionally provides an auto-refresh mechanism to ensure a continuously stable authentication state during communications.\n\nDepending on your scenario, you may want to initialize the `CommunicationTokenCredential` with:\n\n- a static token (suitable for short-lived clients used to e.g. send one-off Chat messages) or\n- a callback function that ensures a continuous authentication state (ideal e.g. for long Calling sessions).\n\nThe tokens supplied to the `CommunicationTokenCredential` either through the constructor or via the token refresher callback can be obtained using the Azure Communication Identity library.\n\n## Examples\n\n### Create a credential with a static token\n\nFor short-lived clients, refreshing the token upon expiry is not necessary and `CommunicationTokenCredential` may be instantiated with a static token.\n\n```java\nString token = System.getenv(\"COMMUNICATION_SERVICES_USER_TOKEN\");\nCommunicationTokenCredential tokenCredential = new CommunicationTokenCredential(token);\n```\n\n### Create a credential with proactive refreshing with a callback\n\nAlternatively, for long-lived clients, you can create a `CommunicationTokenCredential` with a callback to renew tokens if expired.\nHere we assume that we have a function `fetchTokenFromMyServerForUser` that makes a network request to retrieve a token string for a user.\nIt's necessary that the `fetchTokenFromMyServerForUser` function returns a valid token (with an expiration date set in the future) at all times.\n\nOptionally, you can enable proactive token refreshing where a fresh token will be acquired as soon as the\nprevious token approaches expiry. Using this method, your requests are less likely to be blocked to acquire a fresh token:\n\n```java\nString token = System.getenv(\"COMMUNICATION_SERVICES_USER_TOKEN\");\nCommunicationTokenRefreshOptions tokenRefreshOptions = new CommunicationTokenRefreshOptions(fetchTokenFromMyServerForUser)\n    .setRefreshProactively(true)\n    .setInitialToken(token);\nCommunicationTokenCredential tokenCredential = new CommunicationTokenCredential(tokenRefreshOptions);     \n```\n\n## Troubleshooting\n\nIn progress.\n\n## Next steps\n\nCheck out other client libraries for Azure communication service\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a [Contributor License Agreement (CLA)][cla] declaring that you have the right to, and actually do, grant us the rights to use your contribution.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n",
        "repo_name": "communication/azure-communication-common",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/communication/azure-communication-common",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Communication Email client library for Java\n\nThis package contains the Java SDK for Azure Communication Services for Email.\n\n## Getting started\n\n### Prerequisites\n\n- [Azure subscription][azure_sub]\n- [Communication Service Resource][communication_resource_docs]\n- [Email Communication Resource][email_resource_docs] with an active [Domain][domain_overview]\n- [Java Development Kit (JDK)](https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable) version 8 or above\n- [Apache Maven](https://maven.apache.org/download.cgi)\n\nTo create these resources, you can use the [Azure Portal][communication_resource_create_portal], the [Azure PowerShell][communication_resource_create_power_shell], or the [.NET management client library][communication_resource_create_net].\n\n### Include the package\n#### Include the BOM file\n\nPlease include the azure-sdk-bom to your project to take dependency on the General Availability (GA) version of the library. In the following snippet, replace the {bom_version_to_target} placeholder with the version number.\nTo learn more about the BOM, see the [AZURE SDK BOM README](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/boms/azure-sdk-bom/README.md).\n\n```xml\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>com.azure</groupId>\n            <artifactId>azure-sdk-bom</artifactId>\n            <version>{bom_version_to_target}</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n```\n\nand then include the direct dependency in the dependencies section without the version tag.\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-communication-email</artifactId>\n  </dependency>\n</dependencies>\n```\n\n#### Include direct dependency\nIf you want to take dependency on a particular version of the library that is not present in the BOM,\nadd the direct dependency to your project as follows.\n\n[//]: # ({x-version-update-start;com.azure:azure-communication-email;current})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-communication-email</artifactId>\n    <version>1.0.2</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n## Key concepts\n> More details coming soon.\n\n## Examples\n\n`EmailClient` provides the functionality to send email messages .\n\n### Client Creation and Authentication\n\nEmail clients can be created and authenticated using the connection string acquired from an Azure Communication Resource in the [Azure Portal][azure_portal].\n\n```java readme-sample-createEmailClientWithConnectionString\nString connectionString = \"https://<resource-name>.communication.azure.com/;<access-key>\";\n\nEmailClient emailClient = new EmailClientBuilder()\n    .connectionString(connectionString)\n    .buildClient();\n```\n\nEmail clients can also be created and authenticated using the endpoint and Azure Key Credential acquired from an Azure Communication Resource in the [Azure Portal][azure_portal].\n\n```java readme-sample-createEmailClientUsingAzureKeyCredential\nString endpoint = \"https://<resource-name>.communication.azure.com\";\nAzureKeyCredential azureKeyCredential = new AzureKeyCredential(\"<access-key>\");\n\nEmailClient emailClient = new EmailClientBuilder()\n    .endpoint(endpoint)\n    .credential(azureKeyCredential)\n    .buildClient();\n```\n\n### Azure Active Directory Token Authentication\nA `DefaultAzureCredential` object must be passed to the `EmailClientBuilder` via the `credential()` method. An endpoint must also be set via the `endpoint()` method.\n\nThe `AZURE_CLIENT_SECRET`, `AZURE_CLIENT_ID`, and `AZURE_TENANT_ID` environment variables are needed to create a `DefaultAzureCredential` object.\n\n```java readme-sample-createEmailClientWithAAD\n// You can find your endpoint and access key from your resource in the Azure Portal\nString endpoint = \"https://<resource-name>.communication.azure.com/\";\n\nEmailClient emailClient = new EmailClientBuilder()\n    .endpoint(endpoint)\n    .credential(new DefaultAzureCredentialBuilder().build())\n    .buildClient();\n```\n\n### Send an Email Message\n\nTo send an email message, call the `beginSend` function from the `EmailClient`. This will return a poller. You can use this poller to check on the status of the operation and retrieve the result once it's finished.\n\n```java readme-sample-sendEmailToSingleRecipient\nEmailMessage message = new EmailMessage()\n    .setSenderAddress(\"<sender-email-address>\")\n    .setToRecipients(\"<recipient-email-address>\")\n    .setSubject(\"test subject\")\n    .setBodyPlainText(\"test message\");\n\nSyncPoller<EmailSendResult, EmailSendResult> poller = emailClient.beginSend(message);\nPollResponse<EmailSendResult> response = poller.waitForCompletion();\n\nSystem.out.println(\"Operation Id: \" + response.getValue().getId());\n```\n\n### Send an Email Message to Multiple Recipients\n\nTo send an email message to multiple recipients, simply add the new addresses in the appropriate `EmailMessage` setter.\n\n```java readme-sample-sendEmailToMultipleRecipients\nEmailMessage message = new EmailMessage()\n    .setSenderAddress(\"<sender-email-address>\")\n    .setSubject(\"test subject\")\n    .setBodyPlainText(\"test message\")\n    .setToRecipients(\"<recipient-email-address>\", \"<recipient-2-email-address>\")\n    .setCcRecipients(\"<cc-recipient-email-address>\")\n    .setBccRecipients(\"<bcc-recipient-email-address>\");\n\nSyncPoller<EmailSendResult, EmailSendResult> poller = emailClient.beginSend(message);\nPollResponse<EmailSendResult> response = poller.waitForCompletion();\n\nSystem.out.println(\"Operation Id: \" + response.getValue().getId());\n```\n\nTo customize the email message recipients further, you can instantiate the `EmailAddress` objects and pass that them to the appropriate `EmailMessage' setters.\n\n```java readme-sample-sendEmailToMultipleRecipientsWithOptions\nEmailAddress toAddress1 = new EmailAddress(\"<recipient-email-address>\")\n    .setDisplayName(\"Recipient\");\n\nEmailAddress toAddress2 = new EmailAddress(\"<recipient-2-email-address>\")\n    .setDisplayName(\"Recipient 2\");\n\nEmailMessage message = new EmailMessage()\n    .setSenderAddress(\"<sender-email-address>\")\n    .setSubject(\"test subject\")\n    .setBodyPlainText(\"test message\")\n    .setToRecipients(toAddress1, toAddress2);\n\nSyncPoller<EmailSendResult, EmailSendResult> poller = emailClient.beginSend(message);\nPollResponse<EmailSendResult> response = poller.waitForCompletion();\n\nSystem.out.println(\"Operation Id: \" + response.getValue().getId());\n```\n\n### Send Email with Attachments\n\nAzure Communication Services support sending email with attachments.\n\n```java readme-sample-sendEmailWithAttachment\nBinaryData attachmentContent = BinaryData.fromFile(new File(\"C:/attachment.txt\").toPath());\nEmailAttachment attachment = new EmailAttachment(\n    \"attachment.txt\",\n    \"text/plain\",\n    attachmentContent\n);\n\nEmailMessage message = new EmailMessage()\n    .setSenderAddress(\"<sender-email-address>\")\n    .setToRecipients(\"<recipient-email-address>\")\n    .setSubject(\"test subject\")\n    .setBodyPlainText(\"test message\")\n    .setAttachments(attachment);\n\nSyncPoller<EmailSendResult, EmailSendResult> poller = emailClient.beginSend(message);\nPollResponse<EmailSendResult> response = poller.waitForCompletion();\n\nSystem.out.println(\"Operation Id: \" + response.getValue().getId());\n```\n\n## Troubleshooting\n> More details coming soon,\n\n## Next steps\n\n- [Read more about Email in Azure Communication Services][nextsteps]\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [cla.microsoft.com][cla].\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n\n[azure_sub]: https://azure.microsoft.com/free/dotnet/\n[azure_portal]: https://portal.azure.com\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n[communication_resource_docs]: https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource?tabs=windows&pivots=platform-azp\n[email_resource_docs]: https://aka.ms/acsemail/createemailresource\n[communication_resource_create_portal]: https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource?tabs=windows&pivots=platform-azp\n[communication_resource_create_power_shell]: https://docs.microsoft.com/powershell/module/az.communication/new-azcommunicationservice\n[communication_resource_create_net]: https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource?tabs=windows&pivots=platform-net\n[package]: https://www.nuget.org/packages/Azure.Communication.Common/\n[product_docs]: https://aka.ms/acsemail/overview\n[nextsteps]: https://aka.ms/acsemail/overview\n[nuget]: https://www.nuget.org/\n[source]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/communication\n[domain_overview]: https://aka.ms/acsemail/domainsoverview\n",
        "repo_name": "communication/azure-communication-email",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/communication/azure-communication-email",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Communication Identity client library for Java\n\nThe identity package is used for managing users and tokens for Azure Communication Services.\n\n[Source code][source] | [Package (Maven)][package] | [API reference documentation][api_documentation]\n| [Product documentation][product_docs]\n<!-- Update the source and package link -->\n\n## Getting started\n\n### Prerequisites\n\n- An Azure subscription. [Create an account for free](https://azure.microsoft.com/free/?WT.mc_id=A261C142F).\n- [Java Development Kit (JDK)](https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable) version 8 or above.\n- [Apache Maven](https://maven.apache.org/download.cgi).\n- A Communication Services resource. You can use the [Azure Portal](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource?tabs=windows&pivots=platform-azp) or the [Azure PowerShell](https://docs.microsoft.com/powershell/module/az.communication/new-azcommunicationservice) to set it up.\n\n### Include the package\n#### Include the BOM file\n\nPlease include the azure-sdk-bom to your project to take dependency on the General Availability (GA) version of the library. In the following snippet, replace the {bom_version_to_target} placeholder with the version number.\nTo learn more about the BOM, see the [AZURE SDK BOM README](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/boms/azure-sdk-bom/README.md).\n\n```xml\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>com.azure</groupId>\n            <artifactId>azure-sdk-bom</artifactId>\n            <version>{bom_version_to_target}</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n```\nand then include the direct dependency in the dependencies section without the version tag.\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-communication-identity</artifactId>\n  </dependency>\n</dependencies>\n```\n\n#### Include direct dependency\nIf you want to take dependency on a particular version of the library that is not present in the BOM,\nadd the direct dependency to your project as follows.\n\n\n[//]: # ({x-version-update-start;com.azure:azure-communication-identity;current})\n```xml\n<dependency>\n  <groupId>com.azure</groupId>\n  <artifactId>azure-communication-identity</artifactId>\n  <version>1.4.5</version>\n</dependency>\n```\n\n## Authenticate the client\n\nThere are two forms of authentication to use the Identity SDK:\n\n### Azure Active Directory Token Authentication\nA `DefaultAzureCredential` object must be passed to the `CommunicationIdentityClientBuilder` via the credential() function. Endpoint and httpClient must also be set via the endpoint() and httpClient() functions respectively.\n\n`AZURE_CLIENT_SECRET`, `AZURE_CLIENT_ID` and `AZURE_TENANT_ID` environment variables\nare needed to create a DefaultAzureCredential object.\n\n```java readme-sample-createCommunicationIdentityClientWithAAD\n// You can find your endpoint and access key from your resource in the Azure Portal\nString endpoint = \"https://<RESOURCE_NAME>.communication.azure.com\";\n\nCommunicationIdentityClient communicationIdentityClient = new CommunicationIdentityClientBuilder()\n    .endpoint(endpoint)\n    .credential(new DefaultAzureCredentialBuilder().build())\n    .buildClient();\n```\n\n### AzureKeyCredential Authentication\nIdentity uses HMAC authentication with the resource access key.\nThe access key can be used to create an AzureKeyCredential and provided to the `CommunicationIdentityClientBuilder` via the credential() function. Endpoint and httpClient must also be set via the endpoint() and httpClient() functions respectively.\n\n```java readme-sample-createCommunicationIdentityClient\n// You can find your endpoint and access key from your resource in the Azure Portal\nString endpoint = \"https://<RESOURCE_NAME>.communication.azure.com\";\nAzureKeyCredential keyCredential = new AzureKeyCredential(\"<access-key>\");\n\nCommunicationIdentityClient communicationIdentityClient = new CommunicationIdentityClientBuilder()\n    .endpoint(endpoint)\n    .credential(keyCredential)\n    .buildClient();\n```\n\n### Connection String Authentication\nAlternatively, you can provide the entire connection string using the connectionString() function instead of providing the endpoint and access key.\n\n```java readme-sample-createCommunicationIdentityClientWithConnectionString\n// You can find your connection string from your resource in the Azure Portal\nString connectionString = \"<connection_string>\";\n\nCommunicationIdentityClient communicationIdentityClient = new CommunicationIdentityClientBuilder()\n    .connectionString(connectionString)\n    .buildClient();\n```\n\n## Key concepts\n\n`CommunicationIdentityClient` and `CommunicationIdentityAsyncClient` provide the functionalities to manage users and user tokens.\n\n## Examples\n\n### Creating a new user\nUse the `createUser` function to create a new user. `user.getId()` gets the\nunique ID of the user that was created.\n\n```java readme-sample-createNewUser\nCommunicationUserIdentifier user = communicationIdentityClient.createUser();\nSystem.out.println(\"User id: \" + user.getId());\n```\n\n### Getting a token for an existing user\nUse the `getToken` function to get a token for an existing user. The function\nalso takes in a list of `CommunicationTokenScope`. Scope options include:\n- `chat` (Chat)\n- `voip` (Voice over IP)\n\n```java readme-sample-issueUserToken\n // Define a list of communication token scopes\nList<CommunicationTokenScope> scopes = Arrays.asList(CommunicationTokenScope.CHAT);\n\nAccessToken userToken = communicationIdentityClient.getToken(user, scopes);\nSystem.out.println(\"User token value: \" + userToken.getToken());\nSystem.out.println(\"Expires at: \" + userToken.getExpiresAt());\n```\n\nIt's also possible to create a Communication Identity access token by customizing the expiration time. The token can be configured to expire in as little as one hour or as long as 24 hours. The default expiration time is 24 hours.\n```java readme-sample-issueTokenWithCustomExpiration\n// Define a list of Communication Identity access token scopes\nList<CommunicationTokenScope> scopes = Arrays.asList(CommunicationTokenScope.CHAT);\n// Set custom validity period of the Communication Identity access token within [1,24]\n// hours range. If not provided, the default value of 24 hours will be used.\nDuration tokenExpiresIn = Duration.ofHours(1);\nAccessToken userToken = communicationIdentityClient.getToken(user, scopes, tokenExpiresIn);\nSystem.out.println(\"User token value: \" + userToken.getToken());\nSystem.out.println(\"Expires at: \" + userToken.getExpiresAt());\n```\n\n### Create a new user and token in a single request\nFor convenience, use `createUserAndToken` to create a new user and issue a token with one function call. This translates into a single web request as opposed to creating a user first and then issuing a token.\n\n```java readme-sample-createNewUserAndToken\n// Define a list of communication token scopes\nList<CommunicationTokenScope> scopes = Arrays.asList(CommunicationTokenScope.CHAT);\n\nCommunicationUserIdentifierAndToken result = communicationIdentityClient.createUserAndToken(scopes);\nSystem.out.println(\"User id: \" + result.getUser().getId());\nSystem.out.println(\"User token value: \" + result.getUserToken().getToken());\n```\n\nHere it's also possible to specify the expiration time for the Communication Identity access token. The token can be configured to expire in as little as one hour or as long as 24 hours. The default expiration time is 24 hours.\n\n```java readme-sample-createNewUserAndTokenWithCustomExpiration\n// Define a list of communication token scopes\nList<CommunicationTokenScope> scopes = Arrays.asList(CommunicationTokenScope.CHAT);\n// Set custom validity period of the Communication Identity access token within [1,24]\n// hours range. If not provided, the default value of 24 hours will be used.\nDuration tokenExpiresIn = Duration.ofHours(1);\nCommunicationUserIdentifierAndToken result = communicationIdentityClient.createUserAndToken(scopes, tokenExpiresIn);\nSystem.out.println(\"User id: \" + result.getUser().getId());\nSystem.out.println(\"User token value: \" + result.getUserToken().getToken());\n```\n\n### Revoking all tokens for an existing user\nUse the `revokeTokens` function to revoke all the issued tokens of a user.\n\n```java readme-sample-revokeUserToken\n// revoke tokens issued for the specified user\ncommunicationIdentityClient.revokeTokens(user);\n```\n\n### Deleting a user\nUse the `deleteUser` function to delete a user.\n\n```java readme-sample-deleteUser\n// delete a previously created user\ncommunicationIdentityClient.deleteUser(user);\n```\n\n### Exchanging Azure AD access token of a Teams User for a Communication Identity access token\nUse the `getTokenForTeamsUser` function to exchange an Azure AD access token of a Teams User for a new Communication Identity access token.\n\n```java readme-sample-getTokenForTeamsUser\nString clientId = \"<Client ID of an Azure AD application>\";\nString userObjectId = \"<Object ID of an Azure AD user (Teams User)>\";\nGetTokenForTeamsUserOptions options = new GetTokenForTeamsUserOptions(teamsUserAadToken, clientId, userObjectId);\nAccessToken accessToken = communicationIdentityClient.getTokenForTeamsUser(options);\nSystem.out.println(\"User token value: \" + accessToken.getToken());\nSystem.out.println(\"Expires at: \" + accessToken.getExpiresAt());\n```\n\n## Troubleshooting\n\nAll user token service operations will throw an exception on failure.\n\n```java readme-sample-createUserTroubleshooting\ntry {\n    CommunicationUserIdentifier user = communicationIdentityClient.createUser();\n} catch (RuntimeException ex) {\n    System.out.println(ex.getMessage());\n}\n```\n\n## Next steps\n\nPlease take a look at the [samples][samples] directory for detailed examples of how to use this library to manage identities and tokens.\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a [Contributor License Agreement (CLA)][cla] declaring that you have the right to, and actually do, grant us the rights to use your contribution.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n[product_docs]: https://docs.microsoft.com/azure/communication-services/\n[package]: https://search.maven.org/artifact/com.azure/azure-communication-identity\n[api_documentation]: https://aka.ms/java-docs\n[samples]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/communication/azure-communication-identity/src/samples/java/com/azure/communication/identity/ReadmeSamples.java\n[source]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/communication/azure-communication-identity/src\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fcommunication%2Fazure-communication-identity%2FREADME.png)\n",
        "repo_name": "communication/azure-communication-identity",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/communication/azure-communication-identity",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Communication Job Router client library for Java\n\nAzure Communication Job Router contains the APIs used in job router applications for Azure Communication Services.\n\n[Source code][source] | [Package (Maven)][package] | [API reference documentation][api_documentation]\n| [Product documentation][product_docs]\n\n## Getting started\n\n### Prerequisites\n\n- An Azure account with an active subscription. [Create an account for free](https://azure.microsoft.com/free/?WT.mc_id=A261C142F).\n- [Java Development Kit (JDK)](https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable) version 8 or above.\n- [Apache Maven](https://maven.apache.org/download.cgi).\n- A deployed Communication Services resource. You can use the [Azure Portal](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource?tabs=windows&pivots=platform-azp) or the [Azure PowerShell](https://docs.microsoft.com/powershell/module/az.communication/new-azcommunicationservice) to set it up.\n### Include the package\n#### Include the BOM file\n\nPlease include the azure-sdk-bom to your project to take dependency on the General Availability (GA) version of the library. In the following snippet, replace the {bom_version_to_target} placeholder with the version number.\nTo learn more about the BOM, see the [AZURE SDK BOM README](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/boms/azure-sdk-bom/README.md).\n\n```xml\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>com.azure</groupId>\n            <artifactId>azure-sdk-bom</artifactId>\n            <version>{bom_version_to_target}</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n```\nand then include the direct dependency in the dependencies section without the version tag.\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-communication-jobrouter</artifactId>\n  </dependency>\n</dependencies>\n```\n\n#### Include direct dependency\nIf you want to take dependency on a particular version of the library that is not present in the BOM,\nadd the direct dependency to your project as follows.\n\n[//]: # ({x-version-update-start;com.azure:azure-communication-jobrouter;current})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-communication-jobrouter</artifactId>\n    <version>1.0.0-beta.1</version>\n</dependency>\n```\n\n## Key concepts\n\n### Job\n\nA Job is a unit of work (demand), which must be routed to an available Worker (supply). A real-world example is an incoming call or chat in the context of a call center.\n\n### Worker\n\nA Worker is the supply available to handle a Job. When you use the SDK to register a Worker to receive jobs, you can specify:\n\n- One or more queues to listen on.\n- The number of concurrent jobs per Channel that the Worker can handle.\n- A set of Labels that can be used to group and select workers.\n\nA real-world example is an agent in a call center.\n\n### Queue\n\nA Queue is an ordered list of jobs, that are waiting to be served to a worker. Workers register with a queue to receive work from it.\n\nA real-world example is a call queue in a call center.\n\n### Channel\n\nA Channel is a grouping of jobs by some type. When a worker registers to receive work, they must also specify for which channels they can handle work, and how much of each can they handle concurrently. Channels are just a string discriminator and aren't explicitly created.\n\nReal-world examples are `voice calls` or `chats` in a call center.\n\n### Offer\n\nAn Offer is extended by Job Router to a worker to handle a particular job when it determines a match. You can either accept or decline the offer with the JobRouter SDK. If you ignore the offer, it expires according to the time to live configured on the Distribution Policy.\n\nA real-world example is the ringing of an agent in a call center.\n\n\n### Distribution Policy\n\nA Distribution Policy is a configuration set that controls how jobs in a queue are distributed to workers registered with that queue. This configuration includes:\n\n- How long an Offer is valid before it expires.\n- The distribution mode, which define the order in which workers are picked when there are multiple available.\n- How many concurrent offers can there be for a given job.\n\n### Labels\n\nYou can attach labels to workers, jobs, and queues. Labels are key value pairs that can be of `string`, `number`, or `boolean` data types.\n\nA real-world example is the skill level of a particular worker or the team or geographic location.\n\n### Worker selectors\n\nWorker selectors can be attached to a job in order to target a subset of workers on the queue.\n\nA real-world example is a condition on an incoming call that the agent must have a minimum level of knowledge of a particular product.\n\n### Classification policy\n\nA classification policy can be used to programmatically select a queue, determine job priority, or attach worker label selectors to a job.\n\n### Queue selectors\n\nQueue selectors can be attached to a classification policy in order to target a queue which fulfills certain conditions.\nThis queue is used enqueueing an incoming job.\n\nA real-world example is a condition on an incoming call that the call has to get queued to a queue which supports `chat`.\n\n\n### Exception policy\n\nAn exception policy controls the behavior of a Job based on a trigger and executes a desired action. The exception policy is attached to a Queue so it can control the behavior of Jobs in the Queue.\n\n\n## Examples\n\n### Client Initialization\nTo initialize the JobRouter Client, the connection string can be used to instantiate.\nAlternatively, you can also use Active Directory authentication using DefaultAzureCredential.\n\n```java \nRouterClient routerClient = new RouterClientBuilder()\n    .connectionString(connectionString);\n    .buildClient();\n```\n\nUsing `RouterClient` created from builder, create Job Router entities as described below.\n\n### Create a Distribution Policy\n\n```java \nCreateDistributionPolicyOptions createDistributionPolicyOptions = new CreateDistributionPolicyOptions(\n    \"distribution-policy-id\",\n    10.0,\n    new LongestIdleMode()\n        .setMinConcurrentOffers(1)\n        .setMaxConcurrentOffers(10)\n);\nDistributionPolicy distributionPolicy = routerClient.createDistributionPolicy(createDistributionPolicyOptions);\n```\n\n### Create a Queue\n\n```java \nCreateQueueOptions createQueueOptions = new CreateQueueOptions(\"queue-id\", distributionPolicy.getId());\nJobQueue jobQueue = routerClient.createQueue(createQueueOptions);\n```\n\n### Create a Job\n\n```java \nCreateJobOptions createJobOptions = new CreateJobOptions(\"job-id\", \"chat-channel\", queueId)\n            .setPriority(1)\n            .setChannelReference(\"12345\")\n            .setRequestedWorkerSelectors(\n                new ArrayList<>() {{\n                    new WorkerSelector()\n                        .setKey(\"Some-skill\")\n                        .setLabelOperator(LabelOperator.GREATER_THAN)\n                        .setValue(10);\n                }}\n            );\nRouterJob routerJob = routerClient.createJob(createJobOptions);\n```\n\n### Create a Worker\n\n```java \nMap<String, LabelValue> labels = new HashMap<String, LabelValue>() {\n    {\n        put(\"Label\", new LabelValue(\"Value\"));\n    }\n};\n\nMap<String, Object> tags = new HashMap<String, Object>() {\n    {\n        put(\"Tag\", \"Value\");\n    }\n};\n\nMap<String, ChannelConfiguration> channelConfigurations = new HashMap<String, ChannelConfiguration>() {\n    {\n        put(\"channel1\", new ChannelConfiguration().setCapacityCostPerJob(1));\n    }\n};\n\nMap<String, QueueAssignment> queueAssignments = new HashMap<String, QueueAssignment>() {\n    {\n        put(jobQueue.getId(), new Object());\n    }\n};\n\nCreateWorkerOptions createWorkerOptions = new CreateWorkerOptions(workerId, 10)\n    .setLabels(labels)\n    .setTags(tags)\n    .setAvailableForOffers(false)\n    .setChannelConfigurations(channelConfigurations)\n    .setQueueAssignments(queueAssignments);\n\nRouterWorker routerWorker = routerClient.createWorker(createWorkerOptions);\n```\n\n## Troubleshooting\n\nRunning into issues? This section should contain details as to what to do there.\n\n## Next steps\n- [Read more about Router in Azure Communication Services][router_concepts]\n\n### More sample code\nPlease take a look at the [samples](https://github.com/cparisineti/azure-sdk-for-java/tree/feature/jobrouter-initial-commit/sdk/communication/azure-communication-jobrouter/src/samples/) directory for detailed examples of how to use this library.\n\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a [Contributor License Agreement (CLA)][cla] declaring that you have the right to, and actually do, grant us the rights to use your contribution.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n",
        "repo_name": "communication/azure-communication-jobrouter",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/communication/azure-communication-jobrouter",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Communication Network Traversal Package client library for Java\n\nAzure Communication Network Traversal is managing TURN credentials for Azure Communication Services.\n\nIt will provide TURN credentials to a user.\n\n[Source code](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/communication) | [API reference documentation](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/communication)\n\n## Getting started\n\n### Prerequisites\n\n- An Azure subscription. [Create an account for free](https://azure.microsoft.com/free/?WT.mc_id=A261C142F).\n- [Java Development Kit (JDK)](https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable) version 8 or above.\n- [Apache Maven](https://maven.apache.org/download.cgi).\n- A Communication Services resource. You can use the [Azure Portal](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource?tabs=windows&pivots=platform-azp) or the [Azure PowerShell](https://docs.microsoft.com/powershell/module/az.communication/new-azcommunicationservice) to set it up.\n\n### Include the package\n\n#### Include the BOM file\n\nPlease include the azure-sdk-bom to your project to take dependency on the General Availability (GA) version of the library. In the following snippet, replace the {bom_version_to_target} placeholder with the version number.\nTo learn more about the BOM, see the [AZURE SDK BOM README](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/boms/azure-sdk-bom/README.md).\n\n```xml\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>com.azure</groupId>\n            <artifactId>azure-sdk-bom</artifactId>\n            <version>{bom_version_to_target}</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n```\nand then include the direct dependency in the dependencies section without the version tag as shown below.\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-security-attestation</artifactId>\n  </dependency>\n</dependencies>\n```\n\n#### Include direct dependency\nIf you want to take dependency on a particular version of the library that is not present in the BOM,\nadd the direct dependency to your project as follows.\n\n[//]: # ({x-version-update-start;com.azure:azure-communication-networktraversal;current})\n```xml\n<dependency>\n  <groupId>com.azure</groupId>\n  <artifactId>azure-communication-networktraversal</artifactId>\n  <version>1.1.0-beta.2</version>\n</dependency>\n```\n\n## Authenticate the client\n\nThere are two forms of authentication to use the Relay SDK:\n\n### Azure Active Directory Token Authentication\nA `DefaultAzureCredential` object can be passed to the `CommunicationRelayClientBuilder` via the credential() function. Endpoint must also be set via the endpoint() function.\n\n`AZURE_CLIENT_SECRET`, `AZURE_CLIENT_ID` and `AZURE_TENANT_ID` environment variables\nare needed to create a DefaultAzureCredential object.\n\n```java readme-sample-createCommunicationRelayClientWithAAD\n// You can find your endpoint and access key from your resource in the Azure Portal\nString endpoint = \"https://<RESOURCE_NAME>.communication.azure.com\";\n\nCommunicationRelayClient communicationRelayClient = new CommunicationRelayClientBuilder()\n    .endpoint(endpoint)\n    .credential(new DefaultAzureCredentialBuilder().build())\n    .buildClient();\n```\n\n### AzureKeyCredential Authentication\nNetwork Traversal uses HMAC authentication with the resource access key.\nThe access key can be used to create an AzureKeyCredential and provided to the `CommunicationRelayClientBuilder` via the credential() function. Endpoint must also be set via the endpoint() function.\n\n```java readme-sample-createCommunicationNetworkTraversalClient\n// You can find your endpoint and access key from your resource in the Azure Portal\nString endpoint = \"https://<RESOURCE_NAME>.communication.azure.com\";\nAzureKeyCredential keyCredential = new AzureKeyCredential(\"<access-key>\");\n\nCommunicationRelayClient communicationRelayClient = new CommunicationRelayClientBuilder()\n    .endpoint(endpoint)\n    .credential(keyCredential)\n    .buildClient();\n```\n\n```java readme-sample-createCommunicationNetworkTraversalAsyncClient\n// You can find your endpoint and access key from your resource in the Azure Portal\nString endpoint = \"https://<RESOURCE_NAME>.communication.azure.com\";\nAzureKeyCredential keyCredential = new AzureKeyCredential(\"<access-key>\");\n\nCommunicationRelayAsyncClient communicationRelayClient = new CommunicationRelayClientBuilder()\n    .endpoint(endpoint)\n    .credential(keyCredential)\n    .buildAsyncClient();\n```\n\n### Connection String Authentication\nAlternatively, you can provide the entire connection string using the connectionString() function instead of providing the endpoint and access key.\n\n```java readme-sample-createCommunicationRelayClientWithConnectionString\n// You can find your connection string from your resource in the Azure Portal\nString connectionString = \"<connection_string>\";\n\nCommunicationRelayClient communicationRelayClient = new CommunicationRelayClientBuilder()\n    .connectionString(connectionString)\n    .buildClient();\n```\n\n## Key concepts\n\n`CommunicationRelayClient` and `CommunicationRelayAsyncClient` provide the functionalities to manage users and user tokens.\n\n## Examples\n\n### Getting a new Relay Configuration\n\n```java readme-sample-getRelayConfigurationWithoutIdentity\nCommunicationRelayClient communicationRelayClient = createCommunicationNetworkTraversalClient();\nCommunicationRelayConfiguration config = communicationRelayClient.getRelayConfiguration();\n\nSystem.out.println(\"Expires on:\" + config.getExpiresOn());\nList<CommunicationIceServer> iceServers = config.getIceServers();\n\nfor (CommunicationIceServer iceS : iceServers) {\n    System.out.println(\"URLS: \" + iceS.getUrls());\n    System.out.println(\"Username: \" + iceS.getUsername());\n    System.out.println(\"Credential: \" + iceS.getCredential());\n    System.out.println(\"RouteType: \" + iceS.getRouteType());\n}\n```\n\n### Getting a new Relay Configuration providing a user\n\nUse the `createUser` function to create a new user from CommunicationIdentityClient\nUse the `getRelayConfiguration` function to get a Relay Configuration\n\n```java readme-sample-getRelayConfiguration\nCommunicationIdentityClient communicationIdentityClient = createCommunicationIdentityClient();\n\nCommunicationUserIdentifier user = communicationIdentityClient.createUser();\nSystem.out.println(\"User id: \" + user.getId());\n\nGetRelayConfigurationOptions options = new GetRelayConfigurationOptions();\noptions.setCommunicationUserIdentifier(user);\n\nCommunicationRelayClient communicationRelayClient = createCommunicationNetworkTraversalClient();\nCommunicationRelayConfiguration config = communicationRelayClient.getRelayConfiguration(options);\n\nSystem.out.println(\"Expires on:\" + config.getExpiresOn());\nList<CommunicationIceServer> iceServers = config.getIceServers();\n\nfor (CommunicationIceServer iceS : iceServers) {\n    System.out.println(\"URLS: \" + iceS.getUrls());\n    System.out.println(\"Username: \" + iceS.getUsername());\n    System.out.println(\"Credential: \" + iceS.getCredential());\n    System.out.println(\"RouteType: \" + iceS.getRouteType());\n}\n```\n\n### Getting a new Relay Configuration providing a Route Type\n\n```java readme-sample-getRelayConfigurationWithRouteType\n\nGetRelayConfigurationOptions options = new GetRelayConfigurationOptions();\noptions.setRouteType(RouteType.ANY);\n\nCommunicationRelayClient communicationRelayClient = createCommunicationNetworkTraversalClient();\nCommunicationRelayConfiguration config = communicationRelayClient.getRelayConfiguration(options);\n\nSystem.out.println(\"Expires on:\" + config.getExpiresOn());\nList<CommunicationIceServer> iceServers = config.getIceServers();\n\nfor (CommunicationIceServer iceS : iceServers) {\n    System.out.println(\"URLS: \" + iceS.getUrls());\n    System.out.println(\"Username: \" + iceS.getUsername());\n    System.out.println(\"Credential: \" + iceS.getCredential());\n    System.out.println(\"RouteType: \" + iceS.getRouteType());\n}\n```\n\n## Troubleshooting\n\nAll user token service operations will throw an exception on failure.\n\n```java readme-sample-createUserTroubleshooting\ntry {\n    CommunicationUserIdentifier user = communicationIdentityClient.createUser();\n    GetRelayConfigurationOptions options = new GetRelayConfigurationOptions();\n    options.setCommunicationUserIdentifier(user);\n\n    CommunicationRelayClient communicationRelayClient = createCommunicationNetworkTraversalClient();\n    CommunicationRelayConfiguration config = communicationRelayClient.getRelayConfiguration(options);\n} catch (RuntimeException ex) {\n    System.out.println(ex.getMessage());\n}\n```\nRefer to the official documentation for more details and error codes (to be added).\n\n## Next steps\n\nPlease take a look at the [samples][samples] directory for detailed examples of how to use this library to manage relay configuration\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a [Contributor License Agreement (CLA)][cla] declaring that you have the right to, and actually do, grant us the rights to use your contribution.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n[product_docs]: https://docs.microsoft.com/azure/communication-services/\n[api_documentation]: https://aka.ms/java-docs\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fcommunication%2Fazure-communication-networktraversal%2FREADME.png)\n",
        "repo_name": "communication/azure-communication-networktraversal",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/communication/azure-communication-networktraversal",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Communication Phone Numbers client library for Java\n\nThe phone numbers package provides capabilities for phone number management.\n\nPurchased phone numbers can come with many capabilities, depending on the country, number type and phone plan. Examples of capabilities are SMS inbound and outbound usage, calling inbound and outbound usage. Phone numbers can also be assigned to a bot via a webhook URL.\n\n[Source code][source] | [Package (Maven)][package] | [API reference documentation][api_documentation]\n| [Product documentation][product_docs]\n## Getting started\n\n### Prerequisites\n\n- An Azure account with an active subscription. [Create an account for free](https://azure.microsoft.com/free/?WT.mc_id=A261C142F).\n- [Java Development Kit (JDK)](https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable) version 8 or above.\n- [Apache Maven](https://maven.apache.org/download.cgi).\n- A deployed Communication Services resource. You can use the [Azure Portal](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource?tabs=windows&pivots=platform-azp) or the [Azure PowerShell](https://docs.microsoft.com/powershell/module/az.communication/new-azcommunicationservice) to set it up.\n\n### Include the package\n#### Include the BOM file\n\nPlease include the azure-sdk-bom to your project to take dependency on the General Availability (GA) version of the library. In the following snippet, replace the {bom_version_to_target} placeholder with the version number.\nTo learn more about the BOM, see the [AZURE SDK BOM README](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/boms/azure-sdk-bom/README.md).\n\n```xml\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>com.azure</groupId>\n            <artifactId>azure-sdk-bom</artifactId>\n            <version>{bom_version_to_target}</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n```\nand then include the direct dependency in the dependencies section without the version tag.\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-communication-phonenumbers</artifactId>\n  </dependency>\n</dependencies>\n```\n\n#### Include direct dependency\nIf you want to take dependency on a particular version of the library that is not present in the BOM,\nadd the direct dependency to your project as follows.\n\n\n[//]: # ({x-version-update-start;com.azure:azure-communication-phonenumbers;current})\n```xml\n<dependency>\n  <groupId>com.azure</groupId>\n  <artifactId>azure-communication-phonenumbers</artifactId>\n  <version>1.1.2</version>\n</dependency>\n```\n\n## Key concepts\n\nThis SDK provides functionality to easily manage `direct offer` and `direct routing` numbers.\n\nThe `direct offer` numbers come in two types: Geographic and Toll-Free. Geographic phone plans are phone plans associated with a location, whose phone numbers' area codes are associated with the area code of a geographic location. Toll-Free phone plans are phone plans not associated location. For example, in the US, toll-free numbers can come with area codes such as 800 or 888.\nThey are managed using the `PhoneNumbersClient`\n\nThe `direct routing` feature enables connecting your existing telephony infrastructure to ACS.\nThe configuration is managed using the `SipRoutingClient`, which provides methods for setting up SIP trunks and voice routing rules, in order to properly handle calls for your telephony subnet.\n\n### Initializing Client\nClients can be initialized using the Azure Active Directory Authentication.\n\n```java readme-sample-createPhoneNumberClientWithAAD\n// You can find your endpoint and access key from your resource in the Azure Portal\nString endpoint = \"https://<RESOURCE_NAME>.communication.azure.com\";\n\n// Create an HttpClient builder of your choice and customize it\nHttpClient httpClient = new NettyAsyncHttpClientBuilder().build();\n\nPhoneNumbersClient phoneNumberClient = new PhoneNumbersClientBuilder()\n    .endpoint(endpoint)\n    .credential(new DefaultAzureCredentialBuilder().build())\n    .httpClient(httpClient)\n    .buildClient();\n```\n\n```java readme-sample-createSipRoutingClientWithAAD\n// You can find your endpoint and access key from your resource in the Azure Portal\nString endpoint = \"https://<RESOURCE_NAME>.communication.azure.com\";\n\n// Create an HttpClient builder of your choice and customize it\nHttpClient httpClient = new NettyAsyncHttpClientBuilder().build();\n\nSipRoutingClient sipRoutingClient = new SipRoutingClientBuilder()\n    .endpoint(endpoint)\n    .credential(new DefaultAzureCredentialBuilder().build())\n    .httpClient(httpClient)\n    .buildClient();\n```\n\nUsing the endpoint and access key from the communication resource to authenticate is also possible.\n\n```java readme-sample-createPhoneNumberClient\n// You can find your endpoint and access token from your resource in the Azure Portal\nString endpoint = \"https://<RESOURCE_NAME>.communication.azure.com\";\nAzureKeyCredential keyCredential = new AzureKeyCredential(\"SECRET\");\n\n// Create an HttpClient builder of your choice and customize it\nHttpClient httpClient = new NettyAsyncHttpClientBuilder().build();\n\nPhoneNumbersClient phoneNumberClient = new PhoneNumbersClientBuilder()\n    .endpoint(endpoint)\n    .credential(keyCredential)\n    .httpClient(httpClient)\n    .buildClient();\n```\n\n```java readme-sample-createSipRoutingClient\n// You can find your endpoint and access token from your resource in the Azure Portal\nString endpoint = \"https://<RESOURCE_NAME>.communication.azure.com\";\nAzureKeyCredential keyCredential = new AzureKeyCredential(\"SECRET\");\n\n// Create an HttpClient builder of your choice and customize it\nHttpClient httpClient = new NettyAsyncHttpClientBuilder().build();\n\nSipRoutingClient sipRoutingClient = new SipRoutingClientBuilder()\n    .endpoint(endpoint)\n    .credential(keyCredential)\n    .httpClient(httpClient)\n    .buildClient();\n```\nAlternatively, you can provide the entire connection string using the connectionString() function of the client instead of providing the endpoint and access key.\n\n### Phone numbers client\n\n#### Phone Number Types overview\n\nPhone numbers come in two types; Geographic and Toll-Free. Geographic phone plans are phone plans associated with a location, whose phone numbers' area codes are associated with the area code of a geographic location. Toll-Free phone plans are phone plans not associated location. For example, in the US, toll-free numbers can come with area codes such as 800 or 888.\n\n#### Searching and Purchasing and Releasing numbers\n\nPhone numbers can be searched through the search creation API by providing an area code, quantity of phone numbers, application type, phone number type, and capabilities. The provided quantity of phone numbers will be reserved for ten minutes and can be purchased within this time. If the search is not purchased, the phone numbers will become available to others after ten minutes. If the search is purchased, then the phone numbers are purchased for the Azure resources.\n\nPhone numbers can also be released using the release API.\n\n### SIP routing client\n\nDirect routing feature allows connecting customer-provided telephony infrastructure to Azure Communication Resources. In order to setup routing configuration properly, customer needs to supply the SIP trunk configuration and SIP routing rules for calls. SIP routing client provides the necessary interface for setting this configuration.\n\nWhen the call arrives, system tries to match the destination number with regex number patterns of defined routes. The first route to match the number will be selected. The order of regex matching is the same as the order of routes in configuration, therefore the order of routes matters.\nOnce a route is matched, the call is routed to the first trunk in the route's trunks list. If the trunk is not available, next trunk in the list is selected.\n\n## Examples\n\n### PhoneNumbersClient\n\n#### Get Purchased Phone Number\nGets the specified purchased phone number.\n\n```java readme-sample-getPurchasedPhoneNumber\nPurchasedPhoneNumber phoneNumber = phoneNumberClient.getPurchasedPhoneNumber(\"+18001234567\");\nSystem.out.println(\"Phone Number Value: \" + phoneNumber.getPhoneNumber());\nSystem.out.println(\"Phone Number Country Code: \" + phoneNumber.getCountryCode());\n```\n\n#### Get All Purchased Phone Numbers\nLists all the purchased phone numbers.\n\n```java readme-sample-listPhoneNumbers\nPagedIterable<PurchasedPhoneNumber> phoneNumbers = createPhoneNumberClient().listPurchasedPhoneNumbers(Context.NONE);\nPurchasedPhoneNumber phoneNumber = phoneNumbers.iterator().next();\nSystem.out.println(\"Phone Number Value: \" + phoneNumber.getPhoneNumber());\nSystem.out.println(\"Phone Number Country Code: \" + phoneNumber.getCountryCode());\n```\n\n### Long Running Operations\n\nThe Phone Number Client supports a variety of long-running operations that allow indefinite polling time to the functions listed down below.\n\n#### Search for Available Phone Numbers\nSearch for available phone numbers by providing the area code, assignment type, phone number capabilities, phone number type, and quantity. The result of the search can then be used to purchase the numbers. Note that for the toll-free phone number type, providing the area code is optional.\n\n```java readme-sample-searchAvailablePhoneNumbers\nPhoneNumbersClient phoneNumberClient = createPhoneNumberClient();\nPhoneNumberCapabilities capabilities = new PhoneNumberCapabilities()\n    .setCalling(PhoneNumberCapabilityType.INBOUND)\n    .setSms(PhoneNumberCapabilityType.INBOUND_OUTBOUND);\nPhoneNumberSearchOptions searchOptions = new PhoneNumberSearchOptions().setAreaCode(\"800\").setQuantity(1);\n\nSyncPoller<PhoneNumberOperation, PhoneNumberSearchResult> poller = phoneNumberClient\n    .beginSearchAvailablePhoneNumbers(\"US\", PhoneNumberType.TOLL_FREE, PhoneNumberAssignmentType.APPLICATION, capabilities, searchOptions, Context.NONE);\nPollResponse<PhoneNumberOperation> response = poller.waitForCompletion();\nString searchId = \"\";\n\nif (LongRunningOperationStatus.SUCCESSFULLY_COMPLETED == response.getStatus()) {\n    PhoneNumberSearchResult searchResult = poller.getFinalResult();\n    searchId = searchResult.getSearchId();\n    System.out.println(\"Searched phone numbers: \" + searchResult.getPhoneNumbers());\n    System.out.println(\"Search expires by: \" + searchResult.getSearchExpiresBy());\n    System.out.println(\"Phone number costs:\" + searchResult.getCost().getAmount());\n}\n```\n\n#### Purchase Phone Numbers\nThe result of searching for phone numbers is a `PhoneNumberSearchResult`. This can be used to get the numbers' details and purchase numbers by passing in the `searchId` to the purchase number API.\n\n```java readme-sample-purchasePhoneNumbers\nPollResponse<PhoneNumberOperation> purchaseResponse =\n    phoneNumberClient.beginPurchasePhoneNumbers(searchId, Context.NONE).waitForCompletion();\nSystem.out.println(\"Purchase phone numbers is complete: \" + purchaseResponse.getStatus());\n```\n\n#### Release Phone Number\nReleases a purchased phone number.\n\n```java readme-sample-releasePhoneNumber\nPollResponse<PhoneNumberOperation> releaseResponse =\n    phoneNumberClient.beginReleasePhoneNumber(\"+18001234567\", Context.NONE).waitForCompletion();\nSystem.out.println(\"Release phone number is complete: \" + releaseResponse.getStatus());\n```\n\n#### Updating Phone Number Capabilities\nUpdates Phone Number Capabilities for Calling and SMS to one of:\n- `PhoneNumberCapabilityValue.NONE`\n- `PhoneNumberCapabilityValue.INBOUND`\n- `PhoneNumberCapabilityValue.OUTBOUND`\n- `PhoneNumberCapabilityValue.INBOUND_OUTBOUND`\n\n```java readme-sample-updatePhoneNumberCapabilities\nPhoneNumberCapabilities capabilities = new PhoneNumberCapabilities();\ncapabilities\n    .setCalling(PhoneNumberCapabilityType.INBOUND)\n    .setSms(PhoneNumberCapabilityType.INBOUND_OUTBOUND);\n\nSyncPoller<PhoneNumberOperation, PurchasedPhoneNumber> poller = phoneNumberClient.beginUpdatePhoneNumberCapabilities(\"+18001234567\", capabilities, Context.NONE);\nPollResponse<PhoneNumberOperation> response = poller.waitForCompletion();\n\nif (LongRunningOperationStatus.SUCCESSFULLY_COMPLETED == response.getStatus()) {\n    PurchasedPhoneNumber phoneNumber = poller.getFinalResult();\n    System.out.println(\"Phone Number Calling capabilities: \" + phoneNumber.getCapabilities().getCalling()); //Phone Number Calling capabilities: inbound\n    System.out.println(\"Phone Number SMS capabilities: \" + phoneNumber.getCapabilities().getSms()); //Phone Number SMS capabilities: inbound+outbound\n}\n```\n\n### SipRoutingClient\n\n#### Retrieve SIP trunks and routes\n\nGet the list of currently configured trunks or routes.\n\n```java readme-sample-listTrunksAndRoutes\nPagedIterable<SipTrunk> trunks = sipRoutingClient.listTrunks();\nPagedIterable<SipTrunkRoute> routes = sipRoutingClient.listRoutes();\nfor (SipTrunk trunk : trunks) {\n    System.out.println(\"Trunk \" + trunk.getFqdn() + \":\" + trunk.getSipSignalingPort());\n}\nfor (SipTrunkRoute route : routes) {\n    System.out.println(\"Route name: \" + route.getName());\n    System.out.println(\"Route description: \" + route.getDescription());\n    System.out.println(\"Route number pattern: \" + route.getNumberPattern());\n    System.out.println(\"Route trunks: \" + String.join(\",\", route.getTrunks()));\n}\n```\n\n#### Replace SIP trunks and routes\n\nReplace the list of currently configured trunks or routes with new values.\n\n```java readme-sample-setTrunksAndRoutes\nsipRoutingClient.setTrunks(asList(\n    new SipTrunk(\"<first trunk fqdn>\", 12345),\n    new SipTrunk(\"<second trunk fqdn>\", 23456)\n));\nsipRoutingClient.setRoutes(asList(\n    new SipTrunkRoute(\"route name1\", \".*9\").setTrunks(asList(\"<first trunk fqdn>\", \"<second trunk fqdn>\")),\n    new SipTrunkRoute(\"route name2\", \".*\").setTrunks(asList(\"<second trunk fqdn>\"))\n));\n```\n\n#### Retrieve single trunk\n\n```java readme-sample-getTrunk\nString fqdn = \"<trunk fqdn>\";\nSipTrunk trunk = sipRoutingClient.getTrunk(fqdn);\nif (trunk != null) {\n    System.out.println(\"Trunk \" + trunk.getFqdn() + \":\" + trunk.getSipSignalingPort());\n} else {\n    System.out.println(\"Trunk not found. \" + fqdn);\n}\n```\n\n#### Set single trunk\n\n```java readme-sample-setTrunk\nsipRoutingClient.setTrunk(new SipTrunk(\"<trunk fqdn>\", 12345));\n```\n\n#### Delete single trunk\n\n```java readme-sample-deleteTrunk\nsipRoutingClient.deleteTrunk(\"<trunk fqdn>\");\n```\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a [Contributor License Agreement (CLA)][cla] declaring that you have the right to, and actually do, grant us the rights to use your contribution.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n\n## Troubleshooting\n\nIn progress.\n\n## Next steps\n\nCheck out other client libraries for Azure communication service\n\n<!-- LINKS -->\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n[product_docs]: https://docs.microsoft.com/azure/communication-services/\n[package]: https://search.maven.org/artifact/com.azure/azure-communication-phonenumbers\n[api_documentation]: https://aka.ms/java-docs\n[source]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/communication/azure-communication-phonenumbers/src\n\n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fcommunication%2Fazure-communication-phonenumbers%2FREADME.png)\n",
        "repo_name": "communication/azure-communication-phonenumbers",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/communication/azure-communication-phonenumbers",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Communications Rooms Service client library for Java\n\nAzure Communication Rooms is used to operate on rooms.\n\n[Source code][source] | [Package (Maven)][package] | [API reference documentation][api_documentation]\n| [Product documentation][product_docs]\n\n## Getting started\n\n### Prerequisites\n\n- An Azure account with an active subscription. [Create an account for free](https://azure.microsoft.com/free/?WT.mc_id=A261C142F).\n- [Java Development Kit (JDK)](https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable) version 8 or above.\n- [Apache Maven](https://maven.apache.org/download.cgi).\n- A deployed Communication Services resource. You can use the [Azure Portal](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource?tabs=windows&pivots=platform-azp) or the [Azure PowerShell](https://docs.microsoft.com/powershell/module/az.communication/new-azcommunicationservice) to set it up.\n\n### Include the package\n\n#### Include direct dependency\nIf you want to take dependency on a particular version of the library that is not present in the BOM,\nadd the direct dependency to your project as follows.\n\n[//]: # ({x-version-update-start;com.azure:azure-communication-rooms;current})\n```xml\n<dependency>\n  <groupId>com.azure</groupId>\n  <artifactId>azure-communication-rooms</artifactId>\n  <version>1.0.0-beta.3</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n## Authenticate the client\n\n### Azure Active Directory Token Authentication\nA `DefaultAzureCredential` object must be passed to the `RoomsClientBuilder` via the credential() function. Endpoint and httpClient must also be set via the endpoint() and httpClient() functions respectively.\n\n`AZURE_CLIENT_SECRET`, `AZURE_CLIENT_ID` and `AZURE_TENANT_ID` environment variables\nare needed to create a DefaultAzureCredential object.\n\nAlternatively, you can provide the entire connection string using the connectionString() function instead of providing the endpoint and access key.\n\n```java readme-sample-createRoomsClientWithConnectionString\n// Find your connection string from your resource in the Azure Portal\nString connectionString = \"https://<resource-name>.communication.azure.com/;<access-key>\";\n\nRoomsClient roomsClient = new RoomsClientBuilder().connectionString(connectionString).buildClient();\n```\n\n## Key concepts\n\n### Rooms\n- Create room\n- Update room\n- Get room\n- Delete room\n- List all rooms\n\n### Participants\n- Add or update participants\n- Remove participants\n- List all participants\n\n## Examples\n\n### Create a new room\nUse the `createRoom` function to create a new room.\n\n```java readme-sample-createRoomWithValidInput\nOffsetDateTime validFrom = OffsetDateTime.now();\nOffsetDateTime validUntil = validFrom.plusDays(30);\nList<RoomParticipant> participants = new ArrayList<>();\n\n// Add two participants\nparticipant1 = new RoomParticipant(new CommunicationUserIdentifier(\"<ACS User MRI identity 1>\")).setRole(ParticipantRole.ATTENDEE);\nparticipant2 = new RoomParticipant(new CommunicationUserIdentifier(\"<ACS User MRI identity 2>\")).setRole(ParticipantRole.CONSUMER);\n\nparticipants.add(participant1);\nparticipants.add(participant2);\n\n// Create Room options\nCreateRoomOptions roomOptions = new CreateRoomOptions()\n        .setValidFrom(validFrom)\n        .setValidUntil(validUntil)\n        .setParticipants(participants);\n\nCommunicationRoom roomResult = roomsClient.createRoom(roomOptions);\n```\n\n### Update an existing room\nUse the `updateRoom` function to update an existing room.\n```java readme-sample-updateRoomWithRoomId\nOffsetDateTime validFrom = OffsetDateTime.now();\nOffsetDateTime validUntil = validFrom.plusDays(30);\n\n// Update Room options\nUpdateRoomOptions updateRoomOptions = new UpdateRoomOptions()\n        .setValidFrom(validFrom)\n        .setValidUntil(validUntil);\n\ntry {\n    CommunicationRoom roomResult = roomsClient.updateRoom(\"<Room Id>\", updateRoomOptions);\n    System.out.println(\"Room Id: \" + roomResult.getRoomId());\n} catch (RuntimeException ex) {\n    System.out.println(ex);\n}\n```\n\n### Get an existing room\nUse the `getRoom` function to get an existing room.\n\n```java readme-sample-getRoomWithRoomId\ntry {\n    CommunicationRoom roomResult = roomsClient.getRoom(\"<Room Id>\");\n    System.out.println(\"Room Id: \" + roomResult.getRoomId());\n} catch (RuntimeException ex) {\n    System.out.println(ex);\n}\n```\n\n### Delete an existing room\nUse the `deleteRoom` function to delete a created room.\n\n```java readme-sample-deleteRoomWithRoomId\ntry {\n    roomsClient.deleteRoom(\"<Room Id>\");\n} catch (RuntimeException ex) {\n    System.out.println(ex);\n}\n```\n\n### List rooms\nUse the `list rooms` function to list all active rooms.\n\n```java readme-sample-listRooms\ntry {\n    PagedIterable<CommunicationRoom> rooms = roomsClient.listRooms();\n\n    for (CommunicationRoom room : rooms) {\n        System.out.println(\"Room ID: \" + room.getRoomId());\n    }\n} catch (Exception ex) {\n    System.out.println(ex);\n}\n```\n\n### Add or Update participants an existing room\nUse the `addOrUpdateParticipants` function to add or update participants in an existing room.\n\n```java readme-sample-addOrUpdateRoomParticipantsWithRoomId\nList<RoomParticipant> participantsToaddOrUpdate = new ArrayList<>();\n\n// New participant to add\nRoomParticipant participantToAdd = new RoomParticipant(new CommunicationUserIdentifier(\"<ACS User MRI identity 3>\")).setRole(ParticipantRole.ATTENDEE);\n\n// Existing participant to update, assume participant2 is part of the room as a\n// consumer\nparticipant2 = new RoomParticipant(new CommunicationUserIdentifier(\"<ACS User MRI identity 2>\")).setRole(ParticipantRole.ATTENDEE);\n\nparticipantsToaddOrUpdate.add(participantToAdd); // Adding new participant to room\nparticipantsToaddOrUpdate.add(participant2); // Update participant from Consumer -> Attendee\n\ntry {\n    AddOrUpdateParticipantsResult addOrUpdateResult = roomsClient.addOrUpdateParticipants(\"<Room Id>\", participantsToaddOrUpdate);\n} catch (RuntimeException ex) {\n    System.out.println(ex);\n}\n```\n\n### Remove participants from an existing room\nUse the `removeParticipants` function to remove participants from an existing room.\n\n```java readme-sample-removeRoomParticipantsWithRoomId\nList<CommunicationIdentifier> participantsToRemove = new ArrayList<>();\n\nparticipantsToRemove.add(participant1.getCommunicationIdentifier());\nparticipantsToRemove.add(participant2.getCommunicationIdentifier());\n\ntry {\n    RemoveParticipantsResult removeResult = roomsClient.removeParticipants(\"<Room Id>\", participantsToRemove);\n} catch (RuntimeException ex) {\n    System.out.println(ex);\n}\n```\n\n### List all participants from an existing room\nUse the `listParticipants` function to list all participants from an existing room.\n```java readme-sample-listRoomParticipantsWithRoomId\ntry {\n    PagedIterable<RoomParticipant> allParticipants = roomsClient.listParticipants(\"<Room Id>\");\n    for (RoomParticipant participant : allParticipants) {\n        System.out.println(participant.getCommunicationIdentifier().getRawId() + \" (\" + participant.getRole() + \")\");\n    }\n} catch (RuntimeException ex) {\n    System.out.println(ex);\n}\n```\n\n## Troubleshooting\n\n1. If creating a client fails, verify if you have the right authentication.\n2. For room creation failures the communication error should in most case give a brief description of the issue.\n\n## Next steps\n\n- [Read more about Rooms in Azure Communication Services][next_steps]\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a [Contributor License Agreement (CLA)][cla] declaring that you have the right to, and actually do, grant us the rights to use your contribution.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n[source]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/communication/azure-communication-rooms/src\n[package]: https://search.maven.org/artifact/com.azure/azure-communication-rooms\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n[product_docs]: https://docs.microsoft.com/azure/communication-services/\n[api_documentation]: https://aka.ms/java-docs\n[next_steps]: https://learn.microsoft.com/azure/communication-services/concepts/rooms/room-concept\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fappconfiguration%2Fazure-data-appconfiguration%2FREADME.png)\n\n",
        "repo_name": "communication/azure-communication-rooms",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/communication/azure-communication-rooms",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Communications SMS Service client library for Java\n\nAzure Communication SMS is used to send simple text messages.\n\n[Source code][source] | [Package (Maven)][package] | [API reference documentation][api_documentation]\n| [Product documentation][product_docs]\n\n## Getting started\n\n### Prerequisites\n\n- An Azure account with an active subscription. [Create an account for free](https://azure.microsoft.com/free/?WT.mc_id=A261C142F).\n- [Java Development Kit (JDK)](https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable) version 8 or above.\n- [Apache Maven](https://maven.apache.org/download.cgi).\n- A deployed Communication Services resource. You can use the [Azure Portal](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource?tabs=windows&pivots=platform-azp) or the [Azure PowerShell](https://docs.microsoft.com/powershell/module/az.communication/new-azcommunicationservice) to set it up.\n\n### Include the package\n#### Include the BOM file\n\nPlease include the azure-sdk-bom to your project to take dependency on the General Availability (GA) version of the library. In the following snippet, replace the {bom_version_to_target} placeholder with the version number.\nTo learn more about the BOM, see the [AZURE SDK BOM README](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/boms/azure-sdk-bom/README.md).\n\n```xml\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>com.azure</groupId>\n            <artifactId>azure-sdk-bom</artifactId>\n            <version>{bom_version_to_target}</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n```\nand then include the direct dependency in the dependencies section without the version tag.\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-communication-sms</artifactId>\n  </dependency>\n</dependencies>\n```\n\n#### Include direct dependency\nIf you want to take dependency on a particular version of the library that is not present in the BOM,\nadd the direct dependency to your project as follows.\n\n[//]: # ({x-version-update-start;com.azure:azure-communication-sms;current})\n```xml\n<dependency>\n  <groupId>com.azure</groupId>\n  <artifactId>azure-communication-sms</artifactId>\n  <version>1.1.13</version>\n</dependency>\n```\n\n## Authenticate the client\n\n### Azure Active Directory Token Authentication\nA `DefaultAzureCredential` object must be passed to the `SmsClientBuilder` via the credential() function. Endpoint and httpClient must also be set via the endpoint() and httpClient() functions respectively.\n\n`AZURE_CLIENT_SECRET`, `AZURE_CLIENT_ID` and `AZURE_TENANT_ID` environment variables\nare needed to create a DefaultAzureCredential object.\n\n```java readme-sample-createSmsClientWithAAD\n// You can find your endpoint and access key from your resource in the Azure Portal\nString endpoint = \"https://<RESOURCE_NAME>.communication.azure.com\";\n\nSmsClient smsClient = new SmsClientBuilder()\n    .endpoint(endpoint)\n    .credential(new DefaultAzureCredentialBuilder().build())\n    .buildClient();\n```\n\n### Access Key Authentication\nSMS uses HMAC authentication with the resource access key.\nThe access key must be provided to the `SmsClientBuilder` via the credential() function. Endpoint and httpClient must also be set via the endpoint() and httpClient() functions respectively.\n\n```java readme-sample-createSmsClientUsingAzureKeyCredential\n// You can find your endpoint and access key from your resource in the Azure Portal\nString endpoint = \"https://<resource-name>.communication.azure.com\";\nAzureKeyCredential azureKeyCredential = new AzureKeyCredential(\"<access-key>\");\n\nSmsClient smsClient = new SmsClientBuilder()\n    .endpoint(endpoint)\n    .credential(azureKeyCredential)\n    .buildClient();\n```\n\nAlternatively, you can provide the entire connection string using the connectionString() function instead of providing the endpoint and access key.\n\n```java readme-sample-createSmsClientWithConnectionString\n// You can find your connection string from your resource in the Azure Portal\nString connectionString = \"https://<resource-name>.communication.azure.com/;<access-key>\";\n\nSmsClient smsClient = new SmsClientBuilder()\n    .connectionString(connectionString)\n    .buildClient();\n```\n\n## Key concepts\n\nThere are two different forms of authentication to use the Azure Communication SMS Service.\n\n## Examples\n\n### Send a 1:1 SMS Message\nUse the `send` or `sendWithResponse` function to send an SMS message to a single phone number.\n\n```java readme-sample-sendMessageToOneRecipient\nSmsSendResult sendResult = smsClient.send(\n    \"<from-phone-number>\",\n    \"<to-phone-number>\",\n    \"Weekly Promotion\");\n\nSystem.out.println(\"Message Id: \" + sendResult.getMessageId());\nSystem.out.println(\"Recipient Number: \" + sendResult.getTo());\nSystem.out.println(\"Send Result Successful:\" + sendResult.isSuccessful());\n```\n### Send a 1:N SMS Message\nTo send an SMS message to a list of recipients, call the `send` or `sendWithResponse` function with a list of recipient phone numbers. You may also add pass in an options object to specify whether the delivery report should be enabled and set custom tags.\n\n```java readme-sample-sendMessageToGroupWithOptions\nSmsSendOptions options = new SmsSendOptions();\noptions.setDeliveryReportEnabled(true);\noptions.setTag(\"Marketing\");\n\nIterable<SmsSendResult> sendResults = smsClient.sendWithResponse(\n    \"<from-phone-number>\",\n    Arrays.asList(\"<to-phone-number1>\", \"<to-phone-number2>\"),\n    \"Weekly Promotion\",\n    options /* Optional */,\n    Context.NONE).getValue();\n\nfor (SmsSendResult result : sendResults) {\n    System.out.println(\"Message Id: \" + result.getMessageId());\n    System.out.println(\"Recipient Number: \" + result.getTo());\n    System.out.println(\"Send Result Successful:\" + result.isSuccessful());\n}\n```\n\n## Troubleshooting\n\nSMS operations will throw an exception if the request to the server fails.\nExceptions will not be thrown if the error is caused by an individual message, only if something fails with the overall request.\nPlease use the `isSuccessful()` flag to validate each individual result to verify if the message was sent.\n\n```java readme-sample-sendMessageTroubleShooting\ntry {\n    SmsSendOptions options = new SmsSendOptions();\n    options.setDeliveryReportEnabled(true);\n    options.setTag(\"Marketing\");\n\n    Response<Iterable<SmsSendResult>> sendResults = smsClient.sendWithResponse(\n        \"<from-phone-number>\",\n        Arrays.asList(\"<to-phone-number1>\", \"<to-phone-number2>\"),\n        \"Weekly Promotion\",\n        options /* Optional */,\n        Context.NONE);\n\n    Iterable<SmsSendResult> smsSendResults = sendResults.getValue();\n    for (SmsSendResult result : smsSendResults) {\n        if (result.isSuccessful()) {\n            System.out.println(\"Successfully sent this message: \" + result.getMessageId() + \" to \" + result.getTo());\n        } else {\n            System.out.println(\"Something went wrong when trying to send this message \" + result.getMessageId() + \" to \" + result.getTo());\n            System.out.println(\"Status code \" + result.getHttpStatusCode() + \" and error message \" + result.getErrorMessage());\n        }\n    }\n} catch (RuntimeException ex) {\n    System.out.println(ex.getMessage());\n}\n```\n\n## Next steps\n\n- [Read more about SMS in Azure Communication Services][next_steps]\n- For a basic guide on how to configure Delivery Reporting for your SMS messages please refer to the [Handle SMS Events quickstart][handle_sms_events].\n\n<!-- LINKS -->\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n[product_docs]: https://docs.microsoft.com/azure/communication-services/\n[package]: https://search.maven.org/artifact/com.azure/azure-communication-sms\n[api_documentation]: https://aka.ms/java-docs\n[source]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/communication/azure-communication-sms/src\n[handle_sms_events]: https://docs.microsoft.com/azure/communication-services/quickstarts/telephony-sms/handle-sms-events\n[next_steps]:https://docs.microsoft.com/azure/communication-services/quickstarts/telephony-sms/send?pivots=programming-language-java\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Feng%2Fazure-communications-sms%2FREADME.png)\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a [Contributor License Agreement (CLA)][cla] declaring that you have the right to, and actually do, grant us the rights to use your contribution.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n",
        "repo_name": "communication/azure-communication-sms",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/communication/azure-communication-sms",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager Communication client library for Java\n\nAzure Resource Manager Communication client library for Java.\n\nThis package contains Microsoft Azure SDK for Communication Management SDK. REST API for Azure Communication Services. Package tag package-2023-03. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-communication;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-communication</artifactId>\n    <version>2.0.0</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nCommunicationManager manager = CommunicationManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/communication/azure-resourcemanager-communication/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "communication/azure-resourcemanager-communication",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/communication/azure-resourcemanager-communication",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager ConfidentialLedger client library for Java\n\nAzure Resource Manager ConfidentialLedger client library for Java.\n\nThis package contains Microsoft Azure SDK for ConfidentialLedger Management SDK. Microsoft Azure Confidential Compute Ledger Control Plane REST API version 2020-12-01-preview. Package tag package-preview-2023-01. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-confidentialledger;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-confidentialledger</artifactId>\n    <version>1.0.0-beta.3</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nConfidentialLedgerManager manager = ConfidentialLedgerManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/confidentialledger/azure-resourcemanager-confidentialledger/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "confidentialledger/azure-resourcemanager-confidentialledger",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/confidentialledger/azure-resourcemanager-confidentialledger",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Confidential Ledger client library for Java\n\nAzure Confidential Ledger provides a service for logging to an immutable, tamper-proof ledger. As part of the [Azure Confidential Computing][azure_confidential_computing]\nportfolio, Azure Confidential Ledger runs in SGX enclaves. It is built on Microsoft Research's [Confidential Consortium Framework][ccf].\n\n[Source code][source_code] | [Package (Maven)][package] | [Product Documentation][product_documentation] | [Samples][samples_readme]\n\n## Getting started\n\n### Prerequisites\n\n- A [Java Development Kit (JDK)][jdk_link], version 8 or later.\n- [Azure Subscription][azure_subscription]\n- A running instance of Azure Confidential Ledger.\n- A registered user in the Confidential Ledger, typically assigned during [ARM][azure_resource_manager] resource creation, with `Administrator` privileges.\n\n### Include the Package\n\n[//]: # ({x-version-update-start;com.azure:azure-security-confidentialledger;current})\n```xml\n<dependency>\n  <groupId>com.azure</groupId>\n  <artifactId>azure-security-confidentialledger</artifactId>\n  <version>1.0.9</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Authenticate the client\n\n#### Using Azure Active Directory\n\nIn order to interact with the Azure Confidential Ledger service, your client must present an Azure Active Directory bearer token to the service.\n\nThe simplest way of providing a bearer token is to use the `DefaultAzureCredential` authentication method by providing client secret credentials is being used in this getting started section but you can find more ways to authenticate with [azure-identity][azure_identity].\n\n#### Using a client certificate\n\nAs an alternative to Azure Active Directory, clients may choose to use a client certificate to authenticate via mutual TLS. `CertificateCredential` may be used for this purpose. This is not the recommended approach for anyone new to the service. \n\n#### Create LedgerBaseClient with Azure Active Directory Credential\n\nYou can authenticate with Azure Active Directory using the [Azure Identity library][azure_identity].\n\nTo use the [DefaultAzureCredential][DefaultAzureCredential] provider shown below, or other credential providers provided with the Azure SDK, please include the `azure-identity` package:\n\n[//]: # ({x-version-update-start;com.azure:azure-identity;dependency})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-identity</artifactId>\n    <version>1.9.0</version>\n</dependency>\n```\n\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: AZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET.\n\n## Key concepts\n\n### Ledger entries and transactions\n\nEvery write to Azure Confidential Ledger generates an immutable ledger entry in the service. Writes, also referred to as transactions, are uniquely identified by transaction ids that increment with each write. Once written, ledger entries may be retrieved at any time.\n\n### Receipts\n\nState changes to the Confidential Ledger are saved in a data structure called a Merkle tree. To cryptographically verify that writes were correctly saved, a Merkle proof, or receipt, can be retrieved for any transaction id.\n\n### Sub-ledgers\n\nWhile most use cases will involve one ledger, we provide the sub-ledger feature in case semantically or logically different groups of data need to be stored in the same Confidential Ledger.\n\nLedger entries are retrieved by their sub-ledger identifier. The Confidential Ledger will always assume a constant, service-determined sub-ledger id for entries submitted without a sub-ledger specified.\n\n### Users\n\nUsers are managed directly with the Confidential Ledger instead of through Azure. Users may be AAD-based, identified by their AAD object id, or certificate-based, identified by their PEM certificate fingerprint.\n\n### Confidential computing\n\n[Azure Confidential Computing][azure_confidential_computing] allows you to isolate and protect your data while it is being processed in the cloud. Azure Confidential Ledger runs on Azure Confidential Computing virtual machines, thus providing stronger data protection with encryption of data in use.\n\n### Confidential Consortium Framework\n\nAzure Confidential Ledger is built on Microsoft Research's open-source [Confidential Consortium Framework (CCF)][ccf]. Under CCF, applications are managed by a consortium of members with the ability to submit proposals to modify and govern application operation. In Azure Confidential Ledger, Microsoft Azure owns a member identity, allowing it to perform governance actions like replacing unhealthy nodes in the Confidential Ledger, or upgrading the enclave code.\n\n## Examples\nExamples can be found in [samples][samples_code] and the [samples README][samples_readme].\n\n## Troubleshooting\n\n### Enabling Logging\n\nAzure SDKs for Java offer a consistent logging story to help aid in troubleshooting application errors and expedite\ntheir resolution. The logs produced will capture the flow of an application before reaching the terminal state to help\nlocate the root issue. View the [logging][logging] wiki for guidance about enabling logging.\n\n## Next steps\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a [Contributor License Agreement (CLA)][cla] declaring that you have the right to, and actually do, grant us the rights to use your contribution.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n[ccf]: https://github.com/Microsoft/CCF\n[azure_confidential_computing]: https://azure.microsoft.com/solutions/confidential-compute\n[confidential_ledger_docs]: https://aka.ms/confidentialledger-servicedocs\n[samples]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/confidentialledger/azure-security-confidentialledger/src/samples/java/com/azure/security/confidentialledger/\n[source_code]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/confidentialledger/azure-security-confidentialledger/src\n[samples_code]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/confidentialledger/azure-security-confidentialledger/src/samples/\n[azure_subscription]: https://azure.microsoft.com/free/\n[product_documentation]: https://aka.ms/confidentialledger-servicedocs\n[ledger_base_client_class]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/confidentialledger/azure-security-confidentialledger/src/main/java/com/azure/security/confidentialledger/LedgerBaseClient.java\n[azure_portal]: https://portal.azure.com\n[jdk_link]: https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable\n[package]: https://mvnrepository.com/artifact/com.azure/azure-security-confidentialledger\n[samples_readme]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/confidentialledger/azure-security-confidentialledger/src/samples/README.md\n[azure_resource_manager]: https://docs.microsoft.com/azure/azure-resource-manager/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/identity/azure-identity\n[DefaultAzureCredential]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity/README.md#defaultazurecredential\n[logging]: https://github.com/Azure/azure-sdk-for-java/wiki/Logging-with-Azure-SDK\n[cla]: https://cla.opensource.microsoft.com/\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fconfidentialledger%2Fazure-security-confidentialledger%2FREADME.png)\n",
        "repo_name": "confidentialledger/azure-security-confidentialledger",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/confidentialledger/azure-security-confidentialledger",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager Confluent client library for Java\n\nAzure Resource Manager Confluent client library for Java.\n\nThis package contains Microsoft Azure SDK for Confluent Management SDK.  Package tag package-preview-2021-09. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-confluent;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-confluent</artifactId>\n    <version>1.0.0-beta.3</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nConfluentManager manager = ConfluentManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/confluent/azure-resourcemanager-confluent/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n",
        "repo_name": "confluent/azure-resourcemanager-confluent",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/confluent/azure-resourcemanager-confluent",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager ConnectedVMware client library for Java\n\nAzure Resource Manager ConnectedVMware client library for Java.\n\nThis package contains Microsoft Azure SDK for ConnectedVMware Management SDK. Connected VMware Client. Package tag package-2022-01-10-preview. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-connectedvmware;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-connectedvmware</artifactId>\n    <version>1.0.0-beta.1</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nConnectedVMwareManager manager = ConnectedVMwareManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/connectedvmware/azure-resourcemanager-connectedvmware/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n",
        "repo_name": "connectedvmware/azure-resourcemanager-connectedvmware",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/connectedvmware/azure-resourcemanager-connectedvmware",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager Consumption client library for Java\n\nAzure Resource Manager Consumption client library for Java.\n\nThis package contains Microsoft Azure SDK for Consumption Management SDK. Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions. Package tag package-2021-10. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-consumption;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-consumption</artifactId>\n    <version>1.0.0-beta.3</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nConsumptionManager manager = ConsumptionManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/consumption/azure-resourcemanager-consumption/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n",
        "repo_name": "consumption/azure-resourcemanager-consumption",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/consumption/azure-resourcemanager-consumption",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Container Registry Performance test client library for Java\n\nRepresents Performance tests for Azure Container Registry for Java.\n\n## Getting started\n\n### Prerequisites\n\n- A [Java Development Kit (JDK)][jdk_link], version 8 or later.\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\nYou will need the following environment variables for running the tests to access the live resources:\n\n```\nCONTAINERREGISTRY_ENDPOINT=<azure container registry service endpoint>\nCONTAINERREGISTRY_REGISTRY_NAME=<azure container registry name.>\nAZURE_SUBSCRIPTION_ID=<subscription id in which azure container registry is created.>\nAZURE_RESOURCE_GROUP=<resource group in which azure container registry is created.>\n\n// You should also have the default credentials set up done.\nAZURE_TENANT_ID=<azure tenant id.>\nAZURE_CLIENT_ID=<azure client id.>\n```\n\n### Adding the package to your product\n## Key concepts\n\n## Examples\n### Executing the performance test\n1. Compile the performance project into a standalone jar using the command from the root of the perf project folder\n```\nmvn clean package -f sdk/containerregistry/azure-containers-containerregistry-perf/pom.xml\n```\n\n2. Execute the corresponding perf test in the project using the command.\n```\njava -jar <path-to-packaged-jar-with-dependencies-from-step-1> <options-for-the-test>\njava -jar sdk/containerregistry/azure-containers-containerregistry-perf/target/azure-containers-containerregistry-perf-1.0.0-beta.1-jar-with-dependencies.jar getmanifestproperties --warmup 1 --iterations 1 --parallel 50 --duration 15\njava -jar sdk/containerregistry/azure-containers-containerregistry-perf/target/azure-containers-containerregistry-perf-1.0.0-beta.1-jar-with-dependencies.jar listrepositorytests --warmup 1 --iterations 1 --parallel 50 --duration 15\njava -jar sdk/containerregistry/azure-containers-containerregistry-perf/target/azure-containers-containerregistry-perf-1.0.0-beta.1-jar-with-dependencies.jar uploadblobtests --parallel 16 --duration 60 --size 1000000\njava -jar sdk/containerregistry/azure-containers-containerregistry-perf/target/azure-containers-containerregistry-perf-1.0.0-beta.1-jar-with-dependencies.jar downloadblobtests --parallel 16 --duration 60 --size 1000000\n```\n\n### Common perf test command line options for Container Registry\n- `--duration` - Number of seconds to run the main test for. Default is 10.\n- `--iterations` - Number of iterations of main test loop.\n- `--parallel` - Number of operations to execute in parallel,\n- `--warmup` - Duration of test warmup time in seconds before the test attributes are calculated.\n- `--sync` - Runs sync version of test\n- `--size` - Size of payload (in bytes)\n- `--http-client` - The http client to use. Can be netty, okhttp.\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%template%2Fperf-test-core%2FREADME.png)\n",
        "repo_name": "containerregistry/azure-containers-containerregistry-perf",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/containerregistry/azure-containers-containerregistry-perf",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Container Registry client library for Java\n\nAzure Container Registry allows you to store and manage container images and artifacts in a private registry for all types of container deployments.\n\nUse the client library for Azure Container Registry to:\n\n- List images or artifacts in a registry\n- Obtain metadata for images and artifacts, repositories and tags\n- Set read/write/delete properties on registry items\n- Delete images and artifacts, repositories and tags\n\n[Source code][source_code] | [Package (Maven)][package] | [Product documentation][product_docs] | [Samples][samples]\n\n## Getting started\n\n### Prerequisites\n\n- A [Java Development Kit (JDK)][jdk_link], version 8 or later.\n- [Azure Subscription][azure_subscription]\n- [Container Registry Create][container_registry_create_cli]\n\n### Include the package\n\n#### Include the BOM file\n\nPlease include the azure-sdk-bom to your project to take dependency on the General Availability (GA) version of the library. In the following snippet, replace the {bom_version_to_target} placeholder with the version number.\nTo learn more about the BOM, see the [AZURE SDK BOM README](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/boms/azure-sdk-bom/README.md).\n\n```xml\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>com.azure</groupId>\n            <artifactId>azure-sdk-bom</artifactId>\n            <version>{bom_version_to_target}</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n```\nand then include the direct dependency in the dependencies section without the version tag as shown below.\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-containers-containerregistry</artifactId>\n  </dependency>\n</dependencies>\n```\n\n#### Include direct dependency\n[//]: # ({x-version-update-start;com.azure:azure-containers-containerregistry;current})\n```xml\n<dependency>\n  <groupId>com.azure</groupId>\n  <artifactId>azure-containers-containerregistry</artifactId>\n  <version>1.1.0</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Authenticate clients\n\nThe [Azure Identity library][identity] provides easy Azure Active Directory support for authentication.\nNote all the below samples assume you have an endpoint, which is the URL including the name of the login server and the `https://` prefix.\nMore information at [Azure Container Registry portal][container_registry_create_portal]\n\n```java readme-sample-createClient\nDefaultAzureCredential credential = new DefaultAzureCredentialBuilder().build();\nContainerRegistryClient registryClient = new ContainerRegistryClientBuilder()\n    .endpoint(endpoint)\n    .credential(credential)\n    .buildClient();\n```\n\n```java readme-sample-createAsyncClient\nDefaultAzureCredential credential = new DefaultAzureCredentialBuilder().build();\nContainerRegistryAsyncClient registryClient = new ContainerRegistryClientBuilder()\n    .endpoint(endpoint)\n    .credential(credential)\n    .buildAsyncClient();\n```\n\nFor more information on using AAD with Azure Container Registry, please see the service's [Authentication Overview](https://docs.microsoft.com/azure/container-registry/container-registry-authentication).\n\n#### Authenticating with ARM AAD token\n\nBy default, Container Registry SDK for Java uses ACR access tokens. If you want to authenticate with ARM AAD token and have corresponding policy enabled,\nmake sure to set audience when building container Registry client.\nPlease refer to [ACR CLI reference](https://learn.microsoft.com/cli/azure/acr/config/authentication-as-arm?view=azure-cli-latest) for information\non how to check ARM authentication policy configuration.\n\n`ContainerRegistryAudience` value is specific to the cloud:\n\n```java readme-sample-armTokenPublic\nContainerRegistryClient registryClient = new ContainerRegistryClientBuilder()\n    .endpoint(getEndpoint())\n    .credential(credential)\n    .audience(ContainerRegistryAudience.AZURE_RESOURCE_MANAGER_PUBLIC_CLOUD)\n    .buildClient();\n\nregistryClient\n    .listRepositoryNames()\n    .forEach(name -> System.out.println(name));\n```\n\n#### National Clouds\n\nTo authenticate with a registry in a [National Cloud](https://docs.microsoft.com/azure/active-directory/develop/authentication-national-cloud), you will need to make the following additions to your client configuration:\n- Set the `authorityHost` in the credential builder following [Identity client library documentation](https://learn.microsoft.com/java/api/overview/azure/identity-readme) \n- If ACR access token authentication is disabled for yourcontainer Registry resource, you need to configure the audience on the Container Registry client builder.\n\n```java readme-sample-armTokenChina\nContainerRegistryClient registryClient = new ContainerRegistryClientBuilder()\n    .endpoint(getEndpoint())\n    .credential(credential)\n    // only if ACR access tokens are disabled or not supported\n    .audience(ContainerRegistryAudience.AZURE_RESOURCE_MANAGER_CHINA)\n    .buildClient();\n\nregistryClient\n    .listRepositoryNames()\n    .forEach(name -> System.out.println(name));\n```\n\n#### Anonymous access support\nIf the builder is instantiated without any credentials, the SDK creates the service client for the anonymous pull mode.\nThe user must use this setting on a registry that has been enabled for anonymous pull.\nIn this mode, the user can only call listRepositoryNames method and its overload. All the other calls will fail. \nFor more information please read [Anonymous Pull Access](https://docs.microsoft.com/azure/container-registry/container-registry-faq#how-do-i-enable-anonymous-pull-access)\n\n```java readme-sample-createAnonymousAccessClient\nContainerRegistryClient registryClient = new ContainerRegistryClientBuilder()\n    .endpoint(endpoint)\n    .buildClient();\n```\n\n```java readme-sample-createAnonymousAsyncAccessClient\nContainerRegistryAsyncClient registryClient = new ContainerRegistryClientBuilder()\n    .endpoint(endpoint)\n    .buildAsyncClient();\n```\n\n## Key concepts\n\nA **registry** stores Docker images and [OCI Artifacts](https://opencontainers.org/).  An image or artifact consists of a **manifest** and **layers**.  An image's manifest describes the layers that make up the image, and is uniquely identified by its **digest**.  An image can also be \"tagged\" to give it a human-readable alias.  An image or artifact can have zero or more **tags** associated with it, and each tag uniquely identifies the image.  A collection of images that share the same name but have different tags, is referred to as a **repository**.\n\nFor more information please see [Container Registry Concepts](https://docs.microsoft.com/azure/container-registry/container-registry-concepts).\n\n## Examples\n\n### Sync examples\n\n- Registry operations:\n  - [List repository names](#list-repository-names)\n  - [List artifact tags with anonymous access](#list-artifact-tags-with-anonymous-access)\n  - [Set artifact properties](#set-artifact-properties)\n  - [Delete images](#delete-images)\n  - [Delete repository with anonymous access throws](#delete-a-repository-with-anonymous-access-throws)\n- Blob and manifest operations:\n  - [Upload images](#upload-images)\n  - [Download images](#download-images)\n  - [Delete manifest](#delete-manifest)\n  - [Delete blob](#delete-blob) \n\n### Registry operations\n\nThis section contains `ContainerRegistryClient` samples.\n\n#### List repository names\n\nIterate through the collection of repositories in the registry.\n\n```java readme-sample-listRepositoryNames\nregistryClient.listRepositoryNames().forEach(repository -> System.out.println(repository));\n```\n\n#### List artifact tags with anonymous access\n\n```java readme-sample-listTagProperties\nRegistryArtifact image = anonymousClient.getArtifact(repositoryName, digest);\n\nPagedIterable<ArtifactTagProperties> tags = image.listTagProperties();\n\nSystem.out.printf(String.format(\"%s has the following aliases:\", image.getFullyQualifiedReference()));\n\nfor (ArtifactTagProperties tag : tags) {\n    System.out.printf(String.format(\"%s/%s:%s\", anonymousClient.getEndpoint(), repositoryName, tag.getName()));\n}\n```\n\n#### Set artifact properties\n\n```java readme-sample-setArtifactProperties\nRegistryArtifact image = registryClient.getArtifact(repositoryName, digest);\n\nimage.updateTagProperties(\n    tag,\n    new ArtifactTagProperties()\n        .setWriteEnabled(false)\n        .setDeleteEnabled(false));\n```\n\n\n#### Delete Images\n\n```java readme-sample-deleteImages\nfinal int imagesCountToKeep = 3;\nfor (String repositoryName : registryClient.listRepositoryNames()) {\n    final ContainerRepository repository = registryClient.getRepository(repositoryName);\n\n    // Obtain the images ordered from newest to oldest\n    PagedIterable<ArtifactManifestProperties> imageManifests =\n        repository.listManifestProperties(\n            ArtifactManifestOrder.LAST_UPDATED_ON_DESCENDING,\n            Context.NONE);\n\n    imageManifests.stream().skip(imagesCountToKeep)\n        .forEach(imageManifest -> {\n            System.out.printf(String.format(\"Deleting image with digest %s.%n\", imageManifest.getDigest()));\n            System.out.printf(\"    This image has the following tags: \");\n\n            for (String tagName : imageManifest.getTags()) {\n                System.out.printf(\"        %s:%s\", imageManifest.getRepositoryName(), tagName);\n            }\n\n            repository.getArtifact(imageManifest.getDigest()).delete();\n        });\n}\n```\n\n#### Delete a repository with anonymous access throws\n\n```java readme-sample-anonymousClientThrows\nfinal String endpoint = getEndpoint();\nfinal String repositoryName = getRepositoryName();\n\nContainerRegistryClient anonymousClient = new ContainerRegistryClientBuilder()\n    .endpoint(endpoint)\n    .buildClient();\n\ntry {\n    anonymousClient.deleteRepository(repositoryName);\n    System.out.println(\"Unexpected Success: Delete is not allowed on anonymous access\");\n} catch (ClientAuthenticationException ex) {\n    System.out.println(\"Expected exception: Delete is not allowed on anonymous access\");\n}\n```\n\n### Blob and manifest operations\n\nThis section contains samples for `ContainerRegistryContentClient` that show how to upload and download images. \n\nFirst, we need to create blob client.\n\n```java readme-sample-createContentClient\nDefaultAzureCredential credential = new DefaultAzureCredentialBuilder().build();\nContainerRegistryContentClient contentClient = new ContainerRegistryContentClientBuilder()\n    .endpoint(endpoint)\n    .credential(credential)\n    .repositoryName(repository)\n    .buildClient();\n```\n\n#### Upload Images\n\nTo upload a full image, we need to upload individual layers and configuration. After that we can upload a manifest \nwhich describes an image or artifact and assign it a tag.  \n\n```java readme-sample-uploadImage\nBinaryData configContent = BinaryData.fromObject(Collections.singletonMap(\"hello\", \"world\"));\n\nUploadRegistryBlobResult configUploadResult = contentClient.uploadBlob(configContent);\nSystem.out.printf(\"Uploaded config: digest - %s, size - %s\\n\", configUploadResult.getDigest(), configContent.getLength());\n\nOciDescriptor configDescriptor = new OciDescriptor()\n    .setMediaType(\"application/vnd.unknown.config.v1+json\")\n    .setDigest(configUploadResult.getDigest())\n    .setSizeInBytes(configContent.getLength());\n\nBinaryData layerContent = BinaryData.fromString(\"Hello Azure Container Registry\");\nUploadRegistryBlobResult layerUploadResult = contentClient.uploadBlob(layerContent);\nSystem.out.printf(\"Uploaded layer: digest - %s, size - %s\\n\", layerUploadResult.getDigest(), layerContent.getLength());\n\nOciImageManifest manifest = new OciImageManifest()\n    .setConfiguration(configDescriptor)\n    .setSchemaVersion(2)\n    .setLayers(Collections.singletonList(\n        new OciDescriptor()\n            .setDigest(layerUploadResult.getDigest())\n            .setSizeInBytes(layerContent.getLength())\n            .setMediaType(\"application/octet-stream\")));\n\nSetManifestResult manifestResult = contentClient.setManifest(manifest, \"latest\");\nSystem.out.printf(\"Uploaded manifest: digest - %s\\n\", manifestResult.getDigest());\n```\n\n#### Download Images\n\nTo download a full image, we need to download its manifest and then download individual layers and configuration. \n\n```java readme-sample-downloadImage\nGetManifestResult manifestResult = contentClient.getManifest(\"latest\");\n\nOciImageManifest manifest = manifestResult.getManifest().toObject(OciImageManifest.class);\nSystem.out.printf(\"Got manifest:\\n%s\\n\", PRETTY_PRINT.writeValueAsString(manifest));\n\nString configFileName = manifest.getConfiguration().getDigest() + \".json\";\ncontentClient.downloadStream(manifest.getConfiguration().getDigest(), createFileChannel(configFileName));\nSystem.out.printf(\"Got config: %s\\n\", configFileName);\n\nfor (OciDescriptor layer : manifest.getLayers()) {\n    contentClient.downloadStream(layer.getDigest(), createFileChannel(layer.getDigest()));\n    System.out.printf(\"Got layer: %s\\n\", layer.getDigest());\n}\n```\n\n#### Delete blob\n\n```java readme-sample-deleteBlob\nGetManifestResult manifestResult = contentClient.getManifest(\"latest\");\n\nOciImageManifest manifest = manifestResult.getManifest().toObject(OciImageManifest.class);\nfor (OciDescriptor layer : manifest.getLayers()) {\n    contentClient.deleteBlob(layer.getDigest());\n}\n```\n\n#### Delete manifest\n\n```java readme-sample-deleteManifest\nGetManifestResult manifestResult = contentClient.getManifest(\"latest\");\ncontentClient.deleteManifest(manifestResult.getDigest());\n```\n\n## Troubleshooting\n\nSee our [troubleshooting guide](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/containerregistry/azure-containers-containerregistry/TROUBLESHOOTING.md) for details on how to diagnose various failure scenarios.\n\n## Next steps\n\n- Go further with azure-containers-containerregistry and our [samples][samples]\n- Watch a [demo or deep dive video](https://azure.microsoft.com/resources/videos/index/?service=container-registry)\n- Read more about the [Azure Container Registry service](https://docs.microsoft.com/azure/container-registry/container-registry-intro)\n\n## Contributing\n\nThis project welcomes contributions and suggestions.  Most contributions require\nyou to agree to a Contributor License Agreement (CLA) declaring that you have\nthe right to, and actually do, grant us the rights to use your contribution. For\ndetails, visit [cla.microsoft.com][cla].\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc].\nFor more information see the [Code of Conduct FAQ][coc_faq]\nor contact [opencode@microsoft.com][coc_contact] with any\nadditional questions or comments.\n\n<!-- LINKS -->\n[source_code]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/containerregistry/azure-containers-containerregistry/src\n[jdk_link]: https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable\n[azure_subscription]: https://azure.microsoft.com/free\n[package]: https://search.maven.org/artifact/com.azure/azure-containers-containerregisty\n[api_documentation]: https://aka.ms/java-docs\n[rest_docs]: https://docs.microsoft.com/rest/api/containerregistry/\n[product_docs]:  https://docs.microsoft.com/azure/container-registry\n[container_registry_docs]: https://docs.microsoft.com/azure/container-registry/container-registry-intro\n[container_registry_create_ps]: https://docs.microsoft.com/azure/container-registry/container-registry-get-started-powershell\n[container_registry_create_cli]: https://docs.microsoft.com/azure/container-registry/container-registry-get-started-azure-cli\n[container_registry_create_portal]: https://docs.microsoft.com/azure/container-registry/container-registry-get-started-portal\n[container_registry_concepts]: https://docs.microsoft.com/azure/container-registry/container-registry-concepts\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity/README.md\n[HttpResponseException]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core/src/main/java/com/azure/core/exception/HttpResponseException.java\n[samples]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/containerregistry/azure-containers-containerregistry/src/samples/\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fcontainerregistry%2Fazure-contianers-containerregistry%2FREADME.png)\n",
        "repo_name": "containerregistry/azure-containers-containerregistry",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/containerregistry/azure-containers-containerregistry",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Core AMQP Experimental shared library for Java\n\n[![Build Documentation](https://img.shields.io/badge/documentation-published-blue.svg)](https://azure.github.io/azure-sdk-for-java)\n\nAzure Core AMQP Experimental contains types that are being evaluated and might eventually become part of Azure Core AMQP, this library will always stay in a preview version and might allow breaking changes.\n\n## Getting started\n\n### Prerequisites\n\n- A [Java Development Kit (JDK)][jdk_link], version 8 or later.\n\n### Include the package\n\n[//]: # ({x-version-update-start;com.azure:azure-core-amqp-experimental;current})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-core-amqp-experimental</artifactId>\n    <version>1.0.0-beta.1</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n## Key concepts\n\nAzure Core AMQP Experimental is reserved for features that are actively being prototyped and may be merged into Azure Core AMQP in the future.\n\n## Examples\n\n## Troubleshooting\n\n### Enabling Logging\n\nAzure SDKs for Java offer a consistent logging story to help aid in troubleshooting application errors and expedite\ntheir resolution. The logs produced will capture the flow of an application before reaching the terminal state to help\nlocate the root issue. View the [logging][logging] wiki for guidance about enabling logging.\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- Links -->\n[logging]: https://github.com/Azure/azure-sdk-for-java/wiki/Logging-with-Azure-SDK\n[jdk_link]: https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fcore%2Fazure-core-amqp-experimental%2FREADME.png)\n",
        "repo_name": "core/azure-core-amqp-experimental",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-amqp-experimental",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Core AMQP shared library for Java\n\nAzure Core AMQP client library is a collection of classes common to the AMQP protocol. It help developers create their\nown AMQP client library that abstracts from the underlying transport library's implementation.\n\n## Getting started\n\n### Prerequisites\n\n- A [Java Development Kit (JDK)][jdk_link], version 8 or later.\n\n### Include the package\n#### Include the BOM file\n\nPlease include the azure-sdk-bom to your project to take dependency on the General Availability (GA) version of the library. In the following snippet, replace the {bom_version_to_target} placeholder with the version number.\nTo learn more about the BOM, see the [AZURE SDK BOM README](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/boms/azure-sdk-bom/README.md).\n\n```xml\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>com.azure</groupId>\n            <artifactId>azure-sdk-bom</artifactId>\n            <version>{bom_version_to_target}</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n```\nand then include the direct dependency in the dependencies section without the version tag.\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-core-amqp</artifactId>\n  </dependency>\n</dependencies>\n```\n\n#### Include direct dependency\nIf you want to take dependency on a particular version of the library that is not present in the BOM,\nadd the direct dependency to your project as follows.\n\n[//]: # ({x-version-update-start;com.azure:azure-core-amqp;current})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-core-amqp</artifactId>\n    <version>2.8.6</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n## Key concepts\n\nThe concepts for AMQP are well documented in [OASIS Advanced Messaging Queuing Protocol (AMQP) Version\n1.0](https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-overview-v1.0-os.html).\n\n## Examples\n\n## Troubleshooting\n\n### Enabling Logging\n\nAzure SDKs for Java offer a consistent logging story to help aid in troubleshooting application errors and expedite\ntheir resolution. The logs produced will capture the flow of an application before reaching the terminal state to help\nlocate the root issue. View the [logging][logging] wiki for guidance about enabling logging.\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- Links -->\n[logging]: https://github.com/Azure/azure-sdk-for-java/wiki/Logging-with-Azure-SDK\n[jdk_link]: https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fcore%2Fazure-core-amqp%2FREADME.png)\n",
        "repo_name": "core/azure-core-amqp",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-amqp",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Core Experimental shared library for Java\n\n[![Build Documentation](https://img.shields.io/badge/documentation-published-blue.svg)](https://azure.github.io/azure-sdk-for-java)\n\nAzure Core Experimental contains types that are being evaluated and might eventually become part of Azure Core, this library will always stay in a preview version and might allow breaking changes.\n\n## Getting started\n\n### Prerequisites\n\n- A [Java Development Kit (JDK)][jdk_link], version 8 or later.\n\n### Include the package\n\n[//]: # ({x-version-update-start;com.azure:azure-core-experimental;current})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-core-experimental</artifactId>\n    <version>1.0.0-beta.40</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n## Key concepts\n\nAzure Core experimental is reserved for features that are actively being prototyped and may be merged into Azure Core\nin the future.\n\n## Examples\n\n## Troubleshooting\n\n### Enabling Logging\n\nAzure SDKs for Java offer a consistent logging story to help aid in troubleshooting application errors and expedite\ntheir resolution. The logs produced will capture the flow of an application before reaching the terminal state to help\nlocate the root issue. View the [logging][logging] wiki for guidance about enabling logging.\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- Links -->\n[logging]: https://github.com/Azure/azure-sdk-for-java/wiki/Logging-with-Azure-SDK\n[jdk_link]: https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fcore%2Fazure-core-experimental%2FREADME.png)\n",
        "repo_name": "core/azure-core-experimental",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-experimental",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Core JDK HTTP plugin library for Java\n\nThis is an azure-core HTTP client that makes use of the asynchronous HttpClient that was made generally available as \npart of JDK 11. \n\n## Getting started\n\n### Prerequisites\n\n- A [Java Development Kit (JDK)][jdk_link], version 12 or later.\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure:azure-core-http-jdk-httpclient;current})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-core-http-jdk-httpclient</artifactId>\n    <version>1.0.0-beta.3</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n## Key concepts\n\n## Examples\n\nThe following sections provide several code snippets covering some of the most common client configuration scenarios.\n\n- [Create a Simple Client](#create-a-simple-client)\n- [Create a Client with Proxy](#create-a-client-with-proxy)\n\n### Create a Simple Client\n\nCreate a HttpClient.\n\n```java readme-sample-createBasicClient\nHttpClient client = new JdkHttpClientBuilder().build();\n```\n\nCreate a HttpClient using a connection timeout of 60 seconds.\n\n```java readme-sample-createClientWithConnectionTimeout\nHttpClient client = new JdkHttpClientBuilder().connectionTimeout(Duration.ofSeconds(60)).build();\n```\n\n### Create a Client with Proxy\n\nCreate a HttpClient that is using a proxy.\n\n```java readme-sample-createProxyClient\nHttpClient client = new JdkHttpClientBuilder()\n    .proxy(new ProxyOptions(ProxyOptions.Type.HTTP, new InetSocketAddress(\"<proxy-host>\", 8888)))\n    .build();\n```\n\n## Next steps\n\nGet started with Azure libraries that are [built using Azure Core](https://azure.github.io/azure-sdk/releases/latest/#java).\n\n## Troubleshooting\n\nIf you encounter any bugs, please file issues via [GitHub Issues](https://github.com/Azure/azure-sdk-for-java/issues/new/choose)\nor checkout [StackOverflow for Azure Java SDK](https://stackoverflow.com/questions/tagged/azure-java-sdk).\n\n### Enabling Logging\n\nAzure SDKs for Java provide a consistent logging story to help aid in troubleshooting application errors and expedite\ntheir resolution. The logs produced will capture the flow of an application before reaching the terminal state to help\nlocate the root issue. View the [logging][logging] wiki for guidance about enabling logging.\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- links -->\n[logging]: https://github.com/Azure/azure-sdk-for-java/wiki/Logging-with-Azure-SDK\n[jdk_link]: https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fcore%2Fazure-core-http-jdk-httpclient%2FREADME.png)\n",
        "repo_name": "core/azure-core-http-jdk-httpclient",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-jdk-httpclient",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Core Netty HTTP plugin library for Java\n\nAzure Core Netty HTTP client is a plugin for the `azure-core` HTTP client API.\n\n## Getting started\n\n### Prerequisites\n\n- A [Java Development Kit (JDK)][jdk_link], version 8 or later.\n\n### Include the package\n#### Include the BOM file\n\nPlease include the azure-sdk-bom to your project to take dependency on the General Availability (GA) version of the library. In the following snippet, replace the {bom_version_to_target} placeholder with the version number.\nTo learn more about the BOM, see the [AZURE SDK BOM README](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/boms/azure-sdk-bom/README.md).\n\n```xml\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>com.azure</groupId>\n            <artifactId>azure-sdk-bom</artifactId>\n            <version>{bom_version_to_target}</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n```\nand then include the direct dependency in the dependencies section without the version tag.\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-core-http-netty</artifactId>\n  </dependency>\n</dependencies>\n```\n\n#### Include direct dependency\nIf you want to take dependency on a particular version of the library that is not present in the BOM,\nadd the direct dependency to your project as follows.\n\n[//]: # ({x-version-update-start;com.azure:azure-core-http-netty;current})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-core-http-netty</artifactId>\n    <version>1.13.4</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n## Key concepts\n\n## Examples\n\nThe following sections provide several code snippets covering some of the most common client configuration scenarios.\n\n- [Create a Simple Client](#create-a-simple-client)\n- [Create a Client with Proxy](#create-a-client-with-proxy)\n- [Create a Client with HTTP/2 Support](#create-a-client-with-http2-support)\n- [Create a Client with Custom Max Chunk Size](#create-a-client-with-custom-max-chunk-size)\n\n### Create a Simple Client\n\nCreate a Netty HttpClient that uses port 80 and has no proxy.\n\n```java readme-sample-createBasicClient\nHttpClient client = new NettyAsyncHttpClientBuilder().build();\n```\n\n### Create a Client with Proxy\n\nCreate a Netty HttpClient that is using a proxy.\n\n```java readme-sample-createProxyClient\nHttpClient client = new NettyAsyncHttpClientBuilder()\n    .proxy(new ProxyOptions(ProxyOptions.Type.HTTP, new InetSocketAddress(\"<proxy-host>\", 8888)))\n    .build();\n```\n\n### Create a Client with HTTP/2 Support\n\nCreate a Netty HttpClient that supports both the HTTP/1.1 and HTTP/2 protocols, with HTTP/2 being the preferred\nprotocol.\n\n```java readme-sample-useHttp2WithConfiguredNettyClient \n// Constructs an HttpClient that supports both HTTP/1.1 and HTTP/2 with HTTP/2 being the preferred protocol.\nHttpClient client = new NettyAsyncHttpClientBuilder(reactor.netty.http.client.HttpClient.create()\n    .protocol(HttpProtocol.HTTP11, HttpProtocol.H2))\n    .build();\n```\n\nIt is also possible to create a Netty HttpClient that only supports HTTP/2.\n\n```java readme-sample-useHttp2OnlyWithConfiguredNettyClient\n// Constructs an HttpClient that only supports HTTP/2.\nHttpClient client = new NettyAsyncHttpClientBuilder(reactor.netty.http.client.HttpClient.create()\n    .protocol(HttpProtocol.H2))\n    .build();\n```\n\n### Create a Client with Custom Max Chunk Size\n\nCreate a Netty HttpClient that uses a custom max chunk size.\n\n```java readme-sample-customMaxChunkSize\n// Constructs an HttpClient with a modified max chunk size.\n// Max chunk size modifies the maximum size of ByteBufs returned by Netty (later converted to ByteBuffer).\n// Changing the chunk size can positively impact performance of APIs such as Storage's download to file methods\n// provided in azure-storage-blob, azure-storage-file-datalake, and azure-storage-file-shares (32KB - 64KB have\n// shown the most consistent improvement).\nHttpClient httpClient = new NettyAsyncHttpClientBuilder(reactor.netty.http.client.HttpClient.create()\n    .httpResponseDecoder(httpResponseDecoderSpec -> httpResponseDecoderSpec.maxChunkSize(64 * 1024)))\n    .build();\n```\n\n## Next steps\n\nGet started with Azure libraries that are [built using Azure Core](https://azure.github.io/azure-sdk/releases/latest/#java).\n\n## Troubleshooting\n\nIf you encounter any bugs, please file issues via [GitHub Issues](https://github.com/Azure/azure-sdk-for-java/issues/new/choose)\nor checkout [StackOverflow for Azure Java SDK](https://stackoverflow.com/questions/tagged/azure-java-sdk).\n\n### Enabling Logging\n\nAzure SDKs for Java provide a consistent logging story to help aid in troubleshooting application errors and expedite\ntheir resolution. The logs produced will capture the flow of an application before reaching the terminal state to help\nlocate the root issue. View the [logging][logging] wiki for guidance about enabling logging.\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- Links -->\n[logging]: https://github.com/Azure/azure-sdk-for-java/wiki/Logging-with-Azure-SDK\n[jdk_link]: https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fcore%2Fazure-core-http-netty%2FREADME.png)\n",
        "repo_name": "core/azure-core-http-netty",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Core OkHttp HTTP plugin library for Java\n\nAzure Core OkHttp HTTP client is a plugin for the `azure-core` HTTP client API.\n\n## Getting started\n\n### Prerequisites\n\n- A [Java Development Kit (JDK)][jdk_link], version 8 or later.\n\n### Include the package\n#### Include the BOM file\n\nPlease include the azure-sdk-bom to your project to take dependency on the General Availability (GA) version of the library. In the following snippet, replace the {bom_version_to_target} placeholder with the version number.\nTo learn more about the BOM, see the [AZURE SDK BOM README](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/boms/azure-sdk-bom/README.md).\n\n```xml\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>com.azure</groupId>\n            <artifactId>azure-sdk-bom</artifactId>\n            <version>{bom_version_to_target}</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n```\nand then include the direct dependency in the dependencies section without the version tag.\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-core-http-okhttp</artifactId>\n  </dependency>\n</dependencies>\n```\n\n#### Include direct dependency\nIf you want to take dependency on a particular version of the library that is not present in the BOM,\nadd the direct dependency to your project as follows.\n\n[//]: # ({x-version-update-start;com.azure:azure-core-http-okhttp;current})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-core-http-okhttp</artifactId>\n    <version>1.11.10</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n## Key concepts\n\n## Examples\n\nThe following sections provide several code snippets covering some of the most common client configuration scenarios.\n\n- [Create a Simple Client](#create-a-simple-client)\n- [Create a Client with Proxy](#create-a-client-with-proxy)\n\n### Create a Simple Client\n\nCreate an OkHttp client using a connection timeout of 60 seconds and a read timeout of 120 seconds.\n\n```java readme-sample-createBasicClient\nHttpClient client = new OkHttpAsyncHttpClientBuilder().build();\n```\n\n### Create a Client with Proxy\n\nCreate an OkHttp client that is using a proxy.\n\n```java readme-sample-createProxyClient\nHttpClient client = new OkHttpAsyncHttpClientBuilder()\n    .proxy(new ProxyOptions(ProxyOptions.Type.HTTP, new InetSocketAddress(\"<proxy-host>\", 8888)))\n    .build();\n```\n\n### Create a Client with HTTP/2 Support\n\nCreate an OkHttp client that supports both the HTTP/1.1 and HTTP/2 protocols, with HTTP/2 being the preferred protocol.\n\n```java readme-sample-useHttp2WithConfiguredOkHttpClient \n// Constructs an HttpClient that supports both HTTP/1.1 and HTTP/2 with HTTP/2 being the preferred protocol.\n// This is the default handling for OkHttp.\nHttpClient client = new OkHttpAsyncHttpClientBuilder(new OkHttpClient.Builder()\n    .protocols(Arrays.asList(Protocol.HTTP_2, Protocol.HTTP_1_1))\n    .build())\n    .build();\n```\n\nIt is also possible to create an OkHttp client that only supports HTTP/2.\n\n```java readme-sample-useHttp2OnlyWithConfiguredOkHttpClient\n// Constructs an HttpClient that only supports HTTP/2.\nHttpClient client = new OkHttpAsyncHttpClientBuilder(new OkHttpClient.Builder()\n    .protocols(Collections.singletonList(Protocol.H2_PRIOR_KNOWLEDGE))\n    .build())\n    .build();\n```\n\n## Next steps\n\nGet started with Azure libraries that are [built using Azure Core](https://azure.github.io/azure-sdk/releases/latest/#java).\n\n## Troubleshooting\n\nIf you encounter any bugs, please file issues via [GitHub Issues](https://github.com/Azure/azure-sdk-for-java/issues/new/choose)\nor checkout [StackOverflow for Azure Java SDK](https://stackoverflow.com/questions/tagged/azure-java-sdk).\n\n### Enabling Logging\n\nAzure SDKs for Java provide a consistent logging story to help aid in troubleshooting application errors and expedite\ntheir resolution. The logs produced will capture the flow of an application before reaching the terminal state to help\nlocate the root issue. View the [logging][logging] wiki for guidance about enabling logging.\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- Links -->\n[logging]: https://github.com/Azure/azure-sdk-for-java/wiki/Logging-with-Azure-SDK\n[jdk_link]: https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fcore%2Fazure-core-http-okhttp%2FREADME.png)\n",
        "repo_name": "core/azure-core-http-okhttp",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-okhttp",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Core Vert.x HTTP plugin library for Java\n\nAzure Core Vert.x HTTP client is a plugin for the `azure-core` HTTP client API.\n\n## Getting started\n\n### Prerequisites\n\n- A [Java Development Kit (JDK)][jdk_link], version 8 or later.\n\n### Include the package\n\n[//]: # ({x-version-update-start;com.azure:azure-core-http-vertx;current})\n```xml\n<dependencies>\n  <dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-core-http-vertx</artifactId>\n    <version>1.0.0-beta.8</version>\n  </dependency>\n</dependencies>\n```\n[//]: # ({x-version-update-end})\n\n## Key concepts\n\n## Examples\n\nThe following sections provide several code snippets covering some of the most common client configuration scenarios.\n\n- [Create a Simple Client](#create-a-simple-client)\n- [Create a Client with Proxy](#create-a-client-with-proxy)\n\n### Create a Simple Client\n\nCreate a Vert.x HttpClient.\n\n```java readme-sample-createBasicClient\nHttpClient client = new VertxAsyncHttpClientBuilder().build();\n```\n\nCreate a Vert.x HttpClient using a connection timeout of 60 seconds.\n\n```java readme-sample-createClientWithConnectionTimeout\nHttpClient client = new VertxAsyncHttpClientBuilder().connectTimeout(Duration.ofSeconds(60)).build();\n```\n\n### Create a Client with Proxy\n\nCreate a Vert.x client that is using a proxy.\n\n```java readme-sample-createProxyClient\nHttpClient client = new VertxAsyncHttpClientBuilder()\n    .proxy(new ProxyOptions(ProxyOptions.Type.HTTP, new InetSocketAddress(\"<proxy-host>\", 8888)))\n    .build();\n```\n\n## Next steps\n\nGet started with Azure libraries that are [built using Azure Core](https://azure.github.io/azure-sdk/releases/latest/#java).\n\n## Troubleshooting\n\nIf you encounter any bugs, please file issues via [GitHub Issues](https://github.com/Azure/azure-sdk-for-java/issues/new/choose)\nor checkout [StackOverflow for Azure Java SDK](https://stackoverflow.com/questions/tagged/azure-java-sdk).\n\n### Enabling Logging\n\nAzure SDKs for Java provide a consistent logging story to help aid in troubleshooting application errors and expedite\ntheir resolution. The logs produced will capture the flow of an application before reaching the terminal state to help\nlocate the root issue. View the [logging][logging] wiki for guidance about enabling logging.\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- Links -->\n[logging]: https://github.com/Azure/azure-sdk-for-java/wiki/Logging-with-Azure-SDK\n[jdk_link]: https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fcore%2Fazure-core-http-vertx%2FREADME.png)\n",
        "repo_name": "core/azure-core-http-vertx",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-vertx",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Core Management client library for Java\n\nAzure Core Management library is a collection of classes common to the [Azure Resource Manager (ARM)][arm] client libraries.\n\n## Getting started\n\n### Prerequisites\n\n- A [Java Development Kit (JDK)][jdk_link], version 8 or later.\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure:azure-core-management;current})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-core-management</artifactId>\n    <version>1.11.2</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n## Key concepts\n\n- `AzureEnvironment` for Azure cloud configure, and `AzureProfile` for additional tenant ID and subscription ID configure.\n- `ManagementException` and `ManagementError` for ARM error response.\n- `PollerFactory` and `PollResult` for ARM long-running operation.\n\n## Examples\n\n## Next steps\n\nGet started with Azure libraries that are [built using Azure Core](https://azure.github.io/azure-sdk/releases/latest/#java).\n\n## Troubleshooting\n\nIf you encounter any bugs, please file issues via [GitHub Issues](https://github.com/Azure/azure-sdk-for-java/issues/new/choose)\nor checkout [StackOverflow for Azure Java SDK](https://stackoverflow.com/questions/tagged/azure-java-sdk).\n\n### Enabling Logging\n\nAzure SDKs for Java provide a consistent logging story to help aid in troubleshooting application errors and expedite\ntheir resolution. The logs produced will capture the flow of an application before reaching the terminal state to help\nlocate the root issue. View the [logging][logging] wiki for guidance about enabling logging.\n\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- Links -->\n[arm]: https://docs.microsoft.com/azure/azure-resource-manager/management/\n[logging]: https://github.com/Azure/azure-sdk-for-java/wiki/Logging-with-Azure-SDK\n[jdk_link]: https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable\n",
        "repo_name": "core/azure-core-management",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-management",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure OpenTelemetry Metrics plugin library for Java\n\nThis package enables  metrics from Azure SDK Java libraries through [OpenTelemetry][OpenTelemetry]. OpenTelemetry is an open source, vendor-agnostic, single distribution of libraries to provide metrics collection and distributed tracing for services.\n\n[Source code][source_code] | [API reference documentation][api_documentation] | [Product\ndocumentation][OpenTelemetry] | [Samples][samples]\n\n## Getting started\n\n### Prerequisites\n\n- A [Java Development Kit (JDK)][jdk_link], version 8 or later.\n\n### Include the package\n\n[//]: # ({x-version-update-start;com.azure:azure-core-metrics-opentelemetry;current})\n```xml\n<dependency>\n  <groupId>com.azure</groupId>\n  <artifactId>azure-core-metrics-opentelemetry</artifactId>\n  <version>1.0.0-beta.9</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n## Key concepts\n\nCheck out [Metrics in OpenTelemetry](https://opentelemetry.io/docs/concepts/signals/metrics/) for all the details on metrics. \n\n## Examples\n\nThe following sections provide several code snippets covering some of the most common client configuration scenarios.\n\n- [Default configuration: agent](#default-configuration-agent)\n- [Default configuration: Opentelemtery SDK](#default-configuration-agent)\n- [Custom configuration](#custom-configuration)\n\nYou can find more samples [here](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-metrics-opentelemetry/src/samples/).\n\n### Default configuration: agent\n\nIf you use OpenTelemetry Java agent or Application Insights Java agent version 3.3.0-BETA or higher, no additional Azure SDK configuration is needed.\n\n### Default configuration: OpenTelemetry SDK\n\nAzure SDK uses global OpenTelemetry instance by default. You can use [OpenTelemetry SDK Autoconfigure](https://github.com/open-telemetry/opentelemetry-java/blob/main/sdk-extensions/autoconfigure/README.md)\npackage to configure OpenTelemetry using environment variables (or system properties).\n\n```xml\n<dependency>\n  <groupId>io.opentelemetry</groupId>\n  <artifactId>opentelemetry-sdk-extension-autoconfigure</artifactId>\n</dependency>\n```\n\n\n```java readme-sample-defaultConfiguration\n\n// configure OpenTelemetry SDK using io.opentelemetry:opentelemetry-sdk-extension-autoconfigure\n// AutoConfiguredOpenTelemetrySdk.initialize();\n\n// configure Azure Client, no metric configuration needed\n// client will use global OpenTelemetry configured by OpenTelemetry autoconfigure package.\nAzureClient sampleClient = new AzureClientBuilder()\n    .endpoint(\"https://my-client.azure.com\")\n    .build();\n\n// use client as usual, if it emits metric, they will be exported\nsampleClient.methodCall(\"get items\");\n\n```\n\n### Custom configuration\n\nIf you want to pass `MeterProvider` explicitly, you can do it using `MetricsOptions` and passing them to Azure Clients. `MetricsOptions` can also be used to disable metrics from specific client. \n\n```java readme-sample-customConfiguration\n\n// configure OpenTelemetry SDK explicitly per https://opentelemetry.io/docs/instrumentation/java/manual/\nSdkMeterProvider meterProvider = SdkMeterProvider.builder()\n    .registerMetricReader(PeriodicMetricReader.builder(OtlpGrpcMetricExporter.builder().build()).build())\n    .build();\n\n// Pass OpenTelemetry instance to MetricsOptions.\nMetricsOptions customMetricsOptions = new OpenTelemetryMetricsOptions()\n    .setOpenTelemetry(OpenTelemetrySdk.builder().setMeterProvider(meterProvider).build());\n\n// configure Azure Client to use customMetricsOptions - it will use meterProvider\n// to create meters and instruments\nAzureClient sampleClient = new AzureClientBuilder()\n    .endpoint(\"https://my-client.azure.com\")\n    .clientOptions(new ClientOptions().setMetricsOptions(customMetricsOptions))\n    .build();\n\n// use client as usual, if it emits metric, they will be exported\nsampleClient.methodCall(\"get items\");\n\n```\n\n## Troubleshooting\n\n### General\n\nFor more information on OpenTelemetry, see [OpenTelemetry documentation](https://opentelemetry.io/docs/instrumentation/java/getting-started/) and [OpenTelemetry Java](https://github.com/open-telemetry/opentelemetry-java).\n\n### Enabling Logging\n\nAzure SDKs for Java offer a consistent logging story to help aid in troubleshooting application errors and expedite\ntheir resolution. The logs produced will capture the flow of an application before reaching the terminal state to help\nlocate the root issue. View the [logging][logging] wiki for guidance about enabling logging.\n\n## Next steps\n\nGet started with Azure libraries that are [built using Azure Core](https://azure.github.io/azure-sdk/releases/latest/#java).\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [cla](https://cla.microsoft.com).\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments.\n\n<!-- Links -->\n[api_documentation]: https://aka.ms/java-docs\n[context]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core/src/main/java/com/azure/core/util/Context.java\n[jdk_link]: https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable\n[logging]: https://github.com/Azure/azure-sdk-for-java/wiki/Logging-with-Azure-SDK\n[source_code]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-metrics-opentelemetry/src/\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fcore%2Fazure-core-metrics-opentelemetry%2FREADME.png)\n",
        "repo_name": "core/azure-core-metrics-opentelemetry",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-metrics-opentelemetry",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Core Performance test client library for Java\n\nRepresents Performance tests for Azure Core SDK for Java.\n\n## Getting started\n\n### Prerequisites\n\n- Java Development Kit (JDK) with version 8 or above\n\n### Adding the package to your product\n\n\n## Key concepts\n\n\n## Examples\n\n### Running with in memory http client\n\nJust run it.\n\n```shell\nmvn install\njava -jar .\\target\\azure-core-perf-1.0.0-beta.1-jar-with-dependencies.jar bytebufferreceive\n```\n\n### Running with Wiremock\n\nJust run it with extra parameters.\n\n```shell\nmvn install\njava -jar .\\target\\azure-core-perf-1.0.0-beta.1-jar-with-dependencies.jar binarydatareceive --http-client netty --backend-type wiremock\n```\n\n### Running with Blobs\n\n1. Create Storage account. Premium Blobs are recommended.\n2. Create container.\n3. Generate SAS URI for the container with read and write access. It should look like `https://accountname.blob.core.windows.net/containerName?sp=racwdl&st=2022-03-16T21:50:46Z&se=2022-04-01T05:50:46Z&spr=https&sv=2020-08-04&sr=c&sig=REDACTED`\n4. Run the command\n   ```shell\n   java -jar .\\target\\azure-core-perf-1.0.0-beta.1-jar-with-dependencies.jar bytebuffersend  --http-client netty --endpoint \"https://accountname.blob.core.windows.net/containerName?sp=racwdl&st=2022-03-16T21:50:46Z&se=2022-04-01T05:50:46Z&spr=https&sv=2020-08-04&sr=c&sig=REDACTED\" --backend-type blobs\n   ```\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fcore%2Fperf-test-core%2FREADME.png)\n",
        "repo_name": "core/azure-core-perf",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-perf",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Core Apache Avro Serializer plugin library for Java\n\nAzure Core Apache Avro Serializer is a plugin for the `azure-core` `AvroSerializer` API.\n\n## Getting started\n\n### Prerequisites\n\n- A [Java Development Kit (JDK)][jdk_link], version 8 or later.\n\n### Include the package\n\n[//]: # ({x-version-update-start;com.azure:azure-core-serializer-avro-apache;current})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-core-serializer-avro-apache</artifactId>\n    <version>1.0.0-beta.36</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n## Key concepts\n\n## Examples\n\n## Next steps\n\nGet started with Azure libraries that are [built using Azure Core](https://azure.github.io/azure-sdk/releases/latest/#java).\n\n## Troubleshooting\n\nIf you encounter any bugs, please file issues via [GitHub Issues](https://github.com/Azure/azure-sdk-for-java/issues/new/choose)\nor checkout [StackOverflow for Azure Java SDK](https://stackoverflow.com/questions/tagged/azure-java-sdk).\n\n### Enabling Logging\n\nAzure SDKs for Java provide a consistent logging story to help aid in troubleshooting application errors and expedite\ntheir resolution. The logs produced will capture the flow of an application before reaching the terminal state to help\nlocate the root issue. View the [logging][logging] wiki for guidance about enabling logging.\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create new Pull Request\n\n<!-- links -->\n[logging]: https://github.com/Azure/azure-sdk-for-java/wiki/Logging-with-Azure-SDK\n[jdk_link]: https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fcore%2Fazure-core-serializer-avro-apache%2FREADME.png)\n",
        "repo_name": "core/azure-core-serializer-avro-apache",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-serializer-avro-apache",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Core Jackson Avro Serializer plugin library for Java\n\nAzure Core Jackson Avro Serializer is a plugin for the `azure-core` `AvroSerializer` API.\n\n## Getting started\n\n### Prerequisites\n\n- A [Java Development Kit (JDK)][jdk_link], version 8 or later.\n\n### Include the package\n\n[//]: # ({x-version-update-start;com.azure:azure-core-serializer-avro-jackson;current})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-core-serializer-avro-jackson</artifactId>\n    <version>1.0.0-beta.1</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n## Key concepts\n\n## Examples\n\n## Next steps\n\nGet started with Azure libraries that are [built using Azure Core](https://azure.github.io/azure-sdk/releases/latest/#java).\n\n## Troubleshooting\n\nIf you encounter any bugs, please file issues via [GitHub Issues](https://github.com/Azure/azure-sdk-for-java/issues/new/choose)\nor checkout [StackOverflow for Azure Java SDK](https://stackoverflow.com/questions/tagged/azure-java-sdk).\n\n### Enabling Logging\n\nAzure SDKs for Java provide a consistent logging story to help aid in troubleshooting application errors and expedite\ntheir resolution. The logs produced will capture the flow of an application before reaching the terminal state to help\nlocate the root issue. View the [logging][logging] wiki for guidance about enabling logging.\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create new Pull Request\n\n<!-- links -->\n[logging]: https://github.com/Azure/azure-sdk-for-java/wiki/Logging-with-Azure-SDK\n[jdk_link]: https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable\n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fcore%2Fazure-core-serializer-avro-jackson%2FREADME.png)\n",
        "repo_name": "core/azure-core-serializer-avro-jackson",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-serializer-avro-jackson",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Core Gson JSON Serializer plugin library for Java\n\nAzure Core Gson JSON Serializer is a plugin for the `azure-core` `JsonSerializer` API.\n\n## Getting started\n\n### Prerequisites\n\n- A [Java Development Kit (JDK)][jdk_link], version 8 or later.\n\n### Include the package\n#### Include the BOM file\n\nPlease include the azure-sdk-bom to your project to take dependency on the General Availability (GA) version of the library. In the following snippet, replace the {bom_version_to_target} placeholder with the version number.\nTo learn more about the BOM, see the [AZURE SDK BOM README](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/boms/azure-sdk-bom/README.md).\n\n```xml\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>com.azure</groupId>\n            <artifactId>azure-sdk-bom</artifactId>\n            <version>{bom_version_to_target}</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n```\nand then include the direct dependency in the dependencies section without the version tag.\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-core-serializer-json-gson</artifactId>\n  </dependency>\n</dependencies>\n```\n\n#### Include direct dependency\nIf you want to take dependency on a particular version of the library that is not present in the BOM,\nadd the direct dependency to your project as follows.\n\n[//]: # ({x-version-update-start;com.azure:azure-core-serializer-json-gson;current})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-core-serializer-json-gson</artifactId>\n    <version>1.2.1</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n## Key concepts\n\n## Examples\n\n## Next steps\n\nGet started with Azure libraries that are [built using Azure Core](https://azure.github.io/azure-sdk/releases/latest/#java).\n\n## Troubleshooting\n\nIf you encounter any bugs, please file issues via [GitHub Issues](https://github.com/Azure/azure-sdk-for-java/issues/new/choose)\nor checkout [StackOverflow for Azure Java SDK](https://stackoverflow.com/questions/tagged/azure-java-sdk).\n\n### Enabling Logging\n\nAzure SDKs for Java provide a consistent logging story to help aid in troubleshooting application errors and expedite\ntheir resolution. The logs produced will capture the flow of an application before reaching the terminal state to help\nlocate the root issue. View the [logging][logging] wiki for guidance about enabling logging.\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create new Pull Request\n\n<!-- Links -->\n[logging]: https://github.com/Azure/azure-sdk-for-java/wiki/Logging-with-Azure-SDK\n[jdk_link]: https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fcore%2Fazure-core-serializer-json-gson%2FREADME.png)\n",
        "repo_name": "core/azure-core-serializer-json-gson",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-serializer-json-gson",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Core Jackson JSON Serializer plugin library for Java\n\nAzure Core Jackson JSON Serializer is a plugin for the `azure-core` `JsonSerializer` API.\n\n## Getting started\n\n### Prerequisites\n\n- A [Java Development Kit (JDK)][jdk_link], version 8 or later.\n\n### Include the package\n#### Include the BOM file\n\nPlease include the azure-sdk-bom to your project to take dependency on the General Availability (GA) version of the library. In the following snippet, replace the {bom_version_to_target} placeholder with the version number.\nTo learn more about the BOM, see the [AZURE SDK BOM README](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/boms/azure-sdk-bom/README.md).\n\n```xml\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>com.azure</groupId>\n            <artifactId>azure-sdk-bom</artifactId>\n            <version>{bom_version_to_target}</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n```\nand then include the direct dependency in the dependencies section without the version tag.\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-core-serializer-json-jackson</artifactId>\n  </dependency>\n</dependencies>\n```\n\n#### Include direct dependency\nIf you want to take dependency on a particular version of the library that is not present in the BOM,\nadd the direct dependency to your project as follows.\n\n[//]: # ({x-version-update-start;com.azure:azure-core-serializer-json-jackson;current})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-core-serializer-json-jackson</artifactId>\n    <version>1.4.1</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n## Key concepts\n\n## Examples\n\n## Next steps\n\nGet started with Azure libraries that are [built using Azure Core](https://azure.github.io/azure-sdk/releases/latest/#java).\n\n## Troubleshooting\n\nIf you encounter any bugs, please file issues via [GitHub Issues](https://github.com/Azure/azure-sdk-for-java/issues/new/choose)\nor checkout [StackOverflow for Azure Java SDK](https://stackoverflow.com/questions/tagged/azure-java-sdk).\n\n### Enabling Logging\n\nAzure SDKs for Java provide a consistent logging story to help aid in troubleshooting application errors and expedite\ntheir resolution. The logs produced will capture the flow of an application before reaching the terminal state to help\nlocate the root issue. View the [logging][logging] wiki for guidance about enabling logging.\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create new Pull Request\n\n<!-- Links -->\n[logging]: https://github.com/Azure/azure-sdk-for-java/wiki/Logging-with-Azure-SDK\n[jdk_link]: https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fcore%2Fazure-core-serializer-json-jackson%2FREADME.png)\n",
        "repo_name": "core/azure-core-serializer-json-jackson",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-serializer-json-jackson",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Core Test shared library for Java\n\nLibrary containing core classes used to test Azure SDK client libraries.\n\n* Create live or playback JUnit tests using [TestBase][TestBase.java] and\n  leveraging [InterceptorManager][InterceptorManager.java] to keep track of\n  network calls.\n* Record network calls using pipeline policy,\n  [RecordNetworkCallPolicy][RecordNetworkCallPolicy.java].\n* Playback test session records with [PlaybackClient][PlaybackClient.java].\n\n## Getting started\n\nTo use this package, add the following to your _pom.xml_.\n\n[//]: # ({x-version-update-start;com.azure:azure-core-test;current})\n```xml\n<dependency>\n  <groupId>com.azure</groupId>\n  <artifactId>azure-core-test</artifactId>\n  <version>1.18.0</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n## Key concepts\n\n* [TestBase][TestBase.java]: Base test class that creates an `InterceptorManager` for each unit test and either plays\n  back test session data or records the test session. Each session's file name is determined using the name of the test.\n* [InterceptorManager][InterceptorManager.java]: Main class used to record and playback `NetworkCallRecords`.\n\n## Examples\n\n### Create a test class to run live or playback tests\n\nUse [TestBase][TestBase.java] to easily create live and playback test cases. Extending from `TestBase` provides an\n`interceptorManager` that keeps track of all network calls.\n\n```java readme-sample-createATestClass\n/**\n * Set the AZURE_TEST_MODE environment variable to either PLAYBACK or RECORD to determine if tests are playback or\n * live. By default, tests are run in playback mode.\n */\npublic class SessionTests extends TestBase {\n\n    /**\n     * Use JUnit or TestNG annotation here for your testcase\n     */\n    public void fooTest() {\n        // Do some network calls.\n    }\n}\n```\n\n### Record network calls\n\nRecord network calls using [RecordNetworkCallPolicy][RecordNetworkCallPolicy.java]. Each HTTP request sent from the test\nclient, is persisted to [RecordedData][RecordedData.java].\n\n```java readme-sample-recordNetworkCalls\n/**\n * Sample code for recording network calls.\n */\npublic class Foo {\n    public void recordNetworkCalls() {\n        // All network calls are kept in the recordedData variable.\n        RecordedData recordedData = new RecordedData();\n        HttpPipeline pipeline = new HttpPipelineBuilder()\n            .policies(new RecordNetworkCallPolicy(recordedData))\n            .build();\n\n        // Send requests through the HttpPipeline.\n        pipeline.send(new HttpRequest(HttpMethod.GET, \"http://bing.com\"));\n\n        // Get a record that was sent through the pipeline.\n        NetworkCallRecord networkCall = recordedData.findFirstAndRemoveNetworkCall(record -> {\n            return record.getUri().equals(\"http://bing.com\");\n        });\n    }\n}\n```\n\n### Playback session records\n\nPlayback test session records by creating a [RecordedData][RecordedData.java].\n\n```java readme-sample-playbackSessionRecords\n/**\n * Sample code for using playback to test.\n */\npublic class FooBar {\n    public void playbackNetworkCalls() {\n        RecordedData recordedData = new RecordedData();\n\n        // Add some network calls to be replayed by playbackClient\n\n        // Creates a HTTP client that plays back responses in recordedData.\n        HttpClient playbackClient = new PlaybackClient(recordedData, null);\n\n        // Send an HTTP GET request to http://bing.com. If recordedData contains a NetworkCallRecord with a matching HTTP\n        // method and matching URL, it is returned as a response.\n        Mono<HttpResponse> response = playbackClient.send(new HttpRequest(HttpMethod.GET, \"http://bing.com\"));\n    }\n}\n```\n\n## Troubleshooting\n\nIf you encounter any bugs with these SDKs, please file issues via\n[Issues](https://github.com/Azure/azure-sdk-for-java/issues) or checkout\n[StackOverflow for Azure Java SDK](https://stackoverflow.com/questions/tagged/azure-java-sdk).\n\n## Next steps\n\nOther useful packages are:\n* [azure-core](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core): Contains core classes and functionality used by all client libraries.\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n[InterceptorManager.java]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-test/src/main/java/com/azure/core/test/InterceptorManager.java\n[PlaybackClient.java]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-test/src/main/java/com/azure/core/test/http/PlaybackClient.java\n[RecordedData.java]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-test/src/main/java/com/azure/core/test/models/RecordedData.java\n[RecordNetworkCallPolicy.java]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-test/src/main/java/com/azure/core/test/policy/RecordNetworkCallPolicy.java\n[TestBase.java]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-test/src/main/java/com/azure/core/test/TestBase.java\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fcore%2Fazure-core-test%2FREADME.png)\n",
        "repo_name": "core/azure-core-test",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-test",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure OpenTelemetry Tracing samples plugin library for Java\n\nThis package contains samples for the `azure-core-tracing-opentelemetry` library.\n\n## Getting started\n\n## Key concepts\n\n## Examples\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fcore%2Fazure-core-tracing-opentelemetry-samples%2FREADME.png)\n",
        "repo_name": "core/azure-core-tracing-opentelemetry-samples",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-tracing-opentelemetry-samples",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure OpenTelemetry Tracing plugin library for Java\n\nThis package enables distributed tracing across Azure SDK Java libraries through [OpenTelemetry][OpenTelemetry]. OpenTelemetry is an open source, vendor-agnostic, single distribution of libraries to provide metrics collection and distributed tracing for services.\nThe Azure core tracing package provides:\n\n- Context propagation, used to correlate activities and requests between services with an initial customer action.\n- Tracing user requests to the system, allowing to pinpoint failures and performance issues.\n\n[Source code][source_code] | [API reference documentation][api_documentation] | [Product\ndocumentation][OpenTelemetry] | [Samples][samples]\n\n## Getting started\n\nYou can enable tracing in Azure client libraries by using and configuring the OpenTelemetry SDK or using an OpenTelemetry-compatible agent.\n\n### Prerequisites\n\n- A [Java Development Kit (JDK)][jdk_link], version 8 or later.\n\n## Key concepts\n\n### Trace\n\nA trace is a tree of spans showing the path of work through a system. A trace on its own is distinguishable by a unique 16 byte sequence called a TraceID.\n\n### Span\n\nA span represents a single operation in a trace. A span could be representative of an HTTP request, a remote procedure call (RPC), a database query, or even the path that a code takes.\nAzure SDK produces span for public client calls such as `SecretClient.getSecret` and HTTP spans for each underlying call to Azure service.\n\n## Azure SDK tracing with Azure Monitor Java agent\n\nBy using an Azure Monitor Java in-process agent, you can enable monitoring of your applications without any code changes. For more information, see [Azure Monitor OpenTelemetry-based auto-instrumentation for Java applications](https://docs.microsoft.com/azure/azure-monitor/app/java-in-process-agent). Azure SDK support is enabled by default starting with agent version 3.2.\n\n## Tracing Azure SDK calls with OpenTelemetry Java agent\n\nIf you use [OpenTelemetry Java agent](https://github.com/open-telemetry/opentelemetry-java-instrumentation/), Azure SDK instrumentation is enabled out-of-the-box starting from version 1.12.0.\n\nFor more details on how to configure exporters, add manual instrumentation, or enrich telemetry, see [OpenTelemetry Instrumentation for Java](https://github.com/open-telemetry/opentelemetry-java-instrumentation).\n\nNote: OpenTelemetry agent artifact is stable, but does not provide over-the-wire telemetry stability guarantees - attribute or span names produced by Azure SDK might change over time when you update the agent. Check out [agent stability and versioning](https://github.com/open-telemetry/opentelemetry-java-instrumentation/blob/main/VERSIONING.md#compatibility-requirements) for more details.\n\n## Manually instrument the application with OpenTelemetry SDK\n\nIf you use OpenTelemetry SDK directly, make sure to configure SDK and exporter for the backend of your choice. For more information, see [OpenTelemetry documentation](https://opentelemetry.io/docs/instrumentation/java/manual_instrumentation/).\n\nTo enable Azure SDK tracing, add the latest `com.azure:azure-core-tracing-opentelemetry` packages to your application. For example, in Maven, add the following entry to your *pom.xml* file:\n\n[//]: # ({x-version-update-start;com.azure:azure-core-tracing-opentelemetry;current})\n```xml\n<dependency>\n  <groupId>com.azure</groupId>\n  <artifactId>azure-core-tracing-opentelemetry</artifactId>\n  <version>1.0.0-beta.36</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\nYou don't need this package if you use ApplicationInsights Java agent or OpenTelemetry agent.\n\n### Examples\n\nThe following sections provides examples of using the `azure-core-tracing-opentelemetry` plugin with a few Azure Java SDK libraries. \n\n### Configuration\n\nIf you want to configure tracing on specific instances of Azure client, you can do so with `OpenTelemetryTracingOptions`. With it,\nyou can disable tracing on the client, or configure custom `TracerProvider`.\n\nIf no `TraceProvider` is specified, Azure SDK will use global one (`GlobalOpenTelemetry.getTracerProvider()`). \n\nPass OpenTelemetry TracerProvider to Azure client:\n\n```java com.azure.core.tracing.TracingOptions#custom\n\n// configure OpenTelemetry SDK explicitly per https://opentelemetry.io/docs/instrumentation/java/manual/\nSdkTracerProvider tracerProvider = SdkTracerProvider.builder()\n    .addSpanProcessor(SimpleSpanProcessor.create(LoggingSpanExporter.create()))\n    .build();\n\nOpenTelemetry openTelemetry = OpenTelemetrySdk.builder().setTracerProvider(tracerProvider).build();\n// Pass OpenTelemetry container to TracingOptions.\nTracingOptions customTracingOptions = new OpenTelemetryTracingOptions()\n    .setOpenTelemetry(openTelemetry);\n\n// configure Azure Client to use customTracingOptions - it will use tracerProvider\n// to create tracers\nAzureClient sampleClient = new AzureClientBuilder()\n    .endpoint(\"https://my-client.azure.com\")\n    .clientOptions(new ClientOptions().setTracingOptions(customTracingOptions))\n    .build();\n\n// use client as usual, if it emits spans, they will be exported\nsampleClient.methodCall(\"get items\");\n\n```\n\n### Using the plugin package with HTTP client libraries\n\nSynchronously create a secret using [azure-security-keyvault-secrets][azure-security-keyvault-secrets] with tracing enabled.\n\nThe plugin package creates a logical span representing public API call to encapsulate all the underlying HTTP calls. By default OpenTelemetry\n`Context.current()` will be used as a parent context - check out [OpenTelemetry documentation](https://opentelemetry.io/docs/java/manual_instrumentation/#tracing) for more info.\nUsers can *optionally* pass the instance of `io.opentelemetry.context.Context` to the SDKs using key **PARENT_TRACE_CONTEXT_KEY** on the [Context][context] parameter of the calling method\nto provide explicit parent context.\nThis [sample][sample_key_vault] provides an example when parent span is picked up automatically.\n\n```java readme-sample-context-auto-propagation\nSecretClient secretClient = new SecretClientBuilder()\n    .vaultUrl(VAULT_URL)\n    .credential(new DefaultAzureCredentialBuilder().build())\n    .buildClient();\n\nSpan span = tracer.spanBuilder(\"my-span\").startSpan();\ntry (Scope s = span.makeCurrent()) {\n    // ApplicationInsights or OpenTelemetry agent propagate context through async reactor calls.\n    // So SecretClient here creates spans that are children of my-span\n    System.out.printf(\"Secret with name: %s%n\", secretClient.setSecret(new KeyVaultSecret(\"Secret1\", \"password1\")).getName());\n    secretClient.listPropertiesOfSecrets().forEach(secretBase ->\n        System.out.printf(\"Secret with name: %s%n\", secretClient.getSecret(secretBase.getName())));\n} finally {\n    span.end();\n}\n\n```\n\nWhen using async clients without Application Insights Java agent or OpenTelemetry agent, please do context propagation manually:\n\n#### Synchronous clients \n\nPass OpenTelemetry `Context` under `PARENT_TRACE_CONTEXT_KEY` in `com.azure.core.util.Context`: \n\n```java com.azure.core.util.tracing#explicit-parent\n\nSdkTracerProvider tracerProvider = SdkTracerProvider.builder()\n    .addSpanProcessor(SimpleSpanProcessor.create(LoggingSpanExporter.create()))\n    .build();\n\nAzureClient sampleClient = new AzureClientBuilder()\n    .endpoint(\"Https://my-client.azure.com\")\n    .build();\n\nTracer tracer = tracerProvider.get(\"test\");\nSpan parent = tracer.spanBuilder(\"parent\").startSpan();\nio.opentelemetry.context.Context traceContext = io.opentelemetry.context.Context.current().with(parent);\n\n// do some  work\n\n// You can pass parent explicitly using PARENT_TRACE_CONTEXT_KEY in the com.azure.core.util.Context.\n// Or, when using async clients, pass it in reactor.util.context.Context under the same key.\nString response = sampleClient.methodCall(\"get items\",\n    new Context(PARENT_TRACE_CONTEXT_KEY, traceContext));\n\n// do more work\nparent.end();\n\n```\n\n#### Asynchronous clients\n\nPass OpenTelemetry `Context` under `PARENT_TRACE_CONTEXT_KEY` in `reactor.util.context.Context`:\n```java readme-sample-context-manual-propagation\nSecretAsyncClient secretAsyncClient = new SecretClientBuilder()\n    .vaultUrl(VAULT_URL)\n    .credential(new DefaultAzureCredentialBuilder().build())\n    .buildAsyncClient();\n\nSpan span = tracer.spanBuilder(\"my-span\").startSpan();\n// when using async clients and instrumenting without ApplicationInsights or OpenTelemetry agent, context needs to be propagated manually\nContext traceContext = Context.of(PARENT_TRACE_CONTEXT_KEY, io.opentelemetry.context.Context.current().with(span));\ntry {\n    secretAsyncClient.setSecret(new KeyVaultSecret(\"Secret1\", \"password1\"))\n        .contextWrite(traceContext)\n        .subscribe(secretResponse -> System.out.printf(\"Secret with name: %s%n\", secretResponse.getName()));\n    secretAsyncClient.listPropertiesOfSecrets()\n        .contextWrite(traceContext)\n        .doOnNext(secretBase -> secretAsyncClient.getSecret(secretBase.getName())\n            .contextWrite(traceContext)\n            .doOnNext(secret -> System.out.printf(\"Secret with name: %s%n\", secret.getName())))\n        .blockLast();\n} finally {\n    span.end();\n}\n\n```\n\n### Using the plugin package with AMQP client libraries\n\nSend a single event/message using [azure-messaging-eventhubs][azure-messaging-eventhubs] with tracing enabled.\n\nUsers can additionally pass custom value of the trace context to the EventData object with key **PARENT_TRACE_CONTEXT_KEY** on the [Context][context] object.\n\nPlease refer to [Event Hubs samples][event_hubs_samples]\nfor more information.\n\n```java\n\nFlux<EventData> events = Flux.just(\n    new EventData(\"EventData Sample 1\"),\n    new EventData(\"EventData Sample 2\"));\n\n// Create a batch to send the events.\nfinal AtomicReference<EventDataBatch> batchRef = new AtomicReference<>(\n    producer.createBatch().block());\n\nfinal AtomicReference<io.opentelemetry.context.Context> traceContextRef = new AtomicReference<>(io.opentelemetry.context.Context.current());\n\n// when using async clients and instrumenting without ApplicationInsights or OpenTelemetry agent, context needs to be propagated manually\n// you would also want to propagate it manually when not making spans current.\n// we'll propagate context to events (to propagate it over to consumer)\nevents.collect(batchRef::get, (b, e) ->\n        b.tryAdd(e.addContext(PARENT_TRACE_CONTEXT_KEY, traceContextRef.get())))\n    .flatMap(b -> producer.send(b))\n    .doFinally(i -> Span.fromContext(traceContextRef.get()).end())\n    .contextWrite(ctx -> {\n        // this block is executed first, we'll create an outer span, which usually represents incoming request\n        // or some logical operation\n        Span span = TRACER.spanBuilder(\"my-span\").startSpan();\n\n        // and pass the new context with span to reactor for EventHubs producer client to pick it up.\n        return ctx.put(PARENT_TRACE_CONTEXT_KEY, traceContextRef.updateAndGet(traceContext -> traceContext.with(span)));\n    })\n    .block();\n\n```\n\n## Troubleshooting\n\n### General\n\nFor more information on OpenTelemetry Java support for tracing, see [OpenTelemetry Java][OpenTelemetry-quickstart].\n\n### Enabling Logging\n\nAzure SDKs for Java offer a consistent logging story to help aid in troubleshooting application errors and expedite\ntheir resolution. The logs produced will capture the flow of an application before reaching the terminal state to help\nlocate the root issue. View the [logging][logging] wiki for guidance about enabling logging.\n\n## Next steps\n\n### Samples\n\nSeveral Java SDK samples are available to you in the SDKs GitHub repository.\nThese following samples provide example code for additional scenarios commonly encountered while working with Tracing:\n\n- [Set Configuration Setting][sample_app_config] - Tracing enabled Sample for setting a configuration setting using [azure-data-app-configuration][azure_data_app_configuration].\n- [List Key Vault Secrets][sample_key_vault] - Tracing enabled sample for creating and listing secrets of a Key Vault using [azure-security-keyvault-secrets][azure_keyvault_secrets].\n- [Publish Events][sample_eventhubs] - Tracing enabled sample for publishing multiple events using [azure-messaging-eventhubs][azure_messaging_eventhubs_mvn].\n- [Async List Key Vault Secrets][sample_async_key_vault] - Tracing enabled sample for asynchronously creating and listing secrets of a Key Vault using [azure-security-keyvault-secrets][azure_keyvault_secrets].\n\n### Additional Documentation\n\nFor more extensive documentation on OpenTelemetry, see the [API reference documentation][OpenTelemetry].\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [cla](https://cla.microsoft.com).\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments.\n\n<!-- Links -->\n[api_documentation]: https://aka.ms/java-docs\n[azure_data_app_configuration]: https://mvnrepository.com/artifact/com.azure/azure-data-appconfiguration/\n[azure_keyvault_secrets]: https://mvnrepository.com/artifact/com.azure/azure-security-keyvault-secrets\n[azure_messaging_eventhubs_mvn]: https://mvnrepository.com/artifact/com.azure/azure-messaging-eventhubs/\n[azure-messaging-eventhubs]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/eventhubs/azure-messaging-eventhubs\n[azure-security-keyvault-secrets]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/keyvault/azure-security-keyvault-secrets\n[context]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core/src/main/java/com/azure/core/util/Context.java\n[jdk_link]: https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable\n[logging]: https://github.com/Azure/azure-sdk-for-java/wiki/Logging-with-Azure-SDK\n[OpenTelemetry-quickstart]: https://github.com/open-telemetry/opentelemetry-java/blob/main/QUICKSTART.md\n[OpenTelemetry]: https://github.com/open-telemetry/opentelemetry-java#opentelemetry-for-java\n[sample_app_config]: https://github.com/Azure/azure-sdk-for-java/blob/340efc149a29df01358e1a4d580a4b1d045494b3/sdk/core/azure-core-tracing-opentelemetry-samples/src/samples/java/com/azure/core/tracing/opentelemetry/samples/CreateConfigurationSettingLoggingExporterSample.java\n[sample_async_key_vault]: https://github.com/Azure/azure-sdk-for-java/blob/340efc149a29df01358e1a4d580a4b1d045494b3/sdk/core/azure-core-tracing-opentelemetry-samples/src/samples/java/com/azure/core/tracing/opentelemetry/samples/ListKeyVaultSecretsAutoConfigurationSample.java\n[sample_key_vault]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-tracing-opentelemetry-samples/src/samples/java/com/azure/core/tracing/opentelemetry/samples/ListKeyVaultSecretsAutoConfigurationSample.java\n[samples]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-tracing-opentelemetry-samples/src/samples/\n[source_code]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-tracing-opentelemetry/src\n[event_hubs_samples](https://github.com/Azure/azure-sdk-for-java/blob/10a18ccc2f20cad6004ae90d64f22009d65e9ef7/sdk/eventhubs/azure-messaging-eventhubs/src/samples/java/com/azure/messaging/eventhubs/PublishEventsTracingWithCustomContextSample.java)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fcore%2Fazure-core-tracing-opentelemetry%2FREADME.png)\n",
        "repo_name": "core/azure-core-tracing-opentelemetry",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-tracing-opentelemetry",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Core Version Tests shared library for Java\n\nProvides end-to-end tests using the Core libraries as dependencies.\n\n## Getting started\n\n## Key concepts\n\n## Examples\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\n<!-- links -->\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fcore%2Fazure-core-version-tests%2FREADME.png)\n",
        "repo_name": "core/azure-core-version-tests",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-version-tests",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Core shared library for Java\n\n[![Build Documentation](https://img.shields.io/badge/documentation-published-blue.svg)](https://azure.github.io/azure-sdk-for-java)\n\nAzure Core provides shared primitives, abstractions, and helpers for modern Java Azure SDK client libraries.\nThese libraries follow the [Azure SDK Design Guidelines for Java](https://azure.github.io/azure-sdk/java_introduction.html)\nand can be easily identified by package names starting with `com.azure` and module names starting with `azure-`,\ne.g. `com.azure.storage.blobs` would be found within the `/sdk/storage/azure-storage-blob` directory. A more complete\nlist of client libraries using Azure Core can be found [here](https://azure.github.io/azure-sdk/releases/latest/#java-packages).\n\nAzure Core allows client libraries to expose common functionality consistently, so that once you learn how to use these\nAPIs in one client library, you will know how to use them in other client libraries.\n\n## Getting started\n\n### Prerequisites\n\n- A [Java Development Kit (JDK)][jdk_link], version 8 or later.\n\n### Include the package\n\n#### Include the BOM file\n\nPlease include the azure-sdk-bom to your project to take dependency on the General Availability (GA) version of the library. In the following snippet, replace the {bom_version_to_target} placeholder with the version number.\nTo learn more about the BOM, see the [AZURE SDK BOM README](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/boms/azure-sdk-bom/README.md).\n\n```xml\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>com.azure</groupId>\n            <artifactId>azure-sdk-bom</artifactId>\n            <version>{bom_version_to_target}</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n```\nand then include the direct dependency in the dependencies section without the version tag. Typically, you won't need to install or depend on Azure Core, instead it will be transitively downloaded by your build\ntool when you depend on client libraries using it.\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-core</artifactId>\n  </dependency>\n</dependencies>\n```\n\n#### Include direct dependency\nIf you want to take dependency on a particular version of the library that is not present in the BOM,\nadd the direct dependency to your project as follows.\n\n[//]: # ({x-version-update-start;com.azure:azure-core;current})\n```xml\n<dependency>\n  <groupId>com.azure</groupId>\n  <artifactId>azure-core</artifactId>\n  <version>1.40.0</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n## Key concepts\n\nThe key concepts of Azure Core (and therefore all Azure client libraries using Azure Core) include:\n\n- Configuring service clients, e.g. configuring retries, logging, etc.\n- Accessing HTTP response details (`Response<T>`).\n- Calling long-running operations (`PollerFlux<T>`).\n- Paging and asynchronous streams (`ContinuablePagedFlux<T>`).\n- Exceptions for reporting errors from service requests consistently.\n- Abstractions for representing Azure SDK credentials.\n\nThese will be introduced by way of the examples presented below.\n\n## Examples\n\n### Accessing HTTP Response Details Using `Response<T>`\n\n_Service clients_ have methods that call Azure services, we refer call these methods _service methods_.\n\n_Service methods_ can return a shared Azure Core type `Response<T>`. This type provides access to both the\ndeserialized result of the service call and to the details of the HTTP response returned from the server.\n\n### HTTP pipelines with `HttpPipeline`\n\n`HttpPipeline` is a construct that contains a list of `HttpPipelinePolicy` which are applied to a request\nsequentially to prepare it being sent by an `HttpClient`.\n\n### Exception Hierarchy with `AzureException`\n\n`AzureException` is the root exception in the hierarchy used in Azure Core. Additional exceptions such as\n`HttpRequestException` and `HttpResponseException` are used to reduce the scope of exception reasons.\n\n### Pagination with `ContinuablePagedFlux<T>`\n\n`ContinuablePageFlux` manages sending an initial page request to a service and retrieving additional pages as the\nconsumer requests more data until the consumer finishes processing or all pages have been consumed.\n\n### Long Running Operations with `PollerFlux<T>`\n\n`PollerFlux` manages sending an initial service request and requesting processing updates on a fix interval until polling is cancelled or reaches a terminal state.\n\n## Next steps\n\nGet started with Azure libraries that are [built using Azure Core](https://azure.github.io/azure-sdk/releases/latest/#java).\n\n## Troubleshooting\n\nIf you encounter any bugs, please file issues via [GitHub Issues](https://github.com/Azure/azure-sdk-for-java/issues/new/choose)\nor checkout [StackOverflow for Azure Java SDK](https://stackoverflow.com/questions/tagged/azure-java-sdk).\n\n### Enabling Logging\n\nAzure SDKs for Java provide a consistent logging story to help aid in troubleshooting application errors and expedite\ntheir resolution. The logs produced will capture the flow of an application before reaching the terminal state to help\nlocate the root issue. View the [logging][logging] documentation for guidance about enabling logging.\n\n#### HTTP Request and Response Logging\n\nHTTP request and response logging can be enabled by setting `HttpLogDetailLevel` in the `HttpLogOptions` used to create \nan HTTP-based service client or by setting the environment variable or system property `AZURE_HTTP_LOG_DETAIL_LEVEL`.\nThe following table displays the valid options for `AZURE_HTTP_LOG_DETAIL_LEVEL` and the `HttpLogDetailLevel` it\ncorrelates to (valid options are case-insensitive):\n\n| `AZURE_HTTP_LOG_DETAIL_LEVEL` value | `HttpLogDetailLevel` enum |\n| ----------------------------------- | ------------------------- |\n| `basic` | `HttpLogDetailLevel.BASIC` |\n| `headers` | `HttpLogDetailLevel.HEADERS` |\n| `body` | `HttpLogDetailLevel.BODY` |\n| `body_and_headers` | `HttpLogDetailLevel.BODY_AND_HEADERS` |\n| `bodyandheaders` | `HttpLogDetailLevel.BODY_AND_HEADERS` |\n\nAll other values, or unsupported values, result in `HttpLogDetailLevel.NONE`, or disabled HTTP request and response \nlogging. Logging [must be enabled](#enabling-logging) to log HTTP requests and responses. Logging of HTTP headers requires `verbose`\nlogging to be enabled. The following table explains what logging is enabled for each `HttpLogDetailLevel`:\n\n| `HttpLogDetailLevel` value | Logging enabled                                                         |\n| -------------------------- |-------------------------------------------------------------------------|\n| `HttpLogDetailLevel.NONE` | No HTTP request or response logging                                     |\n| `HttpLogDetailLevel.BASIC` | HTTP request method, response status code, and request and response URL |\n| `HttpLogDetailLevel.HEADERS` | All of `HttpLogDetailLevel.BASIC` and request and response headers if the log level is `verbose` |\n| `HttpLogDetailLevel.BODY` | All of `HttpLogDetailLevel.BASIC` and request and response body if it's under 10KB in size |\n| `HttpLogDetailLevel.BODY_AND_HEADERS` | All of `HttpLogDetailLevel.HEADERS` and `HttpLogDetailLevel.BODY` |\n\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create new Pull Request\n\n<!-- links -->\n[logging]: https://learn.microsoft.com/azure/developer/java/sdk/logging-overview\n[jdk_link]: https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fcore%2Fazure-core%2FREADME.png)\n",
        "repo_name": "core/azure-core",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure GSON JSON shared library for Java\n\n[![Build Documentation](https://img.shields.io/badge/documentation-published-blue.svg)](https://azure.github.io/azure-sdk-for-java)\n\nAzure GSON JSON provides an implementation of `azure-json` using GSON.\n\n## Getting started\n\n### Prerequisites\n\n- A [Java Development Kit (JDK)][jdk_link], version 8 or later.\n\n### Include the package\n\n#### Include direct dependency\n\nIf you want to take dependency on a particular version of the library that is not present in the BOM,\nadd the direct dependency to your project as follows.\n\n[//]: # ({x-version-update-start;com.azure:azure-json-gson;current})\n```xml\n<dependency>\n  <groupId>com.azure</groupId>\n  <artifactId>azure-json-gson</artifactId>\n  <version>1.0.0-beta.3</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n## Key concepts\n\nSee `azure-json` for key concepts.\n\n## Examples\n\nSee `azure-json` for examples.\n\n## Next steps\n\nGet started with Azure libraries that are [built using Azure Core](https://azure.github.io/azure-sdk/releases/latest/#java).\n\n## Troubleshooting\n\nIf you encounter any bugs, please file issues via [GitHub Issues](https://github.com/Azure/azure-sdk-for-java/issues/new/choose)\nor checkout [StackOverflow for Azure Java SDK](https://stackoverflow.com/questions/tagged/azure-java-sdk).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create new Pull Request\n\n<!-- links -->\n[jdk_link]: https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fcore%2Fazure-json-gson%2FREADME.png)\n",
        "repo_name": "core/azure-json-gson",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-json-gson",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Json Reflect shared library for Java\n\nAzure Json Reflect provides implementations of `azure-json` using reflection.\nIt uses Jackson and Gson but has no dependencies on these libraries.\nTo use Azure Json Reflect a compatible version of Jackson or Gson must be present on the classpath.\n\n## Getting started\n\n### Prerequisites\n\n- A [Java Development Kit (JDK)][jdk_link], version 8 or later.\n\n### Supported versions\n\n#### Jackson\n- Versions 2.10.0 and newer\n\n#### Gson\n- Versions 2.4 and newer\n\n## Key concepts\n\nSee `azure-json` for more key concepts.\n\nThis package searches the relative classpath for Jackson or Gson.\nIt will then search for all the methods that are required for the `JsonReader` and `JsonWriter` implementations.\nThese implementations provide abstractions of the JSON libraries.\n\n### Entry point\nUse `JsonProviderFactory.getInstance()`, `JsonProviderFactory.getJacksonJsonProvider()`, or \n`JsonProviderFactory.getGsonJsonProvider()` to get a `JsonProvider`.\n\n## Examples\n\nSee `azure-json` for examples.\n\n## Next steps\n\nGet started with Azure libraries that are [built using Azure Core](https://azure.github.io/azure-sdk/releases/latest/#java).\n\n## Troubleshooting\n\nIf you encounter any bugs, please file issues via [GitHub Issues](https://github.com/Azure/azure-sdk-for-java/issues/new/choose)\nor checkout [StackOverflow for Azure Java SDK](https://stackoverflow.com/questions/tagged/azure-java-sdk).\n\n## Contributing\n\nFor details on contributing to this repository, see the <a href=\"https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\"> contributing guide</a>.\n1. Fork it\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some features`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create new pull Request\n\n<!-- links -->\n[jdk_link]: https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable\n",
        "repo_name": "core/azure-json-reflect",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-json-reflect",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure JSON shared library for Java\n\n[![Build Documentation](https://img.shields.io/badge/documentation-published-blue.svg)](https://azure.github.io/azure-sdk-for-java)\n\nAzure JSON provides shared primitives, abstractions, and helpers for JSON.\n\n## Getting started\n\n### Prerequisites\n\n- A [Java Development Kit (JDK)][jdk_link], version 8 or later.\n\n### Include the package\n\n[//]: # ({x-version-update-start;com.azure:azure-json;current})\n```xml\n<dependency>\n  <groupId>com.azure</groupId>\n  <artifactId>azure-json</artifactId>\n  <version>1.0.1</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n## Key concepts\n\n### JsonSerializable\n\n`JsonSerializable` is used to define how an object is JSON serialized and deserialized using stream-style serialization\nwhere the object itself manages the logic for how it's handled. The interface provides an instance-based `toJson` API \nthat handles writing the object to a `JsonWriter` and a static `fromJson` API which implementations must provide to \ndefine how to create an object by reading from a `JsonReader`, if an implementation isn't provided \n`UnsupportedOperationException` will be thrown.\n\n### JsonToken\n\n`JsonToken` is a basic enum that indicates the current state in a JSON stream.\n\n### JsonReader\n\n`JsonReader` provides both basic, reading primitive and boxed primitive types, and convenience, reading arrays, maps,\nand objects, APIs for reading JSON. `JsonReader` is provided to allow for any underlying JSON parser to implement it,\nsuch as Jackson or GSON, as long as the implementation passes the tests provided by this package's test-jar \n(`JsonReaderContractTests`).\n\n`JsonReader` doesn't progress forward in the JSON stream until `nextToken` is called, meaning that `JsonReader.getInt`\ncould be called indefinitely returning the same integer without error until `nextToken` progresses the JSON stream \nforward.\n\n`JsonReader` allows for type conversion between JSON types, such as trying to convert a JSON string to a number or vice\nversa, and for commonly used nonstandard JSON values, such as `NaN`, `INF`, `-INF`, `Infinity`, and `-Infinity`.\n\n`JsonReader` doesn't take ownership of the JSON input source and therefore doesn't close any resources if the JSON is \nprovided using an `InputStream` or `Reader`.\n\n#### Nesting Limits\n\n`JsonReader`'s generic `readUntyped` API tracks how deeply nested the object being read is. If the nesting passes the \nthreshold of `1000`, `IllegalStateException` is thrown to prevent `StackOverflowError`.\n\n### JsonWriter\n\n`JsonWriter` provides both basic, writing primitives and boxed primitive types, and convenience, writing arrays, maps,\nand objects, APIs for writing JSON. `JsonWriter` is provided to allow for any underlying JSON writer to implement it,\nsuch as Jackson or GSON, as long as the implementation passes the tests provided by the package's test-jar\n(`JsonWriterContractTests`).\n\n`JsonWriter` allows for commonly used nonstandard JSON values, such as `NaN`, `INF`, `-INF`, `Infinity`, and \n`-Infinity`, to be written using `writeNumberField` or `writeRawValue`.\n\n`JsonWriter` doesn't write null `byte[]`, `Boolean`, `Number`, or `String` values when written as a field, \n`writeBinaryField`, `writeBooleanField`, `writeNumberField`, or `writeStringField`, if a null field needs to be written\nuse `writeNullField`.\n\n`JsonWriter` must be periodically flushed to ensure content written to it's flushed to the underlying container type,\ngenerally an `OutputStream` or `Writer`. Failing to flush may result in content being lost. Closing the `JsonWriter`\nflushes content, so it's best practice to use `JsonWriter` in a try-with-resources block where the `JsonWriter` is \nclosed once it's finished being used.\n\n`JsonWriter` doesn't take ownership of the JSON output source and therefore doesn't close any resources if the JSON is\nbeing written to an `OutputSteam` or `Writer`.\n\n#### JSON State Management\n\nTo ensure that the JSON being written is valid, `JsonWriter` maintains the state of the JSON using `JsonWriteContext`\nand on each attempt to write it validates whether the operation is valid. The implementation of `JsonWriter` must\nensure state is tracked correctly, for example when nothing has been written the JSON state must be `ROOT` and `ROOT`\ndoesn't allow for JSON field names to be written.\n\n### JsonProvider\n\n`JsonProvider` is a service provider interface that allows for `JsonReader`s and `JsonWriter`s to be created using\nimplementations found on the classpath. `JsonProvider` can also create the default implementations that are provided\nby this package if an implementation isn't found on the classpath.\n\n#### JsonOptions\n\n`JsonOptions` contains configurations that must be respected by all implementations of `JsonReader`s and `JsonWriter`s. \nAt this time, there's only one configuration for determining whether non-numeric numbers, `NaN`, `INF`, `-INF`, `Infinity`, \nand `-Infinity` are supported in JSON reading and writing with a default setting of `true`, that non-numeric numbers \nare allowed.\n\n### Providing an SPI implementation\n\n`JsonReader` and `JsonWriter` are service provider interfaces used by `JsonProvider` and `JsonProviders` to enable\nimplementations to be loaded from the class path. The Azure JSON package provides a default implementation that is\nused if one can't be found on the class path. To provide a custom implementation, implement `JsonReader`, `JsonWriter`,\nand `JsonProvider` in your own package and indicate that the package provides an instance of `JsonProvider`. To ensure\nthat your implementations are correct, include the `test` scoped dependency of Azure JSON and extend the\n`JsonReaderContractTests`, `JsonWriterContractTests`, and `JsonProviderContractTests`. These tests outline all basic\ncontract requirements set forth by `JsonReader`, `JsonWriter`, and `JsonProvider` and testing a few complex scenarios \nto provide validation of any implementation.\n\n## Examples\n\nCheck out the [samples README][samples_readme] for in-depth examples on how to use Azure JSON.\n\n## Troubleshooting\n\nIf you encounter any bugs, please file issues via [GitHub Issues](https://github.com/Azure/azure-sdk-for-java/issues/new/choose)\nor checkout [StackOverflow for Azure Java SDK](https://stackoverflow.com/questions/tagged/azure-java-sdk).\n\n## Next steps\n\nGet started with Azure libraries that are [built using Azure Core](https://azure.github.io/azure-sdk/releases/latest/#java).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create new Pull Request\n\n<!-- links -->\n[jdk_link]: https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable\n[samples_readme]: https://github.com/Azure/azure-sdk-for-java/blob/8517f855a79ea23dce94397c58e4368738016fc4/sdk/core/azure-json/src/samples/README.md\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fcore%2Fazure-json%2FREADME.png)\n",
        "repo_name": "core/azure-json",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-json",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure XML shared library for Java\n\n[![Build Documentation](https://img.shields.io/badge/documentation-published-blue.svg)](https://azure.github.io/azure-sdk-for-java)\n\nAzure XML provides shared primitives, abstractions, and helpers for XML.\n\n## Getting started\n\n### Prerequisites\n\n- A [Java Development Kit (JDK)][jdk_link], version 8 or later.\n\n### Include the package\n\n#### Include direct dependency\n\nIf you want to take dependency on a particular version of the library that is not present in the BOM,\nadd the direct dependency to your project as follows.\n\n[//]: # ({x-version-update-start;com.azure:azure-xml;current})\n```xml\n<dependency>\n  <groupId>com.azure</groupId>\n  <artifactId>azure-xml</artifactId>\n  <version>1.0.0-beta.2</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n## Key concepts\n\n### XmlSerializable\n\n`XmlSerializable` is used to define how an object is XML serialized and deserialized using stream-style serialization\nwhere the object itself manages the logic for how it's handled with XML. The interface provides an instance-based\n`toXml` API which handles writing the object to an `XmlWriter` and a static `fromXml` API which implementations must\noverride to define how an object is created by reading from an `XmlReader`.\n\n### XmlToken\n\n`XmlToken` is a basic enum that indicates the current state in an XML stream.\n\n### XmlReader\n\n`XmlReader` provides both basic, reading primitive and boxed primitive types, and convenience, reading an object, APIs\nfor reading XML. `XmlReader` is provided to allow for any underlying XML parser to implement it, such as Woodstox or\nXMLStreamReader, as long as the implementation passes the tests provided by this package's test-jar \n(`XmlReaderContractTests`).\n\n`XmlReader` is a simplified XML parser where it only supports reading element-by-element with the ability to retrieve\nthe namespace and attributes for that element. `XmlReader` doesn't progress forward in the XML stream until \n`nextElement` is called, meaning that `XmlReader.getIntElement` could be called indefinitely returning the same integer\nwithout error until `nextElement` progresses the XML stream forward.\n\n`XmlReader` doesn't take ownership of the XML input source and therefore won't close any resources if the XML is\nprovided using an `InputStream` or `Reader`.\n\n### XmlWriter\n\n`XmlWriter` provides basic APIs for writing XML. `XmlWriter` is provided to allow for any underlying XML writer to\nimplement it, such as Woodstox or XMLStreamWriter, as long as the implementation passes the tests provided by this\npackage's test-jar (`XmlWriterContractTests`).\n\n`XmlWriter` must be periodically flushed to ensure content written to it is flushed to the underlying container type,\ngenerally an `OutputStream` or `Writer`. Failing to flush may result in content being lost. Closing the `XmlWriter` will\nalso flush content, so it's best practice to use `XmlWriter` in a try-with-resources block where the `XmlWriter` will\nbe closed once it's finished being used.\n\n`XmlWriter` doesn't take ownership of the XML output source and therefore won't close any resources if the XML is being\nwritten to an `OutputStream` or `Writer`.\n\n### XmlProvider\n\n`XmlProvider` is a service provider interface which allows for `XmlReader`s and `XmlWriter`s to be created using\nimplementations found on the classpath. `XmlProvider` can also create the default implementations which are provided by\nthis package if an implementation isn't found on the classpath.\n\n## Examples\n\n### XmlSerializable\n\n```java xmlserializablesample-basic\npublic class XmlSerializableExample implements XmlSerializable<XmlSerializableExample> {\n    private boolean aBooleanAttribute;\n    private Double aNullableDecimalAttribute;\n    private int anIntElement;\n    private String aStringElement;\n\n    @Override\n    public XmlWriter toXml(XmlWriter xmlWriter) throws XMLStreamException {\n        return toXml(xmlWriter, null);\n    }\n\n    public XmlWriter toXml(XmlWriter xmlWriter, String rootElementName) throws XMLStreamException {\n        // If the passed root element name is null or empty use the default root element name.\n        // This allows for scenarios where the model is defined with one XML root element name but other models use\n        // it with a separate XML element name.\n        rootElementName = (rootElementName == null || rootElementName.isEmpty()) ? \"example\" : rootElementName;\n\n        xmlWriter.writeStartElement(rootElementName);\n\n        // Writing attributes must happen first so that they are written to the object start element.\n        xmlWriter.writeBooleanAttribute(\"aBooleanAttribute\", aBooleanAttribute);\n        xmlWriter.writeNumberAttribute(\"aNullableDecimalAttribute\", aNullableDecimalAttribute);\n\n        xmlWriter.writeIntElement(\"anIntElement\", anIntElement);\n        xmlWriter.writeStringElement(\"aStringElement\", aStringElement);\n\n        return xmlWriter.writeEndElement();\n    }\n\n    public XmlSerializableExample fromXml(XmlReader xmlReader) throws XMLStreamException {\n        return fromXml(xmlReader, null);\n    }\n\n    public XmlSerializableExample fromXml(XmlReader xmlReader, String rootElementName) throws XMLStreamException {\n        rootElementName = (rootElementName == null || rootElementName.isEmpty()) ? \"example\" : rootElementName;\n\n        // readObject is a convenience method on XmlReader which prepares the XML for being read as an object.\n        // If the current token isn't an XmlToken.START_ELEMENT the next token element will be iterated to, if it's\n        // still not an XmlToken.START_ELEMENT after iterating to the next element an exception will be thrown. If\n        // the next element is an XmlToken.START_ELEMENT it will validate that the XML element matches the name\n        // expected, if the name doesn't match an exception will be thrown. If the element name matches the reader\n        // function will be called.\n        return xmlReader.readObject(rootElementName, reader -> {\n            // Since this class has no constructor reading to fields can be done inline.\n            // If the class had a constructor with arguments the recommendation is using local variables to track\n            // all field values.\n\n            XmlSerializableExample result = new XmlSerializableExample();\n\n            // Reading attributes must happen first so that the XmlReader is looking at the object start element.\n            result.aBooleanAttribute = reader.getBooleanAttribute(null, \"aBooleanAttribute\");\n            result.aNullableDecimalAttribute = reader.getNullableAttribute(null, \"aNullableDecimalAttribute\",\n                Double::parseDouble);\n\n            while (reader.nextElement() != XmlToken.END_ELEMENT) {\n                QName elementName = reader.getElementName();\n\n                // Since this object doesn't use namespaces we can work with the local part directly.\n                // If it had namespaces the full QName would need to be inspected.\n                String localPart = elementName.getLocalPart();\n                if (\"anIntElement\".equals(localPart)) {\n                    result.anIntElement = reader.getIntElement();\n                } else if (\"aStringElement\".equals(localPart)) {\n                    // getStringElement coalesces XML text and XML CData into a single string without needing to\n                    // manage state.\n                    result.aStringElement = reader.getStringElement();\n                } else {\n                    // Skip element when the element is unknown.\n                    reader.skipElement();\n                }\n            }\n\n            return result;\n        });\n    }\n}\n```\n\n## Next steps\n\nGet started with Azure libraries that are [built using Azure Core](https://azure.github.io/azure-sdk/releases/latest/#java).\n\n## Troubleshooting\n\nIf you encounter any bugs, please file issues via [GitHub Issues](https://github.com/Azure/azure-sdk-for-java/issues/new/choose)\nor checkout [StackOverflow for Azure Java SDK](https://stackoverflow.com/questions/tagged/azure-java-sdk).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create new Pull Request\n\n<!-- links -->\n[jdk_link]: https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fcore%2Fazure-xml%2FREADME.png)\n",
        "repo_name": "core/azure-xml",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-xml",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Cosmos DB Client Library for Java\n\n# Benchmarking Tool\n\n## Build the benchmarking tool\n\n```bash\ngit clone https://github.com/Azure/azure-sdk-for-java.git\ncd azure-sdk-for-java\ncd sdk/cosmos/\nmvn clean package -f pom.xml -DskipTests -Dgpg.skip -Ppackage-assembly\n```\n\nand then the package will be generated.\n\n## Run the WriteLatency workload\n\n```bash\njava -jar azure-cosmos-benchmark/target/azure-cosmos-benchmark-4.0.1-beta.1-jar-with-dependencies.jar \\\n -serviceEndpoint $endpoint -masterKey $masterkey \\\n -databaseId $dbname -collectionId $colname \\\n -consistencyLevel Eventual -concurrency 10 -numberOfOperations 1000000 \\\n -operation WriteLatency -connectionMode Direct\n```\n\n## Sample Report:\n\n```\n2/13/19 9:32:39 PM =============================================================\n\n-- Meters ----------------------------------------------------------------------\n#Successful Operations\n             count = 89934\n         mean rate = 1798.56 events/second\n     1-minute rate = 1718.45 events/second\n     5-minute rate = 1630.17 events/second\n    15-minute rate = 1610.01 events/second\n#Unsuccessful Operations\n             count = 0\n         mean rate = 0.00 events/second\n     1-minute rate = 0.00 events/second\n     5-minute rate = 0.00 events/second\n    15-minute rate = 0.00 events/second\n\n-- Timers ----------------------------------------------------------------------\nLatency\n             count = 89938\n         mean rate = 1798.64 calls/second\n     1-minute rate = 1718.65 calls/second\n     5-minute rate = 1630.37 calls/second\n    15-minute rate = 1610.21 calls/second\n               min = 3.97 milliseconds\n               max = 22.81 milliseconds\n              mean = 5.37 milliseconds\n            stddev = 0.96 milliseconds\n            median = 5.26 milliseconds\n              75% <= 5.70 milliseconds\n              95% <= 6.40 milliseconds\n              98% <= 6.93 milliseconds\n              99% <= 7.51 milliseconds\n            99.9% <= 17.37 milliseconds\n```\n\n## Other Currently Supported Workloads\n\n* ReadLatency,\n* WriteLatency,\n* ReadThroughput,\n* WriteThroughput,\n* QueryInClauseParallel\n* ReadMyWrites\n\n\nYou can provide ``--help`` to the tool to see the list of other work loads (read, etc) and other options.\n\n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fcosmos%2Fazure-cosmos-benchmark%2FREADME.png)\n",
        "repo_name": "cosmos/azure-cosmos-benchmark",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/cosmos/azure-cosmos-benchmark",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Cosmos DB client library for Java\n\n# Port of the Microsoft Azure Cosmos DB .NET Benchmark tool for Java\n\n## Getting started \n\n### Build the benchmarking tool\n\n```bash\ngit clone https://github.com/Azure/azure-sdk-for-java.git\ncd azure-sdk-for-java\ncd sdk/cosmos/\nmvn clean package -f pom.xml -DskipTests -Dgpg.skip -Ppackage-assembly\n```\n\nand then the package will be generated.\n\n## Examples\n```\njava -jar ./azure-cosmos-dotnet-benchmark-4.0.1-beta.1-jar-with-dependencies.jar -e {ACCOUNT_ENDPOINT} -k {ACCOUNT_KEY}\n```\n\nDry run targeting emulator will look like below\n```\njava -jar ./azure-cosmos-dotnet-benchmark-4.0.1-beta.1-jar-with-dependencies.jar -e \"https://localhost:8081\" -k \"C2y6yDjf5/R+ob0N8A7Cgv30VRDJIWEHLM+4QDU5DE2nQ9nDuVTqobD4b8mGGyPMbIZnqyMsEcaGQy67XIw/Jw==\"\n```\n\nRun targeting a production account\n```\nexport OSSProjectRef=True\njava -jar ./azure-cosmos-dotnet-benchmark-4.0.1-beta.1-jar-with-dependencies.jar -e {ACCOUNT_ENDPOINT} -k {ACCOUNT_KEY}\n```\n\n\nFor PerfRuns with reports (INTERNAL)\n```\nexport OSSProjectRef=True\nexport ACCOUNT_ENDPOINT=<ENDPOINT\nexport ACCOUNT_KEY=<KEY>\nexport RESULTS_PK=\"runs-summary\" #For test runs use different one\nexport PL=300\n\njava -jar ./azure-cosmos-dotnet-benchmark-4.0.1-beta.1-jar-with-dependencies.jar -e $ACCOUNT_ENDPOINT -k $ACCOUNT_KEY --publishResults --resultsPartitionKeyValue $RESULTS_PK -commitId $(git log -1 | head -n 1 | cut -d ' ' -f 2) --commitDate $(git log -1 --date=format:'%Y-%m-%d %H:%M:%S' | grep Date | cut -f 2- -d ':' | sed 's/^[ \\t]*//;s/[ \\t]*$//' | cut -f 1 -d ' ') --commitTime $(git log -1 --date=format:'%Y-%m-%d %H:%M:%S' | grep Date | cut -f 2- -d ':' | sed 's/^[ \\t]*//;s/[ \\t]*$//' | cut -f 2 -d ' ') --branchName $(git rev-parse --abbrev-ref HEAD)  --database testdb --container testcol --partitionKeyPath /id -n 500000 -w Insert -pl $PL \n```\n\n## Usage\n```\n>java -jar ./azure-cosmos-dotnet-benchmark-4.0.1-beta.1-jar-with-dependencies.jar\nCosmosBenchmark 1.0.0\nCopyright (C) 2019 CosmosBenchmark\n\n  -e                     Required. Cosmos account end point\n\n  -k                     Required. Cosmos account master key\n\n  --database             Database to use\n\n  --container            Collection to use\n\n  -t                     Collection throughput use\n\n  -n                     Number of documents to insert\n\n  --partitionKeyPath     Container partition key path\n\n  -pl                    Degree of parallism\n  \n  -w                     Workload name\n\n  --itemTemplateFile     Item template\n\n  --help                 Display this help screen.\n\n  --version              Display version information.\n```\n\n## Key concepts\nn/a\n\n## Troubleshooting\nn/a\n\n## Next steps\nn/a\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a\n[Contributor License Agreement (CLA)][cla] declaring that you have the right to, and actually do, grant us the rights\nto use your contribution.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate\nthe PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to\ndo this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq]\nor contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n[source_code]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/cosmos/azure-cosmos/src\n[cosmos_introduction]: https://docs.microsoft.com/azure/cosmos-db/\n[api_documentation]: https://azuresdkdocs.blob.core.windows.net/$web/java/azure-cosmos/latest/index.html\n[cosmos_docs]: https://docs.microsoft.com/azure/cosmos-db/introduction\n[jdk]: https://docs.microsoft.com/java/azure/java-supported-jdk-runtime?view=azure-java-stable\n[maven]: https://maven.apache.org/\n[cosmos_maven]: https://search.maven.org/artifact/com.azure/azure-cosmos\n[cosmos_maven_svg]: https://img.shields.io/maven-central/v/com.azure/azure-cosmos.svg\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n[azure_subscription]: https://azure.microsoft.com/free/\n[samples]: https://github.com/Azure-Samples/azure-cosmos-java-sql-api-samples\n[samples_readme]: https://github.com/Azure-Samples/azure-cosmos-java-sql-api-samples/blob/master/README.md\n[troubleshooting]: https://docs.microsoft.com/azure/cosmos-db/troubleshoot-java-sdk-v4-sql\n[perf_guide]: https://docs.microsoft.com/azure/cosmos-db/performance-tips-java-sdk-v4-sql?tabs=api-async\n[sql_api_query]: https://docs.microsoft.com/azure/cosmos-db/sql-api-sql-query\n[getting_started]: https://github.com/Azure-Samples/azure-cosmos-java-getting-started\n[quickstart]: https://docs.microsoft.com/azure/cosmos-db/create-sql-api-java?tabs=sync\n[project_reactor_schedulers]: https://projectreactor.io/docs/core/release/api/reactor/core/scheduler/Schedulers.html\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fcosmos%2Fazure-cosmos%2FREADME.png)\n",
        "repo_name": "cosmos/azure-cosmos-dotnet-benchmark",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/cosmos/azure-cosmos-dotnet-benchmark",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Encryption plugin library for Azure Cosmos DB Java SDK for Java\nThe Azure Cosmos Encryption Plugin is used for encrypting data with a user-provided key before saving into Cosmos DB and decrypting it when reading back from the database.\n\n[Source code][encryption_source_code] | [Package (Maven)][cosmos_encryption_maven] | [API reference documentation][encryption_api_documentation] | [Product documentation][cosmos_docs] |\n[Samples][getting_started_encryption]\n\n## Getting started\n### Include the package\n\n[//]: # ({x-version-update-start;com.azure:azure-cosmos-encryption;current})\n```xml\n<dependency>\n  <groupId>com.azure</groupId>\n  <artifactId>azure-cosmos-encryption</artifactId>\n  <version>2.2.0</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\nRefer to maven central for previous [releases][cosmos_encryption_maven]\n\nRefer to [javadocs][encryption_api_documentation] for more details on the package\n\n\n### Prerequisites\n\n- [Java Development Kit (JDK) with version 8 or above][jdk]\n- An active Azure account. If you don't have one, you can sign up for a [free account][azure_subscription]. Alternatively, you can use the [Azure Cosmos DB Emulator](https://docs.microsoft.com/azure/cosmos-db/local-emulator) for development and testing. As emulator HTTPS certificate is self-signed, you need to import its certificate to java trusted cert store as [explained here](https://docs.microsoft.com/azure/cosmos-db/local-emulator-export-ssl-certificates)\n- (Optional) SLF4J is a logging facade.\n- (Optional) [SLF4J binding](https://www.slf4j.org/manual.html) is used to associate a specific logging framework with SLF4J.\n- (Optional) [Maven][maven]\n\nSLF4J is only needed if you plan to use logging, please also download an SLF4J binding which will link the SLF4J API with the logging implementation of your choice. See the [SLF4J user manual](https://www.slf4j.org/manual.html) for more information.\n\nThe SDK provides Reactor Core-based async APIs. You can read more about Reactor Core and [Flux/Mono types here](https://projectreactor.io/docs/core/release/api/)\n\n## Key concepts\n\nThe Azure Cosmos Encryption Plugin is used for encrypting data with a user-provided key before saving into Cosmos DB and decrypting it when reading back from the database. Underneath it uses Azure Cosmos DB Java SDK which provides client-side logical representation to access the Azure Cosmos DB SQL API.\nA Cosmos DB account contains zero or more databases, a database (DB) contains zero or more containers, and a container contains zero or more items.\nYou may read more about databases, containers, and items [here](https://docs.microsoft.com/azure/cosmos-db/databases-containers-items).\nA few important properties are defined at the level of the container, among them are provisioned throughput and partition key.\n\n## Examples\nThe following section provides several code snippets covering some of the most common Cosmos Encryption API tasks, including:\n* [Create Cosmos Encryption Client](#create-cosmos-encryption-client \"Create Cosmos Encryption Client\")\n* [Create Cosmos Encryption Database](#create-cosmos-encryption-database \"Create Encryption Database\")\n* [Create Encryption Container](#create-cosmos-encryption-container \"Create Encryption Container\")\n* [CRUD operation on Items](#crud-operation-on-items \"CRUD operation on Items\")\n\n### Create Cosmos Encryption Client\n\n```java readme-sample-createCosmosEncryptionClient\n// Create a new CosmosEncryptionAsyncClient\nCosmosAsyncClient cosmosAsyncClient = new CosmosClientBuilder()\n    .endpoint(\"<YOUR ENDPOINT HERE>\")\n    .key(\"<YOUR KEY HERE>\")\n    .buildAsyncClient();\nKeyEncryptionKeyClientBuilder keyEncryptionKeyClientBuilder = new KeyEncryptionKeyClientBuilder().credential(tokenCredentials);\nCosmosEncryptionAsyncClient cosmosEncryptionAsyncClient =\n    new CosmosEncryptionClientBuilder().cosmosAsyncClient(cosmosAsyncClient).keyEncryptionKeyResolver(\n        keyEncryptionKeyClientBuilder).keyEncryptionKeyResolverName(CosmosEncryptionClientBuilder.KEY_RESOLVER_NAME_AZURE_KEY_VAULT).buildAsyncClient();\n```\n\n### Create Cosmos Encryption Database\nYou need to first create a Database and using the cosmos encryption client created in the previous example, you can create a cosmos encryption database proxy object like this:\n\n```java readme-sample-createCosmosEncryptionDatabase\n// This will create a database with the regular cosmosAsyncClient.\nCosmosEncryptionAsyncDatabase cosmosEncryptionAsyncDatabase = cosmosEncryptionAsyncClient.getCosmosAsyncClient()\n    .createDatabaseIfNotExists(\"<YOUR DATABASE NAME>\")\n    // TIP: Our APIs are Reactor Core based, so try to chain your calls\n    .map(databaseResponse ->\n        // Get a reference to the encryption database\n        // This will create a cosmos encryption database proxy object.\n        cosmosEncryptionAsyncClient.getCosmosEncryptionAsyncDatabase(databaseResponse.getProperties().getId()))\n    .block(); // Blocking for demo purposes (avoid doing this in production unless you must)\n```\n\n### Create Cosmos Encryption Container\nYou need to first create a Container with ClientEncryptionPolicy and using the cosmos encryption database object created in the previous example, you can create a cosmos encryption container proxy object like this:\n\n```java readme-sample-createCosmosEncryptionContainer\n//Create Client Encryption Key\nEncryptionKeyWrapMetadata metadata = new EncryptionKeyWrapMetadata(this.cosmosEncryptionAsyncClient.getKeyEncryptionKeyResolverName(), \"key\", \"tempmetadata\", EncryptionAlgorithm.RSA_OAEP.toString());\nCosmosEncryptionAsyncContainer cosmosEncryptionAsyncContainer = cosmosEncryptionAsyncDatabase\n    .createClientEncryptionKey(\"key\", CosmosEncryptionAlgorithm.AEAD_AES_256_CBC_HMAC_SHA256.getName(), metadata)\n    // TIP: Our APIs are Reactor Core based, so try to chain your calls\n    .then(Mono.defer(() -> {\n        //Create Encryption Container\n        ClientEncryptionIncludedPath includedPath = new ClientEncryptionIncludedPath();\n        includedPath.setClientEncryptionKeyId(\"key\");\n        includedPath.setPath(\"/sensitiveString\");\n        includedPath.setEncryptionType(CosmosEncryptionType.DETERMINISTIC.toString());\n        includedPath.setEncryptionAlgorithm(CosmosEncryptionAlgorithm.AEAD_AES_256_CBC_HMAC_SHA256.getName());\n\n        List<ClientEncryptionIncludedPath> paths = new ArrayList<>();\n        paths.add(includedPath);\n        ClientEncryptionPolicy clientEncryptionPolicy = new ClientEncryptionPolicy(paths);\n        CosmosContainerProperties properties = new CosmosContainerProperties(\"<YOUR CONTAINER NAME>\", \"/mypk\");\n        properties.setClientEncryptionPolicy(clientEncryptionPolicy);\n        return cosmosEncryptionAsyncDatabase.getCosmosAsyncDatabase().createContainer(properties);\n    }))\n    .map(containerResponse ->\n        // Create a reference to the encryption container\n        // This will create a cosmos encryption container proxy object.\n        cosmosEncryptionAsyncDatabase.getCosmosEncryptionAsyncContainer(containerResponse.getProperties().getId()))\n    .block(); // Blocking for demo purposes (avoid doing this in production unless you must)\n```\n### CRUD operation on Items\n\n```java readme-sample-crudOperationsOnItems\n// Create an item\nPojo pojo = new Pojo();\npojo.setSensitiveString(\"Sensitive Information need to be encrypted\");\ncosmosEncryptionAsyncContainer.createItem(pojo)\n    .flatMap(response -> {\n        System.out.println(\"Created item: \" + response.getItem());\n        // Read that item \ud83d\udc53\n        return cosmosEncryptionAsyncContainer.readItem(response.getItem().getId(),\n            new PartitionKey(response.getItem().getId()),\n            Pojo.class);\n    })\n    .flatMap(response -> {\n        System.out.println(\"Read item: \" + response.getItem());\n        // Replace that item \ud83d\udd01\n        Pojo p = response.getItem();\n        pojo.setSensitiveString(\"New Sensitive Information\");\n        return cosmosEncryptionAsyncContainer.replaceItem(p, response.getItem().getId(),\n            new PartitionKey(response.getItem().getId()));\n    })\n    // delete that item \ud83d\udca3\n    .flatMap(response -> cosmosEncryptionAsyncContainer.deleteItem(response.getItem().getId(),\n        new PartitionKey(response.getItem().getId())))\n    .subscribe();\n```\n\nWe have a get started sample app available [here][getting_started_encryption].\n\n\n## Troubleshooting\n\n### General\n\nAzure Cosmos DB is a fast and flexible distributed database that scales seamlessly with guaranteed latency and throughput.\nYou do not have to make major architecture changes or write complex code to scale your database with Azure Cosmos DB.\nScaling up and down is as easy as making a single API call or SDK method call.\nHowever, because Azure Cosmos DB is accessed via network calls there are client-side optimizations you can make to achieve peak performance when using Azure Cosmos DB Java SDK v4.\n\n- [Performance][perf_guide] guide covers these client-side optimizations.\n\n- [Troubleshooting Guide][troubleshooting] covers common issues, workarounds, diagnostic steps, and tools when you use Azure Cosmos DB Java SDK v4 with Azure Cosmos DB SQL API accounts.\n\n### Enable Client Logging\nAzure Cosmos DB Java SDK v4 uses SLF4j as the logging facade that supports logging into popular logging frameworks such as log4j and logback.\n\nFor example, if you want to use log4j as the logging framework, add the following libs in your Java classpath.\n\n```xml\n<dependency>\n  <groupId>org.slf4j</groupId>\n  <artifactId>slf4j-log4j12</artifactId>\n  <version>${slf4j.version}</version>\n</dependency>\n<dependency>\n  <groupId>log4j</groupId>\n  <artifactId>log4j</artifactId>\n  <version>${log4j.version}</version>\n</dependency>\n```\n\nAlso, add a log4j config.\n\n```properties\n# this is a sample log4j configuration\n\n# Set root logger level to INFO and its only appender to A1.\nlog4j.rootLogger=INFO, A1\n\nlog4j.category.com.azure.cosmos=INFO\n#log4j.category.io.netty=OFF\n#log4j.category.io.projectreactor=OFF\n# A1 is set to be a ConsoleAppender.\nlog4j.appender.A1=org.apache.log4j.ConsoleAppender\n\n# A1 uses PatternLayout.\nlog4j.appender.A1.layout=org.apache.log4j.PatternLayout\nlog4j.appender.A1.layout.ConversionPattern=%d %5X{pid} [%t] %-5p %c - %m%n\n```\n## Next steps\n\n- Cosmos encryption sample program is [here][getting_started_encryption]\n- Quick start of Cosmos DB core java sdk [quickstart][quickstart] - Building a java app to manage Cosmos DB SQL API data\n- [Read more about Azure Cosmos DB Service][cosmos_docs]\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a\n[Contributor License Agreement (CLA)][cla] declaring that you have the right to, and actually do, grant us the rights\nto use your contribution.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate\nthe PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to\ndo this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq]\nor contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n[encryption_source_code]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/cosmos/azure-cosmos-encryption/src\n[cosmos_introduction]: https://docs.microsoft.com/azure/cosmos-db/\n[api_documentation]: https://azuresdkdocs.blob.core.windows.net/$web/java/azure-cosmos/latest/index.html\n[encryption_api_documentation]: https://azuresdkdocs.blob.core.windows.net/$web/java/azure-cosmos-encryption/latest/index.html\n[cosmos_docs]: https://docs.microsoft.com/azure/cosmos-db/introduction\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[maven]: https://maven.apache.org/\n[cosmos_encryption_maven]: https://search.maven.org/artifact/com.azure/azure-cosmos-encryption\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n[azure_subscription]: https://azure.microsoft.com/free/\n[troubleshooting]: https://docs.microsoft.com/azure/cosmos-db/troubleshoot-java-sdk-v4-sql\n[perf_guide]: https://docs.microsoft.com/azure/cosmos-db/performance-tips-java-sdk-v4-sql?tabs=api-async\n[sql_api_query]: https://docs.microsoft.com/azure/cosmos-db/sql-api-sql-query\n[getting_started_encryption]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/cosmos/azure-cosmos-encryption/src/samples/java/com/azure/cosmos/encryption/\n[quickstart]: https://docs.microsoft.com/azure/cosmos-db/create-sql-api-java?tabs=sync\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fcosmos%2Fazure-cosmos-encryption%2FREADME.png)\n",
        "repo_name": "cosmos/azure-cosmos-encryption",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/cosmos/azure-cosmos-encryption",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Cosmos DB Client Library for Java\n\n## Example README\n\nExamples for Azure Cosmos DB Java SDK for SQL API have been moved to a separate [github repository](https://github.com/Azure-Samples/azure-cosmos-java-sql-api-samples)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fcosmos%2Fazure-cosmos-examples%2FREADME.png)\n",
        "repo_name": "cosmos/azure-cosmos-examples",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/cosmos/azure-cosmos-examples",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Cosmos DB OLTP Spark 3 connector\n\n## Azure Cosmos DB OLTP Spark 3 connector for Spark 3.2\n\n**Azure Cosmos DB OLTP Spark connector** provides Apache Spark support for Azure Cosmos DB using \nthe [SQL API][sql_api_query].\n[Azure Cosmos DB][cosmos_introduction] is a globally-distributed database service which allows \ndevelopers to work with data using a variety of standard APIs, such as SQL, MongoDB, Cassandra, Graph, and Table.\n\nIf you have any feedback or ideas on how to improve your experience please let us know here:\nhttps://github.com/Azure/azure-sdk-for-java/issues/new\n\n### Documentation\n\n- [Getting started](https://aka.ms/azure-cosmos-spark-3-quickstart)\n- [Catalog API](https://aka.ms/azure-cosmos-spark-3-catalog-api)\n- [Configuration Parameter Reference](https://aka.ms/azure-cosmos-spark-3-config)\n\n[//]: # (//TODO: moderakh add more sections)\n[//]: # (//TODO: moderakh Enable Client Logging)\n[//]: # (//TODO: moderakh Examples)\n[//]: # (//TODO: moderakh Next steps)\n[//]: # (//TODO: moderakh Key concepts)\n[//]: # (//TODO: moderakh Azure Cosmos DB Partition)\n[//]: # (//TODO: moderakh Troubleshooting)\n\n### Version Compatibility\n\n#### azure-cosmos-spark_3-1_2-12\n| Connector    | Supported Spark Versions | Minimum Java Version | Supported Scala Versions | Supported Databricks Runtimes |\n|--------------| ------------------------ | -------------------- | -----------------------  | ----------------------------- |\n| 4.19.0       | 3.1.1 - 3.1.2            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.18.2       | 3.1.1 - 3.1.2            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.18.1       | 3.1.1 - 3.1.2            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.18.0       | 3.1.1 - 3.1.2            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.17.2       | 3.1.1 - 3.1.2            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.17.0       | 3.1.1 - 3.1.2            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.16.0       | 3.1.1 - 3.1.2            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.15.0       | 3.1.1 - 3.1.2            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.14.1       | 3.1.1 - 3.1.2            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.14.0       | 3.1.1 - 3.1.2            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.13.1       | 3.1.1 - 3.1.2            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.13.0       | 3.1.1 - 3.1.2            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.12.2       | 3.1.1 - 3.1.2            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.12.1       | 3.1.1 - 3.1.2            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.12.0       | 3.1.1 - 3.1.2            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.11.2       | 3.1.1 - 3.1.2            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.11.1       | 3.1.1 - 3.1.2            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.11.0       | 3.1.1 - 3.1.2            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.10.1       | 3.1.1 - 3.1.2            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.10.0       | 3.1.1 - 3.1.2            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.9.0        | 3.1.1 - 3.1.2            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.8.0        | 3.1.1 - 3.1.2            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.7.0        | 3.1.1 - 3.1.2            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.6.2        | 3.1.1 - 3.1.2            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.6.1        | 3.1.1 - 3.1.2            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.6.0        | 3.1.1 - 3.1.2            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.5.3        | 3.1.1 - 3.1.2            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.5.2        | 3.1.1 - 3.1.2            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.5.1        | 3.1.1 - 3.1.2            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.5.0        | 3.1.1 - 3.1.2            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.4.2        | 3.1.1 - 3.1.2            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.4.1        | 3.1.1 - 3.1.2            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.4.0        | 3.1.1 - 3.1.2            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.3.1        | 3.1.1 - 3.1.2            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.3.0        | 3.1.1 - 3.1.2            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.2.0        | 3.1.1                    | 8                    | 2.12                     | 8.\\*                          |\n| 4.1.0        | 3.1.1                    | 8                    | 2.12                     | 8.\\*                          |\n| 4.0.0        | 3.1.1                    | 8                    | 2.12                     | 8.\\*                          |\n| 4.0.0-beta.3 | 3.1.1                    | 8                    | 2.12                     | 8.\\*                          |\n| 4.0.0-beta.2 | 3.1.1                    | 8                    | 2.12                     | 8.\\*                          |\n| 4.0.0-beta.1 | 3.1.1                    | 8                    | 2.12                     | 8.\\*                          |\n\n#### azure-cosmos-spark_3-2_2-12\n| Connector | Supported Spark Versions | Minimum Java Version | Supported Scala Versions | Supported Databricks Runtimes |\n|-----------| ------------------------ | -------------------- | -----------------------  | ----------------------------- |\n| 4.19.0    | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.18.2    | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.18.1    | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.18.0    | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.17.2    | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.17.0    | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.16.0    | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.15.0    | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.14.1    | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.14.0    | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.13.1    | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.13.0    | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.12.2    | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.12.1    | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.12.0    | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.11.2    | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.11.1    | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.11.0    | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.10.1    | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.10.0    | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.9.0     | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.8.0     | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.7.0     | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.6.2     | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.6.1     | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.6.0     | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n\n#### azure-cosmos-spark_3-3_2-12\n| Connector | Supported Spark Versions | Minimum Java Version | Supported Scala Versions | Supported Databricks Runtimes |\n|-----------|--------------------------| -------------------- | -----------------------  |-------------------------------|\n| 4.19.0    | 3.3.0                    | 8                    | 2.12                     | 11.\\*                         |\n| 4.18.2    | 3.3.0                    | 8                    | 2.12                     | 11.\\*                         |\n| 4.18.1    | 3.3.0                    | 8                    | 2.12                     | 11.\\*                         |\n| 4.18.0    | 3.3.0                    | 8                    | 2.12                     | 11.\\*                         |\n| 4.17.2    | 3.3.0                    | 8                    | 2.12                     | 11.\\*                         |\n| 4.17.0    | 3.3.0                    | 8                    | 2.12                     | 11.\\*                         |\n| 4.16.0    | 3.3.0                    | 8                    | 2.12                     | 11.\\*                         |\n| 4.15.0    | 3.3.0                    | 8                    | 2.12                     | 11.\\*                         |\n### Download\n\nYou can use the maven coordinate of the jar to auto install the Spark Connector to your Databricks Runtime 8 from Maven:\n`com.azure.cosmos.spark:azure-cosmos-spark_3-1_2-12:4.19.0`\n\nYou can also integrate against Cosmos DB Spark Connector in your SBT project:\n```scala\nlibraryDependencies += \"com.azure.cosmos.spark\" % \"azure-cosmos-spark_3-1_2-12\" % \"4.19.0\"\n```\n\nCosmos DB Spark Connector is available on [Maven Central Repo](https://search.maven.org/search?q=g:com.azure.cosmos.spark).\n\n#### General\n\nIf you encounter any bug, please file an issue [here](https://github.com/Azure/azure-sdk-for-java/issues/new).\n\nTo suggest a new feature or changes that could be made, file an issue the same way you would for a bug.\n\n### License\nThis project is under MIT license and uses and repackages other third party libraries as an uber jar.\nSee [NOTICE.txt](https://github.com/Azure/azure-sdk-for-java/blob/main/NOTICE.txt).\n\n### Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a\n[Contributor License Agreement (CLA)][cla] declaring that you have the right to, and actually do, grant us the rights\nto use your contribution.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate\nthe PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to\ndo this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq]\nor contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n[source_code]: src\n[cosmos_introduction]: https://docs.microsoft.com/azure/cosmos-db/\n[cosmos_docs]: https://docs.microsoft.com/azure/cosmos-db/introduction\n[jdk]: https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable\n[maven]: https://maven.apache.org/\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n[azure_subscription]: https://azure.microsoft.com/free/\n[samples]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/spring/azure-spring-data-cosmos/src/samples/java/com/azure/spring/data/cosmos\n[sql_api_query]: https://docs.microsoft.com/azure/cosmos-db/sql-api-sql-query\n[local_emulator]: https://docs.microsoft.com/azure/cosmos-db/local-emulator\n[local_emulator_export_ssl_certificates]: https://docs.microsoft.com/azure/cosmos-db/local-emulator-export-ssl-certificates\n[azure_cosmos_db_partition]: https://docs.microsoft.com/azure/cosmos-db/partition-data\n[sql_queries_in_cosmos]: https://docs.microsoft.com/azure/cosmos-db/tutorial-query-sql-api\n[sql_queries_getting_started]: https://docs.microsoft.com/azure/cosmos-db/sql-query-getting-started\n\n\n",
        "repo_name": "cosmos/azure-cosmos-spark_3-1_2-12",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/cosmos/azure-cosmos-spark_3-1_2-12",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Cosmos DB OLTP Spark 3 connector\n\n## Azure Cosmos DB OLTP Spark 3 connector for Spark 3.2\n**Azure Cosmos DB OLTP Spark connector** provides Apache Spark support for Azure Cosmos DB using \nthe [SQL API][sql_api_query].\n[Azure Cosmos DB][cosmos_introduction] is a globally-distributed database service which allows \ndevelopers to work with data using a variety of standard APIs, such as SQL, MongoDB, Cassandra, Graph, and Table.\n\nIf you have any feedback or ideas on how to improve your experience please let us know here:\nhttps://github.com/Azure/azure-sdk-for-java/issues/new\n\n### Documentation\n\n- [Getting started](https://aka.ms/azure-cosmos-spark-3-quickstart)\n- [Catalog API](https://aka.ms/azure-cosmos-spark-3-catalog-api)\n- [Configuration Parameter Reference](https://aka.ms/azure-cosmos-spark-3-config)\n\n[//]: # (//TODO: moderakh add more sections)\n[//]: # (//TODO: moderakh Enable Client Logging)\n[//]: # (//TODO: moderakh Examples)\n[//]: # (//TODO: moderakh Next steps)\n[//]: # (//TODO: moderakh Key concepts)\n[//]: # (//TODO: moderakh Azure Cosmos DB Partition)\n[//]: # (//TODO: moderakh Troubleshooting)\n\n### Version Compatibility\n\n#### azure-cosmos-spark_3-2_2-12\n| Connector | Supported Spark Versions | Minimum Java Version | Supported Scala Versions | Supported Databricks Runtimes |\n|-----------| ------------------------ | -------------------- | -----------------------  | ----------------------------- |\n| 4.19.0    | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.18.2    | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.18.1    | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.18.0    | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.17.2    | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.17.0    | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.16.0    | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.15.0    | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.14.1    | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.14.0    | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.13.1    | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.13.0    | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.12.2    | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.12.1    | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.12.0    | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.11.2    | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.11.1    | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.11.0    | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.10.1    | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.10.0    | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.9.0     | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.8.0     | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.7.0     | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.6.2     | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.6.1     | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.6.0     | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n\n#### azure-cosmos-spark_3-3_2-12\n| Connector | Supported Spark Versions | Minimum Java Version | Supported Scala Versions | Supported Databricks Runtimes |\n|-----------|--------------------------| -------------------- | -----------------------  |-------------------------------|\n| 4.19.0    | 3.3.0                    | 8                    | 2.12                     | 11.\\*                         |\n| 4.18.2    | 3.3.0                    | 8                    | 2.12                     | 11.\\*                         |\n| 4.18.1    | 3.3.0                    | 8                    | 2.12                     | 11.\\*                         |\n| 4.18.0    | 3.3.0                    | 8                    | 2.12                     | 11.\\*                         |\n| 4.17.2    | 3.3.0                    | 8                    | 2.12                     | 11.\\*                         |\n| 4.17.0    | 3.3.0                    | 8                    | 2.12                     | 11.\\*                         |\n| 4.16.0    | 3.3.0                    | 8                    | 2.12                     | 11.\\*                         |\n| 4.15.0    | 3.3.0                    | 8                    | 2.12                     | 11.\\*                         |\n\n#### azure-cosmos-spark_3-1_2-12\n| Connector    | Supported Spark Versions | Minimum Java Version | Supported Scala Versions | Supported Databricks Runtimes |\n|--------------| ------------------------ | -------------------- | -----------------------  | ----------------------------- |\n| 4.19.0       | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.18.2       | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.18.1       | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.18.0       | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.17.2       | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.17.0       | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.16.0       | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.15.0       | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.14.1       | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.14.0       | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.13.1       | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.13.0       | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.12.2       | 3.1.1 - 3.1.2            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.12.1       | 3.1.1 - 3.1.2            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.12.0       | 3.1.1 - 3.1.2            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.11.2       | 3.1.1 - 3.1.2            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.11.1       | 3.1.1 - 3.1.2            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.11.0       | 3.1.1 - 3.1.2            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.10.1       | 3.1.1 - 3.1.2            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.10.0       | 3.1.1 - 3.1.2            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.9.0        | 3.1.1 - 3.1.2            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.8.0        | 3.1.1 - 3.1.2            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.7.0        | 3.1.1 - 3.1.2            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.6.2        | 3.1.1 - 3.1.2            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.6.1        | 3.1.1 - 3.1.2            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.6.0        | 3.1.1 - 3.1.2            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.5.3        | 3.1.1 - 3.1.2            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.5.2        | 3.1.1 - 3.1.2            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.5.1        | 3.1.1 - 3.1.2            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.5.0        | 3.1.1 - 3.1.2            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.4.2        | 3.1.1 - 3.1.2            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.4.1        | 3.1.1 - 3.1.2            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.4.0        | 3.1.1 - 3.1.2            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.3.1        | 3.1.1 - 3.1.2            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.3.0        | 3.1.1 - 3.1.2            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.2.0        | 3.1.1                    | 8                    | 2.12                     | 8.\\*                          |\n| 4.1.0        | 3.1.1                    | 8                    | 2.12                     | 8.\\*                          |\n| 4.0.0        | 3.1.1                    | 8                    | 2.12                     | 8.\\*                          |\n| 4.0.0-beta.3 | 3.1.1                    | 8                    | 2.12                     | 8.\\*                          |\n| 4.0.0-beta.2 | 3.1.1                    | 8                    | 2.12                     | 8.\\*                          |\n| 4.0.0-beta.1 | 3.1.1                    | 8                    | 2.12                     | 8.\\*                          |\n\n### Download\n\nYou can use the maven coordinate of the jar to auto install the Spark Connector to your Databricks Runtime 10 from Maven:\n`com.azure.cosmos.spark:azure-cosmos-spark_3-2_2-12:4.19.0`\n\nYou can also integrate against Cosmos DB Spark Connector in your SBT project:\n```scala\nlibraryDependencies += \"com.azure.cosmos.spark\" % \"azure-cosmos-spark_3-2_2-12\" % \"4.19.0\"\n```\n\nCosmos DB Spark Connector is available on [Maven Central Repo](https://search.maven.org/search?q=g:com.azure.cosmos.spark).\n\n#### General\n\nIf you encounter any bug, please file an issue [here](https://github.com/Azure/azure-sdk-for-java/issues/new).\n\nTo suggest a new feature or changes that could be made, file an issue the same way you would for a bug.\n\n### License\nThis project is under MIT license and uses and repackages other third party libraries as an uber jar.\nSee [NOTICE.txt](https://github.com/Azure/azure-sdk-for-java/blob/main/NOTICE.txt).\n\n### Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a\n[Contributor License Agreement (CLA)][cla] declaring that you have the right to, and actually do, grant us the rights\nto use your contribution.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate\nthe PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to\ndo this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq]\nor contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n[source_code]: src\n[cosmos_introduction]: https://docs.microsoft.com/azure/cosmos-db/\n[cosmos_docs]: https://docs.microsoft.com/azure/cosmos-db/introduction\n[jdk]: https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable\n[maven]: https://maven.apache.org/\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n[azure_subscription]: https://azure.microsoft.com/free/\n[samples]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/spring/azure-spring-data-cosmos/src/samples/java/com/azure/spring/data/cosmos\n[sql_api_query]: https://docs.microsoft.com/azure/cosmos-db/sql-api-sql-query\n[local_emulator]: https://docs.microsoft.com/azure/cosmos-db/local-emulator\n[local_emulator_export_ssl_certificates]: https://docs.microsoft.com/azure/cosmos-db/local-emulator-export-ssl-certificates\n[azure_cosmos_db_partition]: https://docs.microsoft.com/azure/cosmos-db/partition-data\n[sql_queries_in_cosmos]: https://docs.microsoft.com/azure/cosmos-db/tutorial-query-sql-api\n[sql_queries_getting_started]: https://docs.microsoft.com/azure/cosmos-db/sql-query-getting-started\n\n\n",
        "repo_name": "cosmos/azure-cosmos-spark_3-2_2-12",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/cosmos/azure-cosmos-spark_3-2_2-12",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Cosmos DB OLTP Spark 3 connector\n\n## Azure Cosmos DB OLTP Spark 3 connector for Spark 3.3\n**Azure Cosmos DB OLTP Spark connector** provides Apache Spark support for Azure Cosmos DB using \nthe [SQL API][sql_api_query].\n[Azure Cosmos DB][cosmos_introduction] is a globally-distributed database service which allows \ndevelopers to work with data using a variety of standard APIs, such as SQL, MongoDB, Cassandra, Graph, and Table.\n\nIf you have any feedback or ideas on how to improve your experience please let us know here:\nhttps://github.com/Azure/azure-sdk-for-java/issues/new\n\n### Documentation\n\n- [Getting started](https://aka.ms/azure-cosmos-spark-3-quickstart)\n- [Catalog API](https://aka.ms/azure-cosmos-spark-3-catalog-api)\n- [Configuration Parameter Reference](https://aka.ms/azure-cosmos-spark-3-config)\n\n[//]: # (//TODO: add more sections)\n[//]: # (//TODO: Enable Client Logging)\n[//]: # (//TODO: Examples)\n[//]: # (//TODO: Next steps)\n[//]: # (//TODO: Key concepts)\n[//]: # (//TODO: Azure Cosmos DB Partition)\n[//]: # (//TODO: Troubleshooting)\n\n### Version Compatibility\n\n#### azure-cosmos-spark_3-3_2-12\n| Connector | Supported Spark Versions | Minimum Java Version | Supported Scala Versions | Supported Databricks Runtimes |\n|-----------|--------------------------| -------------------- | -----------------------  |-------------------------------|\n| 4.19.0    | 3.3.0                    | 8                    | 2.12                     | 11.\\*                         |\n| 4.18.2    | 3.3.0                    | 8                    | 2.12                     | 11.\\*                         |\n| 4.18.1    | 3.3.0                    | 8                    | 2.12                     | 11.\\*                         |\n| 4.18.0    | 3.3.0                    | 8                    | 2.12                     | 11.\\*                         |\n| 4.17.2    | 3.3.0                    | 8                    | 2.12                     | 11.\\*                         |\n| 4.17.0    | 3.3.0                    | 8                    | 2.12                     | 11.\\*                         |\n| 4.16.0    | 3.3.0                    | 8                    | 2.12                     | 11.\\*                         |\n| 4.15.0    | 3.3.0                    | 8                    | 2.12                     | 11.\\*                         |\n\n#### azure-cosmos-spark_3-2_2-12\n| Connector | Supported Spark Versions | Minimum Java Version | Supported Scala Versions | Supported Databricks Runtimes |\n|-----------| ------------------------ | -------------------- | -----------------------  | ----------------------------- |\n| 4.19.0    | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.18.2    | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.18.1    | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.18.0    | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.17.2    | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.17.0    | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.16.0    | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.15.0    | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.14.1    | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.14.0    | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.13.1    | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.13.0    | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.12.2    | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.12.1    | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.12.0    | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.11.2    | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.11.1    | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.11.0    | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.10.1    | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.10.0    | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.9.0     | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.8.0     | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.7.0     | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.6.2     | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.6.1     | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.6.0     | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n\n#### azure-cosmos-spark_3-1_2-12\n| Connector    | Supported Spark Versions | Minimum Java Version | Supported Scala Versions | Supported Databricks Runtimes |\n|--------------| ------------------------ | -------------------- | -----------------------  | ----------------------------- |\n| 4.19.0       | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.18.2       | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.18.1       | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.18.0       | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.17.2       | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.17.0       | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.16.0       | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.15.0       | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 10.\\*                         |\n| 4.14.1       | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.14.0       | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.13.1       | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.13.0       | 3.2.0 - 3.2.1            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.12.2       | 3.1.1 - 3.1.2            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.12.1       | 3.1.1 - 3.1.2            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.12.0       | 3.1.1 - 3.1.2            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.11.2       | 3.1.1 - 3.1.2            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.11.1       | 3.1.1 - 3.1.2            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.11.0       | 3.1.1 - 3.1.2            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.10.1       | 3.1.1 - 3.1.2            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.10.0       | 3.1.1 - 3.1.2            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.9.0        | 3.1.1 - 3.1.2            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.8.0        | 3.1.1 - 3.1.2            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.7.0        | 3.1.1 - 3.1.2            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.6.2        | 3.1.1 - 3.1.2            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.6.1        | 3.1.1 - 3.1.2            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.6.0        | 3.1.1 - 3.1.2            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.5.3        | 3.1.1 - 3.1.2            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.5.2        | 3.1.1 - 3.1.2            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.5.1        | 3.1.1 - 3.1.2            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.5.0        | 3.1.1 - 3.1.2            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.4.2        | 3.1.1 - 3.1.2            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.4.1        | 3.1.1 - 3.1.2            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.4.0        | 3.1.1 - 3.1.2            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.3.1        | 3.1.1 - 3.1.2            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.3.0        | 3.1.1 - 3.1.2            | 8                    | 2.12                     | 8.\\*, 9.\\*                    |\n| 4.2.0        | 3.1.1                    | 8                    | 2.12                     | 8.\\*                          |\n| 4.1.0        | 3.1.1                    | 8                    | 2.12                     | 8.\\*                          |\n| 4.0.0        | 3.1.1                    | 8                    | 2.12                     | 8.\\*                          |\n| 4.0.0-beta.3 | 3.1.1                    | 8                    | 2.12                     | 8.\\*                          |\n| 4.0.0-beta.2 | 3.1.1                    | 8                    | 2.12                     | 8.\\*                          |\n| 4.0.0-beta.1 | 3.1.1                    | 8                    | 2.12                     | 8.\\*                          |\n\n### Download\n\nYou can use the maven coordinate of the jar to auto install the Spark Connector to your Databricks Runtime 11 from Maven:\n`com.azure.cosmos.spark:azure-cosmos-spark_3-3_2-12:4.19.0`\n\nYou can also integrate against Cosmos DB Spark Connector in your SBT project:\n```scala\nlibraryDependencies += \"com.azure.cosmos.spark\" % \"azure-cosmos-spark_3-3_2-12\" % \"4.19.0\"\n```\n\nCosmos DB Spark Connector is available on [Maven Central Repo](https://search.maven.org/search?q=g:com.azure.cosmos.spark).\n\n#### General\n\nIf you encounter any bug, please file an issue [here](https://github.com/Azure/azure-sdk-for-java/issues/new).\n\nTo suggest a new feature or changes that could be made, file an issue the same way you would for a bug.\n\n### License\nThis project is under MIT license and uses and repackages other third party libraries as an uber jar.\nSee [NOTICE.txt](https://github.com/Azure/azure-sdk-for-java/blob/main/NOTICE.txt).\n\n### Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a\n[Contributor License Agreement (CLA)][cla] declaring that you have the right to, and actually do, grant us the rights\nto use your contribution.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate\nthe PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to\ndo this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq]\nor contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n[source_code]: src\n[cosmos_introduction]: https://docs.microsoft.com/azure/cosmos-db/\n[cosmos_docs]: https://docs.microsoft.com/azure/cosmos-db/introduction\n[jdk]: https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable\n[maven]: https://maven.apache.org/\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n[azure_subscription]: https://azure.microsoft.com/free/\n[samples]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/spring/azure-spring-data-cosmos/src/samples/java/com/azure/spring/data/cosmos\n[sql_api_query]: https://docs.microsoft.com/azure/cosmos-db/sql-api-sql-query\n[local_emulator]: https://docs.microsoft.com/azure/cosmos-db/local-emulator\n[local_emulator_export_ssl_certificates]: https://docs.microsoft.com/azure/cosmos-db/local-emulator-export-ssl-certificates\n[azure_cosmos_db_partition]: https://docs.microsoft.com/azure/cosmos-db/partition-data\n[sql_queries_in_cosmos]: https://docs.microsoft.com/azure/cosmos-db/tutorial-query-sql-api\n[sql_queries_getting_started]: https://docs.microsoft.com/azure/cosmos-db/sql-query-getting-started\n\n\n",
        "repo_name": "cosmos/azure-cosmos-spark_3-3_2-12",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/cosmos/azure-cosmos-spark_3-3_2-12",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "## Azure Cosmos DB OLTP Spark 3 connector shared source",
        "repo_name": "cosmos/azure-cosmos-spark_3_2-12",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/cosmos/azure-cosmos-spark_3_2-12",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Cosmos Test client library for Java\nLibrary containing core fault injection classes used to test Azure Cosmos DB SDK libraries.\n\n## Getting started\n### Include the package\n\n[//]: # ({x-version-update-start;com.azure:azure-cosmos-test;current})\n```xml\n<dependency>\n  <groupId>com.azure</groupId>\n  <artifactId>azure-cosmos-test</artifactId>\n  <version>1.0.0-beta.3</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n\n### Prerequisites\n\n- [Java Development Kit (JDK) with version 8 or above][jdk]\n- An active Azure account. If you don't have one, you can sign up for a [free account][azure_subscription]. Alternatively, you can use the [Azure Cosmos DB Emulator](https://docs.microsoft.com/azure/cosmos-db/local-emulator) for development and testing. As emulator HTTPS certificate is self-signed, you need to import its certificate to java trusted cert store as [explained here](https://docs.microsoft.com/azure/cosmos-db/local-emulator-export-ssl-certificates)\n- (Optional) SLF4J is a logging facade.\n- (Optional) [SLF4J binding](https://www.slf4j.org/manual.html) is used to associate a specific logging framework with SLF4J.\n- (Optional) [Maven][maven]\n\nSLF4J is only needed if you plan to use logging, please also download an SLF4J binding which will link the SLF4J API with the logging implementation of your choice. See the [SLF4J user manual](https://www.slf4j.org/manual.html) for more information.\n\nThe SDK provides Reactor Core-based async APIs. You can read more about Reactor Core and [Flux/Mono types here](https://projectreactor.io/docs/core/release/api/)\n\n## Key concepts\nThe Azure Cosmos Test library can be used to inject failure into Azure Cosmos SDK for Java.\n\n## Examples\nThe following section provides several code snippets covering how to create some of the most common failure injection scenario, including:\n* [High Channel Acquisition Scenario](#high-channel-acquisition-scenario \"High channel acquisition scenario\")\n* [Broken Connection Scenario](#broken-connection-scenario \"Broken connection scenario\")\n* [Server Return Gone Scenario](#server-return-gone-scenario \"Server gone scenario\")\n* [Random Connection Close Scenario](#random-connection-close-scenario \"Random connection close scenario\")\n\n### High Channel Acquisition Scenario\n\n```java readme-sample-highChannelAcquisitionScenario\nFaultInjectionRule serverConnectionDelayRule =\n    new FaultInjectionRuleBuilder(\"<YOUR RULE ID>\")\n        .condition(\n            new FaultInjectionConditionBuilder()\n                .operationType(FaultInjectionOperationType.CREATE_ITEM)\n                .build()\n        )\n        .result(\n            FaultInjectionResultBuilders\n                .getResultBuilder(FaultInjectionServerErrorType.CONNECTION_DELAY)\n                .delay(Duration.ofSeconds(6)) // default connection timeout is 5s\n                .times(1)\n                .build()\n        )\n        .duration(Duration.ofMinutes(5))\n        .build();\n\nCosmosFaultInjectionHelper.configureFaultInjectionRules(container, Arrays.asList(serverConnectionDelayRule)).block();\n```\n\n### Broken Connection Scenario\n```java readme-sample-brokenConnectionScenario\nFaultInjectionRule timeoutRule =\n    new FaultInjectionRuleBuilder(\"<YOUR RULE ID>\")\n        .condition(\n            new FaultInjectionConditionBuilder()\n                .operationType(FaultInjectionOperationType.READ_ITEM)\n                .build()\n        )\n        .result(\n            FaultInjectionResultBuilders\n                .getResultBuilder(FaultInjectionServerErrorType.RESPONSE_DELAY)\n                .times(1)\n                .delay(Duration.ofSeconds(6)) // the default time out is 5s\n                .build()\n        )\n        .duration(Duration.ofMinutes(5))\n        .build();\n\nCosmosFaultInjectionHelper.configureFaultInjectionRules(container, Arrays.asList(timeoutRule)).block();\n```\n\n### Server Return Gone Scenario\n```java readme-sample-serverReturnGoneScenario\nFaultInjectionRule serverErrorRule =\n    new FaultInjectionRuleBuilder(\"<YOUR RULE ID>\")\n        .condition(\n            new FaultInjectionConditionBuilder()\n                .operationType(FaultInjectionOperationType.READ_ITEM)\n                .build()\n        )\n        .result(\n            FaultInjectionResultBuilders\n                .getResultBuilder(FaultInjectionServerErrorType.GONE)\n                .times(1)\n                .build()\n        )\n        .duration(Duration.ofMinutes(5))\n        .build();\n\nCosmosFaultInjectionHelper.configureFaultInjectionRules(container, Arrays.asList(serverErrorRule)).block();\n```\n### Random Connection Close Scenario\n\n```java readme-sample-randomConnectionCloseScenario\nFaultInjectionRule connectionErrorRule =\n    new FaultInjectionRuleBuilder(\"<YOUR RULE ID>\")\n        .condition(\n            new FaultInjectionConditionBuilder()\n                .operationType(FaultInjectionOperationType.CREATE_ITEM)\n                .endpoints(new FaultInjectionEndpointBuilder(FeedRange.forLogicalPartition(new PartitionKey(\"<YOUR PARTITION KEY>\"))).build())\n                .build()\n        )\n        .result(\n            FaultInjectionResultBuilders\n                .getResultBuilder(FaultInjectionConnectionErrorType.CONNECTION_CLOSE)\n                .interval(Duration.ofSeconds(1))\n                .threshold(1.0)\n                .build()\n        )\n        .duration(Duration.ofSeconds(2))\n        .build();\n\nCosmosFaultInjectionHelper.configureFaultInjectionRules(container, Arrays.asList(connectionErrorRule)).block();\n```\n\n## Troubleshooting\n\n### General\n\nAzure Cosmos DB is a fast and flexible distributed database that scales seamlessly with guaranteed latency and throughput.\nYou do not have to make major architecture changes or write complex code to scale your database with Azure Cosmos DB.\nScaling up and down is as easy as making a single API call or SDK method call.\nHowever, because Azure Cosmos DB is accessed via network calls there are client-side optimizations you can make to achieve peak performance when using Azure Cosmos DB Java SDK v4.\n\n- [Performance][perf_guide] guide covers these client-side optimizations.\n\n- [Troubleshooting Guide][troubleshooting] covers common issues, workarounds, diagnostic steps, and tools when you use Azure Cosmos DB Java SDK v4 with Azure Cosmos DB SQL API accounts.\n\n### Enable Client Logging\n\n## Next steps\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a\n[Contributor License Agreement (CLA)][cla] declaring that you have the right to, and actually do, grant us the rights\nto use your contribution.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate\nthe PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to\ndo this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq]\nor contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n[cosmos_introduction]: https://docs.microsoft.com/azure/cosmos-db/\n[api_documentation]: https://azuresdkdocs.blob.core.windows.net/$web/java/azure-cosmos/latest/index.html\n[cosmos_docs]: https://docs.microsoft.com/azure/cosmos-db/introduction\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[maven]: https://maven.apache.org/\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n[azure_subscription]: https://azure.microsoft.com/free/\n[troubleshooting]: https://docs.microsoft.com/azure/cosmos-db/troubleshoot-java-sdk-v4-sql\n[perf_guide]: https://docs.microsoft.com/azure/cosmos-db/performance-tips-java-sdk-v4-sql?tabs=api-async\n[quickstart]: https://docs.microsoft.com/azure/cosmos-db/create-sql-api-java?tabs=sync\n",
        "repo_name": "cosmos/azure-cosmos-test",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/cosmos/azure-cosmos-test",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Cosmos Tests client library for Java\nLibrary containing tests for azure-cosmos and azure-cosmos-test libraries. Only used internally  as home for tests to allow using failure injection even in the unit- and integration tests of azure-cosmos.\n\n## Getting started\nn/a\n\n## Key concepts\nn/a\n\n## Examples\nn/a\n\n## Troubleshooting\nn/a\n\n## Next steps\nn/a\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a\n[Contributor License Agreement (CLA)][cla] declaring that you have the right to, and actually do, grant us the rights\nto use your contribution.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate\nthe PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to\ndo this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq]\nor contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n[cosmos_introduction]: https://docs.microsoft.com/azure/cosmos-db/\n[api_documentation]: https://azuresdkdocs.blob.core.windows.net/$web/java/azure-cosmos/latest/index.html\n[cosmos_docs]: https://docs.microsoft.com/azure/cosmos-db/introduction\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[maven]: https://maven.apache.org/\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n[azure_subscription]: https://azure.microsoft.com/free/\n[troubleshooting]: https://docs.microsoft.com/azure/cosmos-db/troubleshoot-java-sdk-v4-sql\n[perf_guide]: https://docs.microsoft.com/azure/cosmos-db/performance-tips-java-sdk-v4-sql?tabs=api-async\n[quickstart]: https://docs.microsoft.com/azure/cosmos-db/create-sql-api-java?tabs=sync\n",
        "repo_name": "cosmos/azure-cosmos-tests",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/cosmos/azure-cosmos-tests",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Cosmos DB Client Library for Java\n\nAzure Cosmos DB is Microsoft\u2019s globally distributed, multi-model database service for operational and analytics workloads. It offers multi-mastering feature by automatically scaling throughput, compute, and storage.\nThis project provides SDK library in Java for interacting with [SQL API][sql_api_query] of [Azure Cosmos DB Database Service][cosmos_introduction].\n\n[Source code][source_code] | [Package (Maven)][cosmos_maven] | [API reference documentation][api_documentation] | [Product documentation][cosmos_docs] |\n[Samples][samples]\n\n## Getting started\n### Include the package\n#### Include the BOM file\n\nPlease include the azure-sdk-bom to your project to take dependency on GA version of the library. In the following snippet, replace the {bom_version_to_target} placeholder with the version number.\nTo learn more about the BOM, see the [AZURE SDK BOM README](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/boms/azure-sdk-bom/README.md).\n\n```xml\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>com.azure</groupId>\n            <artifactId>azure-sdk-bom</artifactId>\n            <version>{bom_version_to_target}</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n```\nand then include the direct dependency in the dependencies section without the version tag.\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-cosmos</artifactId>\n  </dependency>\n</dependencies>\n```\n\n#### Include direct dependency\nIf you want to take dependency on a particular version of the library that is not present in the BOM,\nadd the direct dependency to your project as follows.\n[//]: # ({x-version-update-start;com.azure:azure-cosmos;current})\n```xml\n<dependency>\n  <groupId>com.azure</groupId>\n  <artifactId>azure-cosmos</artifactId>\n  <version>4.46.0</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\nRefer to maven central for previous [releases][cosmos_maven]\n\nRefer to [javadocs][api_documentation] for more details on the package\n\n### Prerequisites\n\n- [Java Development Kit (JDK) with version 8 or above][jdk]\n- An active Azure account. If you don't have one, you can sign up for a [free account][azure_subscription]. Alternatively, you can use the [Azure Cosmos DB Emulator](https://docs.microsoft.com/azure/cosmos-db/local-emulator) for development and testing. As emulator https certificate is self signed, you need to import its certificate to java trusted cert store as [explained here](https://docs.microsoft.com/azure/cosmos-db/local-emulator-export-ssl-certificates)\n- (Optional) SLF4J is a logging facade.\n- (Optional) [SLF4J binding](https://www.slf4j.org/manual.html) is used to associate a specific logging framework with SLF4J.\n- (Optional) [Maven][maven]\n\nSLF4J is only needed if you plan to use logging, please also download an SLF4J binding which will link the SLF4J API with the logging implementation of your choice. See the [SLF4J user manual](https://www.slf4j.org/manual.html) for more information.\n\nThe SDK provides Reactor Core based async APIs. You can read more about Reactor Core and [Flux/Mono types here](https://projectreactor.io/docs/core/release/api/)\n\n### Authenticate the client\n\nIn order to interact with the Azure Cosmos DB service you'll need to create an instance of the Cosmos Client class. To make this possible you will need an url and key of the Azure Cosmos DB service.\n\nThe SDK provides two clients.\n1. `CosmosAsyncClient` for operations using asynchronous APIs.\n2. `CosmosClient` for operations using synchronous (blocking) APIs.\n\n#### Create CosmosAsyncClient\n```java readme-sample-createCosmosAsyncClient\nCosmosAsyncClient cosmosAsyncClient = new CosmosClientBuilder()\n    .endpoint(serviceEndpoint)\n    .key(key)\n    .buildAsyncClient();\n```\n\n#### Create CosmosClient\n```java readme-sample-createCosmosClient\nCosmosClient cosmosClient = new CosmosClientBuilder()\n    .endpoint(serviceEndpoint)\n    .key(key)\n    .buildClient();\n```\n\n## Key Concepts\n\nAzure Cosmos DB Java SDK provides client-side logical representation to access the Azure Cosmos DB SQL API.\nA Cosmos DB account contains zero or more databases, a database (DB) contains zero or more containers, and a container contains zero or more items.\nYou may read more about databases, containers and items [here](https://docs.microsoft.com/azure/cosmos-db/databases-containers-items).\nA few important properties defined at the level of the container, among them are provisioned throughput and partition key.\n\n### Global Distribution\n- Azure Cosmos DB is a globally distributed database service that's designed to provide low latency, elastic scalability of throughput, well-defined semantics for data consistency, and high availability.\nIn short, if your application needs guaranteed fast response time anywhere in the world, if it's required to be always online, and needs unlimited and elastic scalability of throughput and storage, you should build your application on Azure Cosmos DB.\nYou may read more about global distribution [here](https://docs.microsoft.com/azure/cosmos-db/distribute-data-globally).\n\n### Throughput Provisioning\n- Azure Cosmos DB allows you to set provisioned throughput on your databases and containers.\nThere are two types of provisioned throughput, standard (manual) or autoscale. Provisioned throughput can be selected at per-container granularity or per-database granularity, however container-level throughput specification is typically preferred.\nYou may read more about throughput provisioning [here](https://docs.microsoft.com/azure/cosmos-db/set-throughput).\n\n### Request Units (RUs)\n- Azure Cosmos DB supports many APIs, such as SQL, MongoDB, Cassandra, Gremlin, and Table.\nEach API has its own set of database operations. These operations range from simple point reads and writes to complex queries.\nEach database operation consumes system resources based on the complexity of the operation. The cost of all database operations is normalized by Azure Cosmos DB and is expressed by Request Units (or RUs, for short).\nYou can think of RUs per second as the currency for throughput. RUs per second is a rate-based currency. It abstracts the system resources such as CPU, IOPS, and memory that are required to perform the database operations supported by Azure Cosmos DB.\nYou may read more about request units [here](https://docs.microsoft.com/azure/cosmos-db/request-units).\n\n### Partitioning\n- As items are inserted into a Cosmos DB container, the database grows horizontally by adding more storage and compute to handle requests.\nStorage and compute capacity are added in discrete units known as partitions, and you must choose one field in your documents to be the partition key which maps each document to a partition.\nThe way partitions are managed is that each partition is assigned a roughly equal slice out of the range of partition key values; therefore you are advised to choose a partition key which is relatively random or evenly-distributed.\nOtherwise, some partitions will see substantially more requests (hot partition) while other partitions see substantially fewer requests (cold partition), and this is to be avoided.\nYou may learn more about partitioning [here](https://docs.microsoft.com/azure/cosmos-db/partitioning-overview).\n\n## Examples\n\nThe following section provides several code snippets covering some of the most common Cosmos DB SQL API tasks, including:\n* [Create Cosmos Client](#create-cosmos-client \"Create Cosmos Client\")\n* [Create Database](#create-database \"Create Database\")\n* [Create Container](#create-container \"Create Container\")\n* [CRUD operation on Items](#crud-operation-on-items \"CRUD operation on Items\")\n\n### Create Cosmos Client\n```java readme-sample-createCosmosClient2\n// Create a new CosmosAsyncClient via the CosmosClientBuilder\n// It only requires endpoint and key, but other useful settings are available\nCosmosAsyncClient cosmosAsyncClient = new CosmosClientBuilder()\n    .endpoint(\"<YOUR ENDPOINT HERE>\")\n    .key(\"<YOUR KEY HERE>\")\n    .buildAsyncClient();\n\n// Create a new CosmosClient via the CosmosClientBuilder\nCosmosClient cosmosClient = new CosmosClientBuilder()\n    .endpoint(\"<YOUR ENDPOINT HERE>\")\n    .key(\"<YOUR KEY HERE>\")\n    .buildClient();\n\n// Create a new CosmosClient with customizations\ncosmosClient = new CosmosClientBuilder()\n    .endpoint(serviceEndpoint)\n    .key(key)\n    .directMode(directConnectionConfig, gatewayConnectionConfig)\n    .consistencyLevel(ConsistencyLevel.SESSION)\n    .connectionSharingAcrossClientsEnabled(true)\n    .contentResponseOnWriteEnabled(true)\n    .userAgentSuffix(\"my-application1-client\")\n    .preferredRegions(Arrays.asList(\"West US\", \"East US\"))\n    .buildClient();\n```\n\n### Create Database\nUsing any one of the clients created in previous example, you can create a database like this:\n\n```java readme-sample-createDatabase\n// Get a reference to the container\n// This will create (or read) a database and its container.\ncosmosAsyncClient.createDatabaseIfNotExists(\"<YOUR DATABASE NAME>\")\n    // TIP: Our APIs are Reactor Core based, so try to chain your calls\n    .map(databaseResponse -> cosmosAsyncClient.getDatabase(databaseResponse.getProperties().getId()))\n    .subscribe(database -> System.out.printf(\"Created database '%s'.%n\", database.getId()));\n```\n\n### Create Container\nUsing the above created database, you can chain another operation to it for creating a container like this:\n\n```java readme-sample-createContainer\ncosmosAsyncClient.createDatabaseIfNotExists(\"<YOUR DATABASE NAME>\")\n    // TIP: Our APIs are Reactor Core based, so try to chain your calls\n    .flatMap(databaseResponse -> {\n        String databaseId = databaseResponse.getProperties().getId();\n        return cosmosAsyncClient.getDatabase(databaseId)\n            // Create Container\n            .createContainerIfNotExists(\"<YOUR CONTAINER NAME>\", \"/id\")\n            .map(containerResponse -> cosmosAsyncClient.getDatabase(databaseId)\n                .getContainer(containerResponse.getProperties().getId()));\n    })\n    .subscribe(container -> System.out.printf(\"Created container '%s' in database '%s'.%n\",\n        container.getId(), container.getDatabase().getId()));\n```\n### CRUD operation on Items\n\n```java readme-sample-crudOperationOnItems\n// Create an item\ncosmosAsyncContainer.createItem(new Passenger(\"carla.davis@outlook.com\", \"Carla Davis\", \"SEA\", \"IND\"))\n    .flatMap(response -> {\n        System.out.println(\"Created item: \" + response.getItem());\n        // Read that item \ud83d\udc53\n        return cosmosAsyncContainer.readItem(response.getItem().getId(),\n            new PartitionKey(response.getItem().getId()), Passenger.class);\n    })\n    .flatMap(response -> {\n        System.out.println(\"Read item: \" + response.getItem());\n        // Replace that item \ud83d\udd01\n        Passenger p = response.getItem();\n        p.setDestination(\"SFO\");\n        return cosmosAsyncContainer.replaceItem(p, response.getItem().getId(),\n            new PartitionKey(response.getItem().getId()));\n    })\n    // delete that item \ud83d\udca3\n    .flatMap(response -> cosmosAsyncContainer.deleteItem(response.getItem().getId(),\n        new PartitionKey(response.getItem().getId())))\n    .block(); // Blocking for demo purposes (avoid doing this in production unless you must)\n// ...\n```\n\nWe have a get started sample app available [here][getting_started].\n\nAlso, we have more examples [examples project][samples].\n\n## Troubleshooting\n\n### General\n\nAzure Cosmos DB is a fast and flexible distributed database that scales seamlessly with guaranteed latency and throughput.\nYou do not have to make major architecture changes or write complex code to scale your database with Azure Cosmos DB.\nScaling up and down is as easy as making a single API call or SDK method call.\nHowever, because Azure Cosmos DB is accessed via network calls there are client-side optimizations you can make to achieve peak performance when using Azure Cosmos DB Java SDK v4.\n\n- [Performance][perf_guide] guide covers these client-side optimizations.\n\n- [Troubleshooting guide][troubleshooting] covers common issues, workarounds, diagnostic steps, and tools when you use Azure Cosmos DB Java SDK v4 with Azure Cosmos DB SQL API accounts.\n\n### Enable Client Logging\nAzure Cosmos DB Java SDK v4 uses SLF4j as the logging facade that supports logging into popular logging frameworks such as log4j and logback.\n\nFor example, if you want to use log4j as the logging framework, add the following libs in your Java classpath.\n\n```xml\n<dependency>\n  <groupId>org.slf4j</groupId>\n  <artifactId>slf4j-log4j12</artifactId>\n  <version>${slf4j.version}</version>\n</dependency>\n<dependency>\n  <groupId>log4j</groupId>\n  <artifactId>log4j</artifactId>\n  <version>${log4j.version}</version>\n</dependency>\n```\n\nAlso add a log4j config.\n\n```properties\n# this is a sample log4j configuration\n\n# Set root logger level to INFO and its only appender to A1.\nlog4j.rootLogger=INFO, A1\n\nlog4j.category.com.azure.cosmos=INFO\n#log4j.category.io.netty=OFF\n#log4j.category.io.projectreactor=OFF\n# A1 is set to be a ConsoleAppender.\nlog4j.appender.A1=org.apache.log4j.ConsoleAppender\n\n# A1 uses PatternLayout.\nlog4j.appender.A1.layout=org.apache.log4j.PatternLayout\nlog4j.appender.A1.layout.ConversionPattern=%d %5X{pid} [%t] %-5p %c - %m%n\n```\n\n## Next Steps\n\n- Samples are explained in detail [here][samples_readme]\n- Go through [quickstart][quickstart] - Building a java app to manage Cosmos DB SQL API data\n- [Read more about Azure Cosmos DB Service][cosmos_docs]\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a\n[Contributor License Agreement (CLA)][cla] declaring that you have the right to, and actually do, grant us the rights\nto use your contribution.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate\nthe PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to\ndo this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq]\nor contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n[source_code]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/cosmos/azure-cosmos/src\n[cosmos_introduction]: https://docs.microsoft.com/azure/cosmos-db/\n[api_documentation]: https://azuresdkdocs.blob.core.windows.net/$web/java/azure-cosmos/latest/index.html\n[cosmos_docs]: https://docs.microsoft.com/azure/cosmos-db/introduction\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[slf4j]: http://www.slf4j.org/\n[maven]: https://maven.apache.org/\n[cosmos_maven]: https://search.maven.org/artifact/com.azure/azure-cosmos\n[cosmos_maven_svg]: https://img.shields.io/maven-central/v/com.azure/azure-cosmos.svg\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n[azure_subscription]: https://azure.microsoft.com/free/\n[samples]: https://github.com/Azure-Samples/azure-cosmos-java-sql-api-samples\n[samples_readme]: https://github.com/Azure-Samples/azure-cosmos-java-sql-api-samples/blob/master/README.md\n[troubleshooting]: https://docs.microsoft.com/azure/cosmos-db/troubleshoot-java-sdk-v4-sql\n[perf_guide]: https://docs.microsoft.com/azure/cosmos-db/performance-tips-java-sdk-v4-sql?tabs=api-async\n[sql_api_query]: https://docs.microsoft.com/azure/cosmos-db/sql-api-sql-query\n[getting_started]: https://github.com/Azure-Samples/azure-cosmos-java-getting-started\n[quickstart]: https://docs.microsoft.com/azure/cosmos-db/create-sql-api-java?tabs=sync\n[project_reactor_schedulers]: https://projectreactor.io/docs/core/release/api/reactor/core/scheduler/Schedulers.html\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fcosmos%2Fazure-cosmos%2FREADME.png)\n",
        "repo_name": "cosmos/azure-cosmos",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/cosmos/azure-cosmos",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "\n### FAQ\n\n#### I am getting this error:\n\n- ``Request Rate too Large`` Request too large is an error from service indicating that you temporarily went beyond the provisioned throughput. You should retry after the provided\n``DocumentClientException#getRetryAfterInMilliseconds()``.\n\n- ``CollectionPoolExhausted`` this is a SDK side error indicating that the SDK's connection pool is saturated. Consider to retry later, increase the connection pool size or use a semaphore to throttle your workload.\n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fcosmos%2Ffaq%2FREADME.png)\n",
        "repo_name": "cosmos/faq",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/cosmos/faq",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager CosmosDBForPostgreSql client library for Java\n\nAzure Resource Manager CosmosDBForPostgreSql client library for Java.\n\nThis package contains Microsoft Azure SDK for CosmosDBForPostgreSql Management SDK. Azure Cosmos DB for PostgreSQL database service resource provider REST APIs. Package tag package-2022-11-08. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-cosmosdbforpostgresql;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-cosmosdbforpostgresql</artifactId>\n    <version>1.0.0-beta.1</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nCosmosDBForPostgreSqlManager manager = CosmosDBForPostgreSqlManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/cosmosdbforpostgresql/azure-resourcemanager-cosmosdbforpostgresql/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "cosmosdbforpostgresql/azure-resourcemanager-cosmosdbforpostgresql",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/cosmosdbforpostgresql/azure-resourcemanager-cosmosdbforpostgresql",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager CostManagement client library for Java\n\nAzure Resource Manager CostManagement client library for Java.\n\nThis package contains Microsoft Azure SDK for CostManagement Management SDK. CostManagement management client provides access to CostManagement resources for Azure Enterprise Subscriptions. Package tag package-2022-10. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-costmanagement;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-costmanagement</artifactId>\n    <version>1.0.0-beta.6</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nCostManagementManager manager = CostManagementManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/costmanagement/azure-resourcemanager-costmanagement/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "costmanagement/azure-resourcemanager-costmanagement",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/costmanagement/azure-resourcemanager-costmanagement",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager CustomerInsights client library for Java\n\nAzure Resource Manager CustomerInsights client library for Java.\n\nThis package contains Microsoft Azure SDK for CustomerInsights Management SDK. The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service. Package tag package-2017-04. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-customerinsights;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-customerinsights</artifactId>\n    <version>1.0.0-beta.2</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nCustomerInsightsManager manager = CustomerInsightsManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/customerinsights/azure-resourcemanager-customerinsights/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "customerinsights/azure-resourcemanager-customerinsights",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/customerinsights/azure-resourcemanager-customerinsights",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager Dashboard client library for Java\n\nAzure Resource Manager Dashboard client library for Java.\n\nThis package contains Microsoft Azure SDK for Dashboard Management SDK. The Microsoft.Dashboard Rest API spec. Package tag package-2022-08-01. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-dashboard;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-dashboard</artifactId>\n    <version>1.0.0-beta.2</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nDashboardManager manager = DashboardManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/dashboard/azure-resourcemanager-dashboard/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n",
        "repo_name": "dashboard/azure-resourcemanager-dashboard",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/dashboard/azure-resourcemanager-dashboard",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager DataBox client library for Java\n\nAzure Resource Manager DataBox client library for Java.\n\nThis package contains Microsoft Azure SDK for DataBox Management SDK.  Package tag package-2022-12. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-databox;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-databox</artifactId>\n    <version>1.0.0-beta.3</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nDataBoxManager manager = DataBoxManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/databox/azure-resourcemanager-databox/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "databox/azure-resourcemanager-databox",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/databox/azure-resourcemanager-databox",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager DataBoxEdge client library for Java\n\nAzure Resource Manager DataBoxEdge client library for Java.\n\nThis package contains Microsoft Azure SDK for DataBoxEdge Management SDK.  Package tag package-2019-08. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-databoxedge;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-databoxedge</artifactId>\n    <version>1.0.0-beta.2</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nDataBoxEdgeManager manager = DataBoxEdgeManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/databoxedge/azure-resourcemanager-databoxedge/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "databoxedge/azure-resourcemanager-databoxedge",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/databoxedge/azure-resourcemanager-databoxedge",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager AzureDatabricks client library for Java\n\nAzure Resource Manager AzureDatabricks client library for Java.\n\nThis package contains Microsoft Azure SDK for AzureDatabricks Management SDK. The Microsoft Azure management APIs allow end users to operate on Azure Databricks Workspace / Access Connector resources. Package tag package-2023-05-01. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-databricks;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-databricks</artifactId>\n    <version>1.0.0-beta.4</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nAzureDatabricksManager manager = AzureDatabricksManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n```java\nworkspace = databricksManager.workspaces().define(workspaceName)\n    .withRegion(REGION)\n    .withExistingResourceGroup(resourceGroupName)\n    .withManagedResourceGroupId(managedResourceGroupId)\n    .withSku(new Sku().withName(\"standard\"))\n    .create();\n```\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/databricks/azure-resourcemanager-databricks/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "databricks/azure-resourcemanager-databricks",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/databricks/azure-resourcemanager-databricks",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager MicrosoftDatadog client library for Java\n\nAzure Resource Manager MicrosoftDatadog client library for Java.\n\nThis package contains Microsoft Azure SDK for MicrosoftDatadog Management SDK.  Package tag package-2021-03. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-datadog;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-datadog</artifactId>\n    <version>1.0.0-beta.4</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nMicrosoftDatadogManager manager = MicrosoftDatadogManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/datadog/azure-resourcemanager-datadog/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "datadog/azure-resourcemanager-datadog",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/datadog/azure-resourcemanager-datadog",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager DataFactory client library for Java\n\nAzure Resource Manager DataFactory client library for Java.\n\nThis package contains Microsoft Azure SDK for DataFactory Management SDK. The Azure Data Factory V2 management API provides a RESTful set of web services that interact with Azure Data Factory V2 services. Package tag package-2018-06. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-datafactory;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-datafactory</artifactId>\n    <version>1.0.0-beta.22</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nDataFactoryManager manager = DataFactoryManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n```java\n// storage account\nStorageAccount storageAccount = storageManager.storageAccounts().define(STORAGE_ACCOUNT)\n    .withRegion(REGION)\n    .withExistingResourceGroup(resourceGroup)\n    .create();\nfinal String storageAccountKey = storageAccount.getKeys().iterator().next().value();\nfinal String connectionString = getStorageConnectionString(STORAGE_ACCOUNT, storageAccountKey, storageManager.environment());\n\n// container\nfinal String containerName = \"adf\";\nstorageManager.blobContainers().defineContainer(containerName)\n    .withExistingStorageAccount(resourceGroup, STORAGE_ACCOUNT)\n    .withPublicAccess(PublicAccess.NONE)\n    .create();\n\n// blob as input\nBlobClient blobClient = new BlobClientBuilder()\n    .connectionString(connectionString)\n    .containerName(containerName)\n    .blobName(\"input/data.txt\")\n    .buildClient();\nblobClient.upload(BinaryData.fromString(\"data\"));\n\n// data factory\nFactory dataFactory = manager.factories().define(DATA_FACTORY)\n    .withRegion(REGION)\n    .withExistingResourceGroup(resourceGroup)\n    .create();\n\n// linked service\nfinal Map<String, String> connectionStringProperty = new HashMap<>();\nconnectionStringProperty.put(\"type\", \"SecureString\");\nconnectionStringProperty.put(\"value\", connectionString);\n\nfinal String linkedServiceName = \"LinkedService\";\nmanager.linkedServices().define(linkedServiceName)\n    .withExistingFactory(resourceGroup, DATA_FACTORY)\n    .withProperties(new AzureStorageLinkedService()\n        .withConnectionString(connectionStringProperty))\n    .create();\n\n// input dataset\nfinal String inputDatasetName = \"InputDataset\";\nmanager.datasets().define(inputDatasetName)\n    .withExistingFactory(resourceGroup, DATA_FACTORY)\n    .withProperties(new AzureBlobDataset()\n        .withLinkedServiceName(new LinkedServiceReference().withReferenceName(linkedServiceName))\n        .withFolderPath(containerName)\n        .withFileName(\"input/data.txt\")\n        .withFormat(new TextFormat()))\n    .create();\n\n// output dataset\nfinal String outputDatasetName = \"OutputDataset\";\nmanager.datasets().define(outputDatasetName)\n    .withExistingFactory(resourceGroup, DATA_FACTORY)\n    .withProperties(new AzureBlobDataset()\n        .withLinkedServiceName(new LinkedServiceReference().withReferenceName(linkedServiceName))\n        .withFolderPath(containerName)\n        .withFileName(\"output/data.txt\")\n        .withFormat(new TextFormat()))\n    .create();\n\n// pipeline\nPipelineResource pipeline = manager.pipelines().define(\"CopyBlobPipeline\")\n    .withExistingFactory(resourceGroup, DATA_FACTORY)\n    .withActivities(Collections.singletonList(new CopyActivity()\n        .withName(\"CopyBlob\")\n        .withSource(new BlobSource())\n        .withSink(new BlobSink())\n        .withInputs(Collections.singletonList(new DatasetReference().withReferenceName(inputDatasetName)))\n        .withOutputs(Collections.singletonList(new DatasetReference().withReferenceName(outputDatasetName)))))\n    .create();\n\n// run pipeline\nCreateRunResponse createRun = pipeline.createRun();\n\n// wait for completion\nPipelineRun pipelineRun = manager.pipelineRuns().get(resourceGroup, DATA_FACTORY, createRun.runId());\nString runStatus = pipelineRun.status();\nwhile (\"InProgress\".equals(runStatus)) {\n    sleepIfRunningAgainstService(10 * 1000);    // wait 10 seconds\n    pipelineRun = manager.pipelineRuns().get(resourceGroup, DATA_FACTORY, createRun.runId());\n    runStatus = pipelineRun.status();\n}\n```\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/datafactory/azure-resourcemanager-datafactory/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "datafactory/azure-resourcemanager-datafactory",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/datafactory/azure-resourcemanager-datafactory",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager DataLakeAnalytics client library for Java\n\nAzure Resource Manager DataLakeAnalytics client library for Java.\n\nThis package contains Microsoft Azure SDK for DataLakeAnalytics Management SDK. Creates an Azure Data Lake Analytics account management client. Package tag package-2016-11. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-datalakeanalytics;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-datalakeanalytics</artifactId>\n    <version>1.0.0-beta.2</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nDataLakeAnalyticsManager manager = DataLakeAnalyticsManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/datalakeanalytics/azure-resourcemanager-datalakeanalytics/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "datalakeanalytics/azure-resourcemanager-datalakeanalytics",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/datalakeanalytics/azure-resourcemanager-datalakeanalytics",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager DataLakeStore client library for Java\n\nAzure Resource Manager DataLakeStore client library for Java.\n\nThis package contains Microsoft Azure SDK for DataLakeStore Management SDK. Creates an Azure Data Lake Store account management client. Package tag package-2016-11. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-datalakestore;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-datalakestore</artifactId>\n    <version>1.0.0-beta.2</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nDataLakeStoreManager manager = DataLakeStoreManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/datalakestore/azure-resourcemanager-datalakestore/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "datalakestore/azure-resourcemanager-datalakestore",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/datalakestore/azure-resourcemanager-datalakestore",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager DataMigration client library for Java\n\nAzure Resource Manager DataMigration client library for Java.\n\nThis package contains Microsoft Azure SDK for DataMigration Management SDK. Data Migration Client. Package tag package-2018-04-19. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-datamigration;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-datamigration</artifactId>\n    <version>1.0.0-beta.2</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nDataMigrationManager manager = DataMigrationManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/datamigration/azure-resourcemanager-datamigration/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "datamigration/azure-resourcemanager-datamigration",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/datamigration/azure-resourcemanager-datamigration",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager DataProtection client library for Java\n\nAzure Resource Manager DataProtection client library for Java.\n\nThis package contains Microsoft Azure SDK for DataProtection Management SDK. Open API 2.0 Specs for Azure Data Protection service. Package tag package-2023-01. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-dataprotection;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-dataprotection</artifactId>\n    <version>1.0.0-beta.3</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nDataProtectionManager manager = DataProtectionManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/dataprotection/azure-resourcemanager-dataprotection/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "dataprotection/azure-resourcemanager-dataprotection",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/dataprotection/azure-resourcemanager-dataprotection",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager DelegatedNetwork client library for Java\n\nAzure Resource Manager DelegatedNetwork client library for Java.\n\nThis package contains Microsoft Azure SDK for DelegatedNetwork Management SDK. DNC web api provides way to create, get and delete dnc controller. Package tag package-2021-03-15. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-delegatednetwork;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-delegatednetwork</artifactId>\n    <version>1.0.0-beta.2</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nDelegatedNetworkManager manager = DelegatedNetworkManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/delegatednetwork/azure-resourcemanager-delegatednetwork/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "delegatednetwork/azure-resourcemanager-delegatednetwork",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/delegatednetwork/azure-resourcemanager-delegatednetwork",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager Deployment client library for Java\n\nAzure Resource Manager Deployment client library for Java.\n\nThis package contains Microsoft Azure SDK for Deployment Management SDK. REST APIs for orchestrating deployments using the Azure Deployment Manager (ADM). Package tag package-2019-11-01-preview. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-deploymentmanager;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-deploymentmanager</artifactId>\n    <version>1.0.0-beta.2</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nDeploymentManager manager = DeploymentManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/deploymentmanager/azure-resourcemanager-deploymentmanager/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "deploymentmanager/azure-resourcemanager-deploymentmanager",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/deploymentmanager/azure-resourcemanager-deploymentmanager",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager DesktopVirtualization client library for Java\n\nAzure Resource Manager DesktopVirtualization client library for Java.\n\nThis package contains Microsoft Azure SDK for DesktopVirtualization Management SDK.  Package tag package-2022-09. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-desktopvirtualization;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-desktopvirtualization</artifactId>\n    <version>1.0.0</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nDesktopVirtualizationManager manager = DesktopVirtualizationManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/desktopvirtualization/azure-resourcemanager-desktopvirtualization/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "desktopvirtualization/azure-resourcemanager-desktopvirtualization",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/desktopvirtualization/azure-resourcemanager-desktopvirtualization",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure DevCenter client library for Java\n\nThis package contains Microsoft Azure DevCenter client library.\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [Product documentation: Azure Deployment Environments][environments_documentation]\n- [Product documentation: Microsoft Dev Box][devbox_documentation]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n- The minimum requirements to create Dev Box resources using this SDK are to create DevCenter, Project, and Pool resources.\n- The minimum requirements to create Environment resources using this SDK are to create DevCenter, Project, EnvironmentType, and CatalogItem resources.\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure:azure-developer-devcenter;current})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-developer-devcenter</artifactId>\n    <version>1.0.0-beta.2</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Authentication\n\n[Azure Identity][azure_identity] package provides the default implementation for authenticating the client.\n\n## Key concepts\n\n## Examples\n### Dev Box Scenarios\n```java com.azure.developer.devcenter.readme.devboxes\nString endpoint = Configuration.getGlobalConfiguration().get(\"DEVCENTER_ENDPOINT\");\n\n// Build our clients\nDevCenterClient devCenterClient =\n                new DevCenterClientBuilder()\n                        .endpoint(endpoint)\n                        .credential(new DefaultAzureCredentialBuilder().build())\n                        .buildClient();\n\nDevBoxesClient devBoxClient =\n                new DevBoxesClientBuilder()\n                        .endpoint(endpoint)\n                        .credential(new DefaultAzureCredentialBuilder().build())\n                        .buildClient();\n\n// Find available Projects and Pools\nPagedIterable<BinaryData> projectListResponse = devCenterClient.listProjects(null);\nfor (BinaryData p: projectListResponse) {\n    System.out.println(p);\n}\n\nPagedIterable<BinaryData> poolListResponse = devBoxClient.listPools(\"myProject\", null);\nfor (BinaryData p: poolListResponse) {\n    System.out.println(p);\n}\n\n// Provision a Dev Box\nBinaryData devBoxBody = BinaryData.fromString(\"{\\\"poolName\\\":\\\"MyPool\\\"}\");\nSyncPoller<BinaryData, BinaryData> devBoxCreateResponse =\n        devBoxClient.beginCreateDevBox(\"myProject\", \"me\", \"MyDevBox\", devBoxBody, null);\ndevBoxCreateResponse.waitForCompletion();\n\n\nResponse<BinaryData> remoteConnectionResponse =\n                devBoxClient.getRemoteConnectionWithResponse(\"myProject\", \"me\", \"MyDevBox\", null);\nSystem.out.println(remoteConnectionResponse.getValue());\n\n// Tear down the Dev Box when we're finished:\nSyncPoller<BinaryData, Void> devBoxDeleteResponse =\n                devBoxClient.beginDeleteDevBox(\"myProject\", \"me\", \"MyDevBox\", null);\ndevBoxDeleteResponse.waitForCompletion();        \n```\n\n### Environments Scenarios\n```java com.azure.developer.devcenter.readme.environments\nEnvironmentsClient environmentsClient =\n                new EnvironmentsClientBuilder()\n                        .endpoint(endpoint)\n                        .credential(new DefaultAzureCredentialBuilder().build())\n                        .buildClient();\n\n// Fetch available catalog items and environment types\nPagedIterable<BinaryData> catalogItemListResponse = environmentsClient.listCatalogItems(\"myProject\", null);\nfor (BinaryData p: catalogItemListResponse) {\n    System.out.println(p);\n}\n\nPagedIterable<BinaryData> environmentTypesListResponse = environmentsClient.listEnvironmentTypes(\"myProject\", null);\nfor (BinaryData p: environmentTypesListResponse) {\n    System.out.println(p);\n}\n\n// Create an environment\nBinaryData environmentBody = BinaryData.fromString(\"{\\\"catalogItemName\\\":\\\"MyCatalogItem\\\", \\\"environmentType\\\":\\\"MyEnvironmentType\\\"}\");\nSyncPoller<BinaryData, BinaryData> environmentCreateResponse =\n        environmentsClient.beginCreateOrUpdateEnvironment(\"myProject\", \"me\", \"TestEnvironment\", environmentBody, null);\nenvironmentCreateResponse.waitForCompletion();\n\n// Delete the environment when we're finished:\nSyncPoller<BinaryData, Void> environmentDeleteResponse =\n                environmentsClient.beginDeleteEnvironment(\"myProject\", \"me\", \"TestEnvironment\", null);\nenvironmentDeleteResponse.waitForCompletion();\n```\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[environments_documentation]: https://learn.microsoft.com/azure/deployment-environments/\n[devbox_documentation]: https://learn.microsoft.com/azure/dev-box/\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n",
        "repo_name": "devcenter/azure-developer-devcenter",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/devcenter/azure-developer-devcenter",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager DevCenter client library for Java\n\nAzure Resource Manager DevCenter client library for Java.\n\nThis package contains Microsoft Azure SDK for DevCenter Management SDK. DevCenter Management API. Package tag package-2023-04. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-devcenter;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-devcenter</artifactId>\n    <version>1.0.0-beta.5</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nDevCenterManager manager = DevCenterManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/devcenter/azure-resourcemanager-devcenter/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "devcenter/azure-resourcemanager-devcenter",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/devcenter/azure-resourcemanager-devcenter",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager DevHub client library for Java\n\nAzure Resource Manager DevHub client library for Java.\n\nThis package contains Microsoft Azure SDK for DevHub Management SDK. The AKS Developer Hub Service Client. Package tag package-preview-2022-10. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-devhub;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-devhub</artifactId>\n    <version>1.0.0-beta.2</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nDevHubManager manager = DevHubManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/devhub/azure-resourcemanager-devhub/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "devhub/azure-resourcemanager-devhub",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/devhub/azure-resourcemanager-devhub",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager IotDps client library for Java\n\nAzure Resource Manager IotDps client library for Java.\n\nThis package contains Microsoft Azure SDK for IotDps Management SDK. API for using the Azure IoT Hub Device Provisioning Service features. Package tag package-2022-02. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-deviceprovisioningservices;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-deviceprovisioningservices</artifactId>\n    <version>1.1.0-beta.2</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nIotDpsManager manager = IotDpsManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/deviceprovisioningservices/azure-resourcemanager-deviceprovisioningservices/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n",
        "repo_name": "deviceprovisioningservices/azure-resourcemanager-deviceprovisioningservices",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/deviceprovisioningservices/azure-resourcemanager-deviceprovisioningservices",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Device Update for IoT Hub client library for Java\n\nThe library provides access to the Device Update for IoT Hub service that enables customers to publish updates for their IoT devices to the cloud, and then deploy these updates to their devices (approve updates to groups of devices managed and provisioned in IoT Hub).\n\n  [Source code](https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/deviceupdate/azure-iot-deviceupdate/src) | [Product documentation](https://docs.microsoft.com/azure/iot-hub-device-update/understand-device-update)\n\n## Getting started\n\nThe complete Microsoft Azure SDK can be downloaded from the [Microsoft Azure Downloads](https://azure.microsoft.com/downloads/?sdk=java) page and ships with support for building deployment packages, integrating with tooling, rich command line tooling, and more.\n\nFor the best development experience, developers should use the official Microsoft NuGet packages for libraries. NuGet packages are regularly updated with new functionality and hotfixes.\n\n### Prerequisites\n\n- A [Java Development Kit (JDK)][jdk_link], version 8 or later.\n- [Azure Subscription][azure_subscription]\n- Device Update for IoT Hub instance\n- Azure IoT Hub instance\n\n### Include the Package\n\n[//]: # ({x-version-update-start;com.azure:azure-iot-deviceupdate;current})\n```xml\n<dependency>\n  <groupId>com.azure</groupId>\n  <artifactId>azure-iot-deviceupdate</artifactId>\n  <version>1.0.7</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Authenticate the client\n\nIn order to interact with the Device Update for IoT Hub service, you will need to create an instance of a [TokenCredential class](https://docs.microsoft.com/java/api/com.azure.core.credential.tokencredential?view=azure-java-stable) and pass it to the constructor of your `DeviceUpdateClientBuilder` class.\n\nPlease refer to [Java SDK Get Started document](https://docs.microsoft.com/azure/developer/java/sdk/get-started#set-up-authentication) for more authentication configuration.\n\n## Key concepts\n\nDevice Update for IoT Hub is a managed service that enables you to deploy over-the-air updates for your IoT devices. The client library has two main components:\n\n- **DeviceUpdate**: update management (import, enumerate, delete, etc.)\n- **DeviceManagement**: device management (enumerate devices and retrieve device properties), deployment management (start and monitor update deployments to a set of devices)\n\nYou can learn more about Device Update for IoT Hub by visiting [Device Update for IoT Hub](https://github.com/azure/iot-hub-device-update).\n\n## Examples\n\nYou can familiarize yourself with different APIs using [Samples](https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/deviceupdate/azure-iot-deviceupdate/src/samples).\n\n## Troubleshooting\n\nAll Device Update for IoT Hub service operations will throw a ErrorResponseException on failure with helpful ErrorCodes.\n\nFor example, if you use the `getUpdateWithResponse` operation and the model you are looking for doesn't exist, you can catch that specific HttpStatusCode to decide the operation that follows in that case.\n\n\n``` java com.azure.iot.deviceupdate.DeviceUpdateClient.notfound\ntry {\n    Response<BinaryData> response = client.getUpdateWithResponse(\"foo\", \"bar\", \"0.0.0.1\",\n            null);\n} catch (HttpResponseException e) {\n    if (e.getResponse().getStatusCode() == 404) {\n        // update does not exist\n        System.out.println(\"update does not exist\");\n    }\n}\n```\n\n## Next steps\n\nGet started with our [Device Update for IoT Hub samples](https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/deviceupdate/azure-iot-deviceupdate/src/samples)\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a [Contributor License Agreement (CLA)][cla] declaring that you have the right to, and actually do, grant us the rights to use your contribution.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n[azure_subscription]: https://azure.microsoft.com/free\n[jdk_link]: https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fdeviceupdate%2Fazure-iot-deviceupdate%2FREADME.png)\n",
        "repo_name": "deviceupdate/azure-iot-deviceupdate",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/deviceupdate/azure-iot-deviceupdate",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager DeviceUpdate client library for Java\n\nAzure Resource Manager DeviceUpdate client library for Java.\n\nThis package contains Microsoft Azure SDK for DeviceUpdate Management SDK. Microsoft Device Update resource provider. Package tag package-2022-10-01. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-deviceupdate;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-deviceupdate</artifactId>\n    <version>1.0.0-beta.2</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nDeviceUpdateManager manager = DeviceUpdateManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/deviceupdate/azure-resourcemanager-deviceupdate/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n",
        "repo_name": "deviceupdate/azure-resourcemanager-deviceupdate",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/deviceupdate/azure-resourcemanager-deviceupdate",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager DevSpaces client library for Java\n\nAzure Resource Manager DevSpaces client library for Java.\n\nThis package contains Microsoft Azure SDK for DevSpaces Management SDK. Dev Spaces Client. Package tag package-2019-04-01. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-devspaces;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-devspaces</artifactId>\n    <version>1.0.0-beta.2</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nDevSpacesManager manager = DevSpacesManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/devspaces/azure-resourcemanager-devspaces/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "devspaces/azure-resourcemanager-devspaces",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/devspaces/azure-resourcemanager-devspaces",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager DevTestLabs client library for Java\n\nAzure Resource Manager DevTestLabs client library for Java.\n\nThis package contains Microsoft Azure SDK for DevTestLabs Management SDK. The DevTest Labs Client. Package tag package-2018-09. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-devtestlabs;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-devtestlabs</artifactId>\n    <version>1.0.0-beta.2</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nDevTestLabsManager manager = DevTestLabsManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/devtestlabs/azure-resourcemanager-devtestlabs/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "devtestlabs/azure-resourcemanager-devtestlabs",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/devtestlabs/azure-resourcemanager-devtestlabs",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure IoT Digital Twins client library for Java\n\nThis library provides access to the Azure Digital Twins service for managing twins, models, relationships, etc.\n\n  [Source code][source] | [Package](https://search.maven.org/artifact/com.azure/azure-digitaltwins-core)\n\n## Getting started\n\nThe complete Microsoft Azure SDK can be downloaded from the [Microsoft Azure downloads][microsoft_sdk_download] page, and it ships with support for building deployment packages, integrating with tooling, rich command line tooling, and more.\n\nFor the best development experience, developers should use the official Microsoft Maven packages for libraries. Maven packages are regularly updated with new functionality and hotfixes.\n\n### Include the Package\n#### Include the BOM file\n\nPlease include the azure-sdk-bom to your project to take dependency on GA version of the library. In the following snippet, replace the {bom_version_to_target} placeholder with the version number.\nTo learn more about the BOM, see the [AZURE SDK BOM README](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/boms/azure-sdk-bom/README.md).\n\n```xml\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>com.azure</groupId>\n            <artifactId>azure-sdk-bom</artifactId>\n            <version>{bom_version_to_target}</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n```\nand then include the direct dependency in the dependencies section without the version tag.\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-digitaltwins-core</artifactId>\n  </dependency>\n</dependencies>\n```\n\n#### Include direct dependency\nIf you want to take dependency on a particular version of the library that is not present in the BOM,\nadd the direct dependency to your project as follows.\n\n\n[//]: # ({x-version-update-start;com.azure:azure-digitaltwins-core;current})\n\n```xml\n<dependency>\n  <groupId>com.azure</groupId>\n  <artifactId>azure-digitaltwins-core</artifactId>\n  <version>1.3.9</version>\n</dependency>\n```\n\n[//]: # ({x-version-update-end})\n\n### Prerequisites\n\n- A Microsoft Azure Subscription\n  - To call Microsoft Azure services, create an [Azure subscription][azure_sub].\n- An Azure Digital Twins instance\n  - In order to use the Azure Digital Twins SDK, first create a Digital Twins instance using one of options:\n    - Using [Azure portal][azure_portal]\n    - Using [Azure Management APIs][azure_rest_api]\n    - Using [Azure CLI][azure_cli]\n      - You will need to install azure cli and the [Azure IoT extension][iot_cli_extension] for Azure CLI.\n      - Refer to [IoT CLI documentation][iot_cli_doc] for more information on how to create and interact with your Digital Twins instance.\n\n### Authenticate the Client\n\nIn order to interact with the Azure Digital Twins service, you will need to create an instance of a [TokenCredential class][token_credential] and pass it to the constructor of your [DigitalTwinsClientBuilder](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClientBuilder.java).\n\n## Key concepts\n\nAzure Digital Twins is an Azure IoT service that creates comprehensive models of the physical environment.\nIt can create spatial intelligence graphs to model the relationships and interactions between people, spaces, and devices.\n\nYou can learn more about Azure Digital Twins by visiting [Azure Digital Twins Documentation][digital_twins_documentation]\n\n## Examples\n\nYou can familiarize yourself with different APIs using [samples for Digital Twins](https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/digitaltwins/azure-digitaltwins-core/src/samples).\n\n## Source code folder structure\n\n### /src/main/java/com/azure/digitaltwins/core\n\n- The Digital Twins client builder [`DigitalTwinsClientBuilder`](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClientBuilder.java)\n- The Digital Twins public sync and async clients [`DigitalTwinsClient`](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClient.java), [`DigitalTwinsAsyncClient`](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java)\n- [`models` package](https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/models)\n\nPortions of the client library are generated through Autorest, and the swagger file used is defined in the Autorest config file.\n\nTo regenerate the code, run the Powershell script [generate.ps1](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/digitaltwins/azure-digitaltwins-core/generate.ps1).\n\n### /src/samples\n\nThis directory contains sample code that demonstrates basic usage of this client library. For additional information, \nsee the [sample readme](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/digitaltwins/azure-digitaltwins-core/src/samples/README.md)\n\n## Troubleshooting\n\nAll service operations will throw ErrorResponseException on failure reported by the service, with helpful error codes and other information.\n\nFor example, use the `getModel` operation to check if the model exists before creating it.\n\n```java\ntry {\n    syncClient.getModel(\"someRandomModelId\");\n}\ncatch (ErrorResponseException ex) {\n    if (ex.getResponse().getStatusCode() == HttpURLConnection.HTTP_NOT_FOUND) {\n        return id;\n    } else {\n        // This request should not retried if it encounters a 401 error, for instance\n        throw new IllegalStateException(\"Encountered unexpected error while searching for unique id\", ex);\n    }\n}\n```\n\n## Next steps\n\nSee implementation examples with our [code samples](https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/digitaltwins/azure-digitaltwins-core/src/samples).\n\n## Contributing\n\nThis project welcomes contributions and suggestions.\nMost contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution.\nFor details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment).\nSimply follow the instructions provided by the bot.\nYou will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct].\nFor more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments.\n\n<!-- LINKS -->\n[microsoft_sdk_download]: https://azure.microsoft.com/downloads/?sdk=java\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[source]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/digitaltwins/azure-digitaltwins-core\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[nuget]: https://www.nuget.org/\n[azure_portal]: https://portal.azure.com/\n[azure_rest_api]: https://docs.microsoft.com/rest/api/azure/\n[azure_core_library]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/core/azure-core\n[token_credential]: https://docs.microsoft.com/java/api/com.azure.core.credential.tokencredential?view=azure-java-stable\n[digital_twins_documentation]: https://docs.microsoft.com/azure/digital-twins/\n[azure_cli]: https://docs.microsoft.com/cli/azure/install-azure-cli?view=azure-cli-latest\n[iot_cli_extension]: https://github.com/Azure/azure-iot-cli-extension/releases\n[iot_cli_doc]: https://docs.microsoft.com/cli/azure/ext/azure-iot/dt?view=azure-cli-latest\n",
        "repo_name": "digitaltwins/azure-digitaltwins-core",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/digitaltwins/azure-digitaltwins-core",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager AzureDigitalTwins client library for Java\n\nAzure Resource Manager AzureDigitalTwins client library for Java.\n\nThis package contains Microsoft Azure SDK for AzureDigitalTwins Management SDK. Azure Digital Twins Client for managing DigitalTwinsInstance. Package tag package-2023-01. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-digitaltwins;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-digitaltwins</artifactId>\n    <version>1.2.0</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nAzureDigitalTwinsManager manager = AzureDigitalTwinsManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/digitaltwins/azure-resourcemanager-digitaltwins/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "digitaltwins/azure-resourcemanager-digitaltwins",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/digitaltwins/azure-resourcemanager-digitaltwins",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager DnsResolver client library for Java\n\nAzure Resource Manager DnsResolver client library for Java.\n\nThis package contains Microsoft Azure SDK for DnsResolver Management SDK. The DNS Resolver Management Client. Package tag package-2022-07. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-dnsresolver;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-dnsresolver</artifactId>\n    <version>1.0.0-beta.2</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nDnsResolverManager manager = DnsResolverManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/dnsresolver/azure-resourcemanager-dnsresolver/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n",
        "repo_name": "dnsresolver/azure-resourcemanager-dnsresolver",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/dnsresolver/azure-resourcemanager-dnsresolver",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager Dynatrace client library for Java\n\nAzure Resource Manager Dynatrace client library for Java.\n\nThis package contains Microsoft Azure SDK for Dynatrace Management SDK.  Package tag package-2021-09-01. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-dynatrace;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-dynatrace</artifactId>\n    <version>1.0.0-beta.2</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nDynatraceManager manager = DynatraceManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/dynatrace/azure-resourcemanager-dynatrace/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n",
        "repo_name": "dynatrace/azure-resourcemanager-dynatrace",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/dynatrace/azure-resourcemanager-dynatrace",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager EdgeOrder client library for Java\n\nAzure Resource Manager EdgeOrder client library for Java.\n\nThis package contains Microsoft Azure SDK for EdgeOrder Management SDK. Edge Order API's. Package tag package-2021-12. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-edgeorder;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-edgeorder</artifactId>\n    <version>1.0.0-beta.1</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nEdgeOrderManager manager = EdgeOrderManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/edgeorder/azure-resourcemanager-edgeorder/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n",
        "repo_name": "edgeorder/azure-resourcemanager-edgeorder",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/edgeorder/azure-resourcemanager-edgeorder",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager Education client library for Java\n\nAzure Resource Manager Education client library for Java.\n\nThis package contains Microsoft Azure SDK for Education Management SDK. Education client provides access to education resources for Azure subscriptions. Package tag package-2021-12-01-preview. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-education;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-education</artifactId>\n    <version>1.0.0-beta.3</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nEducationManager manager = EducationManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/education/azure-resourcemanager-education/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n",
        "repo_name": "education/azure-resourcemanager-education",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/education/azure-resourcemanager-education",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager elastic client library for Java\n\nAzure Resource Manager elastic client library for Java.\n\nThis package contains Microsoft Azure SDK for elastic Management SDK.  Package tag package-2023-02-01-preview. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-elastic;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-elastic</artifactId>\n    <version>1.0.0-beta.4</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nElasticManager manager = ElasticManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/elastic/azure-resourcemanager-elastic/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "elastic/azure-resourcemanager-elastic",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/elastic/azure-resourcemanager-elastic",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager ElasticSan client library for Java\n\nAzure Resource Manager ElasticSan client library for Java.\n\nThis package contains Microsoft Azure SDK for ElasticSan Management SDK.  Package tag package-2021-11-20-preview. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-elasticsan;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-elasticsan</artifactId>\n    <version>1.0.0-beta.1</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nElasticSanManager manager = ElasticSanManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/elasticsan/azure-resourcemanager-elasticsan/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n",
        "repo_name": "elasticsan/azure-resourcemanager-elasticsan",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/elasticsan/azure-resourcemanager-elasticsan",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Cloud Native Cloud Event client library for Java\n\nThis library can be used to enable publishing the Cloud Native Computing Foundation(CNCF) [CloudEvents][CNCFCloudEvents]\nusing the Azure Event Grid library. \n\n## Getting started\n\n### Prerequisites\nYou should have an EventGrid client before using this bridge library. Follow [Azure EventGrid][eventgridGettingStarted]\nsteps to create an EventGrid client.\n\n### Include the package\n\n#### Include direct dependency\nIf you want to take dependency on a particular version of the library, add the direct dependency to your project as follows.\n\n[//]: # ({x-version-update-start;com.azure:azure-messaging-cloudnative-cloudevents;current})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-messaging-eventgrid-cloudnative-cloudevents</artifactId>\n    <version>1.0.0-beta.1</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n## Key concepts\nFor information about general Event Grid concepts: [Concepts in Azure Event Grid][eventgridConcept].\n\nFor detailed information about the Event Grid client library concepts: [Event Grid Client Library][eventgridClientConcept].\n\n## Examples\n\n### Sending CNCF CloudEvents To Event Grid Topics\n```java readme-sample-sendCNCFCloudEvents-topic\n// Prepare Event Grid client\nEventGridPublisherClient<com.azure.core.models.CloudEvent> egClient =\n    new EventGridPublisherClientBuilder()\n        .endpoint(System.getenv(\"AZURE_EVENTGRID_CLOUDEVENT_ENDPOINT\"))\n        .credential(new AzureKeyCredential(System.getenv(\"AZURE_EVENTGRID_CLOUDEVENT_KEY\")))\n        .buildCloudEventPublisherClient();\n\n// Prepare a native cloud event input, the cloud event input should be replace with your own.\nCloudEvent cloudEvent =\n    CloudEventBuilder.v1()\n        .withData(\"{\\\"name\\\": \\\"joe\\\"}\".getBytes(StandardCharsets.UTF_8)) // Replace it\n        .withId(UUID.randomUUID().toString()) // Replace it\n        .withType(\"User.Created.Text\") // Replace it\n        .withSource(URI.create(\"http://localHost\")) // Replace it\n        .withDataContentType(\"application/json\") // Replace it\n        .build();\n\n// Publishing a single event\nEventGridCloudNativeEventPublisher.sendEvent(egClient, cloudEvent);\n```\n\n### Sending CNCF CloudEvents To Event Grid Domain\nWhen publishing to an Event Grid domain with cloud events, the cloud event source is used as the domain topic.\nThe Event Grid service doesn't support using an absolute URI for a domain topic, so you would need to do\nsomething like the following to integrate with the cloud native cloud events:\n```java readme-sample-sendCNCFCloudEvents-domain\n// Prepare Event Grid client\nEventGridPublisherClient<com.azure.core.models.CloudEvent> egClient =\n    new EventGridPublisherClientBuilder()\n        .endpoint(System.getenv(\"AZURE_EVENTGRID_CLOUDEVENT_ENDPOINT\"))\n        .credential(new AzureKeyCredential(System.getenv(\"AZURE_EVENTGRID_CLOUDEVENT_KEY\")))\n        .buildCloudEventPublisherClient();\n\n// Prepare a native cloud event input, the cloud event input should be replace with your own.\nCloudEvent cloudEvent =\n    CloudEventBuilder.v1()\n        .withData(\"{\\\"name\\\": \\\"joe\\\"}\".getBytes(StandardCharsets.UTF_8)) // Replace it\n        .withId(UUID.randomUUID().toString()) // Replace it\n        .withType(\"User.Created.Text\") // Replace it\n        // Replace it. Event Grid does not allow absolute URIs as the domain topic.\n        // For example, use the Event Grid Domain resource name as the relative path.\n        .withSource(URI.create(\"/relative/path\"))\n        .withDataContentType(\"application/json\") // Replace it\n        .build();\n\n// Publishing a single event\nEventGridCloudNativeEventPublisher.sendEvent(egClient, cloudEvent);\n```\n\n## Troubleshooting\n\n### Responses and error codes\n\nService responses are returned in the form of Http status codes, including a number\nof error codes. These codes can optionally be returned by the `PublisherClient`.\nUnexpected status codes are thrown as [`HttpResponseException`][HttpResponseException]\nwhich wraps the error code.\n\nReference documentation for the event grid service can be found [here][service_docs]. This is a\ngood place to start for problems involving configuration of topics/endpoints, as well as for\nproblems involving error codes from the service.\n\n### Help and Issues\n\nReference documentation for the SDK can be found [here][javadocs]. This is a good first step\nto understanding the purpose of each method called, as well as possible reasons for errors\nor unexpected behavior.\n\nIf you encounter any bugs with these SDKs, please file issues via [Issues](https://github.com/Azure/azure-sdk-for-java/issues) or checkout [StackOverflow for Azure Java SDK](https://stackoverflow.com/questions/tagged/azure-java-sdk).\n\n## Next steps\n\n- [Azure Java SDKs](https://docs.microsoft.com/java/azure/)\n- If you don't have a Microsoft Azure subscription you can get a FREE trial account [here](https://go.microsoft.com/fwlink/?LinkId=330212)\n\n## Contributing\n\nIf you would like to become an active contributor to this project please refer to our \nContribution Guidelines for more information.\n\n<!-- LINKS -->\n[eventgridGettingStarted]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/eventgrid/azure-messaging-eventgrid#getting-started\n[eventgridConcept]: https://docs.microsoft.com/azure/event-grid/concepts\n[eventgridClientConcept]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/eventgrid/azure-messaging-eventgrid#key-concepts\n[javadocs]: https://azure.github.io/azure-sdk-for-java/eventgrid.html\n[CNCFCloudEvents]: https://cloudevents.github.io/sdk-java/\n[HttpResponseException]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core/src/main/java/com/azure/core/exception/HttpResponseException.java\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Feventgrid%2Fazure-messaging-eventgrid-cloudnative-cloudevents%2FREADME.png)\n",
        "repo_name": "eventgrid/azure-messaging-eventgrid-cloudnative-cloudevents",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/eventgrid/azure-messaging-eventgrid-cloudnative-cloudevents",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Event Grid client library for Java\n\nAzure Event Grid allows you to easily build applications with event-based architectures. The Event Grid service fully \nmanages all routing of events from any source, to any destination, for any application. \nAzure service events and custom events can be published directly to the service, where the events can then be filtered \nand sent to various recipients, such as built-in handlers or custom webhooks. \nTo learn more about Azure Event Grid: [What is Event Grid?](https://docs.microsoft.com/azure/event-grid/overview)\n\nUse the client library for Azure Event Grid to:\n- Publish events to the Event Grid service using the Event Grid Event, Cloud Event 1.0, or custom schemas\n- Consume events that have been delivered to event handlers\n- Generate SAS tokens to authenticate the client publishing events to Azure Event Grid topics\n\n[Sources][sources] |\n[API Reference Documentation][javadocs] |\n[Product Documentation][service_docs] | \n[Samples][samples]\n\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK) with version 8 or above][jdk]\n- An [Azure subscription][azure_subscription]\n- An [Event Grid][eventgrid] topic or domain. To create the resource, you can use [Azure portal][portal] or\n  [Azure CLI][cli]\n\nIf you use the Azure CLI, replace `<your-resource-group-name>` and `<your-resource-name>` with your own unique names\nand `<location>` with a valid Azure service location.\n\n#### Creating a topic ([Azure CLI][cli])\n\n```bash\naz eventgrid topic create --location <location> --resource-group <your-resource-group-name> --name <your-resource-name>\n```\n\n\n#### Creating a domain ([Azure CLI][cli])\n\n```bash\naz eventgrid domain create --location <location> --resource-group <your-resource-group-name> --name <your-resource-name>\n```\n\n### Include the package\n#### Include the BOM file\n\nPlease include the azure-sdk-bom to your project to take dependency on GA version of the library. In the following snippet, replace the {bom_version_to_target} placeholder with the version number.\nTo learn more about the BOM, see the [AZURE SDK BOM README](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/boms/azure-sdk-bom/README.md).\n\n```xml\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>com.azure</groupId>\n            <artifactId>azure-sdk-bom</artifactId>\n            <version>{bom_version_to_target}</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n```\nand then include the direct dependency in the dependencies section without the version tag.\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-messaging-eventgrid</artifactId>\n  </dependency>\n</dependencies>\n```\n\n#### Include direct dependency\nIf you want to take dependency on a particular version of the library that is not present in the BOM,\nadd the direct dependency to your project as follows.\n\n[//]: # ({x-version-update-start;com.azure:azure-messaging-eventgrid;current})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-messaging-eventgrid</artifactId>\n    <version>4.16.0</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Authenticate the Client\n\nIn order to send events, we need an endpoint to send to and some authentication for the endpoint. The authentication can be \na key credential, a shared access signature, or Azure Active Directory token authentication.\nThe endpoint and key can both be obtained through [Azure Portal][portal] or [Azure CLI][cli].\n\n#### Endpoint\n\nThe endpoint is listed on the dashboard of the topic or domain in the [Azure Portal][portal],\nor can be obtained using the following command in [Azure CLI][cli].\n```bash\naz eventgrid topic show --name <your-resource-name> --resource-group <your-resource-group-name> --query \"endpoint\"\n```\n\n#### Access Key\n\nThe keys are listed in the \"Access Keys\" tab of the [Azure Portal][portal], or can be obtained\nusing the following command in [Azure CLI][cli]. Anyone of the keys listed will work.\n\n```bash\naz eventgrid topic key list --name <your-resource-name> --resource-group <your-resource-group-name>\n```\n\n#### Azure Active Directory (AAD) Token authentication\nAzure Event Grid provides integration with Azure Active Directory (Azure AD) for identity-based authentication of requests. \nWith Azure AD, you can use role-based access control (RBAC) to grant access to your Azure Event Grid resources to users, groups, or applications.\nTo send events to a topic or domain with a `TokenCredential`, the authenticated identity should have the \"EventGrid Data Sender\" role assigned.\n\n#### Creating the Client\n\n##### Using endpoint and access key to create the client\nOnce you have your access key and topic endpoint, you can create the publisher client as follows:\n\nSync client that works for every Java developer:\n\n```java readme-sample-createCloudEventPublisherClient\n// For CloudEvent\nEventGridPublisherClient<CloudEvent> cloudEventClient = new EventGridPublisherClientBuilder()\n    .endpoint(\"<endpoint of your event grid topic/domain that accepts CloudEvent schema>\")\n    .credential(new AzureKeyCredential(\"<key for the endpoint>\"))\n    .buildCloudEventPublisherClient();\n```\n\n```java readme-sample-createEventGridEventPublisherClient\n// For EventGridEvent\nEventGridPublisherClient<EventGridEvent> eventGridEventClient = new EventGridPublisherClientBuilder()\n    .endpoint(\"<endpoint of your event grid topic/domain that accepts EventGridEvent schema>\")\n    .credential(new AzureKeyCredential(\"<key for the endpoint>\"))\n    .buildEventGridEventPublisherClient();\n```\n\n```java readme-sample-createCustomEventPublisherClient\n// For custom event\nEventGridPublisherClient<BinaryData> customEventClient = new EventGridPublisherClientBuilder()\n    .endpoint(\"<endpoint of your event grid topic/domain that accepts custom event schema>\")\n    .credential(new AzureKeyCredential(\"<key for the endpoint>\"))\n    .buildCustomEventPublisherClient();\n```\nor async client if your technology stack has reactive programming such as project reactor:\n\n```java readme-sample-createCloudEventPublisherAsyncClient\n// For CloudEvent\nEventGridPublisherAsyncClient<CloudEvent> cloudEventAsyncClient = new EventGridPublisherClientBuilder()\n    .endpoint(\"<endpoint of your event grid topic/domain that accepts CloudEvent schema>\")\n    .credential(new AzureKeyCredential(\"<key for the endpoint>\"))\n    .buildCloudEventPublisherAsyncClient();\n```\n\n```java readme-sample-createEventGridEventPublisherAsyncClient\n// For EventGridEvent\nEventGridPublisherAsyncClient<EventGridEvent> eventGridEventAsyncClient = new EventGridPublisherClientBuilder()\n    .endpoint(\"<endpoint of your event grid topic/domain that accepts EventGridEvent schema>\")\n    .credential(new AzureKeyCredential(\"<key for the endpoint>\"))\n    .buildEventGridEventPublisherAsyncClient();\n```\n\n```java readme-sample-createCustomEventPublisherAsyncClient\n// For custom event\nEventGridPublisherAsyncClient<BinaryData> customEventAsyncClient = new EventGridPublisherClientBuilder()\n    .endpoint(\"<endpoint of your event grid topic/domain that accepts custom event schema>\")\n    .credential(new AzureKeyCredential(\"<key for the endpoint>\"))\n    .buildCustomEventPublisherAsyncClient();\n```\n\n##### Using endpoint and SAS token to create the client\nIf you have a SAS (**Shared Access Signature**) that can be used to send events to an Event Grid Topic or Domain for\nlimited time, you can use it to create the publisher client:\n\nSync client:\n\n```java readme-sample-createPublisherClientWithSas\nEventGridPublisherClient<CloudEvent> cloudEventClient = new EventGridPublisherClientBuilder()\n    .endpoint(\"<endpoint of your event grid topic/domain that accepts CloudEvent schema>\")\n    .credential(new AzureSasCredential(\"<sas token that can access the endpoint>\"))\n    .buildCloudEventPublisherClient();\n```\nAsync client:\n\n```java readme-sample-createPublisherClientWithSasAsync\nEventGridPublisherAsyncClient<CloudEvent> cloudEventAsyncClient = new EventGridPublisherClientBuilder()\n    .endpoint(\"<endpoint of your event grid topic/domain that accepts CloudEvent schema>\")\n    .credential(new AzureSasCredential(\"<sas token that can access the endpoint>\"))\n    .buildCloudEventPublisherAsyncClient();\n```\n\n##### Using endpoint and Azure Active Directory (AAD) token credential to create the client\nTo use the AAD token credential, include `azure-identity` artifact as a dependency. Refer to\n[azure-identity README](https://docs.microsoft.com/java/api/overview/azure/identity-readme) for details.\n\nSync client:\n\n```java readme-sample-createPublisherClientWithTokenCredential\nEventGridPublisherClient<CloudEvent> cloudEventClient = new EventGridPublisherClientBuilder()\n    .endpoint(\"<endpoint of your event grid topic/domain that accepts CloudEvent schema>\")\n    .credential(new DefaultAzureCredentialBuilder().build())\n    .buildCloudEventPublisherClient();\n```\nAsync client:\n\n```java readme-sample-createPublisherAsyncClientWithTokenCredential\nEventGridPublisherAsyncClient<CloudEvent> cloudEventClient = new EventGridPublisherClientBuilder()\n    .endpoint(\"<endpoint of your event grid topic/domain that accepts CloudEvent schema>\")\n    .credential(new DefaultAzureCredentialBuilder().build())\n    .buildCloudEventPublisherAsyncClient();\n```\n\n#### Create a SAS token for other people to send events for a limited period of time\nIf you'd like to give permission to other people to publish events to your Event Grid Topic or Domain for some time, you can create\na SAS (**Shared Access Signature**) for them so they can create an `EventGridPublisherClient` like the above to use `AzureSasCredential`\nto create the publisher client.\n\nHere is sample code to create a shared access signature that expires after 20 minutes:\n\n```java readme-sample-createSharedAccessSignature\nOffsetDateTime expiration = OffsetDateTime.now().plusMinutes(20);\nString sasToken = EventGridPublisherClient\n    .generateSas(\"<your event grid endpoint>\", new AzureKeyCredential(\"<key for the endpoint>\"), expiration);\n```\n\n### Use `BinaryData`\nThis SDK uses `com.azure.util.BinaryData` to represent the data payload of events.\n`BinaryData` supports serializing and deserializing objects through `com.azure.core.util.BinaryData.fromObject(Object object)` and `toObject()` methods,\nwhich use a default Jackson Json serializer, or `fromObject(Object object, ObjectSerializer customSerializer)` and `toObject(Class<T> clazz, ObjectSerializer serializer)` methods,\nwhich accept your customized Json serializer.\nRefer to [BinaryData](https://docs.microsoft.com/java/api/com.azure.core.util.binarydata?view=azure-java-stable) documentation for details.\n\n## Key concepts\nFor information about general Event Grid concepts: [Concepts in Azure Event Grid](https://docs.microsoft.com/azure/event-grid/concepts).\n\n### EventGridPublisherClient\n    \n`EventGridPublisherClient` is used sending events to an Event Grid Topic or an Event Grid Domain.\n`EventGridPublisherAsyncClient` is the async version of `EventGridPublisherClient`.\n\n### Event Schemas\n\nEvent Grid supports multiple schemas for encoding events. When an Event Grid Topic or Domain is created, you specify the\nschema that will be used when publishing events. While you may configure your topic to use a _custom schema_ it is\nmore common to use the already defined [EventGridEvent schema](https://docs.microsoft.com/azure/event-grid/event-schema) or [CloudEvent schema](https://docs.microsoft.com/azure/event-grid/cloud-event-schema). \nCloudEvent is a Cloud Native Computing Foundation project which produces a specification for describing event data in a common way.\nEvent Grid service is compatible with the [CloudEvent specification](https://cloudevents.io/)\nRegardless of what schema your topic or domain is configured to use, \n`EventGridPublisherClient` will be used to publish events to it. However, you must use the correct type to instantiate\nit:\n\n| Event Schema       | Publisher Client Generic Instantiation    |\n| ------------ | --------------------- |\n| Event Grid Events  | `EventGridPublisherClient<EventGridEvent>`       |\n| Cloud Events | `EventGridPublisherClient<CloudEvent>`  |\n| Custom Events       | `EventGridPublisherClient<BinaryData>` |\n\nUsing the wrong type will result in a BadRequest error from the service and your events will not be published.\nUse this Azure CLI command to query which schema an Event Grid Topic or Domain accepts:\n```bash\naz eventgrid topic show --name <your-resource-name> --resource-group <your-resource-group-name> --query inputSchema\n```\n\n### Event Handlers and event deserialization.\n\nEventGrid doesn't store any events in the Event Grid Topic or Domain itself. You need to [create subscriptions to the\nEventGrid Topic or Domain](https://docs.microsoft.com/azure/event-grid/subscribe-through-portal). \nThe events sent to the topic or domain will be stored into the subscription's endpoint, also known as \n[\"Event Handler\"](https://docs.microsoft.com/azure/event-grid/event-handlers).\n\nYou may use the event handler's SDK to receive the events in Json String and then use the `EventGridEvent.fromString()` or `CloudEvent.fromString()`\ndeserialize the events. The data part of the events can be in binary, String, or JSON data. \n\n## Examples\n\n### Sending Events To Event Grid Topics\n\nEvents can be sent in the `EventGridEvent`, `CloudEvent`, or a custom schema, as detailed in [Event Schemas](#event-schemas).\nThe topic or domain must be configured to accept the schema being sent. For simplicity,\nthe synchronous client is used for samples, however the asynchronous client has the same method names.\n\nNote: figure out what schema (cloud event, event grid event, or custom event) the event grid topic accepts before you start sending.\n#### Sending `EventGridEvent` to a topic that accepts EventGridEvent schema\n\n```java readme-sample-sendEventGridEventsToTopic\n// Make sure that the event grid topic or domain you're sending to is able to accept the EventGridEvent schema.\nList<EventGridEvent> events = new ArrayList<>();\nUser user = new User(\"John\", \"James\");\nevents.add(new EventGridEvent(\"exampleSubject\", \"Com.Example.ExampleEventType\", BinaryData.fromObject(user), \"0.1\"));\neventGridEventClient.sendEvents(events);\n```\n\n#### Sending `CloudEvent` to a topic that accepts CloudEvent schema\n\n```java readme-sample-sendCloudEventsToTopic\n// Make sure that the event grid topic or domain you're sending to is able to accept the CloudEvent schema.\nList<CloudEvent> events = new ArrayList<>();\nUser user = new User(\"John\", \"James\");\nevents.add(new CloudEvent(\"https://source.example.com\", \"Com.Example.ExampleEventType\",\n    BinaryData.fromObject(user), CloudEventDataFormat.JSON, \"application/json\"));\ncloudEventClient.sendEvents(events);\n```\n\n#### Sending Custom Events to a topic that accepts custom event schema\n\n```java readme-sample-sendCustomEventsToTopic\n// Make sure that the event grid topic or domain you're sending to is able to accept the custom event schema.\nList<BinaryData> events = new ArrayList<>();\nevents.add(BinaryData.fromObject(new HashMap<String, String>() {\n    {\n        put(\"id\", UUID.randomUUID().toString());\n        put(\"time\", OffsetDateTime.now().toString());\n        put(\"subject\", \"Test\");\n        put(\"foo\", \"bar\");\n        put(\"type\", \"Microsoft.MockPublisher.TestEvent\");\n        put(\"data\", \"example data\");\n        put(\"dataVersion\", \"0.1\");\n    }\n}));\ncustomEventClient.sendEvents(events);\n```\n### Sending Events To Event Grid Domain\n\nAn [Event Grid Domain](https://docs.microsoft.com/azure/event-grid/event-domains) can have thousands of topics\nbut has a single endpoint. You can use a domain to manage a set of related topics. Sending events to the topics of\nan Event Grid Domain is the same as sending events to a regular Event Grid Topic except that you need to \nspecify the `topic` of an `EventGridEvent` if the domain accepts `EventGridEvent` schema.\n\n```java readme-sample-sendEventGridEventsToDomain\nList<EventGridEvent> events = new ArrayList<>();\nUser user = new User(\"John\", \"James\");\nevents.add(new EventGridEvent(\"com/example\", \"Com.Example.ExampleEventType\", BinaryData.fromObject(user), \"1\")\n    .setTopic(\"yourtopic\"));\neventGridEventClient.sendEvents(events);\n```\n\nIf the domain accepts `CloudEvent` schema, the CloudEvent's attribute that is configured to map the `topic` when the \ndomain is created must be set. The default mapping attribute is `source`.\n\n### Receiving and Consuming Events\nThe Event Grid service doesn't store events. So this Event Grid SDK doesn't have an event receiver.\nInstead, events are stored in the [Event Handlers](#event-handlers-and-event-deserialization), including ServiceBus, EventHubs, Storage Queue, WebHook endpoint, or many other supported Azure Services.\nHowever, currently all events will be sent and stored as encoded JSON data. Here is some basic code that details the deserialization \nof events after they're received by the event handlers. Again, the handling is different based on the event schema being received\nfrom the topic/subscription.\n\n#### Deserialize `EventGridEvent` or `CloudEvent` from a Json String\nThe Json String can have a single event or an array of events. The returned result is a list of events.\n\n```java readme-sample-deserializeEvents\n// Deserialize an EventGridEvent\nString eventGridEventJsonData = \"<your EventGridEvent json String>\";\nList<EventGridEvent> eventGridEvents = EventGridEvent.fromString(eventGridEventJsonData);\n\n// Deserialize a CloudEvent\nString cloudEventJsonData = \"<your CloudEvent json String>\";\nList<CloudEvent> cloudEvents = CloudEvent.fromString(cloudEventJsonData);\n```\n\n#### Deserialize data from a `CloudEvent` or `EventGridEvent`\nOnce you deserialize the `EventGridEvent` or `CloudEvent` from a Json String, you can use `getData()` of \n`CloudEvent` or `EventGridEvent` to get the payload of the event. It returns a `BinaryData`\nobject, which has methods to further deserialize the data into usable types:\n- `BinaryData.toBytes()` gets the data as a byte[]\n- `BinaryData.toString()` gets the data as a String\n- `BinaryData.toObject()` gets the data as an object of a specific type. It uses Json deserializer by default. It has\n  an overload to accept your deserializer if you want to use your own.\n\n```java readme-sample-deserializeEventData\nBinaryData eventData = eventGridEvent.getData();\n\n//Deserialize data to a model class\nUser dataInModelClass = eventData.toObject(User.class);\n\n//Deserialize data to a Map\nMap<String, Object> dataMap = eventData.toObject(new TypeReference<Map<String, Object>>() {\n});\n\n//Deserialize Json String to a String\nString dataString = eventData.toObject(String.class);\n\n//Deserialize String data to a String\nString dataInJsonString = eventData.toString();\n\n//Deserialize data to byte array (byte[])\nbyte[] dataInBytes = eventData.toBytes();\n```  \n\n#### Deserialize system event data from `CloudEvent` or `EventGridEvent`\nAn event that is sent to a [System Topic](https://docs.microsoft.com/azure/event-grid/system-topics) is called a\nSystem Topic Event, or System Event. \nA system topic in Event Grid represents events published by an [Event Source](https://docs.microsoft.com/azure/event-grid/overview#event-sources) like Azure Storage, Azure Event Hubs, App Configuration and so on.\nAn example is when a blob is created, a system event with event type \"Microsoft.Storage.BlobCreated\" is sent to the configured System Topic. \nThe system event class for this event type is `StorageBlobCreatedEventData` defined in package `com.azure.messaging.eventgrid.systemevents`.\nEventGrid has system events for:\n- [Azure App Configuration](https://docs.microsoft.com/azure/event-grid/event-schema-app-configuration)\n- [Azure App Service](https://docs.microsoft.com/azure/event-grid/event-schema-app-service)\n- [Azure Blob Storage](https://docs.microsoft.com/azure/event-grid/event-schema-blob-storage)\n- ...\n- Refer to [Azure services that support system topics](https://docs.microsoft.com/azure/event-grid/system-topics#azure-services-that-support-system-topics) for many other services.\n- Refer to package `com.azure.messaging.eventgrid.systemevents` for the related system event classes\n\nYou can't send a System Event to a System Topic by using this SDK.\n\nReceiving and consuming system events is the same as other events. Additionally, a set of model classes\nfor the various system event data are defined in package `com.azure.messaging.eventgrid.systemevents`. You can do the \nfollowing after you deserialize an event by using `EventGridEvent.fromString()` or `CloudEvent.fromString()`:\n- look up the system event data model class that the System Event data can be deserialized to;\n\n```java readme-sample-lookupSystemEventClass\n// Look up the System Event data class\nClass<?> eventDataClazz = SystemEventNames.getSystemEventMappings().get(event.getEventType());\n```\n- deserialize a system event's data to a model class instance like deserializing any other event data;\n\n```java readme-sample-deserializeToSystemEventType\n// Deserialize the event data to an instance of a specific System Event data class type\nBinaryData data = event.getData();\nif (data != null) {\n    StorageBlobCreatedEventData blobCreatedData = data.toObject(StorageBlobCreatedEventData.class);\n    System.out.println(blobCreatedData.getUrl());\n}\n```\n- deal with multiple event types.\n\n```java readme-sample-systemEventDifferentEventData\nList<EventGridEvent> eventGridEvents = EventGridEvent.fromString(\"<Your EventGridEvent Json String>\");\nfor (EventGridEvent eventGridEvent : eventGridEvents) {\n    BinaryData binaryData = eventGridEvent.getData();\n    switch (eventGridEvent.getEventType()) {\n        case SystemEventNames.APP_CONFIGURATION_KEY_VALUE_DELETED:\n            AppConfigurationKeyValueDeletedEventData keyValueDeletedEventData =\n                binaryData.toObject(TypeReference.createInstance(AppConfigurationKeyValueDeletedEventData.class));\n            System.out.println(\"Processing the AppConfigurationKeyValueDeletedEventData...\");\n            System.out.printf(\"The key is: %s%n\", keyValueDeletedEventData.getKey());\n            break;\n        case SystemEventNames.APP_CONFIGURATION_KEY_VALUE_MODIFIED:\n            AppConfigurationKeyValueModifiedEventData keyValueModifiedEventData =\n                binaryData.toObject(TypeReference.createInstance(AppConfigurationKeyValueModifiedEventData.class));\n            System.out.println(\"Processing the AppConfigurationKeyValueModifiedEventData...\");\n            System.out.printf(\"The key is: %s%n\", keyValueModifiedEventData.getKey());\n            break;\n        default:\n            System.out.printf(\"%s isn't an AppConfiguration event data%n\", eventGridEvent.getEventType());\n            break;\n    }\n}\n```\n### More samples\nSome additional sample code can be found [here][samples].\n\n## Troubleshooting\n\n### Responses and error codes\n\nService responses are returned in the form of Http status codes, including a number\nof error codes. These codes can optionally be returned by the `PublisherClient`.\nUnexpected status codes are thrown as [`HttpResponseException`][HttpResponseException] \nwhich wraps the error code.\n\nReference documentation for the event grid service can be found [here][service_docs]. This is a\ngood place to start for problems involving configuration of topics/endpoints, as well as for\nproblems involving error codes from the service.\n\n### Distributed Tracing\nThe Event Grid library supports distributing tracing out of the box. In order to adhere to the CloudEvents specification's [guidance](https://github.com/cloudevents/spec/blob/v1.0.1/extensions/distributed-tracing.md) on distributing tracing, the library will set the `traceparent` and `tracestate` on the `extensionAttributes` of a `CloudEvent` when distributed tracing is enabled. To learn more about how to enable distributed tracing in your application, take a look at the Azure SDK Java [distributed tracing documentation](https://docs.microsoft.com/azure/developer/java/sdk/tracing).\n\n\n### Help and Issues\n\nReference documentation for the SDK can be found [here][javadocs]. This is a good first step\nto understanding the purpose of each method called, as well as possible reasons for errors\nor unexpected behavior.\n\nIf you encounter any bugs with these SDKs, please file issues via [Issues](https://github.com/Azure/azure-sdk-for-java/issues) or checkout [StackOverflow for Azure Java SDK](https://stackoverflow.com/questions/tagged/azure-java-sdk).\n\n## Next steps\n\n- [Azure Java SDKs](https://docs.microsoft.com/java/azure/)\n- If you don't have a Microsoft Azure subscription you can get a FREE trial account [here](https://go.microsoft.com/fwlink/?LinkId=330212)\n- Some additional sample code can be found [here][samples]\n- Additional Event Grid tutorials can be found [here][service_docs]\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create new Pull Request\n\n---\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\n<!-- LINKS -->\n[jdk]: https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable\n[javadocs]: https://azure.github.io/azure-sdk-for-java/eventgrid.html\n[azure_subscription]: https://azure.microsoft.com/free\n[maven]: https://maven.apache.org/\n[HttpResponseException]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core/src/main/java/com/azure/core/exception/HttpResponseException.java\n[samples]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/eventgrid/azure-messaging-eventgrid/src/samples/java/com/azure/messaging/eventgrid\n[eventgrid]: https://azure.com/eventgrid\n[portal]: https://ms.portal.azure.com/\n[cli]: https://docs.microsoft.com/cli/azure\n[service_docs]: https://docs.microsoft.com/azure/event-grid/\n[sources]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/eventgrid/azure-messaging-eventgrid/src\n[EventGridEvent]: https://docs.microsoft.com/azure/event-grid/event-schema\n[CloudEvent]: https://github.com/cloudevents/spec/blob/master/spec.md\n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Feventgrid%2Fazure-messaging-eventgrid%2FREADME.png)\n",
        "repo_name": "eventgrid/azure-messaging-eventgrid",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/eventgrid/azure-messaging-eventgrid",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager EventGrid client library for Java\n\nAzure Resource Manager EventGrid client library for Java.\n\nThis package contains Microsoft Azure SDK for EventGrid Management SDK. Azure EventGrid Management Client. Package tag package-2023-06-preview. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-eventgrid;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-eventgrid</artifactId>\n    <version>1.2.0-beta.4</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nEventGridManager manager = EventGridManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/eventgrid/azure-resourcemanager-eventgrid/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "eventgrid/azure-resourcemanager-eventgrid",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/eventgrid/azure-resourcemanager-eventgrid",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Event Grid\n> Please note, a newer package [com.azure:azure-messaging-eventgrid](https://search.maven.org/artifact/com.azure/azure-messaging-eventgrid) for [Azure EventGrid](https://docs.microsoft.com/azure/event-grid/) is available as of March 2021. While this package will continue to receive critical bug fixes, we strongly encourage you to upgrade. Read the [migration guide](https://aka.ms/azsdk/java/migrate/eg) for more details.\n> \nThis project provides client tools or utilities in Java that make it east to interact with [Azure Event Grid](https://azure.com/eventgrid). For documentation please see the Microsoft Azure [Java Developer Center](https://azure.microsoft.com/develop/java/) or the [JavaDocs](https://azure.github.io/azure-sdk-for-java/).\n\nAzure Event Grid is a fully-managed intelligent event routing service that allows for uniform event consumption using a publish-subscribe model.\n\n## Table of contents\n\n## Code snippets and samples\n\nPlease check back as we add samples and link them here.\n\n## Download\n\n### Latest stable release\n\nTo get the binaries of the official Microsoft Azure Event Grid Java SDK as distributed by Microsoft, reade for use within your project, you can use Maven.\n\n[//]: # ({x-version-update-start;com.microsoft.azure:azure-eventgrid;current})\n```xml\n<dependency>\n    <groupId>com.microsoft.azure</groupId>\n    <artifactId>azure-eventgrid</artifactId>\n    <version>1.4.0</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n## Prerequisites\n\n- A Java Developer Kit (JDK), v 1.7 or later\n- Maven\n\n## Help and Issues\n\nIf you encounter any bugs with these SDKs, please file issues via [Issues](https://github.com/Azure/azure-sdk-for-java/issues) or checkout [StackOverflow for Azure Java SDK](https://stackoverflow.com/questions/tagged/azure-java-sdk).\n\n## Contribute Code\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create new Pull Request\n\n## More information\n\n- [Javadoc](https://azure.github.io/azure-sdk-for-java/)\n- [Azure Java SDKs](https://docs.microsoft.com/java/azure/)\n- If you don't have a Microsoft Azure subscription you can get a FREE trial account [here](https://go.microsoft.com/fwlink/?LinkId=330212)\n\n---\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Feventgrid%2Fmicrosoft-azure-eventgrid%2FREADME.png)\n",
        "repo_name": "eventgrid/microsoft-azure-eventgrid",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/eventgrid/microsoft-azure-eventgrid",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Event Hubs Checkpoint Store client library for Java using Storage Blobs\n\nAzure Event Hubs Checkpoint Store can be used for storing checkpoints while processing events from Azure Event Hubs.\nThis package uses Storage Blobs as a persistent store for maintaining checkpoints and partition ownership information.\nThe `BlobCheckpointStore` provided in this package can be plugged in to `EventProcessor`.\n\n[Source code][source_code] | [API reference documentation][api_documentation] | [Product\ndocumentation][event_hubs_product_docs] | [Samples][sample_examples]\n\n## Getting started\n\n### Prerequisites\n\n- A [Java Development Kit (JDK)][jdk_link], version 8 or later.\n- [Maven][maven]\n- Microsoft Azure subscription\n    - You can create a free account at: [https://azure.microsoft.com](https://azure.microsoft.com)\n- Azure Event Hubs instance\n    - Step-by-step guide for [creating an Event Hub using the Azure Portal][event_hubs_create]\n- Azure Storage account\n    - Step-by-step guide for [creating a Storage account using the Azure Portal][storage_account]\n\n### Include the package\n#### Include the BOM file\n\nPlease include the azure-sdk-bom to your project to take dependency on the General Availability (GA) version of the library. In the following snippet, replace the {bom_version_to_target} placeholder with the version number.\nTo learn more about the BOM, see the [AZURE SDK BOM README](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/boms/azure-sdk-bom/README.md).\n\n```xml\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>com.azure</groupId>\n            <artifactId>azure-sdk-bom</artifactId>\n            <version>{bom_version_to_target}</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n```\nand then include the direct dependency in the dependencies section without the version tag as shown below.\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-messaging-eventhubs-checkpointstore-blob</artifactId>\n  </dependency>\n</dependencies>\n```\n\n#### Include direct dependency\nIf you want to take dependency on a particular version of the library that is not present in the BOM,\nadd the direct dependency to your project as follows.\n\n[//]: # ({x-version-update-start;com.azure:azure-messaging-eventhubs-checkpointstore-blob;current})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-messaging-eventhubs-checkpointstore-blob</artifactId>\n    <version>1.16.6</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Authenticate the storage container client\n\nIn order to create an instance of `BlobCheckpointStore`, a `ContainerAsyncClient` should first be created with\nappropriate SAS token with write access and connection string. To make this possible you'll need the Account SAS\n(shared access signature) string of Storage account. Learn more at [SAS Token][sas_token].\n\n## Key concepts\n\n### Checkpointing\n\nCheckpointing is a process by which readers mark or commit their position within a partition event sequence.\nCheckpointing is the responsibility of the consumer and occurs on a per-partition basis within a consumer group.\nThis responsibility means that for each consumer group, each partition reader must keep track of its current position\nin the event stream, and can inform the service when it considers the data stream complete. If a reader disconnects from\na partition, when it reconnects it begins reading at the checkpoint that was previously submitted by the last reader of\nthat partition in that consumer group. When the reader connects, it passes the offset to the event hub to specify the\nlocation at which to start reading. In this way, you can use checkpointing to both mark events as \"complete\" by\ndownstream applications, and to provide resiliency if a failover between readers running on different machines occurs.\nIt is possible to return to older data by specifying a lower offset from this checkpointing process. Through this\nmechanism, checkpointing enables both failover resiliency and event stream replay.\n\n### Offsets & sequence numbers\n\nBoth offset & sequence number refer to the position of an event within a partition. You can think of them as a\nclient-side cursor. The offset is a byte numbering of the event. The offset/sequence number enables an event consumer\n(reader) to specify a point in the event stream from which they want to begin reading events. You can specify the\ntimestamp such that you receive events that were enqueued only after the given timestamp. Consumers are responsible for\nstoring their own offset values outside the Event Hubs service. Within a partition, each event includes an offset,\nsequence number, and the timestamp of when it was enqueued.\n\n## Examples\n- [Create an instance of Storage Container client][sample_container_client]\n- [Create an instance using Azure Identity][sample_azure_identity]\n- [Consume events from all Event Hub partitions][sample_event_processor]\n- [Specify storage version to create checkpoint store][sample_checkpointstore_custom_storage_version]\n\n### Create an instance of Storage container with SAS token\n\n```java readme-sample-createBlobContainerClient\nBlobContainerAsyncClient blobContainerAsyncClient = new BlobContainerClientBuilder()\n    .connectionString(\"<STORAGE_ACCOUNT_CONNECTION_STRING>\")\n    .containerName(\"<CONTAINER_NAME>\")\n    .sasToken(\"<SAS_TOKEN>\")\n    .buildAsyncClient();\n```\n\n### Consume events using an Event Processor Client\n\nTo consume events for all partitions of an Event Hub, you'll create an\n[`EventProcessorClient`][source_eventprocessorclient] for a specific consumer group. When an Event Hub is created, it\nprovides a default consumer group that can be used to get started.\n\nThe [`EventProcessorClient`][source_eventprocessorclient] will delegate processing of events to a callback function that you\nprovide, allowing you to focus on the logic needed to provide value while the processor holds responsibility for\nmanaging the underlying consumer operations.\n\nIn our example, we will focus on building the [`EventProcessor`][source_eventprocessorclient], use the\n[`BlobCheckpointStore`][source_blobcheckpointstore], and a simple callback function to process the events\nreceived from the Event Hubs, writes to console and updates the checkpoint in Blob storage after each event.\n\n```java readme-sample-consumeEventsUsingEventProcessor\nBlobContainerAsyncClient blobContainerAsyncClient = new BlobContainerClientBuilder()\n    .connectionString(\"<STORAGE_ACCOUNT_CONNECTION_STRING>\")\n    .containerName(\"<CONTAINER_NAME>\")\n    .sasToken(\"<SAS_TOKEN>\")\n    .buildAsyncClient();\n\nEventProcessorClient eventProcessorClient = new EventProcessorClientBuilder()\n    .consumerGroup(\"<< CONSUMER GROUP NAME >>\")\n    .connectionString(\"<< EVENT HUB CONNECTION STRING >>\")\n    .checkpointStore(new BlobCheckpointStore(blobContainerAsyncClient))\n    .processEvent(eventContext -> {\n        System.out.println(\"Partition id = \" + eventContext.getPartitionContext().getPartitionId() + \" and \"\n            + \"sequence number of event = \" + eventContext.getEventData().getSequenceNumber());\n    })\n    .processError(errorContext -> {\n        System.out.println(\"Error occurred while processing events \" + errorContext.getThrowable().getMessage());\n    })\n    .buildEventProcessorClient();\n\n// This will start the processor. It will start processing events from all partitions.\neventProcessorClient.start();\n\n// (for demo purposes only - adding sleep to wait for receiving events)\nTimeUnit.SECONDS.sleep(2);\n\n// When the user wishes to stop processing events, they can call `stop()`.\neventProcessorClient.stop();\n```\n\n## Troubleshooting\n\n### Enable client logging\n\nAzure SDK for Java offers a consistent logging story to help aid in troubleshooting application errors and expedite\ntheir resolution. The logs produced will capture the flow of an application before reaching the terminal state to help\nlocate the root issue. View the [logging][logging] wiki for guidance about enabling logging.\n\n### Default SSL library\n\nAll client libraries, by default, use the Tomcat-native Boring SSL library to enable native-level performance for SSL\noperations. The Boring SSL library is an uber jar containing native libraries for Linux / macOS / Windows, and provides\nbetter performance compared to the default SSL implementation within the JDK. For more information, including how to\nreduce the dependency size, refer to the [performance tuning][performance_tuning] section of the wiki.\n\n## Next steps\n\nGet started by exploring the samples [here][samples_readme].\n\n## Contributing\n\nIf you would like to become an active contributor to this project please refer to our [Contribution\nGuidelines](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/eventhubs/azure-messaging-eventhubs-checkpointstore-blob/CONTRIBUTING.md) for more information.\n\n<!-- Links -->\n[api_documentation]: https://azure.github.io/azure-sdk-for-java\n[event_hubs_create]: https://docs.microsoft.com/azure/event-hubs/event-hubs-create\n[event_hubs_product_docs]: https://docs.microsoft.com/azure/event-hubs/\n[java_8_sdk_javadocs]: https://docs.oracle.com/javase/8/docs/api/java/util/logging/package-summary.html\n[jdk_link]: https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable\n[logging]: https://github.com/Azure/azure-sdk-for-java/wiki/Logging-with-Azure-SDK\n[maven]: https://maven.apache.org/\n[performance_tuning]: https://github.com/Azure/azure-sdk-for-java/wiki/Performance-Tuning\n[samples_readme]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/eventhubs/azure-messaging-eventhubs-checkpointstore-blob/src/samples/README.md\n[sample_azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/eventhubs/azure-messaging-eventhubs-checkpointstore-blob/src/samples/java/com/azure/messaging/eventhubs/checkpointstore/blob/EventProcessorWithAzureIdentity.java\n[sample_container_client]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/eventhubs/azure-messaging-eventhubs-checkpointstore-blob/src/samples/java/com/azure/messaging/eventhubs/checkpointstore/blob/BlobCheckpointStoreSample.java\n[sample_event_hubs]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/eventhubs/azure-messaging-eventhubs-checkpointstore-blob/src/samples/java/com/azure/messaging/eventhubs\n[sample_event_processor]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/eventhubs/azure-messaging-eventhubs-checkpointstore-blob/src/samples/java/com/azure/messaging/eventhubs/checkpointstore/blob/EventProcessorBlobCheckpointStoreSample.java\n[sample_checkpointstore_custom_storage_version]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/eventhubs/azure-messaging-eventhubs-checkpointstore-blob/src/samples/java/com/azure/messaging/eventhubs/checkpointstore/blob/EventProcessorWithCustomStorageVersion.java\n[sample_examples]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/eventhubs/azure-messaging-eventhubs-checkpointstore-blob/src/samples/java/com/azure/messaging/eventhubs/checkpointstore/blob\n[sas_token]: https://docs.microsoft.com/azure/storage/common/storage-dotnet-shared-access-signature-part-1\n[source_code]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/eventhubs/azure-messaging-eventhubs-checkpointstore-blob/\n[source_eventprocessorclient]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventProcessorClient.java\n[source_blobcheckpointstore]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/eventhubs/azure-messaging-eventhubs-checkpointstore-blob/src/main/java/com/azure/messaging/eventhubs/checkpointstore/blob/BlobCheckpointStore.java\n[source_loglevels]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/eventhubs/azure-messaging-eventhubs-checkpointstore-blob/.https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/eventhubs/azure-messaging-eventhubs-checkpointstore-blob/core/azure-core/src/main/java/com/azure/core/util/logging/ClientLogger.java\n[storage_account]: https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-portal\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Feventhubs%2Fazure-messaging-eventhubs-checkpointstore-blob%2FREADME.png)\n",
        "repo_name": "eventhubs/azure-messaging-eventhubs-checkpointstore-blob",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/eventhubs/azure-messaging-eventhubs-checkpointstore-blob",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Event Hubs Checkpoint Store client library for Java using the Jedis Client Library for Redis\n\nAzure Event Hubs Checkpoint Store can be used for storing checkpoints while processing events from Azure Event Hubs.\nThis package makes use of Redis as a persistent store for maintaining checkpoints and partition ownership information.\nThe `JedisRedisCheckpointStore` provided in this package can be plugged in to `EventProcessorClient`.\n\n[Source code][source_code]| [API reference documentation][api_documentation] | [Product\ndocumentation][event_hubs_product_docs] | [Samples][sample_examples]\n\n## Getting started\n\n### Prerequisites\n\n- A [Java Development Kit (JDK)][jdk_link], version 8 or later.\n- [Maven][maven]\n- Microsoft Azure subscription\n    - You can create a free account at: [https://azure.microsoft.com](https://azure.microsoft.com)\n- Azure Event Hubs instance\n    - Step-by-step guide for [creating an Event Hub using the Azure Portal][event_hubs_create]\n- Azure Redis Cache or a suitable alternative Redis server\n    - Step-by-step guide for [creating a Redis Cache using the Azure Portal][redis_quickstart]\n\n### Include the package\n#### Include the BOM file\n\nPlease include the azure-sdk-bom to your project to take dependency on the General Availability (GA) version of the library. In the following snippet, replace the {bom_version_to_target} placeholder with the version number.\nTo learn more about the BOM, see the [AZURE SDK BOM README](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/boms/azure-sdk-bom/README.md).\n\n```xml\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>com.azure</groupId>\n            <artifactId>azure-sdk-bom</artifactId>\n            <version>{bom_version_to_target}</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n```\nand then include the direct dependency in the dependencies section without the version tag as shown below.\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-messaging-eventhubs-checkpointstore-jedis</artifactId>\n  </dependency>\n</dependencies>\n```\n\n#### Include direct dependency\nIf you want to take dependency on a particular version of the library that is not present in the BOM,\nadd the direct dependency to your project as follows.\n\n[//]: # ({x-version-update-start;com.azure:azure-messaging-eventhubs-checkpointstore-jedis;current})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-messaging-eventhubs-checkpointstore-jedis</artifactId>\n    <version>1.0.0-beta.1</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Authenticate the storage container client\n\nIn order to create an instance of `JedisCheckpointStore`, a `JedisPool` object must be created. To make this `JedisPool`\nobject, a hostname String and a primary key String are required. These can be used as shown below to create a\n`JedisPool` object.\n\n## Key concepts\n\nKey concepts are explained in detail [here][key_concepts].\n\n## Examples\n- [Create and run an instance of JedisRedisCheckpointStore][sample_jedis_client]\n- [Consume events from all Event Hub partitions][sample_event_processor]\n\n### Create an instance of JedisPool\n\nTo create an instance of JedisPool using Azure Redis Cache, follow the instructions in\n[Use Azure Cache for Redis in Java][redis_quickstart_java] to fetch the hostname and access key.  Otherwise, use\nconnection information from a running Redis instance.\n\n```java readme-sample-createJedis\nJedisClientConfig clientConfig = DefaultJedisClientConfig.builder()\n    .password(\"<YOUR_REDIS_PRIMARY_ACCESS_KEY>\")\n    .ssl(true)\n    .build();\n\nString redisHostName = \"<YOUR_REDIS_HOST_NAME>.redis.cache.windows.net\";\nHostAndPort hostAndPort = new HostAndPort(redisHostName, 6380);\nJedisPool jedisPool = new JedisPool(hostAndPort, clientConfig);\n\n// Do things with JedisPool.\n\n// Finally, dispose of resource\njedisPool.close();\n```\n\n### Consume events using an Event Processor Client\n\nTo consume events for all partitions of an Event Hub, you'll create an\n[`EventProcessorClient`][source_eventprocessorclient] for a specific consumer group. When an Event Hub is created, it\nprovides a default consumer group that can be used to get started.\n\nThe [`EventProcessorClient`][source_eventprocessorclient] will delegate processing of events to a callback function\nthat you provide, allowing you to focus on the logic needed to provide value while the processor holds responsibility\nfor managing the underlying consumer operations.\n\nIn our example, we will focus on building the [`EventProcessor`][source_eventprocessorclient], use the\n[`JedisRedisCheckpointStore`][source_jedisredischeckpointstore], and a simple callback function to process the events\nreceived from the Event Hubs, writes to console and updates the checkpoint in Blob storage after each event.\n\n```java readme-sample-createCheckpointStore\nJedisClientConfig clientConfig = DefaultJedisClientConfig.builder()\n    .password(\"<YOUR_REDIS_PRIMARY_ACCESS_KEY>\")\n    .ssl(true)\n    .build();\n\nString redisHostName = \"<YOUR_REDIS_HOST_NAME>.redis.cache.windows.net\";\nHostAndPort hostAndPort = new HostAndPort(redisHostName, 6380);\nJedisPool jedisPool = new JedisPool(hostAndPort, clientConfig);\n\nEventProcessorClient eventProcessorClient = new EventProcessorClientBuilder()\n    .consumerGroup(\"<< CONSUMER GROUP NAME >>\")\n    .connectionString(\"<< EVENT HUB NAMESPACE CONNECTION STRING >>\")\n    .eventHubName(\"<< EVENT HUB NAME >>\")\n    .checkpointStore(new JedisCheckpointStore(jedisPool))\n    .processEvent(eventContext -> {\n        System.out.println(\"Partition id = \" + eventContext.getPartitionContext().getPartitionId() + \" and \"\n            + \"sequence number of event = \" + eventContext.getEventData().getSequenceNumber());\n    })\n    .processError(context -> {\n        System.out.println(\"Error occurred while processing events \" + context.getThrowable().getMessage());\n    })\n    .buildEventProcessorClient();\n\n// This will start the processor. It will start processing events from all partitions.\neventProcessorClient.start();\n\n// (for demo purposes only - adding sleep to wait for receiving events)\n// Your application will probably keep the eventProcessorClient alive until the program ends.\nTimeUnit.SECONDS.sleep(2);\n\n// When the user wishes to stop processing events, they can call `stop()`.\neventProcessorClient.stop();\n\n// Dispose of JedisPool resource.\njedisPool.close();\n```\n\n## Troubleshooting\n\n### Enable client logging\n\nAzure SDK for Java offers a consistent logging story to help aid in troubleshooting application errors and expedite\ntheir resolution. The logs produced will capture the flow of an application before reaching the terminal state to help\nlocate the root issue. View the [logging][logging] wiki for guidance about enabling logging.\n\n## Next steps\n\nGet started by exploring the samples [here][samples_readme].\n\n## Contributing\n\nIf you would like to become an active contributor to this project please refer to our [Contribution\nGuidelines][guidelines] for more information.\n\n<!-- Links -->\n[api_documentation]: https://azure.github.io/azure-sdk-for-java\n[event_hubs_create]: https://docs.microsoft.com/azure/event-hubs/event-hubs-create\n[event_hubs_product_docs]: https://docs.microsoft.com/azure/event-hubs/\n[jdk_link]: https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable\n[key_concepts]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/eventhubs/azure-messaging-eventhubs-checkpointstore-blob/README.md#key-concepts\n[logging]: https://github.com/Azure/azure-sdk-for-java/wiki/Logging-with-Azure-SDK\n[maven]: https://maven.apache.org/\n[redis_quickstart]: https://learn.microsoft.com/azure/azure-cache-for-redis/quickstart-create-redis\n[redis_quickstart_java]: https://learn.microsoft.com/azure/azure-cache-for-redis/cache-java-get-started\n[samples_readme]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/eventhubs/azure-messaging-eventhubs-checkpointstore-jedis\n[sample_jedis_client]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/eventhubs/azure-messaging-eventhubs-checkpointstore-jedis/src/samples/java/com/azure/messaging/eventhubs/checkpointstore/jedis/JedisCheckpointStoreSample.java\n[sample_event_processor]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/eventhubs/azure-messaging-eventhubs-checkpointstore-jedis/src/samples/java/com/azure/messaging/eventhubs/checkpointstore/jedis/EventProcessorClientJedisSample.java\n[sample_examples]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/eventhubs/azure-messaging-eventhubs-checkpointstore-jedis/src/samples\n[source_code]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/eventhubs/azure-messaging-eventhubs-checkpointstore-jedis\n[source_eventprocessorclient]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventProcessorClient.java\n[source_jedisredischeckpointstore]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/eventhubs/azure-messaging-eventhubs-checkpointstore-jedis/src/main/java/com/azure/messaging/eventhubs/checkpointstore/jedis/JedisCheckpointStore.java\n[guidelines]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n",
        "repo_name": "eventhubs/azure-messaging-eventhubs-checkpointstore-jedis",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/eventhubs/azure-messaging-eventhubs-checkpointstore-jedis",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Event Hubs Stress test client library for Java\n\nRepresents stress tests for Event Hubs client.\n\n## Getting started\n\nThe stress tests for event hubs client is developed from [azure-sdk-chaos][azure_sdk_chaos]. \n\nTo know how to develop a stress test project, you should first go through the [Azure SDK Stress Test Wiki][azure_sdk_stress_test].\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk_link], version 8 or later.\n- [Maven][maven]\n- [Docker][docker]\n- [Kubectl][kubectl]\n- [Helm][helm]\n- [Azure CLI][azure_cli]\n- [Powershell 7.0+][powershell]\n\n### Deploy Stress Test\n\nBuild out the jar package:\n\n```shell\ncd <current project path>\nmvn clean install\n```\n\nRun command to deploy the package to cluster:\n\n```shell\n..\\..\\..\\eng\\common\\scripts\\stress-testing\\deploy-stress-tests.ps1 -Login -PushImage\n``` \n\n### Validate Status\n\nOnly the most frequently used commands are listed below. See [Deploying A Stress Test][deploy_stress_test] for more details. \n\nList deployed packages:\n\n```shell\nhelm list -n <stress test namespace>\n```\n\nGet stress test pods and status:\n\n```shell\nkubectl get pods -n <stress test namespace>\n```\n\nGet stress test pod logs:\n\n```shell\nkubectl logs -n <stress test namespace> <stress test pod name>\n# Note that we may define multiple containers (for example, sender and receiver)\nkubectl logs -n <stress test namespace> <stress test pod name> -c <container name>\n```\n\nIf stress test pod is in `Error` status, check logs from init container:\n\n```shell\nkubectl logs -n <stress test namespace> <stress test pod name> -c init-azure-deployer\n```\n\nIf above command output is empty, there may have been startup failures:\n\n```shell\nkubectl describe pod -n <stress test namespace> <stress test pod name>\n```\n\nStop and remove deployed package:\n\n```shell\nhelm uninstall <stress test name> -n <stress test namespace>\n```\n### Monitoring\n\nAfter the stress test is deployed on the cluster, we can monitor the telemetry data on the application insights which is\ninside the stress test resource group.\n\nThe SDK metrics can also be monitored on application insights as we have imported\n[Azure OpenTelemetry Metrics plugin][azure_core_metrics_opentelemetry] as project dependency.\n\nThere are several dashboards within the stress test resource group that we can use to monitor the AKS pod and stress test status.\n\nIf you want do the local test and enable application insights, you can follow the [steps][enable_application_insights] to set the java agent.\nMake sure you have added the JVM parameters when you start the test.\n\n\n### Logging\n\nWe use [logback.xml][logback_xml] to configure the logging. By default, the stress test run on cluster will output\n`INFO` level log to the file share. The container console only save the `WARN` and `ERROR` level log.\n\nFollow the steps in [Stress Test File Share][stress_test_file_share] to find the file share logs.\n\n\n### Configure Faults\n\nSee [Config Faults][config_faults] section for details.\n\n## Key concepts\n\n### Project Structure\n\nSee [Layout][stress_test_layout] section for details. \n\nBelow is the current structure of project:\n```\n.\n\u251c\u2500\u2500 src/                         # Test code\n\u251c\u2500\u2500 templates/                   # A directory of helm templates that will generate Kubernetes manifest files.\n\u251c\u2500\u2500 Chart.yaml                   # A YAML file containing information about the helm chart and its dependencies\n\u251c\u2500\u2500 scenarios-matrix.yaml        # A YAML file containing configuration and custom values for stress test(s)\n\u251c\u2500\u2500 Dockerfile                   # A Dockerfile for building the stress test image\n\u251c\u2500\u2500 stress-test-resources.bicep  # An Azure Bicep for deploying stress test azure resources\n\u251c\u2500\u2500 pom.xml\n\u2514\u2500\u2500 README.md\n```\n\n### Cluster Namespace \n\nThe cluster namespace is defined in `Chart.yaml`. The default value we set is `java-eh`.\n\n```yaml\nname: <stress test name>\n...\nannotations:\n  namespace: <stress test namespace>\n```\n\nFor local deployment with script, if the namespace option is not specified, the value will be overridden by the shell username.\n\n```shell\n..\\..\\..\\eng\\common\\scripts\\stress-testing\\deploy-stress-tests.ps1 -Namespace <stress test namespace>\n```\n\n## Examples\n\n### Update EventSender\n\nChange `SEND_TIMES` and `SEND_EVENTS` to the number of events you want to send.\n\n### Run EventProcessorWithOptions\n\nModify receiver command in `job.yaml` to run stress test in different scenarios:\n\nScenario 1: receiver does not checkpoint and not write to another new event hub.\n\n```yaml\n    - name: receiver\n      image: {{ .Values.image }}\n      imagePullPolicy: Always\n      command: ['sh', '-c']\n      args:\n          - |\n              set -a &&\n              source $ENV_FILE &&\n              java -javaagent:BOOT-INF/classes/applicationinsights-agent-3.4.1.jar \\\n              \"org.springframework.boot.loader.JarLauncher\" \\\n              --TEST_CLASS=EventProcessorWithOptions --NEED_UPDATE_CHECKPOINT=false --NEED_SEND_EVENT_HUB=false\n      {{- include \"stress-test-addons.container-env\" . | nindent 6 }}\n```\nScenario 2: receiver does checkpoint and not write to another new event hub.\n\n```yaml\n    - name: receiver\n      image: {{ .Values.image }}\n      imagePullPolicy: Always\n      command: ['sh', '-c']\n      args:\n        - |\n          set -a &&\n          source $ENV_FILE &&\n          java -javaagent:BOOT-INF/classes/applicationinsights-agent-3.4.1.jar \\\n          \"org.springframework.boot.loader.JarLauncher\" \\\n          --TEST_CLASS=EventProcessorWithOptions --NEED_UPDATE_CHECKPOINT=true --NEED_SEND_EVENT_HUB=false\n      {{- include \"stress-test-addons.container-env\" . | nindent 6 }}\n```\n\nScenario 3: receiver does checkpoint and write to another event hub.\n\n```yaml\n    - name: receiver\n      image: {{ .Values.image }}\n      imagePullPolicy: Always\n      command: ['sh', '-c']\n      args:\n        - |\n          set -a &&\n          source $ENV_FILE &&\n          java -javaagent:BOOT-INF/classes/applicationinsights-agent-3.4.1.jar \\\n          \"org.springframework.boot.loader.JarLauncher\" \\\n          --TEST_CLASS=EventProcessorWithOptions --NEED_UPDATE_CHECKPOINT=true --NEED_SEND_EVENT_HUB=true\n      {{- include \"stress-test-addons.container-env\" . | nindent 6 }}\n```\n\nScenario 4: Four receiver does checkpoint and not write to another new event hub.\n\n```yaml\n    - name: receiver1\n      image: {{ .Values.image }}\n      imagePullPolicy: Always\n      command: ['sh', '-c']\n      args:\n        - |\n          set -a &&\n          source $ENV_FILE &&\n          java -javaagent:BOOT-INF/classes/applicationinsights-agent-3.4.1.jar \\\n          \"org.springframework.boot.loader.JarLauncher\" \\\n          --TEST_CLASS=EventProcessorWithOptions --NEED_UPDATE_CHECKPOINT=true --NEED_SEND_EVENT_HUB=false\n      {{- include \"stress-test-addons.container-env\" . | nindent 6 }}\n    - name: receiver2\n      image: {{ .Values.image }}\n      imagePullPolicy: Always\n      command: ['sh', '-c']\n      args:\n        - |\n          set -a &&\n          source $ENV_FILE &&\n          java -javaagent:BOOT-INF/classes/applicationinsights-agent-3.4.1.jar \\\n          \"org.springframework.boot.loader.JarLauncher\" \\\n          --TEST_CLASS=EventProcessorWithOptions --NEED_UPDATE_CHECKPOINT=true --NEED_SEND_EVENT_HUB=false\n      {{- include \"stress-test-addons.container-env\" . | nindent 6 }}\n    - name: receiver3\n      image: {{ .Values.image }}\n      imagePullPolicy: Always\n      command: ['sh', '-c']\n      args:\n        - |\n          set -a &&\n          source $ENV_FILE &&\n          java -javaagent:BOOT-INF/classes/applicationinsights-agent-3.4.1.jar \\\n          \"org.springframework.boot.loader.JarLauncher\" \\\n          --TEST_CLASS=EventProcessorWithOptions --NEED_UPDATE_CHECKPOINT=true --NEED_SEND_EVENT_HUB=false\n      {{- include \"stress-test-addons.container-env\" . | nindent 6 }}\n    - name: receiver4\n      image: {{ .Values.image }}\n      imagePullPolicy: Always\n      command: ['sh', '-c']\n      args:\n        - |\n          set -a &&\n          source $ENV_FILE &&\n          java -javaagent:BOOT-INF/classes/applicationinsights-agent-3.4.1.jar \\\n          \"org.springframework.boot.loader.JarLauncher\" \\\n          --TEST_CLASS=EventProcessorWithOptions --NEED_UPDATE_CHECKPOINT=true --NEED_SEND_EVENT_HUB=false\n      {{- include \"stress-test-addons.container-env\" . | nindent 6 }}\n```\n\n### Add New Test Scenario\n\nAdd a new test class under `\\scenarios`.\n\nExtend `EventHubsScenarios` and implement test logic in `run()` method.\n\nConfigure new class as bean and use class name as its bean name.\n\nUpdate `args` field in `job.yaml` to execute the new test class.\n\nBuild out jar package and redeploy to cluster.\n\n### Add New Scenario Option\n\nWe use [Spring][spring_configuration] to inject environment variable or \ncommand line arguments as the scenario options. \n\nYou can add new scenario option in [ScenarioOptions][ScenarioOptions] with below format: \n\n```java\n@Value(\"NEW_OPTION: default value\")\nprivate Type newOption;\n\npublic Type getNewOption() {\n    return newOption;\n}\n```\n\nIt is recommended to provide a default value for the new option, as it will not have any impact \non the existing job configuration.\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- links -->\n[azure_sdk_chaos]: https://github.com/Azure/azure-sdk-tools/blob/main/tools/stress-cluster/chaos/README.md\n[azure_sdk_stress_test]: https://aka.ms/azsdk/stress\n[jdk_link]: https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable\n[maven]: https://maven.apache.org/\n[docker]: https://docs.docker.com/get-docker/\n[kubectl]: https://kubernetes.io/docs/tasks/tools/#kubectl\n[helm]: https://helm.sh/docs/intro/install/\n[azure_cli]: https://docs.microsoft.com/cli/azure/install-azure-cli\n[powershell]: https://docs.microsoft.com/powershell/scripting/install/installing-powershell?view=powershell-7\n[azure_core_metrics_opentelemetry]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/core/azure-core-metrics-opentelemetry\n[logback_xml]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/eventhubs/azure-messaging-eventhubs-stress/src/main/resources/logback.xml\n[stress_test_file_share]: https://github.com/Azure/azure-sdk-tools/blob/main/tools/stress-cluster/chaos/README.md#stress-test-file-share\n[enable_application_insights]: https://docs.microsoft.com/azure/azure-monitor/app/java-in-process-agent#enable-azure-monitor-application-insights\n[deploy_stress_test]: https://github.com/Azure/azure-sdk-tools/blob/main/tools/stress-cluster/chaos/README.md#deploying-a-stress-test\n[config_faults]: https://github.com/Azure/azure-sdk-tools/blob/main/tools/stress-cluster/chaos/README.md#configuring-faults\n[stress_test_layout]: https://github.com/Azure/azure-sdk-tools/blob/main/tools/stress-cluster/chaos/README.md#layout\n[spring_configuration]: https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.external-config\n[ScenarioOptions]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/eventhubs/azure-messaging-eventhubs-stress/src/main/java/com/azure/messaging/eventhubs/stress/util/ScenarioOptions.java\n",
        "repo_name": "eventhubs/azure-messaging-eventhubs-stress",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/eventhubs/azure-messaging-eventhubs-stress",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Event Hubs Track 1 Performance test client library for Java\n\nRepresents performance tests for legacy Event Hubs client.\n\n## Getting started\n\n### Prerequisites\n\n- A [Java Development Kit (JDK)][jdk_link], version 8 or later.\n- [Maven][maven]\n- Microsoft Azure subscription\n    - You can create a free account at: [https://azure.microsoft.com](https://azure.microsoft.com)\n- Azure Event Hubs instance\n    - Step-by-step guide for [creating an Event Hub using the Azure Portal][event_hubs_create]\n\n### Create the jar package\n\nExecute: `mvn package -pl com.azure:azure-messaging-eventhubs-track1-perf`\n\n## Key concepts\n\n## Examples\n\nExecuting the jar without any command-line arguments will display a help menu with all the available options and their\nrequired parameters.\n\n### Sending EventData\n\nThe command below runs the scenario for sending messages.\n\n- (REQUIRED) `-cs` is the connection string for the Event Hubs namespace.\n- (REQUIRED) `-n` is the name of the Event Hub.\n- `-c` is the number of EventData to send, 500 events.\n- `-d` is the test duration, 60 seconds.\n- `--warmup` is the warm-up time, 0 seconds.\n- Specifying `--partitionId` will change from publishing messages round-robin to publishing messages to a specific\n  partition.\n\n```bash\njava -jar azure-messaging-eventhubs-track1-perf-1.0.0-beta.1-jar-with-dependencies.jar \\\nsendeventdata -cs \"<<event-hubs-namespace-connection-string>>\" -n \"<<event-hub-name>>\" \\\n-c 500 -d 60 --warmup 0\n```\n\n### Receive using PartitionReceiver\n\nThe command below runs the scenario for receiving messages from a single partition. This uses the low level receiver.\n\n- (REQUIRED) `-cs` is the connection string for the Event Hubs namespace.\n- (REQUIRED) `-n` is the name of the Event Hub.\n- (REQUIRED) `--partitionId` is the partition to receive events from.\n- `--count` is the number of EventData to receive, 100.\n- `--duration` is the test duration, 60 seconds.\n- `--consumerGroup` is the consumer group to use when receiving messages. If none is specified the default, \"$DEFAULT\"\n  is used.\n- `--warmup` is the warm-up time, 0 seconds.\n\n```bash\njava -jar azure-messaging-eventhubs-track1-perf-1.0.0-beta.1-jar-with-dependencies.jar \\\nreceiveevents -cs \"<<event-hubs-namespace-connection-string>>\" -n \"<<event-hub-name>>\" \\\n--partitionId \"0\" --consumerGroup \"<<consumer-group-name>>\"  --count 100 --duration 60 --warmup 0\n```\n\n### Receive using EventProcessorHost\n\nThe command below runs the scenario for receiving messages via EventProcessorHost. This is comparable to\nEventProcessorClient in our new library.\n\n**NOTE: Assumes that there are many events in the Event Hub already.**\n\nThis test runs for `--duration` period of time, and aggregates how many events were received from each partition during\nthat time.  The results print out differently because we added some custom counting that is not available in the base\nperformance library.\n\n- (REQUIRED) `-cs` is the connection string for the Event Hubs namespace.\n- (REQUIRED) `-n` is the name of the Event Hub.\n- (REQUIRED) `--storageEndpoint` is the endpoint for the storage account.\n- (REQUIRED) `--storageConnectionString` is the connection string for the storage account.\n- `--duration` is the test duration, 600 seconds.\n- `--warmup` is the warm-up time, 0 seconds.\n- The consumer group was not specified, so the default, \"$DEFAULT\" is used.\n\n```bash\njava -jar azure-messaging-eventhubs-track1-perf-1.0.0-beta.1-jar-with-dependencies.jar \\\neventprocessor -cs \"<<event-hubs-namespace-connection-string>>\" -n \"<<event-hub-name>>\" \\\n--storageEndpoint \"https://my-storage.blob.core.windows.net/\" \\\n--storageConnectionString \"<<storage-account-connection-string>>\" \\\n--duration 600 --warmup 0\n```\n\n#### Publish events before running EventProcessorHost\n\nEvents can be published to the Event Hub prior to running the EventProcessorClient test. Adding `--publish` and\n`--eventsToSend <# of Events>` will publish that number of events to each partition before starting the run.\n\n`--publish` is off by default because an Event Hub can store events for many days and receiving events starts from the\nbeginning of a stream.\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- links -->\n[event_hubs_create]: https://docs.microsoft.com/azure/event-hubs/event-hubs-create\n[jdk_link]: https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable\n[maven]: https://maven.apache.org/\n",
        "repo_name": "eventhubs/azure-messaging-eventhubs-track1-perf",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/eventhubs/azure-messaging-eventhubs-track1-perf",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Event Hubs Track 2 Performance test client library for Java\n\nRepresents performance tests for newer Event Hubs client.\n\n## Getting started\n\n### Prerequisites\n\n- A [Java Development Kit (JDK)][jdk_link], version 8 or later.\n- [Maven][maven]\n- Microsoft Azure subscription\n    - You can create a free account at: [https://azure.microsoft.com](https://azure.microsoft.com)\n- Azure Event Hubs instance\n    - Step-by-step guide for [creating an Event Hub using the Azure Portal][event_hubs_create]\n\n### Create the jar package\n\nExecute: `mvn package -pl com.azure:azure-messaging-eventhubs-track2-perf`\n\n## Key concepts\n\n## Examples\n\nExecuting the jar without any command-line arguments will display a help menu with all the available options and their\nrequired parameters.\n\n### Sending EventData\n\nThe command below runs the scenario for sending messages.\n\n- (REQUIRED) `-cs` is the connection string for the Event Hubs namespace.\n- (REQUIRED) `-n` is the name of the Event Hub.\n- `-c` is the number of EventData to send, 500 events.\n- `-d` is the test duration, 60 seconds.\n- `--warmup` is the warm-up time, 0 seconds.\n\n```bash\njava -jar azure-messaging-eventhubs-track2-perf-1.0.0-beta.1-jar-with-dependencies.jar \\\nsendeventdata -cs \"<<event-hubs-namespace-connection-string>>\" -n \"<<event-hub-name>>\" \\\n-c 500 -d 60 --warmup 0\n```\n\n### Receive using EventHubConsumerAsyncClient\n\nThe command below runs the scenario for receiving messages from a single partition. This uses the low level receiver.\n\n- (REQUIRED) `-cs` is the connection string for the Event Hubs namespace.\n- (REQUIRED) `-n` is the name of the Event Hub.\n- (REQUIRED) `--partitionId` is the partition to receive events from.\n- `--consumerGroup` is the consumer group to use when receiving messages. If none is specified the default, \"$DEFAULT\"\n  is used.\n- `--count` is the number of EventData to receive, 100.\n- `--duration` is the test duration, 60 seconds.\n- `--warmup` is the warm-up time, 0 seconds.\n\n```bash\njava -jar azure-messaging-eventhubs-track2-perf-1.0.0-beta.1-jar-with-dependencies.jar \\\nreceiveevents -cs \"<<event-hubs-namespace-connection-string>>\" -n \"<<event-hub-name>>\" \\\n--partitionId \"0\" --consumerGroup \"<<consumer-group-name>>\"  --count 100 --duration 60 --warmup 0\n```\n\n### Receive using EventProcessorClient\n\nThe command below runs the scenario for receiving messages via EventProcessorClient.\n\n**NOTE: Assumes that there are many events in the Event Hub already.**\n\nThis test runs for `--duration` period of time, and aggregates how many events were received from each partition during\nthat time.  The results print out differently because we added some custom counting that is not available in the base\nperformance library.\n\n- (REQUIRED) `-cs` is the connection string for the Event Hubs namespace.\n- (REQUIRED) `-n` is the name of the Event Hub.\n- (REQUIRED) `--storageEndpoint` is the endpoint for the storage account.\n- (REQUIRED) `--storageConnectionString` is the connection string for the storage account.\n- `--prefetch` is the number of credits to initially add to each partition receiver when they begin receiving, 750\n  credits.\n- `--duration` is the test duration, 600 seconds.\n- `--warmup` is the warm-up time, 0 seconds.\n- The consumer group was not specified, so the default, \"$DEFAULT\" is used.\n\n```bash\njava -jar azure-messaging-eventhubs-track2-perf-1.0.0-beta.1-jar-with-dependencies.jar \\\neventprocessor -cs \"<<event-hubs-namespace-connection-string>>\" -n \"<<event-hub-name>>\" \\\n--storageEndpoint \"https://my-storage.blob.core.windows.net/\" \\\n--storageConnectionString \"<<storage-account-connection-string>>\" \\\n--prefetch 750 --duration 600 --warmup 0\n```\n\n#### Publish events before running EventProcessorClient\n\nEvents can be published to the Event Hub prior to running the EventProcessorClient test. Adding `--publish` and\n`--eventsToSend <# of Events>` will publish that number of events to each partition before starting the run.\n\n`--publish` is off by default because an Event Hub can store events for many days and receiving events starts from the\nbeginning of a stream.\n\n### Receive using ReactorReceiver\n\nThis removes the cost of filtering events through EventHubConsumerAsyncClient and EventProcessorClient.\n\n- (REQUIRED) `-cs` is the connection string for the Event Hubs namespace.\n- (REQUIRED) `-n` is the name of the Event Hub.\n- (REQUIRED) `--partitionId` is the partition to receive events from.\n- `--consumerGroup` is the consumer group to use when receiving messages. If none is specified the default, \"$DEFAULT\"\n  is used.\n- `--count` is the number of EventData to receive, 1500.\n- `--prefetch` is the number of credits to initially add to each partition receiver when they begin receiving, 250\n  credits.\n- `--credits` is the number of credits to add **after** the \"prefetch\" credits have been consumed. In this case,\n  continue to add 500 credits after the initial 250 are consumed.\n- `--duration` is the test duration, 60 seconds.\n- `--warmup` is the warm-up time, 0 seconds.\n\n```bash\njava -jar azure-messaging-eventhubs-track2-perf-1.0.0-beta.1-jar-with-dependencies.jar \\\nreactorreceiveevents -cs \"<<event-hubs-namespace-connection-string>>\" -n \"<<event-hub-name>>\" \\\n--consumerGroup \"my-consumer-group\" --partitionId \"1\" --count 1500 --prefetch 250 --credits 500 \\\n--duration 60 --warmup 0\n```\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- links -->\n[event_hubs_create]: https://docs.microsoft.com/azure/event-hubs/event-hubs-create\n[jdk_link]: https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable\n[maven]: https://maven.apache.org/\n",
        "repo_name": "eventhubs/azure-messaging-eventhubs-track2-perf",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/eventhubs/azure-messaging-eventhubs-track2-perf",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Event Hubs client library for Java\n\nAzure Event Hubs is a highly scalable publish-subscribe service that can ingest millions of events per second and stream\nthem to multiple consumers. This lets you process and analyze the massive amounts of data produced by your connected\ndevices and applications. Once Event Hubs has collected the data, you can retrieve, transform, and store it by using any\nreal-time analytics provider or with batching/storage adapters. If you would like to know more about Azure Event Hubs,\nyou may wish to review: [What is Event Hubs](https://docs.microsoft.com/azure/event-hubs/event-hubs-about)?\n\nThe Azure Event Hubs client library allows for publishing and consuming of Azure Event Hubs events and may be used to:\n\n- Emit telemetry about your application for business intelligence and diagnostic purposes.\n- Publish facts about the state of your application which interested parties may observe and use as a trigger for taking\n  action.\n- Observe interesting operations and interactions happening within your business or other ecosystem, allowing loosely\n  coupled systems to interact without the need to bind them together.\n- Receive events from one or more publishers, transform them to better meet the needs of your ecosystem, then publish\n  the transformed events to a new stream for consumers to observe.\n\n[Source code][source_code] | [API reference documentation][api_documentation] | [Product\ndocumentation][event_hubs_product_docs] | [Samples][sample_examples] | [Troubleshooting][troubleshooting]\n\n## Table of contents\n\n- [Getting started](#getting-started)\n  - [Prerequisites](#prerequisites)\n  - [Include the package](#include-the-package)\n    - [Include the BOM file](#include-the-bom-file)\n    - [Include direct dependency](#include-direct-dependency)\n  - [Authenticate the client](#authenticate-the-client)\n    - [Create an Event Hub producer using a connection string](#create-an-event-hub-producer-using-a-connection-string)\n    - [Create an Event Hub client using Microsoft identity platform (formerly Azure Active Directory)](#create-an-event-hub-client-using-microsoft-identity-platform-formerly-azure-active-directory)\n    - [Authorizing with DefaultAzureCredential](#authorizing-with-defaultazurecredential)\n- [Key concepts](#key-concepts)\n- [Examples](#examples)\n  - [Publish events to an Event Hub](#publish-events-to-an-event-hub)\n    - [Create an Event Hub producer and publish events](#create-an-event-hub-producer-and-publish-events)\n    - [Publish events using partition identifier](#publish-events-using-partition-identifier)\n    - [Publish events using partition key](#publish-events-using-partition-key)\n  - [Consume events from an Event Hub partition](#consume-events-from-an-event-hub-partition)\n    - [Consume events with EventHubConsumerAsyncClient](#consume-events-with-eventhubconsumerasyncclient)\n    - [Consume events with EventHubConsumerClient](#consume-events-with-eventhubconsumerclient)\n  - [Consume events using an EventProcessorClient](#consume-events-using-an-eventprocessorclient)\n- [Troubleshooting][troubleshooting]\n- [Next steps](#next-steps)\n- [Contributing](#contributing)\n\n## Getting started\n\n### Prerequisites\n\n- A [Java Development Kit (JDK)][jdk_link], version 8 or later.\n- [Maven][maven]\n- Microsoft Azure subscription\n  - You can create a free account at: [https://azure.microsoft.com](https://azure.microsoft.com)\n- Azure Event Hubs instance\n  - Step-by-step guide for [creating an Event Hub using the Azure Portal][event_hubs_create]\n\n### Include the package\n#### Include the BOM file\n\nPlease include the azure-sdk-bom to your project to take dependency on the General Availability (GA) version of the library. In the following snippet, replace the {bom_version_to_target} placeholder with the version number.\nTo learn more about the BOM, see the [AZURE SDK BOM README](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/boms/azure-sdk-bom/README.md).\n\n```xml\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>com.azure</groupId>\n            <artifactId>azure-sdk-bom</artifactId>\n            <version>{bom_version_to_target}</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n```\nand then include the direct dependency in the dependencies section without the version tag as shown below.\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-messaging-eventhubs</artifactId>\n  </dependency>\n</dependencies>\n```\n\n#### Include direct dependency\nIf you want to take dependency on a particular version of the library that is not present in the BOM,\nadd the direct dependency to your project as follows.\n\n[//]: # ({x-version-update-start;com.azure:azure-messaging-eventhubs;current})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-messaging-eventhubs</artifactId>\n    <version>5.15.5</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Authenticate the client\n\nFor the Event Hubs client library to interact with an Event Hub, it will need to understand how to connect and authorize\nwith it.\n\n#### Create an Event Hub producer using a connection string\n\nThe easiest means for doing so is to use a connection string, which is created automatically when creating an Event Hubs\nnamespace. If you aren't familiar with shared access policies in Azure, you may wish to follow the step-by-step guide to\n[get an Event Hubs connection string][event_hubs_connection_string].\n\nBoth the asynchronous and synchronous Event Hub producer and consumer clients can be created using\n`EventHubClientBuilder`. Invoking `build*Client()` creates a synchronous producer or consumer while\n`build*AsyncClient()` creates its asynchronous counterpart.\n\nThe snippet below creates a synchronous Event Hub producer.\n\n```java readme-sample-createSynchronousEventHubProducer\n// The credential used is DefaultAzureCredential because it combines commonly used credentials\n// in deployment and development and chooses the credential to used based on its running environment.\n// More information can be found at: https://learn.microsoft.com/java/api/overview/azure/identity-readme\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .build();\n\n// \"<<fully-qualified-namespace>>\" will look similar to \"{your-namespace}.servicebus.windows.net\"\n// \"<<event-hub-name>>\" will be the name of the Event Hub instance you created inside the Event Hubs namespace.\nEventHubProducerClient producer = new EventHubClientBuilder()\n    .credential(\"<<fully-qualified-namespace>>\", \"<<event-hub-name>>\",\n        credential)\n    .buildProducerClient();\n```\n\n#### Create an Event Hub client using Microsoft identity platform (formerly Azure Active Directory)\n\nAzure SDK for Java supports an Azure Identity package, making it easy to get credentials from Microsoft identity\nplatform. First, add the package:\n\n[//]: # ({x-version-update-start;com.azure:azure-identity;dependency})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-identity</artifactId>\n    <version>1.9.0</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\nAll the implemented ways to request a credential can be found under the `com.azure.identity.credential` package. The\nsample below shows how to use an Azure Active Directory (AAD) application client secret to authorize with Azure Event\nHubs.\n\n#### Authorizing with DefaultAzureCredential\n\nAuthorization is easiest using [DefaultAzureCredential][wiki_identity]. It finds the best credential to use in its\nrunning environment. For more information about using Azure Active Directory authorization with Event Hubs, please refer\nto [the associated documentation][aad_authorization].\n\n```java readme-sample-useAadAuthorization\n// The credential used is DefaultAzureCredential because it combines commonly used credentials\n// in deployment and development and chooses the credential to used based on its running environment.\n// More information can be found at: https://learn.microsoft.com/java/api/overview/azure/identity-readme\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .build();\n\n// \"<<fully-qualified-namespace>>\" will look similar to \"{your-namespace}.servicebus.windows.net\"\n// \"<<event-hub-name>>\" will be the name of the Event Hub instance you created inside the Event Hubs namespace.\nEventHubProducerClient client = new EventHubClientBuilder()\n    .credential(\"<<fully-qualified-namespace>>\", \"<<event-hub-name>>\",\n        credential)\n    .buildProducerClient();\n```\n\n## Key concepts\n\n- An **Event Hub producer** is a source of telemetry data, diagnostics information, usage logs, or other log data, as\n  part of an embedded device solution, a mobile device application, a game title running on a console or other device,\n  some client or server based business solution, or a website.\n\n- An **Event Hub consumer** picks up such information from the Event Hub and processes it. Processing may involve\n  aggregation, complex computation, and filtering. Processing may also involve distribution or storage of the\n  information in a raw or transformed fashion. Event Hub consumers are often robust and high-scale platform\n  infrastructure parts with built-in analytics capabilities, like Azure Stream Analytics, Apache Spark, or Apache Storm.\n\n- A **partition** is an ordered sequence of events that is held in an Event Hub. Azure Event Hubs provides message\n  streaming through a partitioned consumer pattern in which each consumer only reads a specific subset, or partition, of\n  the message stream. As newer events arrive, they are added to the end of this sequence. The number of partitions is\n  specified at the time an Event Hub is created and cannot be changed.\n\n- A **consumer group** is a view of an entire Event Hub. Consumer groups enable multiple consuming applications to each\n  have a separate view of the event stream, and to read the stream independently at their own pace and from their own\n  position. There can be at most 5 concurrent readers on a partition per consumer group; however it is recommended that\n  there is only one active consumer for a given partition and consumer group pairing. Each active reader receives\n  the events from its partition; if there are multiple readers on the same partition, then they will receive duplicate\n  events.\n\nFor more concepts and deeper discussion, see: [Event Hubs Features][event_hubs_features]. Also, the concepts for AMQP\nare well documented in [OASIS Advanced Messaging Queuing Protocol (AMQP) Version 1.0][oasis_amqp_v1].\n\n## Examples\n\n### Publish events to an Event Hub\n\nTo publish events, you'll need to create an asynchronous [`EventHubProducerAsyncClient`][EventHubProducerAsyncClient] or\na synchronous [`EventHubProducerClient`][EventHubProducerClient]. Each producer can send events to either, a specific\npartition, or allow the Event Hubs service to decide which partition events should be published to. It is recommended to\nuse automatic routing when the publishing of events needs to be highly available or when event data should be\ndistributed evenly among the partitions.\n\n#### Create an Event Hub producer and publish events\n\nDevelopers can create a producer using `EventHubClientBuilder` and calling `buildProducer*Client()`. Specifying\n`CreateBatchOptions.setPartitionId(String)` will send events to a specific partition. If `partitionId` is not specified,\nevents are automatically routed to a partition. Specifying `CreateBatchOptions.setPartitionKey(String)` will tell Event\nHubs service to hash the events and send them to the same partition.\n\nThe snippet below creates a synchronous producer and sends events to any partition, allowing Event Hubs service to route\nthe event to an available partition.\n\n```java readme-sample-publishEvents\n// The credential used is DefaultAzureCredential because it combines commonly used credentials\n// in deployment and development and chooses the credential to used based on its running environment.\n// More information can be found at: https://learn.microsoft.com/java/api/overview/azure/identity-readme\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .build();\n\nEventHubProducerClient producer = new EventHubClientBuilder()\n    .credential(\"<<fully-qualified-namespace>>\", \"<<event-hub-name>>\",\n        credential)\n    .buildProducerClient();\n\nList<EventData> allEvents = Arrays.asList(new EventData(\"Foo\"), new EventData(\"Bar\"));\nEventDataBatch eventDataBatch = producer.createBatch();\n\nfor (EventData eventData : allEvents) {\n    if (!eventDataBatch.tryAdd(eventData)) {\n        producer.send(eventDataBatch);\n        eventDataBatch = producer.createBatch();\n\n        // Try to add that event that couldn't fit before.\n        if (!eventDataBatch.tryAdd(eventData)) {\n            throw new IllegalArgumentException(\"Event is too large for an empty batch. Max size: \"\n                + eventDataBatch.getMaxSizeInBytes());\n        }\n    }\n}\n// send the last batch of remaining events\nif (eventDataBatch.getCount() > 0) {\n    producer.send(eventDataBatch);\n}\n```\nNote that `EventDataBatch.tryAdd(EventData)` is not thread-safe. Please make sure to synchronize the method access\nwhen using multiple threads to add events.\n\n#### Publish events using partition identifier\n\nMany Event Hub operations take place within the scope of a specific partition. Any client can call\n`getPartitionIds()` or `getEventHubProperties()` to get the partition ids and metadata about in their Event Hub\ninstance.\n\n```java readme-sample-publishEventsToPartition\n// The credential used is DefaultAzureCredential because it combines commonly used credentials\n// in deployment and development and chooses the credential to used based on its running environment.\n// More information can be found at: https://learn.microsoft.com/java/api/overview/azure/identity-readme\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .build();\n\nEventHubProducerClient producer = new EventHubClientBuilder()\n    .credential(\"<<fully-qualified-namespace>>\", \"<<event-hub-name>>\",\n        credential)\n    .buildProducerClient();\n\nCreateBatchOptions options = new CreateBatchOptions().setPartitionId(\"0\");\nEventDataBatch batch = producer.createBatch(options);\n\n// Add events to batch and when you want to send the batch, send it using the producer.\nproducer.send(batch);\n```\n\n#### Publish events using partition key\n\nWhen a set of events are not associated with any specific partition, it may be desirable to request that the Event\nHubs service keep different events or batches of events together on the same partition. This can be accomplished by\nsetting a `partition key` when publishing the events.\n\n```java readme-sample-publishEventsWithPartitionKey\n// The credential used is DefaultAzureCredential because it combines commonly used credentials\n// in deployment and development and chooses the credential to used based on its running environment.\n// More information can be found at: https://learn.microsoft.com/java/api/overview/azure/identity-readme\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .build();\n\nEventHubProducerClient producer = new EventHubClientBuilder()\n    .credential(\"<<fully-qualified-namespace>>\", \"<<event-hub-name>>\",\n        credential)\n    .buildProducerClient();\n\nCreateBatchOptions batchOptions = new CreateBatchOptions().setPartitionKey(\"grouping-key\");\nEventDataBatch eventDataBatch = producer.createBatch(batchOptions);\n\n// Add events to batch and when you want to send the batch, send it using the producer.\nproducer.send(eventDataBatch);\n```\n\n### Consume events from an Event Hub partition\n\nTo consume events, create an [`EventHubConsumerAsyncClient`][EventHubConsumerAsyncClient] or\n[`EventHubConsumerClient`][EventHubConsumerClient] for a specific consumer group. In addition, a consumer needs to\nspecify where in the event stream to begin receiving events.\n\n#### Consume events with EventHubConsumerAsyncClient\n\nIn the snippet below, we create an asynchronous consumer that receives events from `partitionId` and only listens\nto the newest events that get pushed to the partition. Developers can begin receiving events from multiple partitions using\nthe same `EventHubConsumerAsyncClient` by calling `receiveFromPartition(String, EventPosition)` with another partition\nid.\n\n```java readme-sample-consumeEventsFromPartition\nEventHubConsumerAsyncClient consumer = new EventHubClientBuilder()\n    .credential(\"<<fully-qualified-namespace>>\", \"<<event-hub-name>>\",\n        new DefaultAzureCredentialBuilder().build())\n    .consumerGroup(EventHubClientBuilder.DEFAULT_CONSUMER_GROUP_NAME)\n    .buildAsyncConsumerClient();\n\n// Receive newly added events from partition with id \"0\". EventPosition specifies the position\n// within the Event Hub partition to begin consuming events.\nconsumer.receiveFromPartition(\"0\", EventPosition.latest()).subscribe(event -> {\n    // Process each event as it arrives.\n});\n// add sleep or System.in.read() to receive events before exiting the process.\n```\n\n#### Consume events with EventHubConsumerClient\n\nDevelopers can create a synchronous consumer that returns events in batches using an `EventHubConsumerClient`. In the\nsnippet below, a consumer is created that starts reading events from the beginning of the partition's event stream.\n\n```java readme-sample-consumeEventsFromPartitionUsingSyncClient\n// The credential used is DefaultAzureCredential because it combines commonly used credentials\n// in deployment and development and chooses the credential to used based on its running environment.\n// More information can be found at: https://learn.microsoft.com/java/api/overview/azure/identity-readme\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .build();\n\nEventHubConsumerClient consumer = new EventHubClientBuilder()\n    .credential(\"<<fully-qualified-namespace>>\", \"<<event-hub-name>>\",\n        credential)\n    .consumerGroup(EventHubClientBuilder.DEFAULT_CONSUMER_GROUP_NAME)\n    .buildConsumerClient();\n\nString partitionId = \"<< EVENT HUB PARTITION ID >>\";\n\n// Get the first 15 events in the stream, or as many events as can be received within 40 seconds.\nIterableStream<PartitionEvent> events = consumer.receiveFromPartition(partitionId, 15,\n    EventPosition.earliest(), Duration.ofSeconds(40));\nfor (PartitionEvent event : events) {\n    System.out.println(\"Event: \" + event.getData().getBodyAsString());\n}\n```\n\n### Consume events using an EventProcessorClient\n\nTo consume events for all partitions of an Event Hub, you can create an [`EventProcessorClient`][EventProcessorClient]\nfor a specific consumer group.\n\nThe [`EventProcessorClient`][EventProcessorClient] will delegate processing of events to a callback function that you\nprovide, allowing you to focus on the logic needed to provide value while the processor holds responsibility for\nmanaging the underlying consumer operations.\n\nIn our example, we will focus on building the [`EventProcessorClient`][EventProcessorClient], use the\n[`SampleCheckpointStore`][SampleCheckpointStore] available in samples, and a callback function that processes events\nreceived from the Event Hub and writes to console. For production applications, it's recommended to use a durable\nstore like [Checkpoint Store with Azure Storage Blobs][BlobCheckpointStore].\n\n```java readme-sample-consumeEventsUsingEventProcessor\n// The credential used is DefaultAzureCredential because it combines commonly used credentials\n// in deployment and development and chooses the credential to used based on its running environment.\n// More information can be found at: https://learn.microsoft.com/java/api/overview/azure/identity-readme\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .build();\n\nEventProcessorClient eventProcessorClient = new EventProcessorClientBuilder()\n    .consumerGroup(\"<< CONSUMER GROUP NAME >>\")\n    .credential(\"<<fully-qualified-namespace>>\", \"<<event-hub-name>>\",\n        credential)\n    .checkpointStore(new SampleCheckpointStore())\n    .processEvent(eventContext -> {\n        System.out.println(\"Partition id = \" + eventContext.getPartitionContext().getPartitionId() + \" and \"\n            + \"sequence number of event = \" + eventContext.getEventData().getSequenceNumber());\n    })\n    .processError(errorContext -> {\n        System.out\n            .println(\"Error occurred while processing events \" + errorContext.getThrowable().getMessage());\n    })\n    .buildEventProcessorClient();\n\n// This will start the processor. It will start processing events from all partitions.\neventProcessorClient.start();\n\n// (for demo purposes only - adding sleep to wait for receiving events)\nTimeUnit.SECONDS.sleep(2);\n\n// This will stop processing events.\neventProcessorClient.stop();\n```\n\n## Troubleshooting\n\nSee [TROUBLESHOOTING.md][troubleshooting].\n\n## Next steps\n\nBeyond those discussed, the Azure Event Hubs client library offers support for many other scenarios to take\nadvantage of the full feature set of the Azure Event Hubs service. To explore some of these scenarios, check out the\n[samples README][samples_readme].\n\n## Contributing\n\nIf you would like to become an active contributor to this project please refer to our [Contribution\nGuidelines](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/eventhubs/azure-messaging-eventhubs/CONTRIBUTING.md) for more information.\n\n<!-- Links -->\n[aad_authorization]: https://docs.microsoft.com/azure/event-hubs/authorize-access-azure-active-directory\n[amqp_transport_error]: https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-transport-v1.0-os.html#type-amqp-error\n[AmqpErrorCondition]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/exception/AmqpErrorCondition.java\n[AmqpErrorContext]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/exception/AmqpErrorContext.java\n[AmqpException]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/exception/AmqpException.java\n[AmqpRetryOptions]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/AmqpRetryOptions.java\n[api_documentation]: https://aka.ms/java-docs\n[app_registration_page]: https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal#get-values-for-signing-in\n[application_client_secret]: https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal#create-a-new-application-secret\n[BlobCheckpointStore]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/eventhubs/azure-messaging-eventhubs-checkpointstore-blob/README.md\n[CreateBatchOptions]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/models/CreateBatchOptions.java\n[event_hubs_connection_string]: https://docs.microsoft.com/azure/event-hubs/event-hubs-get-connection-string\n[event_hubs_create]: https://docs.microsoft.com/azure/event-hubs/event-hubs-create\n[event_hubs_features]: https://docs.microsoft.com/azure/event-hubs/event-hubs-features\n[event_hubs_messaging_exceptions]: https://docs.microsoft.com/azure/event-hubs/event-hubs-messaging-exceptions\n[event_hubs_product_docs]: https://docs.microsoft.com/azure/event-hubs/\n[event_hubs_quotas]: https://docs.microsoft.com/azure/event-hubs/event-hubs-quotas\n[EventHubConsumerAsyncClient]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventHubConsumerAsyncClient.java\n[EventHubConsumerClient]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventHubConsumerClient.java\n[EventHubProducerAsyncClient]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventHubProducerAsyncClient.java\n[EventHubProducerClient]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventHubProducerClient.java\n[EventProcessorClient]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventProcessorClient.java\n[SampleCheckpointStore]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/eventhubs/azure-messaging-eventhubs/src/samples/java/com/azure/messaging/eventhubs/SampleCheckpointStore.java\n[java_8_sdk_javadocs]: https://docs.oracle.com/javase/8/docs/api/java/util/logging/package-summary.html\n[jdk_link]: https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable\n[logging]: https://docs.microsoft.com/azure/developer/java/sdk/logging-overview\n[maven]: https://maven.apache.org/\n[oasis_amqp_v1_error]: https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-transport-v1.0-os.html#type-error\n[oasis_amqp_v1]: https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-overview-v1.0-os.html\n[performance_tuning]: https://github.com/Azure/azure-sdk-for-java/wiki/Performance-Tuning\n[qpid_proton_j_apache]: https://qpid.apache.org/proton/\n[sample_examples]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/eventhubs/azure-messaging-eventhubs/src/samples/java/com/azure/messaging/eventhubs/\n[samples_readme]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/eventhubs/azure-messaging-eventhubs/src/samples/README.md\n[source_code]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/eventhubs/azure-messaging-eventhubs/\n[wiki_identity]: https://github.com/Azure/azure-sdk-for-java/wiki/Identity-and-Authentication\n[troubleshooting]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/eventhubs/azure-messaging-eventhubs/TROUBLESHOOTING.md\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Feventhubs%2Fazure-messaging-eventhubs%2FREADME.png)\n",
        "repo_name": "eventhubs/azure-messaging-eventhubs",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/eventhubs/azure-messaging-eventhubs",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "<p align=\"center\">\n  <img src=\"event-hubs.png\" alt=\"Microsoft Azure Event Hubs\" width=\"100\"/>\n</p>\n\n# Microsoft Azure Event Processor Host for Java\n\n> Please note, a newer package [com.azure:azure-messaging-eventhubs](https://search.maven.org/artifact/com.azure/azure-messaging-eventhubs) for [Azure Event Hubs](https://azure.microsoft.com/services/event-hubs/) is available as of February 2020. While this package will continue to receive critical bug fixes, we strongly encourage you to upgrade. Read the [migration guide](https://aka.ms/azsdk/java/migrate/eh) for more details.\n\nEvent Processor Host is built on top of the Azure Event Hubs Client and provides a number of features\nnot present in that lower layer. See the [README for Azure Event Hubs Client for Java](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/eventhubs/microsoft-azure-eventhubs/README.md) for details of how to\ninclude Event Processor Host in your project. See the [overview](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/eventhubs/microsoft-azure-eventhubs-eph/Overview.md) for details of the functionality\nthat Event Processor Host offers and how to use it.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Feventhubs%2Fmicrosoft-azure-eventhubs-eph%2FReadme.png)\n",
        "repo_name": "eventhubs/microsoft-azure-eventhubs-eph",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/eventhubs/microsoft-azure-eventhubs-eph",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "\n# Azure Event Hubs client library for Java\n\n> Please note, a newer package [com.azure:azure-messaging-eventhubs](https://search.maven.org/artifact/com.azure/azure-messaging-eventhubs) for [Azure Event Hubs](https://azure.microsoft.com/services/event-hubs/) is available as of February 2020. While this package will continue to receive critical bug fixes, we strongly encourage you to upgrade. Read the [migration guide](https://aka.ms/azsdk/java/migrate/eh) for more details.\n\nAzure Event Hubs is a hyper-scale data ingestion service, fully-managed by Microsoft, that enables you to collect, store\nand process trillions of events from websites, apps, IoT devices, and any stream of data.\n\nRefer to the [online documentation](https://azure.microsoft.com/services/event-hubs/) to learn more about Event Hubs in\ngeneral and for an overview of Event Hubs Client for Java.\n\n## Getting started\n\n## Key concepts\n\n- An **Event Hub producer** is a source of telemetry data, diagnostics information, usage logs, or other log data, as\n  part of an embedded device solution, a mobile device application, a game title running on a console or other device,\n  some client or server based business solution, or a website.\n\n- An **Event Hub consumer** picks up such information from the Event Hub and processes it. Processing may involve\n  aggregation, complex computation, and filtering. Processing may also involve distribution or storage of the\n  information in a raw or transformed fashion. Event Hub consumers are often robust and high-scale platform\n  infrastructure parts with built-in analytics capabilities, like Azure Stream Analytics, Apache Spark, or Apache Storm.\n\n- A **partition** is an ordered sequence of events that is held in an Event Hub. Azure Event Hubs provides message\n  streaming through a partitioned consumer pattern in which each consumer only reads a specific subset, or partition, of\n  the message stream. As newer events arrive, they are added to the end of this sequence. The number of partitions is\n  specified at the time an Event Hub is created and cannot be changed.\n\n- A **consumer group** is a view of an entire Event Hub. Consumer groups enable multiple consuming applications to each\n  have a separate view of the event stream, and to read the stream independently at their own pace and from their own\n  position. There can be at most 5 concurrent readers on a partition per consumer group; however it is recommended\n  there is only one active consumer for a given partition and consumer group pairing. Each active reader receives all\n  the events from its partition; if there are multiple readers on the same partition, then they will receive duplicate\n  events.\n\nFor more concepts and deeper discussion, see: \n[Event Hubs Features](https://docs.microsoft.com/azure/event-hubs/event-hubs-features). Also, the concepts for AMQP\nare well documented in [OASIS Advanced Messaging Queuing Protocol (AMQP) Version \n1.0](https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-overview-v1.0-os.html).\n\n### Referencing the library\n\nTwo java packages are released to Maven Central Repository from this GitHub repository.\n\n#### Microsoft Azure EventHubs Java Client\n\nThis library exposes the send and receive APIs. This library will in turn pull further required dependencies, specifically\nthe required versions of Apache Qpid Proton-J, and the cryptography library BCPKIX by the Legion of Bouncy Castle.\n\n|Package|Package Version|\n|--------|------------------|\n|azure-eventhubs|[![Maven Central](https://maven-badges.herokuapp.com/maven-central/com.microsoft.azure/azure-eventhubs/badge.svg)](https://maven-badges.herokuapp.com/maven-central/com.microsoft.azure/azure-eventhubs)\n\n```xml\n<dependency>\n    <groupId>com.microsoft.azure</groupId>\n    <artifactId>azure-eventhubs</artifactId>\n    <version>3.2.3</version>\n</dependency>\n```\n\n#### Microsoft Azure EventHubs Java Event Processor Host library\n\nThis library exposes an out-of-the-box distributed partition processor for Event Hubs.\nIt pulls the required versions of Event Hubs, Azure Storage and GSon libraries.\n\n|Package|Package Version|\n|--------|------------------|\n|azure-eventhubs-eph|[![Maven Central](https://maven-badges.herokuapp.com/maven-central/com.microsoft.azure/azure-eventhubs-eph/badge.svg)](https://maven-badges.herokuapp.com/maven-central/com.microsoft.azure/azure-eventhubs-eph)\n\n```XML\n    <dependency>\n        <groupId>com.microsoft.azure</groupId>\n        <artifactId>azure-eventhubs-eph</artifactId>\n        <version>2.5.1</version>\n    </dependency>\n```\n\n### How to provide feedback\n\nFirst, if you experience any issues with the runtime behavior of the Azure Event Hubs service, please consider filing a\nsupport request right away. Your options for [getting support are enumerated\nhere](https://azure.microsoft.com/support/options/). In the Azure portal, you can file a support request from the \"Help\nand support\" menu in the upper right-hand corner of the page.\n\nIf you find issues in this library or have suggestions for improvement of code or documentation, you can [file an issue\nin the project's GitHub repository](https://github.com/Azure/azure-sdk-for-java/issues) or send across a pull request -\nsee our [Contribution Guidelines](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/eventhubs/azure-messaging-eventhubs/CONTRIBUTING.md).\n\nIssues related to runtime behavior of the service, such as sporadic exceptions or apparent service-side performance or\nreliability issues cannot be handled here.\n\nGenerally, if you want to discuss Azure Event Hubs or this client library with the community and the maintainers, you\ncan turn to [stackoverflow.com under the #azure-eventhub tag](https://stackoverflow.com/questions/tagged/azure-eventhub)\nor the [MSDN Service Bus Forum](https://social.msdn.microsoft.com/Forums/home?forum=servbus).\n\n## Examples\n\nCode samples are [here](https://github.com/Azure/azure-event-hubs/tree/master/samples/Java).\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nYou will generally not have to build this client library yourself - this library is available on maven central. If you\nhave any specific requirement for which you want to contribute or need to generate a SNAPSHOT version, this section is\n**for** you. **Your contributions are welcome and encouraged!**\n\nWe adopted maven build model and strive to keep the project model intuitive enough to developers.\nIf you need any help with any specific IDE or cannot get the build going in any environment - please open an issue.\nHere are few general topics, which we thought developers would need help with:\n\n### Running Integration tests\n\nSet the following two Environment variables to be able to run unit tests targeting Microsoft Azure EventHubs service:\n\n* EVENT_HUB_CONNECTION_STRING - the event hub connection string to which the tests should target. the format of the\n  connection string is:\n  `Endpoint=----NAMESPACE_ENDPOINT------;EntityPath=----EVENTHUB_NAME----;SharedAccessKeyName=----KEY_NAME----;SharedAccessKey=----KEY_VALUE----`.\n  [Here's how to create an Event Hub on Azure Portal and get the connection\n  string](https://docs.microsoft.com/azure/event-hubs/event-hubs-create).\n\n* EPHTESTSTORAGE - the Microsoft Azure Storage account connection string to use while running EPH tests. The format of\n  the connection string is:\n  `DefaultEndpointsProtocol=https;AccountName=---STORAGE_ACCOUNT_NAME---;AccountKey=---ACCOUNT_KEY---;EndpointSuffix=---ENPOINT_SUFFIX---`.\n  For more details on this visit - [how to create an Azure Storage account connection\n  string](https://docs.microsoft.com/azure/storage/common/storage-configure-connection-string#create-a-connection-string-for-an-azure-storage-account).\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Feventhubs%2Fmicrosoft-azure-eventhubs%2FREADME.png)\n",
        "repo_name": "eventhubs/microsoft-azure-eventhubs",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/eventhubs/microsoft-azure-eventhubs",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager CustomLocations client library for Java\n\nAzure Resource Manager CustomLocations client library for Java.\n\nThis package contains Microsoft Azure SDK for CustomLocations Management SDK. The customLocations Rest API spec. Package tag package-2021-08-31-preview. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-extendedlocation;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-extendedlocation</artifactId>\n    <version>1.0.0-beta.2</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nCustomLocationsManager manager = CustomLocationsManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/extendedlocation/azure-resourcemanager-extendedlocation/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n",
        "repo_name": "extendedlocation/azure-resourcemanager-extendedlocation",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/extendedlocation/azure-resourcemanager-extendedlocation",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager FluidRelay client library for Java\n\nAzure Resource Manager FluidRelay client library for Java.\n\nThis package contains Microsoft Azure SDK for FluidRelay Management SDK.  Package tag package-2022-06-01. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-fluidrelay;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-fluidrelay</artifactId>\n    <version>1.0.0</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nFluidRelayManager manager = FluidRelayManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/fluidrelay/azure-resourcemanager-fluidrelay/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n",
        "repo_name": "fluidrelay/azure-resourcemanager-fluidrelay",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/fluidrelay/azure-resourcemanager-fluidrelay",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Formrecognizer Performance test client library for Java\n\nRepresents Performance tests for Azure Formrecognizer SDK for Java.\n\n## Getting started\n\n### Prerequisites\n\n- A [Java Development Kit (JDK)][jdk_link], version 8 or later.\n- [Azure Subscription][azure_subscription]\n- [Cognitive Services or Form Recognizer account][form_recognizer_account] to use this package.\n\n#### Setup for test resources\n\nYou will need the following environment variables for running the tests to access the live resources:\n\n```\nAZURE_FORMRECOGNIZER_ENDPOINT=<form recognizer service endpoint>\nAZURE_FORMRECOGNIZER_API_KEY=<form recognizer API Key>\nFORMRECOGNIZER_TRAINING_CONTAINER_SAS_URL=<SAS url for container with training data>\n```\n\n### Adding the package to your product\n\n## Key concepts\n\n## Examples\n### Executing the performance test\n1. Compile the performance project into a standalone jar using the command from the root of the perf project folder\n```\nmvn clean package\n```\n\n2. Execute the corresponding perf test in the project using the command.\n```\njava -jar <path-to-packaged-jar-with-dependencies-from-step-1> <options-for-the-test>\njava -jar sdk/formrecognizer/azure-ai-formrecognizer-perf/target/azure-ai-formrecognizer-perf-1.0.0-beta.1-jar-with-dependencies.jar custommodelrecognitiontest --warmup 1 --iterations 1 --parallel 5 --duration 120 --count 2\n```\n\n### Common perf test command line options for Form Recognizer\n- `--duration` - Number of seconds to run the main test for. Default is 10.\n- `--iterations` - Number of iterations of main test loop.\n- `--parallel` - Number of operations to execute in parallel,\n- `--warmup` - Duration of test warmup time in seconds before the test attributes are calculated.\n\nUse [PerfStressOptions](https://github.com/Azure/azure-sdk-for-java/blob/main/common/perf-test-core/src/main/java/com/azure/perf/test/core/PerfStressOptions.java)\nfor the other command line options that could be used.\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[azure_subscription]: https://azure.microsoft.com/free\n[jdk_link]: https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable\n[form_recognizer_account]: https://docs.microsoft.com/azure/cognitive-services/cognitive-services-apis-create-account?tabs=multiservice%2Cwindows\n",
        "repo_name": "formrecognizer/azure-ai-formrecognizer-perf",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/formrecognizer/azure-ai-formrecognizer-perf",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Form Recognizer client library for Java\nAzure Form Recognizer is a cloud service that uses machine learning to analyze text and structured data from your documents.\nIt includes the following main features:\n\n* Layout - Extract text, table structures, and selection marks, along with their bounding region coordinates, from documents.\n* Document - Analyze entities, key-value pairs, tables, and selection marks from documents using the general prebuilt document model.\n* Prebuilt - Analyze data from certain types of common documents (such as receipts, invoices, business cards, identity documents or US W2 tax forms) using prebuilt models.\n* Custom - Build custom models to extract text, field values, selection marks, and table data from documents. Custom models are built with your own data, so they're tailored to your documents.\n* Read - Read information about textual elements, such as page words and lines in addition to text language information.\n* Classifiers - Build custom classifiers to categorize documents into predefined classes.\n\n[Source code][source_code] | [Package (Maven)][package] | [API reference documentation][api_reference_doc] | [Product Documentation][product_documentation] | [Samples][sample_readme]\n\n## Getting started\n\n### Prerequisites\n- A [Java Development Kit (JDK)][jdk_link], version 8 or later.\n- [Azure Subscription][azure_subscription]\n- [Cognitive Services or Form Recognizer account][form_recognizer_account] to use this package.\n\n### Include the Package\n\n#### Include the BOM file\n\nDo include the azure-sdk-bom to your project to take dependency on GA version of the library. In the following snippet, replace the {bom_version_to_target} placeholder with the version number.\nTo learn more about the BOM, see the [AZURE SDK BOM README](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/boms/azure-sdk-bom/README.md).\n\n```xml\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>com.azure</groupId>\n            <artifactId>azure-sdk-bom</artifactId>\n            <version>{bom_version_to_target}</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n```\nThen, include the direct dependency in the dependencies' section without the version tag.\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-ai-formrecognizer</artifactId>\n  </dependency>\n</dependencies>\n```\n\n#### Include direct dependency\nIf you want to take dependency on a particular version of the library that is not present in the BOM,\nadd the direct dependency to your project as follows.\n\n[//]: # ({x-version-update-start;com.azure:azure-ai-formrecognizer;current})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-ai-formrecognizer</artifactId>\n    <version>4.1.0-beta.2</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n> Note: This version of the client library defaults to the `\"2022-08-31\"` version of the service.\n\nThis table shows the relationship between SDK versions and supported API versions of the service:\n\n|SDK version|Supported API version of service\n|-|-\n|3.0.x | 2.0\n|3.1.X - 3.1.12| 2.0, 2.1 (default)\n|4.0.0-beta.1 - Latest GA release| 2022-08-31 (default)\n|4.1.0-beta.1 - Latest beta release| V2023_02_28_preview\n\n> Note: Starting with version 4.0.X, a new set of clients were introduced to leverage the newest features\n> of the Form Recognizer service. Please see the [Migration Guide][migration_guide] for detailed instructions on how to update application\n> code from client library version 3.1.X or lower to the latest version. For more information, see [Changelog][changelog].\n> The below table describes the relationship of each client and its supported API version(s):\n\n|API version|Supported clients\n|-|-\n|2022-08-31 | DocumentAnalysisClient and DocumentModelAdministrationClient\n|2.1 | FormRecognizerClient and FormTrainingClient\n|2.0 | FormRecognizerClient and FormTrainingClient\n\n#### Create a Form Recognizer resource\nForm Recognizer supports both [multi-service and single-service access][service_access]. Create a Cognitive Service's\nresource if you plan to access multiple cognitive services under a single endpoint/key. For Form Recognizer access only,\ncreate a Form Recognizer resource.\n\nYou can create either resource using the\n\n**Option 1:** [Azure portal][create_new_resource]\n\n**Option 2:** [Azure CLI][azure_cli]\n\nBelow is an example of how you can create a Form Recognizer resource using the CLI:\n\n```bash\n# Create a new resource group to hold the Form Recognizer resource -\n# if using an existing resource group, skip this step\naz group create --name <your-resource-group> --location <location>\n```\n\n```bash\n# Create Form Recognizer\naz cognitiveservices account create \\\n    --name <your-form-recognizer-resource-name> \\\n    --resource-group <your-resource-group> \\\n    --kind FormRecognizer \\\n    --sku <sku> \\\n    --location <location> \\\n    --yes\n```\n### Authenticate the client\nIn order to interact with the Form Recognizer service, you will need to create an instance of the Document Analysis client.\nBoth the asynchronous and synchronous clients can be created by using `DocumentAnalysisClientBuilder`. Invoking `buildClient()`\nwill create the synchronous client, while invoking `buildAsyncClient` will create its asynchronous counterpart.\n\nYou will need an **endpoint**, and a **key** to instantiate a client object.\n\n#### Looking up the endpoint\nYou can find the **endpoint** for your Form Recognizer resource in the [Azure portal][azure_portal],\nor [Azure CLI][azure_cli_endpoint].\n```bash\n# Get the endpoint for the resource\naz cognitiveservices account show --name \"resource-name\" --resource-group \"resource-group-name\" --query \"endpoint\"\n```\n\n#### Create a Document Analysis client using AzureKeyCredential\nTo use `AzureKeyCredential` authentication, provide the [key][key] as a string to the [AzureKeyCredential][azure_key_credential].\nThis key can be found in the [Azure portal][azure_portal] in your created Form Recognizer\nresource, or by running the following Azure CLI command to get the key from the Form Recognizer resource:\n\n```bash\naz cognitiveservices account keys list --resource-group <your-resource-group-name> --name <your-resource-name>\n```\nUse the API key as the credential parameter to authenticate the client:\n\n```java readme-sample-createDocumentAnalysisClient\nDocumentAnalysisClient documentAnalysisClient = new DocumentAnalysisClientBuilder()\n    .credential(new AzureKeyCredential(\"{key}\"))\n    .endpoint(\"{endpoint}\")\n    .buildClient();\n```\n\n```java readme-sample-createDocumentModelAdministrationClient\nDocumentModelAdministrationClient documentModelAdminClient = new DocumentModelAdministrationClientBuilder()\n    .credential(new AzureKeyCredential(\"{key}\"))\n    .endpoint(\"{endpoint}\")\n    .buildClient();\n```\n\n#### Create a Document Analysis client with Azure Active Directory credential\nAzure SDK for Java supports an Azure Identity package, making it easy to get credentials from Microsoft identity\nplatform.\n\nAuthentication with AAD requires some initial setup:\n* Add the Azure Identity package\n\n[//]: # ({x-version-update-start;com.azure:azure-identity;dependency})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-identity</artifactId>\n    <version>1.9.0</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n* [Register a new Azure Active Directory application][register_AAD_application]\n* [Grant access][grant_access] to Form Recognizer by assigning the `\"Cognitive Services User\"` role to your service principal.\n\nAfter the setup, you can choose which type of [credential][azure_identity_credential_type] from azure-identity to use.\nAs an example, [DefaultAzureCredential][wiki_identity] can be used to authenticate the client:\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables:\nAZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET.\n\nAuthorization is easiest using [DefaultAzureCredential][wiki_identity]. It finds the best credential to use in its\nrunning environment. For more information about using Azure Active Directory authorization with Form Recognizer, see [the associated documentation][aad_authorization].\n\n```java readme-sample-createDocumentAnalysisClientWithAAD\nTokenCredential credential = new DefaultAzureCredentialBuilder().build();\nDocumentAnalysisClient documentAnalysisClient = new DocumentAnalysisClientBuilder()\n    .endpoint(\"{endpoint}\")\n    .credential(credential)\n    .buildClient();\n```\n\n## Key concepts\n### DocumentAnalysisClient\nThe [DocumentAnalysisClient][document_analysis_sync_client] and [DocumentAnalysisAsyncClient][document_analysis_async_client]\nprovide both synchronous and asynchronous operations for analyzing input documents using custom and prebuilt models\nthrough the `beginAnalyzeDocument` and `beginAnalyzeDocumentFromUrl` methods.\nSee a full list of supported models [here][fr_models].\n\nSample code snippets to illustrate using a DocumentAnalysisClient [here][sample_readme].\nMore information about analyzing documents, including supported features, locales, and document types can be found\n[here][fr_models].\n\n### DocumentModelAdministrationClient\nThe [DocumentModelAdministrationClient][document_model_admin_sync_client] and\n[DocumentModelAdministrationAsyncClient][document_model_admin_async_client] provide both synchronous and asynchronous operations\n- Build custom document analysis models to analyze text content, fields, and values found in your custom documents. See example [Build a document model](#build-a-document-model).\n  A `DocumentModelDetails` is returned indicating the document types that the model can analyze, along with the fields and schemas it will extract.\n- Managing models created in your account by building, listing, deleting, and see the limit of custom models your account. See example [Manage models](#manage-your-models).\n- Copying a custom model from one Form Recognizer resource to another.\n- Creating a composed model from a collection of existing built models.\n- Listing document model operations associated with the Form Recognizer resource.\n\nSample code snippets are provided to illustrate using a DocumentModelAdministrationClient [here](#examples \"Examples\").\n\n### Long-running operations\nLong-running operations are operations that consist of an initial request sent to the service to start an operation,\nfollowed by polling the service at intervals to determine whether the operation has completed or failed, and if it has\nsucceeded, to get the result.\n\nMethods that build models, analyze values from documents, or copy and compose models are modeled as long-running operations.\nThe client exposes a `begin<MethodName>` method that returns a `SyncPoller` or `PollerFlux` instance.\nCallers should wait for the operation to be completed by calling `getFinalResult()` on the returned operation from the\n`begin<MethodName>` method. Sample code snippets are provided to illustrate using long-running operations\n[below](#examples).\n\n## Examples\n\nThe following section provides several code snippets covering some of the most common Form Recognizer tasks, including:\n\n* [Extract Layout](#extract-layout \"Extract Layout\")\n* [Use a General Document Model](#use-a-general-document-model)\n* [Use Prebuilt Models](#use-prebuilt-models)\n* [Build a Document Model](#build-a-document-model \"Build a Document Model\")\n* [Analyze Documents using a Custom Model](#analyze-documents-using-a-custom-model \"Analyze Documents using a Custom Model\")\n* [Manage Your Models](#manage-your-models \"Manage Your Models\")\n* [Classify a document](#classify-a-document \"Classify a Document\")\n\n### Extract Layout\nExtract text, table structures, and selection marks like radio buttons and check boxes, along with their bounding box coordinates from documents without the need to build a model.\n```java readme-sample-extractLayout\n// analyze document layout using file input stream\nFile layoutDocument = new File(\"local/file_path/filename.png\");\nPath filePath = layoutDocument.toPath();\nBinaryData layoutDocumentData = BinaryData.fromFile(filePath);\n\nSyncPoller<OperationResult, AnalyzeResult> analyzeLayoutResultPoller =\n    documentAnalysisClient.beginAnalyzeDocument(\"prebuilt-layout\", layoutDocumentData);\n\nAnalyzeResult analyzeLayoutResult = analyzeLayoutResultPoller.getFinalResult();\n\n// pages\nanalyzeLayoutResult.getPages().forEach(documentPage -> {\n    System.out.printf(\"Page has width: %.2f and height: %.2f, measured with unit: %s%n\",\n        documentPage.getWidth(),\n        documentPage.getHeight(),\n        documentPage.getUnit());\n\n    // lines\n    documentPage.getLines().forEach(documentLine ->\n        System.out.printf(\"Line '%s' is within a bounding box %s.%n\",\n            documentLine.getContent(),\n            documentLine.getBoundingPolygon().toString()));\n\n    // selection marks\n    documentPage.getSelectionMarks().forEach(documentSelectionMark ->\n        System.out.printf(\"Selection mark is '%s' and is within a bounding box %s with confidence %.2f.%n\",\n            documentSelectionMark.getSelectionMarkState().toString(),\n            documentSelectionMark.getBoundingPolygon().toString(),\n            documentSelectionMark.getConfidence()));\n});\n\n// tables\nList<DocumentTable> tables = analyzeLayoutResult.getTables();\nfor (int i = 0; i < tables.size(); i++) {\n    DocumentTable documentTable = tables.get(i);\n    System.out.printf(\"Table %d has %d rows and %d columns.%n\", i, documentTable.getRowCount(),\n        documentTable.getColumnCount());\n    documentTable.getCells().forEach(documentTableCell -> {\n        System.out.printf(\"Cell '%s', has row index %d and column index %d.%n\", documentTableCell.getContent(),\n            documentTableCell.getRowIndex(), documentTableCell.getColumnIndex());\n    });\n    System.out.println();\n}\n```\n\n### Use a General Document Model \nAnalyze key-value pairs, tables, styles, and selection marks from documents using the general document model provided by\nthe Form Recognizer service.\nSelect the General Document Model by passing modelId=\"prebuilt-document\" into the beginAnalyzeDocumentFromUrl method as follows:\n```java readme-sample-analyzePrebuiltDocument\nString documentUrl = \"{document-url}\";\nString modelId = \"prebuilt-document\";\nSyncPoller<OperationResult, AnalyzeResult> analyzeDocumentPoller =\n    documentAnalysisClient.beginAnalyzeDocumentFromUrl(modelId, documentUrl);\n\nAnalyzeResult analyzeResult = analyzeDocumentPoller.getFinalResult();\n\nfor (int i = 0; i < analyzeResult.getDocuments().size(); i++) {\n    final AnalyzedDocument analyzedDocument = analyzeResult.getDocuments().get(i);\n    System.out.printf(\"----------- Analyzing document %d -----------%n\", i);\n    System.out.printf(\"Analyzed document has doc type %s with confidence : %.2f%n\",\n        analyzedDocument.getDocType(), analyzedDocument.getConfidence());\n}\n\nanalyzeResult.getPages().forEach(documentPage -> {\n    System.out.printf(\"Page has width: %.2f and height: %.2f, measured with unit: %s%n\",\n        documentPage.getWidth(),\n        documentPage.getHeight(),\n        documentPage.getUnit());\n\n    // lines\n    documentPage.getLines().forEach(documentLine ->\n        System.out.printf(\"Line '%s' is within a bounding box %s.%n\",\n            documentLine.getContent(),\n            documentLine.getBoundingPolygon().toString()));\n\n    // words\n    documentPage.getWords().forEach(documentWord ->\n        System.out.printf(\"Word '%s' has a confidence score of %.2f.%n\",\n            documentWord.getContent(),\n            documentWord.getConfidence()));\n});\n\n// tables\nList<DocumentTable> tables = analyzeResult.getTables();\nfor (int i = 0; i < tables.size(); i++) {\n    DocumentTable documentTable = tables.get(i);\n    System.out.printf(\"Table %d has %d rows and %d columns.%n\", i, documentTable.getRowCount(),\n        documentTable.getColumnCount());\n    documentTable.getCells().forEach(documentTableCell -> {\n        System.out.printf(\"Cell '%s', has row index %d and column index %d.%n\",\n            documentTableCell.getContent(),\n            documentTableCell.getRowIndex(), documentTableCell.getColumnIndex());\n    });\n    System.out.println();\n}\n\n// Key-value\nanalyzeResult.getKeyValuePairs().forEach(documentKeyValuePair -> {\n    System.out.printf(\"Key content: %s%n\", documentKeyValuePair.getKey().getContent());\n    System.out.printf(\"Key content bounding region: %s%n\",\n        documentKeyValuePair.getKey().getBoundingRegions().toString());\n\n    System.out.printf(\"Value content: %s%n\", documentKeyValuePair.getValue().getContent());\n    System.out.printf(\"Value content bounding region: %s%n\", documentKeyValuePair.getValue().getBoundingRegions().toString());\n});\n```\n\n### Use Prebuilt Models\nExtract fields from select document types such as receipts, invoices, business cards, and identity documents using prebuilt models provided by the Form Recognizer service.\nSupported prebuilt models are:\n- Analyze receipts using the `prebuilt-receipt` model (fields recognized by the service can be found [here][service_analyze_receipt_fields])\n- Analyze business cards using the `prebuilt-businessCard` model (fields recognized by the service can be found [here][service_analyze_business_cards_fields]).\n- Analyze invoices using the `prebuilt-invoice` model (fields recognized by the service can be found [here][service_analyze_invoices_fields]).\n- Analyze identity documents using the `prebuilt-idDocuments` model (fields recognized by the service can be found [here][service_analyze_identity_documents_fields]).\n- Analyze US W2 tax forms using the `prebuilt-tax.us.w2` model. [Supported fields][service_analyze_w2_documents_fields].\n\nFor example, to analyze fields from a sales receipt, into the `beginAnalyzeDocumentFromUrl` method:\n```java readme-sample-analyzeReceiptFromUrl\nString receiptUrl = \"https://raw.githubusercontent.com/Azure/azure-sdk-for-java/main/sdk/formrecognizer\"\n    + \"/azure-ai-formrecognizer/src/samples/resources/sample-documents/receipts/contoso-allinone.jpg\";\n\nSyncPoller<OperationResult, AnalyzeResult> analyzeReceiptPoller =\n    documentAnalysisClient.beginAnalyzeDocumentFromUrl(\"prebuilt-receipt\", receiptUrl);\n\nAnalyzeResult receiptResults = analyzeReceiptPoller.getFinalResult();\n\nfor (int i = 0; i < receiptResults.getDocuments().size(); i++) {\n    AnalyzedDocument analyzedReceipt = receiptResults.getDocuments().get(i);\n    Map<String, DocumentField> receiptFields = analyzedReceipt.getFields();\n    System.out.printf(\"----------- Analyzing receipt info %d -----------%n\", i);\n    DocumentField merchantNameField = receiptFields.get(\"MerchantName\");\n    if (merchantNameField != null) {\n        if (DocumentFieldType.STRING == merchantNameField.getType()) {\n            String merchantName = merchantNameField.getValueAsString();\n            System.out.printf(\"Merchant Name: %s, confidence: %.2f%n\",\n                merchantName, merchantNameField.getConfidence());\n        }\n    }\n\n    DocumentField merchantPhoneNumberField = receiptFields.get(\"MerchantPhoneNumber\");\n    if (merchantPhoneNumberField != null) {\n        if (DocumentFieldType.PHONE_NUMBER == merchantPhoneNumberField.getType()) {\n            String merchantAddress = merchantPhoneNumberField.getValueAsPhoneNumber();\n            System.out.printf(\"Merchant Phone number: %s, confidence: %.2f%n\",\n                merchantAddress, merchantPhoneNumberField.getConfidence());\n        }\n    }\n\n    DocumentField transactionDateField = receiptFields.get(\"TransactionDate\");\n    if (transactionDateField != null) {\n        if (DocumentFieldType.DATE == transactionDateField.getType()) {\n            LocalDate transactionDate = transactionDateField.getValueAsDate();\n            System.out.printf(\"Transaction Date: %s, confidence: %.2f%n\",\n                transactionDate, transactionDateField.getConfidence());\n        }\n    }\n\n    DocumentField receiptItemsField = receiptFields.get(\"Items\");\n    if (receiptItemsField != null) {\n        System.out.printf(\"Receipt Items: %n\");\n        if (DocumentFieldType.LIST == receiptItemsField.getType()) {\n            List<DocumentField> receiptItems = receiptItemsField.getValueAsList();\n            receiptItems.stream()\n                .filter(receiptItem -> DocumentFieldType.MAP == receiptItem.getType())\n                .map(documentField -> documentField.getValueAsMap())\n                .forEach(documentFieldMap -> documentFieldMap.forEach((key, documentField) -> {\n                    if (\"Name\".equals(key)) {\n                        if (DocumentFieldType.STRING == documentField.getType()) {\n                            String name = documentField.getValueAsString();\n                            System.out.printf(\"Name: %s, confidence: %.2fs%n\",\n                                name, documentField.getConfidence());\n                        }\n                    }\n                    if (\"Quantity\".equals(key)) {\n                        if (DocumentFieldType.DOUBLE == documentField.getType()) {\n                            Double quantity = documentField.getValueAsDouble();\n                            System.out.printf(\"Quantity: %f, confidence: %.2f%n\",\n                                quantity, documentField.getConfidence());\n                        }\n                    }\n                }));\n        }\n    }\n}\n```\n\nFor more information and samples using prebuilt models, see:\n- [Business Cards][analyze_business_cards_from_url]\n- [Identity Documents][analyze_identity_documents_from_url]\n- [Invoices][analyze_invoices_from_url]\n- [Receipts sample][analyze_receipts_from_url]\n\n### Build a document model\nBuild a machine-learned model on your own document type. The resulting model will be able to analyze values from the types of documents it was built on.\nProvide a container SAS url to your Azure Storage Blob container where you're storing the training documents. See details on setting this up\nin the [service quickstart documentation][quickstart_training].\n\n**Note**\n\nYou can use the [Form Recognizer Studio preview][fr-studio] for creating a labeled file for your training forms.\nMore details on setting up a container and required file structure can be found in the [here][fr_build_training_set].\n\n```java readme-sample-buildModel\n// Build custom document analysis model\nString blobContainerUrl = \"{SAS_URL_of_your_container_in_blob_storage}\";\n// The shared access signature (SAS) Url of your Azure Blob Storage container with your forms.\nString prefix = \"{blob_name_prefix}}\";\nSyncPoller<OperationResult, DocumentModelDetails> buildOperationPoller =\n    documentModelAdminClient.beginBuildDocumentModel(blobContainerUrl,\n        DocumentModelBuildMode.TEMPLATE,\n        prefix,\n        new BuildDocumentModelOptions().setModelId(\"my-build-model\").setDescription(\"model desc\"),\n        Context.NONE);\n\nDocumentModelDetails documentModelDetails = buildOperationPoller.getFinalResult();\n\n// Model Info\nSystem.out.printf(\"Model ID: %s%n\", documentModelDetails.getModelId());\nSystem.out.printf(\"Model Description: %s%n\", documentModelDetails.getDescription());\nSystem.out.printf(\"Model created on: %s%n%n\", documentModelDetails.getCreatedOn());\ndocumentModelDetails.getDocumentTypes().forEach((key, documentTypeDetails) -> {\n    System.out.printf(\"Document type: %s%n\", key);\n    documentTypeDetails.getFieldSchema().forEach((name, documentFieldSchema) -> {\n        System.out.printf(\"Document field: %s%n\", name);\n        System.out.printf(\"Document field type: %s%n\", documentFieldSchema.getType().toString());\n        System.out.printf(\"Document field confidence: %.2f%n\", documentTypeDetails.getFieldConfidence().get(name));\n    });\n});\n```\n\n### Analyze Documents using a Custom Model\nAnalyze the key/value pairs and table data from documents. These models are built with your own data,\nso they're tailored to your documents. You should only analyze documents of the same doc type that the custom model\nwas built on.\n```java readme-sample-analyzeCustomDocument\nString documentUrl = \"{document-url}\";\nString modelId = \"{custom-built-model-ID}\";\nSyncPoller<OperationResult, AnalyzeResult> analyzeDocumentPoller =\n    documentAnalysisClient.beginAnalyzeDocumentFromUrl(modelId, documentUrl);\n\nAnalyzeResult analyzeResult = analyzeDocumentPoller.getFinalResult();\n\nfor (int i = 0; i < analyzeResult.getDocuments().size(); i++) {\n    final AnalyzedDocument analyzedDocument = analyzeResult.getDocuments().get(i);\n    System.out.printf(\"----------- Analyzing custom document %d -----------%n\", i);\n    System.out.printf(\"Analyzed document has doc type %s with confidence : %.2f%n\",\n        analyzedDocument.getDocType(), analyzedDocument.getConfidence());\n    analyzedDocument.getFields().forEach((key, documentField) -> {\n        System.out.printf(\"Document Field content: %s%n\", documentField.getContent());\n        System.out.printf(\"Document Field confidence: %.2f%n\", documentField.getConfidence());\n        System.out.printf(\"Document Field Type: %s%n\", documentField.getType());\n        System.out.printf(\"Document Field found within bounding region: %s%n\",\n            documentField.getBoundingRegions().toString());\n    });\n}\n\nanalyzeResult.getPages().forEach(documentPage -> {\n    System.out.printf(\"Page has width: %.2f and height: %.2f, measured with unit: %s%n\",\n        documentPage.getWidth(),\n        documentPage.getHeight(),\n        documentPage.getUnit());\n\n    // lines\n    documentPage.getLines().forEach(documentLine ->\n        System.out.printf(\"Line '%s' is within a bounding box %s.%n\",\n            documentLine.getContent(),\n            documentLine.getBoundingPolygon().toString()));\n\n    // words\n    documentPage.getWords().forEach(documentWord ->\n        System.out.printf(\"Word '%s' has a confidence score of %.2f.%n\",\n            documentWord.getContent(),\n            documentWord.getConfidence()));\n});\n\n// tables\nList<DocumentTable> tables = analyzeResult.getTables();\nfor (int i = 0; i < tables.size(); i++) {\n    DocumentTable documentTable = tables.get(i);\n    System.out.printf(\"Table %d has %d rows and %d columns.%n\", i, documentTable.getRowCount(),\n        documentTable.getColumnCount());\n    documentTable.getCells().forEach(documentTableCell -> {\n        System.out.printf(\"Cell '%s', has row index %d and column index %d.%n\",\n            documentTableCell.getContent(),\n            documentTableCell.getRowIndex(), documentTableCell.getColumnIndex());\n    });\n    System.out.println();\n}\n```\n\n### Manage your models\nManage the models in your Form Recognizer account.\n```java readme-sample-manageModels\nAtomicReference<String> modelId = new AtomicReference<>();\n\n// First, we see how many models we have, and what our limit is\nResourceDetails resourceDetails = documentModelAdminClient.getResourceDetails();\nSystem.out.printf(\"The resource has %s models, and we can have at most %s models\",\n    resourceDetails.getCustomDocumentModelCount(), resourceDetails.getCustomDocumentModelLimit());\n\n// Next, we get a paged list of all of our models\nPagedIterable<DocumentModelSummary> customDocumentModels = documentModelAdminClient.listDocumentModels();\nSystem.out.println(\"We have following models in the account:\");\ncustomDocumentModels.forEach(documentModelSummary -> {\n    System.out.printf(\"Model ID: %s%n\", documentModelSummary.getModelId());\n    modelId.set(documentModelSummary.getModelId());\n\n    // get custom document analysis model info\n    DocumentModelDetails documentModel = documentModelAdminClient.getDocumentModel(documentModelSummary.getModelId());\n    System.out.printf(\"Model ID: %s%n\", documentModel.getModelId());\n    System.out.printf(\"Model Description: %s%n\", documentModel.getDescription());\n    System.out.printf(\"Model created on: %s%n\", documentModel.getCreatedOn());\n    documentModel.getDocumentTypes().forEach((key, documentTypeDetails) -> {\n        documentTypeDetails.getFieldSchema().forEach((field, documentFieldSchema) -> {\n            System.out.printf(\"Field: %s\", field);\n            System.out.printf(\"Field type: %s\", documentFieldSchema.getType());\n            System.out.printf(\"Field confidence: %.2f\", documentTypeDetails.getFieldConfidence().get(field));\n        });\n    });\n});\n\n// Delete Model\ndocumentModelAdminClient.deleteDocumentModel(modelId.get());\n```\n\n### Classify a document\n\nThe Form Recognizer service supports custom document classifiers that can classify documents into a set of predefined categories based on a training data set.\nDocuments can be classified with a custom classifier using the `beginClassifyDocument` or `beginClassifyDocumentFromUrl` \nmethod of `DocumentAnalysisClient`.\nThe following sample shows how to classify a document using a custom classifier:\n```java readme-sample-classifyDocument\nString documentUrl = \"{file_source_url}\";\nString classifierId = \"{custom_trained_classifier_id}\";\n\ndocumentAnalysisClient.beginClassifyDocumentFromUrl(classifierId, documentUrl, Context.NONE)\n    .getFinalResult()\n    .getDocuments()\n    .forEach(analyzedDocument -> System.out.printf(\"Doc Type: %s%n\", analyzedDocument.getDocType()));\n```\n\nFor more detailed examples, refer to [samples][sample_examples].\n\n## Troubleshooting\n### General\nForm Recognizer clients raise `HttpResponseException` [exceptions][http_response_exception]. For example, if you try\nto provide an invalid file source URL an `HttpResponseException` would be raised with an error indicating the failure cause.\nIn the following code snippet, the error is handled\ngracefully by catching the exception and display the additional information about the error.\n\n```java readme-sample-handlingException\ntry {\n    documentAnalysisClient.beginAnalyzeDocumentFromUrl(\"prebuilt-receipt\", \"invalidSourceUrl\");\n} catch (HttpResponseException e) {\n    System.out.println(e.getMessage());\n    // Do something with the exception\n}\n```\n\n### Enable client logging\nAzure SDKs for Java offer a consistent logging story to help aid in troubleshooting application errors and expedite\ntheir resolution. The logs produced will capture the flow of an application before reaching the terminal state to help\nlocate the root issue. View the [logging][logging] wiki for guidance about enabling logging.\n\n### Default HTTP Client\nAll client libraries by default use the Netty HTTP client. Add the above dependency to automatically configure\nthe client library to use the Netty HTTP client. Configuring or changing the HTTP client is detailed in the\n[HTTP clients wiki][http_clients_wiki].\n\n## Next steps\nThe following section provides several code snippets illustrating common patterns used in the Form Recognizer API.\nThese code samples show common scenario operations with the Azure Form Recognizer client library.\n\n* Analyze business card from a URL: [AnalyzeBusinessCardFromUrl][analyze_business_cards_from_url]\n* Analyze identity documents from a URL: [AnalyzeIdentityDocumentsFromUrl][analyze_identity_documents_from_url]\n* Analyze invoice from a URL: [AnalyzeInvoiceFromUrl][analyze_invoices_from_url]\n* Analyze receipts: [AnalyzeReceipts][analyze_receipts]\n* Analyze receipts from a URL: [AnalyzeReceiptsFromUrl][analyze_receipts_from_url]\n* Extract layout: [AnalyzeLayout][analyze_layout]\n* Analyze custom documents from a URL: [AnalyzeCustomDocumentFromUrl][analyze_custom_documents]\n* Build a model: [BuildModel][build_model]\n* Manage custom models: [ManageCustomModels][manage_custom_models]\n* Copy a model between Form Recognizer resources: [CopyModel][copy_model]\n* Create a composed model from a collection of custom-built models: [ComposeModel][compose_model]\n* Get/List document model operations associated with the Form Recognizer resource: [GetOperation][get_operation]\n* Build a document classifier : [BuildDocumentClassifier][build_document_classifier]\n\n### Async APIs\nAll the examples shown so far have been using synchronous APIs, but we provide full support for async APIs as well.\nYou'll need to use `DocumentAnalysisAsyncClient`\n```java readme-sample-asyncClient\nDocumentAnalysisAsyncClient documentAnalysisAsyncClient = new DocumentAnalysisClientBuilder()\n    .credential(new AzureKeyCredential(\"{key}\"))\n    .endpoint(\"{endpoint}\")\n    .buildAsyncClient();\n```\n\n* Analyze business card from a URL: [AnalyzeBusinessCardFromUrlAsync][analyze_business_cards_from_url_async]\n* Analyze identity documents from a URL: [AnalyzeIdentityDocumentsFromUrlAsync][analyze_identity_documents_from_url_async]\n* Analyze invoice: [AnalyzeInvoiceAsync][analyze_invoices_async]\n* Analyze receipts: [AnalyzeReceiptsAsync][analyze_receipts_async]\n* Analyze receipts from a URL: [AnalyzeReceiptsFromUrlAsync][analyze_receipts_from_url_async]\n* Extract layout from a URL: [AnalyzeLayoutFromUrlAsync][analyze_layout_from_url_async]\n* Analyze custom documents: [AnalyzeCustomDocumentAsync][analyze_custom_documents_async]\n* Build a document model: [BuildModelAsync][build_model_async]\n* Manage custom models: [ManageCustomModelsAsync][manage_custom_models_async]\n* Copy a document model between Form Recognizer resources: [CopyModelAsync][copy_model_async]\n* Create a composed document model from a collection of custom-built models: [ComposeModelAsync][compose_model_async]\n* Get/List document model operations associated with the Form Recognizer resource: [GetOperationAsync][get_operation_async]\n* Build a document classifier : [BuildDocumentClassifierAsync][build_document_classifier_async]\n\n### Additional documentation\nSee the [Sample README][sample_readme] for several code snippets illustrating common patterns used in the Form Recognizer Java SDK.\nFor more extensive documentation on Azure Cognitive Services Form Recognizer, see the [Form Recognizer documentation][form_recognizer_doc].\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a [Contributor License Agreement (CLA)][cla] declaring that you have the right to, and actually do, grant us the rights to use your contribution.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information, see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n[aad_authorization]: https://docs.microsoft.com/azure/cognitive-services/authentication#authenticate-with-azure-active-directory\n[azure_key_credential]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core/src/main/java/com/azure/core/credential/AzureKeyCredential.java\n[key]: https://docs.microsoft.com/azure/cognitive-services/cognitive-services-apis-create-account?tabs=multiservice%2Cwindows#get-the-keys-for-your-resource\n[api_reference_doc]: https://azure.github.io/azure-sdk-for-java\n[form_recognizer_doc]: https://aka.ms/azsdk-java-formrecognizer-ref-doc\n[azure_identity_credential_type]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/identity/azure-identity#credentials\n[azure_cli]: https://docs.microsoft.com/azure/cognitive-services/cognitive-services-apis-create-account-cli?tabs=windows\n[azure_cli_endpoint]: https://docs.microsoft.com/cli/azure/cognitiveservices/account?view=azure-cli-latest#az-cognitiveservices-account-show\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/identity/azure-identity#credentials\n[azure_portal]: https://ms.portal.azure.com\n[azure_subscription]: https://azure.microsoft.com/free\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n[create_new_resource]: https://docs.microsoft.com/azure/cognitive-services/cognitive-services-apis-create-account?tabs=multiservice%2Cwindows#create-a-new-azure-cognitive-services-resource\n[form_recognizer_account]: https://docs.microsoft.com/azure/cognitive-services/cognitive-services-apis-create-account?tabs=multiservice%2Cwindows\n[grant_access]: https://docs.microsoft.com/azure/cognitive-services/authentication#assign-a-role-to-a-service-principal\n[http_clients_wiki]: https://github.com/Azure/azure-sdk-for-java/wiki/HTTP-clients\n[http_response_exception]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core/src/main/java/com/azure/core/exception/HttpResponseException.java\n[jdk_link]: https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable\n[logging]: https://github.com/Azure/azure-sdk-for-java/wiki/Logging-with-Azure-SDK\n[package]: https://mvnrepository.com/artifact/com.azure/azure-ai-formrecognizer\n[product_documentation]: https://docs.microsoft.com/azure/cognitive-services/form-recognizer/overview\n[register_AAD_application]: https://docs.microsoft.com/azure/cognitive-services/authentication#assign-a-role-to-a-service-principal\n[fr-studio]: https://aka.ms/azsdk/formrecognizer/formrecognizerstudio\n[fr_build_training_set]: https://aka.ms/azsdk/formrecognizer/buildcustommodel\n[sample_examples]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/formrecognizer/azure-ai-formrecognizer/src/samples#examples\n[sample_readme]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/formrecognizer/azure-ai-formrecognizer/src/samples#readme\n[migration_guide]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/formrecognizer/azure-ai-formrecognizer/migration-guide.md\n[changelog]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/CHANGELOG.md\n\n[sample_readme]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/\n[document_analysis_async_client]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/documentanalysis/DocumentAnalysisAsyncClient.java\n[document_analysis_sync_client]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/documentanalysis/DocumentAnalysisClient.java\n[document_model_admin_async_client]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/documentanalysis/administration/DocumentModelAdministrationAsyncClient.java\n[document_model_admin_sync_client]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/documentanalysis/administration/DocumentModelAdministrationClient.java\n[manage_custom_models]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/administration/ManageCustomModels.java\n[manage_custom_models_async]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/administration/ManageCustomModelsAsync.java\n[build_model]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/administration/BuildDocumentModel.java\n[build_model_async]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/administration/BuildDocumentModelAsync.java\n[build_document_classifier]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/administration/BuildDocumentClassifier.java\n[build_document_classifier_async]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/administration/BuildDocumentClassifierAsync.java\n[compose_model]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/administration/ComposeDocumentModel.java\n[compose_model_async]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/administration/ComposeDocumentModelAsync.java\n[copy_model]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/administration/CopyDocumentModel.java\n[copy_model_async]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/administration/CopyDocumentModelAsync.java\n[analyze_business_cards_from_url]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AnalyzeBusinessCardFromUrl.java\n[analyze_business_cards_from_url_async]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AnalyzeBusinessCardFromUrlAsync.java\n[analyze_identity_documents_from_url]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AnalyzeIdentityDocumentsFromUrl.java\n[analyze_identity_documents_from_url_async]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AnalyzeIdentityDocumentsFromUrlAsync.java\n[analyze_invoices_async]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AnalyzeInvoicesAsync.java\n[analyze_invoices_from_url]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AnalyzeInvoicesFromUrl.java\n[analyze_layout]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AnalyzeLayout.java\n[analyze_layout_from_url_async]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AnalyzeLayoutFromUrlAsync.java\n[analyze_receipts]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AnalyzeReceipts.java\n[analyze_receipts_async]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AnalyzeReceiptsAsync.java\n[analyze_receipts_from_url]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AnalyzeReceiptsFromUrl.java\n[analyze_receipts_from_url_async]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AnalyzeReceiptsFromUrlAsync.java\n[analyze_custom_documents]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AnalyzeCustomDocumentFromUrl.java\n[analyze_custom_documents_async]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AnalyzeCustomDocumentAsync.java\n[get_operation]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/administration/GetOperationSummary.java\n[get_operation_async]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/administration/GetOperationSummaryAsync.java\n\n[fr_models]: https://aka.ms/azsdk/formrecognizer/models\n[service_access]: https://docs.microsoft.com/azure/cognitive-services/cognitive-services-apis-create-account?tabs=multiservice%2Cwindows\n[service_analyze_business_cards_fields]: https://aka.ms/azsdk/formrecognizer/businesscardfieldschema\n[service_analyze_invoices_fields]: https://aka.ms/azsdk/formrecognizer/invoicefieldschema\n[service_analyze_identity_documents_fields]: https://aka.ms/azsdk/formrecognizer/iddocumentfieldschema\n[service_analyze_receipt_fields]: https://aka.ms/azsdk/formrecognizer/receiptfieldschema\n[service_analyze_w2_documents_fields]: https://aka.ms/azsdk/formrecognizer/taxusw2fieldschema\n[source_code]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/src\n[quickstart_training]: https://learn.microsoft.com/azure/applied-ai-services/form-recognizer/quickstarts/get-started-sdks-rest-api?view=form-recog-3.0.0&pivots=programming-language-java\n[wiki_identity]: https://github.com/Azure/azure-sdk-for-java/wiki/Identity-and-Authentication\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fformrecognizer%2Fazure-ai-formrecognizer%2FREADME.png)\n",
        "repo_name": "formrecognizer/azure-ai-formrecognizer",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/formrecognizer/azure-ai-formrecognizer",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager FrontDoor client library for Java\n\nAzure Resource Manager FrontDoor client library for Java.\n\nThis package contains Microsoft Azure SDK for FrontDoor Management SDK. FrontDoor Client. Package tag package-2022-05. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-frontdoor;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-frontdoor</artifactId>\n    <version>1.0.0-beta.3</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nFrontDoorManager manager = FrontDoorManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n```java\nStorageAccount storageAccount = storageManager.storageAccounts()\n    .define(saName)\n    .withRegion(REGION)\n    .withExistingResourceGroup(resourceGroupName)\n    .create();\n\nString backendAddress = fdName + \".blob.core.windows.net\";\nString frontendName = \"frontend1\";\nString loadBalancingName = \"loadbalancing1\";\nString healthProbeName = \"healthprobe1\";\nString routingRuleName = \"rule1\";\nString backendPoolName = \"backend1\";\nsubscriptionId = ResourceId.fromString(storageAccount.id()).subscriptionId();\nString frontendEndpointsId = getResourceId(\"frontendEndpoints\", frontendName);\nString loadBalancingSettingsId = getResourceId(\"loadBalancingSettings\", loadBalancingName);\nString healthProbeSettingsId = getResourceId(\"healthProbeSettings\", healthProbeName);\nString backendPoolsId = getResourceId(\"backendPools\", backendPoolName);\n\nFrontDoor frontDoor = manager.frontDoors().define(fdName)\n    .withRegion(\"global\")\n    .withExistingResourceGroup(resourceGroupName)\n    .withFrontendEndpoints(Collections.singletonList(\n        new FrontendEndpointInner()\n            .withName(frontendName)\n            .withHostname(fdName + \".azurefd.net\")\n            .withSessionAffinityEnabledState(SessionAffinityEnabledState.DISABLED)\n    ))\n    .withBackendPools(Collections.singletonList(\n        new BackendPool().withName(backendPoolName).withBackends(Collections.singletonList(\n                new Backend()\n                    .withAddress(backendAddress)\n                    .withEnabledState(BackendEnabledState.ENABLED)\n                    .withBackendHostHeader(backendAddress)\n                    .withHttpPort(80)\n                    .withHttpsPort(443)\n                    .withPriority(1)\n                    .withWeight(50)\n            ))\n            .withLoadBalancingSettings(new SubResource().withId(loadBalancingSettingsId))\n            .withHealthProbeSettings(new SubResource().withId(healthProbeSettingsId))\n    ))\n    .withLoadBalancingSettings(Collections.singletonList(\n        new LoadBalancingSettingsModel()\n            .withName(loadBalancingName)\n            .withSampleSize(4)\n            .withSuccessfulSamplesRequired(2)\n            .withAdditionalLatencyMilliseconds(0)\n    ))\n    .withHealthProbeSettings(Collections.singletonList(\n        new HealthProbeSettingsModel()\n            .withName(healthProbeName)\n            .withEnabledState(HealthProbeEnabled.ENABLED)\n            .withPath(\"/\")\n            .withProtocol(FrontDoorProtocol.HTTPS)\n            .withHealthProbeMethod(FrontDoorHealthProbeMethod.HEAD)\n            .withIntervalInSeconds(30)\n    ))\n    .withRoutingRules(Collections.singletonList(\n        new RoutingRule()\n            .withName(routingRuleName)\n            .withEnabledState(RoutingRuleEnabledState.ENABLED)\n            .withFrontendEndpoints(Collections.singletonList(new SubResource().withId(frontendEndpointsId)))\n            .withAcceptedProtocols(Arrays.asList(FrontDoorProtocol.HTTP, FrontDoorProtocol.HTTPS))\n            .withPatternsToMatch(Collections.singletonList(\"/*\"))\n            .withRouteConfiguration(new ForwardingConfiguration()\n                .withForwardingProtocol(FrontDoorForwardingProtocol.HTTPS_ONLY)\n                .withBackendPool(new SubResource().withId(backendPoolsId)))\n    ))\n    .create();\n```\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/frontdoor/azure-resourcemanager-frontdoor/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "frontdoor/azure-resourcemanager-frontdoor",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/frontdoor/azure-resourcemanager-frontdoor",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager GraphServices client library for Java\n\nAzure Resource Manager GraphServices client library for Java.\n\nThis package contains Microsoft Azure SDK for GraphServices Management SDK. Self service experience for Microsoft Graph metered services. Package tag package-2022-09-22-preview. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-graphservices;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-graphservices</artifactId>\n    <version>1.0.0-beta.1</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nGraphServicesManager manager = GraphServicesManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/graphservices/azure-resourcemanager-graphservices/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "graphservices/azure-resourcemanager-graphservices",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/graphservices/azure-resourcemanager-graphservices",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager Hana client library for Java\n\nAzure Resource Manager Hana client library for Java.\n\nThis package contains Microsoft Azure SDK for Hana Management SDK. HANA on Azure Client. Package tag package-2017-11. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-hanaonazure;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-hanaonazure</artifactId>\n    <version>1.0.0-beta.2</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nHanaManager manager = HanaManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/hanaonazure/azure-resourcemanager-hanaonazure/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "hanaonazure/azure-resourcemanager-hanaonazure",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/hanaonazure/azure-resourcemanager-hanaonazure",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager Hardware Security Modules client library for Java\n\nAzure Resource Manager Hardware Security Modules client library for Java.\n\nThis package contains Microsoft Azure SDK for Hardware Security Modules Management SDK. The Azure management API provides a RESTful set of web services that interact with Azure Dedicated HSM RP. Package tag package-2021-11. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-hardwaresecuritymodules;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-hardwaresecuritymodules</artifactId>\n    <version>1.0.0-beta.1</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nHardwareSecurityModulesManager manager = HardwareSecurityModulesManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/hardwaresecuritymodules/azure-resourcemanager-hardwaresecuritymodules/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n",
        "repo_name": "hardwaresecuritymodules/azure-resourcemanager-hardwaresecuritymodules",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/hardwaresecuritymodules/azure-resourcemanager-hardwaresecuritymodules",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager HDInsight client library for Java\n\nAzure Resource Manager HDInsight client library for Java.\n\nThis package contains Microsoft Azure SDK for HDInsight Management SDK. HDInsight Management Client. Package tag package-2021-06. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-hdinsight;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-hdinsight</artifactId>\n    <version>1.0.0</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nHDInsightManager manager = HDInsightManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n```java\n// network\nNetwork network = networkManager.networks().define(\"vn1\")\n    .withRegion(REGION)\n    .withExistingResourceGroup(resourceGroupName)\n    .withAddressSpace(\"10.0.0.0/24\")\n    .withSubnet(\"default\", \"10.0.0.0/24\")\n    .create();\nSubnet subnet = network.subnets().values().iterator().next();\n\n// storage account\ncom.azure.resourcemanager.storage.models.StorageAccount storageAccount = storageManager.storageAccounts().define(storageAccountName)\n    .withRegion(REGION)\n    .withExistingResourceGroup(resourceGroupName)\n    .create();\nfinal String storageAccountKey = storageAccount.getKeys().iterator().next().value();\n\n// container\nfinal String containerName = \"hdinsight\";\nstorageManager.blobContainers().defineContainer(containerName)\n    .withExistingBlobService(resourceGroupName, storageAccountName)\n    .withPublicAccess(PublicAccess.NONE)\n    .create();\n\nMap<String, Map<String, String>> clusterDefinition = new HashMap<>(1);\nMap<String, String> clusterProperties = new HashMap<>(3);\nclusterProperties.put(\"restAuthCredential.isEnabled\", \"true\");\nclusterProperties.put(\"restAuthCredential.username\", \"admin\");\nclusterProperties.put(\"restAuthCredential.password\", \"Pa$s\" + randomPadding());\nclusterDefinition.put(\"gateway\", Collections.unmodifiableMap(clusterProperties));\n\n// cluster\nCluster cluster = manager.clusters().define(\"cluster\" + randomPadding())\n    .withExistingResourceGroup(resourceGroupName)\n    .withRegion(REGION)\n    .withProperties(new ClusterCreateProperties()\n        .withClusterVersion(\"3.6\")\n        .withOsType(OSType.LINUX)\n        .withTier(Tier.STANDARD)\n        .withClusterDefinition(new ClusterDefinition()\n            .withKind(\"Spark\")\n            .withConfigurations(Collections.unmodifiableMap(clusterDefinition))\n        )\n        .withComputeProfile(new ComputeProfile()\n            .withRoles(Collections.unmodifiableList(new LinkedList<>(Arrays.asList(\n                new Role().withName(\"headnode\")\n                    .withTargetInstanceCount(2)\n                    .withHardwareProfile(new HardwareProfile()\n                        .withVmSize(\"Large\")\n                    )\n                    .withOsProfile(new OsProfile()\n                        .withLinuxOperatingSystemProfile(\n                            new LinuxOperatingSystemProfile()\n                                .withUsername(\"sshuser\")\n                                .withPassword(\"Pa$s\" + randomPadding())\n                        )\n                    )\n                    .withVirtualNetworkProfile(new VirtualNetworkProfile()\n                        .withId(network.id())\n                        .withSubnet(subnet.id())\n                    ),\n                new Role().withName(\"workernode\")\n                    .withTargetInstanceCount(3)\n                    .withHardwareProfile(new HardwareProfile()\n                        .withVmSize(\"Large\")\n                    )\n                    .withOsProfile(new OsProfile()\n                        .withLinuxOperatingSystemProfile(\n                            new LinuxOperatingSystemProfile()\n                                .withUsername(\"sshuser\")\n                                .withPassword(\"Pa$s\" + randomPadding())\n                        )\n                    )\n                    .withVirtualNetworkProfile(new VirtualNetworkProfile()\n                        .withId(network.id())\n                        .withSubnet(subnet.id())\n                    )\n            ))))\n        )\n        .withStorageProfile(new StorageProfile()\n            .withStorageaccounts(Collections.unmodifiableList(Arrays.asList(\n                new StorageAccount()\n                    .withName(new URL(storageAccount.endPoints().primary().blob()).getHost())\n                    .withKey(storageAccountKey)\n                    .withContainer(containerName)\n                    .withIsDefault(true)\n            )))\n        ))\n    .create();\n```\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/hdinsight/azure-resourcemanager-hdinsight/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "hdinsight/azure-resourcemanager-hdinsight",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/hdinsight/azure-resourcemanager-hdinsight",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager Healthbot client library for Java\n\nAzure Resource Manager Healthbot client library for Java.\n\nThis package contains Microsoft Azure SDK for Healthbot Management SDK. Microsoft Healthcare Bot is a cloud platform that empowers developers in Healthcare organizations to build and deploy their compliant, AI-powered virtual health assistants and health bots, that help them improve processes and reduce costs. Package tag package-2020-12-08. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-healthbot;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-healthbot</artifactId>\n    <version>1.0.0-beta.2</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nHealthbotManager manager = HealthbotManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/healthbot/azure-resourcemanager-healthbot/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n",
        "repo_name": "healthbot/azure-resourcemanager-healthbot",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/healthbot/azure-resourcemanager-healthbot",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager HealthcareApis client library for Java\n\nAzure Resource Manager HealthcareApis client library for Java.\n\nThis package contains Microsoft Azure SDK for HealthcareApis Management SDK. Azure Healthcare APIs Client. Package tag package-2021-11. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-healthcareapis;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-healthcareapis</artifactId>\n    <version>1.0.0-beta.2</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nHealthcareApisManager manager = HealthcareApisManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/healthcareapis/azure-resourcemanager-healthcareapis/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n",
        "repo_name": "healthcareapis/azure-resourcemanager-healthcareapis",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/healthcareapis/azure-resourcemanager-healthcareapis",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Cognitive Services Health Insights Cancer Profiling client library for Java\n\n[Health Insights][health_insights] is an Azure Applied AI Service built with the Azure Cognitive Services Framework, that leverages multiple Cognitive Services, Healthcare API services and other Azure resources.\n\nThe [Cancer Profiling model][cancer_profiling_docs] receives clinical records of oncology patients and outputs cancer staging, such as clinical stage TNM categories and pathologic stage TNM categories as well as tumor site, histology.\n[Source code][source_code] | [Package (Maven)][package] | [API reference documentation][cancer_profiling_api_documentation] | [Product Documentation][product_documentation] | [Samples][samples_location]\n\n\n## Getting started\n\n### Prerequisites\n\n- A [Java Development Kit (JDK)][jdk_link] with version 8 or above\n- [Azure Subscription][azure_subscription]\n- An existing Cognitive Services Health Insights instance.\n\nFor more information about creating the resource or how to get the location and sku information see [here][cognitive_resource_cli].\n\n### Include the Package\n\n[//]: # ({x-version-update-start;com.azure:azure-health-insights-cancerprofiling;current})\n\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-health-insights-cancerprofiling</artifactId>\n    <version>1.0.0-beta.1</version>\n</dependency>\n```\n\n[//]: # ({x-version-update-end})\n\n### Authenticate the client\n\nIn order to interact with the Health Insights Cancer Profiling service, you'll need to create an instance of the [`CancerProfilingClient`][cancer_profiling_client_class] class. You will need an **endpoint** and an **API key** to instantiate a client object.  \n\n#### Get API Key\n\nYou can obtain the endpoint and API key from the resource information in the [Azure Portal][azure_portal].\n\nAlternatively, you can use the [Azure CLI][azure_cli] snippet below to get the API key from the Health Insights resource.\n\n```bash\naz cognitiveservices account keys list --resource-group <your-resource-group-name> --name <your-resource-name>\n```\n\n#### Create a CancerProfilingClient with an API Key Credential\n\nOnce you have the value for the API key, you can pass it as a string into an instance of **AzureKeyCredential**. Use the key as the credential parameter to authenticate the client:\n\n```Java com.azure.health.insights.cancerprofiling.buildasyncclient\nString endpoint = Configuration.getGlobalConfiguration().get(\"AZURE_HEALTH_INSIGHTS_ENDPOINT\");\nString apiKey = Configuration.getGlobalConfiguration().get(\"AZURE_HEALTH_INSIGHTS_API_KEY\");\n\nCancerProfilingAsyncClient asyncClient = new CancerProfilingClientBuilder()\n    .endpoint(endpoint)\n    .serviceVersion(CancerProfilingServiceVersion.getLatest())\n    .credential(new AzureKeyCredential(apiKey))\n    .buildAsyncClient();\n```\n\n## Key concepts\n\nThe Cancer Profiling model allows you to infer cancer attributes such as tumor site, histology, clinical stage TNM categories and pathologic stage TNM categories from unstructured clinical documents.\n\n## Examples\n\nInfer key cancer attributes such as tumor site, histology, clinical stage TNM categories and pathologic stage TNM categories from a patient's unstructured clinical documents.\n<!--\n- [SampleInferCancerProfile.java](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/healthinsights/azure-health-insights-cancerprofiling/src/samples/java/com/azure/health/insights/cancerprofiling/SampleInferCancerProfile.java).\n-->\n\n```Java com.azure.health.insights.cancerprofiling.infercancerprofile\n// Construct Patient\nPatientRecord patient1 = new PatientRecord(\"patient_id\");\nLinkedList<PatientDocument> patientDocuments = new LinkedList<>();\npatient1.setData(patientDocuments);\n\n// Add imaging document\nfinal String docContent1 = String.join(System.getProperty(\"line.separator\"),\n    \"15.8.2021\",\n    \"Jane Doe 091175-8967\",\n    \"42 year old female, married with 3 children, works as a nurse. \",\n    \"Healthy, no medications taken on a regular basis.\",\n    \"PMHx is significant for migraines with aura, uses Mirena for contraception.\",\n    \"Smoking history of 10 pack years (has stopped and relapsed several times).\",\n    \"She is in c/o 2 weeks of productive cough and shortness of breath.\",\n    \"She has a fever of 37.8 and general weakness. \",\n    \"Denies night sweats and rash. She denies symptoms of rhinosinusitis, asthma, and heartburn. \",\n    \"On PE:\",\n    \"GENERAL: mild pallor, no cyanosis. Regular breathing rate. \",\n    \"LUNGS: decreased breath sounds on the base of the right lung. Vesicular breathing.\",\n    \" No crackles, rales, and wheezes. Resonant percussion. \",\n    \"PLAN: \",\n    \"Will be referred for a chest x-ray. \",\n    \"======================================\",\n    \"CXR showed mild nonspecific opacities in right lung base. \",\n    \"PLAN:\",\n    \"Findings are suggestive of a working diagnosis of pneumonia. The patient is referred to a follow-up CXR in 2 weeks.\");\n\nPatientDocument patientDocument1 = new PatientDocument(\n    DocumentType.NOTE,\n    \"doc1\",\n    new DocumentContent(DocumentContentSourceType.INLINE, docContent1));\n\npatientDocument1.setClinicalType(ClinicalDocumentType.IMAGING);\npatientDocument1.setLanguage(\"en\");\npatientDocument1.setCreatedDateTime(OffsetDateTime.parse(\"2021-08-15T10:15:30+01:00\"));\npatient1.getData().add(patientDocument1);\n\n// Add Pathology documents\nString docContent2 = String.join(System.getProperty(\"line.separator\"),\n    \"Oncology Clinic \",\n    \"20.10.2021\",\n    \"Jane Doe 091175-8967\",\n    \"42-year-old healthy female who works as a nurse in the ER of this hospital. \",\n    \"First menstruation at 11 years old. First delivery- 27 years old. She has 3 children.\",\n    \"Didn\u2019t breastfeed. \",\n    \"Contraception- Mirena.\",\n    \"Smoking- 10 pack years. \",\n    \"Mother- Belarusian. Father- Georgian. \",\n    \"About 3 months prior to admission, she stated she had SOB and was febrile. \",\n    \"She did a CXR as an outpatient which showed a finding in the base of the right lung- possibly an infiltrate.\",\n    \"She was treated with antibiotics with partial response. \",\n    \"6 weeks later a repeat CXR was performed- a few solid dense findings in the right lung. \",\n    \"Therefore, she was referred for a PET-CT which demonstrated increased uptake in the right breast, lymph nodes on the right a few areas in the lungs and liver. \",\n    \"On biopsy from the lesion in the right breast- triple negative adenocarcinoma. Genetic testing has not been done thus far. \",\n    \"Genetic counseling- the patient denies a family history of breast, ovary, uterus, and prostate cancer. Her mother has chronic lymphocytic leukemia (CLL). \",\n    \"She is planned to undergo genetic tests because the aggressive course of the disease, and her young age. \",\n    \"Impression:\",\n    \"Stage 4 triple negative breast adenocarcinoma. \",\n    \"Could benefit from biological therapy. \",\n    \"Different treatment options were explained- the patient wants to get a second opinion.\");\n\nPatientDocument patientDocument2 = new PatientDocument(DocumentType.NOTE,\n    \"doc2\",\n    new DocumentContent(DocumentContentSourceType.INLINE, docContent2));\npatientDocument2.setClinicalType(ClinicalDocumentType.PATHOLOGY);\npatientDocument2.setLanguage(\"en\");\npatientDocument2.setCreatedDateTime(OffsetDateTime.parse(\"2021-10-20T22:00:00.00Z\"));\npatient1.getData().add(patientDocument2);\n\nString docContent3 = String.join(System.getProperty(\"line.separator\"),\n    \"PATHOLOGY REPORT\",\n    \"                          Clinical Information\",\n    \"Ultrasound-guided biopsy; A. 18 mm mass; most likely diagnosis based on imaging:  IDC\",\n    \"                               Diagnosis\",\n    \" A.  BREAST, LEFT AT 2:00 4 CM FN; ULTRASOUND-GUIDED NEEDLE CORE BIOPSIES:\",\n    \" - Invasive carcinoma of no special type (invasive ductal carcinoma), grade 1\",\n    \" Nottingham histologic grade:  1/3 (tubules 2; nuclear grade 2; mitotic rate 1; total score;  5/9)\",\n    \" Fragments involved by invasive carcinoma:  2\",\n    \" Largest measurement of invasive carcinoma on a single fragment:  7 mm\",\n    \" Ductal carcinoma in situ (DCIS):  Present\",\n    \" Architectural pattern:  Cribriform\",\n    \" Nuclear grade:  2-\",\n    \"                  -intermediate\",\n    \" Necrosis:  Not identified\",\n    \" Fragments involved by DCIS:  1\",\n    \" Largest measurement of DCIS on a single fragment:  Span 2 mm\",\n    \" Microcalcifications:  Present in benign breast tissue and invasive carcinoma\",\n    \" Blocks with invasive carcinoma:  A1\",\n    \" Special studies: Pending\");\n\nPatientDocument patientDocument3 = new PatientDocument(DocumentType.NOTE,\n                                                    \"doc3\",\n                                                    new DocumentContent(DocumentContentSourceType.INLINE, docContent3));\npatientDocument3.setClinicalType(ClinicalDocumentType.PATHOLOGY);\npatientDocument3.setLanguage(\"en\");\npatientDocument3.setCreatedDateTime(OffsetDateTime.parse(\"2022-01-01T10:15:30+01:00\"));\n\npatient1.getData().add(patientDocument3);\n\n// Set configuration to include evidence for the cancer staging inferences\nOncoPhenotypeModelConfiguration configuration = new OncoPhenotypeModelConfiguration();\nconfiguration.setIncludeEvidence(true);\n\n// Construct the request with the patient and configration\nOncoPhenotypeData oncoPhenotypeData = new OncoPhenotypeData(Arrays.asList(patient1));\noncoPhenotypeData.setConfiguration(configuration);\n\nPollerFlux<OncoPhenotypeResult, OncoPhenotypeResult> asyncPoller = asyncClient.beginInferCancerProfile(oncoPhenotypeData);\n```\n\n## Troubleshooting\n\n## Next steps\n<!--\nThis code sample show common scenario operation with the Azure Health Insights Cancer Profiling library. More samples can be found under the [samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/healthinsights/azure-health-insights-cancerprofiling/src/samples/java/com/azure/health/insights/) directory.\n-->\n\n## Additional documentation\nFor more extensive documentation on Azure Health Insights Cancer Profiling, see the [Cancer Profiling documentation][cancer_profiling_docs] on docs.microsoft.com.\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [cla.microsoft.com][cla].\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n[cla]: https://cla.microsoft.com\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n[azure_subscription]: https://azure.microsoft.com/free/\n[cognitive_resource_cli]: https://docs.microsoft.com/azure/cognitive-services/cognitive-services-apis-create-account-cli\n[jdk_link]: https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable\n\n[health_insights]: https://learn.microsoft.com/azure/azure-health-insights/overview\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_portal]: https://portal.azure.com\n[cancer_profiling_docs]: https://learn.microsoft.com/azure/azure-health-insights/oncophenotype/overview\n[cancer_profiling_client_class]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/healthinsights/azure-health-insights-cancerprofiling/src/main/java/com/azure/health/insights/cancerprofiling/CancerProfilingClient.java\n[package]: https://mvnrepository.com/artifact/com.azure/azure-health-insights-cancerprofiling\n[source_code]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/healthinsights/azure-health-insights-cancerprofiling/src\n[cancer_profiling_api_documentation]: https://learn.microsoft.com/rest/api/cognitiveservices/healthinsights/onco-phenotype\n[product_documentation]: https://learn.microsoft.com/azure/azure-health-insights/oncophenotype/\n[samples_location]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/healthinsights/azure-health-insights-cancerprofiling/src/samples/\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%healthinsights%2Fazure-health-insights-cancerprofiling%2FREADME.png)\n",
        "repo_name": "healthinsights/azure-health-insights-cancerprofiling",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/healthinsights/azure-health-insights-cancerprofiling",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Cognitive Services Health Insights Clinical Matching client library for Java\n\n[Health Insights](https://review.learn.microsoft.com/azure/cognitive-services/health-decision-support/overview?branch=main) is an Azure Applied AI Service built with the Azure Cognitive Services Framework, that leverages multiple Cognitive Services, Healthcare API services and other Azure resources.\n\nThe [Clinical Matching model][clinical_matching_docs] receives patients data and clinical trials protocols, and provides relevant clinical trials based on eligibility criteria.\n\n[Source code][source_code] | [Package (Maven)][package] | [API reference documentation][clinical_matching_api_documentation] | [Product Documentation][product_documentation] | [Samples][samples_location]\n\n\n## Getting started\n\n### Prerequisites\n\n- A [Java Development Kit (JDK)][jdk_link] with version 8 or above\n- [Azure Subscription][azure_subscription]\n- An existing Cognitive Services Health Insights instance.\n\nFor more information about creating the resource or how to get the location and sku information see [here][cognitive_resource_cli].\n\n### Include the Package\n\n[//]: # ({x-version-update-start;com.azure:azure-health-insights-clinicalmatching;current})\n\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-health-insights-clinicalmatching</artifactId>\n    <version>1.0.0-beta.1</version>\n</dependency>\n```\n\n[//]: # ({x-version-update-end})\n\n### Authenticate the client\n\nIn order to interact with the Health Insights Clinical Matching service, you'll need to create an instance of the [`ClinicalMatchingClient`][clinical_matching_client_class] class.  You will need an **endpoint** and an **API key** to instantiate a client object.  \n\n#### Get API Key\n\nYou can obtain the endpoint and API key from the resource information in the [Azure Portal][azure_portal].\n\nAlternatively, you can use the [Azure CLI][azure_cli] snippet below to get the API key from the Health Insights resource.\n\n```bash\naz cognitiveservices account keys list --resource-group <your-resource-group-name> --name <your-resource-name>\n```\n\n#### Create a ClinicalMatchingClient with an API Key Credential\n\nOnce you have the value for the API key, you can pass it as a string into an instance of **AzureKeyCredential**. Use the key as the credential parameter\nto authenticate the client:\n\n```Java com.azure.health.insights.cancerprofiling.clinicalmatching\nString endpoint = Configuration.getGlobalConfiguration().get(\"AZURE_HEALTH_INSIGHTS_ENDPOINT\");\nString apiKey = Configuration.getGlobalConfiguration().get(\"AZURE_HEALTH_INSIGHTS_API_KEY\");\n\nClinicalMatchingAsyncClient asyncClient = new ClinicalMatchingClientBuilder()\n    .endpoint(endpoint)\n    .serviceVersion(ClinicalMatchingServiceVersion.getLatest())\n    .credential(new AzureKeyCredential(apiKey))\n    .buildAsyncClient();\n```\n\n## Key concepts\n\nTrial Matcher provides the user of the services two main modes of operation: patients centric and clinical trial centric.\n- On patient centric mode, the Trial Matcher model bases the patient matching on the clinical condition, location, priorities, eligibility criteria, and other criteria that the patient and/or service users may choose to prioritize. The model helps narrow down and prioritize the set of relevant clinical trials to a smaller set of trials to start with, that the specific patient appears to be qualified for.\n- On clinical trial centric, the Trial Matcher is finding a group of patients potentially eligible to a clinical trial. The Trial Matcher narrows down the patients, first filtered on clinical condition and selected clinical observations, and then focuses on those patients who met the baseline criteria, to find the group of patients that appears to be eligible patients to a trial.\n\n## Examples\n\nFinding potential eligible trials for a patient.\n<!--\n- [SampleMatchTrialsSync.java](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/healthinsights/azure-health-insights-clinicalmatching/src/samples/java/com/azure/health/insights/clinicalmatching/SampleMatchTrialsSync.java).\n-->\n```Java com.azure.health.insights.clinicalmatching.findtrials\n// Construct Patient\nPatientRecord patient1 = new PatientRecord(\"patient_1\");\nPatientInfo patientInfo = new PatientInfo();\npatientInfo.setBirthDate(LocalDate.parse(\"1965-12-26\"));\npatientInfo.setSex(PatientInfoSex.MALE);\nfinal List<ClinicalCodedElement> clinicalInfo = new ArrayList<ClinicalCodedElement>();\npatientInfo.setClinicalInfo(clinicalInfo);\npatient1.setInfo(patientInfo);\n\nfinal String system = \"http://www.nlm.nih.gov/research/umls\";\n// Attach clinical info to the patient\nclinicalInfo.add(createClinicalCodedElement(system, \"C0006826\", \"Malignant Neoplasms\", \"true\"));\nclinicalInfo.add(createClinicalCodedElement(system, \"C1522449\", \"Therapeutic radiology procedure\", \"true\"));\nclinicalInfo.add(createClinicalCodedElement(system, \"C1512162\", \"Eastern Cooperative Oncology Group\", \"1\"));\nclinicalInfo.add(createClinicalCodedElement(system, \"C0019693\", \"HIV Infections\", \"false\"));\nclinicalInfo.add(createClinicalCodedElement(system, \"C1300072\", \"Tumor stage\", \"2\"));\nclinicalInfo.add(createClinicalCodedElement(system, \"METASTATIC\", \"metastatic\", \"true\"));\nclinicalInfo.add(createClinicalCodedElement(system, \"C0019163\", \"Hepatitis B\", \"false\"));\nclinicalInfo.add(createClinicalCodedElement(system, \"C0018802\", \"Congestive heart failure\", \"true\"));\nclinicalInfo.add(createClinicalCodedElement(system, \"C0019196\", \"Hepatitis C\", \"false\"));\nclinicalInfo.add(createClinicalCodedElement(system, \"C0220650\", \"Metastatic malignant neoplasm to brain\", \"true\"));\n\n// Create registry filter\nClinicalTrialRegistryFilter registryFilters = new ClinicalTrialRegistryFilter();\n// Limit the trial to a specific patient condition (\"Non-small cell lung cancer\")\nregistryFilters.setConditions(Arrays.asList(\"Non-small cell lung cancer\"));\n// Limit the clinical trial to a certain phase, phase 1\nregistryFilters.setPhases(Arrays.asList(ClinicalTrialPhase.PHASE1));\n// Specify the clinical trial registry source as ClinicalTrials.Gov\nregistryFilters.setSources(Arrays.asList(ClinicalTrialSource.CLINICALTRIALS_GOV));\n// Limit the clinical trial to a certain location, in this case California, USA\n\nGeographicLocation location = new GeographicLocation(\"United States\");\nlocation.setCity(\"Gilbert\");\nlocation.setState(\"Arizona\");\nregistryFilters.setFacilityLocations(Arrays.asList(location));\n// Limit the trial to a specific study type, interventional\nregistryFilters.setStudyTypes(Arrays.asList(ClinicalTrialStudyType.INTERVENTIONAL));\n\n// Construct ClinicalTrial instance and attach the registry filter to it.\nClinicalTrials clinicalTrials = new ClinicalTrials();\nclinicalTrials.setRegistryFilters(Arrays.asList(registryFilters));\n\n// Create TrialMatcherData\nTrialMatcherModelConfiguration configuration = new TrialMatcherModelConfiguration(clinicalTrials);\nTrialMatcherData trialMatcherData = new TrialMatcherData(Arrays.asList(patient1));\ntrialMatcherData.setConfiguration(configuration);\n\nPollerFlux<TrialMatcherResult, TrialMatcherResult> asyncPoller = asyncClient.beginMatchTrials(trialMatcherData);\n```\n\n## Troubleshooting\n\n## Next steps\n\nTo see the full example source files, see:\n<!--\nThis code sample show common scenario operation with the Azure Health Insights Clinical Matching library. More samples can be found under the [samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/healthinsights/azure-health-insights-clinicalmatching/src/samples/java/com/azure/health/insights/) directory.\n-->\n\n## Additional documentation\nFor more extensive documentation on Azure Health Insights Clinical Matching, see the [Clinical Matching documentation][clinical_matching_docs] on docs.microsoft.com.\n\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [cla.microsoft.com][cla].\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n[cla]: https://cla.microsoft.com\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n[azure_subscription]: https://azure.microsoft.com/free/\n[cognitive_resource_cli]: https://docs.microsoft.com/azure/cognitive-services/cognitive-services-apis-create-account-cli\n[jdk_link]: https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_portal]: https://portal.azure.com\n[clinical_matching_docs]: https://review.learn.microsoft.com/azure/cognitive-services/health-decision-support/trial-matcher/overview?branch=main\n[clinical_matching_client_class]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/healthinsights/azure-health-insights-clinicalmatching/src/main/java/com/azure/health/insights/clinicalmatching/ClinicalMatchingClient.java\n[package]: https://mvnrepository.com/artifact/com.azure/azure-health-insights-clinicalmatching\n[source_code]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/healthinsights/azure-health-insights-clinicalmatching/src/\n[clinical_matching_api_documentation]: https://review.learn.microsoft.com/rest/api/cognitiveservices/healthinsights/trial-matcher?branch=healthin202303\n[product_documentation]: https://review.learn.microsoft.com/azure/cognitive-services/health-decision-support/trial-matcher/?branch=main\n[samples_location]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/healthinsights/azure-health-insights-clinicalmatching/src/samples\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%healthinsights%2Fazure-health-insights-clinicalmatching%2FREADME.png)",
        "repo_name": "healthinsights/azure-health-insights-clinicalmatching",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/healthinsights/azure-health-insights-clinicalmatching",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager HybridCompute client library for Java\n\nAzure Resource Manager HybridCompute client library for Java.\n\nThis package contains Microsoft Azure SDK for HybridCompute Management SDK. The Hybrid Compute Management Client. Package tag package-preview-2021-03. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-hybridcompute;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-hybridcompute</artifactId>\n    <version>1.0.0-beta.2</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nHybridComputeManager manager = HybridComputeManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/hybridcompute/azure-resourcemanager-hybridcompute/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "hybridcompute/azure-resourcemanager-hybridcompute",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/hybridcompute/azure-resourcemanager-hybridcompute",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager HybridContainerService client library for Java\n\nAzure Resource Manager HybridContainerService client library for Java.\n\nThis package contains Microsoft Azure SDK for HybridContainerService Management SDK. The Microsoft.HybridContainerService Rest API spec. Package tag package-preview-2022-09. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-hybridcontainerservice;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-hybridcontainerservice</artifactId>\n    <version>1.0.0-beta.2</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nHybridContainerServiceManager manager = HybridContainerServiceManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/hybridcontainerservice/azure-resourcemanager-hybridcontainerservice/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "hybridcontainerservice/azure-resourcemanager-hybridcontainerservice",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/hybridcontainerservice/azure-resourcemanager-hybridcontainerservice",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager HybridKubernetes client library for Java\n\nAzure Resource Manager HybridKubernetes client library for Java.\n\nThis package contains Microsoft Azure SDK for HybridKubernetes Management SDK. Hybrid Kubernetes Client. Package tag package-2021-10-01. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-hybridkubernetes;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-hybridkubernetes</artifactId>\n    <version>1.0.0-beta.3</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nHybridKubernetesManager manager = HybridKubernetesManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/hybridkubernetes/azure-resourcemanager-hybridkubernetes/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "hybridkubernetes/azure-resourcemanager-hybridkubernetes",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/hybridkubernetes/azure-resourcemanager-hybridkubernetes",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager HybridNetwork client library for Java\n\nAzure Resource Manager HybridNetwork client library for Java.\n\nThis package contains Microsoft Azure SDK for HybridNetwork Management SDK. The definitions in this swagger specification will be used to manage the Hybrid Network resources. Package tag package-2021-05-01. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-hybridnetwork;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-hybridnetwork</artifactId>\n    <version>1.0.0-beta.2</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nHybridNetworkManager manager = HybridNetworkManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/hybridnetwork/azure-resourcemanager-hybridnetwork/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n",
        "repo_name": "hybridnetwork/azure-resourcemanager-hybridnetwork",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/hybridnetwork/azure-resourcemanager-hybridnetwork",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "- [Azure identity authentication extensions plugin library for Java](#azure-identity-authentication-extensions-plugin-library-for-java)\n  - [Getting started](#getting-started)\n    - [Prerequisites](#prerequisites)\n  - [Key concepts](#key-concepts)\n  - [Architecture](#architecture)\n    - [Authenticating with JDBC](#authenticating-with-jdbc)\n  - [Examples](#examples)\n  - [Troubleshooting](#troubleshooting)\n  - [Next steps](#next-steps)\n  - [Contributing](#contributing)\n    \n# Azure identity authentication extensions plugin library for Java\n\nThis package contains authentication extensions to get a token from Azure Active Directory (Azure AD) for Azure services, like Azure Database for MySQL.\n\n## Getting started\n\n### Prerequisites\n\n- An Azure account with an active subscription. [Create an account for free](https://azure.microsoft.com/free/).\n- [Java Development Kit (JDK)][jdk] with version 8 or above.\n- [Apache Maven](https://maven.apache.org/download.cgi).\n\n## Key concepts\n\nAzure Identity Extensions contains a common template framework for users to get a token from Azure AD and\nuse the token as a password. For example, to connect Azure hosted MySQL, get a token from Azure AD and use the\ntoken as a password to connect with MySQL.\n\n## Architecture\n\n### Authenticating with JDBC\n\nThis picture shows how the JDBC authentication plugins provided by Azure Identity Extensions authenticate with managed identity.\n![Architecture](img/passwordless-connections-from-java-apps-to-data-services.jpg)\n\n## Examples\nFor documentation on how to use this package, please refer to [Quickstart:Use Java and JDBC with Azure Database for MySQL](https://aka.ms/passwordless/quickstart/mysql) and [Quickstart:Use Java and JDBC with Azure Database for PostgreSQL](https://aka.ms/passwordless/quickstart/postgresql).\n\n\n## Troubleshooting\nIf you encounter any bugs, please file issues via [Issues](https://github.com/Azure/azure-sdk-for-java/issues).\n\n## Next steps\nOther useful docs are:\n* [With Azure Database for MySQL][azure-identity-extensions-jdbc-mysql]:  Azure identity extensions for Azure Database for MySQL.\n* [With Azure Database for PostgreSQL][azure-identity-extensions-jdbc-postgresql]:  Azure identity extensions for Azure Database for PostgreSQL.\n\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n<!-- LINKS -->\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure-identity-extensions-jdbc-mysql]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/identity/azure-identity-extensions/Azure-Database-for-MySQL-README.md\n[azure-identity-extensions-jdbc-postgresql]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/identity/azure-identity-extensions/Azure-Database-for-PostgreSQL-README.md\n",
        "repo_name": "identity/azure-identity-extensions",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity-extensions",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Identity Performance test client library for Java\n\nRepresents Performance tests for Azure Identity SDK for Java.\n\n## Getting started\n\n### Prerequisites\n\n- A [Java Development Kit (JDK)][jdk_link], version 8 or later.\n\n### Adding the package to your product\n\n\n## Key concepts\n\n\n## Examples\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- links -->\n[jdk_link]: https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable\n",
        "repo_name": "identity/azure-identity-perf",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity-perf",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Identity client library for Java\n\nThe Azure Identity library provides [Azure Active Directory (Azure AD)](https://learn.microsoft.com/azure/active-directory/fundamentals/active-directory-whatis) token authentication support across the Azure SDK. It provides a set of [TokenCredential](https://learn.microsoft.com/java/api/com.azure.core.credential.tokencredential?view=azure-java-stable) implementations that can be used to construct Azure SDK clients that support Azure AD token authentication.\n\n[Source code][source] | [API reference documentation][javadoc] | [Azure AD documentation][azuread_doc]\n\n## Getting started\n\n### Include the package\n\n#### Include the BOM file\n\nInclude the `azure-sdk-bom` in your project to take a dependency on the stable version of the library. In the following snippet, replace the `{bom_version_to_target}` placeholder with the version number. To learn more about the BOM, see the [Azure SDK BOM README](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/boms/azure-sdk-bom/README.md).\n\n```xml\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>com.azure</groupId>\n            <artifactId>azure-sdk-bom</artifactId>\n            <version>{bom_version_to_target}</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n```\n\nThen include the direct dependency in the `dependencies` section without the version tag:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-identity</artifactId>\n  </dependency>\n</dependencies>\n```\n\n#### Include direct dependency\n\nTo take dependency on a particular version of the library that isn't present in the BOM, add the direct dependency to your project as follows:\n\n[//]: # ({x-version-update-start;com.azure:azure-identity;dependency})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-identity</artifactId>\n    <version>1.9.0</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Prerequisites\n\n- A [Java Development Kit (JDK)][jdk_link], version 8 or later.\n- An [Azure subscription][azure_sub].\n- The Azure CLI can also be useful for authenticating in a development environment, creating accounts, and managing account roles.\n\n### Authenticate the client\n\nWhen debugging and executing code locally, it's typical for a developer to use their own account for authenticating calls to Azure services. There are several developer tools that can be used to perform this authentication in your development environment:\n\n- [Azure Toolkit for IntelliJ](https://learn.microsoft.com/azure/developer/java/sdk/identity-dev-env-auth#intellij-credential)\n- [Visual Studio Code Azure Account Extension](https://learn.microsoft.com/azure/developer/java/sdk/identity-dev-env-auth#visual-studio-code-credential)\n  - It's a [known issue](https://github.com/Azure/azure-sdk-for-java/issues/27364) that `VisualStudioCodeCredential` doesn't work with [Azure Account extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode.azure-account) versions newer than **0.9.11**. A long-term fix to this problem is in progress. In the meantime, consider authenticating via the Azure CLI (below).\n- [Azure CLI](https://learn.microsoft.com/azure/developer/java/sdk/identity-dev-env-auth#azure-cli-credential)\n\nSelect each item above to learn about how to configure them for Azure Identity authentication.\n\n## Key concepts\n\n### Credentials\n\nA credential is a class that contains or can obtain the data needed for a service client to authenticate requests. Service clients across the Azure SDK accept credentials when they're constructed. The service clients use those credentials to authenticate requests to the service.\n\nThe Azure Identity library focuses on OAuth authentication with Azure AD, and it offers various credential classes capable of acquiring an Azure AD token to authenticate service requests. All of the credential classes in this library are implementations of the `TokenCredential` abstract class in [azure-core][azure_core_library], and any of them can be used by to construct service clients capable of authenticating with a `TokenCredential`.\n\nSee [Credential classes](#credential-classes) for a complete list of available credential classes.\n\n### DefaultAzureCredential\n\nThe `DefaultAzureCredential` is appropriate for most scenarios where the application is intended to ultimately be run in Azure. This is because the `DefaultAzureCredential` combines credentials commonly used to authenticate when deployed, with credentials used to authenticate in a development environment.\n\n> Note: `DefaultAzureCredential` is intended to simplify getting started with the SDK by handling common scenarios with reasonable default behaviors. Developers who want more control or whose scenario isn't served by the default settings should use other credential types.\n\nThe `DefaultAzureCredential` will attempt to authenticate via the following mechanisms in order.\n\n![DefaultAzureCredential authentication flow](images/mermaidjs/DefaultAzureCredentialAuthFlow.svg)\n\n1. **Environment** - The `DefaultAzureCredential` will read account information specified via [environment variables](#environment-variables) and use it to authenticate.\n2. **Workload Identity** - If the app is deployed on Kubernetes with environment variables set by the workload identity webhook, `DefaultAzureCredential` will authenticate the configured identity.\n3. **Managed Identity** - If the application is deployed to an Azure host with Managed Identity enabled, the `DefaultAzureCredential` will authenticate with that account.\n4. **Azure Developer CLI** - If the developer has authenticated an account via the Azure Developer CLI `azd auth login` command, the `DefaultAzureCredential` will authenticate with that account.\n5. **IntelliJ** - If the developer has authenticated via Azure Toolkit for IntelliJ, the `DefaultAzureCredential` will authenticate with that account.\n6. **Azure CLI** - If the developer has authenticated an account via the Azure CLI `az login` command, the `DefaultAzureCredential` will authenticate with that account.\n7. **Azure PowerShell** - If the developer has authenticated an account via the Azure PowerShell `Connect-AzAccount` command, the `DefaultAzureCredential` will authenticate with that account.\n\n#### Note about `VisualStudioCodeCredential`\n\nDue to a [known issue](https://github.com/Azure/azure-sdk-for-java/issues/27364), `VisualStudioCodeCredential` has been removed from the `DefaultAzureCredential` token chain. When the issue is resolved in a future release, this change will be reverted.\n\n## Examples\n\nYou can find more examples of using various credentials in [Azure Identity Examples Wiki page](https://github.com/Azure/azure-sdk-for-java/wiki/Azure-Identity-Examples).\n\n### Authenticate with `DefaultAzureCredential`\n\nThis example demonstrates authenticating the `SecretClient` from the [azure-security-keyvault-secrets][secrets_client_library] client library using the `DefaultAzureCredential`.\n\n```java\n/**\n * The default credential first checks environment variables for configuration.\n * If environment configuration is incomplete, it will try managed identity.\n */\npublic void createDefaultAzureCredential() {\n    DefaultAzureCredential defaultCredential = new DefaultAzureCredentialBuilder().build();\n\n    // Azure SDK client builders accept the credential as a parameter\n    SecretClient client = new SecretClientBuilder()\n        .vaultUrl(\"https://{YOUR_VAULT_NAME}.vault.azure.net\")\n        .credential(defaultCredential)\n        .buildClient();\n}\n```\n\nSee more how to configure the `DefaultAzureCredential` on your workstation or Azure in [Configure DefaultAzureCredential](https://github.com/Azure/azure-sdk-for-java/wiki/Set-up-Your-Environment-for-Authentication#configure-defaultazurecredential).\n\n### Authenticate a user-assigned managed identity with `DefaultAzureCredential`\n\nTo authenticate using user-assigned managed identity, ensure that configuration instructions for your supported Azure resource [here](#managed-identity-support) have been successfully completed.\n\nThe below example demonstrates authenticating the `SecretClient` from the [azure-security-keyvault-secrets][secrets_client_library] client library using the `DefaultAzureCredential`, deployed to an Azure resource with a user-assigned managed identity configured.\n\nSee more about how to configure a user-assigned managed identity for an Azure resource in [Enable managed identity for Azure resources](https://github.com/Azure/azure-sdk-for-java/wiki/Set-up-Your-Environment-for-Authentication#enable-managed-identity-for-azure-resources).\n\n```java\n/**\n * The default credential will use the user assigned managed identity with the specified client ID.\n */\npublic void createDefaultAzureCredentialForUserAssignedManagedIdentity() {\n    DefaultAzureCredential defaultCredential = new DefaultAzureCredentialBuilder()\n        .managedIdentityClientId(\"<MANAGED_IDENTITY_CLIENT_ID>\")\n        .build();\n\n    // Azure SDK client builders accept the credential as a parameter\n    SecretClient client = new SecretClientBuilder()\n        .vaultUrl(\"https://{YOUR_VAULT_NAME}.vault.azure.net\")\n        .credential(defaultCredential)\n        .buildClient();\n}\n```\n\nIn addition to configuring the `managedIdentityClientId` via code, it can also be set using the `AZURE_CLIENT_ID` environment variable. These two approaches are equivalent when using the `DefaultAzureCredential`.\n\n### Authenticate a user in Azure Toolkit for IntelliJ with `DefaultAzureCredential`\n\nTo authenticate using IntelliJ, ensure that configuration instructions [here](https://learn.microsoft.com/azure/developer/java/sdk/identity-dev-env-auth#sign-in-azure-toolkit-for-intellij-for-intellijcredential) have been successfully completed.\n\nThe below example demonstrates authenticating the `SecretClient` from the [azure-security-keyvault-secrets][secrets_client_library] client library using the `DefaultAzureCredential`, on a workstation with IntelliJ IDEA installed, and the user has signed in with an Azure account to the Azure Toolkit for IntelliJ.\n\nSee more about how to configure your IntelliJ IDEA in [Sign in Azure Toolkit for IntelliJ for IntelliJCredential](https://github.com/Azure/azure-sdk-for-java/wiki/Set-up-Your-Environment-for-Authentication#sign-in-azure-toolkit-for-intellij-for-intellijcredential).\n\n```java\n/**\n * The default credential will use the KeePass database path to find the user account in IntelliJ on Windows.\n */\npublic void createDefaultAzureCredentialForIntelliJ() {\n    DefaultAzureCredential defaultCredential = new DefaultAzureCredentialBuilder()\n        // KeePass configuration required only for Windows. No configuration needed for Linux / Mac\n        .intelliJKeePassDatabasePath(\"C:\\\\Users\\\\user\\\\AppData\\\\Roaming\\\\JetBrains\\\\IdeaIC2020.1\\\\c.kdbx\")\n        .build();\n\n    // Azure SDK client builders accept the credential as a parameter\n    SecretClient client = new SecretClientBuilder()\n        .vaultUrl(\"https://{YOUR_VAULT_NAME}.vault.azure.net\")\n        .credential(defaultCredential)\n        .buildClient();\n}\n```\n\n## Managed Identity support\n\nThe [Managed identity authentication](https://learn.microsoft.com/azure/active-directory/managed-identities-azure-resources/overview) is supported via either the `DefaultAzureCredential` or the `ManagedIdentityCredential` directly for the following Azure Services:\n\n- [Azure App Service and Azure Functions](https://learn.microsoft.com/azure/app-service/overview-managed-identity?tabs=dotnet)\n- [Azure Arc](https://learn.microsoft.com/azure/azure-arc/servers/managed-identity-authentication)\n- [Azure Cloud Shell](https://learn.microsoft.com/azure/cloud-shell/msi-authorization)\n- [Azure Kubernetes Service](https://learn.microsoft.com/azure/aks/use-managed-identity)\n- [Azure Service Fabric](https://learn.microsoft.com/azure/service-fabric/concepts-managed-identity)\n- [Azure Virtual Machines](https://learn.microsoft.com/azure/active-directory/managed-identities-azure-resources/how-to-use-vm-token)\n- [Azure Virtual Machines Scale Sets](https://learn.microsoft.com/azure/active-directory/managed-identities-azure-resources/qs-configure-powershell-windows-vmss)\n\n**Note:** Use `azure-identity` version `1.7.0` or later to utilize [token caching](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity/TOKEN_CACHING.md) support for managed identity authentication.\n\n### Examples\n\n#### Authenticate in Azure with Managed Identity\n\nThis example demonstrates authenticating the `SecretClient` from the [azure-security-keyvault-secrets][secrets_client_library] client library using the `ManagedIdentityCredential` in a virtual machine, app service, function app, cloud shell, or AKS environment on Azure, with system-assigned or user-assigned managed identity enabled.\n\nSee more about how to configure your Azure resource for managed identity in [Enable managed identity for Azure resources](https://github.com/Azure/azure-sdk-for-java/wiki/Set-up-Your-Environment-for-Authentication#enable-managed-identity-for-azure-resources)\n\n```java\n/**\n * Authenticate with a User Assigned Managed identity.\n */\npublic void createManagedIdentityCredential() {\n    ManagedIdentityCredential managedIdentityCredential = new ManagedIdentityCredentialBuilder()\n        .clientId(\"<USER ASSIGNED MANAGED IDENTITY CLIENT ID>\") // only required for user assigned\n        .build();\n\n    // Azure SDK client builders accept the credential as a parameter\n    SecretClient client = new SecretClientBuilder()\n        .vaultUrl(\"https://{YOUR_VAULT_NAME}.vault.azure.net\")\n        .credential(managedIdentityCredential)\n        .buildClient();\n}\n```\n\n```java\n/**\n * Authenticate with a System Assigned Managed identity.\n */\npublic void createManagedIdentityCredential() {\n    ManagedIdentityCredential managedIdentityCredential = new ManagedIdentityCredentialBuilder()\n        .build();\n\n    // Azure SDK client builders accept the credential as a parameter\n    SecretClient client = new SecretClientBuilder()\n        .vaultUrl(\"https://{YOUR_VAULT_NAME}.vault.azure.net\")\n        .credential(managedIdentityCredential)\n        .buildClient();\n}\n```\n\n### Define a custom authentication flow with the `ChainedTokenCredential`\n\nWhile the `DefaultAzureCredential` is generally the quickest way to get started developing applications for Azure, more advanced users may want to customize the credentials considered when authenticating. The `ChainedTokenCredential` enables users to combine multiple credential instances to define a customized chain of credentials. This example demonstrates creating a `ChainedTokenCredential`, which will:\n\n- Attempt to authenticate using managed identity.\n- Fall back to authenticating via the Azure CLI if managed identity is unavailable in the current environment.\n\n```C# Snippet:CustomChainedTokenCredential\n// Authenticate using managed identity if it is available; otherwise use the Azure CLI to authenticate.\n\n    ManagedIdentityCredential managedIdentityCredential = new ManagedIdentityCredentialBuilder().build();\n    AzureCliCredential cliCredential = new AzureCliCredentialBuilder().build();\n\n    ChainedTokenCredential credential = new ChainedTokenCredentialBuilder().addLast(managedIdentityCredential).addLast(cliCredential).build();\n\n    // Azure SDK client builders accept the credential as a parameter\n    SecretClient client = new SecretClientBuilder()\n        .vaultUrl(\"https://{YOUR_VAULT_NAME}.vault.azure.net\")\n        .credential(credential)\n        .buildClient();\n```\n\n## Cloud configuration\n\nCredentials default to authenticating to the Azure AD endpoint for Azure Public Cloud. To access resources in other clouds, such as Azure Government or a private cloud, configure credentials with the `auhtorityHost` argument. [AzureAuthorityHosts](https://learn.microsoft.com/java/api/com.azure.identity.azureauthorityhosts?view=azure-java-stable) defines authorities for well-known clouds:\n\n```java\nDefaultAzureCredential defaultAzureCredential = new DefaultAzureCredentialBuilder()\n    .authorityHost(AzureAuthorityHosts.AZURE_GOVERNMENT)\n    .build();\n```\n\nNot all credentials require this configuration. Credentials that authenticate through a development tool, such as `AzureCliCredential`, use that tool's configuration. Similarly, `VisualStudioCodeCredential` accepts an `authority` argument but defaults to the authority matching VS Code's \"Azure: Cloud\" setting.\n\n## Credential classes\n\n### Authenticate Azure-hosted applications\n\n<table style=\"border: 1px; width: 100%;\">\n  <caption>Authenticate Azure-hosted applications</caption>\n  <thead>\n    <tr>\n      <th>Credential class</th>\n      <th>Usage</th>\n      <th>Example</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code><a href=\"https://learn.microsoft.com/java/api/com.azure.identity.defaultazurecredential?view=azure-java-stable\">DefaultAzureCredential</a></code></td>\n      <td>provides a simplified authentication experience to quickly start developing applications run in Azure</td>\n      <td><a href=\"https://github.com/Azure/azure-sdk-for-java/wiki/Azure-Identity-Examples#authenticating-with-defaultazurecredential\">example</a></td>\n    </tr>\n    <tr>\n      <td><code><a href=\"https://learn.microsoft.com/java/api/com.azure.identity.chainedtokencredential?view=azure-java-stable\">ChainedTokenCredential</a></code></td>\n      <td>allows users to define custom authentication flows composing multiple credentials</td>\n      <td><a href=\"https://github.com/Azure/azure-sdk-for-java/wiki/Azure-Identity-Examples#chaining-credentials\">example</a></td>\n    </tr>\n    <tr>\n      <td><code><a href=\"https://learn.microsoft.com/java/api/com.azure.identity.environmentcredential?view=azure-java-stable\">EnvironmentCredential</a></code></td>\n      <td>authenticates a service principal or user via credential information specified in environment variables</td>\n      <td></td>\n    </tr>\n    <tr>\n      <td><code><a href=\"https://learn.microsoft.com/java/api/com.azure.identity.managedidentitycredential?view=azure-java-stable\">ManagedIdentityCredential</a></code></td>\n      <td>authenticates the managed identity of an Azure resource</td>\n      <td><a href=\"https://github.com/Azure/azure-sdk-for-java/wiki/Azure-Identity-Examples#authenticating-in-azure-with-managed-identity\">example</a></td>\n    </tr>\n    <tr>\n      <td><code><a href=\"https://learn.microsoft.com/java/api/com.azure.identity.workloadidentitycredential?view=azure-java-stable\">WorkloadIdentityCredential</a></code></td>\n      <td>supports <a href=\"https://learn.microsoft.com/azure/aks/workload-identity-overview\">Azure AD workload identity</a> on Kubernetes</td>\n      <td><a href=\"https://learn.microsoft.com/java/api/com.azure.identity.workloadidentitycredential?view=azure-java-stable\">example</a></td>\n    </tr>\n  </tbody>\n</table>\n\n### Authenticate service principals\n\n<table style=\"border: 1px; width: 100%;\">\n  <caption>Authenticate service principals</caption>\n  <thead>\n    <tr>\n      <th>Credential class</th>\n      <th>Usage</th>\n      <th>Example</th>\n      <th>Reference</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code><a href=\"https://learn.microsoft.com/java/api/com.azure.identity.clientassertioncredential?view=azure-java-stable\">ClientAssertionCredential</a></td>\n      <td>authenticates a service principal using a signed client assertion</td>\n      <td></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td><code><a href=\"https://learn.microsoft.com/java/api/com.azure.identity.clientcertificatecredential?view=azure-java-stable\">ClientCertificateCredential</a></code></td>\n      <td>authenticates a service principal using a certificate</td>\n      <td><a href=\"https://github.com/Azure/azure-sdk-for-java/wiki/Azure-Identity-Examples#authenticating-a-service-principal-with-a-client-certificate\">example</a></td>\n      <td><a href=\"https://learn.microsoft.com/azure/active-directory/develop/app-objects-and-service-principals\">Service principal authentication</a></td>\n    </tr>\n    <tr>\n      <td><code><a href=\"https://learn.microsoft.com/java/api/com.azure.identity.clientsecretcredential?view=azure-java-stable\">ClientSecretCredential</a></code></td>\n      <td>authenticates a service principal using a secret</td>\n      <td><a href=\"https://github.com/Azure/azure-sdk-for-java/wiki/Azure-Identity-Examples#authenticating-a-service-principal-with-a-client-secret\">example</a></td>\n      <td><a href=\"https://learn.microsoft.com/azure/active-directory/develop/app-objects-and-service-principals\">Service principal authentication</a></td>\n    </tr>\n  </tbody>\n</table>\n\n### Authenticate users\n\n<table style=\"border: 1px; width: 100%;\">\n  <caption>Authenticate users</caption>\n  <thead>\n    <tr>\n      <th>Credential class</th>\n      <th>Usage</th>\n      <th>Example</th>\n      <th>Reference</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code><a href=\"https://learn.microsoft.com/java/api/com.azure.identity.authorizationcodecredential?view=azure-java-stable\">AuthorizationCodeCredential</a></code></td>\n      <td>authenticate a user with a previously obtained authorization code as part of an Oauth 2 flow</td>\n      <td></td>\n      <td><a href=\"https://learn.microsoft.com/azure/active-directory/develop/v2-oauth2-auth-code-flow\">OAuth2 authentication code</a></td>\n    </tr>\n    <tr>\n      <td><code><a href=\"https://learn.microsoft.com/java/api/com.azure.identity.devicecodecredential?view=azure-java-stable\">DeviceCodeCredential</a></code></td>\n      <td>interactively authenticates a user on devices with limited UI</td>\n      <td><a href=\"https://github.com/Azure/azure-sdk-for-java/wiki/Azure-Identity-Examples#authenticating-a-user-account-with-device-code-flow\">example</a></td>\n      <td><a href=\"https://learn.microsoft.com/azure/active-directory/develop/v2-oauth2-device-code\">Device code authentication</a></td>\n    </tr>\n    <tr>\n      <td><code><a href=\"https://learn.microsoft.com/java/api/com.azure.identity.interactivebrowsercredential?view=azure-java-stable\">InteractiveBrowserCredential</a></code></td>\n      <td>interactively authenticates a user with the default system browser</td>\n      <td><a href=\"https://github.com/Azure/azure-sdk-for-java/wiki/Azure-Identity-Examples#authenticating-a-user-account-interactively-in-the-browser\">example</a></td>\n      <td><a href=\"https://learn.microsoft.com/azure/active-directory/develop/v2-oauth2-auth-code-flow\">OAuth2 authentication code</a></td>\n    </tr>\n    <tr>\n      <td><code><a href=\"https://learn.microsoft.com/java/api/com.azure.identity.onbehalfofcredential?view=azure-java-stable\">OnBehalfOfCredential</a></code></td>\n      <td>propagates the delegated user identity and permissions through the request chain</td>\n      <td></td>\n      <td><a href=\"https://learn.microsoft.com/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow\">On-behalf-of authentication</a></td>\n    </tr>\n    <tr>\n      <td><code><a href=\"https://learn.microsoft.com/java/api/com.azure.identity.usernamepasswordcredential?view=azure-java-stable\">UsernamePasswordCredential</a></code></td>\n      <td>authenticates a user with a username and password without multi-factored auth</td>\n      <td><a href=\"https://github.com/Azure/azure-sdk-for-java/wiki/Azure-Identity-Examples#authenticating-a-user-account-with-username-and-password\">example</a></td>\n      <td><a href=\"https://learn.microsoft.com/azure/active-directory/develop/v2-oauth-ropc\">Username + password authentication</a></td>\n    </tr>\n  </tbody>\n</table>\n\n### Authenticate via development tools\n\n<table style=\"border: 1px; width: 100%;\">\n  <caption>Authenticate via development tools</caption>\n  <thead>\n    <tr>\n      <th>Credential class</th>\n      <th>Usage</th>\n      <th>Example</th>\n      <th>Reference</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code><a href=\"https://learn.microsoft.com/java/api/com.azure.identity.azureclicredential?view=azure-java-stable\">AzureCliCredential</a></code></td>\n      <td>Authenticate in a development environment with the enabled user or service principal in Azure CLI</td>\n      <td><a href=\"https://github.com/Azure/azure-sdk-for-java/wiki/Azure-Identity-Examples#authenticating-a-user-account-with-azure-cli\">example</a></td>\n      <td><a href=\"https://learn.microsoft.com/cli/azure/authenticate-azure-cli\">Azure CLI authentication</a></td>\n    </tr>\n    <tr>\n      <td><code><a href=\"https://learn.microsoft.com/java/api/com.azure.identity.azuredeveloperclicredential?view=azure-java-stable\">AzureDeveloperCliCredential</a></code></td>\n      <td>Authenticate in a development environment with the enabled user or service principal in Azure Developer CLI</td>\n      <td></td>  \n      <td><a href=\"https://learn.microsoft.com/azure/developer/azure-developer-cli/reference\">Azure Developer CLI Reference</a></td>\n    </tr>\n    <tr>\n      <td><code><a href=\"https://learn.microsoft.com/java/api/com.azure.identity.azurepowershellcredential?view=azure-java-stable\">AzurePowerShellCredential </a></code></td>\n      <td>Authenticate in a development environment with the enabled user or service principal in Azure PowerShell</td>\n      <td><a href=\"https://github.com/Azure/azure-sdk-for-java/wiki/Azure-Identity-Examples#authenticating-a-user-account-with-azure-powershell\">example</a></td>\n      <td><a href=\"https://learn.microsoft.com/powershell/azure/?view=azps-8.3.0\">Azure PowerShell documentation</a></td>\n    </tr>\n    <tr>\n      <td><code><a href=\"https://learn.microsoft.com/java/api/com.azure.identity.intellijcredential?view=azure-java-stable\">IntelliJCredential</a></code></td>\n      <td>Authenticate in a development environment with the account in Azure Toolkit for IntelliJ</td>\n      <td><a href=\"https://github.com/Azure/azure-sdk-for-java/wiki/Azure-Identity-Examples#authenticating-a-user-account-with-intellij-idea\">example</a></td>\n      <td><a href=\"https://learn.microsoft.com/azure/developer/java/toolkit-for-intellij/sign-in-instructions\">IntelliJ authentication</a></td>\n    </tr>\n    <tr>\n      <td><code><a href=\"https://learn.microsoft.com/java/api/com.azure.identity.visualstudiocodecredential?view=azure-java-stable\">VisualStudioCodeCredential</a></code></td>\n      <td>Authenticate in a development environment with the account in Visual Studio Code Azure Account extension. </td>\n      <td><a href=\"https://github.com/Azure/azure-sdk-for-java/wiki/Azure-Identity-Examples#authenticating-a-user-account-with-visual-studio-code\">example</a></td>\n      <td><a href=\"https://marketplace.visualstudio.com/items?itemName=ms-vscode.azure-account\">VS Code Azure Account extension</a></td>\n    </tr>\n  </tbody>\n</table>\n\n> __Note:__ All credential implementations in the Azure Identity library are threadsafe, and a single credential instance can be used to create multiple service clients.\n\nCredentials can be chained together to be tried in turn until one succeeds using the `ChainedTokenCredential`; see [chaining credentials](#define-a-custom-authentication-flow-with-the-chainedtokencredential) for details.\n\n## Environment variables\n\n`DefaultAzureCredential` and `EnvironmentCredential` can be configured with environment variables. Each type of authentication requires values for specific variables:\n\n### Service principal with secret\n\n<table style=\"border: 1px; width: 100%;\">\n  <caption>Service principal with secret</caption>\n  <thead>\n    <tr>\n      <th>Variable name</th>\n      <th>Value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>AZURE_CLIENT_ID</code></td>\n      <td>ID of an Azure AD application</td>\n    </tr>\n    <tr>\n      <td><code>AZURE_TENANT_ID</code></td>\n      <td>ID of the application's Azure AD tenant</td>\n    </tr>\n    <tr>\n      <td><code>AZURE_CLIENT_SECRET</code></td>\n      <td>one of the application's client secrets</td>\n    </tr>\n  </tbody>\n</table>\n\n### Service principal with certificate\n\n<table style=\"border: 1px; width: 100%;\">\n  <caption>Service principal with certificate</caption>\n  <thead>\n    <tr>\n      <th>Variable name</th>\n      <th>Value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>AZURE_CLIENT_ID</code></td>\n      <td>ID of an Azure AD application</td>\n    </tr>\n    <tr>\n      <td><code>AZURE_TENANT_ID</code></td>\n      <td>ID of the application's Azure AD tenant</td>\n    </tr>\n    <tr>\n      <td><code>AZURE_CLIENT_CERTIFICATE_PATH</code></td>\n      <td>path to a PFX or PEM-encoded certificate file including private key</td>\n    </tr>\n    <tr>\n        <td><code>AZURE_CLIENT_CERTIFICATE_PASSWORD</code></td>\n        <td>(optional) password for certificate. The certificate can't be password-protected unless this value is specified.</td>\n    </tr>\n  </tbody>\n</table>\n\n### Username and password\n\n<table style=\"border: 1px; width: 100%;\">\n  <caption>Username and password</caption>\n  <thead>\n    <tr>\n      <th>Variable name</th>\n      <th>Value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>AZURE_CLIENT_ID</code></td>\n      <td>ID of an Azure AD application</td>\n    </tr>\n    <tr>\n      <td><code>AZURE_TENANT_ID</code></td>\n      <td>(optional) ID of the application's Azure AD tenant</td>\n    </tr>\n    <tr>\n      <td><code>AZURE_USERNAME</code></td>\n      <td>a username (usually an email address)</td>\n    </tr>\n    <tr>\n      <td><code>AZURE_PASSWORD</code></td>\n      <td>that user's password</td>\n    </tr>\n  </tbody>\n</table>\n\nConfiguration is attempted in the above order. For example, if values for a client secret and certificate are both present, the client secret will be used.\n\n## Token caching\nToken caching is a feature provided by the Azure Identity library that allows apps to:\n- Cache tokens in memory (default) or on disk (opt-in).\n- Improve resilience and performance.\n- Reduce the number of requests made to Azure AD to obtain access tokens.\n\nThe Azure Identity library offers both in-memory and persistent disk caching. For more details, see the [token caching documentation](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity/TOKEN_CACHING.md).\n\n## Troubleshooting\n\nCredentials raise exceptions when they fail to authenticate or can't execute authentication. When credentials fail to authenticate, the`ClientAuthenticationException` is raised. The exception has a `message` attribute, which describes why authentication failed. When this exception is raised by `ChainedTokenCredential`, the chained execution of underlying list of credentials is stopped.\n\nWhen credentials can't execute authentication due to one of the underlying resources required by the credential being unavailable on the machine, the`CredentialUnavailableException` is raised. The exception has a `message` attribute that describes why the credential is unavailable for authentication execution. When this exception is raised by `ChainedTokenCredential`, the message collects error messages from each credential in the chain.\n\nSee the [troubleshooting guide](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity/TROUBLESHOOTING.md) for details on how to diagnose various failure scenarios.\n\n## Next steps\n\nThe Java client libraries listed [here](https://azure.github.io/azure-sdk/releases/latest/java.html) support authenticating with `TokenCredential` and the Azure Identity library. You can learn more about their use, and find additional documentation on use of these client libraries along samples with can be found in the links mentioned [here](https://azure.github.io/azure-sdk/releases/latest/java.html).\n\nThe [microsoft-graph-sdk](https://github.com/microsoftgraph/msgraph-sdk-java) also supports authenticating with `TokenCredential` and the Azure Identity library.\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct]. For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments.\n\n<!-- LINKS -->\n[azure_core_library]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/core\n[azure_sub]: https://azure.microsoft.com/free/\n[azuread_doc]: https://learn.microsoft.com/azure/active-directory/\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[javadoc]: https://learn.microsoft.com/java/api/com.azure.identity?view=azure-java-stable\n[jdk_link]: https://learn.microsoft.com/java/azure/jdk/?view=azure-java-stable\n[logging]: https://github.com/Azure/azure-sdk-for-java/wiki/Logging-with-Azure-SDK\n[secrets_client_library]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/keyvault/azure-security-keyvault-secrets\n[source]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/identity/azure-identity\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fidentity%2Fazure-identity%2FREADME.png)\n",
        "repo_name": "identity/azure-identity",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager ImageBuilder client library for Java\n\nAzure Resource Manager ImageBuilder client library for Java.\n\nThis package contains Microsoft Azure SDK for ImageBuilder Management SDK. Azure Virtual Machine Image Builder Client. Package tag package-2022-07. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-imagebuilder;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-imagebuilder</artifactId>\n    <version>1.0.0-beta.4</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nImageBuilderManager manager = ImageBuilderManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/imagebuilder/azure-resourcemanager-imagebuilder/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "imagebuilder/azure-resourcemanager-imagebuilder",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/imagebuilder/azure-resourcemanager-imagebuilder",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager IotCentral client library for Java\n\nAzure Resource Manager IotCentral client library for Java.\n\nThis package contains Microsoft Azure SDK for IotCentral Management SDK. Use this API to manage IoT Central Applications in your Azure subscription. Package tag package-preview-2021-11. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-iotcentral;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-iotcentral</artifactId>\n    <version>1.1.0-beta.1</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nIotCentralManager manager = IotCentralManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/iotcentral/azure-resourcemanager-iotcentral/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n",
        "repo_name": "iotcentral/azure-resourcemanager-iotcentral",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/iotcentral/azure-resourcemanager-iotcentral",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager IotHub client library for Java\n\nAzure Resource Manager IotHub client library for Java.\n\nThis package contains Microsoft Azure SDK for IotHub Management SDK. Use this API to manage the IoT hubs in your Azure subscription. Package tag package-preview-2022-11. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-iothub;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-iothub</artifactId>\n    <version>1.2.0-beta.3</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nIotHubManager manager = IotHubManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/iothub/azure-resourcemanager-iothub/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "iothub/azure-resourcemanager-iothub",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/iothub/azure-resourcemanager-iothub",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Key Vault Administration library for Java\nAzure Key Vault Managed HSM is a fully-managed, highly-available, single-tenant, standards-compliant cloud service that enables you to safeguard cryptographic keys for your cloud applications using FIPS 140-2 Level 3 validated HSMs.\n\nThe Azure Key Vault Administration library clients support administrative tasks such as full backup/restore and key-level role-based access control (RBAC).\n\n[Source code][source_code] | [API reference documentation][api_documentation] | [Product documentation][azkeyvault_docs] | [Samples][administration_samples]\n\n## Getting started\n### Include the package\n#### Include the BOM file\nPlease include the `azure-sdk-bom` to your project to take dependency on the General Availability (GA) version of the library. In the following snippet, replace the {bom_version_to_target} placeholder with the version number. To learn more about the BOM, see the [AZURE SDK BOM README](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/boms/azure-sdk-bom/README.md).\n\n```xml\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>com.azure</groupId>\n            <artifactId>azure-sdk-bom</artifactId>\n            <version>{bom_version_to_target}</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n```\n\nand then include the direct dependency in the dependencies section without the version tag as shown below.\n\n```xml\n<dependencies>\n    <dependency>\n        <groupId>com.azure</groupId>\n        <artifactId>azure-security-keyvault-administration</artifactId>\n    </dependency>\n</dependencies>\n```\n\n#### Include direct dependency\nIf you want to take dependency on a particular version of the library that is not present in the BOM, add the direct dependency to your project as follows.\n\n[//]: # ({x-version-update-start;com.azure:azure-security-keyvault-administration;current})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-security-keyvault-administration</artifactId>\n    <version>4.3.2</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Prerequisites\n- A [Java Development Kit (JDK)][jdk_link], version 8 or later.\n- An [Azure Subscription][azure_subscription].\n- An existing [Azure Key Vault Managed HSM][azure_keyvault_mhsm]. If you need to create a Managed HSM, you can do so using the Azure CLI by following the steps in [this document][azure_keyvault_mhsm_cli].\n\n### Authenticate the client\nIn order to interact with the Azure Key Vault service, you will need to create an instance of either the [`KeyVaultAccessControlClient`](#create-an-access-control-client)class or the [`KeyVaultBackupClient`](#create-a-backup-client) class, as well as a **vault url** (which you may see as \"DNS Name\" in the Azure Portal) and a credential object. The examples shown in this document use a credential object named  [`DefaultAzureCredential`][default_azure_credential], which is appropriate for most scenarios, including local development and production environments. Additionally, we recommend using a [managed identity][managed_identity] for authentication in production environments.\n\nYou can find more information on different ways of authenticating and their corresponding credential types in the [Azure Identity documentation][azure_identity].\n\n#### Create an access control client\nOnce you perform [the authentication set up that suits you best][default_azure_credential] and replaced **your-managed-hsm-url** with the URL for your key vault, you can create the `KeyVaultAccessControlClient`:\n\n```java readme-sample-createAccessControlClient\nKeyVaultAccessControlClient keyVaultAccessControlClient = new KeyVaultAccessControlClientBuilder()\n    .vaultUrl(\"<your-managed-hsm-url>\")\n    .credential(new DefaultAzureCredentialBuilder().build())\n    .buildClient();\n```\n\n> NOTE: For using an asynchronous client use `KeyVaultAccessControlAsyncClient` instead of `KeyVaultAccessControlClient` and call `buildAsyncClient()`.\n\n#### Create a backup client\nOnce you perform [the authentication set up that suits you best][default_azure_credential] and replaced **your-managed-hsm-url** with the URL for your key vault, you can create the `KeyVaultBackupClient`:\n\n```java readme-sample-createBackupClient\nKeyVaultBackupClient keyVaultBackupClient = new KeyVaultBackupClientBuilder()\n    .vaultUrl(\"<your-managed-hsm-url>\")\n    .credential(new DefaultAzureCredentialBuilder().build())\n    .buildClient();\n```\n\n> NOTE: For using an asynchronous client use `KeyVaultBackupAsyncClient`  instead of `KeyVaultBackupClient` and call `buildAsyncClient()`.\n\n#### Create a settings client\nOnce you perform [the authentication set up that suits you best][default_azure_credential] and replaced **your-managed-hsm-url** with the URL for your key vault, you can create the `KeyVaultSettingsClient`:\n\n```java readme-sample-createBackupClient\nKeyVaultBackupClient keyVaultBackupClient = new KeyVaultBackupClientBuilder()\n    .vaultUrl(\"<your-managed-hsm-url>\")\n    .credential(new DefaultAzureCredentialBuilder().build())\n    .buildClient();\n```\n\n> NOTE: For using an asynchronous client use `KeyVaultSettingsAsyncClient`  instead of `KeyVaultSettingsClient` and call `buildAsyncClient()`.\n\n## Key concepts\n### Key Vault Access Control client\nThe Key Vault Access Control client performs the interactions with the Azure Key Vault service for getting, setting, deleting, and listing role assignments, as well as listing role definitions. Asynchronous (`KeyVaultAccessControlAsyncClient`) and synchronous (`KeyVaultAccessControlClient`) clients exist in the SDK allowing for the selection of a client based on an application's use case. Once you've initialized a role assignment, you can interact with the primary resource types in Key Vault.\n\n### Role Definition\nA role definition is a collection of permissions. It defines the operations that can be performed, such as read, write, and delete. It can also define the operations that are excluded from allowed operations.\n\nRole definitions can be listed and specified as part of a role assignment.\n\n### Role Assignment\nA role assignment is the association of a role definition to a service principal. They can be created, listed, fetched individually, and deleted.\n\n### Key Vault Backup client\nThe Key Vault Backup Client provides both synchronous and asynchronous operations for performing full key backups, full key restores, and selective key restores. Asynchronous (`KeyVaultBackupAsyncClient`) and synchronous (`KeyVaultBackupClient`) clients exist in the SDK allowing for the selection of a client based on an application's use case.\n\n> NOTE: The backing store for key backups is a blob storage container using Shared Access Signature authentication. For more details on creating a SAS token using the `BlobServiceClient`, see the [Azure Storage Blobs client README][storage_readme_sas_token]. Alternatively, it is possible to [generate a SAS token in Storage Explorer][portal_sas_token].\n\n### Backup Operation\nA backup operation represents a long-running operation for a full key backup.\n\n### Restore Operation\nA restore operation represents a long-running operation for both a full key and selective key restore.\n\n### Key Vault Settings client\nThe Key Vault Access Control client allows manipulation of an Azure Key Vault account's settings, with operations such as: getting, updating, and listing. Asynchronous (`KeyVaultSettingsAsyncClient`) and synchronous (`KeyVaultSettingsClient`) clients exist in the SDK allowing for the selection of a client based on an application's use case.\n\n## Access control operations\n### Examples\n#### Sync API\nThe following sections provide several code snippets covering some of the most common Azure Key Vault Access Control service tasks, including:\n- [List role definitions](#list-role-definitions)\n- [Create or update a role definition](#create-or-update-a-role-definition)\n- [Retrieve a role definition](#retrieve-a-role-definition)\n- [List role assignments](#list-role-assignments)\n- [Create a role assignment](#create-a-role-assignment)\n- [Retrieve a role assignment](#retrieve-a-role-assignment)\n- [Delete a role assignment](#delete-a-role-assignment)\n\n##### List role definitions\nList the role definitions in the key vault by calling `listRoleDefinitions()`.\n\n```java readme-sample-listRoleDefinitions\nPagedIterable<KeyVaultRoleDefinition> roleDefinitions =\n    keyVaultAccessControlClient.listRoleDefinitions(KeyVaultRoleScope.GLOBAL);\n\nroleDefinitions.forEach(roleDefinition ->\n    System.out.printf(\"Retrieved role definition with name '%s'.%n\", roleDefinition.getName()));\n```\n\n##### Create or update a role definition\nCreate or update a role definition in the key vault. The following example shows how to create a role definition with a randomly generated name.\n\n```java readme-sample-setRoleDefinition\nKeyVaultRoleDefinition roleDefinition = keyVaultAccessControlClient.setRoleDefinition(KeyVaultRoleScope.GLOBAL);\n\nSystem.out.printf(\"Created role definition with randomly generated name '%s' and role name '%s'.%n\",\n    roleDefinition.getName(), roleDefinition.getRoleName());\n```\n\n##### Retrieve a role definition\nGet an existing role definition. To do this, the scope and 'name' property from an existing role definition are required.\n\n```java readme-sample-getRoleDefinition\nString roleDefinitionName = \"<role-definition-name>\";\nKeyVaultRoleDefinition roleDefinition =\n    keyVaultAccessControlClient.getRoleDefinition(KeyVaultRoleScope.GLOBAL, roleDefinitionName);\n\nSystem.out.printf(\"Retrieved role definition with name '%s' and role name '%s'.%n\", roleDefinition.getName(),\n    roleDefinition.getRoleName());\n```\n\n##### Delete a role definition\nDelete a role definition. To do this, the scope and 'name' property property from an existing role definition are required.\n\n```java readme-sample-deleteRoleDefinition\nString roleDefinitionName = \"<role-definition-name>\";\n\nkeyVaultAccessControlClient.deleteRoleDefinition(KeyVaultRoleScope.GLOBAL, roleDefinitionName);\n\nSystem.out.printf(\"Deleted role definition with name '%s'.%n\", roleDefinitionName);\n```\n\n##### List role assignments\nList the role assignments in the key vault by calling `listRoleAssignments()`.\n\n```java readme-sample-listRoleAssignments\nPagedIterable<KeyVaultRoleAssignment> roleAssignments =\n    keyVaultAccessControlClient.listRoleAssignments(KeyVaultRoleScope.GLOBAL);\n\nroleAssignments.forEach(roleAssignment ->\n    System.out.printf(\"Retrieved role assignment with name '%s'.%n\", roleAssignment.getName()));\n```\n\n##### Create a role assignment\nCreate a role assignment in the key vault. To do this a role definition ID and a service principal object ID are required.\n\nA role definition ID can be obtained from the 'id' property of one of the role definitions returned from `listRoleDefinitions()`.\n\nSee the [Create/Get Credentials section](#createget-credentials) for links and instructions on how to generate a new service principal and obtain it's object ID. You can also get the object ID for your currently signed in account by running the following Azure CLI command:\n\n```bash\naz ad signed-in-user show --query objectId\n```\n\n```java readme-sample-createRoleAssignment\nString roleDefinitionId = \"<role-definition-id>\";\nString servicePrincipalId = \"<service-principal-id>\";\nKeyVaultRoleAssignment roleAssignment =\n    keyVaultAccessControlClient.createRoleAssignment(KeyVaultRoleScope.GLOBAL, roleDefinitionId,\n        servicePrincipalId);\n\nSystem.out.printf(\"Created role assignment with randomly generated name '%s' for principal with id '%s'.%n\",\n    roleAssignment.getName(), roleAssignment.getProperties().getPrincipalId());\n```\n\n##### Retrieve a role assignment\nGet an existing role assignment. To do this, the 'name' property from an existing role assignment is required.\n\n```java readme-sample-getRoleAssignment\nString roleAssignmentName = \"<role-assignment-name>\";\nKeyVaultRoleAssignment roleAssignment =\n    keyVaultAccessControlClient.getRoleAssignment(KeyVaultRoleScope.GLOBAL, roleAssignmentName);\n\nSystem.out.printf(\"Retrieved role assignment with name '%s'.%n\", roleAssignment.getName());\n```\n##### Delete a role assignment\nTo remove a role assignment from a service principal, the role assignment must be deleted. To do this, the 'name' property from an existing role assignment is required.\n\n```java readme-sample-deleteRoleAssignment\nString roleAssignmentName = \"<role-assignment-name>\";\n\nkeyVaultAccessControlClient.deleteRoleAssignment(KeyVaultRoleScope.GLOBAL, roleAssignmentName);\n\nSystem.out.printf(\"Deleted role assignment with name '%s'.%n\", roleAssignmentName);\n```\n\n#### Async API\nThe following sections provide several code snippets covering some of the most common asynchronous Azure Key Vault Access Control service tasks, including:\n- [List role definitions asynchronously](#list-role-definitions-asynchronously)\n- [Create or update a role definition asynchronously](#create-or-update-a-role-definition-asynchronously)\n- [Retrieve a role definition asynchronously](#retrieve-a-role-definition-asynchronously)\n- [Delete a role definition asynchronously](#delete-a-role-definition-asynchronously)\n- [List role assignments asynchronously](#list-role-assignments-asynchronously)\n- [Create a role assignment asynchronously](#create-a-role-assignment-asynchronously)\n- [Retrieve a role assignment asynchronously](#retrieve-a-role-assignment-asynchronously)\n- [Delete a role assignment asynchronously](#delete-a-role-assignment-asynchronously)\n\n> Note : You should add `System.in.read()` or `Thread.sleep()` after the function calls in the main class/thread to allow async functions/operations to execute and finish before the main application/thread exits.\n\n##### List role definitions asynchronously\nList the role definitions in the key vault by calling `listRoleDefinitions()`.\n\n```java readme-sample-listRoleDefinitionsAsync\nkeyVaultAccessControlAsyncClient.listRoleDefinitions(KeyVaultRoleScope.GLOBAL)\n    .subscribe(roleDefinition ->\n        System.out.printf(\"Retrieved role definition with name '%s'.%n\", roleDefinition.getName()));\n```\n\n##### Create or update a role definition asynchronously\nCreate or update a role definition in the key vault. The following example shows how to create a role definition with a randomly generated name.\n\n```java readme-sample-setRoleDefinitionAsync\nkeyVaultAccessControlAsyncClient.setRoleDefinition(KeyVaultRoleScope.GLOBAL)\n    .subscribe(roleDefinition ->\n        System.out.printf(\"Created role definition with randomly generated name '%s' and role name '%s'.%n\",\n            roleDefinition.getName(), roleDefinition.getRoleName()));\n```\n\n##### Retrieve a role definition asynchronously\nGet an existing role definition. To do this, the 'name' property from an existing role definition is required.\n\n```java readme-sample-getRoleDefinitionAsync\nString roleDefinitionName = \"<role-definition-name>\";\n\nkeyVaultAccessControlAsyncClient.getRoleDefinition(KeyVaultRoleScope.GLOBAL, roleDefinitionName)\n    .subscribe(roleDefinition ->\n        System.out.printf(\"Retrieved role definition with name '%s' and role name '%s'.%n\",\n            roleDefinition.getName(), roleDefinition.getRoleName()));\n```\n\n##### Delete a role definition asynchronously\nDelete a role definition. To do this, the 'name' property from an existing role definition is required.\n\n```java readme-sample-deleteRoleDefinitionAsync\nString roleDefinitionName = \"<role-definition-name>\";\n\nkeyVaultAccessControlAsyncClient.deleteRoleDefinition(KeyVaultRoleScope.GLOBAL, roleDefinitionName)\n    .subscribe(unused -> System.out.printf(\"Deleted role definition with name '%s'.%n\", roleDefinitionName));\n```\n\n##### List role assignments asynchronously\nList the role assignments in the key vault by calling `listRoleAssignments()`.\n\n```java readme-sample-listRoleAssignmentsAsync\nkeyVaultAccessControlAsyncClient.listRoleAssignments(KeyVaultRoleScope.GLOBAL)\n    .subscribe(roleAssignment ->\n        System.out.printf(\"Retrieved role assignment with name '%s'.%n\", roleAssignment.getName()));\n```\n\n##### Create a role assignment asynchronously\nCreate a role assignment in the key vault. To do this a role definition ID and a service principal object ID are required.\n\nA role definition ID can be obtained from the 'id' property of one of the role definitions returned from `listRoleDefinitions()`.\n\nSee the [Create/Get Credentials section](#createget-credentials) for links and instructions on how to generate a new service principal and obtain it's object ID. You can also get the object ID for your currently signed in account by running the following Azure CLI command:\n\n```bash\naz ad signed-in-user show --query objectId\n```\n\n```java readme-sample-createRoleAssignmentAsync\nString roleDefinitionId = \"<role-definition-id>\";\nString servicePrincipalId = \"<service-principal-id>\";\n\nkeyVaultAccessControlAsyncClient.createRoleAssignment(KeyVaultRoleScope.GLOBAL, roleDefinitionId,\n    servicePrincipalId).subscribe(roleAssignment ->\n        System.out.printf(\"Created role assignment with randomly generated name '%s' for principal with id\"\n            + \"'%s'.%n\", roleAssignment.getName(), roleAssignment.getProperties().getPrincipalId()));\n```\n\n##### Retrieve a role assignment asynchronously\nGet an existing role assignment. To do this, the 'name' property from an existing role assignment is required.\n\n```java readme-sample-getRoleAssignmentAsync\nString roleAssignmentName = \"<role-assignment-name>\";\n\nkeyVaultAccessControlAsyncClient.getRoleAssignment(KeyVaultRoleScope.GLOBAL, roleAssignmentName)\n    .subscribe(roleAssignment ->\n        System.out.printf(\"Retrieved role assignment with name '%s'.%n\", roleAssignment.getName()));\n```\n\n##### Delete a role assignment asynchronously\nTo remove a role assignment from a service principal, the role assignment must be deleted. To do this, the 'name' property from an existing role assignment is required.\n\n```java readme-sample-deleteRoleAssignmentAsync\nString roleAssignmentName = \"<role-assignment-name>\";\n\nkeyVaultAccessControlAsyncClient.deleteRoleAssignment(KeyVaultRoleScope.GLOBAL, roleAssignmentName)\n    .subscribe(unused ->\n        System.out.printf(\"Deleted role assignment with name '%s'.%n\", roleAssignmentName));\n```\n\n## Backup and restore operations\n### Examples\n#### Sync API\nThe following sections provide several code snippets covering some of the most common Azure Key Vault Backup client tasks, including:\n- [Backup a Key Vault](#backup-a-collection-of-keys)\n- [Restore a Key Vault](#restore-a-collection-of-keys)\n- [Restore a key](#selectively-restore-a-key)\n\n##### Backup a collection of keys\nBack up an entire collection of keys using `beginBackup()`.\n\n```java readme-sample-beginBackup\nString blobStorageUrl = \"https://myaccount.blob.core.windows.net/myContainer\";\nString sasToken = \"sv=2020-02-10&ss=b&srt=o&sp=rwdlactfx&se=2021-06-17T07:13:07Z&st=2021-06-16T23:13:07Z&spr=https&sig=n5V6fnlkViEF9b7ij%2FttTHNwO2BdFIHKHppRxGAyJdc%3D\";\n\nSyncPoller<KeyVaultBackupOperation, String> backupPoller =\n    keyVaultBackupClient.beginBackup(blobStorageUrl, sasToken);\n\nPollResponse<KeyVaultBackupOperation> pollResponse = backupPoller.poll();\n\nSystem.out.printf(\"The current status of the operation is: %s.%n\", pollResponse.getStatus());\n\nPollResponse<KeyVaultBackupOperation> finalPollResponse = backupPoller.waitForCompletion();\n\nif (finalPollResponse.getStatus() == LongRunningOperationStatus.SUCCESSFULLY_COMPLETED) {\n    String folderUrl = backupPoller.getFinalResult();\n\n    System.out.printf(\"Backup completed. The storage location of this backup is: %s.%n\", folderUrl);\n} else {\n    KeyVaultBackupOperation operation = backupPoller.poll().getValue();\n\n    System.out.printf(\"Backup failed with error: %s.%n\", operation.getError().getMessage());\n}\n```\n\n##### Restore a collection of keys\nRestore an entire collection of keys from a backup using `beginRestore()`.\n\n```java readme-sample-beginRestore\nString folderUrl = \"https://myaccount.blob.core.windows.net/myContainer/mhsm-myaccount-2020090117323313\";\nString sasToken = \"sv=2020-02-10&ss=b&srt=o&sp=rwdlactfx&se=2021-06-17T07:13:07Z&st=2021-06-16T23:13:07Z&spr=https&sig=n5V6fnlkViEF9b7ij%2FttTHNwO2BdFIHKHppRxGAyJdc%3D\";\n\nSyncPoller<KeyVaultRestoreOperation, KeyVaultRestoreResult> backupPoller =\n    keyVaultBackupClient.beginRestore(folderUrl, sasToken);\n\nPollResponse<KeyVaultRestoreOperation> pollResponse = backupPoller.poll();\n\nSystem.out.printf(\"The current status of the operation is: %s.%n\", pollResponse.getStatus());\n\nPollResponse<KeyVaultRestoreOperation> finalPollResponse = backupPoller.waitForCompletion();\n\nif (finalPollResponse.getStatus() == LongRunningOperationStatus.SUCCESSFULLY_COMPLETED) {\n    System.out.printf(\"Backup restored successfully.%n\");\n} else {\n    KeyVaultRestoreOperation operation = backupPoller.poll().getValue();\n\n    System.out.printf(\"Restore failed with error: %s.%n\", operation.getError().getMessage());\n}\n```\n\n##### Selectively restore a key\nRestore a specific key from a backup using `beginSelectiveRestore()`.\n\n```java readme-sample-beginSelectiveKeyRestore\nString folderUrl = \"https://myaccount.blob.core.windows.net/myContainer/mhsm-myaccount-2020090117323313\";\nString sasToken = \"sv=2020-02-10&ss=b&srt=o&sp=rwdlactfx&se=2021-06-17T07:13:07Z&st=2021-06-16T23:13:07Z&spr=https&sig=n5V6fnlkViEF9b7ij%2FttTHNwO2BdFIHKHppRxGAyJdc%3D\";\nString keyName = \"myKey\";\n\nSyncPoller<KeyVaultSelectiveKeyRestoreOperation, KeyVaultSelectiveKeyRestoreResult> backupPoller =\n    keyVaultBackupClient.beginSelectiveKeyRestore(folderUrl, sasToken, keyName);\n\nPollResponse<KeyVaultSelectiveKeyRestoreOperation> pollResponse = backupPoller.poll();\n\nSystem.out.printf(\"The current status of the operation is: %s.%n\", pollResponse.getStatus());\n\nPollResponse<KeyVaultSelectiveKeyRestoreOperation> finalPollResponse = backupPoller.waitForCompletion();\n\nif (finalPollResponse.getStatus() == LongRunningOperationStatus.SUCCESSFULLY_COMPLETED) {\n    System.out.printf(\"Key restored successfully.%n\");\n} else {\n    KeyVaultSelectiveKeyRestoreOperation operation = backupPoller.poll().getValue();\n\n    System.out.printf(\"Key restore failed with error: %s.%n\", operation.getError().getMessage());\n}\n```\n\n#### Async API\nThe following sections provide several code snippets covering some of the most common asynchronous Azure Key Vault Backup client tasks, including:\n- [Backup a Key Vault asynchronously](#backup-a-collection-of-keys-asynchronously)\n- [Restore a Key Vault asynchronously](#restore-a-collection-of-keys-asynchronously)\n- [Restore a key asynchronously](#selectively-restore-a-key-asynchronously)\n\n> Note : You should add `System.in.read()` or `Thread.sleep()` after the function calls in the main class/thread to allow async functions/operations to execute and finish before the main application/thread exits.\n\n##### Backup a collection of keys asynchronously\nBack up an entire collection of keys using `beginBackup()`.\n\n```java readme-sample-beginBackupAsync\nString blobStorageUrl = \"https://myaccount.blob.core.windows.net/myContainer\";\nString sasToken = \"sv=2020-02-10&ss=b&srt=o&sp=rwdlactfx&se=2021-06-17T07:13:07Z&st=2021-06-16T23:13:07Z&spr=https&sig=n5V6fnlkViEF9b7ij%2FttTHNwO2BdFIHKHppRxGAyJdc%3D\";\n\nkeyVaultBackupAsyncClient.beginBackup(blobStorageUrl, sasToken)\n    .setPollInterval(Duration.ofSeconds(1)) // You can set a custom polling interval.\n    .doOnError(e -> System.out.printf(\"Backup failed with error: %s.%n\", e.getMessage()))\n    .doOnNext(pollResponse ->\n        System.out.printf(\"The current status of the operation is: %s.%n\", pollResponse.getStatus()))\n    .filter(pollResponse -> pollResponse.getStatus() == LongRunningOperationStatus.SUCCESSFULLY_COMPLETED)\n    .flatMap(AsyncPollResponse::getFinalResult)\n    .subscribe(folderUrl ->\n        System.out.printf(\"Backup completed. The storage location of this backup is: %s.%n\", folderUrl));\n```\n\n##### Restore a collection of keys asynchronously\nRestore an entire collection of keys from a backup using `beginRestore()`.\n\n```java readme-sample-beginRestoreAsync\nString folderUrl = \"https://myaccount.blob.core.windows.net/myContainer/mhsm-myaccount-2020090117323313\";\nString sasToken = \"sv=2020-02-10&ss=b&srt=o&sp=rwdlactfx&se=2021-06-17T07:13:07Z&st=2021-06-16T23:13:07Z&spr=https&sig=n5V6fnlkViEF9b7ij%2FttTHNwO2BdFIHKHppRxGAyJdc%3D\";\n\nkeyVaultBackupAsyncClient.beginRestore(folderUrl, sasToken)\n    .setPollInterval(Duration.ofSeconds(1)) // You can set a custom polling interval.\n    .doOnError(e -> System.out.printf(\"Restore failed with error: %s.%n\", e.getMessage()))\n    .doOnNext(pollResponse ->\n        System.out.printf(\"The current status of the operation is: %s.%n\", pollResponse.getStatus()))\n    .filter(pollResponse -> pollResponse.getStatus() == LongRunningOperationStatus.SUCCESSFULLY_COMPLETED)\n    .flatMap(AsyncPollResponse::getFinalResult)\n    .subscribe(unused -> System.out.printf(\"Backup restored successfully.%n\"));\n```\n\n##### Selectively restore a key asynchronously\nRestore an entire collection of keys from a backup using `beginSelectiveRestore()`.\n\n```java readme-sample-beginSelectiveKeyRestoreAsync\nString folderUrl = \"https://myaccount.blob.core.windows.net/myContainer/mhsm-myaccount-2020090117323313\";\nString sasToken = \"sv=2020-02-10&ss=b&srt=o&sp=rwdlactfx&se=2021-06-17T07:13:07Z&st=2021-06-16T23:13:07Z&spr=https&sig=n5V6fnlkViEF9b7ij%2FttTHNwO2BdFIHKHppRxGAyJdc%3D\";\nString keyName = \"myKey\";\n\nkeyVaultBackupAsyncClient.beginSelectiveKeyRestore(folderUrl, sasToken, keyName)\n    .setPollInterval(Duration.ofSeconds(1)) // You can set a custom polling interval.\n    .doOnError(e -> System.out.printf(\"Key restoration failed with error: %s.%n\", e.getMessage()))\n    .doOnNext(pollResponse ->\n        System.out.printf(\"The current status of the operation is: %s.%n\", pollResponse.getStatus()))\n    .filter(pollResponse -> pollResponse.getStatus() == LongRunningOperationStatus.SUCCESSFULLY_COMPLETED)\n    .flatMap(AsyncPollResponse::getFinalResult)\n    .subscribe(unused -> System.out.printf(\"Key restored successfully.%n\"));\n```\n\n## Settings operations\n### Examples\n#### Sync API\nThe following sections provide several code snippets covering some of the most common Azure Key Vault Settings client tasks, including:\n- [Listing settings](#get-all-settings)\n- [Retrieving a setting](#retrieve-a-specific-setting)\n- [Updating a setting](#update-a-specific-setting)\n\n##### Get all settings\nList all the settings for a Key Vault account.\n\n```java readme-sample-getSettings\nKeyVaultGetSettingsResult getSettingsResult = keyVaultSettingsClient.getSettings();\n\nfor (KeyVaultSetting setting : getSettingsResult.getSettings()) {\n    System.out.printf(\"Retrieved setting '%s' with value '%s'.%n\", setting.getName(), setting.asBoolean());\n}\n```\n\n##### Retrieve a specific setting\nRetrieve a specific setting.\n\n```java readme-sample-getSetting\nString settingName = \"<setting-to-get>\";\nKeyVaultSetting setting = keyVaultSettingsClient.getSetting(settingName);\n\nSystem.out.printf(\"Retrieved setting '%s' with value '%s'.%n\", setting.getName(),\n    setting.asBoolean());\n```\n\n##### Update a specific setting\nUpdate a specific setting.\n```java readme-sample-updateSetting\nString settingName = \"<setting-to-update>\";\nKeyVaultSetting settingToUpdate = new KeyVaultSetting(settingName, true);\nKeyVaultSetting updatedSetting = keyVaultSettingsClient.updateSetting(settingToUpdate);\n\nSystem.out.printf(\"Updated setting '%s' to '%s'.%n\", updatedSetting.getName(), updatedSetting.asBoolean());\n```\n\n#### Async API\nThe following sections provide several code snippets covering some of the most common asynchronous Azure Key Vault Settings client tasks, including:\n- [Listing settings](#get-all-settings-asynchronously)\n- [Retrieving a setting](#retrieve-a-specific-setting-asynchronously)\n- [Updating a setting](#update-a-specific-setting-asynchronously)\n\n##### Get all settings asynchronously\nList all the settings for a Key Vault account.\n\n```java readme-sample-getSettingsAsync\nkeyVaultSettingsAsyncClient.getSettings()\n    .subscribe(settingsResult ->\n        settingsResult.getSettings().forEach(setting ->\n            System.out.printf(\"Retrieved setting with name '%s' and value '%s'.%n\", setting.getName(),\n                setting.asBoolean())));\n```\n\n##### Retrieve a specific setting asynchronously\nRetrieve a specific setting.\n\n```java readme-sample-getSettingAsync\nString settingName = \"<setting-to-get>\";\n\nkeyVaultSettingsAsyncClient.getSetting(settingName)\n    .subscribe(setting ->\n        System.out.printf(\"Retrieved setting with name '%s' and value '%s'.%n\", setting.getName(),\n            setting.asBoolean()));\n```\n\n##### Update a specific setting asynchronously\nUpdate a specific setting.\n\n```java readme-sample-updateSettingAsync\nString settingName = \"<setting-to-update>\";\nKeyVaultSetting settingToUpdate = new KeyVaultSetting(settingName, true);\n\nkeyVaultSettingsAsyncClient.updateSetting(settingToUpdate)\n    .subscribe(updatedSetting ->\n        System.out.printf(\"Updated setting with name '%s' and value '%s'.%n\", updatedSetting.getName(),\n            updatedSetting.asBoolean()));\n```\n\n## Troubleshooting\nSee our [troubleshooting guide](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/keyvault/azure-security-keyvault-administration/TROUBLESHOOTING.md) for details on how to diagnose various failure scenarios.\n\n### General\nAzure Key Vault Access Control clients raise exceptions. For example, if you try to retrieve a role assignment after it is deleted a `404` error is returned, indicating the resource was not found. In the following snippet, the error is handled gracefully by catching the exception and displaying additional information about the error.\n\n```java readme-sample-troubleshooting\ntry {\n    keyVaultAccessControlClient.getRoleAssignment(KeyVaultRoleScope.GLOBAL, \"<role-assginment-name>\");\n} catch (HttpResponseException e) {\n    System.out.println(e.getMessage());\n}\n```\n\n### Default HTTP client\nAll client libraries by default use the Netty HTTP client. Adding the above dependency will automatically configure the client library to use the Netty HTTP client. Configuring or changing the HTTP client is detailed in the [HTTP clients wiki][http_clients_wiki].\n\n### Default SSL library\nAll client libraries, by default, use the Tomcat-native Boring SSL library to enable native-level performance for SSL operations. The Boring SSL library is an Uber JAR containing native libraries for Linux / macOS / Windows, and provides better performance compared to the default SSL implementation within the JDK. For more information, including how to reduce the dependency size, refer to the [performance tuning][performance_tuning] section of the wiki.\n\n## Next steps\nSeveral Key Vault Java SDK samples are available to you in the SDK's GitHub repository. These samples provide example code for additional scenarios commonly encountered while working with Azure Key Vault.\n\n### Additional documentation\nFor more extensive documentation on Azure Key Vault, see the [API reference documentation][azkeyvault_rest].\n\n## Contributing\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][microsoft_code_of_conduct]. For more information see the Code of Conduct FAQ or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[source_code]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/keyvault/azure-security-keyvault-administration/src\n[api_documentation]: https://azure.github.io/azure-sdk-for-java\n[azkeyvault_docs]: https://docs.microsoft.com/azure/key-vault/\n[azure_identity]: https://docs.microsoft.com/java/api/overview/azure/identity-readme?view=azure-java-stable\n[azure_subscription]: https://azure.microsoft.com/\n[azure_keyvault]: https://docs.microsoft.com/azure/key-vault/quick-create-portal\n[azure_keyvault_mhsm]: https://docs.microsoft.com/azure/key-vault/managed-hsm/overview\n[azure_keyvault_mhsm_cli]: https://docs.microsoft.com/azure/key-vault/managed-hsm/quick-create-cli\n[default_azure_credential]: https://docs.microsoft.com/java/api/overview/azure/identity-readme?view=azure-java-stable#defaultazurecredential\n[managed_identity]: https://docs.microsoft.com/azure/active-directory/managed-identities-azure-resources/overview\n[azkeyvault_rest]: https://docs.microsoft.com/rest/api/keyvault/\n[administration_samples]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/keyvault/azure-security-keyvault-administration/src/samples/java/com/azure/security/keyvault/administration\n[storage_readme_sas_token]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/storage/azure-storage-blob#get-credentials\n[portal_sas_token]: https://docs.microsoft.com/azure/vs-azure-tools-storage-manage-with-storage-explorer?tabs=windows#generate-a-shared-access-signature-in-storage-explorer\n[performance_tuning]: https://github.com/Azure/azure-sdk-for-java/wiki/Performance-Tuning\n[jdk_link]: https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable\n[http_clients_wiki]: https://github.com/Azure/azure-sdk-for-java/wiki/HTTP-clients\n[microsoft_code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fkeyvault%2Fazure-security-keyvault-administration%2FREADME.png)\n",
        "repo_name": "keyvault/azure-security-keyvault-administration",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/keyvault/azure-security-keyvault-administration",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Key Vault Certificate client library for Java\nAzure Key Vault allows you to securely manage and tightly control your certificates. The Azure Key Vault Certificate client library supports certificates backed by RSA and EC keys.\n\nMultiple certificates and multiple versions of the same certificate can be kept in the Key Vault. Cryptographic keys in Azure Key Vault backing the certificates are represented as [JSON Web Key (JWK)][jwk_specification] objects. This library offers operations to create, retrieve, update, delete, purge, backup, restore, and list the certificates, as well as its versions.\n\n[Source code][source_code] | [API reference documentation][api_documentation] | [Product documentation][azkeyvault_docs] | [Samples][certificates_samples]\n\n## Getting started\n### Include the package\n#### Include the BOM file\nPlease include the `azure-sdk-bom` to your project to take dependency on the General Availability (GA) version of the library. In the following snippet, replace the {bom_version_to_target} placeholder with the version number. To learn more about the BOM, see the [AZURE SDK BOM README](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/boms/azure-sdk-bom/README.md).\n\n```xml\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>com.azure</groupId>\n            <artifactId>azure-sdk-bom</artifactId>\n            <version>{bom_version_to_target}</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n```\n\nand then include the direct dependency in the dependencies section without the version tag as shown below.\n\n```xml\n<dependencies>\n    <dependency>\n        <groupId>com.azure</groupId>\n        <artifactId>azure-security-keyvault-certificates</artifactId>\n    </dependency>\n</dependencies>\n```\n\n#### Include direct dependency\nIf you want to take dependency on a particular version of the library that is not present in the BOM, add the direct dependency to your project as follows.\n\n[//]: # ({x-version-update-start;com.azure:azure-security-keyvault-certificates;current})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-security-keyvault-certificates</artifactId>\n    <version>4.5.2</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Prerequisites\n- A [Java Development Kit (JDK)][jdk_link], version 8 or later.\n- An [Azure Subscription][azure_subscription].\n- An existing [Azure Key Vault][azure_keyvault]. If you need to create a key vault, you can do so in the Azure Portal by following the steps in [this document][azure_keyvault_portal]. Alternatively, you can use the Azure CLI by following the steps in [this document][azure_keyvault_cli].\n\n### Authenticate the client\nIn order to interact with the Azure Key Vault service, you will need to create an instance of the [`CertificateClient`](#create-certificate-client) class, a **vault url** and a credential object. The examples shown in this document use a credential object named  [`DefaultAzureCredential`][default_azure_credential], which is appropriate for most scenarios, including local development and production environments. Additionally, we recommend using a [managed identity][managed_identity] for authentication in production environments.\n\nYou can find more information on different ways of authenticating and their corresponding credential types in the [Azure Identity documentation][azure_identity].\n\n#### Create certificate client\nOnce you perform [the authentication set up that suits you best][default_azure_credential] and replaced **your-key-vault-url** with the URL for your key vault, you can create the `CertificateClient`:\n\n```java readme-sample-createCertificateClient\nCertificateClient certificateClient = new CertificateClientBuilder()\n    .vaultUrl(\"<your-key-vault-url>\")\n    .credential(new DefaultAzureCredentialBuilder().build())\n    .buildClient();\n```\n\n> NOTE: For using an asynchronous client use `CertificateAsyncClient` instead of `CertificateClient` and call `buildAsyncClient()`.\n\n## Key concepts\n### Certificate\nAzure Key Vault supports certificates with secret content types (`PKCS12` & `PEM`). The certificate can be backed by keys in Azure Key Vault of types (`EC` & `RSA`). In addition to the certificate policy, the following attributes may be specified:\n* enabled: Specifies whether the certificate is enabled and usable.\n* created: Indicates when this version of the certificate was created.\n* updated: Indicates when this version of the certificate was updated.\n\n### Certificate client\nThe certificate client performs the interactions with the Azure Key Vault service for getting, setting, updating, deleting, and listing certificates and its versions. The client also supports CRUD operations for certificate issuers and contacts in the key vault. Asynchronous (`CertificateAsyncClient`) and synchronous (`CertificateClient`) clients exist in the SDK allowing for the selection of a client based on an application's use case. Once you've initialized a certificate, you can interact with the primary resource types in Azure Key Vault.\n\n## Examples\n### Sync API\nThe following sections provide several code snippets covering some of the most common Azure Key Vault Certificate service tasks, including:\n- [Create a certificate](#create-a-certificate)\n- [Retrieve a certificate](#retrieve-a-certificate)\n- [Update an existing certificate](#update-an-existing-certificate)\n- [Delete a certificate](#delete-a-certificate)\n- [List certificates](#list-certificates)\n\n### Create a certificate\nCreate a certificate to be stored in the Azure Key Vault.\n- `beginCreateCertificate` creates a new certificate in the Azure Key Vault. If a certificate with the same name already exists then a new version of the certificate is created.\n\n```java readme-sample-createCertificate\nSyncPoller<CertificateOperation, KeyVaultCertificateWithPolicy> certificatePoller =\n    certificateClient.beginCreateCertificate(\"certificateName\", CertificatePolicy.getDefault());\ncertificatePoller.waitUntil(LongRunningOperationStatus.SUCCESSFULLY_COMPLETED);\nKeyVaultCertificate certificate = certificatePoller.getFinalResult();\nSystem.out.printf(\"Certificate created with name \\\"%s\\\"%n\", certificate.getName());\n```\n\n### Retrieve a certificate\nRetrieve a previously stored certificate by calling `getCertificate` or `getCertificateVersion`.\n\n```java readme-sample-retrieveCertificate\nKeyVaultCertificateWithPolicy certificate = certificateClient.getCertificate(\"<certificate-name>\");\nSystem.out.printf(\"Received certificate with name \\\"%s\\\", version %s and secret id %s%n\",\n    certificate.getProperties().getName(), certificate.getProperties().getVersion(), certificate.getSecretId());\n```\n\n### Update an existing certificate\nUpdate an existing certificate by calling `updateCertificateProperties`.\n\n```java readme-sample-updateCertificate\n// Get the certificate to update.\nKeyVaultCertificate certificate = certificateClient.getCertificate(\"<certificate-name>\");\n// Update certificate enabled status.\ncertificate.getProperties().setEnabled(false);\nKeyVaultCertificate updatedCertificate = certificateClient.updateCertificateProperties(certificate.getProperties());\nSystem.out.printf(\"Updated certificate with name \\\"%s\\\" and enabled status \\\"%s\\\"%n\",\n    updatedCertificate.getProperties().getName(), updatedCertificate.getProperties().isEnabled());\n```\n\n### Delete a certificate\nDelete an existing certificate by calling `beginDeleteCertificate`.\n\n```java readme-sample-deleteCertificate\nSyncPoller<DeletedCertificate, Void> deleteCertificatePoller =\n    certificateClient.beginDeleteCertificate(\"<certificate-name>\");\n\n// Deleted certificate is accessible as soon as polling beings.\nPollResponse<DeletedCertificate> pollResponse = deleteCertificatePoller.poll();\n\n// Deletion date only works for a SoftDelete-enabled Key Vault.\nSystem.out.printf(\"Deleted certificate with name \\\"%s\\\" and recovery id %s\", pollResponse.getValue().getName(),\n    pollResponse.getValue().getRecoveryId());\n\n// Certificate is being deleted on server.\ndeleteCertificatePoller.waitForCompletion();\n```\n\n### List certificates\nList the certificates in the key vault by calling `listPropertiesOfCertificates`.\n\n```java readme-sample-listCertificates\n// List operations don't return the certificates with their full information. So, for each returned certificate we call\n// getCertificate to get the certificate with all its properties excluding the policy.\nfor (CertificateProperties certificateProperties : certificateClient.listPropertiesOfCertificates()) {\n    KeyVaultCertificate certificateWithAllProperties =\n        certificateClient.getCertificateVersion(certificateProperties.getName(), certificateProperties.getVersion());\n    System.out.printf(\"Received certificate with name \\\"%s\\\" and secret id %s\",\n        certificateWithAllProperties.getProperties().getName(), certificateWithAllProperties.getSecretId());\n}\n```\n\n### Async API\nThe following sections provide several code snippets covering some of the most common asynchronous Azure Key Vault Certificate service tasks, including:\n- [Create a certificate asynchronously](#create-a-certificate-asynchronously)\n- [Retrieve a certificate asynchronously](#retrieve-a-certificate-asynchronously)\n- [Update an existing certificate asynchronously](#update-an-existing-certificate-asynchronously)\n- [Delete a certificate asynchronously](#delete-a-certificate-asynchronously)\n- [List certificates asynchronously](#list-certificates-asynchronously)\n\n> Note : You should add `System.in.read()` or `Thread.sleep()` after the function calls in the main class/thread to allow async functions/operations to execute and finish before the main application/thread exits.\n\n### Create a certificate asynchronously\nCreate a certificate to be stored in the Azure Key Vault.\n- `beginCreateCertificate` creates a new certificate in the Azure Key Vault. If a certificate with same name already exists then a new version of the certificate is created.\n\n```java readme-sample-createCertificateAsync\n// Creates a certificate using the default policy and polls on its progress.\ncertificateAsyncClient.beginCreateCertificate(\"<certificate-name>\", CertificatePolicy.getDefault())\n    .subscribe(pollResponse -> {\n        System.out.println(\"---------------------------------------------------------------------------------\");\n        System.out.println(pollResponse.getStatus());\n        System.out.println(pollResponse.getValue().getStatus());\n        System.out.println(pollResponse.getValue().getStatusDetails());\n    });\n```\n\n### Retrieve a certificate asynchronously\nRetrieve a previously stored certificate by calling `getCertificate` or `getCertificateVersion`.\n\n```java readme-sample-retrieveCertificateAsync\ncertificateAsyncClient.getCertificate(\"<certificate-name>\")\n    .subscribe(certificateResponse ->\n        System.out.printf(\"Certificate was returned with name \\\"%s\\\" and secretId %s%n\",\n            certificateResponse.getProperties().getName(), certificateResponse.getSecretId()));\n```\n\n### Update an existing certificate asynchronously\nUpdate an existing certificate by calling `updateCertificateProperties`.\n\n```java readme-sample-updateCertificateAsync\ncertificateAsyncClient.getCertificate(\"<certificate-name>\")\n    .flatMap(certificate -> {\n        // Update enabled status of the certificate.\n        certificate.getProperties().setEnabled(false);\n        return certificateAsyncClient.updateCertificateProperties(certificate.getProperties());\n    }).subscribe(certificateResponse -> System.out.printf(\"Certificate's enabled status: %s%n\",\n        certificateResponse.getProperties().isEnabled()));\n```\n\n### Delete a certificate asynchronously\nDelete an existing certificate by calling `beginDeleteCertificate`.\n\n```java readme-sample-deleteCertificateAsync\ncertificateAsyncClient.beginDeleteCertificate(\"<certificate-name>\")\n    .subscribe(pollResponse -> {\n        System.out.printf(\"Deletion status: %s%n\", pollResponse.getStatus());\n        System.out.printf(\"Deleted certificate name: %s%n\", pollResponse.getValue().getName());\n        System.out.printf(\"Certificate deletion date: %s%n\", pollResponse.getValue().getDeletedOn());\n    });\n```\n\n### List certificates asynchronously\nList the certificates in the Azure Key Vault by calling `listPropertiesOfCertificates`.\n\n```java readme-sample-listCertificateAsync\n// The List Certificates operation returns certificates without their full properties, so for each certificate returned\n// we call `getCertificate` to get all its attributes excluding the policy.\ncertificateAsyncClient.listPropertiesOfCertificates()\n    .flatMap(certificateProperties -> certificateAsyncClient\n        .getCertificateVersion(certificateProperties.getName(), certificateProperties.getVersion()))\n    .subscribe(certificateResponse ->\n        System.out.printf(\"Received certificate with name \\\"%s\\\" and key id %s\", certificateResponse.getName(),\n            certificateResponse.getKeyId()));\n```\n\n## Troubleshooting\nSee our [troubleshooting guide](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/keyvault/azure-security-keyvault-certificates/TROUBLESHOOTING.md) for details on how to diagnose various failure scenarios.\n\n### General\nAzure Key Vault Certificate clients raise exceptions. For example, if you try to retrieve a certificate after it is deleted a `404` error is returned, indicating the resource was not found. In the following snippet, the error is handled gracefully by catching the exception and displaying additional information about the error.\n\n```java readme-sample-troubleshooting\ntry {\n    certificateClient.getCertificate(\"<deleted-certificate-name>\");\n} catch (ResourceNotFoundException e) {\n    System.out.println(e.getMessage());\n}\n```\n\n### Default HTTP client\nAll client libraries by default use the Netty HTTP client. Adding the above dependency will automatically configure the client library to use the Netty HTTP client. Configuring or changing the HTTP client is detailed in the [HTTP clients wiki][http_clients_wiki].\n\n### Default SSL library\nAll client libraries, by default, use the Tomcat-native Boring SSL library to enable native-level performance for SSL operations. The Boring SSL library is an Uber JAR containing native libraries for Linux / macOS / Windows, and provides better performance compared to the default SSL implementation within the JDK. For more information, including how to reduce the dependency size, refer to the [performance tuning][performance_tuning] section of the wiki.\n\n## Next steps\nSeveral Key Vault Java SDK samples are available to you in the SDK's GitHub repository. These samples provide example code for additional scenarios commonly encountered while working with Key Vault.\n\n## Next steps samples\nSamples are explained in detail [here][samples_readme].\n\n### Additional documentation\nFor more extensive documentation on Azure Key Vault, see the [API reference documentation][azkeyvault_rest].\n\n## Contributing\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][microsoft_code_of_conduct]. For more information see the Code of Conduct FAQ or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[source_code]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/keyvault/azure-security-keyvault-certificates/src\n[api_documentation]: https://azure.github.io/azure-sdk-for-java\n[azkeyvault_docs]: https://docs.microsoft.com/azure/key-vault/\n[azure_identity]: https://docs.microsoft.com/java/api/overview/azure/identity-readme?view=azure-java-stable\n[azure_subscription]: https://azure.microsoft.com/\n[azure_keyvault]: https://docs.microsoft.com/azure/key-vault/general/overview\n[azure_keyvault_cli]: https://docs.microsoft.com/azure/key-vault/general/quick-create-cli\n[azure_keyvault_portal]: https://docs.microsoft.com/azure/key-vault/general/quick-create-portal\n[default_azure_credential]: https://docs.microsoft.com/java/api/overview/azure/identity-readme?view=azure-java-stable#defaultazurecredential\n[azkeyvault_rest]: https://docs.microsoft.com/rest/api/keyvault/\n[certificates_samples]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/keyvault/azure-security-keyvault-certificates/src/samples/java/com/azure/security/keyvault/certificates\n[samples_readme]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/keyvault/azure-security-keyvault-certificates/src/samples/README.md\n[performance_tuning]: https://github.com/Azure/azure-sdk-for-java/wiki/Performance-Tuning\n[jdk_link]: https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable\n[jwk_specification]: https://tools.ietf.org/html/rfc7517\n[http_clients_wiki]: https://github.com/Azure/azure-sdk-for-java/wiki/HTTP-clients\n[microsoft_code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fkeyvault%2Fazure-security-keyvault-certificates%2FREADME.png)\n",
        "repo_name": "keyvault/azure-security-keyvault-certificates",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/keyvault/azure-security-keyvault-certificates",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Key Vault JCA client library for Java\nThe JCA Provider for Azure Key Vault is a Java Cryptography Architecture provider for certificates in\nAzure Key Vault. It is built on four principles:\n\n1. Must be extremely thin to run within a JVM.\n2. Must not introduce any library version conflicts with Java app code dependencies.\n3. Must not introduce any class loader hierarchy conflicts with Java app code dependencies.\n4. Must be ready for \"never trust, always verify and credential-free\" Zero Trust environments.\n\n[Source code] | [API reference documentation] | [Product documentation] | [Samples]\n\n## Getting started\n### Include the package\n\n#### Include the BOM file\n\nPlease include the azure-sdk-bom to your project to take dependency on the General Availability (GA) version of the library. In the following snippet, replace the {bom_version_to_target} placeholder with the version number.\nTo learn more about the BOM, see the [AZURE SDK BOM README](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/boms/azure-sdk-bom/README.md).\n\n```xml\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>com.azure</groupId>\n            <artifactId>azure-sdk-bom</artifactId>\n            <version>{bom_version_to_target}</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n```\nand then include the direct dependency in the dependencies section without the version tag as shown below.\n\n```xml\n<dependencies>\n    <dependency>\n        <groupId>com.azure</groupId>\n        <artifactId>azure-security-keyvault-jca</artifactId>\n    </dependency>\n</dependencies>\n```\n\n#### Include direct dependency\nIf you want to take dependency on a particular version of the library that is not present in the BOM,\nadd the direct dependency to your project as follows.\n\n[//]: # ({x-version-update-start;com.azure:azure-security-keyvault-jca;current})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-security-keyvault-jca</artifactId>\n    <version>2.7.0</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Prerequisites\n- A [Java Development Kit (JDK)][jdk_link], version 8 or later.\n- [Azure Subscription][azure_subscription]\n- An existing [Azure Key Vault][azure_keyvault]. If you need to create a Key Vault, you can use the [Azure Cloud Shell][azure_cloud_shell] to create one with this Azure CLI command. Replace `<your-resource-group-name>` and `<your-key-vault-name>` with your own, unique names:\n\n```Bash\naz keyvault create --resource-group <your-resource-group-name> --name <your-key-vault-name>\n```\n\n## Key concepts\n\n## Examples\n### Server side SSL\nIf you are looking to integrate the JCA provider to create an SSLServerSocket see the example below.\n\n```java readme-sample-serverSSL\nKeyVaultJcaProvider provider = new KeyVaultJcaProvider();\nSecurity.addProvider(provider);\n\nKeyStore keyStore = KeyVaultKeyStore.getKeyVaultKeyStoreBySystemProperty();\n\nKeyManagerFactory managerFactory = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());\nmanagerFactory.init(keyStore, \"\".toCharArray());\n\nSSLContext context = SSLContext.getInstance(\"TLS\");\ncontext.init(managerFactory.getKeyManagers(), null, null);\n\nSSLServerSocketFactory socketFactory = context.getServerSocketFactory();\nSSLServerSocket serverSocket = (SSLServerSocket) socketFactory.createServerSocket(8765);\n```\n\nNote if you want to use Azure Managed Identity, you should set the value of `azure.keyvault.uri`, and the rest of the parameters would be `null`.\n\n### Client side SSL\nIf you are looking to integrate the JCA provider for client side socket connections, see the Apache HTTP client example below.\n\n```java readme-sample-clientSSL\nKeyVaultJcaProvider provider = new KeyVaultJcaProvider();\nSecurity.addProvider(provider);\n\nKeyStore keyStore = KeyVaultKeyStore.getKeyVaultKeyStoreBySystemProperty();\n\nSSLContext sslContext = SSLContexts\n    .custom()\n    .loadTrustMaterial(keyStore, new TrustSelfSignedStrategy())\n    .build();\n\nSSLConnectionSocketFactory sslConnectionSocketFactory = new SSLConnectionSocketFactory(\n    sslContext, (hostname, session) -> true);\n\nPoolingHttpClientConnectionManager manager = new PoolingHttpClientConnectionManager(\n    RegistryBuilder.<ConnectionSocketFactory>create()\n        .register(\"https\", sslConnectionSocketFactory)\n        .build());\n\nString result = null;\n\ntry (CloseableHttpClient client = HttpClients.custom().setConnectionManager(manager).build()) {\n    HttpGet httpGet = new HttpGet(\"https://localhost:8766\");\n    ResponseHandler<String> responseHandler = (HttpResponse response) -> {\n        int status = response.getStatusLine().getStatusCode();\n        String result1 = \"Not success\";\n        if (status == 204) {\n            result1 = \"Success\";\n        }\n        return result1;\n    };\n    result = client.execute(httpGet, responseHandler);\n} catch (IOException ioe) {\n    ioe.printStackTrace();\n}\n```\n\nNote if you want to use Azure managed identity, you should set the value of `azure.keyvault.uri`, and the rest of the parameters would be `null`.\n\n### File-System certificates\nYou can load the certificate in the file system as a trusted certificate by configure the following properties.\n\n```yaml\nazure:\n  cert-path:\n    well-known:     # The file location where you store the well-known certificate\n    custom:         # The file location where you store the custom certificate\n```\n\n### Key-Less certificates\nYou can set the private key as [non-exportable] to ensure the security of the key.\n\nNote if you want to use key less certificate, you must add `sign` permission.\n\nYou can add permission in portal: ![Sign To Principal](resources/SignToPrincipal.png)\n\nOr add permission by cli command:\n```shell\n  az keyvault set-policy --name ${KEY_VAULT} \\\n        --object-id ${MANAGED_IDENTITY} \\\n        --key-permissions get list sign\\\n        --secret-permissions get list \\\n        --certificate-permissions get list\n```\nPlease replace `${KEY_VAULT}` with your key vault name and replace `${MANAGED_IDENTITY}` with your principal's object-id.\n\n### Supported key type\n| Content Type | Key Type | Key Size or Elliptic curve name | Sign algorithm  | Support |\n|--------------|----------|---------------------------------|-----------------|---------|\n| PKCS #12     | RSA      | 2048                            | RSASSA-PSS      | \u2714       |     \n| PKCS #12     | RSA      | 3072                            | RSASSA-PSS      | \u2714       |\n| PKCS #12     | RSA      | 4096                            | RSASSA-PSS      | \u2714       |\n| PKCS #12     | EC       | P-256                           | SHA256withECDSA | \u2714       |\n| PKCS #12     | EC       | P-384                           | SHA384withECDSA | \u2714       |\n| PKCS #12     | EC       | P-521                           | SHA512withECDSA | \u2714       |\n| PKCS #12     | EC       | P-256K                          |                 | \u2718       |\n| PEM          | RSA      | 2048                            | RSASSA-PSS      | \u2714       |\n| PEM          | RSA      | 3072                            | RSASSA-PSS      | \u2714       |\n| PEM          | RSA      | 4096                            | RSASSA-PSS      | \u2714       |\n| PEM          | EC       | P-256                           | SHA256withECDSA | \u2714       |\n| PEM          | EC       | P-384                           | SHA384withECDSA | \u2714       |\n| PEM          | EC       | P-521                           | SHA512withECDSA | \u2714       | \n| PEM          | EC       | P-256K                          |                 | \u2718       |\n\n## Troubleshooting\n\n## Configure logging\nThis module uses JUL (`java.util.logging`), so to configure things like the logging level you can directly modify the JUL configuration.\n\nHere is an example of a `logging.properties` file:\n```properties\n# To enable this configuration file, please add this property:\n# -Djava.util.logging.config.file=\"src/test/resources/logging.properties\"\n#\n# The Java logging APIs (java.util.logging) default loads logging.properties from:\n# 1. $JAVA_HOME/jre/lib/ (Java 8 and before)\n# 2. $JAVA_HOME/conf/ (Java 9 and above)\n#\n# For more information about this file, please refer to:\n# 1. https://docs.oracle.com/javase/8/docs/technotes/guides/logging/overview.html#a1.8\n# 2. https://docs.oracle.com/cd/E23549_01/doc.1111/e14568/handler.htm\n\nhandlers = java.util.logging.ConsoleHandler\njava.util.logging.ConsoleHandler.level = ALL\njava.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter\njava.util.logging.SimpleFormatter.format= [%1$tF %1$tT] %3 [%4$-7s] %5$s %n\n\n.level = INFO\ncom.azure.security.keyvault.jca.level = ALL\n```\n\n\n### General\nAzure Key Vault JCA clients raise exceptions. For example, if you try to check a client's identity with a certificate chain that does not include a trusted certificate, a `CertificateException` will be thrown. In the following snippet, the error is handled gracefully by catching the exception and displaying additional information about the error.\n\n```java\nclass Demo {\n    void demo () {\n        try {\n            KeyVaultJcaProvider provider = new KeyVaultJcaProvider();\n            Security.addProvider(provider);\n            // ...\n            // Start SSL server socket\n            // ...\n        } catch (CertificateException e) {\n            System.out.println(e.getMessage());\n        }\n    }\n}\n```\n\n## Next steps\n### Spring Boot\nFor Spring Boot applications see our [Spring Boot starter][spring_boot_starter].\n\n### References\n1. [Java Cryptography Architecture (JCA) Reference Guide][jca_reference_guide]\n\n### Additional documentation\nFor more extensive documentation on Azure Key Vault, see the [API reference documentation].\n\n## Contributing\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][microsoft_code_of_conduct]. For more information see the Code of Conduct FAQ or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[Source code]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/keyvault/azure-security-keyvault-jca/src\n[API reference documentation]: https://azure.github.io/azure-sdk-for-java/keyvault.html#azure-security-keyvault-jca\n[Product documentation]: https://docs.microsoft.com/azure/key-vault/\n[Samples]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/keyvault/azure-security-keyvault-jca/src/samples/java/com/azure/security/keyvault/jca\n[azure_subscription]: https://azure.microsoft.com/\n[azure_keyvault]: https://docs.microsoft.com/azure/key-vault/keys/quick-create-portal\n[jdk_link]: https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable\n[azure_cloud_shell]: https://shell.azure.com/bash\n[spring_boot_starter]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/spring/spring-cloud-azure-starter-keyvault-certificates\n[jca_reference_guide]: https://docs.oracle.com/javase/8/docs/technotes/guides/security/crypto/CryptoSpec.html\n[microsoft_code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[non-exportable]: https://docs.microsoft.com/azure/key-vault/certificates/about-certificates#exportable-or-non-exportable-key\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fkeyvault%2Fazure-security-keyvault-jca%2FREADME.png)\n",
        "repo_name": "keyvault/azure-security-keyvault-jca",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/keyvault/azure-security-keyvault-jca",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Key Vault Key client library for Java\nAzure Key Vault is a cloud service that provides secure storage of keys for encrypting your data. Multiple keys, and multiple versions of the same key, can be kept in the Azure Key Vault. Cryptographic keys in Azure Key Vault are represented as [JSON Web Key [JWK]][jwk_specification] objects.\n\nAzure Key Vault Managed HSM is a fully-managed, highly-available, single-tenant, standards-compliant cloud service that enables you to safeguard cryptographic keys for your cloud applications using FIPS 140-2 Level 3 validated HSMs.\n\nThe Azure Key Vault keys library client supports RSA keys and Elliptic Curve (EC) keys, each with corresponding support in hardware security modules (HSM). It offers operations to create, retrieve, update, delete, purge, backup, restore, and list the keys and its versions.\n\n[Source code][source_code] | [API reference documentation][api_documentation] | [Product documentation][azkeyvault_docs] | [Samples][keys_samples]\n\n## Getting started\n### Include the package\n#### Include the BOM file\nPlease include the `azure-sdk-bom` to your project to take dependency on the General Availability (GA) version of the library. In the following snippet, replace the {bom_version_to_target} placeholder with the version number. To learn more about the BOM, see the [AZURE SDK BOM README](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/boms/azure-sdk-bom/README.md).\n\n```xml\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>com.azure</groupId>\n            <artifactId>azure-sdk-bom</artifactId>\n            <version>{bom_version_to_target}</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n```\n\nand then include the direct dependency in the dependencies section without the version tag as shown below.\n\n```xml\n<dependencies>\n    <dependency>\n        <groupId>com.azure</groupId>\n        <artifactId>azure-security-keyvault-keys</artifactId>\n    </dependency>\n</dependencies>\n```\n\n#### Include direct dependency\nIf you want to take dependency on a particular version of the library that is not present in the BOM, add the direct dependency to your project as follows.\n\n[//]: # ({x-version-update-start;com.azure:azure-security-keyvault-keys;current})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-security-keyvault-keys</artifactId>\n    <version>4.6.2</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Prerequisites\n- A [Java Development Kit (JDK)][jdk_link], version 8 or later.\n- An [Azure Subscription][azure_subscription].\n- One of the following:\n  - An existing [Azure Key Vault][azure_keyvault]. If you need to create a key vault, you can do so in the Azure Portal by following the steps in [this document][azure_keyvault_portal]. Alternatively, you can use the Azure CLI by following the steps in [this document][azure_keyvault_cli].\n  - An existing [Azure Key Vault Managed HSM][azure_keyvault_mhsm]. If you need to create a Managed HSM, you can do so using the Azure CLI by following the steps in [this document][azure_keyvault_mhsm_cli].\n\n### Authenticate the client\nIn order to interact with the Azure Key Vault service, you will need to create an instance of either the [`KeyClient`](#create-key-client) class or the [`CryptographyClient`](#create-cryptography-client) class, as well as a **vault url** and a credential object. The examples shown in this document use a credential object named  [`DefaultAzureCredential`][default_azure_credential], which is appropriate for most scenarios, including local development and production environments. Additionally, we recommend using a [managed identity][managed_identity] for authentication in production environments.\n\nYou can find more information on different ways of authenticating and their corresponding credential types in the [Azure Identity documentation][azure_identity].\n\n#### Create key client\nOnce you perform [the authentication set up that suits you best][default_azure_credential] and replaced **your-key-vault-url** with the URL for your key vault or managed HSM, you can create the `KeyClient`:\n\n```java readme-sample-createKeyClient\nKeyClient keyClient = new KeyClientBuilder()\n    .vaultUrl(\"<your-key-vault-url>\")\n    .credential(new DefaultAzureCredentialBuilder().build())\n    .buildClient();\n```\n\n> NOTE: For using an asynchronous client use `KeyAsyncClient` instead of `KeyClient` and call `buildAsyncClient()`.\n\n#### Create cryptography client\nOnce you perform [the `DefaultAzureCredential` set up that suits you best][default_azure_credential] and replaced **your-key-vault-url** with the URL for your key vault or managed HSM, you can create the `CryptographyClient`:\n\n```java readme-sample-createCryptographyClient\n// Create client with key identifier from Key Vault.\nCryptographyClient cryptoClient = new CryptographyClientBuilder()\n    .keyIdentifier(\"<your-key-id-from-key-vault>\")\n    .credential(new DefaultAzureCredentialBuilder().build())\n    .buildClient();\n```\n\n> NOTE: For using an asynchronous client use `CryptographyAsyncClient` instead of `CryptographyClient` and call `buildAsyncClient()`.\n\n## Key concepts\n### Key\nAzure Key Vault supports multiple key types (`RSA` & `EC`) and algorithms, and enables the use of Hardware Security Modules (HSM) for high value keys. In addition to the key material, the following attributes may be specified:\n* enabled: Specifies whether the key is enabled and usable for cryptographic operations.\n* not_before: Identifies the time before which the key must not be used for cryptographic operations.\n* expires: Identifies the expiration time on or after which the key MUST NOT be used for cryptographic operations.\n* created: Indicates when this version of the key was created.\n* updated: Indicates when this version of the key was updated.\n\n### Key client:\nThe key client performs the interactions with the Azure Key Vault service for getting, setting, updating, deleting, and listing keys and its versions. Asynchronous (`KeyAsyncClient`) and synchronous (`KeyClient`) clients exist in the SDK allowing for the selection of a client based on an application's use case. Once you have initialized a key, you can interact with the primary resource types in Key Vault.\n\n### Cryptography client:\nThe cryptography client performs the cryptographic operations locally or calls the Azure Key Vault service depending on how much key information is available locally. It supports encrypting, decrypting, signing, verifying, key wrapping, key unwrapping, and retrieving the configured key. Asynchronous (`CryptographyAsyncClient`) and synchronous (`CryptographyClient`) clients exist in the SDK allowing for the selection of a client based on an application's use case.\n\n## Examples\n### Sync API\nThe following sections provide several code snippets covering some of the most common Azure Key Vault Key service tasks, including:\n- [Create a key](#create-a-key)\n- [Retrieve a key](#retrieve-a-key)\n- [Update an existing key](#update-an-existing-key)\n- [Delete a key](#delete-a-key)\n- [List keys](#list-keys)\n- [Encrypt](#encrypt)\n- [Decrypt](#decrypt)\n\n#### Create a key\nCreate a key to be stored in the Azure Key Vault.\n- `createKey` creates a new key in the key vault. If a key with the same name already exists then a new version of the key is created.\n\n```java readme-sample-createKey\nKeyVaultKey rsaKey = keyClient.createRsaKey(new CreateRsaKeyOptions(\"CloudRsaKey\")\n    .setExpiresOn(OffsetDateTime.now().plusYears(1))\n    .setKeySize(2048));\nSystem.out.printf(\"Key created with name \\\"%s\\\" and id %s%n\", rsaKey.getName(), rsaKey.getId());\n\nKeyVaultKey ecKey = keyClient.createEcKey(new CreateEcKeyOptions(\"CloudEcKey\")\n    .setCurveName(KeyCurveName.P_256)\n    .setExpiresOn(OffsetDateTime.now().plusYears(1)));\nSystem.out.printf(\"Key created with name \\\"%s\\\" and id %s%n\", ecKey.getName(), ecKey.getId());\n```\n\n#### Retrieve a key\nRetrieve a previously stored key by calling `getKey`.\n\n```java readme-sample-retrieveKey\nKeyVaultKey key = keyClient.getKey(\"<key-name>\");\nSystem.out.printf(\"A key was returned with name \\\"%s\\\" and id %s%n\", key.getName(), key.getId());\n```\n\n#### Update an existing key\nUpdate an existing key by calling `updateKeyProperties`.\n\n```java readme-sample-updateKey\n// Get the key to update.\nKeyVaultKey key = keyClient.getKey(\"<key-name>\");\n// Update the expiry time of the key.\nkey.getProperties().setExpiresOn(OffsetDateTime.now().plusDays(30));\nKeyVaultKey updatedKey = keyClient.updateKeyProperties(key.getProperties());\nSystem.out.printf(\"Key's updated expiry time: %s%n\", updatedKey.getProperties().getExpiresOn());\n```\n\n#### Delete a key\nDelete an existing key by calling `beginDeleteKey`.\n\n```java readme-sample-deleteKey\nSyncPoller<DeletedKey, Void> deletedKeyPoller = keyClient.beginDeleteKey(\"<key-name>\");\n\nPollResponse<DeletedKey> deletedKeyPollResponse = deletedKeyPoller.poll();\n\n// Deleted key is accessible as soon as polling begins.\nDeletedKey deletedKey = deletedKeyPollResponse.getValue();\n// Deletion date only works for a soft-delete enabled key vault.\nSystem.out.printf(\"Deletion date: %s%n\", deletedKey.getDeletedOn());\n\n// The key is being deleted on the server.\ndeletedKeyPoller.waitForCompletion();\n```\n\n#### List keys\nList the keys in the key vault by calling `listPropertiesOfKeys`.\n\n```java readme-sample-listKeys\n// List operations don't return the keys with key material information. So, for each returned key we call getKey to\n// get the key with its key material information.\nfor (KeyProperties keyProperties : keyClient.listPropertiesOfKeys()) {\n    KeyVaultKey keyWithMaterial = keyClient.getKey(keyProperties.getName(), keyProperties.getVersion());\n    System.out.printf(\"Received key with name \\\"%s\\\" and type \\\"%s\\\"%n\", keyWithMaterial.getName(),\n        keyWithMaterial.getKey().getKeyType());\n}\n```\n\n#### Encrypt\nEncrypt plain text by calling `encrypt`.\n\n```java readme-sample-encrypt\nbyte[] plaintext = new byte[100];\nnew SecureRandom(SEED).nextBytes(plaintext);\n\n// Let's encrypt a simple plain text of size 100 bytes.\nEncryptResult encryptionResult = cryptoClient.encrypt(EncryptionAlgorithm.RSA_OAEP, plaintext);\nSystem.out.printf(\"Returned ciphertext size is %d bytes with algorithm \\\"%s\\\"%n\",\n    encryptionResult.getCipherText().length, encryptionResult.getAlgorithm());\n```\n\n#### Decrypt\nDecrypt encrypted content by calling `decrypt`.\n\n```java readme-sample-decrypt\nbyte[] plaintext = new byte[100];\nnew SecureRandom(SEED).nextBytes(plaintext);\nEncryptResult encryptionResult = cryptoClient.encrypt(EncryptionAlgorithm.RSA_OAEP, plaintext);\n\n//Let's decrypt the encrypted result.\nDecryptResult decryptionResult = cryptoClient.decrypt(EncryptionAlgorithm.RSA_OAEP, encryptionResult.getCipherText());\nSystem.out.printf(\"Returned plaintext size is %d bytes%n\", decryptionResult.getPlainText().length);\n```\n\n### Async API\nThe following sections provide several code snippets covering some of the most common asynchronous Azure Key Vault Key service tasks, including:\n- [Create a key asynchronously](#create-a-key-asynchronously)\n- [Retrieve a key asynchronously](#retrieve-a-key-asynchronously)\n- [Update an existing key asynchronously](#update-an-existing-key-asynchronously)\n- [Delete a key asynchronously](#delete-a-key-asynchronously)\n- [List keys asynchronously](#list-keys-asynchronously)\n- [Encrypt asynchronously](#encrypt-asynchronously)\n- [Decrypt asynchronously](#decrypt-asynchronously)\n\n> Note : You should add `System.in.read()` or `Thread.sleep()` after the function calls in the main class/thread to allow async functions/operations to execute and finish before the main application/thread exits.\n\n#### Create a key asynchronously\nCreate a key to be stored in the Azure Key Vault.\n- `createKey` creates a new key in the key vault. If a key with the same name already exists then a new version of the key is created.\n\n```java readme-sample-createKeyAsync\nkeyAsyncClient.createRsaKey(new CreateRsaKeyOptions(\"CloudRsaKey\")\n        .setExpiresOn(OffsetDateTime.now().plusYears(1))\n        .setKeySize(2048))\n    .subscribe(key ->\n        System.out.printf(\"Key created with name \\\"%s\\\" and id %s%n\", key.getName(), key.getId()));\n\nkeyAsyncClient.createEcKey(new CreateEcKeyOptions(\"CloudEcKey\")\n        .setExpiresOn(OffsetDateTime.now().plusYears(1)))\n    .subscribe(key ->\n        System.out.printf(\"Key created with name \\\"%s\\\" and id %s%n\", key.getName(), key.getId()));\n```\n\n#### Retrieve a key asynchronously\nRetrieve a previously stored key by calling `getKey`.\n\n```java readme-sample-retrieveKeyAsync\nkeyAsyncClient.getKey(\"<key-name>\")\n    .subscribe(key ->\n        System.out.printf(\"Key was returned with name \\\"%s\\\" and id %s%n\", key.getName(), key.getId()));\n```\n\n#### Update an existing key asynchronously\nUpdate an existing key by calling `updateKeyProperties`.\n\n```java readme-sample-updateKeyAsync\nkeyAsyncClient.getKey(\"<key-name>\")\n    .flatMap(key -> {\n        // Update the expiry time of the key.\n        key.getProperties().setExpiresOn(OffsetDateTime.now().plusDays(50));\n        return keyAsyncClient.updateKeyProperties(key.getProperties());\n    }).subscribe(updatedKey ->\n        System.out.printf(\"Key's updated expiry time: %s%n\", updatedKey.getProperties().getExpiresOn()));\n```\n\n#### Delete a key asynchronously\nDelete an existing key by calling `beginDeleteKey`.\n\n```java readme-sample-deleteKeyAsync\nkeyAsyncClient.beginDeleteKey(\"<key-name>\")\n    .subscribe(pollResponse -> {\n        System.out.printf(\"Deletion status: %s%n\", pollResponse.getStatus());\n        System.out.printf(\"Deleted key name: %s%n\", pollResponse.getValue().getName());\n        System.out.printf(\"Key deletion date: %s%n\", pollResponse.getValue().getDeletedOn());\n    });\n```\n\n#### List keys asynchronously\nList the keys in the Azure Key Vault by calling `listPropertiesOfKeys`.\n\n```java readme-sample-listKeysAsync\n// The List Keys operation returns keys without their value, so for each key returned we call `getKey` to get its value\n// as well.\nkeyAsyncClient.listPropertiesOfKeys()\n    .flatMap(keyProperties -> keyAsyncClient.getKey(keyProperties.getName(), keyProperties.getVersion()))\n    .subscribe(key ->\n        System.out.printf(\"Received key with name \\\"%s\\\" and type \\\"%s\\\"\", key.getName(), key.getKeyType()));\n```\n\n#### Encrypt asynchronously\nEncrypt plain text by calling `encrypt`.\n\n```java readme-sample-encryptAsync\nbyte[] plaintext = new byte[100];\nnew SecureRandom(SEED).nextBytes(plaintext);\n\n// Let's encrypt a simple plain text of size 100 bytes.\ncryptoAsyncClient.encrypt(EncryptionAlgorithm.RSA_OAEP, plaintext)\n    .subscribe(encryptionResult -> System.out.printf(\"Returned ciphertext size is %d bytes with algorithm \\\"%s\\\"%n\",\n        encryptionResult.getCipherText().length, encryptionResult.getAlgorithm()));\n```\n\n#### Decrypt asynchronously\nDecrypt encrypted content by calling `decrypt`.\n\n```java readme-sample-decryptAsync\nbyte[] plaintext = new byte[100];\nnew SecureRandom(SEED).nextBytes(plaintext);\n\n// Let's encrypt a simple plain text of size 100 bytes.\ncryptoAsyncClient.encrypt(EncryptionAlgorithm.RSA_OAEP, plaintext)\n    .flatMap(encryptionResult -> {\n        System.out.printf(\"Returned ciphertext size is %d bytes with algorithm \\\"%s\\\"%n\",\n            encryptionResult.getCipherText().length, encryptionResult.getAlgorithm());\n        //Let's decrypt the encrypted response.\n        return cryptoAsyncClient.decrypt(EncryptionAlgorithm.RSA_OAEP, encryptionResult.getCipherText());\n    }).subscribe(decryptionResult ->\n        System.out.printf(\"Returned plaintext size is %d bytes%n\", decryptionResult.getPlainText().length));\n```\n\n## Troubleshooting\nSee our [troubleshooting guide](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/keyvault/azure-security-keyvault-keys/TROUBLESHOOTING.md) for details on how to diagnose various failure scenarios.\n\n### General\nAzure Key Vault Key clients raise exceptions. For example, if you try to retrieve a key after it is deleted a `404` error is returned, indicating the resource was not found. In the following snippet, the error is handled gracefully by catching the exception and displaying additional information about the error.\n\n```java readme-sample-troubleshooting\ntry {\n    keyClient.getKey(\"<deleted-key-name>\");\n} catch (ResourceNotFoundException e) {\n    System.out.println(e.getMessage());\n}\n```\n\n### Default HTTP client\nAll client libraries by default use the Netty HTTP client. Adding the above dependency will automatically configure the client library to use the Netty HTTP client. Configuring or changing the HTTP client is detailed in the [HTTP clients wiki][http_clients_wiki].\n\n### Default SSL library\nAll client libraries, by default, use the Tomcat-native Boring SSL library to enable native-level performance for SSL operations. The Boring SSL library is an Uber JAR containing native libraries for Linux / macOS / Windows, and provides better performance compared to the default SSL implementation within the JDK. For more information, including how to reduce the dependency size, refer to the [performance tuning][performance_tuning] section of the wiki.\n\n## Next steps\nSeveral Azure Key Vault Java client library samples are available to you in the SDK's GitHub repository. These samples provide example code for additional scenarios commonly encountered while working with Azure Key Vault.\n\n## Next steps samples\nSamples are explained in detail [here][samples_readme].\n\n### Additional documentation\nFor more extensive documentation on Azure Key Vault, see the [API reference documentation][azkeyvault_rest].\n\n## Contributing\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][microsoft_code_of_conduct]. For more information see the Code of Conduct FAQ or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[source_code]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/keyvault/azure-security-keyvault-keys/src\n[api_documentation]: https://azure.github.io/azure-sdk-for-java\n[azkeyvault_docs]: https://docs.microsoft.com/azure/key-vault/\n[azure_identity]: https://docs.microsoft.com/java/api/overview/azure/identity-readme?view=azure-java-stable\n[azure_subscription]: https://azure.microsoft.com/\n[azure_keyvault]: https://docs.microsoft.com/azure/key-vault/keys/quick-create-portal\n[azure_keyvault_cli]: https://docs.microsoft.com/azure/key-vault/general/quick-create-cli\n[azure_keyvault_portal]: https://docs.microsoft.com/azure/key-vault/general/quick-create-portal\n[azure_keyvault_mhsm]: https://docs.microsoft.com/azure/key-vault/managed-hsm/overview\n[azure_keyvault_mhsm_cli]: https://docs.microsoft.com/azure/key-vault/managed-hsm/quick-create-cli\n[default_azure_credential]: https://docs.microsoft.com/java/api/overview/azure/identity-readme?view=azure-java-stable#defaultazurecredential\n[managed_identity]: https://docs.microsoft.com/azure/active-directory/managed-identities-azure-resources/overview\n[azkeyvault_rest]: https://docs.microsoft.com/rest/api/keyvault/\n[keys_samples]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/keyvault/azure-security-keyvault-keys/src/samples/java/com/azure/security/keyvault/keys\n[samples_readme]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/keyvault/azure-security-keyvault-keys/src/samples/README.md\n[performance_tuning]: https://github.com/Azure/azure-sdk-for-java/wiki/Performance-Tuning\n[jdk_link]: https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable\n[jwk_specification]: https://tools.ietf.org/html/rfc7517\n[http_clients_wiki]: https://github.com/Azure/azure-sdk-for-java/wiki/HTTP-clients\n[microsoft_code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fkeyvault%2Fazure-security-keyvault-keys%2FREADME.png)\n",
        "repo_name": "keyvault/azure-security-keyvault-keys",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/keyvault/azure-security-keyvault-keys",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Security Key Vault Performance test client library for Java\n\nRepresents Performance tests for Azure Security Key Vault SDK for Java.\n\n## Getting started\n\n### Prerequisites\n\n- Java Development Kit (JDK) with version 8 or above\n\n### Adding the package to your product\n\n\n## Key concepts\n\n\n## Examples\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n",
        "repo_name": "keyvault/azure-security-keyvault-perf",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/keyvault/azure-security-keyvault-perf",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Key Vault Secret client library for Java\nAzure Key Vault is a cloud service that provides secure storage for secrets, such as passwords and database connection strings.\n\nThe Azure Key Vault Secrets client library allows you to securely store and tightly control the access to tokens, passwords, API keys, and other secrets. This library offers operations to create, retrieve, update, delete, purge, backup, restore, and list the secrets and its versions.\n\nUse the Azure Key Vault Secrets client library to create and manage secrets.\n\n[Source code][source_code] | [API reference documentation][api_documentation] | [Product documentation][azkeyvault_docs] | [Samples][secrets_samples]\n\n## Getting started\n### Include the package\n#### Include the BOM file\nPlease include the `azure-sdk-bom` to your project to take dependency on the General Availability (GA) version of the library. In the following snippet, replace the {bom_version_to_target} placeholder with the version number.\nTo learn more about the BOM, see the [AZURE SDK BOM README](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/boms/azure-sdk-bom/README.md).\n\n```xml\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>com.azure</groupId>\n            <artifactId>azure-sdk-bom</artifactId>\n            <version>{bom_version_to_target}</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n```\n\nand then include the direct dependency in the dependencies section without the version tag as shown below.\n\n```xml\n<dependencies>\n    <dependency>\n        <groupId>com.azure</groupId>\n        <artifactId>azure-security-keyvault-secrets</artifactId>\n    </dependency>\n</dependencies>\n```\n\n#### Include direct dependency\nIf you want to take dependency on a particular version of the library that is not present in the BOM, add the direct dependency to your project as follows.\n\n[//]: # ({x-version-update-start;com.azure:azure-security-keyvault-secrets;current})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-security-keyvault-secrets</artifactId>\n    <version>4.6.2</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Prerequisites\n\n- A [Java Development Kit (JDK)][jdk_link], version 8 or later.\n- An [Azure Subscription][azure_subscription].\n- An existing [Azure Key Vault][azure_keyvault]. If you need to create a key vault, you can do so in the Azure Portal by following the steps in [this document][azure_keyvault_portal]. Alternatively, you can use the Azure CLI by following the steps in [this document][azure_keyvault_cli].\n\n### Authenticate the client\nIn order to interact with the Azure Key Vault service, you will need to create an instance of the [`SecretClient`](#create-secret-client) class, a **vault url** and a credential object. The examples shown in this document use a credential object named  [`DefaultAzureCredential`][default_azure_credential], which is appropriate for most scenarios, including local development and production environments. Additionally, we recommend using a [managed identity][managed_identity] for authentication in production environments.\n\nYou can find more information on different ways of authenticating and their corresponding credential types in the [Azure Identity documentation][azure_identity].\n\n#### Create secret client\nOnce you perform [the authentication set up that suits you best][default_azure_credential] and replaced **your-key-vault-url** with the URL for your key vault, you can create the `SecretClient`:\n\n```java readme-sample-createSecretClient\nSecretClient secretClient = new SecretClientBuilder()\n    .vaultUrl(\"<your-key-vault-url>\")\n    .credential(new DefaultAzureCredentialBuilder().build())\n    .buildClient();\n```\n\n> NOTE: For using an asynchronous client use `SecretAsyncClient` instead of `SecretClient` and call `buildAsyncClient()`.\n\n## Key concepts\n### Secret\nA secret is the fundamental resource within Azure Key Vault. From a developer's perspective, Key Vault APIs accept and return secret values as strings. In addition to the secret data, the following attributes may be specified:\n* enabled: Specifies whether the secret data can be retrieved.\n* notBefore: Identifies the time after which the secret will be active.\n* expires: Identifies the expiration time on or after which the secret data should not be retrieved.\n* created: Indicates when this version of the secret was created.\n* updated: Indicates when this version of the secret was updated.\n\n### Secret client:\nThe secret client performs the interactions with the Azure Key Vault service for getting, setting, updating, deleting, and listing secrets and its versions. Asynchronous (`SecretAsyncClient`) and synchronous (`SecretClient`) clients exist in the SDK allowing for selection of a client based on an application's use case. Once you've initialized a secret, you can interact with the primary resource types in Key Vault.\n\n## Examples\n### Sync API\nThe following sections provide several code snippets covering some of the most common Azure Key Vault Secret service tasks, including:\n- [Create a secret](#create-a-secret)\n- [Retrieve a secret](#retrieve-a-secret)\n- [Update an existing secret](#update-an-existing-secret)\n- [Delete a secret](#delete-a-secret)\n- [List secrets](#list-secrets)\n\n### Create a secret\nCreate a secret to be stored in the Azure Key Vault.\n- `setSecret` creates a new secret in the Azure Key Vault. If a secret with the given name already exists then a new version of the secret is created.\n\n```java readme-sample-createSecret\nKeyVaultSecret secret = secretClient.setSecret(\"<secret-name>\", \"<secret-value>\");\nSystem.out.printf(\"Secret created with name \\\"%s\\\" and value \\\"%s\\\"%n\", secret.getName(), secret.getValue());\n```\n\n### Retrieve a secret\nRetrieve a previously stored secret by calling `getSecret`.\n\n```java readme-sample-retrieveSecret\nKeyVaultSecret secret = secretClient.getSecret(\"<secret-name>\");\nSystem.out.printf(\"Retrieved secret with name \\\"%s\\\" and value \\\"%s\\\"%n\", secret.getName(), secret.getValue());\n```\n\n### Update an existing secret\nUpdate an existing secret by calling `updateSecretProperties`.\n\n```java readme-sample-updateSecret\n// Get the secret to update.\nKeyVaultSecret secret = secretClient.getSecret(\"<secret-name>\");\n// Update the expiry time of the secret.\nsecret.getProperties().setExpiresOn(OffsetDateTime.now().plusDays(30));\nSecretProperties updatedSecretProperties = secretClient.updateSecretProperties(secret.getProperties());\nSystem.out.printf(\"Secret's updated expiry time: %s%n\", updatedSecretProperties.getExpiresOn());\n```\n\n### Delete a secret\nDelete an existing secret by calling `beginDeleteSecret`.\n\n```java readme-sample-deleteSecret\nSyncPoller<DeletedSecret, Void> deletedSecretPoller = secretClient.beginDeleteSecret(\"<secret-name>\");\n\n// Deleted secret is accessible as soon as polling begins.\nPollResponse<DeletedSecret> deletedSecretPollResponse = deletedSecretPoller.poll();\n\n// Deletion date only works for a SoftDelete-enabled Key Vault.\nSystem.out.printf(\"Deletion date: %s%n\", deletedSecretPollResponse.getValue().getDeletedOn());\n\n// Secret is being deleted on server.\ndeletedSecretPoller.waitForCompletion();\n```\n\n### List secrets\nList the secrets in the Azure Key Vault by calling `listPropertiesOfSecrets`.\n\n```java readme-sample-listSecrets\n// List operations don't return the secrets with value information. So, for each returned secret we call getSecret to\n// get the secret with its value information.\nfor (SecretProperties secretProperties : secretClient.listPropertiesOfSecrets()) {\n    KeyVaultSecret secretWithValue = secretClient.getSecret(secretProperties.getName(), secretProperties.getVersion());\n    System.out.printf(\"Retrieved secret with name \\\"%s\\\" and value \\\"%s\\\"%n\", secretWithValue.getName(),\n        secretWithValue.getValue());\n}\n```\n\n### Async API\nThe following sections provide several code snippets covering some of the most common asynchronous Azure Key Vault Secret Service tasks, including:\n- [Create a secret asynchronously](#create-a-secret-asynchronously)\n- [Retrieve a secret asynchronously](#retrieve-a-secret-asynchronously)\n- [Update an existing secret asynchronously](#update-an-existing-secret-asynchronously)\n- [Delete a secret asynchronously](#delete-a-secret-asynchronously)\n- [List secrets asynchronously](#list-secrets-asynchronously)\n\n> Note : You should add `System.in.read()` or `Thread.sleep()` after the function calls in the main class/thread to allow async functions/operations to execute and finish before the main application/thread exits.\n\n### Create a secret asynchronously\nCreate a secret to be stored in the Azure Key Vault.\n- `setSecret` creates a new secret in the Azure Key Vault. If a secret with the given name already exists then a new version of the secret is created.\n\n```java readme-sample-createSecretAsync\nsecretAsyncClient.setSecret(\"<secret-name>\", \"<secret-value>\")\n    .subscribe(secret -> System.out.printf(\"Created secret with name \\\"%s\\\" and value \\\"%s\\\"%n\",\n        secret.getName(), secret.getValue()));\n```\n\n### Retrieve a secret asynchronously\nRetrieve a previously stored secret by calling `getSecret`.\n\n```java readme-sample-retrieveSecretAsync\nsecretAsyncClient.getSecret(\"<secret-name>\")\n    .subscribe(secret -> System.out.printf(\"Retrieved secret with name \\\"%s\\\" and value \\\"%s\\\"%n\",\n        secret.getName(), secret.getValue()));\n```\n\n### Update an existing secret asynchronously\nUpdate an existing secret by calling `updateSecretProperties`.\n\n```java readme-sample-updateSecretAsync\nsecretAsyncClient.getSecret(\"<secret-name>\")\n    .flatMap(secret -> {\n        // Update the expiry time of the secret.\n        secret.getProperties().setExpiresOn(OffsetDateTime.now().plusDays(50));\n        return secretAsyncClient.updateSecretProperties(secret.getProperties());\n    }).subscribe(updatedSecretProperties ->\n        System.out.printf(\"Secret's updated expiry time: %s%n\", updatedSecretProperties.getExpiresOn()));\n```\n\n### Delete a secret asynchronously\nDelete an existing secret by calling `beginDeleteSecret`.\n\n```java readme-sample-deleteSecretAsync\nsecretAsyncClient.beginDeleteSecret(\"<secret-name>\")\n    .subscribe(pollResponse -> {\n        System.out.printf(\"Deletion status: %s%n\", pollResponse.getStatus());\n        System.out.printf(\"Deleted secret name: %s%n\", pollResponse.getValue().getName());\n        System.out.printf(\"Deleted secret value: %s%n\", pollResponse.getValue().getValue());\n    });\n```\n\n### List secrets asynchronously\nList the secrets in the Azure Key Vault by calling `listPropertiesOfSecrets`.\n\n```java readme-sample-listSecretsAsync\n// The List secrets operation returns secrets without their value, so for each secret returned we call `getSecret`\n// to get its value as well.\nsecretAsyncClient.listPropertiesOfSecrets()\n    .flatMap(secretProperties ->\n        secretAsyncClient.getSecret(secretProperties.getName(), secretProperties.getVersion()))\n    .subscribe(secretResponse ->\n        System.out.printf(\"Retrieved secret with name \\\"%s\\\" and value \\\"%s\\\"%n\", secretResponse.getName(),\n            secretResponse.getValue()));\n```\n\n## Troubleshooting\nSee our [troubleshooting guide](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/keyvault/azure-security-keyvault-secrets/TROUBLESHOOTING.md) for details on how to diagnose various failure scenarios.\n\n### General\nAzure Key Vault Secret clients raise exceptions. For example, if you try to retrieve a secret after it is deleted a `404` error is returned, indicating the resource was not found. In the following snippet, the error is handled gracefully by catching the exception and displaying additional information about the error.\n\n```java readme-sample-troubleshooting\ntry {\n    secretClient.getSecret(\"<deleted-secret-name>\");\n} catch (ResourceNotFoundException e) {\n    System.out.println(e.getMessage());\n}\n```\n\n### Default HTTP Client\nAll client libraries by default use the Netty HTTP client. Adding the above dependency will automatically configure the client library to use the Netty HTTP client. Configuring or changing the HTTP client is detailed in the [HTTP clients wiki][http_clients_wiki].\n\n### Default SSL library\nAll client libraries, by default, use the Tomcat-native Boring SSL library to enable native-level performance for SSL operations. The Boring SSL library is an Uber JAR containing native libraries for Linux / macOS / Windows, and provides better performance compared to the default SSL implementation within the JDK. For more information, including how to reduce the dependency size, refer to the [performance tuning][performance_tuning] section of the wiki.\n\n## Next steps\nSeveral Key Vault Java SDK samples are available to you in the SDK's GitHub repository. These samples provide example code for additional scenarios commonly encountered while working with Azure Key Vault.\n\n## Next steps samples\nSamples are explained in detail [here][samples_readme].\n\n### Additional documentation\nFor more extensive documentation on Azure Key Vault, see the [API reference documentation][azkeyvault_rest].\n\n## Contributing\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][microsoft_code_of_conduct]. For more information see the Code of Conduct FAQ or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[source_code]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/keyvault/azure-security-keyvault-secrets/src\n[api_documentation]: https://azure.github.io/azure-sdk-for-java\n[azkeyvault_docs]: https://docs.microsoft.com/azure/key-vault/\n[azure_identity]: https://docs.microsoft.com/java/api/overview/azure/identity-readme?view=azure-java-stable\n[azure_subscription]: https://azure.microsoft.com/\n[azure_keyvault]: https://docs.microsoft.com/azure/key-vault/general/overview\n[azure_keyvault_cli]: https://docs.microsoft.com/azure/key-vault/general/quick-create-cli\n[azure_keyvault_portal]: https://docs.microsoft.com/azure/key-vault/general/quick-create-portal\n[default_azure_credential]: https://docs.microsoft.com/java/api/overview/azure/identity-readme?view=azure-java-stable#defaultazurecredential\n[managed_identity]: https://docs.microsoft.com/azure/active-directory/managed-identities-azure-resources/overview\n[azkeyvault_rest]: https://docs.microsoft.com/rest/api/keyvault/\n[secrets_samples]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/keyvault/azure-security-keyvault-secrets/src/samples/java/com/azure/security/keyvault/secrets\n[samples_readme]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/keyvault/azure-security-keyvault-secrets/src/samples/README.md\n[performance_tuning]: https://github.com/Azure/azure-sdk-for-java/wiki/Performance-Tuning\n[jdk_link]: https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable\n[http_clients_wiki]: https://github.com/Azure/azure-sdk-for-java/wiki/HTTP-clients\n[microsoft_code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fkeyvault%2Fazure-security-keyvault-secrets%2FREADME.png)\n",
        "repo_name": "keyvault/azure-security-keyvault-secrets",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/keyvault/azure-security-keyvault-secrets",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Key Vault JCA client library for Java Test\n\n## Key concepts\n## Getting started\n## Examples\n## Troubleshooting\n## Next steps\n## Contributing",
        "repo_name": "keyvault/azure-security-test-keyvault-jca",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/keyvault/azure-security-test-keyvault-jca",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager SourceControlConfiguration client library for Java\n\nAzure Resource Manager SourceControlConfiguration client library for Java.\n\nThis package contains Microsoft Azure SDK for SourceControlConfiguration Management SDK. KubernetesConfiguration Client. Package tag package-2022-11. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-kubernetesconfiguration;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-kubernetesconfiguration</artifactId>\n    <version>1.0.0-beta.4</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nSourceControlConfigurationManager manager = SourceControlConfigurationManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/kubernetesconfiguration/azure-resourcemanager-kubernetesconfiguration/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "kubernetesconfiguration/azure-resourcemanager-kubernetesconfiguration",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/kubernetesconfiguration/azure-resourcemanager-kubernetesconfiguration",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager Kusto client library for Java\n\nAzure Resource Manager Kusto client library for Java.\n\nThis package contains Microsoft Azure SDK for Kusto Management SDK. The Azure Kusto management API provides a RESTful set of web services that interact with Azure Kusto services to manage your clusters and databases. The API enables you to create, update, and delete clusters and databases. Package tag package-2022-12. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-kusto;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-kusto</artifactId>\n    <version>1.0.0-beta.6</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nKustoManager manager = KustoManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/kusto/azure-resourcemanager-kusto/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "kusto/azure-resourcemanager-kusto",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/kusto/azure-resourcemanager-kusto",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager LabServices client library for Java\n\nAzure Resource Manager LabServices client library for Java.\n\nThis package contains Microsoft Azure SDK for LabServices Management SDK. REST API for managing Azure Lab Services images. Package tag package-2022-08. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-labservices;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-labservices</artifactId>\n    <version>1.0.0-beta.3</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nLabServicesManager manager = LabServicesManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/labservices/azure-resourcemanager-labservices/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n",
        "repo_name": "labservices/azure-resourcemanager-labservices",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/labservices/azure-resourcemanager-labservices",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Load Testing client library for Java\n\nAzure Load Testing provides client library in Java to the user by which they can interact natively with Azure Load Testing service. Azure Load Testing is a fully managed load-testing service that enables you to generate high-scale load. The service simulates traffic for your applications, regardless of where they're hosted. Developers, testers, and quality assurance (QA) engineers can use it to optimize application performance, scalability, or capacity\n\nThis package contains Microsoft Azure Developer LoadTesting client library.\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [Source code][source_code]\n- [API reference documentation][api_reference_doc]\n- [Product Documentation][product_documentation]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n- Azure Load Testing resource\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure:azure-developer-loadtesting;current})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-developer-loadtesting</artifactId>\n    <version>1.0.2</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Authentication\n\n[Azure Identity][azure_identity] package provides the default implementation for authenticating the client.\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java java-readme-sample-auth\n// ensure the user, service principal or managed identity used has Loadtesting Contributor role for the resource\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .build();\n// create client using DefaultAzureCredential\nLoadTestAdministrationClient adminClient = new LoadTestAdministrationClientBuilder()\n        .credential(credential)\n        .endpoint(\"<Enter Azure Load Testing Data-Plane URL>\")\n        .buildClient();\nLoadTestRunClient testRunClient = new LoadTestRunClientBuilder()\n        .credential(credential)\n        .endpoint(\"<Enter Azure Load Testing Data-Plane URL>\")\n        .buildClient();\n\nRequestOptions reqOpts = new RequestOptions()\n    .addQueryParam(\"orderBy\", \"lastModifiedDateTime\")\n    .addQueryParam(\"maxPageSize\", \"10\");\nadminClient.listTests(reqOpts);\n\nreqOpts = new RequestOptions()\n    .addQueryParam(\"orderBy\", \"lastModifiedDateTime\")\n    .addQueryParam(\"status\", \"EXECUTING,DONE\")\n    .addQueryParam(\"maxPageSize\", \"10\");\ntestRunClient.listTestRuns(reqOpts);\n```\n\n## Key concepts\n\nThe following components make up the Azure Load Testing service. The Azure Load Test client library for Java allows you to interact with each of these components through the use of clients. There are two top-level clients which are the main entry points for the library\n\n- `LoadTestingClient`\n\n- `LoadTestingAsyncClient`\n\nThe two clients have similar methods in them except the methods in the async client are async as well.\n\nThe top-level clients have two sub-clients\n\n- `LoadTestAdministration`\n\n- `TestRun`\n\nThese sub-clients are used for managing and using different components of the service.\n\n### Load Test Administration Client\n\nThe `LoadTestAdministration` sub-clients is used to administer and configure the load tests, app components and metrics.\n\n#### Test\n\nA test specifies the test script, and configuration settings for running a load test. You can create one or more tests in an Azure Load Testing resource.\n\n#### App Component\n\nWhen you run a load test for an Azure-hosted application, you can monitor resource metrics for the different Azure application components (server-side metrics). While the load test runs, and after completion of the test, you can monitor and analyze the resource metrics in the Azure Load Testing dashboard.\n\n#### Metrics\n\nDuring a load test, Azure Load Testing collects metrics about the test execution. There are two types of metrics:\n\n1. Client-side metrics give you details reported by the test engine. These metrics include the number of virtual users, the request response time, the number of failed requests, or the number of requests per second.\n\n2. Server-side metrics are available for Azure-hosted applications and provide information about your Azure application components. Metrics can be for the number of database reads, the type of HTTP responses, or container resource consumption.\n\n### Test Run Client\n\nThe `TestRun` sub-clients is used to start and stop test runs corresponding to a load test. A test run represents one execution of a load test. It collects the logs associated with running the Apache JMeter script, the load test YAML configuration, the list of app components to monitor, and the results of the test.\n\n### Data-Plane Endpoint\n\nData-plane of Azure Load Testing resources is addressable using the following URL format:\n\n`00000000-0000-0000-0000-000000000000.aaa.cnt-prod.loadtesting.azure.com`\n\nThe first GUID `00000000-0000-0000-0000-000000000000` is the unique identifier used for accessing the Azure Load Testing resource. This is followed by  `aaa` which is the Azure region of the resource.\n\nThe data-plane endpoint is obtained from Control Plane APIs.\n\n**Example:** `1234abcd-12ab-12ab-12ab-123456abcdef.eus.cnt-prod.loadtesting.azure.com`\n\nIn the above example, `eus` represents the Azure region `East US`.\n\n## Examples\n\n### Creating a Load Test\n\n```java java-readme-sample-createTest\nLoadTestAdministrationClient adminClient = new LoadTestAdministrationClientBuilder()\n        .credential(new DefaultAzureCredentialBuilder().build())\n        .endpoint(\"<endpoint>\")\n        .buildClient();\n\n// construct Test object using nested String:Object Maps\nMap<String, Object> testMap = new HashMap<String, Object>();\ntestMap.put(\"displayName\", \"Sample Display Name\");\ntestMap.put(\"description\", \"Sample Description\");\n\n// loadTestConfig describes the number of test engines to generate load\nMap<String, Object> loadTestConfigMap = new HashMap<String, Object>();\nloadTestConfigMap.put(\"engineInstances\", 1);\ntestMap.put(\"loadTestConfiguration\", loadTestConfigMap);\n\n// environmentVariables are plain-text data passed to test engines\nMap<String, Object> envVarMap = new HashMap<String, Object>();\nenvVarMap.put(\"a\", \"b\");\nenvVarMap.put(\"x\", \"y\");\ntestMap.put(\"environmentVariables\", envVarMap);\n\n// secrets are secure data sent using Azure Key Vault\nMap<String, Object> secretMap = new HashMap<String, Object>();\nMap<String, Object> sampleSecretMap = new HashMap<String, Object>();\nsampleSecretMap.put(\"value\", \"https://samplevault.vault.azure.net/secrets/samplesecret/f113f91fd4c44a368049849c164db827\");\nsampleSecretMap.put(\"type\", \"AKV_SECRET_URI\");\nsecretMap.put(\"sampleSecret\", sampleSecretMap);\ntestMap.put(\"secrets\", secretMap);\n\n// passFailCriteria define the conditions to conclude the test as success\nMap<String, Object> passFailMap = new HashMap<String, Object>();\nMap<String, Object> passFailMetrics = new HashMap<String, Object>();\nMap<String, Object> samplePassFailMetric = new HashMap<String, Object>();\nsamplePassFailMetric.put(\"clientmetric\", \"response_time_ms\");\nsamplePassFailMetric.put(\"aggregate\", \"percentage\");\nsamplePassFailMetric.put(\"condition\", \">\");\nsamplePassFailMetric.put(\"value\", \"20\");\nsamplePassFailMetric.put(\"action\", \"continue\");\npassFailMetrics.put(\"fefd759d-7fe8-4f83-8b6d-aeebe0f491fe\", samplePassFailMetric);\npassFailMap.put(\"passFailMetrics\", passFailMetrics);\ntestMap.put(\"passFailCriteria\", passFailMap);\n\n// convert the object Map to JSON BinaryData\nBinaryData test = BinaryData.fromObject(testMap);\n\n// receive response with BinaryData content\nResponse<BinaryData> testOutResponse = adminClient.createOrUpdateTestWithResponse(\"test12345\", test, null);\nSystem.out.println(testOutResponse.getValue().toString());\n```\n\n### Uploading .jmx file to a Load Test\n\n```java java-readme-sample-uploadTestFile\nLoadTestAdministrationClient adminClient = new LoadTestAdministrationClientBuilder()\n    .credential(new DefaultAzureCredentialBuilder().build())\n    .endpoint(\"<endpoint>\")\n    .buildClient();\n\n// extract file contents to BinaryData\nBinaryData fileData = BinaryData.fromFile(new File(\"path/to/file\").toPath());\n\n// receive response with BinaryData content\nResponse<BinaryData> fileUrlOut = adminClient.uploadTestFileWithResponse(\"test12345\", \"sample-file.jmx\", fileData, null);\nSystem.out.println(fileUrlOut.getValue().toString());\n```\n\n### Running a Load Test\n\n```java java-readme-sample-runTest\nLoadTestRunClient testRunClient = new LoadTestRunClientBuilder()\n    .credential(new DefaultAzureCredentialBuilder().build())\n    .endpoint(\"<endpoint>\")\n    .buildClient();\n\n// construct Test Run object using nested String:Object Maps\nMap<String, Object> testRunMap = new HashMap<String, Object>();\ntestRunMap.put(\"testId\", \"test12345\");\ntestRunMap.put(\"displayName\", \"SDK-Created-TestRun\");\n\n// convert the object Map to JSON BinaryData\nBinaryData testRun = BinaryData.fromObject(testRunMap);\n\n// start test with poller\nSyncPoller<BinaryData, BinaryData> poller = testRunClient.beginTestRun(\"testrun12345\", testRun, null);\nDuration pollInterval = Duration.ofSeconds(5);\npoller = poller.setPollInterval(pollInterval);\n\n// wait for test to reach terminal state\nJsonNode testRunJson = null;\nString testStatus;\nPollResponse<BinaryData> pollResponse = poller.poll();\nwhile (pollResponse.getStatus() == LongRunningOperationStatus.IN_PROGRESS || pollResponse.getStatus() == LongRunningOperationStatus.NOT_STARTED) {\n    try {\n        testRunJson = new ObjectMapper().readTree(pollResponse.getValue().toString());\n        testStatus = testRunJson.get(\"status\").asText();\n        System.out.println(\"Test run status: \" + testStatus);\n    } catch (JsonProcessingException e) {\n        System.out.println(\"Error processing JSON response\");\n        // handle error condition\n    }\n\n    // wait and check test status every 5 seconds\n    try {\n        Thread.sleep(pollInterval.toMillis());\n    } catch (InterruptedException e) {\n        // handle interruption\n    }\n\n    pollResponse = poller.poll();\n}\n\npoller.waitForCompletion();\nBinaryData testRunBinary = poller.getFinalResult();\ntry {\n    testRunJson = new ObjectMapper().readTree(testRunBinary.toString());\n    testStatus = testRunJson.get(\"status\").asText();\n} catch (JsonProcessingException e) {\n    System.out.println(\"Error processing JSON response\");\n    // handle error condition\n}\n\nString startDateTime = testRunJson.get(\"startDateTime\").asText();\nString endDateTime = testRunJson.get(\"endDateTime\").asText();\n\n// get list of all metric namespaces and pick the first one\nResponse<BinaryData> metricNamespacesOut = testRunClient.getMetricNamespacesWithResponse(\"testrun12345\", null);\nString metricNamespace = null;\n// parse JSON and read first value\ntry {\n    JsonNode metricNamespacesJson = new ObjectMapper().readTree(metricNamespacesOut.getValue().toString());\n    metricNamespace = metricNamespacesJson.get(\"value\").get(0).get(\"metricNamespaceName\").asText();\n} catch (JsonProcessingException e) {\n    System.out.println(\"Error processing JSON response\");\n    // handle error condition\n}\n\n// get list of all metric definitions and pick the first one\nResponse<BinaryData> metricDefinitionsOut = testRunClient.getMetricDefinitionsWithResponse(\"testrun12345\", metricNamespace, null);\nString metricName = null;\n// parse JSON and read first value\ntry {\n    JsonNode metricDefinitionsJson = new ObjectMapper().readTree(metricDefinitionsOut.getValue().toString());\n    metricName = metricDefinitionsJson.get(\"value\").get(0).get(\"name\").get(\"value\").asText();\n} catch (JsonProcessingException e) {\n    System.out.println(\"Error processing JSON response\");\n    // handle error condition\n}\n\n// fetch client metrics using metric namespace and metric name\nPagedIterable<BinaryData> clientMetricsOut = testRunClient.listMetrics(\"testrun12345\", metricName, metricNamespace, startDateTime + '/' + endDateTime, null);\nclientMetricsOut.forEach((clientMetric) -> {\n    System.out.println(clientMetric.toString());\n});\n```\n\n## Troubleshooting\n\nAzure SDKs for Java offer a consistent logging story to help aid in troubleshooting application errors and expedite\ntheir resolution. The logs produced will capture the flow of an application before reaching the terminal state to help\nlocate the root issue. View the [logging][logging] wiki for guidance about enabling logging.\n\n## Next steps\n\nAzure Loading Testing Java SDK samples are available to you in the SDK's GitHub repository. These samples provide example code for additional scenarios commonly encountered.\nSee [Azure Load Testing samples][sample_code].\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[source_code]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/loadtesting/azure-developer-loadtesting/src\n[sample_code]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/loadtesting/azure-developer-loadtesting/src/samples\n[api_reference_doc]: https://docs.microsoft.com/rest/api/loadtesting/\n[product_documentation]: https://azure.microsoft.com/services/load-testing/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[logging]: https://github.com/Azure/azure-sdk-for-java/wiki/Logging-in-Azure-SDK\n",
        "repo_name": "loadtesting/azure-developer-loadtesting",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/loadtesting/azure-developer-loadtesting",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager LoadTest client library for Java\n\nAzure Resource Manager LoadTest client library for Java.\n\nThis package contains Microsoft Azure SDK for LoadTest Management SDK. LoadTest client provides access to LoadTest Resource and it's status operations. Package tag package-2022-12-01. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-loadtesting;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-loadtesting</artifactId>\n    <version>1.0.0</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java readme-sample-authn\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nLoadTestManager manager = LoadTestManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n### Create a new Azure Load Testing resource\n\nCreate an Azure Load Testing resource.\n\n```java readme-sample-createloadtestresource-basic\nLoadTestResource resource = manager\n    .loadTests()\n    .define(\"sample-loadtesting-resource\")\n    .withRegion(Region.US_WEST2)\n    .withExistingResourceGroup(\"sample-rg\")\n    .create();\n```\n\nCreate an Azure Load Testing resource configured with CMK encryption.\n\n```java readme-sample-createloadtestresource-encryption\n// map of user-assigned managed identities to be assigned to the loadtest resource\nMap<String, UserAssignedIdentity> map = new HashMap<String, UserAssignedIdentity>();\nmap.put(\"/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/sample-rg/providers/microsoft.managedidentity/userassignedidentities/identity1\", new UserAssignedIdentity());\n\n// encryption identity must be assigned to the load test resource, before using it\nLoadTestResource resource = manager\n    .loadTests()\n    .define(\"sample-loadtesting-resource\")\n    .withRegion(Region.US_WEST2)\n    .withExistingResourceGroup(\"sample-rg\")\n    .withIdentity(\n        new ManagedServiceIdentity()\n        .withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED)\n        .withUserAssignedIdentities(map)\n    )\n    .withEncryption(\n        new EncryptionProperties()\n        .withIdentity(\n            new EncryptionPropertiesIdentity()\n            .withResourceId(\"/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/sample-rg/providers/microsoft.managedidentity/userassignedidentities/identity1\")\n            .withType(Type.USER_ASSIGNED)\n        )\n        .withKeyUrl(\"https://sample-kv.vault.azure.net/keys/cmkkey/2d1ccd5c50234ea2a0858fe148b69cde\")\n    )\n    .create();\n```\n\n### Get details of an Azure Load Testing resource\n\n```java readme-sample-getloadtestresource\nLoadTestResource resource = manager\n    .loadTests()\n    .getByResourceGroup(\"sample-rg\", \"sample-loadtesting-resource\");\n```\n\n### Update an Azure Load Testing resource\n\nUpdate an Azure Load Testing resource to configure CMK encryption using system-assigned managed identity.\n\n```java readme-sample-updateloadtestresource-encryption\nLoadTestResource resource = manager\n    .loadTests()\n    .getByResourceGroup(\"sample-rg\", \"sample-loadtesting-resource\");\n\nLoadTestResource resourcePostUpdate = resource\n    .update()\n    .withIdentity(\n        new ManagedServiceIdentity()\n        .withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED)\n    )\n    .withEncryption(\n        new EncryptionProperties()\n        .withIdentity(\n            new EncryptionPropertiesIdentity()\n            .withResourceId(null)\n            .withType(Type.SYSTEM_ASSIGNED)\n            // make sure that system-assigned managed identity is enabled on the resource and the identity has been granted required permissions to access the key.\n        )\n        .withKeyUrl(\"https://sample-kv.vault.azure.net/keys/cmkkey/2d1ccd5c50234ea2a0858fe148b69cde\")\n    )\n    .apply();\n```\n\nUpdate an Azure Load Testing resource to update user-assigned managed identities.\n\n```java readme-sample-updateloadtestresource-mi\nMap<String, UserAssignedIdentity> map = new HashMap<String, UserAssignedIdentity>();\n// Note: the value of <identity1> set to null, removes the previously assigned managed identity from the load test resource\nmap.put(\"/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/sample-rg/providers/microsoft.managedidentity/userassignedidentities/identity1\", null);\nmap.put(\"/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/sample-rg/providers/microsoft.managedidentity/userassignedidentities/identity2\", new UserAssignedIdentity());\n\nLoadTestResource resource = manager\n    .loadTests()\n    .getByResourceGroup(\"sample-rg\", \"sample-loadtesting-resource\");\n\nLoadTestResource resourcePostUpdate = resource\n    .update()\n    .withIdentity(\n        new ManagedServiceIdentity()\n        .withType(ManagedServiceIdentityType.USER_ASSIGNED)\n        .withUserAssignedIdentities(map)\n    )\n    .apply();\n```\n\n### Delete an Azure Load Testing resource\n\n```java readme-sample-deleteloadtestresource\nmanager\n    .loadTests()\n    .deleteByResourceGroup(\"sample-rg\", \"sample-loadtesting-resource\");\n```\n\n### Quota Operations\n\nGet quota values for all quota buckets.\n\n```java readme-sample-list-all-quota-buckets\nPagedIterable<QuotaResource> resource = manager\n    .quotas()\n    .list(\"westus2\");\n\nfor (QuotaResource quotaResource : resource) {\n    // use the quotaResource\n    System.out.println(quotaResource.limit());\n}\n```\n\nGet quota values for a particular quota bucket.\n\n```java readme-sample-get-quota-bucket\nQuotaResource resource = manager\n    .quotas()\n    .get(\"westus2\", \"maxConcurrentTestRuns\");\nSystem.out.println(resource.limit());\n```\n\nCheck quota availability.\n\n```java readme-sample-check-quota-availability\nQuotaResource resource = manager\n    .quotas()\n    .get(\"westus2\", \"maxConcurrentTestRuns\");\n\nQuotaBucketRequestPropertiesDimensions dimensions = new QuotaBucketRequestPropertiesDimensions()\n    .withLocation(\"westus2\")\n    .withSubscriptionId(manager.serviceClient().getSubscriptionId());\n\nQuotaBucketRequest request = new QuotaBucketRequest()\n    .withCurrentQuota(resource.limit())\n    .withCurrentUsage(resource.usage())\n    .withNewQuota(resource.limit())\n    .withDimensions(dimensions);\n\nCheckQuotaAvailabilityResponse availability = manager\n    .quotas()\n    .checkAvailability(\"westus2\", \"maxConcurrentTestRuns\", request);\n\nSystem.out.println(availability.isAvailable());\n```\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/loadtesting/azure-resourcemanager-loadtesting/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "loadtesting/azure-resourcemanager-loadtesting",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/loadtesting/azure-resourcemanager-loadtesting",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager LogAnalytics client library for Java\n\nAzure Resource Manager LogAnalytics client library for Java.\n\nThis package contains Microsoft Azure SDK for LogAnalytics Management SDK. Operational Insights Client. Package tag package-2022-02. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-loganalytics;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-loganalytics</artifactId>\n    <version>1.0.0-beta.3</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nLogAnalyticsManager manager = LogAnalyticsManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/loganalytics/azure-resourcemanager-loganalytics/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n",
        "repo_name": "loganalytics/azure-resourcemanager-loganalytics",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/loganalytics/azure-resourcemanager-loganalytics",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Log Analytics\n\n> Please note, a newer package [com.azure:azure-monitor-query](https://search.maven.org/artifact/com.azure/azure-monitor-query) \n> for [Azure Log Analytics](https://azure.microsoft.com/services/monitor/) is available as of October 2021. While this \n> package will continue to receive critical bug fixes and security fixes, we strongly encourage you to upgrade to the new package.\n> Read the [migration guide](https://aka.ms/azsdk/java/migrate/monitorquery) for more details.\n\nThis project provides client tools or utilities in Java that make it easy to query data in [Azure Log Analytics](https://azure.microsoft.com/services/log-analytics/). For reference documentation on classes and models, please see the [Azure SDK for Java reference](https://docs.microsoft.com/java/api/overview/azure/?view=azure-java-stable). \n\nAzure Log Analytics provides agents for telemtry collection and enables deep analytics via a [rich query language](https://docs.microsoft.com/azure/data-explorer/kusto/query/). This SDK provides query access to data already stored in Log Analytics. To start collecting data from different sources, take a look at these [quickstarts](https://docs.microsoft.com/azure/log-analytics/log-analytics-quick-collect-azurevm). \n\n## Examples\n\nPlease see [here](https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/loganalytics/microsoft-azure-loganalytics/samples) for code examples using this SDK. \n\n\n## Download\n\n### Latest release\n\nTo get the binaries of the official Microsoft Azure Log Analytics SDK as distributed by Microsoft, reade for use within your project, you can use Maven.\n\n[//]: # ({x-version-update-start;com.microsoft.azure:azure-loganalytics;current})\n```xml\n<dependency>\n    <groupId>com.microsoft.azure</groupId>\n    <artifactId>azure-loganalytics</artifactId>\n    <version>1.0.0-beta.2</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n## Prerequisites\n\n- A Java Developer Kit (JDK), v 1.7 or later\n- Maven\n\n## Help and Issues\n\nIf you encounter any bugs with these SDKs, please file issues via [Issues](https://github.com/Azure/azure-sdk-for-java/issues) or checkout [StackOverflow for Azure Java SDK](https://stackoverflow.com/questions/tagged/azure-java-sdk).\n\n## Contribute Code\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create new Pull Request\n\n## More information\n- [Azure Java SDKs](https://docs.microsoft.com/java/azure/)\n- If you don't have a Microsoft Azure subscription you can get a FREE trial account [here](https://go.microsoft.com/fwlink/?LinkId=330212)\n\n---\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Floganalytics%2Fmicrosoft-azure-loganalytics%2FREADME.png)\n",
        "repo_name": "loganalytics/microsoft-azure-loganalytics",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/loganalytics/microsoft-azure-loganalytics",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager Logic client library for Java\n\nAzure Resource Manager Logic client library for Java.\n\nThis package contains Microsoft Azure SDK for Logic Management SDK. REST API for Azure Logic Apps. Package tag package-2019-05. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-logic;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-logic</artifactId>\n    <version>1.0.0-beta.2</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nLogicManager manager = LogicManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/logic/azure-resourcemanager-logic/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "logic/azure-resourcemanager-logic",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/logic/azure-resourcemanager-logic",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager logz client library for Java\n\nAzure Resource Manager logz client library for Java.\n\nThis package contains Microsoft Azure SDK for logz Management SDK.  Package tag package-2020-10-01. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-logz;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-logz</artifactId>\n    <version>1.0.0-beta.2</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nLogzManager manager = LogzManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/logz/azure-resourcemanager-logz/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "logz/azure-resourcemanager-logz",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/logz/azure-resourcemanager-logz",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager Machine Learning client library for Java\n\nAzure Resource Manager Machine Learning client library for Java.\n\nThis package contains Microsoft Azure SDK for Machine Learning Management SDK. These APIs allow end users to operate on Azure Machine Learning Workspace resources. Package tag package-2022-10. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-machinelearning;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-machinelearning</artifactId>\n    <version>1.0.0</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nMachineLearningManager manager = MachineLearningManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/machinelearning/azure-resourcemanager-machinelearning/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "machinelearning/azure-resourcemanager-machinelearning",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/machinelearning/azure-resourcemanager-machinelearning",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager MachineLearningServices client library for Java\n\nAzure Resource Manager MachineLearningServices client library for Java.\n\nThis package contains Microsoft Azure SDK for MachineLearningServices Management SDK. These APIs allow end users to operate on Azure Machine Learning Workspace resources. Package tag package-2021-04-01. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-machinelearningservices;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-machinelearningservices</artifactId>\n    <version>1.0.0-beta.1</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nMachineLearningServicesManager manager = MachineLearningServicesManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n",
        "repo_name": "machinelearningservices/azure-resourcemanager-machinelearningservices",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/machinelearningservices/azure-resourcemanager-machinelearningservices",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager Maintenance client library for Java\n\nAzure Resource Manager Maintenance client library for Java.\n\nThis package contains Microsoft Azure SDK for Maintenance Management SDK. Azure Maintenance Management Client. Package tag package-2021-05. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-maintenance;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-maintenance</artifactId>\n    <version>1.0.0-beta.3</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nMaintenanceManager manager = MaintenanceManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/maintenance/azure-resourcemanager-maintenance/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "maintenance/azure-resourcemanager-maintenance",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/maintenance/azure-resourcemanager-maintenance",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager Application client library for Java\n\nAzure Resource Manager Application client library for Java.\n\nThis package contains Microsoft Azure SDK for Application Management SDK. ARM applications. Package tag package-managedapplications-2018-06. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-managedapplications;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-managedapplications</artifactId>\n    <version>1.0.0-beta.2</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nApplicationManager manager = ApplicationManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/managedapplications/azure-resourcemanager-managedapplications/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "managedapplications/azure-resourcemanager-managedapplications",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/managedapplications/azure-resourcemanager-managedapplications",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Maps SDK Elevation client library for Java (Deprecated)\n\nAzure Maps SDK Elevation client library for Java.\n\nThis package contains the Azure Maps SDK Elevation client library which contains Azure Maps Elevation APIs. For documentation on how to use this package, please see [Azure Maps Elevation REST APIs](https://docs.microsoft.com/rest/api/maps/elevation).\n\n[Source code][source] | [API reference documentation][docs] | [REST API documentation][rest_docs] | [Product documentation][product_docs] | [Samples][samples]\n\n## Important\n\nPlease note, this package has been deprecated and will no longer be in service or maintained after 5 May 2023. All other Azure Maps APIs, Services and TilesetIDs are unaffected by this retirement. Refer to the migration guide [Elevation Services Retirement] for guidance on upgrading. Refer to our deprecation policy (https://aka.ms/azsdk/support-policies) for more details.\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure:azure-maps-elevation;current})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-maps-elevation</artifactId>\n    <version>1.0.0-beta.2</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java com.azure.maps.elevation.sync.builder.ad.instantiation\n// Authenticates using Azure AD building a default credential\n// This will look for AZURE_CLIENT_ID, AZURE_TENANT_ID, and AZURE_CLIENT_SECRET env variables\nDefaultAzureCredential tokenCredential = new DefaultAzureCredentialBuilder().build();\n\n// Creates a client\nElevationClient client = new ElevationClientBuilder()\n    .credential(tokenCredential)\n    .elevationClientId(System.getenv(\"MAPS_CLIENT_ID\"))\n    .buildClient();\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\nGet Data For Points\n```java com.azure.maps.elevation.sync.get_data_for_points\nclient.getDataForPoints(Arrays.asList(\n    new GeoPosition(-121.66853362143818, 46.84646479863713),\n    new GeoPosition(-121.68853362143818, 46.856464798637127)));\n```\n\nGet Data For Polyline\n```java com.azure.maps.elevation.sync.get_data_for_polyline\nclient.getDataForPolyline(Arrays.asList(\n    new GeoPosition(-121.66853362143818, 46.84646479863713),\n    new GeoPosition(-121.65853362143818, 46.85646479863713)), 5);\n```\n\nGet Data For Bounding Box\n```java com.azure.maps.elevation.sync.get_data_for_bounding_box\nclient.getDataForBoundingBox(new GeoBoundingBox(-121.668533621438, 46.8464647986371,\n    -121.658533621438, 46.8564647986371), 3, 3);\n```\n\n## Troubleshooting\nWhen you interact with the Azure Maps Services, errors returned by the Maps service correspond to the same HTTP status codes returned for REST API requests.\n\nFor example, if you search with an invalid coordinate, a error is returned, indicating \"Bad Request\".400\n\n## Next steps\nSeveral Azure Maps Elevation Java SDK samples are available to you in the SDK's GitHub repository.\n[Azure Maps Elevation Samples](https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/maps/azure-maps-elevation/src/samples)\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/master/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[source]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/maps/azure-maps-elevation/src\n[samples]:  https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/maps/azure-maps-elevation/src/samples\n[rest_docs]: https://docs.microsoft.com/rest/api/maps\n[product_docs]: https://docs.microsoft.com/azure/azure-maps/\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[Elevation Services Retirement]: https://azure.microsoft.com/updates/azure-maps-elevation-apis-and-render-v2-dem-tiles-will-be-retired-on-5-may-2023/\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fmaps%2Fazure-maps-elevation%2FREADME.png)\n",
        "repo_name": "maps/azure-maps-elevation",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/maps/azure-maps-elevation",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Maps SDK GeoLocation client library for Java\n\nAzure Maps SDK GeoLocation client library for Java.\n\nThis package contains the Azure Maps SDK GeoLocation client library which contains Azure Maps GeoLocation APIs. For documentation on how to use this package, please see [Azure Maps GeoLocation SDK for Java](https://docs.microsoft.com/rest/api/maps/geolocation).\n\n[Source code][source] | [API reference documentation][docs] | [REST API documentation][rest_docs] | [Product documentation][product_docs] | [Samples][samples]\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure:azure-maps-geolocation;current})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-maps-geolocation</artifactId>\n    <version>1.0.0-beta.1</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java com.azure.maps.geolocation.sync.builder.ad.instantiation\n// Authenticates using Azure AD building a default credential\n// This will look for AZURE_CLIENT_ID, AZURE_TENANT_ID, and AZURE_CLIENT_SECRET env variables\nDefaultAzureCredential tokenCredential = new DefaultAzureCredentialBuilder().build();\n\n// Creates a client\nGeolocationClient client = new GeolocationClientBuilder()\n    .credential(tokenCredential)\n    .clientId(System.getenv(\"MAPS_CLIENT_ID\"))\n    .buildClient();\n```\n\nTThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\nGet Polygons\n```java com.azure.maps.geolocation.sync.get_ip_to_location\nclient.getLocation(\"131.107.0.89\");\n```\n\n## Troubleshooting\nWhen you interact with the Azure Maps Services, errors returned by the Maps service correspond to the same HTTP status codes returned for REST API requests.\n\nFor example, if you search with an IP address, a error is returned, indicating `400 - Bad Request`.\n\n## Next steps\n\nSeveral Azure Maps GeoLocation Java SDK samples are available to you in the SDK's GitHub repository.\n[Azure Maps GeoLocation Samples](https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/maps/azure-maps-geolocation/src/samples)\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[source]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/maps/azure-maps-geolocation/src\n[samples]:  https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/maps/azure-maps-geolocation/src/samples\n[rest_docs]: https://docs.microsoft.com/rest/api/maps\n[product_docs]: https://docs.microsoft.com/azure/azure-maps/\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fmaps%2Fazure-maps-geolocation%2FREADME.png)\n",
        "repo_name": "maps/azure-maps-geolocation",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/maps/azure-maps-geolocation",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Maps SDK Render client library for Java\n\nAzure Maps SDK Render client library for Java.\n\nThis package contains Microsoft Azure SDK for Render Management SDK which contains Azure Maps Render REST APIs. Azure Maps Render retrieves copyrigt information or map/state tiles. For documentation on how to use this package, please see [Azure Maps Render](https://docs.microsoft.com/rest/api/maps/render-v2).\n\n[Source code][source] | [API reference documentation][docs] | [REST API documentation][rest_docs] | [Product documentation][product_docs] | [Samples][samples]\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure:azure-maps-render;current})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-maps-render</artifactId>\n    <version>1.0.0-beta.1</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Maps Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java com.azure.maps.render.sync.builder.ad.instantiation\n// Authenticates using Azure AD building a default credential\n// This will look for AZURE_CLIENT_ID, AZURE_TENANT_ID, and AZURE_CLIENT_SECRET env variables\nDefaultAzureCredential tokenCredential = new DefaultAzureCredentialBuilder().build();\n\n// Creates a builder\nMapsRenderClientBuilder builder = new MapsRenderClientBuilder();\nbuilder.credential(tokenCredential);\nbuilder.mapsClientId(System.getenv(\"MAPS_CLIENT_ID\"));\nbuilder.httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BODY_AND_HEADERS));\n\n// Builds a client\nMapsRenderClient client = builder.buildClient();\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\nGet Map Tile\n```java com.azure.maps.render.sync.get_map_tile\nSystem.out.println(\"Get Map Tile\");\nMapTileOptions mapTileOptions = new MapTileOptions();\nmapTileOptions.setTilesetId(TilesetId.MICROSOFT_BASE_ROAD);\nmapTileOptions.setTileIndex(new TileIndex().setX(10).setY(22).setZ(6));\nclient.getMapTile(mapTileOptions);\n```\n\nGet Map Tileset\n```java com.azure.maps.render.sync.get_map_tileset\nSystem.out.println(\"Get Map Tileset\");\nnew TilesetId();\nclient.getMapTileset(TilesetId.MICROSOFT_BASE);\n```\n\nGet Map Attribution\n```java com.azure.maps.render.sync.get_map_attribution\nSystem.out.println(\"Get Map Attribution\");\nGeoBoundingBox bounds = new GeoBoundingBox(-122.414162, 47.57949, -122.247157, 47.668372);\nnew TilesetId();\nclient.getMapAttribution(TilesetId.MICROSOFT_BASE, 6, bounds);\n```\n\nGet Copyright Caption\n```java com.azure.maps.render.sync.get_copyright_caption\nSystem.out.println(\"Get Copyright Caption\");\nclient.getCopyrightCaption();\n```\n\nGet Map Static Image\n```java com.azure.maps.render.sync.get_map_static_image\nSystem.out.println(\"Get Map Static Image\");\nGeoBoundingBox bbox = new GeoBoundingBox(1.355233, 42.982261, 24.980233, 56.526017);\nnew StaticMapLayer();\nnew RasterTileFormat();\nMapStaticImageOptions mapStaticImageOptions = new MapStaticImageOptions().setStaticMapLayer(StaticMapLayer.BASIC)\n    .setMapImageStyle(MapImageStyle.MAIN).setZoom(2)\n    .setBoundingBox(bbox).setRasterTileFormat(RasterTileFormat.PNG);\nclient.getMapStaticImage(mapStaticImageOptions).toStream();\n```\n\nGet Copyright From Bounding Box\n```java com.azure.maps.render.sync.get_copyright_from_bounding_box\nGeoBoundingBox boundingBox = new GeoBoundingBox(52.41064, 4.84228, 52.41072, 4.84239);\nclient.getCopyrightFromBoundingBox(boundingBox, true);\n```\n\nGet Copyright For Tile\n```java com.azure.maps.render.sync.get_copyright_for_tile\nclient.getCopyrightForTile(new TileIndex().setX(9).setY(22).setZ(6), true);\n```\n\nGet Copyright For World\n```java com.azure.maps.render.sync.get_copyright_for_world\nclient.getCopyrightForWorld(true);\n```\n\n## Troubleshooting\nWhen you interact with the Azure Maps Services, errors returned by the Maps service correspond to the same HTTP status codes returned for REST API requests.\n\nFor example, if you search with an invalid coordinate, a error is returned, indicating \"Bad Request\".400\n\n## Next steps\n\nSeveral Azure Maps Render Java SDK samples are available to you in the SDK's GitHub repository.\n[Azure Maps Render Samples](https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/maps/azure-maps-render/src/samples)\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[source]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/maps/azure-maps-render/src\n[samples]:  https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/maps/azure-maps-render/src/samples\n[rest_docs]: https://docs.microsoft.com/rest/api/maps\n[product_docs]: https://docs.microsoft.com/azure/azure-maps/\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fmaps%2Fazure-maps-render%2FREADME.png)\n",
        "repo_name": "maps/azure-maps-render",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/maps/azure-maps-render",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Maps SDK Route client library for Java\n\nAzure Maps SDK Route client library for Java.\n\nThis package contains Microsoft Azure SDK for Route Management SDK which contains Azure Maps Route REST APIs. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://docs.microsoft.com/rest/api/maps/route).\n\n[Source code][source] | [API reference documentation][docs] | [REST API documentation][rest_docs] | [Product documentation][product_docs] | [Samples][samples]\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure:azure-maps-route;current})\n```xml \n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-maps-route</artifactId>\n    <version>1.0.0-beta.1</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Maps Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java com.azure.maps.route.async.builder.ad.instantiation\n// Authenticates using Azure AD building a default credential\n// This will look for AZURE_CLIENT_ID, AZURE_TENANT_ID, and AZURE_CLIENT_SECRET env variables\nDefaultAzureCredential tokenCredential = new DefaultAzureCredentialBuilder().build();\n\n// Creates a builder\nMapsRouteClientBuilder builder = new MapsRouteClientBuilder();\nbuilder.credential(tokenCredential);\nbuilder.mapsClientId(System.getenv(\"MAPS_CLIENT_ID\"));\nbuilder.httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BODY_AND_HEADERS));\n\n// Builds a client\nMapsRouteAsyncClient client = builder.buildAsyncClient();\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\nBegin Request Route Matrix\n```java com.azure.maps.search.sync.begin_request_route_matrix\nSystem.out.println(\"Request route matrix\");\nRouteMatrixQuery matrixQuery = new RouteMatrixQuery();\n\n// origins\nGeoPointCollection origins = new GeoPointCollection(Arrays.asList(\n    new GeoPoint(4.85106, 52.36006),\n    new GeoPoint(4.85056, 52.36187)\n));\n\n// destinations\nGeoPointCollection destinations = new GeoPointCollection(Arrays.asList(\n    new GeoPoint(4.85003, 52.36241),\n    new GeoPoint(13.42937, 52.50931)\n));\n\nmatrixQuery.setDestinations(destinations);\nmatrixQuery.setOrigins(origins);\n\nRouteMatrixOptions matrixOptions = new RouteMatrixOptions(matrixQuery);\nclient.beginGetRouteMatrix(matrixOptions).getFinalResult();\n```\n\nGet Route Directions\n```java com.azure.maps.route.sync.get_route_directions\nSystem.out.println(\"Get route directions\");\nList<GeoPosition> routePoints = Arrays.asList(\n    new GeoPosition(13.42936, 52.50931),\n    new GeoPosition(13.43872, 52.50274));\nRouteDirectionsOptions routeOptions = new RouteDirectionsOptions(routePoints);\nRouteDirections directions = client.getRouteDirections(routeOptions);\nRouteReport report = directions.getReport(); // get the report and use it\n```\n\nGet Route Directions With Parameters\n```java com.azure.maps.route.sync.get_route_directions_parameters\nSystem.out.println(\"Get route parameters\");\n// supporting points\nGeoCollection supportingPoints = new GeoCollection(\n    Arrays.asList(\n        new GeoPoint(13.42936, 52.5093),\n        new GeoPoint(13.42859, 52.50844)\n        ));\n\n// avoid areas\nList<GeoPolygon> polygons = Arrays.asList(\n    new GeoPolygon(\n        new GeoLinearRing(Arrays.asList(\n            new GeoPosition(-122.39456176757811, 47.489368981370724),\n            new GeoPosition(-122.00454711914061, 47.489368981370724),\n            new GeoPosition(-122.00454711914061, 47.65151268066222),\n            new GeoPosition(-122.39456176757811, 47.65151268066222),\n            new GeoPosition(-122.39456176757811, 47.489368981370724)\n        ))\n    ),\n    new GeoPolygon(\n        new GeoLinearRing(Arrays.asList(\n            new GeoPosition(100.0, 0.0),\n            new GeoPosition(101.0, 0.0),\n            new GeoPosition(101.0, 1.0),\n            new GeoPosition(100.0, 1.0),\n            new GeoPosition(100.0, 0.0)\n        ))\n    )\n);\nGeoPolygonCollection avoidAreas = new GeoPolygonCollection(polygons);\nRouteDirectionsParameters parameters = new RouteDirectionsParameters()\n    .setSupportingPoints(supportingPoints)\n    .setAvoidVignette(Arrays.asList(\"AUS\", \"CHE\"))\n    .setAvoidAreas(avoidAreas);\nclient.getRouteDirections(routeOptions,\n    parameters);\n```\n\nGet Route Range\n```java com.azure.maps.search.sync.route_range\nSystem.out.println(\"Get route range\");\nRouteRangeOptions rangeOptions = new RouteRangeOptions(new GeoPosition(50.97452, 5.86605), Duration.ofSeconds(6000));\nclient.getRouteRange(rangeOptions);\n```\n\nBegin Request Route Directions Batch\n```java com.azure.maps.search.sync.begin_request_route_directions_batch\nRouteDirectionsOptions options1 = new RouteDirectionsOptions(\n    Arrays.asList(new GeoPosition(-122.128384, 47.639987),\n        new GeoPosition(-122.184408, 47.621252),\n        new GeoPosition(-122.332000, 47.596437)))\n    .setRouteType(RouteType.FASTEST)\n    .setTravelMode(TravelMode.CAR)\n    .setMaxAlternatives(5);\n\nRouteDirectionsOptions options2 = new RouteDirectionsOptions(\n    Arrays.asList(new GeoPosition(-122.348934, 47.620659),\n        new GeoPosition(-122.342015, 47.610101)))\n    .setRouteType(RouteType.ECONOMY)\n    .setTravelMode(TravelMode.BICYCLE)\n    .setUseTrafficData(false);\n\nRouteDirectionsOptions options3 = new RouteDirectionsOptions(\n    Arrays.asList(new GeoPosition(-73.985108, 40.759856),\n        new GeoPosition(-73.973506, 40.771136)))\n    .setRouteType(RouteType.SHORTEST)\n    .setTravelMode(TravelMode.PEDESTRIAN);\n\nSystem.out.println(\"Get Route Directions Batch\");\n\nList<RouteDirectionsOptions> optionsList = Arrays.asList(options1, options2, options3);\nSyncPoller<RouteDirectionsBatchResult, RouteDirectionsBatchResult> poller =\n    client.beginRequestRouteDirectionsBatch(optionsList);\npoller.getFinalResult();\n```\n\n## Troubleshooting\nWhen you interact with the Azure Maps Services, errors returned by the Maps service correspond to the same HTTP status codes returned for REST API requests.\n\nFor example, if you search with an invalid coordinate, a error is returned, indicating \"Bad Request\".400\n\n## Next steps\n\nSeveral Azure Maps Route Java SDK samples are available to you in the SDK's GitHub repository.\n[Azure Maps Route Samples](https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/maps/azure-maps-route/src/samples)\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[source]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/maps/azure-maps-route/src\n[samples]:  https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/maps/azure-maps-route/src/samples\n[rest_docs]: https://docs.microsoft.com/rest/api/maps\n[product_docs]: https://docs.microsoft.com/azure/azure-maps/\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fmaps%2Fazure-maps-route%2FREADME.png)\n",
        "repo_name": "maps/azure-maps-route",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/maps/azure-maps-route",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Maps SDK Search client library for Java\n\nAzure Maps SDK Search client library for Java.\n\nThis package contains the Azure Maps SDK Search client library which contains Azure Maps Search APIs. For documentation on how to use this package, please see [Azure Maps Search SDK for Java](https://docs.microsoft.com/rest/api/maps/search).\n\n[Source code][source] | [API reference documentation][docs] | [REST API documentation][rest_docs] | [Product documentation][product_docs] | [Samples][samples]\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure:azure-maps-search;current})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-maps-search</artifactId>\n    <version>1.0.0-beta.1</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Maps Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java com.azure.maps.search.sync.builder.ad.instantiation\n// Authenticates using Azure AD building a default credential\n// This will look for AZURE_CLIENT_ID, AZURE_TENANT_ID, and AZURE_CLIENT_SECRET env variables\nDefaultAzureCredential tokenCredential = new DefaultAzureCredentialBuilder().build();\n\n// Creates a builder\nMapsSearchClientBuilder builder = new MapsSearchClientBuilder();\nbuilder.credential(tokenCredential);\nbuilder.mapsClientId(System.getenv(\"MAPS_CLIENT_ID\"));\nbuilder.httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BODY_AND_HEADERS));\n\n// Builds a client\nMapsSearchClient client = builder.buildClient();\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\nGet Polygons\n```java com.azure.maps.search.sync.get_polygon\nSearchAddressResult results = client.fuzzySearch(\n    new FuzzySearchOptions(\"1 Microsoft Way\", new GeoPosition(-74.011454, 40.706270))\n        .setTop(5));\nResponse<SearchAddressResult> response = client.fuzzySearchWithResponse(\n    new FuzzySearchOptions(\"Monaco\").setEntityType(GeographicEntityType.COUNTRY)\n        .setTop(5), null);\nString id = response.getValue().getResults().get(0).getDataSource().getGeometry();\nList<String> ids = results.getResults().stream()\n    .filter(item -> item.getDataSource() != null && item.getDataSource().getGeometry() != null)\n    .map(item -> item.getDataSource().getGeometry())\n    .collect(Collectors.toList());\nids.add(id);\n\nif (ids != null && !ids.isEmpty()) {\n    System.out.println(\"Get Polygon: \" + ids);\n    client.getPolygons(ids);\n    client.getPolygonsWithResponse(ids, null).getValue().getClass();\n}\n```\n\nFuzzy Search\n```java com.azure.maps.search.sync.fuzzy_search\nSystem.out.println(\"Search Fuzzy:\");\n\n// simple\nclient.fuzzySearch(new FuzzySearchOptions(\"starbucks\"));\n\n// with options\nSearchAddressResult results = client.fuzzySearch(\n    new FuzzySearchOptions(\"1 Microsoft Way\", new GeoPosition(-74.011454, 40.706270))\n        .setTop(5));\n\n// with response\nResponse<SearchAddressResult> response = client.fuzzySearchWithResponse(\n    new FuzzySearchOptions(\"Monaco\").setEntityType(GeographicEntityType.COUNTRY)\n        .setTop(5), null);\n```\n\nSearch Point Of Interest\n```java com.azure.maps.search.sync.get_search_poi\nSystem.out.println(\"Search Points of Interest:\");\n\n// coordinates\nclient.searchPointOfInterest(\n    new SearchPointOfInterestOptions(\"pizza\", new GeoPosition(-121.97483, 36.98844)));\n\n// options\nclient.searchPointOfInterest(\n    new SearchPointOfInterestOptions(\"pizza\", new GeoPosition(-121.97483, 36.98844))\n        .setTop(10)\n        .setOperatingHours(OperatingHoursRange.NEXT_SEVEN_DAYS));\n\n// with response\nclient.searchPointOfInterestWithResponse(\n    new SearchPointOfInterestOptions(\"pizza\", new GeoPosition(-121.97483, 36.98844))\n        .setTop(10)\n        .setOperatingHours(OperatingHoursRange.NEXT_SEVEN_DAYS),\n    null).getStatusCode();\n```\n\nSearch Nearby Point Of Interest\n```java com.azure.maps.search.sync.search_nearby\nSystem.out.println(\"Search Nearby Points of Interest:\");\n\n// options\nclient.searchNearbyPointsOfInterest(\n    new SearchNearbyPointsOfInterestOptions(new GeoPosition(-74.011454, 40.706270))\n        .setCountryFilter(Arrays.asList(\"US\"))\n        .setTop(10));\n\n// response\nclient.searchNearbyPointsOfInterestWithResponse(\n    new SearchNearbyPointsOfInterestOptions(new GeoPosition(-74.011454, 40.706270))\n        .setCountryFilter(Arrays.asList(\"US\"))\n        .setTop(10),\n    null).getStatusCode();\n```\n\nSearch Point Of Interest Category\n```java com.azure.maps.search.sync.search_nearby\nSystem.out.println(\"Search Nearby Points of Interest:\");\n\n// options\nclient.searchNearbyPointsOfInterest(\n    new SearchNearbyPointsOfInterestOptions(new GeoPosition(-74.011454, 40.706270))\n        .setCountryFilter(Arrays.asList(\"US\"))\n        .setTop(10));\n\n// response\nclient.searchNearbyPointsOfInterestWithResponse(\n    new SearchNearbyPointsOfInterestOptions(new GeoPosition(-74.011454, 40.706270))\n        .setCountryFilter(Arrays.asList(\"US\"))\n        .setTop(10),\n    null).getStatusCode();\n```\n\nGet Point Of Interest Category Tree\n```java com.azure.maps.search.sync.search_poi_category_tree\nSystem.out.println(\"Get Search POI Category Tree:\");\nclient.getPointOfInterestCategoryTree();\n```\n\nSearch Address\n```java com.azure.maps.search.sync.search_address\nSystem.out.println(\"Search Address:\");\n\n// simple\nclient.searchAddress(\n    new SearchAddressOptions(\"15127 NE 24th Street, Redmond, WA 98052\"));\n\n// options\nclient.searchAddress(\n    new SearchAddressOptions(\"1 Main Street\")\n        .setCoordinates(new GeoPosition(-74.011454, 40.706270))\n        .setRadiusInMeters(40000)\n        .setTop(5));\n\n// complete\nclient.searchAddressWithResponse(\n    new SearchAddressOptions(\"1 Main Street\")\n        .setCoordinates(new GeoPosition(-74.011454, 40.706270))\n        .setRadiusInMeters(40000)\n        .setTop(5), null).getStatusCode();\n```\n\nReverse Search Address\n```java com.azure.maps.search.sync.reverse_search_address\nSystem.out.println(\"Search Address Reverse:\");\n\n// simple\nclient.reverseSearchAddress(\n    new ReverseSearchAddressOptions(new GeoPosition(-121.89, 37.337)));\n\nclient.reverseSearchAddress(\n    new ReverseSearchAddressOptions(new GeoPosition(-121.89, 37.337)));\n\n// options\nclient.reverseSearchAddress(\n    new ReverseSearchAddressOptions(new GeoPosition(-121.89, 37.337))\n        .setIncludeSpeedLimit(true)\n        .setEntityType(GeographicEntityType.COUNTRY_SECONDARY_SUBDIVISION) // returns only city\n);\n\n// complete\nclient.reverseSearchAddressWithResponse(\n    new ReverseSearchAddressOptions(new GeoPosition(-121.89, 37.337))\n        .setIncludeSpeedLimit(true)\n        .setEntityType(GeographicEntityType.COUNTRY_SECONDARY_SUBDIVISION),\n        null).getStatusCode();\n```\n\nReverse Search Cross Street Address\n```java com.azure.maps.search.sync.search_reverse_cross_street_address\nSystem.out.println(\"Revere Search Cross Street Address:\");\n\n// options\nclient.reverseSearchCrossStreetAddress(\n    new ReverseSearchCrossStreetAddressOptions(new GeoPosition(-121.89, 37.337)));\n\n// options\nclient.reverseSearchCrossStreetAddress(\n    new ReverseSearchCrossStreetAddressOptions(new GeoPosition(-121.89, 37.337))\n        .setTop(2)\n        .setHeading(5));\n\n// complete\nclient.reverseSearchCrossStreetAddressWithResponse(\n    new ReverseSearchCrossStreetAddressOptions(new GeoPosition(-121.89, 37.337))\n        .setTop(2)\n        .setHeading(5),\n    null).getStatusCode();\n```\n\nSearch Structured Address\n```java com.azure.maps.search.sync.search_structured_address\nSystem.out.println(\"Search Address Structured:\");\n\n// simple\nclient.searchStructuredAddress(new StructuredAddress(\"US\")\n    .setPostalCode(\"98121\")\n    .setStreetNumber(\"15127\")\n    .setStreetName(\"NE 24th Street\")\n    .setMunicipality(\"Redmond\")\n    .setCountrySubdivision(\"WA\"), null);\n\n// complete\nclient.searchStructuredAddressWithResponse(new StructuredAddress(\"US\")\n    .setPostalCode(\"98121\")\n    .setStreetNumber(\"15127\")\n    .setStreetName(\"NE 24th Street\")\n    .setMunicipality(\"Redmond\")\n    .setCountrySubdivision(\"WA\"),\n    new SearchStructuredAddressOptions()\n            .setTop(2)\n            .setRadiusInMeters(1000),\n    null).getStatusCode();\n```\n\nSearch Inside Geometry\n```java com.azure.maps.search.sync.search_inside_geometry\nSystem.out.println(\"Search Inside Geometry\");\n\n// create GeoPolygon\nList<GeoPosition> coordinates = new ArrayList<>();\ncoordinates.add(new GeoPosition(-122.43576049804686, 37.7524152343544));\ncoordinates.add(new GeoPosition(-122.43301391601562, 37.70660472542312));\ncoordinates.add(new GeoPosition(-122.36434936523438, 37.712059855877314));\ncoordinates.add(new GeoPosition(-122.43576049804686, 37.7524152343544));\nGeoLinearRing ring = new GeoLinearRing(coordinates);\nGeoPolygon polygon = new GeoPolygon(ring);\n\n// simple\nclient.searchInsideGeometry(\n    new SearchInsideGeometryOptions(\"Leland Avenue\", polygon));\n\n// options\nclient.searchInsideGeometry(\n    new SearchInsideGeometryOptions(\"Leland Avenue\", polygon)\n        .setTop(5));\n\n// complete\nclient.searchInsideGeometryWithResponse(\n    new SearchInsideGeometryOptions(\"Leland Avenue\", polygon)\n        .setTop(5),\n    null).getStatusCode();\n```\n\nSearch Along Route\n```java com.azure.maps.search.sync.search_along_route\nSystem.out.println(\"Search Along Route\");\n\n// create route points\nList<GeoPosition> points = new ArrayList<>();\npoints.add(new GeoPosition(-122.143035, 47.653536));\npoints.add(new GeoPosition(-122.187164, 47.617556));\npoints.add(new GeoPosition(-122.114981, 47.570599));\npoints.add(new GeoPosition(-122.132756, 47.654009));\nGeoLineString route = new GeoLineString(points);\n\n// simple\nclient.searchAlongRoute(new SearchAlongRouteOptions(\"burger\", 1000, route));\n\n// options\nclient.searchAlongRoute(\n    new SearchAlongRouteOptions(\"burger\", 1000, route)\n        .setCategoryFilter(Arrays.asList(7315))\n        .setTop(5));\n\n// complete\nclient.searchAlongRouteWithResponse(\n    new SearchAlongRouteOptions(\"burger\", 1000, route)\n        .setCategoryFilter(Arrays.asList(7315))\n        .setTop(5),\n    null).getStatusCode();\n```\n\nBegin Fuzzy Search Batch\n```java com.azure.maps.search.sync.fuzzy_search_batch\nList<FuzzySearchOptions> fuzzyOptionsList = new ArrayList<>();\nfuzzyOptionsList.add(new FuzzySearchOptions(\"atm\", new GeoPosition(-122.128362, 47.639769))\n    .setRadiusInMeters(5000).setTop(5));\nfuzzyOptionsList.add(new FuzzySearchOptions(\"Statue of Liberty\").setTop(2));\nfuzzyOptionsList.add(new FuzzySearchOptions(\"Starbucks\", new GeoPosition(-122.128362, 47.639769))\n    .setRadiusInMeters(5000));\n\nSystem.out.println(\"Post Search Fuzzy Batch Async\");\nclient.beginFuzzySearchBatch(fuzzyOptionsList).getFinalResult();\n```\n\nBegin Search Address Batch\n```java com.azure.maps.search.sync.search_address_batch\nList<SearchAddressOptions> optionsList = new ArrayList<>();\noptionsList.add(new SearchAddressOptions(\"400 Broad St, Seattle, WA 98109\").setTop(3));\noptionsList.add(new SearchAddressOptions(\"One, Microsoft Way, Redmond, WA 98052\").setTop(3));\noptionsList.add(new SearchAddressOptions(\"350 5th Ave, New York, NY 10118\").setTop(3));\noptionsList.add(new SearchAddressOptions(\"1 Main Street\")\n    .setCountryFilter(Arrays.asList(\"GB\", \"US\", \"AU\")).setTop(3));\n\n// Search address batch async -\n// https://docs.microsoft.com/en-us/rest/api/maps/search/post-search-address-batch\n// This call posts addresses for search using the Asynchronous Batch API.\n// SyncPoller will do the polling automatically and you can retrieve the result\n// with getFinalResult()\nSystem.out.println(\"Search Address Batch Async\");\nclient.beginSearchAddressBatch(optionsList).getFinalResult();\nSyncPoller<BatchSearchResult, BatchSearchResult> poller = client.beginSearchAddressBatch(optionsList);\nBatchSearchResult result = poller.getFinalResult();\n```\n\nReverse Reverse Search Address Batch\n```java com.azure.maps.search.sync.reverse_search_address_batch\nList<ReverseSearchAddressOptions> reverseOptionsList = new ArrayList<>();\nreverseOptionsList.add(new ReverseSearchAddressOptions(new GeoPosition(2.294911, 48.858561)));\nreverseOptionsList.add(\n    new ReverseSearchAddressOptions(new GeoPosition(-122.127896, 47.639765))\n        .setRadiusInMeters(5000)\n);\nreverseOptionsList.add(new ReverseSearchAddressOptions(new GeoPosition(-122.348170, 47.621028)));\n\nSystem.out.println(\"Reverse Search Address Batch Async\");\nBatchReverseSearchResult br1 =\n    client.beginReverseSearchAddressBatch(reverseOptionsList).getFinalResult();\n```\n\n## Troubleshooting\nWhen you interact with the Azure Maps Services, errors returned by the Maps service correspond to the same HTTP status codes returned for REST API requests.\n\nFor example, if you search with an invalid coordinate, a error is returned, indicating \"Bad Request\".400\n\n## Next steps\n\nSeveral Azure Maps Search Java SDK samples are available to you in the SDK's GitHub repository.\n[Azure Maps Search Samples](https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/maps/azure-maps-search/src/samples)\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[source]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/maps/azure-maps-search/src\n[samples]:  https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/maps/azure-maps-search/src/samples\n[rest_docs]: https://docs.microsoft.com/rest/api/maps\n[product_docs]: https://docs.microsoft.com/azure/azure-maps/\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fmaps%2Fazure-maps-search%2FREADME.png)\n",
        "repo_name": "maps/azure-maps-search",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/maps/azure-maps-search",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Maps SDK Timezone client library for Java\n\nAzure Maps SDK Timezone client library for Java.\n\nThis package contains the Azure Maps SDK Timezone client library which contains Azure Maps Timezone APIs. For documentation on how to use this package, please see [Azure Maps Timezone SDK for Java](https://docs.microsoft.com/rest/api/maps/timezone).\n\n[Source code][source] | [API reference documentation][docs] | [REST API documentation][rest_docs] | [Product documentation][product_docs] | [Samples][samples]\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure:azure-maps-timezone;current})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-maps-timezone</artifactId>\n    <version>1.0.0-beta.1</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java com.azure.maps.timezone.sync.builder.ad.instantiation\n// Authenticates using Azure AD building a default credential\n// This will look for AZURE_CLIENT_ID, AZURE_TENANT_ID, and AZURE_CLIENT_SECRET env variables\nDefaultAzureCredential tokenCredential = new DefaultAzureCredentialBuilder().build();\n\n// Creates a client\nTimeZoneClient client = new TimeZoneClientBuilder()\n    .credential(tokenCredential)\n    .timezoneClientId(System.getenv(\"MAPS_CLIENT_ID\"))\n    .buildClient();\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\nGet Timezone By Id\n```java com.azure.maps.timezone.sync.get_timezone_by_id\nTimeZoneIdOptions options = new TimeZoneIdOptions(\"Asia/Bahrain\").setOptions(TimeZoneOptions.ALL);\nclient.getTimezoneById(options);\n```\n\nGet Timezone By Coordinates\n```java com.azure.maps.timezone.sync.get_timezone_by_coordinates\nGeoPosition cd = new GeoPosition(-122, 47.0);\nTimeZoneCoordinateOptions op = new TimeZoneCoordinateOptions(cd).setTimezoneOptions(TimeZoneOptions.ALL);\nclient.getTimezoneByCoordinates(op);\n```\n\nGet Iana Timezone Ids\n```java com.azure.maps.timezone.async.get_timezone_enum_iana\nasyncClient.getIanaTimezoneIds();\n```\n\nGet Iana Version\n```java com.azure.maps.timezone.sync.get_timezone_iana_version\nclient.getIanaVersion();\n```\n\nConvert Windows Timezone To Iana\nGet Iana Version\n```java com.azure.maps.timezone.sync.convert_windows_timezone_to_iana\nclient.convertWindowsTimezoneToIana(\"pacific standard time\", null);\n```\n\nGet Windows Timezone Ids\n```java com.azure.maps.timezone.async.get_timezone_enum_windows\nasyncClient.getWindowsTimezoneIds();\n```\n\n## Troubleshooting\nWhen you interact with the Azure Maps Services, errors returned by the Maps service correspond to the same HTTP status codes returned for REST API requests.\n\nFor example, if you search with an invalid coordinate, a error is returned, indicating \"Bad Request\".400\n\n## Next steps\nSeveral Azure Maps Search Java SDK samples are available to you in the SDK's GitHub repository.\n[Azure Maps Timezone Samples](https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/maps/azure-maps-timezone/src/samples)\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/master/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[source]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/maps/azure-maps-timezone/src\n[samples]:  https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/maps/azure-maps-timezone/src/samples\n[rest_docs]: https://docs.microsoft.com/rest/api/maps\n[product_docs]: https://docs.microsoft.com/azure/azure-maps/\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fmaps%2Fazure-maps-timezone%2FREADME.png)\n",
        "repo_name": "maps/azure-maps-timezone",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/maps/azure-maps-timezone",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Maps SDK Traffic client library for Java\n\nAzure Maps SDK Traffic client library for Java.\n\nThis package contains the Azure Maps SDK Traffic client library which contains Azure Maps Traffic APIs. For documentation on how to use this package, please see [Azure Maps Traffic SDK for Java](https://docs.microsoft.com/rest/api/maps/traffic).\n\n[Source code][source] | [API reference documentation][docs] | [REST API documentation][rest_docs] | [Product documentation][product_docs] | [Samples][samples]\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n\n[//]: # ({x-version-update-start;com.azure:azure-maps-traffic;current})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-maps-traffic</artifactId>\n    <version>1.0.0-beta.1</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Maps Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java com.azure.maps.traffic.sync.builder.ad.instantiation\n// Authenticates using Azure AD building a default credential\n// This will look for AZURE_CLIENT_ID, AZURE_TENANT_ID, and AZURE_CLIENT_SECRET env variables\nDefaultAzureCredential tokenCredential = new DefaultAzureCredentialBuilder().build();\n\n// Creates a builder\nTrafficClientBuilder builder = new TrafficClientBuilder();\nbuilder.credential(tokenCredential);\nbuilder.trafficClientId(System.getenv(\"MAPS_CLIENT_ID\"));\nbuilder.httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BODY_AND_HEADERS));\n\n// Builds a client\nTrafficClient client = builder.buildClient();\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\nGet Traffic Flow Segment\n```java com.azure.maps.traffic.sync.get_traffic_flow_segment\nSystem.out.println(\"Get Traffic Flow Segment:\");\n\n// options\nclient.getTrafficFlowSegment(\n    new TrafficFlowSegmentOptions()\n        .setTrafficFlowSegmentStyle(TrafficFlowSegmentStyle.ABSOLUTE).setZoom(10)\n        .setCoordinates(new GeoPosition(4.84239, 52.41072)));\n\n// complete\nclient.getTrafficFlowSegment(\n    new TrafficFlowSegmentOptions()\n        .setTrafficFlowSegmentStyle(TrafficFlowSegmentStyle.ABSOLUTE).setZoom(10)\n        .setCoordinates(new GeoPosition(4.84239, 52.41072)).setOpenLr(false)\n        .setThickness(2).setUnit(SpeedUnit.MPH));\n```\n\nGet Traffic Flow Tile\n```java com.azure.maps.traffic.sync.get_traffic_flow_tile\nSystem.out.println(\"Get Traffic Flow Tile:\");\n\n// options\nclient.getTrafficFlowTile(\n    new TrafficFlowTileOptions()\n        .setTrafficFlowTileStyle(TrafficFlowTileStyle.RELATIVE_DELAY).setFormat(TileFormat.PNG).setZoom(10)\n        .setTileIndex(new TileIndex().setX(1022).setY(680)));\n\n// complete\nclient.getTrafficFlowTile(\n    new TrafficFlowTileOptions()\n        .setTrafficFlowTileStyle(TrafficFlowTileStyle.RELATIVE_DELAY).setFormat(TileFormat.PNG).setZoom(10)\n        .setTileIndex(new TileIndex().setX(1022).setY(680)).setThickness(10));\n```\n\nGet Traffic Incident Detail\n```java com.azure.maps.traffic.sync.get_traffic_incident_detail\nSystem.out.println(\"Get Traffic Incident Detail:\");\n\n// options\nclient.getTrafficIncidentDetail(\n    new TrafficIncidentDetailOptions()\n        .setBoundingBox(new GeoBoundingBox(45, 45, 45, 45)).setBoundingZoom(11)\n        .setIncidentDetailStyle(IncidentDetailStyle.S3).setBoundingZoom(11)\n        .setTrafficmodelId(\"1335294634919\"));\n\n// complete\nclient.getTrafficIncidentDetail(\n    new TrafficIncidentDetailOptions()\n        .setBoundingBox(new GeoBoundingBox(45, 45, 45, 45)).setBoundingZoom(11)\n        .setIncidentDetailStyle(IncidentDetailStyle.S3).setBoundingZoom(11)\n        .setTrafficmodelId(\"1335294634919\").setLanguage(\"en\")\n        .setProjectionStandard(ProjectionStandard.EPSG900913).setIncidentGeometryType(IncidentGeometryType.ORIGINAL)\n        .setExpandCluster(false).setOriginalPosition(false));\n```\n\nGet Traffic Incident Tile\n```java com.azure.maps.traffic.sync.get_traffic_incident_tile\nSystem.out.println(\"Get Traffic Incident Tile:\");\n\n// options\nclient.getTrafficIncidentTile(\n    new TrafficIncidentTileOptions()\n        .setFormat(TileFormat.PNG).setTrafficIncidentTileStyle(TrafficIncidentTileStyle.S3)\n        .setZoom(10).setTileIndex(new TileIndex().setX(1022).setY(680)));\n\n// complete\nclient.getTrafficIncidentTile(\n    new TrafficIncidentTileOptions()\n        .setFormat(TileFormat.PNG).setTrafficIncidentTileStyle(TrafficIncidentTileStyle.S3)\n        .setZoom(10).setTileIndex(new TileIndex().setX(175).setY(408)));\n```\n\nGet Traffic Incident Viewport\n```java com.azure.maps.traffic.sync.get_traffic_incident_viewport\nSystem.out.println(\"Get Traffic Incident Viewport:\");\n\n// options\nclient.getTrafficIncidentViewport(\n    new TrafficIncidentViewportOptions()\n        .setBoundingBox(new GeoBoundingBox(45, 45, 45, 45))\n        .setBoundingZoom(2).setOverview(new GeoBoundingBox(45, 45, 45, 45))\n        .setOverviewZoom(2));\n\n// complete\nclient.getTrafficIncidentViewport(\n    new TrafficIncidentViewportOptions()\n        .setBoundingBox(new GeoBoundingBox(45, 45, 45, 45))\n        .setBoundingZoom(2).setOverview(new GeoBoundingBox(45, 45, 45, 45))\n        .setOverviewZoom(2).setCopyright(true));\n```\n\n## Troubleshooting\nWhen you interact with the Azure Maps Services, errors returned by the Maps service correspond to the same HTTP status codes returned for REST API requests.\n\nFor example, if you search with an invalid coordinate, a error is returned, indicating `400 - Bad Request`\n## Next steps\n\nSeveral Azure Maps Traffic Java SDK samples are available to you in the SDK's GitHub repository.\n[Azure Maps Traffic Samples](https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/maps/azure-maps-traffic/src/samples)\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[source]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/maps/azure-maps-traffic/src\n[samples]:  https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/maps/azure-maps-traffic/src/samples\n[rest_docs]: https://docs.microsoft.com/rest/api/maps\n[product_docs]: https://docs.microsoft.com/azure/azure-maps/\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fmaps%2Fazure-maps-traffic%2FREADME.png)\n",
        "repo_name": "maps/azure-maps-traffic",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/maps/azure-maps-traffic",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Maps SDK Weather client library for Java\n\nAzure Maps SDK Weather client library for Java.\n\nThis package contains the Azure Maps SDK Weather client library which contains Azure Maps Weather APIs. For documentation on how to use this package, please see [Azure Maps Weather SDK for Java](https://docs.microsoft.com/rest/api/maps/weather).\n\n[Source code][source] | [API reference documentation][docs] | [REST API documentation][rest_docs] | [Product documentation][product_docs] | [Samples][samples]\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure:azure-maps-weather;current})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-maps-weather</artifactId>\n    <version>1.0.0-beta.1</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Maps Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java com.azure.maps.weather.sync.builder.ad.instantiation\n// Authenticates using Azure AD building a default credential\n// This will look for AZURE_CLIENT_ID, AZURE_TENANT_ID, and AZURE_CLIENT_SECRET env variables\nDefaultAzureCredential tokenCredential = new DefaultAzureCredentialBuilder().build();\n\n// Creates a client\nWeatherClient client = new WeatherClientBuilder()\n    .credential(tokenCredential)\n    .weatherClientId(System.getenv(\"MAPS_CLIENT_ID\"))\n    .buildClient();\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\nGet Hourly Forecast\n```java com.azure.maps.weather.sync.get_hourly_forecast\nclient.getHourlyForecast(new GeoPosition(-122.138874, 47.632346), null, 12, null);\n```\n\nGet Minute Forecast\n```java com.azure.maps.weather.sync.get_minute_forecast\nclient.getMinuteForecast(new GeoPosition(-122.138874, 47.632346), 15, null);\n```\n\nGet Minute Forecast\n```java com.azure.maps.weather.sync.get_quarter_day_forecast\nclient.getQuarterDayForecast(new GeoPosition(-122.138874, 47.632346), null, 1, null);\n```\n\nGet Current Conditions\n```java com.azure.maps.weather.sync.get_current_conditions\nclient.getCurrentConditions(new GeoPosition(-122.125679, 47.641268),\n    null, null, null, null);\n```\n\nGet Daily Forecast\n```java com.azure.maps.weather.sync.get_daily_forecast\nclient.getDailyForecast(new GeoPosition(30.0734812, 62.6490341), null, 5, null);\n```\n\nGet Weather Along Route\n```java com.azure.maps.weather.sync.get_weather_along_route\nList<Waypoint> waypoints = Arrays.asList(\n    new Waypoint(new GeoPosition(-77.037, 38.907), 0.0),\n    new Waypoint(new GeoPosition(-77.009, 38.907), 10.0),\n    new Waypoint(new GeoPosition(-76.928, 38.926), 20.0),\n    new Waypoint(new GeoPosition(-76.852, 39.033), 30.0),\n    new Waypoint(new GeoPosition(-76.732, 39.168), 40.0),\n    new Waypoint(new GeoPosition(-76.634, 39.269), 50.0),\n    new Waypoint(new GeoPosition(-76.612, 39.287), 60.0)\n);\nclient.getWeatherAlongRoute(waypoints, \"en\");\n```\n\nGet Severe Weather Alerts\n```java com.azure.maps.weather.sync.get_severe_weather_alerts\nclient.getSevereWeatherAlerts(new GeoPosition(-85.06431274043842, 30.324604968788467), null, true);\n```\n\nGet Daily Indices\n```java com.azure.maps.weather.sync.get_daily_indices\nclient.getDailyIndices(new GeoPosition(-79.37849, 43.84745), null, null, null, 11);\n```\n\nGet Tropical Storm Active\n```java com.azure.maps.weather.sync.get_tropical_storm_active\nclient.getTropicalStormActive();\n```\n\nGet Tropical Storm Search\n```java com.azure.maps.weather.sync.get_tropical_storm_search\nActiveStormResult result = client.getTropicalStormActive();\nif (result.getActiveStorms().size() > 0) {\n    ActiveStorm storm = result.getActiveStorms().get(0);\n    client.searchTropicalStorm(storm.getYear(), storm.getBasinId(), storm.getGovId());\n}\n```\n\nGet Tropical Storm Forecast\n```java com.azure.maps.weather.sync.get_tropical_storm_forecast\nActiveStormResult result = client.getTropicalStormActive();\nif (result.getActiveStorms().size() > 0) {\n    ActiveStorm storm = result.getActiveStorms().get(0);\n    TropicalStormForecastOptions forecastOptions = new TropicalStormForecastOptions(storm.getYear(),\n        storm.getBasinId(), storm.getGovId())\n        .setIncludeWindowGeometry(true);\n    client.getTropicalStormForecast(forecastOptions);\n}\n```\n\nGet Tropical Storm Locations\n```java com.azure.maps.weather.sync.get_tropical_storm_locations\nActiveStormResult result = client.getTropicalStormActive();\nif (result.getActiveStorms().size() > 0) {\n    ActiveStorm storm = result.getActiveStorms().get(0);\n    TropicalStormLocationOptions locationOptions = new TropicalStormLocationOptions(storm.getYear(),\n        storm.getBasinId(), storm.getGovId());\n    client.getTropicalStormLocations(locationOptions);\n}\n```\n\nGet Current Air Quality\n```java com.azure.maps.weather.sync.get_current_air_quality\nclient.getCurrentAirQuality(\n    new GeoPosition(-122.138874, 47.632346), \"es\", false);\n```\n\nGet Air Quality Daily Forecasts\n```java com.azure.maps.weather.sync.get_air_quality_daily_forecasts\nclient.getAirQualityDailyForecasts(\n    new GeoPosition(-122.138874, 47.632346), \"en\", DailyDuration.TWO_DAYS);\n```\n\nGet Air Quality Hourly Forecasts\n```java com.azure.maps.weather.sync.get_air_quality_daily_forecasts\nclient.getAirQualityDailyForecasts(\n    new GeoPosition(-122.138874, 47.632346), \"en\", DailyDuration.TWO_DAYS);\n```\n\nGet Daily Historical Actuals\n```java com.azure.maps.weather.sync.get_daily_historical_actuals\nLocalDate before = LocalDate.now().minusDays(30);\nLocalDate today = LocalDate.now();\nclient.getDailyHistoricalActuals(new GeoPosition(30.0734812, 62.6490341), before, today, null);\n```\n\nGet Daily Historical Records\n```java com.azure.maps.weather.sync.get_daily_historical_records\nLocalDate before = LocalDate.now().minusDays(30);\nLocalDate today = LocalDate.now();\nclient.getDailyHistoricalActuals(new GeoPosition(30.0734812, 62.6490341), before, today, null);\n```\n\nGet Daily Historical Normals\n```java com.azure.maps.weather.sync.get_daily_historical_normals\nLocalDate before = LocalDate.now().minusDays(30);\nLocalDate today = LocalDate.now();\nclient.getDailyHistoricalNormals(new GeoPosition(30.0734812, 62.6490341), before, today, null);\n```\n\n## Troubleshooting\nWhen you interact with the Azure Maps Services, errors returned by the Maps service correspond to the same HTTP status codes returned for REST API requests.\n\nFor example, if you search with an invalid coordinate, a error is returned, indicating \"Bad Request\".400\n\n## Next steps\n\nSeveral Azure Maps Weather Java SDK samples are available to you in the SDK's GitHub repository.\n[Azure Maps Weather Samples](https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/maps/azure-maps-weather/src/samples)\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[source]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/maps/azure-maps-weather/src\n[samples]:  https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/maps/azure-maps-weather/src/samples\n[rest_docs]: https://docs.microsoft.com/rest/api/maps\n[product_docs]: https://docs.microsoft.com/azure/azure-maps/\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fmaps%2Fazure-maps-weather%2FREADME.png)\n",
        "repo_name": "maps/azure-maps-weather",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/maps/azure-maps-weather",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager AzureMaps client library for Java\n\nAzure Resource Manager AzureMaps client library for Java.\n\nThis package contains Microsoft Azure SDK for AzureMaps Management SDK. Azure Maps. Package tag package-2021-02. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-maps;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-maps</artifactId>\n    <version>1.0.0-beta.2</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nAzureMapsManager manager = AzureMapsManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/maps/azure-resourcemanager-maps/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "maps/azure-resourcemanager-maps",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/maps/azure-resourcemanager-maps",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager MariaDB client library for Java\n\nAzure Resource Manager MariaDB client library for Java.\n\nThis package contains Microsoft Azure SDK for MariaDB Management SDK. The Microsoft Azure management API provides create, read, update, and delete functionality for Azure MariaDB resources including servers, databases, firewall rules, VNET rules, log files and configurations with new business model. Package tag package-2020-01-01. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-mariadb;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-mariadb</artifactId>\n    <version>1.0.0-beta.2</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nMariaDBManager manager = MariaDBManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/mariadb/azure-resourcemanager-mariadb/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "mariadb/azure-resourcemanager-mariadb",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/mariadb/azure-resourcemanager-mariadb",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager MarketplaceOrdering client library for Java\n\nAzure Resource Manager MarketplaceOrdering client library for Java.\n\nThis package contains Microsoft Azure SDK for MarketplaceOrdering Management SDK. REST API for MarketplaceOrdering Agreements. Package tag package-2021-01-01. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-marketplaceordering;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-marketplaceordering</artifactId>\n    <version>1.0.0-beta.2</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nMarketplaceOrderingManager manager = MarketplaceOrderingManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/marketplaceordering/azure-resourcemanager-marketplaceordering/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n",
        "repo_name": "marketplaceordering/azure-resourcemanager-marketplaceordering",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/marketplaceordering/azure-resourcemanager-marketplaceordering",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager MediaServices client library for Java\n\nAzure Resource Manager MediaServices client library for Java.\n\nThis package contains Microsoft Azure SDK for MediaServices Management SDK. This Swagger was generated by the API Framework. Package tag package-account-2023-01. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-mediaservices;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-mediaservices</artifactId>\n    <version>2.4.0-beta.1</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nMediaServicesManager manager = MediaServicesManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n```java\n// storage account\nStorageAccount storageAccount = storageManager.storageAccounts().define(STORAGE_ACCOUNT)\n    .withRegion(REGION)\n    .withExistingResourceGroup(resourceGroup)\n    .create();\n\n// media service account\nMediaService account = manager.mediaservices().define(ACCOUNT)\n    .withRegion(Region.US_WEST3)\n    .withExistingResourceGroup(resourceGroup)\n    .withStorageAccounts(Collections.singletonList(\n        new com.azure.resourcemanager.mediaservices.models.StorageAccount()\n            .withId(storageAccount.id())\n            .withType(StorageAccountType.PRIMARY)))\n    .create();\n\n// transform\nTransform transform = manager.transforms()\n    .define(\"transform1\")\n    .withExistingMediaService(resourceGroup, ACCOUNT)\n    .withOutputs(Collections.singletonList(new TransformOutput()\n        .withPreset(new BuiltInStandardEncoderPreset()\n            .withPresetName(EncoderNamedPreset.CONTENT_AWARE_ENCODING))))\n    .create();\n\n// output asset\nAsset asset = manager.assets()\n    .define(\"output1\")\n    .withExistingMediaService(resourceGroup, ACCOUNT)\n    .create();\n\n// input uri\nString jobHttpBaseUri = \"https://nimbuscdn-nimbuspm.streaming.mediaservices.windows.net/2b533311-b215-4409-80af-529c3e853622/\";\nString jobFile = \"Ignite-short.mp4\";\n\n// job\nJob job = manager.jobs().define(\"job1\")\n    .withExistingTransform(resourceGroup, ACCOUNT, \"transform1\")\n    .withInput(new JobInputHttp()\n        .withFiles(Collections.singletonList(jobFile))\n        .withBaseUri(jobHttpBaseUri)\n        .withLabel(\"input1\"))\n    .withOutputs(Collections.singletonList(new JobOutputAsset().withAssetName(\"output1\")))\n    .create();\n\n// wait for job completion\nJobState jobState = job.state();\nwhile (!(jobState == JobState.CANCELED || jobState == JobState.ERROR || jobState == JobState.FINISHED)) {\n    sleepIfRunningAgainstService(10 * 1000);    // wait 10 seconds\n    jobState = job.refresh().state();\n}\n\n// refresh output asset after job finished\nasset.refresh();\n```\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/mediaservices/azure-resourcemanager-mediaservices/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "mediaservices/azure-resourcemanager-mediaservices",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/mediaservices/azure-resourcemanager-mediaservices",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure MetricAdvisor Performance test client library for Java\n\nRepresents Performance tests for Azure MetricAdvisor SDK for Java.\n\n## Getting started\n\n### Prerequisites\n\n- Java Development Kit [JDK][jdk_link] with version 8 or above\n- [Azure Subscription][azure_subscription]\n- [Cognitive Services or Metrics Advisor account][metrics_advisor_account] to use this package.\n\n#### Setup for test resources\n\nYou will need the following environment variables for running the tests to access the live resources:\n\n```\nMETRICS_ADVISOR_ENDPOINT=<metric advisor service endpoint>\nMETRICS_ADVISOR_SUBSCRIPTION_KEY=<metric advisor subscription Key>\nMETRICS_ADVISOR_API_KEY=<metric advisor api Key>\nMETRICS_ADVISOR_ALERT_CONFIG_ID=<id of a metric advisor alert configuration>\nMETRICS_ADVISOR_ALERT_ID=<id of a metric advisor alert>\nMETRICS_ADVISOR_DETECTION_CONFIG_ID=<id of a metric advisor detection configurtion>\nMETRICS_ADVISOR_INCIDENT_ID=<id of a metric advisor incident>\n```\n\nThe following environment variable limits the number of items in list APIs; the default value is 100.\n\n```\nMETRICS_ADVISOR_MAX_LIST_ELEMENTS=<max-list-elements>\n```\n\n### Adding the package to your product\n[//]: # ({x-version-update-start;com.azure:azure-ai-metricsadvisor;current})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-ai-metricsadvisor</artifactId>\n    <version>1.1.11</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n## Key concepts\n\n## Examples\n### Executing the performance test\n1. Compile the performance project into a standalone jar using the command from the root of the perf project folder\n   ```java\n   mvn clean package\n\n2. Execute the corresponding perf test in the project using the command.\n   ```java\n   java -jar <path-to-packaged-jar-with-dependencies-from-step-1> <options-for-the-test>\n\n### Common perf test command line options for Metrics Advisor\n- `--duration` - Number of seconds to run the main test for. Default is 10.\n- `--iterations` - Number of iterations of main test loop.\n- `--parallel` - Number of operations to execute in parallel,\n- `--warmup` - Duration of test warmup time in seconds before the test attributes are calculated.\n\n### Example\n\nThe tests can be executed as below\n\n```java\n\njava -jar target/azure-ai-metricsadvisor-perf-1.0.0-beta.1-jar-with-dependencies.jar anomalieslist --warmup 1 --iterations 1 --parallel 5 --duration 30\n\njava -jar target/azure-ai-metricsadvisor-perf-1.0.0-beta.1-jar-with-dependencies.jar incidentslist --warmup 1 --iterations 1 --parallel 5 --duration 30\n\njava -jar target/azure-ai-metricsadvisor-perf-1.0.0-beta.1-jar-with-dependencies.jar rootcauselist --warmup 1 --iterations 1 --parallel 5 --duration 30\n\n```\n\nUse [PerfStressOptions](https://github.com/Azure/azure-sdk-for-java/blob/main/common/perf-test-core/src/main/java/com/azure/perf/test/core/PerfStressOptions.java)\nfor the other command line options that could be used.\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[azure_subscription]: https://azure.microsoft.com/free\n[jdk_link]: https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable\n[metrics_advisor_account]: https://ms.portal.azure.com/#create/Microsoft.CognitiveServicesMetricsAdvisor\n",
        "repo_name": "metricsadvisor/azure-ai-metricsadvisor-perf",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/metricsadvisor/azure-ai-metricsadvisor-perf",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Metrics Advisor client library for Java\nAzure Metrics Advisor is a new Cognitive  Service that uses time series based decision AI to identify and assist\ntroubleshooting the incidents of online services, and monitor the business health by automating the slice and dice\nof business dataFeedMetrics.\n\n[Source code][source_code] | [Package (Maven)][mvn_package] | [API reference documentation][api_reference_doc] | [Product Documentation][product_documentation] | [Samples][samples]\n\n## Getting started\n\n### Prerequisites\n- [Java Development Kit (JDK)][jdk_link] version 8 or later\n- [Azure Subscription][azure_subscription]\n- [Cognitive Services or Metrics Advisor account][metrics_advisor_account] to use this package.\n\n### Include the package\n\n#### Include the BOM file\n\nPlease include the azure-sdk-bom to your project to take dependency on the General Availability (GA) version of the library. In the following snippet, replace the {bom_version_to_target} placeholder with the version number.\nTo learn more about the BOM, see the [AZURE SDK BOM README](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/boms/azure-sdk-bom/README.md).\n\n```xml\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>com.azure</groupId>\n            <artifactId>azure-sdk-bom</artifactId>\n            <version>{bom_version_to_target}</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n```\nand then include the direct dependency in the dependencies section without the version tag as shown below.\n\n```xml\n<dependencies>\n    <dependency>\n        <groupId>com.azure</groupId>\n        <artifactId>azure-ai-metricsadvisor</artifactId>\n    </dependency>\n</dependencies>\n```\n\n#### Include direct dependency\nIf you want to take dependency on a particular version of the library that is not present in the BOM,\nadd the direct dependency to your project as follows.\n**Note:** This version targets Azure Metrics Advisor service API version v1.0.\n\n[//]: # ({x-version-update-start;com.azure:azure-ai-metricsadvisor;current})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-ai-metricsadvisor</artifactId>\n    <version>1.1.14</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n#### Create a Metrics Advisor resource\n\n### Authenticate the client\nIn order to interact with the Metrics Advisor service, you will need to create an instance of the Metrics Advisor client.\nBoth the asynchronous and synchronous clients can be created by using `MetricsAdvisorClientBuilder`. Invoking `buildClient()`\nwill create the synchronous client, while invoking `buildAsyncClient` will create its asynchronous counterpart.\n\n#### Looking up the endpoint\nYou can find the **endpoint** for your Metric Advisor resource in the [Azure Portal][azure_portal],\nor [Azure CLI][azure_cli_endpoint].\n```bash\n# Get the endpoint for the resource\naz cognitiveservices account show --name \"resource-name\" --resource-group \"resource-group-name\" --query \"endpoint\"\n```\n\n#### Create a MetricsAdvisor client using MetricsAdvisorKeyCredential\nYou will need two keys to authenticate the client:\n\n- The subscription key to your Metrics Advisor resource. You can find this in the Keys and Endpoint section of your resource in the Azure portal.\n- The API key for your Metrics Advisor instance. You can find this on the web portal for Metrics Advisor, in API keys on the left navigation menu.\n\nOnce you have the two keys and endpoint, you can use the `MetricsAdvisorKeyCredential` class to authenticate the clients as follows:\n\n#### Create a Metrics Advisor client using MetricsAdvisorKeyCredential\n```java readme-sample-createMetricsAdvisorClient\nMetricsAdvisorKeyCredential credential = new MetricsAdvisorKeyCredential(\"subscription_key\", \"api_key\");\nMetricsAdvisorClient metricsAdvisorClient = new MetricsAdvisorClientBuilder()\n    .endpoint(\"{endpoint}\")\n    .credential(credential)\n    .buildClient();\n```\n\n#### Create a Metrics Administration client using MetricsAdvisorKeyCredential\n```java readme-sample-createMetricsAdvisorAdministrationClient\nMetricsAdvisorKeyCredential credential = new MetricsAdvisorKeyCredential(\"subscription_key\", \"api_key\");\nMetricsAdvisorAdministrationClient metricsAdvisorAdminClient =\n    new MetricsAdvisorAdministrationClientBuilder()\n        .endpoint(\"{endpoint}\")\n        .credential(credential)\n        .buildClient();\n```\n\n#### Create a MetricsAdvisor client using Azure Service Directory\nAzure SDK for Java supports an Azure Identity package, making it easy to get credentials from Microsoft identity\nplatform.\n\nAuthentication with AAD requires some initial setup:\n* Add the Azure Identity package\n\n[//]: # ({x-version-update-start;com.azure:azure-identity;dependency})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-identity</artifactId>\n    <version>1.9.0</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n* [Register a new Azure Active Directory application][register_AAD_application]\n* [Grant access][grant_access] to Metrics Advisor by assigning the `\"Cognitive Services User\"` role to your service principal.\n\nAfter the setup, you can choose which type of [credential][azure_identity_credential_type] from azure.identity to use.\nAs an example, [DefaultAzureCredential][wiki_identity] can be used to authenticate the client:\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables:\nAZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET.\n\nAuthorization is easiest using [DefaultAzureCredential][wiki_identity]. It finds the best credential to use in its\nrunning environment. For more information about using Azure Active Directory authorization with Metrics Advisor, please\nrefer to [the associated documentation][aad_authorization].\n#### Create a Metrics Advisor client using AAD authentication\n```java readme-sample-createMetricsAdvisorClientWithAAD\nTokenCredential credential = new DefaultAzureCredentialBuilder().build();\nMetricsAdvisorClient metricsAdvisorClient = new MetricsAdvisorClientBuilder()\n    .endpoint(\"{endpoint}\")\n    .credential(credential)\n    .buildClient();\n```\n\n#### Create a Metrics Administration client using AAD authentication\n```java readme-sample-createMetricsAdvisorAdministrationClientWithAAD\nTokenCredential credential = new DefaultAzureCredentialBuilder().build();\nMetricsAdvisorAdministrationClient metricsAdvisorAdminClient =\n    new MetricsAdvisorAdministrationClientBuilder()\n        .endpoint(\"{endpoint}\")\n        .credential(credential)\n        .buildClient();\n```\n\n## Key concepts\n### MetricsAdvisorClient\n`MetricsAdvisorClient` helps with:\n\n- Diagnose anomalies and incidents and help with root cause analysis of incidents.\n- Retrieve original time series data and time series data enriched by the service.\n- Send real time alerts through multiple notification hooks.\n- Adjust anomaly/incident detection using feedback to tune your model.\n\n### MetricsAdvisorAdministrationClient\n`MetricsAdvisorAdministrationClient` allows you to\n\n- Manage data feeds\n- List available metrics and their detection configurations\n- Fine tune anomaly detection configurations\n- Configure anomaly alerting configurations\n- Manage notification hooks\n\n### Data feed\nA data feed is what Metrics Advisor ingests from the user-specified data source such as Cosmos structure stream, SQL query result, and so on.\nIt contains rows of timestamps, zero or more dimensions, one or more Metrics. Therefore, multiple metrics could share the same data source and even the same data feed.\n\n### Data Feed Metric\nA metric is a quantifiable measure that is used to track and assess the status of a specific business process. It can be a combination of multiple time series values divided by dimensions, for example user count for a web vertical and en-us market.\n\n### Data Feed Dimension\nA dimension is one or more categorical values of the provided data feed. The combination of those values identifies a particular univariate time series, for example: country, language, tenant, and so on.\n\n### Metric series\nMetric series is a series of data points indexed (or listed or graphed) in time order. Most commonly, a time series is a sequence taken at successive equally spaced points in time. Therefore, it is a sequence of discrete-time data.\n\n### Anomaly Detection Configuration\nAn anomaly detection configuration is a configuration supplied for a time series to identify if the data point is detected as an Anomaly. \nA metric can apply one or more detecting configurations. While a default detection configuration is automatically applied to each metric (named \"Default\"),\nwe can tune the detection modes used on our data by creating a customized anomaly detection configuration.\n\n### Anomaly Incident\nIncidents are generated for series when it has an anomaly depending on the applied Anomaly detection configurations.\nMetrics Advisor service groups series of anomalies within a metric into an incident.\n\n### Anomaly Alert\nAnomaly Alerts can be configured to be triggered when certain anomalies are met. You can set multiple alerts with different settings. For example, you could create an anomalyAlert for anomalies with lower business impact, and another for more important alerts.\n\n### Notification Hook\nA notification hook is the entry point that allows the users to subscribe to real-time alerts. These alerts are sent over the internet, using a Hook.\n\n## Examples\n\n* [Add a data feed from a sample or data source](#add-a-data-feed-from-a-sample-or-data-source \"Add a data feed from a sample or data source\")\n* [Check ingestion status](#check-ingestion-status \"Check ingestion status\")\n* [Configure anomaly detection configuration](#configure-anomaly-detection-configuration \"Configure anomaly detection configuration\")\n* [Add hooks for receiving anomaly alerts](#add-hooks-for-receiving-anomaly-alerts \"Add hooks for receiving anomaly alerts\")\n* [Configure an anomaly alert configuration](#configure-an-anomaly-alert-configuration \"Configure an anomaly alert configuration\")\n* [Query anomaly detection results](#query-anomaly-detection-results \"Query anomaly detection results\")\n\n### Add a data feed from a sample or data source\nThis example ingests the user specified `SQLServerDataFeedSource` data feed source data to the service.\n```java readme-sample-createDataFeed\nDataFeed dataFeed = new DataFeed()\n    .setName(\"dataFeedName\")\n    .setSource(new MySqlDataFeedSource(\"conn-string\", \"query\"))\n    .setGranularity(new DataFeedGranularity().setGranularityType(DataFeedGranularityType.DAILY))\n    .setSchema(new DataFeedSchema(\n        Arrays.asList(\n            new DataFeedMetric(\"cost\"),\n            new DataFeedMetric(\"revenue\")\n        )).setDimensions(\n        Arrays.asList(\n            new DataFeedDimension(\"city\"),\n            new DataFeedDimension(\"category\")\n        ))\n    )\n    .setIngestionSettings(new DataFeedIngestionSettings(OffsetDateTime.parse(\"2020-01-01T00:00:00Z\")))\n    .setOptions(new DataFeedOptions()\n        .setDescription(\"data feed description\")\n        .setRollupSettings(new DataFeedRollupSettings()\n            .setRollupType(DataFeedRollupType.AUTO_ROLLUP)));\nfinal DataFeed createdSqlDataFeed = metricsAdvisorAdminClient.createDataFeed(dataFeed);\n\nSystem.out.printf(\"Data feed Id : %s%n\", createdSqlDataFeed.getId());\nSystem.out.printf(\"Data feed name : %s%n\", createdSqlDataFeed.getName());\nSystem.out.printf(\"Is the query user is one of data feed administrator : %s%n\", createdSqlDataFeed.isAdmin());\nSystem.out.printf(\"Data feed created time : %s%n\", createdSqlDataFeed.getCreatedTime());\nSystem.out.printf(\"Data feed granularity type : %s%n\",\n    createdSqlDataFeed.getGranularity().getGranularityType());\nSystem.out.printf(\"Data feed granularity value : %d%n\",\n    createdSqlDataFeed.getGranularity().getCustomGranularityValue());\nSystem.out.println(\"Data feed related metric Ids:\");\ndataFeed.getMetricIds().forEach((metricId, metricName)\n    -> System.out.printf(\"Metric Id : %s, Metric Name: %s%n\", metricId, metricName));\nSystem.out.printf(\"Data feed source type: %s%n\", createdSqlDataFeed.getSourceType());\n\nif (SQL_SERVER_DB == createdSqlDataFeed.getSourceType()) {\n    System.out.printf(\"Data feed sql server query: %s%n\",\n        ((SqlServerDataFeedSource) createdSqlDataFeed.getSource()).getQuery());\n}\n```\n### Check ingestion status\nThis example checks the ingestion status of a previously provided data feed source.\n```java readme-sample-checkIngestionStatus\nString dataFeedId = \"3d48er30-6e6e-4391-b78f-b00dfee1e6f5\";\n\nmetricsAdvisorAdminClient.listDataFeedIngestionStatus(\n    dataFeedId,\n    new ListDataFeedIngestionOptions(\n        OffsetDateTime.parse(\"2020-01-01T00:00:00Z\"),\n        OffsetDateTime.parse(\"2020-09-09T00:00:00Z\"))\n).forEach(dataFeedIngestionStatus -> {\n    System.out.printf(\"Message : %s%n\", dataFeedIngestionStatus.getMessage());\n    System.out.printf(\"Timestamp value : %s%n\", dataFeedIngestionStatus.getTimestamp());\n    System.out.printf(\"Status : %s%n\", dataFeedIngestionStatus.getStatus());\n});\n```\n\n### Configure anomaly detection configuration\nThis example demonstrates how a user can configure an anomaly detection configuration for their data.\n```java readme-sample-createAnomalyDetectionConfiguration\nString metricId = \"3d48er30-6e6e-4391-b78f-b00dfee1e6f5\";\n\nChangeThresholdCondition changeThresholdCondition = new ChangeThresholdCondition(\n    20,\n    10,\n    true,\n    AnomalyDetectorDirection.BOTH,\n    new SuppressCondition(1, 2));\n\nHardThresholdCondition hardThresholdCondition = new HardThresholdCondition(\n    AnomalyDetectorDirection.DOWN,\n    new SuppressCondition(1, 1))\n    .setLowerBound(5.0);\n\nSmartDetectionCondition smartDetectionCondition = new SmartDetectionCondition(\n    10.0,\n    AnomalyDetectorDirection.UP,\n    new SuppressCondition(1, 2));\n\nfinal AnomalyDetectionConfiguration anomalyDetectionConfiguration =\n    metricsAdvisorAdminClient.createDetectionConfig(\n        metricId,\n        new AnomalyDetectionConfiguration(\"My dataPoint anomaly detection configuration\")\n            .setDescription(\"anomaly detection config description\")\n            .setWholeSeriesDetectionCondition(\n                new MetricWholeSeriesDetectionCondition()\n                    .setChangeThresholdCondition(changeThresholdCondition)\n                    .setHardThresholdCondition(hardThresholdCondition)\n                    .setSmartDetectionCondition(smartDetectionCondition)\n                    .setConditionOperator(DetectionConditionOperator.OR))\n    );\n```\n\n### Add hooks for receiving anomaly alerts\nThis example creates an email hook that receives anomaly incident alerts.\n```java readme-sample-createHook\nNotificationHook emailNotificationHook = new EmailNotificationHook(\"email Hook\")\n    .setDescription(\"my email Hook\")\n    .setEmailsToAlert(Collections.singletonList(\"alertme@alertme.com\"))\n    .setExternalLink(\"https://adwiki.azurewebsites.net/articles/howto/alerts/create-hooks.html\");\n\nfinal NotificationHook notificationHook = metricsAdvisorAdminClient.createHook(emailNotificationHook);\nEmailNotificationHook createdEmailHook = (EmailNotificationHook) notificationHook;\nSystem.out.printf(\"Email Hook Id: %s%n\", createdEmailHook.getId());\nSystem.out.printf(\"Email Hook name: %s%n\", createdEmailHook.getName());\nSystem.out.printf(\"Email Hook description: %s%n\", createdEmailHook.getDescription());\nSystem.out.printf(\"Email Hook external Link: %s%n\", createdEmailHook.getExternalLink());\nSystem.out.printf(\"Email Hook emails to alert: %s%n\",\n    String.join(\",\", createdEmailHook.getEmailsToAlert()));\n```\n\n### Configure an anomaly alert configuration\nThis example demonstrates how a user can configure an alerting configuration for detected anomalies in their data.\n```java readme-sample-createAnomalyAlertConfiguration\nString detectionConfigurationId1 = \"9ol48er30-6e6e-4391-b78f-b00dfee1e6f5\";\nString detectionConfigurationId2 = \"3e58er30-6e6e-4391-b78f-b00dfee1e6f5\";\nString hookId1 = \"5f48er30-6e6e-4391-b78f-b00dfee1e6f5\";\nString hookId2 = \"8i48er30-6e6e-4391-b78f-b00dfee1e6f5\";\n\nfinal AnomalyAlertConfiguration anomalyAlertConfiguration\n    = metricsAdvisorAdminClient.createAlertConfig(\n        new AnomalyAlertConfiguration(\"My anomaly alert config name\")\n            .setDescription(\"alert config description\")\n            .setMetricAlertConfigurations(\n                Arrays.asList(\n                    new MetricAlertConfiguration(detectionConfigurationId1,\n                        MetricAnomalyAlertScope.forWholeSeries()),\n                    new MetricAlertConfiguration(detectionConfigurationId2,\n                        MetricAnomalyAlertScope.forWholeSeries())\n                        .setAlertConditions(new MetricAnomalyAlertConditions()\n                            .setSeverityRangeCondition(new SeverityCondition(AnomalySeverity.HIGH,\n                                AnomalySeverity.HIGH)))\n                ))\n            .setCrossMetricsOperator(MetricAlertConfigurationsOperator.AND)\n            .setHookIdsToAlert(Arrays.asList(hookId1, hookId2)));\n```\n### Query anomaly detection results\nThis example demonstrates how a user can query alerts triggered for an anomaly detection configuration and get anomalies for that anomalyAlert.\n```java readme-sample-listAnomaliesForAlert\nString alertConfigurationId = \"9ol48er30-6e6e-4391-b78f-b00dfee1e6f5\";\nfinal OffsetDateTime startTime = OffsetDateTime.parse(\"2020-01-01T00:00:00Z\");\nfinal OffsetDateTime endTime = OffsetDateTime.parse(\"2020-09-09T00:00:00Z\");\nmetricsAdvisorClient.listAlerts(\n    alertConfigurationId,\n        startTime, endTime)\n    .forEach(alert -> {\n        System.out.printf(\"AnomalyAlert Id: %s%n\", alert.getId());\n        System.out.printf(\"AnomalyAlert created on: %s%n\", alert.getCreatedTime());\n\n        // List anomalies for returned alerts\n        metricsAdvisorClient.listAnomaliesForAlert(\n            alertConfigurationId,\n            alert.getId())\n            .forEach(anomaly -> {\n                System.out.printf(\"DataPoint Anomaly was created on: %s%n\", anomaly.getCreatedTime());\n                System.out.printf(\"DataPoint Anomaly severity: %s%n\", anomaly.getSeverity().toString());\n                System.out.printf(\"DataPoint Anomaly status: %s%n\", anomaly.getStatus());\n                System.out.printf(\"DataPoint Anomaly related series key: %s%n\", anomaly.getSeriesKey().asMap());\n            });\n    });\n```\n\n## Troubleshooting\n### General\nMetrics Advisor clients raises `HttpResponseException` [exceptions][http_response_exception]. For example, if you try\nto provide a non existing feedback Id an `HttpResponseException` would be raised with an error indicating the failure cause.\nIn the following code snippet, the error is handled\ngracefully by catching the exception and display the additional information about the error.\n```java readme-sample-handlingException\ntry {\n    metricsAdvisorClient.getFeedback(\"non_existing_feedback_id\");\n} catch (HttpResponseException e) {\n    System.out.println(e.getMessage());\n}\n```\n\n### Enable client logging\nAzure SDKs for Java offer a consistent logging story to help aid in troubleshooting application errors and expedite\ntheir resolution. The logs produced will capture the flow of an application before reaching the terminal state to help\nlocate the root issue. View the [logging][logging] wiki for guidance about enabling logging.\n\n### Default HTTP Client\nAll client libraries by default use the Netty HTTP client. Adding the above dependency will automatically configure\nthe client library to use the Netty HTTP client. Configuring or changing the HTTP client is detailed in the\n[HTTP clients wiki][http_clients_wiki].\n\n## Next steps\nFor more details see the [samples README][samples_readme].\n\n### Async APIs\nAll the examples shown so far have been using synchronous APIs, but we provide full support for async APIs as well.\nYou'll need to use `MetricsAdvisorAsyncClient`\n```java readme-sample-asyncClient\nMetricsAdvisorKeyCredential credential = new MetricsAdvisorKeyCredential(\"subscription_key\", \"api_key\");\nMetricsAdvisorAsyncClient metricsAdvisorAsyncClient = new MetricsAdvisorClientBuilder()\n    .credential(credential)\n    .endpoint(\"{endpoint}\")\n    .buildAsyncClient();\n```\n\n### Additional documentation\n\nFor more extensive documentation on Azure Cognitive Services Metrics Advisor, see the [Metrics Advisor documentation][metrics_advisor_doc].\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a [Contributor License Agreement (CLA)][cla] declaring that you have the right to, and actually do, grant us the rights to use your contribution.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n[aad_authorization]: https://docs.microsoft.com/azure/cognitive-services/authentication#authenticate-with-azure-active-directory\n[api_reference_doc]: https://docs.microsoft.com/java/api/com.azure.ai.metricsadvisor?view=azure-java-preview\n[azure_identity_credential_type]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/identity/azure-identity#credentials\n[azure_cli]: https://docs.microsoft.com/azure/cognitive-services/cognitive-services-apis-create-account-cli?tabs=windows\n[azure_cli_endpoint]: https://docs.microsoft.com/cli/azure/cognitiveservices/account?view=azure-cli-latest#az-cognitiveservices-account-show\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/identity/azure-identity#credentials\n[azure_portal]: https://ms.portal.azure.com\n[azure_subscription]: https://azure.microsoft.com/free\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n[create_new_resource]: https://docs.microsoft.com/azure/cognitive-services/cognitive-services-apis-create-account?tabs=multiservice%2Cwindows#create-a-new-azure-cognitive-services-resource\n[grant_access]: https://docs.microsoft.com/azure/cognitive-services/authentication#assign-a-role-to-a-service-principal\n[http_clients_wiki]: https://github.com/Azure/azure-sdk-for-java/wiki/HTTP-clients\n[jdk_link]: https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable\n[key]: https://docs.microsoft.com/azure/cognitive-services/cognitive-services-apis-create-account?tabs=multiservice%2Cwindows#get-the-keys-for-your-resource\n[logging]: https://github.com/Azure/azure-sdk-for-java/wiki/Logging-with-Azure-SDK\n[metrics_advisor_account]: https://ms.portal.azure.com/#create/Microsoft.CognitiveServicesMetricsAdvisor\n[metrics_advisor_doc]: https://docs.microsoft.com/azure/cognitive-services/Metrics-advisor/glossary\n[mvn_package]: https://search.maven.org/search?q=a:azure-ai-metricsadvisor\n[product_documentation]: https://docs.microsoft.com/azure/cognitive-services/metrics-advisor/overview\n[register_AAD_application]: https://docs.microsoft.com/azure/cognitive-services/authentication#assign-a-role-to-a-service-principal\n[source_code]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/metricsadvisor/azure-ai-metricsadvisor/src\n[samples]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/metricsadvisor/azure-ai-metricsadvisor/src/samples\n[samples_readme]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/metricsadvisor/azure-ai-metricsadvisor/src/samples/README.md\n[wiki_identity]: https://github.com/Azure/azure-sdk-for-java/wiki/Identity-and-Authentication\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%metricsadvisor%2Fazure-ai-metricsadvisor%2FREADME.png)\n",
        "repo_name": "metricsadvisor/azure-ai-metricsadvisor",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/metricsadvisor/azure-ai-metricsadvisor",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Mixed Reality client library for Java\n\nMixed Reality services, like Azure Spatial Anchors, Azure Remote Rendering, and others, use the Mixed Reality security\ntoken service (STS) for authentication. This package supports exchanging Mixed Reality account credentials for an access\ntoken from the STS that can be used to access Mixed Reality services.\n\n[Source code][source] | [Package (Maven)][package] | [API reference documentation][api_documentation]\n| [Product documentation][product_docs]\n\n![Mixed Reality service authentication diagram](https://docs.microsoft.com/azure/spatial-anchors/concepts/media/spatial-anchors-authentication-overview.png)\n\n## Getting started\n\n### Prerequisites\n\n- You must have an [Azure subscription](https://azure.microsoft.com/free/).\n- You must have an account with an [Azure Mixed Reality service](https://azure.microsoft.com/topic/mixed-reality/):\n  - [Azure Remote Rendering](https://docs.microsoft.com/azure/remote-rendering/)\n  - [Azure Spatial Anchors](https://docs.microsoft.com/azure/spatial-anchors/)\n- [Java Development Kit (JDK)](https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable) version 8 or above.\n- [Apache Maven](https://maven.apache.org/download.cgi).\n- Familiarity with the authentication and credential concepts from [Azure.Identity](https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/identity/azure-identity).\n\n### Include the package\n\n#### Include the BOM file\n\nPlease include the azure-sdk-bom to your project to take dependency on the General Availability (GA) version of the library. In the following snippet, replace the {bom_version_to_target} placeholder with the version number.\nTo learn more about the BOM, see the [AZURE SDK BOM README](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/boms/azure-sdk-bom/README.md).\n\n```xml\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>com.azure</groupId>\n            <artifactId>azure-sdk-bom</artifactId>\n            <version>{bom_version_to_target}</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n```\nand then include the direct dependency in the dependencies section without the version tag as shown below.\n\n```xml\n<dependencies>\n    <dependency>\n        <groupId>com.azure</groupId>\n        <artifactId>azure-mixedreality-authentication</artifactId>\n    </dependency>\n</dependencies>\n```\n\n#### Include direct dependency\nIf you want to take dependency on a particular version of the library that is not present in the BOM,\nadd the direct dependency to your project as follows.\n\n[//]: # ({x-version-update-start;com.azure:azure-mixedreality-authentication;current})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-mixedreality-authentication</artifactId>\n    <version>1.2.13</version>\n</dependency>\n```\n\n### Authenticate the client\n\nMixed Reality services support a few different forms of authentication:\n\n- Account Key authentication\n  - Account keys enable you to get started quickly with using Mixed Reality services. But before you deploy your application\n    to production, we recommend that you update your app to use Azure AD authentication.\n- Azure Active Directory (AD) token authentication\n  - If you're building an enterprise application and your company is using Azure AD as its identity system, you can use\n    user-based Azure AD authentication in your app. You then grant access to your Mixed Reality accounts by using your\n    existing Azure AD security groups. You can also grant access directly to users in your organization.\n  - Otherwise, we recommend that you obtain Azure AD tokens from a web service that supports your app. We recommend this\n    method for production applications because it allows you to avoid embedding the credentials for access to a Mixed\n    Reality service in your client application.\n\nSee [here](https://docs.microsoft.com/azure/spatial-anchors/concepts/authentication) for detailed instructions and information.\n\n## Key concepts\n\n### MixedRealityStsClient\n\nThe `MixedRealityStsClient` is the client library used to access the Mixed Reality STS to get an access token.\n\nTokens obtained from the Mixed Reality STS have a lifetime of **24 hours**.\n\n## Examples\n\n### Create the client\n\nFor a synchronous client:\n\n```java\nAzureKeyCredential keyCredential = new AzureKeyCredential(accountKey);\nMixedRealityStsClient client = new MixedRealityStsClientBuilder()\n    .accountDomain(accountDomain)\n    .accountId(accountId)\n    .credential(keyCredential)\n    .buildClient();\n```\n\nFor an asynchronous client (note the call to `buildAsyncClient` instead of `buildClient`):\n\n```java\nAzureKeyCredential keyCredential = new AzureKeyCredential(accountKey);\nMixedRealityStsAsyncClient client = new MixedRealityStsClientBuilder()\n    .accountDomain(accountDomain)\n    .accountId(accountId)\n    .credential(keyCredential)\n    .buildAsyncClient();\n```\n\n### Retrieve an access token\n\n```java\nAzureKeyCredential keyCredential = new AzureKeyCredential(accountKey);\nMixedRealityStsClient client = new MixedRealityStsClientBuilder()\n    .accountDomain(accountDomain)\n    .accountId(accountId)\n    .credential(keyCredential)\n    .buildClient();\n\nAccessToken token = client.getToken();\n```\n\nSee the authentication examples [above](#authenticate-the-client) for more complex authentication scenarios.\n\n#### Using the access token in a Mixed Reality client library\n\nSome Mixed Reality client libraries might accept an access token in place of a credential. For example:\n\n```java\n// getMixedRealityAccessTokenFromWebService is a hypothetical method that retrieves\n// a Mixed Reality access token from a web service. The web service would use the\n// MixedRealityStsClient and credentials to obtain an access token to be returned\n// to the client.\nAccessToken accessToken = getMixedRealityAccessTokenFromWebService();\n\nSpatialAnchorsAccount account = new SpatialAnchorsAccount(accountId, accountDomain);\nSpatialAnchorsClient client = new SpatialAnchorsClient(account, accessToken);\n```\n\nNote: The `SpatialAnchorsClient` usage above is hypothetical and may not reflect the actual library. Consult the\ndocumentation for the client library you're using to determine if and how this might be supported.\n\n## Troubleshooting\n\nDescribe common errors and exceptions, how to \"unpack\" them if necessary, and include guidance for graceful handling and recovery.\n\nProvide information to help developers avoid throttling or other service-enforced errors they might encounter. For example, provide guidance and examples for using retry or connection policies in the API.\n\nIf the package or a related package supports it, include tips for logging or enabling instrumentation to help them debug their code.\n\n## Next steps\n\n### Client libraries supporting authentication with Mixed Reality Authentication\n\nLibraries supporting the Mixed Reality Authentication are coming soon.\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License\nAgreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution.\nFor details, visit [https://cla.microsoft.com](https://cla.microsoft.com).\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the\nPR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this\nonce across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact\n[opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\n<!-- LINKS -->\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n[product_docs]: https://azure.microsoft.com/topic/mixed-reality/\n[package]: https://search.maven.org/artifact/com.azure/azure-mixedreality-authentication\n[api_documentation]: https://aka.ms/java-docs\n[source]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/mixedreality/azure-mixedreality-authentication\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fmixedreality%2Fazure-mixedreality-authentication%2FREADME.png)\n",
        "repo_name": "mixedreality/azure-mixedreality-authentication",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/mixedreality/azure-mixedreality-authentication",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager MixedReality client library for Java\n\nAzure Resource Manager MixedReality client library for Java.\n\nThis package contains Microsoft Azure SDK for MixedReality Management SDK. Mixed Reality Client. Package tag package-2021-01. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-mixedreality;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-mixedreality</artifactId>\n    <version>1.0.0-beta.2</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nMixedRealityManager manager = MixedRealityManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/mixedreality/azure-resourcemanager-mixedreality/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "mixedreality/azure-resourcemanager-mixedreality",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/mixedreality/azure-resourcemanager-mixedreality",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager MobileNetwork client library for Java\n\nAzure Resource Manager MobileNetwork client library for Java.\n\nThis package contains Microsoft Azure SDK for MobileNetwork Management SDK. The resources in this API specification will be used to manage attached data network resources in mobile network attached to a particular packet core instance. Package tag package-2022-11-01. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-mobilenetwork;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-mobilenetwork</artifactId>\n    <version>1.0.0-beta.5</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nMobileNetworkManager manager = MobileNetworkManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/mobilenetwork/azure-resourcemanager-mobilenetwork/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "mobilenetwork/azure-resourcemanager-mobilenetwork",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/mobilenetwork/azure-resourcemanager-mobilenetwork",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure IoT Models Repository client library for Java\n\nThis library provides functionality for interacting with the [Azure IoT Models Repository][modelsrepository_iot_endpoint]. It also aims to provide a consistent experience working with digital twin model repositories following Azure IoT conventions.\n\n[Source code][source]\n\n## Getting started\n\nThe complete Microsoft Azure SDK can be downloaded from the [Microsoft Azure downloads][microsoft_sdk_download] page, and it ships with support for building deployment packages, integrating with tooling, rich command line tooling, and more.\n\nFor the best development experience, developers should use the official Microsoft Maven packages for libraries. Maven packages will be regularly updated with new functionality and hotfixes.\n\n### Include the Package\n\n[//]: # ({x-version-update-start;com.azure:azure-iot-modelsrepository;current})\n\n```xml\n<dependency>\n  <groupId>com.azure</groupId>\n  <artifactId>azure-iot-modelsrepository</artifactId>\n  <version>1.0.0-beta.1</version>\n</dependency>\n```\n\n[//]: # ({x-version-update-end})\n\n### Prerequisites\n\n- A models repository following [Azure IoT conventions][modelsrepository_conventions]\n  - The models repository can be located on the local filesystem or hosted on a webserver.\n  - Azure IoT hosts the global [Azure IoT Models Repository][modelsrepository_iot_endpoint] which the client will point to by default if no URI is provided.\n\n### Authenticate the Client\n\nCurrently no authentication mechanisms are supported in the client. The global endpoint is not tied to an Azure subscription and does not support auth. All models published are meant for anonymous public consumption.\n\n## Key concepts\n\nThe Azure IoT Models Repository enables builders to manage and share digital twin models. The models are [JSON-LD][json_ld_reference] documents defined using the Digital Twins Definition Language ([DTDL][dtdlv2_reference]).\n\nThe repository defines a pattern to store DTDL interfaces in a directory structure based on the Digital Twin Model Identifier (DTMI). You can locate an interface in the repository by converting the DTMI to a relative path. For example, the DTMI \"`dtmi:com:example:Thermostat;1`\" translates to `/dtmi/com/example/thermostat-1.json`.\n\n## Examples\n\nYou can familiarize yourself with the client using [samples for IoT Models Repository][modelsrepository_samples].\n\n## Troubleshooting\n\nAll events and errors that surface from the service calls will be logged with the ClientLogger.\n\n## Next steps\n\nSee implementation examples with our [code samples][modelsrepository_samples].\n\n## Contributing\n\nThis project welcomes contributions and suggestions.\nMost contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution.\nFor details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment).\nSimply follow the instructions provided by the bot.\nYou will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct].\nFor more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments.\n\n<!-- LINKS -->\n[microsoft_sdk_download]: https://azure.microsoft.com/downloads/?sdk=net\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[modelsrepository_iot_endpoint]: https://devicemodels.azure.com/\n[source]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/modelsrepository/azure-iot-modelsrepository/src\n[modelsrepository_conventions]: https://github.com/Azure/iot-plugandplay-models-tools/wiki\n[json_ld_reference]: https://json-ld.org\n[dtdlv2_reference]: https://github.com/Azure/opendigitaltwins-dtdl/blob/master/DTDL/v2/dtdlv2.md\n[modelsrepository_samples]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/modelsrepository/azure-iot-modelsrepository/src/samples\n",
        "repo_name": "modelsrepository/azure-iot-modelsrepository",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/modelsrepository/azure-iot-modelsrepository",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Monitor Ingestion Performance test client library for Java\n\nRepresents Performance tests for Azure Monitor Ingestion SDK for Java.\n\n## Getting started\n\n### Prerequisites\n\n- A [Java Development Kit (JDK)][jdk_link], version 8 or later.\n- [Azure Subscription][azure_subscription]\n\n#### Setup for test resources\n\nYou will need the following environment variables for running the tests to access the live resources:\n\n```\nAZURE_TENANT_ID=<Tenant ID of Azure subscription>\nAZURE_CLIENT_ID=<Client ID of Azure AAD application>\nAZURE_CLIENT_SECRET=<Client secret of Azure AAD application>\nAZURE_MONITOR_DCE=<Data Collection Endpoint>\nAZURE_MONITOR_DCR=<Data Collection Rule ID>\nAZURE_MONITOR_STREAM_NAME=<Data Collection Stream name>\n```\n\n## Key concepts\n\n## Examples\n### Executing the performance test\n1. Compile the performance project into a standalone jar using the command from the root of the perf project folder\n```\nmvn clean package -f sdk/monitor/azure-monitor-ingestion-perf/pom.xml\n```\n\n2. Execute the corresponding perf test in the project using the command.\n```\njava -jar <path-to-packaged-jar-with-dependencies-from-step-1> <options-for-the-test>\njava -jar sdk/monitor/azure-monitor-ingestion-perf/target/azure-monitor-ingestion-perf-1.0.0-beta.1-jar-with-dependencies.jar uploadlogs --warmup 1 --iterations 1 --parallel 50 --duration 15 --count 1000\n```\n\n### Common perf test command line options for Azure Monitor Ingestion\n- `--duration` - Number of seconds to run the main test for. Default is 10.\n- `--iterations` - Number of iterations of main test loop.\n- `--parallel` - Number of operations to execute in parallel,\n- `--warmup` - Duration of test warmup time in seconds before the test attributes are calculated.\n\nUse [PerfStressOptions](https://github.com/Azure/azure-sdk-for-java/blob/main/common/perf-test-core/src/main/java/com/azure/perf/test/core/PerfStressOptions.java)\nfor the other command line options that could be used.\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[azure_subscription]: https://azure.microsoft.com/free\n[jdk_link]: https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable\n",
        "repo_name": "monitor/azure-monitor-ingestion-perf",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/monitor/azure-monitor-ingestion-perf",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Monitor Ingestion client library for Java\n\nThe Azure Monitor Ingestion client library is used to send custom logs to [Azure Monitor][azure_monitor_overview] using \nthe [Logs Ingestion API][ingestion_overview].\n\nThis library allows you to send data from virtually any source to supported built-in tables or to custom tables \nthat you create in Log Analytics workspace. You can even extend the schema of built-in tables with custom columns.\n\n## Getting started\n\n### Prerequisites\n- A [Java Development Kit (JDK)][jdk_link], version 8 or later.\n- [Azure Subscription][azure_subscription]\n- A [Data Collection Endpoint][data_collection_endpoint]\n- A [Data Collection Rule][data_collection_rule]\n- A [Log Analytics workspace][log_analytics_workspace]\n\n### Include the package\n\n#### Include the BOM file\n\nPlease include the `azure-sdk-bom` to your project to take a dependency on the latest stable version of the library. In \nthe following snippet, replace the `{bom_version_to_target}` placeholder with the version number.\nTo learn more about the BOM, see the [AZURE SDK BOM README](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/boms/azure-sdk-bom/README.md).\n\n```xml\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>com.azure</groupId>\n            <artifactId>azure-sdk-bom</artifactId>\n            <version>{bom_version_to_target}</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n```\nand then include the direct dependency in the dependencies section without the version tag as shown below.\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-monitor-ingestion</artifactId>\n  </dependency>\n</dependencies>\n```\n\n#### Include direct dependency\n\nIf you want to take dependency on a particular version of the library that is not present in the BOM,\nadd the direct dependency to your project as follows.\n\n[//]: # ({x-version-update-start;com.azure:azure-monitor-ingestion;current})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-monitor-ingestion</artifactId>\n    <version>1.0.3</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Create the client\n\nAn authenticated client is required to upload logs to Azure Monitor. The library includes both synchronous and asynchronous forms of the clients. To authenticate, \nthe following examples use `DefaultAzureCredentialBuilder` from the [azure-identity](https://central.sonatype.com/artifact/com.azure/azure-identity/1.8.1) package.\n\n#### Authenticating using Azure Active Directory\nYou can authenticate with Azure Active Directory using the [Azure Identity library][azure_identity].\nTo use the [DefaultAzureCredential][DefaultAzureCredential] provider shown below, or other credential providers provided with the Azure SDK, please include the `azure-identity` package:\n\n[//]: # ({x-version-update-start;com.azure:azure-identity;dependency})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-identity</artifactId>\n    <version>1.9.0</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: AZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET.\n\n#### Synchronous Logs Ingestion client\n\n```java readme-sample-createLogsIngestionClient\nDefaultAzureCredential tokenCredential = new DefaultAzureCredentialBuilder().build();\n\nLogsIngestionClient client = new LogsIngestionClientBuilder()\n        .endpoint(\"<data-collection-endpoint>\")\n        .credential(tokenCredential)\n        .buildClient();\n```\n\n#### Asynchronous Logs Ingestion client\n\n```java readme-sample-createLogsIngestionAsyncClient\nDefaultAzureCredential tokenCredential = new DefaultAzureCredentialBuilder().build();\n\nLogsIngestionAsyncClient asyncClient = new LogsIngestionClientBuilder()\n        .endpoint(\"<data-collection-endpoint>\")\n        .credential(tokenCredential)\n        .buildAsyncClient();\n```\n## Key concepts\n\n### Data Collection Endpoint\n\nData Collection Endpoints (DCEs) allow you to uniquely configure ingestion settings for Azure Monitor. [This \narticle][data_collection_endpoint] provides an overview of data collection endpoints including their contents and \nstructure and how you can create and work with them.\n\n### Data Collection Rule\n\nData collection rules (DCR) define data collected by Azure Monitor and specify how and where that data should be sent or\nstored. The REST API call must specify a DCR to use. A single DCE can support multiple DCRs, so you can specify a\ndifferent DCR for different sources and target tables.\n\nThe DCR must understand the structure of the input data and the structure of the target table. If the two don't match,\nit can use a transformation to convert the source data to match the target table. You may also use the transform to\nfilter source data and perform any other calculations or conversions.\n\nFor more details, see [Data collection rules in Azure Monitor][data_collection_rule]. For information on how to retrieve \na DCR ID, see [this tutorial][data_collection_rule_tutorial].\n\n### Log Analytics Workspace Tables\n\nCustom logs can send data to any custom table that you create and to certain built-in tables in your Log Analytics \nworkspace. The target table must exist before you can send data to it. The following built-in tables are currently supported:\n\n- [CommonSecurityLog](https://learn.microsoft.com/azure/azure-monitor/reference/tables/commonsecuritylog)\n- [SecurityEvents](https://learn.microsoft.com/azure/azure-monitor/reference/tables/securityevent)\n- [Syslog](https://learn.microsoft.com/azure/azure-monitor/reference/tables/syslog)\n- [WindowsEvents](https://learn.microsoft.com/azure/azure-monitor/reference/tables/windowsevent)\n\n### Logs retrieval\nThe logs that were uploaded using this library can be queried using the \n[Azure Monitor Query](https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/monitor/azure-monitor-query#readme) \nclient library.\n\n## Examples\n\n- [Upload custom logs](#upload-custom-logs)\n- [Upload custom logs with max concurrency](#upload-custom-logs-with-max-concurrency)\n- [Upload custom logs with error handling](#upload-custom-logs-with-error-handling)\n\n### Upload custom logs\n\n```java readme-sample-uploadLogs\nDefaultAzureCredential tokenCredential = new DefaultAzureCredentialBuilder().build();\n\nLogsIngestionClient client = new LogsIngestionClientBuilder()\n        .endpoint(\"<data-collection-endpoint\")\n        .credential(tokenCredential)\n        .buildClient();\n\nList<Object> logs = getLogs();\nclient.upload(\"<data-collection-rule-id>\", \"<stream-name>\", logs);\nSystem.out.println(\"Logs uploaded successfully\");\n```\n\n### Upload custom logs with max concurrency\n\nIf the in input logs collection is too large, the client will split the input into multiple smaller requests. These \nrequests are sent serially, by default, but by configuring the max concurrency in `LogsUploadOptions`, these requests\ncan be concurrently sent to the service as shown in the example below.\n\n```java readme-sample-uploadLogsWithMaxConcurrency\nDefaultAzureCredential tokenCredential = new DefaultAzureCredentialBuilder().build();\n\nLogsIngestionClient client = new LogsIngestionClientBuilder()\n        .endpoint(\"<data-collection-endpoint\")\n        .credential(tokenCredential)\n        .buildClient();\n\nList<Object> logs = getLogs();\nLogsUploadOptions logsUploadOptions = new LogsUploadOptions()\n        .setMaxConcurrency(3);\nclient.upload(\"<data-collection-rule-id>\", \"<stream-name>\", logs, logsUploadOptions,\n        Context.NONE);\nSystem.out.println(\"Logs uploaded successfully\");\n```\n\n### Upload custom logs with error handling\n\nWhen uploading large collection of logs, the client splits the input into multiple smaller service requests. The upload \nmethod provides an option to handle individual service errors through an error handler as shown in the example below. \nThis error handler include the exception details and the list of all logs that failed to upload. If an error handler is \nnot provided, the upload method will throw an aggregate exception that includes all the service errors.\n\n```java readme-sample-uploadLogs-error-handler\nDefaultAzureCredential tokenCredential = new DefaultAzureCredentialBuilder().build();\n\nLogsIngestionClient client = new LogsIngestionClientBuilder()\n        .endpoint(\"<data-collection-endpoint\")\n        .credential(tokenCredential)\n        .buildClient();\n\nList<Object> logs = getLogs();\n\nLogsUploadOptions logsUploadOptions = new LogsUploadOptions()\n        .setLogsUploadErrorConsumer(uploadLogsError -> {\n            System.out.println(\"Error message \" + uploadLogsError.getResponseException().getMessage());\n            System.out.println(\"Total logs failed to upload = \" + uploadLogsError.getFailedLogs().size());\n\n            // throw the exception here to abort uploading remaining logs\n            // throw uploadLogsError.getResponseException();\n        });\nclient.upload(\"<data-collection-rule-id>\", \"<stream-name>\", logs, logsUploadOptions,\n        Context.NONE);\n```\n## Troubleshooting\n\nFor details on diagnosing various failure scenarios, see our [troubleshooting guide](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/monitor/azure-monitor-ingestion/TROUBLESHOOTING.md).\n\n## Next steps\nMore samples can be found [here][samples].\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License\nAgreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution.\nFor details, visit [https://cla.microsoft.com](https://cla.microsoft.com).\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the\nPR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this\nonce across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact\n[opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\n<!-- LINKS -->\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/identity/azure-identity\n[azure_monitor_overview]: https://learn.microsoft.com/azure/azure-monitor/overview\n[azure_subscription]: https://azure.microsoft.com/free\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n[data_collection_endpoint]: https://learn.microsoft.com//azure/azure-monitor/essentials/data-collection-endpoint-overview\n[data_collection_rule]: https://learn.microsoft.com/azure/azure-monitor/essentials/data-collection-rule-overview\n[data_collection_rule_tutorial]: https://learn.microsoft.com/azure/azure-monitor/logs/tutorial-logs-ingestion-portal#collect-information-from-the-dcr\n[DefaultAzureCredential]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity/README.md#defaultazurecredential\n[ingestion_overview]: https://learn.microsoft.com/azure/azure-monitor/logs/logs-ingestion-api-overview\n[jdk_link]: https://learn.microsoft.com/java/azure/jdk/?view=azure-java-stable\n[log_analytics_workspace]: https://learn.microsoft.com//azure/azure-monitor/logs/log-analytics-workspace-overview\n[logging]: https://learn.microsoft.com//azure/developer/java/sdk/logging-overview\n[samples]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/monitor/azure-monitor-ingestion/src/samples/java/com/azure/monitor/ingestion\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fmonitor%2Fazure-monitor-ingestion%2FREADME.png)\n",
        "repo_name": "monitor/azure-monitor-ingestion",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/monitor/azure-monitor-ingestion",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Monitor OpenTelemetry Exporter client library for Java\n\nThis client library provides support for exporting OpenTelemetry data to Azure Monitor. This package assumes your\n application is already instrumented with the [OpenTelemetry SDK][opentelemetry_sdk] following the [OpenTelemetry\n Specification][opentelemetry_specification].\n  \n[Source code][source_code] | [Package (Maven)][package_mvn] | [API reference documentation][api_reference_doc] | [Product Documentation][product_documentation] | [Samples][sample_readme]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK) with version 8 or above][jdk]\n- [Azure Subscription][azure_subscription]\n- [Application Insights resource][application_insights_resource]\n\nFor more information, please read [introduction to Application Insights][application_insights_intro].\n\n### Include the Package\n\n[//]: # ({x-version-update-start;com.azure:azure-monitor-opentelemetry-exporter;current})\n```xml\n<dependency>\n  <groupId>com.azure</groupId>\n  <artifactId>azure-monitor-opentelemetry-exporter</artifactId>\n  <version>1.0.0-beta.8</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Authentication\n\n#### Get the instrumentation key from the portal\n\nIn order to export telemetry data to Azure Monitor, you will need the instrumentation key to your [Application\n Insights resource][application_insights_resource]. To get your instrumentation key, go to [Azure Portal][azure_portal], \nsearch for your resource. On the overview page of your resource, you will find the instrumentation key in the top\nright corner.\n\n### Creating exporter for Azure Monitor\n```java readme-sample-createExporter\nSpanExporter azureMonitorTraceExporter = new AzureMonitorExporterBuilder()\n    .connectionString(\"{connection-string}\")\n    .buildTraceExporter();\n```\n\n#### Exporting span data\n\nThe following example shows how to export a trace data to Azure Monitor through the\n `AzureMonitorTraceExporter`\n\n##### Setup OpenTelemetry Tracer to work with Azure Monitor exporter\n```java readme-sample-setupExporter\n// Create Azure Monitor exporter and configure OpenTelemetry tracer to use this exporter\n// This should be done just once when application starts up\nSpanExporter exporter = new AzureMonitorExporterBuilder()\n    .connectionString(\"{connection-string}\")\n    .buildTraceExporter();\n\nSdkTracerProvider tracerProvider = SdkTracerProvider.builder()\n    .addSpanProcessor(SimpleSpanProcessor.create(exporter))\n    .build();\n\nOpenTelemetrySdk openTelemetrySdk = OpenTelemetrySdk.builder()\n    .setTracerProvider(tracerProvider)\n    .buildAndRegisterGlobal();\n\nTracer tracer = openTelemetrySdk.getTracer(\"Sample\");\n```\n\n##### Create spans\n\n```java readme-sample-createSpans\n// Make service calls by adding new parent spans\nConfigurationClient client = new ConfigurationClientBuilder()\n    .connectionString(\"{app-config-connection-string}\")\n    .buildClient();\n\nSpan span = tracer.spanBuilder(\"user-parent-span\").startSpan();\nfinal Scope scope = span.makeCurrent();\ntry {\n    // Thread bound (sync) calls will automatically pick up the parent span and you don't need to pass it explicitly.\n    client.setConfigurationSetting(\"hello\", \"text\", \"World\");\n} finally {\n    span.end();\n    scope.close();\n}\n```\n\n## Key concepts\n\nSome key concepts for the Azure Monitor exporter include:\n\n* [OpenTelemetry][opentelemetry_spec]: OpenTelemetry is a set of libraries used to collect and export telemetry data\n (metrics, logs, and traces) for analysis in order to understand your software's performance and behavior.\n\n* [Instrumentation][instrumentation_library]: The ability to call the OpenTelemetry API directly by any application is\n facilitated by instrumentation. A library that enables OpenTelemetry observability for another library is called an Instrumentation Library.\n\n* [Trace][trace_concept]: Trace refers to distributed tracing. It can be thought of as a directed acyclic graph (DAG) of Spans, where the edges between Spans are defined as parent/child relationship.\n\n* [Tracer Provider][tracer_provider]: Provides a `Tracer` for use by the given instrumentation library.\n\n* [Span Processor][span_processor]: A span processor allows hooks for SDK's `Span` start and end method invocations. Follow the link for more information.\n\n* [Sampling][sampler_ref]: Sampling is a mechanism to control the noise and overhead introduced by OpenTelemetry by reducing the number of samples of traces collected and sent to the backend.\n\nFor more information on the OpenTelemetry project, please review the [OpenTelemetry Specifications][opentelemetry_specification].\n\n## Examples\n\nMore examples can be found in [samples][samples_code].\n\n## Troubleshooting\n\n### Enabling Logging\n\nAzure SDKs for Java offer a consistent logging story to help aid in troubleshooting application errors and expedite\ntheir resolution. The logs produced will capture the flow of an application before reaching the terminal state to help\nlocate the root issue. View the [logging][logging] wiki for guidance about enabling logging.\n\n## Next steps\nLearn more about [Open Telemetry][opentelemetry_io]\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a\n[Contributor License Agreement (CLA)][cla] declaring that you have the right to, and actually do, grant us the rights\nto use your contribution.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate\nthe PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to\ndo this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the\n[Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n[jdk]: https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable\n[samples]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/monitor\n[source_code]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/monitor/azure-monitor-opentelemetry-exporter/src\n[azure_subscription]: https://azure.microsoft.com/free/\n[api_reference_doc]: https://docs.microsoft.com/azure/azure-monitor/overview\n[package_mvn]: https://mvnrepository.com/artifact/com.azure/opentelemetry-exporters-azuremonitor\n[product_documentation]: https://docs.microsoft.com/azure/azure-monitor/overview\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/identity/azure-identity\n[DefaultAzureCredential]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity/README.md#defaultazurecredential\n[custom_subdomain]: https://docs.microsoft.com/azure/cognitive-services/authentication#create-a-resource-with-a-custom-subdomain\n[logging]: https://github.com/Azure/azure-sdk-for-java/wiki/Logging-with-Azure-SDK\n[opentelemetry_sdk]: https://github.com/open-telemetry/opentelemetry-java/blob/master/QUICKSTART.md\n[opentelemetry_specification]: https://github.com/open-telemetry/opentelemetry-specification\n[application_insights_resource]: https://docs.microsoft.com/azure/azure-monitor/app/create-new-resource\n[application_insights_intro]: https://docs.microsoft.com/azure/azure-monitor/app/app-insights-overview\n[azure_portal]: https://ms.portal.azure.com/#blade/HubsExtension/BrowseResource/resourceType/microsoft.insights%2Fcomponents\n[opentelemetry_io]: https://opentelemetry.io/ \n[span_data]: https://opentelemetry.lightstep.com/spans\n[sample_readme]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/monitor/azure-monitor-opentelemetry-exporter/src/samples\n[opentelemetry_spec]: https://opentelemetry.io/\n[instrumentation_library]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md#instrumentation-libraries\n[tracer_provider]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/sdk.md#tracer-provider\n[span_processor]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/sdk.md#span-processor\n[sampler_ref]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/sdk.md#sampling\n[trace_concept]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md#trace\n[samples_code]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/monitor/azure-monitor-opentelemetry-exporter/src/samples\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%monitor%2Fazure-monitor-opentelemetry-exporter%2FREADME.png)\n",
        "repo_name": "monitor/azure-monitor-opentelemetry-exporter",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/monitor/azure-monitor-opentelemetry-exporter",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Monitor Query Performance test client library for Java\n\nRepresents Performance tests for Azure Monitor Query  SDK for Java.\n\n## Getting started\n\n### Prerequisites\n\n- A [Java Development Kit (JDK)][jdk_link], version 8 or later.\n- [Azure Subscription][azure_subscription]\n\n#### Setup for test resources\n\nYou will need the following environment variables for running the tests to access the live resources:\n\n```\nAZURE_TENANT_ID=<Tenant ID of Azure subscription>\nAZURE_CLIENT_ID=<Client ID of Azure AAD application>\nAZURE_CLIENT_SECRET=<Client secret of Azure AAD application>\nAZURE_MONITOR_LOGS_WORKSPACE_ID=<Workspace ID of Log Analytics workspace>\nAZURE_MONITOR_METRICS_RESOURCE_ID=<Resource ID of an Azure Resource>\n```\n\n## Key concepts\n\n## Examples\n### Executing the performance test\n1. Compile the performance project into a standalone jar using the command from the root of the perf project folder\n```\nmvn clean package -f sdk/monitor/azure-monitor-query-perf/pom.xml\n```\n\n2. Execute the corresponding perf test in the project using the command.\n```\njava -jar <path-to-packaged-jar-with-dependencies-from-step-1> <options-for-the-test>\njava -jar sdk/monitor/azure-monitor-query-perf/target/azure-monitor-query-perf-1.0.0-beta.1-jar-with-dependencies.jar logsquery --warmup 1 --iterations 1 --parallel 50 --duration 15 --count 1000\njava -jar sdk/monitor/azure-monitor-query-perf/target/azure-monitor-query-perf-1.0.0-beta.1-jar-with-dependencies.jar logsbatchquery --warmup 1 --iterations 1 --parallel 50 --duration 15 --count 1000\njava -jar sdk/monitor/azure-monitor-query-perf/target/azure-monitor-query-perf-1.0.0-beta.1-jar-with-dependencies.jar logsqueryasmodel --warmup 1 --iterations 1 --parallel 50 --duration 15 --count 1000\njava -jar sdk/monitor/azure-monitor-query-perf/target/azure-monitor-query-perf-1.0.0-beta.1-jar-with-dependencies.jar metricsquery --warmup 1 --iterations 1 --parallel 50 --duration 15 --count 1000\n```   \n\n### Common perf test command line options for Azure Monitor Query\n- `--duration` - Number of seconds to run the main test for. Default is 10.\n- `--iterations` - Number of iterations of main test loop.\n- `--parallel` - Number of operations to execute in parallel,\n- `--warmup` - Duration of test warmup time in seconds before the test attributes are calculated.\n\nUse [PerfStressOptions](https://github.com/Azure/azure-sdk-for-java/blob/main/common/perf-test-core/src/main/java/com/azure/perf/test/core/PerfStressOptions.java)\nfor the other command line options that could be used.\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[azure_subscription]: https://azure.microsoft.com/free\n[jdk_link]: https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable\n",
        "repo_name": "monitor/azure-monitor-query-perf",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/monitor/azure-monitor-query-perf",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Monitor Query client library for Java\n\nThe Azure Monitor Query client library is used to execute read-only queries against [Azure Monitor][azure_monitor_overview]'s two data platforms:\n\n- [Logs](https://learn.microsoft.com/azure/azure-monitor/logs/data-platform-logs) - Collects and organizes log and performance data from monitored resources. Data from different sources such as platform logs from Azure services, log and performance data from virtual machines agents, and usage and performance data from apps can be consolidated into a single [Azure Log Analytics workspace](https://learn.microsoft.com/azure/azure-monitor/logs/data-platform-logs#log-analytics-and-workspaces). The various data types can be analyzed together using the [Kusto Query Language][kusto_query_language].\n- [Metrics](https://learn.microsoft.com/azure/azure-monitor/essentials/data-platform-metrics) - Collects numeric data from monitored resources into a time series database. Metrics are numerical values that are collected at regular intervals and describe some aspect of a system at a particular time. Metrics are lightweight and capable of supporting near real-time scenarios, making them particularly useful for alerting and fast detection of issues.\n\n**Resources:**\n\n- [Source code][source]\n- [Package (Maven)][package]\n- [API reference documentation][msdocs_apiref]\n- [Service documentation][azure_monitor_overview]\n- [Samples][samples]\n- [Change log][changelog]\n\n## Getting started\n\n### Prerequisites\n\n- A [Java Development Kit (JDK)][jdk_link], version 8 or later\n- An [Azure subscription][azure_subscription]\n- A [TokenCredential](https://learn.microsoft.com/java/api/com.azure.core.credential.tokencredential?view=azure-java-stable) implementation, such as an [Azure Identity library credential type](https://learn.microsoft.com/java/api/overview/azure/identity-readme?view=azure-java-stable#credential-classes).\n- To query Logs, you need an [Azure Log Analytics workspace][azure_monitor_create_using_portal] or an Azure resource of any kind (Storage Account, Key Vault, Cosmos DB, etc.).\n- To query Metrics, you need an Azure resource of any kind (Storage Account, Key Vault, Cosmos DB, etc.).\n\n### Include the package\n\n#### Include the BOM file\n\nPlease include the azure-sdk-bom to your project to take dependency on the General Availability (GA) version of the library. In the following snippet, replace the {bom_version_to_target} placeholder with the version number.\nTo learn more about the BOM, see the [AZURE SDK BOM README](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/boms/azure-sdk-bom/README.md).\n\n```xml\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>com.azure</groupId>\n            <artifactId>azure-sdk-bom</artifactId>\n            <version>{bom_version_to_target}</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n```\nand then include the direct dependency in the dependencies section without the version tag as shown below.\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-monitor-query</artifactId>\n  </dependency>\n</dependencies>\n```\n\n#### Include direct dependency\n\nIf you want to take dependency on a particular version of the library that is not present in the BOM,\nadd the direct dependency to your project as follows.\n\n[//]: # ({x-version-update-start;com.azure:azure-monitor-query;current})\n\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-monitor-query</artifactId>\n    <version>1.2.0</version>\n</dependency>\n```\n\n[//]: # ({x-version-update-end})\n\n### Create the client\n\nAn authenticated client is required to query Logs or Metrics. The library includes both synchronous and asynchronous forms of the clients. To authenticate, the following examples use `DefaultAzureCredentialBuilder` from the [azure-identity](https://central.sonatype.com/artifact/com.azure/azure-identity/1.8.1) package.\n\n### Authenticating using Azure Active Directory\n\nYou can authenticate with Azure Active Directory using the [Azure Identity library][azure_identity]. Note that regional endpoints do not support AAD authentication. Create a [custom subdomain][custom_subdomain] for your resource in order to use this type of authentication.\n\nTo use the [DefaultAzureCredential][DefaultAzureCredential] provider shown below, or other credential providers provided with the Azure SDK, please include the `azure-identity` package:\n\n[//]: # ({x-version-update-start;com.azure:azure-identity;dependency})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-identity</artifactId>\n    <version>1.9.0</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: AZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET.\n\n#### Synchronous clients\n\n```java readme-sample-createLogsQueryClient\nLogsQueryClient logsQueryClient = new LogsQueryClientBuilder()\n    .credential(new DefaultAzureCredentialBuilder().build())\n    .buildClient();\n```\n\n```java readme-sample-createMetricsQueryClient\nMetricsQueryClient metricsQueryClient = new MetricsQueryClientBuilder()\n    .credential(new DefaultAzureCredentialBuilder().build())\n    .buildClient();\n```\n\n#### Asynchronous clients\n\n```java readme-sample-createLogsQueryAsyncClient\nLogsQueryAsyncClient logsQueryAsyncClient = new LogsQueryClientBuilder()\n    .credential(new DefaultAzureCredentialBuilder().build())\n    .buildAsyncClient();\n```\n\n```java readme-sample-createMetricsQueryAsyncClient\nMetricsQueryAsyncClient metricsQueryAsyncClient = new MetricsQueryClientBuilder()\n    .credential(new DefaultAzureCredentialBuilder().build())\n    .buildAsyncClient();\n```\n\n### Execute the query\n\nFor examples of Logs and Metrics queries, see the [Examples](#examples) section.\n\n## Key concepts\n\n### Logs query rate limits and throttling\n\nThe Log Analytics service applies throttling when the request rate is too high. Limits, such as the maximum number of rows returned, are also applied on the Kusto queries. For more information, see [Query API](https://learn.microsoft.com/azure/azure-monitor/service-limits#la-query-api).\n\n### Metrics data structure\n\nEach set of metric values is a time series with the following characteristics:\n\n- The time the value was collected\n- The resource associated with the value\n- A namespace that acts like a category for the metric\n- A metric name\n- The value itself\n- Some metrics may have multiple dimensions as described in multi-dimensional metrics. Custom metrics can have up to 10 dimensions.\n\n## Examples\n\n- [Logs query](#logs-query)\n  - [Map logs query results to a model](#map-logs-query-results-to-a-model)\n  - [Handle logs query response](#handle-logs-query-response)\n  - [Query logs by resource id](#query-logs-by-resource-id)\n- [Batch logs query](#batch-logs-query)\n- [Advanced logs query scenarios](#advanced-logs-query-scenarios)\n  - [Set logs query timeout](#set-logs-query-timeout)\n  - [Query multiple workspaces](#query-multiple-workspaces)\n  - [Include statistics](#include-statistics)\n  - [Include visualization](#include-visualization)\n- [Metrics query](#metrics-query)\n  - [Handle metrics query response](#handle-metrics-query-response)\n  - [Get average and count metrics](#get-average-and-count-metrics)\n\n### Logs query\n\n```java readme-sample-logsquery\nLogsQueryClient logsQueryClient = new LogsQueryClientBuilder()\n        .credential(new DefaultAzureCredentialBuilder().build())\n        .buildClient();\n\nLogsQueryResult queryResults = logsQueryClient.queryWorkspace(\"{workspace-id}\", \"{kusto-query}\",\n        new QueryTimeInterval(Duration.ofDays(2)));\n\nfor (LogsTableRow row : queryResults.getTable().getRows()) {\n    System.out.println(row.getColumnValue(\"OperationName\") + \" \" + row.getColumnValue(\"ResourceGroup\"));\n}\n```\n\n#### Map logs query results to a model\n\n```java readme-sample-custommodel\npublic class CustomLogModel {\n    private String resourceGroup;\n    private String operationName;\n\n    public String getResourceGroup() {\n        return resourceGroup;\n    }\n\n    public String getOperationName() {\n        return operationName;\n    }\n}\n```\n\n```java readme-sample-logsquerycustommodel\nLogsQueryClient logsQueryClient = new LogsQueryClientBuilder()\n        .credential(new DefaultAzureCredentialBuilder().build())\n        .buildClient();\n\nList<CustomLogModel> customLogModels = logsQueryClient.queryWorkspace(\"{workspace-id}\", \"{kusto-query}\",\n        new QueryTimeInterval(Duration.ofDays(2)), CustomLogModel.class);\n\nfor (CustomLogModel customLogModel : customLogModels) {\n    System.out.println(customLogModel.getOperationName() + \" \" + customLogModel.getResourceGroup());\n}\n```\n\n#### Handle logs query response\n\nThe `query` API returns the `LogsQueryResult`, while the `queryBatch` API returns the `LogsBatchQueryResult`. Here's a hierarchy of the response:\n\n```\nLogsQueryResult / LogsBatchQueryResult\n|---id (this exists in `LogsBatchQueryResult` object only)\n|---status (this exists in `LogsBatchQueryResult` object only)\n|---statistics\n|---visualization\n|---error\n|---tables (list of `LogsTable` objects)\n    |---name\n    |---rows (list of `LogsTableRow` objects)\n        |--- rowIndex\n        |--- rowCells (list of `LogsTableCell` objects)\n    |---columns (list of `LogsTableColumn` objects)\n        |---name\n        |---type\n```\n\n#### Query logs by resource ID\nThe `LogsQueryClient` supports querying logs using a workspace id (`queryWorkspace` methods) or a resource ID (`queryResource` methods).\nAn example of querying logs using a resource ID is shown below. Similar changes can be applied to all other samples.\n\n```java readme-sample-logsquerybyresourceid\nLogsQueryClient logsQueryClient = new LogsQueryClientBuilder()\n    .credential(new DefaultAzureCredentialBuilder().build())\n    .buildClient();\n\nLogsQueryResult queryResults = logsQueryClient.queryResource(\"{resource-id}\", \"{kusto-query}\",\n    new QueryTimeInterval(Duration.ofDays(2)));\n\nfor (LogsTableRow row : queryResults.getTable().getRows()) {\n    System.out.println(row.getColumnValue(\"OperationName\") + \" \" + row.getColumnValue(\"ResourceGroup\"));\n}\n```\n\n### Batch logs query\n\n```java readme-sample-batchlogsquery\nLogsQueryClient logsQueryClient = new LogsQueryClientBuilder()\n        .credential(new DefaultAzureCredentialBuilder().build())\n        .buildClient();\n\nLogsBatchQuery logsBatchQuery = new LogsBatchQuery();\nString query1 = logsBatchQuery.addWorkspaceQuery(\"{workspace-id}\", \"{query-1}\", new QueryTimeInterval(Duration.ofDays(2)));\nString query2 = logsBatchQuery.addWorkspaceQuery(\"{workspace-id}\", \"{query-2}\", new QueryTimeInterval(Duration.ofDays(30)));\nString query3 = logsBatchQuery.addWorkspaceQuery(\"{workspace-id}\", \"{query-3}\", new QueryTimeInterval(Duration.ofDays(10)));\n\nLogsBatchQueryResultCollection batchResults = logsQueryClient\n        .queryBatchWithResponse(logsBatchQuery, Context.NONE).getValue();\n\nLogsBatchQueryResult query1Result = batchResults.getResult(query1);\nfor (LogsTableRow row : query1Result.getTable().getRows()) {\n    System.out.println(row.getColumnValue(\"OperationName\") + \" \" + row.getColumnValue(\"ResourceGroup\"));\n}\n\nList<CustomLogModel> customLogModels = batchResults.getResult(query2, CustomLogModel.class);\nfor (CustomLogModel customLogModel : customLogModels) {\n    System.out.println(customLogModel.getOperationName() + \" \" + customLogModel.getResourceGroup());\n}\n\nLogsBatchQueryResult query3Result = batchResults.getResult(query3);\nif (query3Result.getQueryResultStatus() == LogsQueryResultStatus.FAILURE) {\n    System.out.println(query3Result.getError().getMessage());\n}\n```\n\n### Advanced logs query scenarios\n\n#### Set logs query timeout\n\n```java readme-sample-logsquerytimeout\nLogsQueryClient logsQueryClient = new LogsQueryClientBuilder()\n    .credential(new DefaultAzureCredentialBuilder().build())\n    .buildClient();\n\n// set request options: server timeout\nLogsQueryOptions options = new LogsQueryOptions()\n    .setServerTimeout(Duration.ofMinutes(10));\n\nResponse<LogsQueryResult> response = logsQueryClient.queryWorkspaceWithResponse(\"{workspace-id}\",\n        \"{kusto-query}\", new QueryTimeInterval(Duration.ofDays(2)), options, Context.NONE);\n```\n\n#### Query multiple workspaces\n\nTo run the same query against multiple Log Analytics workspaces, use the `LogsQueryOptions.setAdditionalWorkspaces` method:\n\nWhen multiple workspaces are included in the query, the logs in the result table are not grouped according to the \nworkspace from which it was retrieved. To identify the workspace of a row in the result table, you can inspect the \n\"TenantId\" column in the result table. If this column is not in the table, then you may have to update your query string\nto include this column.\n\n```java readme-sample-logsquerymultipleworkspaces\nLogsQueryClient logsQueryClient = new LogsQueryClientBuilder()\n        .credential(new DefaultAzureCredentialBuilder().build())\n        .buildClient();\n\nResponse<LogsQueryResult> response = logsQueryClient.queryWorkspaceWithResponse(\"{workspace-id}\", \"{kusto-query}\",\n        new QueryTimeInterval(Duration.ofDays(2)), new LogsQueryOptions()\n                .setAdditionalWorkspaces(Arrays.asList(\"{additional-workspace-identifiers}\")),\n        Context.NONE);\nLogsQueryResult result = response.getValue();\n```\n\n#### Include statistics\n\nTo get logs query execution statistics, such as CPU and memory consumption:\n\n1. Use `LogsQueryOptions` to request for statistics in the response by setting `setIncludeStatistics()` to `true`.\n2. Invoke the `getStatistics` method on the `LogsQueryResult` object.\n\nThe following example prints the query execution time:\n```java readme-sample-includestatistics\nLogsQueryClient client = new LogsQueryClientBuilder()\n        .credential(credential)\n        .buildClient();\n\nLogsQueryOptions options = new LogsQueryOptions()\n        .setIncludeStatistics(true);\nResponse<LogsQueryResult> response = client.queryWorkspaceWithResponse(\"{workspace-id}\",\n        \"AzureActivity | top 10 by TimeGenerated\", QueryTimeInterval.LAST_1_HOUR, options, Context.NONE);\nLogsQueryResult result = response.getValue();\nBinaryData statistics = result.getStatistics();\n\nObjectMapper objectMapper = new ObjectMapper();\nJsonNode statisticsJson = objectMapper.readTree(statistics.toBytes());\nJsonNode queryStatistics = statisticsJson.get(\"query\");\nSystem.out.println(\"Query execution time = \" + queryStatistics.get(\"executionTime\").asDouble());\n```\n\nBecause the structure of the statistics payload varies by query, a `BinaryData` return type is used. It contains the \nraw JSON response. The statistics are found within the `query` property of the JSON. For example:\n\n```json\n{\n  \"query\": {\n    \"executionTime\": 0.0156478,\n    \"resourceUsage\": {...},\n    \"inputDatasetStatistics\": {...},\n    \"datasetStatistics\": [{...}]\n  }\n}\n```\n\n#### Include visualization\nTo get visualization data for logs queries using the [render operator](https://learn.microsoft.com/azure/data-explorer/kusto/query/renderoperator?pivots=azuremonitor):\n\n1. Use `LogsQueryOptions` to request for visualization data in the response by setting `setIncludeVisualization()` to `true`.\n2. Invoke the `getVisualization` method on the `LogsQueryResult` object.\n\nFor example:\n```java readme-sample-includevisualization\nLogsQueryClient client = new LogsQueryClientBuilder()\n        .credential(credential)\n        .buildClient();\n\nString visualizationQuery = \"StormEvents\"\n        + \"| summarize event_count = count() by State\"\n        + \"| where event_count > 10\"\n        + \"| project State, event_count\"\n        + \"| render columnchart\";\nLogsQueryOptions options = new LogsQueryOptions()\n        .setIncludeVisualization(true);\nResponse<LogsQueryResult> response = client.queryWorkspaceWithResponse(\"{workspace-id}\", visualizationQuery,\n        QueryTimeInterval.LAST_7_DAYS, options, Context.NONE);\nLogsQueryResult result = response.getValue();\nBinaryData visualization = result.getVisualization();\n\nObjectMapper objectMapper = new ObjectMapper();\nJsonNode visualizationJson = objectMapper.readTree(visualization.toBytes());\nSystem.out.println(\"Visualization graph type = \" + visualizationJson.get(\"visualization\").asText());\n```\n\nBecause the structure of the visualization payload varies by query, a `BinaryData` return type is used. It contains the\nraw JSON response. For example:\n\n```json\n{\n  \"visualization\": \"columnchart\",\n  \"title\": null,\n  \"accumulate\": false,\n  \"isQuerySorted\": false,\n  \"kind\": null,\n  \"legend\": null,\n  \"series\": null,\n  \"yMin\": \"\",\n  \"yMax\": \"\",\n  \"xAxis\": null,\n  \"xColumn\": null,\n  \"xTitle\": null,\n  \"yAxis\": null,\n  \"yColumns\": null,\n  \"ySplit\": null,\n  \"yTitle\": null,\n  \"anomalyColumns\": null\n}\n```\n\n### Metrics query\n\nA resource ID, as denoted by the `{resource-id}` placeholder in the sample below, is required to query metrics. To find the resource ID:\n\n1. Navigate to your resource's page in the Azure portal.\n2. From the **Overview** blade, select the **JSON View** link.\n3. In the resulting JSON, copy the value of the `id` property.\n\n```java readme-sample-metricsquery\nMetricsQueryClient metricsQueryClient = new MetricsQueryClientBuilder()\n        .credential(new DefaultAzureCredentialBuilder().build())\n        .buildClient();\n\nMetricsQueryResult metricsQueryResult = metricsQueryClient.queryResource(\"{resource-uri}\",\n        Arrays.asList(\"SuccessfulCalls\", \"TotalCalls\"));\n\nfor (MetricResult metric : metricsQueryResult.getMetrics()) {\n    System.out.println(\"Metric name \" + metric.getMetricName());\n    for (TimeSeriesElement timeSeriesElement : metric.getTimeSeries()) {\n        System.out.println(\"Dimensions \" + timeSeriesElement.getMetadata());\n        for (MetricValue metricValue : timeSeriesElement.getValues()) {\n            System.out.println(metricValue.getTimeStamp() + \" \" + metricValue.getTotal());\n        }\n    }\n}\n```\n\n#### Handle metrics query response\n\nThe metrics query API returns a `MetricsQueryResult` object. The `MetricsQueryResult` object contains properties such as a list of `MetricResult`-typed objects, `granularity`, `namespace`, and `timeInterval`. The `MetricResult` objects list can be accessed using the `metrics` param. Each `MetricResult` object in this list contains a list of `TimeSeriesElement` objects. Each `TimeSeriesElement` contains `data` and `metadata_values` properties. In visual form, the object hierarchy of the response resembles the following structure:\n\n```\nMetricsQueryResult\n|---granularity\n|---timeInterval\n|---cost\n|---namespace\n|---resourceRegion\n|---metrics (list of `MetricResult` objects)\n    |---id\n    |---type\n    |---name\n    |---unit\n    |---timeSeries (list of `TimeSeriesElement` objects)\n        |---metadata (dimensions)\n        |---metricValues (list of data points represented by `MetricValue` objects)\n             |--- timeStamp\n             |--- count\n             |--- average\n             |--- total\n             |--- maximum\n             |--- minimum\n```\n\n#### Get average and count metrics\n\n```java readme-sample-metricsqueryaggregation\nMetricsQueryClient metricsQueryClient = new MetricsQueryClientBuilder()\n    .credential(new DefaultAzureCredentialBuilder().build())\n    .buildClient();\n\nResponse<MetricsQueryResult> metricsResponse = metricsQueryClient\n    .queryResourceWithResponse(\"{resource-id}\", Arrays.asList(\"SuccessfulCalls\", \"TotalCalls\"),\n        new MetricsQueryOptions()\n            .setGranularity(Duration.ofHours(1))\n            .setAggregations(Arrays.asList(AggregationType.AVERAGE, AggregationType.COUNT)),\n        Context.NONE);\n\nMetricsQueryResult metricsQueryResult = metricsResponse.getValue();\n\nfor (MetricResult metric : metricsQueryResult.getMetrics()) {\n    System.out.println(\"Metric name \" + metric.getMetricName());\n    for (TimeSeriesElement timeSeriesElement : metric.getTimeSeries()) {\n        System.out.println(\"Dimensions \" + timeSeriesElement.getMetadata());\n        for (MetricValue metricValue : timeSeriesElement.getValues()) {\n            System.out.println(metricValue.getTimeStamp() + \" \" + metricValue.getTotal());\n        }\n    }\n}\n```\n\n## Troubleshooting\n\nSee our [troubleshooting guide](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/monitor/azure-monitor-query/TROUBLESHOOTING.md)\nfor details on how to diagnose various failure scenarios.\n\n## Next steps\n\nTo learn more about Azure Monitor, see the [Azure Monitor service documentation][azure_monitor_overview].\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a [Contributor License Agreement (CLA)][cla] declaring that you have the right to, and actually do, grant us the rights to use your contribution.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate\nthe PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to\ndo this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information, see\nthe [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or\ncomments.\n\n<!-- LINKS -->\n\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity/README.md\n[azure_monitor_create_using_portal]: https://learn.microsoft.com/azure/azure-monitor/logs/quick-create-workspace\n[azure_monitor_overview]: https://learn.microsoft.com/azure/azure-monitor/overview\n[azure_subscription]: https://azure.microsoft.com/free/java\n[changelog]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/monitor/azure-monitor-query/CHANGELOG.md\n[custom_subdomain]: https://learn.microsoft.com/azure/cognitive-services/authentication?tabs=powershell#create-a-resource-with-a-custom-subdomain\n[DefaultAzureCredential]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity/README.md#defaultazurecredential\n[jdk_link]: https://learn.microsoft.com/java/azure/jdk/?view=azure-java-stable\n[kusto_query_language]: https://learn.microsoft.com/azure/data-explorer/kusto/query/\n[log_levels]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core/src/main/java/com/azure/core/util/logging/ClientLogger.java\n[msdocs_apiref]: https://learn.microsoft.com/java/api/com.azure.monitor.query?view=azure-java-stable\n[package]: https://search.maven.org/artifact/com.azure/azure-monitor-query\n[samples]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/monitor/azure-monitor-query/src/samples/java/README.md\n[source]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/monitor/azure-monitor-query/src\n[performance_tuning]: https://github.com/Azure/azure-sdk-for-java/wiki/Performance-Tuning\n\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fmonitor%2Fazure-monitor-query%2FREADME.png)\n",
        "repo_name": "monitor/azure-monitor-query",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/monitor/azure-monitor-query",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager MySql client library for Java\n\nAzure Resource Manager MySql client library for Java.\n\nThis package contains Microsoft Azure SDK for MySql Management SDK. The Microsoft Azure management API provides create, read, update, and delete functionality for Azure MySQL resources including servers, databases, firewall rules, VNET rules, log files and configurations with new business model. Package tag package-2020-01-01. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-mysql;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-mysql</artifactId>\n    <version>1.0.2</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nMySqlManager manager = MySqlManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/mysql/azure-resourcemanager-mysql/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n",
        "repo_name": "mysql/azure-resourcemanager-mysql",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/mysql/azure-resourcemanager-mysql",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager MySql client library for Java\n\nAzure Resource Manager MySql client library for Java.\n\nThis package contains Microsoft Azure SDK for MySql Management SDK. The Microsoft Azure management API provides create, read, update, and delete functionality for Azure MySQL resources including servers, databases, firewall rules, VNET rules, log files and configurations with new business model. Package tag package-flexibleserver-2022-09-30-preview. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-mysqlflexibleserver;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-mysqlflexibleserver</artifactId>\n    <version>1.0.0-beta.4</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nMySqlManager manager = MySqlManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/mysqlflexibleserver/azure-resourcemanager-mysqlflexibleserver/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "mysqlflexibleserver/azure-resourcemanager-mysqlflexibleserver",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/mysqlflexibleserver/azure-resourcemanager-mysqlflexibleserver",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager NetAppFiles client library for Java\n\nAzure Resource Manager NetAppFiles client library for Java.\n\nThis package contains Microsoft Azure SDK for NetAppFiles Management SDK. Microsoft NetApp Files Azure Resource Provider specification. Package tag package-netapp-2022-09-01. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-netapp;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-netapp</artifactId>\n    <version>1.0.0-beta.12</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nNetAppFilesManager manager = NetAppFilesManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/netapp/azure-resourcemanager-netapp/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "netapp/azure-resourcemanager-netapp",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/netapp/azure-resourcemanager-netapp",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager NetworkCloud client library for Java\n\nAzure Resource Manager NetworkCloud client library for Java.\n\nThis package contains Microsoft Azure SDK for NetworkCloud Management SDK. The Network Cloud APIs provide management of the on-premises clusters and their resources, such as, racks, bare metal hosts, virtual machines, workload networks and more. Package tag package-2022-12-12-preview. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-networkcloud;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-networkcloud</artifactId>\n    <version>1.0.0-beta.1</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nNetworkCloudManager manager = NetworkCloudManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/networkcloud/azure-resourcemanager-networkcloud/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "networkcloud/azure-resourcemanager-networkcloud",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/networkcloud/azure-resourcemanager-networkcloud",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager AzureTrafficCollector client library for Java\n\nAzure Resource Manager AzureTrafficCollector client library for Java.\n\nThis package contains Microsoft Azure SDK for AzureTrafficCollector Management SDK. Azure Traffic Collector service. Package tag package-2022-11-01. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-networkfunction;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-networkfunction</artifactId>\n    <version>1.0.0-beta.2</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nAzureTrafficCollectorManager manager = AzureTrafficCollectorManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/networkfunction/azure-resourcemanager-networkfunction/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "networkfunction/azure-resourcemanager-networkfunction",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/networkfunction/azure-resourcemanager-networkfunction",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager NewRelicObservability client library for Java\n\nAzure Resource Manager NewRelicObservability client library for Java.\n\nThis package contains Microsoft Azure SDK for NewRelicObservability Management SDK.  Package tag package-2022-07-01. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-newrelicobservability;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-newrelicobservability</artifactId>\n    <version>1.0.0</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nNewRelicObservabilityManager manager = NewRelicObservabilityManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/newrelicobservability/azure-resourcemanager-newrelicobservability/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "newrelicobservability/azure-resourcemanager-newrelicobservability",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/newrelicobservability/azure-resourcemanager-newrelicobservability",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager Nginx client library for Java\n\nAzure Resource Manager Nginx client library for Java.\n\nThis package contains Microsoft Azure SDK for Nginx Management SDK.  Package tag package-2022-08-01. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-nginx;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-nginx</artifactId>\n    <version>1.0.0-beta.2</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nNginxManager manager = NginxManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/nginx/azure-resourcemanager-nginx/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n",
        "repo_name": "nginx/azure-resourcemanager-nginx",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/nginx/azure-resourcemanager-nginx",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager NotificationHubs client library for Java\n\nAzure Resource Manager NotificationHubs client library for Java.\n\nThis package contains Microsoft Azure SDK for NotificationHubs Management SDK. Azure NotificationHub client. Package tag package-2017-04. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-notificationhubs;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-notificationhubs</artifactId>\n    <version>1.0.0-beta.3</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nNotificationHubsManager manager = NotificationHubsManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/notificationhubs/azure-resourcemanager-notificationhubs/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n",
        "repo_name": "notificationhubs/azure-resourcemanager-notificationhubs",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/notificationhubs/azure-resourcemanager-notificationhubs",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager oep client library for Java\n\nAzure Resource Manager oep client library for Java.\n\nThis package contains Microsoft Azure SDK for oep Management SDK. Open Energy Platform Management Service APIs. Package tag package-2021-06-01-preview. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-oep;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-oep</artifactId>\n    <version>1.0.0-beta.1</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nOepManager manager = OepManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/oep/azure-resourcemanager-oep/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n",
        "repo_name": "oep/azure-resourcemanager-oep",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/oep/azure-resourcemanager-oep",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure OpenAI client library for Java\n\nAzure OpenAI is a managed service that allows developers to deploy, tune, and generate content from OpenAI models on \nAzure resources.\n\nThe Azure OpenAI client library for Java is an adaptation of OpenAI's REST APIs that provides an idiomatic interface \nand rich integration with the rest of the Azure SDK ecosystem.\n\nUse the client library for Azure OpenAI to:\n\n* [Create a completion for text][microsoft_docs_openai_completion]\n* [Create a text embedding for comparisons][microsoft_docs_openai_embedding]\n\nFor concrete examples you can have a look at the following links. Some of the more common scenarios are covered: \n\n* [Text completions sample](#text-completions \"Text completions\")\n* [Streaming text completions sample](#streaming-text-completions \"Streaming text completions\")\n* [Chat completions sample](#chat-completions \"Chat completions\")\n* [Streaming chat completions sample](#streaming-chat-completions \"Streaming chat completions\")\n* [Embeddings sample](#text-embeddings \"Text Embeddings\")\n\nIf you want to see the full code for these snippets check out our [samples folder][samples_folder].\n\n[Source code][source_code] | [API reference documentation][docs] | [Product Documentation][product_documentation] | [Samples][samples_readme]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n- [Azure OpenAI access][azure_openai_access]\n- [Quickstart: Get started generating text using Azure OpenAI Service][quickstart]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure:azure-ai-openai;current})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-ai-openai</artifactId>\n    <version>1.0.0-beta.2</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Authentication\n\nIn order to interact with the Azure OpenAI service you'll need to create an instance of client class,\n[OpenAIAsyncClient][openai_client_async] or [OpenAIClient][openai_client_sync] by using \n[OpenAIClientBuilder][openai_client_builder]. To configure a client for use with \nAzure OpenAI, provide a valid endpoint URI to an Azure OpenAI resource along with a corresponding key credential,\ntoken credential, or [Azure Identity][azure_identity] credential that's authorized to use the Azure OpenAI resource. \n\n#### Create a Azure OpenAI client with key credential\nGet Azure OpenAI `key` credential from the Azure Portal.\n\n```java readme-sample-createSyncClientKeyCredential\nOpenAIClient client = new OpenAIClientBuilder()\n    .credential(new AzureKeyCredential(\"{key}\"))\n    .endpoint(\"{endpoint}\")\n    .buildClient();\n```\nor\n```java readme-sample-createAsyncClientKeyCredential\nOpenAIAsyncClient client = new OpenAIClientBuilder()\n    .credential(new AzureKeyCredential(\"{key}\"))\n    .endpoint(\"{endpoint}\")\n    .buildAsyncClient();\n```\n\n### Support for non-Azure OpenAI\n\nThe SDK also supports operating against the public non-Azure OpenAI. The response models remain the same, only the setup of the `OpenAIClient` is slightly different. First, get Non-Azure OpenAI API key from [Open AI authentication API keys][non_azure_openai_authentication]. Then setup your `OpenAIClient` as follows: \n\n\n```java readme-sample-createNonAzureOpenAISyncClientApiKey\nOpenAIClient client = new OpenAIClientBuilder()\n    .credential(new NonAzureOpenAIKeyCredential(\"{openai-secret-key}\"))\n    .buildClient();\n```\nor \n\n```java readme-sample-createNonAzureOpenAIAsyncClientApiKey\nOpenAIAsyncClient client = new OpenAIClientBuilder()\n    .credential(new NonAzureOpenAIKeyCredential(\"{openai-secret-key}\"))\n    .buildAsyncClient();\n```\n\n#### Create an Azure OpenAI client with Azure Active Directory credential\nAzure SDK for Java supports an Azure Identity package, making it easy to get credentials from Microsoft identity\nplatform.\n\nAuthentication with AAD requires some initial setup:\n* Add the Azure Identity package\n\n[//]: # ({x-version-update-start;com.azure:azure-identity;dependency})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-identity</artifactId>\n    <version>1.9.1</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\nAfter setup, you can choose which type of [credential][azure_identity_credential_type] from azure.identity to use.\nAs an example, [DefaultAzureCredential][wiki_identity] can be used to authenticate the client:\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables:\n`AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nAuthorization is easiest using [DefaultAzureCredential][wiki_identity]. It finds the best credential to use in its\nrunning environment. For more information about using Azure Active Directory authorization with OpenAI service, please\nrefer to [the associated documentation][aad_authorization].\n\n```java readme-sample-createOpenAIClientWithAAD\nTokenCredential defaultCredential = new DefaultAzureCredentialBuilder().build();\nOpenAIClient client = new OpenAIClientBuilder()\n    .credential(defaultCredential)\n    .endpoint(\"{endpoint}\")\n    .buildClient();\n```\n\n#### Create a client with proxy options\nCreate an OpenAI client with proxy options.\n```java readme-sample-createOpenAIClientWithProxyOption\n// Proxy options\nfinal String hostname = \"{your-host-name}\";\nfinal int port = 447; // your port number\n\nProxyOptions proxyOptions = new ProxyOptions(ProxyOptions.Type.HTTP, new InetSocketAddress(hostname, port))\n    .setCredentials(\"{username}\", \"{password}\");\n\nOpenAIClient client = new OpenAIClientBuilder()\n    .credential(new AzureKeyCredential(\"{key}\"))\n    .endpoint(\"{endpoint}\")\n    .clientOptions(new HttpClientOptions().setProxyOptions(proxyOptions))\n    .buildClient();\n```\n\n## Key concepts\n\n## Examples\nThe following sections provide several code snippets covering some of the most common OpenAI service tasks, including:\n\n* [Text completions sample](#text-completions \"Text completions\")\n* [Streaming text completions sample](#streaming-text-completions \"Streaming text completions\")\n* [Chat completions sample](#chat-completions \"Chat completions\")\n* [Streaming chat completions sample](#streaming-chat-completions \"Streaming chat completions\")\n* [Embeddings sample](#text-embeddings \"Text Embeddings\")\n\n### Text completions\n\n``` java readme-sample-getCompletions\nList<String> prompt = new ArrayList<>();\nprompt.add(\"Say this is a test\");\n\nCompletions completions = client.getCompletions(\"{deploymentOrModelId}\", new CompletionsOptions(prompt));\n\nSystem.out.printf(\"Model ID=%s is created at %d.%n\", completions.getId(), completions.getCreated());\nfor (Choice choice : completions.getChoices()) {\n    System.out.printf(\"Index: %d, Text: %s.%n\", choice.getIndex(), choice.getText());\n}\n```\n\n### Streaming text completions\n\n```java readme-sample-getCompletionsStream\nList<String> prompt = new ArrayList<>();\nprompt.add(\"How to bake a cake?\");\n\nIterableStream<Completions> completionsStream = client\n    .getCompletionsStream(\"{deploymentOrModelId}\", new CompletionsOptions(prompt));\n\ncompletionsStream.forEach(completions -> {\n    System.out.printf(\"Model ID=%s is created at %d.%n\", completions.getId(), completions.getCreated());\n    for (Choice choice : completions.getChoices()) {\n        System.out.printf(\"Index: %d, Text: %s.%n\", choice.getIndex(), choice.getText());\n    }\n});\n```\n\n### Chat completions\n\n``` java readme-sample-getChatCompletions\nList<ChatMessage> chatMessages = new ArrayList<>();\nchatMessages.add(new ChatMessage(ChatRole.SYSTEM).setContent(\"You are a helpful assistant. You will talk like a pirate.\"));\nchatMessages.add(new ChatMessage(ChatRole.USER).setContent(\"Can you help me?\"));\nchatMessages.add(new ChatMessage(ChatRole.ASSISTANT).setContent(\"Of course, me hearty! What can I do for ye?\"));\nchatMessages.add(new ChatMessage(ChatRole.USER).setContent(\"What's the best way to train a parrot?\"));\n\nChatCompletions chatCompletions = client.getChatCompletions(\"{deploymentOrModelId}\",\n    new ChatCompletionsOptions(chatMessages));\n\nSystem.out.printf(\"Model ID=%s is created at %d.%n\", chatCompletions.getId(), chatCompletions.getCreated());\nfor (ChatChoice choice : chatCompletions.getChoices()) {\n    ChatMessage message = choice.getMessage();\n    System.out.printf(\"Index: %d, Chat Role: %s.%n\", choice.getIndex(), message.getRole());\n    System.out.println(\"Message:\");\n    System.out.println(message.getContent());\n}\n```\nPlease refer to the service documentation for a conceptual discussion of [text completion][microsoft_docs_openai_completion].\n\n### Streaming chat completions\n\n```java readme-sample-getChatCompletionsStream\nList<ChatMessage> chatMessages = new ArrayList<>();\nchatMessages.add(new ChatMessage(ChatRole.SYSTEM).setContent(\"You are a helpful assistant. You will talk like a pirate.\"));\nchatMessages.add(new ChatMessage(ChatRole.USER).setContent(\"Can you help me?\"));\nchatMessages.add(new ChatMessage(ChatRole.ASSISTANT).setContent(\"Of course, me hearty! What can I do for ye?\"));\nchatMessages.add(new ChatMessage(ChatRole.USER).setContent(\"What's the best way to train a parrot?\"));\n\nIterableStream<ChatCompletions> chatCompletionsStream = client.getChatCompletionsStream(\"{deploymentOrModelId}\",\n    new ChatCompletionsOptions(chatMessages));\n\nchatCompletionsStream.forEach(chatCompletions -> {\n    System.out.printf(\"Model ID=%s is created at %d.%n\", chatCompletions.getId(), chatCompletions.getCreated());\n    for (ChatChoice choice : chatCompletions.getChoices()) {\n        ChatMessage message = choice.getDelta();\n        if (message != null) {\n            System.out.printf(\"Index: %d, Chat Role: %s.%n\", choice.getIndex(), message.getRole());\n            System.out.println(\"Message:\");\n            System.out.println(message.getContent());\n        }\n    }\n\n    CompletionsUsage usage = chatCompletions.getUsage();\n    if (usage != null) {\n        System.out.printf(\"Usage: number of prompt token is %d, \"\n                + \"number of completion token is %d, and number of total tokens in request and response is %d.%n\",\n            usage.getPromptTokens(), usage.getCompletionTokens(), usage.getTotalTokens());\n    }\n});\n```\n\n### Text embeddings\n\n```java readme-sample-getEmbedding\nEmbeddingsOptions embeddingsOptions = new EmbeddingsOptions(\n    Arrays.asList(\"Your text string goes here\"));\n\nEmbeddings embeddings = client.getEmbeddings(\"{deploymentOrModelId}\", embeddingsOptions);\n\nfor (EmbeddingItem item : embeddings.getData()) {\n    System.out.printf(\"Index: %d.%n\", item.getIndex());\n    for (Double embedding : item.getEmbedding()) {\n        System.out.printf(\"%f;\", embedding);\n    }\n}\n```\nPlease refer to the service documentation for a conceptual discussion of [openAI embedding][microsoft_docs_openai_embedding].\n\n## Troubleshooting\n### Enable client logging\nYou can set the `AZURE_LOG_LEVEL` environment variable to view logging statements made in the client library. For\nexample, setting `AZURE_LOG_LEVEL=2` would show all informational, warning, and error log messages. The log levels can\nbe found here: [log levels][logLevels].\n\n### Default HTTP Client\nAll client libraries by default use the Netty HTTP client. Adding the above dependency will automatically configure\nthe client library to use the Netty HTTP client. Configuring or changing the HTTP client is detailed in the\n[HTTP clients wiki](https://github.com/Azure/azure-sdk-for-java/wiki/HTTP-clients).\n\n### Default SSL library\nAll client libraries, by default, use the Tomcat-native Boring SSL library to enable native-level performance for SSL\noperations. The Boring SSL library is an uber jar containing native libraries for Linux / macOS / Windows, and provides\nbetter performance compared to the default SSL implementation within the JDK. For more information, including how to\nreduce the dependency size, refer to the [performance tuning][performance_tuning] section of the wiki.\n\n## Next steps\n- Samples are explained in detail [here][samples_readme].\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[aad_authorization]: https://docs.microsoft.com/azure/cognitive-services/authentication#authenticate-with-azure-active-directory\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_identity_credential_type]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/identity/azure-identity#credentials\n[azure_openai_access]: https://learn.microsoft.com/azure/cognitive-services/openai/overview#how-do-i-get-access-to-azure-openai\n[azure_subscription]: https://azure.microsoft.com/free/\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[logLevels]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core/src/main/java/com/azure/core/util/logging/ClientLogger.java\n[microsoft_docs_openai_completion]: https://learn.microsoft.com/azure/cognitive-services/openai/how-to/completions\n[microsoft_docs_openai_embedding]: https://learn.microsoft.com/azure/cognitive-services/openai/concepts/understand-embeddings\n[non_azure_openai_authentication]: https://platform.openai.com/docs/api-reference/authentication\n[performance_tuning]: https://github.com/Azure/azure-sdk-for-java/wiki/Performance-Tuning\n[product_documentation]: https://azure.microsoft.com/services/\n[quickstart]: https://learn.microsoft.com/azure/cognitive-services/openai/quickstart\n[source_code]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/openai/azure-ai-openai/src\n[samples_folder]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/openai/azure-ai-openai/src/samples/java/com/azure/ai/openai\n[samples_readme]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/openai/azure-ai-openai/src/samples\n[openai_client_async]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/openai/azure-ai-openai/src/main/java/com/azure/ai/openai/OpenAIAsyncClient.java\n[openai_client_builder]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/openai/azure-ai-openai/src/main/java/com/azure/ai/openai/OpenAIClientBuilder.java\n[openai_client_sync]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/openai/azure-ai-openai/src/main/java/com/azure/ai/openai/OpenAIClient.java\n[wiki_identity]: https://github.com/Azure/azure-sdk-for-java/wiki/Identity-and-Authentication\n\n",
        "repo_name": "openai/azure-ai-openai",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/openai/azure-ai-openai",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager OperationsManagement client library for Java\n\nAzure Resource Manager OperationsManagement client library for Java.\n\nThis package contains Microsoft Azure SDK for OperationsManagement Management SDK. Operations Management Client. Package tag package-2015-11-preview. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-operationsmanagement;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-operationsmanagement</artifactId>\n    <version>1.0.0-beta.2</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nOperationsManagementManager manager = OperationsManagementManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/operationsmanagement/azure-resourcemanager-operationsmanagement/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "operationsmanagement/azure-resourcemanager-operationsmanagement",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/operationsmanagement/azure-resourcemanager-operationsmanagement",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager orbital client library for Java\n\nAzure Resource Manager orbital client library for Java.\n\nThis package contains Microsoft Azure SDK for orbital Management SDK. Azure Orbital service. Package tag package-2022-11-01. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-orbital;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-orbital</artifactId>\n    <version>1.0.0-beta.2</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nOrbitalManager manager = OrbitalManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/orbital/azure-resourcemanager-orbital/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "orbital/azure-resourcemanager-orbital",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/orbital/azure-resourcemanager-orbital",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager PaloAlto Networks Ngfw client library for Java\n\nAzure Resource Manager PaloAlto Networks Ngfw client library for Java.\n\nThis package contains Microsoft Azure SDK for PaloAlto Networks Ngfw Management SDK.  Package tag package-2022-08-29-preview. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-paloaltonetworks-ngfw;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-paloaltonetworks-ngfw</artifactId>\n    <version>1.0.0-beta.1</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nPaloAltoNetworksNgfwManager manager = PaloAltoNetworksNgfwManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/paloaltonetworks/azure-resourcemanager-paloaltonetworks-ngfw/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "paloaltonetworks/azure-resourcemanager-paloaltonetworks-ngfw",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/paloaltonetworks/azure-resourcemanager-paloaltonetworks-ngfw",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Java - Client Libraries",
        "repo_name": "parents/azure-client-sdk-parent",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/parents/azure-client-sdk-parent",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Java - Code Customizations Parent",
        "repo_name": "parents/azure-code-customization-parent",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/parents/azure-code-customization-parent",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Java - Performance Test Libraries Parent",
        "repo_name": "parents/azure-perf-test-parent",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/parents/azure-perf-test-parent",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager Peering client library for Java\n\nAzure Resource Manager Peering client library for Java.\n\nThis package contains Microsoft Azure SDK for Peering Management SDK. Peering Client. Package tag package-2021-01-01. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-peering;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-peering</artifactId>\n    <version>1.0.0-beta.2</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nPeeringManager manager = PeeringManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/peering/azure-resourcemanager-peering/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "peering/azure-resourcemanager-peering",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/peering/azure-resourcemanager-peering",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Personalizer client library for Java\n\n[Azure Personalizer](https://docs.microsoft.com/azure/cognitive-services/personalizer/)\nis a cloud-based service that helps your applications choose the best content item to show your users. You can use the Personalizer service to determine what product to suggest to shoppers or to figure out the optimal position for an advertisement. After the content is shown to the user, your application monitors the user's reaction and reports a reward score back to the Personalizer service. This ensures continuous improvement of the machine learning model, and Personalizer's ability to select the best content item based on the contextual information it receives.\n\n## Getting started\n\n### Prerequisites\n- A [Java Development Kit (JDK)][jdk_link], version 8 or later.\n- [Azure Subscription][azure_subscription]\n- [Cognitive Services for Personalizer account][personalizer_account] to use this package.\n\n### Install the package\nInclude the dependency in the dependencies' section. Ignoring the version tag without the version tag.\n\n```xml\n<dependencies>\n  <dependency>\n      <groupId>com.azure</groupId>\n      <artifactId>azure-ai-personalizer</artifactId>\n      <version>1.0.0-beta.1</version> <!-- {{x-version-update-start;com.azure:azure-ai-personalizer;current} -->\n  </dependency>\n</dependencies>\n```\n\nThis table shows the relationship between SDK versions and supported API versions of the service:\n\n|SDK version|Supported API version of service\n|-|-\n|1.0.0-beta.1 | 1.1-preview.3\n\n## Key concepts\nThe [PersonalizerAdministrationClient][personalizer_admin_sync_client] and\n[PersonalizerAdministrationAsyncClient][personalizer_admin_async_client] provide both synchronous and asynchronous operations to:\n- Manage the machine learning model and learning settings for the Personalizer service.\n- Manage the properties of the Personalizer service such as the [learning mode][learning_mode], [exploration percentage][exploration].\n- Run counterfactual evaluations on prior historical event data.\n\nThe [PersonalizerClient][personalizer_sync_client] and\n[PersonalizerAsyncClient][personalizer_async_client] provide both synchronous and asynchronous operations to:\n- Rank a set of actions, then activate and reward the event. \n- Use [multi-slot personalization][multi_slot] when there are more than one slots.\n- Manage the properties of the Personalizer service.\n- Run counterfactual evaluations on prior historical event data.\n\n## Examples\nPlease refer the sample scenarios outlined in the [examples][examples].\n\n## Troubleshooting\nAzure SDKs for Java offer a consistent logging story to help aid in troubleshooting application errors and expedite\ntheir resolution. The logs produced will capture the flow of an application before reaching the terminal state to help\nlocate the root issue. View the [logging][logging] wiki for guidance about enabling logging.\n\n## Next steps\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a [Contributor License Agreement (CLA)][cla] declaring that you have the right to, and actually do, grant us the rights to use your contribution.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information, see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n[jdk_link]: https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable\n[azure_subscription]: https://azure.microsoft.com/free\n[personalizer_account]: https://docs.microsoft.com/azure/cognitive-services/cognitive-services-apis-create-account?tabs=multiservice%2Cwindows\n[personalizer_admin_sync_client]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/personalizer/azure-ai-personalizer/src/main/java/com/azure/ai/personalizer/administration/PersonalizerAdministrationClient.java\n[personalizer_admin_async_client]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/personalizer/azure-ai-personalizer/src/main/java/com/azure/ai/personalizer/administration/PersonalizerAdministrationAsyncClient.java\n[personalizer_sync_client]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/personalizer/azure-ai-personalizer/src/main/java/com/azure/ai/personalizer/PersonalizerClient.java\n[personalizer_async_client]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/personalizer/azure-ai-personalizer/src/main/java/com/azure/ai/personalizer/PersonalizerAsyncClient.java\n[learning_mode]: https://docs.microsoft.com/azure/cognitive-services/personalizer/what-is-personalizer#learning-modes\n[exploration]: https://docs.microsoft.com/azure/cognitive-services/personalizer/concepts-exploration\n[multi_slot]: https://docs.microsoft.com/azure/cognitive-services/personalizer/concept-multi-slot-personalization\n[examples]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/personalizer/azure-ai-personalizer/src/samples#examples\n[logging]: https://github.com/Azure/azure-sdk-for-java/wiki/Logging-with-Azure-SDK\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fpersonalizer%2Fazure-ai-personalizer%2FREADME.png)\n",
        "repo_name": "personalizer/azure-ai-personalizer",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/personalizer/azure-ai-personalizer",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager PolicyInsights client library for Java\n\nAzure Resource Manager PolicyInsights client library for Java.\n\nThis package contains Microsoft Azure SDK for PolicyInsights Management SDK.  Package tag package-2022-09. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-policyinsights;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-policyinsights</artifactId>\n    <version>1.0.0-beta.3</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nPolicyInsightsManager manager = PolicyInsightsManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/policyinsights/azure-resourcemanager-policyinsights/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n",
        "repo_name": "policyinsights/azure-resourcemanager-policyinsights",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/policyinsights/azure-resourcemanager-policyinsights",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager PostgreSql client library for Java\n\nAzure Resource Manager PostgreSql client library for Java.\n\nThis package contains Microsoft Azure SDK for PostgreSql Management SDK. The Microsoft Azure management API provides create, read, update, and delete functionality for Azure PostgreSQL resources including servers, databases, firewall rules, VNET rules, security alert policies, log files and configurations with new business model. Package tag package-2020-01-01. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-postgresql;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-postgresql</artifactId>\n    <version>1.0.2</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nPostgreSqlManager manager = PostgreSqlManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/postgresql/azure-resourcemanager-postgresql/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n",
        "repo_name": "postgresql/azure-resourcemanager-postgresql",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/postgresql/azure-resourcemanager-postgresql",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager PostgreSql client library for Java\n\nAzure Resource Manager PostgreSql client library for Java.\n\nThis package contains Microsoft Azure SDK for PostgreSql Management SDK. The Microsoft Azure management API provides create, read, update, and delete functionality for Azure PostgreSQL resources including servers, databases, firewall rules, VNET rules, security alert policies, log files and configurations with new business model. Package tag package-flexibleserver-2022-12-01. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-postgresqlflexibleserver;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-postgresqlflexibleserver</artifactId>\n    <version>1.0.0-beta.6</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nPostgreSqlManager manager = PostgreSqlManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/postgresqlflexibleserver/azure-resourcemanager-postgresqlflexibleserver/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "postgresqlflexibleserver/azure-resourcemanager-postgresqlflexibleserver",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/postgresqlflexibleserver/azure-resourcemanager-postgresqlflexibleserver",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager PowerBIDedicated client library for Java\n\nAzure Resource Manager PowerBIDedicated client library for Java.\n\nThis package contains Microsoft Azure SDK for PowerBIDedicated Management SDK. PowerBI Dedicated Web API provides a RESTful set of web services that enables users to create, retrieve, update, and delete Power BI dedicated capacities. Package tag package-2021-01-01. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-powerbidedicated;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-powerbidedicated</artifactId>\n    <version>1.0.0-beta.2</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nPowerBIDedicatedManager manager = PowerBIDedicatedManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/powerbidedicated/azure-resourcemanager-powerbidedicated/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "powerbidedicated/azure-resourcemanager-powerbidedicated",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/powerbidedicated/azure-resourcemanager-powerbidedicated",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager ProviderHub client library for Java\n\nAzure Resource Manager ProviderHub client library for Java.\n\nThis package contains Microsoft Azure SDK for ProviderHub Management SDK. Microsoft ProviderHub. Package tag package-2020-11-20. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-providerhub;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-providerhub</artifactId>\n    <version>1.0.0</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nProviderHubManager manager = ProviderHubManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/providerhub/azure-resourcemanager-providerhub/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "providerhub/azure-resourcemanager-providerhub",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/providerhub/azure-resourcemanager-providerhub",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Purview Administration client library for Java\n\nAzure Purview data plane administration. It supports data plane operations. It can manage account, collections, keys, resource set rule, metadata policy, metadata roles.\n\n**Please rely heavily on the [service's documentation][product_documentation] and [data-plane documentation][protocol_method] to use this library**\n\n[Package (Maven)][package] | [API reference documentation][api_reference_doc] | [Product Documentation][product_documentation]\n\n## Getting started\n\n### Prerequisites\n\n- A [Java Development Kit (JDK)][jdk_link], version 8 or later.\n- [Azure Subscription][azure_subscription]\n- An existing Azure Purview administration.\n\nFor more information about creating the account see [here][create_azure_purview_account].\n\nSome API in administration requires permissions for the user or the service principal authenticated with the client.\nFor more information about permissions, see [here][azure_purview_permissions].\n\n### Include the Package\n\n[//]: # ({x-version-update-start;com.azure:azure-analytics-purview-administration;current})\n```xml\n<dependency>\n  <groupId>com.azure</groupId>\n  <artifactId>azure-analytics-purview-administration</artifactId>\n  <version>1.0.0-beta.1</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Authenticate the client\n\nIn order to interact with the Azure Purview service, your client must present an Azure Active Directory bearer token to the service.\n\nThe simplest way of providing a bearer token is to use the `DefaultAzureCredential` authentication method by providing client secret credentials is being used in this getting started section but you can find more ways to authenticate with [azure-identity][azure_identity].\n\n#### Create AccountsClient with Azure Active Directory Credential\n\nYou can authenticate with Azure Active Directory using the [Azure Identity library][azure_identity].\n\nTo use the [DefaultAzureCredential][DefaultAzureCredential] provider shown below, or other credential providers provided with the Azure SDK, please include the `azure-identity` package:\n\n[//]: # ({x-version-update-start;com.azure:azure-identity;dependency})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-identity</artifactId>\n    <version>1.9.0</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: AZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET.\n\n##### Example\n\n```java readme-sample-createAccountsClient\nAccountsClient client = new AccountsClientBuilder()\n    .endpoint(System.getenv(\"ACCOUNT_ENDPOINT\"))\n    .credential(new DefaultAzureCredentialBuilder().build())\n    .buildClient();\n```\n\n## Key concepts\n\n## Examples\n\n```java readme-sample-getAccountProperties\nAccountsClient client = new AccountsClientBuilder()\n    .endpoint(System.getenv(\"ACCOUNT_ENDPOINT\"))\n    .credential(new DefaultAzureCredentialBuilder().build())\n    .buildClient();\nBinaryData response = client.getAccountPropertiesWithResponse(null).getValue();\n```\n\n## Troubleshooting\n\n### Enabling Logging\n\nAzure SDKs for Java offer a consistent logging story to help aid in troubleshooting application errors and expedite\ntheir resolution. The logs produced will capture the flow of an application before reaching the terminal state to help\nlocate the root issue. View the [logging][logging] wiki for guidance about enabling logging.\n\n## Next steps\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a [Contributor License Agreement (CLA)][cla] declaring that you have the right to, and actually do, grant us the rights to use your contribution.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n[azure_subscription]: https://azure.microsoft.com/free/\n[api_reference_doc]: https://azure.github.io/azure-sdk-for-java\n[product_documentation]: https://azure.microsoft.com/services/purview/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/identity/azure-identity\n[DefaultAzureCredential]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity/README.md#defaultazurecredential\n[jdk_link]: https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable\n[package]: https://mvnrepository.com/artifact/com.azure/azure-analytics-purview-administration\n[protocol_method]: https://github.com/Azure/azure-sdk-for-java/wiki/Protocol-Methods\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n[create_azure_purview_account]: https://docs.microsoft.com/azure/purview/create-catalog-portal\n[azure_purview_permissions]: https://docs.microsoft.com/azure/purview/catalog-permissions\n[logging]: https://github.com/Azure/azure-sdk-for-java/wiki/Logging-with-Azure-SDK\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fpurview%2Fazure-analytics-purview-administration%2FREADME.png)\n",
        "repo_name": "purview/azure-analytics-purview-administration",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/purview/azure-analytics-purview-administration",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Purview Catalog client library for Java\n\nAzure Purview Catalog is a fully managed cloud service whose users can discover the data sources they need and understand the data sources they find. At the same time, Data Catalog helps organizations get more value from their existing investments.\n\n- Search for data using technical or business terms\n- Browse associated technical, business, semantic, and operational metadata\n- Identify the sensitivity level of data.\n\n**Please rely heavily on the [service's documentation][product_documentation] and our [data-plane client docs][protocol_method] to use this library**\n\n[Source code][source_code] | [Package (Maven)][package] | [API reference documentation][api_reference_doc] | [Product Documentation][product_documentation] | [Samples][samples_readme]\n\n## Getting started\n\n### Prerequisites\n\n- A [Java Development Kit (JDK)][jdk_link], version 8 or later.\n- [Azure Subscription][azure_subscription]\n- An existing Azure Purview account.\n\nFor more information about creating the account, see [here][create_azure_purview_account].\n\n### Include the Package\n\n[//]: # ({x-version-update-start;com.azure:azure-analytics-purview-catalog;current})\n```xml\n<dependency>\n  <groupId>com.azure</groupId>\n  <artifactId>azure-analytics-purview-catalog</artifactId>\n  <version>1.0.0-beta.2</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n\n### Authenticate the client\nIn order to interact with the Azure Purview service, your client must present an Azure Active Directory bearer token to the service.\n\nThe simplest way of providing a bearer token is to use the `DefaultAzureCredential` authentication method by providing client secret credentials is being used in this getting started section but you can find more ways to authenticate with [azure-identity][azure_identity].\n\n#### Create GlossaryBaseClient with Azure Active Directory Credential\n\nYou can authenticate with Azure Active Directory using the [Azure Identity library][azure_identity].\n\nTo use the [DefaultAzureCredential][DefaultAzureCredential] provider shown below, or other credential providers provided with the Azure SDK, please include the `azure-identity` package:\n\n[//]: # ({x-version-update-start;com.azure:azure-identity;dependency})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-identity</artifactId>\n    <version>1.9.0</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: AZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET.\n\n##### Example\n```java readme-sample-createGlossaryClient\nGlossaryClient client = new GlossaryClientBuilder()\n    .endpoint(System.getenv(\"<account-name>.purview.azure.com\"))\n    .credential(new DefaultAzureCredentialBuilder().build())\n    .buildClient();\n```\n\n## Key concepts\n\n## Examples\nMore examples can be found in [samples][samples_code].\n\n## Troubleshooting\n\n### Enabling Logging\n\nAzure SDKs for Java offer a consistent logging story to help aid in troubleshooting application errors and expedite\ntheir resolution. The logs produced will capture the flow of an application before reaching the terminal state to help\nlocate the root issue. View the [logging][logging] wiki for guidance about enabling logging.\n\n## Next steps\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a [Contributor License Agreement (CLA)][cla] declaring that you have the right to, and actually do, grant us the rights to use your contribution.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n[samples]: src/samples/java/com/azure/analytics/purview/catalog\n[source_code]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/purview/azure-analytics-purview-catalog/src\n[samples_code]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/purview/azure-analytics-purview-catalog/src/samples/\n[azure_subscription]: https://azure.microsoft.com/free/\n[api_reference_doc]: https://azure.github.io/azure-sdk-for-java\n[product_documentation]: https://azure.microsoft.com/services/purview/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/identity/azure-identity\n[DefaultAzureCredential]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity/README.md#defaultazurecredential\n[jdk_link]: https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable\n[package]: https://mvnrepository.com/artifact/com.azure/azure-analytics-purview-catalog\n[samples_readme]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/purview/azure-analytics-purview-catalog/src/samples/README.md\n[protocol_method]: https://github.com/Azure/azure-sdk-for-java/wiki/Protocol-Methods\n[create_azure_purview_account]: https://docs.microsoft.com/azure/purview/create-catalog-portal\n[logging]: https://github.com/Azure/azure-sdk-for-java/wiki/Logging-with-Azure-SDK\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fpurview%2Fazure-analytics-purview-catalog%2FREADME.png)\n",
        "repo_name": "purview/azure-analytics-purview-catalog",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/purview/azure-analytics-purview-catalog",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Purview Scanning client library for Java\n\nAzure Purview Scanning is a fully managed cloud service whose users can scan your data into your data estate (also known as your **catalog**). Scanning is a process by which the catalog connects directly to a data source on a user-specified schedule.\n\n- Scan your data into your catalog\n- Examine your data\n- Extract schemas from your data\n\n**Please rely heavily on the [service's documentation][product_documentation] and our [data-plane client docs][protocol_method] to use this library**\n\n[Source code][source_code] | [Package (Maven)][package] | [API reference documentation][api_reference_doc] | [Product Documentation][product_documentation] | [Samples][samples_readme]\n\n## Getting started\n\n### Prerequisites\n\n- A [Java Development Kit (JDK)][jdk_link], version 8 or later.\n- [Azure Subscription][azure_subscription]\n- An existing Azure Purview account.\n\nFor more information about creating the account see [here][create_azure_purview_account].\n\n### Include the Package\n\n[//]: # ({x-version-update-start;com.azure:azure-analytics-purview-scanning;current})\n```xml\n<dependency>\n  <groupId>com.azure</groupId>\n  <artifactId>azure-analytics-purview-scanning</artifactId>\n  <version>1.0.0-beta.2</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n\n### Authenticate the client\nIn order to interact with the Azure Purview service, your client must present an Azure Active Directory bearer token to the service.\n\nThe simplest way of providing a bearer token is to use the `DefaultAzureCredential` authentication method by providing client secret credentials is being used in this getting started section but you can find more ways to authenticate with [azure-identity][azure_identity].\n\n\n#### Create SystemScanRulesetsClient with Azure Active Directory Credential\n\nYou can authenticate with Azure Active Directory using the [Azure Identity library][azure_identity].\n\nTo use the [DefaultAzureCredential][DefaultAzureCredential] provider shown below, or other credential providers provided with the Azure SDK, please include the `azure-identity` package:\n\n[//]: # ({x-version-update-start;com.azure:azure-identity;dependency})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-identity</artifactId>\n    <version>1.9.0</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: AZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET.\n\n##### Example\n```java readme-sample-createSystemScanRulesetsClient\nSystemScanRulesetsClient client = new PurviewScanningClientBuilder()\n    .endpoint(System.getenv(\"SCANNING_ENDPOINT\"))\n    .credential(new DefaultAzureCredentialBuilder().build())\n    .buildSystemScanRulesetsClient();\n```\n\n## Key concepts\n\n## Examples\nMore examples can be found in [samples][samples_code].\n\n## Troubleshooting\n\n### Enabling Logging\n\nAzure SDKs for Java offer a consistent logging story to help aid in troubleshooting application errors and expedite\ntheir resolution. The logs produced will capture the flow of an application before reaching the terminal state to help\nlocate the root issue. View the [logging][logging] wiki for guidance about enabling logging.\n\n## Next steps\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a [Contributor License Agreement (CLA)][cla] declaring that you have the right to, and actually do, grant us the rights to use your contribution.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n[samples]: src/samples/java/com/azure/analytics/purview/scanning\n[source_code]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/purview/azure-analytics-purview-scanning/src\n[samples_code]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/purview/azure-analytics-purview-scanning/src/samples/\n[azure_subscription]: https://azure.microsoft.com/free/\n[api_reference_doc]: https://azure.github.io/azure-sdk-for-java\n[product_documentation]: https://azure.microsoft.com/services/purview/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/identity/azure-identity\n[DefaultAzureCredential]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity/README.md#defaultazurecredential\n[jdk_link]: https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable\n[package]: https://mvnrepository.com/artifact/com.azure/azure-analytics-purview-scanning\n[samples_readme]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/purview/azure-analytics-purview-scanning/src/samples/README.md\n[protocol_method]: https://github.com/Azure/azure-sdk-for-java/wiki/Protocol-Methods\n[create_azure_purview_account]: https://docs.microsoft.com/azure/purview/\n[logging]: https://github.com/Azure/azure-sdk-for-java/wiki/Logging-with-Azure-SDK\n[cla]: https://cla.opensource.microsoft.com/\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fpurview%2Fazure-analytics-purview-scanning%2FREADME.png)\n",
        "repo_name": "purview/azure-analytics-purview-scanning",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/purview/azure-analytics-purview-scanning",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Purview Sharing client library for Java\n\nMicrosoft Purview Data Sharing allows data to be shared in-place from Azure Data Lake Storage Gen2 and Azure Storage accounts, both within and across organizations.\n\nData providers may use Microsoft Purview Data Sharing to share their data directly with other users and partners (known as data consumers) without data duplication, while centrally managing their sharing activities from within Microsoft Purview.\n\nFor data consumers, Microsoft Purview Data Sharing provides near real-time access to data shared with them by a provider.\n\nKey capabilities delivered by Microsoft Purview Data Sharing include:\n- Share data within the organization or with partners and customers outside of the organization (within the same Azure tenant or across different Azure tenants).\n- Share data from ADLS Gen2 or Blob storage in-place without data duplication.\n- Share data with multiple recipients.\n- Access shared data in near real time.\n- Manage sharing relationships and keep track of who the data is shared with/from, for each ADLSGen2 or Blob Storage account.\n- Terminate share access at any time.\n- Flexible experience through Microsoft Purview governance portal or via REST APIs.\n\n**Please visit the following resources to learn more about this product.**\n\n[Source code][source_code] | [Package (Maven)][package] | [API reference documentation][docs] | [Product Documentation][share_product_documentation] | [Samples][samples_code]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n- An existing Microsoft Purview account.\n\nFor more information about creating a Microsoft Purview account, see [here][create_azure_purview_account].\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n- [Product documentation][share_product_documentation]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure:azure-analytics-purview-sharing;current})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-analytics-purview-sharing</artifactId>\n    <version>1.0.0-beta.2</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Authentication\n\n[Azure Identity][azure_identity] package provides the default implementation for authenticating the client.\n\n## Key concepts\n\n__Data Provider:__ A data provider is the individual who creates a share by selecting a data source, choosing which files and folders to share, and who to share them with. Microsoft Purview then sends an invitation to each data consumer.\n\n__Data Consumer:__ A data consumer is the individual who accepts the invitation by specifying a target storage account in their own Azure subscription that they'll use to access the shared data.\n\n## Examples\n\n### Data Provider Examples\n\nThe following code examples demonstrate how data providers can use the Microsoft Azure Java SDK for Purview Sharing to manage their sharing activity.\n\n#### Create a Sent Share Client\n```java com.azure.analytics.purview.sharing.createSentShareClient\nSentSharesClient sentSharesClient =\n        new SentSharesClientBuilder()\n                .credential(new DefaultAzureCredentialBuilder().build())\n                .endpoint(\"https://<my-account-name>.purview.azure.com/share\")\n                .buildClient();\n```\n\n#### Create a Sent Share\n\nTo begin sharing data, the data provider must first create a sent share that identifies the data they would like to share.\n\n```java com.azure.analytics.purview.sharing.createSentShare\nSentSharesClient sentSharesClient =\n        new SentSharesClientBuilder()\n                .credential(new DefaultAzureCredentialBuilder().build())\n                .endpoint(\"https://<my-account-name>.purview.azure.com/share\")\n                .buildClient();\n\nString sentShareId = UUID.randomUUID().toString();\nInPlaceSentShare sentShare = new InPlaceSentShare()\n        .setDisplayName(\"sample-share\")\n        .setDescription(\"A sample share\");\n\nStoreReference storeReference = new StoreReference()\n        .setReferenceName(\"/subscriptions/de06c3a0-4610-4ca0-8cbb-bbdac204bd65/resourceGroups/provider-storage-rg/providers/Microsoft.Storage/storageAccounts/providerstorage\")\n        .setType(ReferenceNameType.ARM_RESOURCE_REFERENCE);\n\nStorageAccountPath storageAccountPath = new StorageAccountPath()\n        .setContainerName(\"container-name\")\n        .setReceiverPath(\"shared-file-name.txt\")\n        .setSenderPath(\"original/file-name.txt\");\n\nList<StorageAccountPath> paths = new ArrayList<>();\npaths.add(storageAccountPath);\n\nBlobStorageArtifact artifact = new BlobStorageArtifact()\n        .setStoreReference(storeReference)\n        .setPaths(paths);\n\nsentShare.setArtifact(artifact);\n\nSyncPoller<BinaryData, BinaryData> response =\n        sentSharesClient.beginCreateOrReplaceSentShare(\n                sentShareId,\n                BinaryData.fromObject(sentShare),\n                new RequestOptions());\n```\n\n#### Send a Share Invitation to a User\n\nAfter creating a sent share, the data provider can extend invitations to consumers who may then view the shared data.  In this example, an invitation is extended to an individual by specifying their email address.\n\n```java com.azure.analytics.purview.sharing.sendUserInvitation\nSentSharesClient sentSharesClient =\n        new SentSharesClientBuilder()\n                .credential(new DefaultAzureCredentialBuilder().build())\n                .endpoint(\"https://<my-account-name>.purview.azure.com/share\")\n                .buildClient();\n\nString sentShareId = \"<sent-share-id>\";\nString sentShareInvitationId = UUID.randomUUID().toString();\n\nUserInvitation sentShareInvitation = new UserInvitation()\n        .setTargetEmail(\"receiver@microsoft.com\")\n        .setNotify(true)\n        .setExpirationDate(OffsetDateTime.now().plusDays(60));\n\nResponse<BinaryData> response =\n        sentSharesClient.createSentShareInvitationWithResponse(\n                sentShareId,\n                sentShareInvitationId,\n                BinaryData.fromObject(sentShareInvitation),\n                new RequestOptions());\n```\n\n#### Send a Share Invitation to a Service\n\nData providers can also extend invitations to services or applications by specifying the tenant id and object id of the service.  *The object id used for sending an invitation to a service must be the object id associated with the Enterprise Application (not the application registration)*.\n\n```java com.azure.analytics.purview.sharing.sendServiceInvitation\nSentSharesClient sentSharesClient =\n        new SentSharesClientBuilder()\n                .credential(new DefaultAzureCredentialBuilder().build())\n                .endpoint(\"https://<my-account-name>.purview.azure.com/share\")\n                .buildClient();\n\nString sentShareId = \"<sent-share-id>\";\nString sentShareInvitationId = UUID.randomUUID().toString();\n\nServiceInvitation sentShareInvitation = new ServiceInvitation()\n        .setTargetActiveDirectoryId(UUID.fromString(\"<tenant-id>\"))\n        .setTargetObjectId(UUID.fromString(\"<object-id>\"))\n        .setExpirationDate(OffsetDateTime.now().plusDays(60));\n\nResponse<BinaryData> response =\n        sentSharesClient.createSentShareInvitationWithResponse(\n                sentShareId,\n                sentShareInvitationId,\n                BinaryData.fromObject(sentShareInvitation),\n                new RequestOptions());\n```\n\n#### Get a Sent Share\n\nAfter creating a sent share, data providers can retrieve it.\n\n```java com.azure.analytics.purview.sharing.getSentShare\nSentSharesClient sentSharesClient =\n        new SentSharesClientBuilder()\n                .credential(new DefaultAzureCredentialBuilder().build())\n                .endpoint(\"https://<my-account-name>.purview.azure.com/share\")\n                .buildClient();\n\nSentShare retrievedSentShare = sentSharesClient\n        .getSentShareWithResponse(\"<sent-share-id>\", new RequestOptions())\n        .getValue()\n        .toObject(SentShare.class);\n```\n\n#### List Sent Shares\n\nData providers can also retrieve a list of the sent shares they have created.\n\n```java com.azure.analytics.purview.sharing.listSentShares\nSentSharesClient sentSharesClient =\n        new SentSharesClientBuilder()\n                .credential(new DefaultAzureCredentialBuilder().build())\n                .endpoint(\"https://<my-account-name>.purview.azure.com/share\")\n                .buildClient();\n\nPagedIterable<BinaryData> sentShareResults = sentSharesClient.listSentShares(\n                \"/subscriptions/de06c3a0-4610-4ca0-8cbb-bbdac204bd65/resourceGroups/provider-storage-rg/providers/Microsoft.Storage/storageAccounts/providerstorage\",\n                new RequestOptions());\n\nList<SentShare> sentShares = sentShareResults.stream()\n    .map(binaryData -> binaryData.toObject(SentShare.class))\n    .collect(Collectors.toList());\n```\n\n#### Delete a Sent Share\n\nA sent share can be deleted by the data provider to stop sharing their data with all data consumers.\n\n```java com.azure.analytics.purview.sharing.deleteSentShare\nSentSharesClient sentSharesClient =\n        new SentSharesClientBuilder()\n                .credential(new DefaultAzureCredentialBuilder().build())\n                .endpoint(\"https://<my-account-name>.purview.azure.com/share\")\n                .buildClient();\n\nsentSharesClient.beginDeleteSentShare(\"<sent-share-id\", new RequestOptions());\n```\n\n#### Get Sent Share Invitation\n\nAfter creating a sent share invitation, data providers can retrieve it.\n\n```java com.azure.analytics.purview.sharing.getSentShareInvitation\nSentSharesClient sentSharesClient =\n        new SentSharesClientBuilder()\n                .credential(new DefaultAzureCredentialBuilder().build())\n                .endpoint(\"https://<my-account-name>.purview.azure.com/share\")\n                .buildClient();\n\nString sentShareId = \"<sent-share-id>\";\nString sentShareInvitationId = \"<sent-share-invitation-id>\";\n\nResponse<BinaryData> sentShareInvitation =\n        sentSharesClient.getSentShareInvitationWithResponse(sentShareId, sentShareInvitationId, new RequestOptions());\n```\n\n#### List Sent Share Invitations\n\nData providers can also retrieve a list of the sent share invitations they have created.\n\n```java com.azure.analytics.purview.sharing.listSentShareInvitations\nSentSharesClient sentSharesClient =\n        new SentSharesClientBuilder()\n                .credential(new DefaultAzureCredentialBuilder().build())\n                .endpoint(\"https://<my-account-name>.purview.azure.com/share\")\n                .buildClient();\n\nString sentShareId = \"<sent-share-id>\";\n\nRequestOptions requestOptions = new RequestOptions().addQueryParam(\"$orderBy\", \"properties/sentAt desc\");\nPagedIterable<BinaryData> response =\n        sentSharesClient.listSentShareInvitations(sentShareId, requestOptions);\n```\n\n#### Delete a Sent Share Invitation\n\nAn individual sent share invitation can be deleted by the data provider to stop sharing their data with the specific data consumer to whom the invitation was addressed.\n\n```java com.azure.analytics.purview.sharing.deleteSentShareInvitation\nSentSharesClient sentSharesClient =\n        new SentSharesClientBuilder()\n                .credential(new DefaultAzureCredentialBuilder().build())\n                .endpoint(\"https://<my-account-name>.purview.azure.com/share\")\n                .buildClient();\n\nString sentShareId = \"<sent-share-id>\";\nString sentShareInvitationId = \"<sent-share-invitation-id>\";\n\nsentSharesClient.beginDeleteSentShareInvitation(sentShareId, sentShareInvitationId, new RequestOptions());\n```\n\n### Data Consumer Examples\n\nThe following code examples demonstrate how data consumers can use the Microsoft Azure Java SDK for Purview Sharing to manage their sharing activity.\n\n#### Create a Received Share Client\n```java com.azure.analytics.purview.sharing.createReceivedShareClient\nReceivedSharesClient receivedSharesClient =\n        new ReceivedSharesClientBuilder()\n                .credential(new DefaultAzureCredentialBuilder().build())\n                .endpoint(\"https://<my-account-name>.purview.azure.com/share\")\n                .buildClient();\n```\n\n#### List Detached Received Shares\n\nTo begin viewing data shared with them, a data consumer must first retrieve a list of detached received shares.  Within this list, they can identify a detached received share to attach.\n\n```java com.azure.analytics.purview.sharing.listDetachedReceivedShares\nReceivedSharesClient receivedSharesClient =\n        new ReceivedSharesClientBuilder()\n                .credential(new DefaultAzureCredentialBuilder().build())\n                .endpoint(\"https://<my-account-name>.purview.azure.com/share\")\n                .buildClient();\n\nRequestOptions requestOptions = new RequestOptions().addQueryParam(\"$orderBy\", \"properties/createdAt desc\");\nPagedIterable<BinaryData> response = receivedSharesClient.listDetachedReceivedShares(requestOptions);\n```\n\n#### Attach a Receive Share\n\nOnce the data consumer has identified a received share, they can attach the received share to a location where they can access the shared data.  If the received share is already attached, the shared data will be made accessible at the new location specified.\n\n```java com.azure.analytics.purview.sharing.attachReceivedShare\nReceivedSharesClient receivedSharesClient =\n        new ReceivedSharesClientBuilder()\n                .credential(new DefaultAzureCredentialBuilder().build())\n                .endpoint(\"https://<my-account-name>.purview.azure.com/share\")\n                .buildClient();\n\nRequestOptions listRequestOptions = new RequestOptions().addQueryParam(\"$orderBy\", \"properties/createdAt desc\");\nPagedIterable<BinaryData> listResponse = receivedSharesClient.listDetachedReceivedShares(listRequestOptions);\n\nOptional<BinaryData> detachedReceivedShare = listResponse.stream().findFirst();\n\nif (!detachedReceivedShare.isPresent()) {\n    return;\n}\n\nString receivedShareId = new ObjectMapper()\n        .readValue(detachedReceivedShare.get().toString(), ObjectNode.class)\n        .get(\"id\")\n        .textValue();\n \nInPlaceReceivedShare receivedShare = new InPlaceReceivedShare()\n        .setDisplayName(\"my-received-share\");\n\nStoreReference storeReference = new StoreReference()\n        .setReferenceName(\"/subscriptions/de06c3a0-4610-4ca0-8cbb-bbdac204bd65/resourceGroups/consumer-storage-rg/providers/Microsoft.Storage/storageAccounts/consumerstorage\")\n        .setType(ReferenceNameType.ARM_RESOURCE_REFERENCE); \n\nBlobAccountSink sink = new BlobAccountSink()\n        .setStoreReference(storeReference)\n        .setContainerName(\"container-name\")\n        .setFolder(\"folderName\")\n        .setMountPath(\"optionalMountPath\");\n\nreceivedShare.setSink(sink);\n\nSyncPoller<BinaryData, BinaryData> createResponse =\n        receivedSharesClient.beginCreateOrReplaceReceivedShare(receivedShareId, BinaryData.fromObject(receivedShare), new RequestOptions());\n```\n\n#### Get Received Share\n\nA data consumer can retrieve an individual received share.\n\n```java com.azure.analytics.purview.sharing.getReceivedShare\nReceivedSharesClient receivedSharesClient =\n        new ReceivedSharesClientBuilder()\n                .credential(new DefaultAzureCredentialBuilder().build())\n                .endpoint(\"https://<my-account-name>.purview.azure.com/share\")\n                .buildClient();\n\nResponse<BinaryData> receivedShare =\n        receivedSharesClient.getReceivedShareWithResponse(\"<received-share-id>\", new RequestOptions());\n```\n\n#### List Attached Received Shares\n\nData consumers can also retrieve a list of their attached received shares.\n\n```java com.azure.analytics.purview.sharing.listAttachedReceivedShares\nReceivedSharesClient receivedSharesClient =\n        new ReceivedSharesClientBuilder()\n                .credential(new DefaultAzureCredentialBuilder().build())\n                .endpoint(\"https://<my-account-name>.purview.azure.com/share\")\n                .buildClient();\n\nRequestOptions requestOptions = new RequestOptions().addQueryParam(\"$orderBy\", \"properties/createdAt desc\");\nPagedIterable<BinaryData> response =\n        receivedSharesClient.listAttachedReceivedShares(\n                \"/subscriptions/de06c3a0-4610-4ca0-8cbb-bbdac204bd65/resourceGroups/consumer-storage-rg/providers/Microsoft.Storage/storageAccounts/consumerstorage\",\n                requestOptions);\n\nOptional<BinaryData> receivedShare = response.stream().findFirst();\n\nif (!receivedShare.isPresent()) {\n    return;\n}\n\nReceivedShare receivedShareResponse = receivedShare.get().toObject(InPlaceReceivedShare.class);\n```\n\n#### Delete a Received Share\n\nA received share can be deleted by the data consumer to terminate their access to shared data.\n\n```java com.azure.analytics.purview.sharing.deleteReceivedShare\nReceivedSharesClient receivedSharesClient =\n        new ReceivedSharesClientBuilder()\n                .credential(new DefaultAzureCredentialBuilder().build())\n                .endpoint(\"https://<my-account-name>.purview.azure.com/share\")\n                .buildClient();\n\nreceivedSharesClient.beginDeleteReceivedShare(\"<received-share-id>\", new RequestOptions()); \n```\n\n### Share Resource Examples\n\nThe following code examples demonstrate how to use the Microsoft Azure Java SDK for Purview Sharing to view share resources.  A share resource is the underlying resource from which a provider shares data or the destination where a consumer attaches data shared with them.\n\n#### List Share Resources\n\nA list of share resources can be retrieved to view all resources within an account where sharing activities have taken place.\n\n```java com.azure.analytics.purview.sharing.listShareResources\nShareResourcesClient shareResourcesClient =\n        new ShareResourcesClientBuilder()\n                .credential(new DefaultAzureCredentialBuilder().build())\n                .endpoint(\"https://<my-account-name>.purview.azure.com/share\")\n                .buildClient();\n\nPagedIterable<BinaryData> shareResourceResults = shareResourcesClient.listShareResources(new RequestOptions());\n \nList<ShareResource> shareResources = shareResourceResults.stream()\n    .map(binaryData -> binaryData.toObject(ShareResource.class))\n    .collect(Collectors.toList());\n```\n\n## Troubleshooting\n\n### Enabling Logging\n\nAzure SDKs for Java offer a consistent logging story to help aid in troubleshooting application errors and expedite\ntheir resolution. The logs produced will capture the flow of an application before reaching the terminal state to help\nlocate the root issue. View the [logging][logging] wiki for guidance about enabling logging.\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create new Pull Request\n\n<!-- LINKS -->\n[source_code]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/purview/azure-analytics-purview-sharing/src\n[package]: https://mvnrepository.com/artifact/com.azure/azure-analytics-purview-sharing\n[share_product_documentation]: https://docs.microsoft.com/azure/purview/concept-data-share\n[samples_code]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/purview/azure-analytics-purview-sharing/src/samples/\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[create_azure_purview_account]: https://docs.microsoft.com/azure/purview/create-catalog-portal\n[logging]: https://github.com/Azure/azure-sdk-for-java/wiki/Logging-with-Azure-SDK\n",
        "repo_name": "purview/azure-analytics-purview-sharing",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/purview/azure-analytics-purview-sharing",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Purview Workflow client library for Java\n\nWorkflows are automated, repeatable business processes that users can create within Microsoft Purview to validate and orchestrate CUD (create, update, delete) operations on their data entities. Enabling these processes allow organizations to track changes, enforce policy compliance, and ensure quality data across their data landscape.\n\nUse the client library for Purview Workflow to:\n\n- Manage workflows\n- Submit user requests and monitor workflow runs\n- View and respond to workflow tasks\n\n**For more details about how to use workflow, please refer to the [service documentation][product_documentation]**\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n- An existing Azure [Purview account][purview_resource].\n\n### Authentication\n\nSince the Workflow service uses an Azure Active Directory (AAD) bearer token for authentication and identification, an email address should be encoded into the token to allow for notification when using Workflow. It is recommended that the [Azure Identity][azure_identity] library be used  with a the [UsernamePasswordCredential][username_password_credential]. Before using the [Azure Identity][azure_identity] library with Workflow, [an application][app_registration] should be registered and used for the clientId passed to the [UsernamePasswordCredential][username_password_credential].\n\nTo use the [UsernamePasswordCredential][username_password_credential] provider shown below, or other credential providers provided with the Azure SDK, please include the `azure-identity` package:\n\n[//]: # ({x-version-update-start;com.azure:azure-identity;dependency})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-identity</artifactId>\n    <version>1.9.0</version>\n</dependency>\n```\n\nSet the values of the client ID, tenant ID of the AAD application as environment variables: AZURE_CLIENT_ID, AZURE_TENANT_ID.\nSet the value of user name and password of an AAD user as environment variables: USER_NAME, PASSWORD.\n\n```java readme-sample-createWorkflowClient\nPurviewWorkflowClient purviewWorkflowClient = new PurviewWorkflowClientBuilder()\n    .endpoint(Configuration.getGlobalConfiguration().get(\"ENDPOINT\", \"endpoint\"))\n    .credential(new UsernamePasswordCredentialBuilder()\n        .clientId(Configuration.getGlobalConfiguration().get(\"CLIENTID\", \"clientId\"))\n        .tenantId(Configuration.getGlobalConfiguration().get(\"TENANTID\", \"tenantId\"))\n        .username(Configuration.getGlobalConfiguration().get(\"USERNAME\", \"username\"))\n        .password(Configuration.getGlobalConfiguration().get(\"PASSWORD\", \"password\"))\n        .build())\n    .buildClient();\n\n```\n\n## Examples\n\nThe following section provides several code snippets covering some of the most common scenarios, including:\n\n- [Create Workflow](#create-workflow)\n- [Submit User Requests](#submit-user-requests)\n- [Approve Workflow Task](#approve-workflow-task)\n\n### Create workflow\n\n```java readme-sample-createWorkflow\nBinaryData workflowCreateOrUpdateCommand =\n    BinaryData.fromString(\n        \"{\\\"name\\\":\\\"Create glossary term workflow\\\",\\\"description\\\":\\\"\\\",\\\"triggers\\\":[{\\\"type\\\":\\\"when_term_creation_is_requested\\\",\\\"underGlossaryHierarchy\\\":\\\"/glossaries/20031e20-b4df-4a66-a61d-1b0716f3fa48\\\"}],\\\"isEnabled\\\":true,\\\"actionDag\\\":{\\\"actions\\\":{\\\"Startandwaitforanapproval\\\":{\\\"type\\\":\\\"Approval\\\",\\\"inputs\\\":{\\\"parameters\\\":{\\\"approvalType\\\":\\\"PendingOnAll\\\",\\\"title\\\":\\\"ApprovalRequestforCreateGlossaryTerm\\\",\\\"assignedTo\\\":[\\\"eece94d9-0619-4669-bb8a-d6ecec5220bc\\\"]}},\\\"runAfter\\\":{}},\\\"Condition\\\":{\\\"type\\\":\\\"If\\\",\\\"expression\\\":{\\\"and\\\":[{\\\"equals\\\":[\\\"@outputs('Startandwaitforanapproval')['body/outcome']\\\",\\\"Approved\\\"]}]},\\\"actions\\\":{\\\"Createglossaryterm\\\":{\\\"type\\\":\\\"CreateTerm\\\",\\\"runAfter\\\":{}},\\\"Sendemailnotification\\\":{\\\"type\\\":\\\"EmailNotification\\\",\\\"inputs\\\":{\\\"parameters\\\":{\\\"emailSubject\\\":\\\"GlossaryTermCreate-APPROVED\\\",\\\"emailMessage\\\":\\\"YourrequestforGlossaryTerm@{triggerBody()['request']['term']['name']}isapproved.\\\",\\\"emailRecipients\\\":[\\\"@{triggerBody()['request']['requestor']}\\\"]}},\\\"runAfter\\\":{\\\"Createglossaryterm\\\":[\\\"Succeeded\\\"]}}},\\\"else\\\":{\\\"actions\\\":{\\\"Sendrejectemailnotification\\\":{\\\"type\\\":\\\"EmailNotification\\\",\\\"inputs\\\":{\\\"parameters\\\":{\\\"emailSubject\\\":\\\"GlossaryTermCreate-REJECTED\\\",\\\"emailMessage\\\":\\\"YourrequestforGlossaryTerm@{triggerBody()['request']['term']['name']}isrejected.\\\",\\\"emailRecipients\\\":[\\\"@{triggerBody()['request']['requestor']}\\\"]}},\\\"runAfter\\\":{}}}},\\\"runAfter\\\":{\\\"Startandwaitforanapproval\\\":[\\\"Succeeded\\\"]}}}}}\");\nRequestOptions requestOptions = new RequestOptions();\nResponse<BinaryData> response =\n    purviewWorkflowClient.createOrReplaceWorkflowWithResponse(\n        \"4afb5752-e47f-43a1-8ba7-c696bf8d2745\", workflowCreateOrUpdateCommand, requestOptions);\n```\n\n### Submit user requests\n\n```java readme-sample-submitUserRequests\nBinaryData userRequestsPayload =\n    BinaryData.fromString(\n        \"{\\\"comment\\\":\\\"Thanks!\\\",\\\"operations\\\":[{\\\"type\\\":\\\"CreateTerm\\\",\\\"payload\\\":{\\\"glossaryTerm\\\":{\\\"name\\\":\\\"term\\\",\\\"anchor\\\":{\\\"glossaryGuid\\\":\\\"20031e20-b4df-4a66-a61d-1b0716f3fa48\\\"},\\\"nickName\\\":\\\"term\\\",\\\"status\\\":\\\"Approved\\\"}}}]}\");\nRequestOptions requestOptions = new RequestOptions();\nResponse<BinaryData> response =\n    purviewWorkflowClient.submitUserRequestsWithResponse(userRequestsPayload, requestOptions);\n```\n\n### Approve workflow task\n\n```java readme-sample-approveWorkflowTask\nBinaryData approvalResponseComment = BinaryData.fromString(\"{\\\"comment\\\":\\\"Thanks for raising this!\\\"}\");\nRequestOptions requestOptions = new RequestOptions();\nResponse<Void> response =\n    purviewWorkflowClient.approveApprovalTaskWithResponse(\n        \"69b57a00-f5de-4a17-a44a-6479adae373d\", approvalResponseComment, requestOptions);\n```\n\n## Key concepts\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a [Contributor License Agreement (CLA)][cla] declaring that you have the right to, and actually do, grant us the rights to use your contribution.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n[product_documentation]: https://learn.microsoft.com/azure/purview/concept-workflow\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[purview_resource]: https://docs.microsoft.com/azure/purview/create-catalog-portal\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity/README.md\n[app_registration]:https://learn.microsoft.com/azure/active-directory/develop/quickstart-register-app\n[username_password_credential]: https://learn.microsoft.com/java/api/com.azure.identity.usernamepasswordcredential?source=recommendations&view=azure-java-stable\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fpurview%2Fazure-analytics-purview-workflow%2FREADME.png)\n\n",
        "repo_name": "purview/azure-analytics-purview-workflow",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/purview/azure-analytics-purview-workflow",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager Purview client library for Java\n\nAzure Resource Manager Purview client library for Java.\n\nThis package contains Microsoft Azure SDK for Purview Management SDK. Creates a Microsoft.Purview management client. Package tag package-2021-07-01. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-purview;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-purview</artifactId>\n    <version>1.0.0-beta.2</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nPurviewManager manager = PurviewManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/purview/azure-resourcemanager-purview/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "purview/azure-resourcemanager-purview",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/purview/azure-resourcemanager-purview",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Quantum Jobs client library for Java\n\nAzure Quantum is a Microsoft Azure service that you can use to run quantum computing programs or solve optimization problems in the cloud.  Using the Azure Quantum tools and SDKs, you can create quantum programs and run them against different quantum simulators and machines.  You can use the Azure.Quantum.Jobs client library to:\n- Create, enumerate, and cancel quantum jobs\n- Enumerate provider status and quotas\n\n\n[Source code][source] | [API reference documentation](https://azure.github.io/azure-sdk-for-java/) | [Product documentation](https://docs.microsoft.com/azure/quantum/) | [Samples][samples]\n\n## Getting started\n\nThis section should include everything a developer needs to do to install and create their first client connection *very quickly*.\n\n### Install the package\n\nInstall the Azure Quantum Jobs client library for Java by adding the following to your pom.xml file:\n\n[//]: # ({x-version-update-start;com.azure:azure-quantum-jobs;current})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-quantum-jobs</artifactId>\n    <version>1.0.0-beta.1</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n**Prerequisites**: You must have an [Azure subscription][azure_subscription], [Azure Quantum workspace][azure_quantum_workspaces], [Azure storage account][azure_storage], and a [Java Development Kit (JDK)][jdk_link] of version 8 or later.\n\n### Authenticate the client\n\nTo authenticate with the service, you will have to pass a [`TokenCredential`][token-credential] to the client builder as described [below](#create-the-client).\n\n`TokenCredential` is the default Authentication mechanism used by Azure SDKs.\n\n## Key concepts\n\n`QuantumJobClient` is the root class to be used to authenticate and create, enumerate, and cancel jobs.\n\n`JobDetails` contains all the properties of a job.\n\n`ProviderStatus` contains status information for a provider.\n\n`QuantumJobQuota` contains quota properties.\n\n## Examples\n\n* [Create the client](#create-the-client)\n* [Get Container SAS URI](#get-container-sas-uri)\n* [Upload Input Data](#upload-input-data)\n* [Create The Job](#create-the-job)\n* [Get Job](#get-job)\n* [List Jobs](#list-jobs)\n\n### Create the client\n\nCreate an instance of the client of your choice by passing the following values to `QuantumClientBuilder` and then calling the appropriate build method.\n- [Subscription][subscriptions] - looks like XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX and can be found in your list of subscriptions on azure\n- [Resource Group][resource-groups] - a container that holds related resources for an Azure solution\n- [Workspace][workspaces] - a collection of assets associated with running quantum or optimization applications\n- [Host][location] - the host endpoint is \"https://{location}.quantum.azure.com\". Choose the best data center location by geographical region\n- [StorageContainerName][blob-storage] - your blob storage\n- [Credential][credentials] - used to authenticate\n\n```java readme-sample-getClients\nJobsClient jobsClient = new QuantumClientBuilder()\n    .credential(new DefaultAzureCredentialBuilder().build())\n    .host(\"{endpoint}\")\n    .subscriptionId(\"{subscriptionId}\")\n    .resourceGroupName(\"{resourceGroup}\")\n    .workspaceName(\"{workspaceName}\")\n    .buildJobsClient();\n\nStorageClient storageClient = new QuantumClientBuilder()\n    .credential(new DefaultAzureCredentialBuilder().build())\n    .host(\"{endpoint}\")\n    .subscriptionId(\"{subscriptionId}\")\n    .resourceGroupName(\"{resourceGroup}\")\n    .workspaceName(\"{workspaceName}\")\n    .buildStorageClient();\n```\n\n### Get Container SAS URI\n\nCreate a storage container to put your data in.\n\n```java readme-sample-getContainerSasUri\n// Get container URI with SAS key\nString containerName = \"{storageContainerName}\";\n\n// Create container if it doesn't already exist\nBlobContainerClient containerClient = new BlobContainerClientBuilder()\n    .containerName(containerName)\n    .endpoint(containerUri)\n    .buildClient();\nif (!containerClient.exists()) {\n    containerClient.create();\n}\n\n// Get connection string to the container\nString containerUri = storageClient.sasUri(\n    new BlobDetails().setContainerName(containerName)\n).getSasUri();\n```\n\n### Upload Input Data\n\nUsing the SAS URI, upload the json input data to the blob client.\nThis contains the parameters to be used with [Quantum Inspired Optimizations](https://docs.microsoft.com/azure/quantum/optimization-overview-introduction)\n\n```java readme-sample-uploadInputData\n// Get input data blob Uri with SAS key\nString blobName = \"{blobName}\";\nBlobDetails blobDetails = new BlobDetails()\n    .setContainerName(containerName)\n    .setBlobName(blobName);\nString inputDataUri = storageClient.sasUri(blobDetails).getSasUri();\n\n// Upload input data to blob\nBlobClient blobClient = new BlobClientBuilder()\n    .endpoint(inputDataUri)\n    .buildClient();\nString problemFilePath = FileSystems.getDefault().getPath(\"src/samples/resources/problem.json\").toString();\nblobClient.uploadFromFile(problemFilePath);\n```\n### Create The Job\n\nNow that you've uploaded your problem definition to Azure Storage, you can use the `create()` method in `JobsClient` or `JobsAsyncClient`, or the `createWithResponse()` method in `JobsAsyncClient` to define an Azure Quantum job.\n\n```java readme-sample-createTheJob\nString jobId = String.format(\"job-%s\", UUID.randomUUID());\nJobDetails createJobDetails = new JobDetails()\n    .setContainerUri(containerUri)\n    .setId(jobId)\n    .setInputDataFormat(\"microsoft.qio.v2\")\n    .setOutputDataFormat(\"microsoft.qio-results.v2\")\n    .setProviderId(\"microsoft\")\n    .setTarget(\"microsoft.paralleltempering-parameterfree.cpu\")\n    .setName(\"{jobName}\");\nJobDetails jobDetails = jobsClient.create(jobId, createJobDetails);\n```\n\n### Get Job\n\nTo retrieve a specific job by its ID, you can use `get()` from `JobsClient` or `JobsAsyncClient`, or `getWithResponse()` in `JobsAsyncClient`.\n\n```java readme-sample-getJob\n// Get the job that we've just created based on its jobId\nJobDetails myJob = jobsClient.get(jobId);\n```\n\n### List Jobs\n\nTo enumerate all the jobs in the workspace, use the `list()` method from `JobClient` or `JobAsyncClient`, or from `JobAsyncClient` use `listSinglePage()` or `listNextPage()`.\n\n```java readme-sample-listJobs\nPagedIterable<JobDetails> jobs = jobsClient.list();\njobs.forEach(job -> System.out.println(job.getName()));\n```\n\n## Troubleshooting\n\nAll Quantum Jobs service operations will throw a RequestFailedException on failure with helpful ErrorCodes. Many of these errors are recoverable.\n\n## Next steps\n\n*  Visit our [Product documentation](https://docs.microsoft.com/azure/quantum/) to learn more about Azure Quantum.\n\n## Contributing\n\nSee the [CONTRIBUTING.md][contributing] for details on building,\ntesting, and contributing to this library.\n\nThis project welcomes contributions and suggestions.  Most contributions require\nyou to agree to a Contributor License Agreement (CLA) declaring that you have\nthe right to, and actually do, grant us the rights to use your contribution. For\ndetails, visit [cla.microsoft.com][cla].\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc].\nFor more information see the [Code of Conduct FAQ][coc_faq]\nor contact [opencode@microsoft.com][coc_contact] with any\nadditional questions or comments.\n\n<!-- LINKS -->\n[source]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/quantum/azure-quantum-jobs/src\n[style-guide-msft]: https://docs.microsoft.com/style-guide/capitalization\n[token-credential]: https://docs.microsoft.com/dotnet/api/azure.core.tokencredential?view=azure-dotnet\n[resource-groups]: https://docs.microsoft.com/azure/azure-resource-manager/management/manage-resource-groups-portal\n[workspaces]: https://docs.microsoft.com/azure/quantum/how-to-create-quantum-workspaces-with-the-azure-portal\n[location]: https://azure.microsoft.com/global-infrastructure/services/?products=quantum\n[blob-storage]: https://docs.microsoft.com/azure/storage/blobs/storage-blobs-introduction\n[contributing]: https://github.com/Azure/azure-sdk-for-java/tree/main/CONTRIBUTING.md\n[subscriptions]: https://ms.portal.azure.com/#blade/Microsoft_Azure_Billing/SubscriptionsBlade\n[credentials]: https://docs.microsoft.com/dotnet/api/overview/azure/identity-readme#credentials\n[style-guide-msft]: https://docs.microsoft.com/style-guide/capitalization\n[style-guide-cloud]: https://aka.ms/azsdk/cloud-style-guide\n[jdk_link]: https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable\n[azure_subscription]: https://azure.microsoft.com/free\n[azure_quantum]: https://azure.microsoft.com/services/quantum/\n[azure_quantum_workspaces]: https://docs.microsoft.com/azure/quantum/how-to-create-quantum-workspaces-with-the-azure-portal\n[azure_storage]: https://azure.microsoft.com/free/storage/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_contact]: mailto:opencode@microsoft.com\n[samples]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/quantum/azure-quantum-jobs/src/samples/java/com/azure/quantum/jobs\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Ftemplate%2Fazure-sdk-template%2FREADME.png)\n",
        "repo_name": "quantum/azure-quantum-jobs",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/quantum/azure-quantum-jobs",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager Qumulo client library for Java\n\nAzure Resource Manager Qumulo client library for Java.\n\nThis package contains Microsoft Azure SDK for Qumulo Management SDK.  Package tag package-2022-10. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-qumulo;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-qumulo</artifactId>\n    <version>1.0.0</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nQumuloManager manager = QumuloManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/qumulo/azure-resourcemanager-qumulo/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "qumulo/azure-resourcemanager-qumulo",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/qumulo/azure-resourcemanager-qumulo",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager quota client library for Java\n\nAzure Resource Manager quota client library for Java.\n\nThis package contains Microsoft Azure SDK for quota Management SDK. Microsoft Azure Quota Resource Provider. Package tag package-2023-02-01. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-quota;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-quota</artifactId>\n    <version>1.0.0-beta.3</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nQuotaManager manager = QuotaManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/quota/azure-resourcemanager-quota/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "quota/azure-resourcemanager-quota",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/quota/azure-resourcemanager-quota",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager RecoveryServices client library for Java\n\nAzure Resource Manager RecoveryServices client library for Java.\n\nThis package contains Microsoft Azure SDK for RecoveryServices Management SDK. Recovery Services Client. Package tag package-2023-02. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-recoveryservices;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-recoveryservices</artifactId>\n    <version>1.1.0</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nRecoveryServicesManager manager = RecoveryServicesManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/recoveryservices/azure-resourcemanager-recoveryservices/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "recoveryservices/azure-resourcemanager-recoveryservices",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/recoveryservices/azure-resourcemanager-recoveryservices",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager RecoveryServicesBackup client library for Java\n\nAzure Resource Manager RecoveryServicesBackup client library for Java.\n\nThis package contains Microsoft Azure SDK for RecoveryServicesBackup Management SDK. Open API 2.0 Specs for Azure RecoveryServices Backup service. Package tag package-2023-02. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-recoveryservicesbackup;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-recoveryservicesbackup</artifactId>\n    <version>1.1.0</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nRecoveryServicesBackupManager manager = RecoveryServicesBackupManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/recoveryservicesbackup/azure-resourcemanager-recoveryservicesbackup/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "recoveryservicesbackup/azure-resourcemanager-recoveryservicesbackup",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/recoveryservicesbackup/azure-resourcemanager-recoveryservicesbackup",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager SiteRecovery client library for Java\n\nAzure Resource Manager SiteRecovery client library for Java.\n\nThis package contains Microsoft Azure SDK for SiteRecovery Management SDK.  Package tag package-2022-10. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-recoveryservicessiterecovery;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-recoveryservicessiterecovery</artifactId>\n    <version>1.0.0-beta.1</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nSiteRecoveryManager manager = SiteRecoveryManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/recoveryservicessiterecovery/azure-resourcemanager-recoveryservicessiterecovery/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "recoveryservicessiterecovery/azure-resourcemanager-recoveryservicessiterecovery",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/recoveryservicessiterecovery/azure-resourcemanager-recoveryservicessiterecovery",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager RedisEnterprise client library for Java\n\nAzure Resource Manager RedisEnterprise client library for Java.\n\nThis package contains Microsoft Azure SDK for RedisEnterprise Management SDK. REST API for managing Redis Enterprise resources in Azure. Package tag package-preview-2023-03. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-redisenterprise;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-redisenterprise</artifactId>\n    <version>1.1.0-beta.3</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nRedisEnterpriseManager manager = RedisEnterpriseManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/redisenterprise/azure-resourcemanager-redisenterprise/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "redisenterprise/azure-resourcemanager-redisenterprise",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/redisenterprise/azure-resourcemanager-redisenterprise",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager Relay client library for Java\n\nAzure Resource Manager Relay client library for Java.\n\nThis package contains Microsoft Azure SDK for Relay Management SDK. Use these API to manage Azure Relay resources through Azure Resource Manager. Package tag package-2017-04. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-relay;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-relay</artifactId>\n    <version>1.0.0-beta.2</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nRelayManager manager = RelayManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/relay/azure-resourcemanager-relay/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n",
        "repo_name": "relay/azure-resourcemanager-relay",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/relay/azure-resourcemanager-relay",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Remote Rendering client library for Java\n\nAzure Remote Rendering (ARR) is a service that enables you to render high-quality, interactive 3D content in the cloud and stream it in real time to devices, such as the HoloLens 2.\n\nThis SDK offers functionality to convert assets to the format expected by the runtime, and also to manage\nthe lifetime of remote rendering sessions.\n\n> NOTE: Once a session is running, a client application will connect to it using one of the \"runtime SDKs\".\n> These SDKs are designed to best support the needs of an interactive application doing 3d rendering.\n> They are available in [.NET][dotnet_api] and [C++][cpp_api].\n\n[Source code][source_code] | [API reference documentation][api_reference_doc] | [Product Documentation][product_documentation]\n\n## Getting started\n\n### Prerequisites\n- [Java Development Kit (JDK)][jdk_link], version 8 or later.\n- [Azure Subscription][azure_subscription]\n- [Azure Remote Rendering account][remote_rendering_account] to use this package.\n\n### Include the package\n\n#### Include the BOM file\n\nPlease include the azure-sdk-bom to your project to take dependency on the General Availability (GA) version of the library. In the following snippet, replace the {bom_version_to_target} placeholder with the version number.\nTo learn more about the BOM, see the [AZURE SDK BOM README](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/boms/azure-sdk-bom/README.md).\n\n```xml\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>com.azure</groupId>\n            <artifactId>azure-sdk-bom</artifactId>\n            <version>{bom_version_to_target}</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n```\nand then include the direct dependency in the dependencies section without the version tag as shown below.\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-mixedreality-remoterendering</artifactId>\n  </dependency>\n</dependencies>\n```\n\n#### Include direct dependency\n\n**Note:** This version targets Azure Remote Rendering service API version v2021-01-01.\n\nAdd the following Maven dependency:\n\n[//]: # ({x-version-update-start;com.azure:azure-mixedreality-remoterendering;dependency})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-mixedreality-remoterendering</artifactId>\n    <version>1.1.18</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Authenticate the client\n\nConstructing a remote rendering client requires an authenticated account, and a remote rendering endpoint.\nAn account consists of its accountId and an account domain.\nFor an account created in the eastus region, the account domain will have the form \"eastus.mixedreality.azure.com\".\nThere are several forms of authentication:\n\n- Account Key authentication\n  - Account keys enable you to get started quickly with using Azure Remote Rendering. But before you deploy your application\n    to production, we recommend that you update your app to use Azure AD authentication.\n- Azure Active Directory (AD) token authentication\n  - If you're building an enterprise application and your company is using Azure AD as its identity system, you can use\n    user-based Azure AD authentication in your app. You then grant access to your Azure Remote Rendering accounts by using\n    your existing Azure AD security groups. You can also grant access directly to users in your organization.\n  - Otherwise, we recommend that you obtain Azure AD tokens from a web service that supports your app. We recommend this\n    method for production applications because it allows you to avoid embedding the credentials for access to Azure Spatial\n    Anchors in your client application.\n\nSee [here][how_to_authenticate] for detailed instructions and information.\n\nIn all the following examples, the client is constructed with a `RemoteRenderingClientBuilder` object.\nThe parameters are always the same, except for the credential object, which is explained in each example.\nThe `remoteRenderingEndpoint` parameter is a URL that determines the region in which the service performs its work.\nAn example is `https://remoterendering.eastus2.mixedreality.azure.com`.\n\n> NOTE: For converting assets, it is preferable to pick a region close to the storage containing the assets.\n\n> NOTE: For rendering, it is strongly recommended that you pick the closest region to the devices using the service. \n> The time taken to communicate with the server impacts the quality of the experience.\n\n#### Authenticating with account key authentication\n\nUse the `AzureKeyCredential` object to use an account identifier and account key to authenticate:\n\n```java readme-sample-createClientWithAccountKey\nAzureKeyCredential credential = new AzureKeyCredential(environment.getAccountKey());\n\nRemoteRenderingClient client = new RemoteRenderingClientBuilder()\n    .accountId(environment.getAccountId())\n    .accountDomain(environment.getAccountDomain())\n    .endpoint(environment.getServiceEndpoint())\n    .credential(credential)\n    .buildClient();\n```\n\n#### Authenticating with an AAD client secret\n\nUse the `ClientSecretCredential` object to perform client secret authentication.\n\n```java readme-sample-createClientWithAAD\nClientSecretCredential credential = new ClientSecretCredentialBuilder()\n    .tenantId(environment.getTenantId())\n    .clientId(environment.getClientId())\n    .clientSecret(environment.getClientSecret())\n    .authorityHost(\"https://login.microsoftonline.com/\" + environment.getTenantId())\n    .build();\n\nRemoteRenderingClient client = new RemoteRenderingClientBuilder()\n    .accountId(environment.getAccountId())\n    .accountDomain(environment.getAccountDomain())\n    .endpoint(environment.getServiceEndpoint())\n    .credential(credential)\n    .buildClient();\n```\n\n#### Authenticating a user using device code authentication\n\nUse the `DeviceCodeCredential` object to perform device code authentication.\n\n```java readme-sample-createClientWithDeviceCode\nDeviceCodeCredential credential = new DeviceCodeCredentialBuilder()\n    .challengeConsumer((DeviceCodeInfo deviceCodeInfo) -> {\n        logger.info(deviceCodeInfo.getMessage());\n    })\n    .clientId(environment.getClientId())\n    .tenantId(environment.getTenantId())\n    .authorityHost(\"https://login.microsoftonline.com/\" + environment.getTenantId())\n    .build();\n\nRemoteRenderingClient client = new RemoteRenderingClientBuilder()\n    .accountId(environment.getAccountId())\n    .accountDomain(environment.getAccountDomain())\n    .endpoint(environment.getServiceEndpoint())\n    .credential(credential)\n    .buildClient();\n```\n\nSee [here](https://github.com/AzureAD/microsoft-authentication-library-for-dotnet/wiki/Device-Code-Flow) for more\ninformation about using device code authentication flow.\n\n#### Interactive authentication with DefaultAzureCredential\n\nUse the `DefaultAzureCredential` object:\n\n```java readme-sample-createClientWithDefaultAzureCredential\nDefaultAzureCredential credential = new DefaultAzureCredentialBuilder().build();\n\nRemoteRenderingClient client = new RemoteRenderingClientBuilder()\n    .accountId(environment.getAccountId())\n    .accountDomain(environment.getAccountDomain())\n    .endpoint(environment.getServiceEndpoint())\n    .credential(credential)\n    .buildClient();\n```\n\n#### Authenticating with a static access token\n\nYou can pass a Mixed Reality access token as an `AccessToken` previously retrieved from the\n[Mixed Reality STS service][sts_sdk]\nto be used with a Mixed Reality client library:\n\n```java readme-sample-createClientWithStaticAccessToken\n// GetMixedRealityAccessTokenFromWebService is a hypothetical method that retrieves\n// a Mixed Reality access token from a web service. The web service would use the\n// MixedRealityStsClient and credentials to obtain an access token to be returned\n// to the client.\nAccessToken accessToken = getMixedRealityAccessTokenFromWebService();\n\nRemoteRenderingClient client = new RemoteRenderingClientBuilder()\n    .accountId(environment.getAccountId())\n    .accountDomain(environment.getAccountDomain())\n    .endpoint(environment.getServiceEndpoint())\n    .accessToken(accessToken)\n    .buildClient();\n```\n\n## Key concepts\n\n### RemoteRenderingClient\n\nThe `RemoteRenderingClient` is the client library used to access the RemoteRenderingService.\nIt provides methods to create and manage asset conversions and rendering sessions.\n\n## Examples\n\n- [Convert a simple asset](#convert-a-simple-asset)\n- [Convert a more complex asset](#convert-a-more-complex-asset)\n- [Get the output when an asset conversion has finished](#get-the-output-when-an-asset-conversion-has-finished)\n- [List conversions](#list-conversions)\n- [Create a session](#create-a-rendering-session)\n- [Extend the lease time of a session](#extend-the-lease-time-of-a-session)\n- [List sessions](#list-rendering-sessions)\n- [Stop a session](#stop-a-session)\n\n### Convert a simple asset\n\nWe assume that a RemoteRenderingClient has been constructed as described in the [Authenticate the Client](#authenticate-the-client) section.\nThe following snippet describes how to request that \"box.fbx\", found at the root of the blob container at the given URL, gets converted.\n\n```java readme-sample-convertSimpleAsset\nAssetConversionOptions conversionOptions = new AssetConversionOptions()\n    .setInputStorageContainerUrl(getStorageURL())\n    .setInputRelativeAssetPath(\"box.fbx\")\n    .setOutputStorageContainerUrl(getStorageURL());\n\n// A randomly generated UUID is a good choice for a conversionId.\nString conversionId = UUID.randomUUID().toString();\n\nSyncPoller<AssetConversion, AssetConversion> conversionOperation = client.beginConversion(conversionId, conversionOptions);\n```\n\nThe output files will be placed beside the input asset.\n\n### Convert a more complex asset\n\nAssets can reference other files, and blob containers can contain files belonging to many different assets.\nIn this example, we show how prefixes can be used to organize your blobs and how to convert an asset to take account of that organization.\nAssume that the blob container at `inputStorageURL` contains many files, including \"Bicycle/bicycle.gltf\", \"Bicycle/bicycle.bin\" and \"Bicycle/saddleTexture.jpg\".\n(So the prefix \"Bicycle\" is acting very like a folder.)\nWe want to convert the gltf so that it has access to the other files which share the prefix, without requiring the conversion service to access any other files.\nTo keep things tidy, we also want the output files to be written to a different storage container and given a common prefix: \"ConvertedBicycle\".\nThe code is as follows:\n\n```java readme-sample-convertMoreComplexAsset\nAssetConversionOptions conversionOptions = new AssetConversionOptions()\n    .setInputStorageContainerUrl(inputStorageURL)\n    .setInputRelativeAssetPath(\"bicycle.gltf\")\n    .setInputBlobPrefix(\"Bicycle\")\n    .setOutputStorageContainerUrl(outputStorageURL)\n    .setOutputBlobPrefix(\"ConvertedBicycle\");\n\nString conversionId = UUID.randomUUID().toString();\n\nSyncPoller<AssetConversion, AssetConversion> conversionOperation = client.beginConversion(conversionId, conversionOptions);\n```\n\n> NOTE: when a prefix is given in the input options, then the input file parameter is assumed to be relative to that prefix.\n> The same applies to the output file parameter in output options.\n\n### Get the output when an asset conversion has finished\n\nConverting an asset can take anywhere from seconds to hours.\nThis code uses an existing conversionOperation and polls regularly until the conversion has finished or failed.\nThe default polling period is 10 seconds.\nNote that a conversionOperation can be constructed from the conversionId of an existing conversion and a client.\n\n```java readme-sample-convertMoreComplexAssetCheckStatus\nAssetConversion conversion = conversionOperation.getFinalResult();\nif (conversion.getStatus() == AssetConversionStatus.SUCCEEDED) {\n    logger.info(\"Conversion succeeded: Output written to {}\", conversion.getOutputAssetUrl());\n} else if (conversion.getStatus() == AssetConversionStatus.FAILED) {\n    logger.error(\"Conversion failed: {} {}\", conversion.getError().getCode(), conversion.getError().getMessage());\n} else {\n    logger.error(\"Unexpected conversion status: {}\", conversion.getStatus());\n}\n```\n\n### List conversions\n\nYou can get information about your conversions using the `listConversions` method.\nThis method may return conversions which have yet to start, conversions which are running and conversions which have finished.\nIn this example, we just list the output URLs of successful conversions started in the last day.\n\n```java readme-sample-listConversions\nfor (AssetConversion conversion : client.listConversions()) {\n    if ((conversion.getStatus() == AssetConversionStatus.SUCCEEDED)\n        && (conversion.getCreationTime().isAfter(OffsetDateTime.now().minusDays(1)))) {\n        logger.info(\"Output Asset URL: {}\", conversion.getOutputAssetUrl());\n    }\n}\n```\n\n### Create a rendering session\n\nWe assume that a RemoteRenderingClient has been constructed as described in the [Authenticate the Client](#authenticate-the-client) section.\nThe following snippet describes how to request that a new rendering session be started.\n\n```java readme-sample-createRenderingSession\nBeginSessionOptions options = new BeginSessionOptions()\n    .setMaxLeaseTime(Duration.ofMinutes(30))\n    .setSize(RenderingSessionSize.STANDARD);\n\n// A randomly generated GUID is a good choice for a sessionId.\nString sessionId = UUID.randomUUID().toString();\n\nSyncPoller<RenderingSession, RenderingSession> startSessionOperation = client.beginSession(sessionId, options);\n```\n\n### Extend the lease time of a session\n\nIf a session is approaching its maximum lease time, but you want to keep it alive, you will need to make a call to increase\nits maximum lease time.\nThis example shows how to query the current properties and then extend the lease if it will expire soon.\n\n> NOTE: The runtime SDKs also offer this functionality, and in many typical scenarios, you would use them to\n> extend the session lease.\n\n```java readme-sample-queryAndUpdateASession\nRenderingSession currentSession = client.getSession(sessionId);\n\nDuration sessionTimeAlive = Duration.between(OffsetDateTime.now(), currentSession.getCreationTime()).abs();\nif (currentSession.getMaxLeaseTime().minus(sessionTimeAlive).toMinutes() < 2) {\n    Duration newLeaseTime = currentSession.getMaxLeaseTime().plus(Duration.ofMinutes(30));\n    UpdateSessionOptions longerLeaseOptions = new UpdateSessionOptions().maxLeaseTime(newLeaseTime);\n    client.updateSession(sessionId, longerLeaseOptions);\n}\n```\n\n### List rendering sessions\n\nYou can get information about your sessions using the `listSessions` method.\nThis method may return sessions which have yet to start and sessions which are ready.\n\n```java readme-sample-listRenderingSessions\nfor (RenderingSession session : client.listSessions()) {\n    if (session.getStatus() == RenderingSessionStatus.STARTING) {\n        logger.info(\"Session {} is starting.\");\n    } else if (session.getStatus() == RenderingSessionStatus.READY) {\n        logger.info(\"Session {} is ready at host {}\", session.getId(), session.getHostname());\n    } else if (session.getStatus() == RenderingSessionStatus.ERROR) {\n        logger.error(\"Session {} encountered an error: {} {}\", session.getId(), session.getError().getCode(), session.getError().getMessage());\n    } else {\n        logger.error(\"Session {} has unexpected status {}\", session.getId(), session.getStatus());\n    }\n}\n```\n\n### Stop a session\n\nThe following code will stop a running session with given id.\n\n```java readme-sample-stopASession\nclient.endSession(sessionId);\n```\n\n## Troubleshooting\n\nFor general troubleshooting advice concerning Azure Remote Rendering, see [the Troubleshoot page][troubleshoot] for remote rendering at docs.microsoft.com.\n\nThe client methods will throw exceptions if the request cannot be made.\nHowever, in the case of both conversions and sessions, the requests can succeed but the requested operation may not be successful.\nIn this case, no exception will be thrown, but the returned objects can be inspected to understand what happened.\n\nIf the asset in a conversion is invalid, the conversion operation will return an AssetConversion object\nwith a Failed status and carrying a RemoteRenderingServiceError with details.\nOnce the conversion service is able to process the file, an &lt;assetName&gt;.result.json file will be written to the output container.\nIf the input asset is invalid, then that file will contain a more detailed description of the problem.\n\nSimilarly, sometimes when a session is requested, the session ends up in an error state.\nThe startSessionOperation method will return a RenderingSession object, but that object will have an Error status and carry a\nRemoteRenderingServiceError with details.\n\n## Next steps\n\n- Read the [Product documentation](https://docs.microsoft.com/azure/remote-rendering/)\n- Learn about the runtime SDKs:\n  - .NET: https://docs.microsoft.com/dotnet/api/microsoft.azure.remoterendering\n  - C++: https://docs.microsoft.com/cpp/api/remote-rendering/\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License\nAgreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution.\nFor details, visit [https://cla.microsoft.com](https://cla.microsoft.com).\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the\nPR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this\nonce across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact\n[opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\n<!-- LINKS -->\n[azure_subscription]: https://azure.microsoft.com/free\n[jdk_link]: https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable\n[performance_tuning]: https://github.com/Azure/azure-sdk-for-java/wiki/Performance-Tuning\n[source_code]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/remoterendering/azure-mixedreality-remoterendering/src\n[remote_rendering_account]: https://docs.microsoft.com/azure/remote-rendering/how-tos/create-an-account\n[LogLevels]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core/src/main/java/com/azure/core/util/logging/ClientLogger.java\n[product_documentation]: https://docs.microsoft.com/azure/remote-rendering/\n[cpp_api]: https://docs.microsoft.com/cpp/api/remote-rendering/\n[dotnet_api]: https://docs.microsoft.com/dotnet/api/microsoft.azure.remoterendering\n[how_to_authenticate]: https://docs.microsoft.com/azure/remote-rendering/how-tos/authentication\n[sts_sdk]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/mixedreality/azure-mixedreality-authentication\n[troubleshoot]: https://docs.microsoft.com/azure/remote-rendering/resources/troubleshoot\n[api_reference_doc]: https://docs.microsoft.com/rest/api/mixedreality/\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fmixedreality%2Fazure-mixedreality-remoterendering%2FREADME.png)\n",
        "repo_name": "remoterendering/azure-mixedreality-remoterendering",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/remoterendering/azure-mixedreality-remoterendering",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager reservations client library for Java\n\nAzure Resource Manager reservations client library for Java.\n\nThis package contains Microsoft Azure SDK for reservations Management SDK. This API describe Azure Reservation. Package tag package-2022-11. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-reservations;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-reservations</artifactId>\n    <version>1.0.0-beta.2</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nReservationsManager manager = ReservationsManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/reservations/azure-resourcemanager-reservations/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "reservations/azure-resourcemanager-reservations",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/reservations/azure-resourcemanager-reservations",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager Appliances client library for Java\n\nAzure Resource Manager Appliances client library for Java.\n\nThis package contains Microsoft Azure SDK for Appliances Management SDK. The appliances Rest API spec. Package tag package-2022-10-27. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-resourceconnector;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-resourceconnector</artifactId>\n    <version>1.0.0-beta.2</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nAppliancesManager manager = AppliancesManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourceconnector/azure-resourcemanager-resourceconnector/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "resourceconnector/azure-resourcemanager-resourceconnector",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourceconnector/azure-resourcemanager-resourceconnector",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager ResourceGraph client library for Java\n\nAzure Resource Manager ResourceGraph client library for Java.\n\nThis package contains Microsoft Azure SDK for ResourceGraph Management SDK. Azure Resource Graph API Reference. Package tag package-2021-03. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-resourcegraph;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-resourcegraph</artifactId>\n    <version>1.0.0</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nResourceGraphManager manager = ResourceGraphManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n```java\nQueryRequest queryRequest = new QueryRequest()\n    .withSubscriptions(Collections.singletonList(subscriptionId))\n    .withQuery(\"Resources | project name, type | limit 5 | order by name asc\");\n// table format\nqueryRequest.withOptions(new QueryRequestOptions().withResultFormat(ResultFormat.TABLE));\nQueryResponse response = manager.resourceProviders().resources(queryRequest);\n\n\n// object array format\nqueryRequest.withOptions(new QueryRequestOptions().withResultFormat(ResultFormat.OBJECT_ARRAY));\nresponse = manager.resourceProviders().resources(queryRequest);\n\n```\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcegraph/azure-resourcemanager-resourcegraph/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "resourcegraph/azure-resourcemanager-resourcegraph",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcegraph/azure-resourcemanager-resourcegraph",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager ResourceHealth client library for Java\n\nAzure Resource Manager ResourceHealth client library for Java.\n\nThis package contains Microsoft Azure SDK for ResourceHealth Management SDK. The Resource Health Client. Package tag package-2022-10. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-resourcehealth;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-resourcehealth</artifactId>\n    <version>1.1.0-beta.1</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nResourceHealthManager manager = ResourceHealthManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcehealth/azure-resourcemanager-resourcehealth/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "resourcehealth/azure-resourcemanager-resourcehealth",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcehealth/azure-resourcemanager-resourcehealth",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager App Platform client library for Java\n\nAzure Resource Manager App Platform client library for Java\n\nFor documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-appplatform;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-appplatform</artifactId>\n    <version>2.27.0</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java readme-sample-authenticate\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nAppPlatformManager manager = AppPlatformManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\nSee [Samples][sample] for code snippets and samples.\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[sample]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/SAMPLE.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n",
        "repo_name": "resourcemanager/azure-resourcemanager-appplatform",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/azure-resourcemanager-appplatform",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager App Service client library for Java\n\nAzure Resource Manager App Service client library for Java\n\nFor documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-appservice;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-appservice</artifactId>\n    <version>2.27.0</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java readme-sample-authenticate\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nAppServiceManager manager = AppServiceManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\nSee [Samples][sample] for code snippets and samples.\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[sample]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/SAMPLE.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n",
        "repo_name": "resourcemanager/azure-resourcemanager-appservice",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/azure-resourcemanager-appservice",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager Authorization client library for Java\n\nAzure Resource Manager Authorization client library for Java\n\nFor documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-authorization;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-authorization</artifactId>\n    <version>2.27.0</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java readme-sample-authenticate\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nAuthorizationManager manager = AuthorizationManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\nSee [Samples][sample] for code snippets and samples.\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[sample]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/SAMPLE.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n",
        "repo_name": "resourcemanager/azure-resourcemanager-authorization",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/azure-resourcemanager-authorization",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager CDN client library for Java\n\nAzure Resource Manager CDN client library for Java\n\nFor documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-cdn;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-cdn</artifactId>\n    <version>2.27.0</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java readme-sample-authenticate\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nCdnManager manager = CdnManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\nSee [Samples][sample] for code snippets and samples.\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[sample]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/SAMPLE.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n",
        "repo_name": "resourcemanager/azure-resourcemanager-cdn",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/azure-resourcemanager-cdn",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager Compute client library for Java\n\nAzure Resource Manager Compute client library for Java\n\nFor documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-compute;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-compute</artifactId>\n    <version>2.27.0</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java readme-sample-authenticate\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nComputeManager manager = ComputeManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\nSee [Samples][sample] for code snippets and samples.\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[sample]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/SAMPLE.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n",
        "repo_name": "resourcemanager/azure-resourcemanager-compute",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/azure-resourcemanager-compute",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager Container Instance client library for Java\n\nAzure Resource Manager Container Instance client library for Java\n\nFor documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-containerinstance;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-containerinstance</artifactId>\n    <version>2.27.0</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java readme-sample-authenticate\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nContainerInstanceManager manager = ContainerInstanceManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\nSee [Samples][sample] for code snippets and samples.\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[sample]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/SAMPLE.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n",
        "repo_name": "resourcemanager/azure-resourcemanager-containerinstance",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/azure-resourcemanager-containerinstance",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager Containerregistry client library for Java\n\nAzure Resource Manager Containerregistry client library for Java\n\nFor documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-containerregistry;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-containerregistry</artifactId>\n    <version>2.27.0</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java readme-sample-authenticate\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nContainerRegistryManager manager = ContainerRegistryManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\nSee [Samples][sample] for code snippets and samples.\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[sample]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/SAMPLE.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n",
        "repo_name": "resourcemanager/azure-resourcemanager-containerregistry",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/azure-resourcemanager-containerregistry",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager Containerservice client library for Java\n\nAzure Resource Manager Containerservice client library for Java\n\nFor documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-containerservice;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-containerservice</artifactId>\n    <version>2.27.0</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java readme-sample-authenticate\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nContainerServiceManager manager = ContainerServiceManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\nSee [Samples][sample] for code snippets and samples.\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[sample]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/SAMPLE.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n",
        "repo_name": "resourcemanager/azure-resourcemanager-containerservice",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/azure-resourcemanager-containerservice",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager Cosmos client library for Java\n\nAzure Resource Manager Cosmos client library for Java\n\nFor documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-cosmos;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-cosmos</artifactId>\n    <version>2.27.0</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java readme-sample-authenticate\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nCosmosManager manager = CosmosManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\nSee [Samples][sample] for code snippets and samples.\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[sample]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/SAMPLE.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n",
        "repo_name": "resourcemanager/azure-resourcemanager-cosmos",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/azure-resourcemanager-cosmos",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager dns client library for Java\n\nAzure Resource Manager dns client library for Java\n\nFor documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-dns;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-dns</artifactId>\n    <version>2.27.0</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java readme-sample-authenticate\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nDnsZoneManager manager = DnsZoneManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\nSee [Samples][sample] for code snippets and samples.\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[sample]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/SAMPLE.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n",
        "repo_name": "resourcemanager/azure-resourcemanager-dns",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/azure-resourcemanager-dns",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager EventHubs client library for Java\n\nAzure Resource Manager EventHubs client library for Java\n\nFor documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-eventhubs;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-eventhubs</artifactId>\n    <version>2.27.0</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java readme-sample-authenticate\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nEventHubsManager manager = EventHubsManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\nSee [Samples][sample] for code snippets and samples.\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[sample]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/SAMPLE.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n",
        "repo_name": "resourcemanager/azure-resourcemanager-eventhubs",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/azure-resourcemanager-eventhubs",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager keyvault client library for Java\n\nAzure Resource Manager keyvault client library for Java\n\nFor documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-keyvault;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-keyvault</artifactId>\n    <version>2.27.0</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java readme-sample-authenticate\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nKeyVaultManager manager = KeyVaultManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\nSee [Samples][sample] for code snippets and samples.\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[sample]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/SAMPLE.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n",
        "repo_name": "resourcemanager/azure-resourcemanager-keyvault",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/azure-resourcemanager-keyvault",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager monitor client library for Java\n\nAzure Resource Manager monitor client library for Java\n\nFor documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-monitor;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-monitor</artifactId>\n    <version>2.27.0</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java readme-sample-authenticate\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nMonitorManager manager = MonitorManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\nSee [Samples][sample] for code snippets and samples.\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[sample]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/SAMPLE.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n",
        "repo_name": "resourcemanager/azure-resourcemanager-monitor",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/azure-resourcemanager-monitor",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager msi client library for Java\n\nAzure Resource Manager msi client library for Java\n\nFor documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-msi;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-msi</artifactId>\n    <version>2.27.0</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java readme-sample-authenticate\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nMsiManager manager = MsiManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\nSee [Samples][sample] for code snippets and samples.\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[sample]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/SAMPLE.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n",
        "repo_name": "resourcemanager/azure-resourcemanager-msi",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/azure-resourcemanager-msi",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager network client library for Java\n\nAzure Resource Manager network client library for Java\n\nFor documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-network;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-network</artifactId>\n    <version>2.27.0</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java readme-sample-authenticate\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nNetworkManager manager = NetworkManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\nSee [Samples][sample] for code snippets and samples.\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[sample]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/SAMPLE.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n",
        "repo_name": "resourcemanager/azure-resourcemanager-network",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/azure-resourcemanager-network",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager Performance test client library for Java\n\nRepresents Performance tests for Azure Management Libraries for Java.\n\nFor documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## Getting started\n\n### Prerequisites\n\n- Java Development Kit (JDK) with version 8 or above\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-perf;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-perf</artifactId>\n    <version>1.0.0-beta.1</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n## Key concepts\n\n## Examples\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n",
        "repo_name": "resourcemanager/azure-resourcemanager-perf",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/azure-resourcemanager-perf",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager Private DNS client library for Java\n\nAzure Resource Manager Private DNS client library for Java\n\nFor documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-privatedns;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-privatedns</artifactId>\n    <version>2.27.0</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java readme-sample-authenticate\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nPrivateDnsZoneManager manager = PrivateDnsZoneManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\nSee [Samples][sample] for code snippets and samples.\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[sample]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/SAMPLE.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n",
        "repo_name": "resourcemanager/azure-resourcemanager-privatedns",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/azure-resourcemanager-privatedns",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager redis cache client library for Java\n\nAzure Resource Manager redis cache client library for Java\n\nFor documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-redis;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-redis</artifactId>\n    <version>2.27.0</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java readme-sample-authenticate\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nRedisManager manager = RedisManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\nSee [Samples][sample] for code snippets and samples.\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[sample]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/SAMPLE.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n",
        "repo_name": "resourcemanager/azure-resourcemanager-redis",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/azure-resourcemanager-redis",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager resources client library for Java\n\nAzure Resource Manager resources client library for Java\n\nFor documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-resources;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-resources</artifactId>\n    <version>2.27.0</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java readme-sample-authenticate\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nResourceManager manager = ResourceManager\n    .authenticate(credential, profile)\n    .withDefaultSubscription();\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\nSee [Samples][sample] for code snippets and samples.\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[sample]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/SAMPLE.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n",
        "repo_name": "resourcemanager/azure-resourcemanager-resources",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/azure-resourcemanager-resources",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager sample client library for Java\n\nAzure Resource Manager sample client library for Java\n\nFor documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## Getting started\n\n### Prerequisites\n\n- Java Development Kit (JDK) with version 8 or above\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager</artifactId>\n    <version>2.27.0</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n## Key concepts\n\n## Examples\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n",
        "repo_name": "resourcemanager/azure-resourcemanager-samples",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/azure-resourcemanager-samples",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager Cognitive Search client library for Java\n\nAzure Resource Manager Cognitive Search client library for Java\n\nFor documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-search;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-search</artifactId>\n    <version>2.27.0</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java readme-sample-authenticate\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nSearchServiceManager manager = SearchServiceManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\nSee [Samples][sample] for code snippets and samples.\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[sample]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/SAMPLE.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n",
        "repo_name": "resourcemanager/azure-resourcemanager-search",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/azure-resourcemanager-search",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager ServiceBus client library for Java\n\nAzure Resource Manager ServiceBus client library for Java\n\nFor documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-servicebus;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-servicebus</artifactId>\n    <version>2.27.0</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java readme-sample-authenticate\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nServiceBusManager manager = ServiceBusManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\nSee [Samples][sample] for code snippets and samples.\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[sample]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/SAMPLE.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n",
        "repo_name": "resourcemanager/azure-resourcemanager-servicebus",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/azure-resourcemanager-servicebus",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager sql client library for Java\n\nAzure Resource Manager sql client library for Java\n\nFor documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-sql;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-sql</artifactId>\n    <version>2.27.0</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java readme-sample-authenticate\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nSqlServerManager manager = SqlServerManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\nSee [Samples][sample] for code snippets and samples.\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[sample]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/SAMPLE.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n",
        "repo_name": "resourcemanager/azure-resourcemanager-sql",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/azure-resourcemanager-sql",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager storage client library for Java\n\nAzure Resource Manager storage client library for Java\n\nFor documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-storage;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-storage</artifactId>\n    <version>2.27.0</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java readme-sample-authenticate\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nStorageManager manager = StorageManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\nSee [Samples][sample] for code snippets and samples.\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[sample]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/SAMPLE.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n",
        "repo_name": "resourcemanager/azure-resourcemanager-storage",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/azure-resourcemanager-storage",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager Test shared library for Java\n\nAzure Resource Manager test library for Java\n\nFor documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## Getting started\n\n### Prerequisites\n\n- Java Development Kit (JDK) with version 8 or above\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-test;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-test</artifactId>\n    <version>2.0.0-beta.1</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n## Key concepts\n\n## Examples\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n",
        "repo_name": "resourcemanager/azure-resourcemanager-test",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/azure-resourcemanager-test",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager traffic manager client library for Java\n\nAzure Resource Manager traffic manager client library for Java\n\nFor documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-trafficmanager;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-trafficmanager</artifactId>\n    <version>2.27.0</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java readme-sample-authenticate\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nTrafficManager manager = TrafficManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\nSee [Samples][sample] for code snippets and samples.\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[sample]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/SAMPLE.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n",
        "repo_name": "resourcemanager/azure-resourcemanager-trafficmanager",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/azure-resourcemanager-trafficmanager",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager client library for Java\n\nAzure Resource Manager client library for Java\n\nFor documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager</artifactId>\n    <version>2.27.0</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java readme-sample-authenticate\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nAzureResourceManager azure = AzureResourceManager\n    .authenticate(credential, profile)\n    .withDefaultSubscription();\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\nSee [Samples][sample] for code snippets and samples.\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[sample]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/SAMPLE.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n",
        "repo_name": "resourcemanager/azure-resourcemanager",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/azure-resourcemanager",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager App Service client library for Java (Hybrid)\n\nAzure Resource Manager App Service client library for Java (Hybrid) using [API Profiles][api_profile] to allow building hybrid cloud solutions\nthat target both Azure and Azure Stack Hub.\n\nFor documentation on how to use this package, please see [Azure Management Libraries for Java (Hybrid)][resourcemanagerhybrid_lib].\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-appservice</artifactId>\n    <version>1.0.0-hybrid</version>\n</dependency>\n```\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java com.azure.resourcemanager.appservice.authenticate\nString armEndpoint = \"https://management.<region>.<your-domain>\";\nAzureProfile profile = new AzureProfile(getAzureEnvironmentFromArmEndpoint(armEndpoint));\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nAppServiceManager manager = AppServiceManager\n    .authenticate(credential, profile);\n```\n\nChange `armEndpoint` to point to the Azure Resource Manager endpoint of your Azure Stack Hub. The azure environment's\nproperties above can be populated with the following example:\n\n```java com.azure.resourcemanager.appservice.getazureenvironment\nprivate static AzureEnvironment getAzureEnvironmentFromArmEndpoint(String armEndpoint) {\n    // Create HTTP client and request\n    HttpClient httpClient = HttpClient.createDefault();\n\n    HttpRequest request = new HttpRequest(HttpMethod.GET,\n            String.format(\"%s/metadata/endpoints?api-version=2019-10-01\", armEndpoint))\n            .setHeader(\"accept\", \"application/json\");\n\n    // Execute the request and read the response\n    HttpResponse response = httpClient.send(request).block();\n    if (response.getStatusCode() != 200) {\n        throw new RuntimeException(\"Failed : HTTP error code : \" + response.getStatusCode());\n    }\n    String body = response.getBodyAsString().block();\n    try {\n        ArrayNode metadataArray = JacksonAdapter.createDefaultSerializerAdapter()\n                .deserialize(body, ArrayNode.class, SerializerEncoding.JSON);\n\n        if (metadataArray == null || metadataArray.isEmpty()) {\n            throw new RuntimeException(\"Failed to find metadata : \" + body);\n        }\n\n        JsonNode metadata = metadataArray.iterator().next();\n        AzureEnvironment azureEnvironment = new AzureEnvironment(new HashMap<String, String>() {\n            {\n                put(\"managementEndpointUrl\", metadata.at(\"/authentication/audiences/0\").asText());\n                put(\"resourceManagerEndpointUrl\", armEndpoint);\n                put(\"galleryEndpointUrl\", metadata.at(\"/gallery\").asText());\n                put(\"activeDirectoryEndpointUrl\", metadata.at(\"/authentication/loginEndpoint\").asText());\n                put(\"activeDirectoryResourceId\", metadata.at(\"/authentication/audiences/0\").asText());\n                put(\"activeDirectoryGraphResourceId\", metadata.at(\"/graph\").asText());\n                put(\"storageEndpointSuffix\", \".\" + metadata.at(\"/suffixes/storage\").asText());\n                put(\"keyVaultDnsSuffix\", \".\" + metadata.at(\"/suffixes/keyVaultDns\").asText());\n            }\n        });\n        return azureEnvironment;\n    } catch (IOException ioe) {\n        ioe.printStackTrace();\n        throw new RuntimeException(ioe);\n    }\n}\n```\n\nWhen targeting a hybrid solution to global Azure instead of your Azure Stack Hub, `AzureEnvironment.AZURE` can be used instead.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\nSee [Samples][sample] for code snippets and samples.\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[sample]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/SAMPLE.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[api_profile]: https://docs.microsoft.com/azure-stack/user/azure-stack-version-profiles\n[resourcemanagerhybrid_lib]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanagerhybrid\n",
        "repo_name": "resourcemanagerhybrid/azure-resourcemanager-appservice",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanagerhybrid/azure-resourcemanager-appservice",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager Authorization client library for Java (Hybrid)\n\nAzure Resource Manager Authorization client library for Java (Hybrid) using [API Profiles][api_profile] to allow building hybrid cloud solutions\nthat target both Azure and Azure Stack Hub.\n\nFor documentation on how to use this package, please see [Azure Management Libraries for Java (Hybrid)][resourcemanagerhybrid_lib].\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-authorization</artifactId>\n    <version>1.0.0-hybrid</version>\n</dependency>\n```\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java com.azure.resourcemanager.authorization.authenticate\nString armEndpoint = \"https://management.<region>.<your-domain>\";\nAzureProfile profile = new AzureProfile(getAzureEnvironmentFromArmEndpoint(armEndpoint));\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nAuthorizationManager manager = AuthorizationManager\n    .authenticate(credential, profile);\n```\n\nChange `armEndpoint` to point to the Azure Resource Manager endpoint of your Azure Stack Hub. The azure environment's\nproperties above can be populated with the following example:\n\n```java com.azure.resourcemanager.authorization.getazureenvironment\nprivate static AzureEnvironment getAzureEnvironmentFromArmEndpoint(String armEndpoint) {\n    // Create HTTP client and request\n    HttpClient httpClient = HttpClient.createDefault();\n\n    HttpRequest request = new HttpRequest(HttpMethod.GET,\n            String.format(\"%s/metadata/endpoints?api-version=2019-10-01\", armEndpoint))\n            .setHeader(\"accept\", \"application/json\");\n\n    // Execute the request and read the response\n    HttpResponse response = httpClient.send(request).block();\n    if (response.getStatusCode() != 200) {\n        throw new RuntimeException(\"Failed : HTTP error code : \" + response.getStatusCode());\n    }\n    String body = response.getBodyAsString().block();\n    try {\n        ArrayNode metadataArray = JacksonAdapter.createDefaultSerializerAdapter()\n                .deserialize(body, ArrayNode.class, SerializerEncoding.JSON);\n\n        if (metadataArray == null || metadataArray.isEmpty()) {\n            throw new RuntimeException(\"Failed to find metadata : \" + body);\n        }\n\n        JsonNode metadata = metadataArray.iterator().next();\n        AzureEnvironment azureEnvironment = new AzureEnvironment(new HashMap<String, String>() {\n            {\n                put(\"managementEndpointUrl\", metadata.at(\"/authentication/audiences/0\").asText());\n                put(\"resourceManagerEndpointUrl\", armEndpoint);\n                put(\"galleryEndpointUrl\", metadata.at(\"/gallery\").asText());\n                put(\"activeDirectoryEndpointUrl\", metadata.at(\"/authentication/loginEndpoint\").asText());\n                put(\"activeDirectoryResourceId\", metadata.at(\"/authentication/audiences/0\").asText());\n                put(\"activeDirectoryGraphResourceId\", metadata.at(\"/graph\").asText());\n                put(\"storageEndpointSuffix\", \".\" + metadata.at(\"/suffixes/storage\").asText());\n                put(\"keyVaultDnsSuffix\", \".\" + metadata.at(\"/suffixes/keyVaultDns\").asText());\n            }\n        });\n        return azureEnvironment;\n    } catch (IOException ioe) {\n        ioe.printStackTrace();\n        throw new RuntimeException(ioe);\n    }\n}\n```\n\nWhen targeting a hybrid solution to global Azure instead of your Azure Stack Hub, `AzureEnvironment.AZURE` can be used instead.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\nSee [Samples][sample] for code snippets and samples.\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[sample]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/SAMPLE.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[api_profile]: https://docs.microsoft.com/azure-stack/user/azure-stack-version-profiles\n[resourcemanagerhybrid_lib]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanagerhybrid\n",
        "repo_name": "resourcemanagerhybrid/azure-resourcemanager-authorization",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanagerhybrid/azure-resourcemanager-authorization",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager Compute client library for Java (Hybrid)\n\nAzure Resource Manager Compute client library for Java (Hybrid) using [API Profiles][api_profile] to allow building hybrid cloud solutions\nthat target both Azure and Azure Stack Hub.\n\nFor documentation on how to use this package, please see [Azure Management Libraries for Java (Hybrid)][resourcemanagerhybrid_lib].\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-compute</artifactId>\n    <version>1.0.0-hybrid</version>\n</dependency>\n```\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java com.azure.resourcemanager.compute.authenticate\nString armEndpoint = \"https://management.<region>.<your-domain>\";\nAzureProfile profile = new AzureProfile(getAzureEnvironmentFromArmEndpoint(armEndpoint));\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nComputeManager manager = ComputeManager\n    .authenticate(credential, profile);\n```\n\nChange `armEndpoint` to point to the Azure Resource Manager endpoint of your Azure Stack Hub. The azure environment's\nproperties above can be populated with the following example:\n\n```java com.azure.resourcemanager.compute.getazureenvironment\nprivate static AzureEnvironment getAzureEnvironmentFromArmEndpoint(String armEndpoint) {\n    // Create HTTP client and request\n    HttpClient httpClient = HttpClient.createDefault();\n\n    HttpRequest request = new HttpRequest(HttpMethod.GET,\n            String.format(\"%s/metadata/endpoints?api-version=2019-10-01\", armEndpoint))\n            .setHeader(\"accept\", \"application/json\");\n\n    // Execute the request and read the response\n    HttpResponse response = httpClient.send(request).block();\n    if (response.getStatusCode() != 200) {\n        throw new RuntimeException(\"Failed : HTTP error code : \" + response.getStatusCode());\n    }\n    String body = response.getBodyAsString().block();\n    try {\n        ArrayNode metadataArray = JacksonAdapter.createDefaultSerializerAdapter()\n                .deserialize(body, ArrayNode.class, SerializerEncoding.JSON);\n\n        if (metadataArray == null || metadataArray.isEmpty()) {\n            throw new RuntimeException(\"Failed to find metadata : \" + body);\n        }\n\n        JsonNode metadata = metadataArray.iterator().next();\n        AzureEnvironment azureEnvironment = new AzureEnvironment(new HashMap<String, String>() {\n            {\n                put(\"managementEndpointUrl\", metadata.at(\"/authentication/audiences/0\").asText());\n                put(\"resourceManagerEndpointUrl\", armEndpoint);\n                put(\"galleryEndpointUrl\", metadata.at(\"/gallery\").asText());\n                put(\"activeDirectoryEndpointUrl\", metadata.at(\"/authentication/loginEndpoint\").asText());\n                put(\"activeDirectoryResourceId\", metadata.at(\"/authentication/audiences/0\").asText());\n                put(\"activeDirectoryGraphResourceId\", metadata.at(\"/graph\").asText());\n                put(\"storageEndpointSuffix\", \".\" + metadata.at(\"/suffixes/storage\").asText());\n                put(\"keyVaultDnsSuffix\", \".\" + metadata.at(\"/suffixes/keyVaultDns\").asText());\n            }\n        });\n        return azureEnvironment;\n    } catch (IOException ioe) {\n        ioe.printStackTrace();\n        throw new RuntimeException(ioe);\n    }\n}\n```\n\nWhen targeting a hybrid solution to global Azure instead of your Azure Stack Hub, `AzureEnvironment.AZURE` can be used instead.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\nSee [Samples][sample] for code snippets and samples.\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[sample]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/SAMPLE.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[api_profile]: https://docs.microsoft.com/azure-stack/user/azure-stack-version-profiles\n[resourcemanagerhybrid_lib]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanagerhybrid\n",
        "repo_name": "resourcemanagerhybrid/azure-resourcemanager-compute",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanagerhybrid/azure-resourcemanager-compute",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager Containerregistry client library for Java (Hybrid)\n\nAzure Resource Manager Containerregistry client library for Java (Hybrid) using [API Profiles][api_profile] to allow building hybrid cloud solutions\nthat target both Azure and Azure Stack Hub.\n\nFor documentation on how to use this package, please see [Azure Management Libraries for Java (Hybrid)][resourcemanagerhybrid_lib].\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-containerregistry</artifactId>\n    <version>1.0.0-hybrid</version>\n</dependency>\n```\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java com.azure.resourcemanager.containerregistry.authenticate\nString armEndpoint = \"https://management.<region>.<your-domain>\";\nAzureProfile profile = new AzureProfile(getAzureEnvironmentFromArmEndpoint(armEndpoint));\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nContainerRegistryManager manager = ContainerRegistryManager\n    .authenticate(credential, profile);\n```\n\nChange `armEndpoint` to point to the Azure Resource Manager endpoint of your Azure Stack Hub. The azure environment's\nproperties above can be populated with the following example:\n\n```java com.azure.resourcemanager.containerregistry.getazureenvironment\nprivate static AzureEnvironment getAzureEnvironmentFromArmEndpoint(String armEndpoint) {\n    // Create HTTP client and request\n    HttpClient httpClient = HttpClient.createDefault();\n\n    HttpRequest request = new HttpRequest(HttpMethod.GET,\n            String.format(\"%s/metadata/endpoints?api-version=2019-10-01\", armEndpoint))\n            .setHeader(\"accept\", \"application/json\");\n\n    // Execute the request and read the response\n    HttpResponse response = httpClient.send(request).block();\n    if (response.getStatusCode() != 200) {\n        throw new RuntimeException(\"Failed : HTTP error code : \" + response.getStatusCode());\n    }\n    String body = response.getBodyAsString().block();\n    try {\n        ArrayNode metadataArray = JacksonAdapter.createDefaultSerializerAdapter()\n                .deserialize(body, ArrayNode.class, SerializerEncoding.JSON);\n\n        if (metadataArray == null || metadataArray.isEmpty()) {\n            throw new RuntimeException(\"Failed to find metadata : \" + body);\n        }\n\n        JsonNode metadata = metadataArray.iterator().next();\n        AzureEnvironment azureEnvironment = new AzureEnvironment(new HashMap<String, String>() {\n            {\n                put(\"managementEndpointUrl\", metadata.at(\"/authentication/audiences/0\").asText());\n                put(\"resourceManagerEndpointUrl\", armEndpoint);\n                put(\"galleryEndpointUrl\", metadata.at(\"/gallery\").asText());\n                put(\"activeDirectoryEndpointUrl\", metadata.at(\"/authentication/loginEndpoint\").asText());\n                put(\"activeDirectoryResourceId\", metadata.at(\"/authentication/audiences/0\").asText());\n                put(\"activeDirectoryGraphResourceId\", metadata.at(\"/graph\").asText());\n                put(\"storageEndpointSuffix\", \".\" + metadata.at(\"/suffixes/storage\").asText());\n                put(\"keyVaultDnsSuffix\", \".\" + metadata.at(\"/suffixes/keyVaultDns\").asText());\n            }\n        });\n        return azureEnvironment;\n    } catch (IOException ioe) {\n        ioe.printStackTrace();\n        throw new RuntimeException(ioe);\n    }\n}\n```\n\nWhen targeting a hybrid solution to global Azure instead of your Azure Stack Hub, `AzureEnvironment.AZURE` can be used instead.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\nSee [Samples][sample] for code snippets and samples.\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[sample]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/SAMPLE.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[api_profile]: https://docs.microsoft.com/azure-stack/user/azure-stack-version-profiles\n[resourcemanagerhybrid_lib]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanagerhybrid\n",
        "repo_name": "resourcemanagerhybrid/azure-resourcemanager-containerregistry",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanagerhybrid/azure-resourcemanager-containerregistry",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager Containerservice client library for Java (Hybrid)\n\nAzure Resource Manager Containerservice client library for Java (Hybrid) using [API Profiles][api_profile] to allow building hybrid cloud solutions\nthat target both Azure and Azure Stack Hub.\n\nFor documentation on how to use this package, please see [Azure Management Libraries for Java (Hybrid)][resourcemanagerhybrid_lib].\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-containerservice</artifactId>\n    <version>1.0.0-hybrid</version>\n</dependency>\n```\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java com.azure.resourcemanager.containerservice.authenticate\nString armEndpoint = \"https://management.<region>.<your-domain>\";\nAzureProfile profile = new AzureProfile(getAzureEnvironmentFromArmEndpoint(armEndpoint));\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nContainerServiceManager manager = ContainerServiceManager\n    .authenticate(credential, profile);\n```\n\nChange `armEndpoint` to point to the Azure Resource Manager endpoint of your Azure Stack Hub. The azure environment's\nproperties above can be populated with the following example:\n\n```java com.azure.resourcemanager.containerservice.getazureenvironment\nprivate static AzureEnvironment getAzureEnvironmentFromArmEndpoint(String armEndpoint) {\n    // Create HTTP client and request\n    HttpClient httpClient = HttpClient.createDefault();\n\n    HttpRequest request = new HttpRequest(HttpMethod.GET,\n            String.format(\"%s/metadata/endpoints?api-version=2019-10-01\", armEndpoint))\n            .setHeader(\"accept\", \"application/json\");\n\n    // Execute the request and read the response\n    HttpResponse response = httpClient.send(request).block();\n    if (response.getStatusCode() != 200) {\n        throw new RuntimeException(\"Failed : HTTP error code : \" + response.getStatusCode());\n    }\n    String body = response.getBodyAsString().block();\n    try {\n        ArrayNode metadataArray = JacksonAdapter.createDefaultSerializerAdapter()\n                .deserialize(body, ArrayNode.class, SerializerEncoding.JSON);\n\n        if (metadataArray == null || metadataArray.isEmpty()) {\n            throw new RuntimeException(\"Failed to find metadata : \" + body);\n        }\n\n        JsonNode metadata = metadataArray.iterator().next();\n        AzureEnvironment azureEnvironment = new AzureEnvironment(new HashMap<String, String>() {\n            {\n                put(\"managementEndpointUrl\", metadata.at(\"/authentication/audiences/0\").asText());\n                put(\"resourceManagerEndpointUrl\", armEndpoint);\n                put(\"galleryEndpointUrl\", metadata.at(\"/gallery\").asText());\n                put(\"activeDirectoryEndpointUrl\", metadata.at(\"/authentication/loginEndpoint\").asText());\n                put(\"activeDirectoryResourceId\", metadata.at(\"/authentication/audiences/0\").asText());\n                put(\"activeDirectoryGraphResourceId\", metadata.at(\"/graph\").asText());\n                put(\"storageEndpointSuffix\", \".\" + metadata.at(\"/suffixes/storage\").asText());\n                put(\"keyVaultDnsSuffix\", \".\" + metadata.at(\"/suffixes/keyVaultDns\").asText());\n            }\n        });\n        return azureEnvironment;\n    } catch (IOException ioe) {\n        ioe.printStackTrace();\n        throw new RuntimeException(ioe);\n    }\n}\n```\n\nWhen targeting a hybrid solution to global Azure instead of your Azure Stack Hub, `AzureEnvironment.AZURE` can be used instead.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\nSee [Samples][sample] for code snippets and samples.\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[sample]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/SAMPLE.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[api_profile]: https://docs.microsoft.com/azure-stack/user/azure-stack-version-profiles\n[resourcemanagerhybrid_lib]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanagerhybrid\n",
        "repo_name": "resourcemanagerhybrid/azure-resourcemanager-containerservice",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanagerhybrid/azure-resourcemanager-containerservice",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager dns client library for Java (Hybrid)\n\nAzure Resource Manager dns client library for Java (Hybrid) using [API Profiles][api_profile] to allow building hybrid cloud solutions\nthat target both Azure and Azure Stack Hub.\n\nFor documentation on how to use this package, please see [Azure Management Libraries for Java (Hybrid)][resourcemanagerhybrid_lib].\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-dns</artifactId>\n    <version>1.0.0-hybrid</version>\n</dependency>\n```\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java com.azure.resourcemanager.dns.authenticate\nString armEndpoint = \"https://management.<region>.<your-domain>\";\nAzureProfile profile = new AzureProfile(getAzureEnvironmentFromArmEndpoint(armEndpoint));\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nDnsZoneManager manager = DnsZoneManager\n    .authenticate(credential, profile);\n```\n\nChange `armEndpoint` to point to the Azure Resource Manager endpoint of your Azure Stack Hub. The azure environment's\nproperties above can be populated with the following example:\n\n```java com.azure.resourcemanager.dns.getazureenvironment\nprivate static AzureEnvironment getAzureEnvironmentFromArmEndpoint(String armEndpoint) {\n    // Create HTTP client and request\n    HttpClient httpClient = HttpClient.createDefault();\n\n    HttpRequest request = new HttpRequest(HttpMethod.GET,\n            String.format(\"%s/metadata/endpoints?api-version=2019-10-01\", armEndpoint))\n            .setHeader(\"accept\", \"application/json\");\n\n    // Execute the request and read the response\n    HttpResponse response = httpClient.send(request).block();\n    if (response.getStatusCode() != 200) {\n        throw new RuntimeException(\"Failed : HTTP error code : \" + response.getStatusCode());\n    }\n    String body = response.getBodyAsString().block();\n    try {\n        ArrayNode metadataArray = JacksonAdapter.createDefaultSerializerAdapter()\n                .deserialize(body, ArrayNode.class, SerializerEncoding.JSON);\n\n        if (metadataArray == null || metadataArray.isEmpty()) {\n            throw new RuntimeException(\"Failed to find metadata : \" + body);\n        }\n\n        JsonNode metadata = metadataArray.iterator().next();\n        AzureEnvironment azureEnvironment = new AzureEnvironment(new HashMap<String, String>() {\n            {\n                put(\"managementEndpointUrl\", metadata.at(\"/authentication/audiences/0\").asText());\n                put(\"resourceManagerEndpointUrl\", armEndpoint);\n                put(\"galleryEndpointUrl\", metadata.at(\"/gallery\").asText());\n                put(\"activeDirectoryEndpointUrl\", metadata.at(\"/authentication/loginEndpoint\").asText());\n                put(\"activeDirectoryResourceId\", metadata.at(\"/authentication/audiences/0\").asText());\n                put(\"activeDirectoryGraphResourceId\", metadata.at(\"/graph\").asText());\n                put(\"storageEndpointSuffix\", \".\" + metadata.at(\"/suffixes/storage\").asText());\n                put(\"keyVaultDnsSuffix\", \".\" + metadata.at(\"/suffixes/keyVaultDns\").asText());\n            }\n        });\n        return azureEnvironment;\n    } catch (IOException ioe) {\n        ioe.printStackTrace();\n        throw new RuntimeException(ioe);\n    }\n}\n```\n\nWhen targeting a hybrid solution to global Azure instead of your Azure Stack Hub, `AzureEnvironment.AZURE` can be used instead.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\nSee [Samples][sample] for code snippets and samples.\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[sample]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/SAMPLE.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[api_profile]: https://docs.microsoft.com/azure-stack/user/azure-stack-version-profiles\n[resourcemanagerhybrid_lib]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanagerhybrid\n",
        "repo_name": "resourcemanagerhybrid/azure-resourcemanager-dns",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanagerhybrid/azure-resourcemanager-dns",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager EventHubs client library for Java (Hybrid)\n\nAzure Resource Manager EventHubs client library for Java (Hybrid) using [API Profiles][api_profile] to allow building hybrid cloud solutions\nthat target both Azure and Azure Stack Hub.\n\nFor documentation on how to use this package, please see [Azure Management Libraries for Java (Hybrid)][resourcemanagerhybrid_lib].\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-eventhubs</artifactId>\n    <version>1.0.0-hybrid</version>\n</dependency>\n```\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java com.azure.resourcemanager.eventhubs.authenticate\nString armEndpoint = \"https://management.<region>.<your-domain>\";\nAzureProfile profile = new AzureProfile(getAzureEnvironmentFromArmEndpoint(armEndpoint));\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nEventHubsManager manager = EventHubsManager\n    .authenticate(credential, profile);\n```\n\nChange `armEndpoint` to point to the Azure Resource Manager endpoint of your Azure Stack Hub. The azure environment's\nproperties above can be populated with the following example:\n\n```java com.azure.resourcemanager.eventhubs.getazureenvironment\nprivate static AzureEnvironment getAzureEnvironmentFromArmEndpoint(String armEndpoint) {\n    // Create HTTP client and request\n    HttpClient httpClient = HttpClient.createDefault();\n\n    HttpRequest request = new HttpRequest(HttpMethod.GET,\n            String.format(\"%s/metadata/endpoints?api-version=2019-10-01\", armEndpoint))\n            .setHeader(\"accept\", \"application/json\");\n\n    // Execute the request and read the response\n    HttpResponse response = httpClient.send(request).block();\n    if (response.getStatusCode() != 200) {\n        throw new RuntimeException(\"Failed : HTTP error code : \" + response.getStatusCode());\n    }\n    String body = response.getBodyAsString().block();\n    try {\n        ArrayNode metadataArray = JacksonAdapter.createDefaultSerializerAdapter()\n                .deserialize(body, ArrayNode.class, SerializerEncoding.JSON);\n\n        if (metadataArray == null || metadataArray.isEmpty()) {\n            throw new RuntimeException(\"Failed to find metadata : \" + body);\n        }\n\n        JsonNode metadata = metadataArray.iterator().next();\n        AzureEnvironment azureEnvironment = new AzureEnvironment(new HashMap<String, String>() {\n            {\n                put(\"managementEndpointUrl\", metadata.at(\"/authentication/audiences/0\").asText());\n                put(\"resourceManagerEndpointUrl\", armEndpoint);\n                put(\"galleryEndpointUrl\", metadata.at(\"/gallery\").asText());\n                put(\"activeDirectoryEndpointUrl\", metadata.at(\"/authentication/loginEndpoint\").asText());\n                put(\"activeDirectoryResourceId\", metadata.at(\"/authentication/audiences/0\").asText());\n                put(\"activeDirectoryGraphResourceId\", metadata.at(\"/graph\").asText());\n                put(\"storageEndpointSuffix\", \".\" + metadata.at(\"/suffixes/storage\").asText());\n                put(\"keyVaultDnsSuffix\", \".\" + metadata.at(\"/suffixes/keyVaultDns\").asText());\n            }\n        });\n        return azureEnvironment;\n    } catch (IOException ioe) {\n        ioe.printStackTrace();\n        throw new RuntimeException(ioe);\n    }\n}\n```\n\nWhen targeting a hybrid solution to global Azure instead of your Azure Stack Hub, `AzureEnvironment.AZURE` can be used instead.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\nSee [Samples][sample] for code snippets and samples.\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[sample]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/SAMPLE.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[api_profile]: https://docs.microsoft.com/azure-stack/user/azure-stack-version-profiles\n[resourcemanagerhybrid_lib]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanagerhybrid\n",
        "repo_name": "resourcemanagerhybrid/azure-resourcemanager-eventhubs",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanagerhybrid/azure-resourcemanager-eventhubs",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager keyvault client library for Java (Hybrid)\n\nAzure Resource Manager keyvault client library for Java (Hybrid) using [API Profiles][api_profile] to allow building hybrid cloud solutions\nthat target both Azure and Azure Stack Hub.\n\nFor documentation on how to use this package, please see [Azure Management Libraries for Java (Hybrid)][resourcemanagerhybrid_lib].\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-keyvault</artifactId>\n    <version>1.0.0-hybrid</version>\n</dependency>\n```\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java com.azure.resourcemanager.keyvault.authenticate\nString armEndpoint = \"https://management.<region>.<your-domain>\";\nAzureProfile profile = new AzureProfile(getAzureEnvironmentFromArmEndpoint(armEndpoint));\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nKeyVaultManager manager = KeyVaultManager\n    .authenticate(credential, profile);\n```\n\nChange `armEndpoint` to point to the Azure Resource Manager endpoint of your Azure Stack Hub. The azure environment's\nproperties above can be populated with the following example:\n\n```java com.azure.resourcemanager.keyvault.getazureenvironment\nprivate static AzureEnvironment getAzureEnvironmentFromArmEndpoint(String armEndpoint) {\n    // Create HTTP client and request\n    HttpClient httpClient = HttpClient.createDefault();\n\n    HttpRequest request = new HttpRequest(HttpMethod.GET,\n            String.format(\"%s/metadata/endpoints?api-version=2019-10-01\", armEndpoint))\n            .setHeader(\"accept\", \"application/json\");\n\n    // Execute the request and read the response\n    HttpResponse response = httpClient.send(request).block();\n    if (response.getStatusCode() != 200) {\n        throw new RuntimeException(\"Failed : HTTP error code : \" + response.getStatusCode());\n    }\n    String body = response.getBodyAsString().block();\n    try {\n        ArrayNode metadataArray = JacksonAdapter.createDefaultSerializerAdapter()\n                .deserialize(body, ArrayNode.class, SerializerEncoding.JSON);\n\n        if (metadataArray == null || metadataArray.isEmpty()) {\n            throw new RuntimeException(\"Failed to find metadata : \" + body);\n        }\n\n        JsonNode metadata = metadataArray.iterator().next();\n        AzureEnvironment azureEnvironment = new AzureEnvironment(new HashMap<String, String>() {\n            {\n                put(\"managementEndpointUrl\", metadata.at(\"/authentication/audiences/0\").asText());\n                put(\"resourceManagerEndpointUrl\", armEndpoint);\n                put(\"galleryEndpointUrl\", metadata.at(\"/gallery\").asText());\n                put(\"activeDirectoryEndpointUrl\", metadata.at(\"/authentication/loginEndpoint\").asText());\n                put(\"activeDirectoryResourceId\", metadata.at(\"/authentication/audiences/0\").asText());\n                put(\"activeDirectoryGraphResourceId\", metadata.at(\"/graph\").asText());\n                put(\"storageEndpointSuffix\", \".\" + metadata.at(\"/suffixes/storage\").asText());\n                put(\"keyVaultDnsSuffix\", \".\" + metadata.at(\"/suffixes/keyVaultDns\").asText());\n            }\n        });\n        return azureEnvironment;\n    } catch (IOException ioe) {\n        ioe.printStackTrace();\n        throw new RuntimeException(ioe);\n    }\n}\n```\n\nWhen targeting a hybrid solution to global Azure instead of your Azure Stack Hub, `AzureEnvironment.AZURE` can be used instead.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\nSee [Samples][sample] for code snippets and samples.\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[sample]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/SAMPLE.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[api_profile]: https://docs.microsoft.com/azure-stack/user/azure-stack-version-profiles\n[resourcemanagerhybrid_lib]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanagerhybrid\n",
        "repo_name": "resourcemanagerhybrid/azure-resourcemanager-keyvault",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanagerhybrid/azure-resourcemanager-keyvault",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager monitor client library for Java (Hybrid)\n\nAzure Resource Manager monitor client library for Java (Hybrid) using [API Profiles][api_profile] to allow building hybrid cloud solutions\nthat target both Azure and Azure Stack Hub.\n\nFor documentation on how to use this package, please see [Azure Management Libraries for Java (Hybrid)][resourcemanagerhybrid_lib].\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-monitor</artifactId>\n    <version>1.0.0-hybrid</version>\n</dependency>\n```\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java com.azure.resourcemanager.monitor.authenticate\nString armEndpoint = \"https://management.<region>.<your-domain>\";\nAzureProfile profile = new AzureProfile(getAzureEnvironmentFromArmEndpoint(armEndpoint));\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nMonitorManager manager = MonitorManager\n    .authenticate(credential, profile);\n```\n\nChange `armEndpoint` to point to the Azure Resource Manager endpoint of your Azure Stack Hub. The azure environment's\nproperties above can be populated with the following example:\n\n```java com.azure.resourcemanager.monitor.getazureenvironment\nprivate static AzureEnvironment getAzureEnvironmentFromArmEndpoint(String armEndpoint) {\n    // Create HTTP client and request\n    HttpClient httpClient = HttpClient.createDefault();\n\n    HttpRequest request = new HttpRequest(HttpMethod.GET,\n            String.format(\"%s/metadata/endpoints?api-version=2019-10-01\", armEndpoint))\n            .setHeader(\"accept\", \"application/json\");\n\n    // Execute the request and read the response\n    HttpResponse response = httpClient.send(request).block();\n    if (response.getStatusCode() != 200) {\n        throw new RuntimeException(\"Failed : HTTP error code : \" + response.getStatusCode());\n    }\n    String body = response.getBodyAsString().block();\n    try {\n        ArrayNode metadataArray = JacksonAdapter.createDefaultSerializerAdapter()\n                .deserialize(body, ArrayNode.class, SerializerEncoding.JSON);\n\n        if (metadataArray == null || metadataArray.isEmpty()) {\n            throw new RuntimeException(\"Failed to find metadata : \" + body);\n        }\n\n        JsonNode metadata = metadataArray.iterator().next();\n        AzureEnvironment azureEnvironment = new AzureEnvironment(new HashMap<String, String>() {\n            {\n                put(\"managementEndpointUrl\", metadata.at(\"/authentication/audiences/0\").asText());\n                put(\"resourceManagerEndpointUrl\", armEndpoint);\n                put(\"galleryEndpointUrl\", metadata.at(\"/gallery\").asText());\n                put(\"activeDirectoryEndpointUrl\", metadata.at(\"/authentication/loginEndpoint\").asText());\n                put(\"activeDirectoryResourceId\", metadata.at(\"/authentication/audiences/0\").asText());\n                put(\"activeDirectoryGraphResourceId\", metadata.at(\"/graph\").asText());\n                put(\"storageEndpointSuffix\", \".\" + metadata.at(\"/suffixes/storage\").asText());\n                put(\"keyVaultDnsSuffix\", \".\" + metadata.at(\"/suffixes/keyVaultDns\").asText());\n            }\n        });\n        return azureEnvironment;\n    } catch (IOException ioe) {\n        ioe.printStackTrace();\n        throw new RuntimeException(ioe);\n    }\n}\n```\n\nWhen targeting a hybrid solution to global Azure instead of your Azure Stack Hub, `AzureEnvironment.AZURE` can be used instead.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\nSee [Samples][sample] for code snippets and samples.\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[sample]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/SAMPLE.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[api_profile]: https://docs.microsoft.com/azure-stack/user/azure-stack-version-profiles\n[resourcemanagerhybrid_lib]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanagerhybrid\n",
        "repo_name": "resourcemanagerhybrid/azure-resourcemanager-monitor",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanagerhybrid/azure-resourcemanager-monitor",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager network client library for Java (Hybrid)\n\nAzure Resource Manager network client library for Java (Hybrid) using [API Profiles][api_profile] to allow building hybrid cloud solutions\nthat target both Azure and Azure Stack Hub.\n\nFor documentation on how to use this package, please see [Azure Management Libraries for Java (Hybrid)][resourcemanagerhybrid_lib].\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-network</artifactId>\n    <version>1.0.0-hybrid</version>\n</dependency>\n```\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java com.azure.resourcemanager.network.authenticate\nString armEndpoint = \"https://management.<region>.<your-domain>\";\nAzureProfile profile = new AzureProfile(getAzureEnvironmentFromArmEndpoint(armEndpoint));\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nNetworkManager manager = NetworkManager\n    .authenticate(credential, profile);\n```\n\nChange `armEndpoint` to point to the Azure Resource Manager endpoint of your Azure Stack Hub. The azure environment's\nproperties above can be populated with the following example:\n\n```java com.azure.resourcemanager.network.getazureenvironment\nprivate static AzureEnvironment getAzureEnvironmentFromArmEndpoint(String armEndpoint) {\n    // Create HTTP client and request\n    HttpClient httpClient = HttpClient.createDefault();\n\n    HttpRequest request = new HttpRequest(HttpMethod.GET,\n            String.format(\"%s/metadata/endpoints?api-version=2019-10-01\", armEndpoint))\n            .setHeader(\"accept\", \"application/json\");\n\n    // Execute the request and read the response\n    HttpResponse response = httpClient.send(request).block();\n    if (response.getStatusCode() != 200) {\n        throw new RuntimeException(\"Failed : HTTP error code : \" + response.getStatusCode());\n    }\n    String body = response.getBodyAsString().block();\n    try {\n        ArrayNode metadataArray = JacksonAdapter.createDefaultSerializerAdapter()\n                .deserialize(body, ArrayNode.class, SerializerEncoding.JSON);\n\n        if (metadataArray == null || metadataArray.isEmpty()) {\n            throw new RuntimeException(\"Failed to find metadata : \" + body);\n        }\n\n        JsonNode metadata = metadataArray.iterator().next();\n        AzureEnvironment azureEnvironment = new AzureEnvironment(new HashMap<String, String>() {\n            {\n                put(\"managementEndpointUrl\", metadata.at(\"/authentication/audiences/0\").asText());\n                put(\"resourceManagerEndpointUrl\", armEndpoint);\n                put(\"galleryEndpointUrl\", metadata.at(\"/gallery\").asText());\n                put(\"activeDirectoryEndpointUrl\", metadata.at(\"/authentication/loginEndpoint\").asText());\n                put(\"activeDirectoryResourceId\", metadata.at(\"/authentication/audiences/0\").asText());\n                put(\"activeDirectoryGraphResourceId\", metadata.at(\"/graph\").asText());\n                put(\"storageEndpointSuffix\", \".\" + metadata.at(\"/suffixes/storage\").asText());\n                put(\"keyVaultDnsSuffix\", \".\" + metadata.at(\"/suffixes/keyVaultDns\").asText());\n            }\n        });\n        return azureEnvironment;\n    } catch (IOException ioe) {\n        ioe.printStackTrace();\n        throw new RuntimeException(ioe);\n    }\n}\n```\n\nWhen targeting a hybrid solution to global Azure instead of your Azure Stack Hub, `AzureEnvironment.AZURE` can be used instead.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\nSee [Samples][sample] for code snippets and samples.\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[sample]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/SAMPLE.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[api_profile]: https://docs.microsoft.com/azure-stack/user/azure-stack-version-profiles\n[resourcemanagerhybrid_lib]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanagerhybrid\n",
        "repo_name": "resourcemanagerhybrid/azure-resourcemanager-network",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanagerhybrid/azure-resourcemanager-network",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager resources client library for Java (Hybrid)\n\nAzure Resource Manager resources client library for Java (Hybrid) using [API Profiles][api_profile] to allow building hybrid cloud solutions\nthat target both Azure and Azure Stack Hub.\n\nFor documentation on how to use this package, please see [Azure Management Libraries for Java (Hybrid)][resourcemanagerhybrid_lib].\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-resources</artifactId>\n    <version>1.0.0-hybrid</version>\n</dependency>\n```\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java com.azure.resourcemanager.resources.authenticate\nString armEndpoint = \"https://management.<region>.<your-domain>\";\nAzureProfile profile = new AzureProfile(getAzureEnvironmentFromArmEndpoint(armEndpoint));\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nResourceManager manager = ResourceManager\n    .authenticate(credential, profile)\n    .withDefaultSubscription();\n```\n\nChange `armEndpoint` to point to the Azure Resource Manager endpoint of your Azure Stack Hub. The azure environment's\nproperties above can be populated with the following example:\n\n```java com.azure.resourcemanager.resources.getazureenvironment\nprivate static AzureEnvironment getAzureEnvironmentFromArmEndpoint(String armEndpoint) {\n    // Create HTTP client and request\n    HttpClient httpClient = HttpClient.createDefault();\n\n    HttpRequest request = new HttpRequest(HttpMethod.GET,\n            String.format(\"%s/metadata/endpoints?api-version=2019-10-01\", armEndpoint))\n            .setHeader(\"accept\", \"application/json\");\n\n    // Execute the request and read the response\n    HttpResponse response = httpClient.send(request).block();\n    if (response.getStatusCode() != 200) {\n        throw new RuntimeException(\"Failed : HTTP error code : \" + response.getStatusCode());\n    }\n    String body = response.getBodyAsString().block();\n    try {\n        ArrayNode metadataArray = JacksonAdapter.createDefaultSerializerAdapter()\n                .deserialize(body, ArrayNode.class, SerializerEncoding.JSON);\n\n        if (metadataArray == null || metadataArray.isEmpty()) {\n            throw new RuntimeException(\"Failed to find metadata : \" + body);\n        }\n\n        JsonNode metadata = metadataArray.iterator().next();\n        AzureEnvironment azureEnvironment = new AzureEnvironment(new HashMap<String, String>() {\n            {\n                put(\"managementEndpointUrl\", metadata.at(\"/authentication/audiences/0\").asText());\n                put(\"resourceManagerEndpointUrl\", armEndpoint);\n                put(\"galleryEndpointUrl\", metadata.at(\"/gallery\").asText());\n                put(\"activeDirectoryEndpointUrl\", metadata.at(\"/authentication/loginEndpoint\").asText());\n                put(\"activeDirectoryResourceId\", metadata.at(\"/authentication/audiences/0\").asText());\n                put(\"activeDirectoryGraphResourceId\", metadata.at(\"/graph\").asText());\n                put(\"storageEndpointSuffix\", \".\" + metadata.at(\"/suffixes/storage\").asText());\n                put(\"keyVaultDnsSuffix\", \".\" + metadata.at(\"/suffixes/keyVaultDns\").asText());\n            }\n        });\n        return azureEnvironment;\n    } catch (IOException ioe) {\n        ioe.printStackTrace();\n        throw new RuntimeException(ioe);\n    }\n}\n```\n\nWhen targeting a hybrid solution to global Azure instead of your Azure Stack Hub, `AzureEnvironment.AZURE` can be used instead.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\nSee [Samples][sample] for code snippets and samples.\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[sample]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/SAMPLE.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[api_profile]: https://docs.microsoft.com/azure-stack/user/azure-stack-version-profiles\n[resourcemanagerhybrid_lib]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanagerhybrid\n",
        "repo_name": "resourcemanagerhybrid/azure-resourcemanager-resources",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanagerhybrid/azure-resourcemanager-resources",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager storage client library for Java (Hybrid)\n\nAzure Resource Manager storage client library for Java (Hybrid) using [API Profiles][api_profile] to allow building hybrid cloud solutions\nthat target both Azure and Azure Stack Hub.\n\nFor documentation on how to use this package, please see [Azure Management Libraries for Java (Hybrid)][resourcemanagerhybrid_lib].\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-storage</artifactId>\n    <version>1.0.0-hybrid</version>\n</dependency>\n```\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java com.azure.resourcemanager.storage.authenticate\nString armEndpoint = \"https://management.<region>.<your-domain>\";\nAzureProfile profile = new AzureProfile(getAzureEnvironmentFromArmEndpoint(armEndpoint));\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nStorageManager manager = StorageManager\n    .authenticate(credential, profile);\n```\n\nChange `armEndpoint` to point to the Azure Resource Manager endpoint of your Azure Stack Hub. The azure environment's\nproperties above can be populated with the following example:\n\n```java com.azure.resourcemanager.storage.getazureenvironment\nprivate static AzureEnvironment getAzureEnvironmentFromArmEndpoint(String armEndpoint) {\n    // Create HTTP client and request\n    HttpClient httpClient = HttpClient.createDefault();\n\n    HttpRequest request = new HttpRequest(HttpMethod.GET,\n            String.format(\"%s/metadata/endpoints?api-version=2019-10-01\", armEndpoint))\n            .setHeader(\"accept\", \"application/json\");\n\n    // Execute the request and read the response\n    HttpResponse response = httpClient.send(request).block();\n    if (response.getStatusCode() != 200) {\n        throw new RuntimeException(\"Failed : HTTP error code : \" + response.getStatusCode());\n    }\n    String body = response.getBodyAsString().block();\n    try {\n        ArrayNode metadataArray = JacksonAdapter.createDefaultSerializerAdapter()\n                .deserialize(body, ArrayNode.class, SerializerEncoding.JSON);\n\n        if (metadataArray == null || metadataArray.isEmpty()) {\n            throw new RuntimeException(\"Failed to find metadata : \" + body);\n        }\n\n        JsonNode metadata = metadataArray.iterator().next();\n        AzureEnvironment azureEnvironment = new AzureEnvironment(new HashMap<String, String>() {\n            {\n                put(\"managementEndpointUrl\", metadata.at(\"/authentication/audiences/0\").asText());\n                put(\"resourceManagerEndpointUrl\", armEndpoint);\n                put(\"galleryEndpointUrl\", metadata.at(\"/gallery\").asText());\n                put(\"activeDirectoryEndpointUrl\", metadata.at(\"/authentication/loginEndpoint\").asText());\n                put(\"activeDirectoryResourceId\", metadata.at(\"/authentication/audiences/0\").asText());\n                put(\"activeDirectoryGraphResourceId\", metadata.at(\"/graph\").asText());\n                put(\"storageEndpointSuffix\", \".\" + metadata.at(\"/suffixes/storage\").asText());\n                put(\"keyVaultDnsSuffix\", \".\" + metadata.at(\"/suffixes/keyVaultDns\").asText());\n            }\n        });\n        return azureEnvironment;\n    } catch (IOException ioe) {\n        ioe.printStackTrace();\n        throw new RuntimeException(ioe);\n    }\n}\n```\n\nWhen targeting a hybrid solution to global Azure instead of your Azure Stack Hub, `AzureEnvironment.AZURE` can be used instead.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\nSee [Samples][sample] for code snippets and samples.\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[sample]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/SAMPLE.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[api_profile]: https://docs.microsoft.com/azure-stack/user/azure-stack-version-profiles\n[resourcemanagerhybrid_lib]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanagerhybrid\n",
        "repo_name": "resourcemanagerhybrid/azure-resourcemanager-storage",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanagerhybrid/azure-resourcemanager-storage",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager Test shared library for Java (Hybrid)\n\nAzure Resource Manager test library for Java (Hybrid) using [API Profiles][api_profile] to allow building hybrid cloud solutions\nthat target both Azure and Azure Stack Hub.\n\nFor documentation on how to use this package, please see [Azure Management Libraries for Java (Hybrid)][resourcemanagerhybrid_lib].\n\n## Getting started\n\n### Prerequisites\n\n- Java Development Kit (JDK) with version 8 or above\n\n### Adding the package to your product\n\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-test</artifactId>\n    <version>1.0.0-hybrid</version>\n</dependency>\n```\n\n## Key concepts\n\n## Examples\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[api_profile]: https://docs.microsoft.com/azure-stack/user/azure-stack-version-profiles\n[resourcemanagerhybrid_lib]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanagerhybrid\n",
        "repo_name": "resourcemanagerhybrid/azure-resourcemanager-test",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanagerhybrid/azure-resourcemanager-test",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager client library for Java (Hybrid)\n\nAzure Resource Manager client library for Java (Hybrid) using [API Profiles][api_profile] to allow building hybrid cloud solutions\nthat target both Azure and Azure Stack Hub.\n\nFor documentation on how to use this package, please see [Azure Management Libraries for Java (Hybrid)][resourcemanagerhybrid_lib].\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager</artifactId>\n    <version>1.0.0-hybrid</version>\n</dependency>\n```\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java com.azure.resourcemanager.authenticate\nString armEndpoint = \"https://management.<region>.<your-domain>\";\nAzureProfile profile = new AzureProfile(getAzureEnvironmentFromArmEndpoint(armEndpoint));\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nAzureResourceManager azure = AzureResourceManager\n    .authenticate(credential, profile)\n    .withDefaultSubscription();\n```\n\nChange `armEndpoint` to point to the Azure Resource Manager endpoint of your Azure Stack Hub. The azure environment's\nproperties above can be populated with the following example:\n\n```java com.azure.resourcemanager.getazureenvironment\nprivate static AzureEnvironment getAzureEnvironmentFromArmEndpoint(String armEndpoint) {\n    // Create HTTP client and request\n    HttpClient httpClient = HttpClient.createDefault();\n\n    HttpRequest request = new HttpRequest(HttpMethod.GET,\n            String.format(\"%s/metadata/endpoints?api-version=2019-10-01\", armEndpoint))\n            .setHeader(\"accept\", \"application/json\");\n\n    // Execute the request and read the response\n    HttpResponse response = httpClient.send(request).block();\n    if (response.getStatusCode() != 200) {\n        throw new RuntimeException(\"Failed : HTTP error code : \" + response.getStatusCode());\n    }\n    String body = response.getBodyAsString().block();\n    try {\n        ArrayNode metadataArray = JacksonAdapter.createDefaultSerializerAdapter()\n                .deserialize(body, ArrayNode.class, SerializerEncoding.JSON);\n\n        if (metadataArray == null || metadataArray.isEmpty()) {\n            throw new RuntimeException(\"Failed to find metadata : \" + body);\n        }\n\n        JsonNode metadata = metadataArray.iterator().next();\n        AzureEnvironment azureEnvironment = new AzureEnvironment(new HashMap<String, String>() {\n            {\n                put(\"managementEndpointUrl\", metadata.at(\"/authentication/audiences/0\").asText());\n                put(\"resourceManagerEndpointUrl\", armEndpoint);\n                put(\"galleryEndpointUrl\", metadata.at(\"/gallery\").asText());\n                put(\"activeDirectoryEndpointUrl\", metadata.at(\"/authentication/loginEndpoint\").asText());\n                put(\"activeDirectoryResourceId\", metadata.at(\"/authentication/audiences/0\").asText());\n                put(\"activeDirectoryGraphResourceId\", metadata.at(\"/graph\").asText());\n                put(\"storageEndpointSuffix\", \".\" + metadata.at(\"/suffixes/storage\").asText());\n                put(\"keyVaultDnsSuffix\", \".\" + metadata.at(\"/suffixes/keyVaultDns\").asText());\n            }\n        });\n        return azureEnvironment;\n    } catch (IOException ioe) {\n        ioe.printStackTrace();\n        throw new RuntimeException(ioe);\n    }\n}\n```\n\nWhen targeting a hybrid solution to global Azure instead of your Azure Stack Hub, `AzureEnvironment.AZURE` can be used instead.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\nSee [Samples][sample] for code snippets and samples.\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[sample]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/SAMPLE.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[api_profile]: https://docs.microsoft.com/azure-stack/user/azure-stack-version-profiles\n[resourcemanagerhybrid_lib]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanagerhybrid\n",
        "repo_name": "resourcemanagerhybrid/azure-resourcemanager",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanagerhybrid/azure-resourcemanager",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager ResourceMover client library for Java\n\nAzure Resource Manager ResourceMover client library for Java.\n\nThis package contains Microsoft Azure SDK for ResourceMover Management SDK. A first party Azure service orchestrating the move of Azure resources from one Azure region to another or between zones within a region. Package tag package-2021-01-01. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-resourcemover;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-resourcemover</artifactId>\n    <version>1.0.0</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nResourceMoverManager manager = ResourceMoverManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemover/azure-resourcemanager-resourcemover/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "resourcemover/azure-resourcemanager-resourcemover",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemover/azure-resourcemanager-resourcemover",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Schema Registry Apache Avro Serializer client library for Java\n\nAzure Schema Registry Apache Avro is a serializer and deserializer library for Avro data format that is integrated with\nAzure Schema Registry hosted in Azure Event Hubs, providing schema storage, versioning, and management. This package\nprovides an Avro serializer capable of serializing and deserializing payloads containing Schema Registry schema\nidentifiers and Avro-encoded data. This library uses [Apache Avro][apache_avro] implementation for Avro serialization\nand deserialization.\n\n[Source code][source_code] | [Package (Maven)][package_maven] | [API reference documentation][api_reference_doc] | [Product Documentation][product_documentation] | [Samples][sample_readme]\n\n## Getting started\n\n### Prerequisites\n\n- A [Java Development Kit (JDK)][jdk_link], version 8 or later.\n- [Azure Subscription][azure_subscription]\n- An [Event Hubs namespace][event_hubs_namespace]\n\n### Include the Package\n\n[//]: # ({x-version-update-start;com.azure:azure-data-schemaregistry-apacheavro;current})\n```xml\n<dependency>\n  <groupId>com.azure</groupId>\n  <artifactId>azure-data-schemaregistry-apacheavro</artifactId>\n  <version>1.1.6</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Create `SchemaRegistryApacheAvroSerializer` instance\n\nThe `SchemaRegistryApacheAvroSerializer` instance is the main class that provides APIs for serializing and\ndeserializing avro data format. The avro schema is stored and retrieved from the Schema Registry service\nthrough the `SchemaRegistryAsyncClient`. So, before we create the serializer, we should create the client.\n\n#### Create `SchemaRegistryAsyncClient` with Azure Active Directory Credential\n\nIn order to interact with the Azure Schema Registry service, you'll need to create an instance of the\n`SchemaRegistryAsyncClient` class through the `SchemaRegistryClientBuilder`. You will need the Schema Registry **endpoint**.\n\nYou can authenticate with Azure Active Directory using the [Azure Identity library][azure_identity]. Note that regional\nendpoints do not support AAD authentication. Create a [custom subdomain][custom_subdomain] for your resource in order to\nuse this type of authentication.\n\nTo use the [DefaultAzureCredential][DefaultAzureCredential] provider shown below, or other credential providers provided\nwith the Azure SDK, please include the `azure-identity` package:\n\n[//]: # ({x-version-update-start;com.azure:azure-identity;dependency})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-identity</artifactId>\n    <version>1.9.0</version>\n</dependency>\n```\n\nYou will also need to [register a new AAD application][register_aad_app] and [grant access][aad_grant_access] to\n Schema Registry service.\n\n```java readme-sample-createSchemaRegistryAsyncClient\nTokenCredential tokenCredential = new DefaultAzureCredentialBuilder().build();\n\n// {schema-registry-endpoint} is the fully qualified namespace of the Event Hubs instance. It is usually\n// of the form \"{your-namespace}.servicebus.windows.net\"\nSchemaRegistryAsyncClient schemaRegistryAsyncClient = new SchemaRegistryClientBuilder()\n    .fullyQualifiedNamespace(\"{your-event-hubs-namespace}.servicebus.windows.net\")\n    .credential(tokenCredential)\n    .buildAsyncClient();\n```\n\n#### Create `SchemaRegistryAvroSerializer` through the builder\n\n```java readme-sample-createSchemaRegistryAvroSerializer\nSchemaRegistryApacheAvroSerializer serializer = new SchemaRegistryApacheAvroSerializerBuilder()\n    .schemaRegistryClient(schemaRegistryAsyncClient)\n    .schemaGroup(\"{schema-group}\")\n    .buildSerializer();\n```\n\n## Key concepts\n\nThis library provides a serializer, `SchemaRegistryApacheAvroSerializer`. The\n`SchemaRegistryAvroSerializer` utilizes a `SchemaRegistryAsyncClient` to construct messages using a wire format\ncontaining schema information such as a schema ID.\n\nThis serializer requires the Apache Avro library. The payload types accepted by this serializer include\n[GenericRecord][generic_record] and [SpecificRecord][specific_record].\n\n## Examples\n\n* [Serialize](#serialize)\n* [Deserialize](#deserialize)\n\n### Serialize\nSerialize a strongly-typed object into Schema Registry-compatible avro payload.\n\n```java readme-sample-serializeSample\nPlayingCard playingCard = new PlayingCard();\nplayingCard.setPlayingCardSuit(PlayingCardSuit.SPADES);\nplayingCard.setIsFaceCard(false);\nplayingCard.setCardValue(5);\n\nMessageContent message = serializer.serialize(playingCard,\n    TypeReference.createInstance(MessageContent.class));\n```\n\nThe avro type `PlayingCard` is available in samples package\n[`com.azure.data.schemaregistry.avro.generatedtestsources`][generated_types].\n\n### Deserialize\nDeserialize a Schema Registry-compatible avro payload into a strongly-type object.\n\n```java readme-sample-deserializeSample\nSchemaRegistryApacheAvroSerializer serializer = createAvroSchemaRegistrySerializer();\nMessageContent message = getSchemaRegistryAvroMessage();\nPlayingCard playingCard = serializer.deserialize(message, TypeReference.createInstance(PlayingCard.class));\n```\n\n## Troubleshooting\n\n### Enabling Logging\n\nAzure SDKs for Java offer a consistent logging story to help aid in troubleshooting application errors and expedite\ntheir resolution. The logs produced will capture the flow of an application before reaching the terminal state to help\nlocate the root issue. View the [logging][logging] wiki for guidance about enabling logging.\n\n## Next steps\nMore samples can be found [here][samples].\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a [Contributor License Agreement (CLA)][cla] declaring that you have the right to, and actually do, grant us the rights to use your contribution.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n[package_maven]: https://search.maven.org/artifact/com.azure/azure-data-schemaregistry-avro\n[sample_readme]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/schemaregistry/azure-data-schemaregistry-apacheavro/src/samples\n[samples]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/schemaregistry/azure-data-schemaregistry-apacheavro/src/samples/java/com/azure/data/schemaregistry/apacheavro\n[generated_types]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/schemaregistry/azure-data-schemaregistry-apacheavro/src/samples/java/com/azure/data/schemaregistry/apacheavro/generatedtestsources\n[source_code]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/schemaregistry/azure-data-schemaregistry-apacheavro/src\n[samples_code]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/schemaregistry/azure-data-schemaregistry-apacheavro/src/samples/\n[azure_subscription]: https://azure.microsoft.com/free/\n[apache_avro]: https://avro.apache.org/\n[api_reference_doc]: https://aka.ms/schemaregistry\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/identity/azure-identity\n[DefaultAzureCredential]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity/README.md#defaultazurecredential\n[event_hubs_namespace]: https://docs.microsoft.com/azure/event-hubs/event-hubs-about\n[jdk_link]: https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable\n[product_documentation]: https://aka.ms/schemaregistry\n[specific_record]: https://avro.apache.org/docs/current/api/java/org/apache/avro/specific/SpecificRecord.html\n[generic_record]: https://avro.apache.org/docs/current/api/java/org/apache/avro/generic/GenericRecord.html\n[custom_subdomain]: https://docs.microsoft.com/azure/cognitive-services/authentication#create-a-resource-with-a-custom-subdomain\n[register_aad_app]: https://docs.microsoft.com/azure/cognitive-services/authentication#assign-a-role-to-a-service-principal\n[aad_grant_access]: https://docs.microsoft.com/azure/cognitive-services/authentication#assign-a-role-to-a-service-principal\n[logging]: https://github.com/Azure/azure-sdk-for-java/wiki/Logging-with-Azure-SDK#use-logback-logging-framework-in-a-spring-boot-application\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fschemaregistry%2Fazure-data-schemaregistry-apacheavro%2FREADME.png)\n",
        "repo_name": "schemaregistry/azure-data-schemaregistry-apacheavro",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/schemaregistry/azure-data-schemaregistry-apacheavro",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Schema Registry client library for Java\n\nAzure Schema Registry is a schema repository service hosted by Azure Event Hubs, providing schema storage, versioning,\nand management. The registry is leveraged by applications to reduce payload size while describing payload structure with\nschema identifiers rather than full schemas.\n\n[Source code][source_code] | [Package (Maven)][package_maven] | [API reference documentation][api_reference_doc] | [Product Documentation][product_documentation] | [Samples][sample_readme]\n\n## Getting started\n\n### Prerequisites\n\n- A [Java Development Kit (JDK)][jdk_link], version 8 or later.\n- [Azure Subscription][azure_subscription]\n- An [Event Hubs namespace][event_hubs_namespace]\n\n### Include the package\n\n#### Include the BOM file\n\nPlease include the azure-sdk-bom to your project to take dependency on the General Availability (GA) version of the library. In the following snippet, replace the {bom_version_to_target} placeholder with the version number.\nTo learn more about the BOM, see the [AZURE SDK BOM README](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/boms/azure-sdk-bom/README.md).\n\n```xml\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>com.azure</groupId>\n            <artifactId>azure-sdk-bom</artifactId>\n            <version>{bom_version_to_target}</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n```\nand then include the direct dependency in the dependencies section without the version tag as shown below.\n\n```xml\n<dependencies>\n    <dependency>\n        <groupId>com.azure</groupId>\n        <artifactId>azure-data-schemaregistry</artifactId>\n    </dependency>\n</dependencies>\n```\n\n#### Include direct dependency\nIf you want to take dependency on a particular version of the library that is not present in the BOM,\nadd the direct dependency to your project as follows.\n\n[//]: # ({x-version-update-start;com.azure:azure-data-schemaregistry;current})\n```xml\n<dependency>\n  <groupId>com.azure</groupId>\n  <artifactId>azure-data-schemaregistry</artifactId>\n  <version>1.3.5</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Authenticate the client\nIn order to interact with the Azure Schema Registry service, you'll need to create an instance of the\n`SchemaRegistryClient` class through the `SchemaRegistryClientBuilder`. You will need an **endpoint** and an\n**API key** to instantiate a client object.\n\n#### Create SchemaRegistryClient with Azure Active Directory Credential\n\nYou can authenticate with Azure Active Directory using the [Azure Identity library][azure_identity]. Note that regional endpoints do not support AAD authentication. Create a [custom subdomain][custom_subdomain] for your resource in order to use this type of authentication.\n\nTo use the [DefaultAzureCredential][DefaultAzureCredential] provider shown below, or other credential providers provided with the Azure SDK, please include the `azure-identity` package:\n\n[//]: # ({x-version-update-start;com.azure:azure-identity;dependency})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-identity</artifactId>\n    <version>1.9.0</version>\n</dependency>\n```\n\nYou will also need to [register a new AAD application][register_aad_app] and [grant access][aad_grant_access] to\n Schema Registry service.\n\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: AZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET.\n\n##### Async client\n\n```java com.azure.data.schemaregistry.schemaregistryasyncclient.construct\nDefaultAzureCredential azureCredential = new DefaultAzureCredentialBuilder()\n    .build();\nSchemaRegistryAsyncClient client = new SchemaRegistryClientBuilder()\n    .fullyQualifiedNamespace(\"https://<your-schema-registry-endpoint>.servicebus.windows.net\")\n    .credential(azureCredential)\n    .buildAsyncClient();\n```\n\n##### Sync client\n\n```java com.azure.data.schemaregistry.schemaregistryclient.construct\nDefaultAzureCredential azureCredential = new DefaultAzureCredentialBuilder()\n    .build();\nSchemaRegistryClient client = new SchemaRegistryClientBuilder()\n    .fullyQualifiedNamespace(\"https://<your-schema-registry-endpoint>.servicebus.windows.net\")\n    .credential(azureCredential)\n    .buildClient();\n```\n\n## Key concepts\n### Schemas\n\nA schema has 6 components:\n- Group Name: The name of the group of schemas in the Schema Registry instance.\n- Schema Name: The name of the schema.\n- Schema ID: The ID assigned by the Schema Registry instance for the schema.\n- Serialization Type: The format used for serialization of the schema. For example, Avro.\n- Schema Content: The string representation of the schema.\n- Schema Version: The version assigned to the schema in the Schema Registry instance.\n\nThese components play different roles. Some are used as input into the operations and some are outputs. Currently,\n[SchemaProperties][schema_properties] only exposes those properties that are potential outputs that are used in\nSchemaRegistry operations. Those exposed properties are `Content` and `Id`.\n\n## Examples\n\n* [Register a schema](#register-a-schema)\n* [Retrieve a schema's properties](#retrieve-a-schemas-properties)\n* [Retrieve a schema](#retrieve-a-schema)\n\n### Register a schema\nRegister a schema to be stored in the Azure Schema Registry.\n\n```java com.azure.data.schemaregistry.schemaregistryclient.registerschema-avro\nString schema = \"{\\\"type\\\":\\\"enum\\\",\\\"name\\\":\\\"TEST\\\",\\\"symbols\\\":[\\\"UNIT\\\",\\\"INTEGRATION\\\"]}\";\nSchemaProperties properties = client.registerSchema(\"{schema-group}\", \"{schema-name}\", schema,\n    SchemaFormat.AVRO);\n\nSystem.out.printf(\"Schema id: %s, schema format: %s%n\", properties.getId(), properties.getFormat());\n```\n\n### Retrieve a schema's properties\nRetrieve a previously registered schema's properties from the Azure Schema Registry.\n\n```java com.azure.data.schemaregistry.schemaregistryclient.getschema\nSchemaRegistrySchema schema = client.getSchema(\"{schema-id}\");\n\nSystem.out.printf(\"Schema id: %s, schema format: %s%n\", schema.getProperties().getId(),\n    schema.getProperties().getFormat());\nSystem.out.println(\"Schema contents: \" + schema.getDefinition());\n```\n\n### Retrieve a schema\nRetrieve a previously registered schema's content and properties from the Azure Schema Registry.\n\n```java com.azure.data.schemaregistry.schemaregistryclient.getschemaproperties\nString schemaContent = \"{\\n\"\n    + \"    \\\"type\\\" : \\\"record\\\",  \\n\"\n    + \"    \\\"namespace\\\" : \\\"SampleSchemaNameSpace\\\", \\n\"\n    + \"    \\\"name\\\" : \\\"Person\\\", \\n\"\n    + \"    \\\"fields\\\" : [\\n\"\n    + \"        { \\n\"\n    + \"            \\\"name\\\" : \\\"FirstName\\\" , \\\"type\\\" : \\\"string\\\" \\n\"\n    + \"        }, \\n\"\n    + \"        { \\n\"\n    + \"            \\\"name\\\" : \\\"LastName\\\", \\\"type\\\" : \\\"string\\\" \\n\"\n    + \"        }\\n\"\n    + \"    ]\\n\"\n    + \"}\";\nSchemaProperties properties = client.getSchemaProperties(\"{schema-group}\", \"{schema-name}\",\n    schemaContent, SchemaFormat.AVRO);\n\nSystem.out.println(\"Schema id: \" + properties.getId());\nSystem.out.println(\"Format: \" + properties.getFormat());\nSystem.out.println(\"Version: \" + properties.getVersion());\n```\n\n## Troubleshooting\n\n### Enabling Logging\n\nAzure SDKs for Java offer a consistent logging story to help aid in troubleshooting application errors and expedite\ntheir resolution. The logs produced will capture the flow of an application before reaching the terminal state to help\nlocate the root issue. View the [logging][logging] wiki for guidance about enabling logging.\n\n## Next steps\nMore samples can be found [here][samples].\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a [Contributor License Agreement (CLA)][cla] declaring that you have the right to, and actually do, grant us the rights to use your contribution.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n[package_maven]: https://search.maven.org/artifact/com.azure/azure-data-schemaregistry\n[sample_readme]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/schemaregistry/azure-data-schemaregistry/src/samples\n[samples]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/schemaregistry/azure-data-schemaregistry/src/samples/java/com/azure/data/schemaregistry\n[source_code]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/schemaregistry/azure-data-schemaregistry/src\n[samples_code]: src/samples/\n[azure_subscription]: https://azure.microsoft.com/free/\n[api_reference_doc]: https://aka.ms/schemaregistry\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/identity/azure-identity\n[DefaultAzureCredential]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity/README.md#defaultazurecredential\n[event_hubs_namespace]: https://docs.microsoft.com/azure/event-hubs/event-hubs-about\n[jdk_link]: https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable\n[product_documentation]: https://aka.ms/schemaregistry\n[custom_subdomain]: https://docs.microsoft.com/azure/cognitive-services/authentication#create-a-resource-with-a-custom-subdomain\n[register_aad_app]: https://docs.microsoft.com/azure/cognitive-services/authentication#assign-a-role-to-a-service-principal\n[aad_grant_access]: https://docs.microsoft.com/azure/cognitive-services/authentication#assign-a-role-to-a-service-principal\n[schema_properties]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/schemaregistry/azure-data-schemaregistry/src/main/java/com/azure/data/schemaregistry/models/SchemaProperties.java\n[logging]: https://github.com/Azure/azure-sdk-for-java/wiki/Logging-with-Azure-SDK#use-logback-logging-framework-in-a-spring-boot-application\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fschemaregistry%2Fazure-data-schemaregistry%2FREADME.png)\n",
        "repo_name": "schemaregistry/azure-data-schemaregistry",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/schemaregistry/azure-data-schemaregistry",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager Scvmm client library for Java\n\nAzure Resource Manager Scvmm client library for Java.\n\nThis package contains Microsoft Azure SDK for Scvmm Management SDK. SCVMM Client. Package tag package-2020-06-05-preview. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-scvmm;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-scvmm</artifactId>\n    <version>1.0.0-beta.1</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nScvmmManager manager = ScvmmManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/scvmm/azure-resourcemanager-scvmm/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n",
        "repo_name": "scvmm/azure-resourcemanager-scvmm",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/scvmm/azure-resourcemanager-scvmm",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Cognitive Search client library for Java\n\nThis is the Java client library for [Azure Cognitive Search](https://docs.microsoft.com/azure/search/).\nAzure Cognitive Search service is a search-as-a-service cloud solution that gives developers APIs and tools for adding\na rich search experience over private, heterogeneous content in web, mobile, and enterprise applications.\n\nThe Azure Cognitive Search service is well suited for the following application scenarios:\n\n* Consolidate varied content types into a single searchable index. To populate an index, you can push JSON documents\nthat contain your content, or if your data is already in Azure, create an indexer to pull in data automatically.\n\n* Attach skillsets to an indexer to create searchable content from images and large text documents. A skillset leverages\nAI from Cognitive Services for built-in OCR, entity recognition, key phrase extraction, language detection, text\ntranslation, and sentiment analysis. You can also add custom skills to integrate external processing of your content\nduring data ingestion.\n\n* In a search client application, implement query logic and user experiences similar to commercial web search engines.\n\nUse the Azure Cognitive Search client library to:\n\n* Submit queries for simple and advanced query forms that include fuzzy search, wildcard search, regular expressions.\n* Implement filtered queries for faceted navigation, geospatial search, or to narrow results based on filter criteria.\n* Create and manage search indexes.\n* Upload and update documents in the search index.\n* Create and manage indexers that pull data from Azure into an index.\n* Create and manage skillsets that add AI enrichment to data ingestion.\n* Create and manage analyzers for advanced text analysis or multi-lingual content.\n* Optimize results through scoring profiles to factor in business logic or freshness.\n\n[Source code][source_code] | [Package (Maven)][package] | [API reference documentation][api_documentation]| [Product documentation][search_docs] | [Samples][samples]\n\n## Getting started\n\n### Include the package\n\n#### Include the BOM file\n\nPlease include the azure-sdk-bom to your project to take dependency on the General Availability (GA) version of the library. In the following snippet, replace the {bom_version_to_target} placeholder with the version number.\nTo learn more about the BOM, see the [AZURE SDK BOM README](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/boms/azure-sdk-bom/README.md).\n\n```xml\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>com.azure</groupId>\n            <artifactId>azure-sdk-bom</artifactId>\n            <version>{bom_version_to_target}</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n```\nand then include the direct dependency in the dependencies section without the version tag.\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-search-documents</artifactId>\n  </dependency>\n</dependencies>\n```\n\n#### Include direct dependency\n\nIf you want to take dependency on a particular version of the library that is not present in the BOM,\nadd the direct dependency to your project as follows.\n\n\n[//]: # ({x-version-update-start;com.azure:azure-search-documents;current})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-search-documents</artifactId>\n    <version>11.5.7</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Prerequisites\n\n* [Java Development Kit (JDK) with version 8 or above][jdk]\n* [Azure subscription][azure_subscription]\n* [Azure Cognitive Search service][search]\n* To create a new search service, you can use the [Azure portal][create_search_service_docs],\n[Azure PowerShell][create_search_service_ps], or the [Azure CLI][create_search_service_cli].\nHere's an example using the Azure CLI to create a free instance for getting started:\n\n```bash\naz search service create --name <mysearch> --resource-group <mysearch-rg> --sku free --location westus\n```\n\nSee [choosing a pricing tier](https://docs.microsoft.com/azure/search/search-sku-tier) for more information about available options.\n\n### Authenticate the client\n\nIn order to interact with the Azure Cognitive Search service you'll need to create an instance of the Search Client class.\nTo make this possible you will need,\n\n1. [URL endpoint](https://docs.microsoft.com/azure/search/search-create-service-portal#get-a-key-and-url-endpoint)\n1. [API key](https://docs.microsoft.com/azure/search/search-create-service-portal#get-a-key-and-url-endpoint)\n\nfor your service. [The api-key is the sole mechanism for authenticating access to\nyour search service endpoint.](https://docs.microsoft.com/azure/search/search-security-api-keys)\nYou can obtain your api-key from the [Azure portal](https://portal.azure.com/) or via the Azure CLI:\n\n```bash\naz search admin-key show --service-name <mysearch> --resource-group <mysearch-rg>\n```\n\n**Note:**\n\n* The example Azure CLI snippet above retrieves an admin key. This allows for easier access when exploring APIs,\nbut it should be managed carefully.\n* There are two types of keys used to access your search service: **admin** *(read-write)* and **query** *(read-only)*\nkeys. Restricting access and operations in client apps is essential to safeguarding the search assets on your service.\nAlways use a query key rather than an admin key for any query originating from a client app.\n\nThe SDK provides three clients.\n\n* `SearchIndexClient` for CRUD operations on indexes and synonym maps.\n* `SearchIndexerClient` for CRUD operations on indexers, data sources, and skillsets.\n* `SearchClient` for all document operations.\n\n#### Create a SearchIndexClient\n\nTo create a `SearchIndexClient/SearchIndexAsyncClient`, you will need the values of the Azure Cognitive Search service\nURL endpoint and admin key.\n\n```java readme-sample-createIndexClient\nSearchIndexClient searchIndexClient = new SearchIndexClientBuilder()\n    .endpoint(ENDPOINT)\n    .credential(new AzureKeyCredential(API_KEY))\n    .buildClient();\n```\n\nor\n\n```java readme-sample-createIndexAsyncClient\nSearchIndexAsyncClient searchIndexAsyncClient = new SearchIndexClientBuilder()\n    .endpoint(ENDPOINT)\n    .credential(new AzureKeyCredential(API_KEY))\n    .buildAsyncClient();\n```\n\n#### Create a SearchIndexerClient\n\nTo create a `SearchIndexerClient/SearchIndexerAsyncClient`, you will need the values of the Azure Cognitive Search service\nURL endpoint and admin key.\n\n```java readme-sample-createIndexerClient\nSearchIndexerClient searchIndexerClient = new SearchIndexerClientBuilder()\n    .endpoint(ENDPOINT)\n    .credential(new AzureKeyCredential(API_KEY))\n    .buildClient();\n```\n\nor\n\n```java readme-sample-createIndexerAsyncClient\nSearchIndexerAsyncClient searchIndexerAsyncClient = new SearchIndexerClientBuilder()\n    .endpoint(ENDPOINT)\n    .credential(new AzureKeyCredential(API_KEY))\n    .buildAsyncClient();\n```\n\n#### Create a SearchClient\n\nOnce you have the values of the Azure Cognitive Search service URL endpoint and\nadmin key, you can create the `SearchClient/SearchAsyncClient` with an existing index name:\n\n```java readme-sample-createSearchClient\nSearchClient searchClient = new SearchClientBuilder()\n    .endpoint(ENDPOINT)\n    .credential(new AzureKeyCredential(ADMIN_KEY))\n    .indexName(INDEX_NAME)\n    .buildClient();\n```\n\nor\n\n```java readme-sample-createAsyncSearchClient\nSearchAsyncClient searchAsyncClient = new SearchClientBuilder()\n    .endpoint(ENDPOINT)\n    .credential(new AzureKeyCredential(ADMIN_KEY))\n    .indexName(INDEX_NAME)\n    .buildAsyncClient();\n```\n\n### Send your first search query\n\nTo get running with Azure Cognitive Search first create an index following this [guide][search-get-started-portal].\nWith an index created you can use the following samples to begin using the SDK.\n\n## Key concepts\n\nAn Azure Cognitive Search service contains one or more indexes that provide persistent storage of searchable data in\nthe form of JSON documents. _(If you're new to search, you can make a very rough analogy between indexes and database\ntables.)_ The `azure-search-documents` client library exposes operations on these resources through two main client types.\n\n* `SearchClient` helps with:\n  * [Searching](https://docs.microsoft.com/azure/search/search-lucene-query-architecture)\n    your indexed documents using\n    [rich queries](https://docs.microsoft.com/azure/search/search-query-overview)\n    and [powerful data shaping](https://docs.microsoft.com/azure/search/search-filters)\n  * [Autocompleting](https://docs.microsoft.com/rest/api/searchservice/autocomplete)\n    partially typed search terms based on documents in the index\n  * [Suggesting](https://docs.microsoft.com/rest/api/searchservice/suggestions)\n    the most likely matching text in documents as a user types\n  * [Adding, Updating or Deleting Documents](https://docs.microsoft.com/rest/api/searchservice/addupdate-or-delete-documents)\n    documents from an index\n\n* `SearchIndexClient` allows you to:\n  * [Create, delete, update, or configure a search index](https://docs.microsoft.com/rest/api/searchservice/index-operations)\n  * [Declare custom synonym maps to expand or rewrite queries](https://docs.microsoft.com/rest/api/searchservice/synonym-map-operations)\n  * Most of the `SearchServiceClient` functionality is not yet available in our current preview\n\n* `SearchIndexerClient` allows you to:\n  * [Start indexers to automatically crawl data sources](https://docs.microsoft.com/rest/api/searchservice/indexer-operations)\n  * [Define AI powered Skillsets to transform and enrich your data](https://docs.microsoft.com/rest/api/searchservice/skillset-operations)\n\n## Examples\n\nThe following examples all use a simple [Hotel data set](https://github.com/Azure-Samples/azure-search-sample-data)\nthat you can [import into your own index from the Azure portal.](https://docs.microsoft.com/azure/search/search-get-started-portal#step-1---start-the-import-data-wizard-and-create-a-data-source)\nThese are just a few of the basics - please [check out our Samples][samples_readme] for much more.\n\n* [Querying](#querying)\n  * [Use `SearchDocument` like a dictionary for search results](#use-searchdocument-like-a-dictionary-for-search-results)\n  * [Use Java model for search results](#use-java-model-class-for-search-results)\n  * [Search Options](#search-options)\n* [Creating an index](#creating-an-index)\n* [Adding documents to your index](#adding-documents-to-your-index)\n* [Retrieving a specific document from your index](#retrieving-a-specific-document-from-your-index)\n* [Async APIs](#async-apis)\n* [Create a client that can authenticate in a national cloud](#authenticate-in-a-national-cloud)\n\n### Querying\n\nThere are two ways to interact with the data returned from a search query.\n\nLet's explore them with a search for a \"luxury\" hotel.\n\n#### Use `SearchDocument` like a dictionary for search results\n\n`SearchDocument` is the default type returned from queries when you don't provide your own.  Here we perform the search,\nenumerate over the results, and extract data using `SearchDocument`'s dictionary indexer.\n\n```java readme-sample-searchWithDynamicType\nfor (SearchResult searchResult : SEARCH_CLIENT.search(\"luxury\")) {\n    SearchDocument doc = searchResult.getDocument(SearchDocument.class);\n    String id = (String) doc.get(\"hotelId\");\n    String name = (String) doc.get(\"hotelName\");\n    System.out.printf(\"This is hotelId %s, and this is hotel name %s.%n\", id, name);\n}\n```\n\n#### Use Java model class for search results\n\nDefine a `Hotel` class.\n\n```java readme-sample-hotelclass\npublic class Hotel {\n    private String id;\n    private String name;\n\n    public String getId() {\n        return id;\n    }\n\n    public Hotel setId(String id) {\n        this.id = id;\n        return this;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public Hotel setName(String name) {\n        this.name = name;\n        return this;\n    }\n}\n```\n\nUse it in place of `SearchDocument` when querying.\n\n```java readme-sample-searchWithStronglyType\nfor (SearchResult searchResult : SEARCH_CLIENT.search(\"luxury\")) {\n    Hotel doc = searchResult.getDocument(Hotel.class);\n    String id = doc.getId();\n    String name = doc.getName();\n    System.out.printf(\"This is hotelId %s, and this is hotel name %s.%n\", id, name);\n}\n```\n\nIt is recommended, when you know the schema of the search index, to create a Java model class.\n\n#### Search Options\n\nThe `SearchOptions` provide powerful control over the behavior of our queries.\n\nLet's search for the top 5 luxury hotels with a good rating.\n\n```java readme-sample-searchWithSearchOptions\nSearchOptions options = new SearchOptions()\n    .setFilter(\"rating ge 4\")\n    .setOrderBy(\"rating desc\")\n    .setTop(5);\nSearchPagedIterable searchResultsIterable = SEARCH_CLIENT.search(\"luxury\", options, Context.NONE);\n// ...\n```\n\n### Creating an index\n\nYou can use the [`SearchIndexClient`](#create-a-searchindexclient) to create a search index. Indexes can also define\nsuggesters, lexical analyzers, and more.\n\nThere are multiple ways of preparing search fields for a search index. For basic needs, we provide a static helper method\n`buildSearchFields` in `SearchIndexClient` and `SearchIndexAsyncClient`, which can convert Java POJO class into\n`List<SearchField>`. There are three annotations `SimpleFieldProperty`, `SearchFieldProperty` and `FieldBuilderIgnore`\nto configure the field of model class.\n\n```java readme-sample-createIndexUseFieldBuilder\nList<SearchField> searchFields = SearchIndexClient.buildSearchFields(Hotel.class, null);\nSEARCH_INDEX_CLIENT.createIndex(new SearchIndex(\"index\", searchFields));\n```\n\nFor advanced scenarios, we can build search fields using `SearchField` directly.\n\n```java readme-sample-createIndex\nList<SearchField> searchFieldList = new ArrayList<>();\nsearchFieldList.add(new SearchField(\"hotelId\", SearchFieldDataType.STRING)\n    .setKey(true)\n    .setFilterable(true)\n    .setSortable(true));\n\nsearchFieldList.add(new SearchField(\"hotelName\", SearchFieldDataType.STRING)\n    .setSearchable(true)\n    .setFilterable(true)\n    .setSortable(true));\nsearchFieldList.add(new SearchField(\"description\", SearchFieldDataType.STRING)\n    .setSearchable(true)\n    .setAnalyzerName(LexicalAnalyzerName.EU_LUCENE));\nsearchFieldList.add(new SearchField(\"tags\", SearchFieldDataType.collection(SearchFieldDataType.STRING))\n    .setSearchable(true)\n    .setFilterable(true)\n    .setFacetable(true));\nsearchFieldList.add(new SearchField(\"address\", SearchFieldDataType.COMPLEX)\n    .setFields(new SearchField(\"streetAddress\", SearchFieldDataType.STRING).setSearchable(true),\n        new SearchField(\"city\", SearchFieldDataType.STRING)\n            .setSearchable(true)\n            .setFilterable(true)\n            .setFacetable(true)\n            .setSortable(true),\n        new SearchField(\"stateProvince\", SearchFieldDataType.STRING)\n            .setSearchable(true)\n            .setFilterable(true)\n            .setFacetable(true)\n            .setSortable(true),\n        new SearchField(\"country\", SearchFieldDataType.STRING)\n            .setSearchable(true)\n            .setFilterable(true)\n            .setFacetable(true)\n            .setSortable(true),\n        new SearchField(\"postalCode\", SearchFieldDataType.STRING)\n            .setSearchable(true)\n            .setFilterable(true)\n            .setFacetable(true)\n            .setSortable(true)\n    ));\n\n// Prepare suggester.\nSearchSuggester suggester = new SearchSuggester(\"sg\", Collections.singletonList(\"hotelName\"));\n// Prepare SearchIndex with index name and search fields.\nSearchIndex index = new SearchIndex(\"hotels\").setFields(searchFieldList).setSuggesters(suggester);\n// Create an index\nSEARCH_INDEX_CLIENT.createIndex(index);\n```\n\n### Retrieving a specific document from your index\n\nIn addition to querying for documents using keywords and optional filters, you can retrieve a specific document from\nyour index if you already know the key. You could get the key from a query, for example, and want to show more\ninformation about it or navigate your customer to that document.\n\n```java readme-sample-retrieveDocuments\nHotel hotel = SEARCH_CLIENT.getDocument(\"1\", Hotel.class);\nSystem.out.printf(\"This is hotelId %s, and this is hotel name %s.%n\", hotel.getId(), hotel.getName());\n```\n\n### Adding documents to your index\n\nYou can `Upload`, `Merge`, `MergeOrUpload`, and `Delete` multiple documents from an index in a single batched request.\nThere are [a few special rules for merging](https://docs.microsoft.com/rest/api/searchservice/addupdate-or-delete-documents#document-actions)\nto be aware of.\n\n```java readme-sample-batchDocumentsOperations\nIndexDocumentsBatch<Hotel> batch = new IndexDocumentsBatch<>();\nbatch.addUploadActions(Collections.singletonList(new Hotel().setId(\"783\").setName(\"Upload Inn\")));\nbatch.addMergeActions(Collections.singletonList(new Hotel().setId(\"12\").setName(\"Renovated Ranch\")));\nSEARCH_CLIENT.indexDocuments(batch);\n```\n\nThe request will throw `IndexBatchException` by default if any of the individual actions fail, and you can use\n`findFailedActionsToRetry` to retry on failed documents. There's also a `throwOnAnyError` option, and you can set it\nto `false` to get a successful response with an `IndexDocumentsResult` for inspection.\n\n### Async APIs\n\nThe examples so far have been using synchronous APIs, but we provide full support for async APIs as well. You'll need\nto use [SearchAsyncClient](#create-a-searchclient).\n\n```java readme-sample-searchWithAsyncClient\nSEARCH_ASYNC_CLIENT.search(\"luxury\")\n    .subscribe(result -> {\n        Hotel hotel = result.getDocument(Hotel.class);\n        System.out.printf(\"This is hotelId %s, and this is hotel name %s.%n\", hotel.getId(), hotel.getName());\n    });\n```\n\n### Authenticate in a National Cloud\n\nTo authenticate in a [National Cloud](https://docs.microsoft.com/azure/active-directory/develop/authentication-national-cloud), you will need to make the following additions to your client configuration:\n\n- Set the `AuthorityHost` in the credential options or via the `AZURE_AUTHORITY_HOST` environment variable\n- Set the `audience` in `SearchClientBuilder`, `SearchIndexClientBuilder`, or `SearchIndexerClientBuilder`\n\n```java readme-sample-nationalCloud\n// Create a SearchClient that will authenticate through AAD in the China national cloud.\nSearchClient searchClient = new SearchClientBuilder()\n    .endpoint(ENDPOINT)\n    .indexName(INDEX_NAME)\n    .credential(new DefaultAzureCredentialBuilder()\n        .authorityHost(AzureAuthorityHosts.AZURE_CHINA)\n        .build())\n    .audience(SearchAudience.AZURE_CHINA)\n    .buildClient();\n```\n\n## Troubleshooting\n\nSee our [troubleshooting guide](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/search/azure-search-documents/TROUBLESHOOTING.md) \nfor details on how to diagnose various failure scenarios.\n\n### General\n\nWhen you interact with Azure Cognitive Search using this Java client library, errors returned by the service correspond\nto the same HTTP status codes returned for [REST API][rest_api] requests. For example, the service will return a `404`\nerror if you try to retrieve a document that doesn't exist in your index.\n\n### Handling Search Error Response\n\nAny Search API operation that fails will throw an [`HttpResponseException`][HttpResponseException] with helpful\n[`Status codes`][status_codes]. Many of these errors are recoverable.\n\n```java readme-sample-handleErrorsWithSyncClient\ntry {\n    Iterable<SearchResult> results = SEARCH_CLIENT.search(\"hotel\");\n} catch (HttpResponseException ex) {\n    // The exception contains the HTTP status code and the detailed message\n    // returned from the search service\n    HttpResponse response = ex.getResponse();\n    System.out.println(\"Status Code: \" + response.getStatusCode());\n    System.out.println(\"Message: \" + ex.getMessage());\n}\n```\n\nYou can also easily [enable console logging][logging] if you want to dig deeper into the requests you're making against\nthe service.\n\n### Enabling Logging\n\nAzure SDKs for Java provide a consistent logging story to help aid in troubleshooting application errors and expedite\ntheir resolution. The logs produced will capture the flow of an application before reaching the terminal state to help\nlocate the root issue. View the [logging][logging] wiki for guidance about enabling logging.\n\n### Default HTTP Client\n\nBy default, a Netty based HTTP client will be used. The [HTTP clients wiki](https://github.com/Azure/azure-sdk-for-java/wiki/HTTP-clients)\nprovides more information on configuring or changing the HTTP client.\n\n## Next steps\n\n* Samples are explained in detail [here][samples_readme].\n* Watch a [demo or deep dive video](https://azure.microsoft.com/resources/videos/index/?services=search)\n* Read more about the [Azure Cognitive Search service](https://docs.microsoft.com/azure/search/search-what-is-azure-search)\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a\n[Contributor License Agreement (CLA)][cla] declaring that you have the right to, and actually do, grant us the rights\nto use your contribution.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate\nthe PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to\ndo this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the\n[Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n[jdk]: https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable\n[api_documentation]: https://azure.github.io/azure-sdk-for-java/search.html\n[search]: https://azure.microsoft.com/services/search/\n[search_docs]: https://docs.microsoft.com/azure/search/\n[azure_subscription]: https://azure.microsoft.com/free/java\n[maven]: https://maven.apache.org/\n[package]: https://search.maven.org/artifact/com.azure/azure-search-documents\n[samples]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/search/azure-search-documents/src/samples/\n[samples_readme]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/search/azure-search-documents/src/samples/README.md\n[source_code]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/search/azure-search-documents/src\n[logging]: https://github.com/Azure/azure-sdk-for-java/wiki/Logging-with-Azure-SDK\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n[add_headers_from_context_policy]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core/src/main/java/com/azure/core/http/policy/AddHeadersFromContextPolicy.java\n[rest_api]: https://docs.microsoft.com/rest/api/searchservice/http-status-codes\n[create_search_service_docs]: https://docs.microsoft.com/azure/search/search-create-service-portal\n[create_search_service_ps]: https://docs.microsoft.com/azure/search/search-manage-powershell#create-or-delete-a-service\n[create_search_service_cli]: https://docs.microsoft.com/cli/azure/search/service?view=azure-cli-latest#az-search-service-create\n[HttpResponseException]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core/src/main/java/com/azure/core/exception/HttpResponseException.java\n[status_codes]: https://docs.microsoft.com/rest/api/searchservice/http-status-codes\n[search-get-started-portal]: https://docs.microsoft.com/azure/search/search-get-started-portal\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fsearch%2Fazure-search-documents%2FREADME.png)\n",
        "repo_name": "search/azure-search-documents",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/search/azure-search-documents",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Search Performance test client library for Java\n\nRepresents Performance tests for Azure Search SDK for Java.\n\n## Getting started\n\n### Prerequisites\n\n- Java Development Kit (JDK) with version 8 or above\n\n### Adding the package to your product\n\n\n## Key concepts\n\n\n## Examples\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n",
        "repo_name": "search/azure-search-perf",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/search/azure-search-perf",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager Security client library for Java\n\nAzure Resource Manager Security client library for Java.\n\nThis package contains Microsoft Azure SDK for Security Management SDK. API spec for Microsoft.Security (Azure Security Center) resource provider. Package tag package-composite-v3. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-security;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-security</artifactId>\n    <version>1.0.0-beta.5</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nSecurityManager manager = SecurityManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/security/azure-resourcemanager-security/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "security/azure-resourcemanager-security",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/security/azure-resourcemanager-security",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager Security Dev Ops client library for Java\n\nAzure Resource Manager Security Dev Ops client library for Java.\n\nThis package contains Microsoft Azure SDK for Security Dev Ops Management SDK. REST APIs for Defender for DevOps. Package tag package-2022-09-01-preview. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-securitydevops;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-securitydevops</artifactId>\n    <version>1.0.0-beta.1</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nSecurityDevOpsManager manager = SecurityDevOpsManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/securitydevops/azure-resourcemanager-securitydevops/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n",
        "repo_name": "securitydevops/azure-resourcemanager-securitydevops",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/securitydevops/azure-resourcemanager-securitydevops",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager SecurityInsights client library for Java\n\nAzure Resource Manager SecurityInsights client library for Java.\n\nThis package contains Microsoft Azure SDK for SecurityInsights Management SDK. API spec for Microsoft.SecurityInsights (Azure Security Insights) resource provider. Package tag package-preview-2022-09. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-securityinsights;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-securityinsights</artifactId>\n    <version>1.0.0-beta.4</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nSecurityInsightsManager manager = SecurityInsightsManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/securityinsights/azure-resourcemanager-securityinsights/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n",
        "repo_name": "securityinsights/azure-resourcemanager-securityinsights",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/securityinsights/azure-resourcemanager-securityinsights",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager Self Help client library for Java\n\nAzure Resource Manager Self Help client library for Java.\n\nThis package contains Microsoft Azure SDK for Self Help Management SDK. Help RP provider. Package tag package-2023-01-01-preview. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-selfhelp;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-selfhelp</artifactId>\n    <version>1.0.0-beta.1</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nSelfHelpManager manager = SelfHelpManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/selfhelp/azure-resourcemanager-selfhelp/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "selfhelp/azure-resourcemanager-selfhelp",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/selfhelp/azure-resourcemanager-selfhelp",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Service Bus Stress test client library for Java\n\nRepresents stress tests for Service Bus client.\n\n## Getting started\n\nThe stress tests for service bus client is developed from [azure-sdk-chaos][azure_sdk_chaos].\n\nTo know how to develop a stress test project, you should first go through the [Azure SDK Stress Test Wiki][azure_sdk_stress_test].\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk_link], version 8 or later.\n- [Maven][maven]\n- [Docker][docker]\n- [Kubectl][kubectl]\n- [Helm][helm]\n- [Azure CLI][azure_cli]\n- [Powershell 7.0+][powershell]\n\n### Deploy Stress Test\n\nBuild out the jar package:\n\n```shell\ncd <current project path>\nmvn clean install\n```\n\nRun command to deploy the package to cluster:\n\n```shell\n..\\..\\..\\eng\\common\\scripts\\stress-testing\\deploy-stress-tests.ps1 -Login -PushImage\n``` \n\n### Validate Status\n\nOnly the most frequently used commands are listed below. See [Deploying A Stress Test][deploy_stress_test] for more details.\n\nList deployed packages:\n\n```shell\nhelm list -n <stress test namespace>\n```\n\nGet stress test pods and status:\n\n```shell\nkubectl get pods -n <stress test namespace>\n```\n\nGet stress test pod logs:\n\n```shell\nkubectl logs -n <stress test namespace> <stress test pod name>\n# Note that we may define multiple containers (for example, sender and receiver)\nkubectl logs -n <stress test namespace> <stress test pod name> -c <container name>\n```\n\nIf stress test pod is in `Error` status, check logs from init container:\n\n```shell\nkubectl logs -n <stress test namespace> <stress test pod name> -c init-azure-deployer\n```\n\nIf above command output is empty, there may have been startup failures:\n\n```shell\nkubectl describe pod -n <stress test namespace> <stress test pod name>\n```\n\nStop and remove deployed package:\n\n```shell\nhelm uninstall <stress test name> -n <stress test namespace>\n```\n\n### Monitoring\n\nAfter the stress test is deployed on the cluster, we can monitor the telemetry data on the application insights which is \ninside the stress test resource group.\n\nThe SDK metrics can also be monitored on application insights as we have imported \n[Azure OpenTelemetry Metrics plugin][azure_core_metrics_opentelemetry] as project dependency.\n\nThere are several dashboards within the stress test resource group that we can use to monitor the AKS pod and stress test status.\n\nIf you want do the local test and enable application insights, you can follow the [steps][enable_application_insights] to set the java agent.\nMake sure you have added the JVM parameters when you start the test.\n\n\n### Logging\n\nWe use [logback.xml][logback_xml] to configure the logging. By default, the stress test run on cluster will output \n`INFO` level log to the file share. The container console only save the `WARN` and `ERROR` level log.\n\nFollow the steps in [Stress Test File Share][stress_test_file_share] to find the file share logs.\n\n### Configure Faults\n\nSee [Config Faults][config_faults] section for details.\n\n## Key concepts\n\n### Project Structure\n\nSee [Layout][stress_test_layout] section for details. \n\nBelow is the current structure of project:\n```\n.\n\u251c\u2500\u2500 src/                           # Test code\n\u251c\u2500\u2500 templates/                     # A directory of helm templates that will generate Kubernetes manifest files.\n\u251c\u2500\u2500 Chart.yaml                     # A YAML file containing information about the helm chart and its dependencies\n\u251c\u2500\u2500 scenarios-matrix.yaml          # A YAML file containing configuration and custom values for stress test(s)\n\u251c\u2500\u2500 Dockerfile                     # A Dockerfile for building the stress test image\n\u251c\u2500\u2500 stress-test-resources.bicep    # An Azure Bicep for deploying stress test azure resources\n\u251c\u2500\u2500 pom.xml\n\u2514\u2500\u2500 README.md\n```\n\n### Cluster Namespace \nThe cluster namespace is defined in `Chart.yaml`. The default value we set is `java-sb`.\n\n```yaml\nname: <stress test name>\n...\nannotations:\n  namespace: <stress test namespace>\n```\n\nFor local deployment with script, if the namespace option is not specified, the value will be overridden by the shell username.\n\n```shell\n..\\..\\..\\eng\\common\\scripts\\stress-testing\\deploy-stress-tests.ps1 -Namespace <stress test namespace>\n```\n\n## Examples\n\n### Test Queue/Topic\n\nYou can switch to test Queue or Topic by providing the program argument `--SERVICEBUS_ENTITY_TYPE=QUEUE/TOPIC`. \n\nIf you haven't provided, the default value we are using is `QUEUE`.\n\n### Add New Test Scenario\n\nAdd a new test class under `\\scenarios`.\n\nExtend `ServiceBusScenario` and implement test logic in `run()` method.\n\nConfigure new class as bean and use class name as its bean name.\n\nUpdate `args` field in `job.yaml` to execute the new test class.\n\nBuild out jar package and redeploy to cluster.\n\n### Add New Scenario Option\n\nWe use [Spring][spring_configuration] to inject environment variable or\ncommand line arguments as the scenario options.\n\nYou can add new scenario option in [ScenarioOptions][ScenarioOptions] with below format:\n\n```java\n@Value(\"NEW_OPTION: default value\")\nprivate Type newOption;\n\npublic Type getNewOption() {\n    return newOption;\n}\n```\n\nIt is recommended to provide a default value for the new option, as it will not have any impact\non the existing job configuration.\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- links -->\n[azure_sdk_chaos]: https://github.com/Azure/azure-sdk-tools/blob/main/tools/stress-cluster/chaos/README.md\n[azure_sdk_stress_test]: https://aka.ms/azsdk/stress\n[jdk_link]: https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable\n[maven]: https://maven.apache.org/\n[docker]: https://docs.docker.com/get-docker/\n[kubectl]: https://kubernetes.io/docs/tasks/tools/#kubectl\n[helm]: https://helm.sh/docs/intro/install/\n[azure_cli]: https://docs.microsoft.com/cli/azure/install-azure-cli\n[powershell]: https://docs.microsoft.com/powershell/scripting/install/installing-powershell?view=powershell-7\n[enable_application_insights]: https://docs.microsoft.com/azure/azure-monitor/app/java-in-process-agent#enable-azure-monitor-application-insights\n[azure_core_metrics_opentelemetry]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/core/azure-core-metrics-opentelemetry\n[logback_xml]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/servicebus/azure-messaging-servicebus-stress/src/main/resources/logback.xml\n[stress_test_file_share]: https://github.com/Azure/azure-sdk-tools/blob/main/tools/stress-cluster/chaos/README.md#stress-test-file-share\n[deploy_stress_test]: https://github.com/Azure/azure-sdk-tools/blob/main/tools/stress-cluster/chaos/README.md#deploying-a-stress-test\n[config_faults]: https://github.com/Azure/azure-sdk-tools/blob/main/tools/stress-cluster/chaos/README.md#configuring-faults\n[stress_test_layout]: https://github.com/Azure/azure-sdk-tools/blob/main/tools/stress-cluster/chaos/README.md#layout\n[spring_configuration]: https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.external-config\n[ScenarioOptions]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/servicebus/azure-messaging-servicebus-stress/src/main/java/com/azure/messaging/servicebus/stress/util/ScenarioOptions.java\n",
        "repo_name": "servicebus/azure-messaging-servicebus-stress",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/servicebus/azure-messaging-servicebus-stress",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure ServiceBus Performance test client library for Java\n\nRepresents Performance tests for Azure Service Bus SDK for Java.\n\n## Getting started\n\n### Prerequisites\n\n- Java Development Kit (JDK) with version 8 or above\n\n### Adding the package to your product\n\n\n## Key concepts\n\n\n## Examples\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create new Pull Request\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fservicebus%2Fazure-messaging-servicebus-track1-perf%2FREADME.png)\n",
        "repo_name": "servicebus/azure-messaging-servicebus-track1-perf",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/servicebus/azure-messaging-servicebus-track1-perf",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure ServiceBus Performance test client library for Java\n\nRepresents Performance tests for Azure Service Bus SDK for Java.\n\n## Getting started\n\n### Prerequisites\n\n- Java Development Kit (JDK) with version 8 or above\n\n### Adding the package to your product\n\n\n## Key concepts\n\n\n## Examples\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create new Pull Request\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fservicebus%2Fazure-messaging-servicebus-track2-perf%2FREADME.png)\n",
        "repo_name": "servicebus/azure-messaging-servicebus-track2-perf",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/servicebus/azure-messaging-servicebus-track2-perf",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Service Bus client library for Java\n\nMicrosoft Azure Service Bus is a fully managed enterprise integration message broker. Service Bus can decouple\napplications and services. Service Bus offers a reliable and secure platform for asynchronous transfer of data and\nstate. Data is transferred between different applications and services using messages. If you would like to know more\nabout Azure Service Bus, you may wish to review: [What is Service Bus][product_docs]\n\nThe Azure Service Bus client library allows for sending and receiving of Azure Service Bus messages and may be used to:\n- Transfer business data, such as sales or purchase orders, journals, or inventory movements.\n- Decouple applications to improve reliability and scalability of applications and services. Clients and services don't\nhave to be online at the same time.\n- Enable 1:n relationships between publishers and subscribers.\n- Implement workflows that require message ordering or message deferral.\n\n[Source code][source_code] | [API reference documentation][api_documentation]\n| [Product documentation][product_docs] | [Samples][sample_examples] | [Package (Maven)][maven_package]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][java_development_kit] with version 8 or above\n- [Maven][maven]\n- Microsoft Azure subscription\n  - You can create a free account at: [https://azure.microsoft.com](https://azure.microsoft.com)\n- Azure Service Bus instance\n  - Step-by-step guide for [creating a Service Bus instance using Azure Portal][service_bus_create]\n\nTo quickly create the needed Service Bus resources in Azure and to receive a connection string for them, you can deploy our sample template by clicking:\n\n[![](http://azuredeploy.net/deploybutton.png)](https://portal.azure.com/#create/Microsoft.Template/uri/https%3A%2F%2Fraw.githubusercontent.com%2FAzure%2Fazure-sdk-for-net%2Fmaster%2Fsdk%2Fservicebus%2FAzure.Messaging.ServiceBus%2Fassets%2Fsamples-azure-deploy.json)\n\n### Include the package\n#### Include the BOM file\n\nPlease include the azure-sdk-bom to your project to take dependency on the General Availability (GA) version of the library. In the following snippet, replace the {bom_version_to_target} placeholder with the version number.\nTo learn more about the BOM, see the [AZURE SDK BOM README](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/boms/azure-sdk-bom/README.md).\n\n```xml\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>com.azure</groupId>\n            <artifactId>azure-sdk-bom</artifactId>\n            <version>{bom_version_to_target}</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n```\nand then include the direct dependency in the dependencies section without the version tag.\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-messaging-servicebus</artifactId>\n  </dependency>\n</dependencies>\n```\n\n#### Include direct dependency\nIf you want to take dependency on a particular version of the library that is not present in the BOM,\nadd the direct dependency to your project as follows.\n\n[//]: # ({x-version-update-start;com.azure:azure-messaging-servicebus;current})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-messaging-servicebus</artifactId>\n    <version>7.14.1</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Authenticate the client\n\nFor the Service Bus client library to interact with Service Bus, it will need to understand how to connect and authorize\nwith it.\n\n#### Create Service Bus clients using a connection string\n\nThe easiest means for authenticating is to use a connection string, which automatically created when creating a Service Bus\nnamespace. If you aren't familiar with shared access policies in Azure, you may wish to follow the step-by-step guide to\n[get a Service Bus connection string][service_bus_connection_string].\n\nBoth the asynchronous and synchronous Service Bus sender and receiver clients are instantiated using\n`ServiceBusClientBuilder`. The snippets below create a synchronous Service Bus sender and an asynchronous receiver,\nrespectively.\n\n```java readme-sample-createAsynchronousServiceBusSender\nServiceBusSenderClient sender = new ServiceBusClientBuilder()\n    .connectionString(\"<< CONNECTION STRING FOR THE SERVICE BUS NAMESPACE >>\")\n    .sender()\n    .queueName(\"<< QUEUE NAME >>\")\n    .buildClient();\n```\n\n```java readme-sample-createAsynchronousServiceBusReceiver\nServiceBusReceiverAsyncClient receiver = new ServiceBusClientBuilder()\n    .connectionString(\"<< CONNECTION STRING FOR THE SERVICE BUS NAMESPACE >>\")\n    .receiver()\n    .topicName(\"<< TOPIC NAME >>\")\n    .subscriptionName(\"<< SUBSCRIPTION NAME >>\")\n    .buildAsyncClient();\n```\n\n#### Create a Service Bus client using Microsoft Identity platform (formerly Azure Active Directory)\n\nAzure SDK for Java supports the Azure Identity package, making it simple to get credentials from the Microsoft identity\nplatform. First, add the package:\n\n[//]: # ({x-version-update-start;com.azure:azure-identity;dependency})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-identity</artifactId>\n    <version>1.9.1</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n- Known Issue: The pom.xml file should list `azure-messaging-servicebus` before `azure-identity` client libraries. This\n  issue is resolved with `azure-identity:1.2.1`.\n  Check [here][known-issue-binarydata-notfound] for more details.\n\nThe implemented ways to request a credential are under the `com.azure.identity.credential` package. The sample below\nshows how to use an Azure Active Directory (AAD) application client secret to authorize with Azure Service Bus.\n\n##### Authorizing with DefaultAzureCredential\n\nAuthorization is easiest using [DefaultAzureCredential][wiki_identity]. It finds the best credential to use in its\nrunning environment. For more information about using Azure Active Directory authorization with Service Bus, please\nrefer to [the associated documentation][aad_authorization].\n\nUse the returned token credential to authenticate the client:\n\n```java readme-sample-createAsynchronousServiceBusReceiverWithAzureIdentity\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .build();\nServiceBusReceiverAsyncClient receiver = new ServiceBusClientBuilder()\n    .credential(\"<<fully-qualified-namespace>>\", credential)\n    .receiver()\n    .queueName(\"<<queue-name>>\")\n    .buildAsyncClient();\n```\n\n## Key concepts\n\nYou can interact with the primary resource types within a Service Bus Namespace, of which multiple can exist and\non which actual message transmission takes place. The namespace often serves as an application container:\n\n* A **[queue][queue_concept]** allows for the sending and receiving of messages, ordered first-in-first-out. It is often\n  used for point-to-point communication.\n* A **[topic][topic_concept]** is better suited to publisher and subscriber scenarios. A topic publishes messages to\n  subscriptions, of which, multiple can exist simultaneously.\n* A **[subscription][subscription_concept]** receives messages from a topic. Each subscription is independent and\n  receives a copy of the message sent to the topic.\n\n### Service Bus Clients\nThe builder [`ServiceBusClientBuilder`][ServiceBusClientBuilder] is used to create all the Service Bus clients.\n\n* **[`ServiceBusSenderClient`][ServiceBusSenderClient]** A <b>synchronous</b> sender responsible for sending\n[`ServiceBusMessage`][ServiceBusMessage] to specific queue or topic on Azure Service Bus.\n* **[`ServiceBusSenderAsyncClient`][ServiceBusSenderAsyncClient]** A <b>asynchronous</b> sender responsible for sending\n[`ServiceBusMessage`][ServiceBusMessage] to specific queue or topic on Azure Service Bus.\n* **[`ServiceBusReceiverClient`][ServiceBusReceiverClient]** A <b>synchronous</b> receiver responsible for receiving\n [`ServiceBusMessage`][ServiceBusMessage] from a specific queue or topic on Azure Service Bus.\n* **[`ServiceBusReceiverAsyncClient`][ServiceBusReceiverAsyncClient]** A <b>asynchronous</b> receiver responsible for\nreceiving [`ServiceBusMessage`][ServiceBusMessage] from a specific queue or topic on Azure Service Bus.\n\n## Examples\n - [Send messages](#send-messages)\n - [Receive messages](#receive-messages)\n - [Send and receive from session enabled queues or topics](#send-and-receive-from-session-enabled-queues-or-topics)\n - [Create a dead-letter queue Receiver](#create-a-dead-letter-queue-receiver)\n - [Sharing a connection between clients](#sharing-of-connection-between-clients)\n### Send messages\n\nYou'll need to create an asynchronous [`ServiceBusSenderAsyncClient`][ServiceBusSenderAsyncClient] or a synchronous\n[`ServiceBusSenderClient`][ServiceBusSenderClient] to send messages. Each sender can send messages to either a queue or\na topic.\n\nThe snippet below creates a synchronous [`ServiceBusSenderClient`][ServiceBusSenderClient] to publish a message to a\nqueue.\n\n```java readme-sample-sendMessage\nServiceBusSenderClient sender = new ServiceBusClientBuilder()\n    .connectionString(\"<< CONNECTION STRING FOR THE SERVICE BUS NAMESPACE >>\")\n    .sender()\n    .queueName(\"<< QUEUE NAME >>\")\n    .buildClient();\nList<ServiceBusMessage> messages = Arrays.asList(\n    new ServiceBusMessage(\"Hello world\").setMessageId(\"1\"),\n    new ServiceBusMessage(\"Bonjour\").setMessageId(\"2\"));\n\nsender.sendMessages(messages);\n\n// When you are done using the sender, dispose of it.\nsender.close();\n```\n\n### Receive messages\n\nTo receive messages, you will need to create a `ServiceBusProcessorClient` with callbacks for incoming messages and any error that occurs in the process. You can then start and stop the client as required.\n\nWhen receiving message with [PeekLock][peek_lock_mode_docs] mode, it tells the broker that the application logic wants to settle (e.g. complete, abandon) received messages explicitly.\n\n```java readme-sample-createServiceBusProcessorClientInPeekLockMode\n// Sample code that processes a single message which is received in PeekLock mode.\nConsumer<ServiceBusReceivedMessageContext> processMessage = context -> {\n    final ServiceBusReceivedMessage message = context.getMessage();\n    // Randomly complete or abandon each message. Ideally, in real-world scenarios, if the business logic\n    // handling message reaches desired state such that it doesn't require Service Bus to redeliver\n    // the same message, then context.complete() should be called otherwise context.abandon().\n    final boolean success = Math.random() < 0.5;\n    if (success) {\n        try {\n            context.complete();\n        } catch (Exception completionError) {\n            System.out.printf(\"Completion of the message %s failed\\n\", message.getMessageId());\n            completionError.printStackTrace();\n        }\n    } else {\n        try {\n            context.abandon();\n        } catch (Exception abandonError) {\n            System.out.printf(\"Abandoning of the message %s failed\\n\", message.getMessageId());\n            abandonError.printStackTrace();\n        }\n    }\n};\n\n// Sample code that gets called if there's an error\nConsumer<ServiceBusErrorContext> processError = errorContext -> {\n    System.err.println(\"Error occurred while receiving message: \" + errorContext.getException());\n};\n\n// create the processor client via the builder and its sub-builder\nServiceBusProcessorClient processorClient = new ServiceBusClientBuilder()\n                                .connectionString(\"<< CONNECTION STRING FOR THE SERVICE BUS NAMESPACE >>\")\n                                .processor()\n                                .queueName(\"<< QUEUE NAME >>\")\n                                .receiveMode(ServiceBusReceiveMode.PEEK_LOCK)\n                                .disableAutoComplete() // Make sure to explicitly opt in to manual settlement (e.g. complete, abandon).\n                                .processMessage(processMessage)\n                                .processError(processError)\n                                .disableAutoComplete()\n                                .buildProcessorClient();\n\n// Starts the processor in the background and returns immediately\nprocessorClient.start();\n```\n\nWhen receiving message with [ReceiveAndDelete][receive_and_delete_mode_docs] mode, tells the broker to consider all messages it sends to the receiving client as settled when sent.\n\n```java readme-sample-createServiceBusProcessorClientInReceiveAndDeleteMode\n// Sample code that processes a single message which is received in ReceiveAndDelete mode.\nConsumer<ServiceBusReceivedMessageContext> processMessage = context -> {\n    final ServiceBusReceivedMessage message = context.getMessage();\n    System.out.printf(\"handler processing message. Session: %s, Sequence #: %s. Contents: %s%n\", message.getMessageId(),\n        message.getSequenceNumber(), message.getBody());\n};\n\n// Sample code that gets called if there's an error\nConsumer<ServiceBusErrorContext> processError = errorContext -> {\n    System.err.println(\"Error occurred while receiving message: \" + errorContext.getException());\n};\n\n// create the processor client via the builder and its sub-builder\nServiceBusProcessorClient processorClient = new ServiceBusClientBuilder()\n    .connectionString(\"<< CONNECTION STRING FOR THE SERVICE BUS NAMESPACE >>\")\n    .processor()\n    .queueName(\"<< QUEUE NAME >>\")\n    .receiveMode(ServiceBusReceiveMode.RECEIVE_AND_DELETE)\n    .processMessage(processMessage)\n    .processError(processError)\n    .disableAutoComplete()\n    .buildProcessorClient();\n\n// Starts the processor in the background and returns immediately\nprocessorClient.start();\n```\n\nThere are four ways of settling messages using the methods on the message context passed to your callback.\n  - Complete - causes the message to be deleted from the queue or topic.\n  - Abandon - releases the receiver's lock on the message allowing for the message to be received by other receivers.\n  - Defer - defers the message from being received by normal means. In order to receive deferred messages, the sequence\nnumber of the message needs to be retained.\n  - Dead-letter - moves the message to the [dead-letter queue][deadletterqueue_docs]. This will prevent the message from\n    being received again. In order to receive messages from the dead-letter queue, a receiver scoped to the dead-letter\n    queue is needed.\n\n### Send and receive from session enabled queues or topics\n\n> Using sessions requires you to create a session enabled queue or subscription. You can read more about how to\n> configure this in \"[Message sessions][message-sessions]\".\n\nAzure Service Bus sessions enable joint and ordered handling of unbounded sequences of related messages. Sessions can be\nused in first in, first out (FIFO) and request-response patterns. Any sender can create a session when submitting\nmessages into a topic or queue by setting the `ServiceBusMessage.setSessionId(String)` property to some\napplication-defined identifier that is unique to the session.\n\nUnlike non-session-enabled queues or subscriptions, only a single receiver can read from a session at any time. When a\nreceiver fetches a session, Service Bus locks the session for that receiver, and it has exclusive access to messages in\nthat session.\n\n#### Send a message to a session\n\nCreate a [`ServiceBusSenderClient`][ServiceBusSenderClient] for a session enabled queue or topic subscription. Setting\n`ServiceBusMessage.setSessionId(String)` on a `ServiceBusMessage` will publish the message to that session. If the\nsession does not exist, it is created.\n\n```java readme-sample-createSessionMessage\n// Setting sessionId publishes that message to a specific session, in this case, \"greeting\".\nServiceBusMessage message = new ServiceBusMessage(\"Hello world\")\n    .setSessionId(\"greetings\");\n\nsender.sendMessage(message);\n```\n\n#### Receive messages from a session\n\nReceiving messages from sessions is similar to receiving messages from a non session enabled queue or subscription. The difference is in the builder and the class you use.\n\nIn non-session case, you would use the sub builder `processor()`. In case of sessions, you would use the sub builder `sessionProcessor()`. Both sub builders will create an instance of `ServiceBusProcessorClient` configured to work on a session or a non-session Service Bus entity. In the case of the session processor, you can pass the maximum number of sessions you want the processor to process concurrently as well.\n\n### Create a dead-letter queue Receiver\n\nAzure Service Bus queues and topic subscriptions provide a secondary sub-queue, called a dead-letter queue (DLQ).\nThe dead-letter queue doesn't need to be explicitly created and can't be deleted or otherwise managed independent\nof the main entity. For session enabled or non-session queue or topic subscriptions, the dead-letter receiver can be\ncreated the same way as shown below. Learn more about dead-letter queue [here][dead-letter-queue].\n\n```java readme-sample-createSynchronousServiceBusDeadLetterQueueReceiver\nServiceBusReceiverClient receiver = new ServiceBusClientBuilder()\n    .connectionString(\"<< CONNECTION STRING FOR THE SERVICE BUS NAMESPACE >>\")\n    .receiver() // Use this for session or non-session enabled queue or topic/subscriptions\n    .topicName(\"<< TOPIC NAME >>\")\n    .subscriptionName(\"<< SUBSCRIPTION NAME >>\")\n    .subQueue(SubQueue.DEAD_LETTER_QUEUE)\n    .buildClient();\n```\n\n### Sharing of connection between clients\nThe creation of physical connection to Service Bus requires resources. An application should share the connection  \nbetween clients which can be achieved by sharing the top level builder as shown below.\n\n```java readme-sample-connectionSharingAcrossClients\n// Create shared builder.\nServiceBusClientBuilder sharedConnectionBuilder = new ServiceBusClientBuilder()\n    .connectionString(\"<< CONNECTION STRING FOR THE SERVICE BUS NAMESPACE >>\");\n// Create receiver and sender which will share the connection.\nServiceBusReceiverClient receiver = sharedConnectionBuilder\n    .receiver()\n    .queueName(\"<< QUEUE NAME >>\")\n    .buildClient();\nServiceBusSenderClient sender = sharedConnectionBuilder\n    .sender()\n    .queueName(\"<< QUEUE NAME >>\")\n    .buildClient();\n```\n### When to use 'ServiceBusProcessorClient'.\n When to use 'ServiceBusProcessorClient', 'ServiceBusReceiverClient' or ServiceBusReceiverAsyncClient? The processor \n is built using 'ServiceBusReceiverAsyncClient', it provides a convenient way of receiving messages with default \n auto complete and auto-renew of message locks in 'PEEK_LOCK' mode. The processor is appropriate where the \n applications have not made complete move to async receiver client and want to process message in synchronous mode. \n The processor receives messages forever because it recovers from the network errors internally. \n 'ServiceBusProcessorClient:processMessage()' function call is made for each message. Alternatively, You can also use \n 'ServiceBusReceiverClient', it is a lower level client and provides a wider range of APIs. If async processing is  \n suitable for your application, you can use 'ServiceBusReceiverAsyncClient'. \n\n## Troubleshooting\n\n### Enable client logging\n\nAzure SDK for Java offers a consistent logging story to help aid in troubleshooting application errors and expedite\ntheir resolution. The logs produced will capture the flow of an application before reaching the terminal state to help\nlocate the root issue. View the [logging][logging] wiki for guidance about enabling logging.\n\n### Enable AMQP transport logging\n\nIf enabling client logging is not enough to diagnose your issues. You can enable logging to a file in the underlying\nAMQP library, [Qpid Proton-J][qpid_proton_j_apache]. Qpid Proton-J uses `java.util.logging`. You can enable logging by\ncreate a configuration file with the contents below. Or set `proton.trace.level=ALL` and whichever configuration options\nyou want for the `java.util.logging.Handler` implementation. Implementation classes and their options can be found in\n[Java 8 SDK javadoc][java_8_sdk_javadocs].\n\nTo trace the AMQP transport frames, set the environment variable: `PN_TRACE_FRM=1`.\n\n#### Sample \"logging.properties\" file\n\nThe configuration file below logs trace output from proton-j to the file \"proton-trace.log\".\n\n```\nhandlers=java.util.logging.FileHandler\n.level=OFF\nproton.trace.level=ALL\njava.util.logging.FileHandler.level=ALL\njava.util.logging.FileHandler.pattern=proton-trace.log\njava.util.logging.FileHandler.formatter=java.util.logging.SimpleFormatter\njava.util.logging.SimpleFormatter.format=[%1$tF %1$tr] %3$s %4$s: %5$s %n\n```\n\n### Common exceptions\n\n#### AMQP exception\n\nThis is a general exception for AMQP related failures, which includes the AMQP errors as `ErrorCondition` and the\ncontext that caused this exception as `AmqpErrorContext`. `isTransient` is a boolean indicating if the exception is a\ntransient error or not. If a transient AMQP exception occurs, the client library retries the operation as many times\nas the [AmqpRetryOptions][AmqpRetryOptions] allows. Afterwords, the operation fails and an exception is propagated back\nto the user.\n\n[`AmqpErrorCondition`][AmqpErrorCondition] contains error conditions common to the AMQP protocol and used by Azure\nservices. When an AMQP exception is thrown, examining the error condition field can inform developers as to why the AMQP\nexception occurred and if possible, how to mitigate this exception. A list of all the AMQP exceptions can be found in\n[OASIS AMQP Version 1.0 Transport Errors][oasis_amqp_v1_error].\n\nThe recommended way to solve the specific exception the AMQP exception represents is to follow the\n[Service Bus Messaging Exceptions][servicebus_messaging_exceptions] guidance.\n\n### Understanding the APIs behavior\n\nThe document [here][sync_receivemessages_implicit_prefetch] provides insights into the expected behavior of synchronous `receiveMessages` API when using it to obtain more than one message (a.k.a. implicit prefetching).\n\n## Next steps\n\nBeyond those discussed, the Azure Service Bus client library offers support for many additional scenarios to help take\nadvantage of the full feature set of the Azure Service Bus service. In order to help explore some of these scenarios,\nthe following set of sample is available [here][samples_readme].\n\n## Contributing\n\nIf you would like to become an active contributor to this project please refer to our [Contribution\nGuidelines](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md) for more information.\n\n<!-- Links -->\n[aad_authorization]: https://docs.microsoft.com/azure/service-bus-messaging/authenticate-application\n[amqp_transport_error]: https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-transport-v1.0-os.html#type-amqp-error\n[AmqpErrorCondition]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/exception/AmqpErrorCondition.java\n[AmqpRetryOptions]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/AmqpRetryOptions.java\n[api_documentation]: https://aka.ms/java-docs\n[dead-letter-queue]: https://docs.microsoft.com/azure/service-bus-messaging/service-bus-dead-letter-queues\n[deadletterqueue_docs]: https://docs.microsoft.com/azure/service-bus-messaging/service-bus-dead-letter-queues\n[java_development_kit]: https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable\n[java_8_sdk_javadocs]: https://docs.oracle.com/javase/8/docs/api/java/util/logging/package-summary.html\n[logging]: https://docs.microsoft.com/azure/developer/java/sdk/logging-overview\n[maven]: https://maven.apache.org/\n[maven_package]: https://search.maven.org/artifact/com.azure/azure-messaging-servicebus\n[message-sessions]: https://docs.microsoft.com/azure/service-bus-messaging/message-sessions\n[oasis_amqp_v1_error]: https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-transport-v1.0-os.html#type-error\n[oasis_amqp_v1]: http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-overview-v1.0-os.html\n[product_docs]: https://docs.microsoft.com/azure/service-bus-messaging\n[qpid_proton_j_apache]: https://qpid.apache.org/proton/\n[queue_concept]: https://docs.microsoft.com/azure/service-bus-messaging/service-bus-messaging-overview#queues\n[ReceiveMode]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/models/ReceiveMode.java\n[RetryOptions]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/AmqpRetryOptions.java\n[sample_examples]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/\n[samples_readme]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus\n[service_bus_connection_string]: https://docs.microsoft.com/azure/service-bus-messaging/service-bus-create-namespace-portal#get-the-connection-string\n[servicebus_create]: https://docs.microsoft.com/azure/service-bus-messaging/service-bus-create-namespace-portal\n[servicebus_messaging_exceptions]: https://docs.microsoft.com/azure/service-bus-messaging/service-bus-messaging-exceptions\n[servicebus_roles]: https://docs.microsoft.com/azure/service-bus-messaging/authenticate-application#built-in-rbac-roles-for-azure-service-bus\n[ServiceBusClientBuilder]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java\n[ServiceBusMessage]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessage.java\n[ServiceBusReceiverAsyncClient]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java\n[ServiceBusReceiverClient]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverClient.java\n[ServiceBusSenderAsyncClient]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java\n[ServiceBusSenderClient]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderClient.java\n[service_bus_create]: https://docs.microsoft.com/azure/service-bus-messaging/service-bus-create-namespace-portal\n[source_code]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/servicebus/azure-messaging-servicebus/\n[subscription_concept]: https://docs.microsoft.com/azure/service-bus-messaging/service-bus-queues-topics-subscriptions#topics-and-subscriptions\n[topic_concept]: https://docs.microsoft.com/azure/service-bus-messaging/service-bus-messaging-overview#topics\n[wiki_identity]: https://github.com/Azure/azure-sdk-for-java/wiki/Identity-and-Authentication\n[known-issue-binarydata-notfound]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/servicebus/azure-messaging-servicebus/known-issues.md#can-not-resolve-binarydata-or-noclassdeffounderror-version-700\n[sync_receivemessages_implicit_prefetch]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/servicebus/azure-messaging-servicebus/docs/SyncReceiveAndPrefetch.md\n[peek_lock_mode_docs]: https://learn.microsoft.com/azure/service-bus-messaging/message-transfers-locks-settlement#peeklock\n[receive_and_delete_mode_docs]: https://learn.microsoft.com/azure/service-bus-messaging/message-transfers-locks-settlement#receiveanddelete\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fservicebus%2Fazure-messaging-servicebus%2FREADME.png)\n",
        "repo_name": "servicebus/azure-messaging-servicebus",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/servicebus/azure-messaging-servicebus",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "<p align=\"center\">\n  <img src=\"service-bus.png\" alt=\"Microsoft Azure Service Bus\" width=\"100\"/>\n</p>\n\n# Microsoft Azure Service Bus Client for Java\n\n> Please note, a newer package [com.azure:azure-messaging-servicebus](https://search.maven.org/artifact/com.azure/azure-messaging-servicebus) for [Azure Service Bus](https://azure.microsoft.com/services/service-bus/) is available as of December 2020. While this package will continue to receive critical bug fixes, we strongly encourage you to upgrade. Read the [migration guide](https://aka.ms/azsdk/java/migrate/sb) for more details.\n\nThis is the Java client library for Azure Service Bus that focuses on Queues & Topics. If you are looking for Event Hubs and Relay clients, follow the below links:\n* [Event Hubs](https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/eventhubs/microsoft-azure-eventhubs)\n* [Relay](https://github.com/azure/azure-relay-dotnet)\n\nAzure Service Bus is an asynchronous messaging cloud platform that enables you to send and receive messages between decoupled systems. Microsoft offers this feature as a service, which means that you do not need to host any of your own hardware in order to use it.\n\nRefer to [azure.com](https://azure.microsoft.com/services/service-bus/) to learn more about Service Bus.\n\nThe package can be downloaded from [Maven](https://search.maven.org/artifact/com.microsoft.azure/azure-servicebus)\n\n[//]: # ({x-version-update-start;com.microsoft.azure:azure-servicebus;current})\n```\n<dependency>\n  <groupId>com.microsoft.azure</groupId>\n  <artifactId>azure-servicebus</artifactId>\n  <version>3.6.5</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n## How to provide feedback\n\nSee our [Contribution Guidelines](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n## How to get support\n\n## Support resources to check prior to raising issues\n\n1. Azure Service Bus [samples](https://github.com/Azure/azure-service-bus/tree/master/samples)\n1. Already [resolved issues](https://github.com/Azure/azure-service-bus-java/issues?q=is%3Aissue+is%3Aclosed)\n1. [StackOverflow](https://stackoverflow.com/questions/tagged/azureservicebus)\n\n## Known issues\n\n### Java client 1.0.0\n\nThere where a set of problems with message locks getting lost and then causing issues in message processing. Those issues are addressed in version 1.1.0.\n\n### Java client 1.1.0\n\nIf you send messages from a client any other than the Java client itself in any other format than a stream you may not be able to receive the message body content. So if you are using multiple clients make sure you send and receive stream data. We are working on fixing this currently and evaluating releasing a version 1.1.1 which should contain this fix as soon as possible. If you send and receive with the Jave client you should not experience this issue.\n\n## FAQ\n\n### Where is the API document?\nClick [here](https://docs.microsoft.com/java/api/overview/azure/servicebus?view=azure-java-legacy).\n\n### Where can I find examples that use this library?\n\nThe samples are located in this repo. [Java Samples](https://github.com/Azure/azure-service-bus/tree/master/samples/Java).\n\n### Can I manage Service Bus entities with this library?\n\nYes, this client library now has the management functionality built into it. This is made available through the [ManagementClient](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/servicebus/microsoft-azure-servicebus/src/main/java/com/microsoft/azure/servicebus/management/ManagementClient.java) which now enables create, read(exists), update and delete Queues, Topics, Subscriptions, Rules.\n\n### How do I run the unit tests?\n\nTests are simple JUnit tests. They can be run from the command line or any IDE that supports running JUnit tests.\nOnly prerequisite to running tests is setting an environment variable named 'AZURE_SERVICEBUS_CONNECTION_STRING' to the connection string\n of the namespace in which the tests will create entities. The tests create entities in the namespace and run tests and delete the created entities.\nAnd test classes also have methods to specify whether to create entities per test or once for all tests in a suite. Creating entities per test is better\nas it keeps test independent of each other.\n\nTo use a proxy for unit tests, set an environment variable `RUN_WITH_PROXY` to `true`. Then set the environment variables `PROXY_HOSTNAME` and `PROXY_PORT` to your values.\n\n#### Please see a sample using Eclipse below\n\n1. First clone the repository to your local machine: git clone https://github.com/Azure/azure-service-bus-java.git\n2. Select File > Open Projects from File System...\n3. Click the Button \"Directory...\" and navigate to the folder in which you just cloned and select the cloned repo. Sample folder names could be \"azure-service-bus-java\" or just \"java\".\n4. Import the project.\n5. In the package explorer you should have two projects, navigate to java_azure-service bus and right click on it. Select Maven > Update Project...\n6. Select Run > Run Configurations. Under JUnit click on + New Configuration.\n7. Set the Test runner to Junit 4.\n8. Select: Run all tests in the selected project, package or source folder. Click \"Search...\" and select: com.microsoft.azure.servicebus.\n8. Go to environment and add above mentioned environment variable and the regarding connection string.\n9. Click \"Apply\" and then \"Run\"\n10. You should have a new view next to the package explorer called JUnit showing the running tests and see Console outputs depending on which test currently runs. If you do not see the JUnit tab go to Window > Show view > Other... > Java > JUnit\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fservicebus%2FREADME.png)\n",
        "repo_name": "servicebus/microsoft-azure-servicebus",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/servicebus/microsoft-azure-servicebus",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager ServiceFabric client library for Java\n\nAzure Resource Manager ServiceFabric client library for Java.\n\nThis package contains Microsoft Azure SDK for ServiceFabric Management SDK. Service Fabric Management Client. Package tag package-2021-06. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-servicefabric;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-servicefabric</artifactId>\n    <version>1.0.0-beta.3</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nServiceFabricManager manager = ServiceFabricManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/servicefabric/azure-resourcemanager-servicefabric/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "servicefabric/azure-resourcemanager-servicefabric",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/servicefabric/azure-resourcemanager-servicefabric",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager ServiceLinker client library for Java\n\nAzure Resource Manager ServiceLinker client library for Java.\n\nThis package contains Microsoft Azure SDK for ServiceLinker Management SDK. Microsoft.ServiceLinker provider. Package tag package-2022-05-01. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-servicelinker;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-servicelinker</artifactId>\n    <version>1.0.0-beta.2</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nServiceLinkerManager manager = ServiceLinkerManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/servicelinker/azure-resourcemanager-servicelinker/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n",
        "repo_name": "servicelinker/azure-resourcemanager-servicelinker",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/servicelinker/azure-resourcemanager-servicelinker",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager TrafficController client library for Java\n\nAzure Resource Manager TrafficController client library for Java.\n\nThis package contains Microsoft Azure SDK for TrafficController Management SDK. Traffic Controller Provider management API. Package tag package-2023-05-01-preview. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-servicenetworking;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-servicenetworking</artifactId>\n    <version>1.0.0-beta.2</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nTrafficControllerManager manager = TrafficControllerManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/servicenetworking/azure-resourcemanager-servicenetworking/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "servicenetworking/azure-resourcemanager-servicenetworking",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/servicenetworking/azure-resourcemanager-servicenetworking",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager SignalR client library for Java\n\nAzure Resource Manager SignalR client library for Java.\n\nThis package contains Microsoft Azure SDK for SignalR Management SDK. REST API for Azure SignalR Service. Package tag package-2023-02-01. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-signalr;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-signalr</artifactId>\n    <version>1.0.0-beta.6</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nSignalRManager manager = SignalRManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/signalr/azure-resourcemanager-signalr/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "signalr/azure-resourcemanager-signalr",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/signalr/azure-resourcemanager-signalr",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Spring Data Cosmos client library for Java\n\n**Azure Spring Data Cosmos** provides Spring Data support for Azure Cosmos DB using the [SQL API][sql_api_query], based on Spring Data framework.\n[Azure Cosmos DB][cosmos_introduction] is a globally-distributed database service which allows developers to work with data using a variety of standard APIs, such as SQL, MongoDB, Cassandra, Graph, and Table.\n\n## Spring Boot Support Policy\nThis project supports multiple [Spring Boot Versions][spring_version_mapping]. For complete list of currently supported versions, please visit our [Spring Version Mapping][spring_version_mapping].\n\nSpring Boot releases are marked as \"End of Life\" when they are no longer supported or released in any form. If you are running an EOL version, you should upgrade as soon as possible. \n\nPlease note that a version can be out of support before it is marked as \"End of Life\". During this time you should only expect releases for critical bugs or security issues.\n\nFor more information on Spring Boot supported versions, please visit [Spring Boot Supported Versions][spring_boot_supported_versions].\n\n## Spring Boot Version Support\nMaven users can inherit from the `spring-boot-starter-parent` project to obtain a dependency management section to let Spring manage the versions for dependencies.\n\n```xml\n<!-- Inherit defaults from Spring Boot -->\n<parent>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-parent</artifactId>\n    <version>${spring.boot.version}</version>\n</parent>\n```\nWith that setup, you can also override individual dependencies by overriding a property in your own project. For instance, to upgrade to another Spring Data release train you\u2019d add the following to your pom.xml.\n```xml\n<properties>\n    <spring-data-releasetrain.version>${spring.data.version}</spring-data-releasetrain.version>\n</properties>\n```\nIf you don\u2019t want to use the `spring-boot-starter-parent`, you can still keep the benefit of the dependency management by using a `scope=import` dependency:\n```xml\n<dependencyManagement>\n     <dependencies>\n        <dependency>\n            <!-- Import dependency management from Spring Boot -->\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-dependencies</artifactId>\n            <version>${spring.boot.version}</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n```\n\n## Which Version of Azure Spring Data Cosmos Should I Use\n\nMapping from **Spring Boot** / **Spring Cloud** version to **Azure Spring Data Cosmos** versions\n\n| Spring Boot version   | Spring Cloud version   | Azure Spring Data Cosmos versions |\n|-----------------------|------------------------|---------------------------------|\n| 2.7.x                 | 2021.0.x               |  3.23.0 and above |\n| 2.6.x                 | 2021.0.x               |  3.15.0 - 3.22.0 |\n| 2.5.x                 | 2020.0.x               |  3.8.0 - 3.14.0 |\n| 2.4.x                 | 2020.0.x               |  3.5.0 - 3.7.0 |\n\n### I'm Using Spring Boot Version X\nIf you are using **Spring Boot** in your project, you can find related **Azure Spring Data Cosmos** versions from above table. For example: if you are using **Spring Boot** 2.7.x, you should use **Azure Spring Data Cosmos** versions 3.23.0 and above.\n\n### I'm Using Spring Cloud Version Y\nIf you are using **Spring Cloud** in your project, you can also find related **Azure Spring Data Cosmos** versions from above table. For example, if you are using **Spring Cloud** 2021.0.x, you should use **Azure Spring Data Cosmos** versions 3.23.0 and above.\n\n## Spring Data Version Support\nThis project supports `spring-data-commons 2.7.x` versions.\n\nThe above setup does not allow you to override individual dependencies using a property as explained above. To achieve the same result, you\u2019d need to add an entry in the dependencyManagement of your project before the `spring-boot-dependencies` entry. For instance, to upgrade to another Spring Data release train you\u2019d add the following to your pom.xml.\n```xml\n<dependencyManagement>\n    <dependencies>\n        <!-- Override Spring Data release train provided by Spring Boot -->\n        <dependency>\n            <groupId>org.springframework.data</groupId>\n            <artifactId>spring-data-releasetrain</artifactId>\n            <version>${spring.data.version}</version>\n            <scope>import</scope>\n            <type>pom</type>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-dependencies</artifactId>\n            <version>${spring.boot.version}</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n```\n>**Note:** Replace the <em>${spring.boot.version}</em> and <em>${spring.data.version}</em> with the versions of Spring Boot and Spring Data you want to use in your project.\n\n## Getting started\n\n### Include the package\nIf you are using Maven, add the following dependency.\n\n[//]: # ({x-version-update-start;com.azure:azure-spring-data-cosmos;current})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-spring-data-cosmos</artifactId>\n    <version>3.35.0</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk_link], version 8 or later.\n- An active Azure account. If you don't have one, you can sign up for a [free account][azure_subscription]. Alternatively, you can use the [Azure Cosmos DB Emulator][local_emulator] for development and testing. As emulator https certificate is self signed, you need to import its certificate to java trusted cert store, [explained here][local_emulator_export_ssl_certificates]\n- (Optional) SLF4J is a logging facade.\n- (Optional) [SLF4J binding](https://www.slf4j.org/manual.html) is used to associate a specific logging framework with SLF4J.\n- (Optional) [Maven][maven_link]\n\nSLF4J is only needed if you plan to use logging, please also download an SLF4J binding which will link the SLF4J API with the logging implementation of your choice. See the [SLF4J user manual](https://www.slf4j.org/manual.html) for more information.\n\n### Setup Configuration Class\n- In order to set up configuration class, you'll need to extend `AbstractCosmosConfiguration`\n\n- Azure-spring-data-cosmos also supports `Response Diagnostics String`, `Query Metrics` and `Max Degree of Parallelism`.\nSet `queryMetricsEnabled` flag to true in application.properties to enable query metrics.\nIn addition to setting the flag, implement `ResponseDiagnosticsProcessor` to log diagnostics information.\nSet `maxDegreeOfParallelism` flag to an integer in application.properties to allow parallel processing; setting the value to -1 will lead to the SDK deciding the optimal value.\nSet `maxBufferedItemCount` flag to an integer in application.properties to allow the user to set the max number of items that can be buffered during parallel query execution; if set to less than 0, the system automatically decides the number of items to buffer.\nNOTE: Setting this to a very high value can result in high memory consumption.\nSet `responseContinuationTokenLimitInKb` flag to an integer in application.properties to allow the user to limit the length of the continuation token in the query response. The continuation token contains both required and optional fields. The required fields are necessary for resuming the execution from where it was stoped. The optional fields may contain serialized index lookup work that was done but not yet utilized. This avoids redoing the work again in subsequent continuations and hence improve the query performance. Setting the maximum continuation size to 1KB, the Azure Cosmos DB service will only serialize required fields. Starting from 2KB, the Azure Cosmos DB service would serialize as much as it could fit till it reaches the maximum specified size.\n\n```java readme-sample-AppConfiguration\n@Configuration\n@EnableCosmosRepositories\npublic class AppConfiguration extends AbstractCosmosConfiguration {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(AppConfiguration.class);\n\n    @Value(\"${azure.cosmos.uri}\")\n    private String uri;\n\n    @Value(\"${azure.cosmos.key}\")\n    private String key;\n\n    @Value(\"${azure.cosmos.secondaryKey}\")\n    private String secondaryKey;\n\n    @Value(\"${azure.cosmos.database}\")\n    private String dbName;\n\n    @Value(\"${azure.cosmos.queryMetricsEnabled}\")\n    private boolean queryMetricsEnabled;\n\n    @Value(\"${azure.cosmos.maxDegreeOfParallelism}\")\n    private int maxDegreeOfParallelism;\n\n    @Value(\"${azure.cosmos.maxBufferedItemCount}\")\n    private int maxBufferedItemCount;\n\n    @Value(\"${azure.cosmos.responseContinuationTokenLimitInKb}\")\n    private int responseContinuationTokenLimitInKb;\n\n    private AzureKeyCredential azureKeyCredential;\n\n    @Bean\n    public CosmosClientBuilder getCosmosClientBuilder() {\n        this.azureKeyCredential = new AzureKeyCredential(key);\n        DirectConnectionConfig directConnectionConfig = new DirectConnectionConfig();\n        GatewayConnectionConfig gatewayConnectionConfig = new GatewayConnectionConfig();\n        return new CosmosClientBuilder()\n            .endpoint(uri)\n            .credential(azureKeyCredential)\n            .directMode(directConnectionConfig, gatewayConnectionConfig);\n    }\n\n    @Override\n    public CosmosConfig cosmosConfig() {\n        return CosmosConfig.builder()\n                           .enableQueryMetrics(queryMetricsEnabled)\n                           .maxDegreeOfParallelism(maxDegreeOfParallelism)\n                           .maxBufferedItemCount(maxBufferedItemCount)\n                           .responseContinuationTokenLimitInKb(responseContinuationTokenLimitInKb)\n                           .responseDiagnosticsProcessor(new ResponseDiagnosticsProcessorImplementation())\n                           .build();\n    }\n\n    public void switchToSecondaryKey() {\n        this.azureKeyCredential.update(secondaryKey);\n    }\n\n    @Override\n    protected String getDatabaseName() {\n        return \"testdb\";\n    }\n\n    private static class ResponseDiagnosticsProcessorImplementation implements ResponseDiagnosticsProcessor {\n\n        @Override\n        public void processResponseDiagnostics(@Nullable ResponseDiagnostics responseDiagnostics) {\n            LOGGER.info(\"Response Diagnostics {}\", responseDiagnostics);\n        }\n    }\n\n}\n```\n### Customizing Configuration\nYou can customize `DirectConnectionConfig` or `GatewayConnectionConfig` or both and provide them to `CosmosClientBuilder` bean to customize `CosmosAsyncClient`\n\n```java readme-sample-AppConfigurationCodeSnippet\n@Bean\npublic CosmosClientBuilder getCosmosClientBuilder() {\n\n    DirectConnectionConfig directConnectionConfig = new DirectConnectionConfig();\n    GatewayConnectionConfig gatewayConnectionConfig = new GatewayConnectionConfig();\n    return new CosmosClientBuilder()\n        .endpoint(uri)\n        .directMode(directConnectionConfig, gatewayConnectionConfig);\n}\n\n@Override\npublic CosmosConfig cosmosConfig() {\n    return CosmosConfig.builder()\n                       .enableQueryMetrics(queryMetricsEnabled)\n                       .maxDegreeOfParallelism(maxDegreeOfParallelism)\n                       .maxBufferedItemCount(maxBufferedItemCount)\n                       .responseContinuationTokenLimitInKb(responseContinuationTokenLimitInKb)\n                       .responseDiagnosticsProcessor(new ResponseDiagnosticsProcessorImplementation())\n                       .build();\n}\n```\n\nBy default, `@EnableCosmosRepositories` will scan the current package for any interfaces that extend one of Spring Data's repository interfaces.\nUse it to annotate your Configuration class to scan a different root package by `@EnableCosmosRepositories(basePackageClass=UserRepository.class)` if your project layout has multiple projects.\n\n#### Using database provisioned throughput\n\nCosmos supports both [container](https://docs.microsoft.com/azure/cosmos-db/sql/how-to-provision-container-throughput)\nand [database](https://docs.microsoft.com/azure/cosmos-db/sql/how-to-provision-database-throughput) provisioned\nthroughput.  By default, spring-data-cosmos will provision throughput for each container created.  If you prefer\nto share throughput between containers, you can enable database provisioned throughput via CosmosConfig.\n\n```java\n@Override\npublic CosmosConfig cosmosConfig() {\n    int autoscale = false; \n    int initialRequestUnits = 400;\n    return CosmosConfig.builder()\n                       .enableDatabaseThroughput(autoscale, initialRequestUnits) \n                       .build();\n}\n```\n\n### Define an entity\n- Define a simple entity as item in Azure Cosmos DB.\n\n- You can define entities by adding the `@Container` annotation and specifying properties related to the container, such as the container name, request units (RUs), time to live, and auto-create container.\n\n- Containers will be created automatically unless you don't want them to. Set `autoCreateContainer` to false in `@Container` annotation to disable auto creation of containers.\n\n- Note: By default request units assigned to newly created containers is 400. Specify different ru value to customize request units for the container created by the SDK (minimum RU value is 400).\n```java readme-sample-User\n@Container(containerName = \"myContainer\", ru = \"400\")\npublic class User {\n    private String id;\n    private String firstName;\n\n\n    @PartitionKey\n    private String lastName;\n\n    public User() {\n        // If you do not want to create a default constructor,\n        // use annotation @JsonCreator and @JsonProperty in the full args constructor\n    }\n\n    public User(String id, String firstName, String lastName) {\n        this.id = id;\n        this.firstName = firstName;\n        this.lastName = lastName;\n    }\n\n    @Override\n    public String toString() {\n        return String.format(\"User: %s %s, %s\", firstName, lastName, id);\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public void setId(String id) {\n        this.id = id;\n    }\n\n    public String getFirstName() {\n        return firstName;\n    }\n\n    public void setFirstName(String firstName) {\n        this.firstName = firstName;\n    }\n\n    public String getLastName() {\n        return lastName;\n    }\n\n    public void setLastName(String lastName) {\n        this.lastName = lastName;\n    }\n}\n```\n- `id` field will be used as Item id in Azure Cosmos DB. If you want use another field like `firstName` as item `id`, just annotate that field with `@Id` annotation.\n\n- Annotation `@Container(containerName=\"myContainer\")` specifies container name in Azure Cosmos DB.\n- Annotation `@PartitionKey` on `lastName` field specifies this field as partition key in Azure Cosmos DB.\n\n#### Creating Containers with autoscale throughput\n- Annotation `autoScale` field specifies container to be created with autoscale throughput if set to true. Default is false, which means containers are created with manual throughput.\n- Read more about autoscale throughput [here][autoscale-throughput]\n```java readme-sample-UserSample\n@Container(containerName = \"myContainer\", autoScale = true, ru = \"4000\")\npublic class UserSample {\n    @Id\n    private String emailAddress;\n\n}\n```\n#### Nested Partition Key support\n\n- Azure Spring Data Cosmos supports nested partition key. To add nested partition key, use `partitionKeyPath` field in `@Container` annotation.\n- `partitionKeyPath` should only be used to support nested partition key path. For general partition key support, use the `@PartitionKey` annotation.\n- By default `@PartitionKey` annotation will take precedence, unless not specified.\n- Below example shows how to properly use Nested Partition key feature.\n\n```java readme-sample-NestedPartitionKeyEntitySample\n@Container(containerName = \"nested-partition-key\", partitionKeyPath = \"/nestedEntitySample/nestedPartitionKey\")\npublic class NestedPartitionKeyEntitySample {\n\n    private NestedEntitySample nestedEntitySample;\n}\n```\n\n```java readme-sample-NestedEntitySample\npublic class NestedEntitySample {\n    private String nestedPartitionKey;\n}\n```\n\n### Create repositories\nExtends CosmosRepository interface, which provides Spring Data repository support.\n\n```java readme-sample-UserRepository\n@Repository\npublic interface UserRepository extends CosmosRepository<User, String> {\n    Iterable<User> findByFirstName(String firstName);\n    long countByFirstName(String firstName);\n    User findOne(String id, String lastName);\n}\n```\n\n- `findByFirstName` method is custom query method, it will find items per firstName.\n\n#### Query Plan Caching\nSpring repository query APIs like `findByFirstName(String firstName)` where `firstName` is the partition or annotated queries containing partition key will result in lower query execution time because of query plan caching. Currently, query plan caching is only supported for query methods targeting a single partition.\n\n#### QueryAnnotation : Using annotated queries in repositories\nAzure spring data cosmos supports specifying annotated queries in the repositories using `@Query`.\n- Examples for annotated queries in synchronous CosmosRepository:\n\n```java readme-sample-AnnotatedQueriesUserRepositoryCodeSnippet\npublic interface AnnotatedQueriesUserRepositoryCodeSnippet extends CosmosRepository<User, String> {\n    @Query(\"select * from c where c.firstName = @firstName and c.lastName = @lastName\")\n    List<User> getUsersByFirstNameAndLastName(@Param(\"firstName\") String firstName, @Param(\"lastName\") String lastName);\n\n    @Query(\"select * from c offset @offset limit @limit\")\n    List<User> getUsersWithOffsetLimit(@Param(\"offset\") int offset, @Param(\"limit\") int limit);\n\n    @Query(\"select value count(1) from c where c.firstName = @firstName\")\n    long getNumberOfUsersWithFirstName(@Param(\"firstName\") String firstName);\n}\n```\n\n- Examples for annotated queries in ReactiveCosmosRepository.\n\n```java readme-sample-AnnotatedQueriesUserReactiveRepositoryCodeSnippet\npublic interface AnnotatedQueriesUserReactiveRepositoryCodeSnippet extends ReactiveCosmosRepository<User, String> {\n    @Query(\"select * from c where c.firstName = @firstName and c.lastName = @lastName\")\n    Flux<User> getUsersByTitleAndValue(@Param(\"firstName\") int firstName, @Param(\"lastName\") String lastName);\n\n    @Query(\"select * from c offset @offset limit @limit\")\n    Flux<User> getUsersWithOffsetLimit(@Param(\"offset\") int offset, @Param(\"limit\") int limit);\n\n    @Query(\"select count(c.id) as num_ids, c.lastName from c group by c.lastName\")\n    Flux<ObjectNode> getCoursesGroupByDepartment();\n\n    @Query(\"select value count(1) from c where c.lastName = @lastName\")\n    Mono<Long> getNumberOfUsersWithLastName(@Param(\"lastName\") String lastName);\n}\n```\n\nThe queries that are specified in the annotation are same as the cosmos queries.\nPlease refer to the following articles for more information on sql queries in cosmos\n - [Sql API Query Getting Started] [sql_queries_getting_started]\n - [Sql API Query Tutorial] [sql_queries_in_cosmos] \n\n### Create an Application class\nHere create an application class with all the components\n\n```java readme-sample-SampleApplication\n@SpringBootApplication\npublic class SampleApplication implements CommandLineRunner {\n\n    @Autowired\n    private UserRepository repository;\n\n    @Autowired\n    private ApplicationContext applicationContext;\n\n    public static void main(String[] args) {\n        SpringApplication.run(SampleApplication.class, args);\n    }\n\n    public void run(String... var1) {\n\n        final User testUser = new User(\"testId\", \"testFirstName\", \"testLastName\");\n\n        repository.deleteAll();\n        repository.save(testUser);\n\n        // to find by Id, please specify partition key value if collection is partitioned\n        final User result = repository.findOne(testUser.getId(), testUser.getLastName());\n\n        //  Switch to secondary key\n        UserRepositoryConfiguration bean =\n            applicationContext.getBean(UserRepositoryConfiguration.class);\n        bean.switchToSecondaryKey();\n\n        //  Now repository will use secondary key\n        repository.save(testUser);\n\n    }\n}\n```\n- Autowire UserRepository interface, to perform operations like save, delete, find, etc.\n- Spring Data Azure Cosmos DB uses the `CosmosTemplate` and `ReactiveCosmosTemplate` to execute the queries behind *find*, *save* methods. You can use the template yourself for more complex queries.\n\n## Key concepts\n\n### CrudRepository and ReactiveCrudRepository\n- Azure Spring Data Cosmos supports ReactiveCrudRepository and CrudRepository which provides basic CRUD functionality\n    - save\n    - findAll\n    - findOne by Id\n    - deleteAll\n    - delete by Id\n    - delete entity\n\n### Spring Data Annotations\n#### Spring Data [@Id annotation][spring_data_commons_id_annotation]\n  There are 2 ways to map a field in domain class to `id` field of Azure Cosmos DB Item.\n  - annotate a field in domain class with `@Id`, this field will be mapped to Item `id` in Cosmos DB.\n  - set name of this field to `id`, this field will be mapped to Item `id` in Azure Cosmos DB.\n#### Id auto generation\n  - Supports auto generation of string type UUIDs using the @GeneratedValue annotation. The id field of an entity with a string\n   type id can be annotated with `@GeneratedValue` to automatically generate a random UUID prior to insertion.\n ```java readme-sample-GeneratedIdEntity\n public class GeneratedIdEntity {\n\n     @Id\n     @GeneratedValue\n     private String id;\n\n }\n ```\n#### SpEL Expression and Custom Container Name.\n  - By default, container name will be class name of user domain class. To customize it, add the `@Container(containerName=\"myCustomContainerName\")` annotation to the domain class. The container field also supports SpEL expressions (eg. `container = \"${dynamic.container.name}\"` or `container = \"#{@someBean.getContainerName()}\"`) in order to provide container names programmatically/via configuration properties.\n  - In order for SpEL expressions to work properly, you need to add `@DependsOn(\"expressionResolver\")` on top of Spring Application class.\n```java\n@SpringBootApplication\n@DependsOn(\"expressionResolver\")\npublic class SampleApplication {\n    \n}\n```\n#### Indexing Policy\n- By default, IndexingPolicy will be set by Azure Portal Service. To customize it add annotation `@CosmosIndexingPolicy` to domain class. This annotation has 5 attributes to customize, see following:\n```java readme-sample-CosmosIndexingPolicyCodeSnippet\n// Indicate if indexing policy use automatic or not\n// Default value is true\nboolean automatic() default Constants.DEFAULT_INDEXING_POLICY_AUTOMATIC;\n\n// Indexing policy mode, option Consistent.\nIndexingMode mode() default IndexingMode.CONSISTENT;\n\n// Included paths for indexing\nString[] includePaths() default {};\n\n// Excluded paths for indexing\nString[] excludePaths() default {};\n```\n#### Unique Key Policy\n - Azure Spring Data Cosmos supports setting `UniqueKeyPolicy` on container by adding the annotation `@CosmosUniqueKeyPolicy` to domain class. This annotation has the following attributes:\n```java readme-sample-CosmosUniqueKeyPolicyCodeSnippet\n@Container\n@CosmosUniqueKeyPolicy(uniqueKeys = {\n    @CosmosUniqueKey(paths = {\"/lastName\", \"/zipCode\"}),\n    @CosmosUniqueKey(paths = {\"/city\"})\n})\npublic class CosmosUniqueKeyPolicyCodeSnippet {\n\n    @Id\n    String id;\n\n    @PartitionKey\n    String firstName;\n\n    String lastName;\n    String zipCode;\n    String city;\n}\n```\n### Azure Cosmos DB Partition\n- Azure-spring-data-cosmos supports [Azure Cosmos DB partition][azure_cosmos_db_partition].\n- To specify a field of domain class to be partition key field, just annotate it with `@PartitionKey`.\n- When you perform CRUD operation, specify your partition value.\n- For more sample on partition CRUD, please refer [test here][address_repository_it_test]\n\n### Optimistic Locking\n- Azure-spring-data-cosmos supports Optimistic Locking for specific containers, which means upserts/deletes by item will fail with an exception in case the item is modified by another process in the meanwhile.\n- To enable Optimistic Locking for a container, just create a string `_etag` field and mark it with the `@Version` annotation. See the following:\n\n```java readme-sample-MyItem\n@Container(containerName = \"myContainer\")\npublic class MyItem {\n    String id;\n    String data;\n    @Version\n    String _etag;\n}\n```\n- Read more about Optimistic Locking [here](https://docs.microsoft.com/azure/cosmos-db/sql/database-transactions-optimistic-concurrency#optimistic-concurrency-control)\n\n### Spring Data custom query, pageable and sorting\n- Azure-spring-data-cosmos supports [spring data custom queries][spring_data_custom_query]\n- Example, find operation, e.g., `findByAFieldAndBField`\n- Supports [Spring Data Pageable, Slice and Sort](https://docs.spring.io/spring-data/commons/docs/current/reference/html/#repositories.special-parameters).\n  - Based on available RUs on the database account, Cosmos DB can return items less than or equal to the requested size.\n  - Due to this variable number of returned items in every iteration, user should not rely on the totalPageSize, and instead iterating over pageable should be done in this way.\n```java readme-sample-findAllWithPageSize\nprivate List<T> findAllWithPageSize(int pageSize) {\n\n    final CosmosPageRequest pageRequest = new CosmosPageRequest(0, pageSize, null);\n    Page<T> page = repository.findAll(pageRequest);\n    List<T> pageContent = page.getContent();\n    while (page.hasNext()) {\n        Pageable nextPageable = page.nextPageable();\n        page = repository.findAll(nextPageable);\n        pageContent = page.getContent();\n    }\n    return pageContent;\n}\n```\n\n```java readme-sample-SliceQueriesUserRepository\npublic interface SliceQueriesUserRepository extends CosmosRepository<User, String> {\n    @Query(\"select * from c where c.lastName = @lastName\")\n    Slice<User> getUsersByLastName(@Param(\"lastName\") String lastName, Pageable pageable);\n}\n```\n\n```java readme-sample-getUsersByLastName\nprivate List<User> getUsersByLastName(String lastName, int pageSize) {\n\n    final CosmosPageRequest pageRequest = new CosmosPageRequest(0, pageSize, null);\n    Slice<User> slice = repository.getUsersByLastName(lastName, pageRequest);\n    List<User> content = slice.getContent();\n    while (slice.hasNext()) {\n        Pageable nextPageable = slice.nextPageable();\n        slice = repository.getUsersByLastName(lastName, nextPageable);\n        content.addAll(slice.getContent());\n    }\n    return content;\n}\n```\n\n### Spring Boot Starter Data Rest\n- Azure-spring-data-cosmos supports [spring-boot-starter-data-rest](https://spring.io/projects/spring-data-rest).\n- Supports List and nested type in domain class.\n- Configurable ObjectMapper bean with unique name `cosmosObjectMapper`, only configure customized ObjectMapper if you really need to. e.g.,\n```java readme-sample-objectMapper\n@Bean(name = \"cosmosObjectMapper\")\npublic ObjectMapper objectMapper() {\n    return new ObjectMapper(); // Do configuration to the ObjectMapper if required\n}\n```\n\n### Auditing\n- Azure-spring-data-cosmos supports auditing fields on database entities using standard spring-data annotations.\n- This feature can be enabled by adding `@EnableCosmosAuditing` annotation to your application configuration.\n- Entities can annotate fields using `@CreatedBy`, `@CreatedDate`, `@LastModifiedBy` and `@LastModifiedDate`. These fields will be updated automatically.\n```java readme-sample-AuditableUser\n@Container(containerName = \"myContainer\")\npublic class AuditableUser {\n    private String id;\n    private String firstName;\n    @CreatedBy\n    private String createdBy;\n    @CreatedDate\n    private OffsetDateTime createdDate;\n    @LastModifiedBy\n    private String lastModifiedBy;\n    @LastModifiedDate\n    private OffsetDateTime lastModifiedByDate;\n}\n```\n\n### Multi-database configuration\n- Azure-spring-data-cosmos supports multi-database configuration, including \"multiple database accounts\" and \"single account, with multiple databases\".\n\n#### Multi-database accounts\nThe example uses the `application.properties` file\n```properties\n# primary account cosmos config\nazure.cosmos.primary.uri=your-primary-cosmosDb-uri\nazure.cosmos.primary.key=your-primary-cosmosDb-key\nazure.cosmos.primary.secondaryKey=your-primary-cosmosDb-secondary-key\nazure.cosmos.primary.database=your-primary-cosmosDb-dbName\nazure.cosmos.primary.populateQueryMetrics=if-populate-query-metrics\n\n# secondary account cosmos config\nazure.cosmos.secondary.uri=your-secondary-cosmosDb-uri\nazure.cosmos.secondary.key=your-secondary-cosmosDb-key\nazure.cosmos.secondary.secondaryKey=your-secondary-cosmosDb-secondary-key\nazure.cosmos.secondary.database=your-secondary-cosmosDb-dbName\nazure.cosmos.secondary.populateQueryMetrics=if-populate-query-metrics\n```\n\n- The [Entity](https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/spring/azure-spring-data-cosmos#define-an-entity) and [Repository](https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/spring/azure-spring-data-cosmos#create-repositories) definition is similar as above. You can put different database entities into different packages.\n\n- The `@EnableReactiveCosmosRepositories` or `@EnableCosmosRepositories` support user-define the cosmos template, use `reactiveCosmosTemplateRef` or `cosmosTemplateRef` to config the name of the `ReactiveCosmosTemplate` or `CosmosTemplate` bean to be used with the repositories detected.\n- If you have multiple cosmos database accounts, you can define multiple `CosmosAsyncClient`. If the single cosmos account has multiple databases, you can use the same `CosmosAsyncClient` to initialize the cosmos template.\n\n```java\n@Configuration\n@EnableReactiveCosmosRepositories(basePackages = \"com.azure.spring.sample.cosmos.multi.database.multiple.account.repository\",\n    reactiveCosmosTemplateRef = \"primaryDatabaseTemplate\")\npublic class PrimaryDatasourceConfiguration extends AbstractCosmosConfiguration{\n\n    private static final String PRIMARY_DATABASE = \"primary_database\";\n\n    @Bean\n    @ConfigurationProperties(prefix = \"azure.cosmos.primary\")\n    public CosmosProperties primary() {\n        return new CosmosProperties();\n    }\n\n    @Bean\n    public CosmosClientBuilder primaryClientBuilder(@Qualifier(\"primary\") CosmosProperties primaryProperties) {\n        return new CosmosClientBuilder()\n            .key(primaryProperties.getKey())\n            .endpoint(primaryProperties.getUri());\n    }\n\n    @Bean\n    public ReactiveCosmosTemplate primaryDatabaseTemplate(CosmosAsyncClient cosmosAsyncClient,\n                                                          CosmosConfig cosmosConfig,\n                                                          MappingCosmosConverter mappingCosmosConverter) {\n        return new ReactiveCosmosTemplate(cosmosAsyncClient, PRIMARY_DATABASE, cosmosConfig, mappingCosmosConverter);\n    }\n\n    @Override\n    protected String getDatabaseName() {\n        return PRIMARY_DATABASE;\n    }\n}\n```\n\n```java\n@Configuration\n@EnableCosmosRepositories(cosmosTemplateRef  = \"secondaryDatabaseTemplate\")\npublic class SecondaryDatasourceConfiguration {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(SecondaryDatasourceConfiguration.class);\n    public static final String SECONDARY_DATABASE = \"secondary_database\";\n\n    @Bean\n    @ConfigurationProperties(prefix = \"azure.cosmos.secondary\")\n    public CosmosProperties secondary() {\n        return new CosmosProperties();\n    }\n\n    @Bean(\"secondaryCosmosClient\")\n    public CosmosAsyncClient getCosmosAsyncClient(@Qualifier(\"secondary\") CosmosProperties secondaryProperties) {\n        return CosmosFactory.createCosmosAsyncClient(new CosmosClientBuilder()\n            .key(secondaryProperties.getKey())\n            .endpoint(secondaryProperties.getUri()));\n    }\n\n    @Bean(\"secondaryCosmosConfig\")\n    public CosmosConfig getCosmosConfig() {\n        return CosmosConfig.builder()\n            .enableQueryMetrics(true)\n            .maxDegreeOfParallelism(0)\n            .maxBufferedItemCount(0)\n            .responseContinuationTokenLimitInKb(0)\n            .responseDiagnosticsProcessor(new ResponseDiagnosticsProcessorImplementation())\n            .build();\n    }\n\n    @Bean\n    public CosmosTemplate secondaryDatabaseTemplate(@Qualifier(\"secondaryCosmosClient\") CosmosAsyncClient client,\n                                                    @Qualifier(\"secondaryCosmosConfig\") CosmosConfig cosmosConfig,\n                                                    MappingCosmosConverter mappingCosmosConverter) {\n        return new CosmosTemplate(client, SECONDARY_DATABASE, cosmosConfig, mappingCosmosConverter);\n    }\n\n    private static class ResponseDiagnosticsProcessorImplementation implements ResponseDiagnosticsProcessor {\n\n        @Override\n        public void processResponseDiagnostics(@Nullable ResponseDiagnostics responseDiagnostics) {\n            LOGGER.info(\"Response Diagnostics {}\", responseDiagnostics);\n        }\n    }\n}\n```\n\n- In the above example, we have two cosmos account. You can create the `CosmosAsyncClient` like this:\n\n```java\n@Bean(\"secondaryCosmosClient\")\npublic CosmosAsyncClient getCosmosAsyncClient(@Qualifier(\"secondary\") CosmosProperties secondaryProperties) {\n    return CosmosFactory.createCosmosAsyncClient(new CosmosClientBuilder()\n        .key(secondaryProperties.getKey())\n        .endpoint(secondaryProperties.getUri()));\n}\n\n@Bean(\"secondaryCosmosConfig\")\npublic CosmosConfig getCosmosConfig() {\n    return CosmosConfig.builder()\n        .enableQueryMetrics(true)\n        .maxDegreeOfParallelism(0)\n        .maxBufferedItemCount(0)\n        .responseContinuationTokenLimitInKb(0)\n        .responseDiagnosticsProcessor(new ResponseDiagnosticsProcessorImplementation())\n        .build();\n}\n```\n\n- Besides, if you want to define `queryMetricsEnabled`, `ResponseDiagnosticsProcessor`, `maxDegreeOfParallelism`, `maxBufferedItemCount` or `responseContinuationTokenLimitInKb` , you can create the `CosmosConfig` for your cosmos template.\n\n```java\n@Bean(\"secondaryCosmosConfig\")\npublic CosmosConfig getCosmosConfig() {\n    return CosmosConfig.builder()\n        .enableQueryMetrics(true)\n        .maxDegreeOfParallelism(0)\n        .maxBufferedItemCount(0)\n        .responseContinuationTokenLimitInKb(0)\n        .responseDiagnosticsProcessor(new ResponseDiagnosticsProcessorImplementation())\n        .build();\n}\n```\n\n- Create an Application class\n\n```java\n@SpringBootApplication\npublic class MultiDatabaseApplication implements CommandLineRunner {\n\n    @Autowired\n    private CosmosUserRepository cosmosUserRepository;\n\n    @Autowired\n    private MysqlUserRepository mysqlUserRepository;\n\n    @Autowired\n    @Qualifier(\"secondaryDatabaseTemplate\")\n    private CosmosTemplate secondaryDatabaseTemplate;\n\n    @Autowired\n    @Qualifier(\"primaryDatabaseTemplate\")\n    private ReactiveCosmosTemplate primaryDatabaseTemplate;\n\n    private final CosmosUser cosmosUser = new CosmosUser(\"1024\", \"1024@geek.com\", \"1k\", \"Mars\");\n    private static CosmosEntityInformation<CosmosUser, String> userInfo = new CosmosEntityInformation<>(CosmosUser.class);\n\n    public static void main(String[] args) {\n        SpringApplication.run(MultiDatabaseApplication.class, args);\n    }\n\n    public void run(String... var1) throws Exception {\n\n        CosmosUser cosmosUserGet = primaryDatabaseTemplate.findById(cosmosUser.getId(), cosmosUser.getClass()).block();\n        // Same to this.cosmosUserRepository.findById(cosmosUser.getId()).block();\n        MysqlUser mysqlUser = new MysqlUser(cosmosUserGet.getId(), cosmosUserGet.getEmail(), cosmosUserGet.getName(), cosmosUserGet.getAddress());\n        mysqlUserRepository.save(mysqlUser);\n        mysqlUserRepository.findAll().forEach(System.out::println);\n        CosmosUser secondaryCosmosUserGet = secondaryDatabaseTemplate.findById(CosmosUser.class.getSimpleName(), cosmosUser.getId(), CosmosUser.class);\n        System.out.println(secondaryCosmosUserGet);\n    }\n\n\n    @PostConstruct\n    public void setup() {\n        primaryDatabaseTemplate.createContainerIfNotExists(userInfo).block();\n        primaryDatabaseTemplate.insert(CosmosUser.class.getSimpleName(), cosmosUser, new PartitionKey(cosmosUser.getName())).block();\n        // Same to this.cosmosUserRepository.save(user).block();\n        secondaryDatabaseTemplate.createContainerIfNotExists(userInfo);\n        secondaryDatabaseTemplate.insert(CosmosUser.class.getSimpleName(), cosmosUser, new PartitionKey(cosmosUser.getName()));\n   }\n\n    @PreDestroy\n    public void cleanup() {\n        primaryDatabaseTemplate.deleteAll(CosmosUser.class.getSimpleName(), CosmosUser.class).block();\n        // Same to this.cosmosUserRepository.deleteAll().block();\n        secondaryDatabaseTemplate.deleteAll(CosmosUser.class.getSimpleName() , CosmosUser.class);\n        mysqlUserRepository.deleteAll();\n    }\n}\n```\n\n#### Single account with Multi-database\nThe example uses the `application.properties` file\n```properties\nazure.cosmos.uri=your-cosmosDb-uri\nazure.cosmos.key=your-cosmosDb-key\nazure.cosmos.secondary-key=your-cosmosDb-secondary-key\nazure.cosmos.database=your-cosmosDb-dbName\nazure.cosmos.populate-query-metrics=if-populate-query-metrics\n```\n\n- The [Entity](https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/spring/azure-spring-data-cosmos#define-an-entity) and [Repository](https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/spring/azure-spring-data-cosmos#create-repositories) definition is similar as above. You can put different database entities into different packages.\n- You can use `EnableReactiveCosmosRepositories` with different `reactiveCosmosTemplateRef` to define multiple databases in single cosmos account.\n\n```java\n@Configuration\npublic class DatasourceConfiguration {\n\n    private static final String DATABASE1 = \"database1\";\n    private static final String DATABASE2 = \"database2\";\n\n    @Bean\n    public CosmosProperties cosmosProperties() {\n        return new CosmosProperties();\n    }\n\n    @Bean\n    public CosmosClientBuilder primaryClientBuilder(CosmosProperties cosmosProperties) {\n        return new CosmosClientBuilder()\n            .key(cosmosProperties.getKey())\n            .endpoint(cosmosProperties.getUri());\n    }\n\n    @EnableReactiveCosmosRepositories(basePackages = \"com.azure.spring.sample.cosmos.multi.database.repository1\",\n        reactiveCosmosTemplateRef = \"database1Template\")\n    public class Database1Configuration extends AbstractCosmosConfiguration {\n\n        @Bean\n        public ReactiveCosmosTemplate database1Template(CosmosAsyncClient cosmosAsyncClient,\n                                                              CosmosConfig cosmosConfig,\n                                                              MappingCosmosConverter mappingCosmosConverter) {\n            return new ReactiveCosmosTemplate(cosmosAsyncClient, DATABASE1, cosmosConfig, mappingCosmosConverter);\n        }\n\n        @Override\n        protected String getDatabaseName() {\n            return DATABASE1;\n        }\n    }\n\n    @EnableReactiveCosmosRepositories(basePackages = \"com.azure.spring.sample.cosmos.multi.database.repository2\",\n        reactiveCosmosTemplateRef = \"database2Template\")\n    public class Database2Configuration {\n\n        @Bean\n        public ReactiveCosmosTemplate database2Template(CosmosAsyncClient cosmosAsyncClient,\n                                                              CosmosConfig cosmosConfig,\n                                                              MappingCosmosConverter mappingCosmosConverter) {\n            return new ReactiveCosmosTemplate(cosmosAsyncClient, DATABASE2, cosmosConfig, mappingCosmosConverter);\n        }\n\n    }\n}\n```\n\n- Create an Application class\n\n```java\n@SpringBootApplication\npublic class MultiDatabaseApplication implements CommandLineRunner {\n\n    @Autowired\n    private User1Repository user1Repository;\n\n    @Autowired\n    @Qualifier(\"database1Template\")\n    private ReactiveCosmosTemplate database1Template;\n\n    @Autowired\n    @Qualifier(\"database2Template\")\n    private ReactiveCosmosTemplate database2Template;\n\n    private final User1 user1 = new User1(\"1024\", \"1024@geek.com\", \"1k\", \"Mars\");\n    private static CosmosEntityInformation<User1, String> user1Info = new CosmosEntityInformation<>(User1.class);\n\n    private final User2 user2 = new User2(\"2048\", \"2048@geek.com\", \"2k\", \"Mars\");\n    private static CosmosEntityInformation<User2, String> user2Info = new CosmosEntityInformation<>(User2.class);\n\n\n    public static void main(String[] args) {\n        SpringApplication.run(MultiDatabaseApplication.class, args);\n    }\n\n    public void run(String... var1) throws Exception {\n\n        User1 database1UserGet = database1Template.findById(User1.class.getSimpleName(), user1.getId(), User1.class).block();\n        // Same to userRepository1.findById(user.getId()).block()\n        System.out.println(database1UserGet);\n        User2 database2UserGet = database2Template.findById(User2.class.getSimpleName(), user2.getId(), User2.class).block();\n        System.out.println(database2UserGet);\n    }\n\n    @PostConstruct\n    public void setup() {\n        database1Template.createContainerIfNotExists(user1Info).block();\n        database1Template.insert(User1.class.getSimpleName(), user1, new PartitionKey(user1.getName())).block();\n        // Same to this.userRepository1.save(user).block();\n        database2Template.createContainerIfNotExists(user2Info).block();\n        database2Template.insert(User2.class.getSimpleName(), user2, new PartitionKey(user2.getName())).block();\n    }\n\n    @PreDestroy\n    public void cleanup() {\n        database1Template.deleteAll(User1.class.getSimpleName(), User1.class).block();\n        // Same to this.userRepository1.deleteAll().block();\n        database2Template.deleteAll(User2.class.getSimpleName(), User2.class).block();\n    }\n}\n```\n\n### Multi-Tenancy at the Database Level\n- Azure-spring-data-cosmos supports multi-tenancy at the database level configuration by extending `CosmosFactory` and overriding the getDatabaseName() function.\n```java readme-sample-MultiTenantDBCosmosFactory\npublic class MultiTenantDBCosmosFactory extends CosmosFactory {\n\n    private String tenantId;\n\n    /**\n     * Validate config and initialization\n     *\n     * @param cosmosAsyncClient cosmosAsyncClient\n     * @param databaseName      databaseName\n     */\n    public MultiTenantDBCosmosFactory(CosmosAsyncClient cosmosAsyncClient, String databaseName) {\n        super(cosmosAsyncClient, databaseName);\n\n        this.tenantId = databaseName;\n    }\n\n    @Override\n    public String getDatabaseName() {\n        return this.getCosmosAsyncClient().getDatabase(this.tenantId).toString();\n    }\n}\n```\n\n## Beta version package\n\nBeta version built from `main` branch are available, you can refer to the [instruction](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md#nightly-package-builds) to use beta version packages.\n\n## Troubleshooting\n\n### General\n\nIf you encounter any bug, please file an issue [here](https://github.com/Azure/azure-sdk-for-java/issues/new).\n\nTo suggest a new feature or changes that could be made, file an issue the same way you would for a bug.\n\n### Enable Client Logging\n- Azure-spring-data-cosmos uses SLF4j as the logging facade that supports logging into popular logging frameworks such as log4j and logback.\nFor example, if you want to use spring logback as logging framework, add the following xml to resources folder.\n\n```xml\n<configuration>\n  <include resource=\"/org/springframework/boot/logging/logback/base.xml\"/>\n  <appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\">\n    <encoder>\n      <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n\n      </pattern>\n    </encoder>\n  </appender>\n  <root level=\"info\">\n    <appender-ref ref=\"STDOUT\"/>\n  </root>\n  <logger name=\"com.azure.cosmos\" level=\"error\"/>\n  <logger name=\"org.springframework\" level=\"error\"/>\n  <logger name=\"io.netty\" level=\"error\"/>\n  <!-- This will enable query logging, to include query parameter logging, set this logger to TRACE -->  \n  <logger name=\"com.azure.cosmos.implementation.SqlQuerySpecLogger\" level=\"DEBUG\"/>  \n</configuration>\n```\n\n## Examples\n- Please refer to [sample project here][samples].\n\n### Multi-database accounts\n- Please refer to [Multi-database sample project][sample-for-multi-database].\n\n### Single account with Multi-database\n- Please refer to [Single account with Multi-database sample project][sample-for-multi-database-single-account].\n\n## Next steps\n- Read more about azure spring data cosmos [here][azure_spring_data_cosmos_docs].\n- [Read more about Azure Cosmos DB Service][cosmos_docs]\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a\n[Contributor License Agreement (CLA)][cla] declaring that you have the right to, and actually do, grant us the rights\nto use your contribution.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate\nthe PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to\ndo this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq]\nor contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n[source_code]: src\n[cosmos_introduction]: https://docs.microsoft.com/azure/cosmos-db/\n[cosmos_docs]: https://docs.microsoft.com/azure/cosmos-db/introduction\n[jdk]: https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable\n[maven]: https://maven.apache.org/\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n[azure_subscription]: https://azure.microsoft.com/free/\n[samples]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/spring/azure-spring-data-cosmos/src/samples/java/com/azure/spring/data/cosmos\n[sample-for-multi-database]: https://github.com/Azure-Samples/azure-spring-boot-samples/tree/spring-cloud-azure_v4.3.0/cosmos/azure-spring-data-cosmos/cosmos-multi-database-multi-account\n[sample-for-multi-database-single-account]: https://github.com/Azure-Samples/azure-spring-boot-samples/tree/spring-cloud-azure_v4.3.0/cosmos/azure-spring-data-cosmos/cosmos-multi-database-single-account\n[sql_api_query]: https://docs.microsoft.com/azure/cosmos-db/sql-api-sql-query\n[local_emulator]: https://docs.microsoft.com/azure/cosmos-db/local-emulator\n[local_emulator_export_ssl_certificates]: https://docs.microsoft.com/azure/cosmos-db/local-emulator-export-ssl-certificates\n[spring_data_commons_id_annotation]: https://github.com/spring-projects/spring-data-commons/blob/main/src/main/java/org/springframework/data/annotation/Id.java\n[azure_cosmos_db_partition]: https://docs.microsoft.com/azure/cosmos-db/partition-data\n[address_repository_it_test]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/spring/azure-spring-data-cosmos/src/test/java/com/azure/spring/data/cosmos/repository/integration/AddressRepositoryIT.java\n[azure_spring_data_cosmos_docs]: https://docs.microsoft.com/azure/cosmos-db/sql-api-sdk-java-spring-v3\n[spring_data_custom_query]: https://docs.spring.io/spring-data/commons/docs/current/reference/html/#repositories.query-methods.details\n[sql_queries_in_cosmos]: https://docs.microsoft.com/azure/cosmos-db/tutorial-query-sql-api\n[sql_queries_getting_started]: https://docs.microsoft.com/azure/cosmos-db/sql-query-getting-started\n[jdk_link]: https://docs.microsoft.com/java/azure/jdk/\n[maven_link]: https://maven.apache.org/\n[autoscale-throughput]: https://docs.microsoft.com/azure/cosmos-db/provision-throughput-autoscale\n[spring_version_mapping]: https://aka.ms/spring/versions\n[spring_boot_supported_versions]: https://github.com/spring-projects/spring-boot/wiki/Supported-Versions\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fcosmos%2F%2Fazure-spring-data-cosmos%2FREADME.png)\n",
        "repo_name": "spring/azure-spring-data-cosmos",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/spring/azure-spring-data-cosmos",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "",
        "repo_name": "spring/spring-cloud-azure-actuator-autoconfigure",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/spring/spring-cloud-azure-actuator-autoconfigure",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "",
        "repo_name": "spring/spring-cloud-azure-actuator",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/spring/spring-cloud-azure-actuator",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Spring Cloud for Azure appconfiguration config web client library for Java\n\nSee: [Spring Cloud for Azure App Configuration Starter](https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/spring/spring-cloud-azure-starter-appconfiguration-config)\n",
        "repo_name": "spring/spring-cloud-azure-appconfiguration-config-web",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/spring/spring-cloud-azure-appconfiguration-config-web",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Spring Cloud for Azure appconfiguration config client library for Java\n\nSee: [Spring Cloud for Azure App Configuration Starter](https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/spring/spring-cloud-azure-starter-appconfiguration-config)\n",
        "repo_name": "spring/spring-cloud-azure-appconfiguration-config",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/spring/spring-cloud-azure-appconfiguration-config",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "",
        "repo_name": "spring/spring-cloud-azure-autoconfigure",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/spring/spring-cloud-azure-autoconfigure",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "",
        "repo_name": "spring/spring-cloud-azure-core",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/spring/spring-cloud-azure-core",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Spring Cloud for Azure feature management web client library for Java\n\nSee: [Spring Cloud Azure Feature Management](https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/spring/spring-cloud-azure-feature-management)\n",
        "repo_name": "spring/spring-cloud-azure-feature-management-web",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/spring/spring-cloud-azure-feature-management-web",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Spring Cloud for Azure feature management client library for Java\n\n## Feature Management\n\nFeature flags provide a way for Spring Boot applications to turn features on or off dynamically. Developers can use feature flags in simple use cases like conditional statement to more advanced scenarios like conditionally adding routes. Feature Flags are not dependent of any spring-cloud-azure dependencies, but may be used in conjunction with spring-cloud-azure-appconfiguration-config.\n\nHere are some of the benefits of using this library:\n\n* A common convention for feature management\n* Low barrier-to-entry\n  * Supports application.yml file feature flag setup\n* Feature Flag lifetime management\n  * Configuration values can change in real-time, feature flags can be consistent across the entire request\n\n## Feature Flags\n\nFeature flags are composed of two parts, a name and a list of feature-filters that are used to turn the feature on.\n\n## Feature Filters\n\nFeature filters define a scenario for when a feature should be enabled. When a feature is evaluated for whether it is on or off, its list of feature-filters are traversed until one of the filters decides the feature should be enabled. At this point the feature is considered enabled and traversal through the feature filters stops. If no feature filter indicates that the feature should be enabled, then it will be considered disabled.\n\nAs an example, a Microsoft Edge browser feature filter could be designed. This feature filter would activate any features it is attached to as long as an HTTP request is coming from Microsoft Edge.\n\n## Registration\n\nThe Spring Configuration system is used to determine the state of feature flags. Any system can be used to have them read in, such as application.yml, spring-cloud-azure-appconfiguration-config and more.\n\n## Feature Flag Declaration\n\nThe feature management library supports application.yml or bootstrap.yml as a feature flag source. Below we have an example of the format used to set up feature flags in a application.yml file.\n\n```yaml\nfeature-management:\n  feature-flags:\n    feature-t: false\n    feature-u:\n      enabled-for:\n        -\n          name: Random\n    feature-v:\n      enabled-for:\n        -\n          name: TimeWindowFilter\n          parameters:\n            time-window-filter-setting-start: \"Wed, 01 May 2019 13:59:59 GMT\"\n            time-window-filter-setting-end: \"Mon, 01 July 2019 00:00:00 GMT\"\n    feature-w:\n      evaluate: false\n      enabled-for:\n        -\n          name: AlwaysOnFilter\n```\n\nThe `feature-management` section of the YAML document is used by convention to load feature flags. In the section above, we see that we have provided three different features. Features define their filters using the `enabled-for`  property. We can see that feature `feature-t` is set to false with no filters set. `feature-t` will always return false, this can also be done for true. `feature-u` which has only one feature filter `Random` which does not require any configuration so it only has the name property. `feature-v` it specifies a feature filter named `TimeWindow`. This is an example of a configurable feature filter. We can see in the example that the filter has a parameter's property. This is used to configure the filter. In this case, the start and end times for the feature to be active are configured.\n\nThe `AlwaysOnFilter` is a Filter that always evaluates as `true`. This filter can be used to turn this feature flag on, without removing the other feature filters. The `evaluate` field is used to stop the evaluation of the feature filters, and results in the feature flag to always return `false`.\n\n### Supported properties\n\nName | Description | Required | Default\n---|---|---|---\nspring.cloud.azure.feature.management.fail-fast | Whether throw RuntimeException or not when exception occurs | No |  true\n\n## Consumption\n\nThe simplest use case for feature flags is to do a conditional check for whether a feature is enabled to take different paths in code. The use cases grow when additional using spring-cloud-azure-feature-flag-web to manage web based features.\n\n### Feature Check\n\nThe basic form of feature management is checking if a feature is enabled and then performing actions based on the result. This is done through the autowiring `FeatureManager` and calling it's `isEnabledAsync` method.\n\n```java\n@Autowired\nFeatureManager featureManager;\n\nif(featureManager.isEnabledAsync(\"feature-t\").block()) {\n    // Do Something\n}\n```\n\n`FeatureManager` can also be accessed by `@Component` classes.\n\n### Controllers\n\nWhen using the Feature Management Web library you can require that a given feature is enabled in order to execute. This can be done by using the `@FeatureOn` annotation.\n\n```java\n@GetMapping(\"/featureT\")\n@FeatureGate(feature = \"feature-t\")\n@ResponseBody\npublic String featureT() {\n    ...\n}\n```\n\nThe `featureT` endpoint can only be accessed if \"feature-t\" is enabled.\n\n### Disabled Action Handling\n\nWhen a controller is blocked because the feature it specifies is disabled, `IDisabledFeaturesHandler` will be invoked. By default, a HTTP 404 is returned. This can be overridden using implementing `IDisabledFeaturesHandler`.\n\n```java\n@Component\npublic class DisabledFeaturesHandler implements IDisabledFeaturesHandler{\n\n    @Override\n    public HttpServletResponse handleDisabledFeatures(HttpServletRequest request, HttpServletResponse response) {\n        ...\n        return response;\n    }\n\n}\n```\n\n### Routing\n\nCertain routes may expose application capabilities that are gated by features. These routes can redirected if a feature is disabled to another endpoint.\n\n```java\n@GetMapping(\"/featureT\")\n@FeatureGate(feature = \"feature-t\", fallback= \"/oldEndpoint\")\n@ResponseBody\npublic String featureT() {\n    ...\n}\n\n@GetMapping(\"/oldEndpoint\")\n@ResponseBody\npublic String oldEndpoint() {\n    ...\n}\n```\n\n## Implementing a Feature Filter\n\nCreating a feature filter provides a way to enable features based on criteria that you define. To implement a feature filter, the `FeatureFilter` interface must be implemented. `FeatureFilter` has a single method `evaluate`. When a feature specifies that it can be enabled with a feature filter, the `evaluate` method is called. If `evaluate` returns `true` it means the feature should be enabled. If `false` it will continue evaluating the Feature's filters until one returns true. If all return `false` then the feature is off.\n\nFeature filters are found by being defined as `@Component` where there name matches the expected filter defined in the configuration.\n\n```java\n@Component(\"Random\")\npublic class Random implements FeatureFilter {\n\n    @Override\n    public boolean evaluate(FeatureFilterEvaluationContext context) {\n        double chance = Double.valueOf((String) context.getParameters().get(\"chance\"));\n        return Math.random() > chance/100;\n    }\n\n}\n```\n\n### Parameterized Feature Filters\n\nSome feature filters require parameters to decide whether a feature should be turned on or not. For example a browser feature filter may turn on a feature for a certain set of browsers. It may be desired that Edge and Chrome browsers enable a feature, while FireFox does not. To do this a feature filter can be designed to expect parameters. These parameters would be specified in the feature configuration, and in code would be accessible via the `FeatureFilterEvaluationContext` parameter of `evaluate`. `FeatureFilterEvaluationContext` has a property `parameters` which is a `HashMap<String, Object>`.\n\n## Request Based Features/Snapshot\n\nThere are scenarios which require the state of a feature to remain consistent during the lifetime of a request. The values returned from the standard `FeatureManager` may change if the configuration source which it is pulling from is updated during the request. This can be prevented by using `FeatureManagerSnapshot` and `@FeatureOn( snapshot = true )`. `FeatureManagerSnapshot` can be retrieved in the same manner as `FeatureManager`. `FeatureManagerSnapshot` calls `FeatureManager`, but it caches the first evaluated state of a feature during a request and will return the same state of a feature during its lifetime.\n\n## Built-In Feature Filters\n\nThere are a few feature filters that come with the `azure-spring-cloud-feature-management` package. These feature filters are not added automatically, but can be referenced and registered as soon as the package is registered.\n\nEach of the built-in feature filters have their own parameters. Here is the list of feature filters along with examples.\n\n### PercentageFilter\n\nThis filter provides the capability to enable a feature based on a set percentage.\n\n```yaml\nfeature-management:\n  feature-flags:\n    feature-v:\n      enabled-for:\n        -\n          name: PercentageFilter\n          parameters:\n            percentage-filter-setting: 50\n```\n\n### TimeWindowFilter\n\nThis filter provides the capability to enable a feature based on a time window. If only `time-window-filter-setting-end` is specified, the feature will be considered on until that time. If only start is specified, the feature will be considered on at all points after that time. If both are specified the feature will be considered valid between the two times.\n\n```yaml\nfeature-management:\n  feature-flags:\n    feature-v:\n      enabled-for:\n        -\n         name: TimeWindowFilter\n          parameters:\n            time-window-filter-setting-start: \"Wed, 01 May 2019 13:59:59 GMT\",\n            time-window-filter-setting-end: \"Mon, 01 July 2019 00:00:00 GMT\"\n```\n\n### TargetingFilter\n\nThis filter provides the capability to enable a feature for a target audience. An in-depth explanation of targeting is explained in the targeting section below. The filter parameters include an audience object which describes users, groups, and a default percentage of the user base that should have access to the feature, and an exclusion object for users and groups that should never be targeted. Each group object that is listed in the target audience must also specify what percentage of the group's members should have access. If a user is specified in the users section directly, or if the user is in the included percentage of any of the group rollouts, or if the user falls into the default rollout percentage then that user will have the feature enabled.\n\n```yml\nfeature-management:\n  feature-flags:\n    target:\n      enabled-for:\n        -\n          name: targetingFilter\n          parameters:\n            users:\n              - Jeff\n              - Alicia\n            groups:\n              -\n                name: Ring0\n                rolloutPercentage: 100\n              -\n                name: Ring1\n                rolloutPercentage: 100\n            defaultRolloutPercentage: 50\n            exclusion:\n              users:\n                - Ross\n              groups:\n                - Ring2\n```\n\n## Targeting\n\nTargeting is a feature management strategy that enables developers to progressively roll out new features to their user base. The strategy is built on the concept of targeting a set of users known as the target audience. An audience is made up of specific users, groups, and a designated percentage of the entire user base. The groups that are included in the audience can be broken down further into percentages of their total members.\n\nThe following steps demonstrate an example of a progressive rollout for a new 'Beta' feature:\n\n1. Individual users Jeff and Alicia are granted access to the Beta\n1. Another user, Mark, asks to opt-in and is included.\n1. Twenty percent of a group known as \"Ring1\" users are included in the Beta.\n1. The number of \"Ring1\" users included in the beta is bumped up to 100 percent.\n1. Five percent of the user base is included in the beta.\n1. The rollout percentage is bumped up to 100 percent and the feature is completely rolled out.\n1. This strategy for rolling out a feature is built in to the library through the included TargetingFilter feature filter.\n\n### Targeting in an Application\n\nAn example web application that uses the targeting feature filter is available in the [example project][example_project].\n\nTo begin using the `TargetingFilter` in an application it must be added as a `@Bean` like any other Feature Filter. `TargetingFilter` relies on another `@Bean` to be added to the application, `ITargetingContextAccessor`. The `ITargetingContextAccessor` allows for defining the current `TargetingContext` to be used for defining the current user id and groups. An example of this is:\n\n```java\npublic class TargetingContextAccessor implements ITargetingContextAccessor {\n\n    @Override\n    public Mono<TargetingContext> getContextAsync() {\n        TargetingContext context = new TargetingContext();\n        context.setUserId(\"Jeff\");\n        ArrayList<String> groups = new ArrayList<String>();\n        groups.add(\"Ring0\");\n        context.setGroups(groups);\n        return Mono.just(context);\n    }\n\n}\n```\n\n### Targeting Evaluation Options\n\nOptions are available to customize how targeting evaluation is performed across a given `TargetingFilter`. An optional parameter `TargetingEvaluationOptions` can be set during `TargetingFilter` creation.\n\n```java\n    @Bean\n    public TargetingFilter targetingFilter(ITargetingContextAccessor contextAccessor) {\n        return new TargetingFilter(contextAccessor, new TargetingEvaluationOptions().setIgnoreCase(true));\n    }\n```\n\n<!-- Links -->\n[example_project]: https://github.com/Azure-Samples/azure-spring-boot-samples/tree/tag_azure-spring-boot_3.6.0/appconfiguration/feature-management-web-sample\n",
        "repo_name": "spring/spring-cloud-azure-feature-management",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/spring/spring-cloud-azure-feature-management",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Spring Cloud for Azure appconfiguration config tests client library for Java\n\n## Key concepts\n## Getting started\n## Examples\n## Troubleshooting\n## Next steps\n## Contributing\n",
        "repo_name": "spring/spring-cloud-azure-integration-test-appconfiguration-config",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/spring/spring-cloud-azure-integration-test-appconfiguration-config",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "",
        "repo_name": "spring/spring-cloud-azure-resourcemanager",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/spring/spring-cloud-azure-resourcemanager",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "",
        "repo_name": "spring/spring-cloud-azure-service",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/spring/spring-cloud-azure-service",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Spring Cloud for Azure starter App Configuration client library for Java\n\nThis package helps Spring Application to load properties from Azure Configuration Store.\n\n[Package (Maven)][package] | [Samples][app_configuration_sample] | [Reference Documentation][reference_docs]\n\n## Getting started\n\n### Prerequisites\n\n- Java Development Kit (JDK) with version 8 or above\n- [Azure Subscription][azure_subscription]\n- [Maven][maven] 3.0 and above\n\n### Include the package\n\nThere are two libraries that can be used spring-cloud-azure-appconfiguration-config and spring-cloud-azure-appconfiguration-config-web. There are two differences between them the first being the web version takes on spring-web as a dependency, and the web version has various methods for refreshing configurations on a watch interval when the application is active. For more information on refresh see the [Configuration Refresh](#configuration-refresh) section.\n\n[//]: # ({x-version-update-start;com.azure.spring:spring-cloud-azure-appconfiguration-config;current})\n```xml\n<dependency>\n    <groupId>com.azure.spring</groupId>\n    <artifactId>spring-cloud-azure-appconfiguration-config</artifactId>\n    <version>4.8.0</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\nor\n\n[//]: # ({x-version-update-start;com.azure.spring:spring-cloud-azure-appconfiguration-config;current})\n```xml\n<dependency>\n    <groupId>com.azure.spring</groupId>\n    <artifactId>spring-cloud-azure-appconfiguration-config-web</artifactId>\n    <version>4.8.0</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n## Key concepts\n\nAzure App Configuration provides a service to centrally manage application settings and feature flags. Modern programs, especially programs running in a cloud, generally have many components that are distributed in nature. Spreading configuration settings across these components can lead to hard-to-troubleshoot errors during an application deployment. Use App Configuration to store all the settings for your application and secure their accesses in one place.\n\n## Examples\n\nPlease use this `sample` as a reference for how to use this starter.\n\n### Supported properties\n\nName | Description | Required | Default\n---|---|---|---\nspring.cloud.azure.appconfiguration.stores | List of configuration stores from which to load configuration properties | Yes | true\nspring.cloud.azure.appconfiguration.enabled | Whether enable spring-cloud-azure-appconfiguration-config or not | No | true\nspring.cloud.azure.appconfiguration.refresh-interval | Amount of time, of type\u202fDuration, configurations are stored before a check can occur. | No | null\n\n`spring.cloud.azure.appconfiguration.stores` is a list of stores, where each store follows the following format:\n\nName | Description | Required | Default\n---|---|---|---\nspring.cloud.azure.appconfiguration.stores[0].enabled | Whether the store will be loaded. | No | true\nspring.cloud.azure.appconfiguration.stores[0].fail-fast | Whether to throw a `RuntimeException` or not when failing to read from App Configuration during application start-up. If an exception does occur during startup when set to false the store is skipped. | No |  true\nspring.cloud.azure.appconfiguration.stores[0].selects[0].key-filter | The key pattern used to indicate which configuration(s) will be loaded.  | No | /application/*\nspring.cloud.azure.appconfiguration.stores[0].selects[0].label-filter | The label used to indicate which configuration(s) will be loaded. | No | `${spring.profiles.active}` or if null `\\0`\n\nConfiguration Store Authentication\n\nName | Description | Required | Default\n---|---|---|---\nspring.cloud.azure.appconfiguration.stores[0].endpoint | When the endpoint of an App Configuration store is specified, a managed identity or a token credential provided using `AppConfigCredentialProvider` will be used to connect to the App Configuration service. An `IllegalArgumentException` will be thrown if the endpoint and connection-string are specified at the same time. | Conditional | null\nspring.cloud.azure.appconfiguration.stores[0].endpoints | When multiple replica endpoints of an App Configuration store are specified, a managed identity or a token credential provided using `AppConfigCredentialProvider` will be used to connect to the App Configuration service. Replica endpoints should be listed in priority order of connection. An `IllegalArgumentException` will be thrown if multiple authentication methods are provided. | Conditional | null\nspring.cloud.azure.appconfiguration.stores[0].connection-string | When the connection-string of an App Configuration store is specified, HMAC authentication will be used to connect to the App Configuration service. An `IllegalArgumentException` will be thrown if the endpoint and connection-string are specified at the same time. | Conditional | null\nspring.cloud.azure.appconfiguration.stores[0].connection-strings | When the connection-strings of an App Configuration store is specified, HMAC authentication will be used to connect to the App Configuration service.  Replica stores should be listed in priority order of connection. An `IllegalArgumentException` will be thrown if the endpoint and connection-string are specified at the same time. | Conditional | null\n\n`spring.cloud.azure.appconfiguration.stores[0].monitoring` is a set of configurations dealing with refresh of configurations:\n\nName | Description | Required | Default\n---|---|---|---\nspring.cloud.azure.appconfiguration.stores[0].monitoring.enabled | Whether the configurations and feature flags will be re-loaded if a change is detected.  | No | false\nspring.cloud.azure.appconfiguration.stores[0].monitoring.refresh-interval | Amount of time, of type\u202fDuration, configurations are stored before a check can occur. | No | 30s\nspring.cloud.azure.appconfiguration.stores[0].monitoring.feature-flag-refresh-interval | Amount of time, of type\u202fDuration, feature flags are stored before a check can occur. | No | 30s\nspring.cloud.azure.appconfiguration.stores[0].monitoring.triggers[0].key | A key that is watched for change via etag. If a change is detected on the key then a refresh of all configurations will be triggered. | Yes (If monitoring enabled) | null\nspring.cloud.azure.appconfiguration.stores[0].monitoring.triggers[0].label | The label of the key that is being watched for etag changes. | No | \\0\nspring.cloud.azure.appconfiguration.stores[0].monitoring.push-notification.primary-token.name | The name of a token used with Event Hub to trigger push based refresh. | No | null\nspring.cloud.azure.appconfiguration.stores[0].monitoring.push-notification.primary-token.secret | The secret value of a token used with Event Hub to trigger push based refresh. | No | null\nspring.cloud.azure.appconfiguration.stores[0].monitoring.push-notification.secondary-token.name | The name of a token used with Event Hub to trigger push based refresh. | No | null\nspring.cloud.azure.appconfiguration.stores[0].monitoring.push-notification.secondary-token.secret | The secret value of a token used with Event Hub to trigger push based refresh. | No | null\n\n`spring.cloud.azure.appconfiguration.stores[x].feature-flags` is a set of configurations for the feature flags of the store:\n\nName | Description | Required | Default\n---|---|---|---\nspring.cloud.azure.appconfiguration.stores[0].feature-flags.enabled | Whether feature flags are loaded from the config store.  | No | false\nspring.cloud.azure.appconfiguration.stores[0].feature-flags.selects[0].key-filter | The key pattern used to indicate which feature flags will be loaded. | No | \\0\nspring.cloud.azure.appconfiguration.stores[0].feature-flags.selects[0].label-filter | The label used to indicate which feature flags will be loaded. | No | \\0\n\n### Advanced usage\n\n#### Geo-Replication\n\nEach replica created has its dedicated endpoint. Geo-replication is enabled when `spring.cloud.azure.appconfiguration.stores[0].endpoints` is set with multiple endpoints.\n\n```properties\nspring.cloud.azure.appconfiguration.stores[0].endpoints[0]=<store-endpoint>\nspring.cloud.azure.appconfiguration.stores[0].endpoints[1]=<replica-1-endpoint>\nspring.cloud.azure.appconfiguration.stores[0].endpoints[2]=<replica-2-endpoint>\n```\n\nAs shown you can list your replica endpoints in the order of the most preferred to the least preferred endpoint. When the current endpoint isn't accessible, the provider library will fail over to a less preferred endpoint, but it will try to connect to the more preferred endpoints from time to time. When a more preferred endpoint becomes available, it will switch to it for future requests.\n\nNote: The failover may occur if the App Configuration provider observes the following conditions.\nReceives responses with service unavailable status (HTTP status code 500 or above).\nExperiences with network connectivity issues.\nRequests are throttled (HTTP status code 429).\nThe failover won't happen for client errors like authentication failures.\n\n#### Load from multiple configuration stores\n\nIf the application needs to load configuration properties from multiple stores, following configuration sample describes how the bootstrap.properties(or .yaml) can be configured.\n\n```properties\nspring.cloud.azure.appconfiguration.stores[0].connection-string=[first-store-connection-string]\nspring.cloud.azure.appconfiguration.stores[0].selects[0].label-filter=[my-label]\nspring.cloud.azure.appconfiguration.stores[1].connection-string=[second-store-connection-string]\n```\n\nIf duplicate keys exists for multiple stores, the last configuration store has the highest priority.\n\n#### Load from multiple labels\n\nIf the application needs to load property values from multiple labels in the same configuration store, following configuration can be used:\n\n```properties\nspring.cloud.azure.appconfiguration.stores[0].connection-string=[first-store-connection-string]\nspring.cloud.azure.appconfiguration.stores[0].selects[0].label-filter=[my-label1]\nspring.cloud.azure.appconfiguration.stores[0].selects[1].label-filter=[my-label2]\n```\n\nMultiple labels can be separated with comma, if duplicate keys exists for multiple labels, the last label has highest priority.\n\n#### Spring Profiles\n\nSpring Profiles are supported automatically by being set as the default label value of your selected keys. Using the label filter configuration overrides profile use. To include Spring Profiles and labels:\n\n```properties\nspring.cloud.azure.appconfiguration.stores[0].selects[0].label-filter=${spring.profiles.active},v1\n```\n\nIf you need to use `(No Label)` you need to do the following:\n\n```properties\nspring.cloud.azure.appconfiguration.stores[0].selects[0].label-filter=,${spring.profiles.active}\n```\n\nwhere the empty value before the comma equals the `\\0` value.\n\nand for yaml\n\n```yaml\nspring:\n  cloud:\n    azure:\n      appconfiguration:\n        stores:\n         -\n           selects:\n             -\n              label-filter: ',${spring.profiles.active}'\n```\n\n#### Configuration Refresh\n\nConfiguration Refresh feature allows the application to load the latest property value from configuration store automatically, without restarting the application.\n\nChanging a property key in the configuration store on Azure Portal, e.g., /application/config.message, log similar with below will be printed on the console.\n\n```console\nINFO 17496 --- [TaskScheduler-1] o.s.c.e.event.RefreshEventListener       : Refresh keys changed: [config.message]\n```\n\nThe application now will be using the updated properties. By default, `@ConfigurationProperties` annotated beans will be automatically refreshed. Use `@RefreshScope` on beans which are required to be refreshed when properties are changed.\n\nBy default, all the keys following the pattern `/application/*` with the label `${spring.profiles.active}` or when no Spring Profile is set `(No Label)` is used. At least one watch key is required when monitoring is enabled.\n\n```properties\nspring.cloud.azure.appconfiguration.stores[0].monitoring.enabled=true\nspring.cloud.azure.appconfiguration.stores[0].monitoring.triggers[0].key=[my-watched-key]\nspring.cloud.azure.appconfiguration.stores[0].monitoring.triggers[0].label=[my-watched-label]\n```\n\nWhen using the web library, applications will attempt a refresh whenever a servlet request occurs after the watch interval time when monitoring is enabled.\n\nIn the console library calling refreshConfiguration on `AppConfigurationRefresh` will result in a refresh if the watch interval has passed. The web library can also use this method along with servlet request method.\n\n##### Push Based Refresh\n\nThe Web Provider can be connect to your Azure App Configuration store via an Azure Event Grid Web Hook to trigger a refresh event. By adding the Spring Actuator as a dependency you can add App Configuration Refresh as an exposed endpoint. There are two options appconfiguration-refresh and appconfiguration-refresh-bus. These endpoints work just like there counterparts refresh and refresh-bus, but have the required web hook authorization to work with Azure Event Grid. When needing to refresh multiple application instances `azure-servicebus-jms-spring-boot-starter` needs to be setup to have the refresh triggered in all instances.\n\n```properties\nmanagement.endpoints.web.exposure.include= appconfiguration-refresh, appconfiguration-refresh-bus\n```\n\nIn addition a required query parameter has been added for security. No token name or value is set by default, but setting one is required in order to use the endpoints. It is suggested you set up your token value in Key Vault and add it to your store through a key vault reference. The values should be:\n\n```properties\n/application/spring.cloud.appconfiguration.stores[0].monitoring.push-notification.primary-token.name=[primary-token-name]\n/application/spring.cloud.appconfiguration.stores[0].monitoring.push-notification.primary-token.secret=[primary-token-secret]\n/application/spring.cloud.appconfiguration.stores[0].monitoring.push-notification.secondary-token.name=[secondary-token-name]\n/application/spring.cloud.appconfiguration.stores[0].monitoring.push-notification.secondary-token.secret=[secondary-token-secret]\n```\n\nTo setup the webhook open your app store and open the events tab. Select \"+ Event Subscription\". Set the name of your Event and select the Endpoint type of Web Hook. Select \"Select an endpoint\". You endpoint will be your look as following:\n\n`http://myApplication.azurewebsites.net/actuator/appconfiguration-refresh?myTokenName=mySecret`\n\nYour application will need to be up and running with token-name and token-secret set as Selecting Confirm Selection will validate the endpoint.\n\nNote: This validation only happens on the creation/modification of the endpoint.\n\nIt is also highly recommended that filters are setup as otherwise a refresh will be triggered after every key creation and modification.\n\n#### Failfast\n\nFailfast feature decides whether throw RuntimeException or not when exception happens. If an exception does occur when false the store is skipped. Any store skipped on startup will be automatically skipped on Refresh. By default, failfast is enabled, it can be disabled with below configuration:\n\n```properties\nspring.cloud.azure.appconfiguration.stores[0].fail-fast=false\n```\n\n#### Placeholders in App Configuration\n\nThe values in App Configuration are filtered through the existing Environment when they are used. Placeholders can be used just like in `application.properties`, but with the added benefit of support for key vault references. Example with kafka:\n\n```properties\n/application/app.name=MyApp\n/application/app.description=${app.name} is configured with Azure App Configuration\n```\n\n#### Use Managed Identity to access App Configuration\n\n[Managed identity][azure_managed_identity] allows application to access [Azure Active Directory][azure_active_directory] protected resource on [Azure][azure].\n\nIn this library, [Azure Identity SDK][azure_identity_sdk] is used to access Azure App Configuration and optionally Azure Key Vault, for secrets. Only one method of authentication can be set at one time. When not using the AppConfigCredentialProvider and/or KeyVaultCredentialProvider the same authentication method is used for both App Configuration and Key Vault.\n\nFollow the below steps to enable accessing App Configuration with managed identity:\n\n1. [Enable managed identities][enable_managed_identities] for the [supported Azure services][support_azure_services], for example, virtual machine or App Service, on which the application will be deployed.\n\n1. Configure the [Azure RBAC][azure_rbac] of your App Configuration store to grant access to the Azure service where your application is running. Select the App Configuration Data Reader. The App Configuration Data Owner role is not required but can be used if needed.\n\n1. Configure bootstrap.properties(or .yaml) in the Spring Boot application.\n\nThe configuration store endpoint must be configured when `connection-string` is empty. When using a User Assigned Id the value `spring.cloud.azure.appconfiguration.managed-identity.client-id=[client-id]` must be set.\n\n##### bootstrap.application\n\n```application\nspring.cloud.azure.appconfiguration.stores[0].endpoint=[config-store-endpoint]\n\n#If Using User Assigned Identity\nspring.cloud.azure.appconfiguration.managed-identity.client-id=[client-id]\n```\n\n#### Client Builder Customization\n\nThe service client builders used for connecting to App Configuration and Key Vault can be customized by implementing interfaces `ConfigurationClientBuilderSetup` and `SecretClientBuilderSetup` respectively. Generating and providing a `@Bean` of them will update the default service client builders used in [App Configuration SDK][app_configuration_SDK] and [Key Vault SDK][key_vault_SDK]. If necessary, the customization can be done per App Configuration store or Key Vault instance.\n\n```java\npublic interface ConfigurationClientBuilderSetup {\n    public void setup(ConfigurationClientBuilder builder, String endpoint);\n}\n\npublic interface SecretClientBuilderSetup {\n    public void setup(SecretClientBuilder builder, String uri);\n}\n```\n\nFor example, the following implementation of `MyClient` replaces the default `HttpClient` with one using a proxy for all traffic to App Configuration and Key Vault.\n\n```java\npublic class MyClient implements ConfigurationClientBuilderSetup, SecretClientBuilderSetup {\n\n    @Override\n    public void setup(ConfigurationClientBuilder builder, String endpoint) {\n        builder.httpClient(buildHttpClient());\n    }\n\n    @Override\n    public void setup(SecretClientBuilder builder, String uri) {\n        builder.httpClient(buildHttpClient());\n    }\n\n    private HttpClient buildHttpClient() {\n        String hostname = System.getProperty(\"https.proxyHosts\");\n        String portString = System.getProperty(\"https.proxyPort\");\n        int port = Integer.valueOf(portString);\n\n        ProxyOptions proxyOptions = new ProxyOptions(ProxyOptions.Type.HTTP,\n                new InetSocketAddress(hostname, port));\n        return new NettyAsyncHttpClientBuilder()\n                .proxy(proxyOptions)\n                .build();\n    }\n\n}\n```\n\n## Troubleshooting\n### Logging setting\nPlease refer to [spring logging document] to get more information about logging.\n\n#### Logging setting examples\n- Example: Setting logging level of hibernate\n```\nlogging.level.root=WARN\nlogging.level.org.springframework.web=DEBUG\nlogging.level.org.hibernate=ERROR\n```\n\n## Next steps\n\nThe following section provide a sample project illustrating how to use the starter.\n### More sample code\n- [Azure App Configuration][app_configuration_sample]\n- [Azure App Configuration Conversation Complete][app_configuration_conversation_complete_sample]\n- [Azure App Configuration Conversation Initial][app_configuration_conversation_initail_sample]\n\n## Contributing\nThis project welcomes contributions and suggestions.  Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.microsoft.com.\n\nPlease follow [instructions here][contributing_md] to build from source or contribute.\n\n<!-- Link -->\n[package]: https://mvnrepository.com/artifact/com.microsoft.azure/spring-cloud-azure-appconfiguration-config\n[app_configuration_sample]: https://github.com/Azure-Samples/azure-spring-boot-samples/tree/spring-cloud-azure_v4.3.0/appconfiguration/azure-spring-cloud-appconfiguration-config/azure-spring-cloud-appconfiguration-config-sample\n[app_configuration_conversation_complete_sample]: https://github.com/Azure-Samples/azure-spring-boot-samples/tree/spring-cloud-azure_v4.3.0/appconfiguration/azure-spring-cloud-appconfiguration-config/azure-spring-cloud-appconfiguration-config-convert-sample/azure-spring-cloud-appconfiguration-config-convert-sample-complete\n[app_configuration_conversation_initail_sample]: https://github.com/Azure-Samples/azure-spring-boot-samples/tree/spring-cloud-azure_v4.3.0/appconfiguration/azure-spring-cloud-appconfiguration-config/azure-spring-cloud-appconfiguration-config-convert-sample/azure-spring-cloud-appconfiguration-config-convert-sample-initial\n[azure_subscription]: https://azure.microsoft.com/free\n[spring logging document]: https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#boot-features-logging\n[contributing_md]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/spring/CONTRIBUTING.md\n[maven]: https://maven.apache.org/\n[spring_conversion_duration]: https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.external-config.typesafe-configuration-properties.conversion.durations\n[azure_managed_identity]: https://docs.microsoft.com/azure/active-directory/managed-identities-azure-resources/overview\n[enable_managed_identities]: https://docs.microsoft.com/azure/active-directory/managed-identities-azure-resources/overview#how-can-i-use-managed-identities-for-azure-resources\n[support_azure_services]: https://docs.microsoft.com/azure/active-directory/managed-identities-azure-resources/services-support-managed-identities\n[azure]: https://azure.microsoft.com\n[azure_active_directory]: https://azure.microsoft.com/services/active-directory/\n[azure_identity_sdk]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/identity/azure-identity\n[azure_rbac]: https://docs.microsoft.com/azure/role-based-access-control/role-assignments-portal\n[app_configuration_SDK]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/appconfiguration/azure-data-appconfiguration#key-concepts\n[key_vault_SDK]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/keyvault/azure-security-keyvault-secrets#key-concepts\n[reference_docs]: https://microsoft.github.io/spring-cloud-azure/docs/azure-app-configuration/index.html\n",
        "repo_name": "spring/spring-cloud-azure-starter-appconfiguration-config",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/spring/spring-cloud-azure-starter-appconfiguration-config",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "",
        "repo_name": "spring/spring-cloud-azure-stream-binder-eventhubs-core",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/spring/spring-cloud-azure-stream-binder-eventhubs-core",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "",
        "repo_name": "spring/spring-cloud-azure-stream-binder-eventhubs",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/spring/spring-cloud-azure-stream-binder-eventhubs",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "",
        "repo_name": "spring/spring-cloud-azure-stream-binder-servicebus-core",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/spring/spring-cloud-azure-stream-binder-servicebus-core",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "",
        "repo_name": "spring/spring-cloud-azure-stream-binder-servicebus",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/spring/spring-cloud-azure-stream-binder-servicebus",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "",
        "repo_name": "spring/spring-cloud-azure-trace-sleuth",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/spring/spring-cloud-azure-trace-sleuth",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "",
        "repo_name": "spring/spring-integration-azure-core",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/spring/spring-integration-azure-core",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "",
        "repo_name": "spring/spring-integration-azure-eventhubs",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/spring/spring-integration-azure-eventhubs",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "",
        "repo_name": "spring/spring-integration-azure-servicebus",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/spring/spring-integration-azure-servicebus",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "",
        "repo_name": "spring/spring-integration-azure-storage-queue",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/spring/spring-integration-azure-storage-queue",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "",
        "repo_name": "spring/spring-messaging-azure-eventhubs",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/spring/spring-messaging-azure-eventhubs",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "",
        "repo_name": "spring/spring-messaging-azure-servicebus",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/spring/spring-messaging-azure-servicebus",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "",
        "repo_name": "spring/spring-messaging-azure-storage-queue",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/spring/spring-messaging-azure-storage-queue",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "",
        "repo_name": "spring/spring-messaging-azure",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/spring/spring-messaging-azure",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager SqlVirtualMachine client library for Java\n\nAzure Resource Manager SqlVirtualMachine client library for Java.\n\nThis package contains Microsoft Azure SDK for SqlVirtualMachine Management SDK. The SQL virtual machine management API provides a RESTful set of web APIs that interact with Azure Compute, Network & Storage services to manage your SQL Server virtual machine. The API enables users to create, delete and retrieve a SQL virtual machine, SQL virtual machine group or availability group listener. Package tag package-preview-2022-08. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-sqlvirtualmachine;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-sqlvirtualmachine</artifactId>\n    <version>1.0.0-beta.4</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nSqlVirtualMachineManager manager = SqlVirtualMachineManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/sqlvirtualmachine/azure-resourcemanager-sqlvirtualmachine/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "sqlvirtualmachine/azure-resourcemanager-sqlvirtualmachine",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/sqlvirtualmachine/azure-resourcemanager-sqlvirtualmachine",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Storage Blobs Batch client library for Java\n\nAzure Blob storage is Microsoft's object storage solution for the cloud. Blob\nstorage is optimized for storing massive amounts of unstructured data.\nUnstructured data is data that does not adhere to a particular data model or\ndefinition, such as text or binary data.\n\n[Source code][source] | [API reference documentation][docs] | [REST API documentation][rest_docs] | [Product documentation][product_docs] | [Samples][samples]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n- [Create Storage Account][storage_account]\n\n### Include the package\n\n#### Include the BOM file\n\nPlease include the azure-sdk-bom to your project to take dependency on GA version of the library. In the following snippet, replace the {bom_version_to_target} placeholder with the version number.\nTo learn more about the BOM, see the [AZURE SDK BOM README](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/boms/azure-sdk-bom/README.md).\n\n```xml\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>com.azure</groupId>\n            <artifactId>azure-sdk-bom</artifactId>\n            <version>{bom_version_to_target}</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n```\nand then include the direct dependency in the dependencies section without the version tag.\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-storage-blob-batch</artifactId>\n  </dependency>\n</dependencies>\n```\n\n#### Include direct dependency\nIf you want to take dependency on a particular version of the library that is not present in the BOM,\nadd the direct dependency to your project as follows.\n\n[//]: # ({x-version-update-start;com.azure:azure-storage-blob-batch;current})\n```xml\n<dependency>\n  <groupId>com.azure</groupId>\n  <artifactId>azure-storage-blob-batch</artifactId>\n  <version>12.19.0-beta.1</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Create a Storage Account\nTo create a Storage Account you can use the [Azure Portal][azure_portal] or [Azure CLI][storage_account_create_cli].\n\n```bash\naz storage account create \\\n    --resource-group <resource-group-name> \\\n    --name <storage-account-name> \\\n    --location <location>\n```\n\n## Key concepts\n\nBlob storage is designed for:\n\n- Serving images or documents directly to a browser.\n- Storing files for distributed access.\n- Streaming video and audio.\n- Writing to log files.\n- Storing data for backup and restore, disaster recovery, and archiving.\n- Storing data for analysis by an on-premises or Azure-hosted service.\n\n## Examples\n\nThe following sections provide several code snippets covering some of the most common Azure Storage Blob Batch tasks, including:\n\n- [Creating BlobBatchClient](#creating-blobbatchclient)\n- [Bulk Deleting Blobs](#bulk-deleting-blobs)\n- [Bulk Setting AccessTier](#bulk-setting-accesstier)\n- [Advanced Batching](#advanced-batching)\n\n### Creating BlobBatchClient\n\nCreate a BlobBatchClient from a [BlobServiceClient][blob_service_client].\n\n```java readme-sample-creatingBlobBatchClient\nBlobBatchClient blobBatchClient = new BlobBatchClientBuilder(blobServiceClient).buildClient();\n```\n\n### Bulk Deleting Blobs\n\n```java readme-sample-bulkDeletingBlobs\nblobBatchClient.deleteBlobs(blobUrls, DeleteSnapshotsOptionType.INCLUDE).forEach(response ->\n    System.out.printf(\"Deleting blob with URL %s completed with status code %d%n\",\n        response.getRequest().getUrl(), response.getStatusCode()));\n```\n\n### Bulk Setting AccessTier\n\n```java readme-sample-bulkSettingAccessTier\nblobBatchClient.setBlobsAccessTier(blobUrls, AccessTier.HOT).forEach(response ->\n    System.out.printf(\"Setting blob access tier with URL %s completed with status code %d%n\",\n        response.getRequest().getUrl(), response.getStatusCode()));\n```\n\n### Advanced Batching\n\nDeleting blobs in a batch that have different pre-requisites.\n\n```java readme-sample-advancedBatchingDelete\nBlobBatch blobBatch = blobBatchClient.getBlobBatch();\n\n// Delete a blob.\nResponse<Void> deleteResponse = blobBatch.deleteBlob(blobUrl);\n\n// Delete a specific blob snapshot.\nResponse<Void> deleteSnapshotResponse =\n    blobBatch.deleteBlob(blobUrlWithSnapshot, DeleteSnapshotsOptionType.ONLY, null);\n\n// Delete a blob that has a lease.\nResponse<Void> deleteWithLeaseResponse =\n    blobBatch.deleteBlob(blobUrlWithLease, DeleteSnapshotsOptionType.INCLUDE, new BlobRequestConditions()\n        .setLeaseId(\"leaseId\"));\n\nblobBatchClient.submitBatch(blobBatch);\nSystem.out.printf(\"Deleting blob completed with status code %d%n\", deleteResponse.getStatusCode());\nSystem.out.printf(\"Deleting blob snapshot completed with status code %d%n\",\n    deleteSnapshotResponse.getStatusCode());\nSystem.out.printf(\"Deleting blob with lease completed with status code %d%n\",\n    deleteWithLeaseResponse.getStatusCode());\n```\n\nSetting `AccessTier` on blobs in batch that have different pre-requisites.\n\n```java readme-sample-advancedBatchingSetTier\nBlobBatch blobBatch = blobBatchClient.getBlobBatch();\n\n// Set AccessTier on a blob.\nResponse<Void> setTierResponse = blobBatch.setBlobAccessTier(blobUrl, AccessTier.COOL);\n\n// Set AccessTier on another blob.\nResponse<Void> setTierResponse2 = blobBatch.setBlobAccessTier(blobUrl2, AccessTier.ARCHIVE);\n\n// Set AccessTier on a blob that has a lease.\nResponse<Void> setTierWithLeaseResponse = blobBatch.setBlobAccessTier(blobUrlWithLease, AccessTier.HOT,\n    \"leaseId\");\n\nblobBatchClient.submitBatch(blobBatch);\nSystem.out.printf(\"Set AccessTier on blob completed with status code %d%n\", setTierResponse.getStatusCode());\nSystem.out.printf(\"Set AccessTier on blob completed with status code %d%n\", setTierResponse2.getStatusCode());\nSystem.out.printf(\"Set AccessTier on  blob with lease completed with status code %d%n\",\n    setTierWithLeaseResponse.getStatusCode());\n```\n\n## Troubleshooting\n\nWhen interacts with blobs using this Java client library, errors returned by the service correspond to the same HTTP\nstatus codes returned for [REST API][error_codes] requests. For example, if you try to retrieve a container or blob that\ndoesn't exist in your Storage Account, a `404` error is returned, indicating `Not Found`.\n\n### Default HTTP Client\nAll client libraries by default use the Netty HTTP client. Adding the above dependency will automatically configure\nthe client library to use the Netty HTTP client. Configuring or changing the HTTP client is detailed in the\n[HTTP clients wiki](https://github.com/Azure/azure-sdk-for-java/wiki/HTTP-clients).\n\n### Default SSL library\nAll client libraries, by default, use the Tomcat-native Boring SSL library to enable native-level performance for SSL\noperations. The Boring SSL library is an uber jar containing native libraries for Linux / macOS / Windows, and provides\nbetter performance compared to the default SSL implementation within the JDK. For more information, including how to\nreduce the dependency size, refer to the [performance tuning][performance_tuning] section of the wiki.\n\n## Next steps\n\nGet started with our [Blob Batch samples][blob_samples]:\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments.\n\n<!-- LINKS -->\n[source]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/storage/azure-storage-blob-batch/src/main/java\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[rest_docs]: https://docs.microsoft.com/rest/api/storageservices/blob-service-rest-api\n[product_docs]: https://docs.microsoft.com/azure/storage/blobs/storage-blobs-overview\n[samples]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/storage/azure-storage-blob-batch/src/samples\n[jdk]: https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable\n[azure_subscription]: https://azure.microsoft.com/free/\n[storage_account]: https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-portal\n[azure_portal]: https://docs.microsoft.com/azure/storage/common/storage-account-create?tabs=azure-portal\n[storage_account_create_cli]: https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-cli\n[blob_service_client]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/storage/azure-storage-blob#create-a-storage-account\n[error_codes]: https://docs.microsoft.com/rest/api/storageservices/blob-service-error-codes\n[blob_samples]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/storage/azure-storage-blob-batch/src/samples/README.md\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n[performance_tuning]: https://github.com/Azure/azure-sdk-for-java/wiki/Performance-Tuning\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fstorage%2Fazure-storage-blob-batch%2FREADME.png)\n",
        "repo_name": "storage/azure-storage-blob-batch",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/storage/azure-storage-blob-batch",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Blob Storage change feed client library for Java\n\nThe purpose of the change feed is to provide transaction logs of all the changes that occur to\nthe blobs and the blob metadata in your storage account. The change feed provides ordered,\nguaranteed, durable, immutable, read-only log of these changes. Client applications can read these\nlogs at any time. The change feed enables you to build efficient and scalable solutions that\nprocess change events that occur in your Blob Storage account at a low cost.\n\n## Getting started\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n- [Create Storage Account][storage_account]\n\n### Include the package\n\n[//]: # ({x-version-update-start;com.azure:azure-storage-blob-changefeed;current})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-storage-blob-changefeed</artifactId>\n    <version>12.0.0-beta.18</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Create a Storage Account\nTo create a Storage Account you can use the [Azure Portal][storage_account_create_portal] or [Azure CLI][storage_account_create_cli].\n\n```bash\naz storage account create \\\n    --resource-group <resource-group-name> \\\n    --name <storage-account-name> \\\n    --location <location>\n```\n\nYour storage account URL, subsequently identified as `<your-storage-account-url>`, would be formatted as follows\n`http(s)://<storage-account-name>.blob.core.windows.net`\n\n### Authenticate the client\n\nIn order to interact with the Storage Service (Blob, Queue, Message, MessageId, File) you'll need to create an instance of the Service Client class.\nTo make this possible you'll need the Account SAS (shared access signature) string of the Storage Account. Learn more at [SAS Token][sas_token]\n\n#### Get credentials\n\n##### SAS Token\n\na. Use the Azure CLI snippet below to get the SAS token from the Storage Account.\n\n```bash\naz storage blob generate-sas \\\n    --account-name {Storage Account name} \\\n    --container-name {container name} \\\n    --name {blob name} \\\n    --permissions {permissions to grant} \\\n    --expiry {datetime to expire the SAS token} \\\n    --services {storage services the SAS allows} \\\n    --resource-types {resource types the SAS allows}\n```\n\nExample:\n\n```bash\nCONNECTION_STRING=<connection-string>\n\naz storage blob generate-sas \\\n    --account-name MyStorageAccount \\\n    --container-name MyContainer \\\n    --name MyBlob \\\n    --permissions racdw \\\n    --expiry 2020-06-15\n```\n\nb. Alternatively, get the Account SAS Token from the Azure Portal.\n\n1. Go to your Storage Account\n2. Select `Shared access signature` from the menu on the left\n3. Click on `Generate SAS and connection string` (after setup)\n\n##### **Shared Key Credential**\n\na. Use Account name and Account key. Account name is your Storage Account name.\n\n1. Go to your Storage Account\n2. Select `Access keys` from the menu on the left\n3. Under `key1`/`key2` copy the contents of the `Key` field\n\nor\n\nb. Use the connection string.\n\n1. Go to your Storage Account\n2. Select `Access keys` from the menu on the left\n3. Under `key1`/`key2` copy the contents of the `Connection string` field\n\n## Key concepts\n\nThe change feed is stored as blobs in a special container in your storage account at standard blob\npricing cost. You can control the retention period of these files based on your requirements\n(See the conditions of the current release). Change events are appended to the change feed as records\nin the Apache Avro format specification: a compact, fast, binary format that provides rich data structures\nwith inline schema. This format is widely used in the Hadoop ecosystem, Stream Analytics, and Azure Data\nFactory.\n\nYou can process these logs incrementally or in-full. Any number of client applications can independently\nread the change feed, in parallel, and at their own pace. Analytics applications such as Apache Drill or\nApache Spark can consume logs directly as Avro files, which let you process them at a low-cost, with\nhigh-bandwidth, and without having to write a custom application.\n\n## Examples\n\nThe following sections provide several code snippets covering some of the most common Azure Storage Blob Changefeed \ntasks, including:\n\n- [Create a `BlobChangefeedClient`](#create-a-blobchangefeedclient)\n- [Get events](#get-events)\n- [Get events between a start and end time](#get-events-between-a-start-and-end-time)\n- [Resume with a cursor](#resume-with-a-cursor)\n- [Poll for events with a cursor](#poll-for-events-with-a-cursor)\n\n### Create a `BlobChangefeedClient`\n\n```java readme-sample-getClient\nclient = new BlobChangefeedClientBuilder(blobServiceClient).buildClient();\n```\n\n### Get events\n\n```java readme-sample-changefeed\nclient.getEvents().forEach(event ->\n    System.out.printf(\"Topic: %s, Subject: %s%n\", event.getTopic(), event.getSubject()));\n```\n\n### Get events between a start and end time\n\n```java readme-sample-changefeedBetweenDates\nOffsetDateTime startTime = OffsetDateTime.MIN;\nOffsetDateTime endTime = OffsetDateTime.now();\n\nclient.getEvents(startTime, endTime).forEach(event ->\n    System.out.printf(\"Topic: %s, Subject: %s%n\", event.getTopic(), event.getSubject()));\n```\n\n### Resume with a cursor\n\n```java readme-sample-changefeedResumeWithCursor\nBlobChangefeedPagedIterable iterable = client.getEvents();\nIterable<BlobChangefeedPagedResponse> pages = iterable.iterableByPage();\n\nString cursor = null;\nfor (BlobChangefeedPagedResponse page : pages) {\n    page.getValue().forEach(event ->\n        System.out.printf(\"Topic: %s, Subject: %s%n\", event.getTopic(), event.getSubject()));\n    /*\n     * Get the change feed cursor. The cursor is not required to get each page of events,\n     * it is intended to be saved and used to resume iterating at a later date.\n     */\n    cursor = page.getContinuationToken();\n}\n\n/* Resume iterating from the pervious position with the cursor. */\nclient.getEvents(cursor).forEach(event ->\n    System.out.printf(\"Topic: %s, Subject: %s%n\", event.getTopic(), event.getSubject()));\n```\n\n### Poll for events with a cursor\n\n```java readme-sample-changefeedPollForEventsWithCursor\nList<BlobChangefeedEvent> changefeedEvents = new ArrayList<>();\n\n/* Get the start time.  The change feed client will round start time down to the nearest hour if you provide\n   an OffsetDateTime with minutes and seconds. */\nOffsetDateTime startTime = OffsetDateTime.now();\n\n/* Get your polling interval. */\nlong pollingInterval = 1000 * 60 * 5; /* 5 minutes. */\n\n/* Get initial set of events. */\nIterable<BlobChangefeedPagedResponse> pages = client.getEvents(startTime, null).iterableByPage();\n\nString continuationToken = null;\n\nwhile (true) {\n    for (BlobChangefeedPagedResponse page : pages) {\n        changefeedEvents.addAll(page.getValue());\n        /*\n         * Get the change feed cursor. The cursor is not required to get each page of events,\n         * it is intended to be saved and used to resume iterating at a later date.\n         */\n        continuationToken = page.getContinuationToken();\n    }\n\n    /* Wait before processing next batch of events. */\n    try {\n        Thread.sleep(pollingInterval);\n    } catch (InterruptedException e) {\n        e.printStackTrace();\n    }\n\n    /* Resume from last continuation token and fetch latest set of events. */\n    pages = client.getEvents(continuationToken).iterableByPage();\n}\n```\n\n## Troubleshooting\nWhen interacting with blobs using this Java client library, errors returned by the service correspond to the same HTTP\nstatus codes returned for [REST API][error_codes] requests. For example, if you try to retrieve a container or blob that\ndoesn't exist in your Storage Account, a `404` error is returned, indicating `Not Found`.\n\n### Default HTTP Client\nAll client libraries by default use the Netty HTTP client. Adding the above dependency will automatically configure\nthe client library to use the Netty HTTP client. Configuring or changing the HTTP client is detailed in the\n[HTTP clients wiki](https://github.com/Azure/azure-sdk-for-java/wiki/HTTP-clients).\n\n### Default SSL library\nAll client libraries, by default, use the Tomcat-native Boring SSL library to enable native-level performance for SSL\noperations. The Boring SSL library is an uber jar containing native libraries for Linux / macOS / Windows, and provides\nbetter performance compared to the default SSL implementation within the JDK. For more information, including how to\nreduce the dependency size, refer to the [performance tuning][performance_tuning] section of the wiki.\n\n## Next steps\nSeveral Storage blob changefeed Java SDK samples are available to you in the SDK's GitHub repository.\n\n## Next steps Samples\nSamples are explained in detail [here][samples_readme].\n\n## Contributing\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments.\n\n<!-- LINKS -->\n[source]: src\n[samples_readme]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/storage/azure-storage-blob-changefeed/src/samples/README.md\n[docs]: http://azure.github.io/azure-sdk-for-java/\n[rest_docs]: https://docs.microsoft.com/rest/api/storageservices/blob-service-rest-api\n[product_docs]: https://docs.microsoft.com/azure/storage/blobs/storage-blobs-overview\n[sas_token]: https://docs.microsoft.com/azure/storage/common/storage-dotnet-shared-access-signature-part-1\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[storage_account]: https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-portal\n[storage_account_create_cli]: https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-cli\n[storage_account_create_portal]: https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-portal\n[identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity/README.md\n[error_codes]: https://docs.microsoft.com/rest/api/storageservices/blob-service-error-codes\n[samples]: src/samples\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n[performance_tuning]: https://github.com/Azure/azure-sdk-for-java/wiki/Performance-Tuning\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fstorage%2Fazure-storage-blob-changefeed%2FREADME.png)\n",
        "repo_name": "storage/azure-storage-blob-changefeed",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/storage/azure-storage-blob-changefeed",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Storage Blobs Cryptography client library for Java\n\nAzure Blob storage is Microsoft's object storage solution for the cloud. Blob\nstorage is optimized for storing massive amounts of unstructured data.\nUnstructured data is data that does not adhere to a particular data model or\ndefinition, such as text or binary data.\nThis package supports client side encryption for blob storage.\n\n[Source code][source] | [API reference documentation][docs] | [REST API documentation][rest_docs] | [Product documentation][product_docs] | [Samples][samples]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n- [Create Storage Account][storage_account]\n\n### Include the package\n\n#### Include the BOM file\n\nPlease include the azure-sdk-bom to your project to take dependency on GA version of the library. In the following snippet, replace the {bom_version_to_target} placeholder with the version number.\nTo learn more about the BOM, see the [AZURE SDK BOM README](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/boms/azure-sdk-bom/README.md).\n\n```xml\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>com.azure</groupId>\n            <artifactId>azure-sdk-bom</artifactId>\n            <version>{bom_version_to_target}</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n```\nand then include the direct dependency in the dependencies section without the version tag.\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-storage-blob-cryptography</artifactId>\n  </dependency>\n</dependencies>\n```\n\n#### Include direct dependency\nIf you want to take dependency on a particular version of the library that is not present in the BOM,\nadd the direct dependency to your project as follows.\n\n\n[//]: # ({x-version-update-start;com.azure:azure-storage-blob-cryptography;current})\n```xml\n<dependency>\n  <groupId>com.azure</groupId>\n  <artifactId>azure-storage-blob-cryptography</artifactId>\n  <version>12.22.0-beta.1</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Create a Storage Account\nTo create a Storage Account you can use the [Azure Portal][storage_account_create_portal] or [Azure CLI][storage_account_create_cli].\n\n```bash\naz storage account create \\\n    --resource-group <resource-group-name> \\\n    --name <storage-account-name> \\\n    --location <location>\n```\n\n### Authenticate the client\n\nIn order to interact with the Storage service (Blob, Queue, Message, MessageId, File) you'll need to create an instance of the Service Client class.\nTo make this possible you'll need the Account SAS (shared access signature) string of Storage account. Learn more at [SAS Token][sas_token]\n\n#### Get credentials\n\n- **SAS Token**\n\na. Use the Azure CLI snippet below to get the SAS token from the Storage Account.\n\n```bash\naz storage blob generate-sas \\\n    --account-name {Storage Account name} \\\n    --container-name {container name} \\\n    --name {blob name} \\\n    --permissions {permissions to grant} \\\n    --expiry {datetime to expire the SAS token} \\\n    --services {storage services the SAS allows} \\\n    --resource-types {resource types the SAS allows}\n```\n\nExample:\n\n```bash\nCONNECTION_STRING=<connection-string>\n\naz storage blob generate-sas \\\n    --account-name MyStorageAccount \\\n    --container-name MyContainer \\\n    --name MyBlob \\\n    --permissions racdw \\\n    --expiry 2020-06-15\n```\n\nb. Alternatively, get the Account SAS Token from the Azure Portal.\n\n1. Go to your Storage Account\n2. Select `Shared access signature` from the menu on the left\n3. Click on `Generate SAS and connection string` (after setup)\n\n##### **Shared Key Credential**\n\na. Use Account name and Account key. Account name is your Storage Account name.\n\n1. Go to your Storage Account\n2. Select `Access keys` from the menu on the left\n3. Under `key1`/`key2` copy the contents of the `Key` field\n\nor\n\nb. Use the connection string.\n\n1. Go to your Storage Account\n2. Select `Access keys` from the menu on the left\n3. Under `key1`/`key2` copy the contents of the `Connection string` field\n\n## Key concepts\n\nBlob storage is designed for:\n\n- Serving images or documents directly to a browser.\n- Storing files for distributed access.\n- Streaming video and audio.\n- Writing to log files.\n- Storing data for backup and restore, disaster recovery, and archiving.\n- Storing data for analysis by an on-premises or Azure-hosted service.\n\n## Examples\n\nNote: The usage of the `EncryptedBlobClient` is the same as the equivalent `BlobClient`, the only difference being client construction.\nPlease refer to `azure-storage-blob` for common use cases of the `BlobClient`\n\nThe following sections provide several code snippets covering some of the most common Azure Storage Blob cryptography creation tasks, including:\n\n- [Create an `EncryptedBlobClient` from a `BlobClient`](#create-an-encryptedblobclient-from-a-blobclient)\n- [Create an `EncryptedBlobClient`](#create-an-encryptedblobclient)\n- [Use a `LocalKeyEncryptionKey`](#use-a-local-keyencryptionkey)\n- [Use a `KeyVaultKey`](#use-a-keyvaultkey)\n\n### Create an `EncryptedBlobClient` from a `BlobClient`\n\nCreate an `EncryptedBlobClient` using a `BlobClient`. `BlobClient` construction is explained in the `azure-storage-blob` README.\n\n```java readme-sample-getEncryptedBlobClientBlobClient\nEncryptedBlobClient client = new EncryptedBlobClientBuilder()\n    .key(key, keyWrapAlgorithm)\n    .keyResolver(keyResolver)\n    .blobClient(blobClient)\n    .buildEncryptedBlobClient();\n```\n\n### Create an `EncryptedBlobClient`\n\nCreate a `BlobServiceClient` using a connection string.\n\n```java readme-sample-getEncryptedBlobClient\nEncryptedBlobClient client = new EncryptedBlobClientBuilder()\n    .key(key, keyWrapAlgorithm)\n    .keyResolver(keyResolver)\n    .connectionString(connectionString)\n    .containerName(containerName)\n    .blobName(blobName)\n    .buildEncryptedBlobClient();\n```\n\n### Use a local `KeyEncryptionKey`\n\n```java readme-sample-getClientLocalKey\nJsonWebKey localKey = JsonWebKey.fromAes(new SecretKeySpec(keyBytes, secretKeyAlgorithm),\n    Arrays.asList(KeyOperation.WRAP_KEY, KeyOperation.UNWRAP_KEY))\n    .setId(\"my-id\");\nAsyncKeyEncryptionKey akek = new KeyEncryptionKeyClientBuilder()\n    .buildAsyncKeyEncryptionKey(localKey).block();\n\nEncryptedBlobClient client = new EncryptedBlobClientBuilder()\n    .key(akek, keyWrapAlgorithm)\n    .connectionString(connectionString)\n    .containerName(containerName)\n    .blobName(blobName)\n    .buildEncryptedBlobClient();\n```\n\n### Use a `KeyVaultKey`\n\n```java readme-sample-getClientKeyVaultKey\nKeyClient keyClient = new KeyClientBuilder()\n    .vaultUrl(keyVaultUrl)\n    .credential(tokenCredential)\n    .buildClient();\nKeyVaultKey rsaKey = keyClient.createRsaKey(new CreateRsaKeyOptions(keyName)\n    .setExpiresOn(OffsetDateTime.now().plusYears(1))\n    .setKeySize(2048));\nAsyncKeyEncryptionKey akek = new KeyEncryptionKeyClientBuilder()\n    .credential(tokenCredential)\n    .buildAsyncKeyEncryptionKey(rsaKey.getId())\n    .block();\n\nEncryptedBlobClient client = new EncryptedBlobClientBuilder()\n    .key(akek, keyWrapAlgorithm)\n    .connectionString(connectionString)\n    .containerName(containerName)\n    .blobName(blobName)\n    .buildEncryptedBlobClient();\n```\n\n## Troubleshooting\n\nWhen interacting with blobs using this Java client library, errors returned by the service correspond to the same HTTP\nstatus codes returned for [REST API][error_codes] requests. For example, if you try to retrieve a container or blob that\ndoesn't exist in your Storage Account, a `404` error is returned, indicating `Not Found`.\n\n### Default HTTP Client\nAll client libraries by default use the Netty HTTP client. Adding the above dependency will automatically configure\nthe client library to use the Netty HTTP client. Configuring or changing the HTTP client is detailed in the\n[HTTP clients wiki](https://github.com/Azure/azure-sdk-for-java/wiki/HTTP-clients).\n\n### Default SSL library\nAll client libraries, by default, use the Tomcat-native Boring SSL library to enable native-level performance for SSL\noperations. The Boring SSL library is an uber jar containing native libraries for Linux / macOS / Windows, and provides\nbetter performance compared to the default SSL implementation within the JDK. For more information, including how to\nreduce the dependency size, refer to the [performance tuning][performance_tuning] section of the wiki.\n\n## Next steps\n\n## Contributing\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fstorage%2Fazure-storage-blob-cryptography%2FREADME.png)\n\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[source]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/storage/azure-storage-blob-cryptography/src\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[rest_docs]: https://docs.microsoft.com/rest/api/storageservices/blob-service-rest-api\n[product_docs]: https://docs.microsoft.com/azure/storage/blobs/storage-blobs-overview\n[samples]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/storage/azure-storage-blob-cryptography/src/samples\n[azure_subscription]: https://azure.microsoft.com/free/\n[storage_account]: https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-portal\n[storage_account_create_cli]: https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-cli\n[storage_account_create_portal]: https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-portal\n[sas_token]: https://docs.microsoft.com/azure/storage/common/storage-dotnet-shared-access-signature-part-1\n[source]: https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/storage/azure-storage-blob-cryptography/src/main/java\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[rest_docs]: https://docs.microsoft.com/rest/api/storageservices/blob-service-rest-api\n[product_docs]: https://docs.microsoft.com/azure/storage/blobs/storage-blobs-overview\n[samples]: https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/storage/azure-storage-blob-cryptography/src/samples\n[error_codes]: https://docs.microsoft.com/rest/api/storageservices/blob-service-error-codes\n[performance_tuning]: https://github.com/Azure/azure-sdk-for-java/wiki/Performance-Tuning\n",
        "repo_name": "storage/azure-storage-blob-cryptography",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/storage/azure-storage-blob-cryptography",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Storage Blob NIO FileSystemProvider\n\nThis package allows you to interact with Azure Blob Storage through the standard Java NIO Filesystem APIs.\n\n[Source code][source] | [API reference documentation][docs] | [REST API documentation][rest_docs] | [Product documentation][product_docs] | [Samples][samples]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n- [Create Storage Account][storage_account]\n\n### Include the package\n\n[//]: # ({x-version-update-start;com.azure:azure-storage-blob-nio;current})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-storage-blob-nio</artifactId>\n    <version>12.0.0-beta.19</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Create a Storage Account\nTo create a Storage Account you can use the [Azure Portal][storage_account_create_portal] or [Azure CLI][storage_account_create_cli].\n\n```bash\naz storage account create \\\n    --resource-group <resource-group-name> \\\n    --name <storage-account-name> \\\n    --location <location>\n```\n\n### Authenticate the client\n\nThe simplest way to interact with the Storage Service is to create an instance of the [FileSystem][file_system] class using the [FileSystems][file_systems] API. \nTo make this possible you'll need the Account SAS (shared access signature) string of the Storage Account or a Shared Key. Learn more at [SAS Token][sas_token] and [Shared Key][shared_key]\n\n#### Get credentials\n\n##### SAS Token\n\na. Use the Azure CLI snippet below to get the SAS token from the Storage Account.\n\n```bash\naz storage blob generate-sas \\\n    --account-name {Storage Account name} \\\n    --container-name {container name} \\\n    --name {blob name} \\\n    --permissions {permissions to grant} \\\n    --expiry {datetime to expire the SAS token} \\\n    --services {storage services the SAS allows} \\\n    --resource-types {resource types the SAS allows}\n```\n\nExample:\n\n```bash\nCONNECTION_STRING=<connection-string>\n\naz storage blob generate-sas \\\n    --account-name MyStorageAccount \\\n    --container-name MyContainer \\\n    --name MyBlob \\\n    --permissions racdw \\\n    --expiry 2020-06-15\n```\n\nb. Alternatively, get the Account SAS Token from the Azure Portal.\n\n1. Go to your Storage Account\n2. Select `Shared access signature` from the menu on the left\n3. Click on `Generate SAS and connection string` (after setup)\n\n##### **Shared Key Credential**\n\nUse Account name and Account key. Account name is your Storage Account name.\n\n1. Go to your Storage Account\n2. Select `Access keys` from the menu on the left\n3. Under `key1`/`key2` copy the contents of the `Key` field\n\n## Key concepts\n\nNIO on top of Blob Storage is designed for:\n\n- Working with Blob Storage as though it were a local file system\n- Random access reads on large blobs without downloading the entire blob\n- Uploading full files as blobs \n- Creating and navigating a directory structure within an account\n- Reading and setting attributes on blobs\n\n## Design Notes\nIt is important to recognize that Azure Blob Storage is not a true FileSystem, nor is it the goal of this project to \nforce Azure Blob Storage to act like a full-fledged FileSystem. While providing FileSystem APIs on top of Azure Blob \nStorage can offer convenience and ease of access in certain cases, trying to force the Storage service to work in \nscenarios it is not designed for is bound to introduce performance and stability problems. \n\nTo that end, this project will only offer APIs that can be sensibly and cleanly built on top of Azure Blob Storage APIs. \nWe recognize that this will leave some scenarios unsupported indefinitely, but we would rather offer a product that \nworks predictably and reliably in its well defined scenarios than eagerly support all possible scenarios at the expense \nof quality. Even still, supporting some fundamentally required use cases, such as directories, can result in unexpected \nbehavior due to the difference between blob storage and a file system. The javadocs on each type and method should\ntherefore be read and understood for ways in which they may diverge from the standard specified by the JDK. \n\nMoreover, even from within a given application, it should be remembered that using a remote FileSystem introduces higher \nlatency. Because of this, particular care must be taken when managing concurrency. Race conditions are more likely to \nmanifest, network failures occur more frequently than disk failures, and other such distributed application scenarios \nmust be considered when working with this FileSystem. While the AzureFileSystem will ensure it takes appropriate steps \ntowards robustness and reliability, the application developer must also design around these failure scenarios and have \nfallback and retry options available.\n\nThe view of the FileSystem from within an instance of the JVM will be consistent, but the AzureFileSystem makes no \nguarantees on behavior or state should other processes operate on the same data. The AzureFileSystem will assume that it \nhas exclusive access to the resources stored in Azure Blob Storage and will behave without regard for potential \ninterfering applications.\n\nFinally, this implementation has currently chosen to always read/write directly to/from Azure Storage without a local \ncache. Our team has determined that with the tradeoffs of complexity, correctness, safety, performance, debuggability, \netc. one option is not inherently better than the other and that this choice most directly addresses the current known\nuse cases for this project. While this has consequences for every API, of particular note is the limitations on writing\ndata. Data may only be written as an entire file (i.e. random IO or appends are not supported), and data is not \ncommitted or available to be read until the write stream is closed. \n\n## Examples\n\nThe following sections provide several code snippets covering some of the most common Azure Storage Blob NIO tasks, including:\n\n- [URI format](#uri-format)\n- [Create a `FileSystem`](#create-a-filesystem)\n- [Create a directory](#create-a-directory)\n- [Iterate over directory contents](#iterate-over-directory-contents)\n- [Read a file](#read-a-file)\n- [Write to a file](#write-to-a-file)\n- [Copy a file](#copy-a-file)\n- [Delete a file](#delete-a-file)\n- [Read attributes on a file](#read-attributes-on-a-file)\n- [Write attributes to a file](#write-attributes-to-a-file)\n\n### URI format\nURIs are the fundamental way of identifying a resource. This package defines its URI format as follows:\n\nThe scheme for this provider is `\"azb\"`, and the format of the URI to identify an `AzureFileSystem` is \n`\"azb://?endpoint=<endpoint>\"`. The endpoint of the Storage account is used to uniquely identify the filesystem.\n\nThe root component, if it is present, is the first element of the path and is denoted by a `':'` as the last character.\nHence, only one instance of `':'` may appear in a path string, and it may only be the last character of the first \nelement in the path. The root component is used to identify which container a path belongs to.\n\nAll other path elements, including separators, are considered as the blob name. `AzurePath#fromBlobUrl`\nmay be used to convert a typical http url pointing to a blob into an `AzurePath` object pointing to the same resource.\n\n### Create a `FileSystem`\n\nCreate a `FileSystem` using the [`shared key`](#get-credentials) retrieved above.\n\nNote that you can further configure the file system using constants available in `AzureFileSystem`.\nPlease see the docs for `AzureFileSystemProvider` for a full explanation of initializing and configuring a filesystem\n\n```java readme-sample-createAFileSystem\nMap<String, Object> config = new HashMap<>();\nString stores = \"<container_name>,<another_container_name>\"; // A comma separated list of container names\nStorageSharedKeyCredential credential = new StorageSharedKeyCredential(\"<account_name\", \"account_key\");\nconfig.put(AzureFileSystem.AZURE_STORAGE_SHARED_KEY_CREDENTIAL, credential);\nconfig.put(AzureFileSystem.AZURE_STORAGE_FILE_STORES, stores);\nFileSystem myFs = FileSystems.newFileSystem(new URI(\"azb://?endpoint=<account_endpoint\"), config);\n```\n\n### Create a directory\n\nCreate a directory using the `Files` api\n\n```java readme-sample-createADirectory\nPath dirPath = myFs.getPath(\"dir\");\nFiles.createDirectory(dirPath);\n```\n\n### Iterate over directory contents\n\nIterate over a directory using a `DirectoryStream`\n\n```java readme-sample-iterateOverDirectoryContents\nfor (Path p : Files.newDirectoryStream(dirPath)) {\n    System.out.println(p.toString());\n}\n```\n\n### Read a file\n\nRead the contents of a file using an `InputStream`. Skipping, marking, and resetting are all supported.\n\n```java readme-sample-readAFile\nPath filePath = myFs.getPath(\"file\");\ntry (InputStream is = Files.newInputStream(filePath)) {\n    is.read();\n}\n```\n\n### Write to a file\n\nWrite to a file. Only writing whole files is supported. Random IO is not supported. The stream must be closed in order \nto guarantee that the data is available to be read.\n\n```java readme-sample-writeToAFile\ntry (OutputStream os = Files.newOutputStream(filePath)) {\n    os.write(0);\n}\n```\n\n### Copy a file\n\n```java readme-sample-copyAFile\nPath destinationPath = myFs.getPath(\"destinationFile\");\nFiles.copy(filePath, destinationPath, StandardCopyOption.COPY_ATTRIBUTES);\n```\n\n### Delete a file\n\n```java readme-sample-deleteAFile\nFiles.delete(filePath);\n```\n\n### Read attributes on a file\n\nRead attributes of a file through the `AzureBlobFileAttributes`.\n\n```java readme-sample-readAttributesOnAFile\nAzureBlobFileAttributes attr = Files.readAttributes(filePath, AzureBlobFileAttributes.class);\nBlobHttpHeaders headers = attr.blobHttpHeaders();\n```\n\nOr read attributes dynamically by specifying a string of desired attributes. This will not improve performance as a call \nto retrieve any attribute will always retrieve all of them as an atomic bulk operation. You may specify \"*\" instead of a \nlist of specific attributes to have all attributes returned in the map.\n\n```java readme-sample-readAttributesOnAFileString\nMap<String, Object> attributes = Files.readAttributes(filePath, \"azureBlob:metadata,headers\");\n```\n\n### Write attributes to a file\n\nSet attributes of a file through the `AzureBlobFileAttributeView`.\n\n```java readme-sample-writeAttributesToAFile\nAzureBlobFileAttributeView view = Files.getFileAttributeView(filePath, AzureBlobFileAttributeView.class);\nview.setMetadata(Collections.emptyMap());\n```\n\nOr set an attribute dynamically by specifying the attribute as a string.\n\n```java readme-sample-writeAttributesToAFileString\nFiles.setAttribute(filePath, \"azureBlob:blobHttpHeaders\", new BlobHttpHeaders());\n```\n\n## Troubleshooting\n\nWhen using the NIO implementation for Azure Blob Storage, errors returned by the service are manifested as an \n`IOException` which wraps a `BlobStorageException` having the same HTTP status codes returned for \n[REST API][error_codes] requests. For example, if you try to read a file that doesn't exist in your Storage Account, a \n`404` error is returned, indicating `Not Found`.\n\n### Default HTTP Client\nAll client libraries by default use the Netty HTTP client. Adding the above dependency will automatically configure \nthe client library to use the Netty HTTP client. Configuring or changing the HTTP client is detailed in the\n[HTTP clients wiki](https://github.com/Azure/azure-sdk-for-java/wiki/HTTP-clients).\n\n### Default SSL library\nAll client libraries, by default, use the Tomcat-native Boring SSL library to enable native-level performance for SSL \noperations. The Boring SSL library is an uber jar containing native libraries for Linux / macOS / Windows, and provides \nbetter performance compared to the default SSL implementation within the JDK. For more information, including how to \nreduce the dependency size, refer to the [performance tuning][performance_tuning] section of the wiki.\n\n## Continued development\n\nThis project is still actively being developed in an effort to move from preview to GA. Below is a list of features that\nare not currently supported but are under consideration and may be added before GA. We welcome feedback and input on \nwhich of these may be most useful and are open to suggestions for items not included in this list. While all of these \nitems are being considered, they have not been investigated and designed and therefore we cannot confirm their \nfeasibility within Azure Blob Storage. Therefore, it may be the case that further investigation reveals a feature may \nnot be possible or otherwise may conflict with established design goals and therefor will not ultimately be supported. \n\n- Symbolic links\n- Hard links\n- Hidden files\n- Random writes\n- File locks\n- Read only files or file stores\n- Watches on directory events\n- Support for other Azure Storage services such as ADLS Gen 2 (Datalake) and Azure Files (shares)\n- Token authentication\n- Multi-account filesystems\n- Delegating access to single files\n- Normalizing directory structure of data upon loading a FileSystem\n- Local caching\n- Other `OpenOptions` such as append or dsync\n- Flags to toggle certain behaviors such as FileStore (container) creation, etc.\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a [Contributor License Agreement (CLA)][cla] declaring that you have the right to, and actually do, grant us the rights to use your contribution.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n[source]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/storage/azure-storage-blob-nio/src\n[samples_readme]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/storage/azure-storage-blob-nio/src/samples/README.md\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[rest_docs]: https://docs.microsoft.com/rest/api/storageservices/blob-service-rest-api\n[product_docs]: https://docs.microsoft.com/azure/storage/blobs/storage-blobs-overview\n[sas_token]: https://docs.microsoft.com/azure/storage/common/storage-dotnet-shared-access-signature-part-1\n[shared_key]: https://docs.microsoft.com/rest/api/storageservices/authorize-with-shared-key\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[storage_account]: https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-portal\n[storage_account_create_cli]: https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-cli\n[storage_account_create_portal]: https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-portal\n[identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity/README.md\n[error_codes]: https://docs.microsoft.com/rest/api/storageservices/blob-service-error-codes\n[samples]: https://docs.oracle.com/javase/tutorial/essential/io/fileio.html\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n[performance_tuning]: https://github.com/Azure/azure-sdk-for-java/wiki/Performance-Tuning\n[file_system]: https://docs.oracle.com/javase/7/docs/api/java/nio/file/FileSystem.html\n[file_systems]: https://docs.oracle.com/javase/7/docs/api/java/nio/file/FileSystems.html\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fstorage%2Fazure-storage-blob%2FREADME.png)\n",
        "repo_name": "storage/azure-storage-blob-nio",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/storage/azure-storage-blob-nio",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Storage Blob client library for Java\n\nAzure Blob Storage is Microsoft's object storage solution for the cloud. Blob\nStorage is optimized for storing massive amounts of unstructured data.\nUnstructured data is data that does not adhere to a particular data model or\ndefinition, such as text or binary data.\n\n[Source code][source] | [API reference documentation][docs] | [REST API documentation][rest_docs] | [Product documentation][product_docs] | [Samples][samples]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n- [Create Storage Account][storage_account]\n\n### Include the package\n\n#### Include the BOM file\n\nPlease include the azure-sdk-bom to your project to take dependency on GA version of the library. In the following snippet, replace the {bom_version_to_target} placeholder with the version number.\nTo learn more about the BOM, see the [AZURE SDK BOM README](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/boms/azure-sdk-bom/README.md).\n\n```xml\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>com.azure</groupId>\n            <artifactId>azure-sdk-bom</artifactId>\n            <version>{bom_version_to_target}</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n```\nand then include the direct dependency in the dependencies section without the version tag.\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-storage-blob</artifactId>\n  </dependency>\n</dependencies>\n```\n\n#### Include direct dependency\nIf you want to take dependency on a particular version of the library that is not present in the BOM,\nadd the direct dependency to your project as follows.\n\n[//]: # ({x-version-update-start;com.azure:azure-storage-blob;current})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-storage-blob</artifactId>\n    <version>12.23.0-beta.1</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Create a Storage Account\nTo create a Storage Account you can use the [Azure Portal][storage_account_create_portal] or [Azure CLI][storage_account_create_cli].\n\n```bash\naz storage account create \\\n    --resource-group <resource-group-name> \\\n    --name <storage-account-name> \\\n    --location <location>\n```\n\nYour storage account URL, subsequently identified as `<your-storage-account-url>`, would be formatted as follows:\n`http(s)://<storage-account-name>.blob.core.windows.net`\n\n### Authenticate the client\n\nIn order to interact with the Storage Service (Blob, Queue, Message, MessageId, File), you'll need to create an instance of the Service Client class.\nTo make this possible you'll need the Account SAS (shared access signature) string of the Storage Account. Learn more at [SAS Token][sas_token].\n\n#### Get credentials\n\n##### SAS Token\n\na. Use the Azure CLI snippet below to get the SAS token from the Storage Account.\n\n```bash\naz storage blob generate-sas \\\n    --account-name {Storage Account name} \\\n    --container-name {container name} \\\n    --name {blob name} \\\n    --permissions {permissions to grant} \\\n    --expiry {datetime to expire the SAS token} \\\n    --services {storage services the SAS allows} \\\n    --resource-types {resource types the SAS allows}\n```\n\nExample:\n\n```bash\nCONNECTION_STRING=<connection-string>\n\naz storage blob generate-sas \\\n    --account-name MyStorageAccount \\\n    --container-name MyContainer \\\n    --name MyBlob \\\n    --permissions racdw \\\n    --expiry 2020-06-15\n```\n\nb. Alternatively, get the Account SAS token from the Azure Portal.\n\n1. Go to your Storage Account\n2. Select `Shared access signature` from the menu on the left\n3. Click on `Generate SAS and connection string` (after setup)\n\n##### **Shared Key Credential**\n\na. Use Account name and Account key. Account name is your Storage Account name.\n\n1. Go to your Storage Account\n2. Select `Access keys` from the menu on the left\n3. Under `key1`/`key2` copy the contents of the `Key` field\n\nor\n\nb. Use the connection string.\n\n1. Go to your Storage Account\n2. Select `Access keys` from the menu on the left\n3. Under `key1`/`key2` copy the contents of the `Connection string` field\n\n## Key concepts\n\nBlob Storage is designed for:\n\n- Serving images or documents directly to a browser\n- Storing files for distributed access\n- Streaming video and audio\n- Writing to log files\n- Storing data for backup and restore, disaster recovery, and archiving\n- Storing data for analysis by an on-premises or Azure-hosted service\n\n### URL format\nBlobs are addressable using the following URL format:\nThe following URL addresses a blob:\n```\nhttps://myaccount.blob.core.windows.net/mycontainer/myblob\n```\n\n#### Resource URI Syntax\nFor the storage account, the base URI for blob operations includes the name of the account only:\n\n```\nhttps://myaccount.blob.core.windows.net\n```\n\nFor a container, the base URI includes the name of the account and the name of the container:\n\n```\nhttps://myaccount.blob.core.windows.net/mycontainer\n```\n\nFor a blob, the base URI includes the name of the account, the name of the container and the name of the blob:\n\n```\nhttps://myaccount.blob.core.windows.net/mycontainer/myblob\n```\n\nNote that the above URIs may not hold for more advanced scenarios such as custom domain names.\n\n## Examples\n\nThe following sections provide several code snippets covering some of the most common Azure Storage Blob tasks, including:\n\n- [Create a `BlobServiceClient`](#create-a-blobserviceclient)\n- [Create a `BlobContainerClient`](#create-a-blobcontainerclient)\n- [Create a `BlobClient`](#create-a-blobclient)\n- [Create a container](#create-a-container)\n- [Upload data to a blob](#upload-data-to-a-blob)\n- [Upload a blob from a stream](#upload-a-blob-from-a-stream)\n- [Upload a blob from local path](#upload-a-blob-from-local-path)\n- [Upload a blob if one does not already exist](#upload-a-blob-if-one-does-not-already-exist)\n- [Upload a blob and overwrite if one already exists](#upload-a-blob-and-overwrite-if-one-already-exists)\n- [Upload a blob via an `OutputStream`](#upload-a-blob-via-an-outputstream)\n- [Download data from a blob](#download-data-from-a-blob)\n- [Download a blob to a stream](#download-a-blob-to-a-stream)\n- [Download a blob to local path](#download-a-blob-to-local-path)\n- [Read a blob via an `InputStream`](#read-a-blob-via-an-inputstream)\n- [Enumerate blobs](#enumerate-blobs)\n- [Copy a blob](#copy-a-blob)\n- [Generate a SAS token](#generate-a-sas-token)\n- [Authenticate with Azure Identity](#authenticate-with-azure-identity)\n- [Set a proxy when building a client](#set-a-proxy-when-building-a-client)\n\n### Create a `BlobServiceClient`\n\nCreate a `BlobServiceClient` using the [`sasToken`](#get-credentials) generated above.\n\n```java readme-sample-getBlobServiceClient1\nBlobServiceClient blobServiceClient = new BlobServiceClientBuilder()\n    .endpoint(\"<your-storage-account-url>\")\n    .sasToken(\"<your-sasToken>\")\n    .buildClient();\n```\n\nor\n\n```java readme-sample-getBlobServiceClient2\n// Only one \"?\" is needed here. If the SAS token starts with \"?\", please removing one \"?\".\nBlobServiceClient blobServiceClient = new BlobServiceClientBuilder()\n    .endpoint(\"<your-storage-account-url>\" + \"?\" + \"<your-sasToken>\")\n    .buildClient();\n```\n\n### Create a `BlobContainerClient`\n\nCreate a `BlobContainerClient` using a `BlobServiceClient`.\n\n```java readme-sample-getBlobContainerClient1\nBlobContainerClient blobContainerClient = blobServiceClient.getBlobContainerClient(\"mycontainer\");\n```\n\nCreate a `BlobContainerClient` from the builder [`sasToken`](#get-credentials) generated above.\n\n```java readme-sample-getBlobContainerClient2\nBlobContainerClient blobContainerClient = new BlobContainerClientBuilder()\n    .endpoint(\"<your-storage-account-url>\")\n    .sasToken(\"<your-sasToken>\")\n    .containerName(\"mycontainer\")\n    .buildClient();\n```\n\nor\n\n```java readme-sample-getBlobContainerClient3\n// Only one \"?\" is needed here. If the SAS token starts with \"?\", please removing one \"?\".\nBlobContainerClient blobContainerClient = new BlobContainerClientBuilder()\n    .endpoint(\"<your-storage-account-url>\" + \"/\" + \"mycontainer\" + \"?\" + \"<your-sasToken>\")\n    .buildClient();\n```\n\n### Create a `BlobClient`\n\nCreate a `BlobClient` using a `BlobContainerClient`.\n\n```java readme-sample-getBlobClient1\nBlobClient blobClient = blobContainerClient.getBlobClient(\"myblob\");\n```\n\nor\n\nCreate a `BlobClient` from the builder [`sasToken`](#get-credentials) generated above.\n\n```java readme-sample-getBlobClient2\nBlobClient blobClient = new BlobClientBuilder()\n    .endpoint(\"<your-storage-account-url>\")\n    .sasToken(\"<your-sasToken>\")\n    .containerName(\"mycontainer\")\n    .blobName(\"myblob\")\n    .buildClient();\n```\n\nor\n\n```java readme-sample-getBlobClient3\n// Only one \"?\" is needed here. If the SAS token starts with \"?\", please removing one \"?\".\nBlobClient blobClient = new BlobClientBuilder()\n    .endpoint(\"<your-storage-account-url>\" + \"/\" + \"mycontainer\" + \"/\" + \"myblob\" + \"?\" + \"<your-sasToken>\")\n    .buildClient();\n```\n\n### Create a container\n\nCreate a container using a `BlobServiceClient`.\n\n```java readme-sample-createBlobContainerClient1\nblobServiceClient.createBlobContainer(\"mycontainer\");\n```\n\nor\n\nCreate a container using a `BlobContainerClient`.\n\n```java readme-sample-createBlobContainerClient2\nblobContainerClient.create();\n```\n\n### Upload data to a blob\n\nUpload `BinaryData` to a blob using a `BlobClient` generated from a `BlobContainerClient`.\n\n```java readme-sample-uploadBinaryDataToBlob\nBlobClient blobClient = blobContainerClient.getBlobClient(\"myblockblob\");\nString dataSample = \"samples\";\nblobClient.upload(BinaryData.fromString(dataSample));\n```\n\n### Upload a blob from a stream\n\nUpload from an `InputStream` to a blob using a `BlockBlobClient` generated from a `BlobContainerClient`.\n\n```java readme-sample-uploadBlobFromStream\nBlockBlobClient blockBlobClient = blobContainerClient.getBlobClient(\"myblockblob\").getBlockBlobClient();\nString dataSample = \"samples\";\ntry (ByteArrayInputStream dataStream = new ByteArrayInputStream(dataSample.getBytes())) {\n    blockBlobClient.upload(dataStream, dataSample.length());\n} catch (IOException e) {\n    e.printStackTrace();\n}\n```\n\n### Upload a blob from local path\n\nUpload a file to a blob using a `BlobClient` generated from a `BlobContainerClient`.\n\n```java readme-sample-uploadBlobFromFile\nBlobClient blobClient = blobContainerClient.getBlobClient(\"myblockblob\");\nblobClient.uploadFromFile(\"local-file.jpg\");\n```\n\n### Upload a blob if one does not already exist\n\nUpload data to a blob and fail if one already exists.\n\n```java readme-sample-uploadIfNotExists\n/*\n * Rather than use an if block conditioned on an exists call, there are three ways to upload-if-not-exists using\n * one network call instead of two. Equivalent options are present on all upload methods.\n */\n// 1. The minimal upload method defaults to no overwriting\nString dataSample = \"samples\";\ntry (ByteArrayInputStream dataStream = new ByteArrayInputStream(dataSample.getBytes())) {\n    blobClient.upload(dataStream, dataSample.length());\n} catch (IOException e) {\n    e.printStackTrace();\n}\n\n// 2. The overwrite flag can explicitly be set to false to make intention clear\ntry (ByteArrayInputStream dataStream = new ByteArrayInputStream(dataSample.getBytes())) {\n    blobClient.upload(dataStream, dataSample.length(), false /* overwrite */);\n} catch (IOException e) {\n    e.printStackTrace();\n}\n\n// 3. If the max overload is needed, access conditions must be used to prevent overwriting\ntry (ByteArrayInputStream dataStream = new ByteArrayInputStream(dataSample.getBytes())) {\n    BlobParallelUploadOptions options =\n        new BlobParallelUploadOptions(dataStream, dataSample.length());\n    // Setting IfNoneMatch=\"*\" ensures the upload will fail if there is already a blob at the destination.\n    options.setRequestConditions(new BlobRequestConditions().setIfNoneMatch(\"*\"));\n    blobClient.uploadWithResponse(options, null, Context.NONE);\n} catch (IOException e) {\n    e.printStackTrace();\n}\n```\n\n### Upload a blob and overwrite if one already exists\n\nUpload data to a blob and overwrite any existing data at the destination.\n\n```java readme-sample-overwriteBlob\n/*\n * Rather than use an if block conditioned on an exists call, there are three ways to upload-if-exists in one\n * network call instead of two. Equivalent options are present on all upload methods.\n */\nString dataSample = \"samples\";\n\n// 1. The overwrite flag can explicitly be set to true. This will succeed as a create and overwrite.\ntry (ByteArrayInputStream dataStream = new ByteArrayInputStream(dataSample.getBytes())) {\n    blobClient.upload(dataStream, dataSample.length(), true /* overwrite */);\n} catch (IOException e) {\n    e.printStackTrace();\n}\n\n/*\n * 2. If the max overload is needed and no access conditions are passed, the upload will succeed as both a\n * create and overwrite.\n */\ntry (ByteArrayInputStream dataStream = new ByteArrayInputStream(dataSample.getBytes())) {\n    BlobParallelUploadOptions options =\n        new BlobParallelUploadOptions(dataStream, dataSample.length());\n    blobClient.uploadWithResponse(options, null, Context.NONE);\n} catch (IOException e) {\n    e.printStackTrace();\n}\n\n/*\n * 3. If the max overload is needed, access conditions may be used to assert that the upload is an overwrite and\n * not simply a create.\n */\ntry (ByteArrayInputStream dataStream = new ByteArrayInputStream(dataSample.getBytes())) {\n    BlobParallelUploadOptions options =\n        new BlobParallelUploadOptions(dataStream, dataSample.length());\n    // Setting IfMatch=\"*\" ensures the upload will succeed only if there is already a blob at the destination.\n    options.setRequestConditions(new BlobRequestConditions().setIfMatch(\"*\"));\n    blobClient.uploadWithResponse(options, null, Context.NONE);\n} catch (IOException e) {\n    e.printStackTrace();\n}\n```\n\n### Upload a blob via an `OutputStream`\n\nUpload a blob by opening a `BlobOutputStream` and writing to it through standard stream APIs.\n\n```java readme-sample-openBlobOutputStream\n/*\n * Opening a blob input stream allows you to write to a blob through a normal stream interface. It will not be\n * committed until the stream is closed.\n * This option is convenient when the length of the data is unknown.\n * This can only be done for block blobs. If the target blob already exists as another type of blob, it will\n * fail.\n */\ntry (BlobOutputStream blobOS = blobClient.getBlockBlobClient().getBlobOutputStream()) {\n    blobOS.write(new byte[0]);\n} catch (IOException e) {\n    e.printStackTrace();\n}\n```\n\n### Download data from a blob\n\nDownload a blob to an `OutputStream` using a `BlobClient`.\n\n```java readme-sample-downloadDataFromBlob\nBinaryData content = blobClient.downloadContent();\n```\n\n### Download a blob to a stream\n\nDownload a blob to an `OutputStream` using a `BlobClient`.\n\n```java readme-sample-downloadBlobToStream\ntry (ByteArrayOutputStream outputStream = new ByteArrayOutputStream()) {\n    blobClient.downloadStream(outputStream);\n} catch (IOException e) {\n    e.printStackTrace();\n}\n```\n\n### Download a blob to local path\n\nDownload blob to a local file using a `BlobClient`.\n\n```java readme-sample-downloadBlobToFile\nblobClient.downloadToFile(\"downloaded-file.jpg\");\n```\n\n### Read a blob via an `InputStream`\n\nDownload a blob by opening a `BlobInputStream` and reading from it through standard stream APIs.\n\n```java readme-sample-openBlobInputStream\n/*\n * Opening a blob input stream allows you to read from a blob through a normal stream interface. It is also\n * mark-able.\n*/\ntry (BlobInputStream blobIS = blobClient.openInputStream()) {\n    blobIS.read();\n} catch (IOException e) {\n    e.printStackTrace();\n}\n```\n\n### Enumerate blobs\n\nEnumerating all blobs using a `BlobContainerClient`.\n\n```java readme-sample-enumerateBlobs\nfor (BlobItem blobItem : blobContainerClient.listBlobs()) {\n    System.out.println(\"This is the blob name: \" + blobItem.getName());\n}\n```\n\nor \n\nEnumerate all blobs and create new clients pointing to the items.\n\n```java readme-sample-enumerateBlobsCreateClient\nfor (BlobItem blobItem : blobContainerClient.listBlobs()) {\n    BlobClient blobClient;\n    if (blobItem.getSnapshot() != null) {\n        blobClient = blobContainerClient.getBlobClient(blobItem.getName(), blobItem.getSnapshot());\n    } else {\n        blobClient = blobContainerClient.getBlobClient(blobItem.getName());\n    }\n    System.out.println(\"This is the new blob uri: \" + blobClient.getBlobUrl());\n}\n```\n\n### Copy a blob\n\nCopying a blob. Please refer to the javadocs on each of these methods for more information around requirements on the \ncopy source and its authentication.\n\n```java readme-sample-copyBlob\nSyncPoller<BlobCopyInfo, Void> poller = blobClient.beginCopy(\"<url-to-blob>\", Duration.ofSeconds(1));\npoller.waitForCompletion();\n```\n\nor\n\n```java readme-sample-copyBlob2\nblobClient.copyFromUrl(\"url-to-blob\");\n```\n\n### Generate a SAS token\n\nUse an instance of a client to generate a new SAS token.\n\n\n```java readme-sample-generateSas\n/*\n * Generate an account sas. Other samples in this file will demonstrate how to create a client with the sas\n * token.\n */\n// Configure the sas parameters. This is the minimal set.\nOffsetDateTime expiryTime = OffsetDateTime.now().plusDays(1);\nAccountSasPermission accountSasPermission = new AccountSasPermission().setReadPermission(true);\nAccountSasService services = new AccountSasService().setBlobAccess(true);\nAccountSasResourceType resourceTypes = new AccountSasResourceType().setObject(true);\n\n// Generate the account sas.\nAccountSasSignatureValues accountSasValues =\n    new AccountSasSignatureValues(expiryTime, accountSasPermission, services, resourceTypes);\nString sasToken = blobServiceClient.generateAccountSas(accountSasValues);\n\n// Generate a sas using a container client\nBlobContainerSasPermission containerSasPermission = new BlobContainerSasPermission().setCreatePermission(true);\nBlobServiceSasSignatureValues serviceSasValues =\n    new BlobServiceSasSignatureValues(expiryTime, containerSasPermission);\nblobContainerClient.generateSas(serviceSasValues);\n\n// Generate a sas using a blob client\nBlobSasPermission blobSasPermission = new BlobSasPermission().setReadPermission(true);\nserviceSasValues = new BlobServiceSasSignatureValues(expiryTime, blobSasPermission);\nblobClient.generateSas(serviceSasValues);\n```\n\n### Authenticate with Azure Identity\n\nThe [Azure Identity library][identity] provides Azure Active Directory support for authenticating with Azure Storage.\n\n```java readme-sample-authWithIdentity\nBlobServiceClient blobStorageClient = new BlobServiceClientBuilder()\n    .endpoint(\"<your-storage-account-url>\")\n    .credential(new DefaultAzureCredentialBuilder().build())\n    .buildClient();\n```\n\n### Set a proxy when building a client\n\n```java readme-sample-setProxy\nProxyOptions options = new ProxyOptions(ProxyOptions.Type.HTTP, new InetSocketAddress(\"localhost\", 888));\nBlobServiceClient client = new BlobServiceClientBuilder()\n    .httpClient(new NettyAsyncHttpClientBuilder().proxy(options).build())\n    .buildClient();\n```\n\nor\n\nAllow the client builder to determine the `HttpClient` type to be used but construct it with passed configurations.\n\n```java readme-sample-setProxy2\nHttpClientOptions clientOptions = new HttpClientOptions()\n    .setProxyOptions(new ProxyOptions(ProxyOptions.Type.HTTP, new InetSocketAddress(\"localhost\", 888)));\nBlobServiceClient client = new BlobServiceClientBuilder()\n    .clientOptions(clientOptions)\n    .buildClient();\n```\n\n## Troubleshooting\n\nWhen interacting with blobs using this Java client library, errors returned by the service correspond to the same HTTP\nstatus codes returned for [REST API][error_codes] requests. For example, if you try to retrieve a container or blob that\ndoesn't exist in your Storage Account, a `404` error is returned, indicating `Not Found`.\n\n### Default HTTP Client\nAll client libraries by default use the Netty HTTP client. Adding the above dependency will automatically configure\nthe client library to use the Netty HTTP client. Configuring or changing the HTTP client is detailed in the\n[HTTP clients wiki](https://github.com/Azure/azure-sdk-for-java/wiki/HTTP-clients).\n\n### Default SSL library\nAll client libraries, by default, use the Tomcat-native Boring SSL library to enable native-level performance for SSL\noperations. The Boring SSL library is an uber jar containing native libraries for Linux / macOS / Windows, and provides\nbetter performance compared to the default SSL implementation within the JDK. For more information, including how to\nreduce the dependency size, refer to the [performance tuning][performance_tuning] section of the wiki.\n\n## Next steps\n\nSeveral Storage blob Java SDK samples are available to you in the SDK's GitHub repository. These samples provide example code for additional scenarios commonly encountered while working with Key Vault:\n\n## Next steps Samples\nSamples are explained in detail [here][samples_readme].\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a [Contributor License Agreement (CLA)][cla] declaring that you have the right to, and actually do, grant us the rights to use your contribution.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n[source]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/storage/azure-storage-blob/src\n[samples_readme]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/storage/azure-storage-blob/src/samples/README.md\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[rest_docs]: https://docs.microsoft.com/rest/api/storageservices/blob-service-rest-api\n[product_docs]: https://docs.microsoft.com/azure/storage/blobs/storage-blobs-overview\n[sas_token]: https://docs.microsoft.com/azure/storage/common/storage-dotnet-shared-access-signature-part-1\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[storage_account]: https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-portal\n[storage_account_create_cli]: https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-cli\n[storage_account_create_portal]: https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-portal\n[identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity/README.md\n[error_codes]: https://docs.microsoft.com/rest/api/storageservices/blob-service-error-codes\n[samples]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/storage/azure-storage-blob/src/samples\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n[performance_tuning]: https://github.com/Azure/azure-sdk-for-java/wiki/Performance-Tuning\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fstorage%2Fazure-storage-blob%2FREADME.png)\n",
        "repo_name": "storage/azure-storage-blob",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/storage/azure-storage-blob",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Storage Common shared library for Java\nAzure Storage Common is a library that has common dependencies for all Azure Storage packages.\n\n[Source code][source] | [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n- [Create Storage Account][storage_account]\n\n### Include the package\n\n#### Include the BOM file\n\nPlease include the azure-sdk-bom to your project to take dependency on GA version of the library. In the following snippet, replace the {bom_version_to_target} placeholder with the version number.\nTo learn more about the BOM, see the [AZURE SDK BOM README](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/boms/azure-sdk-bom/README.md).\n\n```xml\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>com.azure</groupId>\n            <artifactId>azure-sdk-bom</artifactId>\n            <version>{bom_version_to_target}</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n```\nand then include the direct dependency in the dependencies section without the version tag.\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-storage-common</artifactId>\n  </dependency>\n</dependencies>\n```\n\n#### Include direct dependency\nIf you want to take dependency on a particular version of the library that is not present in the BOM,\nadd the direct dependency to your project as follows.\n\n\n[//]: # ({x-version-update-start;com.azure:azure-storage-common;current})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-storage-common</artifactId>\n    <version>12.22.0-beta.1</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n## Key concepts\n\n\n## Examples\n\n\n## Troubleshooting\n\n### Default HTTP Client\nAll client libraries by default use the Netty HTTP client. Adding the above dependency will automatically configure\nthe client library to use the Netty HTTP client. Configuring or changing the HTTP client is detailed in the\n[HTTP clients wiki](https://github.com/Azure/azure-sdk-for-java/wiki/HTTP-clients).\n\n### Default SSL library\nAll client libraries, by default, use the Tomcat-native Boring SSL library to enable native-level performance for SSL\noperations. The Boring SSL library is an uber jar containing native libraries for Linux / macOS / Windows, and provides\nbetter performance compared to the default SSL implementation within the JDK. For more information, including how to\nreduce the dependency size, refer to the [performance tuning][performance_tuning] section of the wiki.\n\n## Next steps\n\n## Next steps Samples\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a [Contributor License Agreement (CLA)][cla] declaring that you have the right to, and actually do, grant us the rights to use your contribution.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n[source]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/storage/azure-storage-common/src\n[samples_readme]: src/samples/README.md\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[sas_token]: https://docs.microsoft.com/azure/storage/common/storage-dotnet-shared-access-signature-part-1\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[storage_account]: https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-portal\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fstorage%2Fazure-storage-common%2FREADME.png)\n",
        "repo_name": "storage/azure-storage-common",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/storage/azure-storage-common",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure File Data Lake client library for Java\n\nAzure Data Lake Storage is Microsoft's optimized storage solution for for big\ndata analytics workloads. A fundamental part of Data Lake Storage Gen2 is the\naddition of a hierarchical namespace to Blob storage. The hierarchical\nnamespace organizes objects/files into a hierarchy of directories for\nefficient data access.\n\n[Source code][source] | [API reference documentation][docs] | [REST API documentation][rest_docs] | [Product documentation][product_docs] | [Samples][samples]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n- [Create Storage Account][storage_account]\n\n### Include the package\n\n#### Include the BOM file\n\nPlease include the azure-sdk-bom to your project to take dependency on GA version of the library. In the following snippet, replace the {bom_version_to_target} placeholder with the version number.\nTo learn more about the BOM, see the [AZURE SDK BOM README](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/boms/azure-sdk-bom/README.md).\n\n```xml\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>com.azure</groupId>\n            <artifactId>azure-sdk-bom</artifactId>\n            <version>{bom_version_to_target}</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n```\nand then include the direct dependency in the dependencies section without the version tag.\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-storage-file-datalake</artifactId>\n  </dependency>\n</dependencies>\n```\n\n#### Include direct dependency\nIf you want to take dependency on a particular version of the library that is not present in the BOM,\nadd the direct dependency to your project as follows.\n\n[//]: # ({x-version-update-start;com.azure:azure-storage-file-datalake;current})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-storage-file-datalake</artifactId>\n    <version>12.16.0-beta.1</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Create a Storage Account\nTo create a Storage Account you can use the [Azure Portal][storage_account_create_portal] or [Azure CLI][storage_account_create_cli].\nNote: To use data lake, your account must have hierarchical namespace enabled.\n\n```bash\n# Install the extension \u201cStorage-Preview\u201d\naz extension add --name storage-preview\n# Create the storage account\naz storage account create -n my-storage-account-name -g my-resource-group --sku Standard_LRS --kind StorageV2 --hierarchical-namespace true\n```\n\nYour storage account URL, subsequently identified as `<your-storage-account-url>`, would be formatted as follows\n`http(s)://<storage-account-name>.dfs.core.windows.net`\n\n### Authenticate the client\n\nIn order to interact with the Storage Service you'll need to create an instance of the Service Client class.\nTo make this possible you'll need the Account SAS (shared access signature) string of the Storage Account. Learn more at [SAS Token][sas_token]\n\n#### Get credentials\n\n##### SAS Token\n\na. Use the Azure CLI snippet below to get the SAS token from the Storage Account.\n\n```bash\naz storage blob generate-sas \\\n    --account-name {Storage Account name} \\\n    --container-name {container name} \\\n    --name {blob name} \\\n    --permissions {permissions to grant} \\\n    --expiry {datetime to expire the SAS token} \\\n    --services {storage services the SAS allows} \\\n    --resource-types {resource types the SAS allows}\n```\n\nExample:\n\n```bash\nCONNECTION_STRING=<connection-string>\n\naz storage blob generate-sas \\\n    --account-name MyStorageAccount \\\n    --container-name MyContainer \\\n    --name MyBlob \\\n    --permissions racdw \\\n    --expiry 2020-06-15\n```\n\nb. Alternatively, get the Account SAS Token from the Azure Portal.\n\n1. Go to your Storage Account\n2. Select `Shared access signature` from the menu on the left\n3. Click on `Generate SAS and connection string` (after setup)\n\n##### **Shared Key Credential**\n\na. Use Account name and Account key. Account name is your Storage Account name.\n\n1. Go to your Storage Account\n2. Select `Access keys` from the menu on the left\n3. Under `key1`/`key2` copy the contents of the `Key` field\n\nor\n\nb. Use the connection string.\n\n1. Go to your Storage Account\n2. Select `Access keys` from the menu on the left\n3. Under `key1`/`key2` copy the contents of the `Connection string` field\n\n## Key concepts\n\nDataLake Storage Gen2 was designed to:\n- Service multiple petabytes of information while sustaining hundreds of gigabits of throughput\n- Allow you to easily manage massive amounts of data\n\nKey Features of DataLake Storage Gen2 include:\n- Hadoop compatible access\n- A superset of POSIX permissions\n- Cost effective in terms of low-cost storage capacity and transactions\n- Optimized driver for big data analytics\n\nA fundamental part of Data Lake Storage Gen2 is the addition of a hierarchical namespace to Blob storage. The hierarchical namespace organizes objects/files into a hierarchy of directories for efficient data access.\n\nIn the past, cloud-based analytics had to compromise in areas of performance, management, and security. Data Lake Storage Gen2 addresses each of these aspects in the following ways:\n- Performance is optimized because you do not need to copy or transform data as a prerequisite for analysis. The hierarchical namespace greatly improves the performance of directory management operations, which improves overall job performance.\n- Management is easier because you can organize and manipulate files through directories and subdirectories.\n- Security is enforceable because you can define POSIX permissions on directories or individual files.\n- Cost effectiveness is made possible as Data Lake Storage Gen2 is built on top of the low-cost Azure Blob storage. The additional features further lower the total cost of ownership for running big data analytics on Azure.\n\nData Lake Storage Gen2 offers two types of resources:\n\n- The `_filesystem` used via 'DataLakeFileSystemClient'\n- The `_path` used via 'DataLakeFileClient' or 'DataLakeDirectoryClient'\n\n|ADLS Gen2                  | Blob       |\n| --------------------------| ---------- |\n|Filesystem                 | Container  |\n|Path (File or Directory)   | Blob       |\n\nNote: This client library does not support hierarchical namespace (HNS) disabled storage accounts.\n\n### URL format\nPaths are addressable using the following URL format:\nThe following URL addresses a file:\n```\nhttps://${myaccount}.dfs.core.windows.net/${myfilesystem}/${myfile}\n```\n\n#### Resource URI Syntax\nFor the storage account, the base URI for datalake operations includes the name of the account only:\n\n```\nhttps://${myaccount}.dfs.core.windows.net\n```\n\nFor a file system, the base URI includes the name of the account and the name of the file system:\n\n```\nhttps://${myaccount}.dfs.core.windows.net/${myfilesystem}\n```\n\nFor a file/directory, the base URI includes the name of the account, the name of the file system and the name of the path:\n\n```\nhttps://${myaccount}.dfs.core.windows.net/${myfilesystem}/${mypath}\n```\n\nNote that the above URIs may not hold for more advanced scenarios such as custom domain names.\n\n## Examples\n\nThe following sections provide several code snippets covering some of the most common Azure Storage Blob tasks, including:\n\n- [Create a `DataLakeServiceClient`](#create-a-datalakeserviceclient)\n- [Create a `DataLakeFileSystemClient`](#create-a-datalakefilesystemclient)\n- [Create a `DataLakeFileClient`](#create-a-datalakefileclient)\n- [Create a `DataLakeDirectoryClient`](#create-a-datalakedirectoryclient)\n- [Create a file system](#create-a-file-system)\n- [Enumerate paths](#enumerate-paths)\n- [Rename a file](#rename-a-file)\n- [Rename a directory](#rename-a-directory)\n- [Get file properties](#get-file-properties)\n- [Get directory properties](#get-directory-properties)\n- [Authenticate with Azure Identity](#authenticate-with-azure-identity)\n\n### Create a `DataLakeServiceClient`\n\nCreate a `DataLakeServiceClient` using the [`sasToken`](#get-credentials) generated above.\n\n```java readme-sample-getDataLakeServiceClient1\nDataLakeServiceClient dataLakeServiceClient = new DataLakeServiceClientBuilder()\n    .endpoint(\"<your-storage-account-url>\")\n    .sasToken(\"<your-sasToken>\")\n    .buildClient();\n```\n\nor\n\n```java readme-sample-getDataLakeServiceClient2\n// Only one \"?\" is needed here. If the sastoken starts with \"?\", please removing one \"?\".\nDataLakeServiceClient dataLakeServiceClient = new DataLakeServiceClientBuilder()\n    .endpoint(\"<your-storage-account-url>\" + \"?\" + \"<your-sasToken>\")\n    .buildClient();\n```\n\n### Create a `DataLakeFileSystemClient`\n\nCreate a `DataLakeFileSystemClient` using a `DataLakeServiceClient`.\n\n```java readme-sample-getDataLakeFileSystemClient1\nDataLakeFileSystemClient dataLakeFileSystemClient = dataLakeServiceClient.getFileSystemClient(\"myfilesystem\");\n```\n\nor\n\nCreate a `DataLakeFileSystemClient` from the builder [`sasToken`](#get-credentials) generated above.\n\n```java readme-sample-getDataLakeFileSystemClient2\nDataLakeFileSystemClient dataLakeFileSystemClient = new DataLakeFileSystemClientBuilder()\n    .endpoint(\"<your-storage-account-url>\")\n    .sasToken(\"<your-sasToken>\")\n    .fileSystemName(\"myfilesystem\")\n    .buildClient();\n```\n\nor\n\n```java readme-sample-getDataLakeFileSystemClient3\n// Only one \"?\" is needed here. If the sastoken starts with \"?\", please removing one \"?\".\nDataLakeFileSystemClient dataLakeFileSystemClient = new DataLakeFileSystemClientBuilder()\n    .endpoint(\"<your-storage-account-url>\" + \"/\" + \"myfilesystem\" + \"?\" + \"<your-sasToken>\")\n    .buildClient();\n```\n\n### Create a `DataLakeFileClient`\n\nCreate a `DataLakeFileClient` using a `DataLakeFileSystemClient`.\n\n```java readme-sample-getFileClient1\nDataLakeFileClient fileClient = dataLakeFileSystemClient.getFileClient(\"myfile\");\n```\n\nor\n\nCreate a `FileClient` from the builder [`sasToken`](#get-credentials) generated above.\n\n```java readme-sample-getFileClient2\nDataLakeFileClient fileClient = new DataLakePathClientBuilder()\n    .endpoint(\"<your-storage-account-url>\")\n    .sasToken(\"<your-sasToken>\")\n    .fileSystemName(\"myfilesystem\")\n    .pathName(\"myfile\")\n    .buildFileClient();\n```\n\nor\n\n```java readme-sample-getFileClient3\n// Only one \"?\" is needed here. If the sastoken starts with \"?\", please removing one \"?\".\nDataLakeFileClient fileClient = new DataLakePathClientBuilder()\n    .endpoint(\"<your-storage-account-url>\" + \"/\" + \"myfilesystem\" + \"/\" + \"myfile\" + \"?\" + \"<your-sasToken>\")\n    .buildFileClient();\n```\n\n### Create a `DataLakeDirectoryClient`\n\nGet a `DataLakeDirectoryClient` using a `DataLakeFileSystemClient`.\n\n```java readme-sample-getDirClient1\nDataLakeDirectoryClient directoryClient = dataLakeFileSystemClient.getDirectoryClient(\"mydir\");\n```\n\nor\n\nCreate a `DirectoryClient` from the builder [`sasToken`](#get-credentials) generated above.\n\n```java readme-sample-getDirClient2\nDataLakeDirectoryClient directoryClient = new DataLakePathClientBuilder()\n    .endpoint(\"<your-storage-account-url>\")\n    .sasToken(\"<your-sasToken>\")\n    .fileSystemName(\"myfilesystem\")\n    .pathName(\"mydir\")\n    .buildDirectoryClient();\n```\n\nor\n\n```java readme-sample-getDirClient3\n// Only one \"?\" is needed here. If the sastoken starts with \"?\", please removing one \"?\".\nDataLakeDirectoryClient directoryClient = new DataLakePathClientBuilder()\n    .endpoint(\"<your-storage-account-url>\" + \"/\" + \"myfilesystem\" + \"/\" + \"mydir\" + \"?\" + \"<your-sasToken>\")\n    .buildDirectoryClient();\n```\n\n### Create a file system\n\nCreate a file system using a `DataLakeServiceClient`.\n\n```java readme-sample-createDataLakeFileSystemClient1\ndataLakeServiceClient.createFileSystem(\"myfilesystem\");\n```\n\nor\n\nCreate a file system using a `DataLakeFileSystemClient`.\n\n```java readme-sample-createDataLakeFileSystemClient2\ndataLakeFileSystemClient.create();\n```\n\n### Enumerate paths\n\nEnumerating all paths using a `DataLakeFileSystemClient`.\n\n```java readme-sample-enumeratePaths\nfor (PathItem pathItem : dataLakeFileSystemClient.listPaths()) {\n    System.out.println(\"This is the path name: \" + pathItem.getName());\n}\n```\n\n### Rename a file\n\nRename a file using a `DataLakeFileClient`.\n\n```java readme-sample-renameFile\n//Need to authenticate with azure identity and add role assignment \"Storage Blob Data Contributor\" to do the following operation.\nDataLakeFileClient fileClient = dataLakeFileSystemClient.getFileClient(\"myfile\");\nfileClient.create();\nfileClient.rename(\"new-file-system-name\", \"new-file-name\");\n```\n\n### Rename a directory\n\nRename a directory using a `DataLakeDirectoryClient`.\n\n```java readme-sample-renameDirectory\n//Need to authenticate with azure identity and add role assignment \"Storage Blob Data Contributor\" to do the following operation.\nDataLakeDirectoryClient directoryClient = dataLakeFileSystemClient.getDirectoryClient(\"mydir\");\ndirectoryClient.create();\ndirectoryClient.rename(\"new-file-system-name\", \"new-directory-name\");\n```\n\n### Get file properties\n\nGet properties from a file using a `DataLakeFileClient`.\n\n```java readme-sample-getPropertiesFile\nDataLakeFileClient fileClient = dataLakeFileSystemClient.getFileClient(\"myfile\");\nfileClient.create();\nPathProperties properties = fileClient.getProperties();\n```\n\n### Get directory properties\n\nGet properties from a directory using a `DataLakeDirectoryClient`.\n\n```java readme-sample-getPropertiesDirectory\nDataLakeDirectoryClient directoryClient = dataLakeFileSystemClient.getDirectoryClient(\"mydir\");\ndirectoryClient.create();\nPathProperties properties = directoryClient.getProperties();\n```\n\n### Authenticate with Azure Identity\n\nThe [Azure Identity library][identity] provides Azure Active Directory support for authenticating with Azure Storage.\n\n```java readme-sample-authWithIdentity\nDataLakeServiceClient storageClient = new DataLakeServiceClientBuilder()\n    .endpoint(\"<your-storage-account-url>\")\n    .credential(new DefaultAzureCredentialBuilder().build())\n    .buildClient();\n```\n\n## Troubleshooting\n\nWhen interacting with data lake using this Java client library, errors returned by the service correspond to the same HTTP\nstatus codes returned for [REST API][error_codes] requests. For example, if you try to retrieve a file system or path that\ndoesn't exist in your Storage Account, a `404` error is returned, indicating `Not Found`.\n\n### Default HTTP Client\nAll client libraries by default use the Netty HTTP client. Adding the above dependency will automatically configure\nthe client library to use the Netty HTTP client. Configuring or changing the HTTP client is detailed in the\n[HTTP clients wiki](https://github.com/Azure/azure-sdk-for-java/wiki/HTTP-clients).\n\n### Default SSL library\nAll client libraries, by default, use the Tomcat-native Boring SSL library to enable native-level performance for SSL\noperations. The Boring SSL library is an uber jar containing native libraries for Linux / macOS / Windows, and provides\nbetter performance compared to the default SSL implementation within the JDK. For more information, including how to\nreduce the dependency size, refer to the [performance tuning][performance_tuning] section of the wiki.\n\n## Next steps\n\nSeveral Storage datalake  Java SDK samples are available to you in the SDK's GitHub repository.\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a [Contributor License Agreement (CLA)][cla] declaring that you have the right to, and actually do, grant us the rights to use your contribution.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n[source]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/storage/azure-storage-file-datalake/src\n[samples_readme]: src/samples/README.md\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[rest_docs]: https://docs.microsoft.com/rest/api/storageservices/data-lake-storage-gen2\n[product_docs]: https://docs.microsoft.com/azure/storage/blobs/data-lake-storage-introduction\n[sas_token]: https://docs.microsoft.com/azure/storage/common/storage-dotnet-shared-access-signature-part-1\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[storage_account]: https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-portal\n[storage_account_create_cli]: https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-cli\n[storage_account_create_portal]: https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-portal\n[identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity/README.md\n[samples]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/storage/azure-storage-file-datalake/src/samples\n[error_codes]: https://docs.microsoft.com/rest/api/storageservices/data-lake-storage-gen2\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n[performance_tuning]: https://github.com/Azure/azure-sdk-for-java/wiki/Performance-Tuning\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fstorage%2Fazure-storage-file-datalake%2FREADME.png)\n",
        "repo_name": "storage/azure-storage-file-datalake",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/storage/azure-storage-file-datalake",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure File Share client library for Java\n\nThe Server Message Block (SMB) protocol is the preferred file share protocol used on-premises today.\nThe Microsoft Azure File Share service enables customers to leverage the availability and scalability of Azure's Cloud Infrastructure as a Service (IaaS) SMB without having to rewrite SMB client applications.\n\nFiles stored in Azure File Share service shares are accessible via the SMB protocol, and also via REST APIs.\nThe File Share service offers the following four resources: the storage account, shares, directories, and files.\nShares provide a way to organize sets of files and also can be mounted as an SMB file share that is hosted in the cloud.\n\n[Source code][source_code] | [API reference documentation][reference_docs] | [REST API documentation][rest_api_documentation] | [Product documentation][storage_docs] |\n[Samples][samples]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n- [Create Storage Account][storage_account]\n\n### Include the package\n\n#### Include the BOM file\n\nPlease include the azure-sdk-bom to your project to take dependency on GA version of the library. In the following snippet, replace the {bom_version_to_target} placeholder with the version number.\nTo learn more about the BOM, see the [AZURE SDK BOM README](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/boms/azure-sdk-bom/README.md).\n\n```xml\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>com.azure</groupId>\n            <artifactId>azure-sdk-bom</artifactId>\n            <version>{bom_version_to_target}</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n```\nand then include the direct dependency in the dependencies section without the version tag.\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-storage-file-share</artifactId>\n  </dependency>\n</dependencies>\n```\n\n#### Include direct dependency\nIf you want to take dependency on a particular version of the library that is not present in the BOM,\nadd the direct dependency to your project as follows.\n\n\n[//]: # ({x-version-update-start;com.azure:azure-storage-file-share;current})\n```xml\n<dependency>\n  <groupId>com.azure</groupId>\n  <artifactId>azure-storage-file-share</artifactId>\n  <version>12.19.0-beta.1</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Create a Storage Account\nTo create a Storage Account you can use the Azure Portal or [Azure CLI][azure_cli].\n\n```bash\naz storage account create \\\n    --resource-group <resource-group-name> \\\n    --name <storage-account-name> \\\n    --location <location>\n```\n\n### Authenticate the client\n\nIn order to interact with the Storage service (File Share Service, Share, Directory, MessageId, File) you'll need to create an instance of the Service Client class.\nTo make this possible you'll need the Account SAS (shared access signature) string of Storage account. Learn more at [SAS Token][sas_token]\n\n#### Get Credentials\n\n- **SAS Token**\n    * Use the [Azure CLI][azure_cli] snippet below to get the SAS token from the Storage account.\n\n        ```bash\n        az storage file generate-sas\n            --name {account name}\n            --expiry {date/time to expire SAS token}\n            --permission {permission to grant}\n            --connection-string {connection string of the storage account}\n        ```\n\n        ```bash\n        CONNECTION_STRING=<connection-string>\n\n        az storage file generate-sas\n            --name javasdksas\n            --expiry 2019-06-05\n            --permission rpau\n            --connection-string $CONNECTION_STRING\n        ```\n\n    * Alternatively, get the Account SAS Token from the Azure Portal.\n        1. Go to your storage account.\n        1. Click on \"Shared access signature\".\n        1. Click on \"Generate SAS and connection string\".\n\n- **Shared Key Credential**\n    * There are two ways to create a shared key credential, the first is using the storage account name and account key. The second is using the storage connection string.\n        1. Use account name and account key.\n            1. The account name is your storage account name.\n            1. Go to your storage account.\n            1. Select \"Access keys\" tab.\n            1. Copy the \"Key\" value for either Key 1 or Key 2.\n        1. Use the connection string\n            1. Go to your storage account.\n            1. Select \"Access keys\" tab.\n            1. Copy the \"Connection string\" value for either Key 1 or Key 2.\n\n## Key concepts\n\n### URL format\nFile Shares are addressable using the following URL format:\n\n```\nhttps://<storage account>.file.core.windows.net/<share>\n```\n\nThe following URL addresses a queue in the diagram:\n\n```\nhttps://myaccount.file.core.windows.net/images-to-download\n```\n\n#### Resource URI Syntax\nFor the storage account, the base URI for queue operations includes the name of the account only:\n\n```\nhttps://myaccount.file.core.windows.net\n```\n\nFor file, the base URI includes the name of the account and the name of the directory/file:\n\n```\nhttps://myaccount.file.core.windows.net/myshare/mydirectorypath/myfile\n```\n\n### Handling Exceptions\nUses the `shareServiceClient` generated from [shareServiceClient](#share-services) section below.\n\n```java readme-sample-handleException\ntry {\n    shareServiceClient.createShare(\"myShare\");\n} catch (ShareStorageException e) {\n    logger.error(\"Failed to create a share with error code: \" + e.getErrorCode());\n}\n```\n\n### Resource Names\nThe URI to reference a share, directory or file must be unique. Within a given storage account, every share must have a unique name. Every file within a given share or directory must also have a unique name within that share or directory.\n\nIf you attempt to create a share, directory, or file with a name that violates naming rules, the request will fail with status code 400 (Bad Request).\n\n### Share Names\nThe rules for File Share service names are more restrictive than what is prescribed by the SMB protocol for SMB share names, so that the Blob and File services can share similar naming conventions for containers and shares. The naming restrictions for shares are as follows:\n\n1. A share name must be a valid DNS name.\n1. Share names must start with a letter or number, and can contain only letters, numbers, and the dash (-) character.\n1. Every dash (-) character must be immediately preceded and followed by a letter or number; consecutive dashes are not permitted in share names.\n1. All letters in a share name must be lowercase.\n1. Share names must be from 3 through 63 characters long.\n\n### Directory and File Names\nThe Azure File Share service naming rules for directory and file names are as follows:\n\n1. Share Directory and file names are case-preserving and case-insensitive.\n1. Share Directory and file component names must be no more than 255 characters in length.\n1. Share Directory names cannot end with the forward slash character (/). If provided, it will be automatically removed.\n1. Share File names must not end with the forward slash character (/).\n1. Reserved URL characters must be properly escaped.\n1. The following characters are not allowed: `\" \\ / : | < > * ?`\n1. Illegal URL path characters not allowed. Code points like \\uE000, while valid in NTFS filenames, are not valid Unicode characters. In addition, some ASCII or Unicode characters, like control characters (0x00 to 0x1F, \\u0081, etc.), are also not allowed. For rules governing Unicode strings in HTTP/1.1 see [RFC 2616, Section 2.2: Basic Rules][RFC_URL_1] and [RFC 3987][RFL_URL_2].\n1. The following file names are not allowed: LPT1, LPT2, LPT3, LPT4, LPT5, LPT6, LPT7, LPT8, LPT9, COM1, COM2, COM3, COM4, COM5, COM6, COM7, COM8, COM9, PRN, AUX, NUL, CON, CLOCK$, dot character (.), and two dot characters (..).\n\n### Metadata Names\nMetadata for a share or file resource is stored as name-value pairs associated with the resource. Directories do not have metadata. Metadata names must adhere to the naming rules for [C# identifiers][csharp_identifiers].\n\nNote that metadata names preserve the case with which they were created, but are case-insensitive when set or read. If two or more metadata headers with the same name are submitted for a resource, the Azure File service returns status code 400 (Bad Request).\n\n### Share Services\nThe File Share Service REST API provides operations on accounts and manage file service properties. It allows the operations of listing and deleting shares, getting and setting file service properties.\nOnce you have the SASToken, you can construct the `shareServiceClient` with `${accountName}`, `${sasToken}`\n\n```java readme-sample-createShareServiceClient\nString shareServiceURL = String.format(\"https://%s.file.core.windows.net\", ACCOUNT_NAME);\nShareServiceClient shareServiceClient = new ShareServiceClientBuilder().endpoint(shareServiceURL)\n    .sasToken(SAS_TOKEN).buildClient();\n```\n\n### Share\nThe share resource includes metadata and properties for that share. It allows the operations of creating, creating snapshot, deleting shares, getting share properties, setting metadata, getting and setting ACL (Access policy). Getting and setting ACL (Access policy) can only be used by ShareClient with ConnectionString. \n\n#### Share With SASToken\nOnce you have the SASToken, you can construct the share client with `${accountName}`, `${shareName}`, `${sasToken}`\n\n```java readme-sample-createShareClient\nString shareURL = String.format(\"https://%s.file.core.windows.net\", ACCOUNT_NAME);\nShareClient shareClient = new ShareClientBuilder().endpoint(shareURL)\n    .sasToken(SAS_TOKEN).shareName(shareName).buildClient();\n```\n\n#### Share With ConnectionString\nOnce you have the ConnectionString, you can construct the share client with `${accountName}`, `${shareName}`, `${connectionString}`\n\n```java readme-sample-createShareClientWithConnectionString\nString shareURL = String.format(\"https://%s.file.core.windows.net\", ACCOUNT_NAME);\nShareClient shareClient = new ShareClientBuilder().endpoint(shareURL)\n    .connectionString(CONNECTION_STRING).shareName(shareName).buildClient();\n```\n\n#### Share with `TokenCredential`\nOnce you have the TokenCredential, you can construct the share client with `${accountName}`, `${shareName}` and `ShareTokenIntent`. \n`ShareTokenIntent.BACKUP` specifies requests that are intended for backup/admin type operations, meaning that all\nfile/directory ACLs are bypassed and full permissions are granted. User must have required RBAC permission in order to \nuse `ShareTokenIntent.BACKUP`.\n\n```java readme-sample-createShareClientWithTokenCredential\nString shareURL = String.format(\"https://%s.file.core.windows.net\", ACCOUNT_NAME);\n\nShareClient serviceClient = new ShareClientBuilder()\n    .endpoint(shareURL)\n    .credential(tokenCredential)\n    .shareTokenIntent(ShareTokenIntent.BACKUP)\n    .shareName(shareName)\n    .buildClient();\n```\n\n### Directory\n The directory resource includes the properties for that directory. It allows the operations of creating, listing, deleting directories or subdirectories or files, getting properties, setting metadata, listing and force closing the handles.\n Once you have the SASToken, you can construct the file service client with `${accountName}`, `${shareName}`, `${directoryPath}`, `${sasToken}`\n\n```java readme-sample-createDirectoryClient\nString directoryURL = String.format(\"https://%s.file.core.windows.net\", ACCOUNT_NAME);\nShareDirectoryClient directoryClient = new ShareFileClientBuilder().endpoint(directoryURL)\n    .sasToken(SAS_TOKEN).shareName(shareName).resourcePath(directoryPath).buildDirectoryClient();\n```\n\n### File\n The file resource includes the properties for that file. It allows the operations of creating, uploading, copying, downloading, deleting files or range of the files, getting properties, setting metadata, listing and force closing the handles.\n Once you have the SASToken, you can construct the file service client with `${accountName}`, `${shareName}`, `${directoryPath}`, `${fileName}`, `${sasToken}`\n\n```java readme-sample-createFileClient\nString fileURL = String.format(\"https://%s.file.core.windows.net\", ACCOUNT_NAME);\nShareFileClient fileClient = new ShareFileClientBuilder().connectionString(CONNECTION_STRING)\n    .endpoint(fileURL).shareName(shareName).resourcePath(directoryPath + \"/\" + fileName).buildFileClient();\n```\n\n## Examples\n\nThe following sections provide several code snippets covering some of the most common Configuration Service tasks, including:\n- [Create a Share](#create-a-share)\n- [Create a snapshot on Share](#create-a-snapshot-on-share)\n- [Create a Directory](#create-a-directory)\n- [Create a Subdirectory](#create-a-subdirectory)\n- [Create a File](#create-a-file)\n- [List all Shares](#list-all-shares)\n- [List all Subdirectories and Files](#list-all-subdirectories-and-files)\n- [List all ranges on file](#list-all-ranges-on-file)\n- [Delete a Share](#delete-a-share)\n- [Delete a Directory](#delete-a-directory)\n- [Delete a Subdirectory](#delete-a-subdirectory)\n- [Delete a File](#delete-a-file)\n- [Copy a File](#copy-a-file)\n- [Abort copy a File](#abort-copy-a-file)\n- [Upload data to Storage File](#upload-data-to-storage)\n- [Upload data bigger than 4 MB to Storage File](#upload-data-bigger-than-4-mb-to-storage)\n- [Upload file to Storage File](#upload-file-to-storage)\n- [Download data from file range](#download-data-from-file-range)\n- [Download file from Storage File](#download-file-from-storage)\n- [Get a share service properties](#get-a-share-service-properties)\n- [Set a share service properties](#set-a-share-service-properties)\n- [Set a Share metadata](#set-a-share-metadata)\n- [Get a Share access policy](#get-a-share-access-policy)\n- [Set a Share access policy](#set-a-share-access-policy)\n- [Get handles on Directory and File](#get-handles-on-directory-file)\n- [Force close handles on handle id](#force-close-handles-on-handle-id)\n- [Set quota on Share](#set-quota-on-share)\n- [Set file httpHeaders](#set-file-httpheaders)\n\n### Create a share\nCreate a share in the Storage Account. Throws StorageException If the share fails to be created.\nTaking a ShareServiceClient in KeyConcept, [`${shareServiceClient}`](#share-services).\n\n```java readme-sample-createShare\nString shareName = \"testshare\";\nshareServiceClient.createShare(shareName);\n```\n\n### Create a snapshot on Share\nTaking a ShareServiceClient in KeyConcept, [`${shareServiceClient}`](#share-services).\n\n```java readme-sample-createSnapshotOnShare\nString shareName = \"testshare\";\nShareClient shareClient = shareServiceClient.getShareClient(shareName);\nshareClient.createSnapshot();\n```\n\n### Create a directory\nTaking the shareClient initialized above, [`${shareClient}`](#share).\n\n```java readme-sample-createDirectory\nString dirName = \"testdir\";\nshareClient.createDirectory(dirName);\n```\n\n### Create a subdirectory\nTaking the directoryClient in KeyConcept, [`${directoryClient}`](#directory).\n\n```java readme-sample-createSubDirectory\nString subDirName = \"testsubdir\";\ndirectoryClient.createSubdirectory(subDirName);\n```\n\n### Create a File\nTaking the directoryClient in KeyConcept, [`${directoryClient}`](#directory) .\n\n```java readme-sample-createFile\nString fileName = \"testfile\";\nlong maxSize = 1024;\ndirectoryClient.createFile(fileName, maxSize);\n```\n\n### List all Shares\nTaking the shareServiceClient in KeyConcept, [`${shareServiceClient}`](#share-services)\n\n```java readme-sample-getShareList\nshareServiceClient.listShares();\n```\n\n### List all subdirectories and files\nTaking the directoryClient in KeyConcept, [`${directoryClient}`](#directory)\n\n```java readme-sample-getSubDirectoryAndFileList\ndirectoryClient.listFilesAndDirectories();\n```\n\n### List all ranges on file\nTaking the fileClient in KeyConcept, [`${fileClient}`](#file)\n\n```java readme-sample-getRangeList\nfileClient.listRanges();\n```\n\n### Delete a share\nTaking the shareClient in KeyConcept, [`${shareClient}`](#share-with-sastoken)\n\n```java readme-sample-deleteShare\nshareClient.delete();\n```\n\n### Delete a directory\nTaking the shareClient in KeyConcept, [`${shareClient}`](#share-with-sastoken) .\n\n```java readme-sample-deleteDirectory\nString dirName = \"testdir\";\nshareClient.deleteDirectory(dirName);\n```\n\n### Delete a subdirectory\nTaking the directoryClient in KeyConcept, [`${directoryClient}`](#directory) .\n\n```java readme-sample-deleteSubDirectory\nString subDirName = \"testsubdir\";\ndirectoryClient.deleteSubdirectory(subDirName);\n```\n\n### Delete a file\nTaking the directoryClient in KeyConcept, [`${directoryClient}`](#directory) .\n\n```java readme-sample-deleteFile\nString fileName = \"testfile\";\ndirectoryClient.deleteFile(fileName);\n```\n\n### Copy a file\nTaking the fileClient in KeyConcept, [`${fileClient}`](#file) with string of source URL.\n\n```java readme-sample-copyFile\nString sourceURL = \"https://myaccount.file.core.windows.net/myshare/myfile\";\nDuration pollInterval = Duration.ofSeconds(2);\nSyncPoller<ShareFileCopyInfo, Void> poller = fileClient.beginCopy(sourceURL, (Map<String, String>) null, pollInterval);\n```\n\n### Abort copy a file\nTaking the fileClient in KeyConcept, [`${fileClient}`](#file) with the copy info response returned above `${copyId}=[copyInfoResponse](#copy-a-file)`.\n\n```java readme-sample-abortCopyFile\nfileClient.abortCopy(\"copyId\");\n```\n\n### Upload data to storage\nTaking the fileClient in KeyConcept, [`${fileClient}`](#file) with data of \"default\" .\n\n```java readme-sample-uploadDataToStorage\nString uploadText = \"default\";\nInputStream data = new ByteArrayInputStream(uploadText.getBytes(StandardCharsets.UTF_8));\nfileClient.upload(data, uploadText.length());\n```\n\n### Upload data bigger than 4 MB to storage\nTaking the fileClient in KeyConcept, [`${fileClient}`](#file) with data of \"default\" .\n\n```java readme-sample-uploadDataToStorageBiggerThan4MB\nbyte[] data = \"Hello, data sample!\".getBytes(StandardCharsets.UTF_8);\n\nlong chunkSize = 4 * 1024 * 1024L;\nif (data.length > chunkSize) {\n    for (int offset = 0; offset < data.length; offset += chunkSize) {\n        try {\n            // the last chunk size is smaller than the others\n            chunkSize = Math.min(data.length - offset, chunkSize);\n\n            // select the chunk in the byte array\n            byte[] subArray = Arrays.copyOfRange(data, offset, (int) (offset + chunkSize));\n\n            // upload the chunk\n            fileClient.uploadWithResponse(new ByteArrayInputStream(subArray), chunkSize, (long) offset, null, Context.NONE);\n        } catch (RuntimeException e) {\n            logger.error(\"Failed to upload the file\", e);\n            if (Boolean.TRUE.equals(fileClient.exists())) {\n                fileClient.delete();\n            }\n            throw e;\n        }\n    }\n} else {\n    fileClient.upload(new ByteArrayInputStream(data), data.length);\n}\n```\n\n### Upload file to storage\nTaking the fileClient in KeyConcept, [`${fileClient}`](#file) .\n\n```java readme-sample-uploadFileToStorage\nString filePath = \"${myLocalFilePath}\";\nfileClient.uploadFromFile(filePath);\n```\n\n### Download data from file range\nTaking the fileClient in KeyConcept, [`${fileClient}`](#file) with the range from 1024 to 2048.\n\n```java readme-sample-downloadDataFromFileRange\nShareFileRange fileRange = new ShareFileRange(0L, 2048L);\nOutputStream stream = new ByteArrayOutputStream();\nfileClient.downloadWithResponse(stream, fileRange, false, null, Context.NONE);\n```\n\n### Download file from storage\nTaking the fileClient in KeyConcept, [`${fileClient}`](#file) and download to the file of filePath.\n\n```java readme-sample-downloadFileFromFileRange\nString filePath = \"${myLocalFilePath}\";\nfileClient.downloadToFile(filePath);\n```\n\n### Get a share service properties\nTaking a ShareServiceClient in KeyConcept, [`${shareServiceClient}`](#share-services) .\n\n```java readme-sample-getShareServiceProperties\nshareServiceClient.getProperties();\n```\n\n### Set a share service properties\nTaking a ShareServiceClient in KeyConcept, [`${shareServiceClient}`](#share-services) .\n\n```java readme-sample-setShareServiceProperties\nShareServiceProperties properties = shareServiceClient.getProperties();\n\nproperties.getMinuteMetrics().setEnabled(true).setIncludeApis(true);\nproperties.getHourMetrics().setEnabled(true).setIncludeApis(true);\n\nshareServiceClient.setProperties(properties);\n```\n\n### Set a share metadata\nTaking the shareClient in KeyConcept, [`${shareClient}`](#share-with-sastoken) .\n\n```java readme-sample-setShareMetadata\nMap<String, String> metadata = Collections.singletonMap(\"directory\", \"metadata\");\nshareClient.setMetadata(metadata);\n```\n\n### Get a share access policy\nTaking the shareClient in KeyConcept, [`${shareClient}`](#share-with-connectionstring) .\n\n```java readme-sample-getAccessPolicy\nshareClient.getAccessPolicy();\n```\n\n### Set a share access policy\nTaking the shareClient in KeyConcept, [`${shareClient}`](#share-with-connectionstring) .\n\n```java readme-sample-setAccessPolicy\nShareAccessPolicy accessPolicy = new ShareAccessPolicy().setPermissions(\"r\")\n    .setStartsOn(OffsetDateTime.now(ZoneOffset.UTC))\n    .setExpiresOn(OffsetDateTime.now(ZoneOffset.UTC).plusDays(10));\nShareSignedIdentifier permission = new ShareSignedIdentifier().setId(\"mypolicy\").setAccessPolicy(accessPolicy);\nshareClient.setAccessPolicy(Collections.singletonList(permission));\n```\n\n### Get handles on directory file\nTaking the directoryClient in KeyConcept, [`${directoryClient}`](#directory)\n\n```java readme-sample-getHandleList\nPagedIterable<HandleItem> handleItems = directoryClient.listHandles(null, true, Duration.ofSeconds(30), Context.NONE);\n```\n\n### Force close handles on handle id\nTaking the directoryClient in KeyConcept, [`${directoryClient}`](#directory) and the handle id returned above `${handleId}=[handleItems](#get-handles-on-directory-file)`\n\n```java readme-sample-forceCloseHandleWithResponse\nPagedIterable<HandleItem> handleItems = directoryClient.listHandles(null, true, Duration.ofSeconds(30), Context.NONE);\nString handleId = handleItems.iterator().next().getHandleId();\ndirectoryClient.forceCloseHandleWithResponse(handleId, Duration.ofSeconds(30), Context.NONE);\n```\n\n### Set quota on share\nTaking the shareClient in KeyConcept, [`${shareClient}`](#share-with-sastoken) .\n\n```java readme-sample-setQuotaOnShare\nint quotaOnGB = 1;\nshareClient.setPropertiesWithResponse(new ShareSetPropertiesOptions().setQuotaInGb(quotaOnGB), null, Context.NONE);\n```\n\n### Set file httpheaders\nTaking the fileClient in KeyConcept, [`${fileClient}`](#file) .\n\n```java readme-sample-setFileHttpHeaders\nShareFileHttpHeaders httpHeaders = new ShareFileHttpHeaders().setContentType(\"text/plain\");\nfileClient.setProperties(1024, httpHeaders, null, null);\n```\n\n## Troubleshooting\n\n## General\n\nWhen you interact with file using this Java client library, errors returned by the service correspond to the same HTTP status codes returned for [REST API][storage_file_rest] requests. For example, if you try to retrieve a share that doesn't exist in your Storage Account, a `404` error is returned, indicating `Not Found`.\n\n### Default HTTP Client\nAll client libraries by default use the Netty HTTP client. Adding the above dependency will automatically configure\nthe client library to use the Netty HTTP client. Configuring or changing the HTTP client is detailed in the\n[HTTP clients wiki](https://github.com/Azure/azure-sdk-for-java/wiki/HTTP-clients).\n\n### Default SSL library\nAll client libraries, by default, use the Tomcat-native Boring SSL library to enable native-level performance for SSL\noperations. The Boring SSL library is an uber jar containing native libraries for Linux / macOS / Windows, and provides\nbetter performance compared to the default SSL implementation within the JDK. For more information, including how to\nreduce the dependency size, refer to the [performance tuning][performance_tuning] section of the wiki.\n\n## Next steps\n\n## Contributing\nThis project welcomes contributions and suggestions.  Most contributions require you to agree to a\nContributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us\nthe rights to use your contribution. For details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide\na CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions\nprovided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or\ncontact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create new Pull Request\n\n<!-- LINKS -->\n[source_code]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/storage/azure-storage-file-share/src/\n[reference_docs]: https://azure.github.io/azure-sdk-for-java/\n[rest_api_documentation]: https://docs.microsoft.com/rest/api/storageservices/file-service-rest-api\n[storage_docs]: https://docs.microsoft.com/azure/storage/files/storage-files-introduction\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[maven]: https://maven.apache.org/\n[azure_subscription]: https://azure.microsoft.com/free/\n[storage_account]: https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-portal\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[sas_token]: https://docs.microsoft.com/azure/storage/common/storage-dotnet-shared-access-signature-part-1\n[RFC_URL_1]: https://www.ietf.org/rfc/rfc2616.txt\n[RFL_URL_2]: https://www.ietf.org/rfc/rfc3987.txt\n[csharp_identifiers]: https://docs.microsoft.com/dotnet/csharp/language-reference/\n[storage_file_rest]: https://docs.microsoft.com/rest/api/storageservices/file-service-error-codes\n[samples]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/storage/azure-storage-file-share/src/samples\n[performance_tuning]: https://github.com/Azure/azure-sdk-for-java/wiki/Performance-Tuning\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fstorage%2Fazure-storage-file-share%2FREADME.png)\n",
        "repo_name": "storage/azure-storage-file-share",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/storage/azure-storage-file-share",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Storage internal avro client library for Java\n\nThis package supports an internal use only implementation of an Avro Parser.  \n\n## Getting started\nMeant for internal use only.\n\n## Key concepts\nMeant for internal use only.\n\n## Examples\nMeant for internal use only.\n\n## Troubleshooting\nMeant for internal use only.\n\n## Next steps\nMeant for internal use only.\n\n## Next steps Samples\nMeant for internal use only.\n\n## Contributing\nMeant for internal use only.\n",
        "repo_name": "storage/azure-storage-internal-avro",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/storage/azure-storage-internal-avro",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Storage Performance test client library for Java\n\nRepresents Performance tests for Azure Storage SDK for Java.\n\n## Getting started\n\n### Prerequisites\n\n- Java Development Kit (JDK) with version 8 or above\n\n### Adding the package to your product\n\n\n## Key concepts\n\n\n## Examples\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fstorage%2Fperf-test-core%2FREADME.png)\n",
        "repo_name": "storage/azure-storage-perf",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/storage/azure-storage-perf",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Storage Queue client library for Java\nAzure Queue storage is a service for storing large numbers of messages that can be accessed from anywhere in the world via authenticated calls using HTTP or HTTPS.\nA single queue message can be up to 64 KB in size, and a queue can contain millions of messages, up to the total capacity limit of a storage account.\n\n[Source code][source_code] | [API reference documentation][api_documentation] | [Product documentation][storage_docs] |\n[Samples][samples]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n- [Create Storage Account][storage_account]\n\n### Include the package\n\n#### Include the BOM file\n\nPlease include the azure-sdk-bom to your project to take dependency on GA version of the library. In the following snippet, replace the {bom_version_to_target} placeholder with the version number.\nTo learn more about the BOM, see the [AZURE SDK BOM README](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/boms/azure-sdk-bom/README.md).\n\n```xml\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>com.azure</groupId>\n            <artifactId>azure-sdk-bom</artifactId>\n            <version>{bom_version_to_target}</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n```\nand then include the direct dependency in the dependencies section without the version tag.\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-storage-queue</artifactId>\n  </dependency>\n</dependencies>\n```\n\n#### Include direct dependency\nIf you want to take dependency on a particular version of the library that is not present in the BOM,\nadd the direct dependency to your project as follows.\n\n[//]: # ({x-version-update-start;com.azure:azure-storage-queue;current})\n```xml\n<dependency>\n  <groupId>com.azure</groupId>\n  <artifactId>azure-storage-queue</artifactId>\n  <version>12.18.0-beta.1</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Create a Storage Account\nTo create a Storage Account you can use the Azure Portal or [Azure CLI][azure_cli].\n\n```bash\naz storage account create \\\n    --resource-group <resource-group-name> \\\n    --name <storage-account-name> \\\n    --location <location>\n```\n\n### Authenticate the client\n\nIn order to interact with the Storage service (Blob, Queue, Message, MessageId, File) you'll need to create an instance of the Service Client class.\nTo make this possible you'll need the Account SAS (shared access signature) string of Storage account. Learn more at [SAS Token][sas_token]\n\n#### Get Credentials\n\n- **SAS Token**\n\na. Use the [Azure CLI][azure_cli] snippet below to get the SAS token from the Storage account.\n\n```Powershell\naz storage queue generate-sas\n    --name {queue name}\n    --expiry {date/time to expire SAS token}\n    --permission {permission to grant}\n    --connection-string {connection string of the storage account}\n```\n\n```Powershell\nCONNECTION_STRING=<connection-string>\naz storage queue generate-sas\n    --name javasdksas\n    --expiry 2019-06-05\n    --permission rpau\n    --connection-string $CONNECTION_STRING\n```\n\nb. Alternatively, get the Account SAS Token from the Azure Portal.\n\n```\nGo to your storage account -> Shared access signature -> Click on Generate SAS and connection string (after setup)\n```\n\n- **Shared Key Credential**\n\na. Use account name and account key. Account name is your storage account name.\n\n```\n// Here is where we get the key\nGo to your storage account -> Access keys -> Key 1/ Key 2 -> Key\n```\n\nb. Use the connection string\n\n```\n// Here is where we get the key\nGo to your storage account -> Access Keys -> Keys 1/ Key 2 -> Connection string\n```\n\n## Key concepts\n### URL format\nQueues are addressable using the following URL format:\nThe following URL addresses a queue in the diagram:\nhttps://myaccount.queue.core.windows.net/images-to-download\n\n#### Resource URI Syntax\nFor the storage account, the base URI for queue operations includes the name of the account only:\n\n```$xslt\nhttps://myaccount.queue.core.windows.net\n```\n\nFor a queue, the base URI includes the name of the account and the name of the queue:\n\n```$xslt\nhttps://myaccount.queue.core.windows.net/myqueue\n```\n\n### Handling Exceptions\nUses the `queueServiceClient` generated from [Queue Service Client](#queue-service-client) section below.\n\n```java readme-sample-handleException\nString queueServiceURL = String.format(\"https://%s.queue.core.windows.net\", ACCOUNT_NAME);\nQueueServiceClient queueServiceClient = new QueueServiceClientBuilder().endpoint(queueServiceURL)\n    .sasToken(SAS_TOKEN).buildClient();\ntry {\n    queueServiceClient.createQueue(\"myQueue\");\n} catch (QueueStorageException e) {\n    logger.error(\"Failed to create a queue with error code: \" + e.getErrorCode());\n}\n```\n\n### Queue Names\nEvery queue within an account must have a unique name. The queue name must be a valid DNS name, and cannot be changed once created. Queue names must confirm to the following rules:\n1. A queue name must start with a letter or number, and can only contain letters, numbers, and the dash (-) character.\n1. The first and last letters in the queue name must be alphanumeric. The dash (-) character cannot be the first or last character. Consecutive dash characters are not permitted in the queue name.\n1. All letters in a queue name must be lowercase.\n1. A queue name must be from 3 through 63 characters long.\n\n### Queue Services\nThe queue service do operations on the queues in the storage account and manage the queue properties.\n\n### Queue Service Client\n\nThe client performs the interactions with the Queue service, create or delete a queue, getting and setting Queue properties, list queues in account, and get queue statistics. An asynchronous, `QueueServiceAsyncClient`, and synchronous, `QueueClient`, client exists in the SDK allowing for selection of a client based on an application's use case.\nOnce you have the value of the SASToken you can create the queue service client with `${accountName}`, `${SASToken}`.\n\n```java readme-sample-createQueue1\nString queueServiceURL = String.format(\"https://%s.queue.core.windows.net\", ACCOUNT_NAME);\nQueueServiceClient queueServiceClient = new QueueServiceClientBuilder().endpoint(queueServiceURL)\n    .sasToken(SAS_TOKEN).buildClient();\n\nQueueClient newQueueClient = queueServiceClient.createQueue(\"myQueue\");\n```\n\nor\n\n```java readme-sample-createQueue2\nString queueServiceAsyncURL = String.format(\"https://%s.queue.core.windows.net/\", ACCOUNT_NAME);\nQueueServiceAsyncClient queueServiceAsyncClient = new QueueServiceClientBuilder().endpoint(queueServiceAsyncURL)\n    .sasToken(SAS_TOKEN).buildAsyncClient();\nqueueServiceAsyncClient.createQueue(\"newAsyncQueue\").subscribe(result -> {\n    // do something when new queue created\n}, error -> {\n    // do something if something wrong happened\n}, () -> {\n    // completed, do something\n});\n```\n\n### Queue\nAzure Queue storage is a service for storing large numbers of messages that can be accessed from anywhere in the world via authenticated calls using HTTP or HTTPS.\nA single queue message can be up to 64 KB in size, and a queue can contain millions of messages, up to the total capacity limit of a storage account.\n\n### QueueClient\nOnce you have the value of the SASToken you can create the queue service client with `${accountName}`, `${queueName}`, `${SASToken}`.\n\n```java readme-sample-createWithResponse1\nString queueURL = String.format(\"https://%s.queue.core.windows.net/%s\", ACCOUNT_NAME, queueName);\nQueueClient queueClient = new QueueClientBuilder().endpoint(queueURL).sasToken(SAS_TOKEN).buildClient();\n\n// metadata is map of key-value pair\nqueueClient.createWithResponse(metadata, Duration.ofSeconds(30), Context.NONE);\n```\n\nor\n\n```java readme-sample-createWithResponse2\n// Only one \"?\" is needed here. If the sastoken starts with \"?\", please removing one \"?\".\nString queueAsyncURL = String.format(\"https://%s.queue.core.windows.net/%s?%s\", ACCOUNT_NAME, queueAsyncName,\n    SAS_TOKEN);\nQueueAsyncClient queueAsyncClient = new QueueClientBuilder().endpoint(queueAsyncURL).buildAsyncClient();\nqueueAsyncClient.createWithResponse(metadata).subscribe(result -> {\n    // do something when new queue created\n}, error -> {\n    // do something if something wrong happened\n}, () -> {\n    // completed, do something\n});\n```\n\n## Examples\n\nThe following sections provide several code snippets covering some of the most common Configuration Service tasks, including:\n- [Build a client](#build-a-client)\n- [Create a Queue](#create-a-queue)\n- [Delete a queue](#delete-a-queue)\n- [List the queues in account](#list-queues-in-account)\n- [Get properties in Queue account](#get-properties-in-queue-account)\n- [Set properties in Queue account](#set-properties-in-queue-account)\n- [Get statistics of queue](#get-queue-service-statistics)\n- [Enqueue message into a queue](#enqueue-message-into-a-queue)\n- [Update a message in a queue](#update-a-message-in-a-queue)\n- [Peek at messages in a queue](#peek-at-messages-in-a-queue)\n- [Receive messages from a queue](#receive-messages-from-a-queue)\n- [Delete message from a queue](#delete-message-from-a-queue)\n- [Get a Queue properties](#get-a-queue-properties)\n- [Set/Update a Queue metadata](#set-a-queue-metadata)\n\n### Build a client\nWe have two ways of building QueueService or Queue Client. Here will take queueServiceClient as an example. Same things apply to queueClient.\n\nFirst, build client from full URL/endpoint (e.g. with queueName, with SASToken, etc.)\n\n```java readme-sample-getQueueServiceClient1\n// Only one \"?\" is needed here. If the sastoken starts with \"?\", please removing one \"?\".\nString queueServiceURL = String.format(\"https://%s.queue.core.windows.net/?%s\", ACCOUNT_NAME, SAS_TOKEN);\nQueueServiceClient queueServiceClient = new QueueServiceClientBuilder().endpoint(queueServiceURL).buildClient();\n```\n\nOr\n\nWe can build the queueServiceClient from the builder using `${SASToken}` as credential.\n\n```java readme-sample-getQueueServiceClient2\nString queueServiceURL = String.format(\"https://%s.queue.core.windows.net\", ACCOUNT_NAME);\nQueueServiceClient queueServiceClient = new QueueServiceClientBuilder().endpoint(queueServiceURL)\n        .sasToken(SAS_TOKEN).buildClient();\n```\n\n### Create a queue\n\nCreate a queue in the Storage Account using `${SASToken}` as credential.\nThrows StorageException If the queue fails to be created.\n\n```java readme-sample-createQueue1\nString queueServiceURL = String.format(\"https://%s.queue.core.windows.net\", ACCOUNT_NAME);\nQueueServiceClient queueServiceClient = new QueueServiceClientBuilder().endpoint(queueServiceURL)\n    .sasToken(SAS_TOKEN).buildClient();\n\nQueueClient newQueueClient = queueServiceClient.createQueue(\"myQueue\");\n```\n\n### Delete a queue\n\nDelete a queue in the Storage Account using `${SASToken}` as credential.\nThrows StorageException If the queue fails to be deleted.\n\n```java readme-sample-deleteQueue\nString queueServiceURL = String.format(\"https://%s.queue.core.windows.net\", ACCOUNT_NAME);\nQueueServiceClient queueServiceClient = new QueueServiceClientBuilder().endpoint(queueServiceURL)\n        .sasToken(SAS_TOKEN).buildClient();\n\nqueueServiceClient.deleteQueue(\"myqueue\");\n```\n\n### List queues in account\n\nList all the queues in account using `${SASToken}` as credential.\n\n```java readme-sample-getQueueListInAccount\nString queueServiceURL = String.format(\"https://%s.queue.core.windows.net\", ACCOUNT_NAME);\nQueueServiceClient queueServiceClient = new QueueServiceClientBuilder().endpoint(queueServiceURL)\n        .sasToken(SAS_TOKEN).buildClient();\n// @param marker: Starting point to list the queues\n// @param options: Filter for queue selection\n// @param timeout: An optional timeout applied to the operation.\n// @param context: Additional context that is passed through the Http pipeline during the service call.\nqueueServiceClient.listQueues(options, timeout, context).stream().forEach(queueItem ->\n    System.out.printf(\"Queue %s exists in the account.\", queueItem.getName()));\n```\n\n### Get properties in queue account\n\nGet queue properties in account, including properties for Storage Analytics and CORS (Cross-Origin Resource Sharing) rules.\n\nUse `${SASToken}` as credential.\n\n```java readme-sample-getPropertiesInQueueAccount\nString queueServiceURL = String.format(\"https://%s.queue.core.windows.net\", ACCOUNT_NAME);\nQueueServiceClient queueServiceClient = new QueueServiceClientBuilder().endpoint(queueServiceURL)\n        .sasToken(SAS_TOKEN).buildClient();\n\nQueueServiceProperties properties = queueServiceClient.getProperties();\n```\n\n### Set properties in queue account\n\nSet queue properties in account, including properties for Storage Analytics and CORS (Cross-Origin Resource Sharing) rules.\n\nUse `${SASToken}` as credential.\n\n```java readme-sample-setPropertiesInQueueAccount\nString queueServiceURL = String.format(\"https://%s.queue.core.windows.net\", ACCOUNT_NAME);\nQueueServiceClient queueServiceClient = new QueueServiceClientBuilder().endpoint(queueServiceURL)\n        .sasToken(SAS_TOKEN).buildClient();\n\nQueueServiceProperties properties = queueServiceClient.getProperties();\nproperties.setCors(Collections.emptyList());\nqueueServiceClient.setProperties(properties);\n```\n\n### Get queue service statistics\nThe `Get Queue Service Stats` operation retrieves statistics related to replication for the Queue service.\n\nUse `${SASToken}` as credential.\nIt is only available on the secondary location endpoint when read-access geo-redundant replication is enabled for the storage account.\n\n```java readme-sample-getQueueServiceStatistics\nString queueServiceURL = String.format(\"https://%s.queue.core.windows.net\", ACCOUNT_NAME);\nQueueServiceClient queueServiceClient = new QueueServiceClientBuilder().endpoint(queueServiceURL)\n        .sasToken(SAS_TOKEN).buildClient();\n\nQueueServiceStatistics queueStats = queueServiceClient.getStatistics();\n```\n\n### Enqueue message into a queue\nThe operation adds a new message to the back of the message queue. A visibility timeout can also be specified to make the message invisible until the visibility timeout expires.\n\nUse `${SASToken}` as credential.\nA message must be in a format that can be included in an XML request with UTF-8 encoding. The encoded message can be up to 64 KB in size for versions 2011-08-18 and newer, or 8 KB in size for previous versions.\n\n```java readme-sample-enqueueMessage\nString queueURL = String.format(\"https://%s.queue.core.windows.net\", ACCOUNT_NAME);\nQueueClient queueClient = new QueueClientBuilder().endpoint(queueURL).sasToken(SAS_TOKEN).queueName(\"myqueue\")\n        .buildClient();\n\nqueueClient.sendMessage(\"myMessage\");\n```\n\n### Update a message in a queue\nThe operation updates a message in the message queue. Use `${SASToken}` as credential.\n\n```java readme-sample-updateMessage\nString queueURL = String.format(\"https://%s.queue.core.windows.net\", ACCOUNT_NAME);\nQueueClient queueClient = new QueueClientBuilder().endpoint(queueURL).sasToken(SAS_TOKEN).queueName(\"myqueue\")\n        .buildClient();\n// @param messageId: Id of the message\n// @param popReceipt: Unique identifier that must match the message for it to be updated\n// @param visibilityTimeout: How long the message will be invisible in the queue in seconds\nqueueClient.updateMessage(messageId, popReceipt, \"new message\", visibilityTimeout);\n```\n\n### Peek at messages in a queue\nThe operation peeks one or more messages from the front of the queue. Use `${SASToken}` as credential.\n\n```java readme-sample-peekAtMessage\nString queueURL = String.format(\"https://%s.queue.core.windows.net\", ACCOUNT_NAME);\nQueueClient queueClient = new QueueClientBuilder().endpoint(queueURL).sasToken(SAS_TOKEN).queueName(\"myqueue\")\n        .buildClient();\n// @param key: The key with which the specified value should be associated.\n// @param value: The value to be associated with the specified key.\nqueueClient.peekMessages(5, Duration.ofSeconds(1), new Context(key, value)).forEach(message ->\n    System.out.println(message.getBody().toString()));\n```\n\n\n### Receive messages from a queue\nThe operation retrieves one or more messages from the front of the queue. Use `${SASToken}` as credential.\n\n```java readme-sample-receiveMessageFromQueue\nString queueURL = String.format(\"https://%s.queue.core.windows.net\", ACCOUNT_NAME);\nQueueClient queueClient = new QueueClientBuilder().endpoint(queueURL).sasToken(SAS_TOKEN).queueName(\"myqueue\")\n        .buildClient();\n// Try to receive 10 messages: Maximum number of messages to get\nqueueClient.receiveMessages(10).forEach(message ->\n    System.out.println(message.getBody().toString()));\n```\n\n\n### Delete message from a queue\nThe operation deletes a message from the queue. Use `${SASToken}` as credential.\n\n```java readme-sample-deleteMessageFromQueue\nString queueURL = String.format(\"https://%s.queue.core.windows.net\", ACCOUNT_NAME);\nQueueClient queueClient = new QueueClientBuilder().endpoint(queueURL).sasToken(SAS_TOKEN).queueName(\"myqueue\")\n        .buildClient();\n\nqueueClient.deleteMessage(messageId, popReceipt);\n```\n\n### Get a queue properties\nThe operation retrieves user-defined metadata and queue properties on the specified queue. Metadata is associated with the queue as name-values pairs.\n\nUse `${SASToken}` as credential.\n\n```java readme-sample-getQueueProperties\nString queueURL = String.format(\"https://%s.queue.core.windows.net\", ACCOUNT_NAME);\nQueueClient queueClient = new QueueClientBuilder().endpoint(queueURL).sasToken(SAS_TOKEN).queueName(\"myqueue\")\n        .buildClient();\n\nQueueProperties properties = queueClient.getProperties();\n```\n\n### Set a queue metadata\nThe operation sets user-defined metadata on the specified queue. Metadata is associated with the queue as name-value pairs.\n\nUse `${SASToken}` as credential.\n\n```java readme-sample-setQueueMetadata\nString queueURL = String.format(\"https://%s.queue.core.windows.net\", ACCOUNT_NAME);\nQueueClient queueClient = new QueueClientBuilder().endpoint(queueURL).sasToken(SAS_TOKEN).queueName(\"myqueue\")\n        .buildClient();\n\nMap<String, String> metadata = new HashMap<>();\nmetadata.put(\"key1\", \"val1\");\nmetadata.put(\"key2\", \"val2\");\nqueueClient.setMetadata(metadata);\n```\n\n## Troubleshooting\n\n## General\n\nWhen you interact with queue using this Java client library, errors returned by the service correspond to the same HTTP status codes returned for [REST API][storage_rest] requests. For example, if you try to retrieve a queue that doesn't exist in your Storage Account, a `404` error is returned, indicating `Not Found`.\n\n### Default HTTP Client\nAll client libraries by default use the Netty HTTP client. Adding the above dependency will automatically configure\nthe client library to use the Netty HTTP client. Configuring or changing the HTTP client is detailed in the\n[HTTP clients wiki](https://github.com/Azure/azure-sdk-for-java/wiki/HTTP-clients).\n\n### Default SSL library\nAll client libraries, by default, use the Tomcat-native Boring SSL library to enable native-level performance for SSL\noperations. The Boring SSL library is an uber jar containing native libraries for Linux / macOS / Windows, and provides\nbetter performance compared to the default SSL implementation within the JDK. For more information, including how to\nreduce the dependency size, refer to the [performance tuning][performance_tuning] section of the wiki.\n\n## Next steps\nSeveral Storage Queue Java SDK samples are available to you in the SDK's GitHub repository. These samples provide example code for additional scenarios commonly encountered while working with Key Vault:\n\n## Next steps Samples\nSamples are explained in detail [here][samples_readme].\n\n## Contributing\nThis project welcomes contributions and suggestions.  Most contributions require you to agree to a\nContributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us\nthe rights to use your contribution. For details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide\na CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions\nprovided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or\ncontact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create new Pull Request\n\n<!-- LINKS -->\n[source_code]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/storage/azure-storage-queue/src\n[samples_readme]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/storage/azure-storage-queue/src/samples/README.md\n[api_documentation]: https://docs.microsoft.com/rest/api/storageservices/queue-service-rest-api\n[storage_docs]: https://docs.microsoft.com/azure/storage/queues/storage-queues-introduction\n[jdk]: https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable\n[maven]: https://maven.apache.org/\n[azure_subscription]: https://azure.microsoft.com/free/\n[storage_account]: https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-portal\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[sas_token]: https://docs.microsoft.com/azure/storage/common/storage-dotnet-shared-access-signature-part-1\n[storage_rest]: https://docs.microsoft.com/rest/api/storageservices/queue-service-error-codes\n[samples]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/storage/azure-storage-queue/src/samples\n[performance_tuning]: https://github.com/Azure/azure-sdk-for-java/wiki/Performance-Tuning\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fstorage%2Fazure-storage-queue%2FREADME.png)\n",
        "repo_name": "storage/azure-storage-queue",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/storage/azure-storage-queue",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Microsoft Azure Storage SDK v11 for Java\n\nThis project provides a client library in Java that makes it easy to consume Microsoft Azure Storage services. For documentation please see the [Storage API doc page](https://docs.microsoft.com/java/api/overview/azure/storage/client?view=azure-java-preview) and the [quick start document](https://docs.microsoft.com/azure/storage/blobs/storage-quickstart-blobs-java-v10).\nPlease note that this version of the library is a compete overhaul of the current Azure Storage Java Client Library, and is based on the new Storage SDK architecture, also referred to as V11.\n\n| SDK Name      | Version       | Description | Maven/API Reference Links |\n| ------------- | ------------- | ----------- | ----- |\n| [Blob Storage SDK v11 for Java](https://github.com/Azure/azure-storage-java/)  | v11.0.1  | The next generation async Storage SDK | [Maven](https://mvnrepository.com/artifact/com.microsoft.azure/azure-storage-blob) - [Reference](https://docs.microsoft.com/java/api/overview/azure/storage/client?view=azure-java-stable) |\n| [Queue Storage SDK v10 for Java](https://github.com/azure/azure-storage-java/tree/New-Storage-SDK-V10-Preview) | V10.0.0-Preview | The next generation async Storage SDK | [Maven](https://mvnrepository.com/artifact/com.microsoft.azure/azure-storage-queue)\n| [Storage SDK v8 for Java](https://github.com/azure/azure-storage-java/tree/legacy-master)  | v8  | Legacy Storage SDK (sync only) | [Maven](https://mvnrepository.com/artifact/com.microsoft.azure/azure-storage) |\n| [Storage SDK for Android](https://github.com/Azure/azure-storage-android) | v2 | Storage SDK for Android | [Maven](https://mvnrepository.com/artifact/com.microsoft.azure.android/azure-storage-android) - [Reference](https://azure.github.io/azure-storage-android/)\n| [Azure Management Libraries for Java](https://github.com/Azure/azure-libraries-for-java) | v1 | Management libraries including Storage Resource Provider APIs | [Maven](https://mvnrepository.com/artifact/com.microsoft.azure/azure-mgmt-resources) - [Reference](https://azure.github.io/azure-storage-android/)|\n\n## Migrating to V11\n\nMigrating to the newest version of the SDK will require a substantial rewrite of any component that interfaces with Azure Storage. Despite this, we feel the benefits offered by this new design are worth it, and we are happy to help with the transition! Please refer to the wiki for information on the core ideas behind the new design and best practices on how to use it effectively.\n\n# Features\n  * Blob\n      * Create/Read/Update/Delete containers\n      * Create/Read/Update/Delete blobs\n      * Advanced Blob Operations wrapped in the TransferManager class\n  * Features new to V11\n      * Asynchronous I/O for all operations using the [ReactiveX](https://github.com/ReactiveX/RxJava) framework\n      * HttpPipeline which enables a high degree of per-request configurability and guaranteed thread safety\n          * Please see the wiki for more information\n      * 1-to-1 correlation with the Storage REST API for clarity and simplicity\n\n# Getting Started\n\n## Download\n### Option 1: Via Maven\n\nTo get the binaries of this library as distributed by Microsoft, ready for use within your project, you can use Maven.\n\n[//]: # ({x-version-update-start;com.microsoft.azure:azure-storage-blob;current})\n```xml\n<dependency>\n\t<groupId>com.microsoft.azure</groupId>\n\t<artifactId>azure-storage-blob</artifactId>\n\t<version>11.0.1</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Option 2: Source Via Git\n\nTo get the source code of the SDK via git just type:\n\n    git clone git://github.com/Azure/azure-storage-java.git\n    cd ./azure-storage-java\n    mvn compile\n\n### Option 3: Source Zip\n\nTo download a copy of the source code, click \"Download ZIP\" on the right side of the page or click [here](https://github.com/Azure/azure-storage-java/archive/master.zip). Unzip and navigate to the microsoft-azure-storage folder.\n\n## Minimum Requirements\n\n* Java 1.8+\n* [Jackson-Core](https://github.com/FasterXML/jackson-core) is used for JSON and XML parsing. \n* [ReactiveX](https://github.com/ReactiveX/RxJava) is used for reactive, asynchronous IO operations.\n* [Autorest-runtime](https://github.com/Azure/autorest-clientruntime-for-java) is used to interact with auto-generated code.\n* (Optional) Maven\n\nThe three dependencies, [Jackson-Core](https://github.com/FasterXML/jackson-core), [ReactiveX](https://github.com/ReactiveX/RxJava), and [Autorest-runtime](https://github.com/Azure/autorest-clientruntime-for-java), will be added automatically if Maven is used. Otherwise, please download the jars and add them to your build path. \n\n## Usage\n\nTo use this SDK to call Microsoft Azure storage services, you need to first [create an account](https://azure.microsoft.com/free).\n\nSamples are provided in azure-storage/src/test/groovy/com/microsoft/azure/storage/Samples.java. The unit tests in the same directory can also be helpful.\n\n## Code Sample\n\nThe following is a quick example on how to upload some data to an azure blob and download it back. You may also run the samples in azure-storage/src/test/groovy/com/microsoft/azure/storage/Samples.java. For additional information on using the client libraries to access Azure services see the How To guides for [blobs](https://docs.microsoft.com/azure/storage/blobs/storage-quickstart-blobs-java) and the [general documentation](https://azure.microsoft.com/develop/java/).\n\n```java\npublic class Sample {\n    /**\n     * This example shows how to start using the Azure Storage Blob SDK for Java.\n     */\n    public void basicExample() throws InvalidKeyException, MalformedURLException {\n        // From the Azure portal, get your Storage account's name and account key.\n        String accountName = getAccountName();\n        String accountKey = getAccountKey();\n\n        // Use your Storage account's name and key to create a credential object; this is used to access your account.\n        SharedKeyCredentials credential = new SharedKeyCredentials(accountName, accountKey);\n\n        /*\n        Create a request pipeline that is used to process HTTP(S) requests and responses. It requires your accont\n        credentials. In more advanced scenarios, you can configure telemetry, retry policies, logging, and other\n        options. Also you can configure multiple pipelines for different scenarios.\n         */\n        HttpPipeline pipeline = StorageURL.createPipeline(credential, new PipelineOptions());\n\n        /*\n        From the Azure portal, get your Storage account blob service URL endpoint.\n        The URL typically looks like this:\n         */\n        URL u = new URL(String.format(Locale.ROOT, \"https://%s.blob.core.windows.net\", accountName));\n\n        // Create a ServiceURL objet that wraps the service URL and a request pipeline.\n        ServiceURL serviceURL = new ServiceURL(u, pipeline);\n\n        // Now you can use the ServiceURL to perform various container and blob operations.\n\n        // This example shows several common operations just to get you started.\n\n        /*\n        Create a URL that references a to-be-created container in your Azure Storage account. This returns a\n        ContainerURL object that wraps the container's URL and a request pipeline (inherited from serviceURL).\n        Note that container names require lowercase.\n         */\n        ContainerURL containerURL = serviceURL.createContainerURL(\"myjavacontainerbasic\");\n\n        /*\n        Create a URL that references a to-be-created blob in your Azure Storage account's container.\n        This returns a BlockBlobURL object that wraps the blob's URl and a request pipeline\n        (inherited from containerURL). Note that blob names can be mixed case.\n         */\n        BlockBlobURL blobURL = containerURL.createBlockBlobURL(\"HelloWorld.txt\");\n\n        String data = \"Hello world!\";\n\n        // Create the container on the service (with no metadata and no public access)\n        containerURL.create(null, null)\n                .flatMap(containersCreateResponse ->\n                        /*\n                         Create the blob with string (plain text) content.\n                         NOTE: It is imperative that the provided length matches the actual length exactly.\n                         */\n                        blobURL.upload(Flowable.just(ByteBuffer.wrap(data.getBytes())), data.length(),\n                                null, null, null))\n                .flatMap(blobsDownloadResponse ->\n                        // Download the blob's content.\n                        blobURL.download(null, null, false))\n                .flatMap(blobsDownloadResponse ->\n                        // Verify that the blob data round-tripped correctly.\n                        FlowableUtil.collectBytesInBuffer(blobsDownloadResponse.body(null))\n                                .doOnSuccess(byteBuffer -> {\n                                    if (byteBuffer.compareTo(ByteBuffer.wrap(data.getBytes())) != 0) {\n                                        throw new Exception(\"The downloaded data does not match the uploaded data.\");\n                                    }\n                                }))\n                .flatMap(byteBuffer ->\n                        // Delete the blob we created earlier.\n                        blobURL.delete(null, null))\n                .flatMap(blobsDeleteResponse ->\n                        // Delete the container we created earlier.\n                        containerURL.delete(null))\n                /*\n                This will synchronize all the above operations. This is strongly discouraged for use in production as\n                it eliminates the benefits of asynchronous IO. We use it here to enable the sample to complete and\n                demonstrate its effectiveness.\n                 */\n                .blockingGet();\n    }\n}\n```\n\n## Building\n\nIf building from sources, run mvn compile to build. No build steps are necessary if including the package as a maven dependency.\n\n## Running tests\n\nPlease refer to CONTRIBUTING.md for information on how to run the tests.\n\n# Need Help?\n\nBe sure to check out the Microsoft Azure [Developer Forums on MSDN](https://social.msdn.microsoft.com/Forums/windowsazure/home?forum=windowsazuredata) or the [Developer Forums on Stack Overflow](https://stackoverflow.com/questions/tagged/azure+windows-azure-storage) if you have trouble with the provided code.\n\n# Contribute Code or Provide Feedback\n\nIf you would like to become an active contributor to this project please follow the instructions provided in [Azure Projects Contribution Guidelines](https://azure.github.io/guidelines/).\n\nIf you encounter any bugs with the library please file an issue in the [Issues](https://github.com/Azure/azure-storage-java/issues) section of the project.\n\nWhen sending pull requests, please send non-breaking PRs to the dev branch and breaking changes to the dev_breaking branch. Do not make PRs against master.\n\n# Learn More\n\n* [Quick Start with the Azure Storage SDK v11 for Java](https://docs.microsoft.com/azure/storage/blobs/storage-quickstart-blobs-java-v10)\n* [Java API Reference](https://docs.microsoft.com/java/api/overview/azure/storage/client?view=azure-java-preview)\n* [Azure Storage Service](https://azure.microsoft.com/documentation/services/storage/)\n* [Azure Storage Team Blog](https://docs.microsoft.com/archive/blogs/windowsazurestorage/)\n* [Javadoc](https://azure.github.io/azure-storage-java/)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fstorage%2Fmicrosoft-azure-storage-blob%2FREADME.png)\n",
        "repo_name": "storage/microsoft-azure-storage-blob",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/storage/microsoft-azure-storage-blob",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Microsoft Azure Storage Performance test client library for Java\n\nRepresents Performance tests for Microsoft Azure Storage SDK for Java.\n\n## Getting started\n\n### Prerequisites\n\n- Java Development Kit (JDK) with version 7 or above\n\n### Adding the package to your product\n\n\n## Key concepts\n\n\n## Examples\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fmicrosoft%2Fstorage%2Fperf-test%2FREADME.png)\n",
        "repo_name": "storage/microsoft-azure-storage-perf",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/storage/microsoft-azure-storage-perf",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager StorageCache client library for Java\n\nAzure Resource Manager StorageCache client library for Java.\n\nThis package contains Microsoft Azure SDK for StorageCache Management SDK. A Storage Cache provides scalable caching service for NAS clients, serving data from either NFSv3 or Blob at-rest storage (referred to as \"Storage Targets\"). These operations allow you to manage Caches. Package tag package-preview-2023-03. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-storagecache;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-storagecache</artifactId>\n    <version>1.0.0-beta.8</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nStorageCacheManager manager = StorageCacheManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/storagecache/azure-resourcemanager-storagecache/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "storagecache/azure-resourcemanager-storagecache",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/storagecache/azure-resourcemanager-storagecache",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager StorageImportExport client library for Java\n\nAzure Resource Manager StorageImportExport client library for Java.\n\nThis package contains Microsoft Azure SDK for StorageImportExport Management SDK. The Storage Import/Export Resource Provider API. Package tag package-preview-2021-01. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-storageimportexport;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-storageimportexport</artifactId>\n    <version>1.0.0-beta.2</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nStorageImportExportManager manager = StorageImportExportManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/storageimportexport/azure-resourcemanager-storageimportexport/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "storageimportexport/azure-resourcemanager-storageimportexport",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/storageimportexport/azure-resourcemanager-storageimportexport",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager StorageMover client library for Java\n\nAzure Resource Manager StorageMover client library for Java.\n\nThis package contains Microsoft Azure SDK for StorageMover Management SDK. The Azure Storage Mover REST API. Package tag package-2023-03. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-storagemover;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-storagemover</artifactId>\n    <version>1.0.0</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nStorageMoverManager manager = StorageMoverManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/storagemover/azure-resourcemanager-storagemover/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "storagemover/azure-resourcemanager-storagemover",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/storagemover/azure-resourcemanager-storagemover",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager StoragePool client library for Java\n\nAzure Resource Manager StoragePool client library for Java.\n\nThis package contains Microsoft Azure SDK for StoragePool Management SDK.  Package tag package-2021-08-01. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-storagepool;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-storagepool</artifactId>\n    <version>1.0.0-beta.2</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nStoragePoolManager manager = StoragePoolManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/storagepool/azure-resourcemanager-storagepool/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "storagepool/azure-resourcemanager-storagepool",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/storagepool/azure-resourcemanager-storagepool",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager StreamAnalytics client library for Java\n\nAzure Resource Manager StreamAnalytics client library for Java.\n\nThis package contains Microsoft Azure SDK for StreamAnalytics Management SDK. Stream Analytics Client. Package tag package-pure-2020-03. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-streamanalytics;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-streamanalytics</artifactId>\n    <version>1.0.0-beta.2</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nStreamAnalyticsManager manager = StreamAnalyticsManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/streamanalytics/azure-resourcemanager-streamanalytics/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n",
        "repo_name": "streamanalytics/azure-resourcemanager-streamanalytics",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/streamanalytics/azure-resourcemanager-streamanalytics",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager Subscription client library for Java\n\nAzure Resource Manager Subscription client library for Java.\n\nThis package contains Microsoft Azure SDK for Subscription Management SDK. The subscription client. Package tag package-2020-09. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-subscription;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-subscription</artifactId>\n    <version>1.0.0-beta.2</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nSubscriptionManager manager = SubscriptionManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/subscription/azure-resourcemanager-subscription/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "subscription/azure-resourcemanager-subscription",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/subscription/azure-resourcemanager-subscription",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager support client library for Java\n\nAzure Resource Manager support client library for Java.\n\nThis package contains Microsoft Azure SDK for support Management SDK. Microsoft Azure Support Resource Provider. Package tag package-2020-04. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-support;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-support</artifactId>\n    <version>1.0.0-beta.2</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nSupportManager manager = SupportManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/support/azure-resourcemanager-support/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "support/azure-resourcemanager-support",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/support/azure-resourcemanager-support",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Synapse Access Control client library for Java\nAzure Synapse is a limitless analytics service that brings together enterprise data warehousing and Big Data analytics. It gives you the freedom to query data on your terms, using either serverless on-demand or provisioned resources\u2014at scale. Azure Synapse brings these two worlds together with a unified experience to ingest, prepare, manage, and serve data for immediate BI and machine learning needs.\n\nThe Azure Synapse Analytics access control client library enables programmatically managing role assignments.\n\n[Source code][source_code] | [API reference documentation][api_documentation] | [Product documentation][azsynapse_docs]\n\n## Getting started\n### Adding the package to your project\nMaven dependency for the Azure Synapse Access Control client library. Add it to your project's POM file.\n\n[//]: # ({x-version-update-start;com.azure:azure-analytics-synapse-accesscontrol;current})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-analytics-synapse-accesscontrol</artifactId>\n    <version>1.0.0-beta.4</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Prerequisites\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- An [Azure subscription][azure_sub].\n- An existing Azure Synapse workspace. If you need to create an Azure Synapse workspace, you can use the Azure Portal or [Azure CLI][azure_cli].\n    ```Bash\n    az synapse workspace create \\\n        --name <your-workspace-name> \\\n        --resource-group <your-resource-group-name> \\\n        --storage-account <your-storage-account-name> \\\n        --file-system <your-storage-file-system-name> \\\n        --sql-admin-login-user <your-sql-admin-user-name> \\\n        --sql-admin-login-password <your-sql-admin-user-password> \\\n        --location <your-workspace-location>\n    ```\n\n### Authenticate the client\nIn order to interact with the Azure Synapse service, you'll need to create an instance of the `RoleDefinitionsClient` or `RoleAssignmentsClient` class. You would need a **workspace endpoint** and **client secret credentials (client id, client secret, tenant id)** to instantiate a client object using the default `DefaultAzureCredential` examples shown in this document.\n\nThe `DefaultAzureCredential` way of authentication by providing client secret credentials is being used in this getting started section but you can find more ways to authenticate with [azure-identity][azure_identity].\n\n#### Create/Get credentials\nTo create/get client secret credentials you can use the [Azure Portal][azure_create_application_in_portal], [Azure CLI][azure_synapse_cli_full] or [Azure Cloud Shell](https://shell.azure.com/bash)\n\nHere is an [Azure Cloud Shell](https://shell.azure.com/bash) snippet below to\n\n * Create a service principal and configure its access to Azure resources:\n\n    ```Bash\n    az ad sp create-for-rbac -n <your-application-name> --skip-assignment\n    ```\n\n    Output:\n\n    ```json\n    {\n        \"appId\": \"generated-app-ID\",\n        \"displayName\": \"dummy-app-name\",\n        \"name\": \"http://dummy-app-name\",\n        \"password\": \"random-password\",\n        \"tenant\": \"tenant-ID\"\n    }\n    ```\n\n## Key concepts\n\n(coming soon)\n\n## Examples\n\n(coming soon)\n\n## Troubleshooting\n\n### Default HTTP client\nAll client libraries by default use the Netty HTTP client. Adding the above dependency will automatically configure the client library to use the Netty HTTP client. Configuring or changing the HTTP client is detailed in the [HTTP clients wiki](https://github.com/Azure/azure-sdk-for-java/wiki/HTTP-clients).\n\n### Default SSL library\nAll client libraries, by default, use the Tomcat-native Boring SSL library to enable native-level performance for SSL operations. The Boring SSL library is an Uber JAR containing native libraries for Linux / macOS / Windows, and provides better performance compared to the default SSL implementation within the JDK. For more information, including how to reduce the dependency size, refer to the [performance tuning][performance_tuning] section of the wiki.\n\n## Next steps\nSeveral Synapse Java SDK samples are available to you in the SDK's GitHub repository. These samples provide example code for additional scenarios commonly encountered while working with Azure Synapse Analytics.\n\n###  Additional documentation\nFor more extensive documentation on Azure Synapse Analytics, see the [API reference documentation][azsynapse_rest].\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the Code of Conduct FAQ or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[source_code]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/synapse/azure-analytics-synapse-accesscontrol/src\n[api_documentation]: https://azure.github.io/azure-sdk-for-java\n[azsynapse_docs]: https://docs.microsoft.com/azure/synapse-analytics/\n[jdk]: https://docs.microsoft.com/azure/developer/java/fundamentals/?view=azure-java-stable\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/identity/azure-identity\n[maven]: https://maven.apache.org/\n[azure_subscription]: https://azure.microsoft.com/\n[azure_synapse]: https://docs.microsoft.com/azure/synapse-analytics/quickstart-create-workspace\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[rest_api]: https://docs.microsoft.com/rest/api/synapse/\n[azsynapse_rest]: https://docs.microsoft.com/rest/api/synapse/\n[azure_create_application_in_portal]: https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal\n[azure_synapse_cli_full]: https://docs.microsoft.com/cli/azure/synapse?view=azure-cli-latest\n[performance_tuning]: https://github.com/Azure/azure-sdk-for-java/wiki/Performance-Tuning\n\n",
        "repo_name": "synapse/azure-analytics-synapse-accesscontrol",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/synapse/azure-analytics-synapse-accesscontrol",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Synapse Artifacts client library for Java\nAzure Synapse is a limitless analytics service that brings together enterprise data warehousing and Big Data analytics. It gives you the freedom to query data on your terms, using either serverless on-demand or provisioned resources\u2014at scale. Azure Synapse brings these two worlds together with a unified experience to ingest, prepare, manage, and serve data for immediate BI and machine learning needs.\n\nThe Azure Synapse Analytics development client library enables programmatically managing artifacts, offering methods to create, update, list, and delete pipelines, datasets, data flows, notebooks, Spark job definitions, SQL scripts, linked services and triggers.\n\n[Source code][source_code] | [API reference documentation][api_documentation] | [Product documentation][azsynapse_docs] | [Samples][artifacts_samples]\n\n## Getting started\n### Adding the package to your project\nMaven dependency for the Azure Synapse Artifacts client library. Add it to your project's POM file.\n\n[//]: # ({x-version-update-start;com.azure:azure-analytics-synapse-artifacts;current})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-analytics-synapse-artifacts</artifactId>\n    <version>1.0.0-beta.12</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Prerequisites\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- An [Azure subscription][azure_sub].\n- An existing Azure Synapse workspace. If you need to create an Azure Synapse workspace, you can use the Azure Portal or [Azure CLI][azure_cli].\n    ```Bash\n    az synapse workspace create \\\n        --name <your-workspace-name> \\\n        --resource-group <your-resource-group-name> \\\n        --storage-account <your-storage-account-name> \\\n        --file-system <your-storage-file-system-name> \\\n        --sql-admin-login-user <your-sql-admin-user-name> \\\n        --sql-admin-login-password <your-sql-admin-user-password> \\\n        --location <your-workspace-location>\n    ```\n\n### Authenticate the client\nIn order to interact with the Azure Synapse service, you'll need to create an instance of the [ArtifactsClient](#create-artifacts-client) class. You would need a **workspace endpoint** and **client secret credentials (client id, client secret, tenant id)** to instantiate a client object using the default `DefaultAzureCredential` examples shown in this document.\n\nThe `DefaultAzureCredential` way of authentication by providing client secret credentials is being used in this getting started section but you can find more ways to authenticate with [azure-identity][azure_identity].\n\n#### Create/Get credentials\nTo create/get client secret credentials you can use the [Azure Portal][azure_create_application_in_portal], [Azure CLI][azure_synapse_cli_full] or [Azure Cloud Shell](https://shell.azure.com/bash)\n\nHere is an [Azure Cloud Shell](https://shell.azure.com/bash) snippet below to\n\n * Create a service principal and configure its access to Azure resources:\n\n    ```Bash\n    az ad sp create-for-rbac -n <your-application-name> --skip-assignment\n    ```\n\n    Output:\n\n    ```json\n    {\n        \"appId\": \"generated-app-ID\",\n        \"displayName\": \"dummy-app-name\",\n        \"name\": \"http://dummy-app-name\",\n        \"password\": \"random-password\",\n        \"tenant\": \"tenant-ID\"\n    }\n    ```\n\n#### Create Artifacts client\nOnce you've populated the **AZURE_CLIENT_ID**, **AZURE_CLIENT_SECRET**, and **AZURE_TENANT_ID** environment variables and replaced **your-workspace-endpoint** with the URI returned above, you can create artifact clients. For example, the following code creates PipelineClient:\n\n```Java\nimport com.azure.identity.DefaultAzureCredentialBuilder;\nimport com.azure.analytics.synapse.artifacts.PipelineClient;\nimport com.azure.analytics.synapse.artifacts.ArtifactsClientBuilder;\n\nPipelineClient client = new ArtifactsClientBuilder()\n    .endpoint(\"https://{YOUR_WORKSPACE_NAME}.dev.azuresynapse.net\")\n    .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BODY_AND_HEADERS))\n    .credential(new DefaultAzureCredentialBuilder().build())\n    .buildPipelineClient();\n```\n\n> NOTE: For using an asynchronous client use PipelineAsyncClient instead of ArtifactsClient and call `buildPipelineAsyncClient()`\n\n## Key concepts\n\n### Pipeline Client\n\nThe pipline client performs the interactions with the Azure Synapse service for getting, setting, updating, deleting, and listing piplines. Asynchronous (PipelineAsyncClient) and synchronous (PipelineClient) clients exist in the SDK allowing for the selection of a client based on an application's use case.\n\n## Examples\nThe Azure.Analytics.Synapse.Artifacts package supports synchronous and asynchronous APIs. The following section covers some of the most common Azure Synapse Analytics artifacts related tasks:\n\n### Sync API\nThe following sections provide several code snippets covering some of the most common Azure Synapse Artifacts service tasks, including:\n\n### Pipeline examples\n* [Create a pipeline](#create-a-pipeline)\n* [Retrieve a pipeline](#retrieve-a-pipeline)\n* [List pipelines](#list-pipelines)\n* [Delete a pipeline](#delete-a-pipeline)\n\n### Create a pipeline\n\n`createOrUpdatePipeline` creates a pipeline.\n\n```java\nString pipelineName = \"MyPipeline\" + new Random().nextInt(1000);\nPipelineResource createdPipeline = client.createOrUpdatePipeline(pipelineName, new PipelineResource()\n    .setActivities(new ArrayList<>()));\nSystem.out.printf(\"Created pipeline with id: %s\\n\", createdPipeline.getId());\n```\n\n### Retrieve a pipeline\n\n`GetPipeline` retrieves a pipeline.\n\n```java\nPipelineResource retrievedPipeline = client.getPipeline(pipelineName);\n```\n\n### List pipelines\n`GetPipelinesByWorkspace` enumerates the pipeines in the Synapse workspace.\n\n```java\nPagedIterable<PipelineResource> pipelines = client.getPipelinesByWorkspace();\nfor (PipelineResource p : pipelines) {\n    System.out.printf(\"Retrieved pipeline with id: %s\\n\", p.getId());\n}\n```\n\n### Delete a pipeline\n\n`DeletePipeline` deletes a pipeline.\n\n```java\nclient.deletePipeline(pipelineName);\n```\n\n### Async API\nThe following sections provide several code snippets covering some of the most common asynchronous Azure Synapse Artifacts service tasks, including:\n\n* [Create a pipeline asynchronously](#create-a-pipeline-asynchronously)\n* [Retrieve a pipeline asynchronously](#retrieve-a-pipeline-asynchronously)\n* [List pipelines asynchronously](#list-pipelines-asynchronously)\n* [Delete a pipeline asynchronously](#delete-a-pipeline-asynchronously)\n\n> Note : You should add `System.in.read()` or `Thread.sleep()` after the function calls in the main class/thread to allow async functions/operations to execute and finish before the main application/thread exits.\n\n### Create a pipeline asynchronously\n\n\n`createOrUpdatePipeline` creates a pipeline.\n\n```java\nString pipelineName = \"MyPipeline\" + new Random().nextInt(1000);\nclient.createOrUpdatePipeline(pipelineName, new PipelineResource().setActivities(new ArrayList<>()))\n    .subscribe(p -> System.out.printf(\"Created pipeline with id: %s\\n\", p.getId()));\n```\n\n### Retrieve a pipeline asynchronously\n\n`getPipeline` retrieves a pipeline.\n\n```java\nclient.getPipeline(pipelineName).subscribe(pipelineResponse ->\n    System.out.printf(\"Retrieved pipeline with id: %s\\n\", pipelineResponse.getId()));\n```\n\n### List pipelines asynchronously\n`getPipelinesByWorkspace` enumerates the pipelines in the Synapse workspace.\n\n```java\nclient.getPipelinesByWorkspace().subscribe(pipeline ->\n        System.out.printf(\"Retrieved pipeline with id: %s\\n\", pipeline.getId()));\n```\n\n### Delete a pipeline asynchronously\n\n`deletePipeline` deletes a pipeline.\n\n```java\nclient.deletePipeline(pipelineName).block();\n```\n\n## Troubleshooting\n### General\nAzure Synapse Artifacts clients raise exceptions. For example, if you try to retrieve an artifact after it is deleted a `404` error is returned, indicating the resource was not found. In the following snippet, the error is handled gracefully by catching the exception and displaying additional information about the error.\n\n```java\ntry {\n    PipelineResource deletedPipeline = client.getPipeline(pipelineName);\n} catch (ResourceNotFoundException e) {\n    System.out.println(e.getMessage());\n}\n```\n\n### Default HTTP client\nAll client libraries by default use the Netty HTTP client. Adding the above dependency will automatically configure the client library to use the Netty HTTP client. Configuring or changing the HTTP client is detailed in the [HTTP clients wiki](https://github.com/Azure/azure-sdk-for-java/wiki/HTTP-clients).\n\n### Default SSL library\nAll client libraries, by default, use the Tomcat-native Boring SSL library to enable native-level performance for SSL operations. The Boring SSL library is an Uber JAR containing native libraries for Linux / macOS / Windows, and provides better performance compared to the default SSL implementation within the JDK. For more information, including how to reduce the dependency size, refer to the [performance tuning][performance_tuning] section of the wiki.\n\n## Next steps\nSeveral Synapse Java SDK samples are available to you in the SDK's GitHub repository. These samples provide example code for additional scenarios commonly encountered while working with Azure Synapse Analytics.\n\n###  Additional documentation\nFor more extensive documentation on Azure Synapse Analytics, see the [API reference documentation][azsynapse_rest].\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the Code of Conduct FAQ or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[source_code]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/synapse/azure-analytics-synapse-artifacts/src\n[api_documentation]: https://azure.github.io/azure-sdk-for-java\n[azsynapse_docs]: https://docs.microsoft.com/azure/synapse-analytics/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/identity/azure-identity\n[maven]: https://maven.apache.org/\n[azure_subscription]: https://azure.microsoft.com/\n[jdk]: https://docs.microsoft.com/azure/developer/java/fundamentals/?view=azure-java-stable\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_synapse]: https://docs.microsoft.com/azure/synapse-analytics/quickstart-create-workspace\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[rest_api]: https://docs.microsoft.com/rest/api/synapse/\n[azsynapse_rest]: https://docs.microsoft.com/rest/api/synapse/\n[azure_create_application_in_portal]: https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal\n[azure_synapse_cli_full]: https://docs.microsoft.com/cli/azure/synapse?view=azure-cli-latest\n[artifacts_samples]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/synapse/azure-analytics-synapse-artifacts/src/samples/java/com/azure/analytics/synapse/artifacts\n[performance_tuning]: https://github.com/Azure/azure-sdk-for-java/wiki/Performance-Tuning\n\n",
        "repo_name": "synapse/azure-analytics-synapse-artifacts",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/synapse/azure-analytics-synapse-artifacts",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Synapse Managed Private Endpoints client library for Java\nAzure Synapse is a limitless analytics service that brings together enterprise data warehousing and Big Data analytics. It gives you the freedom to query data on your terms, using either serverless on-demand or provisioned resources\u2014at scale. Azure Synapse brings these two worlds together with a unified experience to ingest, prepare, manage, and serve data for immediate BI and machine learning needs.\n\nThe Azure Synapse Analytics managed private endpoints client library enables programmatically managing private endpoints.\n\n[Source code][source_code] | [API reference documentation][api_documentation] | [Product documentation][azsynapse_docs]\n\n## Getting started\n### Adding the package to your project\nMaven dependency for the Azure Synapse managed private endpoints client library. Add it to your project's POM file.\n\n[//]: # ({x-version-update-start;com.azure:azure-analytics-synapse-managedprivateendpoints;current})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-analytics-synapse-managedprivateendpoints</artifactId>\n    <version>1.0.0-beta.5</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Prerequisites\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- An [Azure subscription][azure_sub].\n- An existing Azure Synapse workspace. If you need to create an Azure Synapse workspace, you can use the Azure Portal or [Azure CLI][azure_cli].\n    ```Bash\n    az synapse workspace create \\\n        --name <your-workspace-name> \\\n        --resource-group <your-resource-group-name> \\\n        --storage-account <your-storage-account-name> \\\n        --file-system <your-storage-file-system-name> \\\n        --sql-admin-login-user <your-sql-admin-user-name> \\\n        --sql-admin-login-password <your-sql-admin-user-password> \\\n        --location <your-workspace-location>\n    ```\n\n### Authenticate the client\nIn order to interact with the Azure Synapse service, you'll need to create an instance of the `ManagedPrivateEndpointsClient` class. You would need a **workspace endpoint** and **client secret credentials (client id, client secret, tenant id)** to instantiate a client object using the default `DefaultAzureCredential` examples shown in this document.\n\nThe `DefaultAzureCredential` way of authentication by providing client secret credentials is being used in this getting started section but you can find more ways to authenticate with [azure-identity][azure_identity].\n\n#### Create/Get credentials\nTo create/get client secret credentials you can use the [Azure Portal][azure_create_application_in_portal], [Azure CLI][azure_synapse_cli_full] or [Azure Cloud Shell](https://shell.azure.com/bash)\n\nHere is an [Azure Cloud Shell](https://shell.azure.com/bash) snippet below to\n\n * Create a service principal and configure its access to Azure resources:\n\n    ```Bash\n    az ad sp create-for-rbac -n <your-application-name> --skip-assignment\n    ```\n\n    Output:\n\n    ```json\n    {\n        \"appId\": \"generated-app-ID\",\n        \"displayName\": \"dummy-app-name\",\n        \"name\": \"http://dummy-app-name\",\n        \"password\": \"random-password\",\n        \"tenant\": \"tenant-ID\"\n    }\n    ```\n\n## Key concepts\n\n(coming soon)\n\n## Examples\n\n(coming soon)\n\n## Troubleshooting\n\n### Default HTTP client\nAll client libraries by default use the Netty HTTP client. Adding the above dependency will automatically configure the client library to use the Netty HTTP client. Configuring or changing the HTTP client is detailed in the [HTTP clients wiki](https://github.com/Azure/azure-sdk-for-java/wiki/HTTP-clients).\n\n### Default SSL library\nAll client libraries, by default, use the Tomcat-native Boring SSL library to enable native-level performance for SSL operations. The Boring SSL library is an Uber JAR containing native libraries for Linux / macOS / Windows, and provides better performance compared to the default SSL implementation within the JDK. For more information, including how to reduce the dependency size, refer to the [performance tuning][performance_tuning] section of the wiki.\n\n## Next steps\nSeveral Synapse Java SDK samples are available to you in the SDK's GitHub repository. These samples provide example code for additional scenarios commonly encountered while working with Azure Synapse Analytics.\n\n###  Additional documentation\nFor more extensive documentation on Azure Synapse Analytics, see the [API reference documentation][azsynapse_rest].\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the Code of Conduct FAQ or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[source_code]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/synapse/azure-analytics-synapse-accesscontrol/src\n[api_documentation]: https://azure.github.io/azure-sdk-for-java\n[azsynapse_docs]: https://docs.microsoft.com/azure/synapse-analytics/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/identity/azure-identity\n[maven]: https://maven.apache.org/\n[azure_subscription]: https://azure.microsoft.com/\n[jdk]: https://docs.microsoft.com/azure/developer/java/fundamentals/?view=azure-java-stable\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_synapse]: https://docs.microsoft.com/azure/synapse-analytics/quickstart-create-workspace\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[rest_api]: https://docs.microsoft.com/rest/api/synapse/\n[azsynapse_rest]: https://docs.microsoft.com/rest/api/synapse/\n[azure_create_application_in_portal]: https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal\n[azure_synapse_cli_full]: https://docs.microsoft.com/cli/azure/synapse?view=azure-cli-latest\n[performance_tuning]: https://github.com/Azure/azure-sdk-for-java/wiki/Performance-Tuning\n\n",
        "repo_name": "synapse/azure-analytics-synapse-managedprivateendpoints",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/synapse/azure-analytics-synapse-managedprivateendpoints",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Synapse Monitoring client library for Java\nAzure Synapse is a limitless analytics service that brings together enterprise data warehousing and Big Data analytics. It gives you the freedom to query data on your terms, using either serverless on-demand or provisioned resources\u2014at scale. Azure Synapse brings these two worlds together with a unified experience to ingest, prepare, manage, and serve data for immediate BI and machine learning needs.\n\nThe Azure Synapse Analytics monitoring client library enables programmatically monitoring your Synapse workspace.\n\n[Source code][source_code] | [API reference documentation][api_documentation] | [Product documentation][azsynapse_docs]\n\n## Getting started\n### Adding the package to your project\nMaven dependency for the Azure Synapse monitoring client library. Add it to your project's POM file.\n\n[//]: # ({x-version-update-start;com.azure:azure-analytics-synapse-monitoring;current})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-analytics-synapse-monitoring</artifactId>\n    <version>1.0.0-beta.4</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Prerequisites\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- An [Azure subscription][azure_sub].\n- An existing Azure Synapse workspace. If you need to create an Azure Synapse workspace, you can use the Azure Portal or [Azure CLI][azure_cli].\n    ```Bash\n    az synapse workspace create \\\n        --name <your-workspace-name> \\\n        --resource-group <your-resource-group-name> \\\n        --storage-account <your-storage-account-name> \\\n        --file-system <your-storage-file-system-name> \\\n        --sql-admin-login-user <your-sql-admin-user-name> \\\n        --sql-admin-login-password <your-sql-admin-user-password> \\\n        --location <your-workspace-location>\n    ```\n\n### Authenticate the client\nIn order to interact with the Azure Synapse service, you'll need to create an instance of the `MonitoringClient` class. You would need a **workspace endpoint** and **client secret credentials (client id, client secret, tenant id)** to instantiate a client object using the default `DefaultAzureCredential` examples shown in this document.\n\nThe `DefaultAzureCredential` way of authentication by providing client secret credentials is being used in this getting started section but you can find more ways to authenticate with [azure-identity][azure_identity].\n\n#### Create/Get credentials\nTo create/get client secret credentials you can use the [Azure Portal][azure_create_application_in_portal], [Azure CLI][azure_synapse_cli_full] or [Azure Cloud Shell](https://shell.azure.com/bash)\n\nHere is an [Azure Cloud Shell](https://shell.azure.com/bash) snippet below to\n\n * Create a service principal and configure its access to Azure resources:\n\n    ```Bash\n    az ad sp create-for-rbac -n <your-application-name> --skip-assignment\n    ```\n\n    Output:\n\n    ```json\n    {\n        \"appId\": \"generated-app-ID\",\n        \"displayName\": \"dummy-app-name\",\n        \"name\": \"http://dummy-app-name\",\n        \"password\": \"random-password\",\n        \"tenant\": \"tenant-ID\"\n    }\n    ```\n\n## Key concepts\n\n(coming soon)\n\n## Examples\n\n(coming soon)\n\n## Troubleshooting\n\n### Default HTTP client\nAll client libraries by default use the Netty HTTP client. Adding the above dependency will automatically configure the client library to use the Netty HTTP client. Configuring or changing the HTTP client is detailed in the [HTTP clients wiki](https://github.com/Azure/azure-sdk-for-java/wiki/HTTP-clients).\n\n### Default SSL library\nAll client libraries, by default, use the Tomcat-native Boring SSL library to enable native-level performance for SSL operations. The Boring SSL library is an Uber JAR containing native libraries for Linux / macOS / Windows, and provides better performance compared to the default SSL implementation within the JDK. For more information, including how to reduce the dependency size, refer to the [performance tuning][performance_tuning] section of the wiki.\n\n## Next steps\nSeveral Synapse Java SDK samples are available to you in the SDK's GitHub repository. These samples provide example code for additional scenarios commonly encountered while working with Azure Synapse Analytics.\n\n###  Additional documentation\nFor more extensive documentation on Azure Synapse Analytics, see the [API reference documentation][azsynapse_rest].\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the Code of Conduct FAQ or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[source_code]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/synapse/azure-analytics-synapse-accesscontrol/src\n[api_documentation]: https://azure.github.io/azure-sdk-for-java\n[azsynapse_docs]: https://docs.microsoft.com/azure/synapse-analytics/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/identity/azure-identity\n[maven]: https://maven.apache.org/\n[azure_subscription]: https://azure.microsoft.com/\n[jdk]: https://docs.microsoft.com/azure/developer/java/fundamentals/?view=azure-java-stable\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_synapse]: https://docs.microsoft.com/azure/synapse-analytics/quickstart-create-workspace\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[rest_api]: https://docs.microsoft.com/rest/api/synapse/\n[azsynapse_rest]: https://docs.microsoft.com/rest/api/synapse/\n[azure_create_application_in_portal]: https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal\n[azure_synapse_cli_full]: https://docs.microsoft.com/cli/azure/synapse?view=azure-cli-latest\n[performance_tuning]: https://github.com/Azure/azure-sdk-for-java/wiki/Performance-Tuning\n\n",
        "repo_name": "synapse/azure-analytics-synapse-monitoring",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/synapse/azure-analytics-synapse-monitoring",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Synapse Spark client library for Java\nAzure Synapse is a limitless analytics service that brings together enterprise data warehousing and Big Data analytics. It gives you the freedom to query data on your terms, using either serverless on-demand or provisioned resources\u2014at scale. Azure Synapse brings these two worlds together with a unified experience to ingest, prepare, manage, and serve data for immediate BI and machine learning needs.\n\nThe Azure Synapse Analytics Spark client library enables programmatically managing Spark jobs.\n\n[Source code][source_code] | [API reference documentation][api_documentation] | [Product documentation][azsynapse_docs] | [Samples][spark_samples]\n\n## Getting started\n### Adding the package to your project\nMaven dependency for the Azure Synapse Spark client library. Add it to your project's POM file.\n\n[//]: # ({x-version-update-start;com.azure:azure-analytics-synapse-spark;current})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-analytics-synapse-spark</artifactId>\n    <version>1.0.0-beta.4</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Prerequisites\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure subscription][azure_sub].\n- An existing Azure Synapse workspace. If you need to create an Azure Synapse workspace, you can use the [Azure Portal][azure_portal] or [Azure CLI][azure_cli].\n    ```Bash\n    az synapse workspace create \\\n        --name <your-workspace-name> \\\n        --resource-group <your-resource-group-name> \\\n        --storage-account <your-storage-account-name> \\\n        --file-system <your-storage-file-system-name> \\\n        --sql-admin-login-user <your-sql-admin-user-name> \\\n        --sql-admin-login-password <your-sql-admin-user-password> \\\n        --location <your-workspace-location>\n    ```\n\n### Authenticate the client\nIn order to interact with the Azure Synapse service, you'll need to create an instance of the [SparkClient](#create-spark-client) class. You would need a **workspace endpoint** and **client secret credentials (client id, client secret, tenant id)** to instantiate a client object using the default `DefaultAzureCredential` examples shown in this document.\n\nThe `DefaultAzureCredential` way of authentication by providing client secret credentials is being used in this getting started section but you can find more ways to authenticate with [azure-identity][azure_identity].\n\n#### Create/Get credentials\nTo create/get client secret credentials you can use the [Azure Portal][azure_create_application_in_portal], [Azure CLI][azure_synapse_cli_full] or [Azure Cloud Shell](https://shell.azure.com/bash)\n\nHere is an [Azure Cloud Shell](https://shell.azure.com/bash) snippet below to\n\n * Create a service principal and configure its access to Azure resources:\n\n    ```Bash\n    az ad sp create-for-rbac -n <your-application-name> --skip-assignment\n    ```\n\n    Output:\n\n    ```json\n    {\n        \"appId\": \"generated-app-ID\",\n        \"displayName\": \"dummy-app-name\",\n        \"name\": \"http://dummy-app-name\",\n        \"password\": \"random-password\",\n        \"tenant\": \"tenant-ID\"\n    }\n    ```\n\n#### Create Spark client\nOnce you've populated the **AZURE_CLIENT_ID**, **AZURE_CLIENT_SECRET**, and **AZURE_TENANT_ID** environment variables and replaced **your-workspace-endpoint** with the URI returned above, you can create Spark clients. For example, the following code creates SparkBatchClient:\n\n```Java\nimport com.azure.identity.DefaultAzureCredentialBuilder;\nimport com.azure.analytics.synapse.spark.SparkBatchClient;\nimport com.azure.analytics.synapse.spark.SparkClientBuilder;\n\nSparkBatchClient batchClient = new SparkClientBuilder()\n    .endpoint(\"https://{YOUR_WORKSPACE_NAME}.dev.azuresynapse.net\")\n    .sparkPoolName(\"{SPARK_POOL_NAME}\")\n    .credential(new DefaultAzureCredentialBuilder().build())\n    .buildSparkBatchClient();\n```\n\n> NOTE: For using an asynchronous client use SparkBatchAsyncClient instead of SparkBatchClient and call `buildSparkBatchAsyncClient()`\n\n## Key concepts\n\n### Spark batch Client\n\nThe Spark batch client performs the interactions with the Azure Synapse service for getting, setting, updating, deleting, and listing Spark batch jobs. Asynchronous (SparkBatchAsyncClient) and synchronous (SparkBatchClient) clients exist in the SDK allowing for the selection of a client based on an application's use case.\n\n## Examples\nThe Azure.Analytics.Synapse.Spark package supports synchronous and asynchronous APIs. The following section covers some of the most common Azure Synapse Analytics Spark job related tasks:\n\n### Sync API\nThe following sections provide several code snippets covering some of the most common Azure Synapse Spark service tasks, including:\n\n### Spark batch job examples\n* [Create a Spark batch job](#create-a-spark-batch-job)\n* [List role Spark batch jobs](#list-spark-batch-jobs)\n* [Cancel a Spark batch job](#cancel-a-spark-batch-job)\n\n### Create a Spark batch job\n\n`createSparkBatchJob` creates a Spark batch job.\n\n```java\nSparkBatchJobOptions options = new SparkBatchJobOptions()\n    .setName(name)\n    .setFile(file)\n    .setClassName(\"WordCount\")\n    .setArguments(Arrays.asList(\n        String.format(\"abfss://%s@%s.dfs.core.windows.net/samples/java/wordcount/shakespeare.txt\", fileSystem, storageAccount),\n        String.format(\"abfss://%s@%s.dfs.core.windows.net/samples/java/wordcount/result/\", fileSystem, storageAccount)\n    ))\n    .setDriverMemory(\"28g\")\n    .setDriverCores(4)\n    .setExecutorMemory(\"28g\")\n    .setExecutorCores(4)\n    .setExecutorCount(2);\n\nSparkBatchJob jobCreated = batchClient.createSparkBatchJob(options);\n```\n\n### List Spark batch jobs\n`getSparkBatchJobs` enumerates the Spark batch jobs in the Synapse workspace.\n\n```java\nSparkBatchJobCollection jobs = batchClient.getSparkBatchJobs();\nfor (SparkBatchJob job : jobs.getSessions()) {\n    System.out.println(job.getName());\n}\n```\n\n### Cancel a Spark batch job\n\n`cancelSparkBatchJob` cancels a Spark batch job by the given job ID.\n\n```java\nbatchClient.cancelSparkBatchJob(jobId);\n```\n\n### Async API\nThe following sections provide several code snippets covering some of the most common asynchronous Azure Synapse Spark service tasks, including:\n\n* [Create a Spark job asynchronously](#create-a-spark-job-asynchronously)\n* [List Spark jobs asynchronously](#list-spark-batch-jobs-asynchronously)\n* [Cancel a Spark batch job asynchronously](#cancel-a-spark-batch-job-asynchronously)\n\n> Note : You should add `System.in.read()` or `Thread.sleep()` after the function calls in the main class/thread to allow async functions/operations to execute and finish before the main application/thread exits.\n\n### Create a Spark job asynchronously\n\n`createSparkBatchJob` creates a Spark batch job.\n\n```java\nString storageAccount = \"<storage-account>\";\nString fileSystem = \"<file-system>\";\nString name = \"<job-name>\";\nString file = String.format(\"abfss://%s@%s.dfs.core.windows.net/samples/java/wordcount/wordcount.jar\", fileSystem, storageAccount);\nSparkBatchJobOptions options = new SparkBatchJobOptions()\n    .setName(name)\n    .setFile(file)\n    .setClassName(\"WordCount\")\n    .setArguments(Arrays.asList(\n        String.format(\"abfss://%s@%s.dfs.core.windows.net/samples/java/wordcount/shakespeare.txt\", fileSystem, storageAccount),\n        String.format(\"abfss://%s@%s.dfs.core.windows.net/samples/java/wordcount/result/\", fileSystem, storageAccount)\n    ))\n    .setDriverMemory(\"28g\")\n    .setDriverCores(4)\n    .setExecutorMemory(\"28g\")\n    .setExecutorCores(4)\n    .setExecutorCount(2);\n\nbatchClient.createSparkBatchJob(options).subscribe(job -> System.out.printf(\"Job ID: %f\\n\", job.getId()));\n```\n\n### List Spark batch jobs asynchronously\n`getSparkBatchJobs` enumerates the Spark batch jobs in the Synapse workspace.\n\n```java\nbatchClient.getSparkBatchJobs().subscribe(jobs -> {\n    for (SparkBatchJob job : jobs.getSessions()) {\n        System.out.println(job.getName());\n    }\n});\n```\n\n### Cancel a Spark batch job asynchronously\n\n`cancelSparkBatchJob` deletes a Spark batch job by the job ID.\n\n```java\nbatchClient.cancelSparkBatchJob(jobId);\n```\n\n## Troubleshooting\n\n### Default HTTP client\nAll client libraries by default use the Netty HTTP client. Adding the above dependency will automatically configure the client library to use the Netty HTTP client. Configuring or changing the HTTP client is detailed in the [HTTP clients wiki](https://github.com/Azure/azure-sdk-for-java/wiki/HTTP-clients).\n\n### Default SSL library\nAll client libraries, by default, use the Tomcat-native Boring SSL library to enable native-level performance for SSL operations. The Boring SSL library is an Uber JAR containing native libraries for Linux / macOS / Windows, and provides better performance compared to the default SSL implementation within the JDK. For more information, including how to reduce the dependency size, refer to the [performance tuning][performance_tuning] section of the wiki.\n\n## Next steps\nSeveral Synapse Java SDK samples are available to you in the SDK's GitHub repository. These samples provide example code for additional scenarios commonly encountered while working with Azure Synapse Analytics.\n\n###  Additional documentation\nFor more extensive documentation on Azure Synapse Analytics, see the [API reference documentation][azsynapse_rest].\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the Code of Conduct FAQ or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[source_code]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/synapse/azure-analytics-synapse-spark/src\n[api_documentation]: https://azure.github.io/azure-sdk-for-java\n[azsynapse_docs]: https://docs.microsoft.com/azure/synapse-analytics/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/identity/azure-identity\n[maven]: https://maven.apache.org/\n[azure_subscription]: https://azure.microsoft.com/\n[azure_synapse]: https://docs.microsoft.com/azure/synapse-analytics/quickstart-create-workspace\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[jdk]: https://docs.microsoft.com/azure/developer/java/fundamentals/?view=azure-java-stable\n[azure_sub]: https://azure.microsoft.com/free/\n[rest_api]: https://docs.microsoft.com/rest/api/synapse/\n[azsynapse_rest]: https://docs.microsoft.com/rest/api/synapse/\n[azure_create_application_in_portal]: https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal\n[azure_synapse_cli_full]: https://docs.microsoft.com/cli/azure/synapse?view=azure-cli-latest\n[spark_samples]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/synapse/azure-analytics-synapse-spark/src/samples/java/com/azure/analytics/synapse/spark\n[performance_tuning]: https://github.com/Azure/azure-sdk-for-java/wiki/Performance-Tuning\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://docs.microsoft.com/azure/synapse-analytics/quickstart-create-workspace\n",
        "repo_name": "synapse/azure-analytics-synapse-spark",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/synapse/azure-analytics-synapse-spark",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager Synapse client library for Java\n\nAzure Resource Manager Synapse client library for Java.\n\nThis package contains Microsoft Azure SDK for Synapse Management SDK. Azure Synapse Analytics Management Client. Package tag package-composite-v2. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-synapse;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-synapse</artifactId>\n    <version>1.0.0-beta.7</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nSynapseManager manager = SynapseManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/synapse/azure-resourcemanager-synapse/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "synapse/azure-resourcemanager-synapse",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/synapse/azure-resourcemanager-synapse",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Data Tables Performance test client library for Java\n\nRepresents Performance tests for Azure Data Tables SDK for Java.\n\n## Getting started\n\n### Prerequisites\n\n- Java Development Kit (JDK) with version 8 or above\n\n### Adding the package to your product\n\n\n## Key concepts\n\n\n## Examples\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n",
        "repo_name": "tables/azure-data-tables-perf",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/tables/azure-data-tables-perf",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Tables client library for Java\nAzure Tables is a service that stores structured NoSQL data in the cloud, providing a key/attribute store with a schemaless design. Azure Tables gives developers flexibility and scalability with all the best parts of Azure cloud.\n\n[Source code][source_code] | [Package (Maven)][package] | [API reference documentation][api_documentation]\n| [Product documentation][product_documentation] | [Samples][samples]\n\n## Getting started\n\n### Include the package\n\n#### Include the BOM file\n\nPlease include the azure-sdk-bom to your project to take dependency on the General Availability (GA) version of the library. In the following snippet, replace the {bom_version_to_target} placeholder with the version number.\nTo learn more about the BOM, see the [AZURE SDK BOM README](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/boms/azure-sdk-bom/README.md).\n\n```xml\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>com.azure</groupId>\n            <artifactId>azure-sdk-bom</artifactId>\n            <version>{bom_version_to_target}</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n```\nand then include the direct dependency in the dependencies section without the version tag as shown below.\n\n```xml\n<dependencies>\n    <dependency>\n        <groupId>com.azure</groupId>\n        <artifactId>azure-data-tables</artifactId>\n    </dependency>\n</dependencies>\n```\n\n#### Include direct dependency\nIf you want to take dependency on a particular version of the library that is not present in the BOM,\nadd the direct dependency to your project as follows.\n\n[//]: # ({x-version-update-start;com.azure:azure-data-tables;current})\n```xml\n<dependency>\n  <groupId>com.azure</groupId>\n  <artifactId>azure-data-tables</artifactId>\n  <version>12.3.11</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n- An existing Azure storage account or Azure Cosmos DB Table API account\n\n#### Create a Storage Account\nTo create a Storage Account you can use the [Azure Portal][storage_account_create_portal] or [Azure CLI][storage_account_create_cli].\n\n```bash\naz storage account create \\\n    --resource-group <resource-group-name> \\\n    --name <storage-account-name> \\\n    --location <location>\n```\n\nYour storage account URL, subsequently identified as `<your-table-account-url>`, would be formatted as follows\n`http(s)://<storage-account-name>.table.core.windows.net`.\n\n#### Create a Cosmos DB Table API account\nTo create a Cosmos DB Table API account you can use the [Azure Portal][cosmosdb_create_portal] or [Azure CLI][cosmosdb_create_cli].\n\n```bash\naz cosmosdb create \\\n    --resource-group <resource-group-name> \\\n    --name <cosmosdb-account-name> \\\n    --capabilities EnableTable\n```\n\nYour Table API account URL, subsequently identified as `<your-table-account-url>`, would be formatted as follows\n`http(s)://<cosmosdb-account-name>.table.cosmosdb.azure.com`.\n\n### Authenticate the client\nEvery request made to the Tables service must be authorized using a connection string, named key credential, Shared Access Signature, or token credentials. The samples below demonstrate the usage of these methods.\n\nNote: Only Azure Storage API endpoints currently support AAD authorization via token credentials.\n\n#### Connection string\nA connection string includes the authentication information required for your application to access data in an Azure table at runtime using Shared Key authorization. See [Authenticate with a Connection String](#authenticate-with-a-connection-string) for an example of how to use a connection string with a `TableServiceClient`.\n\nYou can obtain your connection string from the Azure Portal (click **Access keys** under **Settings** in the Portal Storage account blade, or **Connection String** under **Settings** in the Portal Cosmos DB account blade) or using the Azure CLI:\n\n```bash\n# Storage account\naz storage account show-connection-string \\\n    --resource-group <resource-group-name> \\\n    --name <storage-account-name>\n\n# Cosmos DB Table API account\naz cosmosdb list-connection-strings \\\n    --resource-group <resource-group-name> \\\n    --name <cosmosdb-account-name>\n```\n\n#### Shared Key credential\nShared Key authorization relies on your account access keys and other parameters to produce an encrypted signature string that is passed on the request in the Authorization header. See [Authenticate with a Shared Key credential](#authenticate-with-a-shared-key) for an example of how to use Named Key authorization with a `TableServiceClient`.\n\nTo use Named Key authorization you'll need your account name and URL, as well as an account access key. You can obtain your primary access key from the Azure Portal (click **Access keys** under **Settings** in the Portal Storage account blade, or **Connection String** under **Settings** in the Portal Cosmos DB account blade) or using the Azure CLI:\n\n```bash\n# Storage account\naz storage account keys list \\\n    --resource-group <resource-group-name> \\\n    --account-name <storage-account-name>\n\n# Cosmos DB Table API account\naz cosmosdb list-keys \\\n    --resource-group <resource-group-name> \\\n    --name <cosmosdb-account-name>\n```\n\n#### Shared Access Signature (SAS)\nA Shared Access Signature allows administrators to delegate granular access to an Azure table without sharing the access key directly. You can control what resources the client may access, what permissions it has on those resources, and how long the SAS is valid, among other parameters. It relies on your account access keys and other parameters to produce an encrypted signature string that is passed on the request in the query string. See [Authenticate with a Shared Access Signature (SAS)](#authenticate-with-a-shared-access-signature-sas) for an example of how to use shared access signatures with a `TableServiceClient`.\n\nTo use SAS token authorization you'll need your account name and URL, as well as the SAS. You can obtain your SAS from the Azure Portal (click **Shared access signature** under **Settings** in the Portal Storage account blade) or using the Azure CLI:\n\n```bash\n# Account-level SAS\naz storage account generate-sas \\\n    --account-name <storage-or-cosmosdb-account-name> \\\n    --services t \\\n    --resource-types <resource-types> \\\n    --permissions <permissions> \\\n    --expiry <expiry-date>\n\n# Table-level SAS\naz storage table generate-sas \\\n    --name <table-name>\n```\n\n## TokenCredential\nAzure Tables provides integration with Azure Active Directory (AAD) for identity-based authentication of requests to the Table service when targeting a Storage endpoint. With AAD, you can use role-based access control (RBAC) to grant access to your Azure Table resources to users, groups, or applications.\n\nTo access a table resource with a `TokenCredential`, the authenticated identity should have either the \"Storage Table Data Contributor\" or \"Storage Table Data Reader\" role.\n\nWith the `azure-identity` package, you can seamlessly authorize requests in both development and production environments.\nTo learn more about Azure AD integration in Azure Storage, see the [Azure Identity README](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity/README.md).\n\n## Key concepts\n\n- **TableServiceClient** - A `TableServiceClient` is a client object that enables you to interact with the Table Service in order to create, list, and delete tables.\n- **TableClient** - A `TableClient` is a client object that enables you to interact with a specific table in order to create, upsert, update, get, list, and delete entities within it.\n- **Table** - A table is a collection of entities. Tables don't enforce a schema on entities, which means a single table can contain entities that have different sets of properties.\n- **Entity** - An entity is a set of properties, similar to a database row. An entity in Azure Storage can be up to 1MB in size. An entity in Azure Cosmos DB can be up to 2MB in size. An entity has a partition key and a row key which together uniquely identify the entity within the table.\n- **Properties** - A property is a name-value pair. Each entity can include up to 252 properties to store data. Each entity also has three system properties that specify a partition key, a row key, and a timestamp.\n- **Partition Key** - An entity's partition key identifies the partition within the table to which the entity belongs. Entities with the same partition key can be queried more quickly, and inserted/updated in atomic operations.\n- **Row Key** - An entity's row key is its unique identifier within a partition.\n\nCommon uses of the Tables service include:\n\n- Storing TBs of structured data capable of serving web scale applications\n- Storing datasets that don't require complex joins, foreign keys, or stored procedures and can be de-normalized for fast access\n- Quickly querying data using a clustered index\n- Accessing data using the OData protocol\n\n## Examples\n\n- [Authenticate a client](#authenticate-a-client)\n  - [Authenticate with a Connection String](#authenticate-with-a-connection-string)\n  - [Authenticate with a Shared Key](#authenticate-with-a-shared-key)\n  - [Authenticate with a Shared Access Signature (SAS)](#authenticate-with-a-shared-access-signature-sas)\n- [Create, List, and Delete Azure tables](#create-list-and-delete-azure-tables)\n  - [Construct a `TableServiceClient`](#construct-a-tableserviceclient)\n  - [Create a table](#create-a-table)\n  - [List tables](#list-tables)\n  - [Delete a table](#delete-a-table)\n- [Create, List, and Delete table entities](#create-list-and-delete-table-entities)\n  - [Construct a `TableClient`](#construct-a-tableclient)\n  - [Create an entity](#create-an-entity)\n  - [List entities](#list-entities)\n  - [Delete an entity](#delete-an-entity)\n\n### Authenticate a client\n\n#### Authenticate with a connection string\nTo use a connection string to authorize your client, call the builder's `connectionString` method with your connection string.\n\n```java readme-sample-authenticateWithConnectionString\nTableServiceClient tableServiceClient = new TableServiceClientBuilder()\n    .connectionString(\"<your-connection-string>\")\n    .buildClient();\n```\n\n#### Authenticate with a Shared Key\nTo use a Shared Key to authorize your client, create an instance of `AzureNamedKeyCredential` with your account name and access key. Call the builder's `endpoint` method with your account URL and the `credential` method with the `AzureNamedKeyCredential` object you created.\n\n```java readme-sample-authenticateWithNamedKey\nAzureNamedKeyCredential credential = new AzureNamedKeyCredential(\"<your-account-name>\", \"<account-access-key>\");\nTableServiceClient tableServiceClient = new TableServiceClientBuilder()\n    .endpoint(\"<your-table-account-url>\")\n    .credential(credential)\n    .buildClient();\n```\n\n#### Authenticate with a Shared Access Signature (SAS)\nTo use a SAS to authorize your client, call the builder's `endpoint` method with your account URL and the `sasToken` method with your SAS.\n\n```java readme-sample-authenticateWithSas\nTableServiceClient tableServiceClient = new TableServiceClientBuilder()\n    .endpoint(\"<your-table-account-url>\")\n    .sasToken(\"<sas-token-string>\")\n    .buildClient();\n```\n\n#### Authenticate with a Token Credentials\nTo authorize your client via AAD, create an instance of a credentials class that implements `TokenCredential`. Call the builder's `endpoint` method with your account URL and the `credential` method with the `TokenCredential` object you created.\n\n```java readme-sample-authenticateWithTokenCredential\nTokenCredential tokenCredential = new DefaultAzureCredentialBuilder().build();\nTableServiceClient tableServiceClient = new TableServiceClientBuilder()\n    .endpoint(\"<your-table-account-url>\")\n    .credential(tokenCredential)\n    .buildClient();\n```\n\n### Create, List, and Delete Azure tables\n\n#### Construct a `TableServiceClient`\nConstruct a `TableServiceClient` by creating an instance of `TableServiceClientBuilder` and then calling the builder's `buildClient` or `buildAsyncClient` methods.\n\n```java readme-sample-constructServiceClient\nTableServiceClient tableServiceClient = new TableServiceClientBuilder()\n    .connectionString(\"<your-connection-string>\") // or use any of the other authentication methods\n    .buildClient();\n```\n\n#### Create a table\nCreate a table by calling the `TableServiceClient`'s `createTable` method. A `TableClient` will be returned, this client allows performing operations on the table. An exception will be thrown if a table with the provided name exists.\n\n```java readme-sample-createTable\nTableClient tableClient = tableServiceClient.createTable(tableName);\n```\n\nAlternatively, you can call the `createTableIfNotExists` method which will create the table only if no such table exists, and does not throw an exception. A `TableClient` will be returned as well.\n\n```java readme-sample-createTableIfNotExists\nTableClient tableClient = tableServiceClient.createTableIfNotExists(tableName);\n```\n\n#### List tables\nList or query the set of existing tables by calling the `TableServiceClient`'s `listTables` method, optionally passing in a `ListTablesOptions` instance to filter or limit the query results. See [Supported Query Options][query_options] for details about supported query options.\n\n```java readme-sample-listTables\nListTablesOptions options = new ListTablesOptions()\n    .setFilter(String.format(\"TableName eq '%s'\", tableName));\n\nfor (TableItem tableItem : tableServiceClient.listTables(options, null, null)) {\n    System.out.println(tableItem.getName());\n}\n```\n\n#### Delete a table\nDelete a table by calling the `TableServiceClient`'s `deleteTable` method.\n\n```java readme-sample-deleteTable\ntableServiceClient.deleteTable(tableName);\n```\n\n### Create, List, and Delete table entities\n\n#### Construct a `TableClient`\nConstruct a `TableClient` by creating an instance of `TableClientBuilder`, calling the builder's `tableName` method with the name of the table, and then calling its `buildClient` or `buildAsyncClient` methods.\n\n```java readme-sample-constructTableClient\nTableClient tableClient = new TableClientBuilder()\n    .connectionString(\"<your-connection-string>\") // or use any of the other authentication methods\n    .tableName(tableName)\n    .buildClient();\n```\n\nAlternatively, a `TableClient` can be retrieved from an existing `TableServiceClient` by calling its `getTableClient` method.\n\n```java readme-sample-retrieveTableClient\nTableClient tableClient = tableServiceClient.getTableClient(tableName);\n```\n\n#### Create an entity\nCreate a new `TableEntity` instance, providing the partition key and row key of the entity to create, optionally adding properties to the created object. Then pass the object to the `TableClient`'s `createEntity` method. An exception will be thrown if an entity with the provided partition key and row key exists within the table.\n\n```java readme-sample-createEntity\nTableEntity entity = new TableEntity(partitionKey, rowKey)\n    .addProperty(\"Product\", \"Marker Set\")\n    .addProperty(\"Price\", 5.00)\n    .addProperty(\"Quantity\", 21);\n\ntableClient.createEntity(entity);\n```\n\n#### List entities\nList or query the set of entities within the table by calling the `TableClient`'s `listEntities` method, optionally passing in a `ListEntitiesOptions` instance to filter, select, or limit the query results. See [Supported Query Options][query_options] for details about supported query options.\n\n```java readme-sample-listEntities\nList<String> propertiesToSelect = new ArrayList<>();\npropertiesToSelect.add(\"Product\");\npropertiesToSelect.add(\"Price\");\n\nListEntitiesOptions options = new ListEntitiesOptions()\n    .setFilter(String.format(\"PartitionKey eq '%s'\", partitionKey))\n    .setSelect(propertiesToSelect);\n\nfor (TableEntity entity : tableClient.listEntities(options, null, null)) {\n    Map<String, Object> properties = entity.getProperties();\n    System.out.printf(\"%s: %.2f%n\", properties.get(\"Product\"), properties.get(\"Price\"));\n}\n```\n\n#### Delete an entity\nDelete an entity by calling the `TableClient`'s `deleteEntity` method.\n\n```java readme-sample-deleteEntity\ntableClient.deleteEntity(partitionKey, rowKey);\n```\n\n## Troubleshooting\n\n### General\nWhen you interact with Tables service using the Azure Tables library for Java, errors returned by the service correspond to the same HTTP status codes returned for [REST API][rest_api] requests.\n\nFor example, if you try to create a table that already exists, a `409` error is returned, indicating \"Conflict\".\n\n```java readme-sample-accessErrorInfo\n// Create the table if it doesn't already exist.\ntableServiceClient.createTableIfNotExists(tableName);\n\n// Now attempt to create the same table unconditionally.\ntry {\n    tableServiceClient.createTable(tableName);\n} catch (TableServiceException e) {\n    System.out.println(e.getResponse().getStatusCode()); // 409\n}\n```\n\n### Logging\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to the desired verbosity. See [LogLevel][log_level] for a description of available log levels.\n\n## Next steps\n\nGet started with our [Table samples][samples].\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a [Contributor License Agreement (CLA)][cla] declaring that you have the right to, and actually do, grant us the rights to use your contribution.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- Links -->\n[api_documentation]: https://aka.ms/java-docs\n[azure_subscription]: https://azure.microsoft.com/free\n[cla]: https://cla.microsoft.com\n[coc_contact]: mailto:opencode@microsoft.com\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[cosmosdb_create_cli]: https://docs.microsoft.com/azure/cosmos-db/scripts/cli/table/create\n[cosmosdb_create_portal]: https://docs.microsoft.com/azure/cosmos-db/create-table-java#create-a-database-account\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[log_level]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core/src/main/java/com/azure/core/util/logging/LogLevel.java\n[package]: https://search.maven.org/artifact/com.azure/azure-data-tables\n[product_documentation]: https://docs.microsoft.com/azure/cosmos-db/table-storage-overview\n[query_options]: https://docs.microsoft.com/rest/api/storageservices/querying-tables-and-entities#supported-query-options\n[rest_api]: https://docs.microsoft.com/rest/api/storageservices/table-service-rest-api\n[samples]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/tables/azure-data-tables/src/samples/java/\n[source_code]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/tables/azure-data-tables/src\n[storage_account_create_cli]: https://docs.microsoft.com/azure/storage/common/storage-account-create?tabs=azure-cli\n[storage_account_create_portal]: https://docs.microsoft.com/azure/storage/common/storage-account-create?tabs=azure-portal\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Ftables%2Fazure-data-tables%2FREADME.png)\n",
        "repo_name": "tables/azure-data-tables",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/tables/azure-data-tables",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Template Three client library for Java\n\nUse the guidelines in each section of this template to ensure consistency and readability of your README.\nThe README resides in your package's GitHub repository at the root of its directory within the repo.\nIt's also used as the package distribution page (NuGet, PyPi, npm, etc.) and as a Quickstart on docs.microsoft.com.\n\n**Title**: The H1 of your README should be in the format: `# [Product Name] client library for [Language]`\n\n* All headings, including the H1, should use **sentence-style capitalization**. Refer to the [Microsoft Style Guide][style-guide-msft].\n* Example: `# Azure Batch client library for Java`\n\n**Introduction**: The introduction appears directly under the title (H1) of your README.\n\n* **DO NOT** use an \"Introduction\" or \"Overview\" heading (H2) for this section.\n* First sentence: **Describe the service** briefly. You can usually use the first line of the service's docs landing page\n  for this (Example: [Cosmos DB docs landing page](https://docs.microsoft.com/azure/cosmos-db/)).\n* Next, add a **bulleted list** of the **most common tasks** supported by the package or library, prefaced with\n  \"Use the client library for [Product Name] to:\". Then, provide code snippets for these tasks in the [Examples](#examples)\n  section later in the document. Keep the task list short but include those tasks most developers need to perform with your package.\n\n> TIP: Your README should be as **brief** as possible but **no more brief** than necessary to get a developer new to Azure,\n> the service, or the package up and running quickly. Keep it brief, but include everything a developer needs to make\n> their first API call successfully.\n\n## Getting started\n\nThis section should include everything a developer needs to do to install and create their first client connection *very quickly*.\n\n### Install the package\n\nFirst, provide instruction for obtaining and installing the package or library. This section might include only a single\nline of code, like `pip install package-name`, but should enable a developer to successfully install the package from\nNuGet, pip, npm, Maven, or even cloning a GitHub repository.\n\nInclude a **Prerequisites** line after the install command that details any requirements that must be satisfied before\na developer can [authenticate](#authenticate-the-client) and test all the snippets in the [Examples](#examples) section.\nFor example, for Cosmos DB:\n\n**Prerequisites**: You must have an [Azure subscription](https://azure.microsoft.com/free/), [Cosmos DB account](https://docs.microsoft.com/azure/cosmos-db/account-overview) (SQL API), and [Java Development Kit (JDK) with version 8 or above][jdk] to use this package.\n\n> TODO: Once the library has GA'ed include the instructions on how to include the BOM file directly. And the benefit of using the BOM file over adding a direct dependency to the project.\n\n### Authenticate the client\n\nIf your library requires authentication for use, such as for Azure services, include instructions and example code\nneeded for initializing and authenticating.\n\nFor example, include details on obtaining an account key and endpoint URI, setting environment variables for each, and\ninitializing the client object.\n\n## Key concepts\n\nThe *Key concepts* section should describe the functionality of the main classes. Point out the most important and\nuseful classes in the package (with links to their reference pages) and explain how those classes work together. Feel\nfree to use bulleted lists, tables, code blocks, or even diagrams for clarity.\n\n## Examples\n\nInclude code snippets and short descriptions for each task you listed in the [Introduction](#introduction) (the bulleted list).\nBriefly explain each operation, but include enough clarity to explain complex or otherwise tricky operations.\n\nIf possible, use the same example snippets that your in-code documentation uses. For example, use the snippets in your\n`ReadmeSamples.java` that `codesnippet-maven-plugin` ingests via its [README syntax](https://github.com/Azure/azure-sdk-tools/tree/main/packages/java-packages/codesnippet-maven-plugin#injecting-codesnippets-into-readmes).\nThe `ReadmeSamples.java` file containing the snippets should reside alongside your package's code, and should be\nvalidated in an automated fashion.\n\nEach example in the *Examples* section starts with an H3 that describes the example. At the top of this section, just\nunder the *Examples* H2, add a bulleted list linking to each example H3. Each example should deep-link to the types\nand/or members used in the example.\n\n* [Create the thing](#create-the-thing)\n* [Get the thing](#get-the-thing)\n* [List the things](#list-the-things)\n\n### Create the thing\n\nUse the `createThing` method to create a Thing reference; this method does not make a network call. To persist the\nThing in the service, call `Thing.save`.\n\n```java\nThing thing = client.createThing(id, name);\nthing.save();\n```\n\n### Get the thing\n\nThe `getThing` method retrieves a Thing from the service. The `id` parameter is the unique ID of the Thing, not its\n\"name\" property.\n\n```java\nThing thing = client.getThing(id);\n```\n\n### List the things\n\nUse `listThings` to get one or more Thing objects from the service. If there are no Things available, a `404` exception\nis thrown (see [Troubleshooting](#troubleshooting) for details on handling exceptions).\n\n```java\nList<Thing> things = client.listThings();\n```\n\n## Troubleshooting\n\nDescribe common errors and exceptions, how to \"unpack\" them if necessary, and include guidance for graceful handling and recovery.\n\nProvide information to help developers avoid throttling or other service-enforced errors they might encounter. For example,\nprovide guidance and examples for using retry or connection policies in the API.\n\nIf the package, or a related package supports it, include tips for logging or enabling instrumentation to help them debug their code.\n\n### Enabling Logging\n\nAzure SDKs for Java provide a consistent logging story to help aid in troubleshooting application errors and expedite\ntheir resolution. The logs produced will capture the flow of an application before reaching the terminal state to help\nlocate the root issue. View the [logging][logging] wiki for guidance about enabling logging.\n\n### Default HTTP Client\n\nBy default, a Netty based HTTP client will be used. The [HTTP clients wiki](https://github.com/Azure/azure-sdk-for-java/wiki/HTTP-clients)\nprovides more information on configuring or changing the HTTP client.\n\n## Next steps\n\n* Provide a link to additional code examples, ideally to those sitting alongside the README in the package's `/samples` directory.\n* If appropriate, point users to other packages that might be useful.\n* If you think there's a good chance that developers might stumble across your package in error (because they're searching\n  for specific functionality and mistakenly think the package provides that functionality), point them to the packages\n  they might be looking for.\n\n* After adding the new SDK, you need to include the package in the following locations\n1. `version_client.txt` - include the package with the version.\n2. parent pom - `<enlistmentroot>\\pom.xml` - Multiple places in the file.\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a\n[Contributor License Agreement (CLA)][cla] declaring that you have the right to, and actually do, grant us the rights\nto use your contribution.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate\nthe PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to\ndo this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the\n[Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n[style-guide-msft]: https://docs.microsoft.com/style-guide/capitalization\n[jdk]: https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable\n[logging]: https://github.com/Azure/azure-sdk-for-java/wiki/Logging-with-Azure-SDK\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Ftemplate%2Fazure-sdk-template%2FREADME.png)\n",
        "repo_name": "template/azure-sdk-template-three",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/template/azure-sdk-template-three",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Template Two client library for Java\n\nUse the guidelines in each section of this template to ensure consistency and readability of your README.\nThe README resides in your package's GitHub repository at the root of its directory within the repo.\nIt's also used as the package distribution page (NuGet, PyPi, npm, etc.) and as a Quickstart on docs.microsoft.com.\n\n**Title**: The H1 of your README should be in the format: `# [Product Name] client library for [Language]`\n\n* All headings, including the H1, should use **sentence-style capitalization**. Refer to the [Microsoft Style Guide][style-guide-msft].\n* Example: `# Azure Batch client library for Java`\n\n**Introduction**: The introduction appears directly under the title (H1) of your README.\n\n* **DO NOT** use an \"Introduction\" or \"Overview\" heading (H2) for this section.\n* First sentence: **Describe the service** briefly. You can usually use the first line of the service's docs landing page\n  for this (Example: [Cosmos DB docs landing page](https://docs.microsoft.com/azure/cosmos-db/)).\n* Next, add a **bulleted list** of the **most common tasks** supported by the package or library, prefaced with\n  \"Use the client library for [Product Name] to:\". Then, provide code snippets for these tasks in the [Examples](#examples)\n  section later in the document. Keep the task list short but include those tasks most developers need to perform with your package.\n\n> TIP: Your README should be as **brief** as possible but **no more brief** than necessary to get a developer new to Azure,\n> the service, or the package up and running quickly. Keep it brief, but include everything a developer needs to make\n> their first API call successfully.\n\n## Getting started\n\nThis section should include everything a developer needs to do to install and create their first client connection *very quickly*.\n\n### Install the package\n\nFirst, provide instruction for obtaining and installing the package or library. This section might include only a single\nline of code, like `pip install package-name`, but should enable a developer to successfully install the package from\nNuGet, pip, npm, Maven, or even cloning a GitHub repository.\n\nInclude a **Prerequisites** line after the install command that details any requirements that must be satisfied before\na developer can [authenticate](#authenticate-the-client) and test all the snippets in the [Examples](#examples) section.\nFor example, for Cosmos DB:\n\n**Prerequisites**: You must have an [Azure subscription](https://azure.microsoft.com/free/), [Cosmos DB account](https://docs.microsoft.com/azure/cosmos-db/account-overview) (SQL API), and [Java Development Kit (JDK) with version 8 or above][jdk] to use this package.\n\n> TODO: Once the library has GA'ed include the instructions on how to include the BOM file directly. And the benefit of using the BOM file over adding a direct dependency to the project.\n\n### Authenticate the client\n\nIf your library requires authentication for use, such as for Azure services, include instructions and example code\nneeded for initializing and authenticating.\n\nFor example, include details on obtaining an account key and endpoint URI, setting environment variables for each, and\ninitializing the client object.\n\n## Key concepts\n\nThe *Key concepts* section should describe the functionality of the main classes. Point out the most important and\nuseful classes in the package (with links to their reference pages) and explain how those classes work together. Feel\nfree to use bulleted lists, tables, code blocks, or even diagrams for clarity.\n\n## Examples\n\nInclude code snippets and short descriptions for each task you listed in the [Introduction](#introduction) (the bulleted list).\nBriefly explain each operation, but include enough clarity to explain complex or otherwise tricky operations.\n\nIf possible, use the same example snippets that your in-code documentation uses. For example, use the snippets in your\n`ReadmeSamples.java` that `codesnippet-maven-plugin` ingests via its [README syntax](https://github.com/Azure/azure-sdk-tools/tree/main/packages/java-packages/codesnippet-maven-plugin#injecting-codesnippets-into-readmes).\nThe `ReadmeSamples.java` file containing the snippets should reside alongside your package's code, and should be\nvalidated in an automated fashion.\n\nEach example in the *Examples* section starts with an H3 that describes the example. At the top of this section, just\nunder the *Examples* H2, add a bulleted list linking to each example H3. Each example should deep-link to the types\nand/or members used in the example.\n\n* [Create the thing](#create-the-thing)\n* [Get the thing](#get-the-thing)\n* [List the things](#list-the-things)\n\n### Create the thing\n\nUse the `createThing` method to create a Thing reference; this method does not make a network call. To persist the\nThing in the service, call `Thing.save`.\n\n```java\nThing thing = client.createThing(id, name);\nthing.save();\n```\n\n### Get the thing\n\nThe `getThing` method retrieves a Thing from the service. The `id` parameter is the unique ID of the Thing, not its\n\"name\" property.\n\n```java\nThing thing = client.getThing(id);\n```\n\n### List the things\n\nUse `listThings` to get one or more Thing objects from the service. If there are no Things available, a `404` exception\nis thrown (see [Troubleshooting](#troubleshooting) for details on handling exceptions).\n\n```java\nList<Thing> things = client.listThings();\n```\n\n## Troubleshooting\n\nDescribe common errors and exceptions, how to \"unpack\" them if necessary, and include guidance for graceful handling and recovery.\n\nProvide information to help developers avoid throttling or other service-enforced errors they might encounter. For example,\nprovide guidance and examples for using retry or connection policies in the API.\n\nIf the package, or a related package supports it, include tips for logging or enabling instrumentation to help them debug their code.\n\n### Enabling Logging\n\nAzure SDKs for Java provide a consistent logging story to help aid in troubleshooting application errors and expedite\ntheir resolution. The logs produced will capture the flow of an application before reaching the terminal state to help\nlocate the root issue. View the [logging][logging] wiki for guidance about enabling logging.\n\n### Default HTTP Client\n\nBy default, a Netty based HTTP client will be used. The [HTTP clients wiki](https://github.com/Azure/azure-sdk-for-java/wiki/HTTP-clients)\nprovides more information on configuring or changing the HTTP client.\n\n## Next steps\n\n* Provide a link to additional code examples, ideally to those sitting alongside the README in the package's `/samples` directory.\n* If appropriate, point users to other packages that might be useful.\n* If you think there's a good chance that developers might stumble across your package in error (because they're searching\n  for specific functionality and mistakenly think the package provides that functionality), point them to the packages\n  they might be looking for.\n\n* After adding the new SDK, you need to include the package in the following locations\n1. `version_client.txt` - include the package with the version.\n2. parent pom - `<enlistmentroot>\\pom.xml` - Multiple places in the file.\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a\n[Contributor License Agreement (CLA)][cla] declaring that you have the right to, and actually do, grant us the rights\nto use your contribution.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate\nthe PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to\ndo this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the\n[Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n[style-guide-msft]: https://docs.microsoft.com/style-guide/capitalization\n[jdk]: https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable\n[logging]: https://github.com/Azure/azure-sdk-for-java/wiki/Logging-with-Azure-SDK\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Ftemplate%2Fazure-sdk-template%2FREADME.png)\n",
        "repo_name": "template/azure-sdk-template-two",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/template/azure-sdk-template-two",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Template client library for Java\n\nUse the guidelines in each section of this template to ensure consistency and readability of your README. \nThe README resides in your package's GitHub repository at the root of its directory within the repo. \nIt's also used as the package distribution page (NuGet, PyPi, npm, etc.) and as a Quickstart on docs.microsoft.com. \n\n**Title**: The H1 of your README should be in the format: `# [Product Name] client library for [Language]`\n\n* All headings, including the H1, should use **sentence-style capitalization**. Refer to the [Microsoft Style Guide][style-guide-msft].\n* Example: `# Azure Batch client library for Java`\n\n**Introduction**: The introduction appears directly under the title (H1) of your README.\n\n* **DO NOT** use an \"Introduction\" or \"Overview\" heading (H2) for this section.\n* First sentence: **Describe the service** briefly. You can usually use the first line of the service's docs landing page \n  for this (Example: [Cosmos DB docs landing page](https://docs.microsoft.com/azure/cosmos-db/)).\n* Next, add a **bulleted list** of the **most common tasks** supported by the package or library, prefaced with \n  \"Use the client library for [Product Name] to:\". Then, provide code snippets for these tasks in the [Examples](#examples) \n  section later in the document. Keep the task list short but include those tasks most developers need to perform with your package.\n\n> TIP: Your README should be as **brief** as possible but **no more brief** than necessary to get a developer new to Azure, \n> the service, or the package up and running quickly. Keep it brief, but include everything a developer needs to make \n> their first API call successfully.\n\n## Getting started\n\nThis section should include everything a developer needs to do to install and create their first client connection *very quickly*.\n\n### Install the package\n\nFirst, provide instruction for obtaining and installing the package or library. This section might include only a single\nline of code, like `pip install package-name`, but should enable a developer to successfully install the package from \nNuGet, pip, npm, Maven, or even cloning a GitHub repository.\n\nInclude a **Prerequisites** line after the install command that details any requirements that must be satisfied before \na developer can [authenticate](#authenticate-the-client) and test all the snippets in the [Examples](#examples) section. \nFor example, for Cosmos DB:\n\n**Prerequisites**: You must have an [Azure subscription](https://azure.microsoft.com/free/), [Cosmos DB account](https://docs.microsoft.com/azure/cosmos-db/account-overview) (SQL API), and [Java Development Kit (JDK) with version 8 or above][jdk] to use this package.\n\n> TODO: Once the library has GA'ed include the instructions on how to include the BOM file directly. And the benefit of using the BOM file over adding a direct dependency to the project.\n\n### Authenticate the client\n\nIf your library requires authentication for use, such as for Azure services, include instructions and example code \nneeded for initializing and authenticating.\n\nFor example, include details on obtaining an account key and endpoint URI, setting environment variables for each, and \ninitializing the client object.\n\n## Key concepts\n\nThe *Key concepts* section should describe the functionality of the main classes. Point out the most important and \nuseful classes in the package (with links to their reference pages) and explain how those classes work together. Feel \nfree to use bulleted lists, tables, code blocks, or even diagrams for clarity.\n\n## Examples\n\nInclude code snippets and short descriptions for each task you listed in the [Introduction](#introduction) (the bulleted list). \nBriefly explain each operation, but include enough clarity to explain complex or otherwise tricky operations.\n\nIf possible, use the same example snippets that your in-code documentation uses. For example, use the snippets in your \n`ReadmeSamples.java` that `codesnippet-maven-plugin` ingests via its [README syntax](https://github.com/Azure/azure-sdk-tools/tree/main/packages/java-packages/codesnippet-maven-plugin#injecting-codesnippets-into-readmes). \nThe `ReadmeSamples.java` file containing the snippets should reside alongside your package's code, and should be \nvalidated in an automated fashion.\n\nEach example in the *Examples* section starts with an H3 that describes the example. At the top of this section, just \nunder the *Examples* H2, add a bulleted list linking to each example H3. Each example should deep-link to the types \nand/or members used in the example.\n\n* [Create the thing](#create-the-thing)\n* [Get the thing](#get-the-thing)\n* [List the things](#list-the-things)\n\n### Create the thing\n\nUse the `createThing` method to create a Thing reference; this method does not make a network call. To persist the \nThing in the service, call `Thing.save`.\n\n```java\nThing thing = client.createThing(id, name);\nthing.save();\n```\n\n### Get the thing\n\nThe `getThing` method retrieves a Thing from the service. The `id` parameter is the unique ID of the Thing, not its \n\"name\" property.\n\n```java\nThing thing = client.getThing(id);\n```\n\n### List the things\n\nUse `listThings` to get one or more Thing objects from the service. If there are no Things available, a `404` exception \nis thrown (see [Troubleshooting](#troubleshooting) for details on handling exceptions).\n\n```java\nList<Thing> things = client.listThings();\n```\n\n## Troubleshooting\n\nDescribe common errors and exceptions, how to \"unpack\" them if necessary, and include guidance for graceful handling and recovery.\n\nProvide information to help developers avoid throttling or other service-enforced errors they might encounter. For example, \nprovide guidance and examples for using retry or connection policies in the API.\n\nIf the package, or a related package supports it, include tips for logging or enabling instrumentation to help them debug their code.\n\n### Enabling Logging\n\nAzure SDKs for Java provide a consistent logging story to help aid in troubleshooting application errors and expedite\ntheir resolution. The logs produced will capture the flow of an application before reaching the terminal state to help\nlocate the root issue. View the [logging][logging] wiki for guidance about enabling logging.\n\n### Default HTTP Client\n\nBy default, a Netty based HTTP client will be used. The [HTTP clients wiki](https://github.com/Azure/azure-sdk-for-java/wiki/HTTP-clients)\nprovides more information on configuring or changing the HTTP client.\n\n## Next steps\n\n* Provide a link to additional code examples, ideally to those sitting alongside the README in the package's `/samples` directory.\n* If appropriate, point users to other packages that might be useful.\n* If you think there's a good chance that developers might stumble across your package in error (because they're searching \n  for specific functionality and mistakenly think the package provides that functionality), point them to the packages \n  they might be looking for.\n  \n* After adding the new SDK, you need to include the package in the following locations\n1. `version_client.txt` - include the package with the version.\n2. parent pom - `<enlistmentroot>\\pom.xml` - Multiple places in the file.\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a\n[Contributor License Agreement (CLA)][cla] declaring that you have the right to, and actually do, grant us the rights\nto use your contribution.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate\nthe PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to\ndo this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the\n[Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n[style-guide-msft]: https://docs.microsoft.com/style-guide/capitalization\n[jdk]: https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable\n[logging]: https://github.com/Azure/azure-sdk-for-java/wiki/Logging-with-Azure-SDK\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Ftemplate%2Fazure-sdk-template%2FREADME.png)\n",
        "repo_name": "template/azure-sdk-template",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/template/azure-sdk-template",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Template Performance test client library for Java\n\nRepresents Performance tests for Azure Template SDK for Java.\n\n## Getting started\n\n### Prerequisites\n\n- Java Development Kit (JDK) with version 8 or above\n\n### Adding the package to your product\n\n\n## Key concepts\n\n\n## Examples\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%template%2Fperf-test-core%2FREADME.png)\n",
        "repo_name": "template/azure-template-perf",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/template/azure-template-perf",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Text Analytics Performance test client library for Java\n\nRepresents Performance tests for Azure Text Analytics SDK for Java.\n\n## Getting started\n\n### Prerequisites\n\n- A [Java Development Kit (JDK)][jdk_link], version 8 or later.\n- [Azure Subscription][azure_subscription]\n- [Cognitive Services or Text Analytics account][text_analytics_account] to use this package.\n\n#### Setup for test resources\n\nYou will need the following environment variables for running the tests to access the live resources:\n\n```\nAZURE_TEXTANALYTICS_ENDPOINT=<text analytics service endpoint>\nAZURE_TEXTANALYTICS_API_KEY=<text analytics API Key>\n```\n\n### Adding the package to your product\n\n## Key concepts\n\n## Examples\n### Executing the performance test\n1. Compile the performance project into a standalone jar using the command from the root of the perf project folder\n```\nmvn clean package -f sdk/textanalytics/azure-ai-textanalytics-perf/pom.xml\n```\n\n2. Execute the corresponding perf test in the project using the command.\n```\njava -jar <path-to-packaged-jar-with-dependencies-from-step-1> <options-for-the-test>\njava -jar sdk/textanalytics/azure-ai-textanalytics-perf/target/azure-ai-textanalytics-perf-1.0.0-beta.1-jar-with-dependencies.jar detectlanguage --warmup 1 --iterations 1 --parallel 50 --duration 15 --count 1000\n```\n\n### Common perf test command line options for Text Analytics\n- `--duration` - Number of seconds to run the main test for. Default is 10.\n- `--iterations` - Number of iterations of main test loop.\n- `--parallel` - Number of operations to execute in parallel,\n- `--warmup` - Duration of test warmup time in seconds before the test attributes are calculated.\n\nUse [PerfStressOptions](https://github.com/Azure/azure-sdk-for-java/blob/main/common/perf-test-core/src/main/java/com/azure/perf/test/core/PerfStressOptions.java)\nfor the other command line options that could be used.\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[azure_subscription]: https://azure.microsoft.com/free\n[jdk_link]: https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable\n[text_analytics_account]: https://docs.microsoft.com/azure/cognitive-services/cognitive-services-apis-create-account?tabs=singleservice%2Cwindows\n",
        "repo_name": "textanalytics/azure-ai-textanalytics-perf",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/textanalytics/azure-ai-textanalytics-perf",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Text Analytics client library for Java\nThe Azure Cognitive Service for Language is a cloud-based service that provides Natural Language Processing (NLP) \nfeatures for understanding and analyzing text, and includes the following main features:\n\n- Sentiment Analysis\n- Entity Recognition (Named, Linked, and Personally Identifiable Information (PII) entities)\n- Language Detection\n- Key Phrase Extraction\n- Multiple Actions Analysis Per Document\n- Healthcare Entities Analysis\n- Abstractive Text Summarization\n- Extractive Text Summarization\n- Custom Named Entity Recognition\n- Custom Text Classification\n\n[Source code][source_code] | [Package (Maven)][package] | [API reference documentation][api_reference_doc] | [Product Documentation][product_documentation] | [Samples][samples_readme]\n\n## Getting started\n\n### Prerequisites\n- A [Java Development Kit (JDK)][jdk_link], version 8 or later.\n- [Azure Subscription][azure_subscription]\n- [Cognitive Services or Language service account][language_service_account] to use this package.\n\n### Include the Package\n\n#### Include the BOM file\n\nPlease include the azure-sdk-bom to your project to take dependency on GA version of the library. In the following snippet, replace the {bom_version_to_target} placeholder with the version number.\nTo learn more about the BOM, see the [AZURE SDK BOM README](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/boms/azure-sdk-bom/README.md).\n\n```xml\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>com.azure</groupId>\n            <artifactId>azure-sdk-bom</artifactId>\n            <version>{bom_version_to_target}</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n```\nand then include the direct dependency in the dependencies section without the version tag.\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-ai-textanalytics</artifactId>\n  </dependency>\n</dependencies>\n```\n\n#### Include direct dependency\nIf you want to take dependency on a particular version of the library that is not present in the BOM,\nadd the direct dependency to your project as follows.\n\n[//]: # ({x-version-update-start;com.azure:azure-ai-textanalytics;current})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-ai-textanalytics</artifactId>\n    <version>5.3.0</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n**Note:** This version of the client library defaults to the `2023-04-01` version of the service.\nIt is a newer version than `3_0`, `3_1` and `2022-05-01`.\n\nThis table shows the relationship between SDK services and supported API versions of the service:\n\n|SDK version|Supported API version of service\n|-|-\n|5.3.x | 3.0, 3.1, 2022-05-01, 2023-04-01 (default)\n|5.2.x | 3.0, 3.1, 2022-05-01\n|5.1.x | 3.0, 3.1 \n|5.0.x | 3.0\n\n#### Create a Cognitive Services or Language Service resource\nThe Language service supports both [multi-service and single-service access][service_access]. Create a Cognitive Services \nresource if you plan to access multiple cognitive services under a single endpoint/key. For Language service access only,\ncreate a Language service resource.\n\nYou can create the resource using the [Azure Portal][create_new_resource_in_azure_portal] or \n[Azure CLI][azure_cli_doc] following the steps in [this document][create_new_resource_in_azure_cli].\n\n### Authenticate the client\nIn order to interact with the Language service, you will need to create an instance of the Text Analytics client,\nboth the asynchronous and synchronous clients can be created by using `TextAnalyticsClientBuilder` invoking `buildClient()`\ncreates a synchronous client while `buildAsyncClient()` creates its asynchronous counterpart.\n\nYou will need an **endpoint** and either a **key** or **AAD TokenCredential** to instantiate a client object. \n\n#### Looking up the endpoint\nYou can find the **endpoint** for your Language service resource in the [Azure Portal][azure_portal] under the\n\"Keys and Endpoint\", or [Azure CLI][azure_cli_endpoint].\n```bash\n# Get the endpoint for the Language service resource\naz cognitiveservices account show --name \"resource-name\" --resource-group \"resource-group-name\" --query \"endpoint\"\n```\n\n#### Create a Text Analytics client with key credential\nOnce you have the value for the [key][key], provide it as a string to the [AzureKeyCredential][azure_key_credential].\nThis can be found in the [Azure Portal][azure_portal] under the \"Keys and Endpoint\" section in your created Language \nservice resource or by running the following Azure CLI command:\n\n```bash\naz cognitiveservices account keys list --resource-group <your-resource-group-name> --name <your-resource-name>\n```\n\nUse the key as the credential parameter to authenticate the client:\n```java readme-sample-createTextAnalyticsClientWithKeyCredential\nTextAnalyticsClient textAnalyticsClient = new TextAnalyticsClientBuilder()\n    .credential(new AzureKeyCredential(\"{key}\"))\n    .endpoint(\"{endpoint}\")\n    .buildClient();\n```\n\nThe Azure Text Analytics client library provides a way to **rotate the existing key**.\n```java readme-sample-rotatingAzureKeyCredential\nAzureKeyCredential credential = new AzureKeyCredential(\"{key}\");\nTextAnalyticsClient textAnalyticsClient = new TextAnalyticsClientBuilder()\n    .credential(credential)\n    .endpoint(\"{endpoint}\")\n    .buildClient();\n\ncredential.update(\"{new_key}\");\n```\n\n#### Create a Text Analytics client with Azure Active Directory credential\nAzure SDK for Java supports an Azure Identity package, making it easy to get credentials from Microsoft identity\nplatform. \n\nAuthentication with AAD requires some initial setup:\n* Add the Azure Identity package\n\n[//]: # ({x-version-update-start;com.azure:azure-identity;dependency})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-identity</artifactId>\n    <version>1.9.0</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n* [Register a new Azure Active Directory application][register_AAD_application]\n* [Grant access][grant_access] to Language service by assigning the `\"Cognitive Services User\"` role to your service principal.\n\nAfter setup, you can choose which type of [credential][azure_identity_credential_type] from azure.identity to use. \nAs an example, [DefaultAzureCredential][wiki_identity] can be used to authenticate the client:\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: \nAZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET. \n\nAuthorization is easiest using [DefaultAzureCredential][wiki_identity]. It finds the best credential to use in its\nrunning environment. For more information about using Azure Active Directory authorization with Language service, please\nrefer to [the associated documentation][aad_authorization].\n\n```java readme-sample-createTextAnalyticsAsyncClientWithAAD\nTokenCredential defaultCredential = new DefaultAzureCredentialBuilder().build();\nTextAnalyticsAsyncClient textAnalyticsAsyncClient = new TextAnalyticsClientBuilder()\n    .endpoint(\"{endpoint}\")\n    .credential(defaultCredential)\n    .buildAsyncClient();\n```\n\n## Key concepts\n### Text Analytics client\nThe Text Analytics client library provides a [TextAnalyticsClient][text_analytics_sync_client] and \n[TextAnalyticsAsyncClient][text_analytics_async_client] to do analysis on batches of documents. It provides both synchronous and\nasynchronous operations to access a specific use of Language service, such as language detection or key phrase extraction.\n\n### Input\nA **text input**, also called a **document**, is a single unit of document to be analyzed by the predictive models\nin the Language service. Operations on a Text Analytics client may take a single document or a collection\nof documents to be analyzed as a batch. \nSee [service limitations][service_input_limitation] for the document, including document length limits, maximum batch size,\nand supported text encoding.\n\n### Operation on multiple documents\nFor each supported operation, the Text Analytics client provides method overloads to take a single document, a batch \nof documents as strings, or a batch of either `TextDocumentInput` or `DetectLanguageInput` objects. The overload \ntaking the `TextDocumentInput` or `DetectLanguageInput` batch allows callers to give each document a unique ID, \nindicate that the documents in the batch are written in different languages, or provide a country hint about the \nlanguage of the document.\n\n### Return value\nAn operation result, such as `AnalyzeSentimentResult`, is the result of a Language service operation, containing a \nprediction or predictions about a single document and a list of warnings inside of it. An operation's result type also \nmay optionally include information about the input document and how it was processed. An operation result contains a \n`isError` property that allows to identify if an operation executed was successful or unsuccessful for the given\ndocument. When the operation results an error, you can simply call `getError()` to get `TextAnalyticsError` which \ncontains the reason why it is unsuccessful. If you are interested in how many characters are in your document, \nor the number of operation transactions that have gone through, simply call `getStatistics()` to get the\n`TextDocumentStatistics` which contains both information. \n\n### Return value collection\nAn operation result collection, such as `AnalyzeSentimentResultCollection`, which is the collection of \nthe result of analyzing sentiment operation. It also includes the model version of the operation and statistics of \nthe batch documents. \n\n**Note**: It is recommended to use the batch methods when working on production environments as they allow you to send one \nrequest with multiple documents. This is more performant than sending a request per each document.\n\n## Examples\nThe following sections provide several code snippets covering some of the most common Language service tasks, including:\n\n* [Analyze Sentiment](#analyze-sentiment \"Analyze sentiment\")\n* [Detect Language](#detect-language \"Detect language\")\n* [Extract Key Phrases](#extract-key-phrases \"Extract key phrases\")\n* [Recognize Named Entities](#recognize-named-entities \"Recognize named entities\")\n* [Recognize Personally Identifiable Information Entities](#recognize-personally-identifiable-information-entities \"Recognize Personally Identifiable Information entities\")\n* [Recognize Linked Entities](#recognize-linked-entities \"Recognize linked entities\")\n* [Analyze Healthcare Entities](#analyze-healthcare-entities \"Analyze healthcare entities\")\n* [Analyze Multiple Actions](#analyze-multiple-actions \"Analyze multiple actions\")\n* [Custom Entities Recognition](#custom-entities-recognition \"Custom entities recognition\")\n* [Custom Text Classification](#custom-text-classification \"Custom text classification\")\n* [Abstractive Text Summarization][abstractive_summary_action_sample]\n* [Extractive Text Summarization][extractive_summary_action_sample]\n\n### Text Analytics Client\nLanguage service supports both synchronous and asynchronous client creation by using\n`TextAnalyticsClientBuilder`,\n\n``` java readme-sample-createTextAnalyticsClientWithKeyCredential\nTextAnalyticsClient textAnalyticsClient = new TextAnalyticsClientBuilder()\n    .credential(new AzureKeyCredential(\"{key}\"))\n    .endpoint(\"{endpoint}\")\n    .buildClient();\n```\n\nor\n\n``` java readme-sample-createTextAnalyticsAsyncClientWithKeyCredential\nTextAnalyticsAsyncClient textAnalyticsAsyncClient = new TextAnalyticsClientBuilder()\n    .credential(new AzureKeyCredential(\"{key}\"))\n    .endpoint(\"{endpoint}\")\n    .buildAsyncClient();\n```\n\n### Analyze sentiment\nRun a predictive model to identify the positive, negative, neutral or mixed sentiment contained in the\nprovided document or batch of documents.\n``` java readme-sample-analyzeSentiment\nString document = \"The hotel was dark and unclean. I like microsoft.\";\nDocumentSentiment documentSentiment = textAnalyticsClient.analyzeSentiment(document);\nSystem.out.printf(\"Analyzed document sentiment: %s.%n\", documentSentiment.getSentiment());\ndocumentSentiment.getSentences().forEach(sentenceSentiment ->\n    System.out.printf(\"Analyzed sentence sentiment: %s.%n\", sentenceSentiment.getSentiment()));\n```\n\nFor samples on using the production recommended option `AnalyzeSentimentBatch` see [here][analyze_sentiment_sample].\n\nTo get more granular information about the opinions related to aspects of a product/service, also knows as Aspect-based\nSentiment Analysis in Natural Language Processing (NLP), see sample on sentiment analysis with opinion mining see \n[here][analyze_sentiment_with_opinion_mining_sample].\n\nPlease refer to the service documentation for a conceptual discussion of [sentiment analysis][sentiment_analysis].\n\n### Detect language\nRun a predictive model to determine the language that the provided document or batch of documents are written in.\n\n```java readme-sample-detectLanguages\nString document = \"Bonjour tout le monde\";\nDetectedLanguage detectedLanguage = textAnalyticsClient.detectLanguage(document);\nSystem.out.printf(\"Detected language name: %s, ISO 6391 name: %s, confidence score: %f.%n\",\n    detectedLanguage.getName(), detectedLanguage.getIso6391Name(), detectedLanguage.getConfidenceScore());\n```\nFor samples on using the production recommended option `DetectLanguageBatch` see [here][detect_language_sample].\nPlease refer to the service documentation for a conceptual discussion of [language detection][language_detection].\n\n### Extract key phrases\nRun a model to identify a collection of significant phrases found in the provided document or batch of documents.\n\n```java readme-sample-extractKeyPhrases\nString document = \"My cat might need to see a veterinarian.\";\nSystem.out.println(\"Extracted phrases:\");\ntextAnalyticsClient.extractKeyPhrases(document).forEach(keyPhrase -> System.out.printf(\"%s.%n\", keyPhrase));\n```\nFor samples on using the production recommended option `ExtractKeyPhrasesBatch` see [here][extract_key_phrases_sample].\nPlease refer to the service documentation for a conceptual discussion of [key phrase extraction][key_phrase_extraction].\n\n### Recognize named entities\nRun a predictive model to identify a collection of named entities in the provided document or batch of documents and \ncategorize those entities into categories such as person, location, or organization.  For more information on available\ncategories, see [Named Entity Categories][named_entities_categories].\n\n```java readme-sample-recognizeEntity\nString document = \"Satya Nadella is the CEO of Microsoft\";\ntextAnalyticsClient.recognizeEntities(document).forEach(entity ->\n    System.out.printf(\"Recognized entity: %s, category: %s, subcategory: %s, confidence score: %f.%n\",\n        entity.getText(), entity.getCategory(), entity.getSubcategory(), entity.getConfidenceScore()));\n```\nFor samples on using the production recommended option `RecognizeEntitiesBatch` see [here][recognize_entities_sample].\nPlease refer to the service documentation for a conceptual discussion of [named entity recognition][named_entity_recognition].\n\n### Recognize Personally Identifiable Information entities\nRun a predictive model to identify a collection of Personally Identifiable Information(PII) entities in the provided \ndocument. It recognizes and categorizes PII entities in its input text, such as\nSocial Security Numbers, bank account information, credit card numbers, and more. This endpoint is only supported for\nAPI versions v3.1-preview.1 and above.\n\n```java readme-sample-recognizePiiEntity\nString document = \"My SSN is 859-98-0987\";\nPiiEntityCollection piiEntityCollection = textAnalyticsClient.recognizePiiEntities(document);\nSystem.out.printf(\"Redacted Text: %s%n\", piiEntityCollection.getRedactedText());\npiiEntityCollection.forEach(entity -> System.out.printf(\n    \"Recognized Personally Identifiable Information entity: %s, entity category: %s, entity subcategory: %s,\"\n        + \" confidence score: %f.%n\",\n    entity.getText(), entity.getCategory(), entity.getSubcategory(), entity.getConfidenceScore()));\n```\n\nFor samples on using the production recommended option `RecognizePiiEntitiesBatch` see [here][recognize_pii_entities_sample].\nPlease refer to the service documentation for [supported PII entity types][pii_entity_recognition].\n\n### Recognize linked entities\nRun a predictive model to identify a collection of entities found in the provided document or batch of documents, \nand include information linking the entities to their corresponding entries in a well-known knowledge base.\n\n```java readme-sample-recognizeLinkedEntity\nString document = \"Old Faithful is a geyser at Yellowstone Park.\";\ntextAnalyticsClient.recognizeLinkedEntities(document).forEach(linkedEntity -> {\n    System.out.println(\"Linked Entities:\");\n    System.out.printf(\"Name: %s, entity ID in data source: %s, URL: %s, data source: %s.%n\",\n        linkedEntity.getName(), linkedEntity.getDataSourceEntityId(), linkedEntity.getUrl(), linkedEntity.getDataSource());\n    linkedEntity.getMatches().forEach(match ->\n        System.out.printf(\"Text: %s, confidence score: %f.%n\", match.getText(), match.getConfidenceScore()));\n});\n```\nFor samples on using the production recommended option `RecognizeLinkedEntitiesBatch` see [here][recognize_linked_entities_sample].\nPlease refer to the service documentation for a conceptual discussion of [entity linking][entity_linking].\n\n### Analyze healthcare entities\nText Analytics for health is a containerized service that extracts and labels relevant medical information from \nunstructured texts such as doctor's notes, discharge summaries, clinical documents, and electronic health records.\n\n- [Healthcare entities recognition][recognize_healthcare_entities_sample]\n\nFor more information see [How to: Use Text Analytics for health][healthcare].\n\n### Custom entities recognition\nCustom NER is one of the custom features offered by Azure Cognitive Service for Language. It is a cloud-based API \nservice that applies machine-learning intelligence to enable you to build custom models for custom named entity\nrecognition tasks.\n\n- [Custom entities recognition][recognize_custom_entities_sample]\n\nFor more information see [How to use: Custom Entities Recognition][custom_entities_recognition_overview].\n\n### Custom text classification\nCustom text classification is one of the custom features offered by Azure Cognitive Service for Language. It is a \ncloud-based API service that applies machine-learning intelligence to enable you to build custom models for text \nclassification tasks.\n\n- [Single label classification][single_label_classification_sample]\n\n- [Multi label classification][multi_label_classification_sample]\n\nFor more information see [How to use: Custom Text Classification][custom_text_classification_overview].\n\n### Analyze multiple actions\nThe `Analyze` functionality allows choosing which of the supported Language service features to execute in the same\nset of documents. Currently, the supported features are:\n\n- Named Entities Recognition\n- PII Entities Recognition\n- Linked Entity Recognition\n- Key Phrase Extraction\n- Sentiment Analysis\n- Healthcare Analysis\n- Custom Entity Recognition (API version 2022-05-01 and newer)\n- Custom Single-Label Classification (API version 2022-05-01 and newer)\n- Custom Multi-Label Classification (API version 2022-05-01 and newer)\n- Abstractive Text Summarization (API version 2023-04-01 and newer)\n- Extractive Text Summarization (API version 2023-04-01 and newer)\n\n\nSample: [Multiple action analysis][multiple_actions_analysis_sample]\n\nFor more examples, such as asynchronous samples, refer to [here][samples_readme].\n\n## Troubleshooting\n### General\nText Analytics clients raise exceptions. For example, if you try to detect the languages of a batch of text with same \ndocument IDs, `400` error is return that indicating bad request. In the following code snippet, the error is handled \ngracefully by catching the exception and display the additional information about the error.\n\n```java readme-sample-handlingException\nList<DetectLanguageInput> documents = Arrays.asList(\n    new DetectLanguageInput(\"1\", \"This is written in English.\", \"us\"),\n    new DetectLanguageInput(\"1\", \"Este es un documento  escrito en Espa\u00f1ol.\", \"es\")\n);\n\ntry {\n    textAnalyticsClient.detectLanguageBatchWithResponse(documents, null, Context.NONE);\n} catch (HttpResponseException e) {\n    System.out.println(e.getMessage());\n}\n```\n\n### Enable client logging\nYou can set the `AZURE_LOG_LEVEL` environment variable to view logging statements made in the client library. For\nexample, setting `AZURE_LOG_LEVEL=2` would show all informational, warning, and error log messages. The log levels can\nbe found here: [log levels][LogLevels].\n\n### Default HTTP Client\nAll client libraries by default use the Netty HTTP client. Adding the above dependency will automatically configure \nthe client library to use the Netty HTTP client. Configuring or changing the HTTP client is detailed in the\n[HTTP clients wiki](https://github.com/Azure/azure-sdk-for-java/wiki/HTTP-clients).\n\n### Default SSL library\nAll client libraries, by default, use the Tomcat-native Boring SSL library to enable native-level performance for SSL \noperations. The Boring SSL library is an uber jar containing native libraries for Linux / macOS / Windows, and provides \nbetter performance compared to the default SSL implementation within the JDK. For more information, including how to \nreduce the dependency size, refer to the [performance tuning][performance_tuning] section of the wiki.\n\n## Next steps\n- Samples are explained in detail [here][samples_readme].\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a [Contributor License Agreement (CLA)][cla] declaring that you have the right to, and actually do, grant us the rights to use your contribution.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n[aad_authorization]: https://docs.microsoft.com/azure/cognitive-services/authentication#authenticate-with-azure-active-directory\n[aad_credential]: https://docs.microsoft.com/azure/cognitive-services/authentication#authenticate-with-azure-active-directory\n[api_reference_doc]: https://aka.ms/azsdk-java-textanalytics-ref-docs\n[authentication]: https://docs.microsoft.com/azure/cognitive-services/authentication\n[azure_cli_doc]: https://learn.microsoft.com/cli/azure/\n[azure_cli_endpoint]: https://docs.microsoft.com/cli/azure/cognitiveservices/account?view=azure-cli-latest#az-cognitiveservices-account-show\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/identity/azure-identity\n[azure_identity_credential_type]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/identity/azure-identity#credentials\n[azure_key_credential]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core/src/main/java/com/azure/core/credential/AzureKeyCredential.java\n[azure_portal]: https://ms.portal.azure.com\n[azure_subscription]: https://azure.microsoft.com/free\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n[create_new_resource_in_azure_portal]: https://docs.microsoft.com/azure/cognitive-services/cognitive-services-apis-create-account?tabs=multiservice%2Cwindows#create-a-new-azure-cognitive-services-resource\n[create_new_resource_in_azure_cli]: https://learn.microsoft.com/azure/cognitive-services/cognitive-services-apis-create-account-cli?tabs=windows\n[custom_entities_recognition_overview]: https://docs.microsoft.com/azure/cognitive-services/language-service/custom-named-entity-recognition/overview\n[custom_subdomain]: https://docs.microsoft.com/azure/cognitive-services/authentication#create-a-resource-with-a-custom-subdomain\n[custom_text_classification_overview]: https://docs.microsoft.com/azure/cognitive-services/language-service/custom-text-classification/overview\n[grant_access]: https://docs.microsoft.com/azure/cognitive-services/authentication#assign-a-role-to-a-service-principal\n[healthcare]: https://docs.microsoft.com/azure/cognitive-services/language-service/text-analytics-for-health/overview?tabs=ner\n[jdk_link]: https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable\n[key]: https://docs.microsoft.com/azure/cognitive-services/cognitive-services-apis-create-account?tabs=multiservice%2Cwindows#get-the-keys-for-your-resource\n[key_phrase_extraction]: https://docs.microsoft.com/azure/cognitive-services/language-service/key-phrase-extraction/overview\n[language_detection]: https://docs.microsoft.com/azure/cognitive-services/language-service/language-detection/overview\n[language_regional_support]: https://docs.microsoft.com/azure/cognitive-services/language-service/language-detection/language-support\n[named_entity_recognition]: https://docs.microsoft.com/azure/cognitive-services/language-service/named-entity-recognition/overview\n[named_entities_categories]: https://docs.microsoft.com/azure/cognitive-services/language-service/named-entity-recognition/concepts/named-entity-categories\n[entity_linking]: https://docs.microsoft.com/azure/cognitive-services/language-service/entity-linking/overview\n[pii_entity_recognition]: https://docs.microsoft.com/azure/cognitive-services/language-service/personally-identifiable-information/overview\n[package]: https://mvnrepository.com/artifact/com.azure/azure-ai-textanalytics\n[performance_tuning]: https://github.com/Azure/azure-sdk-for-java/wiki/Performance-Tuning\n[product_documentation]: https://docs.microsoft.com/azure/cognitive-services/language-service/overview\n[register_AAD_application]: https://docs.microsoft.com/azure/cognitive-services/authentication#assign-a-role-to-a-service-principal\n[service_access]: https://docs.microsoft.com/azure/cognitive-services/cognitive-services-apis-create-account?tabs=multiservice%2Cwindows\n[service_input_limitation]: https://docs.microsoft.com/azure/cognitive-services/language-service/overview#data-limits\n[sentiment_analysis]: https://docs.microsoft.com/azure/cognitive-services/language-service/sentiment-opinion-mining/overview\n[source_code]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/textanalytics/azure-ai-textanalytics/src\n[language_service_account]: https://docs.microsoft.com/azure/cognitive-services/cognitive-services-apis-create-account?tabs=multiservice%2Cwindows\n[text_analytics_async_client]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClient.java\n[text_analytics_sync_client]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/TextAnalyticsClient.java\n[wiki_identity]: https://github.com/Azure/azure-sdk-for-java/wiki/Identity-and-Authentication\n[LogLevels]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core/src/main/java/com/azure/core/util/logging/ClientLogger.java\n\n[samples_readme]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/textanalytics/azure-ai-textanalytics/src/samples/README.md\n[abstractive_summary_action_sample]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/lro/AbstractiveSummarization.java\n[analyze_sentiment_sample]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/batch/AnalyzeSentimentBatchDocuments.java\n[analyze_sentiment_with_opinion_mining_sample]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/AnalyzeSentimentWithOpinionMining.java\n[detect_language_sample]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/batch/DetectLanguageBatchDocuments.java\n[extract_key_phrases_sample]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/batch/ExtractKeyPhrasesBatchDocuments.java\n[extractive_summary_action_sample]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/lro/ExtractiveSummarization.java\n[multi_label_classification_sample]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/lro/MultiLabelClassifyDocument.java\n[multiple_actions_analysis_sample]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/lro/AnalyzeActions.java\n[recognize_entities_sample]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/batch/RecognizeEntitiesBatchDocuments.java\n[recognize_pii_entities_sample]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/batch/RecognizePiiEntitiesBatchDocuments.java\n[recognize_linked_entities_sample]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/batch/RecognizeLinkedEntitiesBatchDocuments.java\n[recognize_healthcare_entities_sample]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/lro/AnalyzeHealthcareEntities.java\n[recognize_custom_entities_sample]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/lro/RecognizeCustomEntities.java\n[single_label_classification_sample]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/lro/SingleLabelClassifyDocument.java\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Ftextanalytics%2Fazure-ai-textanalytics%2FREADME.png)\n",
        "repo_name": "textanalytics/azure-ai-textanalytics",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/textanalytics/azure-ai-textanalytics",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager TimeSeriesInsights client library for Java\n\nAzure Resource Manager TimeSeriesInsights client library for Java.\n\nThis package contains Microsoft Azure SDK for TimeSeriesInsights Management SDK. Time Series Insights client. Package tag package-2020-05-15. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-timeseriesinsights;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-timeseriesinsights</artifactId>\n    <version>1.0.0-beta.2</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nTimeSeriesInsightsManager manager = TimeSeriesInsightsManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/timeseriesinsights/azure-resourcemanager-timeseriesinsights/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "timeseriesinsights/azure-resourcemanager-timeseriesinsights",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/timeseriesinsights/azure-resourcemanager-timeseriesinsights",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure SDK Maven Archetype\n\nThe Azure SDK Maven archetype can accelerate the bootstrapping of a new project. The Azure SDK for Java Maven archetype \ncreates a new application, with files and a directory structure that follows best practices. In particular, the \nAzure SDK for Java Maven archetype creates a new Maven project with the following features:\n\n* A dependency on the latest `azure-sdk-bom` BOM release, to ensure that all Azure SDK for Java dependencies are aligned and give you the best developer experience possible.\n* Built-in support for GraalVM native image compilation.\n* Support for generating a new project with a specified set of Azure SDK for Java client libraries.\n* Integration with the Azure SDK for Java build tooling that will give build-time analysis of your project to ensure as many best practices are followed.\n\n> **Note**\n> All other Microsoft maintained Azure maven archetypes can be found at [https://github.com/microsoft/azure-maven-archetypes](https://github.com/microsoft/azure-maven-archetypes).\n\nAs the Azure SDK for Java Maven archetype is published to Maven Central, we can bootstrap a new application by using \nthe archetype directly.\n\n```shell\nmvn archetype:generate                        \\\n  -DarchetypeGroupId=com.azure.tools          \\\n  -DarchetypeArtifactId=azure-sdk-archetype\n```\n\nAfter entering this command, a series of prompts will ask for details about your project so that the archetype can \ngenerate the right output for you.\n\n\n| Name           | Description  |\n|----------------|--------------|\n| groupId        | (Required) Specifies the Maven groupId to use in the POM file created for the generated project.  |\n| artifactId     | (Required) Specifies the Maven artifactId to use in the POM file created for the generated project.  |\n| package        | (Optional) Specifies the package name to put the generated code into. If not specified, it is inferred from the groupId. |\n| azureLibraries | (Optional) A comma-separated list of Azure SDK for Java libraries, using their Maven artifact IDs. A list of such artifact IDs can be found [here](https://azure.github.io/azure-sdk/releases/latest/java.html). |\n| enableGraalVM  | (Optional) By default GraalVM support will be enabled, but if `enableGraalVM` is set to false, the generated Maven POM file will not include support for compiling your application to a native image using GraalVM. |\n| javaVersion    | (Optional) Specifies the minimum version of the JDK to target when building the generated project. By default it is the latest LTS release (currently Java 17), with valid ranges from Java 8 up. The value should just be the required Java version, for example, '8', '11', '17', etc. |\n| junitVersion   | (Optional) The version of JUnit to include as a dependency. By default JUnit 5 will be used, but valid values are '4' and '5'. |\n\nIf you would rather provide these values at the time of calling the archetype command above (for example, for \nautomation purposes), you can specify them as parameters using the standard Maven syntax of appending `-D` to the \nparameter name, for example, `-DjavaVersion=17`.\n",
        "repo_name": "tools/azure-sdk-archetype",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/tools/azure-sdk-archetype",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure SDK Maven Build Tool\n\nThe Azure SDK for Java project ships a Maven build tool that developers can choose to include in their projects. This tool runs locally and does not transmit any data to Microsoft. It can be configured to generate a report or fail the build when certain conditions are met, which is useful to ensure compliance with numerous best practices. These include:\n\n- Validating the correct use of the azure-sdk-for-java BOM, including using the latest version and relying on it to \ndefine dependency versions on Azure SDK for Java client libraries.\n- Validating that historical Azure client libraries are not being used when newer and improved versions exist.\n- Providing insight into usage of beta APIs.\n\nThe build tool can be configured in a project Maven POM file as such:\n\n```xml\n<build>\n    <plugins>\n        <plugin>\n            <groupId>com.azure.tools</groupId>\n            <artifactId>azure-sdk-build-tool</artifactId>\n            <version>{latest_version}</version>\n            <configuration>\n            ...\n            </configuration>\n        </plugin>\n    </plugins>\n</build>\n```\nWithin the configuration section, it is possible to configure the settings in the table below if desired, but by default they are configured with the recommended settings. Because of this, it is ok to not have any configuration specified at all.\n\n\n| Property                                 | Default Value | Description                                                                                                                                                                                                                                      |\n|------------------------------------------|---------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| validateAzureSdkBomUsed                  | true          | Ensures that the build has the azure-sdk-for-java BOM referenced appropriately, so that Azure SDK for Java client library dependencies may take their versions from the BOM.                                                                     |\n| validateBomVersionsAreUsed               | true          | Ensures that where a dependency is available from the azure-sdk-for-java BOM the version is not being manually overridden.                                                                                                                       |\n| validateNoDeprecatedMicrosoftLibraryUsed | true          | Ensures that the project does not make use of previous-generation Azure libraries. Using the new and previous-generation libraries in a single project is unlikely to cause any issue, but is will result in a sub-optimal developer experience. |\n| validateNoBetaLibraryUsed                | false         | Some Azure SDK for Java client libraries have beta releases, with version strings in the form x.y.z-beta.n. Enabling this feature will ensure that no beta libraries are being used.                                                             |\n| validateNoBetaAPIUsed                    | true          | Azure SDK for Java client libraries sometimes do GA releases with methods annotated with @Beta. This check looks to see if any such methods are being used.                                                                                      |\n| validateLatestBomVersionUsed             | true          | Ensures that dependencies are kept up to date by reporting back (or failing the build) if a newer azure-sdk-for-java BOM exists.                                                                                                                 |\n| reportFile                               | \"\"            | (Optional) Specifies the location to write the build report out to, in JSON format. If not specified, no report will be written (and a summary of the build, or the appropriate build failures), will be shown in the terminal.                  |\nAfter adding the build tool into a Maven project, the tool can be run by calling `mvn compile azure:run`. Depending on \nthe configuration provided, you can expect to see build failures or report files generated that can inform you about potential issues before they become more serious.\n\nAs the build tool evolves, new releases will be published, and it is recommended that developers frequently check for new releases and update as appropriate.\n",
        "repo_name": "tools/azure-sdk-build-tool",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/tools/azure-sdk-build-tool",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Document Translator client library for Java\n\nMicrosoft Azure Cognitive Services Document Translator API enables you to translate documents in batch.\n\n[Source code][source_code] | [Package (Maven)][package] | [Product Documentation][product_documentation] | [Samples][samples_readme]\n\n## Getting started\n\n### Prerequisites\n\n- A [Java Development Kit (JDK)][jdk_link], version 8 or later.\n- [Azure Subscription][azure_subscription]\n- An existing Cognitive Services.\n\nFor more information about creating the resource or how to get the location and sku information see [here][cognitive_resource_cli].\n\n### Include the Package\n\n[//]: # ({x-version-update-start;com.azure:azure-ai-documenttranslator;current})\n```xml\n<dependency>\n  <groupId>com.azure</groupId>\n  <artifactId>azure-ai-documenttranslator</artifactId>\n  <version>1.0.0-beta.1</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n\n### Authenticate the client\nIn order to interact with the Document Translator service, you'll need to create an instance of the [`BatchDocumentTranslationClient`][batch_document_translation_client_class] class.  You will need an **endpoint** and an **API key** to instantiate a client object.  \n\n#### Get API Key\n\nYou can obtain the endpoint and API key from the resource information in the [Azure Portal][azure_portal] from your Document Translator resource. The endpoint is of format `https://<NAME-OF-YOUR-RESOURCE>.cognitiveservices.azure.com`. \n\n##### Example\n```java readme-sample-createBatchDocumentTranslationRestClient\nString endpoint = String.format(\"https://%s.cognitiveservices.azure.com/translator/text/batch/v1.0-preview.1\",\n    \"<document-translator-resource-name>\");\nString apiKey = \"<document-translator-api-key>\";\n\nBatchDocumentTranslationRestClient client = new BatchDocumentTranslationClientBuilder()\n    .credential(new AzureKeyCredential(apiKey))\n    .endpoint(endpoint)\n    .httpClient(new NettyAsyncHttpClientBuilder().build())\n    .buildRestClient();\n```\n\n## Key concepts\n\n## Examples\nMore examples can be found in [samples][samples_code].\n\n## Troubleshooting\n\n### Enabling Logging\n\nAzure SDKs for Java offer a consistent logging story to help aid in troubleshooting application errors and expedite\ntheir resolution. The logs produced will capture the flow of an application before reaching the terminal state to help\nlocate the root issue. View the [logging][logging] wiki for guidance about enabling logging.\n\n## Next steps\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a [Contributor License Agreement (CLA)][cla] declaring that you have the right to, and actually do, grant us the rights to use your contribution.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n[samples]: src/samples/java/com/azure/ai/documenttranslator\n[source_code]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/translation/azure-ai-documenttranslator/src\n[samples_code]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/translation/azure-ai-documenttranslator/src/samples/\n[azure_subscription]: https://azure.microsoft.com/free/\n[product_documentation]: https://docs.microsoft.com/azure/cognitive-services/translator/document-translation/get-started-with-document-translation\n[cognitive_resource_cli]: https://docs.microsoft.com/azure/cognitive-services/cognitive-services-apis-create-account-cli\n[batch_document_translation_client_class]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/translation/azure-ai-documenttranslator/src/main/java/com/azure/ai/documenttranslator/BatchDocumentTranslationRestClient.java\n[azure_portal]: https://portal.azure.com\n[jdk_link]: https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable\n[package]: https://mvnrepository.com/artifact/com.azure/azure-ai-documenttranslator\n[samples_readme]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/translation/azure-ai-documenttranslator/src/samples/README.md\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Ftranslation%2Fazure-ai-documenttranslator%2FREADME.png)\n",
        "repo_name": "translation/azure-ai-documenttranslator",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/translation/azure-ai-documenttranslator",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Text Translation client library for Java\n\nText translation is a cloud-based REST API feature of the Translator service that uses neural machine translation technology to enable quick and accurate source-to-target text translation in real time across all supported languages.\n\nUse the Text Translation client library for Java to:\n\n* Return a list of languages supported by Translate, Transliterate, and Dictionary operations.\n\n* Render single source-language text to multiple target-language texts with a single request.\n\n* Convert text of a source language in letters of a different script.\n\n* Return equivalent words for the source term in the target language.\n\n* Return grammatical structure and context examples for the source term and target term pair.\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n- [Product documentation][product_documentation]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n- An existing Translator service or Cognitive Services resource.\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure:azure-ai-translation-text;current})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-ai-translation-text</artifactId>\n    <version>1.0.0-beta.1</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Authentication\n\nInteraction with the service using the client library begins with creating an instance of the [TextTranslationClient][translator_client_class] class. You will need an **API key** or ``TokenCredential`` to instantiate a client object. For more information regarding authenticating with cognitive services, see [Authenticate requests to Translator Service][translator_auth].\n\n#### Get an API key\n\nYou can get the `endpoint`, `API key` and `Region` from the Cognitive Services resource or Translator service resource information in the [Azure Portal][azure_portal].\n\nAlternatively, use the [Azure CLI][azure_cli] snippet below to get the API key from the Translator service resource.\n\n```PowerShell\naz cognitiveservices account keys list --resource-group <your-resource-group-name> --name <your-resource-name>\n```\n\n#### Create a `TextTranslationClient` using an API key and Region credential\n\nOnce you have the value for the API key and Region, create an `AzureKeyCredential`. This will allow you to\nupdate the API key without creating a new client.\n\nWith the value of the endpoint, `AzureKeyCredential` and a `Region`, you can create the [TextTranslationClient][translator_client_class]:\n\n```Java\nString apiKey = System.getenv(\"TEXT_TRANSLATOR_API_KEY\");\nString region = System.getenv(\"TEXT_TRANSLATOR_API_REGION\");\nAzureKeyCredential credential = new AzureKeyCredential(apiKey);\n\nTextTranslationClient client = new TextTranslationClientBuilder()\n.credential(credential)\n.region(region)\n.buildClient();\n```\n\n## Key concepts\n\n### `TextTranslationClient` and `TextTranslationAsyncClient`\n\nA `TextTranslationClient` is the primary interface for developers using the Text Translator client library. It provides both synchronous operations to access a specific use of text translator, such as get supported languages detection or text translation.\n\nFor asynchronous operations use `TextTranslationAsyncClient`.\n\n### Input\n\nA **text element** (`InputTextItem`), is a single unit of input to be processed by the translation models in the Translator service. Operations on `TextTranslationClient` may take a single text element or a collection of text elements.\nFor text element length limits, maximum requests size, and supported text encoding see [here][translator_limits].\n\n## Examples\n\nThe following section provides several code snippets using the `client` [created above](#create-a-texttranslationclient-using-an-api-key-and-region-credential), and covers the main features present in this client library. Although most of the snippets below make use of asynchronous service calls, keep in mind that the `Azure.AI.Translation.Text` package supports both synchronous and asynchronous APIs.\n\n### Get Supported Languages\n\nGets the set of languages currently supported by other operations of the Translator.\n\n```Java\nGetLanguagesResult languages = client.getLanguages();\n\nSystem.out.println(\"Number of supported languages for translate operation: \" + languages.getTranslation().size() + \".\");\nSystem.out.println(\"Number of supported languages for transliterate operation: \" + languages.getTransliteration().size() + \".\");\nSystem.out.println(\"Number of supported languages for dictionary operations: \" + languages.getDictionary().size() + \".\");\n\nSystem.out.println(\"Translation Languages:\");\nfor (Map.Entry<String, TranslationLanguage> translationLanguage : languages.getTranslation().entrySet()) {\n    System.out.println(translationLanguage.getKey() + \" -- name: \" + translationLanguage.getValue().getName() + \" (\" + translationLanguage.getValue().getNativeName() + \")\");\n}\n\nSystem.out.println(\"Transliteration Languages:\");\nfor (Map.Entry<String, TransliterationLanguage> transliterationLanguage : languages.getTransliteration().entrySet()) {\n    System.out.println(transliterationLanguage.getKey() + \" -- name: \" + transliterationLanguage.getValue().getName() + \", supported script count: \" + transliterationLanguage.getValue().getScripts().size());\n}\n\nSystem.out.println(\"Dictionary Languages:\");\nfor (Map.Entry<String, SourceDictionaryLanguage> dictionaryLanguage : languages.getDictionary().entrySet()) {\n    System.out.println(dictionaryLanguage.getKey() + \" -- name: \" + dictionaryLanguage.getValue().getName() + \", supported target languages count: \" + dictionaryLanguage.getValue().getTranslations().size());\n}\n```\n\nPlease refer to the service documentation for a conceptual discussion of [languages][languages_doc].\n\n### Translate\n\nRenders single source-language text to multiple target-language texts with a single request.\n\n```Java\nString from = \"en\";\nList<String> targetLanguages = new ArrayList<>();\ntargetLanguages.add(\"cs\");\nList<InputTextItem> content = new ArrayList<>();\ncontent.add(new InputTextItem(\"This is a test.\"));\n\nList<TranslatedTextItem> translations = client.translate(targetLanguages, content, null, from, TextType.PLAIN, null, ProfanityAction.NO_ACTION, ProfanityMarker.ASTERISK, false, false, null, null, null, false);\n\nfor (TranslatedTextItem translation : translations) {\n    for (Translation textTranslation : translation.getTranslations()) {\n        System.out.println(\"Text was translated to: '\" + textTranslation.getTo() + \"' and the result is: '\" + textTranslation.getText() + \"'.\");\n    }\n}\n```\n\nPlease refer to the service documentation for a conceptual discussion of [translate][translate_doc].\n\n### Transliterate\n\nConverts characters or letters of a source language to the corresponding characters or letters of a target language.\n\n```Java\nString language = \"zh-Hans\";\nString fromScript = \"Hans\";\nString toScript = \"Latn\";\nList<InputTextItem> content = new ArrayList<>();\ncontent.add(new InputTextItem(\"\u8fd9\u662f\u4e2a\u6d4b\u8bd5\u3002\"));\n\nList<TransliteratedText> transliterations = client.transliterate(language, fromScript, toScript, content);\n\nfor (TransliteratedText transliteration : transliterations) {\n    System.out.println(\"Input text was transliterated to '\" + transliteration.getScript() + \"' script. Transliterated text: '\" + transliteration.getText() + \"'.\");\n}\n```\n\nPlease refer to the service documentation for a conceptual discussion of [transliterate][transliterate_doc].\n\n### Break Sentence\n\nIdentifies the positioning of sentence boundaries in a piece of text.\n\n```Java\nString sourceLanguage = \"zh-Hans\";\nString sourceScript = \"Latn\";\nList<InputTextItem> content = new ArrayList<>();\ncontent.add(new InputTextItem(\"zh\u00e8 sh\u00ec g\u00e8 c\u00e8 sh\u00ec\u3002\"));\n\nList<BreakSentenceItem> breakSentences = client.findSentenceBoundaries(content, null, sourceLanguage, sourceScript);\n\nfor (BreakSentenceItem breakSentence : breakSentences) {\n    System.out.println(\"The detected sentence boundaries: \" + breakSentence.getSentLen());\n}\n```\n\nPlease refer to the service documentation for a conceptual discussion of [break sentence][breaksentence_doc].\n\n### Dictionary Lookup\n\nReturns equivalent words for the source term in the target language.\n\n```Java\nString sourceLanguage = \"en\";\nString targetLanguage = \"es\";\nList<InputTextItem> content = new ArrayList<>();\ncontent.add(new InputTextItem(\"fly\"));\n\nList<DictionaryLookupItem> dictionaryEntries = client.lookupDictionaryEntries(sourceLanguage, targetLanguage, content);\n\nfor (DictionaryLookupItem dictionaryEntry : dictionaryEntries) {\n    System.out.println(\"For the given input \" + dictionaryEntry.getTranslations().size() + \" entries were found in the dictionary.\");\n    System.out.println(\"First entry: '\" + dictionaryEntry.getTranslations().get(0).getDisplayTarget() + \"', confidence: \" + dictionaryEntry.getTranslations().get(0).getConfidence());\n}\n```\n\nPlease refer to the service documentation for a conceptual discussion of [dictionary lookup][dictionarylookup_doc].\n\n### Dictionary Examples\n\nReturns grammatical structure and context examples for the source term and target term pair.\n\n```Java\nString sourceLanguage = \"en\";\nString targetLanguage = \"es\";\nList<DictionaryExampleTextItem> content = new ArrayList<>();\ncontent.add(new DictionaryExampleTextItem(\"fly\", \"volar\"));\n\nList<DictionaryExampleItem> dictionaryEntries = client.lookupDictionaryExamples(sourceLanguage, targetLanguage, content);\n\nfor (DictionaryExampleItem dictionaryEntry : dictionaryEntries) {\n    System.out.println(\"For the given input \" + dictionaryEntry.getExamples().size() + \" entries were found in the dictionary.\");\n    System.out.println(\"Example: '\" + dictionaryEntry.getExamples().get(0).getTargetPrefix() + dictionaryEntry.getExamples().get(0).getTargetTerm() + dictionaryEntry.getExamples().get(0).getTargetSuffix());\n}\n```\n\nPlease refer to the service documentation for a conceptual discussion of [dictionary examples][dictionaryexamples_doc].\n\n## Troubleshooting\n\nWhen you interact with the Translator Service using the TextTranslator client library, errors returned by the Translator service correspond to the same HTTP status codes returned for REST API requests.\n\nFor example, if you submit a translation request without a target translate language, a `400` error is returned, indicating \"Bad Request\".\n\n## Next steps\n\nSamples showing how to use this client library are available in this GitHub repository.\nSamples are provided for each main functional area, and for each area, samples are provided in both sync and async mode.\n\n* [Translation][sample_translate]\n* [Translation with Language Detection][sample_translatedetection]\n* [Handling Profanities in Translation][sample_translateprofanity]\n* [Translation to multiple languages][sample_translatetargets]\n* [Translation of multiple sources][sample_translatesources]\n* [Translation and Transliteration][sample_translatetransliteration]\n* [Using Custom Translation Model][sample_translatecustom]\n* [Translation with Custom Dictionary][sample_translatedictionary]\n* [Translation with NoTranslate tag][sample_translatenotranslate]\n* [Translation with Alignments][sample_translatealignments]\n* [Translation with Sentence Boundaries][sample_translatesentencelength]\n* [Handling translation of HTML text][sample_translatetexttypes]\n* [Transliteration][sample_transliterate]\n* [Get Languages][sample_getlanguages]\n* [Get Localized Languages][sample_getlanguagesaccept]\n* [Get Scoped Languages][sample_getlanguagesscope]\n* [Find Sentence Boundaries][sample_breaksentence]\n* [Lookup Dictionary Examples][sample_dictionaryexamples]\n* [Lookup Dictionary Entries][sample_dictionarylookup]\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[product_documentation]: https://learn.microsoft.com/azure/cognitive-services/translator/reference/v3-0-reference\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_portal]: https://portal.azure.com\n\n[translator_auth]: https://learn.microsoft.com/azure/cognitive-services/translator/reference/v3-0-reference#authentication\n[translator_limits]: https://learn.microsoft.com/azure/cognitive-services/translator/request-limits\n\n[languages_doc]: https://learn.microsoft.com/azure/cognitive-services/translator/reference/v3-0-languages\n[translate_doc]: https://learn.microsoft.com/azure/cognitive-services/translator/reference/v3-0-translate\n[transliterate_doc]: https://learn.microsoft.com/azure/cognitive-services/translator/reference/v3-0-transliterate\n[breaksentence_doc]: https://learn.microsoft.com/azure/cognitive-services/translator/reference/v3-0-break-sentence\n[dictionarylookup_doc]: https://learn.microsoft.com/azure/cognitive-services/translator/reference/v3-0-dictionary-lookup\n[dictionaryexamples_doc]: https://learn.microsoft.com/azure/cognitive-services/translator/reference/v3-0-dictionary-examples\n\n[sample_breaksentence]: https://github.com/azure/azure-sdk-for-java/blob/main/sdk/translation/azure-ai-translation-text/src/samples/java/com/azure/ai/translation/text/BreakSentence.java\n[sample_dictionaryexamples]: https://github.com/azure/azure-sdk-for-java/blob/main/sdk/translation/azure-ai-translation-text/src/samples/java/com/azure/ai/translation/text/DictionaryExamples.java\n[sample_dictionarylookup]: https://github.com/azure/azure-sdk-for-java/blob/main/sdk/translation/azure-ai-translation-text/src/samples/java/com/azure/ai/translation/text/DictionaryLookup.java\n[sample_getlanguages]: https://github.com/azure/azure-sdk-for-java/blob/main/sdk/translation/azure-ai-translation-text/src/samples/java/com/azure/ai/translation/text/GetLanguages.java\n[sample_getlanguagesaccept]: https://github.com/azure/azure-sdk-for-java/blob/main/sdk/translation/azure-ai-translation-text/src/samples/java/com/azure/ai/translation/text/GetLanguagesAcceptLanguage.java\n[sample_getlanguagesscope]: https://github.com/azure/azure-sdk-for-java/blob/main/sdk/translation/azure-ai-translation-text/src/samples/java/com/azure/ai/translation/text/GetLanguagesScope.java\n[sample_translate]: https://github.com/azure/azure-sdk-for-java/blob/main/sdk/translation/azure-ai-translation-text/src/samples/java/com/azure/ai/translation/text/Translate.java\n[sample_translatealignments]: https://github.com/azure/azure-sdk-for-java/blob/main/sdk/translation/azure-ai-translation-text/src/samples/java/com/azure/ai/translation/text/TranslateAlignments.java\n[sample_translatecustom]: https://github.com/azure/azure-sdk-for-java/blob/main/sdk/translation/azure-ai-translation-text/src/samples/java/com/azure/ai/translation/text/TranslateCustom.java\n[sample_translatedetection]: https://github.com/azure/azure-sdk-for-java/blob/main/sdk/translation/azure-ai-translation-text/src/samples/java/com/azure/ai/translation/text/TranslateDetection.java\n[sample_translatedictionary]: https://github.com/azure/azure-sdk-for-java/blob/main/sdk/translation/azure-ai-translation-text/src/samples/java/com/azure/ai/translation/text/TranslateDictionary.java\n[sample_translatesources]: https://github.com/azure/azure-sdk-for-java/blob/main/sdk/translation/azure-ai-translation-text/src/samples/java/com/azure/ai/translation/text/TranslateMultipleSources.java\n[sample_translatetargets]: https://github.com/azure/azure-sdk-for-java/blob/main/sdk/translation/azure-ai-translation-text/src/samples/java/com/azure/ai/translation/text/TranslateMultipleTargets.java\n[sample_translatenotranslate]: https://github.com/azure/azure-sdk-for-java/blob/main/sdk/translation/azure-ai-translation-text/src/samples/java/com/azure/ai/translation/text/TranslateNoTranslate.java\n[sample_translateprofanity]: https://github.com/azure/azure-sdk-for-java/blob/main/sdk/translation/azure-ai-translation-text/src/samples/java/com/azure/ai/translation/text/TranslateProfanity.java\n[sample_translatesentencelength]: https://github.com/azure/azure-sdk-for-java/blob/main/sdk/translation/azure-ai-translation-text/src/samples/java/com/azure/ai/translation/text/TranslateSentenceLength.java\n[sample_translatetexttypes]: https://github.com/azure/azure-sdk-for-java/blob/main/sdk/translation/azure-ai-translation-text/src/samples/java/com/azure/ai/translation/text/TranslateTextType.java\n[sample_translatetransliteration]: https://github.com/azure/azure-sdk-for-java/blob/main/sdk/translation/azure-ai-translation-text/src/samples/java/com/azure/ai/translation/text/TranslateWithTransliteration.java\n[sample_transliterate]: https://github.com/azure/azure-sdk-for-java/blob/main/sdk/translation/azure-ai-translation-text/src/samples/java/com/azure/ai/translation/text/Transliterate.java\n\n[translator_client_class]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/translation/azure-ai-translation-text/src/main/java/com/azure/ai/translation/text/TextTranslationClient.java\n",
        "repo_name": "translation/azure-ai-translation-text",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/translation/azure-ai-translation-text",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Deprecated. Azure Video Analyzer Edge client library for Java\n\nDeprecated. We\u2019re retiring the Azure Video Analyzer preview service, you're advised to transition your applications off of Video Analyzer by 01 December 2022. This SDK is not longer maintained. \n\nAzure Video Analyzer is an [Azure Applied AI Service][applied-ai-service] that provides a platform for you to build intelligent video applications that can span both edge and cloud infrastructures. The platform offers the capability to capture, record, and analyze live video along with publishing the results, video and video analytics, to Azure services at the edge or in the cloud. It is designed to be an extensible platform, enabling you to connect different video inferencing edge modules such as Cognitive services modules, or custom inferencing modules that have been trained with your own data using either open-source machine learning or [Azure Machine Learning][machine-learning].\n\nUse the client library for Video Analyzer Edge to:\n\n-   Simplify interactions with the [Microsoft Azure IoT SDKs](https://github.com/azure/azure-iot-sdks)\n-   Programmatically construct pipeline topologies and live pipelines\n\n[Product documentation][doc_product] | [Direct methods][doc_direct_methods] | [Source code][source]\n\n## Getting started\n\n### Prerequisites\n\n-   A Java Development Kit, version 8 or later.\n-   You need an active [Azure subscription][azure_sub] and a IoT device connection string to use this package.\n-   To interact with Azure IoT Hub you will need to add their dependency to your `pom.xml`\n\n### Include the package\n\nInstall the Azure Video Analyzer Edge client library for Java with Maven:\n\n#<!-- {x-version-update;com.microsoft.azure.sdk.iot:iot-service-client;external_dependency} -->\n\n```xml\n<dependency>\n <groupId>com.microsoft.azure.sdk.iot</groupId>\n <artifactId>iot-service-client</artifactId>\n <version>1.28.0</version>\n</dependency>\n<dependency>\n <groupId>com.azure</groupId>\n <artifactId>azure-media-videoanalyzer-edge</artifactId>\n <version>1.0.0-beta.3</version>\n</dependency>\n```\n\n-   You will need to use the version of the SDK that corresponds to the version of the Video Analyzer edge module you are using.\n\n    | SDK          | Video Analyzer edge module |\n    | ------------ | -------------------------- |\n    | 1.0.0-beta.5 | 1.1                        |\n    | 1.0.0-beta.4 | 1.0                        |\n    | 1.0.0-beta.3 | 1.0                        |\n    | 1.0.0-beta.2 | 1.0                        |\n    | 1.0.0-beta.1 | 1.0                        |\n\n### Creating a pipeline topology and making requests\n\nPlease visit the [Examples](#examples) for starter code.\n\n## Key concepts\n\n### Pipeline topology vs live pipeline\n\nA _pipeline topology_ is a blueprint or template for creating live pipelines. It defines the parameters of the pipeline using placeholders as values for them. A _live pipeline_ references a pipeline topology and specifies the parameters. This way you are able to have multiple live pipelines referencing the same topology but with different values for parameters. For more information please visit [pipeline topologies and live pipelines][doc_pipelines].\n\n## Examples\n\n### Creating a pipeline topology\n\nTo create a pipeline topology you need to define sources and sinks.\n\n```java readme-sample-buildPipelineTopology\nprivate static PipelineTopology buildPipeLineTopology() {\n    IotHubMessageSource msgSource = new IotHubMessageSource(\"iotMsgSource\")\n        .setHubInputName(\"${hubSourceInput}\");\n\n    UsernamePasswordCredentials creds = new UsernamePasswordCredentials(\"${rtspUsername}\", \"${rtspPassword}\");\n\n    UnsecuredEndpoint endpoint = new UnsecuredEndpoint(\"${rtspUrl}\")\n        .setCredentials(creds);\n\n    RtspSource rtspSource = new RtspSource(\"rtspSource\", endpoint);\n\n    NodeInput rtspInput = new NodeInput(\"rtspSource\");\n\n    OutputSelector rtspOutputSelector = new OutputSelector()\n        .setProperty(OutputSelectorProperty.MEDIA_TYPE)\n        .setOperator(OutputSelectorOperator.IS)\n        .setValue(\"video\");\n    ImageScale imageScale = new ImageScale()\n        .setMode(ImageScaleMode.PRESERVE_ASPECT_RATIO)\n        .setHeight(\"416\")\n        .setWidth(\"416\");\n    ImageFormatBmp imageFormat = new ImageFormatBmp();\n    ImageProperties image = new ImageProperties()\n        .setScale(imageScale)\n        .setFormat(imageFormat);\n    ExtensionProcessorBase httpExtension = new HttpExtension(\"inferenceClient\", Arrays.asList(rtspInput), endpoint, image);\n\n    NodeInput nodeInput = new NodeInput(\"inferenceClient\");\n\n    IotHubMessageSink msgSink = new IotHubMessageSink(\"msgSink\",\n        Arrays.asList(nodeInput),\n        \"${hubSinkOutputName}\");\n\n    ParameterDeclaration userName = new ParameterDeclaration(\"rtspUserName\", ParameterType.STRING);\n\n    ParameterDeclaration password = new ParameterDeclaration(\"rtspPassword\", ParameterType.SECRET_STRING);\n    ParameterDeclaration url = new ParameterDeclaration(\"rtspUrl\", ParameterType.STRING);\n    ParameterDeclaration hubOutput = new ParameterDeclaration(\"hubSinkOutputName\", ParameterType.STRING);\n\n    PipelineTopologyProperties pipeProps = new PipelineTopologyProperties()\n        .setParameters(Arrays.asList(userName, password, url, hubOutput))\n        .setSources(Arrays.asList(rtspSource))\n        .setSinks(Arrays.asList(msgSink))\n        .setProcessors(Arrays.asList(httpExtension));\n\n    return new PipelineTopology(TOPOLOGY_NAME)\n        .setProperties(pipeProps);\n}\n```\n\n### Creating a live pipeline\n\nTo create a live pipeline, you need to have an existing pipeline topology.\n\n```java readme-sample-buildLivePipeline\nprivate static LivePipeline buildLivePipeline() {\n    ParameterDefinition hubParam = new ParameterDefinition(\"hubSinkOutputName\")\n        .setValue(\"testHubOutput\");\n    ParameterDefinition userParam = new ParameterDefinition(\"rtspUserName\")\n        .setValue(\"testuser\");\n    ParameterDefinition urlParam = new ParameterDefinition(\"rtspUrl\")\n        .setValue(\"rtsp://sample-url-from-camera\");\n    ParameterDefinition passParam = new ParameterDefinition(\"rtspPassword\")\n        .setValue(\"testpass\");\n\n    LivePipelineProperties livePipelineProps = new LivePipelineProperties()\n        .setParameters(Arrays.asList(urlParam, userParam, passParam, hubParam))\n        .setTopologyName(TOPOLOGY_NAME);\n\n    return new LivePipeline(LIVE_PIPELINE_NAME)\n        .setProperties(livePipelineProps);\n}\n```\n\n### Invoking a direct method\n\n```java readme-sample-invokeDirectMethodHelper\nprivate static MethodResult invokeDirectMethodHelper(DeviceMethod client, String methodName, String payload) throws IOException, IotHubException {\n    MethodResult result = null;\n    try {\n        result = client.invoke(iothubDeviceid, iothubModuleid, methodName, null, null, payload);\n    } catch (IotHubException e) {\n        System.out.println(\"An error has occurred.\");\n        System.out.println(e.toString());\n    }\n\n    return result;\n}\n```\n\n```java readme-sample-setPipelineTopologyRequest\nPipelineTopologySetRequest setPipelineTopologyRequest = new PipelineTopologySetRequest(pipelineTopology);\nMethodResult setPipelineResult = invokeDirectMethodHelper(dClient, setPipelineTopologyRequest.getMethodName(), setPipelineTopologyRequest.getPayloadAsJson());\nSystem.out.println(setPipelineResult.getPayload());\n```\n\n## Troubleshooting\n\nWhen sending a method request using the IoT Hub's `invoke` remember to not type in the method request name directly. Instead use `MethodRequestName.getMethodName()`\n\n\n## Next steps\n\n-   [Samples][samples]\n-   [Azure IoT Device SDK][iot-device-sdk]\n-   [Azure IoTHub Service SDK][iot-hub-sdk]\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require\nyou to agree to a Contributor License Agreement (CLA) declaring that you have\nthe right to, and actually do, grant us the rights to use your contribution.\nFor details, visit https://cla.microsoft.com.\n\nIf you encounter any issues, please open an issue on our [Github][github-page-issues].\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether\nyou need to provide a CLA and decorate the PR appropriately (e.g., label,\ncomment). Simply follow the instructions provided by the bot. You will only\nneed to do this once across all repos using our CLA.\n\nThis project has adopted the\n[Microsoft Open Source Code of Conduct][code_of_conduct]. For more information,\nsee the Code of Conduct FAQ or contact opencode@microsoft.com with any\nadditional questions or comments.\n\n<!-- LINKS -->\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[cla]: https://cla.microsoft.com\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n[package]: https://aka.ms/ava/sdk/client/java\n[samples]: https://aka.ms/video-analyzer-sample\n[source]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/videoanalyzer\n[doc_direct_methods]: https://go.microsoft.com/fwlink/?linkid=2162396\n[doc_pipelines]: https://go.microsoft.com/fwlink/?linkid=2162396\n[doc_product]: https://go.microsoft.com/fwlink/?linkid=2162396\n[iot-device-sdk]: https://search.maven.org/search?q=a:iot-service-client\n[iot-hub-sdk]: https://github.com/Azure/azure-iot-sdk-java\n[github-page-issues]: https://github.com/Azure/azure-sdk-for-java/issues\n[applied-ai-service]: https://azure.microsoft.com/product-categories/applied-ai-services/#services\n[machine-learning]: https://azure.microsoft.com/services/machine-learning\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fvideoanalyzer%2Fazure-media-videoanalyzer-edge%2FREADME.png)\n",
        "repo_name": "videoanalyzer/azure-media-videoanalyzer-edge",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/videoanalyzer/azure-media-videoanalyzer-edge",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager Video Analyzer client library for Java\n\nWe\u2019re retiring the Azure Video Analyzer preview service; you're advised to transition your applications off of Video Analyzer by 01 December 2022. This SDK is no longer maintained and won\u2019t work after the service is retired. To learn how to transition off, please refer to: [Transition from Azure Video Analyzer](https://aka.ms/azsdk/videoanalyzer/transitionoffguidance)\n\nAzure Resource Manager Video Analyzer client library for Java.\n\nThis package contains Microsoft Azure SDK for Video Analyzer Management SDK. Azure Video Analyzer provides a platform for you to build intelligent video applications that span the edge and the cloud. Package tag package-preview-2021-11. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-videoanalyzer;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-videoanalyzer</artifactId>\n    <version>1.0.0-beta.5</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, `azure` client can be authenticated by following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nVideoAnalyzerManager manager = VideoAnalyzerManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/videoanalyzer/azure-resourcemanager-videoanalyzer/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create new Pull Request\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n",
        "repo_name": "videoanalyzer/azure-resourcemanager-videoanalyzer",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/videoanalyzer/azure-resourcemanager-videoanalyzer",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager VMwareCloudSimple client library for Java\n\nAzure Resource Manager VMwareCloudSimple client library for Java.\n\nThis package contains Microsoft Azure SDK for VMwareCloudSimple Management SDK. Description of the new service. Package tag package-2019-04-01. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-vmwarecloudsimple;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-vmwarecloudsimple</artifactId>\n    <version>1.0.0-beta.2</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nVMwareCloudSimpleManager manager = VMwareCloudSimpleManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/vmwarecloudsimple/azure-resourcemanager-vmwarecloudsimple/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "vmwarecloudsimple/azure-resourcemanager-vmwarecloudsimple",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/vmwarecloudsimple/azure-resourcemanager-vmwarecloudsimple",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager Voice Services client library for Java\n\nAzure Resource Manager Voice Services client library for Java.\n\nThis package contains Microsoft Azure SDK for Voice Services Management SDK.  Package tag package-2023-01-31. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-voiceservices;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-voiceservices</artifactId>\n    <version>1.0.0</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nVoiceServicesManager manager = VoiceServicesManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/voiceservices/azure-resourcemanager-voiceservices/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "voiceservices/azure-resourcemanager-voiceservices",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/voiceservices/azure-resourcemanager-voiceservices",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure WebPubSub client library for Java\n\n[Web PubSub](https://aka.ms/awps/doc) is an Azure-managed service that helps developers easily build web applications with real-time features and publish-subscribe patterns. Any scenario that requires real-time publish-subscribe messaging between server and clients or among clients can use Web PubSub. Traditional real-time features that often require polling from the server or submitting HTTP requests can also use Web PubSub.\n\nYou can use this library on your client side to manage the WebSocket client connections, as shown in the below diagram:\n\n![overflow](https://user-images.githubusercontent.com/7847428/215704912-b8a45d17-1f6f-4d26-ba0a-811452de10e1.png)\n\nUse this library to:\n\n- Send messages to groups\n- Send events to the [server](https://learn.microsoft.com/azure/azure-web-pubsub/concept-service-internals#terms)\n- Join and leave groups\n- Listen messages from groups and servers\n\nDetails about the terms used here are described in [Key concepts](#key-concepts) section.\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n- [Product documentation](https://aka.ms/awps/doc)\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure:azure-messaging-webpubsub-client;current})\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-messaging-webpubsub-client</artifactId>\n    <version>1.0.0-beta.1</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Authenticate the client\n\nA Client uses a Client Access URL to connect and authenticate with the service. The URL pattern is `wss://<service_name>.webpubsub.azure.com/client/hubs/<hub_name>?access_token=<token>`. There're multiple ways to get a Client Access URL. As a quick start, you can copy and paste from Azure Portal, and for production, you usually need a negotiation server to generate the URL.\n\n#### Use Client Access URL from Azure Portal\n\nAs a quick start, you can go to the Portal and copy the **Client Access URL** from **Key** blade.\n\n![get_client_url](https://camo.githubusercontent.com/77f1e3e39a5deef7ced866eea73684ecf844f9809dc25111006436a379f8238a/68747470733a2f2f6c6561726e2e6d6963726f736f66742e636f6d2f617a7572652f617a7572652d7765622d7075627375622f6d656469612f686f77746f2d776562736f636b65742d636f6e6e6563742f67656e65726174652d636c69656e742d75726c2e706e67)\n\nAs shown in the diagram, the client will be granted permission of sending messages to the specific group and joining the specific group. Learn more about client permission, see [permissions](https://learn.microsoft.com/azure/azure-web-pubsub/reference-json-reliable-webpubsub-subprotocol#permissions)\n\n```java readme-sample-createClientFromUrl\nWebPubSubClient client = new WebPubSubClientBuilder()\n    .clientAccessUrl(\"<client-access-url>\")\n    .buildClient();\n```\n\n#### Use negotiation server to generate Client Access URL\n\nIn production, a client usually fetches the Client Access URL from a negotiation server. The server holds the connection string and generates the Client Access URL through `WebPubSubServiceClient`. As a sample, the code snippet below just demonstrates how to generate the Client Access URL inside a single process.\n\n```java readme-sample-createClientFromCredential\n// WebPubSubServiceAsyncClient is from com.azure:azure-messaging-webpubsub\n// create WebPubSub service client\nWebPubSubServiceAsyncClient serverClient = new WebPubSubServiceClientBuilder()\n    .connectionString(\"<connection-string>\")\n    .hub(\"<hub>>\")\n    .buildAsyncClient();\n\n// wrap WebPubSubServiceAsyncClient.getClientAccessToken as WebPubSubClientCredential\nWebPubSubClientCredential clientCredential = new WebPubSubClientCredential(Mono.defer(() ->\n    serverClient.getClientAccessToken(new GetClientAccessTokenOptions()\n            .setUserId(\"<user-name>\")\n            .addRole(\"webpubsub.joinLeaveGroup\")\n            .addRole(\"webpubsub.sendToGroup\"))\n        .map(WebPubSubClientAccessToken::getUrl)));\n\n// create WebPubSub client\nWebPubSubClient client = new WebPubSubClientBuilder()\n    .credential(clientCredential)\n    .buildClient();\n```\n\nFeatures to differentiate `WebPubSubClient` and `WebPubSubServiceClient`.\n\n|Class Name|WebPubSubClient|WebPubSubServiceClient|\n|------|---------|---------|\n|Package Name|azure-messaging-webpubsub-client|azure-messaging-webpubsub|\n|Features|Usually used on client side. Publish messages and subscribe to messages.|Usually used on server side. Generate Client Access Uri and manage clients.|\n\nFind more details in [azure-messaging-webpubsub](https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/webpubsub/azure-messaging-webpubsub)\n\n## Key concepts\n\n### Connection\n\nA connection, also known as a client connection, represents an individual WebSocket connection connected to the Web PubSub. When successfully connected, the Web PubSub assigns the connection a unique connection ID. Each `WebPubSubClient` creates its own exclusive connection.\n\n### Recovery\n\nIf a client using reliable protocols disconnects, a new WebSocket tries to establish using the connection ID of the lost connection. If the new WebSocket connection is successfully connected, the connection is recovered. Throughout the time a client is disconnected, the service retains the client's context as well as all messages that the client was subscribed to, and when the client recovers, the service will send these messages to the client. If the service returns WebSocket error code `1008` or the recovery attempt lasts more than 30 seconds, the recovery fails.\n\n### Reconnect\n\nReconnection happens when the client connection drops and fails to recover. Reconnection starts a new connection and the new connection has a new connection ID. Unlike recovery, the service treats the reconnected client as a new client connection. The client connection needs to rejoin groups. By default, the client library rejoins groups after reconnection.\n\n### Hub\n\nA hub is a logical concept representing a collection of client connections. Usually, you use one hub for one purpose: for example, a chat hub, or a notification hub. When a client connection is created, it connects to a hub, and during its lifetime, it is bound to that hub. Different applications can share one Web PubSub by using different hub names.\n\n### Group\n\nA group is a subset of connections to the hub. You can add and remove connections from a group at any time. For example, a chat room can be considered a group.  When clients join and leave the room, they are added and removed from the group. A connection can belong to multiple groups, and a group can contain multiple connections.\n\n### User\n\nConnections to Web PubSub can belong to one user. A user might have multiple connections, for example when a single user is connected across multiple devices or browser tabs.\n\n## Client Lifetime\n\nEach of the Web PubSub clients is safe to cache and use as a singleton for the lifetime of the application. The registered event callbacks share the same lifetime with the client. This means you can add or remove callbacks at any time and the registration status won't change after reconnection or even stopping the client.\n\n## Examples\n\n### Specify subprotocol\n\nYou can specify the subprotocol to be used by the client. By default, the client uses `json.reliable.webpubsub.azure.v1`. You can choose to use `json.reliable.webpubsub.azure.v1` or `json.webpubsub.azure.v1` as shown below.\n\n```java readme-sample-createClientWithProtocol\nWebPubSubClient client = new WebPubSubClientBuilder()\n    .clientAccessUrl(\"<client-access-url>\")\n    .protocol(new WebPubSubJsonProtocol())\n    .buildClient();\n```\n\n### Consume messages from the server and groups\n\nA client can add callbacks to consume messages from the server and groups. Please note, clients can only receive group messages that it has joined.\n\n```java readme-sample-listenMessages\nclient.addOnGroupMessageEventHandler(event -> {\n    System.out.println(\"Received group message from \" + event.getFromUserId() + \": \"\n        + event.getData().toString());\n});\nclient.addOnServerMessageEventHandler(event -> {\n    System.out.println(\"Received server message: \"\n        + event.getData().toString());\n});\n```\n\n### Add callbacks for connected, disconnected, and stopped events\n\nWhen a client connection is connected to the service, the `Connected` event is triggered once it received the connected message from the service.\n\nWhen a client connection is disconnected and fails to recover, the `Disconnected` event is triggered.\n\nWhen a client is stopped, which means the client connection is disconnected and the client stops trying to reconnect, the `Stopped` event will be triggered. This usually happens after the `client.StopAsync()` is called, or disabled `AutoReconnect`. If you want to restart the client, you can call `client.StartAsync()` in the `Stopped` event.\n\n```java readme-sample-listenEvent\nclient.addOnConnectedEventHandler(event -> {\n    System.out.println(\"Connection is connected: \" + event.getConnectionId());\n});\nclient.addOnDisconnectedEventHandler(event -> {\n    System.out.println(\"Connection is disconnected\");\n});\nclient.addOnStoppedEventHandler(event -> {\n    System.out.println(\"Client is stopped\");\n});\n```\n\n### Operation and retry\n\nBy default, the operation such as `client.joinGroup()`, `client.leaveGroup()`, `client.sendToGroup()`, `client.sendEvent()` has three reties. You can use `WebPubSubClientBuilder.retryOptions()` to change. If all retries have failed, an error will be thrown. You can keep retrying by passing in the same `ackId` as previous retries, thus the service can help to deduplicate the operation with the same `ackId`\n\n```java readme-sample-sendAndRetry\ntry {\n    client.joinGroup(\"testGroup\");\n} catch (SendMessageFailedException e) {\n    if (e.getAckId() != null) {\n        client.joinGroup(\"testGroup\", e.getAckId());\n    }\n}\n```\n\n## Troubleshooting\n\n### Configure logging\n\nYou can also [configure logging](https://learn.microsoft.com/azure/developer/java/sdk/logging-overview) if you want to dig deeper into the requests you're making against the service.\n\n## Next steps\n\nYou can also find [more samples here](https://github.com/Azure/azure-webpubsub/tree/main/samples/java).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fwebpubsub%2Fazure-messaging-webpubsub-client%2FREADME.png)\n",
        "repo_name": "webpubsub/azure-messaging-webpubsub-client",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/webpubsub/azure-messaging-webpubsub-client",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Web PubSub service client library for Java\n\n[Azure Web PubSub service](https://aka.ms/awps/doc) is an Azure-managed service that helps developers easily build web applications with real-time features and publish-subscribe pattern. Any scenario that requires real-time publish-subscribe messaging between server and clients or among clients can use Azure Web PubSub service. Traditional real-time features that often require polling from server or submitting HTTP requests can also use Azure Web PubSub service.\n\nYou can use this library in your app server side to manage the WebSocket client connections, as shown in below diagram:\n\n![overflow](https://user-images.githubusercontent.com/668244/140014067-25a00959-04dc-47e8-ac25-6957bd0a71ce.png)\n\nUse this library to:\n- Send messages to hubs and groups. \n- Send messages to particular users and connections.\n- Organize users and connections into groups.\n- Close connections\n- Grant, revoke, and check permissions for an existing connection\n\nDetails about the terms used here are described in [Key concepts](#key-concepts) section.\n\n[Source code][source_code] | [API reference documentation][api] | [Product Documentation][product_documentation] | [Samples][samples_readme]\n\n## Getting started\n\n### Prerequisites\n\n- A [Java Development Kit (JDK)][jdk_link], version 8 or later.\n- [Azure Subscription][azure_subscription]\n\n### Include the package\n\n#### Include the BOM file\n\nPlease include the azure-sdk-bom to your project to take dependency on the General Availability (GA) version of the library. In the following snippet, replace the {bom_version_to_target} placeholder with the version number.\nTo learn more about the BOM, see the [AZURE SDK BOM README](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/boms/azure-sdk-bom/README.md).\n\n```xml\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>com.azure</groupId>\n            <artifactId>azure-sdk-bom</artifactId>\n            <version>{bom_version_to_target}</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n```\nand then include the direct dependency in the dependencies section without the version tag as shown below.\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-messaging-webpubsub</artifactId>\n  </dependency>\n</dependencies>\n```\n\n#### Include direct dependency\nIf you want to take dependency on a particular version of the library that is not present in the BOM,\nadd the direct dependency to your project as follows.\n\n[//]: # ({x-version-update-start;com.azure:azure-messaging-webpubsub;current})\n\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-messaging-webpubsub</artifactId>\n    <version>1.2.4</version>\n</dependency>\n```\n\n[//]: # ({x-version-update-end})\n\n### Create a `WebPubSubServiceClient` using connection string\n\n```java readme-sample-createClientWithConnectionString\nWebPubSubServiceClient webPubSubServiceClient = new WebPubSubServiceClientBuilder()\n    .connectionString(\"{connection-string}\")\n    .hub(\"chat\")\n    .buildClient();\n```\n\n### Create a `WebPubSubServiceClient` using access key\n\n```java readme-sample-createClientWithKey\nWebPubSubServiceClient webPubSubServiceClient = new WebPubSubServiceClientBuilder()\n    .credential(new AzureKeyCredential(\"{access-key}\"))\n    .endpoint(\"<Insert endpoint from Azure Portal>\")\n    .hub(\"chat\")\n    .buildClient();\n```\n\n## Key concepts\n\n### Connection\n\nA connection, also known as a client or a client connection, represents an individual WebSocket connection connected to the Web PubSub service. When successfully connected, a unique connection ID is assigned to this connection by the Web PubSub service.\n\n### Hub\n\nA hub is a logical concept for a set of client connections. Usually you use one hub for one purpose, for example, a chat hub, or a notification hub. When a client connection is created, it connects to a hub, and during its lifetime, it belongs to that hub. Different applications can share one Azure Web PubSub service by using different hub names.\n\n### Group\n\nA group is a subset of connections to the hub. You can add a client connection to a group, or remove the client connection from the group, anytime you want. For example, when a client joins a chat room, or when a client leaves the chat room, this chat room can be considered to be a group. A client can join multiple groups, and a group can contain multiple clients.\n\n### User\n\nConnections to Web PubSub can belong to one user. A user might have multiple connections, for example when a single user is connected across multiple devices or multiple browser tabs.\n\n### Message\n\nWhen the client is connected, it can send messages to the upstream application, or receive messages from the upstream application, through the WebSocket connection.\n\n## Examples\n\n* [Broadcast message to entire hub](#broadcast-message-to-entire-hub)\n* [Send message to entire hub with filters](#broadcast-message-to-entire-hub-with-filter)\n* [Broadcast message to a group](#broadcast-message-to-a-group)\n* [Send message to a connection](#send-message-to-a-connection)\n* [Send message to a user](#send-message-to-a-user)\n\n### Broadcast message to entire hub\n\n```java readme-sample-broadcastToAll\nwebPubSubServiceClient.sendToAll(\"Hello world!\", WebPubSubContentType.TEXT_PLAIN);\n```\n\n### Broadcast message to entire hub with filter\n\n```java readme-sample-broadcastToAll-filter\n// send a text message to the entire hub with a filter on userId\nBinaryData message = BinaryData.fromString(\"Hello World - Broadcast test!\");\nwebPubSubServiceClient.sendToAllWithResponse(\n    message,\n    WebPubSubContentType.TEXT_PLAIN,\n    message.getLength(),\n    new RequestOptions().addQueryParam(\"filter\", \"userId ne 'user1'\"));\n\n// send a text message to the entire hub with another filter on group\nwebPubSubServiceClient.sendToAllWithResponse(\n    message,\n    WebPubSubContentType.TEXT_PLAIN,\n    message.getLength(),\n    new RequestOptions().addQueryParam(\"filter\", \"'GroupA' in groups and not('GroupB' in groups)\"));\n```\n\n### Broadcast message to a group\n\n```java readme-sample-broadcastToGroup\nwebPubSubServiceClient.sendToGroup(\"java\", \"Hello Java!\", WebPubSubContentType.TEXT_PLAIN);\n```\n\n### Send message to a connection\n\n```java readme-sample-sendToConnection\nwebPubSubServiceClient.sendToConnection(\"myconnectionid\", \"Hello connection!\", WebPubSubContentType.TEXT_PLAIN);\n```\n\n### Send message to a user\n\n```java readme-sample-sendToUser\nwebPubSubServiceClient.sendToUser(\"Andy\", \"Hello Andy!\", WebPubSubContentType.TEXT_PLAIN);\n```\n\n## Troubleshooting\n\n### Enable client logging\nYou can set the `AZURE_LOG_LEVEL` environment variable to view logging statements made in the client library. For\nexample, setting `AZURE_LOG_LEVEL=2` would show all informational, warning, and error log messages. The log levels can\nbe found here: [log levels][log_levels].\n\n### Default HTTP Client\nAll client libraries by default use the Netty HTTP client. Adding the above dependency will automatically configure\nthe client library to use the Netty HTTP client. Configuring or changing the HTTP client is detailed in the\n[HTTP clients wiki](https://github.com/Azure/azure-sdk-for-java/wiki/HTTP-clients).\n\n### Default SSL library\nAll client libraries, by default, use the Tomcat-native Boring SSL library to enable native-level performance for SSL\noperations. The Boring SSL library is an uber jar containing native libraries for Linux / macOS / Windows, and provides\nbetter performance compared to the default SSL implementation within the JDK. For more information, including how to\nreduce the dependency size, refer to the [performance tuning][performance_tuning] section of the wiki.\n\n## Next steps\n\n- Samples are explained in detail [here][samples_readme].\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to\na [Contributor License Agreement (CLA)][cla] declaring that you have the right to, and actually do, grant us the rights\nto use your contribution.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate\nthe PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to\ndo this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see\nthe [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or\ncomments.\n\n<!-- LINKS -->\n\n[azure_subscription]: https://azure.microsoft.com/free\n[jdk_link]: https://docs.microsoft.com/java/azure/jdk/?view=azure-java-stable\n[source_code]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/webpubsub/azure-messaging-webpubsub/src\n[product_documentation]: https://aka.ms/awps/doc\n[samples_readme]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/webpubsub/azure-messaging-webpubsub/src/samples/README.md\n[log_levels]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core/src/main/java/com/azure/core/util/logging/ClientLogger.java\n[performance_tuning]: https://github.com/Azure/azure-sdk-for-java/wiki/Performance-Tuning\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n[api]: https://aka.ms/awps/sdk/java\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-java%2Fsdk%2Fwebpubsub%2Fazure-messaging-webpubsub%2FREADME.png)\n",
        "repo_name": "webpubsub/azure-messaging-webpubsub",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/webpubsub/azure-messaging-webpubsub",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager WebPubSub client library for Java\n\nAzure Resource Manager WebPubSub client library for Java.\n\nThis package contains Microsoft Azure SDK for WebPubSub Management SDK. REST API for Azure WebPubSub Service. Package tag package-2023-02-01. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-webpubsub;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-webpubsub</artifactId>\n    <version>1.0.0</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nWebPubSubManager manager = WebPubSubManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/webpubsub/azure-resourcemanager-webpubsub/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "webpubsub/azure-resourcemanager-webpubsub",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/webpubsub/azure-resourcemanager-webpubsub",
        "language": [
            "Java"
        ]
    },
    {
        "README_text": "# Azure Resource Manager Workloads client library for Java\n\nAzure Resource Manager Workloads client library for Java.\n\nThis package contains Microsoft Azure SDK for Workloads Management SDK. Workloads client provides access to various workload operations.<br>Azure Center for SAP solutions is currently in PREVIEW. See the [Azure Center for SAP solutions - Legal Terms](https://learn.microsoft.com/legal/azure-center-for-sap-solutions/azure-center-for-sap-solutions-legal-terms) for legal notices applicable to Azure Center for SAP solutions. Package tag package-2023-04. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n\n## We'd love to hear your feedback\n\nWe're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n\nIf you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n\nThank you in advance for your collaboration. We really appreciate your time!\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [API reference documentation][docs]\n\n## Getting started\n\n### Prerequisites\n\n- [Java Development Kit (JDK)][jdk] with version 8 or above\n- [Azure Subscription][azure_subscription]\n\n### Adding the package to your product\n\n[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-workloads;current})\n```xml\n<dependency>\n    <groupId>com.azure.resourcemanager</groupId>\n    <artifactId>azure-resourcemanager-workloads</artifactId>\n    <version>1.0.0</version>\n</dependency>\n```\n[//]: # ({x-version-update-end})\n\n### Include the recommended packages\n\nAzure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n\n[Azure Identity][azure_identity] and [Azure Core Netty HTTP][azure_core_http_netty] packages provide the default implementation.\n\n### Authentication\n\nBy default, Azure Active Directory token authentication depends on correct configuration of the following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via `AZURE_SUBSCRIPTION_ID` environment variable.\n\nWith above configuration, `azure` client can be authenticated using the following code:\n\n```java\nAzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\nWorkloadsManager manager = WorkloadsManager\n    .authenticate(credential, profile);\n```\n\nThe sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n\nSee [Authentication][authenticate] for more options.\n\n## Key concepts\n\nSee [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n\n## Examples\n\n[Code snippets and samples](https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/workloads/azure-resourcemanager-workloads/SAMPLE.md)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact <opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n[docs]: https://azure.github.io/azure-sdk-for-java/\n[jdk]: https://docs.microsoft.com/java/azure/jdk/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/identity/azure-identity\n[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/core/azure-core-http-netty\n[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/AUTH.md\n[design]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/resourcemanager/docs/DESIGN.md\n[cg]: https://github.com/Azure/azure-sdk-for-java/blob/main/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "workloads/azure-resourcemanager-workloads",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/workloads/azure-resourcemanager-workloads",
        "language": [
            "Java"
        ]
    }
]