[
    {
        "README_text": "# Microsoft Azure Advisor management client library for .NET\n\nMicrosoft Advisor is a personalized cloud consultant that helps you follow best practices to optimize your Azure deployments. It analyzes your resource configuration and usage telemetry and then recommends solutions that can help you improve the cost effectiveness, performance, Reliability (formerly called High availability), and security of your Azure resources.\n\nThis library supports managing Microsoft Azure Advisor Configuration resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Advisor management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.Advisor --prerelease\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "advisor/Azure.ResourceManager.Advisor",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/advisor/Azure.ResourceManager.Advisor",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure AgFood Platform management client library for .NET\n\nMicrosoft Azure AgFood Platform is a fully managed multi-tenant AgFood PaaS platform offering, targeted at AgFood tech product leaders, developers & data scientists across customers & ISVs.\n\nThis library supports managing Microsoft Azure AgFood Platform resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure AgFoodPlatform management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.AgFoodPlatform --prerelease\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "agrifood/Azure.ResourceManager.AgFoodPlatform",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/agrifood/Azure.ResourceManager.AgFoodPlatform",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure FarmBeats client library for .NET\n\nFarmBeats is a B2B PaaS offering from Microsoft that makes it easy for AgriFood companies to build intelligent digital agriculture solutions on Azure.\u202fFarmBeats\u202fallows\u202fusers\u202fto acquire, aggregate, and process agricultural data from various sources (farm equipment, weather, satellite) without the need to invest in deep data\u202fengineering resources.\u202f Customers can build SaaS solutions on top of FarmBeats and leverage first class support for model building to generate insights at scale.\n\n**Please rely heavily on the [service's documentation][product_documentation] and our [protocol client docs][protocol_client_quickstart] to use this library**\n\n[Source code][source_code] | [Package (NuGet)][client_nuget_package] | [Product documentation][product_documentation]\n\n## Getting started\n\n### Install the package\n\nInstall the Azure FarmBeats client library for .NET with [NuGet][client_nuget_package]:\n\n```dotnetcli\ndotnet add package Azure.Verticals.AgriFood.Farming --prerelease\n```\n\n### Prerequisites\n\nTo use this package, you must have:\n\n- An [Azure subscription][azure_subscription] \n- An [AgriFood (FarmBeats) resource][install_farmbeats]\n\n### Authenticate the client\n\n#### Using Azure Active Directory\n\nThis document demonstrates using [DefaultAzureCredential][default_cred_ref] to authenticate via Azure Active Directory. However, any of the credentials offered by the [Azure.Identity][azure_identity] will be accepted. See the [Azure.Identity][azure_identity] documentation for more information about other credentials.\n\nOnce you have chosen and configured your credential, you can create instances of any client types, for example, `FarmClient`.\n\n```C#\nvar credential = new DefaultAzureCredential();\nvar client = new FarmClient(new Uri(\"https://<my-account-name>.farmbeats.azure.net\"), credential);\n```\n\n## Key concepts\n\nBasic understanding of below terms will help to get started with FarmBeats client library.\n\n### [Farm Hierarchy][farm_hierarchy]\nFarm hierarchy is a collection of below entities.\n- Farmer - is the custodian of all the agronomic data.\n- Farm - is a logical collection of fields and/or seasonal fields. They do not have any area associated with them.\n- Field - is a multi-polygon area. This is expected to be stable across seasons.\n- Seasonal field - is a multi-polygon area. To define a seasonal boundary we need the details of area (boundary), time (season) and crop. New seasonal fields are expected to be created for every growing season.\n- Boundary - is the actual multi-polygon area expressed as a geometry (in geojson). It is normally associated with a field or a seasonal field. Satellite, weather and farm operations data is linked to a boundary.\n- Cascade delete - Agronomic data is stored hierarchically with farmer as the root. The hierarchy includes Farmer -> Farms -> Fields -> Seasonal Fields -> Boundaries -> Associated data (satellite, weather, farm operations). Cascade delete refers to the process of deleting any node and its subtree. \n\n### [Scenes][scenes]\nScenes refers to images normally ingested using satellite APIs. This includes raw bands and derived bands (Ex: NDVI). Scenes may also include spatial outputs of an inference or AI/ML model (Ex: LAI).\n\n### [Farm Operations][farm_operations_docs]\nFam operations includes details pertaining to tilling, planting, application of pesticides & nutrients, and harvesting. This can either be manually pushed into FarmBeats using APIs or the same information can be pulled from farm equipment service providers like John Deere. \n\n### Protocol Methods\n\nOperations exposed by the FarmBeats SDK for .NET use *protocol methods* to expose the underlying REST operations. You can learn more about how to use SDK Clients which use protocol methods in our [documentation][protocol_client_quickstart].\n\n### Thread safety\n\nWe guarantee that all client instance methods are thread-safe and independent of each other ([guideline](https://azure.github.io/azure-sdk/dotnet_introduction.html#dotnet-service-methods-thread-safety)). This ensures that the recommendation of reusing client instances is always safe, even across threads.\n\n### Additional concepts\n<!-- CLIENT COMMON BAR -->\n[Client options](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#configuring-service-clients-using-clientoptions) |\n[Accessing the response](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#accessing-http-response-details-using-responset) |\n[Long-running operations](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#consuming-long-running-operations-using-operationt) |\n[Handling failures](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#reporting-errors-requestfailedexception) |\n[Diagnostics](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md) |\n[Mocking](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#mocking) |\n[Client lifetime](https://devblogs.microsoft.com/azure-sdk/lifetime-management-and-thread-safety-guarantees-of-azure-sdk-net-clients/)\n<!-- CLIENT COMMON BAR -->\n\n## Examples\n\nThe following section shows you how to initialize and authenticate your client, then list all of your data sources.\n\n### List All Farmers\n\n```C#\nvar credential = new DefaultAzureCredential();\nvar client = new FamersClient(new Uri(\"https://<my-account-name>.farmbeats.azure.net\"), credential);\n\nvar response = await client.ListAsync();\nusing var responseDocument = JsonDocument.Parse(response.Content);\nConsole.WriteLine(responseDocument.RootElement.GetProperty(\"value\"));\n```\n\n## Troubleshooting\n\n### Setting up console logging\nThe simplest way to see the logs is to enable the console logging.\nTo create an Azure SDK log listener that outputs messages to console use AzureEventSourceListener.CreateConsoleLogger method.\n\n```C#\n// Setup a listener to monitor logged events.\nusing AzureEventSourceListener listener = AzureEventSourceListener.CreateConsoleLogger();\n```\n\nTo learn more about other logging mechanisms see [here][azure_core_diagnostics].\n\n## Next steps\n\n### Additional documentation\n\nFor more extensive documentation on the FarmBeats, see the [FarmBeats documentation][product_docs] on docs.microsoft.com.\n\nThis client SDK exposes operations using *protocol methods*, you can learn more about how to use SDK Clients which use protocol methods in our [documentation][protocol_client_quickstart].\n\n## Contributing\n\nSee the [CONTRIBUTING.md][contributing] for details on building, testing, and contributing to this library.\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [cla.microsoft.com][cla].\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n[source_code]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/agrifood/Azure.Verticals.AgriFood.Farming\n[client_nuget_package]: https://www.nuget.org/packages?q=Azure.Verticals.AgriFood.Farming\n[product_documentation]: https://aka.ms/FarmBeatsProductDocumentationPaaS\n[azure_identity]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/identity/Azure.Identity\n[protocol_client_quickstart]: https://aka.ms/azsdk/net/protocol/quickstart\n[default_cred_ref]: https://docs.microsoft.com/dotnet/api/azure.identity.defaultazurecredential?view=azure-dotnet\n[azure_subscription]: https://azure.microsoft.com/free/dotnet/\n[azure_core_diagnostics]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md\n[scenes]: https://aka.ms/FarmBeatsSatellitePaaSDocumentation\n[farm_operations_docs]: https://aka.ms/FarmBeatsFarmOperationsDocumentation\n[farm_hierarchy]: https://aka.ms/FarmBeatsFarmHierarchyDocs\n[install_farmbeats]: https://aka.ms/FarmBeatsInstallDocumentationPaaS\n[cla]: https://cla.microsoft.com\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2Fsdk%2Fagrifood%2FAzure.Verticals.AgriFood.Farming%2FREADME.png)\n",
        "repo_name": "agrifood/Azure.Verticals.AgriFood.Farming",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/agrifood/Azure.Verticals.AgriFood.Farming",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure AlertsManagement management client library for .NET\n\nThe Microsoft Alerts Management solution helps you analyze all of the alerts in your Log Analytics repository. These alerts may have come from a variety of sources including those sources created by Log Analytics or imported from Nagios or Zabbix. The solution also imports alerts from any connected System Center Operations Manager management groups.\n\nThis library supports managing Microsoft Azure Alerts Management resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure AlertsManagement management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.AlertsManagement\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "alertsmanagement/Azure.ResourceManager.AlertsManagement",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/alertsmanagement/Azure.ResourceManager.AlertsManagement",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Analysis Services management client library for .NET\n\nMicrosoft Azure Analysis Services is a fully managed platform as a service (PaaS) that provides enterprise-grade data models in the cloud. Use advanced mashup and modeling features to combine data from multiple data sources, define metrics, and secure your data in a single, trusted tabular semantic data model. The data model provides an easier and faster way for users to perform ad hoc data analysis using tools like Power BI and Excel.\n\nThis library supports managing Microsoft Azure Analysis Services resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started\n\n### Install the package\n\nInstall the Microsoft Azure Analysis Services management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.AnalysisServices\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "analysisservices/Azure.ResourceManager.Analysis",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/analysisservices/Azure.ResourceManager.Analysis",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Cognitive Services Anomaly Detector client library for .NET\n\n[Anomaly Detector](https://learn.microsoft.com/azure/cognitive-services/Anomaly-Detector/overview) is an AI service with a set of APIs, which enables you to monitor and detect anomalies in your time series data with little machine learning (ML) knowledge, either batch validation or real-time inference.\n\n[Source code][anomalydetector_client_src] | [Package (NuGet)][anomalydetector_nuget_package] | [API reference documentation][anomalydetector_refdocs] | [Product documentation][anomalydetector_docs]\n\n## Getting started\n\n### Prerequisites\n\n- You need an [Azure subscription][azure_sub] to use this package.\n- An existing Cognitive Services Anomaly Detector instance.\n\n### Install the package\n\nInstall the Azure Anomaly Detector client library for .NET with [NuGet][nuget]:\n\n```dotnetcli\ndotnet add package Azure.AI.AnomalyDetector --prerelease\n```\n\nThis table shows the relationship between SDK versions and supported API versions of the service:\n\n|SDK version|Supported API version of service |\n|-------------|---------------|\n|3.0.0-preview.6| 1.1|\n|3.0.0-preview.4, 3.0.0-preview.5| 1.1-preview-1|\n|3.0.0-beta.3 | 1.1-preview|\n|3.0.0-preview.1, 3.0.0-preview.2  | 1.0 |\n\n### Authenticate the client\n\nYou can find the endpoint for your Anomaly Detector service resource using the\n[Azure Portal](https://ms.portal.azure.com/#create/Microsoft.CognitiveServicesAnomalyDetector)\nor [Azure CLI](https://learn.microsoft.com/cli/azure/):\n\n```bash\n# Get the endpoint for the Anomaly Detector service resource\naz cognitiveservices account show --name \"resource-name\" --resource-group \"resource-group-name\" --query \"properties.endpoint\"\n```\n\n#### Get the API Key\n\nYou can get the **API Key** from the Anomaly Detector service resource in the Azure Portal.\nAlternatively, you can use **Azure CLI** snippet below to get the API key of your resource.\n\n```PowerShell\naz cognitiveservices account keys list --resource-group <your-resource-group-name> --name <your-resource-name>\n```\n\n#### Create AnomalyDetectorClient with AzureKeyCredential\n\nOnce you have the value for the API key, create an `AzureKeyCredential`.  With the endpoint and key credential, you can create the [`AnomalyDetectorClient`][anomaly_detector_client_class]:\n\n```C#\nstring endpoint = \"<endpoint>\";\nstring apiKey = \"<apiKey>\";\nvar credential = new AzureKeyCredential(apiKey);\nvar client = new AnomalyDetectorClient(new Uri(endpoint), credential);\n```\n\n## Key concepts\n\nWith the Anomaly Detector, you can either detect anomalies in one variable using **Univariate Anomaly Detection**, or detect anomalies in multiple variables with **Multivariate Anomaly Detection**.\n\n|Feature  |Description  |\n|---------|---------|\n|Univariate Anomaly Detection | Detect anomalies in one variable, like revenue, cost, etc. The model was selected automatically based on your data pattern. |\n|Multivariate Anomaly Detection| Detect anomalies in multiple variables with correlations, which are usually gathered from equipment or other complex system. The underlying model used is Graph attention network.|\n\n### Univariate Anomaly Detection\n\nThe Univariate Anomaly Detection API enables you to monitor and detect abnormalities in your time series data without having to know machine learning. The algorithms adapt by automatically identifying and applying the best-fitting models to your data, regardless of industry, scenario, or data volume. Using your time series data, the API determines boundaries for anomaly detection, expected values, and which data points are anomalies.\n\nUsing the Anomaly Detector doesn't require any prior experience in machine learning, and the REST API enables you to easily integrate the service into your applications and processes.\n\nWith the Univariate Anomaly Detection, you can automatically detect anomalies throughout your time series data, or as they occur in real-time.\n\n|Feature  |Description  |\n|---------|---------|\n| Streaming detection| Detect anomalies in your streaming data by using previously seen data points to determine if your latest one is an anomaly. This operation generates a model using the data points you send, and determines if the target point is an anomaly. By calling the API with each new data point you generate, you can monitor your data as it's created. |\n| Batch detection | Use your time series to detect any anomalies that might exist throughout your data. This operation generates a model using your entire time series data, with each point analyzed with the same model.         |\n| Change points detection | Use your time series to detect any trend change points that exist in your data. This operation generates a model using your entire time series data, with each point analyzed with the same model.    |\n\n### Multivariate Anomaly Detection\n\nThe **Multivariate Anomaly Detection** APIs further enable developers by easily integrating advanced AI for detecting anomalies from groups of metrics, without the need for machine learning knowledge or labeled data. Dependencies and inter-correlations between up to 300 different signals are now automatically counted as key factors. This new capability helps you to proactively protect your complex systems such as software applications, servers, factory machines, spacecraft, or even your business, from failures.\n\nWith the Multivariate Anomaly Detection, you can automatically detect anomalies throughout your time series data, or as they occur in real-time. There are three processes to use Multivariate Anomaly Detection.\n\n- **Training**: Use Train Model API to create and train a model, then use Get Model Status API to get the status and model metadata.\n- **Inference**:\n  - Use Async Inference API to trigger an asynchronous inference process and use Get Inference results API to get detection results on a batch of data.\n  - You could also use Sync Inference API to trigger a detection on one timestamp every time.\n- **Other operations**: List Model API and Delete Model API are supported in Multivariate Anomaly Detection model for model management.\n\n### Thread safety\n\nWe guarantee that all client instance methods are thread-safe and independent of each other ([guideline](https://azure.github.io/azure-sdk/dotnet_introduction.html#dotnet-service-methods-thread-safety)). This ensures that the recommendation of reusing client instances is always safe, even across threads.\n\n### Additional concepts\n<!-- CLIENT COMMON BAR -->\n[Client options](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#configuring-service-clients-using-clientoptions) |\n[Accessing the response](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#accessing-http-response-details-using-responset) |\n[Long-running operations](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#consuming-long-running-operations-using-operationt) |\n[Handling failures](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#reporting-errors-requestfailedexception) |\n[Diagnostics](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md) |\n[Mocking](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#mocking) |\n[Client lifetime](https://devblogs.microsoft.com/azure-sdk/lifetime-management-and-thread-safety-guarantees-of-azure-sdk-net-clients/)\n<!-- CLIENT COMMON BAR -->\n\n## Examples\n\nThe following section provides several code snippets covering some of the most common Anomaly Detector service tasks, including:\n\n- [Univariate Anomaly Detection - Batch detection](#batch-detection)\n- [Univariate Anomaly Detection - Streaming detection](#streaming-detection)\n- [Univariate Anomaly Detection - Detect change points](#detect-change-points)\n- [Multivariate Anomaly Detection](#multivariate-anomaly-detection-sample)\n\n### Batch detection\n\n```C# Snippet:DetectEntireSeriesAnomaly\n//detect\nConsole.WriteLine(\"Detecting anomalies in the entire time series.\");\n\ntry\n{\n    Response response = client.DetectUnivariateEntireSeries(request.ToRequestContent());\n    JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;\n\n    bool hasAnomaly = false;\n    for (int i = 0; i < request.Series.Count; ++i)\n    {\n        if (result.GetProperty(\"isAnomaly\")[i].GetBoolean())\n        {\n            Console.WriteLine($\"An anomaly was detected at index: {i}.\");\n            hasAnomaly = true;\n        }\n    }\n    if (!hasAnomaly)\n    {\n        Console.WriteLine(\"No anomalies detected in the series.\");\n    }\n}\ncatch (RequestFailedException ex)\n{\n    Console.WriteLine($\"Entire detection failed: {ex.Message}\");\n    throw;\n}\ncatch (Exception ex)\n{\n    Console.WriteLine($\"Detection error. {ex.Message}\");\n    throw;\n}\n```\n\n### Streaming Detection\n\n```C# Snippet:DetectLastPointAnomaly\n//detect\nConsole.WriteLine(\"Detecting the anomaly status of the latest point in the series.\");\n\ntry\n{\n    UnivariateLastDetectionResult result = client.DetectUnivariateLastPoint(request);\n\n    if (result.IsAnomaly)\n    {\n        Console.WriteLine(\"The latest point was detected as an anomaly.\");\n    }\n    else\n    {\n        Console.WriteLine(\"The latest point was not detected as an anomaly.\");\n    }\n}\ncatch (RequestFailedException ex)\n{\n    Console.WriteLine($\"Last detection failed: {ex.Message}\");\n    throw;\n}\ncatch (Exception ex)\n{\n    Console.WriteLine($\"Detection error. {ex.Message}\");\n    throw;\n}\n```\n\n### Detect change points\n\n```C# Snippet:DetectChangePoint\n//detect\nConsole.WriteLine(\"Detecting the change point in the series.\");\n\nUnivariateChangePointDetectionResult result = client.DetectUnivariateChangePoint(request);\n\nif (result.IsChangePoint.Contains(true))\n{\n    Console.WriteLine(\"A change point was detected at index:\");\n    for (int i = 0; i < request.Series.Count; ++i)\n    {\n        if (result.IsChangePoint[i])\n        {\n            Console.Write(i);\n            Console.Write(\" \");\n        }\n    }\n    Console.WriteLine();\n}\nelse\n{\n    Console.WriteLine(\"No change point detected in the series.\");\n}\n```\n\n### Multivariate Anomaly Detection Sample\n\nTo see how to use Anomaly Detector library to conduct Multivariate Anomaly Detection, see this [sample](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/anomalydetector/Azure.AI.AnomalyDetector/tests/samples/Sample4_MultivariateDetect.cs).\n\n## Troubleshooting\n\n### Setting up console logging\n\nThe simplest way to see the logs is to enable the console logging.\nTo create an Azure SDK log listener that outputs messages to console use the AzureEventSourceListener.CreateConsoleLogger method.\n\n```C#\n// Setup a listener to monitor logged events.\nusing AzureEventSourceListener listener = AzureEventSourceListener.CreateConsoleLogger();\n```\n\nTo learn more about other logging mechanisms see [Diagnostics Samples][logging].\n\n## Next steps\n\nThese code samples show common scenario operations with the Azure Anomaly Detector library. More samples can be found under the [samples](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/anomalydetector/Azure.AI.AnomalyDetector/tests/samples/) directory.\n\n- Univariate Anomaly Detection - Batch Detection: [Sample1_DetectEntireSeriesAnomaly.cs](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/anomalydetector/Azure.AI.AnomalyDetector/tests/samples/Sample1_DetectEntireSeriesAnomaly.cs)\n\n- Univariate Anomaly Detection - Streaming Detection: [Sample2_DetectLastPointAnomaly.cs](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/anomalydetector/Azure.AI.AnomalyDetector/tests/samples/Sample2_DetectLastPointAnomaly.cs)\n\n- Univariate Anomaly Detection - Change Point Detection: [Sample3_DetectChangePoint.cs](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/anomalydetector/Azure.AI.AnomalyDetector/tests/samples/Sample3_DetectChangePoint.cs)\n\n- Multivariate Anomaly Detection: [Sample4_MultivariateDetect.cs](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/anomalydetector/Azure.AI.AnomalyDetector/tests/samples/Sample4_MultivariateDetect.cs)\n\n### Additional documentation\n\nFor more extensive documentation on Azure Anomaly Detector, see the [Anomaly Detector documentation](https://learn.microsoft.com/azure/cognitive-services/anomaly-detector/overview) on docs.microsoft.com.\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [cla.microsoft.com][cla].\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n[anomalydetector_client_src]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/anomalydetector/Azure.AI.AnomalyDetector/src\n[anomalydetector_docs]: https://docs.microsoft.com/azure/cognitive-services/anomaly-detector/\n[anomalydetector_refdocs]: https://azure.github.io/azure-sdk-for-net/cognitiveservices.html\n[anomalydetector_nuget_package]: https://www.nuget.org/packages/Azure.AI.AnomalyDetector\n[anomaly_detector_client_class]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/anomalydetector/Azure.AI.AnomalyDetector/src/Generated/AnomalyDetectorClient.cs\n[azure_identity]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/identity/Azure.Identity\n[register_aad_app]: https://docs.microsoft.com/azure/cognitive-services/authentication#assign-a-role-to-a-service-principal\n[aad_grant_access]: https://docs.microsoft.com/azure/cognitive-services/authentication#assign-a-role-to-a-service-principal\n[custom_subdomain]: https://docs.microsoft.com/azure/cognitive-services/authentication#create-a-resource-with-a-custom-subdomain\n[DefaultAzureCredential]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/identity/Azure.Identity/README.md\n[cognitive_resource_cli]: https://docs.microsoft.com/azure/cognitive-services/cognitive-services-apis-create-account-cli\n[logging]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/core/Azure.Core/samples/Diagnostics.md\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/dotnet/\n[nuget]: https://www.nuget.org/\n[azure_portal]: https://portal.azure.com\n[cla]: https://cla.microsoft.com\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n",
        "repo_name": "anomalydetector/Azure.AI.AnomalyDetector",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/anomalydetector/Azure.AI.AnomalyDetector",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure ApiManagement management client library for .NET\n\nMicrosoft Azure API Management is a hybrid, multicloud management platform for APIs across all environments. As a platform-as-a-service, API Management supports the complete API lifecycle.\n\nThis library supports managing Microsoft Azure Api Management resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Api Management management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.ApiManagement\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "apimanagement/Azure.ResourceManager.ApiManagement",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/apimanagement/Azure.ResourceManager.ApiManagement",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure App Compliance Automation management client library for .NET\n\nMicrosoft App Compliance Automation Tool for Microsoft 365 (ACAT) is a service in Azure portal that helps simplify the compliance journey for any app that consumes Microsoft 365 customer data and is published via Partner Center. It's an application-centric compliance automation tool that helps you complete Microsoft 365 Certification with greater ease and convenience. In Public Preview, ACAT is available to apps running on Azure.\n\nThis library supports managing Microsoft Azure App Compliance Automation resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure AppComplianceAutomation management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.AppComplianceAutomation --prerelease\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "appcomplianceautomation/Azure.ResourceManager.AppComplianceAutomation",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/appcomplianceautomation/Azure.ResourceManager.AppComplianceAutomation",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure App Configuration client library for .NET\n\nAzure App Configuration is a managed service that helps developers centralize their application and feature settings simply and securely.\n\nUse the client library for App Configuration to:\n\n* [Create and manage centrally stored application configuration settings][azconfig_setting_concepts]\n* [Retrieve configuration settings from a specific point in time][azconfig_asof_snapshot]\n\n[Source code][source_root] | [Package (NuGet)][package] | [API reference documentation][reference_docs] | [Product documentation][azconfig_docs] | [Samples][source_samples]\n\n## Getting started\n\n### Install the package\n\nInstall the Azure App Configuration client library for .NET with [NuGet][nuget]:\n\n```dotnetcli\ndotnet add package Azure.Data.AppConfiguration\n```\n\n### Prerequisites\n\n* An [Azure subscription][azure_sub].\n* An existing [Configuration Store][configuration_store].  \n\nIf you need to create a Configuration Store, you can use the Azure Portal or [Azure CLI][azure_cli].\n\nYou can use the Azure CLI to create the Configuration Store with the following command:\n\n```PowerShell\naz appconfig create --name <config-store-name> --resource-group <resource-group-name> --location eastus\n```\n\n### Authenticate the client\n\nIn order to interact with the App Configuration service, you'll need to create an instance of the [Configuration Client][configuration_client_class] class. To make this possible, you'll need the connection string of the Configuration Store.\n\n#### Get credentials\n\nUse the [Azure CLI][azure_cli] snippet below to get the connection string from the Configuration Store.\n\n```PowerShell\naz appconfig credential list --name <config-store-name>\n```\n\nAlternatively, get the connection string from the Azure Portal.\n\n#### Create ConfigurationClient\n\nOnce you have the value of the connection string, you can create the ConfigurationClient:\n\n```C# Snippet:CreateConfigurationClient\nstring connectionString = \"<connection_string>\";\nvar client = new ConfigurationClient(connectionString);\n```\n\n#### Create ConfigurationClient with Azure Active Directory Credential\n\nClient subscription key authentication is used in most of the examples in this getting started guide, but you can also authenticate with Azure Active Directory using the [Azure Identity library][azure_identity]. To use the [DefaultAzureCredential][azure_identity_dac] provider shown below,\nor other credential providers provided with the Azure SDK, please install the Azure.Identity package:\n\n```dotnetcli\ndotnet add package Azure.Identity\n```\n\nYou will also need to [register a new AAD application][aad_register_app] and [grant access][aad_grant_access] to Configuration Store by assigning the `\"App Configuration Data Reader\"` or `\"App Configuration Data Owner\"` role to your service principal.\n\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: AZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET.\n\n```C# Snippet:CreateConfigurationClientTokenCredential\nstring endpoint = \"<endpoint>\";\nvar client = new ConfigurationClient(new Uri(endpoint), new DefaultAzureCredential());\n```\n\n## Key concepts\n\n### Configuration Setting\n\nA Configuration Setting is the fundamental resource within a Configuration Store. In its simplest form, it is a key and a value. However, there are additional properties such as the modifiable content type and tags fields that allow the value to be interpreted or associated in different ways.\n\nThe [Label][label_concept] property of a Configuration Setting provides a way to separate Configuration Settings into different dimensions. These dimensions are user defined and can take any form. Some common examples of dimensions to use for a label include regions, semantic versions, or environments. Many applications have a required set of configuration keys that have varying values as the application exists across different dimensions.\n\nFor example, MaxRequests may be 100 in \"NorthAmerica\" and 200 in \"WestEurope\". By creating a Configuration Setting named MaxRequests with a label of \"NorthAmerica\" and another, only with a different value, with a \"WestEurope\" label, an application can seamlessly retrieve Configuration Settings as it runs in these two dimensions.\n\n### Thread safety\n\nWe guarantee that all client instance methods are thread-safe and independent of each other ([guideline](https://azure.github.io/azure-sdk/dotnet_introduction.html#dotnet-service-methods-thread-safety)). This ensures that the recommendation of reusing client instances is always safe, even across threads.\n\n### Additional concepts\n<!-- CLIENT COMMON BAR -->\n[Client options](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#configuring-service-clients-using-clientoptions) |\n[Accessing the response](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#accessing-http-response-details-using-responset) |\n[Long-running operations](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#consuming-long-running-operations-using-operationt) |\n[Handling failures](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#reporting-errors-requestfailedexception) |\n[Diagnostics](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md) |\n[Mocking](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#mocking) |\n[Client lifetime](https://devblogs.microsoft.com/azure-sdk/lifetime-management-and-thread-safety-guarantees-of-azure-sdk-net-clients/)\n<!-- CLIENT COMMON BAR -->\n\n## Examples\n\nThe following sections provide several code snippets covering some of the most common Configuration Service tasks. Note that there are sync and async methods available for both.\n\n* [Create a Configuration Setting](#create-a-configuration-setting)\n* [Retrieve a Configuration Setting](#retrieve-a-configuration-setting)\n* [Update an existing Configuration Setting](#update-an-existing-configuration-setting)\n* [Delete a Configuration Setting](#delete-a-configuration-setting)\n\n### Create a Configuration Setting\n\nCreate a Configuration Setting to be stored in the Configuration Store. There are two ways to store a Configuration Setting:\n\n* AddConfigurationSetting creates a setting only if the setting does not already exist in the store.\n* SetConfigurationSetting creates a setting if it doesn't exist or overrides an existing setting.\n\n```C# Snippet:CreateConfigurationSetting\nstring connectionString = \"<connection_string>\";\nvar client = new ConfigurationClient(connectionString);\nvar settingToCreate = new ConfigurationSetting(\"some_key\", \"some_value\");\nConfigurationSetting setting = client.SetConfigurationSetting(settingToCreate);\n```\n\n### Retrieve a Configuration Setting\n\nRetrieve a previously stored Configuration Setting by calling GetConfigurationSetting.  This snippet assumes the setting \"some_key\" exists in the configuration store.\n\n```C# Snippet:GetConfigurationSetting\nstring connectionString = \"<connection_string>\";\nvar client = new ConfigurationClient(connectionString);\nConfigurationSetting setting = client.GetConfigurationSetting(\"some_key\");\n```\n\n### Update an existing Configuration Setting\n\nUpdate an existing Configuration Setting by calling SetConfigurationSetting.  This snippet assumes the setting \"some_key\" exists in the configuration store.\n\n```C# Snippet:UpdateConfigurationSetting\nstring connectionString = \"<connection_string>\";\nvar client = new ConfigurationClient(connectionString);\nConfigurationSetting setting = client.SetConfigurationSetting(\"some_key\", \"new_value\");\n```\n\n### Delete a Configuration Setting\n\nDelete an existing Configuration Setting by calling DeleteConfigurationSetting.  This snippet assumes the setting \"some_key\" exists in the configuration store.\n\n```C# Snippet:DeleteConfigurationSetting\nstring connectionString = \"<connection_string>\";\nvar client = new ConfigurationClient(connectionString);\nclient.DeleteConfigurationSetting(\"some_key\");\n```\n\n## Troubleshooting\n\nSee our [troubleshooting guide](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/appconfiguration/Azure.Data.AppConfiguration/TROUBLESHOOTING.md) for details on how to diagnose various failure scenarios.\n\n## Next steps\n\n### More sample code\n\nSeveral App Configuration client library samples are available to you in this GitHub repository.  These include:\n\n* [Hello world](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/appconfiguration/Azure.Data.AppConfiguration/samples/Sample1_HelloWorld.md): Create and delete a configuration setting.\n* [Hello world async with labels](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/appconfiguration/Azure.Data.AppConfiguration/samples/Sample2_HelloWorldExtended.md): Asynchronously create, update and delete configuration settings with labels.\n* [Make a configuration setting readonly](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/appconfiguration/Azure.Data.AppConfiguration/samples/Sample3_SetClearReadOnly.md): Make a configuration setting read-only, and then return it to a read-write state.\n* [Read revision history](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/appconfiguration/Azure.Data.AppConfiguration/samples/Sample4_ReadRevisionHistory.md): Read the revision history of a configuration setting that has been changed.\n* [Get a setting if changed](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/appconfiguration/Azure.Data.AppConfiguration/samples/Sample5_GetSettingIfChanged.md): Save bandwidth by using a conditional request to retrieve a setting only if it is different from your local copy.\n* [Update a setting if it hasn't changed](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/appconfiguration/Azure.Data.AppConfiguration/samples/Sample6_UpdateSettingIfUnchanged.md): Prevent lost updates by using optimistic concurrency to update a setting only if your local updates were applied to the same version as the resource in the configuration store.\n* [Create a mock client](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/appconfiguration/Azure.Data.AppConfiguration/samples/Sample7_MockClient.md): Mock a client for testing using the [Moq library][moq].\n\n For more details see the [samples README][samples_readme].\n\n## Contributing\n\nSee the [App Configuration CONTRIBUTING.md][azconfig_contrib] for details on building, testing, and contributing to this library.\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [cla.microsoft.com][cla].\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct]. For more information see the [Code of Conduct FAQ][code_of_conduct_faq] or contact [opencode@microsoft.com][email_opencode] with any additional questions or comments.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2Fsdk%2Fappconfiguration%2FAzure.Data.AppConfiguration%2FREADME.png)\n\n<!-- LINKS -->\n[azconfig_docs]: https://docs.microsoft.com/azure/azure-app-configuration/\n[azconfig_contrib]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/appconfiguration/CONTRIBUTING.md\n[azconfig_setting_concepts]: https://docs.microsoft.com/azure/azure-app-configuration/concept-key-value\n[azconfig_asof_snapshot]: https://docs.microsoft.com/azure/azure-app-configuration/concept-point-time-snapshot\n[aad_grant_access]: https://docs.microsoft.com/powershell/module/az.Resources/New-azRoleAssignment?view=azps-1.8.0\n[aad_register_app]: https://docs.microsoft.com/azure/app-service/configure-authentication-provider-aad#-configure-with-advanced-settings\n[azure_identity]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity\n[azure_identity_dac]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md#defaultazurecredential\n[azure_portal]: https://portal.azure.com\n[source_root]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/appconfiguration/Azure.Data.AppConfiguration/src\n[source_samples]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/appconfiguration/Azure.Data.AppConfiguration/samples\n[reference_docs]: https://azure.github.io/azure-sdk-for-net/appconfiguration.html\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/dotnet/\n[configuration_client_class]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/appconfiguration/Azure.Data.AppConfiguration/src/ConfigurationClient.cs\n[configuration_store]: https://docs.microsoft.com/azure/azure-app-configuration/quickstart-dotnet-core-app#create-an-app-configuration-store\n[label_concept]: https://docs.microsoft.com/azure/azure-app-configuration/concept-key-value#label-keys\n[nuget]: https://www.nuget.org/\n[package]: https://www.nuget.org/packages/Azure.Data.AppConfiguration/\n[samples_readme]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/appconfiguration/Azure.Data.AppConfiguration/samples/README.md\n[moq]: https://github.com/Moq/moq4/\n[cla]: https://cla.microsoft.com\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[code_of_conduct_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[email_opencode]: mailto:opencode@microsoft.com\n",
        "repo_name": "appconfiguration/Azure.Data.AppConfiguration",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/appconfiguration/Azure.Data.AppConfiguration",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure App Configuration management client library for .NET\n\nMicrosoft Azure App Configuration provides a service to centrally manage application settings and feature flags. Modern programs, especially programs running in a cloud, generally have many components that are distributed in nature. Spreading configuration settings across these components can lead to hard-to-troubleshoot errors during an application deployment. Use App Configuration to store all the settings for your application and secure their accesses in one place.\n\nThis library supports managing Microsoft Azure App Configuration resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure App Configuration management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.AppConfiguration\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "appconfiguration/Azure.ResourceManager.AppConfiguration",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/appconfiguration/Azure.ResourceManager.AppConfiguration",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Application Insights management client library for .NET\n\nMicrosoft Application Insights is an extension of Azure Monitor and provides Application Performance Monitoring (also known as \u201cAPM\u201d) features. APM tools are useful to monitor applications from development, through test, and into production\n\nThis library supports managing Microsoft Azure Application Insights resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Application Insights management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.ApplicationInsights --prerelease\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "applicationinsights/Azure.ResourceManager.ApplicationInsights",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/applicationinsights/Azure.ResourceManager.ApplicationInsights",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Spring Apps management client library for .NET\n\nMicrosoft Azure Spring Apps is a fully managed service for Spring developers. Manage the lifecycle of your Spring Boot applications with comprehensive monitoring and diagnostics, configuration management, service discovery, CI/CD integration, and blue-green deployments.\n\nThis library supports managing Microsoft Azure Spring Apps resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure App Platform management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.AppPlatform\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "appplatform/Azure.ResourceManager.AppPlatform",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/appplatform/Azure.ResourceManager.AppPlatform",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Arc ScVmm management client library for .NET\n\nMicrosoft Azure Arc ScVmm empowers System Center customers to connect their VMM environment to Azure and perform VM self-service operations from Azure portal. With Azure Arc-enabled SCVMM, you get a consistent management experience across Azure.\n\nThis library supports managing Microsoft Azure Arc ScVmm resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Arc ScVmm management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.ArcScVmm --prerelease\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "arc-scvmm/Azure.ResourceManager.ArcScVmm",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/arc-scvmm/Azure.ResourceManager.ArcScVmm",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Attestation management client library for .NET\n\nMicrosoft Azure Attestation is a unified solution for remotely verifying the trustworthiness of a platform and integrity of the binaries running inside it. The service supports attestation of the platforms backed by Trusted Platform Modules (TPMs) alongside the ability to attest to the state of Trusted Execution Environments (TEEs) such as Intel\u00ae Software Guard Extensions (SGX) enclaves, Virtualization-based Security (VBS) enclaves, Trusted Platform Modules (TPMs), Trusted launch for Azure VMs and Azure confidential VMs.\n\nThis library supports managing Microsoft Azure Attestation resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Attestation management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.Attestation --prerelease\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "attestation/Azure.ResourceManager.Attestation",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/attestation/Azure.ResourceManager.Attestation",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Attestation client library for .NET\n\nThe Microsoft Azure Attestation (MAA) service is a unified solution for remotely verifying the trustworthiness of a platform and integrity of the binaries running inside it. The service supports attestation of the platforms backed by Trusted Platform Modules (TPMs) alongside the ability to attest to the state of Trusted Execution Environments (TEEs) such as Intel\u00ae Software Guard Extensions (SGX) enclaves and Virtualization-based Security (VBS) enclaves.\n\nAttestation is a process for demonstrating that software binaries were properly instantiated on a trusted platform. Remote relying parties can then gain confidence that only such intended software is running on trusted hardware. Azure Attestation is a unified customer-facing service and framework for attestation.\n\nAzure Attestation enables cutting-edge security paradigms such as Azure Confidential computing and Intelligent Edge protection. Customers have been requesting the ability to independently verify the location of a machine, the posture of a virtual machine (VM) on that machine, and the environment within which enclaves are running on that VM. Azure Attestation will empower these and many additional customer requests.\n\nAzure Attestation receives evidence from compute entities, turns them into a set of claims, validates them against configurable policies, and produces cryptographic proofs for claims-based applications (for example, relying parties and auditing authorities).\n\n> NOTE: This is a preview SDK for the Microsoft Azure Attestation service. It provides all the essential functionality to access the Azure Attestation service, it should be considered 'as-is\" and is subject to changes in the future which may break compatibility with previous versions.\n\n  [Source code](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/attestation/Azure.Security.Attestation) | [Package (NuGet)](https://www.nuget.org/packages/Azure.Security.Attestation) | [API reference documentation][API_reference] | [Product documentation](https://docs.microsoft.com/azure/attestation/)\n\n## Getting started\n\n### Prerequisites\n\n* An Azure subscription.  To use Azure services, including the Microsoft Azure Attestation service, you'll need a subscription.  If you do not have an existing Azure account, you may sign up for a [free trial][azure_sub] or use your [Visual Studio Subscription](https://visualstudio.microsoft.com/subscriptions/) benefits when you [create an account](https://account.windowsazure.com/Home/Index).\n* An existing Azure Attestation Instance, or you can use the \"shared provider\" available in each Azure region. If you need to create an Azure Attestation service instance, you can use the Azure Portal or [Azure CLI][azure_cli].\n\n### Install the package\n\nInstall the Microsoft Azure Attestation client library for .NET with [NuGet][nuget]:\n\n```dotnetcli\ndotnet add package Azure.Security.Attestation --prerelease\n```\n\n### Authenticate the client\n\nIn order to interact with the Microsoft Azure Attestation service, you'll need to create an instance of the [Attestation Client][attestation_client] or [Attestation Administration Client][attestation_admin_client] class. You need a **attestation instance url**, which you may see as \"DNS Name\" in the portal,\n and **client secret credentials (client id, client secret, tenant id)** to instantiate a client object.\n\nClient secret credential authentication is being used in this getting started section but you can find more ways to authenticate with [Azure identity][azure_identity]. To use the [DefaultAzureCredential][DefaultAzureCredential] provider shown below,\nor other credential providers provided with the Azure SDK, you should install the Azure.Identity package:\n\n```dotnetcli\ndotnet add package Azure.Identity\n```\n\n#### Create/Get credentials\n\nUse the [Azure CLI][azure_cli] snippet below to create/get client secret credentials.\n\n* Create a service principal and configure its access to Azure resources:\n\n    ```Powershell\n    az ad sp create-for-rbac -n <your-application-name> --skip-assignment\n    ```\n\n    Output:\n\n    ```json\n    {\n        \"appId\": \"generated-app-ID\",\n        \"displayName\": \"dummy-app-name\",\n        \"name\": \"http://dummy-app-name\",\n        \"password\": \"random-password\",\n        \"tenant\": \"tenant-ID\"\n    }\n    ```\n\n* Take note of the service principal objectId\n\n    ```PowerShell\n    az ad sp show --id <appId> --query objectId\n    ```\n\n    Output:\n\n    ```Powershell\n    \"<your-service-principal-object-id>\"\n    ```\n\n* Use the returned credentials above to set  **AZURE_CLIENT_ID** (appId), **AZURE_CLIENT_SECRET** (password), and **AZURE_TENANT_ID** (tenant) environment variables. The following example shows a way to do this in Powershell:\n\n    ```PowerShell\n    $Env:AZURE_CLIENT_ID=\"generated-app-ID\"\n    $Env:AZURE_CLIENT_SECRET=\"random-password\"\n    $Env:AZURE_TENANT_ID=\"tenant-ID\"\n    ```\n\nFor more information about the Azure Identity APIs and how to use them, see [Azure Identity client library](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/identity/Azure.Identity)\n\n## Key concepts\n\nThere are four major families of functionality provided in this preview SDK:\n\n* [SGX and TPM enclave attestation.](#attestation)\n* [MAA Attestation Token signing certificate discovery and validation.](#attestation-token-signing-certificate-discovery-and-validation)  \n* [Attestation Policy management.](#policy-management)\n* [Attestation policy management certificate management](#policy-management-certificate-management) (yes, policy management management).\n\nThe Microsoft Azure Attestation service runs in two separate modes: \"Isolated\" and \"AAD\". When the service is running in \"Isolated\" mode, the customer needs to\nprovide additional information beyond their authentication credentials to verify that they are authorized to modify the state of an attestation instance.\n\nFinally, each region in which the Microsoft Azure Attestation service is available supports a \"shared\" instance, which\ncan be used to attest SGX enclaves which only need verification against the azure baseline (there are no policies applied to the shared instance). TPM attestation is not available in the shared instance.\nWhile the shared instance requires AAD authentication, it does not have any RBAC policies - any customer with a valid AAD bearer token can attest using the shared instance.\n\n### Attestation\n\nSGX or TPM attestation is the process of validating evidence collected from\na trusted execution environment to ensure that it meets both the Azure baseline for that environment and customer defined policies applied to that environment.\n\n### Attestation service token signing certificate discovery and validation\n\nOne of the core operational guarantees of the Azure Attestation Service is that the service operates \"operationally out of the TCB\". In other words, there is no way that a Microsoft operator could tamper with the operation of the service, or corrupt data sent from the client. To ensure this guarantee, the core of the attestation service runs in an Intel(tm) SGX enclave.\n\nTo allow customers to verify that operations were actually performed inside the enclave, most responses from the Attestation Service are encoded in a [JSON Web Token][json_web_token], which is signed by a key held within the attestation service's enclave.\n\nThis token will be signed by a signing certificate issued by the MAA service for the specified instance.\n\nIf the MAA service instance is running in a region where the service runs in an SGX enclave, then\nthe certificate issued by the server can be verified using the [oe_verify_attestation_certificate API](https://openenclave.github.io/openenclave/api/enclave_8h_a3b75c5638360adca181a0d945b45ad86.html).\n\nThe [`AttestationResponse`][attestation_response] object contains two main properties: [`Token`][attestation_response_token] and [`Value`][attestation_response_value]. The `Token` property contains the complete token returned by the attestation service, the `Value` property contains the body of the JSON Web Token response.\n\n### Policy Management\n\nEach attestation service instance has a policy applied to it which defines additional criteria which the customer has defined.\n\nFor more information on attestation policies, see [Attestation Policy](https://docs.microsoft.com/azure/attestation/author-sign-policy)\n\n### Policy Management certificate management\n\nWhen an attestation instance is running in \"Isolated\" mode, the customer who created the instance will have provided\na policy management certificate at the time the instance is created. All policy modification operations require that the customer sign\nthe policy data with one of the existing policy management certificates. The Policy Management Certificate Management APIs enable\nclients to \"roll\" the policy management certificates.\n\n### Isolated Mode and AAD Mode\n\nEach Microsoft Azure Attestation service instance operates in either \"AAD\" mode or \"Isolated\" mode. When an MAA instance is operating in AAD mode, it means that the customer which created the attestation instance allows Azure Active Directory and Azure Role Based Access control policies to verify access to the attestation instance.  \n\n### *AttestationType*\n\nThe Microsoft Azure Attestation service supports attesting different types of evidence depending on the environment.\nCurrently, MAA supports the following Trusted Execution environments:\n\n* OpenEnclave - An Intel(tm) Processor running code in an SGX Enclave where the attestation evidence was collected using the OpenEnclave [`oe_get_report`](https://openenclave.io/apidocs/v0.14/enclave_8h_aefcb89c91a9078d595e255bd7901ac71.html#aefcb89c91a9078d595e255bd7901ac71) or [`oe_get_evidence`](https://openenclave.io/apidocs/v0.14/attester_8h_a7d197e42468636e95a6ab97b8e74c451.html#a7d197e42468636e95a6ab97b8e74c451) API.\n* SgxEnclave - An Intel(tm) Processor running code in an SGX Enclave where the attestation evidence was collected using the Intel SGX SDK.\n* Tpm - A Virtualization Based Security environment where the Trusted Platform Module of the processor is used to provide the attestation evidence.\n\n### Runtime Data and Inittime Data\n\nRuntimeData refers to data which is presented to the Intel SGX Quote generation logic or the `oe_get_report`/`oe_get_evidence` APIs. The Azure Attestation service will validate that the first 32 bytes of the `report_data` field in the SGX Quote/OE Report/OE Evidence matches the SHA256 hash of the RuntimeData.\n\nInitTime data refers to data which is used to configure the SGX enclave being attested.\n\n> Note that InitTime data is not supported on Azure [DCsv2-Series](https://docs.microsoft.com/azure/virtual-machines/dcv2-series) virtual machines.\n\n### Thread safety\n\nWe guarantee that all client instance methods are thread-safe and independent of each other ([guideline](https://azure.github.io/azure-sdk/dotnet_introduction.html#dotnet-service-methods-thread-safety)). This ensures that the recommendation of reusing client instances is always safe, even across threads.\n\n### Additional concepts\n<!-- CLIENT COMMON BAR -->\n[Client options](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#configuring-service-clients-using-clientoptions) |\n[Accessing the response](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#accessing-http-response-details-using-responset) |\n[Long-running operations](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#consuming-long-running-operations-using-operationt) |\n[Handling failures](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#reporting-errors-requestfailedexception) |\n[Diagnostics](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md) |\n[Mocking](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#mocking) |\n[Client lifetime](https://devblogs.microsoft.com/azure-sdk/lifetime-management-and-thread-safety-guarantees-of-azure-sdk-net-clients/)\n<!-- CLIENT COMMON BAR -->\n\n## Examples\n\n* [Create an attestation client instance](#create-client-instance)\n* [Attest an SGX enclave](#attest-sgx-enclave)\n* [Get attestation policy](#get-attestation-policy)\n* [Retrieve token validation certificates](#retrieve-token-certificates)\n* [Create an attestation client instance](#create-client-instance)\n\n### Create client instance\n\nCreates an instance of the Attestation Client at uri `endpoint`.\n\n```C# Snippet:CreateAttestationClient\nvar options = new AttestationClientOptions();\nreturn new AttestationClient(new Uri(endpoint), new DefaultAzureCredential(), options);\n```\n\n### Get attestation policy\n\nThe `GetPolicy` method retrieves the attestation policy from the service.\nAttestation Policies are instanced on a per-attestation type basis, the `AttestationType` parameter defines the type to retrieve.\n\n```C# Snippet:GetPolicy\nvar client = new AttestationAdministrationClient(new Uri(endpoint), new DefaultAzureCredential());\n\nAttestationResponse<string> policyResult = await client.GetPolicyAsync(AttestationType.SgxEnclave);\nstring result = policyResult.Value;\n```\n\n### Set an attestation policy for a specified attestation type\n\nIf the attestation service instance is running in Isolated mode, the SetPolicy API needs to provide a signing certificate (and private key) which can be used to validate that the caller is authorized to modify policy on the attestation instance. If the service instance is running in AAD mode, then the signing certificate and key are optional.\n\nUnder the covers, the SetPolicy APIs create a [JSON Web Token][json_web_token] based on the policy document and signing information which is sent to the attestation service.\n\n```C# Snippet:SetPolicy\nstring attestationPolicy = \"version=1.0; authorizationrules{=> permit();}; issuancerules{};\";\n\nX509Certificate2 policyTokenCertificate = new X509Certificate2(<Attestation Policy Signing Certificate>);\nAsymmetricAlgorithm policyTokenKey = <Attestation Policy Signing Key>;\n\nvar setResult = client.SetPolicy(AttestationType.SgxEnclave, attestationPolicy, new AttestationTokenSigningKey(policyTokenKey, policyTokenCertificate));\n```\n\nClients need to be able to verify that the attestation policy document was not modified before the policy document was received by the attestation service's enclave.\n\nThere are two properties provided in the [PolicyModificationResult][attestation_policy_modification_result] that can be used to verify that the service received the policy document:\n\n* [`PolicySigner`][attestation_policy_modification_result_signer] - if the `SetPolicy` call included a signing certificate, this will be the certificate provided at the time of the `SetPolicy` call. If no policy signer was set, this will be null.\n* [`PolicyTokenHash`][attestation_policy_modification_result_token_hash] - this is the hash of the [JSON Web Token][json_web_token] sent to the service.\n\nTo verify the hash, clients can generate an attestation token and verify the hash generated from that token:\n\n```C# Snippet:VerifySigningHash\n// The SetPolicyAsync API will create an AttestationToken signed with the TokenSigningKey to transmit the policy.\n// To verify that the policy specified by the caller was received by the service inside the enclave, we\n// verify that the hash of the policy document returned from the Attestation Service matches the hash\n// of an attestation token created locally.\nTokenSigningKey signingKey = new TokenSigningKey(<Customer provided signing key>, <Customer provided certificate>)\nvar policySetToken = new AttestationToken(\n    BinaryData.FromObjectAsJson(new StoredAttestationPolicy { AttestationPolicy = attestationPolicy }),\n    signingKey);\n\nusing var shaHasher = SHA256.Create();\nbyte[] attestationPolicyHash = shaHasher.ComputeHash(Encoding.UTF8.GetBytes(policySetToken.Serialize()));\n\nDebug.Assert(attestationPolicyHash.SequenceEqual(setResult.Value.PolicyTokenHash.ToArray()));\n```\n\n### Attest SGX Enclave\n\nUse the `AttestSgxEnclave` method to attest an SGX enclave.\n\nOne of the core challenges customers have interacting with encrypted environments is how to ensure that you can reliably communicate with the code running in the environment (\"enclave code\").\n\nOne solution to this problem is what is known as \"Secure Key Release\", which is a pattern that enables this kind of communication with enclave code.\n\nTo implement the \"Secure Key Release\" pattern, the enclave code generates an ephemeral asymmetric key. It then serializes the public portion of the key to some format (possibly a JSON Web Key, or PEM, or some other serialization format).\n\nThe enclave code then calculates the SHA256 value of the public key and passes it as an input to code which generates an SGX Quote (for OpenEnclave, that would be the [oe_get_evidence](https://openenclave.io/apidocs/v0.14/attester_8h_a7d197e42468636e95a6ab97b8e74c451.html#a7d197e42468636e95a6ab97b8e74c451) or  [oe_get_report](https://openenclave.io/apidocs/v0.14/enclave_8h_aefcb89c91a9078d595e255bd7901ac71.html#aefcb89c91a9078d595e255bd7901ac71)).\n\nThe client then sends the SGX quote and the serialized key to the attestation service. The attestation service will validate the quote and ensure that the hash of the key is present in the quote and will issue an \"Attestation Token\".\n\nThe client can then send that Attestation Token (which contains the serialized key) to a 3rd party \"relying party\". The relying party then validates that the attestation token was created by the attestation service, and thus the serialized key can be used to encrypt some data held by the \"relying party\" to send to the service.\n\nThis example shows one common pattern of calling into the attestation service to retrieve an attestation token associated with a request.\n\nThis example assumes that you have an existing `AttestationClient` object which is configured with the base URI for your endpoint. It also assumes that you have an SGX Quote (`binaryQuote`) generated from within the SGX enclave you are attesting, and \"Runtime Data\" (`runtimeData`) which is referenced in the SGX Quote.\n\n```C# Snippet:AttestSgxEnclave\n// Collect quote and runtime data from an SGX enclave.\n// For the \"Secure Key Release\" scenario, the runtime data is normally a serialized asymmetric key.\n// When the 'quote' (attestation evidence) is created specify the SHA256 hash of the runtime data when\n// creating the evidence.\n//\n// When the generated evidence is created, the hash of the runtime data is included in the\n// secured portion of the evidence.\n//\n// The Attestation service will validate that the Evidence is valid and that the SHA256 of the RuntimeData\n// parameter is included in the evidence.\nAttestationResponse<AttestationResult> attestationResult = client.AttestSgxEnclave(new AttestationRequest\n{\n    Evidence = BinaryData.FromBytes(binaryQuote),\n    RuntimeData = new AttestationData(BinaryData.FromBytes(binaryRuntimeData), false),\n});\n\n// At this point, the EnclaveHeldData field in the attestationResult.Value property will hold the\n// contain the input binaryRuntimeData.\n\n// The token is now passed to the \"relying party\". The relying party will validate that the token was\n// issued by the Attestation Service. It then extracts the asymmetric key from the EnclaveHeldData field.\n// The relying party will then Encrypt it's \"key\" data using the asymmetric key and transmits it back\n// to the enclave.\nvar encryptedData = SendTokenToRelyingParty(attestationResult.Token);\n\n// Now the encrypted data can be passed into the enclave which can decrypt that data.\n```\n\nAdditional information on how to perform attestation token validation can be found in the [MAA Service Attestation Sample](https://github.com/gkostal/attestation/tree/d6a216cd6af5a509e20ac0a752197fdb242fabc3/sgx.attest.sample).\n\n### Retrieve Token Certificates\n\nUse `GetSigningCertificatesAsync` to retrieve the certificates which can be used to validate the token returned from the attestation service.\n\n```C# Snippet:GetSigningCertificates\nvar client = GetAttestationClient();\n\nIReadOnlyList<AttestationSigner> signingCertificates = (await client.GetSigningCertificatesAsync()).Value;\n```\n\n## Troubleshooting\n\nMost Attestation service operations will throw a [RequestFailedException](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/core/Azure.Core/src/RequestFailedException.cs) on failure with helpful ErrorCodes. Many of these errors are recoverable.\n\n```C# Snippet:AttestSgxEnclaveWithException\ntry\n{\n    AttestationResponse<AttestationResult> attestationResult = client.AttestSgxEnclave(new AttestationRequest\n    {\n        Evidence = BinaryData.FromBytes(binaryQuote),\n        RuntimeData = new AttestationData(BinaryData.FromBytes(binaryRuntimeData), false),\n    });\n}\ncatch (RequestFailedException ex)\n    when (ex.ErrorCode == \"InvalidParameter\")\n    {\n    // Ignore invalid quote errors.\n    }\n```\n\nAdditional troubleshooting information for the MAA service can be found [here](https://docs.microsoft.com/azure/attestation/troubleshoot-guide)\n\n## Next steps\n\nFor more information about the Microsoft Azure Attestation service, please see our [documentation page](https://docs.microsoft.com/azure/attestation/).\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [the Contributor License Agreement site](https://cla.microsoft.com).\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][microsoft_code_of_conduct]. For more information see the Code of Conduct FAQ or contact <opencode@microsoft.com> with any additional questions or comments.\n\nSee [CONTRIBUTING.md][contributing] for details on building, testing, and contributing to these libraries.\n\n<!-- LINKS -->\n[style-guide-msft]: https://docs.microsoft.com/style-guide/capitalization\n[style-guide-cloud]: https://aka.ms/azsdk/cloud-style-guide\n[microsoft_code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[API_reference]: https://docs.microsoft.com/dotnet/api/azure.security.attestation?view=azure-dotnet-preview\n[attestation_admin_client]: https://docs.microsoft.com/dotnet/api/azure.security.attestation.attestationadministrationclient\n[attestation_client]: https://docs.microsoft.com/dotnet/api/azure.security.attestation.attestationclient\n[attestation_response]: https://docs.microsoft.com/dotnet/api/azure.security.attestation.attestationresponse-1\n[attestation_response_token]: https://docs.microsoft.com/dotnet/api/azure.security.attestation.attestationresponse-1.token\n[attestation_response_value]: https://docs.microsoft.com/dotnet/api/azure.security.attestation.attestationresponse-1.value\n[attestation_policy_modification_result]: https://docs.microsoft.com/dotnet/api/azure.security.attestation.policymodificationresult\n[attestation_policy_modification_result_signer]: https://docs.microsoft.com/dotnet/api/azure.security.attestation.policymodificationresult.policysigner\n[attestation_policy_modification_result_token_hash]: https://docs.microsoft.com/dotnet/api/azure.security.attestation.policymodificationresult.policytokenhash\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_identity]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/identity/Azure.Identity\n[azure_sub]: https://azure.microsoft.com/free/dotnet/\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[json_web_token]: https://tools.ietf.org/html/rfc7519\n[JWK]: https://tools.ietf.org/html/rfc7517\n[base64url_encoding]: https://tools.ietf.org/html/rfc4648#section-5\n[nuget]: https://www.nuget.org/\n[DefaultAzureCredential]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md#defaultazurecredential\n[contributing]: https://github.com/Azure/azure-sdk-for-net/blob/main/CONTRIBUTING.md\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2Fsdk%2Fattestation%2FAzure.Security.Attestation%2FREADME.png)\n",
        "repo_name": "attestation/Azure.Security.Attestation",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/attestation/Azure.Security.Attestation",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Authorization management client library for .NET\n\nThe Microsoft Azure Authorization service provides authorization functionality as Azure core service which can serve for public and as well as for internal tenants. \n\nThis library supports managing Microsoft Azure Attestation resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Authorization management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.Authorization\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "authorization/Azure.ResourceManager.Authorization",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/authorization/Azure.ResourceManager.Authorization",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Automanage management client library for .NET\n\nThe Microsoft Azure Automanage offers a unified solution to simplify IT management. With point-and-click simplicity, automate operations and apply consistent best practices across the entire lifecycle of Windows Server and Linux servers in Azure or in hybrid environments enabled by Azure Arc.\n\nThis library supports managing Microsoft Azure Automanage resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Automanage management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.Automanage\n```\n\n### Prerequisites\n\n* You must have an [Azure subscription](https://azure.microsoft.com/free/dotnet/)\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Azure resources, please see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md)\n\n## Key concepts\n\nKey concepts of the Azure .NET SDK can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md)\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet)\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md)\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://docs.microsoft.com/samples/browse/?branch=master&languages=csharp&term=managing%20using%20Azure%20.NET%20SDK)\n\n## Troubleshooting\n\n-   File an issue via [Github\n    Issues](https://github.com/Azure/azure-sdk-for-net/issues)\n-   Check [previous\n    questions](https://stackoverflow.com/questions/tagged/azure+.net)\n    or ask new ones on Stack Overflow using azure and .net tags.\n\n\n## Next steps\n\nFor more information on Azure SDK, please refer to [this website](https://azure.github.io/azure-sdk/)\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(e.g., label, comment). Simply follow the instructions provided by the\nbot. You will only need to do this once across all repositories using\nour CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "automanage/Azure.ResourceManager.Automanage",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/automanage/Azure.ResourceManager.Automanage",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Automation management client library for .NET\n\nMicrosoft Azure Automation delivers a cloud-based automation, operating system updates, and configuration service that supports consistent management across your Azure and non-Azure environments. It includes process automation, configuration management, update management, shared capabilities, and heterogeneous features.\n\nThis library supports managing Microsoft Azure Automation resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Automation management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.Automation\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "automation/Azure.ResourceManager.Automation",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/automation/Azure.ResourceManager.Automation",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure VMware Solution management client library for .NET\n\nMicrosoft Azure VMware Solution is a VMware validated solution with ongoing validation and testing of enhancements and upgrades. Microsoft manages and maintains the private cloud infrastructure and software. It allows you to focus on developing and running workloads in your private clouds to deliver business value.\n\nThis library supports managing Microsoft Azure VMware Solution resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure VMware Solution management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.Avs\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "avs/Azure.ResourceManager.Avs",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/avs/Azure.ResourceManager.Avs",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Stack HCI management client library for .NET\n\nMicrosoft Azure VMware Solution is a VMware validated solution with ongoing validation and testing of enhancements and upgrades. Microsoft manages and maintains the private cloud infrastructure and software. It allows you to focus on developing and running workloads in your private clouds to deliver business value.\n\nThis library supports managing Microsoft Azure Stack HCI resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started\n\n### Install the package\n\nInstall the Azure Stack HCI management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.Hci\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "azurestackhci/Azure.ResourceManager.Hci",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/azurestackhci/Azure.ResourceManager.Hci",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Batch management client library for .NET\n\nUse Microsoft Azure Batch to run large-scale parallel and high-performance computing (HPC) batch jobs efficiently in Azure. Azure Batch creates and manages a pool of compute nodes (virtual machines), installs the applications you want to run, and schedules jobs to run on the nodes. \n\nThis library supports managing Microsoft Azure Batch resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Batch management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.Batch\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "batch/Azure.ResourceManager.Batch",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/batch/Azure.ResourceManager.Batch",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Batch File Conventions\n\nA convention-based library for saving and retrieving Azure Batch task output files.\n\n## Purpose\n\nWhen you run a task in Azure Batch, the files created by that task are on the\ncompute node where the task ran.  As long as the compute node remains up, and within\nthe file retention time of the task, you can retrieve those files via the Batch API.\nHowever, if you need the files to remain available even if the compute node is taken\ndown (for example, as part of a pool resize), or after the retention time has expired,\nyou must persist those files to a durable store.\n\nThis library encapsulates a convention for persisting job and task outputs in Azure blob\nstorage.  This allows client code to easily locate the outputs for a given job or\ntask, allowing those outputs to be listed or retrieved by ID and purpose.  For example,\na client can use the library to request 'list all the intermediate files for task 7'\nor 'get me the thumbnail preview for job \"mymovie\"' without needing to know names or locations.\n\nThe categorization of persisted files as 'output', 'preview', etc. is done using the\nJobOutputKind and TaskOutputKind types.  For job output files, the predefined kinds\nare \"JobOutput\" and \"JobPreview\"; for task output files, \"TaskOutput\", \"TaskPreview\",\n\"TaskLog\" and \"TaskIntermediate\".  You can also define custom kinds if these\nare useful in your workflow.\n\n## Prerequisites\n\nThe library uses the Azure Storage account linked to your Batch account.  If your Batch account\ndoesn't have a linked storage account, you can configure one using the [Azure portal](https://portal.azure.com).\n\n## Usage\n\nThe library is intended for use in both task code and client code -- in task code to\npersist files, in client code to list and retrieve them.\n\n### Persisting Files in Task Code\n\nTo persist a file from task code, use the JobOutputStorage and TaskOutputStorage\nconstructors that take a job output container URL, and call the SaveAsync method:\n\n    var linkedStorageAccount = new CloudStorageAccount(/* credentials */);\n    var jobId = Environment.GetEnvironmentVariable(\"AZ_BATCH_JOB_ID\");\n    var taskId = Environment.GetEnvironmentVariable(\"AZ_BATCH_TASK_ID\");\n    \n    var taskOutputStorage = new TaskOutputStorage(linkedStorageAccount, jobId, taskId);\n    \n    await taskOutputStorage.SaveAsync(TaskOutputKind.TaskOutput, \"frame_full_res.jpg\");\n    await taskOutputStorage.SaveAsync(TaskOutputKind.TaskPreview, \"frame_low_res.jpg\");\n    \nNote that all output files from a job, including task outputs, are stored in the same container. This means that\n[storage throttling limits](https://azure.microsoft.com/documentation/articles/storage-performance-checklist/#blobs)\nmay be enforced if a large number of tasks try to persist files at the same time. \n\n### Listing and Retrieving Files in Client Code\n\nTo access persisted files from client code, you must configure the client with\nthe details of the linked storage account.  Then use the JobOutputStorage and\nTaskOutputStorage constructors that take a CloudStorageAccount, or the extension\nmethods on CloudJob and CloudTask.\n\n    var job = await batchClient.JobOperations.GetJobAsync(jobId);\n    var jobOutputStorage = job.OutputStorage(linkedStorageAccount);\n\n    var jobOutputBlob = jobOutputStorage.ListOutputs(JobOutputKind.JobOutput)\n                                        .SingleOrDefault()\n                                        as CloudBlockBlob;\n\n    if (jobOutputBlob != null)\n    {\n        await jobOutputBlob.DownloadToFileAsync(\"movie.mp4\", FileMode.Create);\n    }\n\n## Conventions\n\nThe conventions library defines paths in Azure blob storage for output storage.\nAll outputs from a job, including task outputs, are stored in a single container.\nWithin that container, outputs are stored by kind and (for task outputs) task ID.\nThis section describes the conventions for the job output container name and for\npaths within the job output container.\n\n### Job Output Container Name\n\nThe job output container name is formed according to the following rules:\n\n* Normalize the job ID to lower case. (Due to the restricted set of letters\n  permitted in IDs, there are no locale issues with this normalization.)\n* If prepending \"job-\" to the normalized ID gives a valid container name,\n  use that.\n* Otherwise:\n  * Calculate the SHA1 hash of the normalized ID, and express it\n    as a 40-character hex string.\n  * Replace all underscores, colons, and sequences of one or more hyphens in \n    the normalized ID by single hyphens, then remove any leading or trailing\n    hyphens.\n  * If the resulting string is empty, use the string \"job\" instead.\n  * If the resulting string is longer than 15 characters, truncate it\n    to 15 characters. If truncation results in a trailing hyphen, remove\n\tit.\n  * The container name is the string \"job-\", followed by the truncated\n    ID, followed by a hyphen, followed by the hash.\n\nFor example, if the job ID is `MyTerrificJob`, then the container name is\n`job-myterrificjob` as this is a valid container name. If the job ID is\n`my-_EVEN_MORE_-terrific-job`, we cannot use `job-my-_even_more_-terrific-job`\nas this is not a valid container name, so we apply the algorithm:\n\n* The SHA1 hash of `my-_even_more_-terrific-job` (all lower case) is\n  `68b05a7d8aa6aa65b9a6892c667a6c406a16ad65`.\n* Replacing hyphens and underscores by single hyphens in the lower case\n  ID gives `my-even-more-terrific-job`. There are no leading or trailing\n  hyphens to remove.\n* Truncating to 15 characters gives us `my-even-more-te`. Again there are\n  no leading or trailing hyphens to remove.\n* The final container name is `job-my-even-more-te-68b05a7d8aa6aa65b9a6892c667a6c406a16ad65`.\n\nThe purpose behind this algorithm is to ensure that jobs are given valid and\nunique container names, while preserving human readability as far as possible,\nby where possible using the job ID, and in other cases including a prefix\nbased on the job ID.\n\n### Blob Path\n\nThe blob path within the container depends on whether the output is being stored\nas a job output or task output.\n\nJob outputs are stored as \"${kind}/{filename}\".  For example, if the file\n\"out/mergeresults.txt\" is stored under JobOutputKind.JobOutput, then its path\nwithin the container is \"$JobOutput/out/mergeresults.txt\".\n\nTask outputs are stored as \"{taskid}/${kind}/{filename}\".  For example, if\nthe file \"analytics.log\" from task \"analysis-309\" is stored under TaskOutputKind.TaskLog,\nthen its path within the container is \"analysis-309/$TaskLog/analytics.log\".\n\nThe purpose behind this structure is to enable clients to readily locate\noutputs based on their kind - for example, \"list the main outputs of the job\"\nor \"list the log files for task analysis-309\".\n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2Fsdk%2Fbatch%2FMicrosoft.Azure.Batch.Conventions.Files%2FREADME.png)\n",
        "repo_name": "batch/Microsoft.Azure.Batch.Conventions.Files",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/batch/Microsoft.Azure.Batch.Conventions.Files",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# License notes\n\nThe Azure Batch C# client is now under the MIT license. Prior to March 10 2017 it was under the Apache 2.0 license.\n\n## Azure Batch SDK developer guide\n\n`Microsoft.Azure.Batch.sln` is your one stop shop for all things related to the Azure Batch C# client library. This solution file contains all of the projects affiliated with the Azure Batch client (including testing and tooling).\n\n## Changing the Azure Batch client\n\nDepending on the type of change you want to make, the work required varies. If you follow this process you shouldn't miss anything:\n\n1. Update the Azure Batch Swagger specification, which resides in the [Azure/azure-rest-api-specs](https://github.com/Azure/azure-rest-api-specs) GitHub repository (specifically [here](https://github.com/Azure/azure-rest-api-specs/tree/master/specification/batch/data-plane))\n    * Add new entity types into the Swagger specification.\n    * Add new APIs as path-verb pairs in the Swagger specification.\n    * Add/remove properties on existing entity types in the Swagger specification.\n2. Regenerate the `src\\GeneratedProtocol` folder using the steps [below](#generate-the-srcgeneratedprotocol-folder-using-autorest).\n3. Update the corresponding convenience layer specification file(s) located in `Tools\\ObjectModelCodeGenerator\\Spec`.\n    * Add new entities that match the Swagger defined entities.\n    * Add/remove properties on existing entities as done in the Swagger specification.\n    * Ensure that documentation is properly updated to reflect changes made in the Swagger specification (it usually helps to look at a diff of the Swagger for the API version in question).\n4. Regenerate the `src\\Generated` folder from the convenience layer specification file using the steps [below](#generate-the-srcgenerated-folder).\n5. Add any custom code on the `Generated` objects into `partial` classes located in the `src` directory.\n    * You might want to do this to add an `[Obsolete]` attribute or to add some helper factory methods.\n6. If any APIs have changed, or if new APIs have been added, you must update the following places:\n    * The `src\\IProtocolLayer.cs` interface.\n    * The `src\\ProtocolLayer.cs` class.  \n    * The corresponding operations class, for example `PoolOperations.cs`.\n    * The corresponding entity which the operation is performed on, for example `CloudPool.cs`.\n7. Add tests for your new models and APIs into the correct test projects.\n    * `Azure.Batch.Unit.Tests` for unit tests. These tests do not have any external dependencies (they run entirely in-memory) and are used in the continuous integration job to validate checkins.\n    * `BatchClientIntegrationTests` for integration tests. These tests run against a live Azure Batch endpoint and do not run during CI. See [running the end to end tests](#running-the-end-to-end-tests) for more details about how to run these tests.\n    * **Note:** You should prefer to add unit tests over integration tests where possible -- integration tests should be reserved for ensuring that the Batch Service accepts the Swagger requests. Testing service behavior should occur in a service test, not the client.\n8. Update the `CHANGELOG.md` file and the `Version` tag in `src/Microsoft.Azure.Batch.csproj`. Ensure that if you are making a breaking change, you update the major version of the version number.\n9. Run the tests and ensure that they pass.\n10. Open a PR to <https://github.com/Azure/azure-sdk-for-net>\n\n### Generate the `src\\GeneratedProtocol` folder using AutoRest\n\nThe GeneratedProtocol folder holds the code generated by the [AutoRest](https://github.com/Azure/autorest) tool from a Swagger specification. The AutoRest tool has a command line interface of its own which you can use directly, or you can run `powershell Start-AutoRestCodeGeneration -ResourceProvider \"batch/data-plane\" -SdkRepoRootPath \"<path to root of this repo>\" -AutoRestVersion \"latest\" -SdkGenerationDirectory \"<path to root of this repo>\\sdk\\batch\\Microsoft.Azure.Batch\\src\\GeneratedProtocol\" -ConfigFileTag \"package-2020-03.11.0\"`\n\n### Generate the `src\\Generated` folder\n\nThis folder contains the convenience layer models for Azure Batch. It is generated from a custom tool. The custom tool reads all of the specification files located in `Tools\\ObjectModelCodeGenerator\\Spec`. The convenience layer models require more metadata than the Swagger specification provides, so this file is an extra mapping layer on top of Swagger which provides more detail. **Note:** These specification files are all about the models, they have nothing to do with the actual APIs.\n\n1. New entities defined in the Swagger specification have to be added here as well. See an existing entity for an example.\n2. If the type or name of a property has changed in the underlying Swagger specification, it should be updated here as well.\n\nThere are a number of special flags which have meaning in the specification files. The easiest way to see a list of what flags are supported and at what level is to look at the backing code generation code:\n\n1. For properties: `Tools\\ObjectModelCodeGeneration\\CodeGenerationLibrary\\PropertyData.cs`\n2. For types: `Tools\\ObjectModelCodeGeneration\\CodeGenerationLibrary\\ObjectModelTypeData.cs`\n\nOnce you have added and updated the required files in `Tools\\ObjectModelCodeGenerator\\Spec` mark the `ObjectModelCodeGenerator` as your startup project in Visual Studio and run it -- it will regenerate the contents of the `src\\Generated` folder.\n\n## Running the end to end tests\n\nA full end to end test pass takes 20-40 minutes.\nThe following environment variables must be set for the the end to end tests to work - it is recommended to set up a script which sets these all so that it can easily be reused later:\n\n1. `MABOM_BatchAccountEndpoint`: The endpoint for your Batch account, i.e. `https://<account>.<region>.batch.azure.com`\n2. `MABOM_BatchAccountSubscriptionId`: The subscription id that your Batch and Storage accounts are in. Please note your storage account and your Batch account need to be in the same subscription.\n3. `MABOM_BatchAccountResourceGroupName`: The resource group your Batch account is in.\n4. `MABOM_BatchAccountName`: The name of your Batch account.\n5. `\u200bMABOM_BatchAccountKey`: The key of your Batch account.\n6. `MABOM_StorageAccountResourceGroupName`: The name of the resource group of your storage account.\n7. `MABOM_StorageAccount`: The name of your storage account.\n8. `MABOM_StorageKey`: The key to your storage account.\n9. `MABOM_BlobEndpoint`: The blob endpoint for the storage account, i.e. `https://<account>.blob.core.windows.net`\n10. `MABOM_BatchManagementEndpoint`: The management endpoint for the tenant you are targeting. This will usually be `https://management.azure.com/`.\n11. `MABOM_AzureAuthenticationClientId`: The client ID of an AAD App Registration with contributor access to the subscription you're using (#2).\n12. `MABOM_AzureAuthenticationClientSecret`: The secret for the App Registration (#11).\n\nIf running the tests against a test tenant, you also must set:\n\n13. `MABOM_BatchTRPExtraHeaders` to x-ms-version=2015-12-01;x-ms-client-tenant-id=microsoft.onmicrosoft.com\n14. `MABOM_BatchTRPCertificateThumbprint`: The thumbprint used to authenticate with the Batch Resource Provider.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2Fsdk%2Fbatch%2FMicrosoft.Azure.Batch%2FREADME.png)\n",
        "repo_name": "batch/Microsoft.Azure.Batch",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/batch/Microsoft.Azure.Batch",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Deprecated\n\nThis package has been deprecated in favor of the `Azure.ResourceManager.Batch` package.  For instructions on how to use the new package, see the [migration guide](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/MigrationGuide.md). Also see https://aka.ms/azsdk/deprecated for more information on ongoing support for `Microsoft.Azure.Management.Batch`.\n\n# Azure Batch Management SDK developer guide\n\n1. Update the Azure Batch Management Swagger specification, which resides in the [Azure/azure-rest-api-specs](https://github.com/Azure/azure-rest-api-specs) GitHub repository (specifically [here](https://github.com/Azure/azure-rest-api-specs/tree/master/specification/batch/resource-manager))\n    * Add new entity types into the Swagger specification.\n    * Add new APIs as path-verb pairs in the Swagger specification.\n    * Add/remove properties on existing entity types in the Swagger specification.\n2. Regenerate the SDK based using [AutoRest](https://github.com/Azure/autorest) on the updated Swagger specification:\n    * See this document for more information: https://github.com/Azure/adx-documentation-pr/blob/master/engineering/adx_netsdk_process.md#sdk-generation-from-updated-spec\n    * Run the command from the root of the repo: `sdk/batch/Microsoft.Azure.Management.Batch/src/generate.ps1` \n3. Add new tests for your new models and APIs. There are two types of tests, \"recorded\" tests and unit tests:\n    * Recorded tests are run live and the request/response payloads are recorded and then replayed for subsequent runs.\n    * Unit tests are in-memory tests which never actually make a REST call.\n    * **Note:** You should prefer to add unit tests over recording tests where possible -- recording tests should be reserved for ensuring that the Batch Service accepts the Swagger payload, and only cover the basic happy path scenarios.\n4. Update the `CHANGELOG.md` file and the `Version` tag in `src/Microsoft.Azure.Management.Batch.csproj`. Ensure that if you are making a breaking change, you update the major version of the version number.\n5. Re-record all of the recording tests against the new API version (see [here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/Using-Azure-TestFramework.md) for details on how to use the recording framework).\n6. Switch test mode back to `Playback` and ensure that all of the tests pass.\n7. Open a PR to https://github.com/Azure/azure-sdk-for-net.\n",
        "repo_name": "batch/Microsoft.Azure.Management.Batch",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/batch/Microsoft.Azure.Management.Batch",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Billing management client library for .NET\n\nMicrosoft Cost Management is a suite of tools that help organizations monitor, allocate, and optimize the cost of their Microsoft Cloud workloads.\n\nThis library supports viewing and managing your billing details.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Billing management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.Billing\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "billing/Azure.ResourceManager.Billing",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/billing/Azure.ResourceManager.Billing",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Billing Benefits management client library for .NET\n\nMicrosoft Billing Benefits is a Microsoft-managed service which allows management on Azure savings plan. See here for more details about savings plan: https://learn.microsoft.com/azure/cost-management-billing/savings-plan/savings-plan-compute-overview\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started\n\n### Install the package\n\nInstall the Microsoft Azure BillingBenefits management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.BillingBenefits --prerelease\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html)\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "billingbenefits/Azure.ResourceManager.BillingBenefits",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/billingbenefits/Azure.ResourceManager.BillingBenefits",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Blueprint management client library for .NET\n\nMicrosoft Azure Blueprints enables cloud architects and central information technology groups to define a repeatable set of Azure resources that implements and adheres to an organization's standards, patterns, and requirements. Azure Blueprints makes it possible for development teams to rapidly build and start up new environments with trust they're building within organizational compliance with a set of built-in components, such as networking, to speed up development and delivery.\n\nThis library supports managing Microsoft Azure Blueprint resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Blueprint management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.Blueprint --prerelease\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "blueprint/Azure.ResourceManager.Blueprint",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/blueprint/Azure.ResourceManager.Blueprint",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Bot classic deployment model client library for .NET\n\nMicrosoft Azure Bot Service provides an integrated development environment for bot building. Its integration with Power Virtual Agents, a fully hosted low-code platform, enables developers of all technical abilities build conversational AI bots\u2014no code needed.\n\nThis library supports managing Microsoft Azure Bot Service resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Bot Service management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.BotService\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "botservice/Azure.ResourceManager.BotService",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/botservice/Azure.ResourceManager.BotService",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Cdn management client library for .NET\n\nMicrosoft Azure Content Delivery Network (Cdn) offers a global solution for rapidly delivering content. Save bandwidth and improve responsiveness when encoding or distributing gaming software, firmware updates, and IoT endpoints. Reduce load times for websites, mobile apps, and streaming media to increase user satisfaction globally.\n\nThis library supports managing Microsoft Azure Cdn resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Cdn management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.Cdn\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "cdn/Azure.ResourceManager.Cdn",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/cdn/Azure.ResourceManager.Cdn",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Change Analysis management client library for .NET\n\nMicrosoft Azure Change Analysis detects various types of changes, from the infrastructure layer through application deployment. Change Analysis is a subscription-level Azure resource provider that:\n\n- Checks resource changes in the subscription.\n- Provides data for various diagnostic tools to help users understand what changes might have caused issues.\n\nThis library supports managing Microsoft Azure Change Analysis resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Change Analysis management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.ChangeAnalysis\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "changeanalysis/Azure.ResourceManager.ChangeAnalysis",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/changeanalysis/Azure.ResourceManager.ChangeAnalysis",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Chaos management client library for .NET\n\nMicrosoft Azure Chaos is a managed service that uses chaos engineering to help you measure, understand, and improve your cloud application and service resilience. Chaos engineering is a methodology by which you inject real-world faults into your application to run controlled fault injection experiments.\n\nThis library supports managing Microsoft Azure Chaos resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Chaos management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.Chaos --prerelease\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "chaos/Azure.ResourceManager.Chaos",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/chaos/Azure.ResourceManager.Chaos",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Cognitive Language Services Conversations client library for .NET\n\nConversational Language Understanding - aka CLU for short - is a cloud-based conversational AI service which provides many language understanding capabilities like:\n\n- Conversation App: It's used in extracting intents and entities in conversations\n- Workflow app: Acts like an orchestrator to select the best candidate to analyze conversations to get best response from apps like Qna, Luis, and Conversation App\n\n[Source code][conversationanalysis_client_src] | [Package (NuGet)][conversationanalysis_nuget_package] | [API reference documentation][conversationanalysis_refdocs] | [Samples][conversationanalysis_samples] | [Product documentation][conversationanalysis_docs] | [Analysis REST API documentation][conversationanalysis_restdocs] | [Authoring REST API documentation][conversationanalysis_restdocs_authoring]\n\n## Getting started\n\n### Install the package\n\nInstall the Azure Cognitive Language Services Conversations client library for .NET with [NuGet][nuget]:\n\n```powershell\ndotnet add package Azure.AI.Language.Conversations\n```\n\n### Prerequisites\n\n- An [Azure subscription][azure_subscription]\n- An existing Azure Language Service Resource\n\nThough you can use this SDK to create and import conversation projects, [Language Studio][language_studio] is the preferred method for creating projects.\n\n### Authenticate the client\n\nIn order to interact with the Conversations service, you'll need to create an instance of the [`ConversationAnalysisClient`][conversationanalysis_client_class] class. You will need an **endpoint**, and an **API key** to instantiate a client object. For more information regarding authenticating with Cognitive Services, see [Authenticate requests to Azure Cognitive Services][cognitive_auth].\n\n#### Get an API key\n\nYou can get the **endpoint** and an **API key** from the Cognitive Services resource in the [Azure Portal][azure_portal].\n\nAlternatively, use the [Azure CLI][azure_cli] command shown below to get the API key from the Cognitive Service resource.\n\n```powershell\naz cognitiveservices account keys list --resource-group <resource-group-name> --name <resource-name>\n```\n\n#### Namespaces\n\nStart by importing the namespace for the [`ConversationAnalysisClient`][conversationanalysis_client_class] and related class:\n\n```C# Snippet:ConversationAnalysisClient_Namespaces\nusing Azure.Core;\nusing Azure.AI.Language.Conversations;\n```\n\n#### Create a ConversationAnalysisClient\n\nOnce you've determined your **endpoint** and **API key** you can instantiate a `ConversationAnalysisClient`:\n\n```C# Snippet:ConversationAnalysisClient_Create\nUri endpoint = new Uri(\"https://myaccount.cognitiveservices.azure.com\");\nAzureKeyCredential credential = new AzureKeyCredential(\"{api-key}\");\n\nConversationAnalysisClient client = new ConversationAnalysisClient(endpoint, credential);\n```\n\n#### Create a ConversationAuthoringClient\n\nTo use the `ConversationAuthoringClient`, use the following namespace in addition to those above, if needed.\n\n```C# Snippet:ConversationAuthoringClient_Namespace\nusing Azure.AI.Language.Conversations.Authoring;\n```\n\nWith your **endpoint** and **API key**, you can instantiate a `ConversationAuthoringClient`:\n\n```C# Snippet:ConversationAuthoringClient_Create\nUri endpoint = new Uri(\"https://myaccount.cognitiveservices.azure.com\");\nAzureKeyCredential credential = new AzureKeyCredential(\"{api-key}\");\n\nConversationAuthoringClient client = new ConversationAuthoringClient(endpoint, credential);\n```\n\n#### Create a client using Azure Active Directory authentication\n\nYou can also create a `ConversationAnalysisClient` or `ConversationAuthoringClient` using Azure Active Directory (AAD) authentication. Your user or service principal must be assigned the \"Cognitive Services Language Reader\" role.\nUsing the [DefaultAzureCredential] you can authenticate a service using Managed Identity or a service principal, authenticate as a developer working on an application, and more all without changing code.\n\nBefore you can use the `DefaultAzureCredential`, or any credential type from [Azure.Identity][azure_identity], you'll first need to [install the Azure.Identity package][azure_identity_install].\n\nTo use `DefaultAzureCredential` with a client ID and secret, you'll need to set the `AZURE_TENANT_ID`, `AZURE_CLIENT_ID`, and `AZURE_CLIENT_SECRET` environment variables; alternatively, you can pass those values\nto the `ClientSecretCredential` also in Azure.Identity.\n\nMake sure you use the right namespace for `DefaultAzureCredential` at the top of your source file:\n\n```C# Snippet:Conversation_Identity_Namespace\nusing Azure.Identity;\n```\n\nThen you can create an instance of `DefaultAzureCredential` and pass it to a new instance of your client:\n\n```C# Snippet:ConversationAnalysisClient_CreateWithDefaultAzureCredential\nUri endpoint = new Uri(\"https://myaccount.cognitiveservices.azure.com\");\nDefaultAzureCredential credential = new DefaultAzureCredential();\n\nConversationAnalysisClient client = new ConversationAnalysisClient(endpoint, credential);\n```\n\nNote that regional endpoints do not support AAD authentication. Instead, create a [custom domain][custom_domain] name for your resource to use AAD authentication.\n\n## Key concepts\n\n### ConversationAnalysisClient\n\nThe [`ConversationAnalysisClient`][conversationanalysis_client_class] is the primary interface for making predictions using your deployed Conversations models. It provides both synchronous and asynchronous APIs to submit queries.\n\n### Thread safety\n\nWe guarantee that all client instance methods are thread-safe and independent of each other ([guideline](https://azure.github.io/azure-sdk/dotnet_introduction.html#dotnet-service-methods-thread-safety)). This ensures that the recommendation of reusing client instances is always safe, even across threads.\n\n### Additional concepts\n\n<!-- CLIENT COMMON BAR -->\n[Client options](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#configuring-service-clients-using-clientoptions) |\n[Accessing the response](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#accessing-http-response-details-using-responset) |\n[Long-running operations](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#consuming-long-running-operations-using-operationt) |\n[Handling failures](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#reporting-errors-requestfailedexception) |\n[Diagnostics](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md) |\n[Mocking](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#mocking) |\n[Client lifetime](https://devblogs.microsoft.com/azure-sdk/lifetime-management-and-thread-safety-guarantees-of-azure-sdk-net-clients/)\n<!-- CLIENT COMMON BAR -->\n\n## Examples\n\nThe Azure.AI.Language.Conversations client library provides both synchronous and asynchronous APIs.\n\nThe following examples show common scenarios using the `client` [created above](#create-a-conversationanalysisclient).\n\n### Analyze a conversation\n\nTo analyze a conversation, you can call the `AnalyzeConversation()` method:\n\n```C# Snippet:ConversationAnalysis_AnalyzeConversation\nstring projectName = \"Menu\";\nstring deploymentName = \"production\";\n\nvar data = new\n{\n    analysisInput = new\n    {\n        conversationItem = new\n        {\n            text = \"Send an email to Carol about tomorrow's demo\",\n            id = \"1\",\n            participantId = \"1\",\n        }\n    },\n    parameters = new\n    {\n        projectName,\n        deploymentName,\n\n        // Use Utf16CodeUnit for strings in .NET.\n        stringIndexType = \"Utf16CodeUnit\",\n    },\n    kind = \"Conversation\",\n};\n\nResponse response = client.AnalyzeConversation(RequestContent.Create(data));\n\nusing JsonDocument result = JsonDocument.Parse(response.ContentStream);\nJsonElement conversationalTaskResult = result.RootElement;\nJsonElement conversationPrediction = conversationalTaskResult.GetProperty(\"result\").GetProperty(\"prediction\");\n\nConsole.WriteLine($\"Top intent: {conversationPrediction.GetProperty(\"topIntent\").GetString()}\");\n\nConsole.WriteLine(\"Intents:\");\nforeach (JsonElement intent in conversationPrediction.GetProperty(\"intents\").EnumerateArray())\n{\n    Console.WriteLine($\"Category: {intent.GetProperty(\"category\").GetString()}\");\n    Console.WriteLine($\"Confidence: {intent.GetProperty(\"confidenceScore\").GetSingle()}\");\n    Console.WriteLine();\n}\n\nConsole.WriteLine(\"Entities:\");\nforeach (JsonElement entity in conversationPrediction.GetProperty(\"entities\").EnumerateArray())\n{\n    Console.WriteLine($\"Category: {entity.GetProperty(\"category\").GetString()}\");\n    Console.WriteLine($\"Text: {entity.GetProperty(\"text\").GetString()}\");\n    Console.WriteLine($\"Offset: {entity.GetProperty(\"offset\").GetInt32()}\");\n    Console.WriteLine($\"Length: {entity.GetProperty(\"length\").GetInt32()}\");\n    Console.WriteLine($\"Confidence: {entity.GetProperty(\"confidenceScore\").GetSingle()}\");\n    Console.WriteLine();\n\n    if (entity.TryGetProperty(\"resolutions\", out JsonElement resolutions))\n    {\n        foreach (JsonElement resolution in resolutions.EnumerateArray())\n        {\n            if (resolution.GetProperty(\"resolutionKind\").GetString() == \"DateTimeResolution\")\n            {\n                Console.WriteLine($\"Datetime Sub Kind: {resolution.GetProperty(\"dateTimeSubKind\").GetString()}\");\n                Console.WriteLine($\"Timex: {resolution.GetProperty(\"timex\").GetString()}\");\n                Console.WriteLine($\"Value: {resolution.GetProperty(\"value\").GetString()}\");\n                Console.WriteLine();\n            }\n        }\n    }\n}\n```\n\nAdditional options can be passed to `AnalyzeConversation` like enabling more verbose output:\n\n```C# Snippet:ConversationAnalysis_AnalyzeConversationWithOptions\nstring projectName = \"Menu\";\nstring deploymentName = \"production\";\n\nvar data = new\n{\n    analysisInput = new\n    {\n        conversationItem = new\n        {\n            text = \"Send an email to Carol about tomorrow's demo\",\n            id = \"1\",\n            participantId = \"1\",\n        }\n    },\n    parameters = new\n    {\n        projectName,\n        deploymentName,\n        verbose = true,\n\n        // Use Utf16CodeUnit for strings in .NET.\n        stringIndexType = \"Utf16CodeUnit\",\n    },\n    kind = \"Conversation\",\n};\n\nResponse response = client.AnalyzeConversation(RequestContent.Create(data));\n```\n\n### Analyze a conversation in a different language\n\nThe `language` property can be set to specify the language of the conversation:\n\n```C# Snippet:ConversationAnalysis_AnalyzeConversationWithLanguage\nstring projectName = \"Menu\";\nstring deploymentName = \"production\";\n\nvar data = new\n{\n    analysisInput = new\n    {\n        conversationItem = new\n        {\n            text = \"Enviar un email a Carol acerca de la presentaci\u00f3n de ma\u00f1ana\",\n            language = \"es\",\n            id = \"1\",\n            participantId = \"1\",\n        }\n    },\n    parameters = new\n    {\n        projectName,\n        deploymentName,\n        verbose = true,\n\n        // Use Utf16CodeUnit for strings in .NET.\n        stringIndexType = \"Utf16CodeUnit\",\n    },\n    kind = \"Conversation\",\n};\n\nResponse response = client.AnalyzeConversation(RequestContent.Create(data));\n```\n\n### Analyze a conversation using an orchestration project\n\nTo analyze a conversation using an orchestration project, you can call the `AnalyzeConversation()` method just like the conversation project.\n\n\n```C# Snippet:ConversationAnalysis_AnalyzeConversationOrchestrationPrediction\nstring projectName = \"DomainOrchestrator\";\nstring deploymentName = \"production\";\n\nvar data = new\n{\n    analysisInput = new\n    {\n        conversationItem = new\n        {\n            text = \"How are you?\",\n            id = \"1\",\n            participantId = \"1\",\n        }\n    },\n    parameters = new\n    {\n        projectName,\n        deploymentName,\n\n        // Use Utf16CodeUnit for strings in .NET.\n        stringIndexType = \"Utf16CodeUnit\",\n    },\n    kind = \"Conversation\",\n};\n\nResponse response = client.AnalyzeConversation(RequestContent.Create(data));\n\nusing JsonDocument result = JsonDocument.Parse(response.ContentStream);\nJsonElement conversationalTaskResult = result.RootElement;\nJsonElement orchestrationPrediction = conversationalTaskResult.GetProperty(\"result\").GetProperty(\"prediction\");\n```\n\n#### Question Answering prediction\n\nIf your conversation was analyzed by Question Answering, it will include an intent - perhaps even the top intent - from which you can retrieve answers:\n\n```C# Snippet:ConversationAnalysis_AnalyzeConversationOrchestrationPredictionQnA\nstring respondingProjectName = orchestrationPrediction.GetProperty(\"topIntent\").GetString();\nJsonElement targetIntentResult = orchestrationPrediction.GetProperty(\"intents\").GetProperty(respondingProjectName);\n\nif (targetIntentResult.GetProperty(\"targetProjectKind\").GetString() == \"QuestionAnswering\")\n{\n    Console.WriteLine($\"Top intent: {respondingProjectName}\");\n\n    JsonElement questionAnsweringResponse = targetIntentResult.GetProperty(\"result\");\n    Console.WriteLine($\"Question Answering Response:\");\n    foreach (JsonElement answer in questionAnsweringResponse.GetProperty(\"answers\").EnumerateArray())\n    {\n        Console.WriteLine(answer.GetProperty(\"answer\").GetString());\n    }\n}\n```\n\n#### Conversational summarization\n\nTo summarize a conversation, you can use the `AnalyzeConversation` method overload that returns an `Operation<BinaryData>`:\n\n```C# Snippet:AnalyzeConversation_ConversationSummarization\nvar data = new\n{\n    analysisInput = new\n    {\n        conversations = new[]\n        {\n            new\n            {\n                conversationItems = new[]\n                {\n                    new\n                    {\n                        text = \"Hello, how can I help you?\",\n                        id = \"1\",\n                        role = \"Agent\",\n                        participantId = \"Agent_1\",\n                    },\n                    new\n                    {\n                        text = \"How to upgrade Office? I am getting error messages the whole day.\",\n                        id = \"2\",\n                        role = \"Customer\",\n                        participantId = \"Customer_1\",\n                    },\n                    new\n                    {\n                        text = \"Press the upgrade button please. Then sign in and follow the instructions.\",\n                        id = \"3\",\n                        role = \"Agent\",\n                        participantId = \"Agent_1\",\n                    },\n                },\n                id = \"1\",\n                language = \"en\",\n                modality = \"text\",\n            },\n        }\n    },\n    tasks = new[]\n    {\n        new\n        {\n            taskName = \"Issue task\",\n            kind = \"ConversationalSummarizationTask\",\n            parameters = new\n            {\n                summaryAspects = new[]\n                {\n                    \"issue\",\n                }\n            },\n        },\n        new\n        {\n            taskName = \"Resolution task\",\n            kind = \"ConversationalSummarizationTask\",\n            parameters = new\n            {\n                summaryAspects = new[]\n                {\n                    \"resolution\",\n                }\n            },\n        },\n    },\n};\n\nOperation<BinaryData> analyzeConversationOperation = client.AnalyzeConversations(WaitUntil.Completed, RequestContent.Create(data));\n\nusing JsonDocument result = JsonDocument.Parse(analyzeConversationOperation.Value.ToStream());\nJsonElement jobResults = result.RootElement;\nforeach (JsonElement task in jobResults.GetProperty(\"tasks\").GetProperty(\"items\").EnumerateArray())\n{\n    Console.WriteLine($\"Task name: {task.GetProperty(\"taskName\").GetString()}\");\n    JsonElement results = task.GetProperty(\"results\");\n    foreach (JsonElement conversation in results.GetProperty(\"conversations\").EnumerateArray())\n    {\n        Console.WriteLine($\"Conversation: #{conversation.GetProperty(\"id\").GetString()}\");\n        Console.WriteLine(\"Summaries:\");\n        foreach (JsonElement summary in conversation.GetProperty(\"summaries\").EnumerateArray())\n        {\n            Console.WriteLine($\"Text: {summary.GetProperty(\"text\").GetString()}\");\n            Console.WriteLine($\"Aspect: {summary.GetProperty(\"aspect\").GetString()}\");\n        }\n        Console.WriteLine();\n    }\n}\n```\n\n### Additional samples\n\nBrowser our [samples][conversationanalysis_samples] for more examples of how to analyze conversations.\n\n## Troubleshooting\n\n### General\n\nWhen you interact with the Cognitive Language Services Conversations client library using the .NET SDK, errors returned by the service correspond to the same HTTP status codes returned for REST API requests.\n\nFor example, if you submit a utterance to a non-existant project, a `400` error is returned indicating \"Bad Request\".\n\n```C# Snippet:ConversationAnalysisClient_BadRequest\ntry\n{\n    var data = new\n    {\n        analysisInput = new\n        {\n            conversationItem = new\n            {\n                text = \"Send an email to Carol about tomorrow's demo\",\n                id = \"1\",\n                participantId = \"1\",\n            }\n        },\n        parameters = new\n        {\n            projectName = \"invalid-project\",\n            deploymentName = \"production\",\n\n            // Use Utf16CodeUnit for strings in .NET.\n            stringIndexType = \"Utf16CodeUnit\",\n        },\n        kind = \"Conversation\",\n    };\n\n    Response response = client.AnalyzeConversation(RequestContent.Create(data));\n}\ncatch (RequestFailedException ex)\n{\n    Console.WriteLine(ex.ToString());\n}\n```\n\nYou will notice that additional information is logged, like the client request ID of the operation.\n\n```text\nAzure.RequestFailedException: The input parameter is invalid.\nStatus: 400 (Bad Request)\nErrorCode: InvalidArgument\n\nContent:\n{\n  \"error\": {\n    \"code\": \"InvalidArgument\",\n    \"message\": \"The input parameter is invalid.\",\n    \"innerError\": {\n      \"code\": \"InvalidArgument\",\n      \"message\": \"The input parameter \\\"payload\\\" cannot be null or empty.\"\n    }\n  }\n}\n\nHeaders:\nTransfer-Encoding: chunked\npragma: no-cache\nrequest-id: 0303b4d0-0954-459f-8a3d-1be6819745b5\napim-request-id: 0303b4d0-0954-459f-8a3d-1be6819745b5\nx-envoy-upstream-service-time: 15\nStrict-Transport-Security: max-age=31536000; includeSubDomains; preload\nx-content-type-options: nosniff\nCache-Control: no-store, proxy-revalidate, no-cache, max-age=0, private\nContent-Type: application/json\n```\n\n### Setting up console logging\n\nThe simplest way to see the logs is to enable console logging. To create an Azure SDK log listener that outputs messages to the console use the `AzureEventSourceListener.CreateConsoleLogger` method.\n\n```C#\n// Setup a listener to monitor logged events.\nusing AzureEventSourceListener listener = AzureEventSourceListener.CreateConsoleLogger();\n```\n\nTo learn more about other logging mechanisms see [here][core_logging].\n\n## Next steps\n\n- View our [samples][conversationanalysis_samples].\n- Read about the different [features][conversationanalysis_docs_features] of the Conversations service.\n- Try our service [demos][conversationanalysis_docs_demos].\n\n## Contributing\n\nSee the [CONTRIBUTING.md][contributing] for details on building, testing, and contributing to this library.\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [cla.microsoft.com][cla].\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n[azure_cli]: https://docs.microsoft.com/cli/azure/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md\n[azure_identity_install]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md#install-the-package\n[azure_portal]: https://portal.azure.com/\n[azure_subscription]: https://azure.microsoft.com/free/dotnet/\n[cla]: https://cla.microsoft.com\n[coc_contact]: mailto:opencode@microsoft.com\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[cognitive_auth]: https://docs.microsoft.com/azure/cognitive-services/authentication/\n[contributing]: https://github.com/Azure/azure-sdk-for-net/blob/main/CONTRIBUTING.md\n[core_logging]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md\n[custom_domain]: https://docs.microsoft.com/azure/cognitive-services/authentication#create-a-resource-with-a-custom-subdomain\n[DefaultAzureCredential]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md#defaultazurecredential\n[language_studio]: https://language.cognitive.azure.com/\n[nuget]: https://www.nuget.org/\n\n[conversationanalysis_client_class]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/cognitivelanguage/Azure.AI.Language.Conversations/src/ConversationAnalysisClient.cs\n[conversationanalysis_client_src]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/cognitivelanguage/Azure.AI.Language.Conversations/src/\n[conversationanalysis_samples]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/cognitivelanguage/Azure.AI.Language.Conversations/samples/\n[conversationanalysis_nuget_package]: https://www.nuget.org/packages/Azure.AI.Language.Conversations/\n[conversationanalysis_docs]: https://docs.microsoft.com/azure/cognitive-services/language-service/conversational-language-understanding/overview\n[conversationanalysis_docs_demos]: https://docs.microsoft.com/azure/cognitive-services/language-service/conversational-language-understanding/quickstart\n[conversationanalysis_docs_features]: https://docs.microsoft.com/azure/cognitive-services/language-service/conversational-language-understanding/overview\n[conversationanalysis_refdocs]: https://docs.microsoft.com/dotnet/api/azure.ai.language.conversations\n[conversationanalysis_restdocs]: https://learn.microsoft.com/rest/api/language/2023-04-01/conversation-analysis-runtime\n[conversationanalysis_restdocs_authoring]: https://learn.microsoft.com/rest/api/language/2023-04-01/conversational-analysis-authoring\n",
        "repo_name": "cognitivelanguage/Azure.AI.Language.Conversations",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/cognitivelanguage/Azure.AI.Language.Conversations",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Cognitive Language Services Question Answering client library for .NET\n\nThe Question Answering service is a cloud-based API service that lets you create a conversational question-and-answer layer over your existing data. Use it to build a knowledge base by extracting questions and answers from your semi-structured content, including FAQ, manuals, and documents. Answer users\u2019 questions with the best answers from the QnAs in your knowledge base\u2014automatically. Your knowledge base gets smarter, too, as it continually learns from user behavior.\n\n[Source code][questionanswering_client_src] | [Package (NuGet)][questionanswering_nuget_package] | [API reference documentation][questionanswering_refdocs] | [Samples][questionanswering_samples] | [Migration guide][migration_guide] | [Product documentation][questionanswering_docs] | [REST API documentation][questionanswering_rest_docs] | [Authoring REST API documentation][questionanswering_rest_docs_projects]\n\n## Getting started\n\n### Install the package\n\nInstall the Azure Cognitive Language Services Question Answering client library for .NET with [NuGet][nuget]:\n\n```dotnetcli\ndotnet add package Azure.AI.Language.QuestionAnswering\n```\n\n### Prerequisites\n\n* An [Azure subscription][azure_subscription]\n* An existing Question Answering resource\n\nThough you can use this SDK to create and import conversation projects, [Language Studio][language_studio] is the preferred method for creating projects.\n\n### Authenticate the client\n\nIn order to interact with the Question Answering service, you'll need to either create an instance of the [`QuestionAnsweringClient`][questionanswering_client_class] class for querying existing projects or an instance of the [`QuestionAnsweringAuthoringClient`][questionansweringauthoring_client_class] for managing projects within your resource. You will need an **endpoint**, and an **API key** to instantiate a client object. For more information regarding authenticating with Cognitive Services, see [Authenticate requests to Azure Cognitive Services][cognitive_auth].\n\n#### Get an API key\n\nYou can get the **endpoint** and an **API key** from the Cognitive Services resource or Question Answering resource in the [Azure Portal][azure_portal].\n\nAlternatively, use the [Azure CLI][azure_cli] command shown below to get the API key from the Question Answering resource.\n\n```powershell\naz cognitiveservices account keys list --resource-group <resource-group-name> --name <resource-name>\n```\n\n#### Create a QuestionAnsweringClient\n\nTo use the `QuestionAnsweringClient`, make sure you use the right namespaces:\n\n```C# Snippet:QuestionAnsweringClient_Namespaces\nusing Azure.Core;\nusing Azure.AI.Language.QuestionAnswering;\n```\n\nWith your **endpoint** and **API key** you can instantiate a `QuestionAnsweringClient`:\n\n```C# Snippet:QuestionAnsweringClient_Create\nUri endpoint = new Uri(\"https://myaccount.cognitiveservices.azure.com/\");\nAzureKeyCredential credential = new AzureKeyCredential(\"{api-key}\");\n\nQuestionAnsweringClient client = new QuestionAnsweringClient(endpoint, credential);\n```\n\n#### Create a QuestionAnsweringAuthoringClient\n\nTo use the `QuestionAnsweringAuthoringClient`, use the following namespace in addition to those above, if needed.\n\n```C# Snippet:QuestionAnsweringAuthoringClient_Namespace\nusing Azure.AI.Language.QuestionAnswering.Authoring;\n```\n\nWith your **endpoint** and **API key**, you can instantiate a `QuestionAnsweringAuthoringClient`:\n\n```C# Snippet:QuestionAnsweringAuthoringClient_Create\nUri endpoint = new Uri(\"https://myaccount.cognitiveservices.azure.com/\");\nAzureKeyCredential credential = new AzureKeyCredential(\"{api-key}\");\n\nQuestionAnsweringAuthoringClient client = new QuestionAnsweringAuthoringClient(endpoint, credential);\n```\n\n#### Create a client using Azure Active Directory authentication\n\nYou can also create a `QuestionAnsweringClient` or `QuestionAnsweringAuthoringClient` using Azure Active Directory (AAD) authentication. Your user or service principal must be assigned the \"Cognitive Services Language Reader\" role.\nUsing the [DefaultAzureCredential] you can authenticate a service using Managed Identity or a service principal, authenticate as a developer working on an application, and more all without changing code.\n\nBefore you can use the `DefaultAzureCredential`, or any credential type from [Azure.Identity][azure_identity], you'll first need to [install the Azure.Identity package][azure_identity_install].\n\nTo use `DefaultAzureCredential` with a client ID and secret, you'll need to set the `AZURE_TENANT_ID`, `AZURE_CLIENT_ID`, and `AZURE_CLIENT_SECRET` environment variables; alternatively, you can pass those values\nto the `ClientSecretCredential` also in Azure.Identity.\n\nMake sure you use the right namespace for `DefaultAzureCredential` at the top of your source file:\n\n```C# Snippet:QuestionAnswering_Identity_Namespace\nusing Azure.Identity;\n```\n\nThen you can create an instance of `DefaultAzureCredential` and pass it to a new instance of your client:\n\n```C# Snippet:QuestionAnsweringClient_CreateWithDefaultAzureCredential\nUri endpoint = new Uri(\"https://myaccount.cognitiveservices.azure.com\");\nDefaultAzureCredential credential = new DefaultAzureCredential();\n\nQuestionAnsweringClient client = new QuestionAnsweringClient(endpoint, credential);\n```\n\nNote that regional endpoints do not support AAD authentication. Instead, create a [custom domain][custom_domain] name for your resource to use AAD authentication.\n\n## Key concepts\n\n### QuestionAnsweringClient\n\nThe [`QuestionAnsweringClient`][questionanswering_client_class] is the primary interface for asking questions using a knowledge base with your own information, or text input using pre-trained models. It provides both synchronous and asynchronous APIs to ask questions.\n\n### QuestionAnsweringAuthoringClient\n\nThe [`QuestionAnsweringAuthoringClient`][questionansweringauthoring_client_class] provides an interface for managing Question Answering projects. Examples of the available operations include creating and deploying projects, updating your knowledge sources, and updating question and answer pairs. It provides both synchronous and asynchronous APIs.\n\n### Thread safety\n\nWe guarantee that all client instance methods are thread-safe and independent of each other ([guideline](https://azure.github.io/azure-sdk/dotnet_introduction.html#dotnet-service-methods-thread-safety)). This ensures that the recommendation of reusing client instances is always safe, even across threads.\n\n### Additional concepts\n\n<!-- CLIENT COMMON BAR -->\n[Client options](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#configuring-service-clients-using-clientoptions) |\n[Accessing the response](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#accessing-http-response-details-using-responset) |\n[Long-running operations](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#consuming-long-running-operations-using-operationt) |\n[Handling failures](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#reporting-errors-requestfailedexception) |\n[Diagnostics](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md) |\n[Mocking](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#mocking) |\n[Client lifetime](https://devblogs.microsoft.com/azure-sdk/lifetime-management-and-thread-safety-guarantees-of-azure-sdk-net-clients/)\n<!-- CLIENT COMMON BAR -->\n\n## Examples\n\n### QuestionAnsweringClient\n\nThe Azure.AI.Language.QuestionAnswering client library provides both synchronous and asynchronous APIs.\n\nThe following examples show common scenarios using the `client` [created above](#create-a-questionansweringclient).\n\n#### Ask a question\n\nThe only input required to a ask a question using an existing knowledge base is just the question itself:\n\n```C# Snippet:QuestionAnsweringClient_GetAnswers\nstring projectName = \"{ProjectName}\";\nstring deploymentName = \"{DeploymentName}\";\nQuestionAnsweringProject project = new QuestionAnsweringProject(projectName, deploymentName);\nResponse<AnswersResult> response = client.GetAnswers(\"How long should my Surface battery last?\", project);\n\nforeach (KnowledgeBaseAnswer answer in response.Value.Answers)\n{\n    Console.WriteLine($\"({answer.Confidence:P2}) {answer.Answer}\");\n    Console.WriteLine($\"Source: {answer.Source}\");\n    Console.WriteLine();\n}\n```\n\nYou can set additional properties on `QuestionAnsweringClientOptions` to limit the number of answers, specify a minimum confidence score, and more.\n\n#### Ask a follow-up question\n\nIf your knowledge base is configured for [chit-chat][questionanswering_docs_chat], you can ask a follow-up question provided the previous question-answering ID and, optionally, the exact question the user asked:\n\n```C# Snippet:QuestionAnsweringClient_Chat\nstring projectName = \"{ProjectName}\";\nstring deploymentName = \"{DeploymentName}\";\n// Answers are ordered by their ConfidenceScore so assume the user choose the first answer below:\nKnowledgeBaseAnswer previousAnswer = answers.Answers.First();\nQuestionAnsweringProject project = new QuestionAnsweringProject(projectName, deploymentName);\nAnswersOptions options = new AnswersOptions\n{\n    AnswerContext = new KnowledgeBaseAnswerContext(previousAnswer.QnaId.Value)\n};\n\nResponse<AnswersResult> response = client.GetAnswers(\"How long should charging take?\", project, options);\n\nforeach (KnowledgeBaseAnswer answer in response.Value.Answers)\n{\n    Console.WriteLine($\"({answer.Confidence:P2}) {answer.Answer}\");\n    Console.WriteLine($\"Source: {answer.Source}\");\n    Console.WriteLine();\n}\n```\n\n### QuestionAnsweringAuthoringClient\n\nThe following examples show common scenarios using the `QuestionAnsweringAuthoringClient` instance [created in this section](#create-a-questionansweringauthoringclient).\n\n#### Create a new project\n\nTo create a new project, you must specify the project's name and a create a `RequestContent` instance with the parameters needed to set up the project.\n\n```C# Snippet:QuestionAnsweringAuthoringClient_CreateProject\n// Set project name and request content parameters\nstring newProjectName = \"{ProjectName}\";\nRequestContent creationRequestContent = RequestContent.Create(\n    new {\n        description = \"This is the description for a test project\",\n        language = \"en\",\n        multilingualResource = false,\n        settings = new {\n            defaultAnswer = \"No answer found for your question.\"\n            }\n        }\n    );\n\nResponse creationResponse = client.CreateProject(newProjectName, creationRequestContent);\n\n// Projects can be retrieved as follows\nPageable<BinaryData> projects = client.GetProjects();\n\nConsole.WriteLine(\"Projects: \");\nforeach (BinaryData project in projects)\n{\n    Console.WriteLine(project);\n}\n```\n\n#### Deploy your project\n\nYour projects can be deployed using the `DeployProjectAsync` or the synchronous `DeployProject`. All you need to specify is the project's name and the deployment name that you wish to use. Please note that the service will not allow you to deploy empty projects.\n\n```C# Snippet:QuestionAnsweringAuthoringClient_DeployProject\n// Set deployment name and start operation\nstring newDeploymentName = \"{DeploymentName}\";\n\nOperation<BinaryData> deploymentOperation = client.DeployProject(WaitUntil.Completed, newProjectName, newDeploymentName);\n\n// Deployments can be retrieved as follows\nPageable<BinaryData> deployments = client.GetDeployments(newProjectName);\nConsole.WriteLine(\"Deployments: \");\nforeach (BinaryData deployment in deployments)\n{\n    Console.WriteLine(deployment);\n}\n```\n\n#### Add a knowledge source\n\nOne way to add content to your project is to add a knowledge source. The following example shows how you can set up a `RequestContent` instance to add a new knowledge source of the type \"url\".\n\n```C# Snippet:QuestionAnsweringAuthoringClient_UpdateSources\n// Set request content parameters for updating our new project's sources\nstring sourceUri = \"{KnowledgeSourceUri}\";\nRequestContent updateSourcesRequestContent = RequestContent.Create(\n    new[] {\n        new {\n                op = \"add\",\n                value = new\n                {\n                    displayName = \"MicrosoftFAQ\",\n                    source = sourceUri,\n                    sourceUri = sourceUri,\n                    sourceKind = \"url\",\n                    contentStructureKind = \"unstructured\",\n                    refresh = false\n                }\n            }\n    });\n\nOperation<Pageable<BinaryData>> updateSourcesOperation = client.UpdateSources(WaitUntil.Completed, newProjectName, updateSourcesRequestContent);\n\n// Knowledge Sources can be retrieved as follows\nPageable<BinaryData> sources = updateSourcesOperation.Value;\n\nConsole.WriteLine(\"Sources: \");\nforeach (BinaryData source in sources)\n{\n    Console.WriteLine(source);\n}\n```\n\n## Troubleshooting\n\n### General\n\nWhen you interact with the Cognitive Language Services Question Answering client library using the .NET SDK, errors returned by the service correspond to the same HTTP status codes returned for [REST API][questionanswering_rest_docs] requests.\n\nFor example, if you submit a question to a non-existant knowledge base, a `400` error is returned indicating \"Bad Request\".\n\n```C# Snippet:QuestionAnsweringClient_BadRequest\ntry\n{\n    QuestionAnsweringProject project = new QuestionAnsweringProject(\"invalid-knowledgebase\", \"test\");\n    Response<AnswersResult> response = client.GetAnswers(\"Does this knowledge base exist?\", project);\n}\ncatch (RequestFailedException ex)\n{\n    Console.WriteLine(ex.ToString());\n}\n```\n\nYou will notice that additional information is logged, like the client request ID of the operation.\n\n```text\nAzure.RequestFailedException: Please verify azure search service is up, restart the WebApp and try again\nStatus: 400 (Bad Request)\nErrorCode: BadArgument\n\nContent:\n{\n    \"error\": {\n    \"code\": \"BadArgument\",\n    \"message\": \"Please verify azure search service is up, restart the WebApp and try again\"\n    }\n}\n\nHeaders:\nx-envoy-upstream-service-time: 23\napim-request-id: 76a83876-22d1-4977-a0b1-559a674f3605\nStrict-Transport-Security: max-age=31536000; includeSubDomains; preload\nX-Content-Type-Options: nosniff\nDate: Wed, 30 Jun 2021 00:32:07 GMT\nContent-Length: 139\nContent-Type: application/json; charset=utf-8\n```\n\n### Setting up console logging\n\nThe simplest way to see the logs is to enable console logging. To create an Azure SDK log listener that outputs messages to the console use the `AzureEventSourceListener.CreateConsoleLogger` method.\n\n```C#\n// Setup a listener to monitor logged events.\nusing AzureEventSourceListener listener = AzureEventSourceListener.CreateConsoleLogger();\n```\n\nTo learn more about other logging mechanisms see [here][core_logging].\n\n## Next steps\n\n* View our [samples][questionanswering_samples].\n* Read about the different [features][questionanswering_docs_features] of the Question Answering service.\n* Try our service [demos][questionanswering_docs_demos].\n\n## Contributing\n\nSee the [CONTRIBUTING.md][contributing] for details on building, testing, and contributing to this library.\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [cla.microsoft.com][cla].\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n[azure_cli]: https://docs.microsoft.com/cli/azure/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md\n[azure_identity_install]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md#install-the-package\n[azure_portal]: https://portal.azure.com/\n[azure_subscription]: https://azure.microsoft.com/free/dotnet/\n[cla]: https://cla.microsoft.com\n[coc_contact]: mailto:opencode@microsoft.com\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[cognitive_auth]: https://docs.microsoft.com/azure/cognitive-services/authentication/\n[contributing]: https://github.com/Azure/azure-sdk-for-net/blob/main/CONTRIBUTING.md\n[core_logging]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md\n[custom_domain]: https://docs.microsoft.com/azure/cognitive-services/authentication#create-a-resource-with-a-custom-subdomain\n[DefaultAzureCredential]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md#defaultazurecredential\n[language_studio]: https://language.cognitive.azure.com/\n[nuget]: https://www.nuget.org/\n\n[questionanswering_client_class]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/cognitivelanguage/Azure.AI.Language.QuestionAnswering/src/QuestionAnsweringClient.cs\n[questionanswering_client_src]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/cognitivelanguage/Azure.AI.Language.QuestionAnswering/src/\n[questionanswering_docs]: https://docs.microsoft.com/azure/cognitive-services/qnamaker/\n[questionanswering_docs_chat]: https://docs.microsoft.com/azure/cognitive-services/qnamaker/how-to/chit-chat-knowledge-base\n[questionanswering_docs_demos]: https://azure.microsoft.com/services/cognitive-services/qna-maker/#demo\n[questionanswering_docs_features]: https://azure.microsoft.com/services/cognitive-services/qna-maker/#features\n[questionanswering_nuget_package]: https://nuget.org/packages/Azure.AI.Language.QuestionAnswering/\n[questionanswering_refdocs]: https://docs.microsoft.com/dotnet/api/Azure.AI.Language.QuestionAnswering/\n[questionanswering_rest_docs]: https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering\n[questionanswering_rest_docs_projects]: https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects\n[questionanswering_samples]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/cognitivelanguage/Azure.AI.Language.QuestionAnswering/samples/README.md\n[migration_guide]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/cognitivelanguage/Azure.AI.Language.QuestionAnswering/MigrationGuide.md\n[questionansweringauthoring_client_class]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/cognitivelanguage/Azure.AI.Language.QuestionAnswering/src/Generated/QuestionAnsweringAuthoringClient.cs\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2Fsdk%2Fcognitivelanguage%2FAzure.AI.Language.QuestionAnswering%2FREADME.png)\n",
        "repo_name": "cognitivelanguage/Azure.AI.Language.QuestionAnswering",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/cognitivelanguage/Azure.AI.Language.QuestionAnswering",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Cognitive Services management client library for .NET\n\nMicrosoft Azure Cognitive Services brings AI within reach of every developer and data scientist. With leading models, a variety of use cases can be unlocked. All it takes is an API call to embed the ability to see, hear, speak, search, understand, and accelerate advanced decision-making into your apps. Enable developers and data scientists of all skill levels to easily add AI capabilities to their apps.\n\nThis library supports managing Microsoft Azure Cognitive Services resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Cognitive Services management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.CognitiveServices\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "cognitiveservices/Azure.ResourceManager.CognitiveServices",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/cognitiveservices/Azure.ResourceManager.CognitiveServices",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "## NOTE: This package has been deprecated and is no longer supported\n\nThis package has endpoints that are no longer active and cannot make proper use of the Form Recognizer service. A newer package is available at [Azure.AI.FormRecognizer][new_package] as of 2020-08-20.\n\n[new_package]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/formrecognizer/Azure.AI.FormRecognizer",
        "repo_name": "cognitiveservices/FormRecognizer",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/cognitiveservices/FormRecognizer",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Communication Alpha ID client library for .NET\n\nThis package contains a C# SDK for Azure Communication Services for Alpha IDs.\n\n## Getting started\n\n### Install the package\nInstall the Azure Communication Alpha ID client library for .NET with [NuGet][nuget]:\n\n```dotnetcli\ndotnet add package Azure.Communication.AlphaIds --prerelease\n``` \n\n### Prerequisites\nYou need an [Azure subscription][azure_sub], a [Communication Service Resource][communication_resource_docs].\n\nTo create these resource, you can use the [Azure Portal][communication_resource_create_portal], the [Azure PowerShell][communication_resource_create_power_shell], or the [.NET management client library][communication_resource_create_net].\n\n### Key concepts\n`AlphaIdsClient` provides the functionality to manage the usage of Alpha IDs.\n\n### Authenticate the client\nAlpha ID clients can be authenticated using the connection string acquired from an Azure Communication Resource in the [Azure Portal][azure_portal].\n\n```C# Snippet:Azure_Communication_AlphaIds_CreateAlphaIdsClient\nvar connectionString = \"<connection_string>\"; // Find your Communication Services resource in the Azure portal\nAlphaIdsClient client = new AlphaIdsClient(connectionString);\n```\n\nAlternatively, Alpha Ids clients can also be authenticated using a valid token credential. With this option,\n`AZURE_CLIENT_SECRET`, `AZURE_CLIENT_ID` and `AZURE_TENANT_ID` environment variables need to be set up for authentication. \n\n```C# Snippet:Azure_Communication_AlphaIds_CreateAlphaIdsClientWithToken\nstring endpoint = \"<endpoint_url>\";\nTokenCredential tokenCredential = new DefaultAzureCredential();\ntokenCredential = new DefaultAzureCredential();\nAlphaIdsClient client = new AlphaIdsClient(new Uri(endpoint), tokenCredential);\n```\n## Examples\n### Get configuration\nTo get the current applied configuration, call the `GetConfiguration` or `GetConfigurationAsync` function from the `AlphaIdsClient`.\n```C# Snippet:Azure_Communication_AlphaIds_GetConfiguration\ntry\n{\n    AlphaIdConfiguration configuration = await client.GetConfigurationAsync();\n\n    Console.WriteLine($\"The usage of Alpha IDs is currently {(configuration.Enabled ? \"enabled\" : \"disabled\")}\");\n}\ncatch (RequestFailedException ex)\n{\n    if (ex.Status == 403)\n    {\n        Console.WriteLine(\"Resource is not eligible for Alpha ID usage\");\n    }\n}\n```\n\n## Troubleshooting\nA `RequestFailedException` is thrown as a service response for any unsuccessful requests. The exception contains information about what response code was returned from the service.\n\n## Next steps\n- [Read more about Azure Communication Services][communication_resource_docs]\n\n## Contributing\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [cla.microsoft.com][cla].\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n[azure_sub]: https://azure.microsoft.com/free/dotnet/\n[azure_portal]: https://portal.azure.com\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n[communication_resource_docs]: https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource?tabs=windows&pivots=platform-azp\n[communication_resource_create_portal]:  https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource?tabs=windows&pivots=platform-azp\n[communication_resource_create_power_shell]: https://docs.microsoft.com/powershell/module/az.communication/new-azcommunicationservice\n[communication_resource_create_net]: https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource?tabs=windows&pivots=platform-net\n[nuget]: https://www.nuget.org/\n",
        "repo_name": "communication/Azure.Communication.AlphaIds",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/communication/Azure.Communication.AlphaIds",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Communication CallAutomation client library for .NET\n\nThis package contains a C# SDK for Azure Communication Call Automation.\n\n[Source code][source] | [Product documentation][product_docs]\n## Getting started\n\n### Install the package\nInstall the Azure Communication CallAutomation client library for .NET with [NuGet][nuget]:\n\n```dotnetcli\ndotnet add package Azure.Communication.CallAutomation --prerelease\n```\n\n### Prerequisites\nYou need an [Azure subscription][azure_sub] and a [Communication Service Resource][communication_resource_docs] to use this package.\n\nTo create a new Communication Service, you can use the [Azure Portal][communication_resource_create_portal], the [Azure PowerShell][communication_resource_create_power_shell], or the [.NET management client library][communication_resource_create_net].\n\n### Key concepts\n`CallAutomationClient` provides the functionality to answer incoming call or initialize an outbound call.\n\n### Using statements\n```C#\nusing Azure.Communication.CallAutomation;\n```\n\n### Authenticate the client\nCall Automation client can be authenticated using the connection string acquired from an Azure Communication Resource in the [Azure Portal][azure_portal].\n\n```C#\nvar connectionString = \"<connection_string>\"; // Find your Communication Services resource in the Azure portal\nCallAutomationClient callAutomationClient = new CallAutomationClient(connectionString);\n```\n\nOr alternatively using a valid Active Directory token.\n```C#\nvar endpoint = new Uri(\"https://my-resource.communication.azure.com\");\nTokenCredential tokenCredential = new DefaultAzureCredential();\nvar client = new CallAutomationClient(endpoint, tokenCredential);\n```\n\n## Examples\n### Make a call to a phone number recipient\nTo make an outbound call, call the `CreateCall` or `CreateCallAsync` function from the `CallAutomationClient`.\n```C#\nCallInvite callInvite = new CallInvite(\n    new PhoneNumberIdentifier(\"<targets-phone-number>\"),\n    new PhoneNumberIdentifier(\"<caller-id-phonenumber>\")\n    );  // E.164 formatted recipient phone number\n\n// create call with above invitation\ncreateCallResult = await callAutomationClient.CreateCallAsync(\n    callInvite,\n    new Uri(\"<YOUR-CALLBACK-URL>\")\n    );\n\nConsole.WriteLine($\"Call connection id: {createCallResult.CallConnectionProperties.CallConnectionId}\");\n```\n\n### Handle Mid-Connection callback events\nYour app will receive mid-connection callback events via the callbackEndpoint you provided. You will need to write event handler controller to receive the events and direct your app flow based on your business logic.\n```C#\n/// <summary>\n/// Handle call back events.\n/// </summary>>\n[HttpPost]\n[Route(\"/CallBackEvent\")]\npublic IActionResult OnMidConnectionCallBackEvent([FromBody] CloudEvent[] events)\n{\n    try\n    {\n        if (events != null)\n        {\n            // Helper function to parse CloudEvent to a CallAutomation event.\n            CallAutomationEventData callBackEvent = CallAutomationEventParser.Parse(events.FirstOrDefault());\n\n            switch (callBackEvent)\n            {\n                case CallConnected ev:\n                    # logic to handle a CallConnected event\n                    break;\n                case CallDisconnected ev:\n                    # logic to handle a CallDisConnected event\n                    break;\n                case ParticipantsUpdated ev:\n                    # cast the event into a ParticipantUpdated event and do something with it. Eg. iterate through the participants\n                    ParticipantsUpdated updatedEvent = (ParticipantsUpdated)ev;\n                    break;\n                case AddParticipantsSucceeded ev:\n                    # logic to handle an AddParticipantsSucceeded event\n                    break;\n                case AddParticipantsFailed ev:\n                    # logic to handle an AddParticipantsFailed event\n                    break;\n                case CallTransferAccepted ev:\n                    # logic to handle CallTransferAccepted event\n                    break;\n                case CallTransferFailed ev:\n                    # logic to handle CallTransferFailed event\n                    break;\n                default:\n                    break;\n            }\n        }\n    }\n    catch (Exception ex)\n    {\n        // handle exception\n    }\n    return Ok();\n}\n```\n\n### Handle Mid-Connection events with CallAutomation's EventProcessor\nTo easily handle mid-connection events, Call Automation's SDK provides easier way to handle these events.\nTake a look at `CallAutomationEventProcessor`. this will ensure corelation between call and events more easily.\n```C#\n[HttpPost]\n[Route(\"/CallBackEvent\")]\npublic IActionResult OnMidConnectionCallBackEvent([FromBody] CloudEvent[] events)\n{\n    try\n    {\n        // process incoming event for EventProcessor\n        _callAutomationClient.GetEventProcessor().ProcessEvents(cloudEvents);\n    }\n    catch (Exception ex)\n    {\n        // handle exception\n    }\n    return Ok();\n}\n```\n`ProcessEvents` is required for EventProcessor to work.\nAfter event is being consumed by EventProcessor, you can start using its feature.\n\nSee below for example: where you are making a call with `CreateCall`, and wait for `CallConnected` event of the call.\n```C#\nCallInvite callInvite = new CallInvite(\n    new PhoneNumberIdentifier(\"<targets-phone-number>\"),\n    new PhoneNumberIdentifier(\"<caller-id-phonenumber>\")\n    );  // E.164 formatted recipient phone number\n\n// create call with above invitation\ncreateCallResult = await callAutomationClient.CreateCallAsync(\n    callInvite,\n    new Uri(\"<YOUR-CALLBACK-URL>\")\n    );\n\n// giving 30 seconds timeout for call reciever to answer\nCancellationTokenSource cts = new CancellationTokenSource(TimeSpan.FromSeconds(30));\nCancellationToken token = cts.Token;\n\ntry\n{\n    // this will wait until CreateCall is completed or Timesout!\n    CreateCallEventResult eventResult = await createCallResult.WaitForEventAsync(token);\n\n    // Once this is recieved, you know the call is now connected.\n    CallConnected returnedEvent = eventResult.SuccessEvent;\n\n    // ...Do more actions, such as Play or AddParticipant, since the call is established...\n}\ncatch (OperationCanceledException ex)\n{\n    // Timeout exception happend!\n    // Call likely was never answered.\n}\n```\nIf cancellation token was not passed with timeout, the default timeout is 4 minutes.\n\n## Troubleshooting\nA `RequestFailedException` is thrown as a service response for any unsuccessful requests. The exception contains information about what response code was returned from the service.\n\n## Next steps\n- [Call Automation Overview][overview]\n- [Incoming Call Concept][incomingcall]\n- [Build a customer interaction workflow using Call Automation][build1]\n- [Redirect inbound telephony calls with Call Automation][build2]\n- [Quickstart: Play action][build3]\n- [Quickstart: Recognize action][build4]\n- [Read more about Call Recording in Azure Communication Services][recording1]\n- [Record and download calls with Event Grid][recording2]\n\n## Contributing\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [cla.microsoft.com][cla].\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n[azure_sub]: https://azure.microsoft.com/free/dotnet/\n[azure_portal]: https://portal.azure.com\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n[communication_resource_docs]: https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource?tabs=windows&pivots=platform-azp\n[communication_resource_create_portal]:  https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource?tabs=windows&pivots=platform-azp\n[communication_resource_create_power_shell]: https://docs.microsoft.com/powershell/module/az.communication/new-azcommunicationservice\n[communication_resource_create_net]: https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource?tabs=windows&pivots=platform-net\n[product_docs]: https://docs.microsoft.com/azure/communication-services/overview\n[nuget]: https://www.nuget.org/\n[source]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/communication/Azure.Communication.CallAutomation/src\n[overview]: https://learn.microsoft.com/azure/communication-services/concepts/voice-video-calling/call-automation\n[incomingcall]: https://learn.microsoft.com/azure/communication-services/concepts/voice-video-calling/incoming-call-notification\n[build1]: https://learn.microsoft.com/azure/communication-services/quickstarts/voice-video-calling/callflows-for-customer-interactions?pivots=programming-language-csha\n[build2]: https://learn.microsoft.com/azure/communication-services/how-tos/call-automation-sdk/redirect-inbound-telephony-calls?pivots=programming-language-csharp\n[build3]: https://learn.microsoft.com/azure/communication-services/quickstarts/voice-video-calling/play-action?pivots=programming-language-csharp\n[build4]: https://learn.microsoft.com/azure/communication-services/quickstarts/voice-video-calling/recognize-action?pivots=programming-language-csharp\n[recording1]: https://learn.microsoft.com/azure/communication-services/concepts/voice-video-calling/call-recording\n[recording2]: https://learn.microsoft.com/azure/communication-services/quickstarts/voice-video-calling/get-started-call-recording?pivots=programming-language-csharp\n",
        "repo_name": "communication/Azure.Communication.CallAutomation",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/communication/Azure.Communication.CallAutomation",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Communication CallAutomation client library for .NET\n\nThis package contains a C# SDK for Azure Communication Call Automation.\n\n[Source code][source] |[Product documentation][product_docs]\n## Getting started\n\n### Install the package\nInstall the Azure Communication CallAutomation client library for .NET with [NuGet][nuget]:\n\n```dotnetcli\ndotnet add package Azure.Communication.CallingServer --prerelease\n``` \n\n### Prerequisites\nYou need an [Azure subscription][azure_sub] and a [Communication Service Resource][communication_resource_docs] to use this package.\n\nTo create a new Communication Service, you can use the [Azure Portal][communication_resource_create_portal], the [Azure PowerShell][communication_resource_create_power_shell], or the [.NET management client library][communication_resource_create_net].\n\n### Key concepts\n`CallAutomationClient` provides the functionality to answer incoming call or initialize an outbound call.\n\n### Using statements\n```C#\nusing System;\nusing System.Collections.Generic;\nusing Azure.Communication.CallingServer;\n```\n\n### Authenticate the client\nCall Automation client can be authenticated using the connection string acquired from an Azure Communication Resource in the [Azure Portal][azure_portal].\n\n```C#\nvar connectionString = \"<connection_string>\"; // Find your Communication Services resource in the Azure portal\nCallAutomationClient callAutomationClient = new CallAutomationClient(connectionString);\n```\n\nOr alternatively using a valid Active Directory token.\n```C#\nvar endpoint = new Uri(\"https://my-resource.communication.azure.com\");\nTokenCredential tokenCredential = new DefaultAzureCredential();\nvar client = new CallAutomationClient(endpoint, tokenCredential);\n```\n\n## Examples\n### Make a call to a phone number recipient\nTo make an outbound call, call the `CreateCall` or `CreateCallAsync` function from the `CallAutomationClient`.\n```C#\nCallSource callSource = new CallSource(\n       new CommunicationUserIdentifier(\"<source-identifier>\"), // Your Azure Communication Resource Guid Id used to make a Call\n       );\ncallSource.CallerId = new PhoneNumberIdentifier(\"<caller-id-phonenumber>\") // E.164 formatted phone number that's associated to your Azure Communication Resource\n```\n```C#\nCreateCallResult createCallResult = await callAutomationClient.CreateCallAsync(\n    source: callSource,\n    targets: new List<CommunicationIdentifier>() { new PhoneNumberIdentifier(\"<targets-phone-number>\") }, // E.164 formatted recipient phone number\n    callbackEndpoint: new Uri(TestEnvironment.AppCallbackUrl)\n    );\nConsole.WriteLine($\"Call connection id: {createCallResult.CallConnectionProperties.CallConnectionId}\");\n```\n\n### Handle Mid-Connection call back events\nYour app will receive mid-connection call back events via the callbackEndpoint you provided. You will need to write event handler controller to receive the events and direct your app flow based on your business logic.\n```C#\n    /// <summary>\n    /// Handle call back events.\n    /// </summary>>\n    [HttpPost]\n    [Route(\"/CallBackEvent\")]\n    public IActionResult OnMidConnectionCallBackEvent([FromBody] CloudEvent[] events)\n    {\n        try\n        {\n            if (events != null)\n            {\n                // Helper function to parse CloudEvent to a CallingServer event.\n                CallAutomationEventBase callBackEvent = EventParser.Parse(events.FirstOrDefault());\n            \n                switch (callBackEvent)\n                {\n                    case CallConnected ev:\n                        # logic to handle a CallConnected event\n                        break;\n                    case CallDisconnected ev:\n                        # logic to handle a CallDisConnected event\n                        break;\n                    case ParticipantsUpdated ev:\n                        # cast the event into a ParticipantUpdated event and do something with it. Eg. iterate through the participants\n                        ParticipantsUpdated updatedEvent = (ParticipantsUpdated)ev;\n                        break;\n                    case AddParticipantsSucceeded ev:\n                        # logic to handle an AddParticipantsSucceeded event\n                        break;\n                    case AddParticipantsFailed ev:\n                        # logic to handle an AddParticipantsFailed event\n                        break;\n                    case CallTransferAccepted ev:\n                        # logic to handle CallTransferAccepted event\n                        break;\n                    case CallTransferFailed ev:\n                        # logic to handle CallTransferFailed event\n                       break;\n                    default:\n                        break;\n                }\n            }\n        }\n        catch (Exception ex)\n        {\n            // handle exception\n        }\n        return Ok();\n    }\n```\n\n## Troubleshooting\nA `RequestFailedException` is thrown as a service response for any unsuccessful requests. The exception contains information about what response code was returned from the service.\n\n## Next steps\n\n## Contributing\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [cla.microsoft.com][cla].\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n[azure_sub]: https://azure.microsoft.com/free/dotnet/\n[azure_portal]: https://portal.azure.com\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n[communication_resource_docs]: https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource?tabs=windows&pivots=platform-azp\n[communication_resource_create_portal]:  https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource?tabs=windows&pivots=platform-azp\n[communication_resource_create_power_shell]: https://docs.microsoft.com/powershell/module/az.communication/new-azcommunicationservice\n[communication_resource_create_net]: https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource?tabs=windows&pivots=platform-net\n[product_docs]: https://docs.microsoft.com/azure/communication-services/overview\n[nuget]: https://www.nuget.org/\n[source]: https://github.com/Azure/azure-sdk-for-net/tree/a20e269162fa88a43e5ba0e5bb28f2e76c74a484/sdk/communication/Azure.Communication.CallingServer/src\n",
        "repo_name": "communication/Azure.Communication.CallingServer",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/communication/Azure.Communication.CallingServer",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Communication Chat client library for .NET\n\nThis package contains a C# SDK for Azure Communication Services for chat.\n\n[Source code][source] | [Package (NuGet)][package] | [Product documentation][product_docs]\n\n\n## Getting started\n\n### Install the package\nInstall the Azure Communication Chat client library for .NET with [NuGet][nuget]:\n\n```dotnetcli\ndotnet add package Azure.Communication.Chat \n``` \n\n### Prerequisites\nYou need an [Azure subscription][azure_sub] and a [Communication Service Resource][communication_resource_docs] to use this package.\n\nTo create a new Communication Service, you can use the [Azure Portal][communication_resource_create_portal], the [Azure PowerShell][communication_resource_create_power_shell], or the [.NET management client library][communication_resource_create_net].\n<!--\nHere's an example using the Azure CLI:\n\n```Powershell\n[To be ADDED]\n```\n-->\n\n### Authenticate the client\n#### User Access Tokens\n\nUser access tokens enable you to build client applications that directly authenticate to Azure Communication Services.\nFor the generation of user access tokens, refer to [User Access Tokens][useraccesstokens].\n\n### Using statements\n```C# Snippet:Azure_Communication_Chat_Tests_Samples_UsingStatements\nusing Azure.Communication.Identity;\nusing Azure.Communication.Chat;\n```\n\n### Create a ChatClient\n\nThis will allow you to create, get, or delete chat threads.\n```C# Snippet:Azure_Communication_Chat_Tests_Samples_CreateChatClient\nChatClient chatClient = new ChatClient(\n    endpoint,\n    new CommunicationTokenCredential(userToken));\n```\n\n### Create a ChatThreadClient\n\nThe ChatThreadClient will allow you to perform operations specific to a chat thread, like update the chat thread topic, send a message, add participants to the chat thread, etc.\n\nYou can instantiate a new ChatThreadClient using the GetChatThread operation of the ChatClient with an existing thread id:\n\n```C# Snippet:Azure_Communication_Chat_Tests_Samples_GetChatThreadClient_KeyConcepts\nChatThreadClient chatThreadClient = chatClient.GetChatThreadClient(chatThread.Id);\n```\n\n## Key concepts\n\nA chat conversation is represented by a thread. Each user in the thread is called a thread participant. Thread participants can chat with one another privately in a 1:1 chat or huddle up in a 1:N group chat. Users also get near-real time updates for when others are typing and when they have read the messages.\n\nOnce you initialized a `ChatClient` class, you can do the following chat operations:\n\n### Create a thread\n```C# Snippet:Azure_Communication_Chat_Tests_Samples_CreateThread_KeyConcepts\nCreateChatThreadResult createChatThreadResult = await chatClient.CreateChatThreadAsync(topic: \"Hello world!\", participants: new ChatParticipant[] { });\nChatThreadProperties chatThread = createChatThreadResult.ChatThread;\n```\n### Get a thread\n```C# Snippet:Azure_Communication_Chat_Tests_Samples_GetChatThread_KeyConcepts\nChatThread chatThread = chatClient.GetChatThread(chatThread.Id);\n```\n### Get all threads for the user\n```C# Snippet:Azure_Communication_Chat_Tests_Samples_GetChatThreadsInfo_KeyConcepts\nPageable<ChatThreadItem> threads = chatClient.GetChatThreads();\n```\n### Delete a thread\n```C# Snippet:Azure_Communication_Chat_Tests_Samples_DeleteThread_KeyConcepts\nchatClient.DeleteChatThread(chatThread.Id);\n```\n\nOnce you initialized a `ChatThreadClient` class, you can do the following chat operations:\n\n### Update a thread\n```C# Snippet:Azure_Communication_Chat_Tests_Samples_UpdateThread_KeyConcepts\nchatThreadClient.UpdateTopic(topic: \"Launch meeting\");\n```\n\n### Send a message\n```C# Snippet:Azure_Communication_Chat_Tests_Samples_SendMessage_KeyConcepts\nSendChatMessageResult sendChatMessageResult = chatThreadClient.SendMessage(\"Let's meet at 11am\");\n```\n### Update a message\n```C# Snippet:Azure_Communication_Chat_Tests_Samples_UpdateMessage_KeyConcepts\nchatThreadClient.UpdateMessage(sendChatMessageResult.Id, content: \"Instead of 11am, let's meet at 2pm\");\n```\n### Get a message\n```C# Snippet:Azure_Communication_Chat_Tests_Samples_GetMessage_KeyConcepts\nChatMessage message = chatThreadClient.GetMessage(sendChatMessageResult.Id);\n```\n### Delete a message\n```C# Snippet:Azure_Communication_Chat_Tests_Samples_DeleteMessage_KeyConcepts\nchatThreadClient.DeleteMessage(sendChatMessageResult.Id);\n```\n### Get messages\n```C# Snippet:Azure_Communication_Chat_Tests_Samples_GetMessages_KeyConcepts\nPageable<ChatMessage> messages = chatThreadClient.GetMessages();\n```\n### Get a list of participants\n```C# Snippet:Azure_Communication_Chat_Tests_Samples_GetParticipants_KeyConcepts\nPageable<ChatParticipant> chatParticipants = chatThreadClient.GetParticipants();\n```\n### Add participants\n```C# Snippet:Azure_Communication_Chat_Tests_Samples_AddParticipants_KeyConcepts\nchatThreadClient.AddParticipants(participants: new[] { new ChatParticipant(participantIdentifier) });\n```\n### Remove a participant\n```C# Snippet:Azure_Communication_Chat_Tests_Samples_RemoveParticipant_KeyConcepts\nchatThreadClient.RemoveParticipant(identifier: participantIdentifier);\n```\n### Send a typing notification\n```C# Snippet:Azure_Communication_Chat_Tests_Samples_SendTypingNotification_KeyConcepts\nchatThreadClient.SendTypingNotification();\n```\n### Get a list of read receipts\n```C# Snippet:Azure_Communication_Chat_Tests_Samples_GetReadReceipts_KeyConcepts\nPageable<ChatMessageReadReceipt> readReceipts = chatThreadClient.GetReadReceipts();\n```\n### Send a read receipt\n```C# Snippet:Azure_Communication_Chat_Tests_Samples_SendReadReceipt_KeyConcepts\nchatThreadClient.SendReadReceipt(sendChatMessageResult.Id);\n```\n\n### Thread safety\nWe guarantee that all client instance methods are thread-safe and independent of each other ([guideline](https://azure.github.io/azure-sdk/dotnet_introduction.html#dotnet-service-methods-thread-safety)). This ensures that the recommendation of reusing client instances is always safe, even across threads.\n\n### Additional concepts\n<!-- CLIENT COMMON BAR -->\n[Client options](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#configuring-service-clients-using-clientoptions) |\n[Accessing the response](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#accessing-http-response-details-using-responset) |\n[Long-running operations](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#consuming-long-running-operations-using-operationt) |\n[Handling failures](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#reporting-errors-requestfailedexception) |\n[Diagnostics](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md) |\n[Mocking](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#mocking) |\n[Client lifetime](https://devblogs.microsoft.com/azure-sdk/lifetime-management-and-thread-safety-guarantees-of-azure-sdk-net-clients/)\n<!-- CLIENT COMMON BAR -->\n\n## Examples\n\nThe following sections provide several code snippets covering some of the most common tasks, including:\n\n- [Thread Operations](#thread-operations)\n- [Message Operations](#message-operations)\n- [Thread Participant Operations](#thread-participant-operations)\n- [Events Operations](#events-operations)\n\n## Thread Operations\n\n### Create a thread\n\nUse `CreateChatThread` to create a chat thread client object.\n- Use `topic` to give a thread topic.\n- The following are the supported attributes for each thread participant:\n  - `communicationUser`, required, it is the identification for the thread participant.\n  - `displayName`, optional, is the display name for the thread participant\n  - `shareHistoryTime`, optional, time from which the chat history is shared with the participant.\n\n`ChatThreadClient` is the result returned from creating a thread, you can use it to perform other operations on the chat thread.\n\n```C# Snippet:Azure_Communication_Chat_Tests_Samples_CreateChatClient\nChatClient chatClient = new ChatClient(\n    endpoint,\n    new CommunicationTokenCredential(userToken));\n```\n```C# Snippet:Azure_Communication_Chat_Tests_Samples_CreateThread\nvar chatParticipant = new ChatParticipant(identifier: kimberly)\n{\n    DisplayName = \"Kim\"\n};\nCreateChatThreadResult createChatThreadResult = await chatClient.CreateChatThreadAsync(topic: \"Hello world!\", participants: new[] { chatParticipant });\nstring threadId = createChatThreadResult.ChatThread.Id;\nChatThreadClient chatThreadClient = chatClient.GetChatThreadClient(threadId);\n```\n### Get a thread\n\nUse `GetChatThread` to retrieve a chat thread from the service.\n`threadId` is the unique id of the thread.\n\n```C# Snippet:Azure_Communication_Chat_Tests_Samples_GetThread\nChatThreadProperties chatThread = await chatThreadClient.GetPropertiesAsync();\n```\n\n### Get threads (for a participant)\n\nUse `GetChatThreads` to get the list of chat threads for the participant that instantiated the chatClient.\n\n```C# Snippet:Azure_Communication_Chat_Tests_Samples_GetThreads\nAsyncPageable<ChatThreadItem> chatThreadItems = chatClient.GetChatThreadsAsync();\nawait foreach (ChatThreadItem chatThreadItem in chatThreadItems)\n{\n    Console.WriteLine($\"{ chatThreadItem.Id}\");\n}\n```\n\n### Delete a thread\n\nUse `DeleteChatThread` to delete a thread.\n`threadId` is the unique id of the thread.\n\n```C# Snippet:Azure_Communication_Chat_Tests_Samples_DeleteThread\nawait chatClient.DeleteChatThreadAsync(threadId);\n```\n\n### Update a thread\n\nUse `UpdateTopic` to update the chat thread topic.\n- `topic` is used to describe the updated topic for the thread.\n\n```C# Snippet:Azure_Communication_Chat_Tests_Samples_UpdateThread\nawait chatThreadClient.UpdateTopicAsync(topic: \"new topic !\");\n```\n\n## Message Operations\n\n### Send a message\n\nUse `SendMessage` to send a message to a thread.\n\n- Use `content` to provide the content for the message, it is required.\n- Use `type` for the content type of the message such as 'Text' or 'Html'. If not speficied, 'Text' will be set.\n- Use `senderDisplayName` to specify the display name of the sender. If not specified, empty string will be set.\n\n```C# Snippet:Azure_Communication_Chat_Tests_Samples_SendMessage\nSendChatMessageResult sendChatMessageResult = await chatThreadClient.SendMessageAsync(content:\"hello world\");\nvar messageId = sendChatMessageResult.Id;\n```\n\n### Get a message\n\nUse `GetMessage` to retrieve a message from the service.\n`messageId` is the unique id of the message.\n\n`ChatMessage` is the response returned from getting a message, it contains an id, which is the unique identifier of the message, among other fields. Please refer to Azure.Communication.Chat.ChatMessage\n\n```C# Snippet:Azure_Communication_Chat_Tests_Samples_GetMessage\nChatMessage chatMessage = await chatThreadClient.GetMessageAsync(messageId);\n```\n### Get messages\n\nUse `GetMessages` to retrieve all messages for the chat thread.\n\n```C# Snippet:Azure_Communication_Chat_Tests_Samples_GetMessages\nAsyncPageable<ChatMessage> allMessages = chatThreadClient.GetMessagesAsync();\nawait foreach (ChatMessage message in allMessages)\n{\n    Console.WriteLine($\"{message.Id}:{message.Content.Message}\");\n}\n```\n### Update a message\n\nUse `UpdateMessage` to update a message.\n- `messageId` is the unique identifier of the message.\n- `content` is the message content to be updated.\n\n```C# Snippet:Azure_Communication_Chat_Tests_Samples_UpdateMessage\nawait chatThreadClient.UpdateMessageAsync(messageId, \"updated message content\");\n```\n### Delete a message\n\nUse `DeleteMessage` to delete a message.\n- `messageId` is the unique identifier of the message.\n\n```C# Snippet:Azure_Communication_Chat_Tests_Samples_DeleteMessage\nawait chatThreadClient.DeleteMessageAsync(messageId);\n```\n\n## Thread Participant Operations\n\n### Get thread participants\n\nUse `GetParticipants` to retrieve the participants of the chat thread.\n\n```C# Snippet:Azure_Communication_Chat_Tests_Samples_GetParticipants\nAsyncPageable<ChatParticipant> allParticipants = chatThreadClient.GetParticipantsAsync();\nawait foreach (ChatParticipant participant in allParticipants)\n{\n    Console.WriteLine($\"{((CommunicationUserIdentifier)participant.User).Id}:{participant.DisplayName}:{participant.ShareHistoryTime}\");\n}\n```\n### Add thread participants\n\nUse `AddParticipants` to add one or more participants to the chat thread. The following are the supported attributes for each thread participant(s):\n- `communicationUser`, required, it is the identification for the thread participant.\n- `displayName`, optional, is the display name for the thread participant.\n- `shareHistoryTime`, optional, time from which the chat history is shared with the participant.\n\n```C# Snippet:Azure_Communication_Chat_Tests_Samples_AddParticipants\nvar participants = new[]\n{\n    new ChatParticipant(josh) { DisplayName = \"Josh\" },\n    new ChatParticipant(gloria) { DisplayName = \"Gloria\" },\n    new ChatParticipant(amy) { DisplayName = \"Amy\" }\n};\n\nawait chatThreadClient.AddParticipantsAsync(participants);\n```\n\n### Remove thread participant\n\nUse `RemoveParticipant` to remove a thread participant from the thread.\n`communicationUser` is the identification of the chat participant.\n\n```C# Snippet:Azure_Communication_Chat_Tests_Samples_RemoveParticipant\nawait chatThreadClient.RemoveParticipantAsync(gloria);\n```\n\n## Events Operations\n\n### Send typing notification\n\nUse `SendTypingNotification` to indicate that the user is typing a response in the thread.\n\n```C# Snippet:Azure_Communication_Chat_Tests_Samples_SendTypingNotification\nawait chatThreadClient.SendTypingNotificationAsync();\n```\n\n### Send read receipt\n\nUse `SendReadReceipt` to notify other participants that the message is read by the user.\n\n```C# Snippet:Azure_Communication_Chat_Tests_Samples_SendReadReceipt\nawait chatThreadClient.SendReadReceiptAsync(messageId);\n```\n\n### Get read receipts\n\nUse `GetReadReceipts` to check the status of messages to see which ones are read by other participants of a chat thread.\n\n```C# Snippet:Azure_Communication_Chat_Tests_Samples_GetReadReceipts\nAsyncPageable<ChatMessageReadReceipt> allReadReceipts = chatThreadClient.GetReadReceiptsAsync();\nawait foreach (ChatMessageReadReceipt readReceipt in allReadReceipts)\n{\n    Console.WriteLine($\"{readReceipt.ChatMessageId}:{((CommunicationUserIdentifier)readReceipt.Sender).Id}:{readReceipt.ReadOn}\");\n}\n```\n\n## Troubleshooting\n### Service Responses\nA `RequestFailedException` is thrown as a service response for any unsuccessful requests. The exception contains information about what response code was returned from the service.\n```C# Snippet:Azure_Communication_Chat_Tests_Samples_Troubleshooting\ntry\n{\n    CreateChatThreadResult createChatThreadErrorResult = await chatClient.CreateChatThreadAsync(topic: \"Hello world!\", participants: new[] { josh });\n}\ncatch (RequestFailedException ex)\n{\n    Console.WriteLine(ex.Message);\n}\n```\n\n## Next steps\n[Read more about Chat in Azure Communication Services][nextsteps]\n\n## Contributing\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [cla.microsoft.com][cla].\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n[azure_sub]: https://azure.microsoft.com/free/dotnet/\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n[nuget]: https://www.nuget.org/\n[netstandars2mappings]:https://github.com/dotnet/standard/blob/master/docs/versions.md\n[useraccesstokens]:https://docs.microsoft.com/azure/communication-services/quickstarts/access-tokens?pivots=programming-language-csharp\n[communication_resource_docs]: https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource?tabs=windows&pivots=platform-azp\n[communication_resource_create_portal]:  https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource?tabs=windows&pivots=platform-azp\n[communication_resource_create_power_shell]: https://docs.microsoft.com/powershell/module/az.communication/new-azcommunicationservice\n[communication_resource_create_net]: https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource?tabs=windows&pivots=platform-net\n[nextsteps]:https://docs.microsoft.com/azure/communication-services/quickstarts/chat/get-started?pivots=programming-language-csharp\n[source]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/communication/Azure.Communication.Chat/src\n[product_docs]: https://docs.microsoft.com/azure/communication-services/overview\n[package]: https://www.nuget.org/packages/Azure.Communication.Chat\n",
        "repo_name": "communication/Azure.Communication.Chat",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/communication/Azure.Communication.Chat",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Communication Common client library for .NET\n\nThis package contains common code for Azure Communication Service libraries.\n\n[Source code][source] | [Package (NuGet)][package] | [Product documentation][product_docs]\n## Getting started\n\n### Install the package\nInstall the Azure Communication Common client library for .NET with [NuGet][nuget].\n\n```dotnetcli\ndotnet add package Azure.Communication.Common\n```\n\n### Prerequisites\nYou need an [Azure subscription][azure_sub] and a [Communication Service Resource][communication_resource_docs] to use this package.\n\nTo create a new Communication Service, you can use the [Azure Portal][communication_resource_create_portal], the [Azure PowerShell][communication_resource_create_power_shell], or the [.NET management client library][communication_resource_create_net].\n\n<!--\nHere's an example using the Azure CLI:\n\n```Powershell\n[To be ADDED]\n```\n-->\n\n### Authenticate the client\nThis module does not contain a client and instead libraries that help other Azure Communication clients authenticate.\n\n### Key concepts\n\n### CommunicationTokenCredential\n\nThe `CommunicationTokenCredential` object is used to authenticate a user with Communication Services, such as Chat or Calling. It optionally provides an auto-refresh mechanism to ensure a continuously stable authentication state during communications.\n\nDepending on your scenario, you may want to initialize the `CommunicationTokenCredential` with:\n\n- a static token (suitable for short-lived clients used to e.g. send one-off Chat messages) or\n- a callback function that ensures a continuous authentication state (ideal e.g. for long Calling sessions).\n\nThe tokens supplied to the `CommunicationTokenCredential` either through the constructor or via the token refresher callback can be obtained using the Azure Communication Identity library.\n\n### Thread safety\nWe guarantee that all client instance methods are thread-safe and independent of each other ([guideline](https://azure.github.io/azure-sdk/dotnet_introduction.html#dotnet-service-methods-thread-safety)). This ensures that the recommendation of reusing client instances is always safe, even across threads.\n\n### Additional concepts\n<!-- CLIENT COMMON BAR -->\n[Client options](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#configuring-service-clients-using-clientoptions) |\n[Accessing the response](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#accessing-http-response-details-using-responset) |\n[Long-running operations](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#consuming-long-running-operations-using-operationt) |\n[Handling failures](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#reporting-errors-requestfailedexception) |\n[Diagnostics](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md) |\n[Mocking](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#mocking) |\n[Client lifetime](https://devblogs.microsoft.com/azure-sdk/lifetime-management-and-thread-safety-guarantees-of-azure-sdk-net-clients/)\n<!-- CLIENT COMMON BAR -->\n\n## Examples\n\n### Create a credential with a static token\n\nFor short-lived clients, refreshing the token upon expiry is not necessary and `CommunicationTokenCredential` may be instantiated with a static token.\n\n```C# Snippet:CommunicationTokenCredential_CreateWithStaticToken\nstring token = Environment.GetEnvironmentVariable(\"COMMUNICATION_SERVICES_USER_TOKEN\");\nusing var tokenCredential = new CommunicationTokenCredential(token);\n```\n\n### Create a credential with a callback\n\nAlternatively, for long-lived clients, you can create a `CommunicationTokenCredential` with a callback to renew tokens if expired.\nHere we pass two imagined functions that make network requests to retrieve token strings for user Bob.\nIf callbacks are passed, upon requests (sending a chat message), `CommunicationTokenCredential` ensures\nthat a valid token is acquired prior to executing the request.\nIt's necessary that the `FetchTokenForUserFromMyServer` method returns a valid token (with an expiration date set in the future) at all times.\n\nOptionally, you can enable proactive token refreshing where a fresh token will be acquired as soon as the\nprevious token approaches expiry. Using this method, your requests are less likely to be blocked to acquire a fresh token:\n\n```C# Snippet:CommunicationTokenCredential_CreateRefreshableWithoutInitialToken\nusing var tokenCredential = new CommunicationTokenCredential(\n    new CommunicationTokenRefreshOptions(\n        refreshProactively: true, // Indicates if the token should be proactively refreshed in the background or only on-demand\n        tokenRefresher: cancellationToken => FetchTokenForUserFromMyServer(\"bob@contoso.com\", cancellationToken))\n    {\n        AsyncTokenRefresher = cancellationToken => FetchTokenForUserFromMyServerAsync(\"bob@contoso.com\", cancellationToken)\n    });\n```\n\nIf you already have a token, you can optimize the token refreshing even further by passing that initial token:\n\n```C# Snippet:CommunicationTokenCredential_CreateRefreshableWithInitialToken\nstring initialToken = Environment.GetEnvironmentVariable(\"COMMUNICATION_SERVICES_USER_TOKEN\");\nusing var tokenCredential = new CommunicationTokenCredential(\n    new CommunicationTokenRefreshOptions(\n       refreshProactively: true, // Indicates if the token should be proactively refreshed in the background or only on-demand\n       tokenRefresher: cancellationToken => FetchTokenForUserFromMyServer(\"bob@contoso.com\", cancellationToken))\n    {\n        AsyncTokenRefresher = cancellationToken => FetchTokenForUserFromMyServerAsync(\"bob@contoso.com\", cancellationToken),\n        InitialToken = initialToken\n    });\n```\n\n## Troubleshooting\nThe proactive refreshing failures happen in a background thread and to avoid crashing your app the exceptions will be silently handled.\nAll the other failures will happen during your request using other clients such as chat where you can catch the exception using `RequestFailedException`.\n\n## Next steps\n[Read more about Communication user access tokens][user_access_token]\n\n## Contributing\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [cla.microsoft.com][cla].\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n[azure_sub]: https://azure.microsoft.com/free/dotnet/\n[source]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/communication/Azure.Communication.Common/src\n[package]: https://www.nuget.org/packages/Azure.Communication.Common/\n[product_docs]: https://docs.microsoft.com/azure/communication-services/overview\n[nuget]: https://www.nuget.org/\n[user_access_token]: https://docs.microsoft.com/azure/communication-services/quickstarts/access-tokens?pivots=programming-language-csharp\n[communication_resource_docs]: https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource?tabs=windows&pivots=platform-azp\n[communication_resource_create_portal]:  https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource?tabs=windows&pivots=platform-azp\n[communication_resource_create_power_shell]: https://docs.microsoft.com/powershell/module/az.communication/new-azcommunicationservice\n[communication_resource_create_net]: https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource?tabs=windows&pivots=platform-net\n\n",
        "repo_name": "communication/Azure.Communication.Common",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/communication/Azure.Communication.Common",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Communication Email client library for .NET\n\nThis package contains a C# SDK for Azure Communication Services for Email.\n\n[Source code][source] | [Package (NuGet)][package] | [Product documentation][product_docs]\n## Getting started\n\n### Install the package\nInstall the Azure Communication Email client library for .NET with [NuGet][nuget]:\n\n```dotnetcli\ndotnet add package Azure.Communication.Email\n``` \n\n### Prerequisites\nYou need an [Azure subscription][azure_sub], a [Communication Service Resource][communication_resource_docs], and an [Email Communication Resource][email_resource_docs] with an active [Domain][domain_overview].\n\nTo create these resource, you can use the [Azure Portal][communication_resource_create_portal], the [Azure PowerShell][communication_resource_create_power_shell], or the [.NET management client library][communication_resource_create_net].\n\n### Key concepts\n`EmailClient` provides the functionality to send email messages .\n\n### Using statements\n```C# Snippet:Azure_Communication_Email_UsingStatements\nusing Azure.Communication.Email;\n```\n\n### Authenticate the client\nEmail clients can be authenticated using the connection string acquired from an Azure Communication Resource in the [Azure Portal][azure_portal].\n\n```C# Snippet:Azure_Communication_Email_CreateEmailClient\nvar connectionString = \"<connection_string>\"; // Find your Communication Services resource in the Azure portal\nEmailClient emailClient = new EmailClient(connectionString);\n```\n\nAlternatively, Email clients can also be authenticated using a valid token credential. With this option,\n`AZURE_CLIENT_SECRET`, `AZURE_CLIENT_ID` and `AZURE_TENANT_ID` environment variables need to be set up for authentication. \n\n```C# Snippet:Azure_Communication_Email_CreateEmailClientWithToken\nstring endpoint = \"<endpoint_url>\";\nTokenCredential tokenCredential = new DefaultAzureCredential();\ntokenCredential = new DefaultAzureCredential();\nEmailClient emailClient = new EmailClient(new Uri(endpoint), tokenCredential);\n```\n## Examples\n### Send a simple email message with automatic polling for status\nTo send an email message, call the simple overload of `Send` or `SendAsync` function from the `EmailClient`.\n```C# Snippet:Azure_Communication_Email_Send_Simple_AutoPolling\ntry\n{\n    var emailSendOperation = emailClient.Send(\n        wait: WaitUntil.Completed,\n        senderAddress: \"<Send email address>\" // The email address of the domain registered with the Communication Services resource\n        recipientAddress: \"<recipient email address>\"\n        subject: \"This is the subject\",\n        htmlContent: \"<html><body>This is the html body</body></html>\");\n    Console.WriteLine($\"Email Sent. Status = {emailSendOperation.Value.Status}\");\n\n    /// Get the OperationId so that it can be used for tracking the message for troubleshooting\n    string operationId = emailSendOperation.Id;\n    Console.WriteLine($\"Email operation id = {operationId}\");\n}\ncatch ( RequestFailedException ex )\n{\n    /// OperationID is contained in the exception message and can be used for troubleshooting purposes\n    Console.WriteLine($\"Email send operation failed with error code: {ex.ErrorCode}, message: {ex.Message}\");\n}\n```\n\n### Send a simple email message with manual polling for status\nTo send an email message, call the simple overload of `Send` or `SendAsync` function from the `EmailClient`.\n```C# Snippet:Azure_Communication_Email_Send_Simple_ManualPolling_Async\n/// Send the email message with WaitUntil.Started\nvar emailSendOperation = await emailClient.SendAsync(\n    wait: WaitUntil.Started,\n    senderAddress: \"<Send email address>\" // The email address of the domain registered with the Communication Services resource\n    recipientAddress: \"<recipient email address>\"\n    subject: \"This is the subject\",\n    htmlContent: \"<html><body>This is the html body</body></html>\");\n\n/// Call UpdateStatus on the email send operation to poll for the status\n/// manually.\ntry\n{\n    while (true)\n    {\n        await emailSendOperation.UpdateStatusAsync();\n        if (emailSendOperation.HasCompleted)\n        {\n            break;\n        }\n        await Task.Delay(100);\n    }\n\n    if (emailSendOperation.HasValue)\n    {\n        Console.WriteLine($\"Email queued for delivery. Status = {emailSendOperation.Value.Status}\");\n    }\n}\ncatch (RequestFailedException ex)\n{\n    Console.WriteLine($\"Email send failed with Code = {ex.ErrorCode} and Message = {ex.Message}\");\n}\n\n/// Get the OperationId so that it can be used for tracking the message for troubleshooting\nstring operationId = emailSendOperation.Id;\nConsole.WriteLine($\"Email operation id = {operationId}\");\n```\n\n### Send an email message with more options\nTo send an email message, call the overload of `Send` or `SendAsync` function from the `EmailClient` that takes an `EmailMessage` parameter.\n```C# Snippet:Azure_Communication_Email_Send_With_MoreOptions\n// Create the email content\nvar emailContent = new EmailContent(\"This is the subject\")\n{\n    PlainText = \"This is the body\",\n    Html = \"<html><body>This is the html body</body></html>\"\n};\n\n// Create the EmailMessage\nvar emailMessage = new EmailMessage(\n    senderAddress: \"<Send email address>\" // The email address of the domain registered with the Communication Services resource\n    recipientAddress: \"<recipient email address>\"\n    content: emailContent);\n\ntry\n{\n    var emailSendOperation = emailClient.Send(\n        wait: WaitUntil.Completed,\n        message: emailMessage);\n    Console.WriteLine($\"Email Sent. Status = {emailSendOperation.Value.Status}\");\n\n    /// Get the OperationId so that it can be used for tracking the message for troubleshooting\n    string operationId = emailSendOperation.Id;\n    Console.WriteLine($\"Email operation id = {operationId}\");\n}\ncatch ( RequestFailedException ex )\n{\n    /// OperationID is contained in the exception message and can be used for troubleshooting purposes\n    Console.WriteLine($\"Email send operation failed with error code: {ex.ErrorCode}, message: {ex.Message}\");\n}\n```\n\n### Send an email message to multiple recipients\nTo send an email message to multiple recipients, add an `EmailAddress` object for each recipent type to the `EmailRecipient` object.\n\n```C# Snippet:Azure_Communication_Email_Send_Multiple_Recipients\n// Create the email content\nvar emailContent = new EmailContent(\"This is the subject\")\n{\n    PlainText = \"This is the body\",\n    Html = \"<html><body>This is the html body</body></html>\"\n};\n\n// Create the To list\nvar toRecipients = new List<EmailAddress>\n{\n    new EmailAddress(\n        address: \"<recipient email address>\"\n        displayName: \"<recipient displayname>\"\n    new EmailAddress(\n        address: \"<recipient email address>\"\n        displayName: \"<recipient displayname>\"\n};\n\n// Create the CC list\nvar ccRecipients = new List<EmailAddress>\n{\n    new EmailAddress(\n        address: \"<recipient email address>\"\n        displayName: \"<recipient displayname>\"\n    new EmailAddress(\n        address: \"<recipient email address>\"\n        displayName: \"<recipient displayname>\"\n};\n\n// Create the BCC list\nvar bccRecipients = new List<EmailAddress>\n{\n    new EmailAddress(\n        address: \"<recipient email address>\"\n        displayName: \"<recipient displayname>\"\n    new EmailAddress(\n        address: \"<recipient email address>\"\n        displayName: \"<recipient displayname>\"\n};\n\nvar emailRecipients = new EmailRecipients(toRecipients, ccRecipients, bccRecipients);\n\n// Create the EmailMessage\nvar emailMessage = new EmailMessage(\n    senderAddress: \"<Send email address>\" // The email address of the domain registered with the Communication Services resource\n    emailRecipients,\n    emailContent);\n\ntry\n{\n    EmailSendOperation emailSendOperation = emailClient.Send(WaitUntil.Completed, emailMessage);\n    Console.WriteLine($\"Email Sent. Status = {emailSendOperation.Value.Status}\");\n\n    /// Get the OperationId so that it can be used for tracking the message for troubleshooting\n    string operationId = emailSendOperation.Id;\n    Console.WriteLine($\"Email operation id = {operationId}\");\n}\ncatch ( RequestFailedException ex )\n{\n    /// OperationID is contained in the exception message and can be used for troubleshooting purposes\n    Console.WriteLine($\"Email send operation failed with error code: {ex.ErrorCode}, message: {ex.Message}\");\n}\n```\n\n### Send email with attachments\nAzure Communication Services support sending emails with attachments.\n```C# Snippet:Azure_Communication_Email_Send_With_Attachments\n// Create the EmailMessage\nvar emailMessage = new EmailMessage(\n    senderAddress: \"<Send email address>\" // The email address of the domain registered with the Communication Services resource\n    recipientAddress: \"<recipient email address>\"\n    content: emailContent);\n\nvar filePath = \"<path to your file>\";\nvar attachmentName = \"<name of your attachment>\";\nvar contentType = MediaTypeNames.Text.Plain;\n\nvar content = new BinaryData(System.IO.File.ReadAllBytes(filePath));\nvar emailAttachment = new EmailAttachment(attachmentName, contentType, content);\n\nemailMessage.Attachments.Add(emailAttachment);\n\ntry\n{\n    EmailSendOperation emailSendOperation = emailClient.Send(WaitUntil.Completed, emailMessage);\n    Console.WriteLine($\"Email Sent. Status = {emailSendOperation.Value.Status}\");\n\n    /// Get the OperationId so that it can be used for tracking the message for troubleshooting\n    string operationId = emailSendOperation.Id;\n    Console.WriteLine($\"Email operation id = {operationId}\");\n}\ncatch ( RequestFailedException ex )\n{\n    /// OperationID is contained in the exception message and can be used for troubleshooting purposes\n    Console.WriteLine($\"Email send operation failed with error code: {ex.ErrorCode}, message: {ex.Message}\");\n}\n```\n\n## Troubleshooting\nA `RequestFailedException` is thrown as a service response for any unsuccessful requests. The exception contains information about what response code was returned from the service.\n\n## Next steps\n- [Read more about Email in Azure Communication Services][nextsteps]\n\n## Contributing\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [cla.microsoft.com][cla].\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n[azure_sub]: https://azure.microsoft.com/free/dotnet/\n[azure_portal]: https://portal.azure.com\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n[communication_resource_docs]: https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource?tabs=windows&pivots=platform-azp\n[email_resource_docs]: https://aka.ms/acsemail/createemailresource\n[communication_resource_create_portal]:  https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource?tabs=windows&pivots=platform-azp\n[communication_resource_create_power_shell]: https://docs.microsoft.com/powershell/module/az.communication/new-azcommunicationservice\n[communication_resource_create_net]: https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource?tabs=windows&pivots=platform-net\n[package]: https://www.nuget.org/packages/Azure.Communication.Email\n[product_docs]: https://aka.ms/acsemail/overview\n[nextsteps]:https://aka.ms/acsemail/qs-sendmail?pivots=programming-language-csharp\n[nuget]: https://www.nuget.org/\n[source]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/communication/Azure.Communication.Email/src\n[domain_overview]: https://aka.ms/acsemail/domainsoverview\n",
        "repo_name": "communication/Azure.Communication.Email",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/communication/Azure.Communication.Email",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Communication Identity client library for .NET\n\nAzure Communication Identity is managing tokens for Azure Communication Services.\n\n[Source code][source] <!--| [Package (NuGet)][package]--> | [Product documentation][product_docs] | [Samples][source_samples]\n\n## Getting started\n\n### Install the package\n\nInstall the Azure Communication Identity client library for .NET with [NuGet][nuget]:\n\n```dotnetcli\ndotnet add package Azure.Communication.Identity\n```\n\n### Prerequisites\n\nYou need an [Azure subscription][azure_sub] and a [Communication Service Resource][communication_resource_docs] to use this package.\n\nTo create a new Communication Service, you can use the [Azure Portal][communication_resource_create_portal], the [Azure PowerShell][communication_resource_create_power_shell], or the [.NET management client library][communication_resource_create_net].\n\n<!--\nHere's an example using the Azure CLI:\n\n```Powershell\n[To be ADDED]\n```\n-->\n\n### Authenticate the client\n\nThe identity client can be authenticated using a connection string acquired from an Azure Communication Resources in the [Azure Portal][azure_portal].\n\n```C# Snippet:CreateCommunicationIdentityClient\n// Get a connection string to our Azure Communication resource.\nvar connectionString = \"<connection_string>\";\nvar client = new CommunicationIdentityClient(connectionString);\n```\n\nOr alternatively using the endpoint and access key acquired from an Azure Communication Resources in the [Azure Portal][azure_portal].\n\n```C# Snippet:CreateCommunicationIdentityFromAccessKey\nvar endpoint = new Uri(\"https://my-resource.communication.azure.com\");\nvar accessKey = \"<access_key>\";\nvar client = new CommunicationIdentityClient(endpoint, new AzureKeyCredential(accessKey));\n```\n\nClients also have the option to authenticate using a valid Active Directory token.\n\n```C# Snippet:CreateCommunicationIdentityFromToken\nvar endpoint = new Uri(\"https://my-resource.communication.azure.com\");\nTokenCredential tokenCredential = new DefaultAzureCredential();\nvar client = new CommunicationIdentityClient(endpoint, tokenCredential);\n```\n\n### Key concepts\n\n`CommunicationIdentityClient` provides the functionalities to manage user access tokens: creating new ones and revoking them.\n\n### Thread safety\nWe guarantee that all client instance methods are thread-safe and independent of each other ([guideline](https://azure.github.io/azure-sdk/dotnet_introduction.html#dotnet-service-methods-thread-safety)). This ensures that the recommendation of reusing client instances is always safe, even across threads.\n\n### Additional concepts\n<!-- CLIENT COMMON BAR -->\n[Client options](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#configuring-service-clients-using-clientoptions) |\n[Accessing the response](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#accessing-http-response-details-using-responset) |\n[Long-running operations](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#consuming-long-running-operations-using-operationt) |\n[Handling failures](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#reporting-errors-requestfailedexception) |\n[Diagnostics](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md) |\n[Mocking](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#mocking) |\n[Client lifetime](https://devblogs.microsoft.com/azure-sdk/lifetime-management-and-thread-safety-guarantees-of-azure-sdk-net-clients/)\n<!-- CLIENT COMMON BAR -->\n\n## Examples\n\n### Creating a new user\n\n```C# Snippet:CreateCommunicationUserAsync\nResponse<CommunicationUserIdentifier> userResponse = await client.CreateUserAsync();\nCommunicationUserIdentifier user = userResponse.Value;\nConsole.WriteLine($\"User id: {user.Id}\");\n```\n\n### Getting a token for an existing user\n\n```C# Snippet:CreateCommunicationTokenAsync\nResponse<AccessToken> tokenResponse = await client.GetTokenAsync(user, scopes: new[] { CommunicationTokenScope.Chat });\nstring token = tokenResponse.Value.Token;\nDateTimeOffset expiresOn = tokenResponse.Value.ExpiresOn;\nConsole.WriteLine($\"Token: {token}\");\nConsole.WriteLine($\"Expires On: {expiresOn}\");\n```\n\nIt's also possible to create a Communication Identity access token by customizing the expiration time. Validity period of the token must be within [1,24] hours range. If not provided, the default value of 24 hours will be used.\n\n```C# Snippet:CreateCommunicationTokenAsyncWithCustomExpiration\nTimeSpan tokenExpiresIn = TimeSpan.FromHours(1);\nResponse<AccessToken> tokenResponse = await client.GetTokenAsync(user, scopes: new[] { CommunicationTokenScope.Chat }, tokenExpiresIn);\nstring token = tokenResponse.Value.Token;\nDateTimeOffset expiresOn = tokenResponse.Value.ExpiresOn;\nConsole.WriteLine($\"Token: {token}\");\nConsole.WriteLine($\"Expires On: {expiresOn}\");\n```\n\n### Creating a user and a token in the same request\n```C# Snippet:CreateCommunicationUserAndToken\nResponse<CommunicationUserIdentifierAndToken> response = await client.CreateUserAndTokenAsync(scopes: new[] { CommunicationTokenScope.Chat });\nvar (user, token) = response.Value;\nConsole.WriteLine($\"User id: {user.Id}\");\nConsole.WriteLine($\"Token: {token.Token}\");\n```\n\nIt's also possible to create a Communication Identity access token by customizing the expiration time. Validity period of the token must be within [1,24] hours range. If not provided, the default value of 24 hours will be used.\n\n```C# Snippet:CreateCommunicationUserAndTokenWithCustomExpirationAsync\nTimeSpan tokenExpiresIn = TimeSpan.FromHours(1);\nResponse<CommunicationUserIdentifierAndToken> response = await client.CreateUserAndTokenAsync(scopes: new[] { CommunicationTokenScope.Chat }, tokenExpiresIn);\nvar (user, token) = response.Value;\nConsole.WriteLine($\"User id: {user.Id}\");\nConsole.WriteLine($\"Token: {token.Token}\");\n```\n\n### Revoking a user's tokens\n\nIn case a user's tokens are compromised or need to be revoked:\n\n```C# Snippet:RevokeCommunicationUserTokenAsync\nResponse revokeResponse = await client.RevokeTokensAsync(user);\n```\n\n### Deleting a user\n\n```C# Snippet:DeleteACommunicationUserAsync\nResponse deleteResponse = await client.DeleteUserAsync(user);\n```\n\n### Exchanging Azure AD access token of a Teams User for a Communication Identity access token\nThe `CommunicationIdentityClient` can be used to exchange an Azure AD access token of a Teams user for a new Communication Identity access token with a matching expiration time.\n\nThe `GetTokenForTeamsUser` function accepts the following parameters wrapped into the `GetTokenForTeamsUserOptions` option bag:\n- `teamsUserAadToken` Azure Active Directory access token of a Teams user\n- `clientId` Client ID of an Azure AD application to be verified against the appId claim in the Azure AD access token\n- `userObjectId` Object ID of an Azure AD user (Teams User) to be verified against the OID claim in the Azure AD access token\n\n```C# Snippet:GetTokenForTeamsUserAsync\nResponse<AccessToken> tokenResponse = await client.GetTokenForTeamsUserAsync(new GetTokenForTeamsUserOptions(teamsUserAadToken, clientId, userObjectId));\nstring token = tokenResponse.Value.Token;\nConsole.WriteLine($\"Token: {token}\");\n```\n\n## Troubleshooting\n\nAll User token service operations will throw a RequestFailedException on failure.\n\n```C# Snippet:CommunicationIdentityClient_Troubleshooting\n// Get a connection string to our Azure Communication resource.\nvar connectionString = \"<connection_string>\";\nvar client = new CommunicationIdentityClient(connectionString);\n\ntry\n{\n    Response<CommunicationUserIdentifier> response = await client.CreateUserAsync();\n}\ncatch (RequestFailedException ex)\n{\n    Console.WriteLine(ex.Message);\n}\n```\n\n\n## Next steps\n\n[Read more about Communication user access tokens][user_access_token]\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [cla.microsoft.com][cla].\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n\n[azure_sub]: https://azure.microsoft.com/free/dotnet/\n[azure_portal]: https://portal.azure.com\n[source]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/communication/Azure.Communication.Identity/src\n[source_samples]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/communication/Azure.Communication.Identity/samples\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n<!--[package]: https://www.nuget.org/packages/Azure.Communication.Identity-->\n[product_docs]: https://docs.microsoft.com/azure/communication-services/overview\n[nuget]: https://www.nuget.org/\n[user_access_token]: https://docs.microsoft.com/azure/communication-services/quickstarts/access-tokens?pivots=programming-language-csharp\n[communication_resource_docs]: https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource?tabs=windows&pivots=platform-azp\n[communication_resource_create_portal]: https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource?tabs=windows&pivots=platform-azp\n[communication_resource_create_power_shell]: https://docs.microsoft.com/powershell/module/az.communication/new-azcommunicationservice\n[communication_resource_create_net]: https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource?tabs=windows&pivots=platform-net\n",
        "repo_name": "communication/Azure.Communication.Identity",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/communication/Azure.Communication.Identity",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Communication JobRouter client library for .NET\n\nThis package contains a C# SDK for Azure Communication Services for JobRouter.\n\n[Source code][source] | [Package (NuGet)][nuget_link] | [Product documentation][product_docs]\n\n\n## Getting started\n\n### Install the package\nInstall the Azure Communication JobRouter client library for .NET with [NuGet][nuget]:\n\n```dotnetcli\ndotnet add package Azure.Communication.JobRouter --prerelease\n```\n\n### Prerequisites\nYou need an [Azure subscription][azure_sub] and a [Communication Service Resource][communication_resource_docs] to use this package.\n\nTo create a new Communication Service, you can use the [Azure Portal][communication_resource_create_portal], the [Azure PowerShell][communication_resource_create_power_shell], or the [.NET management client library][communication_resource_create_net].\n\n### Authenticate the client\n\n### Using statements\n```C# Snippet:Azure_Communication_JobRouter_Tests_Samples_UsingStatements\nusing Azure.Communication.JobRouter;\nusing Azure.Communication.JobRouter.Models;\n```\n\n### Create a JobRouter Client\n\nThis will allow you to interact with the JobRouter Service\n```C# Snippet:Azure_Communication_JobRouter_Tests_Samples_CreateClient\nRouterClient routerClient = new RouterClient(\"<< CONNECTION STRING >>\");\nRouterAdministrationClient routerAdministrationClient = new RouterAdministrationClient(\"<< CONNECTION STRING >>\");\n```\n\n## Key concepts\n\n### Job\nA Job represents the unit of work, which needs to be routed to an available Worker.\nA real-world example of this may be an incoming call or chat in the context of a call center.\n\n### Worker\nA Worker represents the supply available to handle a Job. Each worker registers with with or more queues to receive jobs.\nA real-world example of this may be an agent working in a call center.\n\n### Queue\nA Queue represents an ordered list of jobs waiting to be served by a worker.  Workers will register with a queue to receive work from it.\nA real-world example of this may be a call queue in a call center.\n\n## Channel\nA Channel represents a grouping of jobs by some type.  When a worker registers to receive work, they must also specify for which channels they can handle work, and how much of each can they handle concurrently.\nA real-world example of this may be `voice calls` or `chats` in a call center.\n\n### Offer\nAn Offer is extended by JobRouter to a worker to handle a particular job when it determines a match, this notification is normally delivered via [EventGrid][subscribe_events].  The worker can either accept or decline the offer using th JobRouter API, or it will expire according to the time to live configured on the distribution policy.\nA real-world example of this may be the ringing of an agent in a call center.\n\n### Distribution Policy\nA Distribution Policy represents a configuration set that governs how jobs in a queue are distributed to workers registered with that queue.\nThis configuration includes how long an Offer is valid before it expires and the distribution mode, which define the order in which workers are picked when there are multiple available.\n\n#### Distribution Mode\nThe 3 types of modes are\n- **Round Robin**: Workers are ordered by `Id` and the next worker after the previous one that got an offer is picked.\n- **Longest Idle**: The worker that has not been working on a job for the longest.\n- **Best Worker**: You can specify an expression to compare 2 workers to determine which one to pick.\n\n### Labels\nYou can attach labels to workers, jobs and queues.  These are key value pairs that can be of `string`, `number` or `boolean` data types.\nA real-world example of this may be the skill level of a particular worker or the team or geographic location.\n\n### Label Selectors\nLabel selectors can be attached to a job in order to target a subset of workers serving the queue.\nA real-world example of this may be a condition on an incoming call that the agent must have a minimum level of knowledge of a particular product.\n\n### Classification policy\nA classification policy can be used to dynamically select a queue, determine job priority and attach worker label selectors to a job by leveraging a rules engine.\n\n### Exception policy\nAn exception policy controls the behavior of a Job based on a trigger and executes a desired action. The exception policy is attached to a Queue so it can control the behavior of Jobs in the Queue.\n\n## Examples\n\n### Distribution Policy\nBefore we can create a Queue, we need a Distribution Policy.\n\n```C# Snippet:Azure_Communication_JobRouter_Tests_Samples_CreateDistributionPolicyLongestIdleTTL1D_Async\nResponse<DistributionPolicy> distributionPolicy = await routerAdministrationClient.CreateDistributionPolicyAsync(\n    new CreateDistributionPolicyOptions(\n        distributionPolicyId: \"distribution-policy-1\",\n        offerTtl: TimeSpan.FromDays(1),\n        mode: new LongestIdleMode())\n);\n```\n\n### Queue\nNext, we can create the queue.\n```C# Snippet:Azure_Communication_JobRouter_Tests_Samples_CreateQueue_Async\nResponse<JobQueue> queue = await routerAdministrationClient.CreateQueueAsync(\n    new CreateQueueOptions(\n        queueId: \"queue-1\",\n        distributionPolicyId: distributionPolicy.Value.Id)\n);\n```\n\n### Job\nNow, we can submit a job directly to that queue, with a worker selector the requires the worker to have the label `Some-Skill` greater than 10.\n```C# Snippet:Azure_Communication_JobRouter_Tests_Samples_CreateJobDirectQAssign_Async\nResponse<RouterJob> job = await routerClient.CreateJobAsync(\n    new CreateJobOptions(\n        jobId: \"jobId-1\",\n        channelId: \"my-channel\",\n        queueId: queue.Value.Id)\n    {\n        ChannelReference = \"12345\",\n        Priority = 1,\n        RequestedWorkerSelectors = new List<WorkerSelector>\n        {\n            new WorkerSelector(\"Some-Skill\", LabelOperator.GreaterThan, new LabelValue(10))\n        }\n    });\n```\n\n### Worker\nNow, we register a worker to receive work from that queue, with a label of `Some-Skill` equal to 11.\n```C# Snippet:Azure_Communication_JobRouter_Tests_Samples_RegisterWorker_Async\nResponse<RouterWorker> worker = await routerClient.CreateWorkerAsync(\n    new CreateWorkerOptions(\n        workerId: \"worker-1\",\n        totalCapacity: 1)\n    {\n        QueueIds = new Dictionary<string, QueueAssignment>() { [queue.Value.Id] = new QueueAssignment() },\n        Labels = new Dictionary<string, LabelValue>()\n        {\n            [\"Some-Skill\"] = new LabelValue(11)\n        },\n        ChannelConfigurations = new Dictionary<string, ChannelConfiguration>()\n        {\n            [\"my-channel\"] = new ChannelConfiguration(1)\n        },\n        AvailableForOffers = true,\n    }\n);\n```\n\n### Offer\nWe should get a [RouterWorkerOfferIssued][offer_issued_event_schema] from our [EventGrid subscription][subscribe_events].\n\nThere are several different Azure services that act as a [event handler][event_grid_event_handlers].\nFor this scenario, we are going to assume Webhooks for event delivery. [Learn more about Webhook event delivery][webhook_event_grid_event_delivery]\n\nOnce events are delivered to the event handler, we can deserialize the JSON payload into a list of events.\n\n```C# Snippet:EGEventParseJson\n// Parse the JSON payload into a list of events\nEventGridEvent[] egEvents = EventGridEvent.ParseMany(BinaryData.FromStream(httpContent));\n```\n\n```C# Snippet:DeserializePayloadUsingAsSystemEventData\nstring offerId;\nforeach (EventGridEvent egEvent in egEvents)\n{\n    // This is a temporary fix before Router events are on-boarded as system events\n    switch (egEvent.EventType)\n    {\n        case \"Microsoft.Communication.RouterWorkerOfferIssued\":\n            AcsRouterWorkerOfferIssuedEventData deserializedEventData =\n                egEvent.Data.ToObjectFromJson<AcsRouterWorkerOfferIssuedEventData>();\n            Console.Write(deserializedEventData.OfferId); // Offer Id\n            offerId = deserializedEventData.OfferId;\n            break;\n        // Handle any other custom event type\n        default:\n            Console.Write(egEvent.EventType);\n            Console.WriteLine(egEvent.Data.ToString());\n            break;\n    }\n}\n```\n\nHowever, we could also wait a few seconds and then query the worker directly against the JobRouter API to see if an offer was issued to it.\n```C# Snippet:Azure_Communication_JobRouter_Tests_Samples_QueryWorker_Async\nResponse<RouterWorker> result = await routerClient.GetWorkerAsync(worker.Value.Id);\nforeach (JobOffer? offer in result.Value.Offers)\n{\n    Console.WriteLine($\"Worker {worker.Value.Id} has an active offer for job {offer.JobId}\");\n}\n```\n\n### Accept an offer\nOnce a worker receives an offer, it can take two possible actions: accept or decline. We are going to accept the offer.\n```C# Snippet:Azure_Communication_JobRouter_Tests_Samples_AcceptOffer_Async\n// fetching the offer id\nJobOffer jobOffer = result.Value.Offers.First(x => x.JobId == job.Value.Id);\n\nstring offerId = jobOffer.Id; // `OfferId` can be retrieved directly from consuming event from Event grid\n\n// accepting the offer sent to `worker-1`\nResponse<AcceptJobOfferResult> acceptJobOfferResult = await routerClient.AcceptJobOfferAsync(worker.Value.Id, offerId);\n\nConsole.WriteLine($\"Offer: {jobOffer.Id} sent to worker: {worker.Value.Id} has been accepted\");\nConsole.WriteLine($\"Job has been assigned to worker: {worker.Value.Id} with assignment: {acceptJobOfferResult.Value.AssignmentId}\");\n\n// verify job assignment is populated when querying job\nResponse<RouterJob> updatedJob = await routerClient.GetJobAsync(job.Value.Id);\nConsole.WriteLine($\"Job assignment has been successful: {updatedJob.Value.JobStatus == RouterJobStatus.Assigned && updatedJob.Value.Assignments.ContainsKey(acceptJobOfferResult.Value.AssignmentId)}\");\n```\n\n### Completing a job\nOnce the worker is done with the job, the worker has to mark the job as `completed`.\n```C# Snippet:Azure_Communication_JobRouter_Tests_Samples_CompleteJob_Async\nResponse<CompleteJobResult> completeJob = await routerClient.CompleteJobAsync(\n    options: new CompleteJobOptions(\n            jobId: job.Value.Id,\n            assignmentId: acceptJobOfferResult.Value.AssignmentId)\n    {\n        Note = $\"Job has been completed by {worker.Value.Id} at {DateTimeOffset.UtcNow}\"\n    });\n\nConsole.WriteLine($\"Job has been successfully completed: {completeJob.GetRawResponse().Status == 200}\");\n```\n\n### Closing a job\nAfter a job has been completed, the worker can perform wrap up actions to the job before closing the job and finally releasing its capacity to accept more incoming jobs\n```C# Snippet:Azure_Communication_JobRouter_Tests_Samples_CloseJob_Async\nResponse<CloseJobResult> closeJob = await routerClient.CloseJobAsync(\n    options: new CloseJobOptions(\n        jobId: job.Value.Id,\n        assignmentId: acceptJobOfferResult.Value.AssignmentId)\n    {\n        Note = $\"Job has been closed by {worker.Value.Id} at {DateTimeOffset.UtcNow}\"\n    });\nConsole.WriteLine($\"Job has been successfully closed: {closeJob.GetRawResponse().Status == 200}\");\n\nupdatedJob = await routerClient.GetJobAsync(job.Value.Id);\nConsole.WriteLine($\"Updated job status: {updatedJob.Value.JobStatus == RouterJobStatus.Closed}\");\n```\n\n```C# Snippet:Azure_Communication_JobRouter_Tests_Samples_CloseJobInFuture_Async\n// Optionally, a job can also be set up to be marked as closed in the future.\nvar closeJobInFuture = await routerClient.CloseJobAsync(\n    options: new CloseJobOptions(job.Value.Id, acceptJobOfferResult.Value.AssignmentId)\n    {\n        CloseTime = DateTimeOffset.UtcNow.AddSeconds(2), // this will mark the job as closed after 2 seconds\n        Note = $\"Job has been marked to close in the future by {worker.Value.Id} at {DateTimeOffset.UtcNow}\"\n    });\nConsole.WriteLine($\"Job has been marked to close: {closeJob.GetRawResponse().Status == 202}\"); // You'll received a 202 in that case\n\nawait Task.Delay(TimeSpan.FromSeconds(2));\n\nupdatedJob = await routerClient.GetJobAsync(job.Value.Id);\nConsole.WriteLine($\"Updated job status: {updatedJob.Value.JobStatus == RouterJobStatus.Closed}\");\n```\n\n## Troubleshooting\n\nRunning into issues? This section should contain details as to what to do there.\n\n## Next steps\n[Read more about JobRouter in Azure Communication Services][nextsteps]\n\n## Contributing\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [cla.microsoft.com][cla].\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n[azure_sub]: https://azure.microsoft.com/free/dotnet/\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n[nuget]: https://www.nuget.org/\n[netstandars2mappings]:https://github.com/dotnet/standard/blob/master/docs/versions.md\n[useraccesstokens]:https://docs.microsoft.com/azure/communication-services/quickstarts/access-tokens?pivots=programming-language-csharp\n[communication_resource_docs]: https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource?tabs=windows&pivots=platform-azp\n[communication_resource_create_portal]:  https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource?tabs=windows&pivots=platform-azp\n[communication_resource_create_power_shell]: https://docs.microsoft.com/powershell/module/az.communication/new-azcommunicationservice\n[communication_resource_create_net]: https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource?tabs=windows&pivots=platform-net\n[nextsteps]:https://docs.microsoft.com/azure/communication-services/concepts/router/concepts\n[source]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/communication/Azure.Communication.JobRouter/src\n[product_docs]: https://docs.microsoft.com/azure/communication-services/overview\n[classification_concepts]: https://docs.microsoft.com/azure/communication-services/concepts/router/classification-concepts\n[subscribe_events]: https://docs.microsoft.com/azure/communication-services/how-tos/router-sdk/subscribe-events\n[offer_issued_event_schema]: https://docs.microsoft.com/azure/communication-services/how-tos/router-sdk/subscribe-events#microsoftcommunicationrouterworkerofferissued\n[deserialize_event_grid_event_data]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/eventgrid/Azure.Messaging.EventGrid#receiving-and-deserializing-events\n[event_grid_event_handlers]: https://docs.microsoft.com/azure/event-grid/event-handlers\n[webhook_event_grid_event_delivery]: https://docs.microsoft.com/azure/event-grid/webhook-event-delivery\n[nuget_link]: https://www.nuget.org\n",
        "repo_name": "communication/Azure.Communication.JobRouter",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/communication/Azure.Communication.JobRouter",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Communication Media Composition client library for .NET\n\nAzure Communication Media Composition allows developers to compose media streams using various layouts.\n\n[Source code][source]\n\n## Getting started\n\n### Install the package\n> TODO\n\n### Prerequisites\nYou need an [Azure subscription][azure_sub] and a [Communication Service Resource][communication_resource_docs] to use this package.\n\nTo create a new Communication Service, you can use the [Azure Portal][communication_resource_create_portal], the [Azure PowerShell][communication_resource_create_power_shell], or the [.NET management client library][communication_resource_create_net].\n\n### Authenticate the client\nThe media composition client can be authenticated using a connection string acquired from an Azure Communication Resources in the [Azure Portal][azure_portal].\n\n```C# Snippet:CreateMediaCompositionClient\nvar connectionString = \"<connection_string>\";\nvar client = new MediaCompositionClient(connectionString);\n```\n\nOr alternatively using the endpoint and access key acquired from an Azure Communication Resources in the [Azure Portal][azure_portal].\n\n```C# Snippet:CreateMediaCompositionClientFromAccessKey\nvar endpoint = new Uri(\"https://my-resource.communication.azure.com\");\nvar accessKey = \"<access_key>\";\nvar client= new MediaCompositionClient(endpoint, new AzureKeyCredential(accessKey));\n```\n\nClients also have the option to authenticate using a valid Active Directory token.\n\n```C# Snippet:CreateMediaCompositionClientFromToken\nvar resourceEndpoint = new Uri(\"https://my-resource.communication.azure.com\");\nTokenCredential tokenCredential = new DefaultAzureCredential();\nvar client = new MediaCompositionClient(endpoint, tokenCredential);\n```\n\n### Key concepts\n`MediaCompositionComponent` provides the functionalities to create media compositions by defining inputs, layout, and outputs. The created media composition can then be updated, started, stopped, and deleted.\n\n### Thread safety\n> TODO\n\n## Examples\n### Creating the media composition\n\n```C# Snippet:CreateMediaComposition\nvar layout = new GridLayout(2, 2, new List<List<string>>{ new List<string> { \"jill\", \"jack\" }, new List<string> { \"jane\", \"jerry\" } })\n{\n    Resolution = new(1920, 1080)\n};\n\nvar inputs = new Dictionary<string, MediaInput>()\n{\n    [\"jill\"] = new ParticipantInput\n    (\n        id: new CommunicationUserIdentifier(\"f3ba9014-6dca-4456-8ec0-fa03cfa2b7b7\"),\n        call: \"acsGroupCall\")\n    {\n        PlaceholderImageUri = \"https://imageendpoint\"\n    },\n    [\"jack\"] = new ParticipantInput\n    (\n        id: new CommunicationUserIdentifier(\"fa4337b5-f13a-41c5-a34f-f2aa46699b61\"),\n        call: \"acsGroupCall\")\n    {\n        PlaceholderImageUri = \"https://imageendpoint\"\n    },\n    [\"jane\"] = new ParticipantInput\n    (\n        id: new CommunicationUserIdentifier(\"2dd69470-dc25-49cf-b5c3-f562f08bf3b2\"),\n        call: \"acsGroupCall\"\n    )\n    {\n        PlaceholderImageUri = \"https://imageendpoint\"\n    },\n    [\"jerry\"] = new ParticipantInput\n    (\n        id: new CommunicationUserIdentifier(\"30e29fde-ac1c-448f-bb34-0f3448d5a677\"),\n        call: \"acsGroupCall\")\n    {\n        PlaceholderImageUri = \"https://imageendpoint\"\n    },\n    [\"acsGroupCall\"] = new GroupCallInput(\"d12d2277-ffec-4e22-9979-8c0d8c13d193\")\n};\n\nvar outputs = new Dictionary<string, MediaOutput>()\n{\n    [\"acsGroupCall\"] = new GroupCallOutput(\"d12d2277-ffec-4e22-9979-8c0d8c13d193\")\n};\n\nvar response = await mediaCompositionClient.CreateAsync(mediaCompositionId, layout, inputs, outputs);\n```\n\n### Getting an existing media composition\n\n```C# Snippet:GetMediaComposition\nvar gridMediaCompositionResponse = await mediaCompositionClient.GetAsync(mediaCompositionId);\n```\n\n### Updating an existing media composition\n\nYou can update the layout:\n```C# Snippet:UpdateLayout\nvar layout = new AutoGridLayout(new List<string>() { \"acsGroupCall\" })\n{\n    Resolution = new(720, 480),\n};\n\nvar response = await mediaCompositionClient.UpdateLayoutAsync(mediaCompositionId, layout);\n```\n\nNote: Upserting `GroupCall` and `Room` input kind is currently not supported if the media composition is running. The media composition will need to be stopped if `GroupCall` or `Room` inputs need to change.\nYou can upsert or remove inputs:\n\n```C# Snippet:UpsertInputs\nvar inputsToUpsert = new Dictionary<string, MediaInput>()\n{\n    [\"james\"] = new ParticipantInput\n    (\n        id: new CommunicationUserIdentifier(\"f3ba9014-6dca-4456-8ec0-fa03cfa2b70p\"),\n        call: \"acsGroupCall\"\n    )\n    {\n        PlaceholderImageUri = \"https://imageendpoint\"\n    }\n};\n\nvar response = await mediaCompositionClient.UpsertInputsAsync(mediaCompositionId, inputsToUpsert);\n```\n\n```C# Snippet:RemoveInputs\nvar inputIdsToRemove = new List<string>()\n{\n    \"jane\", \"jerry\"\n};\nvar response = await mediaCompositionClient.RemoveInputsAsync(mediaCompositionId, inputIdsToRemove);\n```\n\nYou can also upsert or remove outputs:\n```C# Snippet:UpsertOutputs\nvar outputsToUpsert = new Dictionary<string, MediaOutput>()\n{\n    [\"youtube\"] = new RtmpOutput(\"key\", new(1920, 1080), \"rtmp://a.rtmp.youtube.com/live2\")\n};\n\nvar response = await mediaCompositionClient.UpsertOutputsAsync(mediaCompositionId, outputsToUpsert);\n```\n\n```C# Snippet:RemoveOutputs\nvar outputIdsToRemove = new List<string>()\n{\n    \"acsGroupCall\"\n};\nvar response = await mediaCompositionClient.RemoveOutputsAsync(mediaCompositionId, outputIdsToRemove);\n```\n\n### Starting the media composition to start streaming\n\n```C# Snippet:StartMediaComposition\nvar compositionSteamState = await mediaCompositionClient.StartAsync(mediaCompositionId);\n```\n\n### Stopping the media composition to stop streaming\n\n```C# Snippet:StopMediaComposition\nvar compositionSteamState = await mediaCompositionClient.StopAsync(mediaCompositionId);\n```\n\n### Deleting the media composition\n\n```C# Snippet:DeleteMediaComposition\nawait mediaCompositionClient.DeleteAsync(mediaCompositionId);\n```\n\n## Troubleshooting\n> TODO\n\n## Next steps\n> TODO\n\n## Contributing\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [cla.microsoft.com][cla].\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n[azure_sub]: https://azure.microsoft.com/free/dotnet/\n[azure_portal]: https://portal.azure.com\n[source]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/communication/Azure.Communication.MediaComposition/src\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n[communication_resource_create_portal]:  https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource?tabs=windows&pivots=platform-azp\n[communication_resource_create_power_shell]: https://docs.microsoft.com/powershell/module/az.communication/new-azcommunicationservice\n[communication_resource_create_net]: https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource?tabs=windows&pivots=platform-net\n[communication_resource_docs]: https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource?tabs=windows&pivots=platform-azp\n",
        "repo_name": "communication/Azure.Communication.MediaComposition",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/communication/Azure.Communication.MediaComposition",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Communication Network Traversal client library for .NET\n\nAzure Communication Network Traversal enables high bandwidth, low latency connections between peers for real-time communication scenarios and data transfer scenarios by providing access to low-level STUN and TURN services.\n\n[Source code][source] <!--| [Package (NuGet)][package]--> | [Product documentation][product_docs] <!--| [Samples][source_samples]-->\n## Getting started\n\n### Install the package\n\nInstall the Azure Communication Network Traversal client library for .NET with [NuGet][nuget]:\n\n```dotnetcli\ndotnet add package Azure.Communication.NetworkTraversal\n```\n\n### Prerequisites\n\nYou need an [Azure subscription][azure_sub] and a [Communication Service Resource][communication_resource_docs] to use this package.\n\nTo create a new Communication Service, you can use the [Azure Portal][communication_resource_create_portal], the [Azure PowerShell][communication_resource_create_power_shell], or the [.NET management client library][communication_resource_create_net].\n\n### Authenticate the client\n\nThe networking client can be authenticated using a connection string acquired from an Azure Communication Resources in the [Azure Portal][azure_portal].\n\n```C# Snippet:CreateCommunicationRelayClient\n// Get a connection string to our Azure Communication resource.\nvar connectionString = \"<connection_string>\";\nvar client = new CommunicationRelayClient(connectionString);\n```\n\nOr alternatively using the endpoint and access key acquired from an Azure Communication Resources in the [Azure Portal][azure_portal].\n\n```C# Snippet:CreateCommunicationRelayFromAccessKey\nvar endpoint = new Uri(\"https://my-resource.communication.azure.com\");\nvar accessKey = \"<access_key>\";\nvar client = new CommunicationRelayClient(endpoint, new AzureKeyCredential(accessKey));\n```\n\nClients also have the option to authenticate using a valid Active Directory token.\n\n```C# Snippet:CreateCommunicationRelayFromToken\nvar endpoint = new Uri(\"https://my-resource.communication.azure.com\");\nTokenCredential tokenCredential = new DefaultAzureCredential();\nvar client = new CommunicationRelayClient(endpoint, tokenCredential);\n```\n\n### Key concepts\n\n`CommunicationRelayClient` provides the functionalities to gain STUN/TURN server URLs and credentials for access.\n\n### Thread safety\nWe guarantee that all client instance methods are thread-safe and independent of each other ([guideline](https://azure.github.io/azure-sdk/dotnet_introduction.html#dotnet-service-methods-thread-safety)). This ensures that the recommendation of reusing client instances is always safe, even across threads.\n\n### Additional concepts\n<!-- CLIENT COMMON BAR -->\n[Client options](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#configuring-service-clients-using-clientoptions) |\n[Accessing the response](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#accessing-http-response-details-using-responset) |\n[Long-running operations](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#consuming-long-running-operations-using-operationt) |\n[Handling failures](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#reporting-errors-requestfailedexception) |\n[Diagnostics](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md) |\n[Mocking](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#mocking) |\n[Client lifetime](https://devblogs.microsoft.com/azure-sdk/lifetime-management-and-thread-safety-guarantees-of-azure-sdk-net-clients/)\n<!-- CLIENT COMMON BAR -->\n\n## Examples\n\n## Getting a Relay Configuration for a user\n\n```C# Snippet:GetRelayConfigurationAsync\nResponse<CommunicationRelayConfiguration> relayConfiguration = await client.GetRelayConfigurationAsync();\nDateTimeOffset turnTokenExpiresOn = relayConfiguration.Value.ExpiresOn;\nIList<CommunicationIceServer> iceServers = relayConfiguration.Value.IceServers;\nConsole.WriteLine($\"Expires On: {turnTokenExpiresOn}\");\nforeach (CommunicationIceServer iceServer in iceServers)\n{\n    foreach (string url in iceServer.Urls)\n    {\n        Console.WriteLine($\"ICE Server Url: {url}\");\n    }\n    Console.WriteLine($\"ICE Server Username: {iceServer.Username}\");\n    Console.WriteLine($\"ICE Server Credential: {iceServer.Credential}\");\n    Console.WriteLine($\"ICE Server RouteType: {iceServer.RouteType}\");\n}\n```\n\n## Getting a Relay Configuration for a user with a specified routeType\n\n```C# Snippet:GetRelayConfigurationAsyncWithNearestRouteType\nResponse<CommunicationRelayConfiguration> relayConfiguration = await client.GetRelayConfigurationAsync(user,RouteType.Nearest);\nDateTimeOffset turnTokenExpiresOn = relayConfiguration.Value.ExpiresOn;\nIList<CommunicationIceServer> iceServers = relayConfiguration.Value.IceServers;\nConsole.WriteLine($\"Expires On: {turnTokenExpiresOn}\");\nforeach (CommunicationIceServer iceServer in iceServers)\n{\n    foreach (string url in iceServer.Urls)\n    {\n        Console.WriteLine($\"ICE Server Url: {url}\");\n    }\n    Console.WriteLine($\"ICE Server Username: {iceServer.Username}\");\n    Console.WriteLine($\"ICE Server Credential: {iceServer.Credential}\");\n    Console.WriteLine($\"ICE Server Route Type: {iceServer.RouteType}\");\n}\n```\n\n## Troubleshooting\n\n> TODO\n\n## Next steps\n\n> TODO\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [cla.microsoft.com][cla].\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n\n[azure_sub]: https://azure.microsoft.com/free/dotnet/\n[azure_portal]: https://portal.azure.com\n[source]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/communication/Azure.Communication.NetworkTraversal/src\n<!--[source_samples]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/communication/Azure.Communication.NetworkTraversal/samples-->\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n<!--[package]: https://www.nuget.org/packages/Azure.Communication.NetworkTraversal-->\n[product_docs]: https://docs.microsoft.com/azure/communication-services/overview\n[nuget]: https://www.nuget.org/\n[communication_resource_docs]: https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource?tabs=windows&pivots=platform-azp\n[communication_resource_create_portal]: https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource?tabs=windows&pivots=platform-azp\n[communication_resource_create_power_shell]: https://docs.microsoft.com/powershell/module/az.communication/new-azcommunicationservice\n[communication_resource_create_net]: https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource?tabs=windows&pivots=platform-net\n",
        "repo_name": "communication/Azure.Communication.NetworkTraversal",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/communication/Azure.Communication.NetworkTraversal",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Communication Phone Numbers client library for .NET\n\nAzure Communication Phone Numbers is managing phone numbers for Azure Communication Services.\n\n[Source code][source] <!--| [Package (NuGet)][package]--> | [Product documentation][product_docs] | [Samples][source_samples]\n\n## Getting started\n\n### Install the package\n\nInstall the Azure Communication Phone Numbers client library for .NET with [NuGet][nuget]:\n\n```dotnetcli\ndotnet add package Azure.Communication.PhoneNumbers\n```\n\n### Prerequisites\n\nYou need an [Azure subscription][azure_sub] and a [Communication Service Resource][communication_resource_docs] to use this package.\n\nTo create a new Communication Service, you can use the [Azure Portal][communication_resource_create_portal], the [Azure PowerShell][communication_resource_create_power_shell], or the [.NET management client library][communication_resource_create_net].\n\n<!--\nHere's an example using the Azure CLI:\n\n```Powershell\n[To be ADDED]\n```\n-->\n\n### Key concepts\n\nThis SDK provides functionality to easily manage `direct offer` and `direct routing` numbers.\n\nThe `direct offer` numbers come in two types: Geographic and Toll-Free. Geographic phone plans are phone plans associated with a location, whose phone numbers' area codes are associated with the area code of a geographic location. Toll-Free phone plans are phone plans not associated location. For example, in the US, toll-free numbers can come with area codes such as 800 or 888.\nThey are managed using the `PhoneNumbersClient`\n\nThe `direct routing` feature enables connecting your existing telephony infrastructure to ACS.\nThe configuration is managed using the `SipRoutingClient`, which provides methods for setting up SIP trunks and voice routing rules, in order to properly handle calls for your telephony subnet.\n\n### Authenticate the client\n\nClients can be authenticated using connection string acquired from an Azure Communication Resources in the [Azure Portal][azure_portal].\n\n```C# Snippet:CreatePhoneNumbersClient\n// Get a connection string to our Azure Communication resource.\nvar connectionString = \"<connection_string>\";\nvar client = new PhoneNumbersClient(connectionString);\n```\n\n```C# Snippet:CreateSipRoutingClient\n// Get a connection string to Azure Communication resource.\nvar connectionString = \"<connection_string>\";\nvar client = new SipRoutingClient(connectionString);\n```\n\nClients also have the option to authenticate with Azure Active Directory Authentication. For more on this topic, see [Azure Identity][azure_identity].\n\n```C# Snippet:CreatePhoneNumbersClientWithTokenCredential\n// Get an endpoint to our Azure Communication resource.\nvar endpoint = new Uri(\"<endpoint_url>\");\nTokenCredential tokenCredential = new DefaultAzureCredential();\nclient = new PhoneNumbersClient(endpoint, tokenCredential);\n```\n\n```C# Snippet:CreateSipRoutingClientWithTokenCredential\n// Get an endpoint to our Azure Communication resource.\nvar endpoint = new Uri(\"<endpoint_url>\");\nTokenCredential tokenCredential = new DefaultAzureCredential();\nclient = new SipRoutingClient(endpoint, tokenCredential);\n```\n\n### Phone numbers client\n\n#### Phone number types overview\nPhone numbers come in two types: Geographic and Toll-Free. Geographic phone plans are phone plans associated with a location, whose phone numbers' area codes are associated with the area code of a geographic location. Toll-Free phone plans are phone plans not associated location. For example, in the US, toll-free numbers can come with area codes such as 800 or 888.\n\nAll geographic phone plans within the same country are grouped into a phone plan group with a Geographic phone number type. All Toll-Free phone plans within the same country are grouped into a phone plan group.\n\n#### Searching, purchasing and releasing phone numbers\n\nPhone numbers can be searched through the search creation API by providing an area code, quantity of phone numbers, application type, phone number type and capabilities. The provided quantity of phone numbers will be reserved for ten minutes and can be purchased within this time. If the search is not purchased, the phone numbers will become available to others after ten minutes. If the search is purchased, then the phone numbers are acquired for the Azure resources.\n\nPhone numbers can also be released using the release API.\n\n### SIP routing client\n\nDirect routing feature allows connecting customer-provided telephony infrastructure to Azure Communication Resources. In order to setup routing configuration properly, customer needs to supply the SIP trunk configuration and SIP routing rules for calls. SIP routing client provides the necessary interface for setting this configuration.\n\nWhen a call is made, the system tries to match the destination number with regex number patterns of defined routes. The first route to match the number will be selected. The order of regex matching is the same as the order of routes in configuration, therefore the order of routes matters.\nOnce a route is matched, the call is routed to the first trunk in the route's trunks list. If the trunk is not available, next trunk in the list is selected.\n\n### Thread safety\nWe guarantee that all client instance methods are thread-safe and independent of each other ([guideline](https://azure.github.io/azure-sdk/dotnet_introduction.html#dotnet-service-methods-thread-safety)). This ensures that the recommendation of reusing client instances is always safe, even across threads.\n\n### Additional concepts\n<!-- CLIENT COMMON BAR -->\n[Client options](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#configuring-service-clients-using-clientoptions) |\n[Accessing the response](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#accessing-http-response-details-using-responset) |\n[Long-running operations](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#consuming-long-running-operations-using-operationt) |\n[Handling failures](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#reporting-errors-requestfailedexception) |\n[Diagnostics](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md) |\n[Mocking](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#mocking) |\n[Client lifetime](https://devblogs.microsoft.com/azure-sdk/lifetime-management-and-thread-safety-guarantees-of-azure-sdk-net-clients/)\n<!-- CLIENT COMMON BAR -->\n\n## Examples\n\n### PhoneNumbersClient\n\n#### Creating a PhoneNumbersClient\n\nTo create a new `PhoneNumbersClient` you need a connection string to the Azure Communication Services resource that you can get from the Azure Portal once you have created the resource.\n\nYou can set `connectionString` based on an environment variable, a configuration setting, or any way that works for your application.\n\n```C# Snippet:CreatePhoneNumbersClient\n// Get a connection string to our Azure Communication resource.\nvar connectionString = \"<connection_string>\";\nvar client = new PhoneNumbersClient(connectionString);\n```\n\n#### Search phone numbers\n\nPhone numbers need to be searched before they can be purchased. Search is a long running operation that can be started by `StartSearchAvailablePhoneNumbers` function that returns an `SearchAvailablePhoneNumbersOperation` object. `SearchAvailablePhoneNumbersOperation` can be used to update status of the operation and to check for completeness.\n\n```C# Snippet:SearchPhoneNumbersAsync\nvar capabilities = new PhoneNumberCapabilities(calling: PhoneNumberCapabilityType.None, sms: PhoneNumberCapabilityType.Outbound);\n\nvar searchOperation = await client.StartSearchAvailablePhoneNumbersAsync(countryCode, PhoneNumberType.TollFree, PhoneNumberAssignmentType.Application, capabilities);\nawait searchOperation.WaitForCompletionAsync();\n```\n\n#### Purchase phone numbers\n\nPhone numbers can be acquired through purchasing a search.\n\n```C# Snippet:StartPurchaseSearchAsync\nvar purchaseOperation = await client.StartPurchasePhoneNumbersAsync(searchOperation.Value.SearchId);\nawait purchaseOperation.WaitForCompletionResponseAsync();\n```\n\n#### Listing purchased phone numbers\n\nYou can list all phone numbers that have been purchased for your resource.\n\n```C# Snippet:GetPurchasedPhoneNumbersAsync\nvar purchasedPhoneNumbers = client.GetPurchasedPhoneNumbersAsync();\n\nawait foreach (var phoneNumber in purchasedPhoneNumbers)\n{\n    Console.WriteLine($\"Phone number: {phoneNumber.PhoneNumber}, monthly cost: {phoneNumber.Cost}\");\n}\n```\n\n#### Release phone numbers\n\nIf you no longer need a phone number you can release it.\n\n```C# Snippet:ReleasePhoneNumbersAsync\nvar purchasedPhoneNumber = \"<purchased_phone_number>\";\nvar releaseOperation = await client.StartReleasePhoneNumberAsync(purchasedPhoneNumber);\nawait releaseOperation.WaitForCompletionResponseAsync();\nawait WaitForCompletionResponseAsync(releaseOperation);\n```\n\n### SipRoutingClient\n\n#### Retrieve SIP trunks and routes\n\nGet the list of currently configured trunks or routes.\n\n```C# Snippet:RetrieveListAsync\nvar trunksResponse = await client.GetTrunksAsync();\nvar routesResponse = await client.GetRoutesAsync();\n```\n\n#### Replace SIP trunks and routes\n\nReplace the list of currently configured trunks or routes.\n\n```C# Snippet:ReplaceAsync\n// The service will not allow trunks that are used in any of the routes to be deleted, therefore first set the routes as empty list, and then update the routes.\nvar newTrunks = \"<new_trunks_list>\";\nvar newRoutes = \"<new_routes_list>\";\nawait client.SetRoutesAsync(new List<SipTrunkRoute>());\nawait client.SetTrunksAsync(newTrunks);\nawait client.SetRoutesAsync(newRoutes);\n```\n\n#### Manage single trunk\n\nSIP trunks can be managed separately by using the `SipRoutingClient` to retrieve, set or delete a single trunk.\n\n#### Retrieve single trunk\n\n```C# Snippet:RetrieveTrunkAsync\n// Get trunk object, based on it's FQDN.\nvar fqdnToRetrieve = \"<fqdn>\";\nvar trunkResponse = await client.GetTrunkAsync(fqdnToRetrieve);\n```\n#### Set single trunk\n\n```C# Snippet:SetTrunkAsync\n// Set function will either modify existing item or add new item to the collection.\n// The trunk is matched based on it's FQDN.\nvar trunkToSet = \"<trunk_to_set>\";\nawait client.SetTrunkAsync(trunkToSet);\n```\n\n#### Delete single trunk\n\n```C# Snippet:DeleteTrunkAsync\n// Deletes trunk with supplied FQDN.\nvar fqdnToDelete = \"<fqdn>\";\nawait client.DeleteTrunkAsync(fqdnToDelete);\n```\n\n## Troubleshooting\n\n## Next steps\n\n[Read more about managing phone numbers][phone_numbers]\n\n[Read more about direct routing][direct_routing]\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [cla.microsoft.com][cla].\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n\n[azure_sub]: https://azure.microsoft.com/free/dotnet/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://docs.microsoft.com/dotnet/api/azure.identity?view=azure-dotnet\n[source]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/communication/Azure.Communication.PhoneNumbers/src\n[source_samples]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/communication/Azure.Communication.PhoneNumbers/samples\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n<!--[package]: https://www.nuget.org/packages/Azure.Communication.PhoneNumbers-->\n[phone_numbers]: https://docs.microsoft.com/azure/communication-services/quickstarts/telephony/get-phone-number?pivots=platform-azp\n[product_docs]: https://docs.microsoft.com/azure/communication-services/overview\n[nuget]: https://www.nuget.org/\n[communication_resource_docs]: https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource?tabs=windows&pivots=platform-azp\n[communication_resource_create_portal]: https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource?tabs=windows&pivots=platform-azp\n[communication_resource_create_power_shell]: https://docs.microsoft.com/powershell/module/az.communication/new-azcommunicationservice\n[communication_resource_create_net]: https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource?tabs=windows&pivots=platform-net\n[direct_routing]: https://docs.microsoft.com/azure/communication-services/concepts/telephony/direct-routing-provisioning\n",
        "repo_name": "communication/Azure.Communication.PhoneNumbers",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/communication/Azure.Communication.PhoneNumbers",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Communication Rooms client library for .NET\n\nThis package contains a C# SDK for the Rooms Service of Azure Communication Services.\nAzure Communication Services (ACS) Rooms is a set of APIs, used by Contoso server applications to create a server-managed conversation space with fixed set of lifetime and participants, pre-defining rules from server-tier both who and when can communicate (like scheduled meeting creation).\n\nWith the general availability release of ACS Rooms, Contoso will be able to:\n\n    - Create a meeting space with known time coordinates (validFrom/validUntil)\n    - Join voice/video calls within that meeting space using the ACS web calling SDK or native mobile calling SDKs\n    - Add participants to a room\n    - Assign pre-defined roles to room participants\n\nThe main scenarios where Rooms can best be used:\n\n    - Virtual Visits (e.g., telemedicine, remote financial advisor, virtual classroom, etc...)\n    - Virtual Events (e.g., live event, company all-hands, live concert, etc...)\n\n[Source code][source] <!--| [Package (NuGet)][package]--> | [Product documentation][product_docs] | [Samples][source_samples]\n## Getting started\n\n### Install the package\nInstall the Azure Communication Rooms client library for .NET with [NuGet][nuget]:\n\n```PowerShell\ndotnet add package Azure.Communication.Rooms\n``` \n\n### Prerequisites\nYou need an [Azure subscription][azure_sub] and a [Communication Service Resource][communication_resource_docs] to use this package.\n\nTo create a new Communication Service, you can use the [Azure Portal][communication_resource_create_portal], the [Azure PowerShell][communication_resource_create_power_shell], or the [.NET management client library][communication_resource_create_net].\n\n### Key concepts\n`RoomsClient` provides the functionality to create room, update room, get room, list rooms, delete room, add participants, update participants, remove participants, and list participants.\n\n### Using statements\n```C# Snippet:Azure_Communication_Rooms_Tests_UsingStatements\nusing Azure.Communication.Rooms\n```\n\n### Authenticate the client\nRooms clients can be authenticated using the connection string acquired from an Azure Communication Resource in the [Azure Portal][azure_portal].\n\n```C# Snippet:Azure_Communication_Rooms_Tests_Samples_CreateRoomsClient\nvar connectionString = Environment.GetEnvironmentVariable(\"connection_string\") // Find your Communication Services resource in the Azure portal\nRoomsClient client = new RoomsClient(connectionString);\n```\n\n## Examples\n### Create a room\nTo create a room, call the `CreateRoom` or `CreateRoomAsync` function from `RoomsClient`.\nThe `validFrom`, `validUntil`, and `participants` arguments are all optional. If `validFrom` and `validUntil` are not provided, then the default for `validFrom` is current date time and the default for `validUntil` is `validFrom + 180 days`.\nWhen defining `RoomParticipant`, if role is not specified, then it will be `Attendee` by default.\nThe returned value is `Response<CommunicationRoom>` which contains created room details as well as the status and associated error codes in case of a failure.\n\n```C# Snippet:Azure_Communication_Rooms_Tests_Samples_CreateRoomAsync\n// Create communication users using the CommunicationIdentityClient\nResponse<CommunicationUserIdentifier> communicationUser1 = await communicationIdentityClient.CreateUserAsync();\nResponse<CommunicationUserIdentifier> communicationUser2 = await communicationIdentityClient.CreateUserAsync();\n\nDateTimeOffset validFrom = DateTimeOffset.UtcNow;\nDateTimeOffset validUntil = validFrom.AddDays(1);\nRoomParticipant participant1 = new RoomParticipant(communicationUser1.Value); // If role is not provided, then it is set as Attendee by default\nRoomParticipant participant2 = new RoomParticipant(communicationUser2.Value) { Role = ParticipantRole.Presenter};\nList<RoomParticipant> invitedParticipants = new List<RoomParticipant>\n{\n    participant1,\n    participant2\n};\n\nResponse<CommunicationRoom> createRoomResponse = await roomsClient.CreateRoomAsync(validFrom, validUntil, invitedParticipants);\nCommunicationRoom createCommunicationRoom = createRoomResponse.Value;\n```\n\n### Update a room\nThe `validFrom` and `validUntil` properties of a created room can be updated by calling the `UpdateRoom` or `UpdateRoomAsync` function from `RoomsClient`.\n\n```C# Snippet:Azure_Communication_Rooms_Tests_Samples_UpdateRoomAsync\nvalidUntil = validFrom.AddDays(30);\nResponse<CommunicationRoom> updateRoomResponse = await roomsClient.UpdateRoomAsync(createdRoomId, validFrom, validUntil);\nCommunicationRoom updateCommunicationRoom = updateRoomResponse.Value;\n```\n\n### Get a created room\nA created room can be retrieved by calling the `GetRoom` or `GetRoomAsync` function from `RoomsClient` and passing in the associated `roomId`.\n\n```C# Snippet:Azure_Communication_Rooms_Tests_Samples_GetRoomAsync\nResponse<CommunicationRoom> getRoomResponse = await roomsClient.GetRoomAsync(createdRoomId);\nCommunicationRoom getCommunicationRoom = getRoomResponse.Value;\n```\n\n### Get all rooms\nAll valid rooms created under an ACS resource can be retrieved by calling the `GetRooms` or `GetRoomsAsync` function from `RoomsClient`.\n```C# Snippet:Azure_Communication_Rooms_Tests_Samples_GetRoomsAsync\nAsyncPageable<CommunicationRoom> allRooms = roomsClient.GetRoomsAsync();\nawait foreach (CommunicationRoom room in allRooms)\n{\n    Console.WriteLine($\"Room with id {room.Id} is valid from {room.ValidFrom} to {room.ValidUntil}.\");\n}\n```\n\n### Delete room\nTo delete a room, call the `DeleteRoom` or `DeleteRoomAsync` function from RoomsClient.\n```C# Snippet:Azure_Communication_Rooms_Tests_Samples_DeleteRoomAsync\nResponse deleteRoomResponse = await roomsClient.DeleteRoomAsync(createdRoomId);\n```\n\n### Add Or update participants in a room\nIn order to add new participants or update existing participants, call the `AddOrUpdateParticipants` or `AddOrUpdateParticipantsAsync` function from RoomsClient.\n\n```C# Snippet:Azure_Communication_Rooms_Tests_Samples_AddOrUpdateParticipants\nResponse<CommunicationUserIdentifier> communicationUser3 = await communicationIdentityClient.CreateUserAsync();\nRoomParticipant newParticipant = new RoomParticipant(communicationUser3.Value) { Role = ParticipantRole.Consumer };\n\n// Previous snippet for create room added participant2 as Presenter\nparticipant2 = new RoomParticipant(communicationUser2) { Role = ParticipantRole.Attendee };\n\nList<RoomParticipant> participantsToAddOrUpdate = new List<RoomParticipant>\n{\n    participant2,   // participant2 updated from Presenter to Attendee\n    newParticipant, // newParticipant added to the room\n};\n\nResponse addOrUpdateParticipantResponse = await roomsClient.AddOrUpdateParticipantsAsync(createdRoomId, participantsToAddOrUpdate);\n```\n\n### Remove participants in a room\nTo remove participants from a room, call the `RemoveParticipants` or `RemoveParticipantsAsync` function from RoomsClient.\n\n```C# Snippet:Azure_Communication_Rooms_Tests_Samples_RemoveParticipants\nList<CommunicationIdentifier> participantsToRemove = new List<CommunicationIdentifier>\n{\n   communicationUser1,\n   communicationUser2\n};\nResponse removeParticipantResponse = await roomsClient.RemoveParticipantsAsync(createdRoomId, participantsToRemove);\n```\n\n\n### Get participants in a room\nTo get all the participants from a room, call the `GetParticipants` or `GetParticipantsAsync` function from RoomsClient.\nThe returned value is `Pageable<RoomParticipant>` or `AsyncPageable<RoomParticipant>` which contains the paginated list of participants.\n```C# Snippet:Azure_Communication_Rooms_Tests_Samples_GetParticipants\nAsyncPageable<RoomParticipant> allParticipants = roomsClient.GetParticipantsAsync(createdRoomId);\nawait foreach (RoomParticipant participant in allParticipants)\n{\n    Console.WriteLine($\" Participant with id {participant.CommunicationIdentifier.RawId} is a {participant.Role}\");\n}\n```\n\n## Troubleshooting\n### Service Responses\nA `RequestFailedException` is thrown as a service response for any unsuccessful requests. The exception contains information about what response code was returned from the service.\n```C# Snippet:Azure_Communication_RoomsClient_Tests_Troubleshooting\ntry\n{\n    CommunicationIdentityClient communicationIdentityClient = CreateInstrumentedCommunicationIdentityClient();\n    Response<CommunicationUserIdentifier> communicationUser1 = await communicationIdentityClient.CreateUserAsync();\n    Response<CommunicationUserIdentifier> communicationUser2 = await communicationIdentityClient.CreateUserAsync();\n    DateTimeOffset validFrom = DateTimeOffset.UtcNow;\n    DateTimeOffset validUntil = validFrom.AddDays(1);\n    List<RoomParticipant> createRoomParticipants = new List<RoomParticipant>();\n    RoomParticipant participant1 = new RoomParticipant(communicationUser1.Value) { Role = ParticipantRole.Presenter };\n    RoomParticipant participant2 = new RoomParticipant(communicationUser2.Value) { Role = ParticipantRole.Attendee };\n    Response<CommunicationRoom> createRoomResponse = await roomsClient.CreateRoomAsync(validFrom, validUntil, createRoomParticipants);\n    CommunicationRoom createRoomResult = createRoomResponse.Value;\n}\ncatch (RequestFailedException ex)\n{\n    Console.WriteLine(ex.Message);\n}\n```\n\n## Next steps\n- [Read more about Rooms in Azure Communication Services][nextsteps]\n\n## Contributing\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [cla.microsoft.com][cla].\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n[azure_sub]: https://azure.microsoft.com/free/dotnet/\n[azure_portal]: https://portal.azure.com\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n[communication_resource_docs]: https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource?tabs=windows&pivots=platform-azp\n[communication_resource_create_portal]:  https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource?tabs=windows&pivots=platform-azp\n[communication_resource_create_power_shell]: https://docs.microsoft.com/powershell/module/az.communication/new-azcommunicationservice\n[communication_resource_create_net]: https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource?tabs=windows&pivots=platform-net\n[nextsteps]: https://learn.microsoft.com/azure/communication-services/quickstarts/rooms/get-started-rooms?tabs=windows&pivots=programming-language-csharp\n[nuget]: https://www.nuget.org/\n[product_docs]: https://docs.microsoft.com/azure/communication-services/overview\n[source]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/communication/Azure.Communication.Rooms/src\n[source_samples]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/communication/Azure.Communication.Rooms/tests/Samples\n\n<!-- TODO -->\nUpdate the sample code links once the sdk is published\n",
        "repo_name": "communication/Azure.Communication.Rooms",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/communication/Azure.Communication.Rooms",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Communication Short Code client library for .NET\n\nThe phone numbers library provides capabilities for short codes administration.\n\n## Getting started\n\n### Install the package\nInstall the Azure Communication Server Calling client library for .NET with [NuGet][nuget]:\n\n```PowerShell\ndotnet add package Azure.Communication.ShortCodes --prerelease\n```\n\n### Prerequisites\nYou need an [Azure subscription][azure_sub] and a [Communication Service Resource][communication_resource_docs] to use this package.\n\nTo create a new Communication Service, you can use the [Azure Portal][communication_resource_create_portal], the [Azure PowerShell][communication_resource_create_power_shell], or the [.NET management client library][communication_resource_create_net].\n\n### Authenticate the client\nSMS clients can be authenticated using the connection string acquired from an Azure Communication Resource in the [Azure Portal][azure_portal].\n\n## Key concepts\nThe short codes package exposes the `ShortCodesClient` which provides methods to manage short codes.\n\n### Short Code types\nShort Codes come in two types; shortCode and alphaId. ShortCode = 5 digit number | alphaId = alphanumeric 5 digit combination.\n\n### Short Codes\nShort codes are a type of number that are available to enterprise customers. They come in the form of a 5 or 6 digit number and can be used to send sms similar to how a toll-free or geographic number is used. In order to acquire a short code it is necessary to submit an application, or program brief.\n\n### Program Briefs\nA program brief tracks the application for a short code and contains all the information necessary to process the application as well as information on the status of the application and any updates that may be needed. It can take 8-12 weeks for a program brief to be approved and a short code to be issued once the program brief is submitted.\n\n```C# Snippet:CreateShortCodesClient\n// Get a connection string to our Azure Communication resource.\nvar connectionString = \"<connection_string>\";\nvar client = new ShortCodesClient(connectionString);\n```\n\n## Examples\n### Getting the list of short codes for the current resource\n\n```C# Snippet:GetShortCodes\nvar pageable = client.GetShortCodesAsync();\nawait foreach (var shortCode in pageable)\n{\n    Console.WriteLine($\"Short Code Number: {shortCode.Number}\");\n}\n```\n\n## Troubleshooting\nA `RequestFailedException` is thrown as a service response for any unsuccessful requests. The exception contains information about what response code was returned from the service.\n\n<!-- LINKS -->\n[azure_sub]: https://azure.microsoft.com/free/\n[communication_resource_docs]: https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource?tabs=windows&pivots=platform-azp\n[communication_resource_create_portal]:  https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource?tabs=windows&pivots=platform-azp\n[communication_resource_create_power_shell]: https://docs.microsoft.com/powershell/module/az.communication/new-azcommunicationservice\n[communication_resource_create_net]: https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource?tabs=windows&pivots=platform-net\n[nuget]: https://www.nuget.org/\n\n## Next steps\n[Read more about Short Codes in Azure Communication Services][apply_for_short_code].\n\n## Contributing\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [cla.microsoft.com][cla].\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n[nuget]: https://www.nuget.org/\n[apply_for_short_code]: https://docs.microsoft.com/azure/communication-services/quickstarts/sms/apply-for-short-code\n",
        "repo_name": "communication/Azure.Communication.ShortCodes",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/communication/Azure.Communication.ShortCodes",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Communication SMS client library for .NET\n\nThis package contains a C# SDK for Azure Communication Services for SMS and Telephony.\n\n[Source code][source] | [Package (NuGet)][package] | [Product documentation][product_docs]\n## Getting started\n\n### Install the package\nInstall the Azure Communication SMS client library for .NET with [NuGet][nuget]:\n\n```dotnetcli\ndotnet add package Azure.Communication.Sms\n``` \n\n### Prerequisites\nYou need an [Azure subscription][azure_sub] and a [Communication Service Resource][communication_resource_docs] to use this package.\n\nTo create a new Communication Service, you can use the [Azure Portal][communication_resource_create_portal], the [Azure PowerShell][communication_resource_create_power_shell], or the [.NET management client library][communication_resource_create_net].\n\n### Key concepts\n`SmsClient` provides the functionality to send messages between phone numbers.\n\n### Using statements\n```C# Snippet:Azure_Communication_Sms_Tests_UsingStatements\nusing System;\nusing Azure.Communication.Sms;\n```\n\n### Authenticate the client\nSMS clients can be authenticated using the connection string acquired from an Azure Communication Resource in the [Azure Portal][azure_portal].\n\n```C# Snippet:Azure_Communication_Sms_Tests_Samples_CreateSmsClient\nvar connectionString = \"<connection_string>\"; // Find your Communication Services resource in the Azure portal\nSmsClient client = new SmsClient(connectionString);\n```\n\nAlternatively, SMS clients can also be authenticated using a valid token credential. With this option,\n`AZURE_CLIENT_SECRET`, `AZURE_CLIENT_ID` and `AZURE_TENANT_ID` environment variables need to be set up for authentication. \n\n```C# Snippet:Azure_Communication_Sms_Tests_Samples_CreateSmsClientWithToken\nstring endpoint = \"<endpoint_url>\";\nTokenCredential tokenCredential = new DefaultAzureCredential();\nSmsClient client = new SmsClient(new Uri(endpoint), tokenCredential);\n```\n\n## Examples\n### Send a 1:1 SMS Message\nTo send a SMS message, call the `Send` or `SendAsync` function from the `SmsClient`.\n```C# Snippet:Azure_Communication_Sms_Tests_SendAsync\nSmsSendResult sendResult = await smsClient.SendAsync(\n    from: \"<from-phone-number>\", // Your E.164 formatted from phone number used to send SMS\n    to: \"<to-phone-number>\", // E.164 formatted recipient phone number\n    message: \"Hi\");\nConsole.WriteLine($\"Sms id: {sendResult.MessageId}\");\n```\n### Send a 1:N SMS Message\nTo send a SMS message to a list of recipients, call the `Send` or `SendAsync` function from the `SmsClient` with a list of recipient's phone numbers.\nYou may also add pass in an options object to specify whether the delivery report should be enabled and set custom tags.\n```C# Snippet:Azure_Communication_SmsClient_Send_GroupSmsWithOptionsAsync\nvar response = await smsClient.SendAsync(\n    from: \"<from-phone-number>\", // Your E.164 formatted from phone number used to send SMS\n    to: new string[] { \"<to-phone-number-1>\", \"<to-phone-number-2>\" }, // E.164 formatted recipient phone numbers\n    message: \"Weekly Promotion!\",\n    options: new SmsSendOptions(enableDeliveryReport: true) // OPTIONAL\n    {\n        Tag = \"marketing\", // custom tags\n    });\nforeach (SmsSendResult result in response.Value)\n{\n    Console.WriteLine($\"Sms id: {result.MessageId}\");\n    Console.WriteLine($\"Send Result Successful: {result.Successful}\");\n}\n```\n## Troubleshooting\nSMS operations will throw an exception if the request to the server fails.\nExceptions will not be thrown if the error is caused by an individual message, only if something fails with the overall request.\nPlease use the `Successful` flag to validate each individual result to verify if the message was sent.\n\n```C# Snippet:Azure_Communication_Sms_Tests_Troubleshooting\ntry\n{\n    var response = await smsClient.SendAsync(\n        from: \"<from-phone-number>\" // Your E.164 formatted phone number used to send SMS\n        to: new string [] {\"<to-phone-number-1>\", \"<to-phone-number-2>\"}, // E.164 formatted recipient phone number\n        message: \"Weekly Promotion!\",\n        options: new SmsSendOptions(enableDeliveryReport: true) // OPTIONAL\n        {\n            Tag = \"marketing\", // custom tags\n        });\n    foreach (SmsSendResult result in response.Value)\n    {\n        if (result.Successful)\n        {\n            Console.WriteLine($\"Successfully sent this message: {result.MessageId} to {result.To}.\");\n        }\n        else\n        {\n            Console.WriteLine($\"Something went wrong when trying to send this message {result.MessageId} to {result.To}.\");\n            Console.WriteLine($\"Status code {result.HttpStatusCode} and error message {result.ErrorMessage}.\");\n        }\n    }\n}\ncatch (RequestFailedException ex)\n{\n    Console.WriteLine(ex.Message);\n}\n```\n\n## Next steps\n- [Read more about SMS in Azure Communication Services][nextsteps]\n- For a basic guide on how to configure Delivery Reporting for your SMS messages please refer to the [Handle SMS Events quickstart][handle_sms_events].\n\n## Contributing\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [cla.microsoft.com][cla].\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n[azure_sub]: https://azure.microsoft.com/free/dotnet/\n[azure_portal]: https://portal.azure.com\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n[communication_resource_docs]: https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource?tabs=windows&pivots=platform-azp\n[communication_resource_create_portal]:  https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource?tabs=windows&pivots=platform-azp\n[communication_resource_create_power_shell]: https://docs.microsoft.com/powershell/module/az.communication/new-azcommunicationservice\n[communication_resource_create_net]: https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource?tabs=windows&pivots=platform-net\n[handle_sms_events]: https://docs.microsoft.com/azure/communication-services/quickstarts/telephony-sms/handle-sms-events\n[package]: https://www.nuget.org/packages/Azure.Communication.Sms\n[product_docs]: https://docs.microsoft.com/azure/communication-services/overview\n[nextsteps]:https://docs.microsoft.com/azure/communication-services/quickstarts/telephony-sms/send?pivots=programming-language-csharp\n[nuget]: https://www.nuget.org/\n[source]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/communication/Azure.Communication.Sms/src\n",
        "repo_name": "communication/Azure.Communication.Sms",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/communication/Azure.Communication.Sms",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Communication Services management client library for .NET\n\nMicrosoft Azure Communication Services are cloud-based services help you integrate communication into your applications. You can add communication to your applications without being an expert in underlying technologies such as media encoding or telephony. \nMicrosoft Azure Communication Services supports various communication formats:\n\n- Voice and Video Calling\n- Rich Text Chat\n- SMS\n- Email\n\nThis library supports managing Microsoft Azure Communication Services resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started\n\n### Install the package\n\nInstall the Microsoft Azure Communication management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.Communication\n``` \n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "communication/Azure.ResourceManager.Communication",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/communication/Azure.ResourceManager.Communication",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Compute management client library for .NET\n\nMicrosoft Azure Compute provides the infrastructure to host apps. Tap in to compute capacity in the cloud and scale on demand. Containerize your applications, deploy Windows and Linux virtual machines (VMs), and take advantage of flexible options for migrating VMs to Azure. With comprehensive support for hybrid environments, deploy how and where you want to. Azure compute also includes a full-fledged identity solution, so you gain managed end-point protection, and Active Directory support that helps secure access to on-premises and cloud apps. Deploy great apps and save with pay-as-you-go pricing, and the Azure Hybrid Benefit.\n\nThis library supports managing Microsoft Azure Compute resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Compute management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.Compute\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nThe default option to create an authenticated client is to use `DefaultAzureCredential`. Since all management APIs go through the same endpoint, in order to interact with resources, only one top-level `ArmClient` has to be created.\n\nTo authenticate to Azure and create an `ArmClient`, do the following code:\n\n```C# Snippet:Readme_AuthClient_Namespaces\nusing Azure.Core;\nusing Azure.Identity;\nusing Azure.ResourceManager;\n```\n```C# Snippet:Readme_AuthClient\nArmClient armClient = new ArmClient(new DefaultAzureCredential());\n```\n\nMore documentation for the `Azure.Identity.DefaultAzureCredential` class can be found in [this document](https://docs.microsoft.com/dotnet/api/azure.identity.defaultazurecredential).\n\n## Key concepts\n\nKey concepts of the Azure .NET SDK can be found [here](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/README.md#key-concepts)\n\n## Examples\n\n### Create an availability set\n\nBefore creating an availability set, we need to have a resource group.\n\n```C# Snippet:Readme_GetResourceGroupCollection\nArmClient armClient = new ArmClient(new DefaultAzureCredential());\nSubscriptionResource subscription = await armClient.GetDefaultSubscriptionAsync();\nResourceGroupCollection rgCollection = subscription.GetResourceGroups();\n// With the collection, we can create a new resource group with an specific name\nstring rgName = \"myRgName\";\nAzureLocation location = AzureLocation.WestUS2;\nArmOperation<ResourceGroupResource> lro = await rgCollection.CreateOrUpdateAsync(WaitUntil.Completed, rgName, new ResourceGroupData(location));\nResourceGroupResource resourceGroup = lro.Value;\n```\n\n```C# Snippet:Managing_Availability_Set_CreateAnAvailabilitySet\nAvailabilitySetCollection availabilitySetCollection = resourceGroup.GetAvailabilitySets();\nstring availabilitySetName = \"myAvailabilitySet\";\nAvailabilitySetData input = new AvailabilitySetData(location);\nArmOperation<AvailabilitySetResource> lro = await availabilitySetCollection.CreateOrUpdateAsync(WaitUntil.Completed, availabilitySetName, input);\nAvailabilitySetResource availabilitySet = lro.Value;\n```\n\n### Get all availability set in a resource group\n\n```C# Snippet:Managing_Availability_Set_GetAllAvailabilitySets\n// First, initialize the ArmClient and get the default subscription\nArmClient armClient = new ArmClient(new DefaultAzureCredential());\n// Now we get a ResourceGroupResource collection for that subscription\nSubscriptionResource subscription = await armClient.GetDefaultSubscriptionAsync();\nResourceGroupCollection rgCollection = subscription.GetResourceGroups();\n\nstring rgName = \"myRgName\";\nResourceGroupResource resourceGroup = await rgCollection.GetAsync(rgName);\n// First, we get the availability set collection from the resource group\nAvailabilitySetCollection availabilitySetCollection = resourceGroup.GetAvailabilitySets();\n// With GetAllAsync(), we can get a list of the availability sets in the collection\nAsyncPageable<AvailabilitySetResource> response = availabilitySetCollection.GetAllAsync();\nawait foreach (AvailabilitySetResource availabilitySet in response)\n{\n    Console.WriteLine(availabilitySet.Data.Name);\n}\n```\n\n### Update an availability set\n\n```C# Snippet:Managing_Availability_Set_UpdateAnAvailabilitySet\n// First, initialize the ArmClient and get the default subscription\nArmClient armClient = new ArmClient(new DefaultAzureCredential());\n// Now we get a ResourceGroupResource collection for that subscription\nSubscriptionResource subscription = await armClient.GetDefaultSubscriptionAsync();\nResourceGroupCollection rgCollection = subscription.GetResourceGroups();\n\n// With the collection, we can create a new resource group with an specific name\nstring rgName = \"myRgName\";\nResourceGroupResource resourceGroup = await rgCollection.GetAsync(rgName);\nAvailabilitySetCollection availabilitySetCollection = resourceGroup.GetAvailabilitySets();\nstring availabilitySetName = \"myAvailabilitySet\";\nAvailabilitySetResource availabilitySet = await availabilitySetCollection.GetAsync(availabilitySetName);\n// availabilitySet is an AvailabilitySetResource instance created above\nAvailabilitySetPatch update = new AvailabilitySetPatch()\n{\n    PlatformFaultDomainCount = 3\n};\nAvailabilitySetResource updatedAvailabilitySet = await availabilitySet.UpdateAsync(update);\n```\n\n### Delete an availability set\n\n```C# Snippet:Managing_Availability_Set_DeleteAnAvailabilitySet\n// First, initialize the ArmClient and get the default subscription\nArmClient armClient = new ArmClient(new DefaultAzureCredential());\n// Now we get a ResourceGroupResource collection for that subscription\nSubscriptionResource subscription = await armClient.GetDefaultSubscriptionAsync();\nResourceGroupCollection rgCollection = subscription.GetResourceGroups();\n\n// With the collection, we can create a new resource group with an specific name\nstring rgName = \"myRgName\";\nResourceGroupResource resourceGroup = await rgCollection.GetAsync(rgName);\nAvailabilitySetCollection availabilitySetCollection = resourceGroup.GetAvailabilitySets();\nstring availabilitySetName = \"myAvailabilitySet\";\nAvailabilitySetResource availabilitySet = await availabilitySetCollection.GetAsync(availabilitySetName);\n// delete the availability set\nawait availabilitySet.DeleteAsync(WaitUntil.Completed);\n```\n\n### Check if availability set exists\n\nIf you just want to verify if the availability set exists, you can use the function `CheckIfExists`.\n\n```C# Snippet:Managing_Availability_Set_CheckIfExistsForAvailabilitySet\nArmClient armClient = new ArmClient(new DefaultAzureCredential());\nSubscriptionResource subscription = await armClient.GetDefaultSubscriptionAsync();\nResourceGroupCollection rgCollection = subscription.GetResourceGroups();\n\nstring rgName = \"myRgName\";\nResourceGroupResource resourceGroup = await rgCollection.GetAsync(rgName);\nstring availabilitySetName = \"myAvailabilitySet\";\nbool exists = await resourceGroup.GetAvailabilitySets().ExistsAsync(availabilitySetName);\n\nif (exists)\n{\n    Console.WriteLine($\"Availability Set {availabilitySetName} exists.\");\n}\nelse\n{\n    Console.WriteLine($\"Availability Set {availabilitySetName} does not exist.\");\n}\n```\n\n### Add a tag to an availability set\n\n```C# Snippet:Managing_Availability_Set_AddTagAvailabilitySet\n// First, initialize the ArmClient and get the default subscription\nArmClient armClient = new ArmClient(new DefaultAzureCredential());\n// Now we get a ResourceGroupResource collection for that subscription\nSubscriptionResource subscription = await armClient.GetDefaultSubscriptionAsync();\nResourceGroupCollection rgCollection = subscription.GetResourceGroups();\n\nstring rgName = \"myRgName\";\nResourceGroupResource resourceGroup = await rgCollection.GetAsync(rgName);\nAvailabilitySetCollection availabilitySetCollection = resourceGroup.GetAvailabilitySets();\nstring availabilitySetName = \"myAvailabilitySet\";\nAvailabilitySetResource availabilitySet = await availabilitySetCollection.GetAsync(availabilitySetName);\n// add a tag on this availabilitySet\nAvailabilitySetResource updatedAvailabilitySet = await availabilitySet.AddTagAsync(\"key\", \"value\");\n```\n\nFor more detailed examples, take a look at [samples](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/compute/Azure.ResourceManager.Compute/samples) we have available.\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\n### More sample code\n\n- [Managing Disks](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/compute/Azure.ResourceManager.Compute/samples/Sample1_ManagingDisks.md)\n- [Managing Virtual Machines](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/compute/Azure.ResourceManager.Compute/samples/Sample2_ManagingVirtualMachines.md)\n\n### More Documentation\n\nFor more information on Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "compute/Azure.ResourceManager.Compute",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/compute/Azure.ResourceManager.Compute",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Confidential Ledger management client library for .NET\n\nMicrosoft Azure Confidential Ledger provides a managed and decentralized ledger for data entries backed by Blockchain. Maintain data integrity by preventing unauthorized or accidental modification with tamperproof storage. Protect your data at rest, in transit, and in use with hardware-backed secure enclaves used in Azure confidential computing.\n\nThis library supports managing Microsoft Azure Confidential Ledger resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Confidential Ledger management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.ConfidentialLedger\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "confidentialledger/Azure.ResourceManager.ConfidentialLedger",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/confidentialledger/Azure.ResourceManager.ConfidentialLedger",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure confidential ledger client library for .NET\n\nAzure confidential ledger provides a service for logging to an immutable, tamper-proof ledger. As part of the [Azure Confidential Computing][azure_confidential_computing]\nportfolio, Azure confidential ledger runs in SGX enclaves. It is built on Microsoft Research's [Confidential Consortium Framework][ccf].\n\n  [Source code][client_src] | [Package (NuGet)][client_nuget_package] <!--| [API reference documentation][api_reference] | [Samples][samples] -->\n\n## Getting started\n\nThis section should include everything a developer needs to do to install and create their first client connection *very quickly*.\n\n### Install the package\n\nInstall the Azure confidential ledger client library for .NET with [NuGet][client_nuget_package]:\n\n```dotnetcli\ndotnet add package Azure.Security.ConfidentialLedger\n```\n\n### Prerequisites\n\n* An [Azure subscription][azure_sub].\n* A running instance of Azure confidential ledger.\n* A registered user in the Azure confidential ledger with `Administrator` privileges.\n\n### Authenticate the client\n\n#### Using Azure Active Directory\n\nThis document demonstrates using [DefaultAzureCredential][default_cred_ref] to authenticate to the confidential ledger via Azure Active Directory. However, any of the credentials offered by the [Azure.Identity][azure_identity] will be accepted.  See the [Azure.Identity][azure_identity] documentation for more information about other credentials.\n\n#### Using a client certificate\n\nAs an alternative to Azure Active Directory, clients may choose to use a client certificate to authenticate via mutual TLS.\n\n### Create a client\n\n`DefaultAzureCredential` will automatically handle most Azure SDK client scenarios. To get started, set environment variables for the AAD identity registered with your confidential ledger.\n```bash\nexport AZURE_CLIENT_ID=\"generated app id\"\nexport AZURE_CLIENT_SECRET=\"random password\"\nexport AZURE_TENANT_ID=\"tenant id\"\n```\nThen, `DefaultAzureCredential` will be able to authenticate the `ConfidentialLedgerClient`.\n\nConstructing the client also requires your confidential ledger's URI, which you can obtain from the Azure Portal page for your confidential ledger in the `Ledger URI` field under the `Properties` section. When you have retrieved the `Ledger URI`, please use it to replace `\"https://my-ledger-url.confidential-ledger.azure.com\"` in the example below.\n\n```C# Snippet:CreateClient\nvar ledgerClient = new ConfidentialLedgerClient(new Uri(\"https://my-ledger-url.confidential-ledger.azure.com\"), new DefaultAzureCredential());\n```\n\n> Security Note: By default when a confidential ledger Client is created it will connect to Azure's confidential ledger Identity Service to obtain the latest TLS service certificate for your Ledger in order to secure connections to Ledger Nodes. The details of this process are available in [this sample][client_construction_sample]. This behavior can be overridden by setting the `options` argument when creating the Ledger Client.\n\n## Key concepts\n\n### Ledger entries\n\nEvery write to Azure confidential ledger generates an immutable ledger entry in the service. Writes are uniquely identified by transaction ids that increment with each write.\n\n```C# Snippet:AppendToLedger\nOperation postOperation = ledgerClient.PostLedgerEntry(\n    waitUntil: WaitUntil.Completed,\n    RequestContent.Create(\n        new { contents = \"Hello world!\" }));\n\nstring transactionId = postOperation.Id;\nConsole.WriteLine($\"Appended transaction with Id: {transactionId}\");\n```\n\nSince Azure confidential ledger is a distributed system, rare transient failures may cause writes to be lost. For entries that must be preserved, it is advisable to verify that the write became durable. Note: It may be necessary to call `GetTransactionStatus` multiple times until it returns a \"Committed\" status. However, when calling `PostLedgerEntry`, a successful result indicates that the status is \"Committed\".\n\n```C# Snippet:GetStatus\nResponse statusResponse = ledgerClient.GetTransactionStatus(transactionId);\n\nstring status = JsonDocument.Parse(statusResponse.Content)\n    .RootElement\n    .GetProperty(\"state\")\n    .GetString();\n\nConsole.WriteLine($\"Transaction status: {status}\");\n\n// Wait for the entry to be committed\nwhile (status == \"Pending\")\n{\n    statusResponse = ledgerClient.GetTransactionStatus(transactionId);\n    status = JsonDocument.Parse(statusResponse.Content)\n        .RootElement\n        .GetProperty(\"state\")\n        .GetString();\n}\n\nConsole.WriteLine($\"Transaction status: {status}\");\n```\n\n#### Receipts\n\nState changes to the a confidential ledger are saved in a data structure called a Merkle tree. To cryptographically verify that writes were correctly saved, a Merkle proof, or receipt, can be retrieved for any transaction id.\n\n```C# Snippet:GetReceipt\nResponse receiptResponse = ledgerClient.GetReceipt(transactionId);\nstring receiptJson = new StreamReader(receiptResponse.ContentStream).ReadToEnd();\n\nConsole.WriteLine(receiptJson);\n```\n\n#### Collections\n\nWhile most use cases will involve one ledger, we provide the collections feature in case different logical groups of data need to be stored in the same confidential ledger.\n\n```C# Snippet:Collection\nledgerClient.PostLedgerEntry(\n    waitUntil: WaitUntil.Completed,\n    RequestContent.Create(\n        new { contents = \"Hello from Chris!\", collectionId = \"Chris' messages\" }));\n\nledgerClient.PostLedgerEntry(\n    waitUntil: WaitUntil.Completed,\n    RequestContent.Create(\n        new { contents = \"Hello from Allison!\", collectionId = \"Allison's messages\" }));\n```\n\nWhen no collection id is specified on method calls, the Azure confidential ledger service will assume a constant, service-determined collection id.\n\n```C# Snippet:NoCollectionId\npostOperation = ledgerClient.PostLedgerEntry(\n    waitUntil: WaitUntil.Completed,\n    RequestContent.Create(\n        new { contents = \"Hello world!\" }));\n\nstring content = postOperation.GetRawResponse().Content.ToString();\ntransactionId = postOperation.Id;\nstring collectionId = \"subledger:0\";\n\n// Try fetching the ledger entry until it is \"loaded\".\nResponse getByCollectionResponse = default;\nJsonElement rootElement = default;\nbool loaded = false;\n\nwhile (!loaded)\n{\n    // Provide both the transactionId and collectionId.\n    getByCollectionResponse = ledgerClient.GetLedgerEntry(transactionId, collectionId);\n    rootElement = JsonDocument.Parse(getByCollectionResponse.Content).RootElement;\n    loaded = rootElement.GetProperty(\"state\").GetString() != \"Loading\";\n}\n\nstring contents = rootElement\n    .GetProperty(\"entry\")\n    .GetProperty(\"contents\")\n    .GetString();\n\nConsole.WriteLine(contents); // \"Hello world!\"\n\n// Now just provide the transactionId.\ngetByCollectionResponse = ledgerClient.GetLedgerEntry(transactionId);\n\nstring collectionId2 = JsonDocument.Parse(getByCollectionResponse.Content)\n    .RootElement\n    .GetProperty(\"entry\")\n    .GetProperty(\"collectionId\")\n    .GetString();\n\nConsole.WriteLine($\"{collectionId} == {collectionId2}\");\n```\n\nLedger entries are retrieved from collections. When a transaction id is specified, the returned value is the value contained in the specified collection at the point in time identified by the transaction id. If no transaction id is specified, the latest available value is returned.\n\n```C# Snippet:GetEnteryWithNoTransactionId\nOperation firstPostOperation = ledgerClient.PostLedgerEntry(\n    waitUntil: WaitUntil.Completed,\n    RequestContent.Create(new { contents = \"Hello world 0\" }));\nledgerClient.PostLedgerEntry(\n    waitUntil: WaitUntil.Completed,\n    RequestContent.Create(new { contents = \"Hello world 1\" }));\nOperation collectionPostOperation = ledgerClient.PostLedgerEntry(\n    waitUntil: WaitUntil.Completed,\n    RequestContent.Create(new { contents = \"Hello world collection 0\" }),\n    \"my collection\");\nledgerClient.PostLedgerEntry(\n    waitUntil: WaitUntil.Completed,\n    RequestContent.Create(new { contents = \"Hello world collection 1\" }),\n    \"my collection\");\n\ntransactionId = firstPostOperation.Id;\n\n// Wait for the entry to be committed\nstatus = \"Pending\";\nwhile (status == \"Pending\")\n{\n    statusResponse = ledgerClient.GetTransactionStatus(transactionId);\n    status = JsonDocument.Parse(statusResponse.Content)\n        .RootElement\n        .GetProperty(\"state\")\n        .GetString();\n}\n\n// The ledger entry written at the transactionId in firstResponse is retrieved from the default collection.\nResponse getResponse = ledgerClient.GetLedgerEntry(transactionId);\n\n// Try until the entry is available.\nloaded = false;\nJsonElement element = default;\ncontents = null;\nwhile (!loaded)\n{\n    loaded = JsonDocument.Parse(getResponse.Content)\n        .RootElement\n        .TryGetProperty(\"entry\", out element);\n    if (loaded)\n    {\n        contents = element.GetProperty(\"contents\").GetString();\n    }\n    else\n    {\n        getResponse = ledgerClient.GetLedgerEntry(transactionId, collectionId);\n    }\n}\n\nstring firstEntryContents = JsonDocument.Parse(getResponse.Content)\n    .RootElement\n    .GetProperty(\"entry\")\n    .GetProperty(\"contents\")\n    .GetString();\n\nConsole.WriteLine(firstEntryContents); // \"Hello world 0\"\n\n// This will return the latest entry available in the default collection.\ngetResponse = ledgerClient.GetCurrentLedgerEntry();\n\n// Try until the entry is available.\nloaded = false;\nelement = default;\nstring latestDefaultCollection = null;\nwhile (!loaded)\n{\n    loaded = JsonDocument.Parse(getResponse.Content)\n        .RootElement\n        .TryGetProperty(\"contents\", out element);\n    if (loaded)\n    {\n        latestDefaultCollection = element.GetString();\n    }\n    else\n    {\n        getResponse = ledgerClient.GetCurrentLedgerEntry();\n    }\n}\n\nConsole.WriteLine($\"The latest ledger entry from the default collection is {latestDefaultCollection}\"); //\"Hello world 1\"\n\n// The ledger entry written at collectionTransactionId is retrieved from the collection 'collection'.\nstring collectionTransactionId = collectionPostOperation.Id;\n\ngetResponse = ledgerClient.GetLedgerEntry(collectionTransactionId, \"my collection\");\n// Try until the entry is available.\nloaded = false;\nelement = default;\nstring collectionEntry = null;\nwhile (!loaded)\n{\n    loaded = JsonDocument.Parse(getResponse.Content)\n        .RootElement\n        .TryGetProperty(\"entry\", out element);\n    if (loaded)\n    {\n        collectionEntry = element.GetProperty(\"contents\").GetString();\n    }\n    else\n    {\n        getResponse = ledgerClient.GetLedgerEntry(collectionTransactionId, \"my collection\");\n    }\n}\n\nConsole.WriteLine(collectionEntry); // \"Hello world collection 0\"\n\n// This will return the latest entry available in the collection.\ngetResponse = ledgerClient.GetCurrentLedgerEntry(\"my collection\");\nstring latestCollection = JsonDocument.Parse(getResponse.Content)\n    .RootElement\n    .GetProperty(\"contents\")\n    .GetString();\n\nConsole.WriteLine($\"The latest ledger entry from the collection is {latestCollection}\"); // \"Hello world collection 1\"\n```\n\n##### Ranged queries\n\nLedger entries in a collection may be retrieved over a range of transaction ids.\nNote: Both ranges are optional; they can be provided individually or not at all.\n\n```C# Snippet:RangedQuery\nledgerClient.GetLedgerEntries(fromTransactionId: \"2.1\", toTransactionId: collectionTransactionId);\n```\n\n### User management\n\nUsers are managed directly with the confidential ledger instead of through Azure. New users may be AAD-based or certificate-based.\n\n```C# Snippet:NewUser\nstring newUserAadObjectId = \"<some AAD user or service princpal object Id>\";\nledgerClient.CreateOrUpdateUser(\n    newUserAadObjectId,\n    RequestContent.Create(new { assignedRole = \"Reader\" }));\n```\n\n\n### Confidential consortium and enclave verifications\n\nOne may want to validate details about the confidential ledger for a variety of reasons. For example, you may want to view details about how Microsoft may manage your confidential ledger as part of [Confidential Consortium Framework governance](https://microsoft.github.io/CCF/main/governance/index.html), or verify that your confidential ledger is indeed running in SGX enclaves. A number of client methods are provided for these use cases.\n\n```C# Snippet:Consortium\nPageable<BinaryData> consortiumResponse = ledgerClient.GetConsortiumMembers();\nforeach (var page in consortiumResponse)\n{\n    string membersJson = page.ToString();\n    // Consortium members can manage and alter the confidential ledger, such as by replacing unhealthy nodes.\n    Console.WriteLine(membersJson);\n}\n\n// The constitution is a collection of JavaScript code that defines actions available to members,\n// and vets proposals by members to execute those actions.\nResponse constitutionResponse = ledgerClient.GetConstitution();\nstring constitutionJson = new StreamReader(constitutionResponse.ContentStream).ReadToEnd();\n\nConsole.WriteLine(constitutionJson);\n\n// Enclave quotes contain material that can be used to cryptographically verify the validity and contents of an enclave.\nResponse enclavesResponse = ledgerClient.GetEnclaveQuotes();\nstring enclavesJson = new StreamReader(enclavesResponse.ContentStream).ReadToEnd();\n\nConsole.WriteLine(enclavesJson);\n```\n\n[Microsoft Azure Attestation Service](https://azure.microsoft.com/services/azure-attestation/) is one provider of SGX enclave quotes.\n\n### Thread safety\n\nWe guarantee that all client instance methods are thread-safe and independent of each other ([guideline](https://azure.github.io/azure-sdk/dotnet_introduction.html#dotnet-service-methods-thread-safety)). This ensures that the recommendation of reusing client instances is always safe, even across threads.\n\n### Additional concepts\n\n<!-- CLIENT COMMON BAR -->\n[Client options](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#configuring-service-clients-using-clientoptions) |\n[Accessing the response](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#accessing-http-response-details-using-responset) |\n[Long-running operations](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#consuming-long-running-operations-using-operationt) |\n[Handling failures](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#reporting-errors-requestfailedexception) |\n[Diagnostics](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md) |\n[Mocking](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#mocking) |\n[Client lifetime](https://devblogs.microsoft.com/azure-sdk/lifetime-management-and-thread-safety-guarantees-of-azure-sdk-net-clients/)\n<!-- CLIENT COMMON BAR -->\n\n## Examples\n\nComing Soon...\n\n## Troubleshooting\n\nResponse values returned from Azure confidential ledger client methods are `Response` objects, which contain information about the http response such as the http `Status` property and a `Headers` object containing more information about the failure.\n\n### Setting up console logging\n\nThe simplest way to see the logs is to enable the console logging.\nTo create an Azure SDK log listener that outputs messages to console use AzureEventSourceListener.CreateConsoleLogger method.\n\n```C#\n// Setup a listener to monitor logged events.\nusing AzureEventSourceListener listener = AzureEventSourceListener.CreateConsoleLogger();\n```\n\nTo learn more about other logging mechanisms see [here][logging].\n\n## Next steps\n\nFor more extensive documentation on Azure confidential ledger, see the API [reference documentation](https://azure.github.io/azure-sdk-for-net/).\nYou may also read more about Microsoft Research's open-source Confidential [Consortium Framework][ccf].\n\n## Contributing\n\nThis project welcomes contributions and suggestions.  Most contributions require\nyou to agree to a Contributor License Agreement (CLA) declaring that you have\nthe right to, and actually do, grant us the rights to use your contribution. For\ndetails, visit [cla.microsoft.com][cla].\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc].\nFor more information see the [Code of Conduct FAQ][coc_faq] or contact\n[opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n[style-guide-msft]: https://docs.microsoft.com/style-guide/capitalization\n[style-guide-cloud]: https://aka.ms/azsdk/cloud-style-guide\n[client_src]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/confidentialledger/Azure.Security.ConfidentialLedger\n[client_nuget_package]: https://www.nuget.org/packages?q=Azure.Security.ConfidentialLedger\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_cloud_shell]: https://shell.azure.com/bash\n[azure_confidential_computing]: https://azure.microsoft.com/solutions/confidential-compute\n[client_construction_sample]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/confidentialledger/Azure.Security.ConfidentialLedger/tests/samples/CertificateServiceSample.md\n[azure_sub]: https://azure.microsoft.com/free/dotnet/\n[ccf]: https://github.com/Microsoft/CCF\n[azure_identity]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/identity/Azure.Identity\n[default_cred_ref]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md#defaultazurecredential\n[logging]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq\n[cla]: https://cla.microsoft.com\n[coc_contact]: mailto:opencode@microsoft.com\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2Fsdk%2Fconfidentialledger%2FAzure.Template%2FREADME.png)\n",
        "repo_name": "confidentialledger/Azure.Security.ConfidentialLedger",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/confidentialledger/Azure.Security.ConfidentialLedger",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Confluent management client library for .NET\n\nMicrosoft Azure Confluent is an Azure Marketplace offering that provides Apache Kafka as a service. It's fully managed so you can focus on building your applications rather than managing the clusters. To reduce the burden of cross-platform management, Microsoft partnered with Confluent Cloud to build an integrated provisioning layer from Azure to Confluent Cloud. It provides a consolidated experience for using Confluent Cloud on Azure.\n\nThis library supports managing Microsoft Azure Confluent resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Confluent management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.Confluent\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "confluent/Azure.ResourceManager.Confluent",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/confluent/Azure.ResourceManager.Confluent",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Arc-enabled VMware vSphere management client library for .NET\n\nMicrosoft Azure Arc-enabled VMware vSphere extends Azure governance and management capabilities to VMware vSphere infrastructure. With Azure Arc-enabled VMware vSphere, you get a consistent management experience across Azure and VMware vSphere infrastructure.\n\nThis library supports managing Microsoft Azure Arc-enabled VMware vSphere resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Arc-enabled VMware vSphere management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.ConnectedVMwarevSphere --prerelease\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "connectedvmwarevsphere/Azure.ResourceManager.ConnectedVMwarevSphere",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/connectedvmwarevsphere/Azure.ResourceManager.ConnectedVMwarevSphere",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Consumption management client library for .NET\n\nMicrosoft Azure Cost Management is a suite of tools that help organizations monitor, allocate, and optimize the cost of their Microsoft Cloud workloads.\n\nThis library supports accessing to cost and usage data for your Azure resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Consumption management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.Consumption\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "consumption/Azure.ResourceManager.Consumption",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/consumption/Azure.ResourceManager.Consumption",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Azure Container Apps management client library for .NET\n\nMicrosoft Azure Container Apps enables you to run microservices and containerized applications on a serverless platform.\n\nThis library supports managing Microsoft Azure Container Apps resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started\n\n### Install the package\n\nInstall the Azure Azure Container Apps management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.AppContainers\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "containerapps/Azure.ResourceManager.AppContainers",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/containerapps/Azure.ResourceManager.AppContainers",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Container Instances management client library for .NET\n\nMicrosoft Azure Container Instances offers the fastest and simplest way to run a container in Azure, without having to manage any virtual machines and without having to adopt a higher-level service.\n\nThis library supports managing Microsoft Azure Container Instances resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Container Instances management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.ContainerInstance\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "containerinstance/Azure.ResourceManager.ContainerInstance",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/containerinstance/Azure.ResourceManager.ContainerInstance",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Container Registry client library for .NET\n\nAzure Container Registry allows you to store and manage container images and artifacts in a private registry for all types of container deployments.\n\nUse the client library for Azure Container Registry to:\n\n- List images or artifacts in a registry\n- Obtain metadata for images and artifacts, repositories and tags\n- Set read/write/delete properties on registry items\n- Delete images and artifacts, repositories and tags\n\n[Source code][source] | [Package (NuGet)][package] | [API reference documentation][docs] | [REST API documentation][rest_docs] | [Product documentation][product_docs]\n\n## Getting started\n\nTo develop .NET application code that can connect to an Azure Container Registry instance, you will need the `Azure.Containers.ContainerRegistry` library.\n\n### Install the package\n\nInstall the Azure Container Registry client library for .NET with [NuGet][nuget]:\n\n```dotnetcli\ndotnet add package Azure.Containers.ContainerRegistry\n```\n\n### Prerequisites\n\nYou will need an [Azure subscription][azure_sub] and a [Container Registry service instance][container_registry_docs] for your application to connect to.\n\nTo create a new Container Registry, you can use the [Azure Portal][container_registry_create_portal],\n[Azure PowerShell][container_registry_create_ps], or the [Azure CLI][container_registry_create_cli].\nHere'a an example of creating a new registry using the Azure CLI:\n\n```Powershell\naz acr create --name myregistry --resource-group myresourcegroup --location westus --sku Basic\n```\n\n### Authenticate the client\n\nFor your application to connect to your registry, you'll need to create a `ContainerRegistryClient` that can authenticate with it.  The [Azure Identity library][identity] makes it easy to add Azure Active Directory support for authenticating Azure SDK clients with their corresponding Azure services.\n\nWhen you're developing and debugging your application locally, you can use your own user to authenticate with your registry.  One way to accomplish this is to [authenticate your user with the Azure CLI](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/identity/Azure.Identity#authenticating-via-the-azure-cli) and run your application from this environment.  If your application is using a client that has been constructed to authenticate with `DefaultAzureCredential`, it will correctly authenticate with the registry at the specified endpoint.\n\n```C#\n// Create a ContainerRegistryClient that will authenticate to your registry through Azure Active Directory\nUri endpoint = new Uri(\"https://myregistry.azurecr.io\");\nContainerRegistryClient client = new ContainerRegistryClient(endpoint, new DefaultAzureCredential(),\n    new ContainerRegistryClientOptions()\n    {\n        Audience = ContainerRegistryAudience.AzureResourceManagerPublicCloud\n    });\n```\n\nPlease see the [Azure Identity README][identity] for more approaches to authenticating with `DefaultAzureCredential`, both locally and in deployment environments.  To connect to registries in non-public Azure Clouds, see the samples below.\n\nFor more information on using AAD with Azure Container Registry, please see the service's [Authentication Overview](https://docs.microsoft.com/azure/container-registry/container-registry-authentication).\n\n## Key concepts\n\nA **registry** stores Docker images and [OCI Artifacts](https://opencontainers.org/).  An image or artifact consists of a **manifest** and **layers**.  An image's manifest describes the layers that make up the image, and is uniquely identified by its **digest**.  An image can also be \"tagged\" to give it a human-readable alias.  An image or artifact can have zero or more **tags** associated with it, and each tag uniquely identifies the image.  A collection of images that share the same name but have different tags, is referred to as a **repository**.\n\nFor more information please see [Container Registry Concepts](https://docs.microsoft.com/azure/container-registry/container-registry-concepts).\n\n### Thread safety\n\nWe guarantee that all client instance methods are thread-safe and independent of each other ([guideline](https://azure.github.io/azure-sdk/dotnet_introduction.html#dotnet-service-methods-thread-safety)). This ensures that the [recommendation to reuse client instances](https://devblogs.microsoft.com/azure-sdk/lifetime-management-and-thread-safety-guarantees-of-azure-sdk-net-clients/#client-lifetime) is always safe, even across threads.\n\n### Additional concepts\n<!-- CLIENT COMMON BAR -->\n[Client options](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#configuring-service-clients-using-clientoptions) |\n[Accessing the response](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#accessing-http-response-details-using-responset) |\n[Long-running operations](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#consuming-long-running-operations-using-operationt) |\n[Handling failures](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#reporting-errors-requestfailedexception) |\n[Diagnostics](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md) |\n[Mocking](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#mocking) |\n[Client lifetime](https://devblogs.microsoft.com/azure-sdk/lifetime-management-and-thread-safety-guarantees-of-azure-sdk-net-clients/)\n<!-- CLIENT COMMON BAR -->\n\n## Examples\n\nThe following snippets show brief samples of common developer scenarios using the ACR SDK library.\nPlease note that each sample assumes there is a `REGISTRY_ENDPOINT` environment variable set to a string containing the `https://` prefix and the name of the login server, for example \"https://myregistry.azurecr.io\".\n\n### Sync examples\n\n- Registry operations:\n  - [List repositories](#list-repositories)\n  - [List tags with anonymous access](#list-tags-with-anonymous-access)\n  - [Set artifact properties](#set-artifact-properties)\n  - [Delete images](#delete-images)\n\n### Async examples\n\n- Registry operations:\n  - [List repositories asynchronously](#list-repositories-asynchronously)\n  - [List tags with anonymous access asynchronously](#list-tags-with-anonymous-access)\n  - [Set artifact properties asynchronously](#set-artifact-properties)\n  - [Delete images asynchronously](#delete-images)\n- Blob and manifest operations:\n  - [Upload images](#upload-images)\n  - [Download images](#download-images)\n  - [Delete manifest](#delete-manifest)\n  - [Delete blob](#delete-blob)\n\n### Advanced authentication\n\n- [Create a client that can authenticate with a registry in a national cloud](#authenticate-in-a-national-cloud)\n\n### Registry operations\n\nThis secion contains `ContainerRegistryClient` samples.\n\n#### List repositories\n\nIterate through the collection of repositories in the registry.\n\n```C# Snippet:ContainerRegistry_Tests_Samples_CreateClient\n// Get the service endpoint from the environment\nUri endpoint = new Uri(Environment.GetEnvironmentVariable(\"REGISTRY_ENDPOINT\"));\n\n// Create a new ContainerRegistryClient\nContainerRegistryClient client = new ContainerRegistryClient(endpoint, new DefaultAzureCredential());\n\n// Get the collection of repository names from the registry\nPageable<string> repositories = client.GetRepositoryNames();\nforeach (string repository in repositories)\n{\n    Console.WriteLine(repository);\n}\n```\n\n#### List tags with anonymous access\n\n```C# Snippet:ContainerRegistry_Tests_Samples_ListTagsAnonymous\n// Get the service endpoint from the environment\nUri endpoint = new Uri(Environment.GetEnvironmentVariable(\"REGISTRY_ENDPOINT\"));\n\n// Create a new ContainerRegistryClient for anonymous access\nContainerRegistryClient client = new ContainerRegistryClient(endpoint);\n\n// Obtain a RegistryArtifact object to get access to image operations\nRegistryArtifact image = client.GetArtifact(\"library/hello-world\", \"latest\");\n\n// List the set of tags on the hello_world image tagged as \"latest\"\nPageable<ArtifactTagProperties> tags = image.GetAllTagProperties();\n\n// Iterate through the image's tags, listing the tagged alias for the image\nConsole.WriteLine($\"{image.FullyQualifiedReference} has the following aliases:\");\nforeach (ArtifactTagProperties tag in tags)\n{\n    Console.WriteLine($\"    {image.RegistryEndpoint.Host}/{image.RepositoryName}:{tag}\");\n}\n```\n\n#### Set artifact properties\n\n```C# Snippet:ContainerRegistry_Tests_Samples_SetArtifactProperties\n// Get the service endpoint from the environment\nUri endpoint = new Uri(Environment.GetEnvironmentVariable(\"REGISTRY_ENDPOINT\"));\n\n// Create a new ContainerRegistryClient and RegistryArtifact to access image operations\nContainerRegistryClient client = new ContainerRegistryClient(endpoint, new DefaultAzureCredential());\nRegistryArtifact image = client.GetArtifact(\"library/hello-world\", \"latest\");\n\n// Set permissions on the v1 image's \"latest\" tag\nimage.UpdateTagProperties(\"latest\", new ArtifactTagProperties()\n{\n    CanWrite = false,\n    CanDelete = false\n});\n```\n\n#### Delete images\n\n```C# Snippet:ContainerRegistry_Tests_Samples_DeleteImage\n// Get the service endpoint from the environment\nUri endpoint = new Uri(Environment.GetEnvironmentVariable(\"REGISTRY_ENDPOINT\"));\n\n// Create a new ContainerRegistryClient\nContainerRegistryClient client = new ContainerRegistryClient(endpoint, new DefaultAzureCredential());\n\n// Iterate through repositories\nPageable<string> repositoryNames = client.GetRepositoryNames();\nforeach (string repositoryName in repositoryNames)\n{\n    ContainerRepository repository = client.GetRepository(repositoryName);\n\n    // Obtain the images ordered from newest to oldest\n    Pageable<ArtifactManifestProperties> imageManifests =\n        repository.GetAllManifestProperties(manifestOrder: ArtifactManifestOrder.LastUpdatedOnDescending);\n\n    // Delete images older than the first three.\n    foreach (ArtifactManifestProperties imageManifest in imageManifests.Skip(3))\n    {\n        RegistryArtifact image = repository.GetArtifact(imageManifest.Digest);\n        Console.WriteLine($\"Deleting image with digest {imageManifest.Digest}.\");\n        Console.WriteLine($\"   Deleting the following tags from the image: \");\n        foreach (var tagName in imageManifest.Tags)\n        {\n            Console.WriteLine($\"        {imageManifest.RepositoryName}:{tagName}\");\n            image.DeleteTag(tagName);\n        }\n        image.Delete();\n    }\n}\n```\n\n#### List repositories asynchronously\n\nThe asynchronous APIs are identical to their synchronous counterparts, but methods end with the standard .NET \"Async\" suffix and return a Task.\n\n```C# Snippet:ContainerRegistry_Tests_Samples_CreateClientAsync\n// Get the service endpoint from the environment\nUri endpoint = new Uri(Environment.GetEnvironmentVariable(\"REGISTRY_ENDPOINT\"));\n\n// Create a new ContainerRegistryClient\nContainerRegistryClient client = new ContainerRegistryClient(endpoint, new DefaultAzureCredential());\n\n// Get the collection of repository names from the registry\nAsyncPageable<string> repositories = client.GetRepositoryNamesAsync();\nawait foreach (string repository in repositories)\n{\n    Console.WriteLine(repository);\n}\n```\n\n#### List tags with anonymous access asynchronously\n\n```C# Snippet:ContainerRegistry_Tests_Samples_ListTagsAnonymousAsync\n// Get the service endpoint from the environment\nUri endpoint = new Uri(Environment.GetEnvironmentVariable(\"REGISTRY_ENDPOINT\"));\n\n// Create a new ContainerRegistryClient for anonymous access\nContainerRegistryClient client = new ContainerRegistryClient(endpoint);\n\n// Obtain a RegistryArtifact object to get access to image operations\nRegistryArtifact image = client.GetArtifact(\"library/hello-world\", \"latest\");\n\n// List the set of tags on the hello_world image tagged as \"latest\"\nAsyncPageable<ArtifactTagProperties> tags = image.GetAllTagPropertiesAsync();\n\n// Iterate through the image's tags, listing the tagged alias for the image\nConsole.WriteLine($\"{image.FullyQualifiedReference} has the following aliases:\");\nawait foreach (ArtifactTagProperties tag in tags)\n{\n    Console.WriteLine($\"    {image.RegistryEndpoint.Host}/{image.RepositoryName}:{tag}\");\n}\n```\n\n#### Set artifact properties asynchronously\n\n```C# Snippet:ContainerRegistry_Tests_Samples_SetArtifactPropertiesAsync\n// Get the service endpoint from the environment\nUri endpoint = new Uri(Environment.GetEnvironmentVariable(\"REGISTRY_ENDPOINT\"));\n\n// Create a new ContainerRegistryClient and RegistryArtifact to access image operations\nContainerRegistryClient client = new ContainerRegistryClient(endpoint, new DefaultAzureCredential());\nRegistryArtifact image = client.GetArtifact(\"library/hello-world\", \"v1\");\n\n// Set permissions on the image's \"latest\" tag\nawait image.UpdateTagPropertiesAsync(\"latest\", new ArtifactTagProperties()\n{\n    CanWrite = false,\n    CanDelete = false\n});\n```\n\n#### Delete images asynchronously\n\n```C# Snippet:ContainerRegistry_Tests_Samples_DeleteImageAsync\n// Get the service endpoint from the environment\nUri endpoint = new Uri(Environment.GetEnvironmentVariable(\"REGISTRY_ENDPOINT\"));\n\n// Create a new ContainerRegistryClient\nContainerRegistryClient client = new ContainerRegistryClient(endpoint, new DefaultAzureCredential());\n\n// Iterate through repositories\nAsyncPageable<string> repositoryNames = client.GetRepositoryNamesAsync();\nawait foreach (string repositoryName in repositoryNames)\n{\n    ContainerRepository repository = client.GetRepository(repositoryName);\n\n    // Obtain the images ordered from newest to oldest\n    AsyncPageable<ArtifactManifestProperties> imageManifests =\n        repository.GetAllManifestPropertiesAsync(manifestOrder: ArtifactManifestOrder.LastUpdatedOnDescending);\n\n    // Delete images older than the first three.\n    await foreach (ArtifactManifestProperties imageManifest in imageManifests.Skip(3))\n    {\n        RegistryArtifact image = repository.GetArtifact(imageManifest.Digest);\n        Console.WriteLine($\"Deleting image with digest {imageManifest.Digest}.\");\n        Console.WriteLine($\"   Deleting the following tags from the image: \");\n        foreach (var tagName in imageManifest.Tags)\n        {\n            Console.WriteLine($\"        {imageManifest.RepositoryName}:{tagName}\");\n            await image.DeleteTagAsync(tagName);\n        }\n        await image.DeleteAsync();\n    }\n}\n```\n\n### Blob and manifest operations\n\nThis section contains samples for `ContainerRegistryContentClient` that show how to upload and download images.\n\nFirst, create a blob client.\n\n```C# Snippet:ContainerRegistry_Samples_CreateContentClient\n// Get the service endpoint from the environment\nUri endpoint = new(Environment.GetEnvironmentVariable(\"REGISTRY_ENDPOINT\"));\n\nstring repository = \"sample-oci-image\";\nstring tag = \"demo\";\n\n// Create a new ContainerRegistryContentClient\nContainerRegistryContentClient client = new(endpoint, repository, new DefaultAzureCredential());\n```\n\n#### Upload images\n\nTo upload a full image, we need to upload individual layers and configuration. After that we can upload a manifest which describes an image or artifact and assign it a tag.\n\n```C# Snippet:ContainerRegistry_Samples_UploadOciImageAsync\n// Create a manifest to list files in this image\nOciImageManifest manifest = new(schemaVersion: 2);\n\n// Upload a config file\nBinaryData config = BinaryData.FromString(\"Sample config\");\nUploadRegistryBlobResult uploadConfigResult = await client.UploadBlobAsync(config);\n\n// Update manifest with config info\nmanifest.Configuration = new OciDescriptor()\n{\n    Digest = uploadConfigResult.Digest,\n    SizeInBytes = uploadConfigResult.SizeInBytes,\n    MediaType = \"application/vnd.oci.image.config.v1+json\"\n};\n\n// Upload a layer file\nBinaryData layer = BinaryData.FromString(\"Sample layer\");\nUploadRegistryBlobResult uploadLayerResult = await client.UploadBlobAsync(layer);\n\n// Update manifest with layer info\nmanifest.Layers.Add(new OciDescriptor()\n{\n    Digest = uploadLayerResult.Digest,\n    SizeInBytes = uploadLayerResult.SizeInBytes,\n    MediaType = \"application/vnd.oci.image.layer.v1.tar\"\n});\n\n// Finally, upload the manifest file\nawait client.SetManifestAsync(manifest, tag);\n```\n\n#### Download images\n\nTo download a full image, we need to download its manifest and then download individual layers and configuration.\n\n```C# Snippet:ContainerRegistry_Samples_DownloadOciImageAsync\n// Download the manifest to obtain the list of files in the image\nGetManifestResult result = await client.GetManifestAsync(tag);\nOciImageManifest manifest = result.Manifest.ToObjectFromJson<OciImageManifest>();\n\nstring manifestFile = Path.Combine(path, \"manifest.json\");\nusing (FileStream stream = File.Create(manifestFile))\n{\n    await result.Manifest.ToStream().CopyToAsync(stream);\n}\n\n// Download and write out the config\nDownloadRegistryBlobResult configBlob = await client.DownloadBlobContentAsync(manifest.Configuration.Digest);\n\nstring configFile = Path.Combine(path, \"config.json\");\nusing (FileStream stream = File.Create(configFile))\n{\n    await configBlob.Content.ToStream().CopyToAsync(stream);\n}\n\n// Download and write out the layers\nforeach (OciDescriptor layerInfo in manifest.Layers)\n{\n    string layerFile = Path.Combine(path, TrimSha(layerInfo.Digest));\n    using (FileStream stream = File.Create(layerFile))\n    {\n        await client.DownloadBlobToAsync(layerInfo.Digest, stream);\n    }\n}\n\nstatic string TrimSha(string digest)\n{\n    int index = digest.IndexOf(':');\n    if (index > -1)\n    {\n        return digest.Substring(index + 1);\n    }\n\n    return digest;\n}\n```\n\n#### Delete manifest\n\n```C# Snippet:ContainerRegistry_Samples_DeleteManifest\nGetManifestResult manifestResult = await client.GetManifestAsync(tag);\nawait client.DeleteManifestAsync(manifestResult.Digest);\n```\n\n#### Delete blob\n\n```C# Snippet:ContainerRegistry_Samples_DeleteBlob\nGetManifestResult result = await client.GetManifestAsync(tag);\nOciImageManifest manifest = result.Manifest.ToObjectFromJson<OciImageManifest>();\n\nforeach (OciDescriptor layerInfo in manifest.Layers)\n{\n    await client.DeleteBlobAsync(layerInfo.Digest);\n}\n```\n\n### Advanced authentication\n\n#### Authenticate in a National Cloud\n\nTo authenticate with a registry in a [National Cloud](https://docs.microsoft.com/azure/active-directory/develop/authentication-national-cloud), you will need to make the following additions to your client configuration:\n\n- Set the `AuthorityHost` in the credential options or via the `AZURE_AUTHORITY_HOST` environment variable\n- Set the `Audience` in `ContainerRegistryClientOptions`\n\n```C#\n// Create a ContainerRegistryClient that will authenticate through AAD in the China national cloud\nUri endpoint = new Uri(Environment.GetEnvironmentVariable(\"REGISTRY_ENDPOINT\"));\nContainerRegistryClient client = new ContainerRegistryClient(endpoint,\n    new DefaultAzureCredential(\n        new DefaultAzureCredentialOptions()\n        {\n            AuthorityHost = AzureAuthorityHosts.AzureChina\n        }),\n    new ContainerRegistryClientOptions()\n    {\n        Audience = ContainerRegistryAudience.AzureChina\n    });\n```\n\n\n## Troubleshooting\n\nSee our [troubleshooting guide](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/containerregistry/Azure.Containers.ContainerRegistry/TROUBLESHOOTING.md) for details on how to diagnose various failure scenarios.\n\n## Next steps\n\n- Go further with Azure.Containers.ContainerRegistry and our [samples][samples].\n- Watch a [demo or deep dive video](https://azure.microsoft.com/resources/videos/index/?service=container-registry).\n- Read more about the [Azure Container Registry service](https://docs.microsoft.com/azure/container-registry/container-registry-intro).\n\n## Contributing\n\nThis project welcomes contributions and suggestions.  Most contributions require\nyou to agree to a Contributor License Agreement (CLA) declaring that you have\nthe right to, and actually do, grant us the rights to use your contribution. For\ndetails, visit [cla.microsoft.com][cla].\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc].\nFor more information see the [Code of Conduct FAQ][coc_faq]\nor contact [opencode@microsoft.com][coc_contact] with any\nadditional questions or comments.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2Fsdk%2Fcontainerregistry%2FAzure.Containers.ContainerRegistry%2FREADME.png)\n\n<!-- LINKS -->\n[source]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/containerregistry/Azure.Containers.ContainerRegistry/src\n[package]: https://www.nuget.org/packages/Azure.Containers.ContainerRegistry/\n[docs]: https://docs.microsoft.com/dotnet/api/azure.containers.containerregistry\n[rest_docs]: https://docs.microsoft.com/rest/api/containerregistry/\n[product_docs]:  https://docs.microsoft.com/azure/container-registry\n[nuget]: https://www.nuget.org/\n[container_registry_docs]: https://docs.microsoft.com/azure/container-registry/container-registry-intro\n[container_registry_create_ps]: https://docs.microsoft.com/azure/container-registry/container-registry-get-started-powershell\n[container_registry_create_cli]: https://docs.microsoft.com/azure/container-registry/container-registry-get-started-azure-cli\n[container_registry_create_portal]: https://docs.microsoft.com/azure/container-registry/container-registry-get-started-portal\n[container_registry_concepts]: https://docs.microsoft.com/azure/container-registry/container-registry-concepts\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/dotnet/\n[identity]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/identity/Azure.Identity/README.md\n[RequestFailedException]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/core/Azure.Core/src/RequestFailedException.cs\n[samples]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/containerregistry/Azure.Containers.ContainerRegistry/samples/\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n",
        "repo_name": "containerregistry/Azure.Containers.ContainerRegistry",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/containerregistry/Azure.Containers.ContainerRegistry",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Container Registry management client library for .NET\n\nMicrosoft Azure Container Registry is a managed registry service based on the open-source Docker Registry 2.0. Create and maintain Azure container registries to store and manage your container images and related artifacts.\n\nThis library supports managing Microsoft Azure Container Registry resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Container Registry management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.ContainerRegistry\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "containerregistry/Azure.ResourceManager.ContainerRegistry",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/containerregistry/Azure.ResourceManager.ContainerRegistry",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Container Service management client library for .NET\n\nMicrosoft Azure Container Service (AKS) simplifies deploying a managed Kubernetes cluster in Microsoft Azure by offloading the operational overhead to Azure. As a hosted Kubernetes service, Microsoft Azure handles critical tasks, like health monitoring and maintenance.\n\nThis library supports managing Microsoft Azure Container Service resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Container Service management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.ContainerService\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "containerservice/Azure.ResourceManager.ContainerService",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/containerservice/Azure.ResourceManager.ContainerService",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure AI Content Safety client library for .NET\n\n[Azure AI Content Safety][contentsafety_overview] detects harmful user-generated and AI-generated content in applications and services. Content Safety includes several APIs that allow you to detect material that is harmful:\n\n* Text Analysis API: Scans text for sexual content, violence, hate, and self harm with multi-severity levels.\n* Image Analysis API: Scans images for sexual content, violence, hate, and self harm with multi-severity levels.\n* Text Blocklist Management APIs: The default AI classifiers are sufficient for most content safety needs; however, you might need to screen for terms that are specific to your use case. You can create blocklists of terms to use with the Text API.\n\n[Source code](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/contentsafety/Azure.AI.ContentSafety) | [Package (NuGet)](https://www.nuget.org) | [API reference documentation](https://azure.github.io/azure-sdk-for-net) | [Product documentation](https://learn.microsoft.com/azure/cognitive-services/content-safety/)\n\n## Getting started\n\n### Install the package\n\nInstall the client library for .NET with [NuGet](https://www.nuget.org/ ):\n\n```dotnetcli\ndotnet add package Azure.AI.ContentSafety --prerelease\n```\n\n### Prerequisites\n\n* You need an [Azure subscription][azure_sub] to use this package.\n* An existing [Azure AI Content Safety][contentsafety_overview] instance.\n\n### Authenticate the client\n\n#### Get the endpoint\n\nYou can find the endpoint for your Azure AI Content Safety service resource using the [Azure Portal][azure_portal] or [Azure CLI][azure_cli_endpoint_lookup]:\n\n```bash\n# Get the endpoint for the Azure AI Content Safety service resource\naz cognitiveservices account show --name \"resource-name\" --resource-group \"resource-group-name\" --query \"properties.endpoint\"\n```\n\n#### Get the API key\n\nThe API key can be found in the [Azure Portal][azure_portal] or by running the following [Azure CLI][azure_cli_key_lookup] command:\n\n```bash\naz cognitiveservices account keys list --name \"<resource-name>\" --resource-group \"<resource-group-name>\"\n```\n\n#### Create a ContentSafetyClient with AzureKeyCredential\n\nPass the API key as a string into an instance of `AzureKeyCredential`.\n\n```csharp\nstring endpoint = \"https://<my-custom-subdomain>.cognitiveservices.azure.com/\";\nstring key = \"<api_key>\";\n\nContentSafetyClient client = new ContentSafetyClient(new Uri(endpoint), new AzureKeyCredential(key));\n```\n\n## Key concepts\n\n### Harm categories\n\nContent Safety recognizes four distinct categories of objectionable content.\n\n|Category |Description  |\n|---------|---------|\n|Hate |Hate refers to any content that attacks or uses pejorative or discriminatory language in reference to a person or identity group based on certain differentiating attributes of that group. This includes but is not limited to race, ethnicity, nationality, gender identity and expression, sexual orientation, religion, immigration status, ability status, personal appearance, and body size.|\n|Sexual |Sexual describes content related to anatomical organs and genitals, romantic relationships, acts portrayed in erotic or affectionate terms, pregnancy, physical sexual acts\u2014including those acts portrayed as an assault or a forced sexual violent act against one\u2019s will\u2014, prostitution, pornography, and abuse.|\n|Violence |Violence describes content related to physical actions intended to hurt, injure, damage, or kill someone or something. It also includes weapons, guns and related entities, such as manufacturers, associations, legislation, and similar.|\n|Self-harm |Self-harm describes content related to physical actions intended to purposely hurt, injure, or damage one\u2019s body or kill oneself.|\n\nClassification can be multi-labeled. For example, when a text sample goes through the text moderation model, it could be classified as both Sexual content and Violence.\n\n### Severity levels\n\nEvery harm category the service applies also comes with a severity level rating. The severity level is meant to indicate the severity of the consequences of showing the flagged content.\n\n|Severity |Label |\n|---------|---------|\n|0 |Safe|\n|2 |Low|\n|4 |Medium|\n|6 |High|\n\n### Text blocklist management\n\nFollowing operations are supported to manage your text blocklist:\n\n* Create or modify a blocklist\n* List all blocklists\n* Get a blocklist by blocklistName\n* Add blockItems to a blocklist\n* Remove blockItems from a blocklist\n* List all blockItems in a blocklist by blocklistName\n* Get a blockItem in a blocklist by blockItemId and blocklistName\n* Delete a blocklist and all of its blockItems\n\nYou can set the blocklists you want to use when analyze text, then you can get blocklist match result from returned response.\n\n### Thread safety\n\nWe guarantee that all client instance methods are thread-safe and independent of each other ([guideline](https://azure.github.io/azure-sdk/dotnet_introduction.html#dotnet-service-methods-thread-safety)). This ensures that the recommendation of reusing client instances is always safe, even across threads.\n\n### Additional concepts\n<!-- CLIENT COMMON BAR -->\n[Client options](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#configuring-service-clients-using-clientoptions) |\n[Accessing the response](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#accessing-http-response-details-using-responset) |\n[Long-running operations](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#consuming-long-running-operations-using-operationt) |\n[Handling failures](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#reporting-errors-requestfailedexception) |\n[Diagnostics](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md) |\n[Mocking](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#mocking) |\n[Client lifetime](https://devblogs.microsoft.com/azure-sdk/lifetime-management-and-thread-safety-guarantees-of-azure-sdk-net-clients/)\n<!-- CLIENT COMMON BAR -->\n\n## Examples\n\nThe following section provides several code snippets covering some of the most common Content Safety service tasks, including:\n\n* [Analyze text](#analyze-text)\n* [Analyze image](#analyze-image)\n* [Manage text blocklist](#manage-text-blocklist)\n\nPlease refer to [sample data](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/contentsafety/Azure.AI.ContentSafety/tests/Samples/sample_data) for the data used here. For more samples, please refer to [Samples](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/contentsafety/Azure.AI.ContentSafety/tests/Samples).\n\n### Analyze text\n\n#### Analyze text without blocklists\n\n```C# Snippet:Azure_AI_ContentSafety_AnalyzeText\nstring datapath = Path.Combine(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location), \"Samples\", \"sample_data\", \"text.txt\");\nstring text = File.ReadAllText(datapath);\n\nvar request = new AnalyzeTextOptions(text);\n\nResponse<AnalyzeTextResult> response;\ntry\n{\n    response = client.AnalyzeText(request);\n}\ncatch (RequestFailedException ex)\n{\n    Console.WriteLine(\"Analyze text failed.\\nStatus code: {0}, Error code: {1}, Error message: {2}\", ex.Status, ex.ErrorCode, ex.Message);\n    throw;\n}\n\nConsole.WriteLine(\"Hate severity: {0}\", response.Value.HateResult?.Severity ?? 0);\nConsole.WriteLine(\"SelfHarm severity: {0}\", response.Value.SelfHarmResult?.Severity ?? 0);\nConsole.WriteLine(\"Sexual severity: {0}\", response.Value.SexualResult?.Severity ?? 0);\nConsole.WriteLine(\"Violence severity: {0}\", response.Value.ViolenceResult?.Severity ?? 0);\n```\n\n#### Analyze text with blocklists\n\n```C# Snippet:Azure_AI_ContentSafety_AnalyzeTextWithBlocklist\n// After you edit your blocklist, it usually takes effect in 5 minutes, please wait some time before analyzing with blocklist after editing.\nvar request = new AnalyzeTextOptions(\"I h*te you and I want to k*ll you\");\nrequest.BlocklistNames.Add(blocklistName);\nrequest.BreakByBlocklists = true;\n\nResponse<AnalyzeTextResult> response;\ntry\n{\n    response = client.AnalyzeText(request);\n}\ncatch (RequestFailedException ex)\n{\n    Console.WriteLine(\"Analyze text failed.\\nStatus code: {0}, Error code: {1}, Error message: {2}\", ex.Status, ex.ErrorCode, ex.Message);\n    throw;\n}\n\nif (response.Value.BlocklistsMatchResults != null)\n{\n    Console.WriteLine(\"\\nBlocklist match result:\");\n    foreach (var matchResult in response.Value.BlocklistsMatchResults)\n    {\n        Console.WriteLine(\"Blockitem was hit in text: Offset: {0}, Length: {1}\", matchResult.Offset, matchResult.Length);\n        Console.WriteLine(\"BlocklistName: {0}, BlockItemId: {1}, BlockItemText: {2}, \", matchResult.BlocklistName, matchResult.BlockItemId, matchResult.BlockItemText);\n    }\n}\n```\n\n### Analyze image\n\n```C# Snippet:Azure_AI_ContentSafety_AnalyzeImage\nstring datapath = Path.Combine(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location), \"Samples\", \"sample_data\", \"image.jpg\");\nImageData image = new ImageData() { Content = BinaryData.FromBytes(File.ReadAllBytes(datapath)) };\n\nvar request = new AnalyzeImageOptions(image);\n\nResponse<AnalyzeImageResult> response;\ntry\n{\n    response = client.AnalyzeImage(request);\n}\ncatch (RequestFailedException ex)\n{\n    Console.WriteLine(\"Analyze image failed.\\nStatus code: {0}, Error code: {1}, Error message: {2}\", ex.Status, ex.ErrorCode, ex.Message);\n    throw;\n}\n\nConsole.WriteLine(\"Hate severity: {0}\", response.Value.HateResult?.Severity ?? 0);\nConsole.WriteLine(\"SelfHarm severity: {0}\", response.Value.SelfHarmResult?.Severity ?? 0);\nConsole.WriteLine(\"Sexual severity: {0}\", response.Value.SexualResult?.Severity ?? 0);\nConsole.WriteLine(\"Violence severity: {0}\", response.Value.ViolenceResult?.Severity ?? 0);\n```\n\n### Manage text blocklist\n\n#### Create or update text blocklist\n\n```C# Snippet:Azure_AI_ContentSafety_CreateNewBlocklist\nvar blocklistName = \"TestBlocklist\";\nvar blocklistDescription = \"Test blocklist management\";\n\nvar data = new\n{\n    description = blocklistDescription,\n};\n\nvar createResponse = client.CreateOrUpdateTextBlocklist(blocklistName, RequestContent.Create(data));\nif (createResponse.Status == 201)\n{\n    Console.WriteLine(\"\\nBlocklist {0} created.\", blocklistName);\n}\nelse if (createResponse.Status == 200)\n{\n    Console.WriteLine(\"\\nBlocklist {0} updated.\", blocklistName);\n}\n```\n\n#### Add blockItems\n\n```C# Snippet:Azure_AI_ContentSafety_AddBlockItems\nstring blockItemText1 = \"k*ll\";\nstring blockItemText2 = \"h*te\";\n\nvar blockItems = new TextBlockItemInfo[] { new TextBlockItemInfo(blockItemText1), new TextBlockItemInfo(blockItemText2) };\nvar addedBlockItems = client.AddBlockItems(blocklistName, new AddBlockItemsOptions(blockItems));\n\nif (addedBlockItems != null && addedBlockItems.Value != null)\n{\n    Console.WriteLine(\"\\nBlockItems added:\");\n    foreach (var addedBlockItem in addedBlockItems.Value.Value)\n    {\n        Console.WriteLine(\"BlockItemId: {0}, Text: {1}, Description: {2}\", addedBlockItem.BlockItemId, addedBlockItem.Text, addedBlockItem.Description);\n    }\n}\n```\n\n#### List text blocklists\n\n```C# Snippet:Azure_AI_ContentSafety_ListBlocklists\nvar blocklists = client.GetTextBlocklists();\nConsole.WriteLine(\"\\nList blocklists:\");\nforeach (var blocklist in blocklists)\n{\n    Console.WriteLine(\"BlocklistName: {0}, Description: {1}\", blocklist.BlocklistName, blocklist.Description);\n}\n```\n\n#### Get text blocklist\n\n```C# Snippet:Azure_AI_ContentSafety_GetBlocklist\nvar getBlocklist = client.GetTextBlocklist(blocklistName);\nif (getBlocklist != null && getBlocklist.Value != null)\n{\n    Console.WriteLine(\"\\nGet blocklist:\");\n    Console.WriteLine(\"BlocklistName: {0}, Description: {1}\", getBlocklist.Value.BlocklistName, getBlocklist.Value.Description);\n}\n```\n\n#### List blockItems\n\n```C# Snippet:Azure_AI_ContentSafety_ListBlockItems\nvar allBlockitems = client.GetTextBlocklistItems(blocklistName);\nConsole.WriteLine(\"\\nList BlockItems:\");\nforeach (var blocklistItem in allBlockitems)\n{\n    Console.WriteLine(\"BlockItemId: {0}, Text: {1}, Description: {2}\", blocklistItem.BlockItemId, blocklistItem.Text, blocklistItem.Description);\n}\n```\n\n#### Get blockItem\n\n```C# Snippet:Azure_AI_ContentSafety_GetBlockItem\nvar getBlockItemId = addedBlockItems.Value.Value[0].BlockItemId;\nvar getBlockItem = client.GetTextBlocklistItem(blocklistName, getBlockItemId);\nConsole.WriteLine(\"\\nGet BlockItem:\");\nConsole.WriteLine(\"BlockItemId: {0}, Text: {1}, Description: {2}\", getBlockItem.Value.BlockItemId, getBlockItem.Value.Text, getBlockItem.Value.Description);\n```\n\n#### Remove blockItems\n\n```C# Snippet:Azure_AI_ContentSafety_RemoveBlockItems\nvar removeBlockItemId = addedBlockItems.Value.Value[0].BlockItemId;\nvar removeBlockItemIds = new List<string> { removeBlockItemId };\nvar removeResult = client.RemoveBlockItems(blocklistName, new RemoveBlockItemsOptions(removeBlockItemIds));\n\nif (removeResult != null && removeResult.Status == 204)\n{\n    Console.WriteLine(\"\\nBlockItem removed: {0}.\", removeBlockItemId);\n}\n```\n\n#### Delete text blocklist\n\n```C# Snippet:Azure_AI_ContentSafety_DeleteBlocklist\nvar deleteResult = client.DeleteTextBlocklist(blocklistName);\nif (deleteResult != null && deleteResult.Status == 204)\n{\n    Console.WriteLine(\"\\nDeleted blocklist.\");\n}\n```\n\n## Troubleshooting\n\n### General\n\nWhen you interact with the Azure AI Content Safety client library using the .NET SDK, errors returned by the service will result in a `RequestFailedException` with the same HTTP status code returned by the REST API request and error code defined by our service. You can parse the `RequestFailedException` like below:\n\n```csharp\ntry\n{\n    response = client.AnalyzeText(request);\n}\ncatch (RequestFailedException ex)\n{\n    Console.WriteLine(\"Analyze text failed.\\nStatus code: {0}, Error code: {1}, Error message: {2}\", ex.Status, ex.ErrorCode, ex.Message);\n    throw;\n}\n```\n\nExample console output:\n\n```\nAnalyze text failed.\nStatus code: 400, Error code: InvalidRequestBody, Error message: The length of given text 1158 exceeds the limit 1000. | Request Id: a04c7c32-ef27-4c23-8b18-07545b24765b, Timestamp: 2023-06-01T16:43:52Z.\n```\n\nError codes are defined as below:\n\n|Error Code |Possible reasons |Suggestions|\n|-----------|-------------------|-----------|\n|InvalidRequestBody |One or more fields in the request body do not match the API definition. |1. Check the API version you specified in the API call.<br>2. Check the corresponding API definition for the API version you selected.|\n|InvalidResourceName |The resource name you specified in the URL does not meet the requirements, like the blocklist name, blocklist term ID, etc. |1. Check the API version you specified in the API call.<br>2. Check whether the given name has invalid characters according to the API definition.|\n|ResourceNotFound |The resource you specified in the URL may not exist, like the blocklist name. |1. Check the API version you specified in the API call.<br>2. Double check the existence of the resource specified in the URL.|\n|InternalError |Some unexpected situations on the server side have been triggered. |1. You may want to retry a few times after a small period and see it the issue happens again.<br>2. Contact Azure Support if this issue persists.|\n|ServerBusy |The server side cannot process the request temporarily. |1. You may want to retry a few times after a small period and see it the issue happens again.<br>2.Contact Azure Support if this issue persists.|\n|TooManyRequests |The current RPS has exceeded the quota for your current SKU. |1. Check the pricing table to understand the RPS quota.<br>2.Contact Azure Support if you need more QPS.|\n\n### Setting up console logging\n\nThe simplest way to see the logs is to enable the console logging.\nTo create an Azure SDK log listener that outputs messages to console use the AzureEventSourceListener.CreateConsoleLogger method.\n\n```C#\n// Setup a listener to monitor logged events.\nusing AzureEventSourceListener listener = AzureEventSourceListener.CreateConsoleLogger();\n```\n\nTo learn more about other logging mechanisms see [Diagnostics Samples][logging].\n\n## Next steps\n\n### Additional documentation\n\nFor more extensive documentation on Azure Content Safety, see the [Azure AI Content Safety][contentsafety_overview] on docs.microsoft.com.\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [cla.microsoft.com][cla].\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n[azure_sub]: https://azure.microsoft.com/free/\n[contentsafety_overview]: https://aka.ms/acs-doc\n[azure_portal]: https://ms.portal.azure.com/\n[azure_cli_endpoint_lookup]: https://docs.microsoft.com/cli/azure/cognitiveservices/account?view=azure-cli-latest#az-cognitiveservices-account-show\n[azure_cli_key_lookup]: https://docs.microsoft.com/cli/azure/cognitiveservices/account/keys?view=azure-cli-latest#az-cognitiveservices-account-keys-list\n[logging]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/core/Azure.Core/samples/Diagnostics.md\n\n[cla]: https://cla.microsoft.com\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net/sdk//Azure.AI/README.png)\n",
        "repo_name": "contentsafety/Azure.AI.ContentSafety",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/contentsafety/Azure.AI.ContentSafety",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Core AMQP shared client library for .NET\n\nAzure.Core.Amqp contains AMQP primitives. \n",
        "repo_name": "core/Azure.Core.Amqp",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core.Amqp",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Core Experimental shared client library for .NET\n\nAzure.Core.Experimental contains types that are being evaluated and might eventually become part of Azure.Core, this library would always stay in a preview version and might allow breaking changes.\n",
        "repo_name": "core/Azure.Core.Experimental",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core.Experimental",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Core Expressions DataFactory shared client library for .NET\n\nAzure.Core.Expressions.DataFactory provides classes that represent [Expressions](https://learn.microsoft.com/azure/data-factory/control-flow-expression-language-functions#expressions). \n\n## Getting started\n\nTypically, you will not need to install Azure.Core.Expressions.DataFactory; \nit will be installed for you when you install one of the client libraries using it. \nIn case you want to install it explicitly (to implement your own client library, for example), \nyou can find the NuGet package.\n\n## Key concepts\n\nIn the datafactory API many of the properties have the ability to either be a constant value, an expression which will be evaluated at runtime, a secure string, or a reference to a key vault secret.\nThe structure of the JSON payload is different depending on which of these concepts the value maps to. As an example, the [FolderPath](https://github.com/Azure/azure-rest-api-specs/blob/main/specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/entityTypes/Dataset.json#L1353)\nproperty of an AzureBlobDataset can either be a \"string (or Expression with resultType string)\". Implicit in this definition is the fact that it can also be a secure string or a key vault secret reference. This is true for any property that can be expressed as a string or an expression with a result type of string.\n\n### Json representation\n\n#### Literal\n\n```json\n\"folderPath\": \"foo/bar\"\n```\n\n#### Expression\n\n```json\n\"folderpath\": {\n  \"type\": \"Expression\",\n  \"value\": \"foo/bar-@{pipeline().TriggerTime}\"\n}\n```\n\nIn this example when the pipeline is run in the first case the folder is always `foo/bar`, but in the second case the service will append the time the pipeline kicked off to the folder name.\n\n#### Secure String\n\n```json\n\"folderpath\": {\n  \"type\": \"SecureString\",\n  \"value\": \"some/secret/path\"\n}\n```\n\nWhen a secure string is used, the value is return masked with '*' characters when the resource is retrieved from the service.\n\n#### Key Vault Secret Reference\n\n```json\n\"folderpath\": {\n  \"type\": \"AzureKeyVaultSecretReference\",\n  \"value\": \"@Microsoft.KeyVault(SecretUri=https://myvault.vault.azure.net/secrets/mysecret/)\"\n}\n```\n\nA Key Vault Reference can be used to specify a Key Vault where the value of the property is stored. \n\n\n### DataFactoryElement<T>\n\nThe `DataFactoryElement<T>` class allows us to model the literal value expected by this property using strongly typed practices.\nIf the expression should evaluate to an `int` then a literal value that is assigned to the same property must also be an int.\n\nWith the FolderPath example above we could set the property using either case below.\n\n#### Literal\n\n```C# Snippet:DataFactoryElementLiteral\nblobDataSet.FolderPath = \"foo/bar\";\n```\n\n#### Expression\n\n```C# Snippet:DataFactoryElementFromExpression\nblobDataSet.FolderPath = DataFactoryElement<string>.FromExpression(\"foo/bar-@{pipeline().TriggerTime}\");\n```\n\n#### Secure String\n\n```C# Snippet:DataFactoryElementSecureString\nblobDataSet.FolderPath = DataFactoryElement<string>.FromMaskedString(\"some/secret/path\");\n```\n\n#### Key Vault Secret Reference\n\n```C# Snippet:DataFactoryElementKeyVaultSecretReference\nblobDataSet.FolderPath = DataFactoryElement<string>.FromKeyVaultSecretReference(\"@Microsoft.KeyVault(SecretUri=https://myvault.vault.azure.net/secrets/mysecret/)\");\n```\n\nIn each case the library will be able to serialize and deserialize all scenarios appropriately allowing you to seamlessly use either according to your application's needs.\n\n## Troubleshooting\n\nThree main ways of troubleshooting failures are [inspecting exceptions](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Response.md#handling-exceptions), enabling [logging](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md#Logging), and [distributed tracing](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md#Distributed-tracing)\n\n## Next steps\n\nExplore and install [available Azure SDK libraries](https://azure.github.io/azure-sdk/releases/latest/dotnet.html).\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct]. For more information see the [Code of Conduct FAQ][code_of_conduct_faq] or contact opencode@microsoft.com with any additional questions or comments.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2Fsdk%2Fcore%2FAzure.Core%2FREADME.png)\n\n[source]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/core/Azure.Core/src\n[package]: https://www.nuget.org/packages/Azure.Core/\n[docs]: https://docs.microsoft.com/dotnet/api/azure.core\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct\n[code_of_conduct_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "core/Azure.Core.Expressions.DataFactory",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core.Expressions.DataFactory",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# .NET Azure SDK Test Framework\n\nThe .NET Azure SDK Test Framework, aka the Test Framework, is a set of classes that help you to write tests against the Azure SDK for .NET. It provides support for both recorded tests and unit tests. The Test Framework uses NUnit as its underlying testing framework. All Track 2 libraries (Azure.* naming) should use the Test Framework for their tests.\n\n## Using the TestFramework\n\nTo start using the Test Framework, add a project reference using the alias `AzureCoreTestFramework` into your test `.csproj`:\n\n``` xml\n<Project Sdk=\"Microsoft.NET.Sdk\">\n\n...\n   <ProjectReference Include=\"$(AzureCoreTestFramework)\" />\n...\n\n</Project>\n```\n\nAs an example, see the [Template](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/template/Azure.Template/tests/Azure.Template.Tests.csproj#L15) project. If you create a new project from the template, the Test Framework will be already referenced.\n\n## Sync-async tests\n\nThe Test Framework provides the ability to write tests using async client methods and automatically run them using sync overloads. This means that you don't need to duplicate tests to cover calling both the sync and async overloads of service client methods. To write sync-async client tests, inherit from `ClientTestBase` class and use the `InstrumentClient` method to wrap your client into a proxy class. In addition to running the async tests as written, this proxy class will automatically create sync versions of the tests by forward async calls to their sync overloads.\n\n``` C#\npublic class ConfigurationLiveTests: ClientTestBase\n{\n    public ConfigurationLiveTests(bool isAsync) : base(isAsync)\n    {\n    }\n\n    private ConfigurationClient GetClient() =>\n        InstrumentClient(\n            new ConfigurationClient(\n                ...,\n                InstrumentClientOptions(\n                    new ConfigurationClientClientOptions())));\n\n    public async Task DeleteSettingNotFound()\n    {\n        ConfigurationClient service = GetClient();\n\n        var response = await service.DeleteAsync(\"Setting\");\n\n        Assert.AreEqual(204, response.Status);\n        response.Dispose();\n    }\n}\n```\n\nIn the test explorer, async tests will display as `TestClassName(true)` and sync tests as `TestClassName(false)`.\n\nYou can disable the sync-forwarding for an individual test by applying the `[AsyncOnly]` attribute to the test method.\n\n__Limitation__: all method calls/properties that are being used have to be `virtual`.\n\n## Recorded tests\n\nThe bulk of the functionality of the Test Framework is around supporting the ability to run what we call recorded tests. This type of test can be thought of as a functional test as opposed to a unit test. A recorded test can be run in three different [modes](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core.TestFramework/src/RecordedTestMode.cs):\n  - `Live` - The requests in the tests are run against live Azure resources.\n  - `Record` - This is the same as live mode with one key difference - the HTTP traffic from your tests is saved locally on your machine in the form of session files. When using sync-async tests (which is the default behavior unless specifying `SyncOnly` or `AsyncOnly` attributes) with recorded tests two sessions files will be generated - the async test session will have `Async.json` suffix.\n  - `Playback` - The requests that your library generates when running a test are compared against the requests in the recording for that test. For each matched request, the corresponding response is extracted from the recording and \"played back\" as the response. The test will fail if a request issued by the library cannot be matched to the ones found in the session file, taking into account any [sanitization](#sanitizing) or [matching](#matching) customizations that may have been applied to the request.\n\nUnder the hood, when tests are run in `Playback` or `Record` mode, requests are forwarded to the [Test Proxy](https://github.com/Azure/azure-sdk-tools/blob/main/tools/test-proxy/Azure.Sdk.Tools.TestProxy/README.md). The test proxy is a proxy server that runs locally on your machine automatically when in `Record` or `Playback` mode. The proxy is responsible for saving the requests and responses when running in `Record` mode and for returning the recorded responses when running in `Playback` mode. The proxy should be mostly transparent to the developer, other than when you are trying to [debug](#debugging-test-proxy).\n\n### Test resource creation and TestEnvironment\n\nIn order to actually run recorded tests in `Live` or `Record` mode, you will need Azure resources that the test can run against. Follow the [live test resources management](https://github.com/azure/azure-sdk-for-net/tree/main/eng/common/TestResources/README.md) to create a live test resources deployment template and get it deployed. The deployment template should be named `test-resources.json`, or for bicep templates, `test-resources.bicep`, and will live in the root of your service directory.\n\nWhen running tests in `Live` or `Record` mode locally, the Test Framework will prompt you to create the live test resources required for the tests if you don't have environment variables or an env file containing the required variables needed for the tests. This means that you do not have to manually run the New-TestResources script when attempting to run live tests! The Test Framework will also attempt to automatically extend the expiration of the test resource resource group whenever live tests are run. If the resource group specified in your .env file or environment variable has already expired and thus been deleted, the framework will prompt you to create a new resource group just like it would if an env variable required by the test was missing.\n\nTo access the variables output from your test-resources template, create a class that inherits from `TestEnvironment` and exposes required values as properties:\n\n``` C#\npublic class AppConfigurationTestEnvironment : TestEnvironment\n{\n    // Variables retrieved using GetRecordedVariable will be recorded in recorded tests\n    // Argument is the output name in the test-resources.json\n    public string Endpoint => GetRecordedVariable(\"APPCONFIGURATION_ENDPOINT\");\n    // Variables retrieved using GetVariable will not be recorded but the method will throw if the variable is not set\n    public string SystemAssignedVault => GetVariable(\"IDENTITYTEST_TEST_SYSTEMASSIGNEDVAULT\");\n}\n```\n\n__NOTE:__ Make sure that variables containing secret values are not recorded or are sanitized. If you accidentally leak a secret, follow the guidance [here](https://dev.azure.com/azure-sdk/internal/_wiki/wikis/internal.wiki/101/Leaked-secret-procedure).\n\nTo sanitize variables use the `options` parameter of `GetRecordedVariable`:\n\n``` C#\n    // HasSecretConnectionStringParameter would ensure the right connection string parameter is sanitized before storing the record\n    public string ConnectionString => GetRecordedVariable(\"APPCONFIGURATION_CONNECTION_STRING\", options => options.HasSecretConnectionStringParameter(\"secret\"));\n    // IsSecret would ensure the entire value is sanitized before storage\n    public string Key => GetRecordedVariable(\"APPCONFIGURATION_KEY\", options => options.IsSecret());\n```\n\nIf the client expects a Base64 secret value use the `SanitizedValue` parameter to use a Base64 compatible replacement value:\n\n``` C#\n    // Connection string parameter would be replaced with Kg==\n    public string ConnectionString => GetRecordedVariable(\"APPCONFIGURATION_CONNECTION_STRING\", options => options.HasSecretConnectionStringParameter(\"secret\", SanitizedValue.Base64));\n    // Secret value would be replaced with Kg==\n    public string Key => GetRecordedVariable(\"APPCONFIGURATION_KEY\", options => options.IsSecret(SanitizedValue.Base64));\n```\n\nYou can now retrieve these values in tests:\n\n``` C#\npublic class ConfigurationLiveTests : RecordedTestBase<AppConfigurationTestEnvironment>\n{\n    [Test]\n    public async Task DeleteSetting()\n    {\n        var connectionString = TestEnvironment.ConnectionString;\n        var password = TestEnvironment.TestPassword;\n        //...\n    }\n}\n```\n\nAnd samples:\n\n``` C#\npublic partial class ConfigurationSamples: SamplesBase<AppConfigurationTestEnvironment>\n{\n    [Test]\n    public void HelloWorld()\n    {\n        var connectionString = TestEnvironment.ConnectionString;\n\n        #region Snippet:AzConfigSample1_CreateConfigurationClient\n        var client = new ConfigurationClient(connectionString);\n        #endregion\n    }\n}\n```\n\nIf resources require some time to become eventually consistent and there's a scenario that can be used to detect if asynchronous process completed\nthen you can consider implementing `TestEnvironment.IsEnvironmentReadyAsync`. The Test Framework will probe the scenario couple of times before starting tests or\nfail the test run if resources don't become available:\n\n``` C#\npublic class AppConfigurationTestEnvironment : TestEnvironment\n{\n    // in addition to other members\n    protected override async ValueTask<bool> IsEnvironmentReadyAsync()\n    {\n        var connectionString = TestEnvironment.ConnectionString;\n        var client = new ConfigurationClient(connectionString);\n        try\n        {\n            await service.GetConfigurationSettingAsync(\"Setting\");\n        }\n        catch (RequestFailedException e) when (e.Status == 403)\n        {\n            return false;\n        }\n        return true;\n    }\n}\n```\n\n### Defining the recorded test class\n\nTo use recorded test functionality, define a class that inherits from the `RecordedTestBase<T>` class and use the `InstrumentClientOptions` method when creating the client instance. Pass the test environment class as the generic argument to `RecordedTestBase<T>`. If any tests should not be recorded, e.g. because the recording would be too large, apply the `LiveOnly` attribute at either the test or class level, as appropriate. These instances should be rare - the goal is to have all recorded tests run in all modes.\n\n``` C#\npublic class ConfigurationLiveTests: RecordedTestBase<AppConfigurationTestEnvironment>\n{\n    public ConfigurationLiveTests(bool isAsync) : base(isAsync)\n    {\n    }\n\n    private ConfigurationClient GetClient() =>\n        InstrumentClient(\n            new ConfigurationClient(\n                ...,\n                InstrumentClientOptions(\n                    new ConfigurationClientClientOptions())));\n    }\n\n    public async Task DeleteSettingNotFound()\n    {\n        ConfigurationClient service = GetClient();\n\n        var response = await service.DeleteAsync(\"Setting\");\n\n        Assert.AreEqual(204, response.Status);\n        response.Dispose();\n    }\n}\n```\n\nBy default tests are run in playback mode. To change the mode use the `AZURE_TEST_MODE` environment variable and set it to one of the following values: `Live`, `Playback`, `Record`.\n\nIn development scenarios where it's required to change mode quickly without restarting Visual Studio, use the two-parameter constructor of `RecordedTestBase` to change the mode, or use the `.runsettings` file as described [here](#test-settings).\n\nRecorded tests can be attributed with the `RecordedTestAttribute` in lieu of the standard `TestAttribute` to enable functionality to automatically re-record tests that fail due to recording session file mismatches.\nTests that are auto-rerecorded will fail with the following error and succeed if re-run.\n\n```text\nError Message:\n   Test failed playback, but was successfully re-recorded (it should pass if re-run). Please copy updated recording to SessionFiles.\n```\n\n``` C#\npublic class ConfigurationLiveTests: RecordedTestBase<AppConfigurationTestEnvironment>\n{\n    public ConfigurationLiveTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)\n    {\n        [RecordedTest]\n        public void MyTest()\n        {\n            //...\n        }\n    }\n}\n```\n\nIn addition to the auto-rerecording functionality, using the RecordedTestAttribute also will automatically retry tests that fail due due to exceeding the global test time limit.\n\n### Recording\n\nBecause of the quick growth of the repo size due to the presence of recordings, currently there is an ongoing effort to migrate them to the [Azure SDK Assets](https://github.com/Azure/azure-sdk-assets) repo. The location where session records are stored in your machine depends on whether migration already took place for your project or not.\n\nFor projects whose recordings have not been migrated yet, when tests are run in `Record` mode, session records are saved to the project directory automatically in a folder named 'SessionRecords'. The recordings contained in this folder must be pushed normally.\n\nFor projects whose recordings have already been migrated, when tests are run in `Record` mode, session records are saved in a local folder named '.assets', located at the root of this repo. This folder will be created automatically by the Test Framework and should not be committed with other changes. Instead, recordings must be pushed manually to the Azure SDK Assets repo with the help of the `test-proxy` command line tool.\n\nTo differentiate between the two types of projects, you just need to look for an `assets.json` file at your package directory. The file is only present if migration has taken place.\n\n#### Installing the test-proxy tool\n\nThis step is only relevant if your project had its recordings migrated to the Azure SDK Assets repo.\n\nIn order to push new session records, you must have the `test-proxy` command line tool installed. It can be installed automatically when running the Test Framework in `Record` mode on Windows. You can check the installed version by invoking:\n```PowerShell\ntest-proxy --version\n```\n\nIf you need to install the `test-proxy` tool manually, check [Azure SDK Tools Test Proxy\n](https://github.com/Azure/azure-sdk-tools/blob/main/tools/test-proxy/Azure.Sdk.Tools.TestProxy/README.md#installation) for installation options.\n\n#### Pushing session records and updating assets.json\n\nThis step is only relevant if your project had its recordings migrated to the Azure SDK Assets repo.\n\nThe `assets.json` file located at your package directory is used by the Test Framework to figure out how to retrieve session records from the assets repo. In order to push new session records, you need to invoke:\n```PowerShell\ntest-proxy push -a <path-to-assets.json>\n```\n\nOn completion of the push, a newly created tag will be stamped into the `assets.json` file. This new tag must be committed and pushed to your package directory along with any other changes.\n\n### Sanitizing\n\nSecrets that are part of requests, responses, headers, or connections strings should be sanitized before saving the record.\n__Do not check in session records containing secrets.__ Common headers like `Authentication` are sanitized automatically, but if custom logic is required and/or if request or response body need to be sanitized, several properties of `RecordedTestBase` can be used to customize the sanitization process.\n\nFor example:\n\n```C#\npublic class ConfigurationLiveTests: RecordedTestBase<AppConfigurationTestEnvironment>\n{\n    public ConfigurationLiveTests()\n    {\n        SanitizedHeaders.Add(\"example-header\");\n        SanitizeQueryParameters.Add(\"example-query-parameter\");\n    }\n}\n```\n\nAnother sanitization feature that is available involves sanitizing Json payloads.\nBy adding a [Json Path](https://www.newtonsoft.com/json/help/html/QueryJsonSelectToken.htm) formatted string to the `JsonPathSanitizers` property, you can sanitize the value for a specific JSON property in request/response bodies.\n\nBy default, the following values are added to the `JsonPathSanitizers` to be sanitized: `primaryKey`, `secondaryKey`, `primaryConnectionString`, `secondaryConnectionString`, and `connectionString`.\n\n```c#\npublic class FormRecognizerLiveTests: RecordedTestBase<FormRecognizerTestEnvironment>\n{\n    public FormRecognizerLiveTests()\n    {\n        JsonPathSanitizers.Add(\"$..accessToken\");\n        JsonPathSanitizers.Add(\"$..source\");\n    }\n}\n```\n\nIf more advanced sanitization is needed, you can use any of the regex-based sanitizer properties of `RecordedTestBase`. These are listed below along with example usages.\n- [BodyKeySanitizers](https://grep.app/search?q=BodyKeySanitizers&filter[repo][0]=Azure/azure-sdk-for-net)\n- [BodyRegexSanitizers](https://grep.app/search?q=BodyRegexSanitizers&filter[repo][0]=Azure/azure-sdk-for-net)\n- [UriRegexSanitizers](https://grep.app/search?q=UriRegexSanitizers&filter[repo][0]=Azure/azure-sdk-for-net)\n- [HeaderRegexSanitizers](https://grep.app/search?q=HeaderRegexSanitizers&filter[repo][0]=Azure/azure-sdk-for-net)\n\n_Note that when using any of the regex sanitizers, you must take care to ensure that the regex is specific enough to not match unintended values. When a regex is too broad and matches unintended values, this can result in the request or response being corrupted which may manifest in a `JsonReaderException`._\n\n### Matching\n\nWhen tests are run in `Playback` mode, the Test Proxy uses the HTTP method, Uri, and headers to match the request to the recordings. Some headers change on every request and are not controlled by the client code and should be ignored during matching. Common headers like `Date`, `x-ms-date`, `x-ms-client-request-id`, `User-Agent`, `Request-Id` are ignored by default but if more headers need to be ignored, use the various matching properties to customize as needed.\n\n``` C#\n    public class ConfigurationLiveTests: RecordedTestBase<AppConfigurationTestEnvironment>\n    {\n        public ConfigurationLiveTests()\n        {\n            IgnoredHeaders.Add(\"Sync-Token\");\n            IgnoredQueryParameters.Add(\"service-version\");\n        }\n    }\n```\n\n### Running live tests serially\n\nBy default, NUnit does not run tests within each assembly in parallel, but this can be [configured](https://docs.nunit.org/articles/nunit/technical-notes/usage/Framework-Parallel-Test-Execution.html).\nEspecially for unit tests, this is often desirable; however, live and [recorded tests](#recorded-tests) may run into some issues. Thus, by default, the `RecordedTestBase` described below is attributed\nas `[NonParallelizable]`.\n\nHowever, when projects are built and tested in CIs, all projects are testing in parallel. This means, for example, you can have two or more assemblies running tests such as one backing up or restoring\na resource while another assembly's tests are trying to use that resource. The service may return an error like HTTP 409.\n\nTo isolate one or more projects so that they are tested serially, add a _service.projects_ file to your service directory e.g., _sdk/keyvault/service.projects_ with content like the following to set the\n`TestInParallel` metadata to `false`:\n\n```xml\n<Project>\n  <ItemGroup>\n    <ProjectReference Update=\"$(MSBuildThisFileDirectory)Azure.Security.KeyVault.Administration/tests/*.csproj\">\n        <TestInParallel>false</TestInParallel>\n    </ProjectReference>\n  </ItemGroup>\n</Project>\n```\n\n### TokenCredential\n\nIf a test or sample uses `TokenCredential` to construct the client use `TestEnvironment.Credential`. This will ensure that the service principal used to provision the test resources will be used to authorize the service requests when running in `Record` mode.\n\n``` C#\npublic abstract class KeysTestBase : RecordedTestBase<KeyVaultTestEnvironment>\n{\n    internal KeyClient GetClient() =>\n        InstrumentClient(\n            new KeyClient(\n                new Uri(TestEnvironment.KeyVaultUrl),TestEnvironment.Credential,\n                InstrumentClientOptions(\n                    new KeyClientOptions())));\n}\n```\n\n### Ignoring intermittent service errors\n\nIf your live tests are impacted by temporary or intermittent services errors, be sure the service team is aware and has a plan to address the issues.\nIf these issues cannot be resolved, you can attribute test classes or test methods with `[IgnoreServiceError]` which takes a required HTTP status code, Azure service error, and optional error message substring.\nThis attribute, when used with `RecordedTestBase`-derived test fixtures`, will mark tests that failed with that specific error as \"inconclusive\", along with an optional reason you specify and the original error information.\n\n### Debugging Test Proxy\n\nThe Test Proxy and Test Framework include detailed error messages for test failures. However, there will  always be times where it is necessary to debug to figure out what is going wrong, particularly if the issue actually exists in the Test Framework or Test Proxy code rather than in your test or client library.\n\nIn order to enable debug mode, set the `UseLocalDebugProxy` property to true in your class that inherits from `RecordedTestBase`:\n\n```C#\npublic KeyClientLiveTests(bool isAsync, KeyClientOptions.ServiceVersion serviceVersion)\n    : this(isAsync, serviceVersion, null /* RecordedTestMode.Record /* to re-record */)\n{\n    UseLocalDebugProxy = true;\n}\n```\n\nIn order to debug the test proxy, you will need to clone the [azure-sdk-tools](https://github.com/Azure/azure-sdk-tools) repo. The best practice is to first create a fork of the repo, and then clone your fork locally.\n\nOnce you have cloned the repo, open the [Test Proxy solution](https://github.com/Azure/azure-sdk-tools/blob/main/tools/test-proxy/Azure.Sdk.Tools.TestProxy.sln) in your IDE.\n\nIf you are attempting to debug `Playback` mode, set a breakpoint in the HandlePlaybackRequest method of [RecordingHandler](https://github.com/Azure/azure-sdk-tools/blob/main/tools/test-proxy/Azure.Sdk.Tools.TestProxy/RecordingHandler.cs). If you are attempting to debug `Record` mode, set a breakpoint in the `HandleRecordRequestAsync` method of [RecordingHandler](https://github.com/Azure/azure-sdk-tools/blob/main/tools/test-proxy/Azure.Sdk.Tools.TestProxy/RecordingHandler.cs). It may also be helpful to put breakpoints in [Admin.cs](https://github.com/Azure/azure-sdk-tools/blob/main/tools/test-proxy/Azure.Sdk.Tools.TestProxy/Admin.cs) to verify that your sanitizers are being added as expected.\n\nWith your breakpoints set, run the Test Proxy project, and then run your test that you are trying to debug. You should see your breakpoints hit.\n\nThe key integration points between the Test Framework and the Test Proxy are:\n - InstrumentClientOptions method of `RecordedTestBase` - calling this on your client options will set the [ClientOptions.Transport property](https://learn.microsoft.com/dotnet/api/azure.core.clientoptions.transport?view=azure-dotnet) to be [ProxyTransport](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core.TestFramework/src/ProxyTransport.cs) to your client options when in `Playback` or `Record` mode. The ProxyTransport will send all requests to the Test Proxy.\n - [TestProxy.cs](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core.TestFramework/src/TestProxy.cs) - This class is responsible for starting and stopping the Test Proxy process, as well as reporting any errors that occur in the Test Proxy process. The Test Proxy process is started automatically when running tests in `Record` or `Playback` mode, and is stopped automatically when the test run is complete. The Test Proxy process is shared between tests and test classes within a process.\n\n## Unit tests\n\nThe Test Framework provides several classes that can help you write unit tests for your client library.  Unit tests are helpful for scenarios that would be tricky to test with a recorded test, such as simulating certain error scenarios.\n\nThe key types that are useful here are [MockResponse](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core.TestFramework/src/MockResponse.cs), [MockTransport](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core.TestFramework/src/MockTransport.cs), and [MockCredential](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core.TestFramework/src/MockCredential.cs).\n\nHere is an example of how these types can be used to write a test that validates an error scenario is handled correctly:\n\n```C#\n[Test]\npublic async Task AuthorizationHeadersAddedOnceWithRetries()\n{\n    // arrange\n    var finalResponse = new MockResponse(200);\n    var setting = new ConfigurationSetting\n    {\n        Key = \"test-key\",\n        Value = \"test-value\"\n    };\n    finalResponse.SetContent(JsonSerializer.Serialize(setting));\n\n    // The MockTransport allows us to specify the set of responses that will be returned\n    // by the transport. In this case, we are specifying that the first request will\n    // return a 503 - which is retriable, and the second request will return a 200.\n    var mockTransport = new MockTransport(new MockResponse(503), finalResponse);\n    var options = new ConfigurationClientOptions\n    {\n        Transport = mockTransport\n    };\n    var credential = new MockCredential();\n    var uri = new Uri(\"https://localHost\");\n    var client = new ConfigurationClient(uri, credential, options);\n\n    // act\n    await client.GetConfigurationSettingAsync(setting.Key, setting.Label);\n\n    // We can access the requests that were sent by the client using the Requests property\n    var retriedRequest = mockTransport.Requests[1];\n\n    // assert\n    Assert.True(retriedRequest.Headers.TryGetValues(\"Authorization\", out var authorizationHeaders));\n    Assert.AreEqual(1, authorizationHeaders.Count());\n}\n```\n\n## Test settings\n\nTest settings can be configured via `.runsettings` files. See [nunit.runsettings](https://github.com/Azure/azure-sdk-for-net/blob/main/eng/nunit.runsettings) for available knobs.\n\nThere are two ways to work with `.runsettings`. Both are picked up by Visual Studio without restart.\n\n- You can edit [nunit.runsettings](https://github.com/Azure/azure-sdk-for-net/blob/main/eng/nunit.runsettings) locally to achieve desired configuration.\n- You can prepare few copies of `.runsettings` by cloning [nunit.runsettings](https://github.com/Azure/azure-sdk-for-net/blob/main/eng/nunit.runsettings).\n\nLoad them in Visual Studio (`Test>Configure Run Settings` menu) and switch between them. This option requires setting an environment variable `AZURE_SKIP_DEFAULT_RUN_SETTINGS=true`.\n\n### Support multi service version testing\n\nTo enable multi-version testing, add the `ClientTestFixture` attribute containing all of the service versions to the test class itself or a base class:\n\n```C#\n[ClientTestFixture(\n    BlobClientOptions.ServiceVersion.V2019_02_02,\n    BlobClientOptions.ServiceVersion.V2019_07_07)]\npublic abstract class BlobTestBase : StorageTestBase\n{\n    private readonly BlobClientOptions.ServiceVersion _serviceVersion;\n\n    public BlobTestBase(bool async, BlobClientOptions.ServiceVersion serviceVersion, RecordedTestMode? mode = null)\n        : base(async, mode)\n    {\n        _serviceVersion = serviceVersion;\n    }\n\n    // ...\n}\n```\n**Whenever a new ServiceVersion is added to the client library, the test class should be updated to include it.**\n\nThe `ServiceVersion` must be either an Enum that is convertible to an Int32 or a string in the format of a date with an optional preview qualifier `yyyy-MM-dd[-preview]`.\nThe list passed into `ClientTestFixture` must be homogenous.\n\nBy default these versions will only apply to live tests.  There is an overloaded constructor which adds a flag `recordAllVersions` to apply these versions to record and playback as well.\nIf this flag is set to true you will now get a version qualifier string added to the file name.\n\nAdd a `ServiceVersion` parameter to the test class constructor and use the provided service version to create the `ClientOptions` instance.\n\n```C#\npublic BlobClientOptions GetOptions() =>\n    new BlobClientOptions(_serviceVersion) { /* ... */ };\n```\n\nFor Management plane setting this in the client options is handled by default in the `ManagementRecordedTestBase` class by calling the new constructor which takes in the ResourceType and apiVersion to use.\n\n```C#\n        public ResourceGroupOperationsTests(bool isAsync, string apiVersion)\n            : base(isAsync, ResourceGroupResource.ResourceType, apiVersion)\n        {\n        }\n```\n\nTo control what service versions a test will run against, use the `ServiceVersion` attribute by setting it's `Min` or `Max` properties (inclusive).\n\n```C#\n[Test]\n[ServiceVersion(Min = BlobClientOptions.ServiceVersion.V2019_02_02)]\npublic async Task UploadOverwritesExistingBlob()\n{\n    // ...\n}\n```\n\nHow it looks it the test explorer:\n\n![image](https://user-images.githubusercontent.com/1697911/72942831-52c7ca00-3d29-11ea-9b7e-2e54198d800d.png)\n\n__Note:__ If test recordings are enabled, the recordings will be generated against the latest version of the service.\n\n### Support for an additional test parameter\n\nThe `ClientTestFixture` attribute also supports specifying an additional array of parameter values to send to the test class.\nSimilar to the service versions, this results in the creation of a permutation of each test for each parameter value specified.\nExample usage is shown below:\n\n```c#\n// Add a new test suite parameter with no serviceVersions variants\n[ClientTestFixture(\n    serviceVersions: default,\n    additionalParameters: new object[] { TableEndpointType.Storage, TableEndpointType.CosmosTable })]\npublic class TableServiceLiveTestsBase : RecordedTestBase<TablesTestEnvironment>\n{\n    protected readonly TableEndpointType _endpointType;\n\n    public TableServiceLiveTestsBase(bool isAsync, TableEndpointType endpointType, RecordedTestMode recordedTestMode)\n        : base(isAsync, recordedTestMode)\n    {\n        _endpointType = endpointType;\n    }\n}\n```\n\n```c#\n// Both serviceVersions variants and a new test suite parameter\n[ClientTestFixture(\n    serviceVersions: new object[] { TableClientOptions.ServiceVersion.V2019_02_02, TableClientOptions.ServiceVersion.V2019_07_07 },\n    additionalParameters: new object[] { TableEndpointType.Storage, TableEndpointType.CosmosTable })]\npublic class TableServiceLiveTestsBase : RecordedTestBase<TablesTestEnvironment>\n{\n    protected readonly TableEndpointType _endpointType;\n    TableClientOptions.ServiceVersion _serviceVersion\n\n    public TableServiceLiveTestsBase(bool isAsync, TableClientOptions.ServiceVersion serviceVersion, TableEndpointType endpointType, RecordedTestMode recordedTestMode)\n        : base(isAsync, recordedTestMode)\n    {\n        _serviceVersion = serviceVersion;\n        _endpointType = endpointType;\n    }\n}\n```\n\n__Note:__ Additional parameter options work with test recordings and will create differentiated SessionRecords test class directory names for each additional parameter option.\nFor example:\n\n`/SessionRecords/TableClientLiveTests(CosmosTable)/CreatedCustomEntitiesCanBeQueriedWithFiltersAsync.json`\n`/SessionRecords/TableClientLiveTests(Storage)/CreatedCustomEntitiesCanBeQueriedWithFiltersAsync.json`\n\n## Management libraries\n\nTesting of management libraries uses the Test Framework and should generally be very similar to tests that you write for data plane libraries. There is an intermediate test class that you will likely want to derive from that lives within the management code base - [ManagementRecordedTestBase](https://github.com/Azure/azure-sdk-for-net/blob/babee31b3151e4512ac5a77a55c426c136335fbb/common/ManagementTestShared/ManagementRecordedTestBase.cs). To see examples of Track 2 Management tests using the Test Framework, take a look at the [Storage tests](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/storage/Azure.ResourceManager.Storage/tests/Tests).\n\nFor details about testing management libraries, see [Test .NET management plane SDK](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/TestGuide.md).\n\n## Recording data plane tests on CI\n\nTest framework provides an ability to re-record tests remotely using an Azure DevOps test pipeline. To re-record tests you need to have an open GitHub pull request.\n\nTo start recording invoke the `Start-DevOpsRecordings.ps1` script passing the PR number and sdk directories to re-record:\n\n```powershell\n> .\\eng\\scripts\\Start-DevOpsRecordings.ps1 14153 storage iot tables\n```\n\nThe `Start-DevOpsRecordings.ps1` would cancel all active recording runs unless `-NoCancel` switch is used.\n\nAfter runs finish an artifact with recordings will be published.\n\nTo download and unpack all artifacts use the `Download-DevOpsRecordings.ps1` script passing the PR number.\n\n```powershell\n> .\\eng\\scripts\\Download-DevOpsRecordings.ps1 14153\n```\n\nThe `Download-DevOpsRecordings.ps1` would wait for active runs to finish before retrieving artifacts unless `-NoWait` switch is used.\n\n__NOTE:__ these scripts require being [signed in with Azure CLI](https://docs.microsoft.com/cli/azure/authenticate-azure-cli?view=azure-cli-latest) and access to the [internal DevOps project](https://dev.azure.com/azure-sdk/internal/).\n\n### Note on private/non-virtual fields in your clients (such as _clientDiagnostics) and InternalsVisibleTo\n\nSome bindings require code on the customized side to access fields that are generated. For example:\n\n```csharp\n    // Generated\\SparkSessionClient.cs\n    public partial class SparkSessionClient\n    {\n        private readonly ClientDiagnostics _clientDiagnostics;\n        ...\n    }\n```\n\n```csharp\n    // Customization\\SparkSessionClient.cs\n    internal virtual Response<SparkSession> GetSparkSession(int sessionId, bool? detailed = null, CancellationToken cancellationToken = default)\n    {\n        using var scope = _clientDiagnostics.CreateScope(\"SparkSessionClient.GetSparkSession\");\n        ...\n    }\n```\n\nFor this to work with tests, your test class must have an `InternalsVisibleTo` in your `AssemblyInfo.cs`:\n\n```csharp\n[assembly: InternalsVisibleTo(\"DynamicProxyGenAssembly2, PublicKey=0024000004800000940000000602000000240000525341310004000001000100c547cac37abd99c8db225ef2f6c8a3602f3b3606cc9891605d02baa56104f4cfc0734aa39b93bf7852f7d9266654753cc297e7d2edfe0bac1cdcf9f717241550e0a7b191195b7667bb4f64bcb8e2121380fd1d9d46ad2d92d2d15605093924cceaf74c4861eff62abf69b9291ed0a340e113be11e6a7d3113e92484cf7045cc7\")]\n```\n\nIf this is neglected, _clientDiagnostics will be null at test runtime.\n\n## Miscellaneous\n\n- You can use `Recording.GenerateId()` to generate repeatable random IDs.\n\n- You should only use `Recording.Random` for random values (and you MUST make the same number of random calls in the same order every test run)\n\n- You can use `Recording.Now` and `Recording.UtcNow` if you need to use date or time values that will be included in the recording.\n\n- It's possible to add additional recording variables for advanced scenarios (like custom test configuration, etc.) by using `Recording.SetVariable` or `Recording.GetVariable`.\n\n- You can use `if (Mode == RecordingMode.Playback) { ... }` to change behavior for playback only scenarios (in particular to make polling times instantaneous)\n\n- You can use `using (Recording.DisableRecording()) { ... }` to disable recording in the code block (useful for polling methods)\n\n- In order to observe test network traffic with Fiddler, you can either set the `AZURE_ENABLE_FIDDLER` environment variable or the `EnableFiddler` [runsetting](https://github.com/Azure/azure-sdk-for-net/blob/main/eng/nunit.runsettings) parameter to `true`.\n\nSeveral classes that are useful when writing tests for the Azure SDK are highlighted below:\n\n### TestEnvVar\n\n[TestEnvVar](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core.TestFramework/src/TestEnvVar.cs) allows you to wrap a block of code with a using statement inside which the configured Environment variables will be set to your supplied values.\nIt ensures that the existing value of any configured environment variables are preserved before they are set them and restores them outside the scope of the using block.\n\n```c#\nusing (var _ = new TestEnvVar(\"AZURE_TENANT_ID\", \"foo\"))\n{\n    // Test code that relies on the value of AZURE_TENANT_ID\n}\n\n// The previous value of AZURE_TENANT_ID is set again here.\n```\n\n### TestAppContextSwitch\n\n[TestAppContextSwitch](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core.TestFramework/src/TestAppContextSwitch.cs) allows you to wrap a block of code with a using statement inside which the configured [AppContext](https://docs.microsoft.com/dotnet/api/system.appcontext) switch will be set to your supplied values.\nIt ensures that the existing value of any configured switches are preserved before they are set them and restores them outside the scope of the using block.\nNote: Even if an `AppContext` switch was un-set prior to setting it via `TestAppContextSwitch`, it will be unset after leaving the scope of the using block.\n\n```c#\nvar isSet = AppContext.TryGetSwitch(\"Azure.Core.Pipeline.DisableHttpWebRequestTransport\", out val))\n// isSet is false\n\nusing (var _ = new TestAppContextSwitch(\"Azure.Core.Pipeline.DisableHttpWebRequestTransport\", \"true\"))\n{\n    var isSet = AppContext.TryGetSwitch(\"Azure.Core.Pipeline.DisableHttpWebRequestTransport\", out val))\n    // isSet is true\n    // val is true\n\n}\n\nvar isSet = AppContext.TryGetSwitch(\"Azure.Core.Pipeline.DisableHttpWebRequestTransport\", out val))\n// isSet is false\n```\n\n### AsyncAssert\n\nThis type contains static helper methods that cover some of the gaps in NUnit when it comes to async assertions. For instance, attempting to assert that a specific exception is thrown using Assert.That, Assert.Throws, or Assert.ThrowsAsync all result in sync over async code, which can lead to test flakiness.\n\n```c#\nServiceBusException exception = await AsyncAssert.ThrowsAsync<ServiceBusException>(\n    async () => await args.CompleteMessageAsync(message, args.CancellationToken));\nAssert.AreEqual(ServiceBusFailureReason.MessageLockLost, exception.Reason);\n```\n",
        "repo_name": "core/Azure.Core.TestFramework",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core.TestFramework",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Core shared client library for .NET\n\nAzure.Core provides shared primitives, abstractions, and helpers for modern .NET Azure SDK client libraries.\nThese libraries follow the [Azure SDK Design Guidelines for .NET](https://azure.github.io/azure-sdk/dotnet_introduction.html)\nand can be easily identified by package and namespaces names starting with 'Azure', e.g. `Azure.Storage.Blobs`.\nA more complete list of client libraries using Azure.Core can be found [here](https://github.com/Azure/azure-sdk-for-net#core-services).\n\nAzure.Core allows client libraries to expose common functionality in a consistent fashion,\nso that once you learn how to use these APIs in one client library, you will know how to use them in other client libraries.\n\n[Source code][source] | [Package (NuGet)][package] | [API reference documentation][docs]\n\n## Getting started\n\nTypically, you will not need to install Azure.Core;\nit will be installed for you when you install one of the client libraries using it.\nIn case you want to install it explicitly (to implement your own client library, for example),\nyou can find the NuGet package [here](https://www.nuget.org/packages/Azure.Core).\n\n## Key concepts\n\nThe main shared concepts of Azure.Core (and so Azure SDK libraries using Azure.Core) include:\n\n- Configuring service clients, e.g. configuring retries, logging (`ClientOptions`).\n- Accessing HTTP response details (`Response`, `Response<T>`).\n- Calling long-running operations (`Operation<T>`).\n- Paging and asynchronous streams (`AsyncPageable<T>`).\n- Exceptions for reporting errors from service requests in a consistent fashion. (`RequestFailedException`).\n- Customizing requests (`RequestContext`).\n- Abstractions for representing Azure SDK credentials. (`TokenCredentials`).\n\nBelow, you will find sections explaining these shared concepts in more detail.\n\n### Thread safety\n\nWe guarantee that all client instance methods are thread-safe and independent of each other ([guideline](https://azure.github.io/azure-sdk/dotnet_introduction.html#dotnet-service-methods-thread-safety)). This ensures that the recommendation of reusing client instances is always safe, even across threads.\n\n### Additional concepts\n<!-- CLIENT COMMON BAR -->\n[Client options](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#configuring-service-clients-using-clientoptions) |\n[Accessing the response](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#accessing-http-response-details-using-responset) |\n[Long-running operations](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#consuming-long-running-operations-using-operationt) |\n[Handling failures](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#reporting-errors-requestfailedexception) |\n[Diagnostics](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md) |\n[Mocking](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#mocking) |\n[Client lifetime](https://devblogs.microsoft.com/azure-sdk/lifetime-management-and-thread-safety-guarantees-of-azure-sdk-net-clients/)\n<!-- CLIENT COMMON BAR -->\n\n## Examples\n\n**NOTE:** Samples in this file apply only to packages that follow [Azure SDK Design Guidelines](https://azure.github.io/azure-sdk/dotnet_introduction.html). Names of such packages usually start with `Azure`.\n\n### Configuring Service Clients Using `ClientOptions`\n\nAzure SDK client libraries typically expose one or more _service client_ types that\nare the main starting points for calling corresponding Azure services.\nYou can easily find these client types as their names end with the word _Client_.\nFor example, `BlockBlobClient` can be used to call blob storage service,\nand `KeyClient` can be used to access Key Vault service cryptographic keys.\n\nThese client types can be instantiated by calling a simple constructor,\nor its overload that takes various configuration options.\nThese options are passed as a parameter that extends `ClientOptions` class exposed by Azure.Core.\nVarious service specific options are usually added to its subclasses, but a set of SDK-wide options are\navailable directly on `ClientOptions`.\n\n```C# Snippet:ConfigurationHelloWorld\nSecretClientOptions options = new SecretClientOptions()\n{\n    Retry =\n    {\n        Delay = TimeSpan.FromSeconds(2),\n        MaxRetries = 10,\n        Mode = RetryMode.Fixed\n    },\n    Diagnostics =\n    {\n        IsLoggingContentEnabled = true,\n        ApplicationId = \"myApplicationId\"\n    }\n};\n\nSecretClient client = new SecretClient(new Uri(\"http://example.com\"), new DefaultAzureCredential(), options);\n```\n\nMore on client configuration in [client configuration samples](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Configuration.md).\n\n### Accessing HTTP Response Details Using `Response<T>`\n\n_Service clients_ have methods that can be used to call Azure services. We refer to these client methods _service methods_.\n_Service methods_ return a shared Azure.Core type `Response<T>` (in rare cases its non-generic sibling, a raw `Response`).\nThis type provides access to both the deserialized result of the service call,\nand to the details of the HTTP response returned from the server.\n\n```C# Snippet:ResponseTHelloWorld\n// create a client\nvar client = new SecretClient(new Uri(\"http://example.com\"), new DefaultAzureCredential());\n\n// call a service method, which returns Response<T>\nResponse<KeyVaultSecret> response = await client.GetSecretAsync(\"SecretName\");\n\n// Response<T> has two main accessors.\n// Value property for accessing the deserialized result of the call\nKeyVaultSecret secret = response.Value;\n\n// .. and GetRawResponse method for accessing all the details of the HTTP response\nResponse http = response.GetRawResponse();\n\n// for example, you can access HTTP status\nint status = http.Status;\n\n// or the headers\nforeach (HttpHeader header in http.Headers)\n{\n    Console.WriteLine($\"{header.Name} {header.Value}\");\n}\n```\n\nMore on response types in [response samples](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Response.md).\n\n### Setting up console logging\n\nTo create an Azure SDK log listener that outputs messages to console use `AzureEventSourceListener.CreateConsoleLogger` method.\n\n```C# Snippet:ConsoleLogging\n// Setup a listener to monitor logged events.\nusing AzureEventSourceListener listener = AzureEventSourceListener.CreateConsoleLogger();\n```\n\nMore on logging in [diagnostics samples](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md).\n\n### Reporting Errors `RequestFailedException`\n\nWhen a service call fails `Azure.RequestFailedException` would get thrown. The exception type provides a Status property with an HTTP status code and an ErrorCode property with a service-specific error code.\n\n```C# Snippet:RequestFailedException\ntry\n{\n    KeyVaultSecret secret = client.GetSecret(\"NonexistentSecret\");\n}\n// handle exception with status code 404\ncatch (RequestFailedException e) when (e.Status == 404)\n{\n    // handle not found error\n    Console.WriteLine(\"ErrorCode \" + e.ErrorCode);\n}\n```\n\nMore on handling responses in [response samples](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Response.md).\n\n### Consuming Service Methods Returning `AsyncPageable<T>`\n\nIf a service call returns multiple values in pages, it would return `Pageable<T>/AsyncPageable<T>` as a result. You can iterate over `AsyncPageable` directly or in pages.\n\n```C# Snippet:AsyncPageable\n// call a service method, which returns AsyncPageable<T>\nAsyncPageable<SecretProperties> allSecretProperties = client.GetPropertiesOfSecretsAsync();\n\nawait foreach (SecretProperties secretProperties in allSecretProperties)\n{\n    Console.WriteLine(secretProperties.Name);\n}\n```\n\nFor more information on paged responses, see [Pagination with the Azure SDK for .NET](https://docs.microsoft.com/dotnet/azure/sdk/pagination).\n\n### Consuming Long-Running Operations Using `Operation<T>`\n\nSome operations take long time to complete and require polling for their status. Methods starting long-running operations return `*Operation<T>` types.\n\nThe `WaitForCompletionAsync` method is an easy way to wait for operation completion and get the resulting value.\n\n```C# Snippet:OperationCompletion\n// create a client\nSecretClient client = new SecretClient(new Uri(\"http://example.com\"), new DefaultAzureCredential());\n\n// Start the operation\nDeleteSecretOperation operation = await client.StartDeleteSecretAsync(\"SecretName\");\n\nResponse<DeletedSecret> response = await operation.WaitForCompletionAsync();\nDeletedSecret value = response.Value;\n\nConsole.WriteLine(value.Name);\nConsole.WriteLine(value.ScheduledPurgeDate);\n```\n\nMore on long-running operations in [long-running operation samples](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md).\n\n### Customizing Requests Using `RequestContext`\n\nBesides general configuration of _service clients_ through `ClientOptions`, it is possible to customize the requests sent by _service clients_\nusing protocol methods or convenience APIs that expose `RequestContext` as a parameter.\n\n```C# Snippet:SetRequestContext\nvar context = new RequestContext();\ncontext.AddClassifier(404, isError: false);\n\nResponse response = await client.GetPetAsync(\"pet1\", context);\n```\n\nMore on request customization in [RequestContext samples](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/RequestContext.md).\n\n### Mocking\n\nOne of the most important cross-cutting features of our new client libraries using Azure.Core is that they are designed for mocking.\nMocking is enabled by:\n\n- providing a protected parameterless constructor on client types.\n- making service methods virtual.\n- providing APIs for constructing model types returned from virtual service methods. To find these factory methods look for types with the _ModelFactory_ suffix, e.g. `SecretModelFactory`.\n\nFor example, the ConfigurationClient.Get method can be mocked (with [Moq](https://github.com/moq/moq4)) as follows:\n\n```C# Snippet:ClientMock\n// Create a mock response\nvar mockResponse = new Mock<Response>();\n\n// Create a mock value\nvar mockValue = SecretModelFactory.KeyVaultSecret(\n    SecretModelFactory.SecretProperties(new Uri(\"http://example.com\"))\n);\n\n// Create a client mock\nvar mock = new Mock<SecretClient>();\n\n// Setup client method\nmock.Setup(c => c.GetSecret(\"Name\", null, default))\n    .Returns(Response.FromValue(mockValue, mockResponse.Object));\n\n// Use the client mock\nSecretClient client = mock.Object;\nKeyVaultSecret secret = client.GetSecret(\"Name\");\n```\n\nMore on mocking in [mocking samples](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Mocking.md).\n\n## Distributed tracing with Application Insights\n\nApplication Insights, a feature of Azure Monitor, is an extensible Application Performance Management (APM) service for developers and DevOps professionals. Use it to monitor your live applications. It will automatically detect performance anomalies, and includes powerful analytics tools to help you diagnose issues and to understand what users actually do with your app\n\nIf your application already uses ApplicationInsights, automatic collection of Azure SDK traces is supported since version `2.12.0`.\n\nTo setup ApplicationInsights tracking for your application follow the [Start Monitoring Application](https://docs.microsoft.com/azure/azure-monitor/learn/dotnetcore-quick-start) guide.\n\nMore on diagnostics in [diagnostics samples](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md).\n\n## Troubleshooting\n\nThree main ways of troubleshooting failures are [inspecting exceptions](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Response.md#handling-exceptions), enabling [logging](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md#Logging), and [distributed tracing](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md#Distributed-tracing)\n\n## Next steps\n\nExplore and install [available Azure SDK libraries](https://azure.github.io/azure-sdk/releases/latest/dotnet.html).\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct]. For more information see the [Code of Conduct FAQ][code_of_conduct_faq] or contact opencode@microsoft.com with any additional questions or comments.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2Fsdk%2Fcore%2FAzure.Core%2FREADME.png)\n\n[source]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/core/Azure.Core/src\n[package]: https://www.nuget.org/packages/Azure.Core/\n[docs]: https://docs.microsoft.com/dotnet/api/azure.core\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct\n[code_of_conduct_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "core/Azure.Core",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Newtonsoft.Json support for Azure Core shared client library for .NET\n\nThe [Azure.Core package][azure_core_package] contains types shared by the latest Azure SDK client libraries. This `Newtonsoft.Json` compatibility library:\n\n- Contains converters dependent upon the [Newtonsoft.Json][newtonsoft_json_package] package.\n- Enables serialization and deserialization of custom model types using `Newtonsoft.Json`. Those custom model types may then be used with the following client libraries:\n  - [Azure.DigitalTwins.Core][azure_digital_twins_core_package]\n  - [Azure.Search.Documents][azure_search_documents_package]\n\n## Getting started\n\n### Install the package\n\nInstall this package from [NuGet] using the .NET CLI:\n\n```dotnetcli\ndotnet add package Microsoft.Azure.Core.NewtonsoftJson\n```\n\n## Key concepts\n\nThis support package contains the `NewtonsoftJsonObjectSerializer` class which can be passed to some Azure SDKs' client options classes, as shown in the examples below.\n\nThe following converters are added automatically to the `NewtonsoftJsonObjectSerializer` if you do not pass your own `JsonSerializerSettings`:\n\n- `NewtonsoftJsonETagConverter` to convert `Azure.ETag` properties.\n\nSee the example [Using default converters](#using-default-converters) below for getting an instance of `JsonSerializerSettings` with this default list you can then modify as needed.\n\n## Examples\n\nThe [Azure.Search.Documents package][azure_search_documents_package] is used in examples to show how search results can be deserialized. For more information and examples using Azure.Search.Documents, see its [README][azure_search_documents_readme].\n\n### Deserializing models\n\nConsider a custom model class containing information about movies:\n\n```C# Snippet:Microsoft_Azure_Core_NewtonsoftJson_Samples_Readme_Model\npublic class Movie\n{\n    [JsonProperty(\"uuid\")]\n    public string Id { get; private set; } = Guid.NewGuid().ToString();\n\n    public string Title { get; set; }\n\n    public string Description { get; set; }\n\n    public float Rating { get; set; }\n}\n```\n\nOur Azure Cognitive Search index is defined using camelCase fields, and the `Id` field is actually defined as \"uuid\"; however, we can provide an idiomatic model without having to attribute all properties by setting the `JsonSerializerSettings.ContractResolver` property as shown below:\n\n```C# Snippet:Microsoft_Azure_Core_NewtonsoftJson_Samples_Readme_SearchSample\n// Get the Azure Cognitive Search endpoint and read-only API key.\nUri endpoint = new Uri(Environment.GetEnvironmentVariable(\"SEARCH_ENDPOINT\"));\nAzureKeyCredential credential = new AzureKeyCredential(Environment.GetEnvironmentVariable(\"SEARCH_API_KEY\"));\n\n// Create serializer options with default converters for Azure SDKs.\nJsonSerializerSettings serializerSettings = NewtonsoftJsonObjectSerializer.CreateJsonSerializerSettings();\n\n// Serialize property names using camelCase by default.\nserializerSettings.ContractResolver = new CamelCasePropertyNamesContractResolver();\n\nSearchClientOptions clientOptions = new SearchClientOptions\n{\n    Serializer = new NewtonsoftJsonObjectSerializer(serializerSettings)\n};\n\nSearchClient client = new SearchClient(endpoint, \"movies\", credential, clientOptions);\nResponse<SearchResults<Movie>> results = client.Search<Movie>(\"Return of the King\");\n\nforeach (SearchResult<Movie> result in results.Value.GetResults())\n{\n    Movie movie = result.Document;\n\n    Console.WriteLine(movie.Title);\n    Console.WriteLine(movie.Description);\n    Console.WriteLine($\"Rating: {movie.Rating}\\n\");\n}\n```\n\nIf searching an index full of movies, the following may be printed:\n<!-- cspell:word Aragorn Sauron's -->\n```text\nThe Lord of the Rings: The Return of the King\nGandalf and Aragorn lead the World of Men against Sauron's army to draw his gaze from Frodo and Sam as they approach Mount Doom with the One Ring.\nRating: 9.1\n```\n\n### Using default converters\n\nIf you instantiate a `NewtonsoftJsonObjectSerializer` using the default constructor, some converters for common Azure SDKs are added automatically as listed above in [Key concepts](#key-concepts). To modify these default settings, you can create a new `JsonSerializerSettings` like in the following example:\n\n```C# Snippet:Microsoft_Azure_Core_NewtonsoftJson_Samples_Readme_DefaultSerializerSettings\nJsonSerializerSettings serializerSettings = NewtonsoftJsonObjectSerializer.CreateJsonSerializerSettings();\n\n// Serialize property names using camelCase by default.\nserializerSettings.ContractResolver = new CamelCasePropertyNamesContractResolver();\n\n// Add converters as needed, for example, to convert movie genres to an enum.\nserializerSettings.Converters.Add(new StringEnumConverter());\n\nSearchClientOptions clientOptions = new SearchClientOptions\n{\n    Serializer = new NewtonsoftJsonObjectSerializer(serializerSettings)\n};\n```\n\nYou can add or remove converters, set the `ContractResolver`, or any other members of `JsonSerializerSettings` you need.\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct]. For more information see the [Code of Conduct FAQ][code_of_conduct_faq] or contact opencode@microsoft.com with any additional questions or comments.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2Fsdk%2Fcore%2FMicrosoft.Azure.Core.NewtonsoftJson%2FREADME.png)\n\n[azure_core_package]: https://www.nuget.org/packages/Azure.Core/\n[azure_digital_twins_core_package]: https://www.nuget.org/packages/Azure.DigitalTwins.Core\n[azure_search_documents_package]: https://www.nuget.org/packages/Azure.Search.Documents/\n[azure_search_documents_readme]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/search/Azure.Search.Documents/README.md\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct\n[code_of_conduct_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[newtonsoft_json_package]: https://www.nuget.org/packages/Newtonsoft.Json/\n[NuGet]: https://www.nuget.org\n",
        "repo_name": "core/Microsoft.Azure.Core.NewtonsoftJson",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Microsoft.Azure.Core.NewtonsoftJson",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Newtonsoft.Json support for Microsoft.Spatial library for .NET\n\nThe [Microsoft.Spatial package][microsoft_spatial_package] contains classes and methods that support geographic and geometric operations. This library contains converters dependent on the [Newtonsoft.Json package][newtonsoft_json_package] for use with Microsoft.Spatial when using the Azure SDK for .NET.\n\n## Getting started\n\nInstall this package if you use the Microsoft.Spatial package in your application and want to serialize supported classes with Newtonsoft.Json.\n\n### Install the package\n\nInstall this package from [NuGet] using the .NET CLI:\n\n```dotnetcli\ndotnet add package Microsoft.Azure.Core.Spatial.NewtonsoftJson\n```\n\n## Key concepts\n\nThis support package contains the `NewtonsoftJsonMicrosoftSpatialGeoJsonConverter` class which can be added to [JsonSerializerSettings] to deserialize geographic objects like `GeographyPoint`. This converter can be used with Azure SDK client libraries as shown in examples below.\n\n## Examples\n\nThe [Azure.Search.Documents package][azure_search_documents_package] is used in examples to show how search results containing geographic points can be deserialized. For more information and examples using Azure.Search.Documents, see its [README][azure_search_documents_readme].\n\n### Deserializing documents\n\nConsider a model class containing information about mountains:\n\n```C# Snippet:Microsoft_Azure_Core_Spatial_NewtonsoftJson_Samples_Readme_Model\npublic class Mountain\n{\n    [SimpleField(IsKey = true)]\n    public string Id { get; set; }\n\n    [SearchableField(IsSortable = true, AnalyzerName = LexicalAnalyzerName.Values.EnLucene)]\n    public string Name { get; set; }\n\n    [SimpleField(IsFacetable = true, IsFilterable = true)]\n    public GeographyPoint Summit { get; set; }\n}\n```\n\nAdding the `NewtonsoftJsonMicrosoftSpatialGeoJsonConverter` class to serializer options will correctly deserialize the summit location:\n\n```C# Snippet:Microsoft_Azure_Core_Spatial_NewtonsoftJson_Samples_Readme_SearchSample\n// Get the Azure Cognitive Search endpoint and read-only API key.\nUri endpoint = new Uri(Environment.GetEnvironmentVariable(\"SEARCH_ENDPOINT\"));\nAzureKeyCredential credential = new AzureKeyCredential(Environment.GetEnvironmentVariable(\"SEARCH_API_KEY\"));\n\n// Create serializer options with our converter to deserialize geographic points.\nJsonSerializerSettings serializerSettings = new JsonSerializerSettings\n{\n    ContractResolver = new CamelCasePropertyNamesContractResolver(),\n    Converters =\n    {\n        new NewtonsoftJsonMicrosoftSpatialGeoJsonConverter()\n    }\n};\n\nSearchClientOptions clientOptions = new SearchClientOptions\n{\n    Serializer = new NewtonsoftJsonObjectSerializer(serializerSettings)\n};\n\nSearchClient client = new SearchClient(endpoint, \"mountains\", credential, clientOptions);\nResponse<SearchResults<Mountain>> results = client.Search<Mountain>(\"Rainier\");\n\nforeach (SearchResult<Mountain> result in results.Value.GetResults())\n{\n    Mountain mountain = result.Document;\n    Console.WriteLine(\"https://www.bing.com/maps?cp={0}~{1}&sp=point.{0}_{1}_{2}\",\n        mountain.Summit.Latitude,\n        mountain.Summit.Longitude,\n        Uri.EscapeDataString(mountain.Name));\n}\n```\n\nIf searching an index full of mountains, the following may be printed:\n\n```text\nhttps://www.bing.com/maps?cp=46.85287~-121.76044&sp=point.46.85287_-121.76044_Mount%20Rainier\n```\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct]. For more information see the [Code of Conduct FAQ][code_of_conduct_faq] or contact opencode@microsoft.com with any additional questions or comments.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2Fsdk%2Fcore%2FMicrosoft.Azure.Core.NewtonsoftJson%2FREADME.png)\n\n[azure_search_documents_package]: https://www.nuget.org/packages/Azure.Search.Documents/\n[azure_search_documents_readme]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/search/Azure.Search.Documents/README.md\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct\n[code_of_conduct_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[JsonSerializerSettings]: https://www.newtonsoft.com/json/help/html/T_Newtonsoft_Json_JsonSerializerSettings.htm\n[microsoft_spatial_package]: https://www.nuget.org/packages/Microsoft.Spatial/\n[newtonsoft_json_package]: https://www.nuget.org/packages/Newtonsoft.Json/\n[NuGet]: https://www.nuget.org\n",
        "repo_name": "core/Microsoft.Azure.Core.Spatial.NewtonsoftJson",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Microsoft.Azure.Core.Spatial.NewtonsoftJson",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# System.Text.Json support for Microsoft.Spatial library for .NET\n\nThe [Microsoft.Spatial package][microsoft_spatial_package] contains classes and methods that support geographic operations. This library contains converters dependent on System.Text.Json for use with Microsoft.Spatial when using the Azure SDK for .NET.\n\n## Getting started\n\nInstall this package if you use the Microsoft.Spatial package in your application and want to serialize supported classes with System.Text.Json.\n\n### Install the package\n\nInstall this package from [NuGet] using the .NET CLI:\n\n```dotnetcli\ndotnet add package Microsoft.Azure.Core.Spatial\n```\n\n## Key concepts\n\nThis support package contains the `MicrosoftSpatialGeoJsonConverter` class which can be added to [JsonSerializerOptions] to deserialize geographic objects like `GeographyPoint`. This converter can be used with Azure SDK client libraries as shown in examples below.\n\n## Examples\n\nThe [Azure.Search.Documents package][azure_search_documents_package] is used in examples to show how search results containing geographic points can be deserialized. For more information and examples using Azure.Search.Documents, see its [README][azure_search_documents_readme].\n\n### Deserializing documents\n\nConsider a model class containing information about mountains:\n\n```C# Snippet:Microsoft_Azure_Core_Spatial_Samples_Readme_Model\npublic class Mountain\n{\n    [SimpleField(IsKey = true)]\n    public string Id { get; set; }\n\n    [SearchableField(IsSortable = true, AnalyzerName = LexicalAnalyzerName.Values.EnLucene)]\n    public string Name { get; set; }\n\n    [SimpleField(IsFacetable = true, IsFilterable = true)]\n    public GeographyPoint Summit { get; set; }\n}\n```\n\nAdding the `MicrosoftSpatialGeoJsonConverter` class to serializer options will correctly deserialize the summit location:\n\n```C# Snippet:Microsoft_Azure_Core_Spatial_Samples_Readme_SearchSample\n// Get the Azure Cognitive Search endpoint and read-only API key.\nUri endpoint = new Uri(Environment.GetEnvironmentVariable(\"SEARCH_ENDPOINT\"));\nAzureKeyCredential credential = new AzureKeyCredential(Environment.GetEnvironmentVariable(\"SEARCH_API_KEY\"));\n\n// Create serializer options with our converter to deserialize geographic points.\nJsonSerializerOptions serializerOptions = new JsonSerializerOptions\n{\n    Converters =\n    {\n        new MicrosoftSpatialGeoJsonConverter()\n    },\n    PropertyNamingPolicy = JsonNamingPolicy.CamelCase\n};\n\nSearchClientOptions clientOptions = new SearchClientOptions\n{\n    Serializer = new JsonObjectSerializer(serializerOptions)\n};\n\nSearchClient client = new SearchClient(endpoint, \"mountains\", credential, clientOptions);\nResponse<SearchResults<Mountain>> results = client.Search<Mountain>(\"Rainier\");\n\nforeach (SearchResult<Mountain> result in results.Value.GetResults())\n{\n    Mountain mountain = result.Document;\n    Console.WriteLine(\"https://www.bing.com/maps?cp={0}~{1}&sp=point.{0}_{1}_{2}\",\n        mountain.Summit.Latitude,\n        mountain.Summit.Longitude,\n        Uri.EscapeDataString(mountain.Name));\n}\n```\n\nIf searching an index full of mountains, the following may be printed:\n\n```text\nhttps://www.bing.com/maps?cp=46.85287~-121.76044&sp=point.46.85287_-121.76044_Mount%20Rainier\n```\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct]. For more information see the [Code of Conduct FAQ][code_of_conduct_faq] or contact opencode@microsoft.com with any additional questions or comments.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2Fsdk%2Fcore%2FMicrosoft.Azure.Core.NewtonsoftJson%2FREADME.png)\n\n[azure_search_documents_package]: https://www.nuget.org/packages/Azure.Search.Documents/\n[azure_search_documents_readme]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/search/Azure.Search.Documents/README.md\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct\n[code_of_conduct_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[JsonSerializerOptions]: https://docs.microsoft.com/dotnet/api/system.text.json.jsonserializeroptions\n[microsoft_spatial_package]: https://www.nuget.org/packages/Microsoft.Spatial/\n[NuGet]: https://www.nuget.org\n",
        "repo_name": "core/Microsoft.Azure.Core.Spatial",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Microsoft.Azure.Core.Spatial",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "#  System.Memory.Data library for .NET\n\n## Binary Data\n The `BinaryData` type provides a lightweight abstraction for a payload of bytes. It provides convenient helper methods to get out commonly used primitives, such as streams, strings, or bytes. The assumption when converting to and from string is that the encoding is UTF-8.\n \n ### Data ownership\n When using the `byte[]` or `ReadOnlyMemory<byte>` constructors or methods, `BinaryData` will wrap the passed in bytes. When using streams, strings, or rich model types that will be serialized as Json, the data is converted into bytes and will be maintained by `BinaryData`. Thus, if you are using bytes to create your instance of `BinaryData`, changes to the underlying data will be reflected in `BinaryData` as it does not copy the bytes.\n\n ### Usage\n The main value of this type is its ability to easily convert from string to bytes to stream. This can greatly simplify API surface areas by exposing this type as opposed to numerous overloads or properties.\n \nTo/From string:\n```C# Snippet:BinaryDataToFromString\nvar data = new BinaryData(\"some data\");\n\n// ToString will decode the bytes using UTF-8\nConsole.WriteLine(data.ToString()); // prints \"some data\"\n```\n \n To/From bytes:\n```C# Snippet:BinaryDataToFromBytes\nbyte[] bytes = Encoding.UTF8.GetBytes(\"some data\");\n\n// Create BinaryData using a constructor ...\nBinaryData data = new BinaryData(bytes);\n\n// Or using a static factory method.\ndata = BinaryData.FromBytes(bytes);\n\n// There is an implicit cast defined for ReadOnlyMemory<byte>\nReadOnlyMemory<byte> rom = data;\n\n// There is also an implicit cast defined for ReadOnlySpan<byte>\nReadOnlySpan<byte> ros = data;\n\n// there is also a ToMemory method that gives access to the ReadOnlyMemory.\nrom = data.ToMemory();\n\n// and a ToArray method that converts into a byte array.\nbyte[] array = data.ToArray();\n```\nTo/From stream:\n```C# Snippet:BinaryDataToFromStream\nvar bytes = Encoding.UTF8.GetBytes(\"some data\");\nStream stream = new MemoryStream(bytes);\nvar data = BinaryData.FromStream(stream);\n\n// Calling ToStream will give back a stream that is backed by ReadOnlyMemory, so it is not writable.\nstream = data.ToStream();\nConsole.WriteLine(stream.CanWrite); // prints false\n```\n\n `BinaryData` also can be used to integrate with `ObjectSerializer`. By default, the `JsonObjectSerializer` will be used, but any serializer deriving from `ObjectSerializer` can be used.\n```C# Snippet:BinaryDataToFromCustomModel\nvar model = new CustomModel\n{\n    A = \"some text\",\n    B = 5,\n    C = true\n};\n\nvar data = BinaryData.FromObjectAsJson(model);\nmodel = data.ToObjectFromJson<CustomModel>();\n```\n\n\n\n",
        "repo_name": "core/System.Memory.Data",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/System.Memory.Data",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Cosmos DB management client library for .NET\n\nMicrosoft Azure Cosmos DB is a fully managed NoSQL database for modern app development. Single-digit millisecond response times, and automatic and instant scalability, guarantee speed at any scale.\n\nThis library supports managing Microsoft Azure Automation resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Cosmos DB management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.CosmosDB\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "cosmosdb/Azure.ResourceManager.CosmosDB",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/cosmosdb/Azure.ResourceManager.CosmosDB",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure CosmosDBForPostgreSql management client library for .NET\n\nThis library supports managing Microsoft Azure Cosmos DB for PostgreSql resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started\n\n### Install the package\n\nInstall the Microsoft Azure CosmosDBForPostgreSql management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.CosmosDBForPostgreSql --prerelease\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html)\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "cosmosdbforpostgresql/Azure.ResourceManager.CosmosDBForPostgreSql",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/cosmosdbforpostgresql/Azure.ResourceManager.CosmosDBForPostgreSql",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure CostManagement management client library for .NET\n\nThe Cost Management APIs provide the ability to explore cost and usage data via multidimensional analysis, where creating customized filters and expressions allow you to answer consumption-related questions for your Azure resources. These APIs are currently available for Azure Enterprise customers.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure CostManagement management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.CostManagement --prerelease\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html)\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "costmanagement/Azure.ResourceManager.CostManagement",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/costmanagement/Azure.ResourceManager.CostManagement",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Customer Insights management client library for .NET\n\nMicrosoft Azure Customer Insights provides an SaaS service that brings together your enterprise data from multiple sources, and helps you generate 360 degree customer knowledge and insights which your staff can immediately understand and take action on.\n\nThis library supports managing Microsoft Azure Customer Insights resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Customer Insights management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.CustomerInsights --prerelease\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "customer-insights/Azure.ResourceManager.CustomerInsights",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/customer-insights/Azure.ResourceManager.CustomerInsights",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Data Box management client library for .NET\n\nMicrosoft Azure Data Box devices easily move data to Azure when busy networks aren\u2019t an option. Move large amounts of data to Azure when you're limited by time, network availability, or costs, using common copy tools such as Robocopy. All data is AES-encrypted, and the devices are wiped clean after upload, in accordance with NIST Special Publication 800-88 revision 1 standards.\n\nThis library supports managing Microsoft Azure Customer Insights resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Data Box management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.DataBox\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "databox/Azure.ResourceManager.DataBox",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/databox/Azure.ResourceManager.DataBox",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Data Box Edge management client library for .NET\n\nMicrosoft Azure Data Box Edge is a physical network appliance, shipped by Microsoft, that sends data in and out of Azure. Data Box Edge is additionally equipped with AI-enabled edge computing capabilities that help you analyze, process, and transform the on-premises data before uploading it to the cloud.\n\nThis library supports managing Microsoft Azure Data Box Edge resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Data Box Edge management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.DataBoxEdge\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "databoxedge/Azure.ResourceManager.DataBoxEdge",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/databoxedge/Azure.ResourceManager.DataBoxEdge",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Datadog management client library for .NET\n\nMicrosoft Azure Datadog is a monitoring and analytics platform for large-scale applications. It encompasses infrastructure monitoring, application performance monitoring, log management, and user-experience monitoring.\n\nThis library supports managing Microsoft Azure Datadog resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Datadog management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.Datadog --prerelease\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "datadog/Azure.ResourceManager.Datadog",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/datadog/Azure.ResourceManager.Datadog",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Data Factory management client library for .NET\n\nMicrosoft Azure Data Factory is a cloud-based data integration service that orchestrates and automates the movement and transformation of data. \n\nThis library supports managing Microsoft Azure Data Factory resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Data Factory management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.DataFactory --prerelease\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "datafactory/Azure.ResourceManager.DataFactory",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/datafactory/Azure.ResourceManager.DataFactory",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Data Lake Analytics management client library for .NET\n\nMicrosoft Azure Data Lake Analytics is an on-demand analytics job service that simplifies big data. Instead of deploying, configuring, and tuning hardware, you write queries to transform your data and extract valuable insights. The analytics service can handle jobs of any scale instantly by setting the dial for how much power you need. You only pay for your job when it's running, making it cost-effective.\n\nThis library supports managing Microsoft Azure Data Lake Analytics resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Data Lake Analytics management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.DataLakeAnalytics\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "datalake-analytics/Azure.ResourceManager.DataLakeAnalytics",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/datalake-analytics/Azure.ResourceManager.DataLakeAnalytics",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure DataLake Storage management client library for .NET\n\nMicrosoft Azure Data Lake Storage is a massively scalable and secured data lake that helps to achieve high-performance analytics workloads. It eiminates data silos with a single storage platform. Optimize costs with tiered storage and policy management. Authenticate data using Azure Active Directory (Azure AD) and role-based access control (RBAC). And help protect data with security features like encryption at rest and advanced threat protection.\n\nThis library supports managing Microsoft Azure Data Lake Storage resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Azure DataLake Storage management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.DataLakeStore\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "datalake-store/Azure.ResourceManager.DataLakeStore",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/datalake-store/Azure.ResourceManager.DataLakeStore",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Database Migration management client library for .NET\n\nMicrosoft Azure Database Migration Service is a tool that helps you simplify, guide, and automate your database migration to Azure. Easily migrate your data, schema, and objects from multiple sources to the cloud at scale.\n\nThis library supports managing Microsoft Azure Database Migration resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Database Migration management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.DataMigration --prerelease\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "datamigration/Azure.ResourceManager.DataMigration",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/datamigration/Azure.ResourceManager.DataMigration",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Data Protection Backup management client library for .NET\n\nMicrosoft Azure Storage provides data protection, helps you to prepare for scenarios where you need to recover data that has been deleted or overwritten.\n\nThis library supports managing Microsoft Azure Data Protection resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Data Protection Backup management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.DataProtectionBackup\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "dataprotection/Azure.ResourceManager.DataProtectionBackup",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/dataprotection/Azure.ResourceManager.DataProtectionBackup",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Data Share management client library for .NET\n\nMicrosoft Azure Data Share enables organizations to securely share data with multiple customers and partners. Data providers are always in control of the data that they've shared and Azure Data Share makes it simple to manage and monitor what data was shared, when and by whom.\n\nThis library supports managing Microsoft Azure Data Share resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Data Share management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.DataShare\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "datashare/Azure.ResourceManager.DataShare",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/datashare/Azure.ResourceManager.DataShare",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Deployment Manager management client library for .NET\n\nMicrosoft Azure Deployment Manager (ADM) provides a new set of features for Azure Resource Manager and greatly expands your deployment capabilities. ADM allows you to perform staged rollouts of resources, meaning they\u2019re deployed region by region in an ordered fashion.\n\nThis library supports managing Microsoft Azure Deployment Manager resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Deployment Manager management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.DeploymentManager --prerelease\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "deploymentmanager/Azure.ResourceManager.DeploymentManager",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/deploymentmanager/Azure.ResourceManager.DeploymentManager",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Desktop Virtualization management client library for .NET\n\nMicrosoft Azure Virtual Desktop is a desktop and app virtualization service that runs on the cloud.\n\nThis library supports managing Microsoft Azure Desktop Virtualization resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Desktop Virtualization management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.DesktopVirtualization\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "desktopvirtualization/Azure.ResourceManager.DesktopVirtualization",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/desktopvirtualization/Azure.ResourceManager.DesktopVirtualization",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure DevCenter client library for .NET\n\nThe DevCenter client library provides access to manage resources for Microsoft Dev Box and Azure Deployment Environments. This SDK enables managing developer machines and environments in Azure.\n\nUse the client library for Azure DevCenter to:\n> Create, access, manage, and delete [Dev Box](https://learn.microsoft.com/azure/dev-box) resources\n> Create, deploy, manage, and delete [Environment](https://learn.microsoft.com/azure/deployment-environments) resources\n\n  [Source code](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/devcenter/Azure.Developer.DevCenter/src) | [Package (NuGet)](https://www.nuget.org/packages/) | [API reference documentation](https://azure.github.io/azure-sdk-for-net) | [Product documentation](https://docs.microsoft.com/azure)\n\n## Getting started\n\n### Install the package\n\nInstall the client library for .NET with [NuGet](https://www.nuget.org/ ):\n\n```dotnetcli\ndotnet add package Azure.Developer.DevCenter --prerelease\n```\n\n### Prerequisites\n\nYou must have an [Azure subscription](https://azure.microsoft.com/free/dotnet/). In order to take advantage of the C# 8.0 syntax, it is recommended that you compile using the [.NET Core SDK](https://dotnet.microsoft.com/download) 3.0 or higher with a [language version](https://docs.microsoft.com/dotnet/csharp/language-reference/configure-language-version#override-a-default) of `latest`.  It is also possible to compile with the .NET Core SDK 2.1.x using a language version of `preview`.\n\nYou must have [configured](https://learn.microsoft.com/azure/dev-box/quickstart-configure-dev-box-service) a DevCenter, Project, Network Connection, Dev Box Definition, and Pool before you can create Dev Boxes \n\nYou must have configured a DevCenter, Project, Catalog, and Environment Type before you can create Environments\n\n### Authenticate the client\n\nYou can use standard Azure Active Directory [Token Credential authentication](https://learn.microsoft.com/dotnet/api/azure.core.tokencredential) to access the client. The identity interacting with all resources must have a minimum of Read access on the Project resources it is interacting with. The identity managing Dev Boxes must have the [DevCenter Project Admin](https://learn.microsoft.com/azure/dev-box/how-to-project-admin) or [DevCenter Dev Box User](https://learn.microsoft.com/azure/dev-box/how-to-dev-box-user) roles for Dev Box scenarios. These roles can be assigned directly to the project, or inherited from a broader scope (such as the resource group or subscription).\nTo use Azure Active Directory authentication, add the Azure Identity package:\n\n`dotnet add package Azure.Identity`\n\nYou will also need to register a new AAD application, or run locally or in an environment with a managed identity.\nIf using an application, set the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: AZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET.\n\n```\nUri endpoint = new Uri(\"<dev-center-uri>\");\nvar client = new DevCenterClient(endpoint, new DefaultAzureCredential());\n```\n\n## Key concepts\n\nThe library uses three main clients. The `DevCenterClient` provides access to common APIs for interacting with projects and listing resources across projects.\nThe `DevBoxesClient` is scoped to a single project, and provides access to Dev Box resources such as Pools and Dev Boxes.\nThe `EnvironmentsClient` is scoped to a single project, and provides access to Environments resources such as Catalog Items, Environment Types, and Environments.\n\nUse these clients to interact with DevCenter resources based on your scenario.\n\n### Thread safety\n\nWe guarantee that all client instance methods are thread-safe and independent of each other ([guideline](https://azure.github.io/azure-sdk/dotnet_introduction.html#dotnet-service-methods-thread-safety)). This ensures that the recommendation of reusing client instances is always safe, even across threads.\n\n### Additional concepts\n<!-- CLIENT COMMON BAR -->\n[Client options](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#configuring-service-clients-using-clientoptions) |\n[Accessing the response](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#accessing-http-response-details-using-responset) |\n[Long-running operations](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#consuming-long-running-operations-using-operationt) |\n[Handling failures](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#reporting-errors-requestfailedexception) |\n[Diagnostics](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md) |\n[Mocking](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#mocking) |\n[Client lifetime](https://devblogs.microsoft.com/azure-sdk/lifetime-management-and-thread-safety-guarantees-of-azure-sdk-net-clients/)\n<!-- CLIENT COMMON BAR -->\n\n## Examples\n\nYou can familiarize yourself with different APIs using [Samples](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/devcenter/Azure.Developer.DevCenter/samples).\n\n### Build a client and get projects\n```C# Snippet:Azure_DevCenter_GetProjects_Scenario\nvar credential = new DefaultAzureCredential();\nvar devCenterClient = new DevCenterClient(endpoint, credential);\nstring targetProjectName = null;\nawait foreach (BinaryData data in devCenterClient.GetProjectsAsync(filter: null, maxCount: 1))\n{\n    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;\n    targetProjectName = result.GetProperty(\"name\").ToString();\n}\n```\n\n### List available Dev Box Pools\n```C# Snippet:Azure_DevCenter_GetPools_Scenario\nvar devBoxesClient = new DevBoxesClient(endpoint, targetProjectName, credential);\nstring targetPoolName = null;\nawait foreach (BinaryData data in devBoxesClient.GetPoolsAsync(filter: null, maxCount: 1))\n{\n    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;\n    targetPoolName = result.GetProperty(\"name\").ToString();\n}\n```\n\n### Provision a Dev Box\n```C# Snippet:Azure_DevCenter_CreateDevBox_Scenario\nvar content = new\n{\n    poolName = targetPoolName,\n};\n\nOperation<BinaryData> devBoxCreateOperation = await devBoxesClient.CreateDevBoxAsync(WaitUntil.Completed, \"MyDevBox\", RequestContent.Create(content));\nBinaryData devBoxData = await devBoxCreateOperation.WaitForCompletionAsync();\nJsonElement devBox = JsonDocument.Parse(devBoxData.ToStream()).RootElement;\nConsole.WriteLine($\"Completed provisioning for dev box with status {devBox.GetProperty(\"provisioningState\")}.\");\n```\n\n### Connect to your Dev Box\n```C# Snippet:Azure_DevCenter_ConnectToDevBox_Scenario\nResponse remoteConnectionResponse = await devBoxesClient.GetRemoteConnectionAsync(\"MyDevBox\");\nJsonElement remoteConnectionData = JsonDocument.Parse(remoteConnectionResponse.ContentStream).RootElement;\nConsole.WriteLine($\"Connect using web URL {remoteConnectionData.GetProperty(\"webUrl\")}.\");\n```\n\n### Delete the Dev Box\n```C# Snippet:Azure_DevCenter_DeleteDevBox_Scenario\nOperation devBoxDeleteOperation = await devBoxesClient.DeleteDevBoxAsync(WaitUntil.Completed, \"MyDevBox\");\nawait devBoxDeleteOperation.WaitForCompletionResponseAsync();\nConsole.WriteLine($\"Completed dev box deletion.\");\n```\n\n### Get Catalog Items\n\n```C# Snippet:Azure_DevCenter_GetCatalogItems_Scenario\nvar environmentsClient = new EnvironmentsClient(endpoint, projectName, credential);\nstring catalogItemName = null;\nawait foreach (BinaryData data in environmentsClient.GetCatalogItemsAsync(maxCount: 1))\n{\n    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;\n    catalogItemName = result.GetProperty(\"name\").ToString();\n}\n```\n\n### Get Environment Types\n\n```C# Snippet:Azure_DevCenter_GetEnvironmentTypes_Scenario\nstring environmentTypeName = null;\nawait foreach (BinaryData data in environmentsClient.GetEnvironmentTypesAsync(maxCount: 1))\n{\n    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;\n    environmentTypeName = result.GetProperty(\"name\").ToString();\n}\n```\n\n### Create an Environment\n\n```C# Snippet:Azure_DevCenter_CreateEnvironment_Scenario\nvar content = new\n{\n    environmentType = environmentTypeName,\n    catalogItemName = catalogItemName,\n};\n\n// Deploy the environment\nOperation<BinaryData> environmentCreateOperation = await environmentsClient.CreateOrUpdateEnvironmentAsync(WaitUntil.Completed, \"DevEnvironment\", RequestContent.Create(content));\nBinaryData environmentData = await environmentCreateOperation.WaitForCompletionAsync();\nJsonElement environment = JsonDocument.Parse(environmentData.ToStream()).RootElement;\nConsole.WriteLine($\"Completed provisioning for environment with status {environment.GetProperty(\"provisioningState\")}.\");\n```\n\n### Delete an Environment\n\n```C# Snippet:Azure_DevCenter_DeleteEnvironment_Scenario\nOperation environmentDeleteOperation = await environmentsClient.DeleteEnvironmentAsync(WaitUntil.Completed, projectName, \"DevEnvironment\");\nawait environmentDeleteOperation.WaitForCompletionResponseAsync();\nConsole.WriteLine($\"Completed environment deletion.\");\n```\n\n## Troubleshooting\n\nErrors may occur during Dev Box provisioning due to problems with other resources or your Azure configuration. You can view the operation error or the `errorDetails` property on the Dev Box if provisioning fails, which will show more information about the problem and how to resolve it.\nEnsure that your Pool, Network Connection, and Dev Box Definition resources are all in a healthy state before attempting to create a Dev Box. Problems with their configurations will prevent successful creation of your Dev Box.\n\nErrors may occur during Environment deployment due to problems with your template, parameters, or the configuration of other resources. You can view the operation error, which will provide more information about the problem and how to resolve it.\nEnsure that your Project Environment Type's identity has the correct permissions to the target subscription, that you are passing all parameters which are required by the template, and that all parameters are valid.\n\n## Contributing\n\nSee the [DevCenter CONTRIBUTING.md][azdevcenter_contrib] for details on building, testing, and contributing to this library.\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [cla.microsoft.com][cla].\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct]. For more information see the [Code of Conduct FAQ][code_of_conduct_faq] or contact [opencode@microsoft.com][email_opencode] with any additional questions or comments.\n\n<!-- LINKS -->\n[azdevcenter_contrib]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/devcenter/CONTRIBUTING.md\n[style-guide-msft]: https://docs.microsoft.com/style-guide/capitalization\n[style-guide-cloud]: https://aka.ms/azsdk/cloud-style-guide\n[cla]: https://cla.microsoft.com\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[code_of_conduct_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[email_opencode]: mailto:opencode@microsoft.com\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net/sdk/devcenter/Azure.Developer.DevCenter/README.png)\n\n## Next steps\n\nFor more information on Azure SDK, please refer to [this website](https://azure.github.io/azure-sdk/)\n",
        "repo_name": "devcenter/Azure.Developer.DevCenter",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/devcenter/Azure.Developer.DevCenter",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Dev Center management client library for .NET\n\nMicrosoft A dev center is a collection of projects that require similar settings. Dev centers enable development infrastructure (dev infra) managers to:\n\n- Use catalogs to manage infrastructure as code (IaC) templates that are available to the projects.\n- Use environment types to configure the types of environments that development teams can create.\n\nThis library supports managing Microsoft Azure Dev Center resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Dev Center management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.DevCenter\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "devcenter/Azure.ResourceManager.DevCenter",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/devcenter/Azure.ResourceManager.DevCenter",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft IoT Hub Azure Device Provisioning Services management client library for .NET\n\nThe Microsoft Azure IoT Hub Device Provisioning Service (DPS) is a helper service for IoT Hub that enables zero-touch, just-in-time provisioning to the right IoT hub without requiring human intervention, allowing customers to provision millions of devices in a secure and scalable manner. Learn how to provision devices to your IoT hub(s) with our quickstarts, tutorials, and samples.\n\nThis library supports managing Microsoft Azure IoT Hub Azure Device Provisioning Services resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Device Provisioning Services management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.DeviceProvisioningServices\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "deviceprovisioningservices/Azure.ResourceManager.DeviceProvisioningServices",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/deviceprovisioningservices/Azure.ResourceManager.DeviceProvisioningServices",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Device Update for IoT Hub client library for .NET\n\nThe library provides access to the Device Update for IoT Hub service that enables customers to publish updates for their IoT devices to the cloud, and then deploy these updates to their devices (approve updates to groups of devices managed and provisioned in IoT Hub). \n\n  [Source code](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/deviceupdate/Azure.IoT.DeviceUpdate/src) | [Package](https://www.nuget.org) | [Product documentation](https://docs.microsoft.com/azure/iot-hub-device-update/understand-device-update)\n\n\n## Getting started\n\nThe complete Microsoft Azure SDK can be downloaded from the [Microsoft Azure Downloads](https://azure.microsoft.com/downloads/?sdk=net) page and ships with support for building deployment packages, integrating with tooling, rich command line tooling, and more.\n\nFor the best development experience, developers should use the official Microsoft NuGet packages for libraries. NuGet packages are regularly updated with new functionality and hotfixes.\n\n### Prerequisites\n\n- Microsoft Azure Subscription: To call Microsoft Azure services, you need to create an [Azure subscription](https://azure.microsoft.com/free/dotnet/)\n- Device Update for IoT Hub instance\n- Azure IoT Hub instance\n\n### Install the package\n\nInstall the Device Update for IoT Hub client library for .NET with [NuGet](https://www.nuget.org/ ):\n\n```dotnetcli\ndotnet add package Azure.IoT.DeviceUpdate\n```\n\n### Authenticate the Client\n\nIn order to interact with the Device Update for IoT Hub service, you will need to create an instance of a [TokenCredential class](https://docs.microsoft.com/dotnet/api/azure.core.tokencredential?view=azure-dotnet) and pass it to the constructor of your DeviceUpdateClient and DeviceManagementClient class.\n\n## Key concepts\n\nDevice Update for IoT Hub is a managed service that enables you to deploy over-the-air updates for your IoT devices. The client library has three main components:\n- **DeviceManagementClient**: device, group, deployment management (enumerate, create, retrieve, delete device, group, deployment, etc.)\n- **DeviceUpdateClient**: update management (import, enumerate, delete, etc.)\n\nYou can learn more about Device Update for IoT Hub by visiting [Device Update for IoT Hub](https://github.com/azure/iot-hub-device-update).\n\n## Examples\n\nYou can familiarize yourself with different APIs using [Samples](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/deviceupdate/Azure.IoT.DeviceUpdate/samples).\n\n## Troubleshooting\n\nAll Device Update for IoT Hub service operations will throw a RequestFailedException on failure with helpful ErrorCodes.\n\nFor example, if you use the `GetUpdateAsync` operation and the model you are looking for doesn't exist, you can catch that specific [HttpStatusCode](https://docs.microsoft.com/dotnet/api/system.net.httpstatuscode?view=netcore-3.1) to decide the operation that follows in that case.\n\n```csharp\ntry\n{\n    Response update = await _updatesClient.GetUpdateAsync(\n      \"provider\", \"name\", \"1.0.0.0\");\n}\ncatch (RequestFailedException ex) when (ex.Status == (int)HttpStatusCode.NotFound)\n{\n    // Update does not exist.\n}\n\n```\n\n## Next steps\n\nGet started with our [Device Update for IoT Hub samples](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/deviceupdate/Azure.IoT.DeviceUpdate/samples)\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [Contributor License Agreement](https://cla.microsoft.com).\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact opencode@microsoft.com with any additional questions or comments.\n",
        "repo_name": "deviceupdate/Azure.IoT.DeviceUpdate",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/deviceupdate/Azure.IoT.DeviceUpdate",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Device Update management client library for .NET\n\nThe Microsoft Azure Device Update for Azure IoT Hub is a service that enables you to deploy over-the-air updates for your IoT devices.\n\nThis library supports managing Microsoft Azure Device Update resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Device Update management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.DeviceUpdate --prerelease\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "deviceupdate/Azure.ResourceManager.DeviceUpdate",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/deviceupdate/Azure.ResourceManager.DeviceUpdate",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Dev Spaces management client library for .NET\n\nMicrosoft Azure Dev Spaces is retired as of May 15, 2021. Developers should use [Bridge to Kubernetes](https://devblogs.microsoft.com/visualstudio/bridge-to-kubernetes-ga/), a client developer tool.\nThe purpose of Microsoft Azure Dev Spaces was about easing developers into developing on Kubernetes. \n\nThis library supports managing Microsoft Azure Device Update resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Dev Spaces management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.DevSpaces --prerelease\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "devspaces/Azure.ResourceManager.DevSpaces",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/devspaces/Azure.ResourceManager.DevSpaces",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure DevTest Labs management client library for .NET\n\nMicrosoft Azure DevTest Labs is a service for easily creating, using, and managing infrastructure-as-a-service (IaaS) virtual machines (VMs) and platform-as-a-service (PaaS) environments in labs.\n\nThis library supports managing Microsoft Azure DevTest Labs resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure DevTest Labs management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.DevTestLabs\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "devtestlabs/Azure.ResourceManager.DevTestLabs",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/devtestlabs/Azure.ResourceManager.DevTestLabs",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure IoT Digital Twins client library for .NET\n\nThis library provides access to the Azure Digital Twins service for managing twins, models, relationships, etc.\n\n  [Source code][source] | [Package (nuget)][package]\n\n## Getting started\n\nThe complete Microsoft Azure SDK can be downloaded from the [Microsoft Azure downloads][microsoft_sdk_download] page, and it ships with support for building deployment packages, integrating with tooling, rich command line tooling, and more.\n\nFor the best development experience, developers should use the official Microsoft NuGet packages for libraries. NuGet packages are regularly updated with new functionality and hotfixes.\n\n### Install the package\n\nInstall the Azure Digital Twins client library for .NET with [NuGet][nuget]:\n\n```dotnetcli\ndotnet add package Azure.DigitalTwins.Core\n```\n\nView the package details at [nuget.org][adt_nuget].\n\n### Prerequisites\n\n- A Microsoft Azure Subscription\n  - To call Microsoft Azure services, create an [Azure subscription][azure_sub].\n- An Azure Digital Twins instance\n  - In order to use the Azure Digital Twins SDK, first create a Digital Twins instance using one of options:\n    - Using [Azure portal][azure_portal]\n    - Using [Azure Management APIs][azure_rest_api]\n    - Using [Azure CLI][azure_cli]\n      - You will need to install azure cli and the [Azure IoT extension][iot_cli_extension] for Azure CLI.\n      - Refer to [IoT CLI documentation][iot_cli_doc] for more information on how to create and interact with your Digital Twins instance.\n\n### Authenticate the Client\n\nIn order to interact with the Azure Digital Twins service, you will need to create an instance of a [TokenCredential class][token_credential] and pass it to the constructor of your [DigitalTwinsClient][digital_twins_client].\n\n## Key concepts\n\nAzure Digital Twins is an Azure IoT service that creates comprehensive models of the physical environment.\nIt can create spatial intelligence graphs to model the relationships and interactions between people, spaces, and devices.\n\nYou can learn more about Azure Digital Twins by visiting [Azure Digital Twins Documentation][digital_twins_documentation]\n\n### Thread safety\nWe guarantee that all client instance methods are thread-safe and independent of each other ([guideline](https://azure.github.io/azure-sdk/dotnet_introduction.html#dotnet-service-methods-thread-safety)). This ensures that the recommendation of reusing client instances is always safe, even across threads.\n\n### Additional concepts\n<!-- CLIENT COMMON BAR -->\n[Client options](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#configuring-service-clients-using-clientoptions) |\n[Accessing the response](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#accessing-http-response-details-using-responset) |\n[Long-running operations](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#consuming-long-running-operations-using-operationt) |\n[Handling failures](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#reporting-errors-requestfailedexception) |\n[Diagnostics](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md) |\n[Mocking](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#mocking) |\n[Client lifetime](https://devblogs.microsoft.com/azure-sdk/lifetime-management-and-thread-safety-guarantees-of-azure-sdk-net-clients/)\n<!-- CLIENT COMMON BAR -->\n\n## Examples\n\nYou can familiarize yourself with different APIs using [samples for Digital Twins](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/digitaltwins/Azure.DigitalTwins.Core/samples/).\n\n## Source code folder structure\n\n### /src\n\nThe Digital Twins public client, `DigitalTwinsClient`, and the additional configuration options, `DigitalTwinsClientOptions`, that can be sent to the Digital Twins service.\n\n### /src/Generated\n\nThe code generated by autorest using the swagger file defined in the autorest config file.\n\nTo regenerate the code, run the powershell script [generate.ps1](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/digitaltwins/Azure.DigitalTwins.Core/src/generate.ps1).\n\nAny time the client library code is updated, the following scripts need to be run:\n\n- [Export-AdtApis.ps1](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/digitaltwins/Export-AdtApis.ps1), which will update the [API surface document](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/digitaltwins/Azure.DigitalTwins.Core/api/Azure.DigitalTwins.Core.netstandard2.0.cs).\n- [Update-Snippets.ps1](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/digitaltwins/Update-AdtSnippets.ps1), which will update all the code snippets in the readme files and in the client documentation comments.\n\n### /src/Customized\n\nThe customzied code written to override the following behavior of auto-generated code:\n\n- Rename some of the generated types, eg. [GetModelsOptions](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/digitaltwins/Azure.DigitalTwins.Core/src/Customized/Models/GetModelsOptions.cs)\n- Declare some of the generated types as **internal**, instead of the autorest default of **public**.\n- Declare some methods to accept input parameters as **strings** instead of **objects**.\n- Declare some methods to return the response as **strings** instead of **objects**.\n\n### /src/Models\n\nModel classes useful for use with the Digital Twins client operations.\n\n### /src/Properties\n\nAssembly properties required for running unit tests.\n\n### /src/Serialization\n\nSerialization helpers provided to help serialize/deserialize commonly used types within the Digital Twins service.\n\n## Troubleshooting\n\nAll service operations will throw RequestFailedException on failure reported by the service, with helpful error codes and other information.\n\nFor example, use the `GetModelAsync` operation to check if the model exists before creating it, catch only when that specific [HttpStatusCode][http_status_code] is specified.\n\n```csharp\ntry\n{\n    Response<ModelData> desiredModel = await DigitalTwinsClient.GetModelAsync(desiredModelId);\n}\ncatch (RequestFailedException ex) when (ex.Status == (int)HttpStatusCode.NotFound)\n{\n    // Model does not exist, so create it.\n}\n```\n\n## Next steps\n\nSee implementation examples with our [code samples](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/digitaltwins/Azure.DigitalTwins.Core/samples).\n\n## Contributing\n\nThis project welcomes contributions and suggestions.\nMost contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution.\nFor details, visit <https://cla.microsoft.com.>\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment).\nSimply follow the instructions provided by the bot.\nYou will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct].\nFor more information see the [Code of Conduct FAQ][code_of_conduct_faq] or contact opencode@microsoft.com with any additional questions or comments.\n\n<!-- LINKS -->\n[microsoft_sdk_download]: https://azure.microsoft.com/downloads/?sdk=net\n[azure_sdk_target_frameworks]: https://github.com/azure/azure-sdk-for-net#target-frameworks\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/dotnet/\n[source]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/digitaltwins/Azure.DigitalTwins.Core/src\n[package]: https://www.nuget.org/packages/Azure.DigitalTwins.Core\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[code_of_conduct_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[nuget]: https://www.nuget.org/\n[azure_portal]: https://portal.azure.com/\n[azure_rest_api]: https://docs.microsoft.com/rest/api/azure/\n[azure_core_library]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/core/Azure.Core\n[token_credential]: https://docs.microsoft.com/dotnet/api/azure.core.tokencredential?view=azure-dotnet\n[digital_twins_client]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/digitaltwins/Azure.DigitalTwins.Core/src/DigitalTwinsClient.cs\n[digital_twins_documentation]: https://docs.microsoft.com/azure/digital-twins/\n[iot_cli_extension]: https://github.com/Azure/azure-iot-cli-extension/releases\n[iot_cli_doc]: https://docs.microsoft.com/cli/azure/azure-cli-reference-for-iot\n[http_status_code]: https://docs.microsoft.com/dotnet/api/system.net.httpstatuscode?view=netcore-3.1\n[adt_nuget]: https://www.nuget.org/packages/Azure.DigitalTwins.Core\n",
        "repo_name": "digitaltwins/Azure.DigitalTwins.Core",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/digitaltwins/Azure.DigitalTwins.Core",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Digital Twins management client library for .NET\n\nMicrosoft Azure Digital Twins is an Internet of Things (IoT) platform that enables you to create a digital representation of real-world things, places, business processes, and people. Gain insights that help you drive better products, optimize operations and costs, and create breakthrough customer experiences.\n\nThis library supports managing Microsoft Azure Digital Twins resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Digital Twins management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.DigitalTwins\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "digitaltwins/Azure.ResourceManager.DigitalTwins",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/digitaltwins/Azure.ResourceManager.DigitalTwins",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Dns management client library for .NET\n\nMicrosoft Azure Dns is a hosting service for Dns domains that provides name resolution by using Microsoft Azure infrastructure. By hosting your domains in Microsoft Azure, you can manage your Dns records by using the same credentials, APIs, tools, and billing as your other Azure services.\n\nThis library supports managing Microsoft Azure Dns resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Azure DNS management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.Dns\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\n### Create a Dns zone\n\n```C# Snippet:Managing_DnsZones_CreateADnsZones\nArmClient armClient = new ArmClient(new DefaultAzureCredential());\nSubscriptionResource subscription = await armClient.GetDefaultSubscriptionAsync();\n// first we need to get the resource group\nstring rgName = \"myRgName\";\nResourceGroupResource resourceGroup = await subscription.GetResourceGroups().GetAsync(rgName);\n// Now we get the DnsZone collection from the resource group\nDnsZoneCollection dnsZoneCollection = resourceGroup.GetDnsZones();\n// Use the same location as the resource group\nstring dnsZoneName = \"sample.com\";\nDnsZoneData data = new DnsZoneData(\"Global\")\n{\n};\nArmOperation<DnsZoneResource> lro = await dnsZoneCollection.CreateOrUpdateAsync(WaitUntil.Completed, dnsZoneName, data);\nDnsZoneResource dnsZone = lro.Value;\n```\n\n### Get all Dns zones in a resource group\n\n```C# Snippet:Managing_DnsZones_ListAllDnsZones\nArmClient armClient = new ArmClient(new DefaultAzureCredential());\nSubscriptionResource subscription = await armClient.GetDefaultSubscriptionAsync();\n// first we need to get the resource group\nstring rgName = \"myRgName\";\nResourceGroupResource resourceGroup = await subscription.GetResourceGroups().GetAsync(rgName);\n// Now we get the DnsZone collection from the resource group\nDnsZoneCollection dnsZoneCollection = resourceGroup.GetDnsZones();\n// With ListAsync(), we can get a list of the DnsZones\nAsyncPageable<DnsZoneResource> response = dnsZoneCollection.GetAllAsync();\nawait foreach (DnsZoneResource dnsZone in response)\n{\n    Console.WriteLine(dnsZone.Data.Name);\n}\n```\n\n### Delete a Dns zone\n\n```C# Snippet:Managing_DnsZones_DeleteDnsZone\nArmClient armClient = new ArmClient(new DefaultAzureCredential());\nSubscriptionResource subscription = await armClient.GetDefaultSubscriptionAsync();\n// first we need to get the resource group\nstring rgName = \"myRgName\";\nResourceGroupResource resourceGroup = await subscription.GetResourceGroups().GetAsync(rgName);\n// Now we get the DnsZone collection from the resource group\nDnsZoneCollection dnsZoneCollection = resourceGroup.GetDnsZones();\nstring dnsZoneName = \"sample.com\";\nDnsZoneResource dnsZone = await dnsZoneCollection.GetAsync(dnsZoneName);\nawait dnsZone.DeleteAsync(WaitUntil.Completed);\n```\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n-   If having trouble with authentication, go to [DefaultAzureCredential documentation](https://docs.microsoft.com/dotnet/api/azure.identity.defaultazurecredential?view=azure-dotnet).\n\n## Next steps\n\n### More sample code\n\n- [Managing DNS Zones](https://github.com/dvbb/azure-sdk-for-net/blob/dvbb-mgmt-track2-dns-2/sdk/dns/Azure.ResourceManager.Dns/samples/Sample1_ManagingDNSZones.md)\n- [Managing Record Set Ptrs](https://github.com/dvbb/azure-sdk-for-net/blob/dvbb-mgmt-track2-dns-2/sdk/dns/Azure.ResourceManager.Dns/samples/Sample2_ManagingRecordSetPtrs.md)\n\n### Other Documentation\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n\n",
        "repo_name": "dns/Azure.ResourceManager.Dns",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/dns/Azure.ResourceManager.Dns",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Dns Resolver management client library for .NET\n\nMicrosoft Azure Dns Private Resolver enables you to query Azure Dns private zones from an on-premises environment and vice versa without deploying VM based Dns servers.\n\nThis library supports managing Microsoft Azure Dns Resolver resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Azure Dns Resolver management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.DnsResolver\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "dnsresolver/Azure.ResourceManager.DnsResolver",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/dnsresolver/Azure.ResourceManager.DnsResolver",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Dynatrace management client library for .NET\n\nDynatrace is a monitoring solution that provides deep cloud observability, advanced AIOps, and continuous runtime application security capabilities in Microsoft Azure.\n\nThis library supports managing Microsoft Azure Dynatrace resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Dynatrace management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.Dynatrace\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "dynatrace/Azure.ResourceManager.Dynatrace",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/dynatrace/Azure.ResourceManager.Dynatrace",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Edge Order management client library for .NET\n\nMicrosoft Azure Stack Edge is a cloud managed edge compute appliance\uff0c brings the compute, storage, and intelligence of Azure right to where you need it\u2014whether that\u2019s your corporate data center, your branch office, or your remote field location.\n\nThis library supports managing Microsoft Azure Edge Order resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Edge Order management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.EdgeOrder\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "edgeorder/Azure.ResourceManager.EdgeOrder",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/edgeorder/Azure.ResourceManager.EdgeOrder",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Elastic management client library for .NET\n\nElastic on Microsoft Azure gives you the ability to deploy Elasticsearch directly within the Azure portal, allowing you to accelerate your time to value and benefit from enhanced business agility.\n\nThis library supports managing Microsoft Azure Elastic resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Elastic management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.Elastic --prerelease\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "elastic/Azure.ResourceManager.Elastic",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/elastic/Azure.ResourceManager.Elastic",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Elastic SAN management client library for .NET\n\nMicrosoft Azure Elastic SAN is a cloud-native service that offers a scalable, cost-effective, high-performance, and comprehensive storage solution for a range of compute options. Get the same simplified management experience in the cloud as with your on-premises storage area network (SAN). Gain higher resiliency and minimize downtime with rapid provisioning.\n\nThis library supports managing Microsoft Azure Elastic SAN resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Elastic SAN management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.ElasticSan --prerelease\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "elasticsan/Azure.ResourceManager.ElasticSan",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/elasticsan/Azure.ResourceManager.ElasticSan",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Authentication events trigger for Azure Functions client library for .NET\n\nThe authentication events trigger for Azure Functions allows you to implement a custom extension to handle Azure Active Directory (Azure AD) authentication events. The authentication events trigger handles all the backend processing for incoming HTTP requests for Azure AD authentication events and provides the developer with:\n\n- Token validation for securing the API call\n- Object model, typing, and IDE intellisense\n- Inbound and outbound validation of the API request and response schemas\n\n## Getting started\n\n### Install the package\n\nInstall the authentication events trigger for Azure Functions with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Microsoft.Azure.WebJobs.Extensions.AuthenticationEvents --prerelease\n```\n\n### Prerequisites\n\n- **Azure Subscription:** To use Azure services, including Azure Functions, you'll need a subscription. If you do not have an existing Azure account, you may sign up for a [free trial](https://azure.microsoft.com/free/dotnet/) or use your [Visual Studio Subscription](https://visualstudio.microsoft.com/subscriptions/) benefits when you [create an account](https://account.windowsazure.com/Home/Index).\n\n### Authenticate the client\n\nWhen the Azure AD authentication events service calls your custom extension, it sends an `Authorization` header with a `Bearer {token}`. This token represents a [service to service authentication](https://learn.microsoft.com/azure/active-directory/develop/v2-oauth2-client-creds-grant-flow) in which:\n\n* The '**resource**', also known as the **audience**, is the application that you register to represent your API. This is represented by the `aud` claim in the token.\n* The '**client**' is a Microsoft application that represents the Azure AD authentication events service. It has an `appId` value of `99045fe1-7639-4a75-9d4a-577b6ca3810f`. This is represented by:\n  * The `azp` claim in the token if your application `accessTokenAcceptedVersion` property is set to `2`.\n  * The `appid` claim in the token if your resource application's `accessTokenAcceptedVersion` property is set to `1` or `null`.\n\nThere are three approaches to authenticating HTTP requests to your function app and validating the token. \n\n#### Validate tokens using Azure Functions Azure AD authentication integration\n\nWhen running your function in production, it is **highly recommended** to use the [Azure Functions Azure AD authentication integration](https://learn.microsoft.com/azure/app-service/configure-authentication-provider-aad#-option-2-use-an-existing-registration-created-separately) for validating incoming tokens. Set the following function [application settings](https://learn.microsoft.com/azure/azure-functions/functions-how-to-use-azure-function-app-settings?tabs=portal#settings).\n\n1. Go to the \"Authentication\" tab in your Function App\n2. Click on \"Add identity provider\"\n3. Select \"Microsoft\" as the identity provider\n4. Select \"Provide the details of an existing app registration\"\n5. Enter the `Application ID` of the app that represents your API in Azure AD\n\nThe issuer and allowed audience depends on the [`accessTokenAcceptedVersion`](https://learn.microsoft.com/azure/active-directory/develop/access-tokens) property of your application (can be found in the \"Manifest\" of the application).\n\nIf the `accessTokenAcceptedVersion` property is set to `2`:\n6. Set the `Issuer URL to \"https://login.microsoftonline.com/{tenantId}/v2.0\"\n7. Set an 'Allowed Audience' to the Application ID (`appId`)\n\nIf the `accessTokenAcceptedVersion` property is set to `1` or `null`:\n6. Set the `Issuer URL to \"https://sts.windows.net/{tenantId}/\"\n7. Set an 'Allowed Audience' to the Application ID URI (also known as`identifierUri`). It should be in the format of`api://{azureFunctionAppName}.azurewebsites.net/{resourceApiAppId}` or `api://{FunctionAppFullyQualifiedDomainName}/{resourceApiAppId}` if using a [custom domain name](https://learn.microsoft.com/azure/dns/dns-custom-domain#:~:text=Azure%20Function%20App%201%20Navigate%20to%20Function%20App,Custom%20domain%20text%20field%20and%20select%20Validate.%20).\n\nBy default, the Authentication event trigger will validate that Azure Function authentication integration is configured and it will check that the **client** in the token is set to `99045fe1-7639-4a75-9d4a-577b6ca3810f` (via the `azp` or `appid` claims in the token).\n\nIf you want to test your API against some other client that is not Azure AD authentication events service, like using Postman, you can configure an _optional_ application setting:\n\n* **AuthenticationEvents__CustomCallerAppId** - the guid of your desired client. If not provided, `99045fe1-7639-4a75-9d4a-577b6ca3810f` is assumed.\n\n#### Have the trigger validate the token\n\nIn local environments or environments that aren't hosted in the Azure Function service, the trigger can do the token validation. Set the following application settings in the [local.settings.json](https://learn.microsoft.com/azure/azure-functions/functions-develop-local#local-settings-file) file:\n\n* **AuthenticationEvents__TenantId** - your tenant ID\n* **AuthenticationEvents__AudienceAppId** - the same value as \"Allowed audience\" in option 1.\n* **AuthenticationEvents__CustomCallerAppId** (_optional_) - the guid of your desired client. If not provided, `99045fe1-7639-4a75-9d4a-577b6ca3810f` is assumed.\n\nAn example `local.settings.json` file:\n\n```json\n{\n  \"IsEncrypted\": false,\n  \"Values\": {\n    \"AzureWebJobsStorage\": \"UseDevelopmentStorage=true\",\n    \"FUNCTIONS_WORKER_RUNTIME\": \"dotnet\",\n    \"AuthenticationEvents__TenantId\": \"8615397b-****-****-****-********06c8\",\n    \"AuthenticationEvents__AudienceAppId\": \"api://46f98993-****-****-****-********0038\",\n    \"AuthenticationEvents__CustomCallerAppId\": \"46f98993-****-****-****-********0038\"\n  }\n}\n```\n\n#### No token validation\n\nIf you would like to _not_ authenticate the token while in local development, set the following application settings in the [local.settings.json](https://learn.microsoft.com/azure/azure-functions/functions-develop-local#local-settings-file) file:\n\n* **AuthenticationEvents__BypassTokenValidation** - value of `true` will make the trigger not check for a validation of the token.\n\n### Quickstart\n\n* Visual Studio 2019\n  * Start Visual Studio\n  * Select \"Create a new project\"\n  * In the template search area search and select \"AzureAuthEventsTrigger\"\n  * Give your project a meaningful Project Name, Location, Solution and Solution Name.\n\n* Visual Studio Code\n  * Start Visual Studio Code\n  * Run the command \"Create Azure Authentication Events Trigger Project\" via the command palette\n  * Follow the project creation prompts\n* Please note: that on a first time run it might take awhile to download the the required packages.\n* For development purpose turn of token validation for testing:\n* Add the **AuthenticationEvents__BypassTokenValidation** application key to the \"Values\" section in the local.settings.json file and set it's value to **true**. If you do not have a local.settings.json file in your local environment, create one in the root of your Function App.\n\n```json\n{\n  \"IsEncrypted\": false,\n  \"Values\": {\n    \"AzureWebJobsStorage\": \"UseDevelopmentStorage=true\",\n    \"FUNCTIONS_WORKER_RUNTIME\": \"dotnet\",\n    \"AuthenticationEvents__BypassTokenValidation\": true\n  }\n}\n```\n\n* Once the project is loaded, you can run the sample code and you should see the Azure functions developer's application load your end point.\n\n## Key concepts\n\n### .NET SDK\n\nKey concepts of the Azure .NET SDK can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n### Azure AD custom extensions\n\nCustom extensions allow you to handle Azure AD events, integrate with external systems, and customize what happens in your application authentication experience. For example, a custom claims provider is a custom extension that allows you to enrich or customize application tokens with information from external systems that can't be stored as part of the Azure AD directory. \n\n### Authentication events trigger\n\nThe authentication events trigger allows a function to be executed when an authentication event is sent from the Azure AD event service.\n\n### Authentication events trigger output binding\n\nThe authentication events trigger output binding allows a function to send authentication event actions to the Azure AD event service.\n\n## Documentation\n\n* One the function has been published, there's some good reading about logging and metrics that can be found [here](https://learn.microsoft.com/azure/azure-functions/functions-monitor-log-analytics?tabs=csharp)\n\n* For API Documentation, please see the (Link TBD)\n* Once this moves to preview, we except no breaking changes and would be as simple as removing the the NuGet source that points to the private preview.\n\n## Examples\n\nTo Test Token Augmentation, please do the following.\n\n* Start Visual Studio.\n* Open the project that was created in the prior step. (QuickStart)\n* Run the Application. (F5)\n* Once the Azure functions developer's application has started, copy the listening url that is displayed with the application starts up.\n* Note: All Authentication functions are listed, in the case we have one function listener registered called \"**OnTokenIssuanceStart**\"\n* Your function endpoint will then be a combination of the listening url and function, for example: \"http://localhost:7071/runtime/webhooks/AuthenticationEvents?code=(YOUR_CODE)&function=OnTokenIssuanceStart\"\n* Post the following payload using something like Postman or Fiddler.\n* Steps for using Postman can be found (Link TBD)\n\n```json\n{\n  \"type\":\"microsoft.graph.authenticationEvent.TokenIssuanceStart\",\n  \"source\":\"/tenants/{tenantId}/applications/{resourceAppId}\",\n  \"data\":{\n    \"@odata.type\": \"microsoft.graph.onTokenIssuanceStartCalloutData\",\n    \"tenantId\": \"30000000-0000-0000-0000-000000000003\",\n    \"authenticationEventListenerId1\": \"10000000-0000-0000-0000-000000000001\",\n    \"customAuthenticationExtensionId\": \"10000000-0000-0000-0000-000000000002\",\n    \"authenticationContext1\":{\n      \"correlationId\": \"20000000-0000-0000-0000-000000000002\",\n      \"client\": {\n        \"ip\": \"127.0.0.1\",\n        \"locale\": \"en-us\",\n        \"market\": \"en-au\"\n      },\n      \"authenticationProtocol\": \"OAUTH2.0\",\n      \"clientServicePrincipal\": {\n        \"id\": \"40000000-0000-0000-0000-000000000001\",\n        \"appId\": \"40000000-0000-0000-0000-000000000002\",\n        \"appDisplayName\": \"Test client app\",\n        \"displayName\": \"Test client application\"\n      },\n      \"resourceServicePrincipal\": {\n        \"id\": \"40000000-0000-0000-0000-000000000003\",\n        \"appId\": \"40000000-0000-0000-0000-000000000004\",\n        \"appDisplayName\": \"Test resource app\",\n        \"displayName\": \"Test resource application\"\n      },\n      \"user\": {\n        \"companyName\": \"Nick Gomez\",\n        \"country\": \"USA\",\n        \"createdDateTime\": \"0001-01-01T00:00:00Z\",\n        \"displayName\": \"Dummy display name\",\n        \"givenName\": \"Example\",\n        \"id\": \"60000000-0000-0000-0000-000000000006\",\n        \"mail\": \"test@example.com\",\n        \"onPremisesSamAccountName\": \"testadmin\",\n        \"onPremisesSecurityIdentifier\": \"DummySID\",\n        \"onPremisesUserPrincipalName\": \"Dummy Name\",\n        \"preferredDataLocation\": \"DummyDataLocation\",\n        \"preferredLanguage\": \"DummyLanguage\",\n        \"surname\": \"Test\",\n        \"userPrincipalName\": \"testadmin@example.com\",\n        \"userType\": \"UserTypeCloudManaged\"\n      }\n    }\n  }\n}\n```\n\n* You should see this response:\n\n```json\n{\n    \"data\": {\n        \"@odata.type\": \"microsoft.graph.onTokenIssuanceStartResponseData\",\n        \"actions\": [\n            {\n                \"@odata.type\": \"microsoft.graph.provideClaimsForToken\",\n                \"claims\": {\n                    \"DateOfBirth\": \"01/01/2000\",\n                    \"CustomRoles\": [\n                            \"Writer\",\n                            \"Editor\"\n                        ]\n                    }\n             }\n        ]\n    }\n}\n```\n\n## Troubleshooting\n\n* Visual Studio Code\n  * If running in Visual Studio Code, you get an error along the lines of the local Azure Storage Emulator is unavailable, you can start the emulator manually.! (Note: Azure Storage emulator is now deprecated and the suggested replacement is [Azurite](https://learn.microsoft.com/azure/storage/common/storage-use-azurite?tabs=visual-studio))\n  * If using Visual Studio Code on Mac please use [Azurite](https://learn.microsoft.com/azure/storage/common/storage-use-azurite?tabs=visual-studio)\n  * If you see the following error on Windows (it's a bug) when trying to run the created projected.\n  * This can be resolved by executing this command in powershell `Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Scope LocalMachine` more info on this can be found [here](https://github.com/Azure/azure-functions-core-tools/issues/1821) and [here](https://learn.microsoft.com/powershell/module/microsoft.powershell.core/about/about_execution_policies?view=powershell-7)\n\n## Next steps\n\nFor more information on Azure SDK, please refer to [this website](https://azure.github.io/azure-sdk/)\n\n## Publish\n\n* Follow the instruction here to create and publish your Azure Application. <https://learn.microsoft.com/azure/azure-functions/functions-develop-vs?tabs=in-process#publish-to-azure>\n* To determine your published posting endpoint, combine the azure function endpoint you created, route to the listener and listener code, the listen code can be found by navigating to your azure function application, selecting \"App Keys\" and copying the value of AuthenticationEvents_extension.\n* For example: \"https://azureautheventstriggerdemo.azurewebsites.net/runtime/webhooks/AuthenticationEvents?code=(AuthenticationEvents_extension_key)&function=OnTokenIssuanceStart\"\n* Make sure your production environment has the correct application settings for token authentication.\n* Once again you can test the published function by posting the above payload to the new endpoint.\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(e.g., label, comment). Simply follow the instructions provided by the\nbot. You will only need to do this once across all repositories using\nour CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "entra/Microsoft.Azure.WebJobs.Extensions.AuthenticationEvents",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/entra/Microsoft.Azure.WebJobs.Extensions.AuthenticationEvents",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Event Grid client library for .NET\n\nAzure Event Grid allows you to easily build applications with event-based architectures. The Event Grid service fully manages all routing of events from any source, to any destination, for any application. Azure service events and custom events can be published directly to the service, where the events can then be filtered and sent to various recipients, such as built-in handlers or custom webhooks. To learn more about Azure Event Grid: [What is Event Grid?](https://docs.microsoft.com/azure/event-grid/overview)\n\nUse the client library for Azure Event Grid to:\n- Publish events to the Event Grid service using the Event Grid Event, Cloud Event 1.0, or custom schemas\n- Consume events that have been delivered to event handlers\n- Generate SAS tokens to authenticate the client publishing events to Azure Event Grid topics\n\n  [Source code](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/eventgrid/Azure.Messaging.EventGrid/src) | [Package (NuGet)](https://www.nuget.org/packages/Azure.Messaging.EventGrid/) | [API reference documentation](https://docs.microsoft.com/dotnet/api/azure.messaging.eventgrid) | [Product documentation](https://docs.microsoft.com/azure/event-grid/) | [Samples](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/eventgrid/Azure.Messaging.EventGrid/samples) | [Migration guide](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/eventgrid/Azure.Messaging.EventGrid/MigrationGuide.md)\n\n## Getting started\n\n### Install the package\n\nInstall the client library from [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.Messaging.EventGrid\n```\n\n### Prerequisites\n\nYou must have an [Azure subscription](https://azure.microsoft.com/free/dotnet/) and an Azure resource group with a custom Event Grid topic or domain. Follow this [step-by-step tutorial](https://docs.microsoft.com/azure/event-grid/custom-event-quickstart-portal) to register the Event Grid resource provider and create Event Grid topics using the [Azure portal](https://portal.azure.com/). There is a [similar tutorial](https://docs.microsoft.com/azure/event-grid/custom-event-quickstart) using [Azure CLI](https://docs.microsoft.com/cli/azure).\n\n### Authenticate the Client\n\nIn order for the client library to interact with a topic or domain, you will need the `endpoint` of the Event Grid topic and a `credential`, which can be created using the topic's access key.\n\nYou can find the endpoint for your Event Grid topic either in the [Azure Portal](https://portal.azure.com/) or by using the [Azure CLI](https://docs.microsoft.com/cli/azure) snippet below.\n\n```bash\naz eventgrid topic show --name <your-resource-name> --resource-group <your-resource-group-name> --query \"endpoint\"\n```\n\nThe access key can also be found through the [portal](https://docs.microsoft.com/azure/event-grid/get-access-keys), or by using the Azure CLI snippet below:\n```bash\naz eventgrid topic key list --name <your-resource-name> --resource-group <your-resource-group-name> --query \"key1\"\n```\n\n#### Authenticate using Topic Access Key\n\nOnce you have your access key and topic endpoint, you can create the publisher client as follows:\n```C#\nEventGridPublisherClient client = new EventGridPublisherClient(\n    new Uri(\"<endpoint>\"),\n    new AzureKeyCredential(\"<access-key>\"));\n```\n\n#### Authenticate using Shared Access Signature\n\nEvent Grid also supports authenticating with a shared access signature which allows for providing access to a resource that expires by a certain time without sharing your access key.\nGenerally, the workflow would be that one application would generate the SAS string and hand off the string to another application that would consume the string.\nGenerate the SAS:\n```C# Snippet:GenerateSas\nvar builder = new EventGridSasBuilder(new Uri(topicEndpoint), DateTimeOffset.Now.AddHours(1));\nvar keyCredential = new AzureKeyCredential(topicAccessKey);\nstring sasToken = builder.GenerateSas(keyCredential);\n```\n\nHere is how it would be used from the consumer's perspective:\n```C# Snippet:AuthenticateWithSas\nvar sasCredential = new AzureSasCredential(sasToken);\nEventGridPublisherClient client = new EventGridPublisherClient(\n    new Uri(topicEndpoint),\n    sasCredential);\n```\n\n`EventGridPublisherClient` also accepts a set of configuring options through `EventGridPublisherClientOptions`. For example, you can specify a custom serializer that will be used to serialize the event data to JSON.\n\n#### Authenticate using Azure Active Directory\n\nAzure Event Grid provides integration with Azure Active Directory (Azure AD) for identity-based authentication of requests. With Azure AD, you can use role-based access control (RBAC) to grant access to your Azure Event Grid resources to users, groups, or applications. The [Azure Identity library](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/identity/Azure.Identity/README.md) provides easy Azure Active Directory support for authentication.\n\nTo send events to a topic or domain using Azure Active Directory, the authenticated identity should have the \"EventGrid Data Sender\" role assigned.\n\n```C# Snippet:EventGridAAD\nEventGridPublisherClient client = new EventGridPublisherClient(\n    new Uri(topicEndpoint),\n    new DefaultAzureCredential());\n```\n\n## Key concepts\n\nFor information about general Event Grid concepts: [Concepts in Azure Event Grid](https://docs.microsoft.com/azure/event-grid/concepts).\n\n### EventGridPublisherClient\nA **publisher** sends events to the Event Grid service. Microsoft publishes events for several Azure services. You can publish events from your own application using the `EventGridPublisherClient`.\n\n### Event schemas\nAn **event** is the smallest amount of information that fully describes something that happened in the system. Event Grid supports multiple schemas for encoding events. When a custom topic or domain is created, you specify the schema that will be used when publishing events.\n\n#### Event Grid schema\nWhile you may configure your topic to use a custom schema, it is more common to use the already-defined Event Grid schema. See the specifications and requirements [here](https://docs.microsoft.com/azure/event-grid/event-schema).\n\n#### CloudEvents v1.0 schema\nAnother option is to use the CloudEvents v1.0 schema. [CloudEvents](https://cloudevents.io/) is a Cloud Native Computing Foundation project which produces a specification for describing event data in a common way. The service summary of CloudEvents can be found [here](https://docs.microsoft.com/azure/event-grid/cloud-event-schema).\n\nRegardless of what schema your topic or domain is configured to use, `EventGridPublisherClient` will be used to publish events to it. Use the `SendEvents` or `SendEventsAsync` method for publishing.\n\n### Event delivery\nEvents delivered to consumers by Event Grid are *delivered as JSON*. Depending on the type of consumer being delivered to, the Event Grid service may deliver one or more events as part of a single payload. Handling events will be different based on which schema the event was delivered as. However, the general pattern will remain the same:\n- Parse events from JSON into individual events. Based on the event schema (Event Grid or CloudEvents), you can now access basic information about the event on the envelope (properties that are present for all events, like event time and type).\n- Deserialize the event data. Given an `EventGridEvent` or `CloudEvent`, the user can attempt to access the event payload, or data, by deserializing to a specific type. You can supply a custom serializer at this point to correctly decode the data.\n\n### Thread safety\nWe guarantee that all client instance methods are thread-safe and independent of each other ([guideline](https://azure.github.io/azure-sdk/dotnet_introduction.html#dotnet-service-methods-thread-safety)). This ensures that the recommendation of reusing client instances is always safe, even across threads.\n\n### Additional concepts\n<!-- CLIENT COMMON BAR -->\n[Client options](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#configuring-service-clients-using-clientoptions) |\n[Accessing the response](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#accessing-http-response-details-using-responset) |\n[Long-running operations](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#consuming-long-running-operations-using-operationt) |\n[Handling failures](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#reporting-errors-requestfailedexception) |\n[Diagnostics](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md) |\n[Mocking](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#mocking) |\n[Client lifetime](https://devblogs.microsoft.com/azure-sdk/lifetime-management-and-thread-safety-guarantees-of-azure-sdk-net-clients/)\n<!-- CLIENT COMMON BAR -->\n\n## Examples\n* [Publish Event Grid events to an Event Grid Topic](#publish-event-grid-events-to-an-event-grid-topic)\n* [Publish CloudEvents to an Event Grid Topic](#publish-cloudevents-to-an-event-grid-topic)\n* [Publish Event Grid events to an Event Grid Domain](#publish-event-grid-events-to-an-event-grid-domain)\n* [Receiving and Deserializing Events](#receiving-and-deserializing-events)\n\n### Publish Event Grid events to an Event Grid Topic\nPublishing events to Event Grid is performed using the `EventGridPublisherClient`. Use the provided `SendEvent`/`SendEventAsync` method to publish a single event to the topic.\n```C# Snippet:SendSingleEGEventToTopic\n// Add EventGridEvents to a list to publish to the topic\nEventGridEvent egEvent =\n    new EventGridEvent(\n        \"ExampleEventSubject\",\n        \"Example.EventType\",\n        \"1.0\",\n        \"This is the event data\");\n\n// Send the event\nawait client.SendEventAsync(egEvent);\n```\n\nTo publish a batch of events, use the `SendEvents`/`SendEventsAsync` method.\n```C# Snippet:SendEGEventsToTopic\n// Example of a custom ObjectSerializer used to serialize the event payload to JSON\nvar myCustomDataSerializer = new JsonObjectSerializer(\n    new JsonSerializerOptions()\n    {\n        PropertyNamingPolicy = JsonNamingPolicy.CamelCase\n    });\n\n// Add EventGridEvents to a list to publish to the topic\nList<EventGridEvent> eventsList = new List<EventGridEvent>\n{\n    // EventGridEvent with custom model serialized to JSON\n    new EventGridEvent(\n        \"ExampleEventSubject\",\n        \"Example.EventType\",\n        \"1.0\",\n        new CustomModel() { A = 5, B = true }),\n\n    // EventGridEvent with custom model serialized to JSON using a custom serializer\n    new EventGridEvent(\n        \"ExampleEventSubject\",\n        \"Example.EventType\",\n        \"1.0\",\n        myCustomDataSerializer.Serialize(new CustomModel() { A = 5, B = true })),\n};\n\n// Send the events\nawait client.SendEventsAsync(eventsList);\n```\n### Publish CloudEvents to an Event Grid Topic\nPublishing events to Event Grid is performed using the `EventGridPublisherClient`. Use the provided `SendEvents`/`SendEventsAsync` method to publish events to the topic.\n```C# Snippet:SendCloudEventsToTopic\n// Example of a custom ObjectSerializer used to serialize the event payload to JSON\nvar myCustomDataSerializer = new JsonObjectSerializer(\n    new JsonSerializerOptions()\n    {\n        PropertyNamingPolicy = JsonNamingPolicy.CamelCase\n    });\n\n// Add CloudEvents to a list to publish to the topic\nList<CloudEvent> eventsList = new List<CloudEvent>\n{\n    // CloudEvent with custom model serialized to JSON\n    new CloudEvent(\n        \"/cloudevents/example/source\",\n        \"Example.EventType\",\n        new CustomModel() { A = 5, B = true }),\n\n    // CloudEvent with custom model serialized to JSON using a custom serializer\n    new CloudEvent(\n        \"/cloudevents/example/source\",\n        \"Example.EventType\",\n        myCustomDataSerializer.Serialize(new CustomModel() { A = 5, B = true }),\n        \"application/json\"),\n\n    // CloudEvents also supports sending binary-valued data\n    new CloudEvent(\n        \"/cloudevents/example/binarydata\",\n        \"Example.EventType\",\n        new BinaryData(Encoding.UTF8.GetBytes(\"This is treated as binary data\")),\n        \"application/octet-stream\")};\n\n// Send the events\nawait client.SendEventsAsync(eventsList);\n```\n\n### Publish Event Grid events to an Event Grid Domain\nAn **event domain** is a management tool for large numbers of Event Grid topics related to the same application. You can think of it as a meta-topic that can have thousands of individual topics. When you create an event domain, you're given a publishing endpoint similar to if you had created a topic in Event Grid.\n\nTo publish events to any topic in an Event Domain, push the events to the domain's endpoint the same way you would for a custom topic. The only difference is that you must specify the topic you'd like the event to be delivered to.\n```C# Snippet:SendEventsToDomain\n// Add EventGridEvents to a list to publish to the domain\n// Don't forget to specify the topic you want the event to be delivered to!\nList<EventGridEvent> eventsList = new List<EventGridEvent>\n{\n    new EventGridEvent(\n        \"ExampleEventSubject\",\n        \"Example.EventType\",\n        \"1.0\",\n        \"This is the event data\")\n    {\n        Topic = \"MyTopic\"\n    }\n};\n\n// Send the events\nawait client.SendEventsAsync(eventsList);\n```\n\nFor sending CloudEvents, the CloudEvent source is used as the domain topic:\n```C# Snippet:SendCloudEventsToDomain\nList<CloudEvent> eventsList = new List<CloudEvent>();\n\nfor (int i = 0; i < 10; i++)\n{\n    CloudEvent cloudEvent = new CloudEvent(\n        // the source is mapped to the domain topic\n        $\"Subject-{i}\",\n        \"Microsoft.MockPublisher.TestEvent\",\n        \"hello\")\n    {\n        Id = $\"event-{i}\",\n        Time = DateTimeOffset.Now\n    };\n    eventsList.Add(cloudEvent);\n}\n\nawait client.SendEventsAsync(eventsList);\n```\n\n### Receiving and Deserializing Events\nThere are several different Azure services that act as [event handlers](https://docs.microsoft.com/azure/event-grid/event-handlers).\n\nNote: if using Webhooks for event delivery of the *Event Grid schema*, Event Grid requires you to prove ownership of your Webhook endpoint before it starts delivering events to that endpoint. At the time of event subscription creation, Event Grid sends a subscription validation event to your endpoint, as seen below. Learn more about completing the handshake here: [Webhook event delivery](https://docs.microsoft.com/azure/event-grid/webhook-event-delivery). For the *CloudEvents schema*, the service validates the connection using the HTTP options method. Learn more here: [CloudEvents validation](https://github.com/cloudevents/spec/blob/v1.0/http-webhook.md#4-abuse-protection).\n\nOnce events are delivered to the event handler, we can deserialize the JSON payload into a list of events.\n\nUsing `EventGridEvent`:\n```C# Snippet:EGEventParseJson\n// Parse the JSON payload into a list of events\nEventGridEvent[] egEvents = EventGridEvent.ParseMany(BinaryData.FromStream(httpContent));\n```\n\nUsing `CloudEvent`:\n```C# Snippet:CloudEventParseJson\nvar bytes = await httpContent.ReadAsByteArrayAsync();\n// Parse the JSON payload into a list of events\nCloudEvent[] cloudEvents = CloudEvent.ParseMany(new BinaryData(bytes));\n```\n#### Deserializing event data\nFrom here, one can access the event data by deserializing to a specific type by calling `ToObjectFromJson<T>()` on the `Data` property. In order to deserialize to the correct type, the `EventType` property (`Type` for CloudEvents) helps distinguish between different events. Custom event data should be deserialized using the generic method `ToObjectFromJson<T>()`. There is also an extension method `ToObject<T>()` that accepts a custom `ObjectSerializer` to deserialize the event data.\n\n```C# Snippet:DeserializePayloadUsingGenericGetData\nforeach (CloudEvent cloudEvent in cloudEvents)\n{\n    switch (cloudEvent.Type)\n    {\n        case \"Contoso.Items.ItemReceived\":\n            // By default, ToObjectFromJson<T> uses System.Text.Json to deserialize the payload\n            ContosoItemReceivedEventData itemReceived = cloudEvent.Data.ToObjectFromJson<ContosoItemReceivedEventData>();\n            Console.WriteLine(itemReceived.ItemSku);\n            break;\n        case \"MyApp.Models.CustomEventType\":\n            // One can also specify a custom ObjectSerializer as needed to deserialize the payload correctly\n            TestPayload testPayload = cloudEvent.Data.ToObject<TestPayload>(myCustomSerializer);\n            Console.WriteLine(testPayload.Name);\n            break;\n        case SystemEventNames.StorageBlobDeleted:\n            // Example for deserializing system events using ToObjectFromJson<T>\n            StorageBlobDeletedEventData blobDeleted = cloudEvent.Data.ToObjectFromJson<StorageBlobDeletedEventData>();\n            Console.WriteLine(blobDeleted.BlobType);\n            break;\n    }\n}\n```\n\nUsing `TryGetSystemEventData()`:\n\nIf expecting mostly system events, it may be cleaner to switch on `TryGetSystemEventData()` and use pattern matching to act on the individual events. If an event is not a system event, the method will return false and the out parameter will be null.\n\n*As a caveat, if you are using a custom event type with an EventType value that later gets added as a system event by the service and SDK, the return value of `TryGetSystemEventData` would change from `false` to `true`. This could come up if you are pre-emptively creating your own custom events for events that are already being sent by the service, but have not yet been added to the SDK. In this case, it is better to use the generic `ToObjectFromJson<T>` method on the `Data` property so that your code flow doesn't change automatically after upgrading (of course, you may still want to modify your code to consume the newly released system event model as opposed to your custom model).*\n\n```C# Snippet:DeserializePayloadUsingAsSystemEventData\nforeach (EventGridEvent egEvent in egEvents)\n{\n    // If the event is a system event, TryGetSystemEventData will return the deserialized system event\n    if (egEvent.TryGetSystemEventData(out object systemEvent))\n    {\n        switch (systemEvent)\n        {\n            case SubscriptionValidationEventData subscriptionValidated:\n                Console.WriteLine(subscriptionValidated.ValidationCode);\n                break;\n            case StorageBlobCreatedEventData blobCreated:\n                Console.WriteLine(blobCreated.BlobType);\n                break;\n            // Handle any other system event type\n            default:\n                Console.WriteLine(egEvent.EventType);\n                // we can get the raw Json for the event using Data\n                Console.WriteLine(egEvent.Data.ToString());\n                break;\n        }\n    }\n    else\n    {\n        switch (egEvent.EventType)\n        {\n            case \"MyApp.Models.CustomEventType\":\n                TestPayload deserializedEventData = egEvent.Data.ToObjectFromJson<TestPayload>();\n                Console.WriteLine(deserializedEventData.Name);\n                break;\n            // Handle any other custom event type\n            default:\n                Console.Write(egEvent.EventType);\n                Console.WriteLine(egEvent.Data.ToString());\n                break;\n        }\n    }\n}\n```\n\n## Troubleshooting\n\n### Service Responses\n`SendEvents()` returns an HTTP response code from the service. A `RequestFailedException` is thrown as a service response for any unsuccessful requests. The exception contains information about what response code was returned from the service.\n\n### Deserializing Event Data\n- If the event data is not valid JSON, a `JsonException` will be thrown when calling `Parse` or `ParseMany`.\n- If the event schema does not correspond to the type being deserialized to (e.g. calling `CloudEvent.Parse` on an EventGridSchema event), an `ArgumentException` is thrown.\n- If `Parse` is called on data that contains multiple events, an `ArgumentException` is thrown. `ParseMany` should be used here instead.\n\n### Setting up console logging\nYou can also easily [enable console logging](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md#logging) if you want to dig deeper into the requests you're making against the service.\n\n### Distributed Tracing\nThe Event Grid library supports distributing tracing out of the box. In order to adhere to the CloudEvents specification's [guidance](https://github.com/cloudevents/spec/blob/v1.0.1/extensions/distributed-tracing.md) on distributing tracing, the library will set the `traceparent` and `tracestate` on the `ExtensionAttributes` of a `CloudEvent` when distributed tracing is enabled. To learn more about how to enable distributed tracing in your application, take a look at the Azure SDK [distributed tracing documentation](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md#Distributed-tracing).\n\n### Event Grid on Kubernetes\nThis library has been tested and validated on Kubernetes using Azure Arc.\n\n## Next steps\n\nView more https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/eventgrid/Azure.Messaging.EventGrid/samples here for common usages of the Event Grid client library: [Event Grid Samples](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/eventgrid/Azure.Messaging.EventGrid/samples).\n\n## Contributing\n\nThis project welcomes contributions and suggestions.\nMost contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution.\nFor details, visit [Contributor License Agreements](https://opensource.microsoft.com/cla/).\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment).\nSimply follow the instructions provided by the bot.\nYou will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2Fsdk%2Ftemplate%2FAzure.Template%2FREADME.png)\n",
        "repo_name": "eventgrid/Azure.Messaging.EventGrid",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/eventgrid/Azure.Messaging.EventGrid",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Event Grid management client library for .NET\n\nMicrosoft Azure Event Grid is a highly scalable, serverless event broker that you can use to integrate applications using events. Events are delivered by Event Grid to subscriber destinations such as applications, Azure services, or any endpoint to which Event Grid has network access. The source of those events can be other applications, SaaS services and Azure services.\n\nThis library supports managing Microsoft Azure Event Grid resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Event Grid management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.EventGrid\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "eventgrid/Azure.ResourceManager.EventGrid",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/eventgrid/Azure.ResourceManager.EventGrid",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# CloudNative CloudEvent support for Azure.Messaging.EventGrid library for .NET\n\nThis library can be used to enable publishing CloudNative CloudEvents using the Azure Event Grid library.\n\n## Getting started\n\n### Install the package\n\nInstall the client library from [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Microsoft.Azure.Messaging.EventGrid.CloudNativeCloudEvents\n```\n\n### Prerequisites\n\nYou must have an [Azure subscription](https://azure.microsoft.com/free/dotnet/) and an Azure resource group with a custom Event Grid topic or domain. Follow this [step-by-step tutorial](https://docs.microsoft.com/azure/event-grid/custom-event-quickstart-portal) to register the Event Grid resource provider and create Event Grid topics using the [Azure portal](https://portal.azure.com/). There is a [similar tutorial](https://docs.microsoft.com/azure/event-grid/custom-event-quickstart) using [Azure CLI](https://docs.microsoft.com/cli/azure).\n\n### Authenticate the client\n\nIn order for the client library to interact with a topic or domain, you will need the `endpoint` of the Event Grid topic and a `credential`, which can be created using the topic's access key.\n\nYou can find the endpoint for your Event Grid topic either in the [Azure Portal](https://portal.azure.com/) or by using the [Azure CLI](https://docs.microsoft.com/cli/azure) snippet below.\n\n```bash\naz eventgrid topic show --name <your-resource-name> --resource-group <your-resource-group-name> --query \"endpoint\"\n```\n\nThe access key can also be found through the [portal](https://docs.microsoft.com/azure/event-grid/get-access-keys), or by using the Azure CLI snippet below:\n```bash\naz eventgrid topic key list --name <your-resource-name> --resource-group <your-resource-group-name> --query \"key1\"\n```\n\n#### Creating and Authenticating `EventGridPublisherClient`\n\nOnce you have your access key and topic endpoint, you can create the publisher client as follows:\n```C#\nEventGridPublisherClient client = new EventGridPublisherClient(\n    new Uri(\"<endpoint>\"),\n    new AzureKeyCredential(\"<access-key>\"));\n```\n\n## Key concepts\n\nFor information about general Event Grid concepts: [Concepts in Azure Event Grid](https://docs.microsoft.com/azure/event-grid/concepts).\n\nFor detailed information about the Event Grid client library concepts: [Event Grid Client Library](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/eventgrid/Azure.Messaging.EventGrid#key-concepts)\n\n## Examples\n\n### Publish to an Event Grid topic\n```C# Snippet:CloudNativePublish\nEventGridPublisherClient client = new EventGridPublisherClient(\n        new Uri(TestEnvironment.CloudEventTopicHost),\n        new AzureKeyCredential(TestEnvironment.CloudEventTopicKey));\n\nvar cloudEvent =\n    new CloudEvent\n    {\n        Id = Guid.NewGuid().ToString(),\n        Type = \"record\",\n        Source = new Uri(\"http://www.contoso.com\"),\n        Data = \"data\"\n    };\nawait client.SendCloudNativeCloudEventAsync(cloudEvent);\n```\n\n### Publish to an Event Grid Domain\nWhen publishing to an Event Grid Domain with CloudEvents, the CloudEvent `source` is used as the domain topic. The Event Grid service doesn't support using an absolute URI for a domain topic, so you would need to do something like the following to integrate with the CloudNative CloudEvents:\n```C# Snippet:CloudNativePublishToDomain\nCloudEvent cloudEvent =\n    new CloudEvent\n    {\n        Type = \"record\",\n        // Event Grid does not allow absolute URIs as the domain topic\n        Source = new Uri(\"test\", UriKind.Relative),\n        Id = \"eventId\",\n        Time = DateTimeOffset.Now,\n        Data = new TestPayload(\"name\", 0)\n    };\n\nawait client.SendCloudNativeCloudEventAsync(cloudEvent);\n```\n\n## Troubleshooting\n\nFor troubleshooting information, see the [Event Grid Client Library documentation](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/eventgrid/Azure.Messaging.EventGrid#troubleshooting).\n\n## Next steps\n\nView more [samples](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/eventgrid/Microsoft.Azure.Messaging.EventGrid.CloudNativeCloudEvents/tests/Samples) here for common usages of the library.\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct]. For more information see the [Code of Conduct FAQ][code_of_conduct_faq] or contact opencode@microsoft.com with any additional questions or comments.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2Fsdk%2Feventgrid%2FMicrosoft.Azure.Messaging.EventGrid.CloudNativeCloudEvents%2FREADME.png)\n\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct\n[code_of_conduct_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "eventgrid/Microsoft.Azure.Messaging.EventGrid.CloudNativeCloudEvents",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/eventgrid/Microsoft.Azure.Messaging.EventGrid.CloudNativeCloudEvents",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure WebJobs EventGrid client library for .NET\n\nThis extension provides functionality for receiving Event Grid webhook calls in Azure Functions, allowing you to easily write functions that respond to any event published to Event Grid.\n\n## Getting started\n\n### Install the package\n\nInstall the Event Grid extension with [NuGet][nuget]:\n\n```dotnetcli\ndotnet add package Microsoft.Azure.WebJobs.Extensions.EventGrid\n```\n\n### Prerequisites\n\nYou must have an [Azure subscription](https://azure.microsoft.com/free/dotnet/) and an Azure resource group with a custom Event Grid topic or domain. Follow this [step-by-step tutorial](https://docs.microsoft.com/azure/event-grid/custom-event-quickstart-portal) to register the Event Grid resource provider and create Event Grid topics using the [Azure portal](https://portal.azure.com/). There is a [similar tutorial](https://docs.microsoft.com/azure/event-grid/custom-event-quickstart) using [Azure CLI](https://docs.microsoft.com/cli/azure).\n\n### Authenticate the Client\n\nIn order for the extension publish events, you will need the `endpoint` of the Event Grid topic and a `credential`, which can be created using the topic's access key.\n\nYou can find the endpoint for your Event Grid topic either in the [Azure Portal](https://portal.azure.com/) or by using the [Azure CLI](https://docs.microsoft.com/cli/azure) snippet below.\n\n```bash\naz eventgrid topic show --name <your-resource-name> --resource-group <your-resource-group-name> --query \"endpoint\"\n```\n\nThe access key can also be found through the [portal](https://docs.microsoft.com/azure/event-grid/get-access-keys), or by using the Azure CLI snippet below:\n```bash\naz eventgrid topic key list --name <your-resource-name> --resource-group <your-resource-group-name> --query \"key1\"\n```\n\n## Key concepts\n\n### Using Event Grid output binding\n\nPlease follow the [binding tutorial](https://docs.microsoft.com/azure/azure-functions/functions-bindings-event-grid-trigger?tabs) to learn about using this extension for publishing EventGrid events.\n\n### Using Event Grid trigger\n\nPlease follow the [tutorial](https://docs.microsoft.com/azure/azure-functions/functions-bindings-event-grid-trigger?tabs=csharp) to learn about triggering an Azure Function when an event is published.\n\n## Examples\n\n### Functions that uses Event Grid output binding\n\nIf you are using the EventGrid schema for your topic, you can output EventGridEvents.\n\n```C# Snippet:EventGridEventBindingFunction\npublic static class EventGridEventBindingFunction\n{\n    [FunctionName(\"EventGridEventBindingFunction\")]\n    public static async Task<IActionResult> RunAsync(\n        [HttpTrigger(AuthorizationLevel.Anonymous, \"get\", \"post\", Route = null)] HttpRequest req,\n        [EventGrid(TopicEndpointUri = \"EventGridEndpoint\", TopicKeySetting = \"EventGridKey\")] IAsyncCollector<EventGridEvent> eventCollector)\n    {\n        EventGridEvent e = new EventGridEvent(await req.ReadAsStringAsync(), \"IncomingRequest\", \"IncomingRequest\", \"1.0.0\");\n        await eventCollector.AddAsync(e);\n        return new OkResult();\n    }\n}\n```\n\nIf you are using the CloudEvent schema for your topic, you can output CloudEvents.\n```C# Snippet:CloudEventBindingFunction\npublic static class CloudEventBindingFunction\n{\n    [FunctionName(\"CloudEventBindingFunction\")]\n    public static async Task<IActionResult> RunAsync(\n        [HttpTrigger(AuthorizationLevel.Anonymous, \"get\", \"post\", Route = null)] HttpRequest req,\n        [EventGrid(TopicEndpointUri = \"EventGridEndpoint\", TopicKeySetting = \"EventGridKey\")] IAsyncCollector<CloudEvent> eventCollector)\n    {\n        CloudEvent e = new CloudEvent(\"IncomingRequest\", \"IncomingRequest\", await req.ReadAsStringAsync());\n        await eventCollector.AddAsync(e);\n        return new OkResult();\n    }\n}\n```\n\nIt is also possible to use Azure Identity with the output binding. To do so, set the `Connection` property to the name of your app setting that contains your Event Grid Topic endpoint along with a set of optional Identity information that is described in detail [here](https://learn.microsoft.com/azure/azure-functions/functions-reference?tabs=blob#configure-an-identity-based-connection). When setting the `Connection` property, the `TopicEndpointUri` and `TopicKeySetting` properties should NOT be set.\n\n```C# Snippet:CloudEventBindingFunctionWithIdentity\npublic static class CloudEventOutputBindingWithIdentityFunction\n{\n    [FunctionName(\"CloudEventOutputBindingWithIdentityFunction\")]\n    public static async Task<IActionResult> RunAsync(\n        [HttpTrigger(AuthorizationLevel.Anonymous, \"get\", \"post\", Route = null)] HttpRequest req,\n        [EventGrid(Connection = \"MyConnection\")] IAsyncCollector<CloudEvent> eventCollector)\n    {\n        CloudEvent e = new CloudEvent(\"IncomingRequest\", \"IncomingRequest\", await req.ReadAsStringAsync());\n        await eventCollector.AddAsync(e);\n        return new OkResult();\n    }\n}\n```\n\nFor local development, use the `local.settings.json` file to store the connection information:\n```json\n{\n  \"Values\": {\n    \"myConnection__topicEndpointUri\": \"{topicEndpointUri}\"\n  }\n}\n```\n\nWhen deployed, use the [application settings](https://docs.microsoft.com/azure/azure-functions/functions-how-to-use-azure-function-app-settings) to store this information.\n\nYou can also output a string or JObject and the extension will attempt to parse into the correct strongly typed event.\n\n### Functions that uses Event Grid trigger\nYou can also create a function that will be executed whenever an event is delivered to your topic. Depending on the schema you have selected for your Azure Function event subscription, you can bind to either `EventGridEvent` or `CloudEvent`:\n\n```C# Snippet:EventGridEventTriggerFunction\npublic static class EventGridEventTriggerFunction\n{\n    [FunctionName(\"EventGridEventTriggerFunction\")]\n    public static void Run(\n        ILogger logger,\n        [EventGridTrigger] EventGridEvent e)\n    {\n        logger.LogInformation(\"Event received {type} {subject}\", e.EventType, e.Subject);\n    }\n}\n```\n\nAnd if your subscription is configured with the CloudEvent schema:\n```C# Snippet:CloudEventTriggerFunction\npublic static class CloudEventTriggerFunction\n{\n    [FunctionName(\"CloudEventTriggerFunction\")]\n    public static void Run(\n        ILogger logger,\n        [EventGridTrigger] CloudEvent e)\n    {\n        logger.LogInformation(\"Event received {type} {subject}\", e.Type, e.Subject);\n    }\n}\n```\n\nIt is also possible to bind to an array of events. This is useful if you have [batching enabled](https://learn.microsoft.com/azure/event-grid/delivery-and-retry#output-batching) for your Event Grid Subscription.\n\n```C# Snippet:EventGridEventBatchTriggerFunction\npublic static class EventGridEventBatchTriggerFunction\n{\n    [FunctionName(\"EventGridEventBatchTriggerFunction\")]\n    public static void Run(\n        ILogger logger,\n        [EventGridTrigger] EventGridEvent[] events)\n    {\n        foreach (EventGridEvent eventGridEvent in events)\n        {\n            logger.LogInformation(\"Event received {type} {subject}\", eventGridEvent.EventType, eventGridEvent.Subject);\n        }\n    }\n}\n```\n\nSimilarly, for subscriptions configured with the CloudEvent schema:\n\n```C# Snippet:CloudEventBatchTriggerFunction\npublic static class CloudEventBatchTriggerFunction\n{\n    [FunctionName(\"CloudEventBatchTriggerFunction\")]\n    public static void Run(\n        ILogger logger,\n        [EventGridTrigger] CloudEvent[] events)\n    {\n        foreach (CloudEvent cloudEvent in events)\n        {\n            logger.LogInformation(\"Event received {type} {subject}\", cloudEvent.Type, cloudEvent.Subject);\n        }\n    }\n}\n```\n\n## Troubleshooting\n\nPlease refer to [Monitor Azure Functions](https://docs.microsoft.com/azure/azure-functions/functions-monitoring) for troubleshooting guidance.\n\n## Next steps\n\nRead the [introduction to Azure Function](https://docs.microsoft.com/azure/azure-functions/functions-overview) or [creating an Azure Function guide](https://docs.microsoft.com/azure/azure-functions/functions-create-first-azure-function).\n\n## Contributing\n\nSee our [CONTRIBUTING.md][contrib] for details on building,\ntesting, and contributing to this library.\n\nThis project welcomes contributions and suggestions.  Most contributions require\nyou to agree to a Contributor License Agreement (CLA) declaring that you have\nthe right to, and actually do, grant us the rights to use your contribution. For\ndetails, visit [cla.microsoft.com][cla].\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc].\nFor more information see the [Code of Conduct FAQ][coc_faq]\nor contact [opencode@microsoft.com][coc_contact] with any\nadditional questions or comments.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2Fsdk%2Fsearch%2FMicrosoft.Azure.WebJobs.Extensions.EventGrid%2FREADME.png)\n\n<!-- LINKS -->\n[source]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/search/Microsoft.Azure.WebJobs.Extensions.EventGrid/src\n[package]: https://www.nuget.org/packages/Microsoft.Azure.WebJobs.Extensions.EventGrid/\n[docs]: https://docs.microsoft.com/dotnet/api/Microsoft.Azure.WebJobs.Extensions.EventGrid\n[nuget]: https://www.nuget.org/\n\n[contrib]: https://github.com/Azure/azure-sdk-for-net/tree/main/CONTRIBUTING.md\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n",
        "repo_name": "eventgrid/Microsoft.Azure.WebJobs.Extensions.EventGrid",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/eventgrid/Microsoft.Azure.WebJobs.Extensions.EventGrid",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Event Hubs Experimental client library for .NET\n\nThis library contains experimental types that are being evaluated for inclusion in the Event Hubs client libraries in the future.  This library will remain in beta and will allow breaking changes.  It is recommended that types from this library are not used in production applications.\n  \n## Contributing  \n\nThis project welcomes contributions and suggestions.  Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\nPlease see our [contributing guide](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/eventhub/Azure.Messaging.EventHubs/CONTRIBUTING.md) for more information.\n  \n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2Fsdk%2Feventhub%2FAzure.Messaging.EventHubs.Shared%2FREADME.png)\n",
        "repo_name": "eventhub/Azure.Messaging.EventHubs.Experimental",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/eventhub/Azure.Messaging.EventHubs.Experimental",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Event Hubs Event Processor client library for .NET\n\nAzure Event Hubs is a highly scalable publish-subscribe service that can ingest millions of events per second and stream them to multiple consumers. This lets you process and analyze the massive amounts of data produced by your connected devices and applications. Once Event Hubs has collected the data, you can retrieve, transform, and store it by using any real-time analytics provider or with batching/storage adapters.  If you would like to know more about Azure Event Hubs, you may wish to review: [What is Event Hubs](https://docs.microsoft.com/azure/event-hubs/event-hubs-about).\n\nThe Event Processor client library is a companion to the Azure Event Hubs client library, providing a stand-alone client for consuming events in a robust, durable, and scalable way that is suitable for the majority of production scenarios.  An opinionated implementation built using Azure Storage blobs, the Event Processor is recommended for:\n\n- Reading and processing events across all partitions of an Event Hub at scale with resilience to transient failures and intermittent network issues.\n\n- Processing events cooperatively, where multiple processors dynamically distribute and share the responsibility in the context of a consumer group, gracefully managing the load as processors are added and removed from the group.\n\n- Managing checkpoints and state for processing in a durable manner using Azure Storage blobs as the underlying data store.\n\n[Source code](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/eventhub/Azure.Messaging.EventHubs.Processor/src) | [Package (NuGet)](https://www.nuget.org/packages/Azure.Messaging.EventHubs.Processor/) | [API reference documentation](https://docs.microsoft.com/dotnet/api/azure.messaging.eventhubs) | [Product documentation](https://docs.microsoft.com/azure/event-hubs/) | [Troubleshooting guide](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/eventhub/Azure.Messaging.EventHubs/TROUBLESHOOTING.md)\n\n## Getting started\n\n### Prerequisites\n\n- **Azure Subscription:**  To use Azure services, including Azure Event Hubs, you'll need a subscription.  If you do not have an existing Azure account, you may sign up for a [free trial](https://azure.microsoft.com/free/dotnet/) or use your [Visual Studio Subscription](https://visualstudio.microsoft.com/subscriptions/) benefits when you [create an account](https://azure.microsoft.com/account).\n\n- **Event Hubs namespace with an Event Hub:** To interact with Azure Event Hubs, you'll also need to have a namespace and Event Hub available.  If you are not familiar with creating Azure resources, you may wish to follow the step-by-step guide for [creating an Event Hub using the Azure portal](https://docs.microsoft.com/azure/event-hubs/event-hubs-create).  There, you can also find detailed instructions for using the Azure CLI, Azure PowerShell, or Azure Resource Manager (ARM) templates to create an Event Hub.\n\n- **Azure Storage account with blob storage:** To persist checkpoints and govern ownership in Azure Storage, you'll need to have an Azure Storage account with blobs available.  The Azure Storage account used for the processor should have soft delete and blob versioning disabled.  If you are not familiar with Azure Storage accounts, you may wish to follow the step-by-step guide for [creating a storage account using the Azure portal](https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?toc=%2Fazure%2Fstorage%2Fblobs%2Ftoc.json&tabs=azure-portal).  There, you can also find detailed instructions for using the Azure CLI, Azure PowerShell, or Azure Resource Manager (ARM) templates to create storage accounts.\n\n- **Azure Storage blob container:** Checkpoint and ownership data in Azure Storage will be written to blobs in a specific container.  The `EventProcessorClient` requires an existing container and will not implicitly create one to help guard against accidental misconfiguration.  It is recommended that you use a unique container for each Event Hub and consumer group combination.  If you are not familiar with Azure Storage containers, you may wish to refer to the documentation on [managing containers](https://docs.microsoft.com/azure/storage/blobs/storage-blob-container-create?tabs=dotnet).  There, you can find detailed instructions for using .NET, the Azure CLI, or Azure PowerShell to create a container.\n\n- **C# 8.0:** The Azure Event Hubs client library makes use of new features that were introduced in C# 8.0.  In order to take advantage of the C# 8.0 syntax, it is recommended that you compile using the [.NET Core SDK](https://dotnet.microsoft.com/download) 3.0 or higher with a [language version](https://docs.microsoft.com/dotnet/csharp/language-reference/configure-language-version#override-a-default) of `latest`.\n\n  Visual Studio users wishing to take full advantage of the C# 8.0 syntax will need to use Visual Studio 2019 or later.  Visual Studio 2019, including the free Community edition, can be downloaded [here](https://visualstudio.microsoft.com).  Users of Visual Studio 2017 can take advantage of the C# 8 syntax by making use of the [Microsoft.Net.Compilers NuGet package](https://www.nuget.org/packages/Microsoft.Net.Compilers/) and setting the language version, though the editing experience may not be ideal.\n\n  You can still use the library with previous C# language versions, but will need to manage asynchronous enumerable and asynchronous disposable members manually rather than benefiting from the new syntax.  You may still target any framework version supported by your .NET Core SDK, including earlier versions of .NET Core or the .NET framework.  For more information, see: [how to specify target frameworks](https://docs.microsoft.com/dotnet/standard/frameworks#how-to-specify-target-frameworks).  \n  \n  **Important Note:** In order to build or run the [examples](#examples) and the [samples](#next-steps) without modification, use of C# 11.0 is necessary.  You can still run the samples if you decide to tweak them for other language versions.\n\nTo quickly create the needed resources in Azure and to receive connection strings for them, you can deploy our sample template by clicking:  \n\n[![Deploy to Azure](https://aka.ms/deploytoazurebutton)](https://portal.azure.com/#create/Microsoft.Template/uri/https%3A%2F%2Fraw.githubusercontent.com%2FAzure%2Fazure-sdk-for-net%2Fmaster%2Fsdk%2Feventhub%2FAzure.Messaging.EventHubs.Processor%2Fassets%2Fsamples-azure-deploy.json)\n\n### Install the package\n\nInstall the Azure Event Hubs Event Processor client library for .NET using [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.Messaging.EventHubs.Processor\n```\n\n### Authenticate the client\n\n#### Obtain an Event Hubs connection string\n\nFor the Event Hubs client library to interact with an Event Hub, it will need to understand how to connect and authorize with it.  The easiest means for doing so is to use a connection string, which is created automatically when creating an Event Hubs namespace.  If you aren't familiar with using connection strings with Event Hubs, you may wish to follow the step-by-step guide to [get an Event Hubs connection string](https://docs.microsoft.com/azure/event-hubs/event-hubs-get-connection-string).\n\n#### Obtain an Azure Storage connection string\n\nFor the event processor client to make use of Azure Storage blobs for checkpointing, it will need to understand how to connect to a storage account and authorize with it.  The most straightforward method of doing so is to use a connection string, which is generated at the time that the storage account is created.  If you aren't familiar with storage account connection string authorization in Azure, you may wish to follow the step-by-step guide to [configure Azure Storage connection strings](https://docs.microsoft.com/azure/storage/common/storage-configure-connection-string).\n\nOnce you have the connection strings, see [Creating an Event Processor Client](#creating-an-event-processor-client) for an example of how to use them to create the processor.\n\n## Key concepts\n\n- An **event processor** is a construct intended to manage the responsibilities associated with connecting to a given Event Hub and processing events from each of its partitions, in the context of a specific consumer group.  The act of processing events read from the partition and handling any errors that occur is delegated by the event processor to code that you provide, allowing your logic to concentrate on delivering business value while the processor handles the tasks associated with reading events, managing the partitions, and allowing state to be persisted in the form of checkpoints. \n\n- **Checkpointing** is a process by which readers mark and persist their position for events that have been processed for a partition. Checkpointing is the responsibility of the consumer and occurs on a per-partition, typically in the context of a specific consumer group.  For the `EventProcessorClient`, this means that, for a consumer group and partition combination, the processor must keep track of its current position in the event stream.  If you would like more information, please refer to [checkpointing ](https://docs.microsoft.com/azure/event-hubs/event-hubs-features#checkpointing) in the Event Hubs product documentation.\n\n  When an event processor connects, it will begin reading events at the checkpoint that was previously persisted by the last processor of that partition in that consumer group, if one exists.  As an event processor reads and acts on events in the partition, it should periodically create checkpoints to both mark the events as \"complete\" by downstream applications and to provide resiliency should an event processor or the environment hosting it fail.  Should it be necessary, it is possible to reprocess events that were previously marked as \"complete\" by specifying an earlier offset through this checkpointing process.\n\n- A **partition** is an ordered sequence of events that is held in an Event Hub. Partitions are a means of data organization associated with the parallelism required by event consumers.  Azure Event Hubs provides message streaming through a partitioned consumer pattern in which each consumer only reads a specific subset, or partition, of the message stream. As newer events arrive, they are added to the end of this sequence. The number of partitions is specified at the time an Event Hub is created and cannot be changed.\n\n- A **consumer group** is a view of an entire Event Hub. Consumer groups enable multiple consuming applications to each have a separate view of the event stream, and to read the stream independently at their own pace and from their own position.  There can be at most 5 concurrent readers on a partition per consumer group; however it is recommended that there is only one active consumer for a given partition and consumer group pairing. Each active reader receives all of the events from its partition; if there are multiple readers on the same partition, then they will receive duplicate events.\n\nFor more concepts and deeper discussion, see: [Event Hubs Features](https://docs.microsoft.com/azure/event-hubs/event-hubs-features).\n\n### Client lifetime\n\nThe `EventProcessorClient` is safe to cache and use as a singleton for the lifetime of the application, which is best practice when events are being read regularly. The clients are responsible for efficient management of network, CPU, and memory use, working to keep usage low during periods of inactivity.  Calling `StopProcessingAsync` or `StopProcessing` on the processor is required to ensure that network resources and other unmanaged objects are properly cleaned up.\n\n### Thread safety\n\nWe guarantee that all client instance methods are thread-safe and independent of each other ([guideline](https://azure.github.io/azure-sdk/dotnet_introduction.html#dotnet-service-methods-thread-safety)). This ensures that the recommendation of reusing client instances is always safe, even across threads.\n\nThe data model types, such as `EventData` and `EventDataBatch` are not thread-safe.  They should not be shared across threads nor used concurrently with client methods.\n\n### Additional concepts\n\n<!-- CLIENT COMMON BAR -->\n[Client options](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/eventhub/Azure.Messaging.EventHubs.Processor/samples/Sample02_EventProcessorConfiguration.md#event-processor-configuration) | [Event handlers](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/eventhub/Azure.Messaging.EventHubs.Processor/samples/Sample03_EventProcessorHandlers.md) | [Handling failures](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/eventhub/Azure.Messaging.EventHubs/TROUBLESHOOTING.md) | [Diagnostics](#logging-and-diagnostics) |\n[Mocking (processor)](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/eventhub/Azure.Messaging.EventHubs.Processor/samples/Sample08_MockingClientTypes.md) |\n[Mocking (client types)](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/eventhub/Azure.Messaging.EventHubs/samples/Sample11_MockingClientTypes.md)\n<!-- CLIENT COMMON BAR -->\n\n## Examples\n\n### Creating an Event Processor client\n\nSince the `EventProcessorClient` has a dependency on Azure Storage blobs for persistence of its state, you'll need to provide a `BlobContainerClient` for the processor, which has been configured for the storage account and container that should be used.  The container used to configure the `EventProcessorClient` must exist.\n\nBecause the `EventProcessorClient` has no way of knowing the intent of specifying a container that does not exist, it will not implicitly create the container.  This acts as a guard against a misconfigured container causing a rogue processor unable to share ownership and interfering with other processors in the consumer group.\n\n```C# Snippet:EventHubs_Processor_ReadMe_Create\n// The container specified when creating the BlobContainerClient must exist; it will\n// not be implicitly created.\n\nvar storageConnectionString = \"<< CONNECTION STRING FOR THE STORAGE ACCOUNT >>\";\nvar blobContainerName = \"<< NAME OF THE BLOB CONTAINER >>\";\n\nvar eventHubsConnectionString = \"<< CONNECTION STRING FOR THE EVENT HUBS NAMESPACE >>\";\nvar eventHubName = \"<< NAME OF THE EVENT HUB >>\";\nvar consumerGroup = \"<< NAME OF THE EVENT HUB CONSUMER GROUP >>\";\n\nvar storageClient = new BlobContainerClient(storageConnectionString, blobContainerName);\nvar processor = new EventProcessorClient(storageClient, consumerGroup, eventHubsConnectionString, eventHubName);\n```\n\n### Configure the event and error handlers\n\nIn order to use the `EventProcessorClient`, handlers for event processing and errors must be provided.  These handlers are considered self-contained and developers are responsible for ensuring that exceptions within the handler code are accounted for.\n\n```C# Snippet:EventHubs_Processor_ReadMe_ConfigureHandlers\nvar storageConnectionString = \"<< CONNECTION STRING FOR THE STORAGE ACCOUNT >>\";\nvar blobContainerName = \"<< NAME OF THE BLOB CONTAINER >>\";\n\nvar eventHubsConnectionString = \"<< CONNECTION STRING FOR THE EVENT HUBS NAMESPACE >>\";\nvar eventHubName = \"<< NAME OF THE EVENT HUB >>\";\nvar consumerGroup = \"<< NAME OF THE EVENT HUB CONSUMER GROUP >>\";\n\nasync Task processEventHandler(ProcessEventArgs eventArgs)\n{\n    try\n    {\n        // Perform the application-specific processing for an event.  This method\n        // is intended for illustration and is not defined in this snippet.\n\n        await DoSomethingWithTheEvent(eventArgs.Partition, eventArgs.Data);\n    }\n    catch\n    {\n        // Handle the exception from handler code\n    }\n}\n\nasync Task processErrorHandler(ProcessErrorEventArgs eventArgs)\n{\n    try\n    {\n        // Perform the application-specific processing for an error.  This method\n        // is intended for illustration and is not defined in this snippet.\n\n        await DoSomethingWithTheError(eventArgs.Exception);\n    }\n    catch\n    {\n        // Handle the exception from handler code\n    }\n}\n\nvar storageClient = new BlobContainerClient(storageConnectionString, blobContainerName);\nvar processor = new EventProcessorClient(storageClient, consumerGroup, eventHubsConnectionString, eventHubName);\n\nprocessor.ProcessEventAsync += processEventHandler;\nprocessor.ProcessErrorAsync += processErrorHandler;\n```\n\n### Start and stop processing\n\nThe `EventProcessorClient` will perform its processing in the background once it has been explicitly started and continue doing so until it has been explicitly stopped.  While this allows the application code to perform other tasks, it also places the responsibility of ensuring that the process does not terminate during processing if there are no other tasks being performed.\n\n```C# Snippet:EventHubs_Processor_ReadMe_ProcessUntilCanceled\nvar cancellationSource = new CancellationTokenSource();\ncancellationSource.CancelAfter(TimeSpan.FromSeconds(45));\n\nvar storageConnectionString = \"<< CONNECTION STRING FOR THE STORAGE ACCOUNT >>\";\nvar blobContainerName = \"<< NAME OF THE BLOB CONTAINER >>\";\n\nvar eventHubsConnectionString = \"<< CONNECTION STRING FOR THE EVENT HUBS NAMESPACE >>\";\nvar eventHubName = \"<< NAME OF THE EVENT HUB >>\";\nvar consumerGroup = \"<< NAME OF THE EVENT HUB CONSUMER GROUP >>\";\n\nTask processEventHandler(ProcessEventArgs eventArgs) => Task.CompletedTask;\nTask processErrorHandler(ProcessErrorEventArgs eventArgs) => Task.CompletedTask;\n\nvar storageClient = new BlobContainerClient(storageConnectionString, blobContainerName);\nvar processor = new EventProcessorClient(storageClient, consumerGroup, eventHubsConnectionString, eventHubName);\n\nprocessor.ProcessEventAsync += processEventHandler;\nprocessor.ProcessErrorAsync += processErrorHandler;\n\nawait processor.StartProcessingAsync();\n\ntry\n{\n    // The processor performs its work in the background; block until cancellation\n    // to allow processing to take place.\n\n    await Task.Delay(Timeout.Infinite, cancellationSource.Token);\n}\ncatch (TaskCanceledException)\n{\n    // This is expected when the delay is canceled.\n}\n\ntry\n{\n    await processor.StopProcessingAsync();\n}\nfinally\n{\n    // To prevent leaks, the handlers should be removed when processing is complete.\n\n    processor.ProcessEventAsync -= processEventHandler;\n    processor.ProcessErrorAsync -= processErrorHandler;\n}\n```\n\n### Using an Active Directory principal with the Event Processor client\n\nThe [Azure Identity library](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md) provides Azure Active Directory authentication support which can be used for the Azure client libraries, including Event Hubs and Azure Storage.\n\nTo make use of an Active Directory principal, one of the available credentials from the `Azure.Identity` library is specified when creating the Event Hubs client.  In addition, the fully qualified Event Hubs namespace and the name of desired Event Hub are supplied in lieu of the Event Hubs connection string.\n\nTo make use of an Active Directory principal with Azure Storage blob containers, the fully qualified URL to the container must be provided when creating the storage client.  Details about the valid URI formats for accessing Blob storage may be found in [Naming and Referencing Containers, Blobs, and Metadata](https://docs.microsoft.com/rest/api/storageservices/Naming-and-Referencing-Containers--Blobs--and-Metadata#resource-uri-syntax).  \n\n```C# Snippet:EventHubs_Processor_ReadMe_CreateWithIdentity\nvar credential = new DefaultAzureCredential();\nvar blobStorageUrl =\"<< FULLY-QUALIFIED CONTAINER URL (like https://myaccount.blob.core.windows.net/mycontainer) >>\";\n\nvar fullyQualifiedNamespace = \"<< FULLY-QUALIFIED EVENT HUBS NAMESPACE (like something.servicebus.windows.net) >>\";\nvar eventHubName = \"<< NAME OF THE EVENT HUB >>\";\nvar consumerGroup = \"<< NAME OF THE EVENT HUB CONSUMER GROUP >>\";\n\nvar storageClient = new BlobContainerClient(new Uri(blobStorageUrl), credential);\n\nvar processor = new EventProcessorClient\n(\n    storageClient,\n    consumerGroup,\n    fullyQualifiedNamespace,\n    eventHubName,\n    credential\n);\n```\n\nWhen using Azure Active Directory with Event Hubs, your principal must be assigned a role which allows reading from Event Hubs, such as the `Azure Event Hubs Data Receiver` role. For more information about using Azure Active Directory authorization with Event Hubs, please refer to [the associated documentation](https://docs.microsoft.com/azure/event-hubs/authorize-access-azure-active-directory).\n\nWhen using Azure Active Directory with Azure Storage, your principal must be assigned a role which allows read, write, and delete access to blobs, such as the `Storage Blob Data Contributor` role.  For more information about using Active Directory Authorization with Azure Storage, please refer to the [the associated documentation](https://docs.microsoft.com/azure/storage/common/storage-auth-aad) and the [Azure Storage authorization sample](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/storage/Azure.Storage.Blobs/samples/Sample02_Auth.cs).\n\n## Troubleshooting\n\nFor detailed troubleshooting information, please refer to the [Event Hubs Troubleshooting Guide](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/eventhub/Azure.Messaging.EventHubs/TROUBLESHOOTING.md).\n\n### Exception handling\n\n#### Event Processor client exceptions\n\nThe Event Processor client makes every attempt to be resilient in the face of exceptions and will take the necessary actions to continue processing unless it is impossible to do so.  **_No action from developers is needed_** for this to take place; it is natively part of the processor's behavior.\n\nIn order to allow developers the opportunity to inspect and react to exceptions that occur within the Event Processor client operations, they are surfaced via the `ProcessError` event.  The arguments for this event offer details about the exception and the context in which it was observed.  Developers may perform normal operations on the Event Processor client from within this event handler, such as stopping and/or restarting it in response to errors, but may not otherwise influence the processor's exception behavior.  \n\nFor a basic example of implementing the error handler, please see the sample: [Event Processor Handlers](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/eventhub/Azure.Messaging.EventHubs.Processor/samples/Sample03_EventProcessorHandlers.md#process-error).\n\n#### Exceptions in event handlers\n\nBecause the Event Processor client lacks the appropriate context to understand the severity of exceptions within the event handlers that developers provide, it cannot assume what actions would be a reasonable response to them.  As a result, developers are considered responsible for exceptions that occur within the event handlers they provide using `try/catch` blocks and other standard language constructs.  \n\nThe Event Processor client will not attempt to detect exceptions in developer code nor surface them explicitly.  The resulting behavior will depend on the processor's hosting environment and the context in which the event handler was called.  Because this may vary between different scenarios, it is strongly recommended that developers code their event handlers defensively and account for potential exceptions.\n\n### Logging and diagnostics\n\nThe Event Processor client library is fully instrumented for logging information at various levels of detail using the .NET `EventSource` to emit information.  Logging is performed for each operation and follows the pattern of marking the starting point of the operation, it's completion, and any exceptions encountered.  Additional information that may offer insight is also logged in the context of the associated operation.\n\nThe Event Processor client logs are available to any `EventListener` by opting into the source named \"Azure-Messaging-EventHubs-Processor-EventProcessorClient\" or opting into all sources that have the trait \"AzureEventSource\".  To make capturing logs from the Azure client libraries easier, the `Azure.Core` library used by Event Hubs offers an `AzureEventSourceListener`.  More information can be found in [Capturing Event Hubs logs using the AzureEventSourceListener](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/eventhub/Azure.Messaging.EventHubs/samples/Sample10_AzureEventSourceListener.md).\n\nThe Event Processor library is also instrumented for distributed tracing using Application Insights or OpenTelemetry.  More information can be found in the [Azure.Core Diagnostics sample](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md#distributed-tracing).\n\n## Next steps\n\nBeyond the scenarios discussed, the Azure Event Hubs Processor library offers support for additional scenarios to help take advantage of the full feature set of the `EventProcessorClient`.  In order to help explore some of these scenarios, the Event Hubs Processor client library offers a project of samples to serve as an illustration for common scenarios.  Please see the samples [README](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/eventhub/Azure.Messaging.EventHubs.Processor/samples/README.md) for details.\n\n## Contributing  \n\nThis project welcomes contributions and suggestions.  Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\nPlease see our [contributing guide](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/eventhub/Azure.Messaging.EventHubs/CONTRIBUTING.md) for more information.\n  \n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2Fsdk%2Feventhub%2FAzure.Messaging.EventHubs.Processor%2FREADME.png)\n",
        "repo_name": "eventhub/Azure.Messaging.EventHubs.Processor",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/eventhub/Azure.Messaging.EventHubs.Processor",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Event Hubs code sharing library\n\nThis library is intended to serve as a common location for non-public code that is shared amongst the packages that comprise the [Azure Event Hubs client library for .NET](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/eventhub/Azure.Messaging.EventHubs) development ecosystem.  The artifacts in this library are intended to be small and cohesive units of work with minimal dependencies, which offer common building blocks for internal implementation.  These artifacts should be accompanied by their suite of unit tests, allowing the `Shared` library to have sole responsibility for them.\n\nThe other libraries within the Azure Event Hubs ecosystem are expected to include these artifacts by shared links to enable them to be loosely hosted within those projects rather than consumed by direct project or package reference.\n  \n## Contributing  \n\nThis project welcomes contributions and suggestions.  Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\nPlease see our [contributing guide](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/eventhub/Azure.Messaging.EventHubs/CONTRIBUTING.md) for more information.\n  \n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2Fsdk%2Feventhub%2FAzure.Messaging.EventHubs.Shared%2FREADME.png)\n",
        "repo_name": "eventhub/Azure.Messaging.EventHubs.Shared",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/eventhub/Azure.Messaging.EventHubs.Shared",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Event Hubs client library for .NET\n\nAzure Event Hubs is a highly scalable publish-subscribe service that can ingest millions of events per second and stream them to multiple consumers. This lets you process and analyze the massive amounts of data produced by your connected devices and applications. Once Event Hubs has collected the data, you can retrieve, transform, and store it by using any real-time analytics provider or with batching/storage adapters.  If you would like to know more about Azure Event Hubs, you may wish to review: [What is Event Hubs](https://docs.microsoft.com/azure/event-hubs/event-hubs-about).\n\nThe Azure Event Hubs client library allows for publishing and consuming of Azure Event Hubs events and may be used to:\n\n- Emit telemetry about your application for business intelligence and diagnostic purposes.\n\n- Publish facts about the state of your application which interested parties may observe and use as a trigger for taking action.\n\n- Observe interesting operations and interactions happening within your business or other ecosystem, allowing loosely coupled systems to interact without the need to bind them together.\n\n- Receive events from one or more publishers, transform them to better meet the needs of your ecosystem, then publish the transformed events to a new stream for consumers to observe.\n\n[Source code](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/eventhub/Azure.Messaging.EventHubs/src) | [Package (NuGet)](https://www.nuget.org/packages/Azure.Messaging.EventHubs/) | [API reference documentation](https://docs.microsoft.com/dotnet/api/azure.messaging.eventhubs) | [Product documentation](https://docs.microsoft.com/azure/event-hubs/) | [Migration guide](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/eventhub/Azure.Messaging.EventHubs/MigrationGuide.md) | [Troubleshooting guide](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/eventhub/Azure.Messaging.EventHubs/TROUBLESHOOTING.md)\n\n## Getting started\n\n### Prerequisites\n\n- **Azure Subscription:**  To use Azure services, including Azure Event Hubs, you'll need a subscription.  If you do not have an existing Azure account, you may sign up for a [free trial](https://azure.microsoft.com/free/dotnet/) or use your [Visual Studio Subscription](https://visualstudio.microsoft.com/subscriptions/) benefits when you [create an account](https://azure.microsoft.com/account).\n\n- **Event Hubs namespace with an Event Hub:** To interact with Azure Event Hubs, you'll also need to have a namespace and Event Hub available.  If you are not familiar with creating Azure resources, you may wish to follow the step-by-step guide for [creating an Event Hub using the Azure portal](https://docs.microsoft.com/azure/event-hubs/event-hubs-create).  There, you can also find detailed instructions for using the Azure CLI, Azure PowerShell, or Azure Resource Manager (ARM) templates to create an Event Hub.\n\n- **C# 8.0:** The Azure Event Hubs client library makes use of new features that were introduced in C# 8.0.  In order to take advantage of the C# 8.0 syntax, it is recommended that you compile using the [.NET Core SDK](https://dotnet.microsoft.com/download) 3.0 or higher with a [language version](https://docs.microsoft.com/dotnet/csharp/language-reference/configure-language-version#override-a-default) of `latest`.\n\n  Visual Studio users wishing to take full advantage of the C# 8.0 syntax will need to use Visual Studio 2019 or later.  Visual Studio 2019, including the free Community edition, can be downloaded [here](https://visualstudio.microsoft.com).  Users of Visual Studio 2017 can take advantage of the C# 8 syntax by making use of the [Microsoft.Net.Compilers NuGet package](https://www.nuget.org/packages/Microsoft.Net.Compilers/) and setting the language version, though the editing experience may not be ideal.\n\n  You can still use the library with previous C# language versions, but will need to manage asynchronous enumerable and asynchronous disposable members manually rather than benefiting from the new syntax.  You may still target any framework version supported by your .NET Core SDK, including earlier versions of .NET Core or the .NET framework.  For more information, see: [how to specify target frameworks](https://docs.microsoft.com/dotnet/standard/frameworks#how-to-specify-target-frameworks).  \n  **Important Note:** In order to build or run the [examples](#examples) and the [samples](#next-steps) without modification, use of C# 11.0 is necessary.  You can still run the samples if you decide to tweak them for other language versions.  An example of doing so is available in the sample: [Earlier Language Versions](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/eventhub/Azure.Messaging.EventHubs/samples/Sample07_EarlierLanguageVersions.md).\n\nTo quickly create a basic set of Event Hubs resources in Azure and to receive a connection string for them, you can deploy our sample template by clicking:\n\n[![Deploy to Azure](https://aka.ms/deploytoazurebutton)](https://portal.azure.com/#create/Microsoft.Template/uri/https%3A%2F%2Fraw.githubusercontent.com%2FAzure%2Fazure-sdk-for-net%2Fmaster%2Fsdk%2Feventhub%2FAzure.Messaging.EventHubs%2Fassets%2Fsamples-azure-deploy.json)\n\n### Install the package\n\nInstall the Azure Event Hubs client library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.Messaging.EventHubs\n```\n\n### Authenticate the client\n\nFor the Event Hubs client library to interact with an Event Hub, it will need to understand how to connect and authorize with it.  The easiest means for doing so is to use a connection string, which is created automatically when creating an Event Hubs namespace.  If you aren't familiar with using connection strings with Event Hubs, you may wish to follow the step-by-step guide to [get an Event Hubs connection string](https://docs.microsoft.com/azure/event-hubs/event-hubs-get-connection-string).\n\nOnce you have a connection string, any of the Event Hubs client types can be created with it:\n\n```C# Snippet:EventHubs_ReadMe_Create_ConnectionString\nvar connectionString = \"<< CONNECTION STRING FOR THE EVENT HUBS NAMESPACE >>\";\nvar eventHubName = \"<< NAME OF THE EVENT HUB >>\";\n\n// It is recommended that you cache the Event Hubs clients for the lifetime of your\n// application, closing or disposing when application ends.  This example disposes\n// after the immediate scope for simplicity.\n\nawait using var producer = new EventHubProducerClient(connectionString, eventHubName);\n```\n\nFor examples of authenticating the Event Hubs clients with credential types, see [Using an Azure Active Directory (AAD) principal](#using-an-active-directory-principal-with-the-event-hub-clients) or the [Identity and Shared Access Credentials](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/eventhub/Azure.Messaging.EventHubs/samples/Sample06_IdentityAndSharedAccessCredentials.md) sample.\n\nFor examples of authenticating the Event Hubs clients for an ASP.NET Core application, see [Registering with ASP.NET Core dependency injection](#registering-with-aspnet-core-dependency-injection).\n\n## Key concepts\n\n- An **Event Hub client** is the primary interface for developers interacting with the Event Hubs client library.  There are several different Event Hub clients, each dedicated to a specific use of Event Hubs, such as publishing or consuming events.\n\n- An **Event Hub producer** is a type of client that serves as a source of telemetry data, diagnostics information, usage logs, or other log data, as part of an embedded device solution, a mobile device application, a game title running on a console or other device, some client or server based business solution, or a web site.  \n\n- An **Event Hub consumer** is a type of client which reads information from the Event Hub and allows processing of it. Processing may involve aggregation, complex computation and filtering. Processing may also involve distribution or storage of the information in a raw or transformed fashion. Event Hub consumers are often robust and high-scale platform infrastructure parts with built-in analytics capabilities, like Azure Stream Analytics, Apache Spark, or Apache Storm.  \n\n- A **partition** is an ordered sequence of events that is held in an Event Hub. Partitions are a means of data organization associated with the parallelism required by event consumers.  Azure Event Hubs provides message streaming through a partitioned consumer pattern in which each consumer only reads a specific subset, or partition, of the message stream. As newer events arrive, they are added to the end of this sequence. The number of partitions is specified at the time an Event Hub is created and cannot be changed.\n\n- A **consumer group** is a view of an entire Event Hub. Consumer groups enable multiple consuming applications to each have a separate view of the event stream, and to read the stream independently at their own pace and from their own position.  There can be at most 5 concurrent readers on a partition per consumer group; however it is recommended that there is only one active consumer for a given partition and consumer group pairing. Each active reader receives all of the events from its partition; if there are multiple readers on the same partition, then they will receive duplicate events. \n\nFor more concepts and deeper discussion, see: [Event Hubs Features](https://docs.microsoft.com/azure/event-hubs/event-hubs-features).\n\n### Client lifetime\n\nEach of the Event Hubs client types is safe to cache and use as a singleton for the lifetime of the application, which is best practice when events are being published or read regularly. The clients are responsible for efficient management of network, CPU, and memory use, working to keep usage low during periods of inactivity.  Calling either `CloseAsync` or `DisposeAsync` on a client is required to ensure that network resources and other unmanaged objects are properly cleaned up.\n\n### Thread safety\n\nWe guarantee that all client instance methods are thread-safe and independent of each other ([guideline](https://azure.github.io/azure-sdk/dotnet_introduction.html#dotnet-service-methods-thread-safety)). This ensures that the recommendation of reusing client instances is always safe, even across threads. \n\nThe data model types, such as `EventData` and `EventDataBatch` are not thread-safe.  They should not be shared across threads nor used concurrently with client methods.\n\n### Additional concepts\n\n<!-- CLIENT COMMON BAR -->\n[Client options](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/eventhub/Azure.Messaging.EventHubs/samples/Sample02_EventHubsClients.md#configuration) | [Handling failures](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/eventhub/Azure.Messaging.EventHubs/TROUBLESHOOTING.md) | [Diagnostics](#logging-and-diagnostics) |\n[Mocking](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/eventhub/Azure.Messaging.EventHubs/samples/Sample11_MockingClientTypes.md)\n<!-- CLIENT COMMON BAR -->\n\n## Examples\n\n### Inspect an Event Hub\n\nMany Event Hub operations take place within the scope of a specific partition.  Because partitions are owned by the Event Hub, their names are assigned at the time of creation.  To understand what partitions are available, you query the Event Hub using one of the Event Hub clients.  For illustration, the `EventHubProducerClient` is demonstrated in these examples, but the concept and form are common across clients.\n\n```C# Snippet:EventHubs_ReadMe_Inspect\nvar connectionString = \"<< CONNECTION STRING FOR THE EVENT HUBS NAMESPACE >>\";\nvar eventHubName = \"<< NAME OF THE EVENT HUB >>\";\n\n// It is recommended that you cache the Event Hubs clients for the lifetime of your\n// application, closing or disposing when application ends.  This example disposes\n// after the immediate scope for simplicity.\n\nawait using (var producer = new EventHubProducerClient(connectionString, eventHubName))\n{\n    string[] partitionIds = await producer.GetPartitionIdsAsync();\n}\n```\n\n### Publish events to an Event Hub\n\nIn order to publish events, you'll need to create an `EventHubProducerClient`.  Producers publish events in batches and may request a specific partition, or allow the Event Hubs service to decide which partition events should be published to.  It is recommended to use automatic routing when the publishing of events needs to be highly available or when event data should be distributed evenly among the partitions.  Our example will take advantage of automatic routing.\n\n```C# Snippet:EventHubs_ReadMe_Publish\nvar connectionString = \"<< CONNECTION STRING FOR THE EVENT HUBS NAMESPACE >>\";\nvar eventHubName = \"<< NAME OF THE EVENT HUB >>\";\n\n// It is recommended that you cache the Event Hubs clients for the lifetime of your\n// application, closing or disposing when application ends.  This example disposes\n// after the immediate scope for simplicity.\n\nawait using (var producer = new EventHubProducerClient(connectionString, eventHubName))\n{\n    using EventDataBatch eventBatch = await producer.CreateBatchAsync();\n\n    if ((!eventBatch.TryAdd(new EventData(\"First\"))) ||\n        (!eventBatch.TryAdd(new EventData(\"Second\"))))\n    {\n       throw new ApplicationException(\"Not all events could be added to the batch!\");\n    }\n\n    await producer.SendAsync(eventBatch);\n}\n```\n\n### Read events from an Event Hub\n\nIn order to read events from an Event Hub, you'll need to create an `EventHubConsumerClient` for a given consumer group.  When an Event Hub is created, it provides a default consumer group that can be used to get started with exploring Event Hubs.  In our example, we will focus on reading all events that have been published to the Event Hub using an iterator.\n\n**Note:** It is important to note that this approach to consuming is intended to improve the experience of exploring the Event Hubs client library and prototyping.  It is recommended that it not be used in production scenarios.   For production use, we recommend using the [Event Processor Client](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/eventhub/Azure.Messaging.EventHubs.Processor), as it provides a more robust and performant experience.\n\n```C# Snippet:EventHubs_ReadMe_Read\nvar connectionString = \"<< CONNECTION STRING FOR THE EVENT HUBS NAMESPACE >>\";\nvar eventHubName = \"<< NAME OF THE EVENT HUB >>\";\n\nstring consumerGroup = EventHubConsumerClient.DefaultConsumerGroupName;\n\n// It is recommended that you cache the Event Hubs clients for the lifetime of your\n// application, closing or disposing when application ends.  This example disposes\n// after the immediate scope for simplicity.\n\nawait using (var consumer = new EventHubConsumerClient(consumerGroup, connectionString, eventHubName))\n{\n    using var cancellationSource = new CancellationTokenSource();\n    cancellationSource.CancelAfter(TimeSpan.FromSeconds(45));\n\n    await foreach (PartitionEvent receivedEvent in consumer.ReadEventsAsync(cancellationSource.Token))\n    {\n        // At this point, the loop will wait for events to be available in the Event Hub.  When an event\n        // is available, the loop will iterate with the event that was received.  Because we did not\n        // specify a maximum wait time, the loop will wait forever unless cancellation is requested using\n        // the cancellation token.\n    }\n}\n```\n\n### Read events from an Event Hub partition\n\nIn order to read events for an Event Hub partition, you'll need to create an `EventHubConsumerClient` for a given consumer group.  When an Event Hub is created, it provides a default consumer group that can be used to get started with exploring Event Hubs.  To read from a specific partition, the consumer will also need to specify where in the event stream to begin receiving events; in our example, we will focus on reading all published events for the first partition of the Event Hub.\n\n```C# Snippet:EventHubs_ReadMe_ReadPartition\nvar connectionString = \"<< CONNECTION STRING FOR THE EVENT HUBS NAMESPACE >>\";\nvar eventHubName = \"<< NAME OF THE EVENT HUB >>\";\n\nstring consumerGroup = EventHubConsumerClient.DefaultConsumerGroupName;\n\n// It is recommended that you cache the Event Hubs clients for the lifetime of your\n// application, closing or disposing when application ends.  This example disposes\n// after the immediate scope for simplicity.\n\nawait using (var consumer = new EventHubConsumerClient(consumerGroup, connectionString, eventHubName))\n{\n    EventPosition startingPosition = EventPosition.Earliest;\n    string partitionId = (await consumer.GetPartitionIdsAsync()).First();\n\n    using var cancellationSource = new CancellationTokenSource();\n    cancellationSource.CancelAfter(TimeSpan.FromSeconds(45));\n\n    await foreach (PartitionEvent receivedEvent in consumer.ReadEventsFromPartitionAsync(partitionId, startingPosition, cancellationSource.Token))\n    {\n        // At this point, the loop will wait for events to be available in the partition.  When an event\n        // is available, the loop will iterate with the event that was received.  Because we did not\n        // specify a maximum wait time, the loop will wait forever unless cancellation is requested using\n        // the cancellation token.\n    }\n}\n```\n\n### Process events using an Event Processor client\n\nFor the majority of production scenarios, it is recommended that the [Event Processor Client](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/eventhub/Azure.Messaging.EventHubs.Processor) be used for reading and processing events.  The processor is intended to provide a robust experience for processing events across all partitions of an Event Hub in a performant and fault tolerant manner while providing a means to persist its state.  Event Processor clients are also capable of working cooperatively within the context of a consumer group for a given Event Hub, where they will automatically manage distribution and balancing of work as instances become available or unavailable for the group.\n\nSince the `EventProcessorClient` has a dependency on Azure Storage blobs for persistence of its state, you'll need to provide a `BlobContainerClient` for the processor, which has been configured for the storage account and container that should be used.\n\n```C# Snippet:EventHubs_Processor_ReadMe_ProcessUntilCanceled\nvar cancellationSource = new CancellationTokenSource();\ncancellationSource.CancelAfter(TimeSpan.FromSeconds(45));\n\nvar storageConnectionString = \"<< CONNECTION STRING FOR THE STORAGE ACCOUNT >>\";\nvar blobContainerName = \"<< NAME OF THE BLOB CONTAINER >>\";\n\nvar eventHubsConnectionString = \"<< CONNECTION STRING FOR THE EVENT HUBS NAMESPACE >>\";\nvar eventHubName = \"<< NAME OF THE EVENT HUB >>\";\nvar consumerGroup = \"<< NAME OF THE EVENT HUB CONSUMER GROUP >>\";\n\nTask processEventHandler(ProcessEventArgs eventArgs) => Task.CompletedTask;\nTask processErrorHandler(ProcessErrorEventArgs eventArgs) => Task.CompletedTask;\n\nvar storageClient = new BlobContainerClient(storageConnectionString, blobContainerName);\nvar processor = new EventProcessorClient(storageClient, consumerGroup, eventHubsConnectionString, eventHubName);\n\nprocessor.ProcessEventAsync += processEventHandler;\nprocessor.ProcessErrorAsync += processErrorHandler;\n\nawait processor.StartProcessingAsync();\n\ntry\n{\n    // The processor performs its work in the background; block until cancellation\n    // to allow processing to take place.\n\n    await Task.Delay(Timeout.Infinite, cancellationSource.Token);\n}\ncatch (TaskCanceledException)\n{\n    // This is expected when the delay is canceled.\n}\n\ntry\n{\n    await processor.StopProcessingAsync();\n}\nfinally\n{\n    // To prevent leaks, the handlers should be removed when processing is complete.\n\n    processor.ProcessEventAsync -= processEventHandler;\n    processor.ProcessErrorAsync -= processErrorHandler;\n}\n```\n\nMore details can be found in the Event Processor Client [README](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/eventhub/Azure.Messaging.EventHubs.Processor/README.md) and the accompanying [samples](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/eventhub/Azure.Messaging.EventHubs.Processor/samples).\n\n### Using an Active Directory principal with the Event Hub clients\n\nThe [Azure Identity library](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md) provides Azure Active Directory (AAD) authentication support which can be used for the Azure client libraries, including Event Hubs.\n\nTo make use of an Active Directory principal, one of the available credentials from the `Azure.Identity` library is specified when creating the Event Hubs client.  In addition, the fully qualified Event Hubs namespace and the name of desired Event Hub are supplied in lieu of the Event Hubs connection string.  For illustration, the `EventHubProducerClient` is demonstrated in these examples, but the concept and form are common across clients.\n\n```C# Snippet:EventHubs_ReadMe_PublishIdentity\nvar fullyQualifiedNamespace = \"<< FULLY-QUALIFIED EVENT HUBS NAMESPACE (like something.servicebus.windows.net) >>\";\nvar eventHubName = \"<< NAME OF THE EVENT HUB >>\";\nvar credential = new DefaultAzureCredential();\n\n// It is recommended that you cache the Event Hubs clients for the lifetime of your\n// application, closing or disposing when application ends.  This example disposes\n// after the immediate scope for simplicity.\n\nawait using (var producer = new EventHubProducerClient(fullyQualifiedNamespace, eventHubName, credential))\n{\n    using EventDataBatch eventBatch = await producer.CreateBatchAsync();\n\n    if ((!eventBatch.TryAdd(new EventData(\"First\"))) ||\n        (!eventBatch.TryAdd(new EventData(\"Second\"))))\n    {\n       throw new ApplicationException(\"Not all events could be added to the batch!\");\n    }\n\n    await producer.SendAsync(eventBatch);\n}\n```\n\nWhen using Azure Active Directory, your principal must be assigned a role which allows access to Event Hubs, such as the `Azure Event Hubs Data Owner` role. For more information about using Azure Active Directory authorization with Event Hubs, please refer to [the associated documentation](https://docs.microsoft.com/azure/event-hubs/authorize-access-azure-active-directory).\n\n### Registering with ASP.NET Core dependency injection\n\nTo inject one of the Event Hubs clients as a dependency in an ASP.NET Core application, install the Azure client library integration for ASP.NET Core package.\n\n```dotnetcli\ndotnet add package Microsoft.Extensions.Azure\n```\n\nAfter installing, register the desired Event Hubs client types in the `Startup.ConfigureServices` method:\n\n```csharp\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddAzureClients(builder =>\n    {\n        builder.AddEventHubProducerClient(Configuration.GetConnectionString(\"EventHubs\"));\n    });\n  \n    services.AddControllers();\n}\n```\n\nTo use the preceding code, add this to the configuration for your application:\n\n```json\n{\n  \"ConnectionStrings\": {\n    \"EventHubs\": \"<connection_string>\"\n  }\n}\n```\n\nFor applications that prefer using a shared `Azure.Identity` credential for their clients, registration looks slightly different:\n\n```csharp\nvar fullyQualifiedNamespace = \"<< FULLY-QUALIFIED EVENT HUBS NAMESPACE (like something.servicebus.windows.net) >>\";\n\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddAzureClients(builder =>\n    {\n        // This will register the EventHubProducerClient using the default credential.\n        builder.AddEventHubProducerClientWithNamespace(fullyQualifiedNamespace);\n\n        // By default, DefaultAzureCredential is used, which is likely desired for most\n        // scenarios. If you need to restrict to a specific credential instance, you could\n        // register that instance as the default credential instead.\n        builder.UseCredential(new ManagedIdentityCredential());\n    });\n  \n    services.AddControllers();\n}\n```\n\nFor more details, see [Dependency injection with the Azure SDK for .NET](https://docs.microsoft.com/dotnet/azure/sdk/dependency-injection).\n\n## Troubleshooting\n\nFor detailed troubleshooting information, please refer to the [Event Hubs Troubleshooting Guide](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/eventhub/Azure.Messaging.EventHubs/TROUBLESHOOTING.md).\n\n### Logging and diagnostics\n\nThe Event Hubs client library is fully instrumented for logging information at various levels of detail using the .NET `EventSource` to emit information.  Logging is performed for each operation and follows the pattern of marking the starting point of the operation, it's completion, and any exceptions encountered.  Additional information that may offer insight is also logged in the context of the associated operation.\n\nThe Event Hubs client logs are available to any `EventListener` by opting into the source named \"Azure-Messaging-EventHubs\" or opting into all sources that have the trait \"AzureEventSource\".  To make capturing logs from the Azure client libraries easier, the `Azure.Core` library used by Event Hubs offers an `AzureEventSourceListener`.  More information can be found in [Capturing Event Hubs logs using the AzureEventSourceListener](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/eventhub/Azure.Messaging.EventHubs/samples/Sample10_AzureEventSourceListener.md).\n\nThe Event Hubs client library is also instrumented for distributed tracing using Application Insights or OpenTelemetry.  More information can be found in the [Azure.Core Diagnostics sample](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md#distributed-tracing).\n\n## Next steps\n\nBeyond the introductory scenarios discussed, the Azure Event Hubs client library offers support for additional scenarios to help take advantage of the full feature set of the Azure Event Hubs service.  In order to help explore some of these scenarios, the Event Hubs client library offers a project of samples to serve as an illustration for common scenarios.  Please see the samples [README](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/eventhub/Azure.Messaging.EventHubs/samples/README.md) for details.\n\n## Contributing  \n\nThis project welcomes contributions and suggestions.  Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\nPlease see our [contributing guide](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/eventhub/Azure.Messaging.EventHubs/CONTRIBUTING.md) for more information.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2Fsdk%2Feventhub%2FAzure.Messaging.EventHubs%2FREADME.png)\n",
        "repo_name": "eventhub/Azure.Messaging.EventHubs",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/eventhub/Azure.Messaging.EventHubs",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Event Hubs management client library for .NET\n\nMicrosoft Azure Elastic SAN is a cloud-native service that offers a scalable, cost-effective, high-performance, and comprehensive storage solution for a range of compute options. Get the same simplified management experience in the cloud as with your on-premises storage area network (SAN). Gain higher resiliency and minimize downtime with rapid provisioning.\n\nThis library supports managing Microsoft Azure Event resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Event Hubs management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.EventHubs\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nThe default option to create an authenticated client is to use `DefaultAzureCredential`. Since all management APIs go through the same endpoint, in order to interact with resources, only one top-level `ArmClient` has to be created.\n\nTo authenticate to Azure and create an `ArmClient`, do the following code:\n\n```C# Snippet:Managing_Namespaces_AuthClient_Usings\nusing Azure.Identity;\n```\n```C# Snippet:Managing_Namespaces_AuthClient\nArmClient armClient = new ArmClient(new DefaultAzureCredential());\n```\n\nMore documentation for the `Azure.Identity.DefaultAzureCredential` class can be found in [this document](https://docs.microsoft.com/dotnet/api/azure.identity.defaultazurecredential).\n\n## Key concepts\n\nKey concepts of the Azure .NET SDK can be found [here](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/README.md#key-concepts)\n\n## Examples\n\n### Create a namespace\n\nBefore creating a namespace, we need to have a resource group.\n\n```C# Snippet:Managing_Namespaces_CreateResourceGroup\nArmClient armClient = new ArmClient(new DefaultAzureCredential());\nSubscriptionResource subscription = await armClient.GetDefaultSubscriptionAsync();\nstring rgName = \"myRgName\";\nAzureLocation location = AzureLocation.WestUS2;\nArmOperation<ResourceGroupResource> operation = await subscription.GetResourceGroups().CreateOrUpdateAsync(WaitUntil.Completed, rgName, new ResourceGroupData(location));\nResourceGroupResource resourceGroup = operation.Value;\n```\n\nThen we can create a namespace inside this resource group.\n\n```C# Snippet:Managing_Namespaces_CreateNamespace\nstring namespaceName = \"myNamespace\";\nEventHubsNamespaceCollection namespaceCollection = resourceGroup.GetEventHubsNamespaces();\nAzureLocation location = AzureLocation.EastUS2;\nEventHubsNamespaceResource eventHubNamespace = (await namespaceCollection.CreateOrUpdateAsync(WaitUntil.Completed, namespaceName, new EventHubsNamespaceData(location))).Value;\n```\n\n### Get all namespaces in a resource group\n\n```C# Snippet:Managing_Namespaces_ListNamespaces\nEventHubsNamespaceCollection namespaceCollection = resourceGroup.GetEventHubsNamespaces();\nawait foreach (EventHubsNamespaceResource eventHubNamespace in namespaceCollection.GetAllAsync())\n{\n    Console.WriteLine(eventHubNamespace.Id.Name);\n}\n```\n\n### Get a namespace\n\n```C# Snippet:Managing_Namespaces_GetNamespace\nEventHubsNamespaceCollection namespaceCollection = resourceGroup.GetEventHubsNamespaces();\nEventHubsNamespaceResource eventHubNamespace = await namespaceCollection.GetAsync(\"myNamespace\");\nConsole.WriteLine(eventHubNamespace.Id.Name);\n```\n\n### Delete a namespace\n```C# Snippet:Managing_Namespaces_DeleteNamespace\nEventHubsNamespaceCollection namespaceCollection = resourceGroup.GetEventHubsNamespaces();\nEventHubsNamespaceResource eventHubNamespace = await namespaceCollection.GetAsync(\"myNamespace\");\nawait eventHubNamespace.DeleteAsync(WaitUntil.Completed);\n```\n\n### Add a tag to the namespace\n\n```C# Snippet:Managing_Namespaces_AddTag\nEventHubsNamespaceCollection namespaceCollection = resourceGroup.GetEventHubsNamespaces();\nEventHubsNamespaceResource eventHubNamespace = await namespaceCollection.GetAsync(\"myNamespace\");\nawait eventHubNamespace.AddTagAsync(\"key\",\"value\");\n```\n\nFor more detailed examples, take a look at [samples](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/eventhub/Azure.ResourceManager.EventHubs/samples) we have available.\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\n### More sample code\n\n- [Managing EventHubs](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/eventhub/Azure.ResourceManager.EventHubs/samples/Sample1_ManagingEventHubs.md)\n\n### More Documentation\n\nFor more information on Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "eventhub/Azure.ResourceManager.EventHubs",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/eventhub/Azure.ResourceManager.EventHubs",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Event Hubs client library for .NET\n\n> Please note, a newer package [Azure.Messaging.EventHubs](https://www.nuget.org/packages/Azure.Messaging.EventHubs) for [Azure Event Hubs](https://azure.microsoft.com/services/event-hubs/) is available as of February 2020. While this package will continue to receive critical bug fixes, we strongly encourage you to upgrade. Read the [migration guide](https://aka.ms/azsdk/net/migrate/eh) for more details.\n\nAzure Event Hubs is a highly scalable publish-subscribe service that can ingest millions of events per second and stream them into multiple applications. This lets you process and analyze the massive amounts of data produced by your connected devices and applications. Once Event Hubs has collected the data, you can retrieve, transform and store it by using any real-time analytics provider or with batching/storage adapters. \n\nThe Azure Events Hubs client library for .NET allows for both sending and receiving of events.  Most common scenarios call for an application to act as either an event publisher or an event consumer, but rarely both. \n\nAn **event publisher** is a source of telemetry data, diagnostics information, usage logs, or other log data, as \npart of an embedded device solution, a mobile device application, a game title running on a console or other device, \nsome client or server based business solution, or a web site.  \n\nAn **event consumer** picks up such information from the Event Hub and processes it. Processing may involve aggregation, complex \ncomputation and filtering. Processing may also involve distribution or storage of the information in a raw or transformed fashion.\nEvent Hub consumers are often robust and high-scale platform infrastructure parts with built-in analytics capabilities, like Azure \nStream Analytics, Apache Spark, or Apache Storm.  \n\nThis directory contains the open source subset of the .NET SDK. For documentation of the complete Azure SDK, please see the [Microsoft Azure .NET Developer Center](https://azure.microsoft.com/develop/net/).\n\nUse the client library for Event Hubs to:\n\n- Emit telemetry about your application for business intelligence and diagnostic purposes.\n\n- Publish facts about the state of your application which interested parties may observe and use as a trigger for taking action.\n\n- Observe interesting operations and interactions happening within your business or other ecosystem, allowing loosely coupled systems to interact without the need to bind them together.\n\n- Receive events from one or more publishers, transform them to better meet the needs of your ecosystem, then publish the transformed events to a new stream for consumers to observe.\n\n[Source code](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/eventhub/Microsoft.Azure.EventHubs) | [Package (NuGet)](https://www.nuget.org/packages/Microsoft.Azure.EventHubs/) | [API reference documentation](https://docs.microsoft.com/dotnet/api/overview/azure/event-hubs?view=azure-dotnet) | [Product documentation](https://docs.microsoft.com/azure/event-hubs/)\n\n## Getting started\n\nThe complete Microsoft Azure SDK can be downloaded from the [Microsoft Azure Downloads Page](https://azure.microsoft.com/downloads/?sdk=net) and ships with support for building deployment packages, integrating with tooling, rich command line tooling, and more.\n\nIf you are not already familiar with Azure Event Hubs, please review: [What is Event Hubs?](https://docs.microsoft.com/azure/event-hubs/event-hubs-about).\n\nFor the best development experience, developers should use the official Microsoft NuGet packages for libraries. NuGet packages are regularly updated with new functionality and hotfixes.\n\n## Prerequisites\n\n- Microsoft Azure Subscription: To call Microsoft Azure services, including Azure Event Hubs, you need to first [create an account](https://account.windowsazure.com/Home/Index). If you do not have an existing Azure account, you may sign up for a free trial or use your MSDN subscriber benefits.\n\n- The Azure Event Hubs client library shares the same [Prerequisites](https://github.com/azure/azure-sdk-for-net#prerequisites) as the Microsoft Azure SDK for .NET.\n\n## Samples\n\nCode samples for the Azure Event Hubs client library that detail how to get started and how to implement common scenarios can be found in the following locations:\n\n- [Azure Code Samples](https://azure.microsoft.com/resources/samples/?sort=0&service=event-hubs&platform=dotnet)\n- [Azure Event Hubs Documentation](https://docs.microsoft.com/azure/event-hubs/)\n- [Azure Event Hubs Sample Repository](https://github.com/Azure/azure-event-hubs/tree/master/samples)\n- [Azure Event Hubs Notification Sample](https://github.com/Azure-Samples/event-hubs-dotnet-user-notifications)\n- [Azure Event Hubs Publishing Sample](https://github.com/Azure-Samples/event-hubs-dotnet-ingest)\n\n## To build\n\nFor information on building the Azure Event Hubs client library, please see [Building the Microsoft Azure SDK for .NET](https://github.com/azure/azure-sdk-for-net#to-build)\n\n### Running tests\n\nThe Event Hubs client library tests may be executed using the `dotnet` CLI, or the test runner of your choice - such as Visual Studio or Visual Studio Code.  For those developers using Visual Studio, it is safe to use the Live Unit Testing feature, as any tests with external dependencies have been marked to be excluded.\n\nTests in the Event Hubs client library are split into two categories:\n\n- **Unit tests** have no special considerations; these are self-contained and execute locally without any reliance on external resources.  Unit tests are considered the default test type in the Event Hubs client library and, thus, have no explicit category trait attached to them.\n\n- **Integration tests** have dependencies on live Azure resources and require setting up your development environment prior to running.  Known in the Azure SDK project commonly as \"Live\" tests, these tests are decorated with a category trait of \"LiveTest\".  \n\nThe required Azure resources are defined in the [test resources ARM template](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/eventhub/test-resources.json).  In addition to these resources, a Azure Active Directory service principal is needed.  The recommended approach is to use the Azure SDK [Test Resources](https://github.com/Azure/azure-sdk-tools/blob/main/eng/common/TestResources/README.md) tooling. \n\nThe following PowerShell commands will make use of `New-TestResources.ps1` to create the Event Hubs test resources, including the Azure Active Directory service principal.  The script uses the `BaseName` as a prefix when naming the service principal and other resources.  The full set of options for `New-TestResources.ps1` can be found in the [New-TestResources.ps1 documentation](https://github.com/Azure/azure-sdk-tools/blob/main/eng/common/TestResources/New-TestResources.ps1.md).\n\n```powershell\nConnect-AzAccount -Subscription '<< AZURE SUBSCRIPTION ID >>'\n\n<repository-root>/eng/common/TestResources/New-TestResources.ps1 `\n    -BaseName '<< MEMORABLE VALUE (example: azsdk) >>' `\n    -ServiceDirectory 'eventhub' `\n    -SubscriptionId '<< AZURE SUBSCRIPTION ID >>' `\n    -ResourceGroupName '<< NAME FOR RESOURCE GROUP >>' `\n    -Location '<< AZURE REGION CODE (example: eastus) >>'\n```\n\nThe Live tests read information from the following environment variables:\n\n`EVENTHUB_RESOURCE_GROUP`  \n The name of the Azure resource group that contains the Event Hubs namespace\n   \n`EVENTHUB_SUBSCRIPTION_ID`  \n The identifier (GUID) of the Azure subscription to which the service principal belongs\n    \n`EVENTHUB_TENANT_ID`  \n The identifier (GUID) of the Azure Active Directory tenant that contains the service principal\n\n`EVENTHUB_CLIENT_ID`  \n The identifier (GUID) of the Azure Active Directory application that is associated with the service principal\n   \n`EVENTHUB_CLIENT_SECRET`  \n The client secret (password) of the Azure Active Directory application that is associated with the service principal\n\n## Development history\n\nFor additional insight and context, the development, release, and issue history for the Azure Event Hubs client library will continue to be\u00a0available in read-only form, located in the stand-alone\u00a0[Azure Event Hubs .NET repository](https://github.com/Azure/azure-event-hubs-dotnet).\n\n## Versioning information\n\nThe Azure Event Hubs client library uses [the semantic versioning scheme.](https://semver.org/)\n\n## Target frameworks\n\nFor information about the target frameworks of the Azure Event Hubs client library, please refer to the [Target Frameworks](https://github.com/azure/azure-sdk-for-net#target-frameworks) of the Microsoft Azure SDK for .NET.  \n\n## Contributing\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\n## Additional documentation\n\n- [Azure Event Hubs General Documentation](https://docs.microsoft.com/azure/event-hubs/)\n- [Azure Event Hubs REST API Reference](https://docs.microsoft.com/rest/api/eventhub/)\n- [Azure Event Hubs SDK for .NET Documentation](https://docs.microsoft.com/dotnet/api/overview/azure/event-hubs?view=azure-dotnet)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2Fsdk%2Feventhub%2FMicrosoft.Azure.EventHubs%2FREADME.png)\n",
        "repo_name": "eventhub/Microsoft.Azure.EventHubs",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/eventhub/Microsoft.Azure.EventHubs",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure WebJobs Event Hubs client library for .NET\n\nThis extension provides functionality for accessing Azure Event Hubs from an Azure Function.\n\n## Getting started\n\n### Install the package\n\nInstall the Event Hubs extension with [NuGet](https://www.nuget.org/packages/Microsoft.Azure.WebJobs.Extensions.EventHubs):\n\n```dotnetcli\ndotnet add package Microsoft.Azure.WebJobs.Extensions.EventHubs\n```\n\n### Prerequisites\n\n- **Azure Subscription:**  To use Azure services, including Azure Event Hubs, you'll need a subscription.  If you do not have an existing Azure account, you may sign up for a [free trial](https://azure.microsoft.com/free/dotnet/) or use your [Visual Studio Subscription](https://visualstudio.microsoft.com/subscriptions/) benefits when you [create an account](https://azure.microsoft.com/account).\n\n- **Event Hubs namespace with an Event Hub:** To interact with Azure Event Hubs, you'll also need to have a namespace and Event Hub available.  If you are not familiar with creating Azure resources, you may wish to follow the step-by-step guide for [creating an Event Hub using the Azure portal](https://docs.microsoft.com/azure/event-hubs/event-hubs-create).  There, you can also find detailed instructions for using the Azure CLI, Azure PowerShell, or Azure Resource Manager (ARM) templates to create an Event Hub.\n\n- **Azure Storage account with blob storage:** To persist checkpoints as blobs in Azure Storage, you'll need to have an Azure Storage account with blobs available.  If you are not familiar with Azure Storage accounts, you may wish to follow the step-by-step guide for [creating a storage account using the Azure portal](https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?toc=%2Fazure%2Fstorage%2Fblobs%2Ftoc.json&tabs=azure-portal).  There, you can also find detailed instructions for using the Azure CLI, Azure PowerShell, or Azure Resource Manager (ARM) templates to create storage accounts.\n\n[![Deploy button](https://aka.ms/deploytoazurebutton)](https://portal.azure.com/#create/Microsoft.Template/uri/https%3A%2F%2Fraw.githubusercontent.com%2FAzure%2Fazure-sdk-for-net%2Fmaster%2Fsdk%2Feventhub%2FAzure.Messaging.EventHubs.Processor%2Fassets%2Fsamples-azure-deploy.json)\n\n### Authenticate the Client\n\nFor the Event Hubs client library to interact with an Event Hub, it will need to understand how to connect and authorize with it.  The easiest means for doing so is to use a connection string, which is created automatically when creating an Event Hubs namespace.  If you aren't familiar with using connection strings with Event Hubs, you may wish to follow the step-by-step guide to [get an Event Hubs connection string](https://docs.microsoft.com/azure/event-hubs/event-hubs-get-connection-string).\n\nThe `Connection` property of `EventHubAttribute` and `EventHubTriggerAttribute` is used to specify the configuration property that stores the connection string.\n\nThe `AzureWebJobsStorage` connection string is used to preserve the processing checkpoint information.\n\nFor the local development use the `local.settings.json` file to store the connection string:\n\n```json\n{\n  \"Values\": {\n    \"AzureWebJobsStorage\": \"UseDevelopmentStorage=true\",\n    \"<connection_name>\": \"Endpoint=sb://<event_hubs_namespace>.servicebus.windows.net/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=Jya7Eh76HU92ibsxuk1ITN8CM8Bt76YLKf5ISjU3jZ8=\"\n  }\n}\n```\n\nWhen deployed use the [application settings](https://docs.microsoft.com/azure/azure-functions/functions-how-to-use-azure-function-app-settings) to set the connection string.\n\n#### Identity-based authentication\n\nIf your environment has [managed identity](https://docs.microsoft.com/azure/app-service/overview-managed-identity?tabs=dotnet) enabled you can use it to authenticate the Event Hubs extension.  Before doing so, you will need to ensure that permissions have been configured as described in the [Azure Functions developer guide]( https://docs.microsoft.com/azure/azure-functions/functions-reference#grant-permission-to-the-identity).\n\nTo use identity-based authentication provide the `<connection_name>__fullyQualifiedNamespace` configuration setting.\n\n```json\n{\n  \"Values\": {\n    \"AzureWebJobsStorage\": \"UseDevelopmentStorage=true\",\n    \"<connection_name>__fullyQualifiedNamespace\": \"{event_hubs_namespace}.servicebus.windows.net\"\n  }\n}\n```\n\nOr in the case of deployed app set the same setting in [application settings](https://docs.microsoft.com/azure/azure-functions/functions-how-to-use-azure-function-app-settings):\n\n```\n<connection_name>__fullyQualifiedNamespace={event_hubs_namespace}.servicebus.windows.net\n```\n\nMore details about configuring an identity-based connection can be found [here](https://learn.microsoft.com/azure/azure-functions/functions-reference?tabs=blob#configure-an-identity-based-connection).\n\n## Key concepts\n\n### Event Hub Trigger\n\nThe Event Hub Trigger allows a function to be executed when a message is sent to an Event Hub.\n\nPlease follow the [Azure Event Hubs trigger tutorial](https://docs.microsoft.com/azure/azure-functions/functions-bindings-event-hubs-trigger?tabs=csharp) to learn more about Event Hub triggers.\n\n### Event Hub Output Binding\n\nThe Event Hub Output Binding allows a function to send Event Hub events.\n\nPlease follow the [Azure Event Hubs output binding](https://docs.microsoft.com/azure/azure-functions/functions-bindings-event-hubs-output?tabs=csharp) to learn more about Event Hub bindings.\n\n### Supported types\n\nThe following types are supported for trigger and output bindings:\n\n- `EventData`\n- `string` - value would be encoded using UTF8 encoding\n- `BinaryData`\n- `byte[]`\n- Custom model types will be JSON-serialized using Newtonsoft.Json\n- `IAsyncCollector<T>` of any of the above types for batch triggers\n- `EventHubProducerClient` for output bindings\n\n## Examples\n\n### Sending individual event\n\nYou can send individual events to an Event Hub by applying the `EventHubAttribute` the function return value. The return value can be of `string` or `EventData` type.  A partition keys may not be specified when using a return value; to do so, you'll need to bind to the `IAsyncCollector<EventData>`, as shown in [Sending multiple events](#sending-multiple-events).\n\n```C# Snippet:BindingToReturnValue\n[FunctionName(\"BindingToReturnValue\")]\n[return: EventHub(\"<event_hub_name>\", Connection = \"<connection_name>\")]\npublic static string Run([TimerTrigger(\"0 */5 * * * *\")] TimerInfo myTimer)\n{\n    // This value would get stored in EventHub event body.\n    // The string would be UTF8 encoded\n    return $\"C# Timer trigger function executed at: {DateTime.Now}\";\n}\n```\n\n### Sending multiple events\n\nTo send multiple events from a single Azure Function invocation you can apply the `EventHubAttribute` to the `IAsyncCollector<string>` or `IAsyncCollector<EventData>` parameter.  Partition keys may only be used when binding to `IAsyncCollector<EventData>`.\n\n```C# Snippet:BindingToCollector\n[FunctionName(\"BindingToCollector\")]\npublic static async Task Run(\n    [TimerTrigger(\"0 */5 * * * *\")] TimerInfo myTimer,\n    [EventHub(\"<event_hub_name>\", Connection = \"<connection_name>\")] IAsyncCollector<EventData> collector)\n{\n    // When no partition key is used, partitions will be assigned per-batch via round-robin.\n    await collector.AddAsync(new EventData($\"Event 1 added at: {DateTime.Now}\"));\n    await collector.AddAsync(new EventData($\"Event 2 added at: {DateTime.Now}\"));\n\n    // Using a partition key will help group events together; events with the same key\n    // will always be assigned to the same partition.\n    await collector.AddAsync(new EventData($\"Event 3 added at: {DateTime.Now}\"), \"sample-key\");\n    await collector.AddAsync(new EventData($\"Event 4 added at: {DateTime.Now}\"), \"sample-key\");\n}\n```\n\n### Using binding to strongly-typed models\n\nTo use strongly-typed model classes with the EventHub binding apply the `EventHubAttribute` to the model parameter.\n\n```C# Snippet:TriggerSingleModel\n[FunctionName(\"TriggerSingleModel\")]\npublic static void Run(\n    [EventHubTrigger(\"<event_hub_name>\", Connection = \"<connection_name>\")] Dog dog,\n    ILogger logger)\n{\n    logger.LogInformation($\"Who's a good dog? {dog.Name} is!\");\n}\n```\n\n### Sending multiple events using EventHubProducerClient\n\nYou can also bind to the `EventHubProducerClient` directly to have the most control over the event sending.\n\n```C# Snippet:BindingToProducerClient\n[FunctionName(\"BindingToProducerClient\")]\npublic static async Task Run(\n    [TimerTrigger(\"0 */5 * * * *\")] TimerInfo myTimer,\n    [EventHub(\"<event_hub_name>\", Connection = \"<connection_name>\")] EventHubProducerClient eventHubProducerClient)\n{\n    // IAsyncCollector allows sending multiple events in a single function invocation\n    await eventHubProducerClient.SendAsync(new[]\n    {\n        new EventData($\"Event 1 added at: {DateTime.Now}\"),\n        new EventData($\"Event 2 added at: {DateTime.Now}\")\n    });\n}\n```\n\n### Per-event triggers\n\nTo run a function every time an event is sent to Event Hub apply the `EventHubTriggerAttribute` to a `string` or `EventData` parameter.\n\n```C# Snippet:TriggerSingle\n[FunctionName(\"TriggerSingle\")]\npublic static void Run(\n    [EventHubTrigger(\"<event_hub_name>\", Connection = \"<connection_name>\")] string eventBodyAsString,\n    ILogger logger)\n{\n    logger.LogInformation($\"C# function triggered to process a message: {eventBodyAsString}\");\n}\n```\n\n### Batch triggers\n\nTo run a function for a batch of received events apply the `EventHubTriggerAttribute` to a `string[]` or `EventData[]` parameter.\n\n```C# Snippet:TriggerBatch\n[FunctionName(\"TriggerBatch\")]\npublic static void Run(\n    [EventHubTrigger(\"<event_hub_name>\", Connection = \"<connection_name>\")] EventData[] events,\n    ILogger logger)\n{\n    foreach (var e in events)\n    {\n        logger.LogInformation($\"C# function triggered to process a message: {e.EventBody}\");\n        logger.LogInformation($\"EnqueuedTime={e.EnqueuedTime}\");\n    }\n}\n```\n\n## Troubleshooting\n\nPlease refer to [Monitor Azure Functions](https://docs.microsoft.com/azure/azure-functions/functions-monitoring) for troubleshooting guidance.\n\n## Next steps\n\nRead the [introduction to Azure Functions](https://docs.microsoft.com/azure/azure-functions/functions-overview) or [creating an Azure Function guide](https://docs.microsoft.com/azure/azure-functions/functions-create-first-azure-function).\n\n## Contributing\n\nSee our [CONTRIBUTING.md][contrib] for details on building,\ntesting, and contributing to this library.\n\nThis project welcomes contributions and suggestions.  Most contributions require\nyou to agree to a Contributor License Agreement (CLA) declaring that you have\nthe right to, and actually do, grant us the rights to use your contribution. For\ndetails, visit [cla.microsoft.com][cla].\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc].\nFor more information see the [Code of Conduct FAQ][coc_faq]\nor contact [opencode@microsoft.com][coc_contact] with any\nadditional questions or comments.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2Fsdk%2Fsearch%2FMicrosoft.Azure.WebJobs.Extensions.EventHubs%2FREADME.png)\n\n<!-- LINKS -->\n[source]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/search/Microsoft.Azure.WebJobs.Extensions.EventHubs/src\n[package]: https://www.nuget.org/packages/Microsoft.Azure.WebJobs.Extensions.EventHubs/\n[docs]: https://docs.microsoft.com/dotnet/api/Microsoft.Azure.WebJobs.Extensions.EventHubs\n[nuget]: https://www.nuget.org/\n\n[contrib]: https://github.com/Azure/azure-sdk-for-net/tree/main/CONTRIBUTING.md\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n",
        "repo_name": "eventhub/Microsoft.Azure.WebJobs.Extensions.EventHubs",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/eventhub/Microsoft.Azure.WebJobs.Extensions.EventHubs",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Extended Location management client library for .NET\n\nAs an extension of the Microsoft Azure location construct, a custom location provides a reference as deployment target which administrators can set up, and users can point to, when creating an Azure resource. It abstracts the backend infrastructure details from application developers, database admin users, or other users in the organization.\n\nThis library supports managing Microsoft Azure Extended Location resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Extended Location management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.ExtendedLocations\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "extendedlocation/Azure.ResourceManager.ExtendedLocations",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/extendedlocation/Azure.ResourceManager.ExtendedLocations",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Key Vault Secrets configuration provider for Microsoft.Extensions.Configuration\n\nThe `Azure.Extensions.AspNetCore.Configuration.Secrets` package allows storing configuration values using Azure Key Vault Secrets.\n\n## Getting started\n\n### Install the package\n\nInstall the package with [NuGet][nuget]:\n\n```dotnetcli\ndotnet add package Azure.Extensions.AspNetCore.Configuration.Secrets\n```\n\n### Prerequisites\n\nYou need an [Azure subscription][azure_sub] and\n[Azure Key Vault][keyvault_doc] to use this package.\n\nTo create a new Key Vault, you can use the [Azure Portal][keyvault_create_portal],\n[Azure PowerShell][keyvault_create_ps], or the [Azure CLI][keyvault_create_cli].\nHere's an example using the Azure CLI:\n\n```Powershell\naz keyvault create --name MyVault --resource-group MyResourceGroup --location westus\naz keyvault secret set --vault-name MyVault --name MySecret --value \"hVFkk965BuUv\"\n```\n\n#### Azure role-based access control\n\nWhen using [azure role-based access control](https://docs.microsoft.com/azure/key-vault/general/rbac-guide), the identity you are authenticating has to have the \"Key Vault Reader\" and \"Key Vault Secrets User\" roles.\nThe \"Key Vault Reader\" role allows the extension to list secrets while the \"Key Vault Secrets User\" allows retrieving their values.\n\n```powershell\naz role assignment create --role \"Key Vault Reader\" --assignee {i.e user@microsoft.com} --scope /subscriptions/{subscriptionid}/resourcegroups/{resource-group-name}\naz role assignment create --role \"Key Vault Secrets User\" --assignee {i.e user@microsoft.com} --scope /subscriptions/{subscriptionid}/resourcegroups/{resource-group-name}\n```\n\n## Key concepts\n\n### Thread safety\nWe guarantee that all client instance methods are thread-safe and independent of each other ([guideline](https://azure.github.io/azure-sdk/dotnet_introduction.html#dotnet-service-methods-thread-safety)). This ensures that the recommendation of reusing client instances is always safe, even across threads.\n\n### Additional concepts\n<!-- CLIENT COMMON BAR -->\n[Client options](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#configuring-service-clients-using-clientoptions) |\n[Accessing the response](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#accessing-http-response-details-using-responset) |\n[Long-running operations](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#consuming-long-running-operations-using-operationt) |\n[Handling failures](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#reporting-errors-requestfailedexception) |\n[Diagnostics](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md) |\n[Mocking](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#mocking) |\n[Client lifetime](https://devblogs.microsoft.com/azure-sdk/lifetime-management-and-thread-safety-guarantees-of-azure-sdk-net-clients/)\n<!-- CLIENT COMMON BAR -->\n\n## Examples\n\nTo load initialize configuration from Azure Key Vault secrets call the `AddAzureKeyVault` on `ConfigurationBuilder`:\n\n```C# Snippet:ConfigurationAddAzureKeyVault\nConfigurationBuilder builder = new ConfigurationBuilder();\nbuilder.AddAzureKeyVault(new Uri(\"<Vault URI>\"), new DefaultAzureCredential());\n\nIConfiguration configuration = builder.Build();\nConsole.WriteLine(configuration[\"MySecret\"]);\n```\n\nThe [Azure Identity library][identity] provides easy Azure Active Directory support for authentication.\n\n## Next steps\n\nRead more about [configuration in ASP.NET Core][aspnetcore_configuration_doc].\n\n## Contributing\n\nThis project welcomes contributions and suggestions.  Most contributions require\nyou to agree to a Contributor License Agreement (CLA) declaring that you have\nthe right to, and actually do, grant us the rights to use your contribution. For\ndetails, visit [cla.microsoft.com][cla].\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc].\nFor more information see the [Code of Conduct FAQ][coc_faq]\nor contact [opencode@microsoft.com][coc_contact] with any\nadditional questions or comments.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2Fsdk%2Fextensions%2FAzure.Extensions.AspNetCore.Configuration.Secrets%2FREADME.png)\n\n<!-- LINKS -->\n[source]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/extensions/Azure.Extensions.AspNetCore.Configuration.Secrets/src\n[package]: https://www.nuget.org/packages/Azure.Extensions.AspNetCore.Configuration.Secrets/\n[docs]: https://docs.microsoft.com/dotnet/api/Azure.Extensions.AspNetCore.Configuration.Secrets\n[nuget]: https://www.nuget.org/packages/Azure.Extensions.AspNetCore.Configuration.Secrets\n[keyvault_create_cli]: https://docs.microsoft.com/azure/key-vault/quick-create-cli#create-a-key-vault\n[keyvault_create_portal]: https://docs.microsoft.com/azure/key-vault/quick-create-portal#create-a-vault\n[keyvault_create_ps]: https://docs.microsoft.com/azure/key-vault/quick-create-powershell#create-a-key-vault\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/dotnet/\n[identity]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/identity/Azure.Identity/README.md\n[aspnetcore_configuration_doc]: https://docs.microsoft.com/aspnet/core/fundamentals/configuration/?view=aspnetcore-3.1\n[error_codes]: https://docs.microsoft.com/rest/api/storageservices/blob-service-error-codes\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n[keyvault_doc]: https://docs.microsoft.com/azure/key-vault/general/overview\n",
        "repo_name": "extensions/Azure.Extensions.AspNetCore.Configuration.Secrets",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/extensions/Azure.Extensions.AspNetCore.Configuration.Secrets",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Storage Blob Key Store for Microsoft.AspNetCore.DataProtection\n\nThe `Azure.Extensions.AspNetCore.DataProtection.Blobs` package allows storing ASP.NET Core DataProtection keys in Azure Blob Storage. Keys can be shared across several instances of a web app. Apps can share authentication cookies or CSRF protection across multiple servers.\n\n## Getting started\n\n### Install the package\n\nInstall the package with [NuGet][nuget]:\n\n```dotnetcli\ndotnet add package Azure.Extensions.AspNetCore.DataProtection.Blobs\n```\n\n### Prerequisites\n\nYou need an [Azure subscription][azure_sub],\n[Storage Account][storage_account_docs] and [Storage Container][storage_container_docs] to use this package.\n\nTo create a new Storage Account, you can use the [Azure Portal][storage_account_create_portal],\n[Azure PowerShell][storage_account_create_ps], or the [Azure CLI][storage_account_create_cli].\nHere's an example using the Azure CLI:\n\n```Powershell\naz storage account create --name <storage-account> --resource-group <resource-group> --location westus --sku Standard_LRS\naz storage container create --account-name <storage-account> -n <container>\n\n# Give write access to a user\naz role assignment create --role \"Storage Blob Data Contributor\" --assignee <your_email> --scope \"/subscriptions/<subscription>/resourceGroups/<resource-group>/providers/Microsoft.Storage/storageAccounts/<storage-account>/blobServices/default/containers/<container>\"\n\n# OR give write access to a service principal (application)\naz role assignment create --role \"Storage Blob Data Contributor\" --assignee-object-id <application_id> --scope \"/subscriptions/<subscription>/resourceGroups/<resource-group>/providers/Microsoft.Storage/storageAccounts/<storage-account>/blobServices/default/containers/<container>\"\n\n```\n\n## Key concepts\n\n### Thread safety\nWe guarantee that all client instance methods are thread-safe and independent of each other ([guideline](https://azure.github.io/azure-sdk/dotnet_introduction.html#dotnet-service-methods-thread-safety)). This ensures that the recommendation of reusing client instances is always safe, even across threads.\n\n### Additional concepts\n<!-- CLIENT COMMON BAR -->\n[Client options](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#configuring-service-clients-using-clientoptions) |\n[Accessing the response](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#accessing-http-response-details-using-responset) |\n[Long-running operations](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#consuming-long-running-operations-using-operationt) |\n[Handling failures](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#reporting-errors-requestfailedexception) |\n[Diagnostics](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md) |\n[Mocking](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#mocking) |\n[Client lifetime](https://devblogs.microsoft.com/azure-sdk/lifetime-management-and-thread-safety-guarantees-of-azure-sdk-net-clients/)\n<!-- CLIENT COMMON BAR -->\n\n## Examples\n\nTo enable persisting keys to Azure Blob Storage call the `PersistKeysToAzureBlobStorage` method. The `Uri` provided has to be a blob URI in the following form `https://{storage_account}.blob.core.windows.net/{container}/{blob}`.\n\n```C# Snippet:IdentityAuth\npublic void ConfigureServices(IServiceCollection services)\n{\n    services\n        .AddDataProtection()\n        .PersistKeysToAzureBlobStorage(new Uri(\"<full-blob-URI>\"), new DefaultAzureCredential());\n}\n```\n\nThe [Azure Identity library][identity] provides easy Azure Active Directory support for authentication.\n\n### Authenticating using a connection string\n\n```C# Snippet:ConnectionString\npublic void ConfigureServices(IServiceCollection services)\n{\n    services\n        .AddDataProtection()\n        .PersistKeysToAzureBlobStorage(\"<connection string>\", \"<container name>\", \"<blob name>\");\n}\n```\n\n## Next steps\n\nRead more about [DataProtection in ASP.NET Core][aspnetcore_dataprotection_doc].\n\n## Contributing\n\nThis project welcomes contributions and suggestions.  Most contributions require\nyou to agree to a Contributor License Agreement (CLA) declaring that you have\nthe right to, and actually do, grant us the rights to use your contribution. For\ndetails, visit [cla.microsoft.com][cla].\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc].\nFor more information see the [Code of Conduct FAQ][coc_faq]\nor contact [opencode@microsoft.com][coc_contact] with any\nadditional questions or comments.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2Fsdk%2Fextensions%2FAzure.Extensions.AspNetCore.DataProtection.Blobs%2FREADME.png)\n\n<!-- LINKS -->\n[source]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/extensions/Azure.Extensions.AspNetCore.DataProtection.Blobs/src\n[package]: https://www.nuget.org/packages/Azure.Extensions.AspNetCore.DataProtection.Blobs/\n[docs]: https://docs.microsoft.com/dotnet/api/Azure.Extensions.AspNetCore.DataProtection.Blobs\n[nuget]: https://www.nuget.org/packages/Azure.Extensions.AspNetCore.DataProtection.Blobs\n[storage_account_docs]: https://docs.microsoft.com/azure/storage/common/storage-account-overview\n[storage_account_create_ps]: https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-powershell\n[storage_account_create_cli]: https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-cli\n[storage_account_create_portal]: https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-portal\n[storage_container_docs]: https://docs.microsoft.com/azure/storage/blobs/storage-blobs-introduction#containers\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/dotnet/\n[identity]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/identity/Azure.Identity/README.md\n[aspnetcore_dataprotection_doc]: https://docs.microsoft.com/aspnet/core/security/data-protection/introduction\n[samples]: samples/\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n",
        "repo_name": "extensions/Azure.Extensions.AspNetCore.DataProtection.Blobs",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/extensions/Azure.Extensions.AspNetCore.DataProtection.Blobs",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Key Vault Key Encryptor for Microsoft.AspNetCore.DataProtection\n\nThe `Azure.Extensions.AspNetCore.DataProtection.Keys` package allows protecting keys at rest using Azure Key Vault Key Encryption/Wrapping feature.\n\n## Getting started\n\n### Install the package\n\nInstall the package with [NuGet][nuget]:\n\n```dotnetcli\ndotnet add package Azure.Extensions.AspNetCore.DataProtection.Keys\n```\n\n### Prerequisites\n\nYou need an [Azure subscription][azure_sub],\n[Key Vault][keyvault_doc] and a Key to use this package.\n\nTo create a new Key Vault, you can use the [Azure Portal][keyvault_create_portal],\n[Azure PowerShell][keyvault_create_ps], or the [Azure CLI][keyvault_create_cli].\nHere's an example using the Azure CLI:\n\n```Powershell\naz keyvault create --name MyVault --resource-group MyResourceGroup --location westus\naz keyvault key create --name MyKey --vault-name MyVault\n\n# give write access to a service principal (application)\naz keyvault set-policy -n MyVault --object-id <application_id> --key-permissions get unwrapKey wrapKey\n```\n\n## Key concepts\n\n### Thread safety\nWe guarantee that all client instance methods are thread-safe and independent of each other ([guideline](https://azure.github.io/azure-sdk/dotnet_introduction.html#dotnet-service-methods-thread-safety)). This ensures that the recommendation of reusing client instances is always safe, even across threads.\n\n### Additional concepts\n<!-- CLIENT COMMON BAR -->\n[Client options](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#configuring-service-clients-using-clientoptions) |\n[Accessing the response](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#accessing-http-response-details-using-responset) |\n[Long-running operations](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#consuming-long-running-operations-using-operationt) |\n[Handling failures](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#reporting-errors-requestfailedexception) |\n[Diagnostics](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md) |\n[Mocking](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#mocking) |\n[Client lifetime](https://devblogs.microsoft.com/azure-sdk/lifetime-management-and-thread-safety-guarantees-of-azure-sdk-net-clients/)\n<!-- CLIENT COMMON BAR -->\n\n## Examples\n\nTo protect keys using Azure Key Vault Key, configure the system with `ProtectKeysWithAzureKeyVault` when configuring the services:\n\n```C# Snippet:ProtectKeysWithAzureKeyVault\npublic void ConfigureServices(IServiceCollection services)\n{\n    services\n        .AddDataProtection()\n        .ProtectKeysWithAzureKeyVault(new Uri(\"<Key-ID>\"), new DefaultAzureCredential());\n}\n```\n\nThe [Azure Identity library][identity] provides easy Azure Active Directory support for authentication.\n\n## Next steps\n\nRead more about [DataProtection in ASP.NET Core][aspnetcore_dataprotection_doc].\n\n## Contributing\n\nThis project welcomes contributions and suggestions.  Most contributions require\nyou to agree to a Contributor License Agreement (CLA) declaring that you have\nthe right to, and actually do, grant us the rights to use your contribution. For\ndetails, visit [cla.microsoft.com][cla].\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc].\nFor more information see the [Code of Conduct FAQ][coc_faq]\nor contact [opencode@microsoft.com][coc_contact] with any\nadditional questions or comments.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2Fsdk%2Fextensions%2FAzure.AspNetCore.Extensions.DataProtection.Keys%2FREADME.png)\n\n<!-- LINKS -->\n[source]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/extensions/Azure.Extensions.AspNetCore.DataProtection.Keys/src\n[package]: https://www.nuget.org/packages/Azure.Extensions.AspNetCore.DataProtection.Keys/\n[docs]: https://docs.microsoft.com/dotnet/api/Azure.Extensions.AspNetCore.DataProtection.Keys\n[nuget]: https://www.nuget.org/packages/Azure.Extensions.AspNetCore.DataProtection.Keys\n[keyvault_doc]: https://docs.microsoft.com/azure/key-vault/general/overview\n[keyvault_create_cli]: https://docs.microsoft.com/azure/key-vault/quick-create-cli#create-a-key-vault\n[keyvault_create_portal]: https://docs.microsoft.com/azure/key-vault/quick-create-portal#create-a-vault\n[keyvault_create_ps]: https://docs.microsoft.com/azure/key-vault/quick-create-powershell#create-a-key-vault\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/dotnet/\n[identity]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/identity/Azure.Identity/README.md\n[aspnetcore_dataprotection_doc]: https://docs.microsoft.com/aspnet/core/security/data-protection/introduction?view=aspnetcore-3.1\n[RequestFailedException]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/core/Azure.Core/src/RequestFailedException.cs\n[error_codes]: https://docs.microsoft.com/rest/api/storageservices/blob-service-error-codes\n[samples]: samples/\n[storage_contrib]: ../CONTRIBUTING.md\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n",
        "repo_name": "extensions/Azure.Extensions.AspNetCore.DataProtection.Keys",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/extensions/Azure.Extensions.AspNetCore.DataProtection.Keys",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure client library integration for WebJobs/Azure.Functions\n\nMicrosoft.Extensions.Azure.Core provides shared primitives to integrate Azure clients with ASP.NET Core [dependency injection][dependency_injection] and [configuration][configuration] systems.\n\n[Source code][source_root] | [Package (NuGet)][package]\n\n## Getting started\n\n### Install the package\n\nInstall the ASP.NET Core integration library using [NuGet][nuget]:\n\n```dotnetcli\ndotnet add package Microsoft.Azure.WebJobs.Extensions.Clients --prerelease\n```\n\n### Reference the client from a function\n\nAnnotate a function parameter with an `AzureClient` attribute passing a connection name as a parameter.\n\n```C# Snippet:AzureClientInFunction\npublic static class Function1\n{\n    [FunctionName(\"Function1\")]\n    public static IActionResult Run(\n        [HttpTrigger(AuthorizationLevel.Anonymous, \"get\", \"post\", Route = null)] HttpRequest req,\n        [AzureClient(\"MyStorageConnection\")] BlobServiceClient client)\n    {\n        return new OkObjectResult(client.GetBlobContainers().ToArray());\n    }\n}\n```\n\nThe connection name should correspond to a configuration section with a connection string or a set of connection parameters that correspond to a client constructor.\n\nFor example to construct a `BlobServiceClient` using a connection string use the following configuration:\n\n```json\n{\n    \"IsEncrypted\": false,\n    \"Values\": {\n        \"AzureWebJobsStorage\": \"UseDevelopmentStorage=true\",\n        \"MyStorageConnection\": \"DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://127.0.0.1:10000/devstoreaccount1;QueueEndpoint=http://127.0.0.1:10001/devstoreaccount1;\",\n        \"FUNCTIONS_WORKER_RUNTIME\": \"dotnet\"\n    }\n}\n```\n\nTo construct a client using a `serviceUri`:\n\n```json\n{\n    \"IsEncrypted\": false,\n    \"Values\": {\n        \"AzureWebJobsStorage\": \"UseDevelopmentStorage=true\",\n        \"MyStorageConnection__serviceUri\": \"http://127.0.0.1:10000/devstoreaccount1/container/blob\",\n        \"FUNCTIONS_WORKER_RUNTIME\": \"dotnet\"\n    }\n}\n```\n\nYou can do the same via [Azure.Function settings in the portal][azure_function_settings] by setting `StorageConnection` or `StorageConnection__blobUri` application settings (*NOTE* configuration format uses [ASP.NET Core environment variable provider][aspnet_core_env_vars] syntax).\n\n## Contributing\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct]. For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments.\n\n\n<!-- LINKS -->\n[source_root]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/extensions/Microsoft.Azure.WebJobs.Extensions.Clients/\n[nuget]: https://www.nuget.org/\n[package]: https://www.nuget.org/packages/Microsoft.Extensions.Azure/\n[azure_function_settings]: https://docs.microsoft.com/azure/azure-functions/functions-how-to-use-azure-function-app-settings\n[aspnet_core_env_vars]: https://docs.microsoft.com/aspnet/core/fundamentals/configuration/?view=aspnetcore-3.1#environment-variables",
        "repo_name": "extensions/Microsoft.Azure.WebJobs.Extensions.Clients",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/extensions/Microsoft.Azure.WebJobs.Extensions.Clients",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure client library integration for ASP.NET Core\n\nMicrosoft.Extensions.Azure provides shared primitives to integrate Azure clients with ASP.NET Core [dependency injection][dependency_injection] and [configuration][configuration] systems.\n\n[Source code][source_root] | [Package (NuGet)][package]\n\n## Getting started\n\n### Install the package\n\nInstall the ASP.NET Core integration library using [NuGet][nuget]:\n\n```dotnetcli\ndotnet add package Microsoft.Extensions.Azure\n```\n\n### Register clients\n\nMake a call to `AddAzureClients` in your app's `ConfigureServices` method. You can use the provided builder to register client instances with your dependency injection container.\n\n```C# Snippet:ConfigureServices\npublic void ConfigureServices(IServiceCollection services)\n{\n    // Registering policy to use in ConfigureDefaults later\n    services.AddSingleton<DependencyInjectionEnabledPolicy>();\n\n    services.AddAzureClients(builder => {\n        // Register blob service client and initialize it using the KeyVault section of configuration\n        builder.AddSecretClient(Configuration.GetSection(\"KeyVault\"))\n            // Set the name for this client registration\n            .WithName(\"NamedBlobClient\")\n            // Set the credential for this client registration\n            .WithCredential(new ClientSecretCredential(\"<tenant_id>\", \"<client_id>\", \"<client_secret>\"))\n            // Configure the client options\n            .ConfigureOptions(options => options.Retry.MaxRetries = 10);\n\n        // Adds a secret client using the provided endpoint and default credential set later\n        builder.AddSecretClient(new Uri(\"http://my.keyvault.com\"));\n\n        // Configures environment credential to be used by default for all clients that require TokenCredential\n        // and doesn't override it on per registration level\n        builder.UseCredential(new EnvironmentCredential());\n\n        // This would use configuration for auth and client settings\n        builder.ConfigureDefaults(Configuration.GetSection(\"Default\"));\n\n        // Configure global retry mode\n        builder.ConfigureDefaults(options => options.Retry.Mode = RetryMode.Exponential);\n\n        // Advanced configure global defaults\n        builder.ConfigureDefaults((options, provider) => options.AddPolicy(provider.GetService<DependencyInjectionEnabledPolicy>(), HttpPipelinePosition.PerCall));\n\n        // Register blob service client and initialize it using the Storage section of configuration\n        builder.AddBlobServiceClient(Configuration.GetSection(\"Storage\"))\n                .WithVersion(BlobClientOptions.ServiceVersion.V2019_02_02);\n    });\n}\n```\n\n### Inject clients\n\nTo use the client request the client type from any place that supports Dependency Injection (constructors, Configure calls, `@inject` razor definitions etc.)\n\n```C# Snippet:Inject\npublic void Configure(IApplicationBuilder app, SecretClient secretClient, IAzureClientFactory<BlobServiceClient> blobClientFactory)\n```\n\n### Create named instances\n\nIf client is registered as a named client inject `IAzureClientFactory<T>` and call `CreateClient` passing the name:\n\n```C# Snippet:ResolveNamed\nBlobServiceClient blobServiceClient = blobClientFactory.CreateClient(\"NamedBlobClient\");\n```\n\nConfiguration file used in the sample above:\n\n``` json\n{\n  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Debug\"\n    }\n  },\n  \"AllowedHosts\": \"*\",\n  \"Default\": {\n    \"ClientId\": \"<client_id>\",\n    \"ClientSecret\": \"<client_secret>\",\n    \"TenantId\": \"<tenant_id>\",\n\n    \"TelemetryPolicy\": {\n      \"ApplicationId\": \"AppId\"\n    }\n  },\n  \"KeyVault\": {\n    \"VaultUri\": \"<vault_uri>\"\n  },\n  \"Storage\": {\n    \"serviceUri\": \"<service_uri>\",\n    \"credential\": {\n      \"accountName\": \"<account_name>\",\n      \"accountKey\": \"<account_key>\"\n    }\n  }\n}\n```\n\n### Registering a custom client factory\n\nIf you want to take control over how the client instance is created or need to use other dependencies during the client construction use the `AddClient<TClient, TOptions>` method.\n\nHere's and example of how to use `IOptions<T>` instance to construct the client:\n\n```C# Snippet:UsingOptionsForClientConstruction\npublic class MyApplicationOptions\n{\n    public Uri KeyVaultEndpoint { get; set; }\n}\n\npublic void ConfigureServices(IServiceCollection services)\n{\n    // Configure a custom options instance\n    services.Configure<MyApplicationOptions>(options => options.KeyVaultEndpoint = new Uri(\"http://localhost/\"));\n\n    services.AddAzureClients(builder =>\n    {\n        // Register a client using MyApplicationOptions to get constructor parameters\n        builder.AddClient<SecretClient, SecretClientOptions>((options, credential, provider) =>\n        {\n            var appOptions = provider.GetService<IOptions<MyApplicationOptions>>();\n            return new SecretClient(appOptions.Value.KeyVaultEndpoint, credential, options);\n        });\n    });\n}\n```\n\n## Contributing\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct]. For more information see the [Code of Conduct FAQ][code_of_conduct_faq] or contact opencode@microsoft.com with any additional questions or comments.\n\n\n<!-- LINKS -->\n[source_root]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/extensions/Microsoft.Extensions.Azure/src\n[nuget]: https://www.nuget.org/\n[package]: https://www.nuget.org/packages/Microsoft.Extensions.Azure/\n[configuration]: https://docs.microsoft.com/aspnet/core/fundamentals/configuration/?view=aspnetcore-3.0\n[dependency_injection]: https://docs.microsoft.com/aspnet/core/fundamentals/dependency-injection?view=aspnetcore-3.0\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[code_of_conduct_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "extensions/Microsoft.Extensions.Azure",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/extensions/Microsoft.Extensions.Azure",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Fluid Relay management client library for .NET\n\nMicrosoft Azure Fluid Relay is a managed offering for the Fluid Framework that helps developers build real-time collaborative experiences and replicate state across connected JavaScript clients in real-time.\n\nThis library supports managing Microsoft Azure Fluid Relay resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Fluid Relay management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.FluidRelay\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "fluidrelay/Azure.ResourceManager.FluidRelay",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/fluidrelay/Azure.ResourceManager.FluidRelay",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Cognitive Services Form Recognizer client library for .NET\n\nAzure Cognitive Services Form Recognizer is a cloud service that uses machine learning to analyze text and structured data from your documents. It includes the following main features:\n\n- Layout - Extract text, selection marks, table structures, styles, and paragraphs, along with their bounding region coordinates from documents.\n- General document - Analyze key-value pairs in addition to general layout from documents.\n- Read - Read information about textual elements, such as page words and lines in addition to text language information.\n- Prebuilt - Analyze data from certain types of common documents using prebuilt models. Supported documents include receipts, invoices, business cards, identity documents, US W2 tax forms, and more.\n- Custom - Build custom models to analyze text, field values, selection marks, table structures, styles, and paragraphs from documents. Custom models are built with your own data, so they're tailored to your documents.\n\n[Source code][formreco_client_src] | [Package (NuGet)][formreco_nuget_package] | [API reference documentation][formreco_refdocs] | [Product documentation][formreco_docs] | [Samples][formreco_samples]\n\n## Getting started\n\n### Install the package\nInstall the Azure Form Recognizer client library for .NET with [NuGet][nuget]:\n\n```dotnetcli\ndotnet add package Azure.AI.FormRecognizer\n``` \n\n> Note: This version of the client library defaults to the `2022-08-31` version of the service.\n\nThis table shows the relationship between SDK versions and supported API versions of the service:\n\n|SDK version|Supported API version of service\n|-|-\n|4.1.0-beta.1 | 2.0, 2.1, 2022-08-31, 2023-02-28-preview\n|4.0.0 | 2.0, 2.1, 2022-08-31\n|3.1.X | 2.0, 2.1\n|3.0.X | 2.0\n\n> Note: Starting with version `4.0.0`, a new set of clients were introduced to leverage the newest features of the Form Recognizer service. Please see the [Migration Guide][migration_guide] for detailed instructions on how to update application code from client library version `3.1.X` or lower to the latest version. Additionally, see the [Changelog][formreco_changelog] for more detailed information. The table below describes the relationship of each client and its supported API version(s):\n\n|API version|Supported clients\n|-|-\n|2023-02-28-preview|DocumentAnalysisClient and DocumentModelAdministrationClient\n|2022-08-31|DocumentAnalysisClient and DocumentModelAdministrationClient\n|2.1|FormRecognizerClient and FormTrainingClient\n|2.0|FormRecognizerClient and FormTrainingClient\n\n### Prerequisites\n* An [Azure subscription][azure_sub].\n* A [Cognitive Services or Form Recognizer resource][cognitive_resource] to use this package.\n\n#### Create a Cognitive Services or Form Recognizer resource\nForm Recognizer supports both [multi-service and single-service access][cognitive_resource_portal]. Create a Cognitive Services resource if you plan to access multiple cognitive services under a single endpoint/key. For Form Recognizer access only, create a Form Recognizer resource. Please note that you will need a single-service resource if you intend to use [Azure Active Directory authentication](#create-formrecognizerclient-with-azure-active-directory-credential).\n\nYou can create either resource using: \n\n* Option 1: [Azure Portal][cognitive_resource_portal].\n* Option 2: [Azure CLI][cognitive_resource_cli]. \n\nBelow is an example of how you can create a Form Recognizer resource using the CLI:\n\n```PowerShell\n# Create a new resource group to hold the Form Recognizer resource\n# If using an existing resource group, skip this step\naz group create --name <your-resource-name> --location <location>\n```\n\n```PowerShell\n# Create the Form Recognizer resource\naz cognitiveservices account create \\\n    --name <resource-name> \\\n    --resource-group <resource-group-name> \\\n    --kind FormRecognizer \\\n    --sku <sku> \\\n    --location <location> \\\n    --yes\n```\nFor more information about creating the resource or how to get the location and sku information see [here][cognitive_resource_cli].\n\n### Authenticate the client\nIn order to interact with the Form Recognizer service, you'll need to create an instance of the [`DocumentAnalysisClient`][doc_analysis_client_class] class.\nAn **endpoint** and **credential** are necessary to instantiate the client object.\n\n#### Get the endpoint\n\nYou can find the endpoint for your Form Recognizer resource using the\n[Azure Portal][azure_portal_get_endpoint]\nor [Azure CLI][azure_cli_endpoint_lookup]:\n\n```PowerShell\n# Get the endpoint for the Form Recognizer resource\naz cognitiveservices account show --name \"<resource-name>\" --resource-group \"<resource-group-name>\" --query \"properties.endpoint\"\n```\n\nEither a regional endpoint or a custom subdomain can be used for authentication. They are formatted as follows:\n\n```\nRegional endpoint: https://<region>.api.cognitive.microsoft.com/\nCustom subdomain: https://<resource-name>.cognitiveservices.azure.com/\n```\n\nA regional endpoint is the same for every resource in a region. A complete list of supported regional endpoints can be consulted [here][regional_endpoints]. Please note that regional endpoints do not support AAD authentication.\n\nA custom subdomain, on the other hand, is a name that is unique to the Form Recognizer resource. They can only be used by [single-service resources][cognitive_resource_portal].\n\n#### Get the API Key\n\nThe API key can be found in the [Azure Portal][azure_portal] or by running the following Azure CLI command:\n\n```PowerShell\naz cognitiveservices account keys list --name \"<resource-name>\" --resource-group \"<resource-group-name>\"\n```\n\n#### Create DocumentAnalysisClient with AzureKeyCredential\nOnce you have the value for the API key, create an `AzureKeyCredential`.  With the endpoint and key credential, you can create the [`DocumentAnalysisClient`][doc_analysis_client_class]:\n\n```C# Snippet:CreateDocumentAnalysisClient\nstring endpoint = \"<endpoint>\";\nstring apiKey = \"<apiKey>\";\nvar credential = new AzureKeyCredential(apiKey);\nvar client = new DocumentAnalysisClient(new Uri(endpoint), credential);\n```\n\n#### Create DocumentAnalysisClient with Azure Active Directory Credential\n\n`AzureKeyCredential` authentication is used in the examples in this getting started guide, but you can also authenticate with Azure Active Directory using the [Azure Identity library][azure_identity]. Note that regional endpoints do not support AAD authentication. Create a [custom subdomain][custom_subdomain] for your resource in order to use this type of authentication.\n\nTo use the [DefaultAzureCredential][DefaultAzureCredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `Azure.Identity` package:\n\n```dotnetcli\ndotnet add package Azure.Identity\n```\n\nYou will also need to [register a new AAD application][register_aad_app] and [grant access][aad_grant_access] to Form Recognizer by assigning the `\"Cognitive Services User\"` role to your service principal.\n\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: AZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET.\n\n```C# Snippet:CreateDocumentAnalysisClientTokenCredential\nstring endpoint = \"<endpoint>\";\nvar client = new DocumentAnalysisClient(new Uri(endpoint), new DefaultAzureCredential());\n```\n\n## Key concepts\n\n### DocumentAnalysisClient\n\n`DocumentAnalysisClient` provides operations for analyzing input documents using prebuilt and custom models through the `AnalyzeDocument` and `AnalyzeDocumentFromUri` APIs. Use the `modelId` parameter to select the type of model for analysis.\n\nSample code snippets are provided to illustrate using a DocumentAnalysisClient [here](#examples).\nMore information about analyzing documents, including supported features, locales, and document types can be found in the [service documentation][formreco_models].\n\n### DocumentModelAdministrationClient\n\n`DocumentModelAdministrationClient` provides operations for:\n\n- Building custom models to analyze specific fields you specify by labeling your custom documents. A `DocumentModelDetails` instance is returned indicating the document type(s) the model can analyze, the fields it can analyze for each document type, as well as the estimated confidence for each field. See the [service documentation][formreco_build_model] for a more detailed explanation.\n- Compose a model from a collection of existing models.\n- Managing models created in your account.\n- Listing document model operations or getting a specific model operation created within the last 24 hours.\n- Copying a custom model from one Form Recognizer resource to another.\n\nSee examples for [Build a Custom Model](#build-a-custom-model) and [Manage Models](#manage-models).\n\nPlease note that models can also be built using a graphical user interface such as the [Form Recognizer Labeling Tool][labeling_tool].\n\n### Long-Running Operations\n\nBecause analyzing documents and building models take time, these operations are implemented as [**long-running operations**][dotnet_lro_guidelines].  Long-running operations consist of an initial request sent to the service to start an operation, followed by polling the service at intervals to determine whether the operation has completed or failed, and if it has succeeded, to get the result.\n\nFor long running operations in the Azure SDK, the client exposes a method that returns an `Operation<T>` object. You can set its parameter `waitUntil` to `WaitUntil.Completed` to wait for the operation to complete and obtain its result; or set it to `WaitUntil.Started` if you just want to start the operation and consume the result later. A sample code snippet is provided to illustrate using long-running operations [below](#extract-layout).\n\n### Thread safety\nWe guarantee that all client instance methods are thread-safe and independent of each other ([guideline](https://azure.github.io/azure-sdk/dotnet_introduction.html#dotnet-service-methods-thread-safety)). This ensures that the recommendation of reusing client instances is always safe, even across threads.\n\n### Additional concepts\n<!-- CLIENT COMMON BAR -->\n[Client options](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#configuring-service-clients-using-clientoptions) |\n[Accessing the response](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#accessing-http-response-details-using-responset) |\n[Handling failures](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#reporting-errors-requestfailedexception) |\n[Diagnostics](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md) |\n[Mocking](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#mocking) |\n[Client lifetime](https://devblogs.microsoft.com/azure-sdk/lifetime-management-and-thread-safety-guarantees-of-azure-sdk-net-clients/)\n<!-- CLIENT COMMON BAR -->\n\n## Examples\nThe following section provides several code snippets illustrating common patterns used in the Form Recognizer .NET API. Most of the snippets below make use of asynchronous service calls, but keep in mind that the Azure.AI.FormRecognizer package supports both synchronous and asynchronous APIs.\n\n### Async examples\n* [Extract Layout](#extract-layout)\n* [Use the Prebuilt General Document Model](#use-the-prebuilt-general-document-model)\n* [Use the Prebuilt Read Model](#use-the-prebuilt-read-model)\n* [Use Prebuilt Models](#use-prebuilt-models)\n* [Build a Custom Model](#build-a-custom-model)\n* [Analyze Custom Documents](#analyze-custom-documents)\n* [Manage Models](#manage-models)\n\n### Sync examples\n* [Manage Models Synchronously](#manage-models-synchronously)\n\n> Note that these samples use SDK version `4.0.0`. For lower versions of the SDK, please see [Form Recognizer Samples for V3.1.X][formrecov3_samples].\n\n### Extract Layout\nExtract text, selection marks, table structures, styles, and paragraphs, along with their bounding region coordinates from documents.\n\n```C# Snippet:FormRecognizerExtractLayoutFromUriAsync\nUri fileUri = new Uri(\"<fileUri>\");\n\nAnalyzeDocumentOperation operation = await client.AnalyzeDocumentFromUriAsync(WaitUntil.Completed, \"prebuilt-layout\", fileUri);\nAnalyzeResult result = operation.Value;\n\nforeach (DocumentPage page in result.Pages)\n{\n    Console.WriteLine($\"Document Page {page.PageNumber} has {page.Lines.Count} line(s), {page.Words.Count} word(s),\");\n    Console.WriteLine($\"and {page.SelectionMarks.Count} selection mark(s).\");\n\n    for (int i = 0; i < page.Lines.Count; i++)\n    {\n        DocumentLine line = page.Lines[i];\n        Console.WriteLine($\"  Line {i} has content: '{line.Content}'.\");\n\n        Console.WriteLine($\"    Its bounding polygon (points ordered clockwise):\");\n\n        for (int j = 0; j < line.BoundingPolygon.Count; j++)\n        {\n            Console.WriteLine($\"      Point {j} => X: {line.BoundingPolygon[j].X}, Y: {line.BoundingPolygon[j].Y}\");\n        }\n    }\n\n    for (int i = 0; i < page.SelectionMarks.Count; i++)\n    {\n        DocumentSelectionMark selectionMark = page.SelectionMarks[i];\n\n        Console.WriteLine($\"  Selection Mark {i} is {selectionMark.State}.\");\n        Console.WriteLine($\"    Its bounding polygon (points ordered clockwise):\");\n\n        for (int j = 0; j < selectionMark.BoundingPolygon.Count; j++)\n        {\n            Console.WriteLine($\"      Point {j} => X: {selectionMark.BoundingPolygon[j].X}, Y: {selectionMark.BoundingPolygon[j].Y}\");\n        }\n    }\n}\n\nConsole.WriteLine(\"Paragraphs:\");\n\nforeach (DocumentParagraph paragraph in result.Paragraphs)\n{\n    Console.WriteLine($\"  Paragraph content: {paragraph.Content}\");\n\n    if (paragraph.Role != null)\n    {\n        Console.WriteLine($\"    Role: {paragraph.Role}\");\n    }\n}\n\nforeach (DocumentStyle style in result.Styles)\n{\n    // Check the style and style confidence to see if text is handwritten.\n    // Note that value '0.8' is used as an example.\n\n    bool isHandwritten = style.IsHandwritten.HasValue && style.IsHandwritten == true;\n\n    if (isHandwritten && style.Confidence > 0.8)\n    {\n        Console.WriteLine($\"Handwritten content found:\");\n\n        foreach (DocumentSpan span in style.Spans)\n        {\n            Console.WriteLine($\"  Content: {result.Content.Substring(span.Index, span.Length)}\");\n        }\n    }\n}\n\nConsole.WriteLine(\"The following tables were extracted:\");\n\nfor (int i = 0; i < result.Tables.Count; i++)\n{\n    DocumentTable table = result.Tables[i];\n    Console.WriteLine($\"  Table {i} has {table.RowCount} rows and {table.ColumnCount} columns.\");\n\n    foreach (DocumentTableCell cell in table.Cells)\n    {\n        Console.WriteLine($\"    Cell ({cell.RowIndex}, {cell.ColumnIndex}) has kind '{cell.Kind}' and content: '{cell.Content}'.\");\n    }\n}\n```\n\nFor more information and samples see [here][extract_layout].\n\n### Use the Prebuilt General Document Model\nAnalyze text, selection marks, table structures, styles, paragraphs, and key-value pairs from documents using the prebuilt general document model.\n\n```C# Snippet:FormRecognizerAnalyzePrebuiltDocumentFromUriAsync\nUri fileUri = new Uri(\"<fileUri>\");\n\nAnalyzeDocumentOperation operation = await client.AnalyzeDocumentFromUriAsync(WaitUntil.Completed, \"prebuilt-document\", fileUri);\nAnalyzeResult result = operation.Value;\n\nConsole.WriteLine(\"Detected key-value pairs:\");\n\nforeach (DocumentKeyValuePair kvp in result.KeyValuePairs)\n{\n    if (kvp.Value == null)\n    {\n        Console.WriteLine($\"  Found key with no value: '{kvp.Key.Content}'\");\n    }\n    else\n    {\n        Console.WriteLine($\"  Found key-value pair: '{kvp.Key.Content}' and '{kvp.Value.Content}'\");\n    }\n}\n\nforeach (DocumentPage page in result.Pages)\n{\n    Console.WriteLine($\"Document Page {page.PageNumber} has {page.Lines.Count} line(s), {page.Words.Count} word(s),\");\n    Console.WriteLine($\"and {page.SelectionMarks.Count} selection mark(s).\");\n\n    for (int i = 0; i < page.Lines.Count; i++)\n    {\n        DocumentLine line = page.Lines[i];\n        Console.WriteLine($\"  Line {i} has content: '{line.Content}'.\");\n\n        Console.WriteLine($\"    Its bounding polygon (points ordered clockwise):\");\n\n        for (int j = 0; j < line.BoundingPolygon.Count; j++)\n        {\n            Console.WriteLine($\"      Point {j} => X: {line.BoundingPolygon[j].X}, Y: {line.BoundingPolygon[j].Y}\");\n        }\n    }\n\n    for (int i = 0; i < page.SelectionMarks.Count; i++)\n    {\n        DocumentSelectionMark selectionMark = page.SelectionMarks[i];\n\n        Console.WriteLine($\"  Selection Mark {i} is {selectionMark.State}.\");\n        Console.WriteLine($\"    Its bounding polygon (points ordered clockwise):\");\n\n        for (int j = 0; j < selectionMark.BoundingPolygon.Count; j++)\n        {\n            Console.WriteLine($\"      Point {j} => X: {selectionMark.BoundingPolygon[j].X}, Y: {selectionMark.BoundingPolygon[j].Y}\");\n        }\n    }\n}\n\nforeach (DocumentStyle style in result.Styles)\n{\n    // Check the style and style confidence to see if text is handwritten.\n    // Note that value '0.8' is used as an example.\n\n    bool isHandwritten = style.IsHandwritten.HasValue && style.IsHandwritten == true;\n\n    if (isHandwritten && style.Confidence > 0.8)\n    {\n        Console.WriteLine($\"Handwritten content found:\");\n\n        foreach (DocumentSpan span in style.Spans)\n        {\n            Console.WriteLine($\"  Content: {result.Content.Substring(span.Index, span.Length)}\");\n        }\n    }\n}\n\nConsole.WriteLine(\"The following tables were extracted:\");\n\nfor (int i = 0; i < result.Tables.Count; i++)\n{\n    DocumentTable table = result.Tables[i];\n    Console.WriteLine($\"  Table {i} has {table.RowCount} rows and {table.ColumnCount} columns.\");\n\n    foreach (DocumentTableCell cell in table.Cells)\n    {\n        Console.WriteLine($\"    Cell ({cell.RowIndex}, {cell.ColumnIndex}) has kind '{cell.Kind}' and content: '{cell.Content}'.\");\n    }\n}\n```\n\nFor more information and samples see [here][analyze_prebuilt_document].\n\n### Use the Prebuilt Read Model\nAnalyze textual elements, such as page words and lines, styles, paragraphs, and text language information from documents using the prebuilt read model.\n\n```C# Snippet:FormRecognizerAnalyzePrebuiltReadFromUriAsync\nUri fileUri = new Uri(\"<fileUri>\");\n\nAnalyzeDocumentOperation operation = await client.AnalyzeDocumentFromUriAsync(WaitUntil.Completed, \"prebuilt-read\", fileUri);\nAnalyzeResult result = operation.Value;\n\nConsole.WriteLine(\"Detected languages:\");\n\nforeach (DocumentLanguage language in result.Languages)\n{\n    Console.WriteLine($\"  Found language with locale '{language.Locale}' and confidence {language.Confidence}.\");\n}\n\nforeach (DocumentPage page in result.Pages)\n{\n    Console.WriteLine($\"Document Page {page.PageNumber} has {page.Lines.Count} line(s), {page.Words.Count} word(s),\");\n    Console.WriteLine($\"and {page.SelectionMarks.Count} selection mark(s).\");\n\n    for (int i = 0; i < page.Lines.Count; i++)\n    {\n        DocumentLine line = page.Lines[i];\n        Console.WriteLine($\"  Line {i} has content: '{line.Content}'.\");\n\n        Console.WriteLine($\"    Its bounding polygon (points ordered clockwise):\");\n\n        for (int j = 0; j < line.BoundingPolygon.Count; j++)\n        {\n            Console.WriteLine($\"      Point {j} => X: {line.BoundingPolygon[j].X}, Y: {line.BoundingPolygon[j].Y}\");\n        }\n    }\n}\n\nforeach (DocumentStyle style in result.Styles)\n{\n    // Check the style and style confidence to see if text is handwritten.\n    // Note that value '0.8' is used as an example.\n\n    bool isHandwritten = style.IsHandwritten.HasValue && style.IsHandwritten == true;\n\n    if (isHandwritten && style.Confidence > 0.8)\n    {\n        Console.WriteLine($\"Handwritten content found:\");\n\n        foreach (DocumentSpan span in style.Spans)\n        {\n            Console.WriteLine($\"  Content: {result.Content.Substring(span.Index, span.Length)}\");\n        }\n    }\n}\n```\n\nFor more information and samples see [here][analyze_prebuilt_read].\n\n### Use Prebuilt Models\nAnalyze data from certain types of common documents using prebuilt models provided by the Form Recognizer service.\n\nFor example, to analyze fields from an invoice, use the prebuilt Invoice model provided by passing the `prebuilt-invoice` model ID into the `AnalyzeDocumentAsync` method:\n\n```C# Snippet:FormRecognizerAnalyzeWithPrebuiltModelFromFileAsync\nstring filePath = \"<filePath>\";\n\nusing var stream = new FileStream(filePath, FileMode.Open);\n\nAnalyzeDocumentOperation operation = await client.AnalyzeDocumentAsync(WaitUntil.Completed, \"prebuilt-invoice\", stream);\nAnalyzeResult result = operation.Value;\n\n// To see the list of all the supported fields returned by service and its corresponding types for the\n// prebuilt-invoice model, consult:\n// https://aka.ms/azsdk/formrecognizer/invoicefieldschema\n\nfor (int i = 0; i < result.Documents.Count; i++)\n{\n    Console.WriteLine($\"Document {i}:\");\n\n    AnalyzedDocument document = result.Documents[i];\n\n    if (document.Fields.TryGetValue(\"VendorName\", out DocumentField vendorNameField))\n    {\n        if (vendorNameField.FieldType == DocumentFieldType.String)\n        {\n            string vendorName = vendorNameField.Value.AsString();\n            Console.WriteLine($\"Vendor Name: '{vendorName}', with confidence {vendorNameField.Confidence}\");\n        }\n    }\n\n    if (document.Fields.TryGetValue(\"CustomerName\", out DocumentField customerNameField))\n    {\n        if (customerNameField.FieldType == DocumentFieldType.String)\n        {\n            string customerName = customerNameField.Value.AsString();\n            Console.WriteLine($\"Customer Name: '{customerName}', with confidence {customerNameField.Confidence}\");\n        }\n    }\n\n    if (document.Fields.TryGetValue(\"Items\", out DocumentField itemsField))\n    {\n        if (itemsField.FieldType == DocumentFieldType.List)\n        {\n            foreach (DocumentField itemField in itemsField.Value.AsList())\n            {\n                Console.WriteLine(\"Item:\");\n\n                if (itemField.FieldType == DocumentFieldType.Dictionary)\n                {\n                    IReadOnlyDictionary<string, DocumentField> itemFields = itemField.Value.AsDictionary();\n\n                    if (itemFields.TryGetValue(\"Description\", out DocumentField itemDescriptionField))\n                    {\n                        if (itemDescriptionField.FieldType == DocumentFieldType.String)\n                        {\n                            string itemDescription = itemDescriptionField.Value.AsString();\n\n                            Console.WriteLine($\"  Description: '{itemDescription}', with confidence {itemDescriptionField.Confidence}\");\n                        }\n                    }\n\n                    if (itemFields.TryGetValue(\"Amount\", out DocumentField itemAmountField))\n                    {\n                        if (itemAmountField.FieldType == DocumentFieldType.Currency)\n                        {\n                            CurrencyValue itemAmount = itemAmountField.Value.AsCurrency();\n\n                            Console.WriteLine($\"  Amount: '{itemAmount.Symbol}{itemAmount.Amount}', with confidence {itemAmountField.Confidence}\");\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    if (document.Fields.TryGetValue(\"SubTotal\", out DocumentField subTotalField))\n    {\n        if (subTotalField.FieldType == DocumentFieldType.Currency)\n        {\n            CurrencyValue subTotal = subTotalField.Value.AsCurrency();\n            Console.WriteLine($\"Sub Total: '{subTotal.Symbol}{subTotal.Amount}', with confidence {subTotalField.Confidence}\");\n        }\n    }\n\n    if (document.Fields.TryGetValue(\"TotalTax\", out DocumentField totalTaxField))\n    {\n        if (totalTaxField.FieldType == DocumentFieldType.Currency)\n        {\n            CurrencyValue totalTax = totalTaxField.Value.AsCurrency();\n            Console.WriteLine($\"Total Tax: '{totalTax.Symbol}{totalTax.Amount}', with confidence {totalTaxField.Confidence}\");\n        }\n    }\n\n    if (document.Fields.TryGetValue(\"InvoiceTotal\", out DocumentField invoiceTotalField))\n    {\n        if (invoiceTotalField.FieldType == DocumentFieldType.Currency)\n        {\n            CurrencyValue invoiceTotal = invoiceTotalField.Value.AsCurrency();\n            Console.WriteLine($\"Invoice Total: '{invoiceTotal.Symbol}{invoiceTotal.Amount}', with confidence {invoiceTotalField.Confidence}\");\n        }\n    }\n}\n```\n\nYou are not limited to invoices! There are a couple of prebuilt models to choose from, each of which has its own set of supported fields. More information about the supported document types can be found in the [service documentation][formreco_models].\n\nFor more information and samples, see [here][analyze_prebuilt].\n\n### Build a Custom Model\nBuild a custom model on your own document type. The resulting model can be used to analyze values from the types of documents it was built on.\n\n```C# Snippet:FormRecognizerSampleBuildModel\n// For this sample, you can use the training documents found in the `trainingFiles` folder.\n// Upload the documents to your storage container and then generate a container SAS URL. Note\n// that a container URI without SAS is accepted only when the container is public or has a\n// managed identity configured.\n//\n// For instructions to set up documents for training in an Azure Blob Storage Container, please see:\n// https://aka.ms/azsdk/formrecognizer/buildcustommodel\n\nUri blobContainerUri = new Uri(\"<blobContainerUri>\");\nvar client = new DocumentModelAdministrationClient(new Uri(endpoint), new AzureKeyCredential(apiKey));\n\n// We are selecting the Template build mode in this sample. For more information about the available\n// build modes and their differences, please see:\n// https://aka.ms/azsdk/formrecognizer/buildmode\n\nBuildDocumentModelOperation operation = await client.BuildDocumentModelAsync(WaitUntil.Completed, blobContainerUri, DocumentBuildMode.Template);\nDocumentModelDetails model = operation.Value;\n\nConsole.WriteLine($\"  Model Id: {model.ModelId}\");\nif (string.IsNullOrEmpty(model.Description))\n    Console.WriteLine($\"  Model description: {model.Description}\");\nConsole.WriteLine($\"  Created on: {model.CreatedOn}\");\nConsole.WriteLine(\"  Doc types the model can recognize:\");\nforeach (KeyValuePair<string, DocumentTypeDetails> documentType in model.DocumentTypes)\n{\n    Console.WriteLine($\"    Doc type: {documentType.Key} which has the following fields:\");\n    foreach (KeyValuePair<string, DocumentFieldSchema> schema in documentType.Value.FieldSchema)\n    {\n        Console.WriteLine($\"    Field: {schema.Key} with confidence {documentType.Value.FieldConfidence[schema.Key]}\");\n    }\n}\n```\n\nFor more information and samples see [here][build_a_custom_model].\n\n### Analyze Custom Documents\nAnalyze text, field values, selection marks, and table structures, styles, and paragraphs from custom documents, using models you built with your own document types.\n\n```C# Snippet:FormRecognizerAnalyzeWithCustomModelFromUriAsync\nstring modelId = \"<modelId>\";\nUri fileUri = new Uri(\"<fileUri>\");\n\nAnalyzeDocumentOperation operation = await client.AnalyzeDocumentFromUriAsync(WaitUntil.Completed, modelId, fileUri);\nAnalyzeResult result = operation.Value;\n\nConsole.WriteLine($\"Document was analyzed with model with ID: {result.ModelId}\");\n\nforeach (AnalyzedDocument document in result.Documents)\n{\n    Console.WriteLine($\"Document of type: {document.DocumentType}\");\n\n    foreach (KeyValuePair<string, DocumentField> fieldKvp in document.Fields)\n    {\n        string fieldName = fieldKvp.Key;\n        DocumentField field = fieldKvp.Value;\n\n        Console.WriteLine($\"Field '{fieldName}': \");\n\n        Console.WriteLine($\"  Content: '{field.Content}'\");\n        Console.WriteLine($\"  Confidence: '{field.Confidence}'\");\n    }\n}\n```\n\nFor more information and samples see [here][analyze_custom].\n\n### Manage Models\nManage the models stored in your account.\n\n```C# Snippet:FormRecognizerSampleManageModelsAsync\nvar client = new DocumentModelAdministrationClient(new Uri(endpoint), new AzureKeyCredential(apiKey));\n\n// Check number of custom models in the FormRecognizer account, and the maximum number of custom models that can be stored.\nResourceDetails resourceDetails = await client.GetResourceDetailsAsync();\nConsole.WriteLine($\"Resource has {resourceDetails.CustomDocumentModelCount} custom models.\");\nConsole.WriteLine($\"It can have at most {resourceDetails.CustomDocumentModelLimit} custom models.\");\n\n// List the first ten or fewer models currently stored in the account.\nAsyncPageable<DocumentModelSummary> models = client.GetDocumentModelsAsync();\n\nint count = 0;\nawait foreach (DocumentModelSummary modelSummary in models)\n{\n    Console.WriteLine($\"Custom Model Summary:\");\n    Console.WriteLine($\"  Model Id: {modelSummary.ModelId}\");\n    if (string.IsNullOrEmpty(modelSummary.Description))\n        Console.WriteLine($\"  Model description: {modelSummary.Description}\");\n    Console.WriteLine($\"  Created on: {modelSummary.CreatedOn}\");\n    if (++count == 10)\n        break;\n}\n\n// Create a new model to store in the account\nUri blobContainerUri = new Uri(\"<blobContainerUri>\");\nBuildDocumentModelOperation operation = await client.BuildDocumentModelAsync(WaitUntil.Completed, blobContainerUri, DocumentBuildMode.Template);\nDocumentModelDetails model = operation.Value;\n\n// Get the model that was just created\nDocumentModelDetails newCreatedModel = await client.GetDocumentModelAsync(model.ModelId);\n\nConsole.WriteLine($\"Custom Model with Id {newCreatedModel.ModelId} has the following information:\");\n\nConsole.WriteLine($\"  Model Id: {newCreatedModel.ModelId}\");\nif (string.IsNullOrEmpty(newCreatedModel.Description))\n    Console.WriteLine($\"  Model description: {newCreatedModel.Description}\");\nConsole.WriteLine($\"  Created on: {newCreatedModel.CreatedOn}\");\n\n// Delete the model from the account.\nawait client.DeleteDocumentModelAsync(newCreatedModel.ModelId);\n```\n\nFor more information and samples see [here][manage_models].\n\n### Manage Models Synchronously\nManage the models stored in your account with a synchronous API.\n\n```C# Snippet:FormRecognizerSampleManageModels\nvar client = new DocumentModelAdministrationClient(new Uri(endpoint), new AzureKeyCredential(apiKey));\n\n// Check number of custom models in the FormRecognizer account, and the maximum number of custom models that can be stored.\nResourceDetails resourceDetails = client.GetResourceDetails();\nConsole.WriteLine($\"Resource has {resourceDetails.CustomDocumentModelCount} custom models.\");\nConsole.WriteLine($\"It can have at most {resourceDetails.CustomDocumentModelLimit} custom models.\");\n\n// List the first ten or fewer models currently stored in the account.\nPageable<DocumentModelSummary> models = client.GetDocumentModels();\n\nforeach (DocumentModelSummary modelSummary in models.Take(10))\n{\n    Console.WriteLine($\"Custom Model Summary:\");\n    Console.WriteLine($\"  Model Id: {modelSummary.ModelId}\");\n    if (string.IsNullOrEmpty(modelSummary.Description))\n        Console.WriteLine($\"  Model description: {modelSummary.Description}\");\n    Console.WriteLine($\"  Created on: {modelSummary.CreatedOn}\");\n}\n\n// Create a new model to store in the account\n\nUri blobContainerUri = new Uri(\"<blobContainerUri>\");\nBuildDocumentModelOperation operation = client.BuildDocumentModel(WaitUntil.Completed, blobContainerUri, DocumentBuildMode.Template);\nDocumentModelDetails model = operation.Value;\n\n// Get the model that was just created\nDocumentModelDetails newCreatedModel = client.GetDocumentModel(model.ModelId);\n\nConsole.WriteLine($\"Custom Model with Id {newCreatedModel.ModelId} has the following information:\");\n\nConsole.WriteLine($\"  Model Id: {newCreatedModel.ModelId}\");\nif (string.IsNullOrEmpty(newCreatedModel.Description))\n    Console.WriteLine($\"  Model description: {newCreatedModel.Description}\");\nConsole.WriteLine($\"  Created on: {newCreatedModel.CreatedOn}\");\n\n// Delete the created model from the account.\nclient.DeleteDocumentModel(newCreatedModel.ModelId);\n```\n\n## Troubleshooting\n\n### General\nWhen you interact with the Cognitive Services Form Recognizer client library using the .NET SDK, errors returned by the service will result in a `RequestFailedException` with the same HTTP status code returned by the [REST API][formreco_rest_api] request.\n\nFor example, if you submit a receipt image with an invalid `Uri`, a `400` error is returned, indicating \"Bad Request\".\n\n```C# Snippet:DocumentAnalysisBadRequest\ntry\n{\n    AnalyzeDocumentOperation operation = await client.AnalyzeDocumentFromUriAsync(WaitUntil.Completed, \"prebuilt-receipt\", new Uri(\"http://invalid.uri\"));\n}\ncatch (RequestFailedException e)\n{\n    Console.WriteLine(e.ToString());\n}\n```\n\nYou will notice that additional information is logged, like the client request ID of the operation.\n\n```\nMessage:\n    Azure.RequestFailedException: Service request failed.\n    Status: 400 (Bad Request)\n    ErrorCode: InvalidRequest\n\nContent:\n    {\"error\":{\"code\":\"InvalidRequest\",\"message\":\"Invalid request.\",\"innererror\":{\"code\":\"InvalidContent\",\"message\":\"The file is corrupted or format is unsupported. Refer to documentation for the list of supported formats.\"}}}\n\nHeaders:\n    Transfer-Encoding: chunked\n    x-envoy-upstream-service-time: REDACTED\n    apim-request-id: REDACTED\n    Strict-Transport-Security: REDACTED\n    X-Content-Type-Options: REDACTED\n    Date: Fri, 01 Oct 2021 02:55:44 GMT\n    Content-Type: application/json; charset=utf-8\n```\n\nError codes and messages raised by the Form Recognizer service can be found in the [service documentation][formreco_errors].\n\nFor more details about common issues, see our [troubleshooting guide][troubleshooting].\n\n### Setting up console logging\nThe simplest way to see the logs is to enable the console logging.\nTo create an Azure SDK log listener that outputs messages to console use the AzureEventSourceListener.CreateConsoleLogger method.\n\n```C#\n// Setup a listener to monitor logged events.\nusing AzureEventSourceListener listener = AzureEventSourceListener.CreateConsoleLogger();\n```\n\nTo learn more about other logging mechanisms see [Diagnostics Samples][logging].\n\n## Next steps\n\nSamples showing how to use the Cognitive Services Form Recognizer library are available in this GitHub repository. Samples are provided for each main functional area:\n\n- [Extract the layout of a document][extract_layout]\n- [Analyze with the prebuilt general document model][analyze_prebuilt_document]\n- [Analyze with the prebuilt read model][analyze_prebuilt_read]\n- [Analyze a document with a custom model][analyze_custom]\n- [Analyze a document with a prebuilt model][analyze_prebuilt]\n- [Build a custom model][build_a_custom_model]\n- [Manage models][manage_models]\n- [Get and List document model operations][get_and_list]\n- [Compose a model][compose_model]\n- [Copy a custom model between Form Recognizer resources][copy_custom_models]\n- [Mock a client for testing using the Moq library][mock_client]\n\n> Note that these samples use SDK version `4.0.0`. For lower versions of the SDK, please see [Form Recognizer Samples for V3.1.X][formrecov3_samples].\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [cla.microsoft.com][cla].\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2Fsdk%2Fformrecognizer%2FAzure.AI.FormRecognizer%2FREADME.png)\n\n\n<!-- LINKS -->\n[formreco_client_src]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/formrecognizer/Azure.AI.FormRecognizer/src\n[formreco_docs]: https://docs.microsoft.com/azure/cognitive-services/form-recognizer/\n[formreco_refdocs]: https://aka.ms/azsdk/net/docs/ref/formrecognizer\n[formreco_nuget_package]: https://www.nuget.org/packages/Azure.AI.FormRecognizer\n[formreco_samples]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/formrecognizer/Azure.AI.FormRecognizer/samples/README.md\n[formrecov3_samples]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/formrecognizer/Azure.AI.FormRecognizer/samples/V3.1/README.md\n[formreco_changelog]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/formrecognizer/Azure.AI.FormRecognizer/CHANGELOG.md\n[formreco_rest_api]: https://aka.ms/azsdk/formrecognizer/restapi\n[formreco_models]: https://aka.ms/azsdk/formrecognizer/models\n[formreco_errors]: https://aka.ms/azsdk/formrecognizer/errors\n[formreco_build_model]: https://aka.ms/azsdk/formrecognizer/buildmodel\n[migration_guide]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/formrecognizer/Azure.AI.FormRecognizer/MigrationGuide.md\n[cognitive_resource]: https://docs.microsoft.com/azure/cognitive-services/cognitive-services-apis-create-account\n\n\n[doc_analysis_client_class]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/formrecognizer/Azure.AI.FormRecognizer/src/DocumentAnalysisClient.cs\n[azure_identity]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/identity/Azure.Identity\n[register_aad_app]: https://docs.microsoft.com/azure/cognitive-services/authentication#assign-a-role-to-a-service-principal\n[aad_grant_access]: https://docs.microsoft.com/azure/cognitive-services/authentication#assign-a-role-to-a-service-principal\n[custom_subdomain]: https://docs.microsoft.com/azure/cognitive-services/authentication#create-a-resource-with-a-custom-subdomain\n[DefaultAzureCredential]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/identity/Azure.Identity/README.md\n[cognitive_resource_portal]: https://docs.microsoft.com/azure/cognitive-services/cognitive-services-apis-create-account\n[cognitive_resource_cli]: https://docs.microsoft.com/azure/cognitive-services/cognitive-services-apis-create-account-cli\n[regional_endpoints]: https://docs.microsoft.com/azure/cognitive-services/cognitive-services-custom-subdomains#is-there-a-list-of-regional-endpoints\n[azure_cli_endpoint_lookup]: https://docs.microsoft.com/cli/azure/cognitiveservices/account?view=azure-cli-latest#az-cognitiveservices-account-show\n[azure_portal_get_endpoint]: https://docs.microsoft.com/azure/cognitive-services/cognitive-services-apis-create-account?tabs=multiservice%2Cwindows#get-the-keys-for-your-resource\n\n\n[labeling_tool]: https://aka.ms/azsdk/formrecognizer/labelingtool\n[dotnet_lro_guidelines]: https://azure.github.io/azure-sdk/dotnet_introduction.html#dotnet-longrunning\n\n[troubleshooting]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/formrecognizer/Azure.AI.FormRecognizer/TROUBLESHOOTING.md\n[logging]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/core/Azure.Core/samples/Diagnostics.md\n\n[extract_layout]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/formrecognizer/Azure.AI.FormRecognizer/samples/Sample_ExtractLayout.md\n[analyze_prebuilt_document]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/formrecognizer/Azure.AI.FormRecognizer/samples/Sample_AnalyzePrebuiltDocument.md\n[analyze_prebuilt_read]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/formrecognizer/Azure.AI.FormRecognizer/samples/Sample_AnalyzePrebuiltRead.md\n[analyze_custom]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/formrecognizer/Azure.AI.FormRecognizer/samples/Sample_AnalyzeWithCustomModel.md\n[analyze_prebuilt]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/formrecognizer/Azure.AI.FormRecognizer/samples/Sample_AnalyzeWithPrebuiltModel.md\n[build_a_custom_model]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/formrecognizer/Azure.AI.FormRecognizer/samples/Sample_BuildCustomModel.md\n[manage_models]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/formrecognizer/Azure.AI.FormRecognizer/samples/Sample_ManageModels.md\n[copy_custom_models]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/formrecognizer/Azure.AI.FormRecognizer/samples/Sample_CopyCustomModel.md\n[compose_model]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/formrecognizer/Azure.AI.FormRecognizer/samples/Sample_ModelCompose.md\n[get_and_list]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/formrecognizer/Azure.AI.FormRecognizer/samples/Sample_GetAndListOperations.md\n[mock_client]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/formrecognizer/Azure.AI.FormRecognizer/samples/Sample_MockClient.md\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/dotnet/\n[nuget]: https://www.nuget.org/\n[azure_portal]: https://portal.azure.com\n\n[cla]: https://cla.microsoft.com\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n",
        "repo_name": "formrecognizer/Azure.AI.FormRecognizer",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/formrecognizer/Azure.AI.FormRecognizer",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Front Door management client library for .NET\n\nMicrosoft Azure Front Door is a modern cloud Content Delivery Network (Cdn) service that delivers high performance, scalability, and secure user experiences for your content and applications. \n\nThis library supports managing Microsoft Azure Front Door resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Front Door management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.FrontDoor\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "frontdoor/Azure.ResourceManager.FrontDoor",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/frontdoor/Azure.ResourceManager.FrontDoor",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Managed Grafana management client library for .NET\n\nMicrosoft Azure Managed Grafana is a fully managed service for analytics and monitoring solutions. It's supported by Grafana Enterprise1, which provides extensible data visualizations.\n\nThis library supports managing Microsoft Azure Managed Grafana resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Managed Grafana management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.Grafana\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "grafana/Azure.ResourceManager.Grafana",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/grafana/Azure.ResourceManager.Grafana",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure GraphServices management client library for .NET\n\nThe Microsoft Graph Services API operations enable you to programmatically set up billing for metered APIs and services in Microsoft Graph. \n\n**More information**\n- [Overview of Microsoft Graph](https://learn.microsoft.com/graph/overview)\n- [Overview of metered APIs and services in Microsoft Graph](https://learn.microsoft.com/graph/metered-api-overview)\n- [Enable metered APIs and services in Microsoft Graph](https://learn.microsoft.com/graph/metered-api-setup)\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure GraphServices management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.GraphServices --prerelease\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html)\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "graphservices/Azure.ResourceManager.GraphServices",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/graphservices/Azure.ResourceManager.GraphServices",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Guest Configuration management client library for .NET\n\nMicrosoft Azure Guest Configuration extension is a component of Azure Policy that performs audit and configuration operations inside virtual machines. Policies such as security baseline definitions for Linux and Windows can't check settings inside machines until the extension is installed.\n\nThis library supports managing Microsoft Azure Guest Configuration resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Guest Configuration management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.GuestConfiguration\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "guestconfiguration/Azure.ResourceManager.GuestConfiguration",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/guestconfiguration/Azure.ResourceManager.GuestConfiguration",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure HDInsight management client library for .NET\n\nMicrosoft Azure HDInsight is a managed, full-spectrum, open-source analytics service in the cloud for enterprises. With HDInsight, you can use open-source frameworks such as, Apache Spark, Apache Hive, LLAP, Apache Kafka, Hadoop and more, in your Azure environment.\n\nThis library supports managing Microsoft Azure HDInsight resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure HDInsight management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.HDInsight\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "hdinsight/Azure.ResourceManager.HDInsight",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/hdinsight/Azure.ResourceManager.HDInsight",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Health Bot management client library for .NET\n\nMicrosoft Azure Health Bot Service is a cloud platform that empowers developers in Healthcare organizations to build and deploy their compliant, AI-powered virtual health assistants and health bots, that help them improve processes and reduce costs. It allows you to offer your users intelligent and personalized access to health-related information and interactions through a natural conversation experience.\n\nThis library supports managing Microsoft Azure Health Bot resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Health Bot management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.HealthBot\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "healthbot/Azure.ResourceManager.HealthBot",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/healthbot/Azure.ResourceManager.HealthBot",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Healthcare Apis management client library for .NET\n\nMicrosoft Azure Health Data Services is a set of managed API services based on open standards and frameworks that enable workflows to improve healthcare and offer scalable and secure healthcare solutions.\n\nThis library supports managing Microsoft Azure Healthcare Apis resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Healthcare Apis management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.HealthcareApis\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "healthcareapis/Azure.ResourceManager.HealthcareApis",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/healthcareapis/Azure.ResourceManager.HealthcareApis",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Cognitive Services Health Insights Cancer Profiling client library for .NET\n\n[Health Insights][health_insights] is an Azure Applied AI Service built with the Azure Cognitive Services Framework, that leverages multiple Cognitive Services, Healthcare API services and other Azure resources.\n\nThe [Cancer Profiling model][cancer_profiling_docs] receives clinical records of oncology patients and outputs cancer staging, such as clinical stage TNM categories and pathologic stage TNM categories as well as tumor site, histology.\n\n[Source code][cancer_profiling_client_src] | [Package (NuGet)][cancer_profiling_client_nuget_package] | [API reference documentation][cancer_profiling_api_documentation] | [Product documentation][product_docs]\n\n\n## Getting started\n\n### Prerequisites\n\n- You need an [Azure subscription][azure_sub] to use this package.\n- An existing Cognitive Services Health Insights instance.\n\n### Install the package\n\nInstall the Azure Health Insights client Cancer Profiling library for .NET with [NuGet][nuget]:\n\n```dotnetcli\ndotnet add package Azure.Health.Insights.CancerProfiling --prerelease\n```\n\nThis table shows the relationship between SDK versions and supported API versions of the service:\n\n|SDK version|Supported API version of service |\n|-------------|---------------|\n|1.0.0-beta.1 | 2023-03-01-preview|\n\n### Authenticate the client\n\nYou can find the endpoint for your Health Insights service resource using the [Azure Portal][azure_portal] or [Azure CLI][azure_cli]\n\n```bash\n# Get the endpoint for the Health Insights service resource\naz cognitiveservices account show --name \"resource-name\" --resource-group \"resource-group-name\" --query \"properties.endpoint\"\n```\n\n#### Get the API Key\n\nYou can get the **API Key** from the Health Insights service resource in the Azure Portal.\nAlternatively, you can use **Azure CLI** snippet below to get the API key of your resource.\n\n```PowerShell\naz cognitiveservices account keys list --resource-group <your-resource-group-name> --name <your-resource-name>\n```\n\n#### Create CancerProfilingClient with AzureKeyCredential\n\nOnce you have the value for the API key, create an `AzureKeyCredential`.  With the endpoint and key credential, you can create the [`CancerProfilingClient`][cancer_profiling_client_class]:\n\n```C#\nstring endpoint = \"<endpoint>\";\nstring apiKey = \"<apiKey>\";\nvar credential = new AzureKeyCredential(apiKey);\nvar client = new CancerProfilingClient(new Uri(endpoint), credential);\n```\n\n## Key concepts\nThe Cancer Profiling model allows you to infer cancer attributes such as tumor site, histology, clinical stage TNM categories and pathologic stage TNM categories from unstructured clinical documents.\n\n## Examples\n\n- [Infer Cancer Profiling][samples_location]\n\n### Cancer Profiling\n\n```C# Snippet:HealthInsightsCancerProfilingClientInferCancerProfileAsync\nOncoPhenotypeResult oncoPhenotypeResult = default;\ntry\n{\n    Operation<OncoPhenotypeResult> operation = await client.InferCancerProfileAsync(WaitUntil.Completed, oncoPhenotypeData);\n    oncoPhenotypeResult = operation.Value;\n}\ncatch (Exception ex)\n{\n    Console.WriteLine(ex.ToString());\n    return;\n}\n```\n```C# Snippet:HealthInsightsCancerProfilingInferCancerProfileAsyncViewResults\n// View operation results\nif (oncoPhenotypeResult.Status == JobStatus.Succeeded)\n{\n    OncoPhenotypeResults oncoResults = oncoPhenotypeResult.Results;\n    foreach (OncoPhenotypePatientResult patientResult in oncoResults.Patients)\n    {\n        Console.WriteLine($\"\\n==== Inferences of Patient {patientResult.Id} ====\");\n        foreach (OncoPhenotypeInference oncoInference in patientResult.Inferences)\n        {\n            Console.WriteLine($\"\\n=== Clinical Type: {oncoInference.Type.ToString()}  Value: {oncoInference.Value}   ConfidenceScore: {oncoInference.ConfidenceScore} ===\");\n            foreach (InferenceEvidence evidence in oncoInference.Evidence)\n            {\n                if (evidence.PatientDataEvidence != null)\n                {\n                    var dataEvidence = evidence.PatientDataEvidence;\n                    Console.WriteLine($\"Evidence {dataEvidence.Id} {dataEvidence.Offset} {dataEvidence.Length} {dataEvidence.Text}\");\n                }\n                if (evidence.PatientInfoEvidence != null)\n                {\n                    var infoEvidence = evidence.PatientInfoEvidence;\n                    Console.WriteLine($\"Evidence {infoEvidence.System} {infoEvidence.Code} {infoEvidence.Name} {infoEvidence.Value}\");\n                }\n            }\n        }\n    }\n}\nelse\n{\n    IReadOnlyList<ResponseError> oncoErrors = oncoPhenotypeResult.Errors;\n    foreach (ResponseError error in oncoErrors)\n    {\n        Console.WriteLine($\"{error.Code} : {error.Message}\");\n    }\n}\n```\n\n## Troubleshooting\n\n### Setting up console logging\n\nThe simplest way to see the logs is to enable the console logging.\nTo create an Azure SDK log listener that outputs messages to console use the AzureEventSourceListener.CreateConsoleLogger method.\n\n```C#\n// Setup a listener to monitor logged events.\nusing AzureEventSourceListener listener = AzureEventSourceListener.CreateConsoleLogger();\n```\n\nTo learn more about other logging mechanisms see [Diagnostics Samples][logging].\n\n## Next steps\n\n## Additional documentation\n\nFor more extensive documentation on Azure Health Insights Cancer Profiling, see the [Cancer Profiling documentation][cancer_profiling_docs] on docs.microsoft.com.\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [cla.microsoft.com][cla].\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n[health_insights]: https://learn.microsoft.com/azure/azure-health-insights/overview\n[cancer_profiling_client_src]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/healthinsights/Azure.Health.Insights.CancerProfiling/src/\n[cancer_profiling_client_nuget_package]: https://www.nuget.org/packages/Azure.Health.Insights.CancerProfiling/\n[cancer_profiling_api_documentation]: https://learn.microsoft.com/rest/api/cognitiveservices/healthinsights/onco-phenotype\n[cancer_profiling_client_class]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/healthinsights/Azure.Health.Insights.CancerProfiling/src/Generated/CancerProfilingClient.cs\n[samples_location]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/healthinsights/Azure.Health.Insights.CancerProfiling/samples\n[logging]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/core/Azure.Core/samples/Diagnostics.md\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/dotnet/\n[nuget]: https://www.nuget.org/\n[azure_portal]: https://ms.portal.azure.com/#create/Microsoft.CognitiveServicesHealthInsights\n[cla]: https://cla.microsoft.com\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n[cancer_profiling_docs]: https://learn.microsoft.com/azure/azure-health-insights/oncophenotype/overview\n[product_docs]:https://learn.microsoft.com/azure/azure-health-insights/oncophenotype/\n",
        "repo_name": "healthinsights/Azure.Health.Insights.CancerProfiling",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/healthinsights/Azure.Health.Insights.CancerProfiling",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Cognitive Services Health Insights Clinical Matching client library for .NET\n\n[Health Insights](https://review.learn.microsoft.com/azure/cognitive-services/health-decision-support/overview?branch=main) is an Azure Applied AI Service built with the Azure Cognitive Services Framework, that leverages multiple Cognitive Services, Healthcare API services and other Azure resources.\n\nThe [Clinical Matching model][clinical_matching_docs] receives patients data and clinical trials protocols, and provides relevant clinical trials based on eligibility criteria.\n\n[Source code][clinical_matching_client_src] | [Package (NuGet)][clinical_matching_client_nuget_package] | [API reference documentation][clinical_matching_api_documentation] | [Product documentation][product_docs]\n\n\n## Getting started\n\n### Prerequisites\n\n- You need an [Azure subscription][azure_sub] to use this package.\n- An existing Cognitive Services Health Insights instance.\n\n### Install the package\n\nInstall the Azure Health Insights client Clinical Matchinglibrary for .NET with [NuGet][nuget]:\n\n```dotnetcli\ndotnet add package Azure.Health.Insights.ClinicalMatching --prerelease\n```\n\nThis table shows the relationship between SDK versions and supported API versions of the service:\n\n|SDK version|Supported API version of service |\n|-------------|---------------|\n|1.0.0-beta.1 | 2023-03-01-preview|\n\n### Authenticate the client\n\nYou can find the endpoint for your Health Insights service resource using the [Azure Portal][azure_portal] or [Azure CLI][azure_cli]\n\n```bash\n# Get the endpoint for the Health Insights service resource\naz cognitiveservices account show --name \"resource-name\" --resource-group \"resource-group-name\" --query \"properties.endpoint\"\n```\n\n#### Get the API Key\n\nYou can get the **API Key** from the Health Insights service resource in the Azure Portal.\nAlternatively, you can use **Azure CLI** snippet below to get the API key of your resource.\n\n```PowerShell\naz cognitiveservices account keys list --resource-group <your-resource-group-name> --name <your-resource-name>\n```\n\n#### Create ClinicalMatchingClient with AzureKeyCredential\n\nOnce you have the value for the API key, create an `AzureKeyCredential`.  With the endpoint and key credential, you can create the [`ClinicalMatchingClient`][clinical_matching_client_class]:\n\n```C#\nstring endpoint = \"<endpoint>\";\nstring apiKey = \"<apiKey>\";\nvar credential = new AzureKeyCredential(apiKey);\nvar client = new ClinicalMatchingClient(new Uri(endpoint), credential);\n```\n\n## Key concepts\nTrial Matcher provides the user of the services two main modes of operation: patients centric and clinical trial centric.\n\n- On patient centric mode, the Trial Matcher model bases the patient matching on the clinical condition, location, priorities, eligibility criteria, and other criteria that the patient and/or service users may choose to prioritize. The model helps narrow down and prioritize the set of relevant clinical trials to a smaller set of trials to start with, that the specific patient appears to be qualified for.\n- On clinical trial centric, the Trial Matcher is finding a group of patients potentially eligible to a clinical trial. The Trial Matcher narrows down the patients, first filtered on clinical condition and selected clinical observations, and then focuses on those patients who met the baseline criteria, to find the group of patients that appears to be eligible patients to a trial.\n\n## Examples\n\n- [Match Trials][samples_location]\n\n### Match Trials\n\n```C# Snippet:HealthInsightsClinicalMatchingMatchTrialsAsync\nTrialMatcherResult trialMatcherResult = default;\ntry\n{\n    // Using ClinicalMatchingClient + MatchTrialsAsync\n    Operation<TrialMatcherResult> operation = await clinicalMatchingClient.MatchTrialsAsync(WaitUntil.Completed, trialMatcherData);\n    trialMatcherResult = operation.Value;\n}\ncatch (Exception ex)\n{\n    Console.WriteLine(ex.ToString());\n    return;\n}\n```\n```C# Snippet:HealthInsightsTrialMatcherMatchTrialsAsyncViewResults\n// View the match trials (eligible/ineligible)\nif (trialMatcherResult.Status == JobStatus.Succeeded)\n{\n    TrialMatcherResults matcherResults = trialMatcherResult.Results;\n    foreach (TrialMatcherPatientResult patientResult in matcherResults.Patients)\n    {\n        Console.WriteLine($\"Inferences of Patient {patientResult.Id}\");\n        foreach (TrialMatcherInference tmInferences in patientResult.Inferences)\n        {\n            Console.WriteLine($\"Trial Id {tmInferences.Id}\");\n            Console.WriteLine($\"Type: {tmInferences.Type.ToString()}  Value: {tmInferences.Value}\");\n            Console.WriteLine($\"Description {tmInferences.Description}\");\n        }\n    }\n}\nelse\n{\n    IReadOnlyList<ResponseError> matcherErrors = trialMatcherResult.Errors;\n    foreach (ResponseError error in matcherErrors)\n    {\n        Console.WriteLine($\"{error.Code} : {error.Message}\");\n    }\n}\n```\n\n## Troubleshooting\n\n### Setting up console logging\n\nThe simplest way to see the logs is to enable the console logging.\nTo create an Azure SDK log listener that outputs messages to console use the AzureEventSourceListener.CreateConsoleLogger method.\n\n```C#\n// Setup a listener to monitor logged events.\nusing AzureEventSourceListener listener = AzureEventSourceListener.CreateConsoleLogger();\n```\n\nTo learn more about other logging mechanisms see [Diagnostics Samples][logging].\n\n## Next steps\n\n## Additional documentation\n\nFor more extensive documentation on Azure Health Insights Clinical Matching, see the [Clinical Matching documentation][clinical_matching_docs] on docs.microsoft.com.\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [cla.microsoft.com][cla].\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n[clinical_matching_client_class]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/healthinsights/Azure.Health.Insights.ClinicalMatching/src/Generated/ClinicalMatchingClient.cs\n[DefaultAzureCredential]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/identity/Azure.Identity/README.md\n[cognitive_resource_cli]: https://docs.microsoft.com/azure/cognitive-services/cognitive-services-apis-create-account-cli\n[logging]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/core/Azure.Core/samples/Diagnostics.md\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/dotnet/\n[nuget]: https://www.nuget.org/\n[azure_portal]: https://portal.azure.com\n[cla]: https://cla.microsoft.com\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n[clinical_matching_docs]: https://review.learn.microsoft.com/azure/cognitive-services/health-decision-support/trial-matcher/overview?branch=main\n[clinical_matching_client_src]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/healthinsights/Azure.Health.Insights.ClinicalMatching/src/\n[clinical_matching_client_nuget_package]: https://www.nuget.org/packages/Azure.Health.Insights.ClinicalMatching/\n[clinical_matching_api_documentation]: https://review.learn.microsoft.com/rest/api/cognitiveservices/healthinsights/trial-matcher?branch=healthin202303\n[product_docs]:https://review.learn.microsoft.com/azure/cognitive-services/health-decision-support/trial-matcher/?branch=main\n[samples_location]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/healthinsights/Azure.Health.Insights.ClinicalMatching/samples\n",
        "repo_name": "healthinsights/Azure.Health.Insights.ClinicalMatching",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/healthinsights/Azure.Health.Insights.ClinicalMatching",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Hybrid Container Service management client library for .NET\n\nThe service provide the capability to manage the lifecycle of AKS hybrid clusters running on Azure Stack HCI and Windows Server.\n\nThis library supports managing Microsoft Azure Hybrid Container Service resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Hybrid Container Service management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.HybridContainerService --prerelease\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html)\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "hybridaks/Azure.ResourceManager.HybridContainerService",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/hybridaks/Azure.ResourceManager.HybridContainerService",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Hybrid Compute management client library for .NET\n\nThis library supports managing Microsoft Azure Hybrid Compute resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Hybrid Compute management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.HybridCompute --prerelease\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "hybridcompute/Azure.ResourceManager.HybridCompute",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/hybridcompute/Azure.ResourceManager.HybridCompute",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Hybrid Connectivity management client library for .NET\n\nThis library supports managing Microsoft Azure Hybrid Connectivity resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Hybrid Connectivity management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.HybridConnectivity --prerelease\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "hybridconnectivity/Azure.ResourceManager.HybridConnectivity",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/hybridconnectivity/Azure.ResourceManager.HybridConnectivity",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Hybrid Data management client library for .NET\n\nThis library supports managing Microsoft Azure Hybrid Data resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Hybrid Data management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.HybridData\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "hybriddatamanager/Azure.ResourceManager.HybridData",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/hybriddatamanager/Azure.ResourceManager.HybridData",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Hybrid Kubernetes management client library for .NET\n\nThis library supports managing Microsoft Azure Hybrid Kubernetes resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Kubernetes management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.Kubernetes --prerelease\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "hybridkubernetes/Azure.ResourceManager.Kubernetes",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/hybridkubernetes/Azure.ResourceManager.Kubernetes",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Identity Brokered Authentication client library for .NET\n The library extends the Azure.Identity library to provide authentication broker support. It includes the necessary dependencies, and provides the `InteractiveBrowserCredentialBrokerOptions` class. This options class can be used to create an `InteractiveBrowserCredential` capable of using the system authentication broker in lieu of the system browser when available.  \n\n  [Source code][source] | [Package (nuget)][package] | [API reference documentation][identity_api_docs] | [Azure Active Directory documentation][aad_doc]\n\n## Getting started\n\n### Install the package\n\nInstall the Azure Identity client library for .NET with [NuGet][nuget]:\n\n```PowerShell\ndotnet add package Azure.Identity.BrokeredAuthentication --prerelease\n```\n\n### Prerequisites\n* The [Azure.Identity][azure_identity] library is a dependency of Azure.Identity.BrokeredAuthentication.\n\n### Authenticate the client\n\n## Key concepts\n\n## Examples\n\n### Configuring the `InteractiveBrowserCredential` to use the system authentication broker\n\nThis example demonstrates configuring the `InteractiveBrowserCredential` with the specialized options type `InteractiveBrowserCredentialBrokerOptions` to enable brokered authentication.\n\n```C# Snippet:ConfigureInteractiveBrowserToUseBroker\nIntPtr parentWindowHandle = GetForegroundWindow();\n\n// Create an interactive browser credential which will use the system authentication broker\nvar credential = new InteractiveBrowserCredential(new InteractiveBrowserCredentialBrokerOptions(parentWindowHandle));\n\n// Use the credential to authenticate a secret client\nvar client = new SecretClient(new Uri(\"https://myvault.vault.azure.net/\"), credential);\n```\n\n## Troubleshooting\n\nSee the [troubleshooting guide](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/TROUBLESHOOTING.md) for details on how to diagnose various failure scenarios.\n\n### Error Handling\nErrors arising from authentication can be raised on any service client method which makes a request to the service. This is because the first time the token is requested from the credential is on the first call to the service, and any subsequent calls might need to refresh the token. In order to distinguish these failures from failures in the service client Azure Identity classes raise the `AuthenticationFailedException` with details to the source of the error in the exception message as well as possibly the error message. Depending on the application these errors may or may not be recoverable.\n\n``` c#\nusing Azure.Identity;\nusing Azure.Security.KeyVault.Secrets;\n\n// Create a secret client using the DefaultAzureCredential\nvar client = new SecretClient(new Uri(\"https://myvault.vault.azure.net/\"), new DefaultAzureCredential());\n\ntry\n{\n    KeyVaultSecret secret = await client.GetSecretAsync(\"secret1\");\n}\ncatch (AuthenticationFailedException e)\n{\n    Console.WriteLine($\"Authentication Failed. {e.Message}\");\n}\n```\n\nFor more details on dealing with errors arising from failed requests to Azure Active Directory, or managed identity endpoints please refer to the Azure Active Directory [documentation on authorization error codes][aad_err_doc].\n\n### Logging\n\nThe Azure Identity library provides the same [logging capabilities](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md#logging) as the rest of the Azure SDK.\n\nThe simplest way to see the logs to help debug authentication issues is to enable the console logging.\n\n``` c#\n// Setup a listener to monitor logged events.\nusing AzureEventSourceListener listener = AzureEventSourceListener.CreateConsoleLogger();\n```\n\nAll credentials can be configured with diagnostic options, in the same way as other clients in the SDK.\n\n``` c#\nDefaultAzureCredentialOptions options = new DefaultAzureCredentialOptions()\n{\n    Diagnostics =\n    {\n        LoggedHeaderNames = { \"x-ms-request-id\" },\n        LoggedQueryParameters = { \"api-version\" },\n        IsLoggingContentEnabled = true\n    }\n};\n```\n\n> CAUTION: Requests and responses in the Azure Identity library contain sensitive information. Precaution must be taken to protect logs when customizing the output to avoid compromising account security.\n\n### Thread safety\nWe guarantee that all credential instance methods are thread-safe and independent of each other ([guideline](https://azure.github.io/azure-sdk/dotnet_introduction.html#dotnet-service-methods-thread-safety)).\nThis ensures that the recommendation of reusing credential instances is always safe, even across threads.\n\n### Additional concepts\n[Client options](https://github.com/Azure/azure-sdk-for-net/blob/master/sdk/core/Azure.Core/README.md#configuring-service-clients-using-clientoptions) |\n[Accessing the response](https://github.com/Azure/azure-sdk-for-net/blob/master/sdk/core/Azure.Core/README.md#accessing-http-response-details-using-responset) |\n[Diagnostics](https://github.com/Azure/azure-sdk-for-net/blob/master/sdk/core/Azure.Core/samples/Diagnostics.md) |\n[Mocking](https://github.com/Azure/azure-sdk-for-net/blob/master/sdk/core/Azure.Core/README.md#mocking) |\n[Client lifetime](https://devblogs.microsoft.com/azure-sdk/lifetime-management-and-thread-safety-guarantees-of-azure-sdk-net-clients/)\n\n## Next steps\n\n### Client libraries supporting authentication with Azure Identity\n\nMany of the client libraries listed [here](https://azure.github.io/azure-sdk/releases/latest/dotnet.html) support authenticating with `TokenCredential` and the Azure Identity library.\nThere you will also find links where you can learn more about their use, including additional documentation and samples.\n\n### Known Issues\n\nThis library does not currently support scenarios relating to the [AAD B2C](https://docs.microsoft.com/azure/active-directory-b2c/overview) service.\n\nCurrently open issues for the Azure.Identity library can be found [here](https://github.com/Azure/azure-sdk-for-net/issues?q=is%3Aissue+is%3Aopen+label%3AAzure.Identity).\n\n## Contributing\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct]. For more information see the [Code of Conduct FAQ][code_of_conduct_faq] or contact opencode@microsoft.com with any additional questions or comments.\n\n<!-- LINKS -->\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_powerShell]: https://docs.microsoft.com/powershell/azure\n[azure_sub]: https://azure.microsoft.com/free/dotnet/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/identity/Azure.Identity/README.md\n[source]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/identity/Azure.Identity.BrokeredAuthentication/src\n[package]: https://www.nuget.org/packages?q=Azure.Identity.BrokeredAuthentication\n[aad_doc]: https://docs.microsoft.com/azure/active-directory/\n[aad_err_doc]: https://docs.microsoft.com/azure/active-directory/develop/reference-aadsts-error-codes\n[certificates_client_library]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/keyvault/Azure.Security.KeyVault.Certificates\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[code_of_conduct_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[nuget]: https://www.nuget.org/\n[keys_client_library]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/keyvault/Azure.Security.KeyVault.Keys\n[secrets_client_library]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/keyvault/Azure.Security.KeyVault.Secrets\n[blobs_client_library]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/storage/Azure.Storage.Blobs\n[queues_client_library]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/storage/Azure.Storage.Queues\n[eventhubs_client_library]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/eventhub/Azure.Messaging.EventHubs\n[azure_core_library]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/core/Azure.Core\n[identity_api_docs]: https://docs.microsoft.com/dotnet/api/azure.identity?view=azure-dotnet\n[vs_login_image]: https://raw.githubusercontent.com/Azure/azure-sdk-for-net/main/sdk/identity/Azure.Identity/images/VsLoginDialog.png\n[azure_cli_login_image]: https://raw.githubusercontent.com/Azure/azure-sdk-for-net/main/sdk/identity/Azure.Identity/images/AzureCliLogin.png\n[azure_cli_login_device_code_image]: https://raw.githubusercontent.com/Azure/azure-sdk-for-net/main/sdk/identity/Azure.Identity/images/AzureCliLoginDeviceCode.png\n[ref_DefaultAzureCredential]: https://docs.microsoft.com/dotnet/api/azure.identity.defaultazurecredential?view=azure-dotnet\n[ref_ChainedTokenCredential]: https://docs.microsoft.com/dotnet/api/azure.identity.chainedtokencredential?view=azure-dotnet\n[ref_EnvironmentCredential]: https://docs.microsoft.com/dotnet/api/azure.identity.environmentcredential?view=azure-dotnet\n[ref_ManagedIdentityCredential]: https://docs.microsoft.com/dotnet/api/azure.identity.managedidentitycredential?view=azure-dotnet\n[ref_ClientSecretCredential]: https://docs.microsoft.com/dotnet/api/azure.identity.clientsecretcredential?view=azure-dotnet\n[ref_ClientCertificateCredential]: https://docs.microsoft.com/dotnet/api/azure.identity.clientcertificatecredential?view=azure-dotnet\n[ref_InteractiveBrowserCredential]: https://docs.microsoft.com/dotnet/api/azure.identity.interactivebrowsercredential?view=azure-dotnet\n[ref_DeviceCodeCredential]: https://docs.microsoft.com/dotnet/api/azure.identity.devicecodecredential?view=azure-dotnet\n[ref_UsernamePasswordCredential]: https://docs.microsoft.com/dotnet/api/azure.identity.usernamepasswordcredential?view=azure-dotnet\n[ref_AuthorizationCodeCredential]: https://docs.microsoft.com/dotnet/api/azure.identity.authorizationcodecredential?view=azure-dotnet\n[ref_AzureCliCredential]: https://docs.microsoft.com/dotnet/api/azure.identity.azureclicredential?view=azure-dotnet\n[ref_AzurePowerShellCredential]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/src/AzurePowerShellCredential.cs\n[ref_VisualStudioCredential]: https://docs.microsoft.com/dotnet/api/azure.identity.visualstudiocredential?view=azure-dotnet\n[ref_VisualStudioCodeCredential]: https://docs.microsoft.com/dotnet/api/azure.identity.visualstudiocodecredential?view=azure-dotnet\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2Fsdk%2Fidentity%2FAzure.Identity%2FREADME.png)\n",
        "repo_name": "identity/Azure.Identity.BrokeredAuthentication",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity.BrokeredAuthentication",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Identity client library for .NET\n\nThe Azure Identity library provides [Azure Active Directory (Azure AD)](https://learn.microsoft.com/azure/active-directory/fundamentals/active-directory-whatis) token authentication support across the Azure SDK. It provides a set of [`TokenCredential`](https://learn.microsoft.com/dotnet/api/azure.core.tokencredential?view=azure-dotnet) implementations which can be used to construct Azure SDK clients which support Azure AD token authentication.\n\n  [Source code][source] | [Package (NuGet)][package] | [API reference documentation][identity_api_docs] | [Azure AD documentation][aad_doc]\n\n## Getting started\n\n### Install the package\n\nInstall the Azure Identity client library for .NET with [NuGet][nuget]:\n\n```dotnetcli\ndotnet add package Azure.Identity\n```\n\n### Prerequisites\n\n* An [Azure subscription][azure_sub].\n* The [Azure CLI][azure_cli] can also be useful for authenticating in a development environment, creating accounts, and managing account roles.\n\n### Authenticate the client\n\nWhen debugging and executing code locally it is typical for a developer to use their own account for authenticating calls to Azure services. There are several developer tools which can be used to perform this authentication in your development environment.\n\n#### Authenticate via Visual Studio\n\nDevelopers using Visual Studio 2017 or later can authenticate an Azure AD account through the IDE. Applications using the `DefaultAzureCredential` or the `VisualStudioCredential` can then use this account to authenticate calls in their application when running locally.\n\nTo authenticate in Visual Studio, select the **Tools** > **Options** menu to launch the Options dialog. Then navigate to the `Azure Service Authentication` options to sign in with your Azure AD account.\n\n![Visual Studio Account Selection][vs_login_image]\n\n#### Authenticate via Visual Studio Code\n\nDevelopers using Visual Studio Code can use the [Azure Account extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode.azure-account) to authenticate via the editor. Applications using the `DefaultAzureCredential` or the `VisualStudioCodeCredential` can then use this account to authenticate calls in their application when running locally.\n\nIt's a [known issue](https://github.com/Azure/azure-sdk-for-net/issues/27263) that `VisualStudioCodeCredential` doesn't work with [Azure Account extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode.azure-account) versions newer than **0.9.11**. A long-term fix to this problem is in progress. In the meantime, consider [authenticating via the Azure CLI](#authenticating-via-the-azure-cli).\n\n#### Authenticate via the Azure CLI\n\nDevelopers coding outside of an IDE can also use the [Azure CLI][azure_cli] to authenticate. Applications using the `DefaultAzureCredential` or the `AzureCliCredential` can then use this account to authenticate calls in their application when running locally.\n\nTo authenticate with the [Azure CLI][azure_cli], users can run the command `az login`. For users running on a system with a default web browser, the Azure CLI will launch the browser to authenticate the user.\n\n![Azure CLI Account Sign In][azure_cli_login_image]\n\nFor systems without a default web browser, the `az login` command will use the device code authentication flow. The user can also force the Azure CLI to use the device code flow rather than launching a browser by specifying the `--use-device-code` argument.\n\n![Azure CLI Account Device Code Sign In][azure_cli_login_device_code_image]\n\n#### Authenticate via the Azure Developer CLI\n\nDevelopers coding outside of an IDE can also use the [Azure Developer CLI][azure_developer_cli] to authenticate. Applications using the `DefaultAzureCredential` or the `AzureDeveloperCliCredential` can then use this account to authenticate calls in their application when running locally.\n\nTo authenticate with the [Azure Developer CLI][azure_developer_cli], users can run the command `azd auth login`. For users running on a system with a default web browser, the Azure Developer CLI will launch the browser to authenticate the user.\n\nFor systems without a default web browser, the `azd auth login --use-device-code` command will use the device code authentication flow.\n\n#### Authenticate via Azure PowerShell\n\nDevelopers coding outside of an IDE can also use [Azure PowerShell][azure_powerShell] to authenticate. Applications using the `DefaultAzureCredential` or the `AzurePowerShellCredential` can then use this account to authenticate calls in their application when running locally.\n\nTo authenticate with [Azure PowerShell][azure_powerShell], users can run the command `Connect-AzAccount`. For users running on a system with a default web browser and version 5.0.0 or later of azure PowerShell, it will launch the browser to authenticate the user.\n\nFor systems without a default web browser, the `Connect-AzAccount` command will use the device code authentication flow. The user can also force Azure PowerShell to use the device code flow rather than launching a browser by specifying the `UseDeviceAuthentication` argument.\n\n## Key concepts\n\n### Credentials\n\nA credential is a class which contains or can obtain the data needed for a service client to authenticate requests. Service clients across the Azure SDK accept credentials when they're constructed. Service clients use those credentials to authenticate requests to the service.\n\nThe Azure Identity library focuses on OAuth authentication with Azure AD, and it offers a variety of credential classes capable of acquiring an Azure AD token to authenticate service requests. All of the credential classes in this library are implementations of the `TokenCredential` abstract class in [Azure.Core][azure_core_library], and any of them can be used to construct service clients capable of authenticating with a `TokenCredential`.\n\nSee [Credential Classes](#credential-classes) for a complete listing of available credential types.\n\n### DefaultAzureCredential\n\nThe `DefaultAzureCredential` is appropriate for most scenarios where the application is intended to ultimately be run in Azure. This is because the `DefaultAzureCredential` combines credentials commonly used to authenticate when deployed, with credentials used to authenticate in a development environment.\n\n> Note: `DefaultAzureCredential` is intended to simplify getting started with the SDK by handling common scenarios with reasonable default behaviors. Developers who want more control or whose scenario isn't served by the default settings should use other credential types.\n\nThe `DefaultAzureCredential` attempts to authenticate via the following mechanisms, in this order, stopping when one succeeds:\n\n![DefaultAzureCredential authentication flow][default_azure_credential_authflow_image]\n\n1. **Environment** - The `DefaultAzureCredential` will read account information specified via [environment variables](#environment-variables) and use it to authenticate.\n1. **Workload Identity** - If the application is deployed to an Azure host with Workload Identity enabled, the `DefaultAzureCredential` will authenticate with that account.\n1. **Managed Identity** - If the application is deployed to an Azure host with Managed Identity enabled, the `DefaultAzureCredential` will authenticate with that account.\n1. **Azure Developer CLI** - If the developer has authenticated via the Azure Developer CLI `azd auth login` command, the `DefaultAzureCredential` will authenticate with that account.\n1. **Visual Studio** - If the developer has authenticated via Visual Studio, the `DefaultAzureCredential` will authenticate with that account.\n1. **Visual Studio Code** - Currently excluded by default as SDK authentication via Visual Studio Code is broken due to issue [#27263](https://github.com/Azure/azure-sdk-for-net/issues/27263). The `VisualStudioCodeCredential` will be re-enabled in the `DefaultAzureCredential` flow once a fix is in place. Issue [#30525](https://github.com/Azure/azure-sdk-for-net/issues/30525) tracks this. In the meantime Visual Studio Code users can authenticate their development environment using the [Azure CLI](https://learn.microsoft.com/cli/azure/).\n1. **Azure CLI** - If the developer has authenticated an account via the Azure CLI `az login` command, the `DefaultAzureCredential` will authenticate with that account.\n1. **Azure PowerShell** - If the developer has authenticated an account via the Azure PowerShell `Connect-AzAccount` command, the `DefaultAzureCredential` will authenticate with that account.\n1. **Interactive browser** - If enabled, the `DefaultAzureCredential` will interactively authenticate the developer via the current system's default browser. By default, this credential type is disabled.\n\n## Examples\n\n### Authenticate with `DefaultAzureCredential`\n\nThis example demonstrates authenticating the `SecretClient` from the [Azure.Security.KeyVault.Secrets][secrets_client_library] client library using the `DefaultAzureCredential`.\n\n```C# Snippet:AuthenticatingWithDefaultAzureCredential\n// Create a secret client using the DefaultAzureCredential\nvar client = new SecretClient(new Uri(\"https://myvault.vault.azure.net/\"), new DefaultAzureCredential());\n```\n\n### Enable interactive authentication with `DefaultAzureCredential`\n\nInteractive authentication is disabled in the `DefaultAzureCredential` by default. This example demonstrates two ways of enabling the interactive authentication portion of the `DefaultAzureCredential`. When enabled the `DefaultAzureCredential` will fall back to interactively authenticating the developer via the system's default browser if when no other credentials are available. This example then authenticates an `EventHubProducerClient` from the [Azure.Messaging.EventHubs][eventhubs_client_library] client library using the `DefaultAzureCredential` with interactive authentication enabled.\n\n```C# Snippet:EnableInteractiveAuthentication\n// the includeInteractiveCredentials constructor parameter can be used to enable interactive authentication\nvar credential = new DefaultAzureCredential(includeInteractiveCredentials: true);\n\nvar eventHubClient = new EventHubProducerClient(\"myeventhub.eventhubs.windows.net\", \"myhubpath\", credential);\n```\n\n### Specify a user-assigned managed identity with `DefaultAzureCredential`\n\nMany Azure hosts allow the assignment of a user-assigned managed identity. This example demonstrates configuring the `DefaultAzureCredential` to authenticate a user-assigned identity when deployed to an Azure host. It then authenticates a `BlobClient` from the [Azure.Storage.Blobs][blobs_client_library] client library with credential.\n\n```C# Snippet:UserAssignedManagedIdentity\n// When deployed to an azure host, the default azure credential will authenticate the specified user assigned managed identity.\n\nstring userAssignedClientId = \"<your managed identity client Id>\";\nvar credential = new DefaultAzureCredential(new DefaultAzureCredentialOptions { ManagedIdentityClientId = userAssignedClientId });\n\nvar blobClient = new BlobClient(new Uri(\"https://myaccount.blob.core.windows.net/mycontainer/myblob\"), credential);\n```\n\nIn addition to configuring the `ManagedIdentityClientId` via code, it can also be set using the `AZURE_CLIENT_ID` environment variable. These two approaches are equivalent when using the `DefaultAzureCredential`.\n\n### Define a custom authentication flow with `ChainedTokenCredential`\n\nWhile the `DefaultAzureCredential` is generally the quickest way to get started developing applications for Azure, more advanced users may want to customize the credentials considered when authenticating. The `ChainedTokenCredential` enables users to combine multiple credential instances to define a customized chain of credentials. This example demonstrates creating a `ChainedTokenCredential` which will attempt to authenticate using managed identity, and fall back to authenticating via the Azure CLI if managed identity is unavailable in the current environment. The credential is then used to authenticate an `EventHubProducerClient` from the [Azure.Messaging.EventHubs][eventhubs_client_library] client library.\n\n```C# Snippet:CustomChainedTokenCredential\n// Authenticate using managed identity if it is available; otherwise use the Azure CLI to authenticate.\n\nvar credential = new ChainedTokenCredential(new ManagedIdentityCredential(), new AzureCliCredential());\n\nvar eventHubProducerClient = new EventHubProducerClient(\"myeventhub.eventhubs.windows.net\", \"myhubpath\", credential);\n```\n\n## Managed identity support\n\n[Managed identity authentication](https://learn.microsoft.com/azure/active-directory/managed-identities-azure-resources/overview) is supported via either the `DefaultAzureCredential` or the `ManagedIdentityCredential` directly for the following Azure services:\n\n* [Azure App Service and Azure Functions](https://learn.microsoft.com/azure/app-service/overview-managed-identity?tabs=dotnet)\n* [Azure Arc](https://learn.microsoft.com/azure/azure-arc/servers/managed-identity-authentication)\n* [Azure Cloud Shell](https://learn.microsoft.com/azure/cloud-shell/msi-authorization)\n* [Azure Kubernetes Service](https://learn.microsoft.com/azure/aks/use-managed-identity)\n* [Azure Service Fabric](https://learn.microsoft.com/azure/service-fabric/concepts-managed-identity)\n* [Azure Virtual Machines](https://learn.microsoft.com/azure/active-directory/managed-identities-azure-resources/how-to-use-vm-token)\n* [Azure Virtual Machines Scale Sets](https://learn.microsoft.com/azure/active-directory/managed-identities-azure-resources/qs-configure-powershell-windows-vmss)\n\n### Examples\n\nThese examples demonstrate authenticating the `SecretClient` from the [Azure.Security.KeyVault.Secrets][secrets_client_library] client library using the `ManagedIdentityCredential`.\n\n#### Authenticate with a user-assigned managed identity\n\n```C# Snippet:AuthenticatingWithManagedIdentityCredentialUserAssigned\nvar credential = new ManagedIdentityCredential(clientId: userAssignedClientId);\nvar client = new SecretClient(new Uri(\"https://myvault.vault.azure.net/\"), credential);\n```\n\n#### Authenticate with a system-assigned managed identity\n\n```C# Snippet:AuthenticatingWithManagedIdentityCredentialSystemAssigned\nvar credential = new ManagedIdentityCredential();\nvar client = new SecretClient(new Uri(\"https://myvault.vault.azure.net/\"), credential);\n```\n\n## Cloud configuration\n\nCredentials default to authenticating to the Azure AD endpoint for the Azure public cloud. To access resources in other clouds, such as Azure Government or a private cloud, configure credentials with the `AuthorityHost` argument. [AzureAuthorityHosts](https://learn.microsoft.com/dotnet/api/azure.identity.azureauthorityhosts?view=azure-dotnet) defines authorities for well-known clouds:\n\n```C# Snippet:AuthenticatingWithAuthorityHost\nvar credential = new DefaultAzureCredential(new DefaultAzureCredentialOptions { AuthorityHost = AzureAuthorityHosts.AzureGovernment });\n```\n\nNot all credentials require this configuration. Credentials which authenticate through a development tool, such as `AzureCliCredential`, use that tool's configuration.\n\n## Credential classes\n\n### Authenticate Azure-hosted applications\n\n|Credential | Usage\n|-|-\n|[`DefaultAzureCredential`][ref_DefaultAzureCredential]|Provides a simplified authentication experience to quickly start developing applications run in Azure.\n|[`ChainedTokenCredential`][ref_ChainedTokenCredential]|Allows users to define custom authentication flows composing multiple credentials.\n|[`EnvironmentCredential`][ref_EnvironmentCredential]|Authenticates a service principal or user via credential information specified in environment variables.\n|[`ManagedIdentityCredential`][ref_ManagedIdentityCredential]|Authenticates the managed identity of an Azure resource.\n|[`WorkloadIdentityCredential`][ref_WorkloadIdentityCredential]|Supports [Azure AD workload identity](https://learn.microsoft.com/azure/aks/workload-identity-overview) on Kubernetes.\n\n### Authenticate service principals\n\n|Credential | Usage | Reference\n|-|-|-\n|[`ClientAssertionCredential`][ref_ClientAssertionCredential]|Authenticates a service principal using a signed client assertion. |\n|[`ClientCertificateCredential`][ref_ClientCertificateCredential]|Authenticates a service principal using a certificate. | [Service principal authentication](https://learn.microsoft.com/azure/active-directory/develop/app-objects-and-service-principals)\n|[`ClientSecretCredential`][ref_ClientSecretCredential]|Authenticates a service principal using a secret. | [Service principal authentication](https://learn.microsoft.com/azure/active-directory/develop/app-objects-and-service-principals)\n\n### Authenticate users\n\n|Credential | Usage | Reference\n|-|-|-\n|[`AuthorizationCodeCredential`][ref_AuthorizationCodeCredential]|Authenticates a user with a previously obtained authorization code. | [OAuth2 authentication code](https://learn.microsoft.com/azure/active-directory/develop/v2-oauth2-auth-code-flow)\n|[`DeviceCodeCredential`][ref_DeviceCodeCredential]|Interactively authenticates a user on devices with limited UI. | [Device code authentication](https://learn.microsoft.com/azure/active-directory/develop/v2-oauth2-device-code)\n|[`InteractiveBrowserCredential`][ref_InteractiveBrowserCredential]|Interactively authenticates a user with the default system browser. | [OAuth2 authentication code](https://learn.microsoft.com/azure/active-directory/develop/v2-oauth2-auth-code-flow)\n|[`OnBehalfOfCredential`][ref_OnBehalfOfCredential]|Propagates the delegated user identity and permissions through the request chain. | [On-behalf-of authentication](https://learn.microsoft.com/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow)\n|[`UsernamePasswordCredential`][ref_UsernamePasswordCredential]|Authenticates a user with a username and password. | [Username + password authentication](https://learn.microsoft.com/azure/active-directory/develop/v2-oauth-ropc)\n\n### Authenticate via development tools\n\n|Credential | Usage | Reference\n|-|-|-\n|[`AzureCliCredential`][ref_AzureCliCredential]|Authenticates in a development environment with the Azure CLI. | [Azure CLI authentication](https://learn.microsoft.com/cli/azure/authenticate-azure-cli)\n|[`AzureDeveloperCliCredential`][ref_AzureDeveloperCliCredential]|Authenticates in a development environment with the Azure Developer CLI. | [Azure Developer CLI Reference](https://learn.microsoft.com/azure/developer/azure-developer-cli/reference)\n|[`AzurePowerShellCredential`][ref_AzurePowerShellCredential]|Authenticates in a development environment with the Azure PowerShell. | [Azure PowerShell authentication](https://learn.microsoft.com/powershell/azure/authenticate-azureps)\n|[`VisualStudioCredential`][ref_VisualStudioCredential]|Authenticates in a development environment with Visual Studio. | [Visual Studio configuration](https://learn.microsoft.com/dotnet/azure/configure-visual-studio)\n|[`VisualStudioCodeCredential`][ref_VisualStudioCodeCredential]| Authenticates as the user signed in to the Visual Studio Code Azure Account extension. | [VS Code Azure Account extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode.azure-account)\n\n> __Note:__ All credential implementations in the Azure Identity library are threadsafe, and a single credential instance can be used by multiple service clients.\n\n## Environment variables\n\n[`DefaultAzureCredential`][ref_DefaultAzureCredential] and [`EnvironmentCredential`][ref_EnvironmentCredential] can be configured with environment variables. Each type of authentication requires values for specific variables:\n\n#### Service principal with secret\n\n|Variable name|Value\n|-|-\n|`AZURE_CLIENT_ID`|ID of an Azure AD application\n|`AZURE_TENANT_ID`|ID of the application's Azure AD tenant\n|`AZURE_CLIENT_SECRET`|one of the application's client secrets\n\n#### Service principal with certificate\n\n|variable name|Value\n|-|-\n|`AZURE_CLIENT_ID`|ID of an Azure AD application\n|`AZURE_TENANT_ID`|ID of the application's Azure AD tenant\n|`AZURE_CLIENT_CERTIFICATE_PATH`|path to a PFX or PEM-encoded certificate file including private key\n|`AZURE_CLIENT_CERTIFICATE_PASSWORD`|(optional) the password protecting the certificate file (currently only supported for PFX (PKCS12) certificates)\n|`AZURE_CLIENT_SEND_CERTIFICATE_CHAIN`|(optional) send certificate chain in x5c header to support subject name / issuer based authentication\n\n#### Username and password\n\n|Variable name|Value\n|-|-\n|`AZURE_CLIENT_ID`|ID of an Azure AD application\n|`AZURE_TENANT_ID`|ID of the application's Azure AD tenant\n|`AZURE_USERNAME`|a username (usually an email address)\n|`AZURE_PASSWORD`|that user's password\n\nConfiguration is attempted in the above order. For example, if values for a\nclient secret and certificate are both present, the client secret will be used.\n\n## Token caching\n\nToken caching is a feature provided by the Azure Identity library that allows apps to:\n\n* Cache tokens in memory (default) or on disk (opt-in).\n* Improve resilience and performance.\n* Reduce the number of requests made to Azure Active Directory (Azure AD) to obtain access tokens.\n\nThe Azure Identity library offers both in-memory and persistent disk caching. For more details, see the [token caching documentation](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/samples/TokenCache.md)\n\n## Troubleshooting\n\nSee the [troubleshooting guide](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/TROUBLESHOOTING.md) for details on how to diagnose various failure scenarios.\n\n### Error handling\n\nErrors arising from authentication can be raised on any service client method which makes a request to the service. This is because the first time the token is requested from the credential is on the first call to the service, and any subsequent calls might need to refresh the token. In order to distinguish these failures from failures in the service client Azure Identity classes raise the `AuthenticationFailedException` with details to the source of the error in the exception message as well as possibly the error message. Depending on the application these errors may or may not be recoverable.\n\n``` c#\nusing Azure.Identity;\nusing Azure.Security.KeyVault.Secrets;\n\n// Create a secret client using the DefaultAzureCredential\nvar client = new SecretClient(new Uri(\"https://myvault.vault.azure.net/\"), new DefaultAzureCredential());\n\ntry\n{\n    KeyVaultSecret secret = await client.GetSecretAsync(\"secret1\");\n}\ncatch (AuthenticationFailedException e)\n{\n    Console.WriteLine($\"Authentication Failed. {e.Message}\");\n}\n```\n\nFor more information on dealing with errors arising from failed requests to Azure AD or managed identity endpoints, see the Azure AD [documentation on authorization error codes][aad_err_doc].\n\n### Logging\n\nThe Azure Identity library provides the same [logging capabilities](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md#logging) as the rest of the Azure SDK.\n\nThe simplest way to see the logs to help debug authentication issues is to enable the console logging.\n\n``` c#\n// Setup a listener to monitor logged events.\nusing AzureEventSourceListener listener = AzureEventSourceListener.CreateConsoleLogger();\n```\n\nAll credentials can be configured with diagnostic options, in the same way as other clients in the SDK.\n\n> **CAUTION:** Requests and responses in the Azure Identity library contain sensitive information. Precaution must be taken to protect logs, when customizing the output, to avoid compromising account security.\n\n``` c#\nDefaultAzureCredentialOptions options = new DefaultAzureCredentialOptions\n{\n    Diagnostics =\n    {\n        LoggedHeaderNames = { \"x-ms-request-id\" },\n        LoggedQueryParameters = { \"api-version\" },\n        IsLoggingContentEnabled = true\n    }\n};\n```\n\nWhen troubleshooting authentication issues, you may also want to enable logging of sensitive information. To enable this type of logging, set the `IsLoggingContentEnabled` property to `true`. To only log details about the account that was used to attempt authentication and authorization, set `IsAccountIdentifierLoggingEnabled` to `true`.\n\n```c#\nDefaultAzureCredentialOptions options = new DefaultAzureCredentialOptions\n{\n    Diagnostics =\n    {\n        LoggedHeaderNames = { \"x-ms-request-id\" },\n        LoggedQueryParameters = { \"api-version\" },\n        IsAccountIdentifierLoggingEnabled = true\n    }\n};\n```\n\n### Thread safety\n\nWe guarantee that all credential instance methods are thread-safe and independent of each other ([guideline](https://azure.github.io/azure-sdk/dotnet_introduction.html#dotnet-service-methods-thread-safety)).\nThis ensures that the recommendation of reusing credential instances is always safe, even across threads.\n\n### Additional concepts\n\n[Client options](https://github.com/Azure/azure-sdk-for-net/blob/master/sdk/core/Azure.Core/README.md#configuring-service-clients-using-clientoptions) |\n[Accessing the response](https://github.com/Azure/azure-sdk-for-net/blob/master/sdk/core/Azure.Core/README.md#accessing-http-response-details-using-responset) |\n[Diagnostics](https://github.com/Azure/azure-sdk-for-net/blob/master/sdk/core/Azure.Core/samples/Diagnostics.md) |\n[Mocking](https://github.com/Azure/azure-sdk-for-net/blob/master/sdk/core/Azure.Core/README.md#mocking) |\n[Client lifetime](https://devblogs.microsoft.com/azure-sdk/lifetime-management-and-thread-safety-guarantees-of-azure-sdk-net-clients/)\n\n## Next steps\n\n### Client libraries supporting authentication with Azure Identity\n\nMany of the client libraries listed [here](https://azure.github.io/azure-sdk/releases/latest/dotnet.html) support authenticating with `TokenCredential` and the Azure Identity library.\nThere you will also find links where you can learn more about their use, including additional documentation and samples.\n\n### Known Issues\n\nThis library doesn't currently support scenarios relating to the [Azure AD B2C](https://learn.microsoft.com/azure/active-directory-b2c/overview) service.\n\nOpen issues for the `Azure.Identity` library can be found [here](https://github.com/Azure/azure-sdk-for-net/issues?q=is%3Aissue+is%3Aopen+label%3AAzure.Identity).\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct]. For more information see the [Code of Conduct FAQ][code_of_conduct_faq] or contact opencode@microsoft.com with any additional questions or comments.\n\n<!-- LINKS -->\n[azure_cli]: https://learn.microsoft.com/cli/azure\n[azure_developer_cli]:https://aka.ms/azure-dev\n[azure_powerShell]: https://learn.microsoft.com/powershell/azure\n[azure_sub]: https://azure.microsoft.com/free/dotnet/\n[source]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/identity/Azure.Identity/src\n[package]: https://www.nuget.org/packages/Azure.Identity\n[aad_doc]: https://learn.microsoft.com/azure/active-directory/\n[aad_err_doc]: https://learn.microsoft.com/azure/active-directory/develop/reference-aadsts-error-codes\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[code_of_conduct_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[nuget]: https://www.nuget.org/\n[secrets_client_library]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/keyvault/Azure.Security.KeyVault.Secrets\n[blobs_client_library]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/storage/Azure.Storage.Blobs\n[eventhubs_client_library]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/eventhub/Azure.Messaging.EventHubs\n[azure_core_library]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/core/Azure.Core\n[identity_api_docs]: https://learn.microsoft.com/dotnet/api/azure.identity?view=azure-dotnet\n[vs_login_image]: https://raw.githubusercontent.com/Azure/azure-sdk-for-net/main/sdk/identity/Azure.Identity/images/VsLoginDialog.png\n[azure_cli_login_image]: https://raw.githubusercontent.com/Azure/azure-sdk-for-net/main/sdk/identity/Azure.Identity/images/AzureCliLogin.png\n[azure_cli_login_device_code_image]: https://raw.githubusercontent.com/Azure/azure-sdk-for-net/main/sdk/identity/Azure.Identity/images/AzureCliLoginDeviceCode.png\n[default_azure_credential_authflow_image]: https://raw.githubusercontent.com/Azure/azure-sdk-for-net/main/sdk/identity/Azure.Identity/images/mermaidjs/DefaultAzureCredentialAuthFlow.svg\n[ref_AuthorizationCodeCredential]: https://learn.microsoft.com/dotnet/api/azure.identity.authorizationcodecredential?view=azure-dotnet\n[ref_AzureCliCredential]: https://learn.microsoft.com/dotnet/api/azure.identity.azureclicredential?view=azure-dotnet\n[ref_AzureDeveloperCliCredential]: https://learn.microsoft.com/dotnet/api/azure.identity.azuredeveloperclicredential?view=azure-dotnet\n[ref_AzurePowerShellCredential]: https://learn.microsoft.com/dotnet/api/azure.identity.azurepowershellcredential?view=azure-dotnet\n[ref_ChainedTokenCredential]: https://learn.microsoft.com/dotnet/api/azure.identity.chainedtokencredential?view=azure-dotnet\n[ref_ClientAssertionCredential]: https://learn.microsoft.com/dotnet/api/azure.identity.clientassertioncredential?view=azure-dotnet\n[ref_ClientCertificateCredential]: https://learn.microsoft.com/dotnet/api/azure.identity.clientcertificatecredential?view=azure-dotnet\n[ref_ClientSecretCredential]: https://learn.microsoft.com/dotnet/api/azure.identity.clientsecretcredential?view=azure-dotnet\n[ref_DefaultAzureCredential]: https://learn.microsoft.com/dotnet/api/azure.identity.defaultazurecredential?view=azure-dotnet\n[ref_DeviceCodeCredential]: https://learn.microsoft.com/dotnet/api/azure.identity.devicecodecredential?view=azure-dotnet\n[ref_EnvironmentCredential]: https://learn.microsoft.com/dotnet/api/azure.identity.environmentcredential?view=azure-dotnet\n[ref_InteractiveBrowserCredential]: https://learn.microsoft.com/dotnet/api/azure.identity.interactivebrowsercredential?view=azure-dotnet\n[ref_ManagedIdentityCredential]: https://learn.microsoft.com/dotnet/api/azure.identity.managedidentitycredential?view=azure-dotnet\n[ref_OnBehalfOfCredential]: https://learn.microsoft.com/dotnet/api/azure.identity.onbehalfofcredential?view=azure-dotnet\n[ref_UsernamePasswordCredential]: https://learn.microsoft.com/dotnet/api/azure.identity.usernamepasswordcredential?view=azure-dotnet\n[ref_VisualStudioCredential]: https://learn.microsoft.com/dotnet/api/azure.identity.visualstudiocredential?view=azure-dotnet\n[ref_VisualStudioCodeCredential]: https://learn.microsoft.com/dotnet/api/azure.identity.visualstudiocodecredential?view=azure-dotnet\n[ref_WorkloadIdentityCredential]: https://learn.microsoft.com/dotnet/api/azure.identity.workloadidentitycredential?view=azure-dotnet\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2Fsdk%2Fidentity%2FAzure.Identity%2FREADME.png)\n",
        "repo_name": "identity/Azure.Identity",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure IoT Hub client library for .NET\n\nThis library provides access to the Azure IoT Hub service for managing devices, modules, twins and jobs.\n\n  [Source code][source] | [Package (nuget)][package]\n\n## Getting started\n\nThe complete Microsoft Azure SDK can be downloaded from the [Microsoft Azure downloads][microsoft_sdk_download] page, and it ships with support for building deployment packages, integrating with tooling, rich command line tooling, and more.\n\nFor the best development experience, developers should use the official Microsoft NuGet packages for libraries. NuGet packages are regularly updated with new functionality and hotfixes.\n\n### Install the package\n\n### Prerequisites\n\n- A Microsoft Azure Subscription\n  - To call Microsoft Azure services, create an [Azure subscription][azure_sub].\n\n### Authenticate the Client\n\n## Key concepts\n\n### Thread safety\nWe guarantee that all client instance methods are thread-safe and independent of each other ([guideline](https://azure.github.io/azure-sdk/dotnet_introduction.html#dotnet-service-methods-thread-safety)). This ensures that the recommendation of reusing client instances is always safe, even across threads.\n\n### Additional concepts\n<!-- CLIENT COMMON BAR -->\n[Client options](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#configuring-service-clients-using-clientoptions) |\n[Accessing the response](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#accessing-http-response-details-using-responset) |\n[Long-running operations](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#consuming-long-running-operations-using-operationt) |\n[Handling failures](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#reporting-errors-requestfailedexception) |\n[Diagnostics](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md) |\n[Mocking](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#mocking) |\n[Client lifetime](https://devblogs.microsoft.com/azure-sdk/lifetime-management-and-thread-safety-guarantees-of-azure-sdk-net-clients/)\n<!-- CLIENT COMMON BAR -->\n\n## Examples\n\n## Source code folder structure\n\n## Troubleshooting\n\nAll service operations will throw RequestFailedException on failure reported by the service, with helpful error codes and other information.\n\n## Next steps\n\n## Contributing\n\nThis project welcomes contributions and suggestions.\nMost contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution.\nFor details, visit <https://cla.microsoft.com.>\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment).\nSimply follow the instructions provided by the bot.\nYou will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct].\nFor more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments.\n\n<!-- LINKS -->\n[microsoft_sdk_download]: https://azure.microsoft.com/downloads/?sdk=net\n[azure_sub]: https://azure.microsoft.com/free/dotnet/\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n",
        "repo_name": "iot/Azure.IoT.Hub.Service",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/iot/Azure.IoT.Hub.Service",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure IoT Central management client library for .NET\n\nMicrosoft Azure IoT Central is an IoT application platform as a service (aPaaS) that reduces the burden and cost of developing, managing, and maintaining IoT solutions. Use IoT Central to quickly evaluate your IoT scenario and assess the opportunities it can create for your business. \n\nThis library supports managing Microsoft Azure IoT Central resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure IoT Central management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.IotCentral\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "iotcentral/Azure.ResourceManager.IotCentral",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/iotcentral/Azure.ResourceManager.IotCentral",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure IoT Hub management client library for .NET\n\nMicrosoft Azure IoT Hub is a managed service hosted in the cloud that acts as a central message hub for communication between an IoT application and its attached devices.\n\nThis library supports managing Microsoft Azure IoT Hub resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure IoT Hub management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.IotHub\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html)..\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "iothub/Azure.ResourceManager.IotHub",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/iothub/Azure.ResourceManager.IotHub",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Key Vault management client library for .NET\n\nMicrosoft Azure Key Vault is one of several key management solutions in Azure, and helps solve the following problems:\n\n- **Secrets Management** - Azure Key Vault can be used to Securely store and tightly control access to tokens, passwords, certificates, API keys, and other secrets\n- **Key Management** - Azure Key Vault can be used as a Key Management solution. Azure Key Vault makes it easy to create and control the encryption keys used to encrypt your data.\n- **Certificate Management** - Azure Key Vault lets you easily provision, manage, and deploy public and private Transport Layer Security/Secure Sockets Layer (TLS/SSL) certificates for use with Azure and your internal connected resources.\n\nThis library supports managing Microsoft Azure Key Vault resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started\n\n### Install the package\n\nInstall the Microsoft Azure Key Vault management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.KeyVault\n```\n\n### Prerequisites\n\n* You must have an [Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html)..\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://learn.microsoft.com/samples/browse/?branch=master&languages=csharp&term=managing%20using%20Azure%20.NET%20SDK)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "keyvault/Azure.ResourceManager.KeyVault",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/keyvault/Azure.ResourceManager.KeyVault",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure KeyVault Administration client library for .NET\n\nAzure Key Vault Managed HSM is a fully-managed, highly-available, single-tenant, standards-compliant cloud service that enables you to safeguard\ncryptographic keys for your cloud applications using FIPS 140-2 Level 3 validated HSMs.\n\nThe Azure Key Vault administration library clients support administrative tasks such as full backup / restore and key-level role-based access control (RBAC).\n\n[Source code][admin_client_src] | [Package (NuGet)][admin_client_nuget_package] | [Product documentation][managedhsm_docs] | [Samples][admin_client_samples]\n\n## Getting started\n\n### Install the package\n\nInstall the Azure Key Vault administration client library for .NET with [NuGet][nuget]:\n\n```dotnetcli\ndotnet add package Azure.Security.KeyVault.Administration\n```\n\n### Prerequisites\n\n* An [Azure subscription][azure_sub].\n* An existing Azure Key Vault. If you need to create an Azure Key Vault, you can use the [Azure CLI][azure_cli].\n* Authorization to an existing Azure Key Vault using either [RBAC][rbac_guide] (recommended) or [access control][access_policy].\n\nTo create a Managed HSM resource, run the following CLI command:\n\n```PowerShell\naz keyvault create --hsm-name <your-key-vault-name> --resource-group <your-resource-group-name> --administrators <your-user-object-id> --location <your-azure-location>\n```\n\nTo get `<your-user-object-id>` you can run the following CLI command:\n\n```PowerShell\naz ad user show --id <your-user-principal> --query id\n```\n\n### Authenticate the client\n\nIn order to interact with the Azure Key Vault service, you'll need to create an instance of the client classes below. You need a **vault url**, which you may see as \"DNS Name\" in the portal,\nand credentials to instantiate a client object.\n\nThe examples shown below use a [`DefaultAzureCredential`][DefaultAzureCredential], which is appropriate for most scenarios including local development and production environments.\nAdditionally, we recommend using a managed identity for authentication in production environments.\nYou can find more information on different ways of authenticating and their corresponding credential types in the [Azure Identity][azure_identity] documentation.\n\nTo use the `DefaultAzureCredential` provider shown below,\nor other credential providers provided with the Azure SDK, you must first install the Azure.Identity package:\n\n```dotnetcli\ndotnet add package Azure.Identity\n```\n\n#### Activate your managed HSM\n\nAll data plane commands are disabled until the HSM is activated. You will not be able to create keys or assign roles.\nOnly the designated administrators that were assigned during the create command can activate the HSM. To activate the HSM you must download the security domain.\n\nTo activate your HSM you need:\n\n* A minimum of 3 RSA key-pairs (maximum 10)\n* Specify the minimum number of keys required to decrypt the security domain (quorum)\n\nTo activate the HSM you send at least 3 (maximum 10) RSA public keys to the HSM. The HSM encrypts the security domain with these keys and sends it back.\nOnce this security domain is successfully downloaded, your HSM is ready to use.\nYou also need to specify quorum, which is the minimum number of private keys required to decrypt the security domain.\n\nThe example below shows how to use openssl to generate 3 self-signed certificates.\n\n```PowerShell\nopenssl req -newkey rsa:2048 -nodes -keyout cert_0.key -x509 -days 365 -out cert_0.cer\nopenssl req -newkey rsa:2048 -nodes -keyout cert_1.key -x509 -days 365 -out cert_1.cer\nopenssl req -newkey rsa:2048 -nodes -keyout cert_2.key -x509 -days 365 -out cert_2.cer\n```\n\nUse the `az keyvault security-domain download` command to download the security domain and activate your managed HSM.\nThe example below uses 3 RSA key pairs (only public keys are needed for this command) and sets the quorum to 2.\n\n```PowerShell\naz keyvault security-domain download --hsm-name <your-managed-hsm-name> --sd-wrapping-keys ./certs/cert_0.cer ./certs/cert_1.cer ./certs/cert_2.cer --sd-quorum 2 --security-domain-file ContosoMHSM-SD.json\n```\n\n#### Controlling access to your managed HSM\n\nThe designated administrators assigned during creation are automatically added to the \"Managed HSM Administrators\" [built-in role][built_in_roles],\nwho are able to download a security domain and [manage roles for data plane access][access_control], among other limited permissions.\n\nTo perform other actions on keys, you need to assign principals to other roles such as \"Managed HSM Crypto User\", which can perform non-destructive key operations:\n\n```PowerShell\naz keyvault role assignment create --hsm-name <your-managed-hsm-name> --role \"Managed HSM Crypto User\" --scope / --assignee-object-id <principal-or-user-object-ID> --assignee-principal-type <principal-type>\n```\n\nPlease read [best practices][best_practices] for properly securing your managed HSM.\n\n#### Create KeyVaultAccessControlClient\n\nInstantiate a `DefaultAzureCredential` to pass to the `KeyVaultAccessControlClient`.\nThe same instance of a token credential can be used with multiple clients if they will be authenticating with the same identity.\n\n```C# Snippet:HelloCreateKeyVaultAccessControlClient\nKeyVaultAccessControlClient client = new KeyVaultAccessControlClient(new Uri(managedHsmUrl), new DefaultAzureCredential());\n```\n\n#### Create KeyVaultBackupClient\n\nInstantiate a `DefaultAzureCredential` to pass to the `KeyVaultBackupClient`.\nThe same instance of a token credential can be used with multiple clients if they will be authenticating with the same identity.\n\n```C# Snippet:HelloCreateKeyVaultBackupClient\nKeyVaultBackupClient client = new KeyVaultBackupClient(new Uri(managedHsmUrl), new DefaultAzureCredential());\n```\n\n#### Create KeyVaultSettingClient\n\nInstantiate a `DefaultAzureCredential` to pass to the `KeyVaultSettingsClient`.\nThe same instance of a token credential can be used with multiple clients if they will be authenticating with the same identity.\n\n```C# Snippet:KeyVaultSettingsClient_Create\nKeyVaultSettingsClient client = new KeyVaultSettingsClient(new Uri(managedHsmUrl), new DefaultAzureCredential());\n```\n\n## Key concepts\n\n### KeyVaultRoleDefinition\n\nA `KeyVaultRoleDefinition` is a collection of permissions. A role definition defines the operations that can be performed, such as read, write,\nand delete. It can also define the operations that are excluded from allowed operations.\n\nKeyVaultRoleDefinitions can be listed and specified as part of a `KeyVaultRoleAssignment`.\n\n### KeyVaultRoleAssignment\n\nA `KeyVaultRoleAssignment` is the association of a KeyVaultRoleDefinition to a service principal. They can be created, listed, fetched individually, and deleted.\n\n### KeyVaultAccessControlClient\n\nA `KeyVaultAccessControlClient` provides both synchronous and asynchronous operations allowing for management of `KeyVaultRoleDefinition` and `KeyVaultRoleAssignment` objects.\n\n### KeyVaultBackupClient\n\nA `KeyVaultBackupClient` provides both synchronous and asynchronous operations for performing full key backups, full key restores, and selective key restores.\n\n### BackupOperation\n\nA `BackupOperation` represents a long running operation for a full key backup.\n\n### RestoreOperation\n\nA `RestoreOperation` represents a long running operation for both a full key and selective key restore.\n\n### Thread safety\n\nWe guarantee that all client instance methods are thread-safe and independent of each other ([guideline](https://azure.github.io/azure-sdk/dotnet_introduction.html#dotnet-service-methods-thread-safety)). This ensures that the recommendation of reusing client instances is always safe, even across threads.\n\n### Additional concepts\n<!-- CLIENT COMMON BAR -->\n[Client options](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#configuring-service-clients-using-clientoptions) |\n[Accessing the response](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#accessing-http-response-details-using-responset) |\n[Long-running operations](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#consuming-long-running-operations-using-operationt) |\n[Handling failures](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#reporting-errors-requestfailedexception) |\n[Diagnostics](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md) |\n[Mocking](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#mocking) |\n[Client lifetime](https://devblogs.microsoft.com/azure-sdk/lifetime-management-and-thread-safety-guarantees-of-azure-sdk-net-clients/)\n<!-- CLIENT COMMON BAR -->\n\n## Examples\n\nThe Azure.Security.KeyVault.Administration package supports synchronous and asynchronous APIs.\n\nThe following section provides several code snippets using the `client` created above for either [access control](#create-keyvaultaccesscontrolclient) or [backup](#create-keyvaultbackupclient) clients, covering some of the most common Azure Key Vault access control related tasks:\n\n### Sync examples\n\n* Access control\n  * [Listing All Role Definitions](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/keyvault/Azure.Security.KeyVault.Administration/samples/Sample1_RbacHelloWorldSync.md#listing-all-role-definitions)\n  * [Listing All Role Assignments](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/keyvault/Azure.Security.KeyVault.Administration/samples/Sample1_RbacHelloWorldSync.md#listing-all-role-assignments)\n  * [Creating a Role Assignment](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/keyvault/Azure.Security.KeyVault.Administration/samples/Sample1_RbacHelloWorldSync.md#creating-a-role-assignment)\n  * [Getting a Role Assignment](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/keyvault/Azure.Security.KeyVault.Administration/samples/Sample1_RbacHelloWorldSync.md#getting-a-role-assignment)\n  * [Deleting a Role Assignment](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/keyvault/Azure.Security.KeyVault.Administration/samples/Sample1_RbacHelloWorldSync.md#deleting-a-role-assignment)\n* Backup and restore\n  * [Performing a full key backup](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/keyvault/Azure.Security.KeyVault.Administration/samples/Sample1_BackupHelloWorldSync.md#performing-a-full-key-backup)\n  * [Performing a full key restore](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/keyvault/Azure.Security.KeyVault.Administration/samples/Sample1_BackupHelloWorldSync.md#performing-a-full-key-restore)\n\n### Async examples\n\n* Access control\n  * [Listing All Role Definitions](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/keyvault/Azure.Security.KeyVault.Administration/samples/Sample1_RbacHelloWorldAsync.md#listing-all-role-definitions)\n  * [Listing All Role Assignments](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/keyvault/Azure.Security.KeyVault.Administration/samples/Sample1_RbacHelloWorldAsync.md#listing-all-role-assignments)\n  * [Creating a Role Assignment](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/keyvault/Azure.Security.KeyVault.Administration/samples/Sample1_RbacHelloWorldAsync.md#creating-a-role-assignment)\n  * [Getting a Role Assignment](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/keyvault/Azure.Security.KeyVault.Administration/samples/Sample1_RbacHelloWorldAsync.md#getting-a-role-assignment)\n  * [Deleting a Role Assignment](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/keyvault/Azure.Security.KeyVault.Administration/samples/Sample1_RbacHelloWorldAsync.md#deleting-a-role-assignment)\n* Backup and restore\n  * [Performing a full key backup](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/keyvault/Azure.Security.KeyVault.Administration/samples/Sample1_BackupHelloWorldAsync.md#performing-a-full-key-backup)\n  * [Performing a full key restore](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/keyvault/Azure.Security.KeyVault.Administration/samples/Sample1_BackupHelloWorldAsync.md#performing-a-full-key-restore)\n\n## Troubleshooting\n\nSee our [troubleshooting guide](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/keyvault/Azure.Security.KeyVault.Administration/TROUBLESHOOTING.md)\nfor details on how to diagnose various failure scenarios.\n\n### General\n\nWhen you interact with the Azure Key Vault Administration library using the .NET SDK, errors returned by the service correspond to the same HTTP status codes returned for [REST API][keyvault_rest] requests.\n\nFor example, if you try to retrieve a role assignment that doesn't exist in your Azure Key Vault, a `404` error is returned, indicating \"Not Found\".\n\n```C# Snippet:RoleAssignmentNotFound\ntry\n{\n    KeyVaultRoleAssignment roleAssignment = client.GetRoleAssignment(KeyVaultRoleScope.Global, \"example-name\");\n}\ncatch (RequestFailedException ex)\n{\n    Console.WriteLine(ex.ToString());\n}\n```\n\n```text\nAzure.RequestFailedException: Service request failed.\nStatus: 404 (Not Found)\n\nContent:\n{\"error\":{\"code\":\"RoleAssignmentNotFound\",\"message\":\"Requested role assignment not found (Activity ID: a67f09f4-b68e-11ea-bd6d-0242ac120006)\"}}\n\nHeaders:\nX-Content-Type-Options: REDACTED\nx-ms-request-id: a67f09f4-b68e-11ea-bd6d-0242ac120006\nContent-Length: 143\nContent-Type: application/json\n```\n\n### Setting up console logging\n\nThe simplest way to see the logs is to enable the console logging.\nTo create an Azure SDK log listener that outputs messages to console, use the `AzureEventSourceListener.CreateConsoleLogger` method.\n\n```c#\n// Setup a listener to monitor logged events.\nusing AzureEventSourceListener listener = AzureEventSourceListener.CreateConsoleLogger();\n```\n\nTo learn more about other logging mechanisms see [here][logging].\n\n## Next steps\n\nGet started with our [samples][admin_client_samples].\n\n## Contributing\n\nThis project welcomes contributions and suggestions.  Most contributions require\nyou to agree to a Contributor License Agreement (CLA) declaring that you have\nthe right to, and actually do, grant us the rights to use your contribution. For\ndetails, visit <https://cla.microsoft.com>.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct].\nFor more information see the [Code of Conduct FAQ][coc_faq]\nor contact opencode@microsoft.com with any\nadditional questions or comments.\n\n<!-- LINKS -->\n[access_control]: https://learn.microsoft.com/azure/key-vault/managed-hsm/access-control\n[access_policy]: https://learn.microsoft.com/azure/key-vault/general/assign-access-policy\n[rbac_guide]: https://learn.microsoft.com/azure/key-vault/general/rbac-guide\n[azure_cli]: https://learn.microsoft.com/cli/azure\n[azure_identity]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/identity/Azure.Identity\n[azure_sub]: https://azure.microsoft.com/free/dotnet/\n[best_practices]: https://learn.microsoft.com/azure/key-vault/managed-hsm/best-practices\n[built_in_roles]: https://learn.microsoft.com/azure/key-vault/managed-hsm/built-in-roles\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[managedhsm_docs]: https://learn.microsoft.com/azure/key-vault/managed-hsm/\n[keyvault_rest]: https://learn.microsoft.com/rest/api/keyvault/\n[admin_client_nuget_package]: https://www.nuget.org/packages?q=Azure.Security.KeyVault.Administration\n[admin_client_samples]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/keyvault/Azure.Security.KeyVault.Administration/samples\n[admin_client_src]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/keyvault/Azure.Security.KeyVault.Administration/src\n[nuget]: https://www.nuget.org/\n[DefaultAzureCredential]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md#defaultazurecredential\n[logging]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2Fsdk%2Ftables%2FAzure.Data.Tables%2FREADME.png)\n",
        "repo_name": "keyvault/Azure.Security.KeyVault.Administration",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/keyvault/Azure.Security.KeyVault.Administration",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Key Vault Certificate client library for .NET\n\nAzure Key Vault is a cloud service that provides secure storage and automated management of certificates used throughout a cloud application. Multiple certificates, and multiple versions of the same certificate, can be kept in the Azure Key Vault. Each certificate in the vault has a policy associated with it which controls the issuance and lifetime of the certificate, along with actions to be taken as certificates near expiry.\n\nThe Azure Key Vault certificates client library enables programmatically managing certificates, offering methods to create, update, list, and delete certificates, policies, issuers, and contacts. The library also supports managing pending certificate operations and management of deleted certificates.\n\n[Source code][certificate_client_src] | [Package (NuGet)][certificate_client_nuget_package] | [API reference documentation][API_reference] | [Product documentation][keyvault_docs] | [Samples][certificate_client_samples] | [Migration guide][migration_guide]\n\n## Getting started\n\n### Install the package\n\nInstall the Azure Key Vault certificates client library for .NET with [NuGet][nuget]:\n\n```dotnetcli\ndotnet add package Azure.Security.KeyVault.Certificates\n```\n\n### Prerequisites\n\n* An [Azure subscription][azure_sub].\n* An existing Azure Key Vault. If you need to create an Azure Key Vault, you can use the Azure Portal or [Azure CLI][azure_cli].\n* Authorization to an existing Azure Key Vault using either [RBAC][rbac_guide] (recommended) or [access control][access_policy].\n\nIf you use the Azure CLI, replace `<your-resource-group-name>` and `<your-key-vault-name>` with your own, unique names:\n\n```PowerShell\naz keyvault create --resource-group <your-resource-group-name> --name <your-key-vault-name>\n```\n\n### Authenticate the client\n\nIn order to interact with the Azure Key Vault service, you'll need to create an instance of the [CertificateClient][certificate_client_class] class. You need a **vault url**, which you may see as \"DNS Name\" in the portal,\nand credentials to instantiate a client object.\n\nThe examples shown below use a [`DefaultAzureCredential`][DefaultAzureCredential], which is appropriate for most scenarios including local development and production environments.\nAdditionally, we recommend using a managed identity for authentication in production environments.\nYou can find more information on different ways of authenticating and their corresponding credential types in the [Azure Identity][azure_identity] documentation.\n\nTo use the `DefaultAzureCredential` provider shown below,\nor other credential providers provided with the Azure SDK, you must first install the Azure.Identity package:\n\n```dotnetcli\ndotnet add package Azure.Identity\n```\n\n#### Create CertificateClient\n\nInstantiate a `DefaultAzureCredential` to pass to the client.\nThe same instance of a token credential can be used with multiple clients if they will be authenticating with the same identity.\n\n```C# Snippet:CreateCertificateClient\n// Create a new certificate client using the default credential from Azure.Identity using environment variables previously set,\n// including AZURE_CLIENT_ID, AZURE_CLIENT_SECRET, and AZURE_TENANT_ID.\nvar client = new CertificateClient(vaultUri: new Uri(vaultUrl), credential: new DefaultAzureCredential());\n```\n\n## Key concepts\n\n### KeyVaultCertificate\n\nA `KeyVaultCertificate` is the fundamental resource within Azure Key Vault. You'll use certificates to encrypt and verify encrypted or signed data.\n\n### CertificateClient\n\nWith a `CertificateClient` you can get certificates from the vault, create new certificates and\nnew versions of existing certificates, update certificate metadata, and delete certificates. You\ncan also manage certificate issuers, contacts, and management policies of certificates. This is\nillustrated in the examples below.\n\n### Thread safety\n\nWe guarantee that all client instance methods are thread-safe and independent of each other ([guideline](https://azure.github.io/azure-sdk/dotnet_introduction.html#dotnet-service-methods-thread-safety)). This ensures that the recommendation of reusing client instances is always safe, even across threads.\n\n### Additional concepts\n<!-- CLIENT COMMON BAR -->\n[Client options](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#configuring-service-clients-using-clientoptions) |\n[Accessing the response](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#accessing-http-response-details-using-responset) |\n[Long-running operations](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#consuming-long-running-operations-using-operationt) |\n[Handling failures](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#reporting-errors-requestfailedexception) |\n[Diagnostics](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md) |\n[Mocking](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#mocking) |\n[Client lifetime](https://devblogs.microsoft.com/azure-sdk/lifetime-management-and-thread-safety-guarantees-of-azure-sdk-net-clients/)\n<!-- CLIENT COMMON BAR -->\n\n## Examples\n\nThe Azure.Security.KeyVault.Certificates package supports synchronous and asynchronous APIs.\n\nThe following section provides several code snippets using the `client`[created above](#create-certificateclient), covering some of the most common Azure Key Vault certificate service related tasks:\n\n### Sync examples\n\n* [Create a certificate](#create-a-certificate)\n* [Retrieve a certificate](#retrieve-a-certificate)\n* [Update an existing certificate](#update-an-existing-certificate)\n* [List certificates](#list-certificates)\n* [Delete a certificate](#delete-a-certificate)\n\n### Async examples\n\n* [Create a certificate asynchronously](#create-a-certificate-asynchronously)\n* [List certificates asynchronously](#list-certificates-asynchronously)\n* [Delete a certificate asynchronously](#delete-a-certificate-asynchronously)\n\n### Create a certificate\n\n`StartCreateCertificate` creates a certificate to be stored in the Azure Key Vault. If a certificate with\nthe same name already exists, then a new version of the certificate is created.\nWhen creating the certificate the user can specify the policy which controls the certificate lifetime. If no policy is specified the default policy will be used. The `StartCreateCertificate` operation returns a `CertificateOperation`. The following example creates a self-signed certificate with the default policy.\n\n```C# Snippet:CreateCertificate\n// Create a certificate. This starts a long running operation to create and sign the certificate.\nCertificateOperation operation = client.StartCreateCertificate(\"MyCertificate\", CertificatePolicy.Default);\n\n// You can await the completion of the create certificate operation.\n// You should run UpdateStatus in another thread or do other work like pumping messages between calls.\nwhile (!operation.HasCompleted)\n{\n    Thread.Sleep(2000);\n\n    operation.UpdateStatus();\n}\n\nKeyVaultCertificateWithPolicy certificate = operation.Value;\n```\n\n> NOTE: Depending on the certificate issuer and validation methods, certificate creation and signing can take an indeterminate amount of time. Users should only wait on certificate operations when the operation can be reasonably completed in the scope of the application, such as with self-signed certificates or issuers with well known response times.\n\n### Retrieve a certificate\n\n`GetCertificate` retrieves the latest version of a certificate stored in the Azure Key Vault along with its `CertificatePolicy`.\n\n```C# Snippet:RetrieveCertificate\nKeyVaultCertificateWithPolicy certificateWithPolicy = client.GetCertificate(\"MyCertificate\");\n```\n\n`GetCertificateVersion` retrieves a specific version of a certificate in the vault.\n\n```C# Snippet:GetCertificate\nKeyVaultCertificate certificate = client.GetCertificateVersion(certificateWithPolicy.Name, certificateWithPolicy.Properties.Version);\n```\n\n### Update an existing certificate\n\n`UpdateCertificate` updates a certificate stored in the Azure Key Vault.\n\n```C# Snippet:UpdateCertificate\nCertificateProperties certificateProperties = new CertificateProperties(certificate.Id);\ncertificateProperties.Tags[\"key1\"] = \"value1\";\n\nKeyVaultCertificate updated = client.UpdateCertificateProperties(certificateProperties);\n```\n\n### List certificates\n\n`GetCertificates` enumerates the certificates in the vault, returning select properties of the\ncertificate. Sensitive fields of the certificate will not be returned. This operation\nrequires the certificates/list permission.\n\n```C# Snippet:ListCertificates\nPageable<CertificateProperties> allCertificates = client.GetPropertiesOfCertificates();\n\nforeach (CertificateProperties certificateProperties in allCertificates)\n{\n    Console.WriteLine(certificateProperties.Name);\n}\n```\n\n### Delete a certificate\n\n`DeleteCertificate` deletes all versions of a certificate stored in the Azure Key Vault. When [soft-delete][soft_delete]\nis not enabled for the Azure Key Vault, this operation permanently deletes the certificate. If soft delete is enabled the certificate is marked for deletion and can be optionally purged or recovered up until its scheduled purge date.\n\n```C# Snippet:DeleteAndPurgeCertificate\nDeleteCertificateOperation operation = client.StartDeleteCertificate(\"MyCertificate\");\n\n// You only need to wait for completion if you want to purge or recover the certificate.\n// You should call `UpdateStatus` in another thread or after doing additional work like pumping messages.\nwhile (!operation.HasCompleted)\n{\n    Thread.Sleep(2000);\n\n    operation.UpdateStatus();\n}\n\nDeletedCertificate certificate = operation.Value;\nclient.PurgeDeletedCertificate(certificate.Name);\n```\n\n### Create a certificate asynchronously\n\nThe asynchronous APIs are identical to their synchronous counterparts, but return with the typical \"Async\" suffix for asynchronous methods and return a `Task`.\n\nThis example creates a certificate in the Azure Key Vault with the specified optional arguments.\n\n```C# Snippet:CreateCertificateAsync\n// Create a certificate. This starts a long running operation to create and sign the certificate.\nCertificateOperation operation = await client.StartCreateCertificateAsync(\"MyCertificate\", CertificatePolicy.Default);\n\n// You can await the completion of the create certificate operation.\nKeyVaultCertificateWithPolicy certificate = await operation.WaitForCompletionAsync();\n```\n\n### List certificates asynchronously\n\nListing certificate does not rely on awaiting the `GetPropertiesOfCertificatesAsync` method, but returns an `AsyncPageable<CertificateProperties>` that you can use with the `await foreach` statement:\n\n```C# Snippet:ListCertificatesAsync\nAsyncPageable<CertificateProperties> allCertificates = client.GetPropertiesOfCertificatesAsync();\n\nawait foreach (CertificateProperties certificateProperties in allCertificates)\n{\n    Console.WriteLine(certificateProperties.Name);\n}\n```\n\n### Delete a certificate asynchronously\n\nWhen deleting a certificate asynchronously before you purge it, you can await the `WaitForCompletionAsync` method on the operation.\nBy default, this loops indefinitely but you can cancel it by passing a `CancellationToken`.\n\n```C# Snippet:DeleteAndPurgeCertificateAsync\nDeleteCertificateOperation operation = await client.StartDeleteCertificateAsync(\"MyCertificate\");\n\n// You only need to wait for completion if you want to purge or recover the certificate.\nawait operation.WaitForCompletionAsync();\n\nDeletedCertificate certificate = operation.Value;\nawait client.PurgeDeletedCertificateAsync(certificate.Name);\n```\n\n## Troubleshooting\n\nSee our [troubleshooting guide](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/keyvault/Azure.Security.KeyVault.Certificates/TROUBLESHOOTING.md)\nfor details on how to diagnose various failure scenarios.\n\n### General\n\nWhen you interact with the Azure Key Vault certificates client library using the .NET SDK, errors returned by the service correspond to the same HTTP status codes returned for [REST API][keyvault_rest] requests.\n\nFor example, if you try to retrieve a Key that doesn't exist in your Azure Key Vault, a `404` error is returned, indicating `Not Found`.\n\n```C# Snippet:CertificateNotFound\ntry\n{\n    KeyVaultCertificateWithPolicy certificateWithPolicy = client.GetCertificate(\"SomeCertificate\");\n}\ncatch (RequestFailedException ex)\n{\n    Console.WriteLine(ex.ToString());\n}\n```\n\nYou will notice that additional information is logged, like the Client Request ID of the operation.\n\n```text\nMessage:\n    Azure.RequestFailedException : Service request failed.\n    Status: 404 (Not Found)\nContent:\n    {\"error\":{\"code\":\"CertificateNotFound\",\"message\":\"Certificate not found: MyCertificate\"}}\n\nHeaders:\n    Cache-Control: no-cache\n    Pragma: no-cache\n    Server: Microsoft-IIS/10.0\n    x-ms-keyvault-region: westus\n    x-ms-request-id: 625f870e-10ea-41e5-8380-282e5cf768f2\n    x-ms-keyvault-service-version: 1.1.0.866\n    x-ms-keyvault-network-info: addr=131.107.174.199;act_addr_fam=InterNetwork;\n    X-AspNet-Version: 4.0.30319\n    X-Powered-By: ASP.NET\n    Strict-Transport-Security: max-age=31536000;includeSubDomains\n    X-Content-Type-Options: nosniff\n    Date: Tue, 18 Jun 2019 16:02:11 GMT\n    Content-Length: 75\n    Content-Type: application/json; charset=utf-8\n    Expires: -1\n```\n\n## Next steps\n\nSeveral Azure Key Vault certificates client library samples are available to you in this GitHub repository. These samples provide example code for additional scenarios commonly encountered while working with Azure Key Vault:\n\n* [Sample1_HelloWorld.md][hello_world_sample] - for working with Azure Key Vault certificates, including:\n  * Create a certificate\n  * Get an existing certificate\n  * Update an existing certificate\n  * Delete a certificate\n\n* [Sample2_GetCertificates.md][get_cetificates_sample] - Example code for working with Azure Key Vault certificates, including:\n  * Create certificates\n  * List all certificates in the Key Vault\n  * List versions of a specified certificate\n  * Delete certificates from the Key Vault\n  * List deleted certificates in the Key Vault\n\n### Additional Documentation\n\n* For more extensive documentation on Azure Key Vault, see the [API reference documentation][keyvault_rest].\n* For Secrets client library see [Secrets client library][secrets_client_library].\n* For Keys client library see [Keys client library][keys_client_library].\n\n## Contributing\n\nSee the [CONTRIBUTING.md][contributing] for details on building, testing, and contributing to these libraries.\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct]. For more information see the [Code of Conduct FAQ][coc_faq] or contact opencode@microsoft.com with any additional questions or comments.\n\n<!-- LINKS -->\n[certificate_client_src]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/keyvault/Azure.Security.KeyVault.Certificates/src\n[certificate_client_nuget_package]: https://www.nuget.org/packages/Azure.Security.KeyVault.Certificates/\n[API_reference]: https://learn.microsoft.com/dotnet/api/azure.security.keyvault.certificates\n[keyvault_docs]: https://learn.microsoft.com/azure/key-vault/\n[certificate_client_samples]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/keyvault/Azure.Security.KeyVault.Certificates/samples\n[nuget]: https://www.nuget.org/\n[azure_sub]: https://azure.microsoft.com/free/dotnet/\n[azure_cli]: https://learn.microsoft.com/cli/azure\n[certificate_client_class]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/keyvault/Azure.Security.KeyVault.Certificates/src/CertificateClient.cs\n[soft_delete]: https://learn.microsoft.com/azure/key-vault/general/soft-delete-overview\n[azure_identity]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/identity/Azure.Identity#defaultazurecredential\n[keyvault_rest]: https://learn.microsoft.com/rest/api/keyvault/\n[secrets_client_library]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/keyvault/Azure.Security.KeyVault.Secrets\n[keys_client_library]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/keyvault/Azure.Security.KeyVault.Keys\n[hello_world_sample]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/keyvault/Azure.Security.KeyVault.Certificates/samples/Sample1_HelloWorld.md\n[get_cetificates_sample]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/keyvault/Azure.Security.KeyVault.Certificates/samples/Sample2_GetCertificates.md\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[DefaultAzureCredential]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md#defaultazurecredential\n[contributing]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/keyvault/CONTRIBUTING.md\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[migration_guide]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/keyvault/Azure.Security.KeyVault.Certificates/MigrationGuide.md\n[access_policy]: https://learn.microsoft.com/azure/key-vault/general/assign-access-policy\n[rbac_guide]: https://learn.microsoft.com/azure/key-vault/general/rbac-guide\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2Fsdk%2Fkeyvault%2FAzure.Security.KeyVault.Certificates%2FREADME.png)\n",
        "repo_name": "keyvault/Azure.Security.KeyVault.Certificates",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/keyvault/Azure.Security.KeyVault.Certificates",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Key Vault key client library for .NET\n\nAzure Key Vault is a cloud service that provides secure storage of keys for encrypting your data.\nMultiple keys, and multiple versions of the same key, can be kept in the Azure Key Vault.\nCryptographic keys in Azure Key Vault are represented as [JSON Web Key (JWK)][JWK] objects.\n\nAzure Key Vault Managed HSM is a fully-managed, highly-available, single-tenant, standards-compliant cloud service that enables\nyou to safeguard cryptographic keys for your cloud applications using FIPS 140-2 Level 3 validated HSMs.\n\nThe Azure Key Vault keys library client supports RSA keys and Elliptic Curve (EC) keys, each with corresponding support in hardware security modules (HSM). It offers operations to create, retrieve, update, delete, purge, backup, restore, and list the keys and its versions.\n\n[Source code][key_client_src] | [Package (NuGet)][key_client_nuget_package] | [API reference documentation][API_reference] | [Product documentation][keyvault_docs] | [Samples][key_client_samples] | [Migration guide][migration_guide]\n\n## Getting started\n\n### Install the package\n\nInstall the Azure Key Vault keys client library for .NET with [NuGet][nuget]:\n\n```dotnetcli\ndotnet add package Azure.Security.KeyVault.Keys\n```\n\n### Prerequisites\n\n* An [Azure subscription][azure_sub].\n* An existing Azure Key Vault. If you need to create an Azure Key Vault, you can use the Azure Portal or [Azure CLI][azure_cli].\n* Authorization to an existing Azure Key Vault using either [RBAC][rbac_guide] (recommended) or [access control][access_policy].\n\nIf you are creating a standard Key Vault resource, run the following CLI command replacing `<your-resource-group-name>` and `<your-key-vault-name>` with your own, unique names:\n\n```PowerShell\naz keyvault create --resource-group <your-resource-group-name> --name <your-key-vault-name>\n```\n\nIf you are creating a Managed HSM resource, run the following CLI command:\n\n```PowerShell\naz keyvault create --hsm-name <your-key-vault-name> --resource-group <your-resource-group-name> --administrators <your-user-object-id> --location <your-azure-location>\n```\n\nTo get `<your-user-object-id>` you can run the following CLI command:\n\n```PowerShell\naz ad user show --id <your-user-principal> --query id\n```\n\n### Authenticate the client\n\nIn order to interact with the Azure Key Vault service, you'll need to create an instance of the [KeyClient][key_client_class] class. You need a **vault url**, which you may see as \"DNS Name\" in the portal,\nand credentials to instantiate a client object.\n\nThe examples shown below use a [`DefaultAzureCredential`][DefaultAzureCredential], which is appropriate for most scenarios including local development and production environments utilizing managed identity authentication.\nAdditionally, we recommend using a managed identity for authentication in production environments.\nYou can find more information on different ways of authenticating and their corresponding credential types in the [Azure Identity][azure_identity] documentation.\n\nTo use the `DefaultAzureCredential` provider shown below,\nor other credential providers provided with the Azure SDK, you must first install the Azure.Identity package:\n\n```dotnetcli\ndotnet add package Azure.Identity\n```\n\n#### Activate your managed HSM\n\nThis section only applies if you are creating a Managed HSM. All data plane commands are disabled until the HSM is activated. You will not be able to create keys or assign roles.\nOnly the designated administrators that were assigned during the create command can activate the HSM. To activate the HSM you must download the security domain.\n\nTo activate your HSM you need:\n\n* Minimum 3 RSA key-pairs (maximum 10)\n* Specify minimum number of keys required to decrypt the security domain (quorum)\n\nTo activate the HSM you send at least 3 (maximum 10) RSA public keys to the HSM. The HSM encrypts the security domain with these keys and sends it back.\nOnce this security domain is successfully downloaded, your HSM is ready to use.\nYou also need to specify quorum, which is the minimum number of private keys required to decrypt the security domain.\n\nThe example below shows how to use openssl to generate 3 self-signed certificate.\n\n```PowerShell\nopenssl req -newkey rsa:2048 -nodes -keyout cert_0.key -x509 -days 365 -out cert_0.cer\nopenssl req -newkey rsa:2048 -nodes -keyout cert_1.key -x509 -days 365 -out cert_1.cer\nopenssl req -newkey rsa:2048 -nodes -keyout cert_2.key -x509 -days 365 -out cert_2.cer\n```\n\nUse the `az keyvault security-domain download` command to download the security domain and activate your managed HSM.\nThe example below uses 3 RSA key pairs (only public keys are needed for this command) and sets the quorum to 2.\n\n```PowerShell\naz keyvault security-domain download --hsm-name <your-key-vault-name> --sd-wrapping-keys ./certs/cert_0.cer ./certs/cert_1.cer ./certs/cert_2.cer --sd-quorum 2 --security-domain-file ContosoMHSM-SD.json\n```\n\n#### Create KeyClient\n\nInstantiate a `DefaultAzureCredential` to pass to the client.\nThe same instance of a token credential can be used with multiple clients if they will be authenticating with the same identity.\n\n```C# Snippet:CreateKeyClient\n// Create a new key client using the default credential from Azure.Identity using environment variables previously set,\n// including AZURE_CLIENT_ID, AZURE_CLIENT_SECRET, and AZURE_TENANT_ID.\nvar client = new KeyClient(vaultUri: new Uri(vaultUrl), credential: new DefaultAzureCredential());\n\n// Create a new key using the key client.\nKeyVaultKey key = client.CreateKey(\"key-name\", KeyType.Rsa);\n\n// Retrieve a key using the key client.\nkey = client.GetKey(\"key-name\");\n```\n\n#### Create CryptographyClient\n\nOnce you've created a `KeyVaultKey` in the Azure Key Vault, you can also create the [CryptographyClient][crypto_client_class]:\n\n```C# Snippet:CreateCryptographyClient\n// Create a new cryptography client using the same Key Vault or Managed HSM endpoint, service version,\n// and options as the KeyClient created earlier.\nCryptographyClient cryptoClient = client.GetCryptographyClient(key.Name, key.Properties.Version);\n```\n\n## Key concepts\n\n### KeyVaultKey\n\nAzure Key Vault supports multiple key types and algorithms, and enables the use of hardware security modules (HSM) for high value keys.\n\n### KeyClient\n\nA `KeyClient` providing both synchronous and asynchronous operations exists in the SDK allowing for selection of a client based on an application's use case. Once you've initialized a `KeyClient`, you can interact with the primary resource types in Azure Key Vault.\n\n### CryptographyClient\n\nA `CryptographyClient` providing both synchronous and asynchronous operations exists in the SDK allowing for selection of a client based on an application's use case. Once you've initialized a `CryptographyClient`, you can use it to perform cryptographic operations with keys stored in Azure Key Vault.\n\n### Thread safety\n\nWe guarantee that all client instance methods are thread-safe and independent of each other ([guideline](https://azure.github.io/azure-sdk/dotnet_introduction.html#dotnet-service-methods-thread-safety)). This ensures that the recommendation of reusing client instances is always safe, even across threads.\n\n### Additional concepts\n<!-- CLIENT COMMON BAR -->\n[Client options](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#configuring-service-clients-using-clientoptions) |\n[Accessing the response](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#accessing-http-response-details-using-responset) |\n[Long-running operations](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#consuming-long-running-operations-using-operationt) |\n[Handling failures](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#reporting-errors-requestfailedexception) |\n[Diagnostics](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md) |\n[Mocking](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#mocking) |\n[Client lifetime](https://devblogs.microsoft.com/azure-sdk/lifetime-management-and-thread-safety-guarantees-of-azure-sdk-net-clients/)\n<!-- CLIENT COMMON BAR -->\n\n## Examples\n\nThe Azure.Security.KeyVault.Keys package supports synchronous and asynchronous APIs.\n\nThe following section provides several code snippets using the `client` [created above](#create-keyclient), covering some of the most common Azure Key Vault key service related tasks:\n\n### Sync examples\n\n* [Create a key](#create-a-key)\n* [Retrieve a key](#retrieve-a-key)\n* [Update an existing key](#update-an-existing-key)\n* [Delete a key](#delete-a-key)\n* [Delete and purge a key](#delete-and-purge-a-key)\n* [List keys](#list-keys)\n* [Encrypt and Decrypt](#encrypt-and-decrypt)\n\n### Async examples\n\n* [Create a key asynchronously](#create-a-key-asynchronously)\n* [List keys asynchronously](#list-keys-asynchronously)\n* [Delete a key asynchronously](#delete-a-key-asynchronously)\n\n### Create a key\n\nCreate a key to be stored in the Azure Key Vault. If a key with the same name already exists, then a new version of the key is created.\n\n```C# Snippet:CreateKey\n// Create a key. Note that you can specify the type of key\n// i.e. Elliptic curve, Hardware Elliptic Curve, RSA\nKeyVaultKey key = client.CreateKey(\"key-name\", KeyType.Rsa);\n\nConsole.WriteLine(key.Name);\nConsole.WriteLine(key.KeyType);\n\n// Create a software RSA key\nvar rsaCreateKey = new CreateRsaKeyOptions(\"rsa-key-name\", hardwareProtected: false);\nKeyVaultKey rsaKey = client.CreateRsaKey(rsaCreateKey);\n\nConsole.WriteLine(rsaKey.Name);\nConsole.WriteLine(rsaKey.KeyType);\n\n// Create a hardware Elliptic Curve key\n// Because only premium Azure Key Vault supports HSM backed keys , please ensure your Azure Key Vault\n// SKU is premium when you set \"hardwareProtected\" value to true\nvar echsmkey = new CreateEcKeyOptions(\"ec-key-name\", hardwareProtected: true);\nKeyVaultKey ecKey = client.CreateEcKey(echsmkey);\n\nConsole.WriteLine(ecKey.Name);\nConsole.WriteLine(ecKey.KeyType);\n```\n\n### Retrieve a key\n\n`GetKey` retrieves a key previously stored in the Azure Key Vault.\n\n```C# Snippet:RetrieveKey\nKeyVaultKey key = client.GetKey(\"key-name\");\n\nConsole.WriteLine(key.Name);\nConsole.WriteLine(key.KeyType);\n```\n\n### Update an existing key\n\n`UpdateKeyProperties` updates a key previously stored in the Azure Key Vault.\n\n```C# Snippet:UpdateKey\nKeyVaultKey key = client.CreateKey(\"key-name\", KeyType.Rsa);\n\n// You can specify additional application-specific metadata in the form of tags.\nkey.Properties.Tags[\"foo\"] = \"updated tag\";\n\nKeyVaultKey updatedKey = client.UpdateKeyProperties(key.Properties);\n\nConsole.WriteLine(updatedKey.Name);\nConsole.WriteLine(updatedKey.Properties.Version);\nConsole.WriteLine(updatedKey.Properties.UpdatedOn);\n```\n\n### Delete a key\n\n`StartDeleteKey` starts a long-running operation to delete a key previously stored in the Azure Key Vault.\nYou can retrieve the key immediately without waiting for the operation to complete.\nWhen [soft-delete][soft_delete] is not enabled for the Azure Key Vault, this operation permanently deletes the key.\n\n```C# Snippet:DeleteKey\nDeleteKeyOperation operation = client.StartDeleteKey(\"key-name\");\n\nDeletedKey key = operation.Value;\nConsole.WriteLine(key.Name);\nConsole.WriteLine(key.DeletedOn);\n```\n\n### Delete and purge a key\n\nYou will need to wait for the long-running operation to complete before trying to purge or recover the key.\n\n```C# Snippet:DeleteAndPurgeKey\nDeleteKeyOperation operation = client.StartDeleteKey(\"key-name\");\n\n// You only need to wait for completion if you want to purge or recover the key.\nwhile (!operation.HasCompleted)\n{\n    Thread.Sleep(2000);\n\n    operation.UpdateStatus();\n}\n\nDeletedKey key = operation.Value;\nclient.PurgeDeletedKey(key.Name);\n```\n\n### List Keys\n\nThis example lists all the keys in the specified Azure Key Vault.\n\n```C# Snippet:ListKeys\nPageable<KeyProperties> allKeys = client.GetPropertiesOfKeys();\n\nforeach (KeyProperties keyProperties in allKeys)\n{\n    Console.WriteLine(keyProperties.Name);\n}\n```\n\n### Encrypt and Decrypt\n\nThis example creates a `CryptographyClient` and uses it to encrypt and decrypt with a key in Azure Key Vault.\n\n```C# Snippet:EncryptDecrypt\n// Create a new cryptography client using the same Key Vault or Managed HSM endpoint, service version,\n// and options as the KeyClient created earlier.\nvar cryptoClient = client.GetCryptographyClient(key.Name, key.Properties.Version);\n\nbyte[] plaintext = Encoding.UTF8.GetBytes(\"A single block of plaintext\");\n\n// encrypt the data using the algorithm RSAOAEP\nEncryptResult encryptResult = cryptoClient.Encrypt(EncryptionAlgorithm.RsaOaep, plaintext);\n\n// decrypt the encrypted data.\nDecryptResult decryptResult = cryptoClient.Decrypt(EncryptionAlgorithm.RsaOaep, encryptResult.Ciphertext);\n```\n\n### Create a key asynchronously\n\nThe asynchronous APIs are identical to their synchronous counterparts, but return with the typical \"Async\" suffix for asynchronous methods and return a Task.\n\n```C# Snippet:CreateKeyAsync\n// Create a key of any type\nKeyVaultKey key = await client.CreateKeyAsync(\"key-name\", KeyType.Rsa);\n\nConsole.WriteLine(key.Name);\nConsole.WriteLine(key.KeyType);\n\n// Create a software RSA key\nvar rsaCreateKey = new CreateRsaKeyOptions(\"rsa-key-name\", hardwareProtected: false);\nKeyVaultKey rsaKey = await client.CreateRsaKeyAsync(rsaCreateKey);\n\nConsole.WriteLine(rsaKey.Name);\nConsole.WriteLine(rsaKey.KeyType);\n\n// Create a hardware Elliptic Curve key\n// Because only premium Azure Key Vault supports HSM backed keys , please ensure your Azure Key Vault\n// SKU is premium when you set \"hardwareProtected\" value to true\nvar echsmkey = new CreateEcKeyOptions(\"ec-key-name\", hardwareProtected: true);\nKeyVaultKey ecKey = await client.CreateEcKeyAsync(echsmkey);\n\nConsole.WriteLine(ecKey.Name);\nConsole.WriteLine(ecKey.KeyType);\n```\n\n### List keys asynchronously\n\nListing keys does not rely on awaiting the `GetPropertiesOfKeysAsync` method, but returns an `AsyncPageable<KeyProperties>` that you can use with the `await foreach` statement:\n\n```C# Snippet:ListKeysAsync\nAsyncPageable<KeyProperties> allKeys = client.GetPropertiesOfKeysAsync();\n\nawait foreach (KeyProperties keyProperties in allKeys)\n{\n    Console.WriteLine(keyProperties.Name);\n}\n```\n\n### Delete a key asynchronously\n\nWhen deleting a key asynchronously before you purge it, you can await the `WaitForCompletionAsync` method on the operation.\nBy default, this loops indefinitely but you can cancel it by passing a `CancellationToken`.\n\n```C# Snippet:DeleteAndPurgeKeyAsync\nDeleteKeyOperation operation = await client.StartDeleteKeyAsync(\"key-name\");\n\n// You only need to wait for completion if you want to purge or recover the key.\nawait operation.WaitForCompletionAsync();\n\nDeletedKey key = operation.Value;\nawait client.PurgeDeletedKeyAsync(key.Name);\n```\n\n## Troubleshooting\n\nSee our [troubleshooting guide](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/keyvault/Azure.Security.KeyVault.Keys/TROUBLESHOOTING.md)\nfor details on how to diagnose various failure scenarios.\n\n### General\n\nWhen you interact with the Azure Key Vault key client library using the .NET SDK, errors returned by the service correspond to the same HTTP status codes returned for [REST API][keyvault_rest] requests.\n\nFor example, if you try to retrieve a key that doesn't exist in your Azure Key Vault, a `404` error is returned, indicating \"Not Found\".\n\n```C# Snippet:KeyNotFound\ntry\n{\n    KeyVaultKey key = client.GetKey(\"some_key\");\n}\ncatch (RequestFailedException ex)\n{\n    Console.WriteLine(ex.ToString());\n}\n```\n\nYou will notice that additional information is logged, like the client request ID of the operation.\n\n```text\nMessage:\n    Azure.RequestFailedException : Service request failed.\n    Status: 404 (Not Found)\nContent:\n    {\"error\":{\"code\":\"KeyNotFound\",\"message\":\"Key not found: some_key\"}}\n\nHeaders:\n    Cache-Control: no-cache\n    Pragma: no-cache\n    Server: Microsoft-IIS/10.0\n    x-ms-keyvault-region: westus\n    x-ms-request-id: 625f870e-10ea-41e5-8380-282e5cf768f2\n    x-ms-keyvault-service-version: 1.1.0.866\n    x-ms-keyvault-network-info: addr=131.107.174.199;act_addr_fam=InterNetwork;\n    X-AspNet-Version: 4.0.30319\n    X-Powered-By: ASP.NET\n    Strict-Transport-Security: max-age=31536000;includeSubDomains\n    X-Content-Type-Options: nosniff\n    Date: Tue, 18 Jun 2019 16:02:11 GMT\n    Content-Length: 75\n    Content-Type: application/json; charset=utf-8\n    Expires: -1\n```\n\n## Next steps\n\nSeveral Azure Key Vault keys client library samples are available to you in this GitHub repository. These samples provide example code for additional scenarios commonly encountered while working with Azure Key Vault:\n\n* [Sample1_HelloWorld.md][hello_world_sample] - for working with Azure Key Vault, including:\n  * Create a key\n  * Get an existing key\n  * Update an existing key\n  * Delete a key\n\n* [Sample2_BackupAndRestore.md][backup_and_restore_sample] - Contains the code snippets working with Azure Key Vault keys, including:\n  * Backup and recover a key\n\n* [Sample3_GetKeys.md][get_keys_sample] - Example code for working with Azure Key Vault keys, including:\n  * Create keys\n  * List all keys in the Key Vault\n  * Update keys in the Key Vault\n  * List versions of a specified key\n  * Delete keys from the Key Vault\n  * List deleted keys in the Key Vault\n\n* [Sample4_EncryptDecrypt.md][encrypt_decrypt_sample] - Example code for performing cryptographic operations with Azure Key Vault keys, including:\n  * Encrypt and Decrypt data with the CryptographyClient\n\n* [Sample5_SignVerify.md][sign_verify_sample] - Example code for working with Azure Key Vault keys, including:\n  * Sign a precalculated digest and verify the signature with Sign and Verify\n  * Sign raw data and verify the signature with SignData and VerifyData\n\n* [Sample6_WrapUnwrap.md][wrap_unwrap_sample] - Example code for working with Azure Key Vault keys, including:\n  * Wrap and Unwrap a symmetric key\n\n### Additional Documentation\n\n* For more extensive documentation on Azure Key Vault, see the [API reference documentation][keyvault_rest].\n* For Secrets client library see [Secrets client library][secrets_client_library].\n* For Certificates client library see [Certificates client library][certificates_client_library].\n\n## Contributing\n\nSee the [CONTRIBUTING.md][contributing] for details on building, testing, and contributing to these libraries.\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA)\ndeclaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment).\nSimply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct].\nFor more information see the [Code of Conduct FAQ][coc_faq] or contact opencode@microsoft.com with any additional questions or comments.\n\n<!-- LINKS -->\n[API_reference]: https://learn.microsoft.com/dotnet/api/azure.security.keyvault.keys\n[azure_cli]: https://learn.microsoft.com/cli/azure\n[azure_identity]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/identity/Azure.Identity\n[azure_sub]: https://azure.microsoft.com/free/dotnet/\n[backup_and_restore_sample]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/keyvault/Azure.Security.KeyVault.Keys/samples/Sample2_BackupAndRestore.md\n[certificates_client_library]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/keyvault/Azure.Security.KeyVault.Certificates\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[get_keys_sample]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/keyvault/Azure.Security.KeyVault.Keys/samples/Sample3_GetKeys.md\n[encrypt_decrypt_sample]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/keyvault/Azure.Security.KeyVault.Keys/samples/Sample4_EncryptDecrypt.md\n[sign_verify_sample]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/keyvault/Azure.Security.KeyVault.Keys/samples/Sample5_SignVerify.md\n[wrap_unwrap_sample]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/keyvault/Azure.Security.KeyVault.Keys/samples/Sample6_WrapUnwrap.md\n[hello_world_sample]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/keyvault/Azure.Security.KeyVault.Keys/samples/Sample1_HelloWorld.md\n[key_client_class]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/keyvault/Azure.Security.KeyVault.Keys/src/KeyClient.cs\n[crypto_client_class]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/keyvault/Azure.Security.KeyVault.Keys/src/Cryptography/CryptographyClient.cs\n[key_client_nuget_package]: https://www.nuget.org/packages/Azure.Security.KeyVault.Keys/\n[key_client_samples]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/keyvault/Azure.Security.KeyVault.Keys/samples\n[key_client_src]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/keyvault/Azure.Security.KeyVault.Keys/src\n[keyvault_docs]: https://learn.microsoft.com/azure/key-vault/\n[keyvault_rest]: https://learn.microsoft.com/rest/api/keyvault/\n[JWK]: https://tools.ietf.org/html/rfc7517\n[nuget]: https://www.nuget.org/\n[secrets_client_library]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/keyvault/Azure.Security.KeyVault.Secrets\n[soft_delete]: https://learn.microsoft.com/azure/key-vault/general/soft-delete-overview\n[DefaultAzureCredential]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md#defaultazurecredential\n[contributing]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/keyvault/CONTRIBUTING.md\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[migration_guide]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/keyvault/Azure.Security.KeyVault.Keys/MigrationGuide.md\n[access_policy]: https://learn.microsoft.com/azure/key-vault/general/assign-access-policy\n[rbac_guide]: https://learn.microsoft.com/azure/key-vault/general/rbac-guide\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2Fsdk%2Fkeyvault%2FAzure.Security.KeyVault.Keys%2FREADME.png)\n",
        "repo_name": "keyvault/Azure.Security.KeyVault.Keys",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/keyvault/Azure.Security.KeyVault.Keys",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Key Vault secret client library for .NET\n\nAzure Key Vault is a cloud service that provides a secure storage of secrets, such as passwords and database connection strings.\n\nThe Azure Key Vault secrets client library allows you to securely store and control the access to tokens, passwords, API keys, and other secrets. This library offers operations to create, retrieve, update, delete, purge, backup, restore, and list the secrets and its versions.\n\n[Source code][secret_client_src] | [Package (NuGet)][secret_client_nuget_package] | [API reference documentation][API_reference] | [Product documentation][keyvault_docs] | [Samples][secret_client_samples] | [Migration guide][migration_guide]\n\n## Getting started\n\n### Install the package\n\nInstall the Azure Key Vault secrets client library for .NET with [NuGet][nuget]:\n\n```dotnetcli\ndotnet add package Azure.Security.KeyVault.Secrets\n```\n\n### Prerequisites\n\n* An [Azure subscription][azure_sub].\n* An existing Azure Key Vault. If you need to create an Azure Key Vault, you can use the Azure Portal or [Azure CLI][azure_cli].\n* Authorization to an existing Azure Key Vault using either [RBAC][rbac_guide] (recommended) or [access control][access_policy].\n\nIf you use the Azure CLI, replace `<your-resource-group-name>` and `<your-key-vault-name>` with your own, unique names:\n\n```PowerShell\naz keyvault create --resource-group <your-resource-group-name> --name <your-key-vault-name>\n```\n\n### Authenticate the client\n\nIn order to interact with the Azure Key Vault service, you'll need to create an instance of the [SecretClient][secret_client_class] class. You need a **vault url**, which you may see as \"DNS Name\" in the portal,\nand credentials to instantiate a client object.\n\nThe examples shown below use a [`DefaultAzureCredential`][DefaultAzureCredential], which is appropriate for most scenarios including local development and production environments.\nAdditionally, we recommend using a managed identity for authentication in production environments.\nYou can find more information on different ways of authenticating and their corresponding credential types in the [Azure Identity][azure_identity] documentation.\n\nTo use the `DefaultAzureCredential` provider shown below,\nor other credential providers provided with the Azure SDK, you must first install the Azure.Identity package:\n\n```dotnetcli\ndotnet add package Azure.Identity\n```\n\nInstantiate a `DefaultAzureCredential` to pass to the client.\nThe same instance of a token credential can be used with multiple clients if they will be authenticating with the same identity.\n\n```C# Snippet:CreateSecretClient\n// Create a new secret client using the default credential from Azure.Identity using environment variables previously set,\n// including AZURE_CLIENT_ID, AZURE_CLIENT_SECRET, and AZURE_TENANT_ID.\nvar client = new SecretClient(vaultUri: new Uri(vaultUrl), credential: new DefaultAzureCredential());\n\n// Create a new secret using the secret client.\nKeyVaultSecret secret = client.SetSecret(\"secret-name\", \"secret-value\");\n\n// Retrieve a secret using the secret client.\nsecret = client.GetSecret(\"secret-name\");\n```\n\n## Key concepts\n\n### KeyVaultSecret\n\nA `KeyVaultSecret` is the fundamental resource within Azure Key Vault. From a developer's perspective, Azure Key Vault APIs accept and return secret values as strings.\n\n### SecretClient\n\nA `SecretClient` provides both synchronous and asynchronous operations in the SDK allowing for selection of a client based on an application's use case.\nOnce you've initialized a `SecretClient`, you can interact with secrets in Azure Key Vault.\n\n### Thread safety\n\nWe guarantee that all client instance methods are thread-safe and independent of each other ([guideline](https://azure.github.io/azure-sdk/dotnet_introduction.html#dotnet-service-methods-thread-safety)). This ensures that the recommendation of reusing client instances is always safe, even across threads.\n\n### Additional concepts\n<!-- CLIENT COMMON BAR -->\n[Client options](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#configuring-service-clients-using-clientoptions) |\n[Accessing the response](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#accessing-http-response-details-using-responset) |\n[Long-running operations](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#consuming-long-running-operations-using-operationt) |\n[Handling failures](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#reporting-errors-requestfailedexception) |\n[Diagnostics](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md) |\n[Mocking](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#mocking) |\n[Client lifetime](https://devblogs.microsoft.com/azure-sdk/lifetime-management-and-thread-safety-guarantees-of-azure-sdk-net-clients/)\n<!-- CLIENT COMMON BAR -->\n\n## Examples\n\nThe Azure.Security.KeyVault.Secrets package supports synchronous and asynchronous APIs.\n\nThe following section provides several code snippets using the `client` created above, covering some of the most common Azure Key Vault secret service related tasks:\n\n### Sync examples\n\n* [Create a secret](#create-a-secret)\n* [Retrieve a secret](#retrieve-a-secret)\n* [Update an existing secret](#update-an-existing-secret)\n* [Delete a secret](#delete-a-secret)\n* [Delete and purge a secret](#delete-and-purge-a-secret)\n* [List Secrets](#list-secrets)\n\n### Async examples\n\n* [Create a secret asynchronously](#create-a-secret-asynchronously)\n* [List secrets asynchronously](#list-secrets-asynchronously)\n* [Delete a secret asynchronously](#delete-a-secret-asynchronously)\n\n### Create a secret\n\n`SetSecret` creates a `KeyVaultSecret` to be stored in the Azure Key Vault. If a secret with the same name already exists, then a new version of the secret is created.\n\n```C# Snippet:CreateSecret\nKeyVaultSecret secret = client.SetSecret(\"secret-name\", \"secret-value\");\n\nConsole.WriteLine(secret.Name);\nConsole.WriteLine(secret.Value);\nConsole.WriteLine(secret.Properties.Version);\nConsole.WriteLine(secret.Properties.Enabled);\n```\n\n### Retrieve a secret\n\n`GetSecret` retrieves a secret previously stored in the Azure Key Vault.\n\n```C# Snippet:RetrieveSecret\nKeyVaultSecret secret = client.GetSecret(\"secret-name\");\n\nConsole.WriteLine(secret.Name);\nConsole.WriteLine(secret.Value);\n```\n\n### Update an existing secret\n\n`UpdateSecretProperties` updates a secret previously stored in the Azure Key Vault. Only the attributes of the secret are updated. To update the value, call `SecretClient.SetSecret` on a secret with the same name.\n\n```C# Snippet:UpdateSecret\nKeyVaultSecret secret = client.GetSecret(\"secret-name\");\n\n// Clients may specify the content type of a secret to assist in interpreting the secret data when its retrieved.\nsecret.Properties.ContentType = \"text/plain\";\n\n// You can specify additional application-specific metadata in the form of tags.\nsecret.Properties.Tags[\"foo\"] = \"updated tag\";\n\nSecretProperties updatedSecretProperties = client.UpdateSecretProperties(secret.Properties);\n\nConsole.WriteLine(updatedSecretProperties.Name);\nConsole.WriteLine(updatedSecretProperties.Version);\nConsole.WriteLine(updatedSecretProperties.ContentType);\n```\n\n### Delete a secret\n\n`StartDeleteSecret` starts a long-running operation to delete a secret previously stored in the Azure Key Vault.\nYou can retrieve the secret immediately without waiting for the operation to complete.\nWhen [soft-delete][soft_delete] is not enabled for the Azure Key Vault, this operation permanently deletes the secret.\n\n```C# Snippet:DeleteSecret\nDeleteSecretOperation operation = client.StartDeleteSecret(\"secret-name\");\n\nDeletedSecret secret = operation.Value;\nConsole.WriteLine(secret.Name);\nConsole.WriteLine(secret.Value);\n```\n\n### Delete and purge a secret\n\nYou will need to wait for the long-running operation to complete before trying to purge or recover the secret.\nYou can do this by calling `UpdateStatus` in a loop as shown below:\n\n```C# Snippet:DeleteAndPurgeSecret\nDeleteSecretOperation operation = client.StartDeleteSecret(\"secret-name\");\n\n// You only need to wait for completion if you want to purge or recover the secret.\n// You should call `UpdateStatus` in another thread or after doing additional work like pumping messages.\nwhile (!operation.HasCompleted)\n{\n    Thread.Sleep(2000);\n\n    operation.UpdateStatus();\n}\n\nDeletedSecret secret = operation.Value;\nclient.PurgeDeletedSecret(secret.Name);\n```\n\n### List secrets\n\nThis example lists all the secrets in the specified Azure Key Vault. The value is not returned when listing all secrets. You will need to call `SecretClient.GetSecret` to retrieve the value.\n\n```C# Snippet:ListSecrets\nPageable<SecretProperties> allSecrets = client.GetPropertiesOfSecrets();\n\nforeach (SecretProperties secretProperties in allSecrets)\n{\n    Console.WriteLine(secretProperties.Name);\n}\n```\n\n### Create a secret asynchronously\n\nThe asynchronous APIs are identical to their synchronous counterparts, but return with the typical \"Async\" suffix for asynchronous methods and return a `Task`.\n\nThis example creates a secret in the Azure Key Vault with the specified optional arguments.\n\n```C# Snippet:CreateSecretAsync\nKeyVaultSecret secret = await client.SetSecretAsync(\"secret-name\", \"secret-value\");\n\nConsole.WriteLine(secret.Name);\nConsole.WriteLine(secret.Value);\n```\n\n### List secrets asynchronously\n\nListing secrets does not rely on awaiting the `GetPropertiesOfSecretsAsync` method, but returns an `AsyncPageable<SecretProperties>` that you can use with the `await foreach` statement:\n\n```C# Snippet:ListSecretsAsync\nAsyncPageable<SecretProperties> allSecrets = client.GetPropertiesOfSecretsAsync();\n\nawait foreach (SecretProperties secretProperties in allSecrets)\n{\n    Console.WriteLine(secretProperties.Name);\n}\n```\n\n### Delete a secret asynchronously\n\nWhen deleting a secret asynchronously before you purge it, you can await the `WaitForCompletionAsync` method on the operation.\nBy default, this loops indefinitely but you can cancel it by passing a `CancellationToken`.\n\n```C# Snippet:DeleteAndPurgeSecretAsync\nDeleteSecretOperation operation = await client.StartDeleteSecretAsync(\"secret-name\");\n\n// You only need to wait for completion if you want to purge or recover the secret.\nawait operation.WaitForCompletionAsync();\n\nDeletedSecret secret = operation.Value;\nawait client.PurgeDeletedSecretAsync(secret.Name);\n```\n\n## Troubleshooting\n\nSee our [troubleshooting guide](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/keyvault/Azure.Security.KeyVault.Secrets/TROUBLESHOOTING.md)\nfor details on how to diagnose various failure scenarios.\n\n### General\n\nWhen you interact with the Azure Key Vault secret client library using the .NET SDK, errors returned by the service correspond to the same HTTP status codes returned for [REST API][keyvault_rest] requests.\n\nFor example, if you try to retrieve a secret that doesn't exist in your Azure Key Vault, a `404` error is returned, indicating `Not Found`.\n\n```C# Snippet:SecretNotFound\ntry\n{\n    KeyVaultSecret secret = client.GetSecret(\"some_secret\");\n}\ncatch (RequestFailedException ex)\n{\n    Console.WriteLine(ex.ToString());\n}\n```\n\nYou will notice that additional information is logged, like the Client Request ID of the operation.\n\n```text\nMessage:\n    Azure.RequestFailedException : Service request failed.\n    Status: 404 (Not Found)\nContent:\n    {\"error\":{\"code\":\"SecretNotFound\",\"message\":\"Secret not found: some_secret\"}}\n\nHeaders:\n    Cache-Control: no-cache\n    Pragma: no-cache\n    Server: Microsoft-IIS/10.0\n    x-ms-keyvault-region: westus\n    x-ms-request-id: 625f870e-10ea-41e5-8380-282e5cf768f2\n    x-ms-keyvault-service-version: 1.1.0.866\n    x-ms-keyvault-network-info: addr=131.107.174.199;act_addr_fam=InterNetwork;\n    X-AspNet-Version: 4.0.30319\n    X-Powered-By: ASP.NET\n    Strict-Transport-Security: max-age=31536000;includeSubDomains\n    X-Content-Type-Options: nosniff\n    Date: Tue, 18 Jun 2019 16:02:11 GMT\n    Content-Length: 75\n    Content-Type: application/json; charset=utf-8\n    Expires: -1\n```\n\n## Next steps\n\nSeveral Azure Key Vault secrets client library samples are available to you in this GitHub repository. These samples provide example code for additional scenarios commonly encountered while working with Azure Key Vault:\n\n* [Sample1_HelloWorld.md][hello_world_sample] - for working with Azure Key Vault, including:\n  * Create a secret\n  * Get an existing secret\n  * Update an existing secret\n  * Delete secret\n\n* [Sample2_BackupAndRestore.md][backup_and_restore_sample] - contains the code snippets working with Azure Key Vault secrets, including:\n  * Backup and recover a secret\n\n* [Sample3_GetSecrets.md][get_secrets_sample] - example code for working with Azure Key Vault secrets, including:\n  * Create secrets\n  * List all secrets in the Key Vault\n  * Update secrets in the Key Vault\n  * List versions of a specified secret\n  * Delete secrets from the Key Vault\n  * List deleted secrets in the Key Vault\n\n### Additional Documentation\n\n* For more extensive documentation on Azure Key Vault, see the [API reference documentation][keyvault_rest].\n* For Keys client library see [Keys client library][keys_client_library].\n* For Certificates client library see [Certificates client library][certificates_client_library].\n\n## Contributing\n\nSee the [CONTRIBUTING.md][contributing] for details on building, testing, and contributing to these libraries.\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct]. For more information see the [Code of Conduct FAQ][coc_faq] or contact opencode@microsoft.com with any additional questions or comments.\n\n<!-- LINKS -->\n[API_reference]: https://learn.microsoft.com/dotnet/api/azure.security.keyvault.secrets\n[azure_cli]: https://learn.microsoft.com/cli/azure\n[azure_identity]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/identity/Azure.Identity\n[azure_sub]: https://azure.microsoft.com/free/dotnet/\n[backup_and_restore_sample]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/keyvault/Azure.Security.KeyVault.Secrets/samples/Sample2_BackupAndRestore.md\n[certificates_client_library]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/keyvault/Azure.Security.KeyVault.Certificates\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[get_secrets_sample]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/keyvault/Azure.Security.KeyVault.Secrets/samples/Sample3_GetSecrets.md\n[hello_world_sample]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/keyvault/Azure.Security.KeyVault.Secrets/samples/Sample1_HelloWorld.md\n[keys_client_library]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/keyvault/Azure.Security.KeyVault.Keys\n[keyvault_docs]: https://learn.microsoft.com/azure/key-vault/\n[keyvault_rest]: https://learn.microsoft.com/rest/api/keyvault/\n[nuget]: https://www.nuget.org/\n[secret_client_class]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/keyvault/Azure.Security.KeyVault.Secrets/src/SecretClient.cs\n[secret_client_nuget_package]: https://www.nuget.org/packages/Azure.Security.KeyVault.Secrets/\n[secret_client_samples]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/keyvault/Azure.Security.KeyVault.Secrets/samples\n[secret_client_src]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/keyvault/Azure.Security.KeyVault.Secrets/src\n[soft_delete]: https://learn.microsoft.com/azure/key-vault/general/soft-delete-overview\n[DefaultAzureCredential]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md#defaultazurecredential\n[contributing]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/keyvault/CONTRIBUTING.md\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[migration_guide]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/keyvault/Azure.Security.KeyVault.Secrets/MigrationGuide.md\n[access_policy]: https://learn.microsoft.com/azure/key-vault/general/assign-access-policy\n[rbac_guide]: https://learn.microsoft.com/azure/key-vault/general/rbac-guide\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2Fsdk%2Fkeyvault%2FAzure.Security.KeyVault.Secrets%2FREADME.png)\n",
        "repo_name": "keyvault/Azure.Security.KeyVault.Secrets",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/keyvault/Azure.Security.KeyVault.Secrets",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Key Vault SDK for .NET\n\n## New libraries available\n\nThis library has been replaced by the following new Azure SDKs. You can read about the new Azure SDKs at https://aka.ms/azsdkvalueprop.\n\nThe latest libraries to interact with the Azure Key Vault service are:\n\n* [Azure.Security.KeyVault.Certificates](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/keyvault/Azure.Security.KeyVault.Certificates)\n* [Azure.Security.KeyVault.Keys](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/keyvault/Azure.Security.KeyVault.Keys)\n* [Azure.Security.KeyVault.Secrets](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/keyvault/Azure.Security.KeyVault.Secrets)\n\nIt is **recommended** that you move to one or more of the new packages.\n\n<hr/>\n\nThe Microsoft Azure Key Vault SDK for .NET allows you to build secure Azure applications that can access secrets, keys, and certificates that a encrypted at rest with hardware security modules.\n\nThis directory contains the open source subset of the .NET SDK. For documentation of the \ncomplete Azure SDK, please see the [Microsoft Azure .NET Developer Center](https://azure.microsoft.com/develop/net/).\n\n## Features\n\n- Secrets\n    - Create, Read, Update, Delete, and Recover Secrets\n    - Backup and Restore Secrets\n- Keys\n    - Create, Read, Update, Delete, and Recover Keys\n    - Import, Backup and Restore Keys\n    - Encrypt, Decrypt, Wrap, Unwrap, Sign and Verify cryptographic Key operations \n- Certificates\n    - Create, Read, Update, Delete, and Recover Certificates\n    - Create, Read, Update, and Delete certificate renewal properties\n    - Create, Read, Update, and Delete certificate issuers\n- Storage Accounts\n    - Add, Read, Update, and Remove Storage Accounts managed by the Key Vault\n    - Create, Read, Update, and Delete SAS definitions\n\n## Getting Started\n\nThe complete Microsoft Azure SDK can be downloaded from the [Microsoft Azure Downloads Page](https://azure.microsoft.com/downloads/?sdk=net) and ships with support for building deployment packages, integrating with tooling, rich command line tooling, and more.\n\nPlease review the [overview](https://docs.microsoft.com/azure/key-vault/general/overview) if you are not familiar with Azure Key Vault.\n\nFor the best development experience, developers should use the official Microsoft NuGet packages for libraries. NuGet packages are regularly updated with new functionality and hotfixes. \n\n## Requirements\n\n- Microsoft Azure Subscription: To call Microsoft Azure services, you need to first [create an account](https://account.windowsazure.com/Home/Index). Sign up for a free trial or use your MSDN subscriber benefits.\n- Hosting: To host your .NET code in Microsoft Azure, you additionally need to download the full Microsoft Azure SDK for .NET - which includes packaging,\n    emulation, and deployment tools, or use Microsoft Azure Web Sites to deploy ASP.NET web applications.\n\n## Download Packages\n\n- [Microsoft.Azure.KeyVault](https://www.nuget.org/packages/Microsoft.Azure.KeyVault)\n- [Microsoft.Azure.KeyVault.Core](https://www.nuget.org/packages/Microsoft.Azure.KeyVault.Core)\n- [Microsoft.Azure.KeyVault.WebKey](https://www.nuget.org/packages/Microsoft.Azure.KeyVault.WebKey)\n- [Microsoft.Azure.KeyVault.Cryptography](https://www.nuget.org/packages/Microsoft.Azure.KeyVault.Cryptography)\n- [Microsoft.Azure.KeyVault.Extensions](https://www.nuget.org/packages/Microsoft.Azure.KeyVault.Extensions)\n\n## Versioning Information\n\n- The Key Vault SDK uses [the semantic versioning scheme.](https://semver.org/)\n\n## Target Frameworks\n\nFor information about the target frameworks of the Key Vault SDK, please refer to the [Target Frameworks](https://github.com/azure/azure-sdk-for-net#target-frameworks) of the Microsoft Azure SDK for .NET.\n\n## Prerequisites\n\nThe Key Vault Client Library shares the same [Prerequisites](https://github.com/azure/azure-sdk-for-net#prerequisites) as the Microsoft Azure SDK for .NET.\n\n## To Build\n\nFor information on building the Azure Key Vault SDK, please see [Building the Microsoft Azure SDK for .NET](https://github.com/azure/azure-sdk-for-net#to-build).\n\n## Running Tests\n\nTests for the Azure Key Vault SDK are run in the same manner as the rest of the tests for the Azure SDK for .NET.  For information please see how to [run tests](https://github.com/azure/azure-sdk-for-net#to-run-the-tests).\n\n## Samples\n\nCode samples for the Azure Key Vault SDK are available on [Azure Code Samples](https://azure.microsoft.com/resources/samples/?sort=0&service=key-vault&platform=dotnet).\n\n## Additional Documentation\n\n* [Azure Key Vault General Documentation](https://docs.microsoft.com/azure/key-vault/)\n* [Azure Key Vault REST API Reference](https://docs.microsoft.com/rest/api/keyvault/)\n* [Azure Key Vault SDK for .NET Documentation](https://docs.microsoft.com/dotnet/api/overview/azure/key-vault?view=azure-dotnet)\n  \n## Contributing\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information \nsee the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) \nwith any additional questions or comments.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2Fsdk%2Fkeyvault%2FMicrosoft.Azure.KeyVault%2FREADME.png)\n",
        "repo_name": "keyvault/Microsoft.Azure.KeyVault",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/keyvault/Microsoft.Azure.KeyVault",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Kubernetes Configuration management client library for .NET\n\nThis library supports managing Microsoft Azure Kubernetes Configuration resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Kubernetes Configuration management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.KubernetesConfiguration\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html)..\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "kubernetesconfiguration/Azure.ResourceManager.KubernetesConfiguration",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/kubernetesconfiguration/Azure.ResourceManager.KubernetesConfiguration",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Kusto management client library for .NET\n\nMicrosoft Azure Data Explorer (Kusto) is a fully managed, high-performance, big data analytics platform that makes it easy to analyze high volumes of data in near real time. The Azure Data Explorer toolbox gives you an end-to-end solution for data ingestion, query, visualization, and management.\n\nThis library supports managing Microsoft Azure Kusto resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Kusto management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.Kusto\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html)..\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "kusto/Azure.ResourceManager.Kusto",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/kusto/Azure.ResourceManager.Kusto",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Lab Services management client library for .NET\n\nMicrosoft Azure Lab Services lets you create labs whose infrastructure is managed by Azure. The service itself handles all the infrastructure management, from spinning up virtual machines (VMs) to handling errors and scaling the infrastructure.\n\nThis library supports managing Microsoft Azure Lab Services resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Lab Services management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.LabServices\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html)..\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "labservices/Azure.ResourceManager.LabServices",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/labservices/Azure.ResourceManager.LabServices",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Load Testing client library for .NET\nAzure Load Testing provides client library in .NET to the user by which they can interact natively with Azure Load Testing service. Azure Load Testing is a fully managed load-testing service that enables you to generate high-scale load. The service simulates traffic for your applications, regardless of where they're hosted. Developers, testers, and quality assurance (QA) engineers can use it to optimize application performance, scalability, or capacity.\n\n  [Source code](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/loadtestservice/Azure.Developer.LoadTesting/src) | [Package (NuGet)](https://www.nuget.org/packages?q=Azure.Developer.Loadtesting) | [API reference documentation](https://azure.github.io/azure-sdk-for-net) | [Product documentation](https://learn.microsoft.com/azure/load-testing/)\n\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n<!-- - [Source code][source_code] -->\n- [API reference documentation](https://docs.microsoft.com/rest/api/loadtesting/)\n- [Product Documentation](https://azure.microsoft.com/services/load-testing/)\n\n## Getting started\n\n\n### Install the package\n\nInstall the client library for .NET with [NuGet](https://www.nuget.org/ ):\n\n```dotnetcli\ndotnet add package Azure.Developer.LoadTesting\n```\n\n### Prerequisites\nYou must have an [Azure subscription](https://azure.microsoft.com/free/dotnet/) and [Azure Load Test Service Resource](https://learn.microsoft.com/azure/load-testing/). In order to take advantage of the C# 8.0 syntax, it is recommended that you compile using the [.NET Core SDK](https://dotnet.microsoft.com/download) 3.0 or higher with a [language version](https://docs.microsoft.com/dotnet/csharp/language-reference/configure-language-version#override-a-default) of `latest`.  It is also possible to compile with the .NET Core SDK 2.1.x using a language version of `preview`.\n\n\n### Authenticate the client\n\nTo use an [Azure Active Directory (AAD) token credential](https://learn.microsoft.com/aspnet/core/security/authentication/identity),\nprovide an instance of the desired credential type obtained from the\n[azure-identity][azure_identity_credentials] library.\n\nTo authenticate with AAD, you must first use [nuget][nuget] install [`azure-identity`][azure_identity_nuget]\n\nAfter setup, you can choose which type of [credential][azure_identity_credentials] from Azure.Identity to use.\n\nAs an example, sign in via the Azure CLI `az login` command and [DefaultAzureCredential](https://learn.microsoft.com/python/api/azure-identity/azure.identity.defaultazurecredential?view=azure-python) will authenticate as that user.\n\nUse the returned token credential to authenticate the client.\n\n## Key concepts\n\nThe following components make up the Azure Load Testing service. The Azure Load Test client library for C# allows you to interact with each of these components through the use of clients. There are two clients:\n\n- `LoadTestAdministrationClient`\n\n- `LoadTestRunClient`\n\nThese clients are used for managing and using different components of the service. For each method in both of these sub-clients there is a corresponding Async method in the same class, with the same implementation however enabling async functionalities. For example, if there is a method, `CreateOrUpdateTest` as a part of `LoadTestAdministrationClient` then there always exists one more function `CreateOrUpdateTestAsync` in the same client class.\n\n### Load Test Administration Client\n\nThe `LoadTestAdministrationClient` client is used to administer and configure the load tests, app components and metrics.\n\n#### Test\n\nA test specifies the test script, and configuration settings for running a load test. You can create one or more tests in an Azure Load Testing resource.\n\n#### App Component\n\nWhen you run a load test for an Azure-hosted application, you can monitor resource metrics for the different Azure application components (server-side metrics). While the load test runs, and after completion of the test, you can monitor and analyze the resource metrics in the Azure Load Testing dashboard.\n\n#### Metrics\n\nDuring a load test, Azure Load Testing collects metrics about the test execution. There are two types of metrics:\n\n1. Client-side metrics give you details reported by the test engine. These metrics include the number of virtual users, the request response time, the number of failed requests, or the number of requests per second.\n\n2. Server-side metrics are available for Azure-hosted applications and provide information about your Azure application components. Metrics can be for the number of database reads, the type of HTTP responses, or container resource consumption.\n\n### Test Run Client\n\nThe `LoadTestRunClient` client is used to start and stop test runs corresponding to a load test. A test run represents one execution of a load test. It collects the logs associated with running the Apache JMeter script, the load test YAML configuration, the list of app components to monitor, and the results of the test.\n\n### Data-Plane Endpoint\n\nData-plane of Azure Load Testing resources is addressable using the following URL format:\n\n`00000000-0000-0000-0000-000000000000.aaa.cnt-prod.loadtesting.azure.com`\n\nThe first GUID `00000000-0000-0000-0000-000000000000` is the unique identifier used for accessing the Azure Load Testing resource. This is followed by  `aaa` which is the Azure region of the resource.\n\nThe data-plane endpoint is obtained from Control Plane APIs.\n\n**Example:** `1234abcd-12ab-12ab-12ab-123456abcdef.eus.cnt-prod.loadtesting.azure.com`\n\nIn the above example, `eus` represents the Azure region `East US`.\n## Examples\n\nYou can familiarize yourself with different APIs using [Samples](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/loadtestservice/Azure.Developer.LoadTesting/samples).\n\n\n## Troubleshooting\nMore about it is coming soon...\n\n\n### Thread safety\n\nWe guarantee that all client instance methods are thread-safe and independent of each other ([guideline](https://azure.github.io/azure-sdk/dotnet_introduction.html#dotnet-service-methods-thread-safety)). This ensures that the recommendation of reusing client instances is always safe, even across threads.\n\n## Next steps\n\nGet started with our [samples](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/loadtestservice/Azure.Developer.LoadTesting/samples).\n\n## Contributing\n\nThis is a template, but your SDK readme should include details on how to contribute code to the repo/package.\n\n### Additional concepts\n<!-- CLIENT COMMON BAR -->\n[Client options](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#configuring-service-clients-using-clientoptions) |\n[Accessing the response](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#accessing-http-response-details-using-responset) |\n[Long-running operations](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#consuming-long-running-operations-using-operationt) |\n[Handling failures](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#reporting-errors-requestfailedexception) |\n[Diagnostics](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md) |\n[Mocking](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#mocking) |\n[Client lifetime](https://devblogs.microsoft.com/azure-sdk/lifetime-management-and-thread-safety-guarantees-of-azure-sdk-net-clients/)\n<!-- CLIENT COMMON BAR -->\n\n<!-- LINKS -->\n<!-- LINKS -->\n<!-- [source_code]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/loadtesting/azure-developer-loadtesting/src -->\n<!-- [sample_code]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/loadtesting/azure-developer-loadtesting/src/samples -->\n[style-guide-msft]: https://docs.microsoft.com/style-guide/capitalization\n[style-guide-cloud]: https://aka.ms/azsdk/cloud-style-guide\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[authenticate_with_token]: https://learn.microsoft.com/aspnet/core/security/authentication/identity\n[azure_identity_credentials]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/identity/Azure.Identity#credentials\n[azure_identity_nuget]: https://www.nuget.org/packages/Azure.Identity/1.7.0\n[client_secret_credential]: https://learn.microsoft.com/dotnet/api/azure.identity.clientsecretcredential\n[nuget]: https://www.nuget.org/\n[azure_sub]: https://azure.microsoft.com/free/\n[api_reference_doc]: https://docs.microsoft.com/rest/api/loadtesting/\n[product_documentation]: https://azure.microsoft.com/services/load-testing/\n",
        "repo_name": "loadtestservice/Azure.Developer.LoadTesting",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/loadtestservice/Azure.Developer.LoadTesting",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Load Testing management client library for .NET\n\nMicrosoft Azure Load Testing is a fully managed load-testing service that enables you to generate high-scale load. The service simulates traffic for your applications, regardless of where they're hosted. Developers, testers, and quality assurance (QA) engineers can use it to optimize application performance, scalability, or capacity.\n\nThis library supports managing Microsoft Azure Load Testing resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Load Testing management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.LoadTesting\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html)..\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\n### Create a new Azure Load Testing resource\n\nBefore creating an Azure Load Testing resource, we need to have a resource group.\n\n```C#\nArmClient armClient = new ArmClient(new DefaultAzureCredential());\nSubscriptionResource subscription = await armClient.GetDefaultSubscriptionAsync();\nResourceGroupCollection rgCollection = subscription.GetResourceGroups();\n// With the collection, we can create a new resource group with an specific name\nstring rgName = \"sample-rg\";\nAzureLocation location = AzureLocation.WestUS2;\nArmOperation<ResourceGroupResource> resourceGroupLro = await rgCollection.CreateOrUpdateAsync(WaitUntil.Completed, rgName, new ResourceGroupData(location));\nResourceGroupResource resourceGroup = lro.Value;\n```\n\nCreate an Azure Load Testing resource.\n\n```C# Snippet:LoadTesting_CreateLoadTestResource_Basic\nLoadTestingResourceCollection loadTestingCollection = _resourceGroup.GetLoadTestingResources();\nstring loadTestResourceName = \"sample-loadtest\";\nLoadTestingResourceData inputPayload = new LoadTestingResourceData(AzureLocation.WestUS2);\nArmOperation<LoadTestingResource> loadTestingLro = await loadTestingCollection.CreateOrUpdateAsync(WaitUntil.Completed, loadTestResourceName, inputPayload);\n\nLoadTestingResource resource = loadTestingLro.Value;\n```\n\nCreate an Azure Load Testing resource configured with CMK encryption.\n\n```C# Snippet:LoadTesting_CreateLoadTestResource_WithEncryption\nLoadTestingResourceCollection loadTestingCollection = _resourceGroup.GetLoadTestingResources();\nstring loadTestResourceName = \"sample-loadtest\";\nLoadTestingResourceData inputPayload = new LoadTestingResourceData(AzureLocation.WestUS2);\n\n// Managed identity properties\nResourceIdentifier identityId = new ResourceIdentifier(\"/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/sample-rg/providers/microsoft.managedidentity/userassignedidentities/identity1\");\ninputPayload.Identity = new ManagedServiceIdentity(ManagedServiceIdentityType.SystemAssignedUserAssigned);\ninputPayload.Identity.UserAssignedIdentities.Add(identityId, new UserAssignedIdentity());\n\n// CMK encryption properties\ninputPayload.Encryption = new LoadTestingCmkEncryptionProperties();\ninputPayload.Encryption.KeyUri = new Uri(\"https://sample-kv.vault.azure.net/keys/cmkkey/2d1ccd5c50234ea2a0858fe148b69cde\");\ninputPayload.Encryption.Identity = new LoadTestingCmkIdentity();\ninputPayload.Encryption.Identity.IdentityType = LoadTestingCmkIdentityType.UserAssigned;\ninputPayload.Encryption.Identity.ResourceId = identityId;\n\nArmOperation<LoadTestingResource> loadTestingLro = await loadTestingCollection.CreateOrUpdateAsync(WaitUntil.Completed, loadTestResourceName, inputPayload);\n\nLoadTestingResource resource = loadTestingLro.Value;\n```\n\n### Get details of an Azure Load Testing resource\n\n```C# Snippet:LoadTesting_GetLoadTestResource\nLoadTestingResourceCollection loadTestingCollection = _resourceGroup.GetLoadTestingResources();\n\nstring loadTestResourceName = \"sample-loadtest\";\nResponse<LoadTestingResource> loadTestingResponse = await loadTestingCollection.GetAsync(loadTestResourceName);\n\nLoadTestingResource resource = loadTestingResponse.Value;\n```\n\n### Update an Azure Load Testing resource\n\nUpdate an Azure Load Testing resource to configure CMK encryption using system-assigned managed identity.\n```C# Snippet:LoadTesting_UpdateLoadTestResource_WithEncryption\nLoadTestingResourceCollection loadTestingCollection = _resourceGroup.GetLoadTestingResources();\nstring loadTestResourceName = \"sample-loadtest\";\nResponse<LoadTestingResource> loadTestingResponse = await loadTestingCollection.GetAsync(loadTestResourceName);\nLoadTestingResource resource = loadTestingResponse.Value;\n\nResourceIdentifier identityId = new ResourceIdentifier(\"/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/sample-rg/providers/microsoft.managedidentity/userassignedidentities/identity1\");\nLoadTestingResourcePatch resourcePatchPayload = new LoadTestingResourcePatch {\n    Encryption = new LoadTestingCmkEncryptionProperties\n    {\n        Identity = new LoadTestingCmkIdentity\n        {\n            // make sure that system-assigned managed identity is enabled on this resource and the identity has been granted required permissions to access the key.\n            IdentityType = LoadTestingCmkIdentityType.SystemAssigned,\n            ResourceId = null\n        },\n        KeyUri = new Uri(\"https://sample-kv.vault.azure.net/keys/cmkkey/2d1ccd5c50234ea2a0858fe148b69cde\")\n    }\n};\n\nArmOperation<LoadTestingResource> loadTestingLro = await resource.UpdateAsync(WaitUntil.Completed, resourcePatchPayload);\n\nLoadTestingResource updatedResource = loadTestingLro.Value;\n```\n\nUpdate an Azure Load Testing resource to update user-assigned managed identities.\n```C# Snippet:LoadTesting_UpdateLoadTestResource_WithManagedIdentity\nLoadTestingResourceCollection loadTestingCollection = _resourceGroup.GetLoadTestingResources();\nstring loadTestResourceName = \"sample-loadtest\";\nResponse<LoadTestingResource> loadTestingResponse = await loadTestingCollection.GetAsync(loadTestResourceName);\nLoadTestingResource resource = loadTestingResponse.Value;\n\nResourceIdentifier identityId1 = new ResourceIdentifier(\"/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/sample-rg/providers/microsoft.managedidentity/userassignedidentities/identity1\");\nResourceIdentifier identityId2 = new ResourceIdentifier(\"/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/sample-rg/providers/microsoft.managedidentity/userassignedidentities/identity2\");\n\nLoadTestingResourcePatch resourcePatchPayload = new LoadTestingResourcePatch();\nresourcePatchPayload.Identity = new ManagedServiceIdentity(ManagedServiceIdentityType.UserAssigned);\n// removes user-assigned identity with resourceId <identityId1> (if already assigned to the load testing resource)\nresourcePatchPayload.Identity.UserAssignedIdentities.Add(identityId1, null);\nresourcePatchPayload.Identity.UserAssignedIdentities.Add(identityId2, new UserAssignedIdentity());\n\nArmOperation<LoadTestingResource> loadTestingLro = await resource.UpdateAsync(WaitUntil.Completed, resourcePatchPayload);\nLoadTestingResource updatedResource = loadTestingLro.Value;\n```\n\n### Delete an Azure Load Testing resource\n\n```C# Snippet:LoadTesting_DeleteLoadTestResource\nLoadTestingResourceCollection loadTestingCollection = _resourceGroup.GetLoadTestingResources();\nstring loadTestResourceName = \"sample-loadtest\";\nResponse<LoadTestingResource> loadTestingResponse = await loadTestingCollection.GetAsync(loadTestResourceName);\nLoadTestingResource resource = loadTestingResponse.Value;\n\nArmOperation loadTestDeleteResponse = await resource.DeleteAsync(WaitUntil.Completed);\n```\n\n### Quota Operations\n\nGet Load Testing quota collection.\n\n```C# Snippet:LoadTesting_GetQuotaCollection\nLoadTestingQuotaCollection QuotaCollection = _subscription.GetAllLoadTestingQuota(AzureLocation.WestUS2);\n// Use the quotaCollection for all the quota operations.\n```\n\nGet quota values for a particular quota bucket.\n\n```C# Snippet:LoadTesting_GetQuotaBucket\nLoadTestingQuotaCollection QuotaCollection = _subscription.GetAllLoadTestingQuota(AzureLocation.WestUS2);\n\n// Get the quota values for a particular quota bucket\nResponse<LoadTestingQuotaResource> quotaResponse = await QuotaCollection.GetAsync(\"maxConcurrentTestRuns\");\nLoadTestingQuotaResource quotaBucket = quotaResponse.Value;\n```\n\nGet quota values for all quota buckets.\n\n```C# Snippet:LoadTesting_GetAllQuotaBuckets\nLoadTestingQuotaCollection QuotaCollection = _subscription.GetAllLoadTestingQuota(AzureLocation.WestUS2);\n\n// Get the quota values for a all quota buckets\nList<LoadTestingQuotaResource> quotaBuckets = await QuotaCollection.GetAllAsync().ToEnumerableAsync();\n```\n\nCheck quota availability.\n\n```C# Snippet:LoadTesting_CheckQuotaAvailability\nLoadTestingQuotaCollection QuotaCollection = _subscription.GetAllLoadTestingQuota(AzureLocation.WestUS2);\n\nResponse<LoadTestingQuotaResource> quotaResponse = await QuotaCollection.GetAsync(\"maxConcurrentTestRuns\");\nLoadTestingQuotaResource quotaResource = quotaResponse.Value;\n\nLoadTestingQuotaBucketDimensions dimensions = new LoadTestingQuotaBucketDimensions(\"<subscription-id>\", AzureLocation.WestUS2);\nLoadTestingQuotaBucketContent quotaAvailabilityPayload = new LoadTestingQuotaBucketContent(\n    quotaResponse.Value.Data.Id,\n    quotaResource.Data.Name,\n    quotaResource.Data.ResourceType,\n    null,\n    quotaResource.Data.Usage,\n    quotaResource.Data.Limit,\n    50, // new quota value\n    dimensions);\n\nResponse<LoadTestingQuotaAvailabilityResult> checkAvailabilityResult = await quotaResponse.Value.CheckLoadTestingQuotaAvailabilityAsync(quotaAvailabilityPayload);\n// IsAvailable property indicates whether the requested quota is available.\nConsole.WriteLine(checkAvailabilityResult.Value.IsAvailable);\n```\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "loadtestservice/Azure.ResourceManager.LoadTesting",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/loadtestservice/Azure.ResourceManager.LoadTesting",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Logic management client library for .NET\n\nMicrosoft Azure Logic Apps is a cloud platform where you can create and run automated workflows with little to no code. By using the visual designer and selecting from prebuilt operations, you can quickly build a workflow that integrates and manages your apps, data, services, and systems.\n\nThis library supports managing Microsoft Azure Logic resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Logic management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.Logic\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html)..\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "logic/Azure.ResourceManager.Logic",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/logic/Azure.ResourceManager.Logic",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Machine Learning Compute management client library for .NET\n\nMicrosoft Azure Machine Learning Compute is a managed-compute infrastructure that allows the user to easily create a single or multi-node compute.\n\nThis library supports managing Microsoft Azure Machine Learning Compute resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Azure Machine Learning Compute management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.MachineLearningCompute --prerelease\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html)..\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "machinelearningcompute/Azure.ResourceManager.MachineLearningCompute",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/machinelearningcompute/Azure.ResourceManager.MachineLearningCompute",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure MachineLearning management client library for .NET\n\nMicrosoft Azure Machine Learning is a fully managed cloud service that enables you to easily build, deploy, and share predictive analytics solutions.\n\nThis library supports managing Microsoft Azure Machine Learning resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started\n\n### Install the package\n\nInstall the Microsoft Azure MachineLearning management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.MachineLearning\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html)..\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "machinelearningservices/Azure.ResourceManager.MachineLearning",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/machinelearningservices/Azure.ResourceManager.MachineLearning",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Maintenance management client library for .NET\n\nThis library supports managing Microsoft Azure Maintenance resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Maintenance management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.Maintenance\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html)..\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "maintenance/Azure.ResourceManager.Maintenance",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/maintenance/Azure.ResourceManager.Maintenance",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Managed Network management client library for .NET\n\nThis library supports managing Microsoft Azure Managed Network resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Managed Network management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.ManagedNetwork --prerelease\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html)..\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "managednetwork/Azure.ResourceManager.ManagedNetwork",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/managednetwork/Azure.ResourceManager.ManagedNetwork",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Azure.ResourceManager.ManagedNetworkFabric management client library for .NET\n\nManaged Network Fabric RP exposes APIs to enable bootstrapping and configuration of devices of Network Fabric in Telco premises. This enables programming the network devices for enabling management infrastructure and tenant workloads. \n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Azure.ResourceManager.ManagedNetworkFabric management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.ManagedNetworkFabric --prerelease\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html)\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "managednetworkfabric/Azure.ResourceManager.ManagedNetworkFabric",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/managednetworkfabric/Azure.ResourceManager.ManagedNetworkFabric",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Managed Service Identity management client library for .NET\n\nMicrosoft Azure managed identities provide an automatically managed identity in Azure Active Directory for applications to use when connecting to resources that support Azure Active Directory (Azure AD) authentication. Applications can use managed identities to obtain Azure AD tokens without having to manage any credentials.\n\nThis library supports managing Microsoft Azure Managed Service Identity resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Managed Service Identity management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.ManagedServiceIdentities\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html)..\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "managedserviceidentity/Azure.ResourceManager.ManagedServiceIdentities",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/managedserviceidentity/Azure.ResourceManager.ManagedServiceIdentities",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Managed Services management client library for .NET\n\nMicrosoft Azure managed service provider is an IT service provider running their core business on Microsoft Azure.\n\nThis library supports managing Microsoft Azure Managed Services resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Managed Services management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.ManagedServices\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html)..\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "managedservices/Azure.ResourceManager.ManagedServices",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/managedservices/Azure.ResourceManager.ManagedServices",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Management Partner management client library for .NET\n\nThis library supports managing Microsoft Azure Management Partner resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Management Partner management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.ManagementPartner --prerelease\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html)..\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "managementpartner/Azure.ResourceManager.ManagementPartner",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/managementpartner/Azure.ResourceManager.ManagementPartner",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Maps Common client library for .NET\n\nAzure Maps is a Microsoft-managed service providing maps service that is...\n\nThe Azure.Maps.Common library provides infrastructure shared across other Azure Maps client libraries.\n\n[Source code](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/maps/Azure.Maps.Common/src) | [API reference documentation](https://docs.microsoft.com/rest/api/maps/) | [Product documentation](https://docs.microsoft.com/azure/azure-maps)\n\n## Getting started\n\n### Install the package\n\nInstall the Azure Maps client library for .NET you'd like to use with [NuGet](https://www.nuget.org/) and the `Azure.Maps.Common` client library will be included. Choose the packages you want to install:\n\n```dotnetcli\ndotnet add package Azure.Maps.Search --prerelease\ndotnet add package Azure.Maps.Routing --prerelease\ndotnet add package Azure.Maps.Rendering --prerelease\ndotnet add package Azure.Maps.Geolocation --prerelease\n```\n\n### Prerequisites\n\n> You must have an [Azure subscription](https://azure.microsoft.com/free/dotnet/) and [Azure Maps account](https://docs.microsoft.com/azure/azure-maps/quick-demo-map-app#create-an-azure-maps-account).\n\nTo create a new Azure Maps account, you can use the Azure Portal, Azure PowerShell, or the Azure CLI. Here's an example using the Azure CLI:\n\n```powershell\naz maps account create --kind \"Gen2\" --account-name \"myMapAccountName\" --resource-group \"<resource group>\" --sku \"G2\"\n```\n\n### Authenticate the client\n\nThere are 2 ways to authenticate the client: Shared key authentication and Azure AD. Please refer to other Azure Maps packages for detailed description.\n\n## Key concepts\n\nThe Azure Maps Common client library contains shared infrastructure like\n[LocalizedMapView](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/maps/Azure.Maps.Common/src/LocalizedMapView.cs) and [RequestFailedException](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/src/RequestFailedException.cs).\n\n### Thread safety\n\nWe guarantee that all client instance methods are thread-safe and independent of each other ([guideline](https://azure.github.io/azure-sdk/dotnet_introduction.html#dotnet-service-methods-thread-safety)). This ensures that the recommendation of reusing client instances is always safe, even across threads.\n\n### Additional concepts\n<!-- CLIENT COMMON BAR -->\n[Client options](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#configuring-service-clients-using-clientoptions) |\n[Accessing the response](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#accessing-http-response-details-using-responset) |\n[Long-running operations](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#consuming-long-running-operations-using-operationt) |\n[Handling failures](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#reporting-errors-requestfailedexception) |\n[Diagnostics](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md) |\n[Mocking](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#mocking) |\n[Client lifetime](https://devblogs.microsoft.com/azure-sdk/lifetime-management-and-thread-safety-guarantees-of-azure-sdk-net-clients/)\n<!-- CLIENT COMMON BAR -->\n\n## Examples\n\nPlease see the examples for [Search](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/maps/Azure.Maps.Search), [Routing](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/maps/Azure.Maps.Routing), [Rendering](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/maps/Azure.Maps.Rendering) and [Geolocation](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/maps/Azure.Maps.Geolocation).\n\n## Troubleshooting\n\nIf instantiate a `null` `LocalizedMapView`, the program will throw a `ArgumentNullException` error.\n\n## Next steps\n\nGet started with our [Search](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/maps/Azure.Maps.Search/samples), [Routing](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/maps/Azure.Maps.Routing/samples), [Rendering](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/maps/Azure.Maps.Rendering/samples) and [Geolocation](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/maps/Azure.Maps.Geolocation/samples) samples.\n\n## Contributing\n\nSee the [CONTRIBUTING.md](https://github.com/Azure/azure-sdk-for-net/blob/main/CONTRIBUTING.md) for details on building, testing, and contributing to this library.\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact <opencode@microsoft.com> with any additional questions or comments.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net/sdk/maps/Azure.Maps.Common/README.png)\n",
        "repo_name": "maps/Azure.Maps.Common",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/maps/Azure.Maps.Common",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Maps Geolocation client library for .NET\n\nAzure Maps Geolocation is a library that can find geolocation to a location or points of interest.\n\n[Source code](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/maps/Azure.Maps.Geolocation/src) | [API reference documentation](https://docs.microsoft.com/rest/api/maps/) | [REST API reference documentation](https://docs.microsoft.com/rest/api/maps/geolocation) | [Product documentation](https://docs.microsoft.com/azure/azure-maps/)\n\n## Getting started\n\n### Install the package\n\nInstall the client library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.Maps.Geolocation --prerelease\n```\n\n### Prerequisites\n\n> You must have an [Azure subscription](https://azure.microsoft.com/free/dotnet/) and [Azure Maps account](https://docs.microsoft.com/azure/azure-maps/quick-demo-map-app#create-an-azure-maps-account).\n\nTo create a new Azure Maps account, you can use the Azure Portal, Azure PowerShell, or the Azure CLI. Here's an example using the Azure CLI:\n\n```powershell\naz maps account create --kind \"Gen2\" --account-name \"myMapAccountName\" --resource-group \"<resource group>\" --sku \"G2\"\n```\n\n### Authenticate the client\n\nThere are 2 ways to authenticate the client: Shared key authentication and Azure AD.\n\n#### Shared Key authentication\n\n* Go to Azure Maps account > Authentication tab\n* Copy `Primary Key` or `Secondary Key` under **Shared Key Authentication** section\n\n```C# Snippet:InstantiateGeolocationClientViaSubscriptionKey\n// Create a MapsGeolocationClient that will authenticate through Subscription Key (Shared key)\nAzureKeyCredential credential = new AzureKeyCredential(\"<My Subscription Key>\");\nMapsGeolocationClient client = new MapsGeolocationClient(credential);\n```\n\n#### Azure AD authentication\n\nIn order to interact with the Azure Maps service, you'll need to create an instance of the `MapsGeolocationClient` class. The [Azure Identity library](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/identity/Azure.Identity/README.md) makes it easy to add Azure Active Directory support for authenticating Azure SDK clients with their corresponding Azure services.\n\nTo use AAD authentication, set the environment variables as described in the [Azure Identity README](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/identity/Azure.Identity/README.md) and create a `DefaultAzureCredential` instance to use with the `MapsRouteClient`.\n\nWe also need **Azure Maps Client ID** which can get from Azure Maps page > Authentication tab > \"Client ID\" in Azure Active Directory Authentication section.\n\n```C# Snippet:InstantiateGeolocationClientViaAAD\n// Create a MapsGeolocationClient that will authenticate through Active Directory\nTokenCredential credential = new DefaultAzureCredential();\nstring clientId = \"<Your Map ClientId>\";\nMapsGeolocationClient client = new MapsGeolocationClient(credential, clientId);\n```\n\n## Key concepts\n\n`MapsGeolocationClient` is designed for:\n\n* Communicate with Azure Maps Geolocation SDK endpoint to get location from given IP address\n\nLearn more about examples in [samples](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/maps/Azure.Maps.Geolocation/samples)\n\n### Thread safety\n\nWe guarantee that all client instance methods are thread-safe and independent of each other ([guideline](https://azure.github.io/azure-sdk/dotnet_introduction.html#dotnet-service-methods-thread-safety)). This ensures that the recommendation of reusing client instances is always safe, even across threads.\n\n### Additional concepts\n<!-- CLIENT COMMON BAR -->\n[Client options](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#configuring-service-clients-using-clientoptions) |\n[Accessing the response](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#accessing-http-response-details-using-responset) |\n[Long-running operations](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#consuming-long-running-operations-using-operationt) |\n[Handling failures](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#reporting-errors-requestfailedexception) |\n[Diagnostics](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md) |\n[Mocking](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#mocking) |\n[Client lifetime](https://devblogs.microsoft.com/azure-sdk/lifetime-management-and-thread-safety-guarantees-of-azure-sdk-net-clients/)\n<!-- CLIENT COMMON BAR -->\n\n## Examples\n\nYou can familiarize yourself with different APIs using our [Samples](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/maps/Azure.Maps.Geolocation/samples).\n\nBefore calling geolocation APIs, instantiate a `MapsGeolocationClient` first. Below example uses AAD to create the client instance:\n\n```C# Snippet:InstantiateGeolocationClientViaAAD\n// Create a MapsGeolocationClient that will authenticate through Active Directory\nTokenCredential credential = new DefaultAzureCredential();\nstring clientId = \"<Your Map ClientId>\";\nMapsGeolocationClient client = new MapsGeolocationClient(credential, clientId);\n```\n\n### Get Location\n\nThis service will return the ISO country code for the provided IP address. Developers can use this information to block or alter certain content based on geographical locations where the application is being viewed from.\n\n```C# Snippet:GetCountryCode\n//Get location by given IP address\nIPAddress ipAddress = IPAddress.Parse(\"2001:4898:80e8:b::189\");\nResponse<CountryRegionResult> result = client.GetCountryCode(ipAddress);\n\n//Get location result country code\nConsole.WriteLine($\"Country code results by given IP Address: {result.Value.IsoCode}\");\n```\n\nFor more detailed examples, please see [geolocation samples](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/maps/Azure.Maps.Geolocation/samples/GetCountryCodeSamples.md) page.\n\n## Troubleshooting\n\n### General\n\nWhen you interact with the Azure Maps services, errors returned by the Language service correspond to the same HTTP status codes returned for [REST API requests](https://docs.microsoft.com/rest/api/maps/geolocation).\n\nFor example, if you pass wrong IP address, an error is returned, indicating \"Bad Request\" (HTTP Status code: 400).\n\n```C# Snippet:CatchGeolocationException\ntry\n{\n    // An invalid IP address\n    IPAddress inValidIpAddress = IPAddress.Parse(\"2001:4898:80e8:b:123123213123\");\n\n    Response<CountryRegionResult> result = client.GetCountryCode(inValidIpAddress);\n    // Do something with result ...\n}\ncatch (FormatException e)\n{\n    Console.WriteLine(e.ToString());\n}\n```\n\n## Next steps\n\n* For more context and additional scenarios, please see: [More detailed samples](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/maps/Azure.Maps.Geolocation/samples)\n\n## Contributing\n\nSee the [CONTRIBUTING.md](https://github.com/Azure/azure-sdk-for-net/blob/main/CONTRIBUTING.md) for details on building, testing, and contributing to this library.\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact <opencode@microsoft.com> with any additional questions or comments.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net/sdk/template/Azure.Template/README.png)\n",
        "repo_name": "maps/Azure.Maps.Geolocation",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/maps/Azure.Maps.Geolocation",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Maps Render client library for .NET\n\nAzure Maps Render is a library that can fetch image tiles and copyright information.\n\n[Source code](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/maps/Azure.Maps.Rendering/src) | [API reference documentation](https://docs.microsoft.com/rest/api/maps/) | [REST API reference documentation](https://docs.microsoft.com/rest/api/maps/render) | [Product documentation](https://docs.microsoft.com/azure/azure-maps/)\n\n## Getting started\n\n### Install the package\n\nInstall the client library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.Maps.Rendering --prerelease\n```\n\n### Prerequisites\n\n> You must have an [Azure subscription](https://azure.microsoft.com/free/dotnet/) and [Azure Maps account](https://docs.microsoft.com/azure/azure-maps/quick-demo-map-app#create-an-azure-maps-account).\n\nTo create a new Azure Maps account, you can use the Azure Portal, Azure PowerShell, or the Azure CLI. Here's an example using the Azure CLI:\n\n```powershell\naz maps account create --kind \"Gen2\" --account-name \"myMapAccountName\" --resource-group \"<resource group>\" --sku \"G2\"\n```\n\n### Authenticate the client\n\nThere are 2 ways to authenticate the client: Shared key authentication and Azure AD.\n\n#### Shared Key authentication\n\n* Go to Azure Maps account > Authentication tab\n* Copy `Primary Key` or `Secondary Key` under **Shared Key authentication** section\n\n```C# Snippet:InstantiateRenderClientViaSubscriptionKey\n// Create a MapsRenderingClient that will authenticate through Subscription Key (Shared key)\nAzureKeyCredential credential = new AzureKeyCredential(\"<My Subscription Key>\");\nMapsRenderingClient client = new MapsRenderingClient(credential);\n```\n\n#### Azure AD authentication\n\nIn order to interact with the Azure Maps service, you'll need to create an instance of the `MapsRenderingClient` class. The [Azure Identity library](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/identity/Azure.Identity/README.md) makes it easy to add Azure Active Directory support for authenticating Azure SDK clients with their corresponding Azure services.\n\nTo use AAD authentication, the environment variables as described in the [Azure Identity README](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/identity/Azure.Identity/README.md) and create a `DefaultAzureCredential` instance to use with the `MapsRenderingClient`.\n\nWe also need an **Azure Maps Client ID** which can be found on the Azure Maps page > Authentication tab > \"Client ID\" in Azure Active Directory Authentication section.\n\n![AzureMapsPortal](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/maps/Azure.Maps.Rendering/images/azure-maps-portal.png?raw=true \"Azure Maps portal website\")\n\n```C# Snippet:InstantiateRenderClientViaAAD\n// Create a MapsRenderingClient that will authenticate through Active Directory\nTokenCredential credential = new DefaultAzureCredential();\nstring clientId = \"<Your Map ClientId>\";\nMapsRenderingClient client = new MapsRenderingClient(credential, clientId);\n```\n\n## Key concepts\n\nMapsRenderingClient is designed for:\n\n* Communicate with Azure Maps endpoint to get images and tiles\n* Communicate with Azure Maps endpoint to get copyrights for images and tiles\n\nLearn more about examples in [samples](https://github.com/dubiety/azure-sdk-for-net/tree/feature/maps-render/sdk/maps/Azure.Maps.Rendering/samples)\n\n### Thread safety\n\nWe guarantee that all client instance methods are thread-safe and independent of each other ([guideline](https://azure.github.io/azure-sdk/dotnet_introduction.html#dotnet-service-methods-thread-safety)). This ensures that the recommendation of reusing client instances is always safe, even across threads.\n\n### Additional concepts\n<!-- CLIENT COMMON BAR -->\n[Client options](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#configuring-service-clients-using-clientoptions) |\n[Accessing the response](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#accessing-http-response-details-using-responset) |\n[Long-running operations](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#consuming-long-running-operations-using-operationt) |\n[Handling failures](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#reporting-errors-requestfailedexception) |\n[Diagnostics](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md) |\n[Mocking](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#mocking) |\n[Client lifetime](https://devblogs.microsoft.com/azure-sdk/lifetime-management-and-thread-safety-guarantees-of-azure-sdk-net-clients/)\n<!-- CLIENT COMMON BAR -->\n\n## Examples\n\nYou can familiarize yourself with different APIs using our [samples](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/maps/Azure.Maps.Rendering/samples). Rendering map tiles requires knowledge about zoom levels and tile grid system. Please refer to the [documentation](https://docs.microsoft.com/azure/azure-maps/zoom-levels-and-tile-grid) for more information.\n\n### Get Imagery Tiles\n\nHere is a simple example of rendering imagery tiles:\n\n```C# Snippet:GetImageryMapTiles\nint zoom = 10, tileSize = 256;\n\n// Get tile X, Y index by coordinate, zoom and tile size information\nMapTileIndex tileIndex = MapsRenderingClient.PositionToTileXY(new GeoPosition(13.3854, 52.517), zoom, tileSize);\n\n// Fetch imagery map tiles\nGetMapTileOptions GetMapTileOptions = new GetMapTileOptions(\n    MapTileSetId.MicrosoftImagery,\n    new MapTileIndex(tileIndex.X, tileIndex.Y, zoom)\n);\nResponse<Stream> mapTile = client.GetMapTile(GetMapTileOptions);\n\n// Prepare a file stream to save the imagery\nusing (FileStream fileStream = File.Create(\".\\\\BerlinImagery.png\"))\n{\n    mapTile.Value.CopyTo(fileStream);\n}\n```\n\n## Troubleshooting\n\n### General\n\nWhen you interact with the Azure Maps services, errors returned by the service correspond to the same HTTP status codes returned for [REST API requests](https://docs.microsoft.com/rest/api/maps/render).\n\nFor example, if you try to get an imagery tile with wrong tile index, an error is returned, indicating \"Bad Request\" (HTTP 400).\n\n```C# Snippet:CatchRenderException\ntry\n{\n    var options = new GetMapTileOptions(\n        MapTileSetId.MicrosoftBaseHybrid,\n        new MapTileIndex(12, 12, 2)\n    );\n\n    Response<Stream> imageryTile = client.GetMapTile(options);\n    using var imageryStream = new MemoryStream();\n    imageryTile.Value.CopyTo(imageryStream);\n}\ncatch (RequestFailedException e)\n{\n    Console.WriteLine(e.ToString());\n}\n```\n\n## Next steps\n\n* For more context and additional scenarios, please see: [detailed samples](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/maps/Azure.Maps.Rendering/samples)\n\n## Contributing\n\nSee the [CONTRIBUTING.md](https://github.com/Azure/azure-sdk-for-net/blob/main/CONTRIBUTING.md) for details on building, testing, and contributing to this library.\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact <opencode@microsoft.com> with any additional questions or comments.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net/sdk/maps/Azure.Maps.Rendering/README.png)\n",
        "repo_name": "maps/Azure.Maps.Rendering",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/maps/Azure.Maps.Rendering",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Maps Routing client library for .NET\n\nAzure Maps Routing is a library that can find route to a location or points of interest.\n\n[Source code](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/maps/Azure.Maps.Routing/src) | [API reference documentation](https://docs.microsoft.com/rest/api/maps/) | [REST API reference documentation](https://docs.microsoft.com/rest/api/maps/route) | [Product documentation](https://docs.microsoft.com/azure/azure-maps/)\n\n## Getting started\n\n### Install the package\n\nInstall the client library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.Maps.Routing --prerelease\n```\n\n### Prerequisites\n\n> You must have an [Azure subscription](https://azure.microsoft.com/free/dotnet/) and [Azure Maps account](https://docs.microsoft.com/azure/azure-maps/quick-demo-map-app#create-an-azure-maps-account).\n\nTo create a new Azure Maps account, you can use the Azure Portal, Azure PowerShell, or the Azure CLI. Here's an example using the Azure CLI:\n\n```powershell\naz maps account create --kind \"Gen2\" --account-name \"myMapAccountName\" --resource-group \"<resource group>\" --sku \"G2\"\n```\n\n### Authenticate the client\n\nThere are 2 ways to authenticate the client: Shared key authentication and Azure AD.\n\n#### Shared Key authentication\n\n* Go to Azure Maps account > Authentication tab\n* Copy `Primary Key` or `Secondary Key` under **Shared Key authentication** section\n\n```C# Snippet:InstantiateRouteClientViaSubscriptionKey\n// Create a MapsRoutingClient that will authenticate through Subscription Key (Shared key)\nAzureKeyCredential credential = new AzureKeyCredential(\"<My Subscription Key>\");\nMapsRoutingClient client = new MapsRoutingClient(credential);\n```\n\n#### Azure AD authentication\n\nIn order to interact with the Azure Maps service, you'll need to create an instance of the `MapsRoutingClient` class. The [Azure Identity library](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/identity/Azure.Identity/README.md) makes it easy to add Azure Active Directory support for authenticating Azure SDK clients with their corresponding Azure services.\n\nTo use AAD authentication, set the environment variables as described in the [Azure Identity README](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/identity/Azure.Identity/README.md) and create a `DefaultAzureCredential` instance to use with the `MapsRoutingClient`.\n\nWe also need an **Azure Maps Client ID** which can be found on the Azure Maps page > Authentication tab > \"Client ID\" in Azure Active Directory Authentication section.\n\n![AzureMapsPortal](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/maps/Azure.Maps.Routing/images/azure-maps-portal.png?raw=true)\n\n```C# Snippet:InstantiateRouteClientViaAAD\n// Create a MapsRoutingClient that will authenticate through Active Directory\nTokenCredential credential = new DefaultAzureCredential();\nstring clientId = \"<Your Map ClientId>\";\nMapsRoutingClient client = new MapsRoutingClient(credential, clientId);\n```\n\n## Key concepts\n\n`MapsRoutingClient` is designed to:\n\n* Communicate with Azure Maps endpoint to get route to locations or point of interests\n* Communicate with Azure Maps endpoint to calculate a set of locations that can be reached from the origin point based on fuel, energy, time or distance budget that is specified\n* Communicate with Azure Maps endpoint to calculate a matrix of route summaries for a set of routes defined by origin and destination locations\n\nLearn more by viewing our examples in [samples](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/maps/Azure.Maps.Routing/samples)\n\n### Thread safety\n\nWe guarantee that all client instance methods are thread-safe and independent of each other ([guideline](https://azure.github.io/azure-sdk/dotnet_introduction.html#dotnet-service-methods-thread-safety)). This ensures that the recommendation of reusing client instances is always safe, even across threads.\n\n### Additional concepts\n<!-- CLIENT COMMON BAR -->\n[Client options](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#configuring-service-clients-using-clientoptions) |\n[Accessing the response](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#accessing-http-response-details-using-responset) |\n[Long-running operations](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#consuming-long-running-operations-using-operationt) |\n[Handling failures](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#reporting-errors-requestfailedexception) |\n[Diagnostics](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md) |\n[Mocking](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#mocking) |\n[Client lifetime](https://devblogs.microsoft.com/azure-sdk/lifetime-management-and-thread-safety-guarantees-of-azure-sdk-net-clients/)\n<!-- CLIENT COMMON BAR -->\n\n## Examples\n\nYou can familiarize yourself with different APIs using our [Samples](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/maps/Azure.Maps.Routing/samples).\n\nBefore calling route APIs, instantiate a `MapsRoutingClient` first. This example uses AAD to create the client instance:\n\n```C# Snippet:InstantiateRouteClientViaAAD\n// Create a MapsRoutingClient that will authenticate through Active Directory\nTokenCredential credential = new DefaultAzureCredential();\nstring clientId = \"<Your Map ClientId>\";\nMapsRoutingClient client = new MapsRoutingClient(credential, clientId);\n```\n\n### Route Directions\n\nHere is a simple example of routing to a location:\n\n```C# Snippet:GetDirections\n// Create origin and destination routing points\nList<GeoPosition> routePoints = new List<GeoPosition>()\n{\n    new GeoPosition(123.751, 45.9375),\n    new GeoPosition(123.791, 45.96875),\n    new GeoPosition(123.767, 45.90625)\n};\n\n// Create Route direction query object\nRouteDirectionQuery query = new RouteDirectionQuery(routePoints);\nResponse<RouteDirections> result = client.GetDirections(query);\n\n// Route direction result\nConsole.WriteLine($\"Total {0} route results\", result.Value.Routes.Count);\nConsole.WriteLine(result.Value.Routes[0].Summary.LengthInMeters);\nConsole.WriteLine(result.Value.Routes[0].Summary.TravelTimeDuration);\n\n// Route points\nforeach (RouteLeg leg in result.Value.Routes[0].Legs)\n{\n    Console.WriteLine(\"Route path:\");\n    foreach (GeoPosition point in leg.Points)\n    {\n        Console.WriteLine($\"point({point.Latitude}, {point.Longitude})\");\n    }\n}\n```\n\nYou can also specify the travel mode, route type, language, and other options when route to point of interests:\n\n```C# Snippet:RouteDirectionsWithOptions\n// Create origin and destination routing points\nList<GeoPosition> routePoints = new List<GeoPosition>()\n{\n    new GeoPosition(123.751, 45.9375),\n    new GeoPosition(123.791, 45.96875),\n    new GeoPosition(123.767, 45.90625)\n};\n\nRouteDirectionOptions options = new RouteDirectionOptions()\n{\n    RouteType = RouteType.Fastest,\n    UseTrafficData = true,\n    TravelMode = TravelMode.Bicycle,\n    Language = RoutingLanguage.EnglishUsa,\n};\n\n// Create Route direction query object\nRouteDirectionQuery query = new RouteDirectionQuery(routePoints);\nResponse<RouteDirections> result = client.GetDirections(query);\n\n// Route direction result\nConsole.WriteLine($\"Total {0} route results\", result.Value.Routes.Count);\nConsole.WriteLine(result.Value.Routes[0].Summary.LengthInMeters);\nConsole.WriteLine(result.Value.Routes[0].Summary.TravelTimeDuration);\n\n// Route points\nforeach (RouteLeg leg in result.Value.Routes[0].Legs)\n{\n    Console.WriteLine(\"Route path:\");\n    foreach (GeoPosition point in leg.Points)\n    {\n        Console.WriteLine($\"point({point.Latitude}, {point.Longitude})\");\n    }\n}\n```\n\nFor more detailed examples, please see the [route direction samples](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/maps/Azure.Maps.Routing/samples/RouteDirectionsSamples.md) page.\n\n### Route Matrix\n\nTo find the route matrix between multiple origins and destinations, Azure Maps route matrix APIs should suite your needs. A simple route matrix request example looks like the snippet below:\n\n```C# Snippet:GetImmediateRouteMatrix\n// A simple route matrix request\nRouteMatrixQuery routeMatrixQuery = new RouteMatrixQuery\n{\n    // two origin points\n    Origins = new List<GeoPosition>()\n    {\n        new GeoPosition(123.751, 45.9375),\n        new GeoPosition(123.791, 45.96875)\n    },\n    // one destination point\n    Destinations = new List<GeoPosition>() { new GeoPosition(123.767, 45.90625) },\n};\nResponse<RouteMatrixResult> result = client.GetImmediateRouteMatrix(routeMatrixQuery);\n```\n\nAn async route matrix request looks like below. This is useful when you have `origin * destination > 100` data points.\n\n```C# Snippet:SimpleAsyncRouteMatrixRequest\n// Instantiate route matrix query\nRouteMatrixQuery routeMatrixQuery = new RouteMatrixQuery\n{\n    // two origin points\n    Origins = new List<GeoPosition>()\n    {\n        new GeoPosition(123.751, 45.9375),\n        new GeoPosition(123.791, 45.96875)\n    },\n    // one destination point\n    Destinations = new List<GeoPosition>() { new GeoPosition(123.767, 45.90625) },\n};\n\n// Instantiate route matrix options\nRouteMatrixOptions routeMatrixOptions = new RouteMatrixOptions(routeMatrixQuery)\n{\n    TravelTimeType = TravelTimeType.All,\n};\n\n// Invoke an long-running operation route matrix request and directly wait for completion\nGetRouteMatrixOperation result = client.GetRouteMatrix(WaitUntil.Completed, routeMatrixOptions);\n```\n\nFor more detailed examples, please see the [route matrix samples](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/maps/Azure.Maps.Routing/samples/RouteMatrixSamples.md) page.\n\n### Route Range\n\nThe route range API helps to find a set of locations that can be reached from the origin point based on fuel, energy, time or distance budget that is specified. A polygon boundary (or Isochrone) is returned in a counterclockwise orientation as well as the precise polygon center which was the result of the origin point.\n\n```C# Snippet:SimpleRouteRange\n// Search from a point of time budget that can be reached in 2000 seconds\nRouteRangeOptions options = new RouteRangeOptions(123.75, 46)\n{\n    TimeBudget = new TimeSpan(0, 20, 0)\n};\nResponse<RouteRangeResult> result = client.GetRouteRange(options);\n```\n\nFor more detailed examples, please see the [route range samples](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/maps/Azure.Maps.Routing/samples/RouteMatrixSamples.md) page.\n\n## Troubleshooting\n\n### General\n\nWhen you interact with the Azure Maps services, errors returned by the service correspond to the same HTTP status codes returned for REST API requests.\n\nFor example, if you pass wrong routing points, an error is returned, indicating \"Bad Request\" (HTTP 400).\n\n```C# Snippet:CatchRouteException\ntry\n{\n    // An empty route points list\n    List<GeoPosition> routePoints = new List<GeoPosition>() { };\n    RouteDirectionQuery query = new RouteDirectionQuery(routePoints);\n\n    Response<RouteDirections> result = client.GetDirections(query);\n    // Do something with result ...\n}\ncatch (RequestFailedException e)\n{\n    Console.WriteLine(e.ToString());\n}\n```\n\n## Next steps\n\n* For more context and additional scenarios, please see: [detailed samples](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/maps/Azure.Maps.Routing/samples)\n\n## Contributing\n\nSee the [CONTRIBUTING.md](https://github.com/Azure/azure-sdk-for-net/blob/main/CONTRIBUTING.md) for details on building, testing, and contributing to this library.\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact <opencode@microsoft.com> with any additional questions or comments.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net/sdk/maps/Azure.Maps.Routing/README.png)\n",
        "repo_name": "maps/Azure.Maps.Routing",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/maps/Azure.Maps.Routing",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Maps Search client library for .NET\n\nAzure Maps Search is a library that can query for locations, points of interests or search within a geometric area.\n\n[Source code](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/maps/Azure.Maps.Search/src) | [API reference documentation](https://docs.microsoft.com/rest/api/maps/) | [REST API reference documentation](https://docs.microsoft.com/rest/api/maps/search) | [Product documentation](https://docs.microsoft.com/azure/azure-maps/)\n\n## Getting started\n\n### Install the package\n\nInstall the client library for .NET with [NuGet](https://www.nuget.org/ ):\n\n```dotnetcli\ndotnet add package Azure.Maps.Search --prerelease\n```\n\n### Prerequisites\n\n> You must have an [Azure subscription](https://azure.microsoft.com/free/dotnet/) and [Azure Maps account](https://docs.microsoft.com/azure/azure-maps/quick-demo-map-app#create-an-azure-maps-account).\n\nTo create a new Azure Maps account, you can use the Azure Portal, Azure PowerShell, or the Azure CLI. Here's an example using the Azure CLI:\n\n```powershell\naz maps account create --kind \"Gen2\" --account-name \"myMapAccountName\" --resource-group \"<resource group>\" --sku \"G2\"\n```\n\n### Authenticate the client\n\nThere are 2 ways to authenticate the client: Shared key authentication and Azure AD.\n\n#### Shared Key Authentication\n\n* Go to Azure Maps account > Authentication tab\n* Copy `Primary Key` or `Secondary Key` under **Shared Key Authentication** section\n\n```C# Snippet:InstantiateSearchClientViaSubscriptionKey\n// Create a SearchClient that will authenticate through Subscription Key (Shared key)\nAzureKeyCredential credential = new AzureKeyCredential(\"<My Subscription Key>\");\nMapsSearchClient client = new MapsSearchClient(credential);\n```\n\n#### Azure AD Authentication\n\nIn order to interact with the Azure Maps service, you'll need to create an instance of the MapsSearchClient class. The Azure Identity library makes it easy to add Azure Active Directory support for authenticating Azure SDK clients with their corresponding Azure services.\n\nTo use AAD authentication, set `TENANT_ID`, `CLIENT_ID`, and `CLIENT_SECRET` to environment variable and call `DefaultAzureCredential()` method to get credential. `CLIENT_ID` and `CLIENT_SECRET` are the service principal ID and secret that can access Azure Maps account.\n\nWe also need **Azure Maps Client ID** which can get from Azure Maps page > Authentication tab > \"Client ID\" in Azure Active Directory Authentication section.\n\n```C# Snippet:InstantiateSearchClientViaAAD\n// Create a MapsSearchClient that will authenticate through AAD\nDefaultAzureCredential credential = new DefaultAzureCredential();\nstring clientId = \"<My Map Account Client Id>\";\nMapsSearchClient client = new MapsSearchClient(credential, clientId);\n```\n\n## Key concepts\n\n`MapsSearchClient` is designed to:\n\n* Communicate with Azure Maps endpoint to query addresses or points of locations\n* Communicate with Azure Maps endpoint to request the geometry data such as a city or country outline for a set of entities\n* Communicate with Azure Maps endpoint to perform a free form search inside a single geometry or many of them\n\nLearn more by viewing our [samples](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/maps/Azure.Maps.Search/tests/Samples)\n\n### Thread safety\n\nWe guarantee that all client instance methods are thread-safe and independent of each other ([guideline](https://azure.github.io/azure-sdk/dotnet_introduction.html#dotnet-service-methods-thread-safety)). This ensures that the recommendation of reusing client instances is always safe, even across threads.\n\n### Additional concepts\n<!-- CLIENT COMMON BAR -->\n[Client options](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#configuring-service-clients-using-clientoptions) |\n[Accessing the response](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#accessing-http-response-details-using-responset) |\n[Long-running operations](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#consuming-long-running-operations-using-operationt) |\n[Handling failures](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#reporting-errors-requestfailedexception) |\n[Diagnostics](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md) |\n[Mocking](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#mocking) |\n[Client lifetime](https://devblogs.microsoft.com/azure-sdk/lifetime-management-and-thread-safety-guarantees-of-azure-sdk-net-clients/)\n<!-- CLIENT COMMON BAR -->\n\n## Examples\n\nYou can familiarize yourself with different APIs using our [samples](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/maps/Azure.Maps.Search/tests/Samples).\n\n### Example Get Polygons\n\n```C# Snippet:GetPolygons\n// Get Addresses\nResponse<SearchAddressResult> searchResult = await client.SearchAddressAsync(\"Seattle\");\n\n// Extract geometry ids from addresses\nstring geometry0Id = searchResult.Value.Results[0].DataSources.Geometry.Id;\nstring geometry1Id = searchResult.Value.Results[1].DataSources.Geometry.Id;\n\n// Extract position coordinates\nGeoPosition positionCoordinates = searchResult.Value.Results[0].Position;\n\n// Get polygons from geometry ids\nPolygonResult polygonResponse = await client.GetPolygonsAsync(new[] { geometry0Id, geometry1Id });\n\n// Get polygons objects\nIReadOnlyList<PolygonObject> polygonList = polygonResponse.Polygons;\n```\n\n### Example Fuzzy Search\n\n```C# Snippet:FuzzySearch\nResponse<SearchAddressResult> fuzzySearchResponse = await client.FuzzySearchAsync(\"coffee\", new FuzzySearchOptions\n{\n    Coordinates = new GeoPosition(121.56, 25.04),\n    Language = SearchLanguage.EnglishUsa\n});\n\n// Print out the possible results\nConsole.WriteLine(\"The possible results for coffee shop:\");\nforeach (SearchAddressResultItem result in fuzzySearchResponse.Value.Results)\n{\n    Console.WriteLine(\"Coordinate: {0}, Address: {1}\",\n        result.Position, result.Address.FreeformAddress);\n}\n```\n\n### Example Reverse Search Cross Street Address\n\n```C# Snippet:ReverseSearchCrossStreetAddress\nvar reverseResult = await client.ReverseSearchCrossStreetAddressAsync(new ReverseSearchCrossStreetOptions\n{\n    Coordinates = new GeoPosition(121.0, 24.0),\n    Language = SearchLanguage.EnglishUsa\n});\n```\n\n### Example Search Structured Address\n\n```C# Snippet:SearchStructuredAddress\nvar address = new StructuredAddress\n{\n    CountryCode = \"US\",\n    StreetNumber = \"15127\",\n    StreetName = \"NE 24th Street\",\n    Municipality = \"Redmond\",\n    CountrySubdivision = \"WA\",\n    PostalCode = \"98052\"\n};\nResponse<SearchAddressResult> searchResult = await client.SearchStructuredAddressAsync(address);\n\nSearchAddressResultItem resultItem = searchResult.Value.Results[0];\nConsole.WriteLine(\"First result - Coordinate: {0}, Address: {1}\",\n    resultItem.Position, resultItem.Address.FreeformAddress);\n```\n\n### Example Search Inside Geometry\n\n```C# Snippet:SearchInsideGeometry\nGeoPolygon sfPolygon = new GeoPolygon(new[]\n{\n    new GeoPosition(-122.43576049804686, 37.752415234354402),\n    new GeoPosition(-122.4330139160, 37.706604725423119),\n    new GeoPosition(-122.36434936523438, 37.712059855877314),\n    new GeoPosition(-122.43576049804686, 37.7524152343544)\n});\n\nGeoPolygon taipeiPolygon = new GeoPolygon(new[]\n{\n    new GeoPosition(121.56, 25.04),\n    new GeoPosition(121.565, 25.04),\n    new GeoPosition(121.565, 25.045),\n    new GeoPosition(121.56, 25.045),\n    new GeoPosition(121.56, 25.04)\n});\n\n// Search coffee shop in Both polygons, return results in en-US\nResponse<SearchAddressResult> searchResponse = await client.SearchInsideGeometryAsync(\"coffee\", new GeoCollection(new[] { sfPolygon, taipeiPolygon }), new SearchInsideGeometryOptions\n{\n    Language = SearchLanguage.EnglishUsa\n});\n\n// Get Taipei Cafe and San Francisco cafe and print first place\nSearchAddressResultItem taipeiCafe = searchResponse.Value.Results.Where(addressItem => addressItem.SearchAddressResultType == \"POI\" && addressItem.Address.Municipality == \"Taipei City\").First();\nSearchAddressResultItem sfCafe = searchResponse.Value.Results.Where(addressItem => addressItem.SearchAddressResultType == \"POI\" && addressItem.Address.Municipality == \"San Francisco\").First();\n\nConsole.WriteLine(\"Possible Coffee shop in the Polygons:\");\nConsole.WriteLine(\"Coffee shop address in Taipei: {0}\", taipeiCafe.Address.FreeformAddress);\nConsole.WriteLine(\"Coffee shop address in San Francisco: {0}\", sfCafe.Address.FreeformAddress);\n```\n\n### Example Search Address\n\n```C# Snippet:SearchAddress\nResponse<SearchAddressResult> searchResult = await client.SearchAddressAsync(\"Seattle\");\n\nSearchAddressResultItem resultItem = searchResult.Value.Results[0];\nConsole.WriteLine(\"First result - Coordinate: {0}, Address: {1}\",\n    resultItem.Position, resultItem.Address.FreeformAddress);\n```\n\n## Troubleshooting\n\n### General\n\nWhen you interact with the Azure Maps Services, errors returned by the Language service correspond to the same HTTP status codes returned for REST API requests.\n\nFor example, if you try to search with invalid coordinates, a error is returned, indicating \"Bad Request\".400\n\n## Next steps\n\n* [More samples](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/maps/Azure.Maps.Search/samples)\n\n## Contributing\n\nSee the [CONTRIBUTING.md](https://github.com/Azure/azure-sdk-for-net/blob/main/CONTRIBUTING.md) for details on building, testing, and contributing to this library.\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact <opencode@microsoft.com> with any additional questions or comments.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net/sdk/maps/Azure.Maps.Search/README.png)\n",
        "repo_name": "maps/Azure.Maps.Search",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/maps/Azure.Maps.Search",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Maps management client library for .NET\n\nMicrosoft Azure Maps is a suite of geospatial services that help organizations easily incorporate location-based data into web and mobile solutions. Use location and map data to generate insights, inform data-driven decisions, enhance security, and improve customer experiences.\n\nThis library supports managing Microsoft Azure Maps resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Maps management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.Maps\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "maps/Azure.ResourceManager.Maps",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/maps/Azure.ResourceManager.Maps",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Marketplace management client library for .NET\n\nMicrosoft Azure Marketplace is an online store that contains thousands of IT software applications and services built by industry-leading technology companies. \n\nThis library supports managing Microsoft Azure Marketplace resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Marketplace management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.Marketplace\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "marketplace/Azure.ResourceManager.Marketplace",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/marketplace/Azure.ResourceManager.Marketplace",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Marketplace Ordering management client library for .NET\n\nThis library supports managing Microsoft Azure Marketplace Ordering resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Marketplace Ordering management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.MarketplaceOrdering\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "marketplaceordering/Azure.ResourceManager.MarketplaceOrdering",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/marketplaceordering/Azure.ResourceManager.MarketplaceOrdering",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Media management client library for .NET\n\nMicrosoft Azure Media Services is a cloud-based platform that enables you to build solutions that achieve broadcast-quality video streaming, enhance accessibility and distribution, analyze content, and much more. \n\nThis library supports managing Microsoft Azure Marketplace Ordering resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Media management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.Media\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "mediaservices/Azure.ResourceManager.Media",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/mediaservices/Azure.ResourceManager.Media",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Metrics Advisor client library for .NET\n\nAzure Cognitive Services Metrics Advisor is a cloud service that uses machine learning to monitor and detect anomalies in time series data. It includes the following capabilities:\n\n- Analyze multi-dimensional data from multiple data sources.\n- Identify and correlate anomalies.\n- Configure and fine-tune the anomaly detection model used on your data.\n- Diagnose anomalies and help with root cause analysis.\n\n[Source code][metricsadv_client_src] | [Package (NuGet)][metricsadv_nuget_package] | [API reference documentation][metricsadv_refdocs] | [Product documentation][metricsadv_docs] | [Samples][metricsadv_samples]\n\n## Getting started\n\n### Install the package\n\nInstall the Azure Metrics Advisor client library for .NET with [NuGet][nuget]:\n\n```dotnetcli\ndotnet add package Azure.AI.MetricsAdvisor\n```\n\n### Prerequisites\n\n* An [Azure subscription][azure_sub].\n* An existing Metrics Advisor resource.\n\n#### Create a Metrics Advisor resource\n\nYou can create a Metrics Advisor resource using:\n\n**Option 1**: [Azure Portal][cognitive_resource_portal].\n\n**Option 2**: [Azure CLI][cognitive_resource_cli].\n\nBelow is an example of how you can create a Metrics Advisor resource using the CLI:\n\n```PowerShell\n# Create a new resource group to hold the Metrics Advisor resource.\n# If using an existing resource group, skip this step.\naz group create --name <your-resource-name> --location <location>\n```\n\n```PowerShell\n# Create the Metrics Advisor resource.\naz cognitiveservices account create \\\n    --name <your-resource-name> \\\n    --resource-group <your-resource-group-name> \\\n    --kind MetricsAdvisor \\\n    --sku <sku> \\\n    --location <location>\n    --yes\n```\n\nFor more information about creating the resource or how to get the location and sku information see [here][cognitive_resource_cli].\n\n### Authenticate the client\n\nIn order to interact with the Metrics Advisor service, you'll need to create an instance of the [`MetricsAdvisorClient`][metrics_advisor_client_class] or the [`MetricsAdvisorAdministrationClient`][metrics_advisor_admin_client_class] classes. You will need an **endpoint**, a **subscription key**, and an **API key** to instantiate a client object.\n\n#### Get the Endpoint and the Subscription Key\n\nYou can obtain the endpoint and the subscription key from the resource information in the [Azure Portal][azure_portal].\n\nAlternately, you can use the [Azure CLI][azure_cli] snippet below to get the subscription key from the Metrics Advisor resource.\n\n```Powershell\naz cognitiveservices account keys list --resource-group <your-resource-group-name> --name <your-resource-name>\n```\n\n#### Get the API Key\n\nYou can obtain the API key in the [Metrics Advisor Web Portal][metricsadv_web_portal]. You'll be prompted to login for authentication.\n\nOnce logged in, fill in your Azure Active Directory, Subscription and Metrics Advisor resource name.\n\n#### Create a MetricsAdvisorClient or a MetricsAdvisorAdministrationClient\n\nOnce you have the subscription and API keys, create a `MetricsAdvisorKeyCredential`. With the endpoint and the key credential, you can create a [`MetricsAdvisorClient`][metrics_advisor_client_class]:\n\n```C# Snippet:CreateMetricsAdvisorClient\nstring endpoint = \"<endpoint>\";\nstring subscriptionKey = \"<subscriptionKey>\";\nstring apiKey = \"<apiKey>\";\nvar credential = new MetricsAdvisorKeyCredential(subscriptionKey, apiKey);\nvar client = new MetricsAdvisorClient(new Uri(endpoint), credential);\n```\n\nYou can also create a [`MetricsAdvisorAdministrationClient`][metrics_advisor_admin_client_class] to perform administration operations:\n\n```C# Snippet:CreateMetricsAdvisorAdministrationClient\nstring endpoint = \"<endpoint>\";\nstring subscriptionKey = \"<subscriptionKey>\";\nstring apiKey = \"<apiKey>\";\nvar credential = new MetricsAdvisorKeyCredential(subscriptionKey, apiKey);\nvar adminClient = new MetricsAdvisorAdministrationClient(new Uri(endpoint), credential);\n```\n\n#### Create a MetricsAdvisorClient or a MetricsAdvisorAdministrationClient with Azure Active Directory\n\n`MetricsAdvisorKeyCredential` authentication is used in the examples in this getting started guide, but you can also authenticate with Azure Active Directory using the [Azure Identity library][azure_identity].\n\nTo use the [DefaultAzureCredential][DefaultAzureCredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `Azure.Identity` package:\n\n```dotnetcli\ndotnet add package Azure.Identity\n```\n\nYou will also need to [register a new AAD application][register_aad_app] and [grant access][aad_grant_access] to Metrics Advisor by assigning the `\"Cognitive Services Metrics Advisor User\"` role to your service principal. You may want to assign the `\"Cognitive Services Metrics Advisor Administrator\"` role instead if administrator privileges are required.\n\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: AZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET.\n\nOnce you have the environment variables set, you can create a [`MetricsAdvisorClient`][metrics_advisor_client_class]:\n\n```C# Snippet:CreateMetricsAdvisorClientWithAad\nstring endpoint = \"<endpoint>\";\nvar client = new MetricsAdvisorClient(new Uri(endpoint), new DefaultAzureCredential());\n```\n\nAlternately, you can also create a [`MetricsAdvisorAdministrationClient`][metrics_advisor_admin_client_class] to perform administration operations:\n\n```C# Snippet:CreateMetricsAdvisorAdministrationClientWithAad\nstring endpoint = \"<endpoint>\";\nvar adminClient = new MetricsAdvisorAdministrationClient(new Uri(endpoint), new DefaultAzureCredential());\n```\n\n## Key concepts\n\n### MetricsAdvisorClient\n\n`MetricsAdvisorClient` is the primary querying interface for developers using the Metrics Advisor client library. It provides synchronous and asynchronous methods to access a specific use of Metrics Advisor, such as listing incidents, retrieving root causes of incidents, and retrieving time series data.\n\n### MetricsAdvisorAdministrationClient\n\n`MetricsAdvisorAdministrationClient` is the interface responsible for managing entities in the Metrics Advisor resource. It provides synchronous and asynchronous methods for tasks such as creating and updating data feeds, anomaly detection configurations, and anomaly alert configurations.\n\n### Data Feed\n\nA `DataFeed` periodically ingests tables of aggregated data from your data source, such as CosmosDB or a SQL server, and makes it available for the Metrics Advisor service. It's the entry point of data, and therefore, the first required agent to be set before anomaly detection can take place. See the sample [Create a data feed from a data source](#create-a-data-feed-from-a-data-source) below for more information.\n\n### Data Feed Metric\n\nA `DataFeedMetric`, or simply \"metric\", is a quantifiable measure used to monitor an assess the status of a specific business process. It could be the cost of a product over the months, or even a daily measure of temperature. The service will monitor how this value varies over time in search of any anomalous behavior. A [data feed](#data-feed) can ingest multiple metrics from the same data source.\n\n### Data Feed Dimension\n\nA `DataFeedDimension`, or simply \"dimension\", is a categorical value that characterize a [metric](#data-feed-metric). For instance, if a metric represents the cost of a product, the type of product (e.g., shoes, hats) and the city in which these values were measured (e.g., New York, Tokyo) could be used as a dimension. The combination of multiple dimensions identify a particular univariate [time series](#time-series).\n\n### Time Series\n\nA time series is a sequence of data points indexed chronologically. These data points describe the variation of the value of a [metric](#data-feed-metric) over time.\n\nGiven a metric, the Metrics Advisor service creates one series for every possible combination of [dimension](#data-feed-dimension) values, which means that multiple time series can be monitored for the same metric.\n\nFor example, suppose the following columns of data are returned by your data source:\n\n|   City   | Category |   Cost  | Revenue |\n| -------- | -------- | ------- | ------- |\n| New York |  Shoes   | 1045.00 | 1345.00 |\n| New York |   Hats   |  670.00 |  502.00 |\n|   Delhi  |  Shoes   |  991.00 | 1009.00 |\n|   Delhi  |   Hats   |  623.00 |  711.00 |\n\nCost and revenue are the metrics you want the service to monitor, while city and category are the dimensions that characterize those metrics. There are 4 possible dimension combinations in this data:\n\n- City = New York, Category = Shoes\n- City = New York, Category = Hats\n- City = Delhi, Category = Shoes\n- City = Delhi, Category = Hats\n\nFor each metric, the service will create 4 time series to monitor data, each one representing one possible dimension combination. Every time a data source ingestion happens, these series will be updated with a new data point, if available in the newly ingested data.\n\n### Data Point Anomaly\n\nA `DataPointAnomaly`, or simply \"anomaly\", occurs when a data point in a [time series](#time-series) behaves unexpectedly. It may occur when a data point value is too high or too low, or when its value changes abruptly between close points. You can specify the conditions a data point must satisfy to be considered an anomaly with an `AnomalyDetectionConfiguration`. After data ingestion happens, the service applies all existing configurations to the set of new points in search of anomalies. See the sample [Create an anomaly detection configuration](#create-an-anomaly-detection-configuration) below for more information.\n\n### Anomaly Incident\n\nWhen there are [anomalies](#data-point-anomaly) detected on multiple [time series](#time-series) within one [metric](#data-feed-metric) at a particular timestamp, the Metrics Advisor service will automatically group anomalies that share the same root cause into one `AnomalyIncident`, or simply \"incident\". This will significantly remove the effort to check each individual anomaly and quickly finds the most important contributing factor to an issue.\n\n### Anomaly Alert\n\nAn `AnomalyAlert`, or simply \"alert\", is triggered when a detected [anomaly](#data-point-anomaly) meets a specified criteria. For instance, an alert could be triggered every time an anomaly with high severity is detected. You can specify the conditions an anomaly must satisfy to trigger an alert with an `AnomalyAlertConfiguration`. After anomaly detection is performed over newly ingested data points, the service applies all existing configurations to the new anomalies, and each configuration fires a single alert for the set of points satisfying the specified criteria. Alert configurations are not set by default, so you need to create one in order to start triggering alerts. See the sample [Create an anomaly alert configuration](#create-an-anomaly-alert-configuration) below for more information.\n\n### Notification Hook\n\nA `NotificationHook`, or simply \"hook\", is a means of subscribing to [alert](#anomaly-alert) notifications. You can pass a hook to an `AnomalyAlertConfiguration` and start getting notifications for every alert it creates. See the sample [Create a hook for receiving anomaly alerts](#create-a-hook-for-receiving-anomaly-alerts) below for more information.\n\n### Thread safety\nWe guarantee that all client instance methods are thread-safe and independent of each other ([guideline](https://azure.github.io/azure-sdk/dotnet_introduction.html#dotnet-service-methods-thread-safety)). This ensures that the recommendation of reusing client instances is always safe, even across threads.\n\n### Additional concepts\n<!-- CLIENT COMMON BAR -->\n[Client options](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#configuring-service-clients-using-clientoptions) |\n[Accessing the response](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#accessing-http-response-details-using-responset) |\n[Handling failures](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#reporting-errors-requestfailedexception) |\n[Diagnostics](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md) |\n[Mocking](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#mocking) |\n[Client lifetime](https://devblogs.microsoft.com/azure-sdk/lifetime-management-and-thread-safety-guarantees-of-azure-sdk-net-clients/)\n<!-- CLIENT COMMON BAR -->\n\n## Examples\n\nThe following section provides several code snippets illustrating common patterns used in the Metrics Advisor .NET API. The snippets below make use of asynchronous service calls, but note that the Azure.AI.MetricsAdvisor package supports both synchronous and asynchronous APIs.\n\n* [Create a data feed from a data source](#create-a-data-feed-from-a-data-source)\n* [Other data source authentication alternatives](#other-data-source-authentication-alternatives)\n* [Check the ingestion status of a data feed](#check-the-ingestion-status-of-a-data-feed)\n* [Create an anomaly detection configuration](#create-an-anomaly-detection-configuration)\n* [Create a hook for receiving anomaly alerts](#create-a-hook-for-receiving-anomaly-alerts)\n* [Create an anomaly alert configuration](#create-an-anomaly-alert-configuration)\n* [Query detected anomalies and triggered alerts](#query-detected-anomalies-and-triggered-alerts)\n\n### Create a data feed from a data source\n\nMetrics Advisor supports multiple types of data sources. In this sample we'll illustrate how to create a [`DataFeed`](#data-feed) that extracts data from a SQL server.\n\n```C# Snippet:CreateDataFeedAsync\nstring sqlServerConnectionString = \"<connectionString>\";\nstring sqlServerQuery = \"<query>\";\n\nvar dataFeed = new DataFeed();\n\ndataFeed.Name = \"<dataFeedName>\";\ndataFeed.DataSource = new SqlServerDataFeedSource(sqlServerConnectionString, sqlServerQuery);\ndataFeed.Granularity = new DataFeedGranularity(DataFeedGranularityType.Daily);\n\ndataFeed.Schema = new DataFeedSchema();\ndataFeed.Schema.MetricColumns.Add(new DataFeedMetric(\"cost\"));\ndataFeed.Schema.MetricColumns.Add(new DataFeedMetric(\"revenue\"));\ndataFeed.Schema.DimensionColumns.Add(new DataFeedDimension(\"category\"));\ndataFeed.Schema.DimensionColumns.Add(new DataFeedDimension(\"region\"));\n\ndataFeed.IngestionSettings = new DataFeedIngestionSettings(DateTimeOffset.Parse(\"2020-01-01T00:00:00Z\"));\n\nResponse<DataFeed> response = await adminClient.CreateDataFeedAsync(dataFeed);\n\nDataFeed createdDataFeed = response.Value;\n\nConsole.WriteLine($\"Data feed ID: {createdDataFeed.Id}\");\nConsole.WriteLine($\"Data feed status: {createdDataFeed.Status.Value}\");\nConsole.WriteLine($\"Data feed created time: {createdDataFeed.CreatedOn.Value}\");\n\nConsole.WriteLine($\"Data feed administrators:\");\nforeach (string admin in createdDataFeed.Administrators)\n{\n    Console.WriteLine($\" - {admin}\");\n}\n\nConsole.WriteLine($\"Metric IDs:\");\nforeach (DataFeedMetric metric in createdDataFeed.Schema.MetricColumns)\n{\n    Console.WriteLine($\" - {metric.Name}: {metric.Id}\");\n}\n\nConsole.WriteLine($\"Dimensions:\");\nforeach (DataFeedDimension dimension in createdDataFeed.Schema.DimensionColumns)\n{\n    Console.WriteLine($\" - {dimension.Name}\");\n}\n```\n\n### Other data source authentication alternatives\n\nSome data sources support multiple types of authentication. For example, a `SqlServerDataFeedSource` supports connection string, Service Principal, and managed identity. You can check the complete list of data sources and their types of authentication [here][metricsadv_authentication].\n\nOnce you've made sure that your data source supports the authentication you want to use, you need to set the `Authentication` property when creating or updating the data source:\n\n```C# Snippet:SettingAuthentication\nvar dataSoure = new SqlServerDataFeedSource(\"<connection-string>\", \"<query>\")\n{\n    Authentication = SqlServerDataFeedSource.AuthenticationType.ManagedIdentity\n};\n```\n\nBe aware that, except for the `Basic` and `ManagedIdentity` types of authentication, you also need to have the ID of a corresponding `DataSourceCredentialEntity` in the service. In order to create a credential entity, you need to do:\n\n```C# Snippet:CreateDataSourceCredentialAsync\nstring credentialName = \"<credentialName>\";\n\nvar credentialEntity = new ServicePrincipalCredentialEntity(credentialName, \"<clientId>\", \"<clientSecret>\", \"<tenantId>\");\n\nResponse<DataSourceCredentialEntity> response = await adminClient.CreateDataSourceCredentialAsync(credentialEntity);\n\nDataSourceCredentialEntity createdCredentialEntity = response.Value;\n\nConsole.WriteLine($\"Credential entity ID: {createdCredentialEntity.Id}\");\n```\n\nOnce you have the ID, add it to the `DataSourceCredentialId` property when setting up your data source:\n\n```C# Snippet:SettingCredentialAuthentication\nvar dataSoure = new SqlServerDataFeedSource(\"<connection-string>\", \"<query>\")\n{\n    Authentication = SqlServerDataFeedSource.AuthenticationType.ServicePrincipal,\n    DataSourceCredentialId = \"<credentialId>\"\n};\n```\n\n### Check the ingestion status of a data feed\n\nCheck the ingestion status of a previously created [`DataFeed`](#data-feed).\n\n```C# Snippet:GetDataFeedIngestionStatusesAsync\nstring dataFeedId = \"<dataFeedId>\";\n\nvar startsOn = DateTimeOffset.Parse(\"2020-01-01T00:00:00Z\");\nvar endsOn = DateTimeOffset.Parse(\"2020-09-09T00:00:00Z\");\nvar options = new GetDataFeedIngestionStatusesOptions(startsOn, endsOn)\n{\n    MaxPageSize = 5\n};\n\nConsole.WriteLine(\"Ingestion statuses:\");\nConsole.WriteLine();\n\nint statusCount = 0;\n\nawait foreach (DataFeedIngestionStatus ingestionStatus in adminClient.GetDataFeedIngestionStatusesAsync(dataFeedId, options))\n{\n    Console.WriteLine($\"Timestamp: {ingestionStatus.Timestamp}\");\n    Console.WriteLine($\"Status: {ingestionStatus.Status}\");\n    Console.WriteLine($\"Service message: {ingestionStatus.Message}\");\n    Console.WriteLine();\n\n    // Print at most 5 statuses.\n    if (++statusCount >= 5)\n    {\n        break;\n    }\n}\n```\n\n### Create an anomaly detection configuration\n\nCreate an [`AnomalyDetectionConfiguration`](#data-point-anomaly) to tell the service which data points should be considered anomalies.\n\n```C# Snippet:CreateDetectionConfigurationAsync\nstring metricId = \"<metricId>\";\nstring configurationName = \"<configurationName>\";\n\nvar detectionConfiguration = new AnomalyDetectionConfiguration()\n{\n    MetricId = metricId,\n    Name = configurationName,\n    WholeSeriesDetectionConditions = new MetricWholeSeriesDetectionCondition()\n};\n\nvar detectCondition = detectionConfiguration.WholeSeriesDetectionConditions;\n\nvar hardSuppress = new SuppressCondition(1, 100);\ndetectCondition.HardThresholdCondition = new HardThresholdCondition(AnomalyDetectorDirection.Down, hardSuppress)\n{\n    LowerBound = 5.0\n};\n\nvar smartSuppress = new SuppressCondition(4, 50);\ndetectCondition.SmartDetectionCondition = new SmartDetectionCondition(10.0, AnomalyDetectorDirection.Up, smartSuppress);\n\ndetectCondition.ConditionOperator = DetectionConditionOperator.Or;\n\nResponse<AnomalyDetectionConfiguration> response = await adminClient.CreateDetectionConfigurationAsync(detectionConfiguration);\n\nAnomalyDetectionConfiguration createdDetectionConfiguration = response.Value;\n\nConsole.WriteLine($\"Anomaly detection configuration ID: {createdDetectionConfiguration.Id}\");\n```\n\n### Create a hook for receiving anomaly alerts\n\nMetrics Advisor supports the [`EmailNotificationHook`](#notification-hook) and the [`WebNotificationHook`](#notification-hook) classes as means of subscribing to [alert](#anomaly-alert) notifications. In this example we'll illustrate how to create an `EmailNotificationHook`. Note that you need to pass the hook to an anomaly alert configuration to start getting notifications. See the sample [Create an anomaly alert configuration](#create-an-anomaly-alert-configuration) below for more information.\n\n```C# Snippet:CreateHookAsync\nstring hookName = \"<hookName>\";\n\nvar emailHook = new EmailNotificationHook(hookName);\n\nemailHook.EmailsToAlert.Add(\"email1@sample.com\");\nemailHook.EmailsToAlert.Add(\"email2@sample.com\");\n\nResponse<NotificationHook> response = await adminClient.CreateHookAsync(emailHook);\n\nNotificationHook createdHook = response.Value;\n\nConsole.WriteLine($\"Hook ID: {createdHook.Id}\");\n```\n\n### Create an anomaly alert configuration\n\nCreate an [`AnomalyAlertConfiguration`](#anomaly-alert) to tell the service which anomalies should trigger alerts.\n\n```C# Snippet:CreateAlertConfigurationAsync\nstring hookId = \"<hookId>\";\nstring anomalyDetectionConfigurationId = \"<anomalyDetectionConfigurationId>\";\nstring configurationName = \"<configurationName>\";\n\nAnomalyAlertConfiguration alertConfiguration = new AnomalyAlertConfiguration()\n{\n    Name = configurationName\n};\n\nalertConfiguration.IdsOfHooksToAlert.Add(hookId);\n\nvar scope = MetricAnomalyAlertScope.CreateScopeForWholeSeries();\nvar metricAlertConfiguration = new MetricAlertConfiguration(anomalyDetectionConfigurationId, scope);\n\nalertConfiguration.MetricAlertConfigurations.Add(metricAlertConfiguration);\n\nResponse<AnomalyAlertConfiguration> response = await adminClient.CreateAlertConfigurationAsync(alertConfiguration);\n\nAnomalyAlertConfiguration createdAlertConfiguration = response.Value;\n\nConsole.WriteLine($\"Alert configuration ID: {createdAlertConfiguration.Id}\");\n```\n\n### Query detected anomalies and triggered alerts\n\nLook through the [alerts](#anomaly-alert) created by a given anomaly alert configuration.\n\n```C# Snippet:GetAlertsAsync\nstring anomalyAlertConfigurationId = \"<anomalyAlertConfigurationId>\";\n\nvar startsOn = DateTimeOffset.Parse(\"2020-01-01T00:00:00Z\");\nvar endsOn = DateTimeOffset.UtcNow;\nvar options = new GetAlertsOptions(startsOn, endsOn, AlertQueryTimeMode.AnomalyDetectedOn)\n{\n    MaxPageSize = 5\n};\n\nint alertCount = 0;\n\nawait foreach (AnomalyAlert alert in client.GetAlertsAsync(anomalyAlertConfigurationId, options))\n{\n    Console.WriteLine($\"Alert created at: {alert.CreatedOn}\");\n    Console.WriteLine($\"Alert at timestamp: {alert.Timestamp}\");\n    Console.WriteLine($\"Id: {alert.Id}\");\n    Console.WriteLine();\n\n    // Print at most 5 alerts.\n    if (++alertCount >= 5)\n    {\n        break;\n    }\n}\n```\n\nOnce you know an alert's ID, list the [anomalies](#data-point-anomaly) that triggered this alert.\n\n```C# Snippet:GetAnomaliesForAlertAsync\nstring alertConfigurationId = \"<alertConfigurationId>\";\nstring alertId = \"<alertId>\";\n\nvar options = new GetAnomaliesForAlertOptions() { MaxPageSize = 3 };\n\nint anomalyCount = 0;\n\nawait foreach (DataPointAnomaly anomaly in client.GetAnomaliesForAlertAsync(alertConfigurationId, alertId, options))\n{\n    Console.WriteLine($\"Anomaly detection configuration ID: {anomaly.DetectionConfigurationId}\");\n    Console.WriteLine($\"Data feed ID: {anomaly.DataFeedId}\");\n    Console.WriteLine($\"Metric ID: {anomaly.MetricId}\");\n    Console.WriteLine($\"Anomaly value: {anomaly.Value}\");\n\n    if (anomaly.ExpectedValue.HasValue)\n    {\n        Console.WriteLine($\"Anomaly expected value: {anomaly.ExpectedValue}\");\n    }\n\n    Console.WriteLine($\"Anomaly at timestamp: {anomaly.Timestamp}\");\n    Console.WriteLine($\"Anomaly detected at: {anomaly.CreatedOn}\");\n    Console.WriteLine($\"Status: {anomaly.Status}\");\n    Console.WriteLine($\"Severity: {anomaly.Severity}\");\n    Console.WriteLine(\"Series key:\");\n\n    foreach (KeyValuePair<string, string> dimension in anomaly.SeriesKey)\n    {\n        Console.WriteLine($\"  Dimension '{dimension.Key}': {dimension.Value}\");\n    }\n\n    Console.WriteLine();\n\n    // Print at most 3 anomalies.\n    if (++anomalyCount >= 3)\n    {\n        break;\n    }\n}\n```\n\n## Troubleshooting\n\n### General\n\nWhen you interact with the Cognitive Services Metrics Advisor client library using the .NET SDK, errors returned by the service will result in a `RequestFailedException` with the same HTTP status code returned by the [REST API][metricsadv_rest_api] request.\n\nFor example, if you try to get a data feed from the service with a non-existent ID, a `404` error is returned, indicating \"Not Found\".\n\n```C# Snippet:MetricsAdvisorNotFound\nstring dataFeedId = \"00000000-0000-0000-0000-000000000000\";\n\ntry\n{\n    Response<DataFeed> response = await adminClient.GetDataFeedAsync(dataFeedId);\n}\ncatch (RequestFailedException ex)\n{\n    Console.WriteLine(ex.ToString());\n}\n```\n\nNote that additional information is logged, such as the error message returned by the service.\n\n```\nAzure.RequestFailedException: Service request failed.\nStatus: 404 (Not Found)\n\nContent:\n{\"code\":\"ERROR_INVALID_PARAMETER\",\"message\":\"datafeedId is invalid.\"}\n\nHeaders:\nX-Request-ID: REDACTED\nx-envoy-upstream-service-time: REDACTED\napim-request-id: REDACTED\nStrict-Transport-Security: REDACTED\nX-Content-Type-Options: REDACTED\nDate: Thu, 08 Oct 2020 09:04:31 GMT\nContent-Length: 69\nContent-Type: application/json; charset=utf-8\n```\n\n### Setting up console logging\n\nThe simplest way to see the logs is to enable console logging.\n\nTo create an Azure SDK log listener that outputs messages to the console use the `AzureEventSourceListener.CreateConsoleLogger` method.\n\n```C#\n// Set up a listener to monitor logged events.\nusing AzureEventSourceListener listener = AzureEventSourceListener.CreateConsoleLogger();\n```\n\nTo learn more about other logging mechanisms see [Diagnostics Samples][logging].\n\n## Next steps\n\nSamples showing how to use the Cognitive Services Metrics Advisor library are available in this GitHub repository. Samples are provided for each main functional area:\n\n- [Data feed CRUD operations][metricsadv-sample1]\n- [Credential entity CRUD operations][metricsadv-sample2]\n- [Data feed ingestion operations][metricsadv-sample3]\n- [Anomaly detection configuration CRUD operations][metricsadv-sample4]\n- [Hook CRUD operations][metricsadv-sample5]\n- [Anomaly alert configuration CRUD operations][metricsadv-sample6]\n- [Query triggered alerts][metricsadv-sample7]\n- [Query detected anomalies][metricsadv-sample8]\n- [Query incidents and their root causes][metricsadv-sample9]\n- [Query time series information][metricsadv-sample10]\n- [Feedback CRUD operations][metricsadv-sample11]\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [cla.microsoft.com][cla].\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2Fsdk%2Fmetricsadvisor%2FAzure.AI.MetricsAdvisor%2FREADME.png)\n\n<!-- LINKS -->\n[metricsadv_client_src]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/metricsadvisor/Azure.AI.MetricsAdvisor/src\n[metricsadv_docs]: https://docs.microsoft.com/azure/cognitive-services/metrics-advisor\n[metricsadv_nuget_package]: https://www.nuget.org/packages/Azure.AI.MetricsAdvisor\n[metricsadv_refdocs]: https://aka.ms/azsdk/net/docs/ref/metricsadvisor\n[metricsadv_rest_api]: https://westus2.dev.cognitive.microsoft.com/docs/services/MetricsAdvisor\n[metricsadv_samples]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/metricsadvisor/Azure.AI.MetricsAdvisor/samples/README.md\n[metricsadv_web_portal]: https://metricsadvisor.azurewebsites.net\n\n[metrics_advisor_admin_client_class]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/metricsadvisor/Azure.AI.MetricsAdvisor/src/MetricsAdvisorAdministrationClient.cs\n[metrics_advisor_client_class]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/metricsadvisor/Azure.AI.MetricsAdvisor/src/MetricsAdvisorClient.cs\n\n[metricsadv-sample1]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/metricsadvisor/Azure.AI.MetricsAdvisor/tests/Samples/Sample01_DataFeedCrudOperations.cs\n[metricsadv-sample2]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/metricsadvisor/Azure.AI.MetricsAdvisor/tests/Samples/Sample02_CredentialEntityCrudOperations.cs\n[metricsadv-sample3]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/metricsadvisor/Azure.AI.MetricsAdvisor/tests/Samples/Sample03_DataFeedIngestionOperations.cs\n[metricsadv-sample4]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/metricsadvisor/Azure.AI.MetricsAdvisor/tests/Samples/Sample04_DetectionConfigurationCrudOperations.cs\n[metricsadv-sample5]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/metricsadvisor/Azure.AI.MetricsAdvisor/tests/Samples/Sample05_HookCrudOperations.cs\n[metricsadv-sample6]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/metricsadvisor/Azure.AI.MetricsAdvisor/tests/Samples/Sample06_AlertConfigurationCrudOperations.cs\n[metricsadv-sample7]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/metricsadvisor/Azure.AI.MetricsAdvisor/tests/Samples/Sample07_QueryTriggeredAlerts.cs\n[metricsadv-sample8]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/metricsadvisor/Azure.AI.MetricsAdvisor/tests/Samples/Sample08_QueryDetectedAnomalies.cs\n[metricsadv-sample9]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/metricsadvisor/Azure.AI.MetricsAdvisor/tests/Samples/Sample09_QueryIncidentsAndRootCauses.cs\n[metricsadv-sample10]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/metricsadvisor/Azure.AI.MetricsAdvisor/tests/Samples/Sample10_QueryTimeSeriesInformation.cs\n[metricsadv-sample11]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/metricsadvisor/Azure.AI.MetricsAdvisor/tests/Samples/Sample11_FeedbackCrudOperations.cs\n\n[aad_grant_access]: https://docs.microsoft.com/azure/cognitive-services/authentication#assign-a-role-to-a-service-principal\n[azure_identity]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md\n[cognitive_resource_cli]: https://docs.microsoft.com/azure/cognitive-services/cognitive-services-apis-create-account-cli\n[cognitive_resource_portal]: https://docs.microsoft.com/azure/cognitive-services/cognitive-services-apis-create-account\n[DefaultAzureCredential]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md#defaultazurecredential\n[register_aad_app]: https://docs.microsoft.com/azure/cognitive-services/authentication#assign-a-role-to-a-service-principal\n\n[metricsadv_authentication]: https://aka.ms/metricsadvisor/authentication\n\n[logging]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/core/Azure.Core/samples/Diagnostics.md\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_portal]: https://portal.azure.com\n[azure_sub]: https://azure.microsoft.com/free/dotnet/\n[nuget]: https://www.nuget.org\n\n[cla]: https://cla.microsoft.com\n[coc_contact]: mailto:opencode@microsoft.com\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct\n",
        "repo_name": "metricsadvisor/Azure.AI.MetricsAdvisor",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/metricsadvisor/Azure.AI.MetricsAdvisor",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "## Microsoft.Azure.Services.AppAuthentication Library\n\n> ### \u26a0\ufe0fDeprecation Notice\u26a0\ufe0f\n> This library is now deprecated and has been replaced with the [Azure Identity client library](https://www.nuget.org/packages/Azure.Identity) available for .NET, Java, TypeScript and Python and should be used for all new development. Information about how to migrate to Azure.Identity can be found here: [AppAuthentication to Azure.Identity Migration Guidance](https://docs.microsoft.com/dotnet/api/overview/azure/app-auth-migration).\n\n### Purpose\nMake it easy to authenticate to Azure Services (that support Azure AD Authentication), and help avoid credentials in source code and configuration files. \n\nEnables a service to authenticate to Azure services using the developer's Azure Active Directory/ Microsoft account during development, and authenticate as itself (using OAuth 2.0 Client Credentials flow) when deployed to Azure. This reduces the need to manually create and distribute Azure AD App Credentials amongst developers in the team, which is both cumbersome, and increases the risk of compromise of credentials. \n\nProvides a layer of abstraction over \"get access token\" to call Azure services (for service-to-service authentication scenarios), allowing for use of Visual Studio, Azure CLI, or Integrated Windows Authentication for local development, \nand automatic switch to use of Managed Service Identity (MSI) when deployed to Azure (App Service or Azure VM), without any code or configuration change. It also supports use of service principals for scenarios where MSI is not available, or where the developer's security context cannot be used during local development. \n\n### Documentation\nDocumentation can be found [here](https://go.microsoft.com/fwlink/p/?linkid=862452).\n\n### Samples\n1. [Fetch a secret from Azure Key Vault at run-time from an App Service with a Managed Service Identity (MSI).](https://github.com/Azure-Samples/app-service-msi-keyvault-dotnet)\n2. [Programmatically deploy an ARM template from an Azure VM with a Managed Service Identity (MSI).](https://github.com/Azure-Samples/windowsvm-msi-arm-dotnet)\n3. [.NET Core sample to programmatically call Azure Services from an Azure Linux VM with a Managed Service Identity.](https://github.com/Azure-Samples/linuxvm-msi-keyvault-arm-dotnet/)\n\n### Code organization\nThe library is organized in these layers:\n1. Calling application will call AzureServiceTokenProvider to get an access token to call an Azure Service. \n2. AzureServiceTokenProvider will check if the token is available in a global in-memory cache. If so, will return it. \n3. If not in cache, AzureServiceTokenProvider will call the next layer, which are a set of Token Providers. These are in the TokenProviders folder. \n4. Each of the token providers then use a client to get the token. The client layer consists of \n    1. A Process Manager for calling Azure CLI. **az account get-access-token --resource `https://vault.azure.net/` **\n    2. ADAL for getting tokens using Client Secret, Certificate, or Integrated Windows Authentication.\n    3. HttpClient to get token using MSI.\n\n    The clients get the token from Azure AD, either directly (e.g. ADAL) or in-directly (MSI/ Azure CLI). The client layer is Mocked in the unit tests cases. \n 5. The token is returned up the layers and cached, before being returned to the calling application.\n\n### Running test cases\n**Unit Test Cases**\n\nOn Windows, open a command prompt, navigate to the unit test folder, and run **dotnet test**. This will run tests for both .NET 4.5.2 and .NET Standard 1.4. \n\nOn Linux, open a command prompt, navigate to the unit test folder, and run **dotnet test -f netcoreapp3.1**. This will run tests for .NET Standard 1.4. \n\n**Integration Test Cases**\n\nIntegration test cases test the actual flow for Client Secret, Client Certificate, Azure CLI, and Integrated Windows Authentication. The Integrated Windows Authentication test can only be run on a domain joined machine, where domain is synced with Azure AD. \n\nBefore running these test cases, ensure that you\n1. Have Azure CLI 2.0 installed. \n2. Have logged into Azure CLI using **az login**\n3. Set an environment variable named **AppAuthenticationTestCertUrl** to a certificate in Azure Key Vault e.g. `https://myvault.vault.azure.net/secrets/cert1`\n4. Set an environment variable named **AppAuthenticationTestSqlServerEndpoint** to an Azure SQL database endpoint e.g. `mydatabase.database.windows.net`\n   \n   Integration test cases use AzureServiceTokenProvider itself to get a token for Graph API (using Azure CLI), to create Azure AD applications and service principals, and then test those flows. Additionally, the integration test cases also use SqlAzureAppAuthProvider to get a token for SQL Azure and connect to the test database.\n   \nOn Windows, open a command prompt, navigate to the integration test folder, and run **dotnet test**. This will run tests for both .NET 4.5.2 and .NET Standard 1.4. \n\nOn Linux, open a command prompt, navigate to the integration test folder, and run **dotnet test -f netcoreapp3.1**. This will run tests for .NET Standard 1.4. \n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2Fsdk%2Fmgmtcommon%2FAppAuthentication%2FREADME.png)\n",
        "repo_name": "mgmtcommon/AppAuthentication",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/mgmtcommon/AppAuthentication",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# ETW Logger for Microsoft AutoRest Generated Clients\n\nExposes AutoRest Generated Libraries events via ETW (Event Tracing for Windows). ETW events can be captured by subscribing to Microsoft.Rest event source. Requires .NET Framework 4.5 or newer.\n\n# Getting started\n\n1. Register the logger by having this line called at the start of the application\n```csharp\nServiceClientInterceptor.AddTracingInterceptor(new EtwTracingInterceptor());\n```\n2. Use a tool such as [PerfView](https://www.microsoft.com/download/details.aspx?id=28567) to capture events under the ```Microsoft.Rest``` provider.\n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2Fsdk%2Fmgmtcommon%2FClientRuntime.Etw%2FREADME.png)\n",
        "repo_name": "mgmtcommon/ClientRuntime.Etw",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/mgmtcommon/ClientRuntime.Etw",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "Using Log4Net for AutoRest Generated Clients:\n---------------------------------------------\n1- Configure the log4net in your app.config/web.config (or your preferred way).\n   For more examples on the available configurations check [config examples](https://logging.apache.org/log4net/release/config-examples.html)\n   Here's an example of app.config for the logger used with ConsoleAppender:\n\n\n\t<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n\t<configuration>\n\t  <configSections>\n\t    <section name=\"log4net\" type=\"log4net.Config.Log4NetConfigurationSectionHandler, log4net\"/>\n\t  </configSections>\n\t\n\t  <log4net>\n\t    <appender name=\"ConsoleAppender\" type=\"log4net.Appender.ConsoleAppender\">\n\t      <layout type=\"log4net.Layout.SimpleLayout\" />\n\t    </appender>\n\t\n\t    <root>\n\t      <level value=\"ALL\" />\n\t      <appender-ref ref=\"ConsoleAppender\" />\n\t    </root>\n\t\n\t    <logger name=\"Microsoft.Rest.Tracing.Log4Net.Log4NetTracingInterceptor\">\n\t      <level value=\"DEBUG\" />\n\t      <appender-ref ref=\"ConsoleAppender\"/>\n\t    </logger>\n\t  </log4net>\n\t</configuration>\n\n2- Configure log4net in the application that is using a generated client library. This can be done by\n\tA) Adding this line to ```AssemblyInfo.cs``` of the application:\n```csharp \n[assembly: log4net.Config.XmlConfigurator(Watch = true, ConfigFile = \"FileName.ext\")]\n```\n\tB) Passing the config file name to ```Log4NetTracingInterceptor``` constructor.\n\n3- Last step is to register the logger into the ServiceClientTracing and enable tracing by having these lines called at the start of the application:\n```csharp\n\tServiceClientTracing.AddTracingInterceptor(new Log4NetTracingInterceptor());\n\tServiceClientTracing.IsEnabled = true;\n```\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2Fsdk%2Fmgmtcommon%2FClientRuntime.Log4Net%2FREADME.png)\n",
        "repo_name": "mgmtcommon/ClientRuntime.Log4Net",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/mgmtcommon/ClientRuntime.Log4Net",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Mixed Reality Authentication client library for .NET\n\nMixed Reality services, like Azure Spatial Anchors, Azure Remote Rendering, and others, use the Mixed Reality security\ntoken service (STS) for authentication. This package supports exchanging Mixed Reality account credentials for an access\ntoken from the STS that can be used to access Mixed Reality services.\n\n[Source code](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/mixedreality/Azure.MixedReality.Authentication/src) | [Package (NuGet)](https://www.nuget.org/packages/Azure.MixedReality.Authentication)\n\n![Mixed Reality service authentication diagram](https://docs.microsoft.com/azure/spatial-anchors/concepts/media/spatial-anchors-authentication-overview.png)\n\n- [Azure Mixed Reality Authentication client library for .NET](#azure-mixed-reality-authentication-client-library-for-net)\n  - [Getting started](#getting-started)\n    - [Install the package](#install-the-package)\n    - [Prerequisites](#prerequisites)\n    - [Authenticate the client](#authenticate-the-client)\n      - [Authentication examples](#authentication-examples)\n        - [Authenticating with account key authentication](#authenticating-with-account-key-authentication)\n        - [Authenticating with an AAD client secret](#authenticating-with-an-aad-client-secret)\n        - [Authenticating a user using device code authentication](#authenticating-a-user-using-device-code-authentication)\n        - [Interactive authentication with DefaultAzureCredential](#interactive-authentication-with-defaultazurecredential)\n  - [Key concepts](#key-concepts)\n    - [MixedRealityStsClient](#mixedrealitystsclient)\n    - [Thread safety](#thread-safety)\n    - [Additional concepts](#additional-concepts)\n  - [Examples](#examples)\n    - [Retrieve an access token](#retrieve-an-access-token)\n      - [Using the access token in a Mixed Reality client library](#using-the-access-token-in-a-mixed-reality-client-library)\n  - [Troubleshooting](#troubleshooting)\n  - [Next steps](#next-steps)\n    - [Client libraries supporting authentication with Mixed Reality Authentication](#client-libraries-supporting-authentication-with-mixed-reality-authentication)\n  - [Contributing](#contributing)\n\n## Getting started\n\n### Install the package\n\nInstall the Azure Mixed Reality Authentication client library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.MixedReality.Authentication\n```\n\nAdd a package reference:\n\n```xml\n<PackageReference Include=\"Azure.MixedReality.Authentication\" Version=\"1.0.0\" />\n```\n\n### Prerequisites\n\n- You must have an [Azure subscription](https://azure.microsoft.com/free/dotnet/).\n- You must have an account with an [Azure Mixed Reality service](https://azure.microsoft.com/topic/mixed-reality/):\n  - [Azure Remote Rendering](https://docs.microsoft.com/azure/remote-rendering/)\n  - [Azure Spatial Anchors](https://docs.microsoft.com/azure/spatial-anchors/)\n- Familiarity with the authentication and credential concepts from [Azure.Identity](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n### Authenticate the client\n\nMixed Reality services support a few different forms of authentication:\n\n- Account Key authentication\n  - Account keys enable you to get started quickly with using Mixed Reality services. But before you deploy your application\n    to production, we recommend that you update your app to use Azure AD authentication.\n- Azure Active Directory (AD) token authentication\n  - If you're building an enterprise application and your company is using Azure AD as its identity system, you can use\n    user-based Azure AD authentication in your app. You then grant access to your Mixed Reality accounts by using your\n    existing Azure AD security groups. You can also grant access directly to users in your organization.\n  - Otherwise, we recommend that you obtain Azure AD tokens from a web service that supports your app. We recommend this\n    method for production applications because it allows you to avoid embedding the credentials for access to a Mixed\n    Reality service in your client application.\n\nSee [here](https://docs.microsoft.com/azure/spatial-anchors/concepts/authentication) for detailed instructions and information.\n\n#### Authentication examples\n\nBelow are some examples of some common authentication scenarios, but more examples and information can be found at\n[Azure.Identity](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n##### Authenticating with account key authentication\n\nUse the `MixedRealityStsClient` constructor overload accepting an `AzureKeyCredential` to configure account key\nauthentication with the Mixed Reality STS:\n\n```csharp\nAzureKeyCredential keyCredential = new AzureKeyCredential(accountKey);\nMixedRealityStsClient client = new MixedRealityStsClient(accountId, accountDomain, keyCredential);\n```\n\n> Note: Account key authentication is **not recommended** for production applications.\n\n##### Authenticating with an AAD client secret\n\n```csharp\nTokenCredential aadCredential = new ClientSecretCredential(tenantId, clientId, clientSecret, new TokenCredentialOptions\n{\n    AuthorityHost = new Uri($\"https://login.microsoftonline.com/{tenantId}\")\n});\n\nMixedRealityStsClient client = new MixedRealityStsClient(accountId, accountDomain, aadCredential);\n```\n\n##### Authenticating a user using device code authentication\n\n```csharp\nTask deviceCodeCallback(DeviceCodeInfo deviceCodeInfo, CancellationToken cancellationToken)\n{\n    Debug.WriteLine(deviceCodeInfo.Message);\n    Console.WriteLine(deviceCodeInfo.Message);\n    return Task.FromResult(0);\n}\n\nTokenCredential deviceCodeCredential = new DeviceCodeCredential(deviceCodeCallback, tenantId, clientId, new TokenCredentialOptions\n{\n    AuthorityHost = new Uri($\"https://login.microsoftonline.com/{tenantId}\"),\n});\n\nMixedRealityStsClient client = new MixedRealityStsClient(accountId, accountDomain, deviceCodeCredential);\n\nAccessToken token = await client.GetTokenAsync();\n```\n\nSee [here](https://github.com/AzureAD/microsoft-authentication-library-for-dotnet/wiki/Device-Code-Flow) for more\ninformation about using device code authentication flow.\n\n##### Interactive authentication with DefaultAzureCredential\n\nUse the `DefaultAzureCredential` object with `includeInteractiveCredentials: true` to use default interactive authentication\nflow:\n\n```csharp\nTokenCredential credential = new DefaultAzureCredential(includeInteractiveCredentials: true);\n\nMixedRealityStsClient client = new MixedRealityStsClient(accountId, accountDomain, credential);\n```\n\n## Key concepts\n\n### MixedRealityStsClient\n\nThe `MixedRealityStsClient` is the client library used to access the Mixed Reality STS to get an access token.\n\nTokens obtained from the Mixed Reality STS have a lifetime of **24 hours**.\n\n### Thread safety\n\nWe guarantee that all client instance methods are thread-safe and independent of each other ([guideline](https://azure.github.io/azure-sdk/dotnet_introduction.html#dotnet-service-methods-thread-safety)). This ensures that the recommendation of reusing client instances is always safe, even across threads.\n\n### Additional concepts\n\n<!-- CLIENT COMMON BAR -->\n[Client options](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#configuring-service-clients-using-clientoptions) |\n[Accessing the response](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#accessing-http-response-details-using-responset) |\n[Long-running operations](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#consuming-long-running-operations-using-operationt) |\n[Handling failures](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#reporting-errors-requestfailedexception) |\n[Diagnostics](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md) |\n[Mocking](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#mocking) |\n[Client lifetime](https://devblogs.microsoft.com/azure-sdk/lifetime-management-and-thread-safety-guarantees-of-azure-sdk-net-clients/)\n<!-- CLIENT COMMON BAR -->\n\n## Examples\n\n### Retrieve an access token\n\n```csharp\nAzureKeyCredential keyCredential = new AzureKeyCredential(accountKey);\nMixedRealityStsClient client = new MixedRealityStsClient(accountId, accountDomain, keyCredential);\n\nAccessToken token = await client.GetTokenAsync();\n```\n\nSee the authentication examples [above](#authenticate-the-client) for more complex authentication scenarios.\n\n#### Using the access token in a Mixed Reality client library\n\nSome Mixed Reality client libraries might accept an access token in place of a credential. For example:\n\n```csharp\n// GetMixedRealityAccessTokenFromWebService is a hypothetical method that retrieves\n// a Mixed Reality access token from a web service. The web service would use the\n// MixedRealityStsClient and credentials to obtain an access token to be returned\n// to the client.\nAccessToken accessToken = await GetMixedRealityAccessTokenFromWebService();\n\nSpatialAnchorsAccount account = new SpatialAnchorsAccount(accountId, accountDomain);\nSpatialAnchorsClient client = new SpatialAnchorsClient(account, accessToken);\n```\n\nNote: The `SpatialAnchorsClient` usage above is hypothetical and may not reflect the actual library. Consult the\ndocumentation for the client library you're using to determine if and how this might be supported.\n\n## Troubleshooting\n\n- [Handling failures](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#reporting-errors-requestfailedexception)\n- [Diagnostics](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md)\n\n## Next steps\n\n### Client libraries supporting authentication with Mixed Reality Authentication\n\nLibraries supporting the Mixed Reality Authentication are coming soon.\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License\nAgreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution.\nFor details, visit [https://cla.microsoft.com](https://cla.microsoft.com).\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the\nPR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this\nonce across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact\n[opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n",
        "repo_name": "mixedreality/Azure.MixedReality.Authentication",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/mixedreality/Azure.MixedReality.Authentication",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Mixed Reality management client library for .NET\n\nMicrosoft Azure Mixed Reality cloud services like Azure Remote Rendering and Azure Spatial Anchors help developers build compelling immersive experiences on a variety of platforms. These services allow you to integrate spatial awareness into your projects when you're making applications for 3D training, predictive equipment maintenance, and design review, all in the context of your users\u2019 environments.\n\nThis library supports managing Microsoft Azure Mixed Reality resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Mixed Reality management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.MixedReality\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "mixedreality/Azure.ResourceManager.MixedReality",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/mixedreality/Azure.ResourceManager.MixedReality",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "\n# Microsoft Azure MobileNetwork management client library for .NET\n\n[Azure Private 5G](https://learn.microsoft.com/azure/private-5g-core/private-5g-core-overview) is an Azure cloud service for deploying and managing 5G core network functions on an Azure Stack Edge device, as part of an on-premises private mobile network for enterprises. The 5G core network functions connect with standard 4G and 5G standalone radio access networks (RANs) to provide high performance, low latency, and secure connectivity for 5G Internet of Things (IoT) devices. Azure Private 5G Core gives enterprises full control and visibility of their private mobile networks.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure MobileNetwork management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.MobileNetwork --prerelease\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html)\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "mobilenetwork/Azure.ResourceManager.MobileNetwork",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/mobilenetwork/Azure.ResourceManager.MobileNetwork",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure IoT Models Repository client library for .NET\n\nThis library provides functionality for interacting with the [Azure IoT Models Repository][modelsrepository_iot_endpoint]. It also aims to provide a consistent experience working with digital twin model repositories following Azure IoT conventions.\n\n[Source code][source] | [Package (nuget)](https://www.nuget.org/packages/Azure.IoT.ModelsRepository)\n\n## Getting started\n\nThe complete Microsoft Azure SDK can be downloaded from the [Microsoft Azure downloads][microsoft_sdk_download] page, and it ships with support for building deployment packages, integrating with tooling, rich command-line tooling, and more.\n\nFor the best development experience, developers should use the official Microsoft NuGet packages for libraries. NuGet packages are regularly updated with new functionality and bug fixes.\n\n### Install the package\n\nInstall the Azure IoT Models Repository client library for .NET with [NuGet][nuget]:\n\n```dotnetcli\ndotnet add package Azure.IoT.ModelsRepository --prerelease\n```\n\nView the package details at nuget.org.\n\n### Prerequisites\n\n- A models repository following [Azure IoT conventions][modelsrepository_conventions]\n  - The models repository can be located on the local filesystem or hosted on a webserver.\n  - Azure IoT hosts the global [Azure IoT Models Repository][modelsrepository_iot_endpoint] which the client will point to by default if no URI is provided.\n\n### Authenticate the client\n\nCurrently no authentication mechanisms are supported in the client. The global endpoint is not tied to an Azure subscription and does not support auth. All models published are meant for anonymous public consumption.\n\n## Key concepts\n\nThe Azure IoT Models Repository enables builders to manage and share digital twin models. The models are [JSON-LD][json_ld_reference] documents defined using the Digital Twins Definition Language ([DTDL][dtdlv2_reference]).\n\nThe repository defines a pattern to store DTDL interfaces in a directory structure based on the Digital Twin Model Identifier (DTMI). You can locate an interface in the repository by converting the DTMI to a relative path. For example, the DTMI \"`dtmi:com:example:Thermostat;1`\" translates to `/dtmi/com/example/thermostat-1.json`.\n\n### Thread safety\n\nWe guarantee that all client instance methods are thread-safe and independent of each other. See thread safety [guideline][thread_safety_guideline]. This ensures that the recommendation of reusing client instances is always safe, even across threads.\n\n### Additional concepts\n\n<!-- CLIENT COMMON BAR -->\n[Client options](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#configuring-service-clients-using-clientoptions) |\n[Accessing the response](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#accessing-http-response-details-using-responset) |\n[Long-running operations](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#consuming-long-running-operations-using-operationt) |\n[Handling failures](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#reporting-errors-requestfailedexception) |\n[Diagnostics](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md) |\n[Mocking](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#mocking) |\n[Client lifetime](https://devblogs.microsoft.com/azure-sdk/lifetime-management-and-thread-safety-guarantees-of-azure-sdk-net-clients/)\n<!-- CLIENT COMMON BAR -->\n\n## Examples\n\nYou can familiarize yourself with the client using [samples for IoT Models Repository][modelsrepository_samples].\n\n## Troubleshooting\n\nAll service operations will throw RequestFailedException on failure, with helpful error codes and other information. The client also produces diagnostic events and logging which can be listened to with an [EventListener][eventsourcelistener_reference].\n\n## Next steps\n\nSee implementation examples with our [code samples][modelsrepository_samples].\n\n## Contributing\n\nThis project welcomes contributions and suggestions.\nMost contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution.\nFor details, visit <https://cla.microsoft.com>\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment).\nSimply follow the instructions provided by the bot.\nYou will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct].\nFor more information see the [Code of Conduct FAQ][code_of_conduct_faq] or contact opencode@microsoft.com with any additional questions or comments.\n\n<!-- LINKS -->\n[microsoft_sdk_download]: https://azure.microsoft.com/downloads/?sdk=net\n[azure_sdk_target_frameworks]: https://github.com/azure/azure-sdk-for-net#target-frameworks\n[source]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/modelsrepository/Azure.IoT.ModelsRepository/src\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[code_of_conduct_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[nuget]: https://www.nuget.org/\n[azure_core_library]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/core/Azure.Core\n[modelsrepository_conventions]: https://github.com/Azure/iot-plugandplay-models-tools/wiki\n[modelsrepository_iot_endpoint]: https://devicemodels.azure.com/\n[modelsrepository_samples]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/modelsrepository/Azure.IoT.ModelsRepository/samples\n[thread_safety_guideline]: https://azure.github.io/azure-sdk/dotnet_introduction.html#dotnet-service-methods-thread-safety\n[json_ld_reference]: https://json-ld.org\n[dtdlv2_reference]: https://github.com/Azure/opendigitaltwins-dtdl/blob/master/DTDL/v2/dtdlv2.md\n[eventsourcelistener_reference]: https://docs.microsoft.com/dotnet/api/azure.core.diagnostics.azureeventsourcelistener?view=azure-dotnet\n",
        "repo_name": "modelsrepository/Azure.IoT.ModelsRepository",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/modelsrepository/Azure.IoT.ModelsRepository",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Monitor Ingestion client library for .NET\n\nThe Azure Monitor Ingestion client library is used to send custom logs to [Azure Monitor][azure_monitor_overview].\n\nThis library allows you to send data from virtually any source to supported built-in tables or to custom tables that you create in Log Analytics workspace. You can even extend the schema of built-in tables with custom columns.\n\n**Resources:**\n\n- [Source code](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/monitor/Azure.Monitor.Ingestion/src)\n- [NuGet package](https://www.nuget.org/packages/Azure.Monitor.Ingestion)\n- [Service documentation][azure_monitor_overview]\n- [Change log](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/monitor/Azure.Monitor.Ingestion/CHANGELOG.md)\n\n## Getting started\n\n### Prerequisites\n\n- An [Azure subscription](https://azure.microsoft.com/free/dotnet/)\n- A [TokenCredential](https://learn.microsoft.com/dotnet/api/azure.core.tokencredential?view=azure-dotnet) implementation, such as an [Azure Identity library credential type](https://learn.microsoft.com/dotnet/api/overview/azure/Identity-readme#credential-classes).\n- A [Data Collection Endpoint](https://learn.microsoft.com/azure/azure-monitor/essentials/data-collection-endpoint-overview)\n- A [Data Collection Rule](https://learn.microsoft.com/azure/azure-monitor/essentials/data-collection-rule-overview)\n- A [Log Analytics workspace](https://learn.microsoft.com/azure/azure-monitor/logs/log-analytics-workspace-overview)\n\n### Install the package\n\nInstall the Azure Monitor Ingestion client library for .NET with NuGet:\n\n```dotnetcli\ndotnet add package Azure.Monitor.Ingestion\n```\n\n### Authenticate the client\n\nAn authenticated client is required to ingest data. To authenticate, create an instance of a `TokenCredential` class. Pass it to the constructor of the `LogsIngestionClient` class.\n\nTo authenticate, the following example uses `DefaultAzureCredential` from the `Azure.Identity` package:\n\n```C# Snippet:CreateLogsIngestionClient\nvar endpoint = new Uri(\"<data_collection_endpoint_uri>\");\nvar credential = new DefaultAzureCredential();\nvar client = new LogsIngestionClient(endpoint, credential);\n```\n\n### Upload the logs\n\nFor examples of logs ingestion, see the [Examples](#examples) section.\n\n## Key concepts\n\n### Data collection endpoint\n\nData collection endpoints (DCEs) allow you to uniquely configure ingestion settings for Azure Monitor. [This article][data_collection_endpoint] provides an overview of DCEs, including their contents, structure, and how you can create and work with them.\n\n### Data collection rule\n\nData collection rules (DCRs) define data collected by Azure Monitor and specify how and where that data should be sent or stored. The REST API call must specify a DCR to use. A single DCE can support multiple DCRs, so you can specify a different DCR for different sources and target tables.\n\nThe DCR must understand the structure of the input data and the structure of the target table. If the two don't match, it can use a transformation to convert the source data to match the target table. You may also use the transform to filter source data and perform any other calculations or conversions.\n\nFor more information, see [Data collection rules in Azure Monitor][data_collection_rule].\n\n### Log Analytics workspace tables\n\nCustom logs can send data to any custom table that you create and to certain built-in tables in your Log Analytics workspace. The target table must exist before you can send data to it. The following built-in tables are currently supported:\n\n- [CommonSecurityLog](https://learn.microsoft.com/azure/azure-monitor/reference/tables/commonsecuritylog)\n- [SecurityEvent](https://learn.microsoft.com/azure/azure-monitor/reference/tables/securityevent)\n- [Syslog](https://learn.microsoft.com/azure/azure-monitor/reference/tables/syslog)\n- [WindowsEvent](https://learn.microsoft.com/azure/azure-monitor/reference/tables/windowsevent)\n\n### Thread safety\n\nWe guarantee that all client instance methods are thread-safe and independent of each other ([guideline](https://azure.github.io/azure-sdk/dotnet_introduction.html#dotnet-service-methods-thread-safety)). This design ensures that the recommendation of reusing client instances is always safe, even across threads.\n\n### Additional concepts\n\n<!-- CLIENT COMMON BAR -->\n[Client options](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#configuring-service-clients-using-clientoptions) |\n[Accessing the response](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#accessing-http-response-details-using-responset) |\n[Long-running operations](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#consuming-long-running-operations-using-operationt) |\n[Handling failures](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#reporting-errors-requestfailedexception) |\n[Diagnostics](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md) |\n[Mocking](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#mocking) |\n[Client lifetime](https://devblogs.microsoft.com/azure-sdk/lifetime-management-and-thread-safety-guarantees-of-azure-sdk-net-clients/)\n<!-- CLIENT COMMON BAR -->\n\n## Examples\n\n- [Register the client with dependency injection](#register-the-client-with-dependency-injection)\n- [Upload custom logs](#upload-custom-logs)\n- [Upload custom logs as IEnumerable](#upload-custom-logs-as-ienumerable)\n- [Upload custom logs as IEnumerable with EventHandler](#upload-custom-logs-as-ienumerable-with-eventhandler)\n- [Verify logs](#verify-logs)\n\nYou can familiarize yourself with different APIs using [samples](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/monitor/Azure.Monitor.Ingestion/samples).\n\n### Register the client with dependency injection\n\nTo register `LogsIngestionClient` with the dependency injection (DI) container, invoke the `AddLogsIngestionClient` method. For more information, see [Register client](https://learn.microsoft.com/dotnet/azure/sdk/dependency-injection#register-client).\n\n### Upload custom logs\n\nYou can upload logs using either the `LogsIngestionClient.Upload` or the `LogsIngestionClient.UploadAsync` method. Note the data ingestion [limits](https://learn.microsoft.com/azure/azure-monitor/service-limits#custom-logs). This method has an optional parameter: string contentEncoding. This refers to the encoding of the RequestContent that is being passed in. If you're passing in content that is already manipulated, set the contentEncoding parameter. For example if your content is gzipped, set contentEncoding to be \"gzip\". If this parameter isn't set, the default behavior is to gzip all input.\n\n```C# Snippet:UploadCustomLogsAsync\nvar endpoint = new Uri(\"<data_collection_endpoint>\");\nvar ruleId = \"<data_collection_rule_id>\";\nvar streamName = \"<stream_name>\";\n\nvar credential = new DefaultAzureCredential();\nLogsIngestionClient client = new(endpoint, credential);\nDateTimeOffset currentTime = DateTimeOffset.UtcNow;\n\n// Use BinaryData to serialize instances of an anonymous type into JSON\nBinaryData data = BinaryData.FromObjectAsJson(\n    new[] {\n        new\n        {\n            Time = currentTime,\n            Computer = \"Computer1\",\n            AdditionalContext = new\n            {\n                InstanceName = \"user1\",\n                TimeZone = \"Pacific Time\",\n                Level = 4,\n                CounterName = \"AppMetric1\",\n                CounterValue = 15.3\n            }\n        },\n        new\n        {\n            Time = currentTime,\n            Computer = \"Computer2\",\n            AdditionalContext = new\n            {\n                InstanceName = \"user2\",\n                TimeZone = \"Central Time\",\n                Level = 3,\n                CounterName = \"AppMetric1\",\n                CounterValue = 23.5\n            }\n        },\n    });\n\n// Upload our logs\nResponse response = await client.UploadAsync(\n    ruleId,\n    streamName,\n    RequestContent.Create(data)).ConfigureAwait(false);\n```\n\n### Upload custom logs as IEnumerable\n\nYou can also upload logs using either the `LogsIngestionClient.Upload` or the `LogsIngestionClient.UploadAsync` method in which  logs are passed in a generic `IEnumerable` type along with an optional `LogsUploadOptions` parameter. The `LogsUploadOptions` parameter includes a serializer, concurrency, and an EventHandler.\n\n```C# Snippet:UploadLogDataIEnumerableAsync\nvar endpoint = new Uri(\"<data_collection_endpoint_uri>\");\nvar ruleId = \"<data_collection_rule_id>\";\nvar streamName = \"<stream_name>\";\n\nvar credential = new DefaultAzureCredential();\nLogsIngestionClient client = new(endpoint, credential);\n\nDateTimeOffset currentTime = DateTimeOffset.UtcNow;\n\nvar entries = new List<Object>();\nfor (int i = 0; i < 100; i++)\n{\n    entries.Add(\n        new {\n            Time = currentTime,\n            Computer = \"Computer\" + i.ToString(),\n            AdditionalContext = i\n        }\n    );\n}\n\n// Upload our logs\nResponse response = await client.UploadAsync(ruleId, streamName, entries).ConfigureAwait(false);\n```\n\n### Upload custom logs as IEnumerable with EventHandler\n\nYou can upload logs using either the `LogsIngestionClient.Upload` or the `LogsIngestionClient.UploadAsync` method. In these two methods, logs are passed in a generic `IEnumerable` type. Additionally, there's an `LogsUploadOptions`-typed parameter in which a serializer, concurrency, and EventHandler can be set. The default serializer is set to `System.Text.Json`, but you can pass in the serializer you would like used. The `MaxConcurrency` property sets the number of threads that will be used in the `UploadAsync` method. The default value is 5, and this parameter is unused in the `Upload` method. The EventHandler is used for error handling. It gives the user the option to abort the upload if a batch fails and access the failed logs and corresponding exception. Without the EventHandler, if an upload fails, an `AggregateException` will be thrown.\n\n```C# Snippet:LogDataIEnumerableEventHandlerAsync\nvar endpoint = new Uri(\"<data_collection_endpoint_uri>\");\nvar ruleId = \"<data_collection_rule_id>\";\nvar streamName = \"<stream_name>\";\n\nvar credential = new DefaultAzureCredential();\nLogsIngestionClient client = new(endpoint, credential);\n\nDateTimeOffset currentTime = DateTimeOffset.UtcNow;\n\nvar entries = new List<Object>();\nfor (int i = 0; i < 100; i++)\n{\n    entries.Add(\n        new {\n            Time = currentTime,\n            Computer = \"Computer\" + i.ToString(),\n            AdditionalContext = i\n        }\n    );\n}\n// Set concurrency and EventHandler in LogsUploadOptions\nLogsUploadOptions options = new LogsUploadOptions();\noptions.MaxConcurrency = 10;\noptions.UploadFailed += Options_UploadFailed;\n\n// Upload our logs\nResponse response = await client.UploadAsync(ruleId, streamName, entries, options).ConfigureAwait(false);\n\nTask Options_UploadFailed(LogsUploadFailedEventArgs e)\n{\n    // Throw exception from EventHandler to stop Upload if there is a failure\n    IReadOnlyList<object> failedLogs = e.FailedLogs;\n    // 413 status is RequestTooLarge - don't throw here because other batches can successfully upload\n    if ((e.Exception is RequestFailedException) && (((RequestFailedException)e.Exception).Status != 413))\n        throw e.Exception;\n    else\n        return Task.CompletedTask;\n}\n```\n\n### Verify logs\n\nYou can verify that your data has been uploaded correctly by using the [Azure Monitor Query](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/monitor/Azure.Monitor.Query/README.md#install-the-package) library. Run the [Upload custom logs](#upload-custom-logs) sample first before verifying the logs.\n\n```C# Snippet:VerifyLogsAsync\nvar workspaceId = \"<log_analytics_workspace_id>\";\nvar tableName = \"<table_name>\";\n\nvar credential = new DefaultAzureCredential();\nLogsQueryClient logsQueryClient = new(credential);\n\nLogsBatchQuery batch = new();\nstring query = tableName + \" | Count;\";\nstring countQueryId = batch.AddWorkspaceQuery(\n    workspaceId,\n    query,\n    new QueryTimeRange(TimeSpan.FromDays(1)));\n\nResponse<LogsBatchQueryResultCollection> queryResponse =\n    await logsQueryClient.QueryBatchAsync(batch).ConfigureAwait(false);\n\nConsole.WriteLine(\"Table entry count: \" +\n    queryResponse.Value.GetResult<int>(countQueryId).Single());\n```\n\n## Troubleshooting\n\n### Enabling logging\n\nThe Azure SDK for .NET offers a consistent logging story to aid in troubleshooting application errors and expedite their resolution. The logs produced will capture the application's flow before reaching the terminal state to help locate the root issue. For information on enabling logging, see [Logging with the Azure SDK for .NET][logging].\n\n## Next steps\n\nTo learn more about Azure Monitor, see the [Azure Monitor service documentation][azure_monitor_overview].\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [https://cla.microsoft.com](https://cla.microsoft.com).\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately. For example, labels and comments. Follow the instructions provided by the bot. You only need to sign the CLA once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information, see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any questions or comments.\n\n<!-- LINKS -->\n[azure_monitor_overview]: https://learn.microsoft.com/azure/azure-monitor/overview\n[data_collection_endpoint]: https://learn.microsoft.com/azure/azure-monitor/essentials/data-collection-endpoint-overview\n[data_collection_rule]: https://learn.microsoft.com/azure/azure-monitor/essentials/data-collection-rule-overview\n[logging]: https://learn.microsoft.com/dotnet/azure/sdk/logging\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net/sdk/monitor/Azure.Monitor.Ingestion/README.png)\n",
        "repo_name": "monitor/Azure.Monitor.Ingestion",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/monitor/Azure.Monitor.Ingestion",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Monitor Distro client library for .NET\n\nThe Azure Monitor Distro is a client library that sends telemetry data to Azure Monitor following the OpenTelemetry Specification. This library can be used to instrument your ASP.NET Core applications to collect and send telemetry data to Azure Monitor for analysis and monitoring, powering experiences in Application Insights.\n\n## Getting started\n\n### Prerequisites\n\n- **Azure Subscription:**  To use Azure services, including Azure Monitor Distro, you'll need a subscription.  If you do not have an existing Azure account, you may sign up for a [free trial](https://azure.microsoft.com/free/dotnet/) or use your [Visual Studio Subscription](https://visualstudio.microsoft.com/subscriptions/) benefits when you [create an account](https://azure.microsoft.com/account).\n- **Azure Application Insights Connection String:** To send telemetry data to the monitoring service you'll need connection string from Azure Application Insights. If you are not familiar with creating Azure resources, you may wish to follow the step-by-step guide for [Create an Application Insights resource](https://docs.microsoft.com/azure/azure-monitor/app/create-new-resource) and [copy the connection string](https://docs.microsoft.com/azure/azure-monitor/app/sdk-connection-string?tabs=net#find-your-connection-string).\n- **ASP.NET Core App:** An ASP.NET Core application is required to instrument it with Azure Monitor Distro. You can either bring your own app or follow the [Get started with ASP.NET Core MVC](https://docs.microsoft.com/aspnet/core/tutorials/first-mvc-app/start-mvc) to create a new one.\n\n### What is Included in the Distro\n\nThe Azure Monitor Distro is a distribution of the .NET OpenTelemetry SDK and related instrumentation libraries. It includes the following components:\n\n* Traces\n  * [ASP.NET Core Instrumentation Library](https://www.nuget.org/packages/OpenTelemetry.Instrumentation.AspNetCore/) provides automatic tracing for incoming HTTP requests to ASP.NET Core applications.\n  * [HTTP Client Instrumentation Library](https://www.nuget.org/packages/OpenTelemetry.Instrumentation.Http/) provides automatic tracing for outgoing HTTP requests made using [System.Net.Http.HttpClient](https://docs.microsoft.com/dotnet/api/system.net.http.httpclient) and [System.Net.HttpWebRequest](https://docs.microsoft.com/dotnet/api/system.net.httpwebrequest).\n  * [SQL Client Instrumentation Library](https://www.nuget.org/packages/OpenTelemetry.Instrumentation.SqlClient) provides automatic tracing for SQL queries executed using the [Microsoft.Data.SqlClient](https://www.nuget.org/packages/Microsoft.Data.SqlClient) and [System.Data.SqlClient](https://www.nuget.org/packages/System.Data.SqlClient) packages.\n\n* Metrics\n  * [ASP.NET Core Instrumentation Library](https://www.nuget.org/packages/OpenTelemetry.Instrumentation.AspNetCore/) provides automatic collection of common ASP.NET Core metrics.\n  * [HTTP Client Instrumentation Library](https://www.nuget.org/packages/OpenTelemetry.Instrumentation.Http/) provides automatic collection of HTTP client metrics.\n\n* [Logs](https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/docs/logs/getting-started/README.md)\n\n* [Azure Monitor Exporter](https://www.nuget.org/packages/Azure.Monitor.OpenTelemetry.Exporter/) allows sending traces, metrics, and logs data to Azure Monitor.\n\n### Install the package\n\n#### Latest Version: [![Nuget](https://img.shields.io/nuget/vpre/Azure.Monitor.OpenTelemetry.AspNetCore.svg)](https://www.nuget.org/packages/Azure.Monitor.OpenTelemetry.AspNetCore/)\n\nInstall the Azure Monitor Distro for .NET from [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.Monitor.OpenTelemetry.AspNetCore --prerelease\n```\n\n#### Nightly builds\n\nNightly builds are available from this repo's [dev feed](https://github.com/Azure/azure-sdk-for-net/blob/main/CONTRIBUTING.md#nuget-package-dev-feed).\nThese are provided without support and are not intended for production workloads.\n\n### Enabling Azure Monitor OpenTelemetry in your application\n\nThe following examples demonstrate how to integrate the Azure Monitor Distro into your application.\n\n#### Example 1\n\nTo enable Azure Monitor Distro, add `UseAzureMonitor()` to your `Program.cs` file and set the `APPLICATIONINSIGHTS_CONNECTION_STRING` environment variable to the connection string from your Application Insights resource.\n\n```C#\n// This method gets called by the runtime. Use this method to add services to the container.\nvar builder = WebApplication.CreateBuilder(args);\n\n// The following line enables Azure Monitor Distro.\nbuilder.Services.AddOpenTelemetry().UseAzureMonitor();\n\n// This code adds other services for your application.\nbuilder.Services.AddMvc();\n\nvar app = builder.Build();\n```\n\n#### Example 2\n\nTo enable Azure Monitor Distro with a hard-coded connection string, add `UseAzureMonitor()` to your `Program.cs` with the `AzureMonitorOptions` containing the connection string.\n\n```C#\n// This method gets called by the runtime. Use this method to add services to the container.\nvar builder = WebApplication.CreateBuilder(args);\n\n// The following line enables Azure Monitor Distro with hard-coded connection string.\nbuilder.Services.AddOpenTelemetry().UseAzureMonitor(o => o.ConnectionString = \"InstrumentationKey=00000000-0000-0000-0000-000000000000\");\n\n// This code adds other services for your application.\nbuilder.Services.AddMvc();\n\nvar app = builder.Build();\n```\n\nNote that in the examples above, `UseAzureMonitor` is added to the `IServiceCollection` in the `Program.cs` file. You can also add it in the `ConfigureServices` method of your `Startup.cs` file.\n\n> **Note**\n  > Multiple calls to `AddOpenTelemetry.UseAzureMonitor()` will **NOT** result in multiple providers. Only a single `TracerProvider`, `MeterProvider` and `LoggerProvider` will be created in the target `IServiceCollection`. To establish multiple providers use the `Sdk.CreateTracerProviderBuilder()` and/or `Sdk.CreateMeterProviderBuilder()` and/or `LoggerFactory.CreateLogger` methods with the [Azure Monitor Exporter](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/monitor/Azure.Monitor.OpenTelemetry.Exporter) instead of using Azure Monitor Distro.\n\n### Authenticate the client\n\nAzure Active Directory (AAD) authentication is an optional feature that can be used with Azure Monitor Distro. To enable AAD authentication, set the `Credential` property in `AzureMonitorOptions`. This is made easy with the [Azure Identity library](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/identity/Azure.Identity/README.md), which provides support for authenticating Azure SDK clients with their corresponding Azure services.\n\n```C#\n// Call UseAzureMonitor and set Credential to authenticate through Active Directory.\nbuilder.Services.AddOpenTelemetry().UseAzureMonitor(o =>\n{\n    o.ConnectionString = \"InstrumentationKey=00000000-0000-0000-0000-000000000000\";\n    o.Credential = new DefaultAzureCredential();\n});\n```\n\nWith this configuration, the Azure Monitor Distro will use the credentials of the currently logged-in user or of the service principal to authenticate and send telemetry data to Azure Monitor.\n\nNote that the `Credential` property is optional. If it is not set, Azure Monitor Distro will use the Instrumentation Key from the Connection String to send data to Azure Monitor.\n\n### Advanced configuration\n\nThe Azure Monitor Distro includes .NET OpenTelemetry instrumentation for [ASP.NET Core](https://www.nuget.org/packages/OpenTelemetry.Instrumentation.AspNetCore/), [HttpClient](https://www.nuget.org/packages/OpenTelemetry.Instrumentation.Http/), and [SQLClient](https://www.nuget.org/packages/OpenTelemetry.Instrumentation.SqlClient). However, you can customize the instrumentation included or use additional instrumentation on your own using the OpenTelemetry API. Here are some examples of how to customize the instrumentation:\n\n#### Customizing AspNetCoreInstrumentationOptions\n\n```C#\nbuilder.Services.AddOpenTelemetry().UseAzureMonitor();\nbuilder.Services.Configure<AspNetCoreInstrumentationOptions>(options =>\n{\n    options.RecordException = true;\n    options.Filter = (httpContext) =>\n    {\n        // only collect telemetry about HTTP GET requests\n        return HttpMethods.IsGet(httpContext.Request.Method);\n    };\n});\n```\n\n#### Customizing HttpClientInstrumentationOptions\n\n```C#\nbuilder.Services.AddOpenTelemetry().UseAzureMonitor();\nbuilder.Services.Configure<HttpClientInstrumentationOptions>(options =>\n{\n    options.RecordException = true;\n    options.FilterHttpRequestMessage = (httpRequestMessage) =>\n    {\n        // only collect telemetry about HTTP GET requests\n        return HttpMethods.IsGet(httpRequestMessage.Method.Method);\n    };\n});\n```\n\n#### Customizing SqlClientInstrumentationOptions\n\n```C#\nbuilder.Services.AddOpenTelemetry().UseAzureMonitor();\nbuilder.Services.Configure<SqlClientInstrumentationOptions>(options =>\n{\n    options.SetDbStatementForStoredProcedure = false;\n});\n```\n\n#### Customizing Sampling Percentage\n\nWhen using the Azure Monitor Distro, the sampling percentage for telemetry data is set to 100% (1.0F) by default. For example, let's say you want to set the sampling percentage to 50%. You can achieve this by modifying the code as follows:\n\n``` C#\nbuilder.Services.AddOpenTelemetry().UseAzureMonitor(o =>\n{\n    o.SamplingRatio = 0.5F;\n});\n```\n\n#### Adding Custom ActivitySource to Traces\n\n```C#\nbuilder.Services.AddOpenTelemetry().UseAzureMonitor();\nbuilder.Services.ConfigureOpenTelemetryTracerProvider((sp, builder) => builder.AddSource(\"MyCompany.MyProduct.MyLibrary\"));\n```\n\n#### Adding Custom Meter to Metrics\n\n```C#\nbuilder.Services.AddOpenTelemetry().UseAzureMonitor();\nbuilder.Services.ConfigureOpenTelemetryMeterProvider((sp, builder) => builder.AddMeter(\"MyCompany.MyProduct.MyLibrary\"));\n```\n\n#### Adding Additional Instrumentation\n\nIf you need to instrument a library or framework that isn't included in the Azure Monitor Distro, you can add additional instrumentation using the OpenTelemetry Instrumentation packages. For example, to add instrumentation for gRPC clients, you can add the [OpenTelemetry.Instrumentation.GrpcNetClient](https://www.nuget.org/packages/OpenTelemetry.Instrumentation.GrpcNetClient/) package and use the following code:\n\n```C#\nbuilder.Services.AddOpenTelemetry().UseAzureMonitor();\nbuilder.Services.ConfigureOpenTelemetryTracerProvider((sp, builder) => builder.AddGrpcClientInstrumentation());\n```\n\n#### Adding Another Exporter\n\nAzure Monitor Distro uses the Azure Monitor exporter to send data to Application Insights. However, if you need to send data to other services, including Application Insights, you can add another exporter. For example, to add the Console exporter, you can install the [OpenTelemetry.Exporter.Console](https://www.nuget.org/packages/OpenTelemetry.Exporter.Console) package and use the following code:\n\n```C#\nbuilder.Services.AddOpenTelemetry().UseAzureMonitor();\nbuilder.Services.ConfigureOpenTelemetryMeterProvider((sp, builder) => builder.AddConsoleExporter());\n```\n\n#### Adding Custom Resource\n\nTo modify the resource, use the following code.\n\n```C#\nbuilder.Services.AddOpenTelemetry().UseAzureMonitor();\nbuilder.Services.ConfigureOpenTelemetryTracerProvider((sp, builder) => builder.ConfigureResource(resourceBuilder => resourceBuilder.AddService(\"service-name\")));\n```\n\nIt is also possible to configure the `Resource` by using following\nenvironmental variables:\n\n| Environment variable       | Description                                        |\n| -------------------------- | -------------------------------------------------- |\n| `OTEL_RESOURCE_ATTRIBUTES` | Key-value pairs to be used as resource attributes. See the [Resource SDK specification](https://github.com/open-telemetry/opentelemetry-specification/blob/v1.5.0/specification/resource/sdk.md#specifying-resource-information-via-an-environment-variable) for more details. |\n| `OTEL_SERVICE_NAME`        | Sets the value of the `service.name` resource attribute. If `service.name` is also provided in `OTEL_RESOURCE_ATTRIBUTES`, then `OTEL_SERVICE_NAME` takes precedence. |\n\n\n## Key concepts\n\nThe Azure Monitor Distro is a distribution package which enables users to send telemetry data to Azure Monitor. It includes the .NET OpenTelemetry SDK and instrumentation libraries for [ASP.NET Core](https://www.nuget.org/packages/OpenTelemetry.Instrumentation.AspNetCore/), [HttpClient](https://www.nuget.org/packages/OpenTelemetry.Instrumentation.Http/), and [SQLClient](https://www.nuget.org/packages/OpenTelemetry.Instrumentation.SqlClient).\n\n## Examples\n\nRefer to [`Program.cs`](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/monitor/Azure.Monitor.OpenTelemetry.AspNetCore/tests/Azure.Monitor.OpenTelemetry.AspNetCore.Demo/Program.cs) for a complete demo.\n\n## Troubleshooting\n\nThe Azure Monitor Distro uses EventSource for its own internal logging. The logs are available to any EventListener by opting into the source named \"OpenTelemetry-AzureMonitor-Exporter\".\n\nOpenTelemetry also provides it's own [self-diagnostics feature](https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry/README.md#troubleshooting) to collect internal logs.\nAn example of this is available in our demo project [here](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/monitor/Azure.Monitor.OpenTelemetry.Exporter/tests/Azure.Monitor.OpenTelemetry.Exporter.Demo/OTEL_DIAGNOSTICS.json).\n\n\n## Next steps\n\nFor more information on Azure SDK, please refer to [this website](https://azure.github.io/azure-sdk/)\n\n## Contributing\n\nSee [CONTRIBUTING.md](https://github.com/Azure/azure-sdk-for-net/blob/main/CONTRIBUTING.md) for details on contribution process.\n\n## Release Schedule\n\nThis distro is under active development.\n\nThe library is not yet _generally available_, and is not officially supported. Future releases will not attempt to maintain backwards compatibility with previous releases. Each beta release includes significant changes to the distro package, making them incompatible with each other.\n",
        "repo_name": "monitor/Azure.Monitor.OpenTelemetry.AspNetCore",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/monitor/Azure.Monitor.OpenTelemetry.AspNetCore",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Monitor Exporter client library for .NET\n\n\n\nThe [OpenTelemetry .NET](https://github.com/open-telemetry/opentelemetry-dotnet) exporters which send [telemetry data](https://docs.microsoft.com/azure/azure-monitor/app/data-model) to [Azure Monitor](https://docs.microsoft.com/azure/azure-monitor/app/app-insights-overview) following the [OpenTelemetry Specification](https://github.com/open-telemetry/opentelemetry-specification).\n\n## Getting started\n\n### Prerequisites\n\n- **Azure Subscription:**  To use Azure services, including Azure Monitor Exporter for [OpenTelemetry .NET](https://github.com/open-telemetry/opentelemetry-dotnet), you'll need a subscription.  If you do not have an existing Azure account, you may sign up for a [free trial](https://azure.microsoft.com/free/dotnet/) or use your [Visual Studio Subscription](https://visualstudio.microsoft.com/subscriptions/) benefits when you [create an account](https://azure.microsoft.com/account).\n- **Azure Application Insights Connection String:** To send telemetry data to the monitoring service you'll need connection string from Azure Application Insights. If you are not familiar with creating Azure resources, you may wish to follow the step-by-step guide for [Create an Application Insights resource](https://docs.microsoft.com/azure/azure-monitor/app/create-new-resource) and [copy the connection string](https://docs.microsoft.com/azure/azure-monitor/app/sdk-connection-string?tabs=net#find-your-connection-string).\n\n### Install the package\n\n#### Latest Version: [![Nuget](https://img.shields.io/nuget/vpre/Azure.Monitor.OpenTelemetry.Exporter.svg)](https://www.nuget.org/packages/Azure.Monitor.OpenTelemetry.Exporter/)  \n\nInstall the Azure Monitor Exporter for OpenTelemetry .NET with [NuGet](https://www.nuget.org/):\n```dotnetcli\ndotnet add package Azure.Monitor.OpenTelemetry.Exporter --prerelease\n```\n\n#### Nightly builds\n\nNightly builds are available from this repo's [dev feed](https://github.com/Azure/azure-sdk-for-net/blob/main/CONTRIBUTING.md#nuget-package-dev-feed).\nThese are provided without support and are not intended for production workloads.\n\n### Add the Exporter\n\nThe following examples demonstrate how to add the `AzureMonitorExporter` to your OpenTelemetry configuration.\n\n- Traces\n    ```csharp\n    Sdk.CreateTracerProviderBuilder()\n        .AddAzureMonitorTraceExporter(o => o.ConnectionString = \"InstrumentationKey=00000000-0000-0000-0000-000000000000\")\n        .Build();\n    ```\n\n  For a complete example see [TraceDemo.cs](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/monitor/Azure.Monitor.OpenTelemetry.Exporter/tests/Azure.Monitor.OpenTelemetry.Exporter.Demo/Traces/TraceDemo.cs).\n\n- Metrics\n    ```csharp\n    Sdk.CreateMeterProviderBuilder()\n        .AddAzureMonitorMetricExporter(o => o.ConnectionString = \"InstrumentationKey=00000000-0000-0000-0000-000000000000\")\n        .Build();\n    ```\n\n  For a complete example see [MetricDemo.cs](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/monitor/Azure.Monitor.OpenTelemetry.Exporter/tests/Azure.Monitor.OpenTelemetry.Exporter.Demo/Metrics/MetricDemo.cs).\n\n- Logs\n    ```csharp\n    LoggerFactory.Create(builder =>\n    {\n        builder.AddOpenTelemetry(options =>\n        {\n            options.AddAzureMonitorLogExporter(o => o.ConnectionString = \"InstrumentationKey=00000000-0000-0000-0000-000000000000\");\n        });\n    });\n    ```\n\n  For a complete example see [LogDemo.cs](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/monitor/Azure.Monitor.OpenTelemetry.Exporter/tests/Azure.Monitor.OpenTelemetry.Exporter.Demo/Logs/LogDemo.cs).\n\n### Authenticate the client\n\nAzure Active Directory (AAD) authentication is an optional feature that can be used with the Azure Monitor Exporter.\nThis is made easy with the [Azure Identity library](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/identity/Azure.Identity/README.md), which provides support for authenticating Azure SDK clients with their corresponding Azure services.\n\nThere are two options to enable AAD authentication. Note that if both have been set AzureMonitorExporterOptions will take precedence.\n\n1. Set your `Credential` to the `AzureMonitorExporterOptions`.\n\n    ```csharp\n    var credential = new DefaultAzureCredential();\n\n    Sdk.CreateTracerProviderBuilder()\n        .AddAzureMonitorTraceExporter(o =>\n        {\n            o.ConnectionString = \"InstrumentationKey=00000000-0000-0000-0000-000000000000\";\n            o.Credential = credential;\n        })\n        .Build();\n    ```\n\n2. Provide your `Credential` to the AddAzureMonitorExporter method.\n\n    ```csharp\n    var credential = new DefaultAzureCredential();\n\n    Sdk.CreateTracerProviderBuilder()\n        .AddAzureMonitorTraceExporter(o => o.ConnectionString = \"InstrumentationKey=00000000-0000-0000-0000-000000000000\", credential)\n        .Build();\n    ```\n\n## Key concepts\n\nSome key concepts for .NET include:\n\n- [Overview of .NET distributed tracing](https://learn.microsoft.com/dotnet/core/diagnostics/distributed-tracing): \n  Distributed tracing is a diagnostic technique that helps engineers localize failures and performance issues within applications, especially those that may be distributed across multiple machines or processes. \n\n- [Overview of Logging in .NET](https://learn.microsoft.com/dotnet/core/extensions/logging): \n  .NET supports a logging API that works with a variety of built-in and third-party logging providers.\n\nSome key concepts for Azure Monitor include:\n\n- [IP Addresses used by Azure Monitor](https://docs.microsoft.com/azure/azure-monitor/app/ip-addresses#outgoing-ports):\n  This exporter sends traces to the configured Azure Monitor Resource using HTTPS.\n  You might need to know IP addresses if the app or infrastructure that you're monitoring is hosted behind a firewall.\n\nSome key concepts for OpenTelemetry include:\n\n- [OpenTelemetry](https://opentelemetry.io/):\n  OpenTelemetry is a set of libraries used to collect and export telemetry data\n  (metrics, logs, and traces) for analysis in order to understand your software's performance and behavior.\n\n- [Instrumentation](https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md#instrumentation-libraries):\n  The ability to call the OpenTelemetry API directly by any application is\n  facilitated by instrumentation. A library that enables OpenTelemetry observability for another library is called an Instrumentation Library.\n\n- [Tracing Signal](https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/overview.md#tracing-signal): \n  Trace refers to distributed tracing. It can be thought of as a directed acyclic graph (DAG) of Spans, where the edges between Spans are defined as parent/child relationship.\n\n- [Sampling](https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/sdk.md#sampling): \n  Sampling is a mechanism to control the noise and overhead introduced by OpenTelemetry by reducing the number of samples of traces collected and sent to the backend.\n\n- [Metric Signal](https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/overview.md#metric-signal):\n  OpenTelemetry allows to record raw measurements or metrics with predefined aggregation and a set of attributes (dimensions).\n\n- [Log Signal](https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/overview.md#log-signal):\n  A recording of an event. Typically the record includes a timestamp indicating when the event happened as well as other data that describes what happened, where it happened, etc.\n\nFor more information on the OpenTelemetry project, please review the [OpenTelemetry Specifications](https://github.com/open-telemetry/opentelemetry-specification).\n\n## Examples\n\nRefer to [`Program.cs`](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/monitor/Azure.Monitor.OpenTelemetry.Exporter/tests/Azure.Monitor.OpenTelemetry.Exporter.Demo/Program.cs) for a complete demo.\n\n## Troubleshooting\n\nThe Azure Monitor exporter uses EventSource for its own internal logging. The exporter logs are available to any EventListener by opting into the source named \"OpenTelemetry-AzureMonitor-Exporter\".\n\nOpenTelemetry also provides it's own [self-diagnostics feature](https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry/README.md#troubleshooting) to collect internal logs.\nAn example of this is available in our demo project [here](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/monitor/Azure.Monitor.OpenTelemetry.Exporter/tests/Azure.Monitor.OpenTelemetry.Exporter.Demo/OTEL_DIAGNOSTICS.json).\n\n## Next steps\n\nFor more information on Azure SDK, please refer to [this website](https://azure.github.io/azure-sdk/)\n\n## Contributing\n\nSee [CONTRIBUTING.md](https://github.com/Azure/azure-sdk-for-net/blob/main/CONTRIBUTING.md) for details on contribution process.\n\n## Release Schedule\n\nThis exporter is under active development.\n\nThe library is not yet _generally available_, and is not officially supported. Future releases will not attempt to maintain backwards compatibility with previous releases. Each beta release includes significant changes to the exporter package, making them incompatible with each other.\n",
        "repo_name": "monitor/Azure.Monitor.OpenTelemetry.Exporter",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/monitor/Azure.Monitor.OpenTelemetry.Exporter",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Monitor Query client library for .NET\n\nThe Azure Monitor Query client library is used to execute read-only queries against [Azure Monitor][azure_monitor_overview]'s two data platforms:\n\n- [Logs](https://learn.microsoft.com/azure/azure-monitor/logs/data-platform-logs) - Collects and organizes log and performance data from monitored resources. Data from different sources such as platform logs from Azure services, log and performance data from virtual machines agents, and usage and performance data from apps can be consolidated into a single [Azure Log Analytics workspace](https://learn.microsoft.com/azure/azure-monitor/logs/data-platform-logs#log-analytics-and-workspaces). The various data types can be analyzed together using the [Kusto Query Language][kusto_query_language].\n- [Metrics](https://learn.microsoft.com/azure/azure-monitor/essentials/data-platform-metrics) - Collects numeric data from monitored resources into a time series database. Metrics are numerical values that are collected at regular intervals and describe some aspect of a system at a particular time. Metrics are lightweight and capable of supporting near real-time scenarios, making them useful for alerting and fast detection of issues.\n\n**Resources:**\n\n- [Source code][source]\n- [NuGet package][package]\n- [API reference documentation][msdocs_apiref]\n- [Service documentation][azure_monitor_overview]\n- [Change log][changelog]\n- [Migration guide from Application Insights][migration_guide_app_insights]\n- [Migration guide from Operational Insights][migration_guide_opp_insights]\n\n## Getting started\n\n### Prerequisites\n\n- An [Azure subscription][azure_subscription]\n- A [TokenCredential](https://learn.microsoft.com/dotnet/api/azure.core.tokencredential?view=azure-dotnet) implementation, such as an [Azure Identity library credential type](https://learn.microsoft.com/dotnet/api/overview/azure/Identity-readme#credential-classes).\n- To query Logs, you need one of the following things:\n  - An [Azure Log Analytics workspace][azure_monitor_create_using_portal]\n  - An Azure resource of any kind (Storage Account, Key Vault, Cosmos DB, etc.)\n- To query Metrics, you need an Azure resource of any kind (Storage Account, Key Vault, Cosmos DB, etc.).\n\n### Install the package\n\nInstall the Azure Monitor Query client library for .NET with NuGet:\n\n```dotnetcli\ndotnet add package Azure.Monitor.Query\n```\n\n### Authenticate the client\n\nAn authenticated client is required to query Logs or Metrics. To authenticate, create an instance of a `TokenCredential` class. Pass it to the constructor of the `LogsQueryClient` or `MetricsQueryClient` class.\n\nTo authenticate, the following examples use `DefaultAzureCredential` from the `Azure.Identity` package:\n\n```C# Snippet:CreateLogsClient\nvar client = new LogsQueryClient(new DefaultAzureCredential());\n```\n\n```C# Snippet:CreateMetricsClient\nvar client = new MetricsQueryClient(new DefaultAzureCredential());\n```\n\n### Execute the query\n\nFor examples of Logs and Metrics queries, see the [Examples](#examples) section.\n\n## Key concepts\n\n### Logs query rate limits and throttling\n\nThe Log Analytics service applies throttling when the request rate is too high. Limits, such as the maximum number of rows returned, are also applied on the Kusto queries. For more information, see [Query API](https://learn.microsoft.com/azure/azure-monitor/service-limits#la-query-api).\n\n### Metrics data structure\n\nEach set of metric values is a time series with the following characteristics:\n\n- The time the value was collected\n- The resource associated with the value\n- A namespace that acts like a category for the metric\n- A metric name\n- The value itself\n- Some metrics may have multiple dimensions as described in multi-dimensional metrics. Custom metrics can have up to 10 dimensions.\n\n### Thread safety\n\nAll client instance methods are thread-safe and independent of each other ([guideline](https://azure.github.io/azure-sdk/dotnet_introduction.html#dotnet-service-methods-thread-safety)). This design ensures that the recommendation of reusing client instances is always safe, even across threads.\n\n### Additional concepts\n\n<!-- CLIENT COMMON BAR -->\n[Client options](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#configuring-service-clients-using-clientoptions) |\n[Accessing the response](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#accessing-http-response-details-using-responset) |\n[Long-running operations](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#consuming-long-running-operations-using-operationt) |\n[Handling failures](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#reporting-errors-requestfailedexception) |\n[Diagnostics](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md) |\n[Mocking](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#mocking) |\n[Client lifetime](https://devblogs.microsoft.com/azure-sdk/lifetime-management-and-thread-safety-guarantees-of-azure-sdk-net-clients/)\n<!-- CLIENT COMMON BAR -->\n\n## Examples\n\n- [Logs query](#logs-query)\n  - [Handle logs query response](#handle-logs-query-response)\n  - [Map logs query results to a model](#map-logs-query-results-to-a-model)\n  - [Map logs query results to a primitive](#map-logs-query-results-to-a-primitive)\n  - [Print logs query results as a table](#print-logs-query-results-as-a-table)\n- [Batch logs query](#batch-logs-query)\n- [Advanced logs query scenarios](#advanced-logs-query-scenarios)\n  - [Set logs query timeout](#set-logs-query-timeout)\n  - [Query multiple workspaces](#query-multiple-workspaces)\n  - [Include statistics](#include-statistics)\n  - [Include visualization](#include-visualization)\n- [Metrics query](#metrics-query)\n  - [Handle metrics query response](#handle-metrics-query-response)\n  - [Query metrics with options](#query-metrics-with-options)\n  - [Split a metric by dimension](#split-a-metric-by-dimension)\n- [Register the client with dependency injection](#register-the-client-with-dependency-injection)\n\n### Logs query\n\nYou can query logs by workspace ID or resource ID. The result is returned as a table with a collection of rows.\n\n**Workspace-centric logs query**\n\nTo query by workspace ID, use the [LogsQueryClient.QueryWorkspaceAsync](https://learn.microsoft.com/dotnet/api/azure.monitor.query.logsqueryclient.queryworkspaceasync) method:\n\n```C# Snippet:QueryLogsAsTable\nstring workspaceId = \"<workspace_id>\";\nvar client = new LogsQueryClient(new DefaultAzureCredential());\n\nResponse<LogsQueryResult> result = await client.QueryWorkspaceAsync(\n    workspaceId,\n    \"AzureActivity | top 10 by TimeGenerated\",\n    new QueryTimeRange(TimeSpan.FromDays(1)));\n\nLogsTable table = result.Value.Table;\n\nforeach (var row in table.Rows)\n{\n    Console.WriteLine($\"{row[\"OperationName\"]} {row[\"ResourceGroup\"]}\");\n}\n```\n\n**Resource-centric logs query**\n\nTo query by resource ID, use the [LogsQueryClient.QueryResourceAsync](https://learn.microsoft.com/dotnet/api/azure.monitor.query.logsqueryclient.queryresourceasync) method.\n\nTo find the resource ID:\n\n1. Navigate to your resource's page in the Azure portal.\n1. From the **Overview** blade, select the **JSON View** link.\n1. In the resulting JSON, copy the value of the `id` property.\n\n```C# Snippet:QueryResource\nvar client = new LogsQueryClient(new DefaultAzureCredential());\n\nstring resourceId = \"/subscriptions/<subscription_id>/resourceGroups/<resource_group_name>/providers/<resource_provider>/<resource>\";\nstring tableName = \"<table_name>\";\nResponse<LogsQueryResult> results = await client.QueryResourceAsync(\n    new ResourceIdentifier(resourceId),\n    $\"{tableName} | distinct * | project TimeGenerated\",\n    new QueryTimeRange(TimeSpan.FromDays(7)));\n\nLogsTable resultTable = results.Value.Table;\nforeach (LogsTableRow row in resultTable.Rows)\n{\n    Console.WriteLine($\"{row[\"OperationName\"]} {row[\"ResourceGroup\"]}\");\n}\n\nforeach (LogsTableColumn columns in resultTable.Columns)\n{\n    Console.WriteLine(\"Name: \" + columns.Name + \" Type: \" + columns.Type);\n}\n```\n\n#### Handle logs query response\n\nThe `QueryWorkspace` method returns the `LogsQueryResult`, while the `QueryBatch` method returns the `LogsBatchQueryResult`. Here's a hierarchy of the response:\n\n```\nLogsQueryResult\n|---Error\n|---Status\n|---Table\n    |---Name\n    |---Columns (list of `LogsTableColumn` objects)\n        |---Name\n        |---Type\n    |---Rows (list of `LogsTableRows` objects)\n        |---Count\n|---AllTables (list of `LogsTable` objects)\n```\n\n#### Map logs query results to a model\n\nYou can map logs query results to a model using the `LogsQueryClient.QueryWorkspaceAsync<T>` method:\n\n```C# Snippet:QueryLogsAsModelsModel\npublic class MyLogEntryModel\n{\n    public string ResourceGroup { get; set; }\n    public int Count { get; set; }\n}\n```\n\n```C# Snippet:QueryLogsAsModels\nvar client = new LogsQueryClient(new DefaultAzureCredential());\nstring workspaceId = \"<workspace_id>\";\n\n// Query TOP 10 resource groups by event count\nResponse<IReadOnlyList<MyLogEntryModel>> response = await client.QueryWorkspaceAsync<MyLogEntryModel>(\n    workspaceId,\n    \"AzureActivity | summarize Count = count() by ResourceGroup | top 10 by Count\",\n    new QueryTimeRange(TimeSpan.FromDays(1)));\n\nforeach (var logEntryModel in response.Value)\n{\n    Console.WriteLine($\"{logEntryModel.ResourceGroup} had {logEntryModel.Count} events\");\n}\n```\n\n#### Map logs query results to a primitive\n\nIf your query returns a single column (or a single value) of a primitive type, use the `LogsQueryClient.QueryWorkspaceAsync<T>` overload to deserialize it:\n\n```C# Snippet:QueryLogsAsPrimitive\nstring workspaceId = \"<workspace_id>\";\n\nvar client = new LogsQueryClient(new DefaultAzureCredential());\n\n// Query TOP 10 resource groups by event count\nResponse<IReadOnlyList<string>> response = await client.QueryWorkspaceAsync<string>(\n    workspaceId,\n    \"AzureActivity | summarize Count = count() by ResourceGroup | top 10 by Count | project ResourceGroup\",\n    new QueryTimeRange(TimeSpan.FromDays(1)));\n\nforeach (var resourceGroup in response.Value)\n{\n    Console.WriteLine(resourceGroup);\n}\n```\n\n#### Print logs query results as a table\n\nYou can also dynamically inspect the list of columns. The following example prints the query result as a table:\n\n```C# Snippet:QueryLogsPrintTable\nstring workspaceId = \"<workspace_id>\";\n\nvar client = new LogsQueryClient(new DefaultAzureCredential());\nResponse<LogsQueryResult> response = await client.QueryWorkspaceAsync(\n    workspaceId,\n    \"AzureActivity | top 10 by TimeGenerated\",\n    new QueryTimeRange(TimeSpan.FromDays(1)));\n\nLogsTable table = response.Value.Table;\n\nforeach (var column in table.Columns)\n{\n    Console.Write(column.Name + \";\");\n}\n\nConsole.WriteLine();\n\nvar columnCount = table.Columns.Count;\nforeach (var row in table.Rows)\n{\n    for (int i = 0; i < columnCount; i++)\n    {\n        Console.Write(row[i] + \";\");\n    }\n\n    Console.WriteLine();\n}\n```\n\n### Batch logs query\n\nYou can execute multiple logs queries in a single request using the `LogsQueryClient.QueryBatchAsync` method:\n\n```C# Snippet:BatchQuery\nstring workspaceId = \"<workspace_id>\";\n\nvar client = new LogsQueryClient(new DefaultAzureCredential());\n\n// Query TOP 10 resource groups by event count\n// And total event count\nvar batch = new LogsBatchQuery();\n\nstring countQueryId = batch.AddWorkspaceQuery(\n    workspaceId,\n    \"AzureActivity | count\",\n    new QueryTimeRange(TimeSpan.FromDays(1)));\nstring topQueryId = batch.AddWorkspaceQuery(\n    workspaceId,\n    \"AzureActivity | summarize Count = count() by ResourceGroup | top 10 by Count\",\n    new QueryTimeRange(TimeSpan.FromDays(1)));\n\nResponse<LogsBatchQueryResultCollection> response = await client.QueryBatchAsync(batch);\n\nvar count = response.Value.GetResult<int>(countQueryId).Single();\nvar topEntries = response.Value.GetResult<MyLogEntryModel>(topQueryId);\n\nConsole.WriteLine($\"AzureActivity has total {count} events\");\nforeach (var logEntryModel in topEntries)\n{\n    Console.WriteLine($\"{logEntryModel.ResourceGroup} had {logEntryModel.Count} events\");\n}\n```\n\n### Advanced logs query scenarios\n\n#### Set logs query timeout\n\nSome logs queries take longer than 3 minutes to execute. The default server timeout is 3 minutes. You can increase the server timeout to a maximum of 10 minutes. In the following example, the `LogsQueryOptions` object's `ServerTimeout` property is used to set the server timeout to 10 minutes:\n\n```C# Snippet:QueryLogsWithTimeout\nstring workspaceId = \"<workspace_id>\";\n\nvar client = new LogsQueryClient(new DefaultAzureCredential());\n\n// Query TOP 10 resource groups by event count\nResponse<IReadOnlyList<string>> response = await client.QueryWorkspaceAsync<string>(\n    workspaceId,\n    @\"AzureActivity\n        | summarize Count = count() by ResourceGroup\n        | top 10 by Count\n        | project ResourceGroup\",\n    new QueryTimeRange(TimeSpan.FromDays(1)),\n    new LogsQueryOptions\n    {\n        ServerTimeout = TimeSpan.FromMinutes(10)\n    });\n\nforeach (var resourceGroup in response.Value)\n{\n    Console.WriteLine(resourceGroup);\n}\n```\n\n#### Query multiple workspaces\n\nTo run the same logs query against multiple workspaces, use the `LogsQueryOptions.AdditionalWorkspaces` property:\n\n```C# Snippet:QueryLogsWithAdditionalWorkspace\nstring workspaceId = \"<workspace_id>\";\nstring additionalWorkspaceId = \"<additional_workspace_id>\";\n\nvar client = new LogsQueryClient(new DefaultAzureCredential());\n\n// Query TOP 10 resource groups by event count\nResponse<IReadOnlyList<string>> response = await client.QueryWorkspaceAsync<string>(\n    workspaceId,\n    @\"AzureActivity\n        | summarize Count = count() by ResourceGroup\n        | top 10 by Count\n        | project ResourceGroup\",\n    new QueryTimeRange(TimeSpan.FromDays(1)),\n    new LogsQueryOptions\n    {\n        AdditionalWorkspaces = { additionalWorkspaceId }\n    });\n\nforeach (var resourceGroup in response.Value)\n{\n    Console.WriteLine(resourceGroup);\n}\n```\n\n#### Include statistics\n\nTo get logs query execution statistics, such as CPU and memory consumption:\n\n1. Set the `LogsQueryOptions.IncludeStatistics` property to `true`.\n2. Invoke the `GetStatistics` method on the `LogsQueryResult` object.\n\nThe following example prints the query execution time:\n\n```C# Snippet:QueryLogsWithStatistics\nstring workspaceId = \"<workspace_id>\";\nvar client = new LogsQueryClient(new DefaultAzureCredential());\n\nResponse<LogsQueryResult> response = await client.QueryWorkspaceAsync(\n    workspaceId,\n    \"AzureActivity | top 10 by TimeGenerated\",\n    new QueryTimeRange(TimeSpan.FromDays(1)),\n    new LogsQueryOptions\n    {\n        IncludeStatistics = true,\n    });\n\nBinaryData stats = response.Value.GetStatistics();\nusing var statsDoc = JsonDocument.Parse(stats);\nvar queryStats = statsDoc.RootElement.GetProperty(\"query\");\nConsole.WriteLine(queryStats.GetProperty(\"executionTime\").GetDouble());\n```\n\nBecause the structure of the statistics payload varies by query, a `BinaryData` return type is used. It contains the raw JSON response. The statistics are found within the `query` property of the JSON. For example:\n\n```json\n{\n  \"query\": {\n    \"executionTime\": 0.0156478,\n    \"resourceUsage\": {...},\n    \"inputDatasetStatistics\": {...},\n    \"datasetStatistics\": [{...}]\n  }\n}\n```\n\n#### Include visualization\n\nTo get visualization data for logs queries using the [render operator](https://learn.microsoft.com/azure/data-explorer/kusto/query/renderoperator?pivots=azuremonitor):\n\n1. Set the `LogsQueryOptions.IncludeVisualization` property to `true`.\n2. Invoke the `GetVisualization` method on the `LogsQueryResult` object.\n\nFor example:\n\n```C# Snippet:QueryLogsWithVisualization\nstring workspaceId = \"<workspace_id>\";\nvar client = new LogsQueryClient(new DefaultAzureCredential());\n\nResponse<LogsQueryResult> response = await client.QueryWorkspaceAsync(\n    workspaceId,\n    @\"StormEvents\n        | summarize event_count = count() by State\n        | where event_count > 10\n        | project State, event_count\n        | render columnchart\",\n    new QueryTimeRange(TimeSpan.FromDays(1)),\n    new LogsQueryOptions\n    {\n        IncludeVisualization = true,\n    });\n\nBinaryData viz = response.Value.GetVisualization();\nusing var vizDoc = JsonDocument.Parse(viz);\nvar queryViz = vizDoc.RootElement.GetProperty(\"visualization\");\nConsole.WriteLine(queryViz.GetString());\n```\n\nBecause the structure of the visualization payload varies by query, a `BinaryData` return type is used. It contains the raw JSON response. For example:\n\n```json\n{\n  \"visualization\": \"columnchart\",\n  \"title\": null,\n  \"accumulate\": false,\n  \"isQuerySorted\": false,\n  \"kind\": null,\n  \"legend\": null,\n  \"series\": null,\n  \"yMin\": \"\",\n  \"yMax\": \"\",\n  \"xAxis\": null,\n  \"xColumn\": null,\n  \"xTitle\": null,\n  \"yAxis\": null,\n  \"yColumns\": null,\n  \"ySplit\": null,\n  \"yTitle\": null,\n  \"anomalyColumns\": null\n}\n```\n\n### Metrics query\n\nYou can query metrics on an Azure resource using the `MetricsQueryClient.QueryResourceAsync` method. For each requested metric, a set of aggregated values is returned inside the `TimeSeries` collection.\n\nA resource ID is required to query metrics. To find the resource ID:\n\n1. Navigate to your resource's page in the Azure portal.\n2. From the **Overview** blade, select the **JSON View** link.\n3. In the resulting JSON, copy the value of the `id` property.\n\n```C# Snippet:QueryMetrics\nstring resourceId =\n    \"/subscriptions/<subscription_id>/resourceGroups/<resource_group_name>/providers/<resource_provider>/<resource>\";\nvar client = new MetricsQueryClient(new DefaultAzureCredential());\n\nResponse<MetricsQueryResult> results = await client.QueryResourceAsync(\n    resourceId,\n    new[] { \"Query Success Rate\", \"Query Count\" }\n);\n\nforeach (MetricResult metric in results.Value.Metrics)\n{\n    Console.WriteLine(metric.Name);\n    foreach (MetricTimeSeriesElement element in metric.TimeSeries)\n    {\n        Console.WriteLine(\"Dimensions: \" + string.Join(\",\", element.Metadata));\n\n        foreach (MetricValue value in element.Values)\n        {\n            Console.WriteLine(value);\n        }\n    }\n}\n```\n\n#### Handle metrics query response\n\nThe metrics query API returns a `MetricsQueryResult` object. The `MetricsQueryResult` object contains properties such as a list of `MetricResult`-typed objects, `Cost`, `Namespace`, `ResourceRegion`, `TimeSpan`, and `Interval`. The `MetricResult` objects list can be accessed using the `metrics` param. Each `MetricResult` object in this list contains a list of `MetricTimeSeriesElement` objects. Each `MetricTimeSeriesElement` object contains `Metadata` and `Values` properties.\n\nHere's a hierarchy of the response:\n\n```\nMetricsQueryResult\n|---Cost\n|---Granularity\n|---Namespace\n|---ResourceRegion\n|---TimeSpan\n|---Metrics (list of `MetricResult` objects)\n    |---Id\n    |---ResourceType\n    |---Name\n    |---Description\n    |---Error\n    |---Unit\n    |---TimeSeries (list of `MetricTimeSeriesElement` objects)\n        |---Metadata\n        |---Values\n```\n\n#### Query metrics with options\n\nA `MetricsQueryOptions` object may be used to support more granular metrics queries. Consider the following example, which queries an Azure Key Vault resource named *TestVault*. The resource's \"Vault requests availability\" metric is requested, as indicated by metric ID \"Availability\". Additionally, the \"Avg\" aggregation type is included.\n\n```C# Snippet:QueryMetricsWithAggregations\nstring resourceId =\n    \"/subscriptions/<subscription_id>/resourceGroups/<resource_group_name>/providers/Microsoft.KeyVault/vaults/TestVault\";\nstring[] metricNames = new[] { \"Availability\" };\nvar client = new MetricsQueryClient(new DefaultAzureCredential());\n\nResponse<MetricsQueryResult> result = await client.QueryResourceAsync(\n    resourceId,\n    metricNames,\n    new MetricsQueryOptions\n    {\n        Aggregations =\n        {\n            MetricAggregationType.Average,\n        }\n    });\n\nMetricResult metric = result.Value.Metrics[0];\n\nforeach (MetricTimeSeriesElement element in metric.TimeSeries)\n{\n    foreach (MetricValue value in element.Values)\n    {\n        // Prints a line that looks like the following:\n        // 6/21/2022 12:29:00 AM +00:00 : 100\n        Console.WriteLine($\"{value.TimeStamp} : {value.Average}\");\n    }\n}\n```\n\n#### Split a metric by dimension\n\nThe [MetricsQueryOptions.Filter](https://learn.microsoft.com/dotnet/api/azure.monitor.query.metricsqueryoptions.filter?view=azure-dotnet#azure-monitor-query-metricsqueryoptions-filter) property can be used for [splitting a metric](https://learn.microsoft.com/azure/azure-monitor/essentials/metrics-charts#metric-splitting) by a dimension when its filter value is set to an asterisk. Consider the following example for an App Service resource named *TestWebApp*. The code queries the resource's `Http2xx` metric and splits it by the `Instance` dimension.\n\n```C# Snippet:QueryMetricsWithSplitting\nstring resourceId =\n    \"/subscriptions/<subscription_id>/resourceGroups/<resource_group_name>/providers/Microsoft.Web/sites/TestWebApp\";\nstring[] metricNames = new[] { \"Http2xx\" };\n// Use of asterisk in filter value enables splitting on Instance dimension.\nstring filter = \"Instance eq '*'\";\nvar client = new MetricsQueryClient(new DefaultAzureCredential());\nvar options = new MetricsQueryOptions\n{\n    Aggregations =\n    {\n        MetricAggregationType.Average,\n    },\n    Filter = filter,\n    TimeRange = TimeSpan.FromDays(2),\n};\nResponse<MetricsQueryResult> result = await client.QueryResourceAsync(\n    resourceId,\n    metricNames,\n    options);\n\nforeach (MetricResult metric in result.Value.Metrics)\n{\n    foreach (MetricTimeSeriesElement element in metric.TimeSeries)\n    {\n        foreach (MetricValue value in element.Values)\n        {\n            // Prints a line that looks like the following:\n            // Thursday, May 4, 2023 9:42:00 PM, webwk000002, Http2xx, 1\n            Console.WriteLine(\n                $\"{value.TimeStamp:F}, {element.Metadata[\"Instance\"]}, {metric.Name}, {value.Average}\");\n        }\n    }\n}\n```\n\nFor an inventory of metrics and dimensions available for each Azure resource type, see [Supported metrics with Azure Monitor](https://learn.microsoft.com/azure/azure-monitor/essentials/metrics-supported).\n\n#### Register the client with dependency injection\n\nTo register `LogsQueryClient` with the dependency injection (DI) container, invoke the `AddLogsQueryClient` method. To register `MetricsQueryClient` with the dependency injection (DI) container, invoke the `AddMetricsQueryClient` method. For more information, see [Register client](https://learn.microsoft.com/dotnet/azure/sdk/dependency-injection#register-client).\n\n## Troubleshooting\n\nTo diagnose various failure scenarios, see the [troubleshooting guide](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/monitor/Azure.Monitor.Query/TROUBLESHOOTING.md).\n\n## Next steps\n\nTo learn more about Azure Monitor, see the [Azure Monitor service documentation][azure_monitor_overview].\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [cla.microsoft.com][cla].\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately with labels and comments. Follow the instructions provided by the bot. You'll only need to sign the CLA once across all Microsoft repos.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information, see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any questions or comments.\n\n[azure_monitor_create_using_portal]: https://learn.microsoft.com/azure/azure-monitor/logs/quick-create-workspace\n[azure_monitor_overview]: https://learn.microsoft.com/azure/azure-monitor/overview\n[azure_subscription]: https://azure.microsoft.com/free/dotnet/\n[changelog]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/monitor/Azure.Monitor.Query/CHANGELOG.md\n[kusto_query_language]: https://learn.microsoft.com/azure/data-explorer/kusto/query/\n[migration_guide_app_insights]: https://aka.ms/azsdk/net/migrate/ai-monitor-query\n[migration_guide_opp_insights]: https://aka.ms/azsdk/net/migrate/monitor-query\n[msdocs_apiref]: https://learn.microsoft.com/dotnet/api/overview/azure/monitor.query-readme?view=azure-dotnet\n[package]: https://www.nuget.org/packages/Azure.Monitor.Query\n[source]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/monitor/Azure.Monitor.Query/src\n\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2Fsdk%2Fmonitor%2FAzure.Monitor.Query%2FREADME.png)\n",
        "repo_name": "monitor/Azure.Monitor.Query",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/monitor/Azure.Monitor.Query",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Monitor management client library for .NET\n\nMicrosoft Azure Monitor helps you maximize the availability and performance of your applications and services. It delivers a comprehensive solution for collecting, analyzing, and acting on telemetry from your cloud and on-premises environments.\n\nThis library supports managing Microsoft Azure Monitor resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Monitor management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.Monitor\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "monitor/Azure.ResourceManager.Monitor",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/monitor/Azure.ResourceManager.Monitor",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure MySql management client library for .NET\n\nMicrosoft Azure Database for MySQL is cost effective and easy to set up, operate, and scale. Enjoy advanced security, same-zone or zone-redundant high availability, and a service-level agreement (SLA) of up to 99.99 percent.\n\nThis library supports managing Microsoft Azure MySql resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure MySql management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.MySql\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "mysql/Azure.ResourceManager.MySql",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/mysql/Azure.ResourceManager.MySql",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure NetApp management client library for .NET\n\nMicrosoft Azure NetApp Files makes it easy for enterprise line-of-business (LOB) and storage professionals to migrate and run complex, file-based applications with no code change. Microsoft Azure NetApp Files is widely used as the underlying shared file-storage service in various scenarios. These include migration (lift and shift) of POSIX-compliant Linux and Windows applications, SAP HANA, databases, high-performance compute (HPC) infrastructure and apps, and enterprise web applications.\n\nThis library supports managing Microsoft Azure NetApp resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure NetApp management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.NetApp\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "netapp/Azure.ResourceManager.NetApp",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/netapp/Azure.ResourceManager.NetApp",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Networking management client library for .NET\n\nThe networking services in Microsoft Azure provide a variety of networking capabilities that can be used together or separately. Key capabilities are:\n\n- Connectivity services: Connect Azure resources and on-premises resources using any or a combination of these networking services in Azure - Virtual Network (VNet), Virtual WAN, ExpressRoute, VPN Gateway, Virtual network NAT Gateway, Azure DNS, Peering service, and Azure Bastion.\n- Application protection services: Protect your applications using any or a combination of these networking services in Azure - Load Balancer, Private Link, DDoS protection, Firewall, - Network Security Groups, Web Application Firewall, and Virtual Network Endpoints.\n- Application delivery services: Deliver applications in the Azure network using any or a combination of these networking services in Azure - Content Delivery Network (CDN), Azure Front Door Service, Traffic Manager, Application Gateway, Internet Analyzer, and Load Balancer.\n- Network monitoring: Monitor your network resources using any or a combination of these networking services in Azure - Network Watcher, ExpressRoute Monitor, Azure Monitor, or VNet Terminal Access Point (TAP).\n\nThis library supports managing Microsoft Azure Networking resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started\n\n### Install the package\n\nInstall the Microsoft Azure Network management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.Network\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "network/Azure.ResourceManager.Network",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/network/Azure.ResourceManager.Network",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure NetworkCloud management client library for .NET\n\nMicrosoft Azure NetworkCloud provides management of the Azure Operator Nexus - Network Cloud resources including Cluster Managers, Operator on-premises clusters and their components, such as, racks, bare metal hosts, virtual machines, workload networks and more.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure NetworkCloud management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.NetworkCloud --prerelease\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html)\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "networkcloud/Azure.ResourceManager.NetworkCloud",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/networkcloud/Azure.ResourceManager.NetworkCloud",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Network Function management client library for .NET\n\nMicrosoft Azure Network Function Manager offers an Azure Marketplace experience for deploying network functions such as mobile packet core, SD-WAN edge, and VPN services to your Azure Stack Edge device running in your on-premises environment.\n\nThis library supports managing Microsoft Azure Network Function resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Network Function management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.NetworkFunction --prerelease\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "networkfunction/Azure.ResourceManager.NetworkFunction",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/networkfunction/Azure.ResourceManager.NetworkFunction",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Newrelic management client library for .NET\n\n**New Relic for Azure is the leading observability platform where Dev and Ops teams come together to solve problems with data.**\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Newrelic management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.NewRelicObservability\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html)\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "newrelicobservability/Azure.ResourceManager.NewRelicObservability",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/newrelicobservability/Azure.ResourceManager.NewRelicObservability",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Nginx management client library for .NET\n\nMicrosoft Azure Nginx is a natively integrated software as a service (SaaS) solution with advanced traffic management and monitoring. It offers ease of use with provisioning and configuration in a couple steps and leverages advanced traffic management features, such as JSON Web Token (JWT) authentication and active health checks, with built-in security integrations like Azure Key Vault for SSL/TLS certificate management.\n\nThis library supports managing Microsoft Azure Nginx resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Nginx management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.Nginx --prerelease\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "nginx/Azure.ResourceManager.Nginx",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/nginx/Azure.ResourceManager.Nginx",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Notification Hubs management client library for .NET\n\nMicrosoft Azure Notification Hubs provide an easy-to-use and scaled-out push engine that enables you to send notifications to any platform (iOS, Android, Windows, etc.) from any back-end (cloud or on-premises).\n\nThis library supports managing Microsoft Azure Notification Hubs resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Notification Hubs management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.NotificationHubs\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "notificationhubs/Azure.ResourceManager.NotificationHubs",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/notificationhubs/Azure.ResourceManager.NotificationHubs",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Object Anchors client library for .NET\n\nAzure Object Anchors enables an application to detect an object in the physical world using a 3D model and estimate its 6-DoF pose. This package supports the conversion of an existing 3D asset into a form that can be used by the Object Anchors runtime to detect physical objects.\n\n[Source code](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/objectanchors/Azure.MixedReality.ObjectAnchors.Conversion/src) | [Package (NuGet)](https://www.nuget.org/packages/Azure.MixedReality.ObjectAnchors.Conversion/)\n\n- [Azure Object Anchors client library for .NET](#azure-object-anchors-client-library-for-net)\n  - [Getting started](#getting-started)\n    - [Install the package](#install-the-package)\n    - [Prerequisites](#prerequisites)\n    - [Authenticate the client](#authenticate-the-client)\n  - [Key concepts](#key-concepts)\n    - [ObjectAnchorsConversionClient](#objectanchorsconversionclient)\n  - [Examples](#examples)\n    - [Upload an asset for Object Anchors asset conversion](#upload-an-asset-for-object-anchors-asset-conversion)\n    - [Start 3D asset conversion](#start-3d-asset-conversion)\n    - [Poll an existing ObjectAnchors asset conversion until completion and download the result](#poll-an-existing-objectanchors-asset-conversion-until-completion-and-download-the-result)\n  - [Troubleshooting](#troubleshooting)\n  - [Next steps](#next-steps)\n  - [Contributing](#contributing)\n\n## Getting started\n\n### Install the package\n\nInstall the Azure Object Anchors client library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.MixedReality.ObjectAnchors.Conversion --prerelease\n```\n\nAdd a package reference:\n\n```xml\n<PackageReference Include=\"Azure.MixedReality.ObjectAnchors.Conversion\" Version=\"0.1.0-beta.0\" />\n```\n\n### Prerequisites\n\n- You must have an [Azure subscription](https://azure.microsoft.com/free/dotnet/).\n- You must have an [Azure Object Anchors](https://review.docs.microsoft.com/azure/object-anchors/) account.\n\n### Authenticate the client\n\nMixed Reality services support a few different forms of authentication:\n\n- Account Key authentication\n  - Account keys enable you to get started quickly with using Mixed Reality services. But before you deploy your application\n    to production, we recommend that you update your app to use Azure AD authentication.\n- Azure Active Directory (AD) token authentication\n  - If you're building an enterprise application and your company is using Azure AD as its identity system, you can use\n    user-based Azure AD authentication in your app. You then grant access to your Object Anchors account by using your\n    existing Azure AD security groups. You can also grant access directly to users in your organization.\n  - Otherwise, we recommend that you obtain Azure AD tokens from a web service that supports your app. We recommend this\n    method for production applications because it allows you to avoid embedding the credentials for access to the Object Anchors asset conversion service in your client application.\n\nSee [here](https://docs.microsoft.com/azure/spatial-anchors/concepts/authentication) for detailed instructions and information.\n\n## Key concepts\n\n### ObjectAnchorsConversionClient\n\nThe `ObjectAnchorsConversionClient` is the client library used to access the Object Anchors asset conversion service. From there, a storage upload URI will be provided for users to upload their assets for conversion into a format that is usable by the Object Anchors runtime.\n\nAssets uploaded to the Microsoft-hosted URI obtained from the client will be retained for **48 hours**.\n\nThe final converted model in Microsoft-hosted storage will be retained for **48 hours**. \n\n## Examples\n\n### Upload an asset for Object Anchors asset conversion\n\n```csharp\nAzureKeyCredential credential = new AzureKeyCredential(accountKey);\n\nObjectAnchorsConversionClient client = new ObjectAnchorsConversionClient(accountId, accountDomain, credential);\n\nAssetUploadUriResult uploadUriResult = await client.GetAssetUploadUriAsync();\n\nUri uploadedInputAssetUri = uploadUriResult.UploadUri;\n\nBlobClient blobClient = new BlobClient(uploadedInputAssetUri);\n\nusing (FileStream fs = File.OpenRead(localFilePath))\n{\n  await blobClient.UploadAsync(fs);\n}\n```\n\n### Start 3D asset conversion\n\n```csharp\nAssetConversionOptions assetConversionOptions = new AssetConversionOptions(uploadedInputAssetUri, AssetFileType.FromFilePath(localFilePath), assetGravity, scale);\n\n// Or you can pass in an optional parameter DisableDetectScaleUnits if you are converting a FBX, specifying whether or not you want to disable automatic detection of the embedded scale units. \n// The detection is enabled by default.\nAssetConversionOptions assetConversionOptions = new AssetConversionOptions(uploadedInputAssetUri, AssetFileType.FromFilePath(localFilePath), assetGravity, scale, disableDetectScaleUnits: true);\n\nAssetConversionOperation operation = await client.StartAssetConversionAsync(assetConversionOptions);\n\nGuid jobId = new Guid(operation.Id);\n```\n\n### Poll an existing ObjectAnchors asset conversion until completion and download the result\n\n```csharp\nAssetConversionOperation operation = new AssetConversionOperation(assetConversionJobId, client);\n\nawait operation.WaitForCompletionAsync();\n\nif (!operation.HasCompletedSuccessfully)\n{\n  throw new Exception(\"The asset conversion operation completed with an unsuccessful status\");\n}\n\nBlobClient blobClient = new BlobClient(operation.Value.OutputModelUri);\n\nBlobDownloadInfo downloadInfo = await blobClient.DownloadAsync();\n\nusing (FileStream file = File.OpenWrite(localFileDownloadPath))\n{\n    await downloadInfo.Content.CopyToAsync(file);\n    FileInfo fileInfo = new FileInfo(localFileDownloadPath);\n}\n```\n\n## Troubleshooting\n\n- See [Error Handling](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md#error-handling) for Azure.Identity.\n- See [Logging](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md#logging) for Azure.Identity.\n\n## Next steps\n\n- Read the [Product documentation](https://review.docs.microsoft.com/azure/object-anchors/)\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License\nAgreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution.\nFor details, visit [https://cla.microsoft.com](https://cla.microsoft.com).\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the\nPR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this\nonce across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact\n[opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n",
        "repo_name": "objectanchors/Azure.MixedReality.ObjectAnchors.Conversion",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/objectanchors/Azure.MixedReality.ObjectAnchors.Conversion",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure OpenAI client library for .NET\n\nThe Azure OpenAI client library for .NET is an adaptation of OpenAI's REST APIs that provides an idiomatic interface\nand rich integration with the rest of the Azure SDK ecosystem. It can connect to Azure OpenAI resources *or* to the\nnon-Azure OpenAI inference endpoint, making it a great choice for even non-Azure OpenAI development.\n\nUse the client library for Azure OpenAI to:\n\n* [Create a completion for text][msdocs_openai_completion]\n* [Create a text embedding for comparisons][msdocs_openai_embedding]\n\nAzure OpenAI is a managed service that allows developers to deploy, tune, and generate content from OpenAI models on Azure resources.\n\n  [Source code](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/openai/Azure.AI.OpenAI/src) | [Package (NuGet)](https://www.nuget.org/packages/Azure.AI.OpenAI) | [API reference documentation](https://learn.microsoft.com/azure/cognitive-services/openai/reference) | [Product documentation](https://learn.microsoft.com/azure/cognitive-services/openai/) | [Samples](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/openai/Azure.AI.OpenAI/tests/Samples)\n\n## Getting started\n\n### Prerequisites\n\nIf you'd like to use an Azure OpenAI resource, you must have an [Azure subscription](https://azure.microsoft.com/free/dotnet/)\nand [Azure OpenAI access](https://learn.microsoft.com/azure/cognitive-services/openai/overview#how-do-i-get-access-to-azure-openai).\nThis will allow you to create an Azure OpenAI resource and get both a connection URL as well as API keys. For more\ninformation, see [Quickstart: Get started generating text using Azure OpenAI Service](https://learn.microsoft.com/azure/cognitive-services/openai/quickstart).\n\nIf you'd like to use the Azure OpenAI .NET client library to connect to non-Azure OpenAI, you'll need an API key\nfrom a developer account at https://platform.openai.com/.\n\n### Install the package\n\nInstall the client library for .NET with [NuGet](https://www.nuget.org/ ):\n\n```dotnetcli\ndotnet add package Azure.AI.OpenAI --prerelease\n```\n\n### Authenticate the client\n\nIn order to interact with Azure OpenAI or OpenAI, you'll need to create an instance of the [OpenAIClient][openai_client_class]\nclass. To configure a client for use with Azure OpenAI, provide a valid endpoint URI to an Azure OpenAI resource\nalong with a corresponding key credential, token credential, or Azure identity credential that's authorized to use the\nAzure OpenAI resource. To instead configure the client to connect to OpenAI's service, provide an API key from OpenAI's\ndeveloper portal.\n\n```C# Snippet:MakeClientWithAzureOrNonAzureOpenAI\nOpenAIClient client = useAzureOpenAI\n    ? new OpenAIClient(\n        new Uri(\"https://your-azure-openai-resource.com/\"),\n        new AzureKeyCredential(\"your-azure-openai-resource-api-key\"))\n    : new OpenAIClient(\"your-api-key-from-platform.openai.com\");\n```\n\n#### Create OpenAIClient with an Azure Active Directory Credential\n\nClient subscription key authentication is used in most of the examples in this getting started guide, but you can also authenticate with Azure Active Directory using the [Azure Identity library][azure_identity]. To use the [DefaultAzureCredential][azure_identity_dac] provider shown below,\nor other credential providers provided with the Azure SDK, please install the Azure.Identity package:\n\n```dotnetcli\ndotnet add package Azure.Identity\n```\n\n```C# Snippet:CreateOpenAIClientTokenCredential\nstring endpoint = \"https://myaccount.openai.azure.com/\";\nvar client = new OpenAIClient(new Uri(endpoint), new DefaultAzureCredential());\n```\n\n## Key concepts\n\nThe main concept to understand is [Completions][azure_openai_completions_docs]. Briefly explained, completions provides its functionality in the form of a text prompt, which by using a specific [model](https://learn.microsoft.com/azure/cognitive-services/openai/concepts/models), will then attempt to match the context and patterns, providing an output text. The following code snippet provides a rough overview (more details can be found in the `GenerateChatbotResponsesWithToken` sample code):\n\n```C# Snippet:UseAzureOrNonAzureOpenAI\nOpenAIClient client = useAzureOpenAI\n    ? new OpenAIClient(\n        new Uri(\"https://your-azure-openai-resource.com/\"),\n        new AzureKeyCredential(\"your-azure-openai-resource-api-key\"))\n    : new OpenAIClient(\"your-api-key-from-platform.openai.com\");\n\nResponse<Completions> response = await client.GetCompletionsAsync(\n    \"text-davinci-003\", // assumes a matching model deployment or model name\n    \"Hello, world!\");\n\nforeach (Choice choice in response.Value.Choices)\n{\n    Console.WriteLine(choice.Text);\n}\n```\n\n### Thread safety\n\nWe guarantee that all client instance methods are thread-safe and independent of each other ([guideline](https://azure.github.io/azure-sdk/dotnet_introduction.html#dotnet-service-methods-thread-safety)). This ensures that the recommendation of reusing client instances is always safe, even across threads.\n\n### Additional concepts\n<!-- CLIENT COMMON BAR -->\n[Client options](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#configuring-service-clients-using-clientoptions) |\n[Accessing the response](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#accessing-http-response-details-using-responset) |\n[Long-running operations](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#consuming-long-running-operations-using-operationt) |\n[Handling failures](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#reporting-errors-requestfailedexception) |\n[Diagnostics](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md) |\n[Mocking](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#mocking) |\n[Client lifetime](https://devblogs.microsoft.com/azure-sdk/lifetime-management-and-thread-safety-guarantees-of-azure-sdk-net-clients/)\n<!-- CLIENT COMMON BAR -->\n\n## Examples\n\nYou can familiarize yourself with different APIs using [Samples](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/openai/Azure.AI.OpenAI/tests/Samples).\n\n### Generate Chatbot Response\n\nThe `GenerateChatbotResponse` method authenticates using a DefaultAzureCredential, then generates text responses to input prompts.\n\n```C# Snippet:GenerateChatbotResponse\nstring endpoint = \"https://myaccount.openai.azure.com/\";\nvar client = new OpenAIClient(new Uri(endpoint), new DefaultAzureCredential());\n\nstring deploymentName = \"text-davinci-003\";\nstring prompt = \"What is Azure OpenAI?\";\nConsole.Write($\"Input: {prompt}\");\n\nResponse<Completions> completionsResponse = client.GetCompletions(deploymentName, prompt);\nstring completion = completionsResponse.Value.Choices[0].Text;\nConsole.WriteLine($\"Chatbot: {completion}\");\n```\n\n### Generate Multiple Chatbot Responses With Subscription Key\n\nThe `GenerateMultipleChatbotResponsesWithSubscriptionKey` method gives an example of generating text responses to input prompts using an Azure subscription key\n\n```C# Snippet:GenerateMultipleChatbotResponsesWithSubscriptionKey\n// Replace with your Azure OpenAI key\nstring key = \"YOUR_AZURE_OPENAI_KEY\";\nstring endpoint = \"https://myaccount.openai.azure.com/\";\nvar client = new OpenAIClient(new Uri(endpoint), new AzureKeyCredential(key));\n\nList<string> examplePrompts = new(){\n    \"How are you today?\",\n    \"What is Azure OpenAI?\",\n    \"Why do children love dinosaurs?\",\n    \"Generate a proof of Euler's identity\",\n    \"Describe in single words only the good things that come into your mind about your mother.\",\n};\n\nstring deploymentName = \"text-davinci-003\";\n\nforeach (string prompt in examplePrompts)\n{\n    Console.Write($\"Input: {prompt}\");\n    CompletionsOptions completionsOptions = new CompletionsOptions();\n    completionsOptions.Prompts.Add(prompt);\n\n    Response<Completions> completionsResponse = client.GetCompletions(deploymentName, completionsOptions);\n    string completion = completionsResponse.Value.Choices[0].Text;\n    Console.WriteLine($\"Chatbot: {completion}\");\n}\n```\n\n### Summarize Text with Completion\n\nThe `SummarizeText` method generates a summarization of the given input prompt.\n\n```C# Snippet:SummarizeText\nstring endpoint = \"https://myaccount.openai.azure.com/\";\nvar client = new OpenAIClient(new Uri(endpoint), new DefaultAzureCredential());\n\nstring textToSummarize = @\"\n    Two independent experiments reported their results this morning at CERN, Europe's high-energy physics laboratory near Geneva in Switzerland. Both show convincing evidence of a new boson particle weighing around 125 gigaelectronvolts, which so far fits predictions of the Higgs previously made by theoretical physicists.\n\n    \"\"As a layman I would say: 'I think we have it'. Would you agree?\"\" Rolf-Dieter Heuer, CERN's director-general, asked the packed auditorium. The physicists assembled there burst into applause.\n:\";\n\nstring summarizationPrompt = @$\"\n    Summarize the following text.\n\n    Text:\n    \"\"\"\"\"\"\n    {textToSummarize}\n    \"\"\"\"\"\"\n\n    Summary:\n\";\n\nConsole.Write($\"Input: {summarizationPrompt}\");\nvar completionsOptions = new CompletionsOptions()\n{\n    Prompts = { summarizationPrompt },\n};\n\nstring deploymentName = \"text-davinci-003\";\n\nResponse<Completions> completionsResponse = client.GetCompletions(deploymentName, completionsOptions);\nstring completion = completionsResponse.Value.Choices[0].Text;\nConsole.WriteLine($\"Summarization: {completion}\");\n```\n\n### Stream Chat Messages with non-Azure OpenAI\n\n```C# Snippet:StreamChatMessages\nstring nonAzureOpenAIApiKey = \"your-api-key-from-platform.openai.com\";\nvar client = new OpenAIClient(nonAzureOpenAIApiKey, new OpenAIClientOptions());\nvar chatCompletionsOptions = new ChatCompletionsOptions()\n{\n    Messages =\n    {\n        new ChatMessage(ChatRole.System, \"You are a helpful assistant. You will talk like a pirate.\"),\n        new ChatMessage(ChatRole.User, \"Can you help me?\"),\n        new ChatMessage(ChatRole.Assistant, \"Arrrr! Of course, me hearty! What can I do for ye?\"),\n        new ChatMessage(ChatRole.User, \"What's the best way to train a parrot?\"),\n    }\n};\n\nResponse<StreamingChatCompletions> response = await client.GetChatCompletionsStreamingAsync(\n    deploymentOrModelName: \"gpt-3.5-turbo\",\n    chatCompletionsOptions);\nusing StreamingChatCompletions streamingChatCompletions = response.Value;\n\nawait foreach (StreamingChatChoice choice in streamingChatCompletions.GetChoicesStreaming())\n{\n    await foreach (ChatMessage message in choice.GetMessageStreaming())\n    {\n        Console.Write(message.Content);\n    }\n    Console.WriteLine();\n}\n```\n\n## Troubleshooting\n\nWhen you interact with Azure OpenAI using the .NET SDK, errors returned by the service correspond to the same HTTP status codes returned for [REST API][openai_rest] requests.\n\nFor example, if you try to create a client using an endpoint that doesn't match your Azure OpenAI Resource endpoint, a `404` error is returned, indicating `Resource Not Found`.\n\n## Next steps\n\n* Provide a link to additional code examples, ideally to those sitting alongside the README in the package's `/samples` directory.\n* If appropriate, point users to other packages that might be useful.\n* If you think there's a good chance that developers might stumble across your package in error (because they're searching for specific functionality and mistakenly think the package provides that functionality), point them to the packages they might be looking for.\n\n## Contributing\n\nSee the [OpenAI CONTRIBUTING.md][openai_contrib] for details on building, testing, and contributing to this library.\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [cla.microsoft.com][cla].\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct]. For more information see the [Code of Conduct FAQ][code_of_conduct_faq] or contact [opencode@microsoft.com][email_opencode] with any additional questions or comments.\n\n<!-- LINKS -->\n[azure_identity]: https://learn.microsoft.com/dotnet/api/overview/azure/identity-readme?view=azure-dotnet\n[azure_identity_dac]: https://learn.microsoft.com/dotnet/api/azure.identity.defaultazurecredential?view=azure-dotnet\n[msdocs_openai_completion]: https://learn.microsoft.com/azure/cognitive-services/openai/how-to/completions\n[msdocs_openai_embedding]: https://learn.microsoft.com/azure/cognitive-services/openai/concepts/understand-embeddings\n[style-guide-msft]: https://docs.microsoft.com/style-guide/capitalization\n[style-guide-cloud]: https://aka.ms/azsdk/cloud-style-guide\n[openai_client_class]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/openai/Azure.AI.OpenAI/src/Generated/OpenAIClient.cs\n[openai_rest]: https://learn.microsoft.com/azure/cognitive-services/openai/reference\n[azure_openai_completions_docs]: https://learn.microsoft.com/azure/cognitive-services/openai/how-to/completions\n[azure_openai_embeddgings_docs]: https://learn.microsoft.com/azure/cognitive-services/openai/concepts/understand-embeddings\n[openai_contrib]: https://github.com/Azure/azure-sdk-for-net/blob/main/CONTRIBUTING.md\n[cla]: https://cla.microsoft.com\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[code_of_conduct_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[email_opencode]: mailto:opencode@microsoft.com\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net/sdk/openai/Azure.AI.OpenAI/README.png)\n",
        "repo_name": "openai/Azure.AI.OpenAI",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/openai/Azure.AI.OpenAI",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Energy Services management client library for .NET\n\nThis library supports managing Microsoft Azure Energy Services resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Energy Services management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.EnergyServices --prerelease\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "openenergyplatform/Azure.ResourceManager.EnergyServices",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/openenergyplatform/Azure.ResourceManager.EnergyServices",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Operational Insights management client library for .NET\n\nMicrosoft Azure Operational Insights is an analysis service designed to provide IT administrators with deep insight into their on-premises and cloud environments. It helps you interact with real-time and historical computer data for rapid development of custom insights, while providing Microsoft- and community-developed patterns for data analysis.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started\n\n### Install the package\n\nInstall the Microsoft Azure Operational Insights management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.OperationalInsights\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "operationalinsights/Azure.ResourceManager.OperationalInsights",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/operationalinsights/Azure.ResourceManager.OperationalInsights",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Orbital management client library for .NET\n\nMicrosoft Azure Orbital is a fully managed cloud-based ground station as a service that allows you to streamline your operations by ingesting space data directly into Azure. \n\nThis library supports managing Microsoft Azure Orbital resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Orbital management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.Orbital\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "orbital/Azure.ResourceManager.Orbital",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/orbital/Azure.ResourceManager.Orbital",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "\ufeff# Microsoft Azure PaloAltoNetworks.Ngfw management client library for .NET\n\nThe Azure Native Paloaltonetworks' Next Generation Firewall enables customers to discover Palo Alto Networks' NGFirewall in the Azure portal and consume it in their virtual networks (a.k.a Azure VNets and Azure virtual Wan hubs). It enables secure application access, inspects all traffic, and helps enforce least-privileged access - all while detecting and preventing advanced threats.\nThis library supports managing Azure Paloaltonetworks CloudNGFW resources.\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure PaloAltoNetworks.Ngfw management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.PaloAltoNetworks.Ngfw --prerelease\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html)\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "paloaltonetworks.ngfw/Azure.ResourceManager.PaloAltoNetworks.Ngfw",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/paloaltonetworks.ngfw/Azure.ResourceManager.PaloAltoNetworks.Ngfw",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Peering management client library for .NET\n\nMicrosoft Azure Peering Service is a networking service that enhances customer connectivity to Microsoft cloud services such as Microsoft 365, Dynamics 365, software as a service (SaaS) services, Azure, or any Microsoft services accessible via the public internet. Microsoft has partnered with internet service providers (ISPs), internet exchange partners (IXPs), and software-defined cloud interconnect (SDCI) providers worldwide to provide reliable and high-performing public connectivity with optimal routing from the customer to the Microsoft network.\n\nThis library supports managing Microsoft Azure Peering resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Peering management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.Peering\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "peering/Azure.ResourceManager.Peering",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/peering/Azure.ResourceManager.Peering",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Personalizer client library for .NET\n\n[Azure Personalizer](https://docs.microsoft.com/azure/cognitive-services/personalizer/)\nis a cloud-based service that helps your applications choose the best content item to show your users. You can use the Personalizer service to determine what product to suggest to shoppers or to figure out the optimal position for an advertisement. After the content is shown to the user, your application monitors the user's reaction and reports a reward score back to the Personalizer service. This ensures continuous improvement of the machine learning model, and Personalizer's ability to select the best content item based on the contextual information it receives.\n\n## Getting started\n\n### Install the package\n\nInstall the Azure Personalizer client library for .NET with [NuGet][nuget]:\n\n```dotnetcli\ndotnet add package Azure.AI.Personalizer --prerelease\n```\n\n## Key concepts\nFunctionality is exposed through several client libraries:\n\n- [Azure.AI.Personalizer](https://www.nuget.org/packages/Azure.AI.Personalizer) is built on top of [Azure.Core](https://github.com/Azure/azure-sdk-for-net/blob/master/sdk/core/Azure.Core/README.md) and the [Azure SDK Design Guidelines for .NET](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n- [Microsoft.Azure.Personalizer](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/cognitiveservices/Personalizer) is the previous .NET client library for Personalizer.\n\n## Contributing\n\nSee our [Search CONTRIBUTING.md][search_contrib] for details on building,\ntesting, and contributing to this library.\n\nThis project welcomes contributions and suggestions.  Most contributions require\nyou to agree to a Contributor License Agreement (CLA) declaring that you have\nthe right to, and actually do, grant us the rights to use your contribution. For\ndetails, visit [cla.microsoft.com][cla].\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc].\nFor more information see the [Code of Conduct FAQ][coc_faq]\nor contact [opencode@microsoft.com][coc_contact] with any\nadditional questions or comments.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2Fsdk%2Fpersonalizer%2FAzure.AI.Personalizer%2FREADME.png)\n\n<!-- LINKS -->\n[nuget]: https://www.nuget.org/\n[search_contrib]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/search/CONTRIBUTING.md\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n",
        "repo_name": "personalizer/Azure.AI.Personalizer",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/personalizer/Azure.AI.Personalizer",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Policy Insights management client library for .NET\n\nThis library supports managing Microsoft Azure Policy Insights resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Policy Insights management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.PolicyInsights\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "policyinsights/Azure.ResourceManager.PolicyInsights",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/policyinsights/Azure.ResourceManager.PolicyInsights",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Database for PostgreSQL management client library for .NET\n\nMicrosoft Azure Database for PostgreSQL is a relational database service in the Microsoft cloud based on the PostgreSQL open source relational database.\n\nThis library supports managing Microsoft Azure Database for PostgreSQL resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Database for PostgreSQL management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.PostgreSql\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "postgresql/Azure.ResourceManager.PostgreSql",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/postgresql/Azure.ResourceManager.PostgreSql",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure PowerBI Dedicated management client library for .NET\n\nThis library supports managing Microsoft Azure PowerBI Dedicated resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure PowerBI Dedicated management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.PowerBIDedicated --prerelease\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "powerbidedicated/Azure.ResourceManager.PowerBIDedicated",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/powerbidedicated/Azure.ResourceManager.PowerBIDedicated",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Private Dns management client library for .NET\n\nMicrosoft Azure Private DNS provides a reliable and secure DNS service for your virtual network. Azure Private DNS manages and resolves domain names in the virtual network without the need to configure a custom DNS solution.\n\nThis library supports managing Microsoft Azure Private Dns resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Private Dns management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.PrivateDns\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "privatedns/Azure.ResourceManager.PrivateDns",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/privatedns/Azure.ResourceManager.PrivateDns",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Provider Hub (Resource Provider as a Service) management client library for .NET\n\nThis library supports managing Microsoft Azure Provider Hub (RPaaS - Resource Provider as a Service) resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started\n\n### Install the package\n\nInstall the Microsoft Azure Provider Hub (Resource Provider as a Service) management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.ProviderHub\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "providerhub/Azure.ResourceManager.ProviderHub",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/providerhub/Azure.ResourceManager.ProviderHub",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Purview Account client library for .NET\n\nAzure Purview Account is a fully managed cloud service.\n\n**Please rely heavily on the [service's documentation][account_product_documentation] and our [protocol client docs][protocol_client_quickstart] to use this library**\n\n[Source code][source_code] | [Package (NuGet)][client_nuget_package] | [Product documentation][account_product_documentation]\n\n## Getting started\n\n### Install the package\n\nInstall the Azure Purview Account client library for .NET with [NuGet][client_nuget_package]:\n\n```dotnetcli\ndotnet add package Azure.Analysis.Purview.Account --prerelease\n```\n\n### Prerequisites\n\n- You must have an [Azure subscription][azure_subscription] and a [Purview resource][purview_resource] to use this package.\n\n### Authenticate the client\n\n#### Using Azure Active Directory\n\nThis document demonstrates using [DefaultAzureCredential][default_cred_ref] to authenticate via Azure Active Directory. However, any of the credentials offered by the [Azure.Identity][azure_identity] will be accepted.  See the [Azure.Identity][azure_identity] documentation for more information about other credentials.\n\nOnce you have chosen and configured your credential, you can create instances of the `AccountClient`.\n\n```C#\nvar credential = new DefaultAzureCredential();\nvar client = new PurviewAccountClient(new Uri(\"https://<my-account-name>.purview.azure.com\"), credential);\n```\n\n## Key concepts\n\n### Protocol Methods\n\nOperations exposed by the Purview Account SDK for .NET use *protocol methods* to expose the underlying REST operations. You can learn more about how to use SDK Clients which use protocol methods in our [documentation][protocol_client_quickstart].\n\n### Thread safety\n\nWe guarantee that all client instance methods are thread-safe and independent of each other ([guideline](https://azure.github.io/azure-sdk/dotnet_introduction.html#dotnet-service-methods-thread-safety)). This ensures that the recommendation of reusing client instances is always safe, even across threads.\n\n### Additional concepts\n<!-- CLIENT COMMON BAR -->\n[Client options](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#configuring-service-clients-using-clientoptions) |\n[Accessing the response](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#accessing-http-response-details-using-responset) |\n[Long-running operations](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#consuming-long-running-operations-using-operationt) |\n[Handling failures](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#reporting-errors-requestfailedexception) |\n[Diagnostics](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md) |\n[Mocking](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#mocking) |\n[Client lifetime](https://devblogs.microsoft.com/azure-sdk/lifetime-management-and-thread-safety-guarantees-of-azure-sdk-net-clients/)\n<!-- CLIENT COMMON BAR -->\n\n## Examples\n\nThe following section shows you how to initialize and authenticate your client, then get all of the type definitions in the catalog.\n\n### Get All Type Definitions\n\n```C#\nvar credential = new DefaultAzureCredential();\nvar client = new PurviewAccountClient(new Uri(\"https://<my-account-name>.purview.azure.com\"), credential);\n\nvar Response response = await client.GetAccountPropertiesAsync();\nusing var responseDocument = JsonDocument.Parse(response.Content);\nConsole.WriteLine(responseDocument.RootElement.GetProperty(\"name\"));\n```\n\n## Troubleshooting\n\n### Setting up console logging\nThe simplest way to see the logs is to enable the console logging.\nTo create an Azure SDK log listener that outputs messages to console use AzureEventSourceListener.CreateConsoleLogger method.\n\n```C#\n// Setup a listener to monitor logged events.\nusing AzureEventSourceListener listener = AzureEventSourceListener.CreateConsoleLogger();\n```\n\nTo learn more about other logging mechanisms see [here][azure_core_diagnostics].\n\n## Next steps\n\nThis client SDK exposes operations using *protocol methods*, you can learn more about how to use SDK Clients which use protocol methods in our [documentation][protocol_client_quickstart].\n\n## Contributing\n\nSee the [CONTRIBUTING.md][contributing] for details on building, testing, and contributing to this library.\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [cla.microsoft.com][cla].\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n[source_code]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/purview/Azure.Analytics.Purview.Account/src\n[client_nuget_package]: https://www.nuget.org/packages?q=Azure.Analytics.Purview.Account\n[account_product_documentation]: https://azure.microsoft.com/services/purview/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/identity/Azure.Identity\n[protocol_client_quickstart]: https://aka.ms/azsdk/net/protocol/quickstart\n[default_cred_ref]: https://docs.microsoft.com/dotnet/api/azure.identity.defaultazurecredential?view=azure-dotnet\n[azure_subscription]: https://azure.microsoft.com/free/dotnet/\n[purview_resource]: https://docs.microsoft.com/azure/purview\n[azure_core_diagnostics]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md\n[cla]: https://cla.microsoft.com\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2Fsdk%2Fpurview%2FAzure.Analytics.Purview.Catalog%2FREADME.png)\n",
        "repo_name": "purview/Azure.Analytics.Purview.Account",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/purview/Azure.Analytics.Purview.Account",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Purview Administration client library for .NET\n\nAzure Purview Administration contains the Purview Account and Purview MetdataPolicy managed cloud service.\n\n**Please rely heavily on the [service's documentation][account_product_documentation] and our [protocol client docs][protocol_client_quickstart] to use this library**\n\n[Source code][source_code] | [Package (NuGet)][client_nuget_package] | [Product documentation][account_product_documentation]\n\n## Getting started\n\n### Install the package\n\nInstall the Azure Purview Administration client library for .NET with [NuGet][client_nuget_package]:\n\n```dotnetcli\ndotnet add package Azure.Analysis.Purview.Administration --prerelease\n```\n\n### Prerequisites\n\n- You must have an [Azure subscription][azure_subscription] and a [Purview resource][purview_resource] to use this package.\n\n### Authenticate the client\n\n#### Using Azure Active Directory\n\nThis document demonstrates using [DefaultAzureCredential][default_cred_ref] to authenticate via Azure Active Directory. However, any of the credentials offered by the [Azure.Identity][azure_identity] will be accepted.  See the [Azure.Identity][azure_identity] documentation for more information about other credentials.\n\nOnce you have chosen and configured your credential, you can create instances of the `PurviewAccountClient`, `PurviewMetadataPolicyClient` or `PurviewMetadataRolesClient`.\n\n```C#\nvar credential = new DefaultAzureCredential();\nvar accountClient = new PurviewAccountClient(new Uri(\"https://<my-account-name>.purview.azure.com\"), credential);\nvar policyClient = new PurviewMetadataPolicyClient(new Uri(\"https://<my-account-name>.purview.azure.com\"), \"myCollection\", credential);\nvar roleClient = new PurviewMetadataRolesClient(new Uri(\"https://<my-account-name>.purview.azure.com\"), credential);\n```\n\n## Key concepts\n\n### Protocol Methods\n\nOperations exposed by the Purview Account SDK for .NET use *protocol methods* to expose the underlying REST operations. You can learn more about how to use SDK Clients which use protocol methods in our [documentation][protocol_client_quickstart].\n\n### Thread safety\n\nWe guarantee that all client instance methods are thread-safe and independent of each other ([guideline](https://azure.github.io/azure-sdk/dotnet_introduction.html#dotnet-service-methods-thread-safety)). This ensures that the recommendation of reusing client instances is always safe, even across threads.\n\n### Additional concepts\n<!-- CLIENT COMMON BAR -->\n[Client options](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#configuring-service-clients-using-clientoptions) |\n[Accessing the response](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#accessing-http-response-details-using-responset) |\n[Long-running operations](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#consuming-long-running-operations-using-operationt) |\n[Handling failures](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#reporting-errors-requestfailedexception) |\n[Diagnostics](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md) |\n[Mocking](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#mocking) |\n[Client lifetime](https://devblogs.microsoft.com/azure-sdk/lifetime-management-and-thread-safety-guarantees-of-azure-sdk-net-clients/)\n<!-- CLIENT COMMON BAR -->\n\n## Examples\n\nThe following section shows you how to initialize and authenticate your client, then get all of the type definitions in the catalog.\n\n### Get All Account Type Definitions\n\n```C#\nvar credential = new DefaultAzureCredential();\nvar client = new PurviewAccountClient(new Uri(\"https://<my-account-name>.purview.azure.com\"), credential);\n\nvar Response response = await client.GetAccountPropertiesAsync();\nusing var responseDocument = JsonDocument.Parse(response.Content);\nConsole.WriteLine(responseDocument.RootElement.GetProperty(\"name\"));\n```\n\n### List All Roles\n\n```C#\nvar credential = new DefaultAzureCredential();\nvar client = new PurviewMetadataRolesClient(new Uri(\"https://<my-account-name>.purview.azure.com\"), credential);\n\nAsyncPageable<BinaryData> fetchResponse = client.GetMetadataRolesAsync(new());\nawait foreach (BinaryData item in fetchResponse)\n{\n    using var jsonDocument = JsonDocument.Parse(item);\n    JsonElement fetchBodyJson = jsonDocument.RootElement;\n    Console.WriteLine(fetchBodyJson.GetProperty(\"id\"));\n}\n```\n\n## Troubleshooting\n\n### Setting up console logging\n\nThe simplest way to see the logs is to enable the console logging.\nTo create an Azure SDK log listener that outputs messages to console use AzureEventSourceListener.CreateConsoleLogger method.\n\n```C#\n// Setup a listener to monitor logged events.\nusing AzureEventSourceListener listener = AzureEventSourceListener.CreateConsoleLogger();\n```\n\nTo learn more about other logging mechanisms see [here][azure_core_diagnostics].\n\n## Next steps\n\nThis client SDK exposes operations using *protocol methods*, you can learn more about how to use SDK Clients which use protocol methods in our [documentation][protocol_client_quickstart].\n\n## Contributing\n\nSee the [CONTRIBUTING.md][contributing] for details on building, testing, and contributing to this library.\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [cla.microsoft.com][cla].\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n[source_code]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/purview/Azure.Analytics.Purview.Account/src\n[client_nuget_package]: https://www.nuget.org/packages?q=Azure.Analytics.Purview.Account\n[account_product_documentation]: https://azure.microsoft.com/services/purview/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/identity/Azure.Identity\n[protocol_client_quickstart]: https://aka.ms/azsdk/net/protocol/quickstart\n[default_cred_ref]: https://docs.microsoft.com/dotnet/api/azure.identity.defaultazurecredential?view=azure-dotnet\n[azure_subscription]: https://azure.microsoft.com/free/dotnet/\n[purview_resource]: https://docs.microsoft.com/azure/purview\n[azure_core_diagnostics]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md\n[cla]: https://cla.microsoft.com\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2Fsdk%2Fpurview%2FAzure.Analytics.Purview.Catalog%2FREADME.png)\n",
        "repo_name": "purview/Azure.Analytics.Purview.Administration",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/purview/Azure.Analytics.Purview.Administration",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Purview Catalog client library for .NET\n\nAzure Purview Catalog is a fully managed cloud service whose users can discover the data sources they need and understand the data sources they find. At the same time, Data Catalog helps organizations get more value from their existing investments.\n\n- Search for data using technical or business terms\n- Browse associated technical, business, semantic, and operational metadata\n- Identify the sensitivity level of data.\n\n**Please rely heavily on the [service's documentation][catalog_service_documentation] and our [protocol client docs][protocol_client_quickstart] to use this library**\n\n[Source code][source_code] | [Package (NuGet)][client_nuget_package] | [Product documentation][catalog_product_documentation]\n\n## Getting started\n\n### Install the package\n\nInstall the Azure Purview Catalog client library for .NET with [NuGet][client_nuget_package]:\n\n```dotnetcli\ndotnet add package Azure.Analytics.Purview.Catalog --prerelease\n```\n\n### Prerequisites\n\n- You must have an [Azure subscription][azure_subscription] and a [Purview resource][purview_resource] to use this package.\n\n### Authenticate the client\n\n#### Using Azure Active Directory\n\nThis document demonstrates using [DefaultAzureCredential][default_cred_ref] to authenticate via Azure Active Directory. However, any of the credentials offered by the [Azure.Identity][azure_identity] will be accepted.  See the [Azure.Identity][azure_identity] documentation for more information about other credentials.\n\nOnce you have chosen and configured your credential, you can create instances of the `PurviewCatalogClient`.\n\n```C#\nvar credential = new DefaultAzureCredential();\nvar client = new PurviewCatalogClient(new Uri(\"https://<my-account-name>.purview.azure.com\"), credential);\n```\n\n## Key concepts\n\n### Protocol Methods\n\nOperations exposed by the Purview Catalog SDK for .NET use *protocol methods* to expose the underlying REST operations. You can learn more about how to use SDK Clients which use protocol methods in our [documentation][protocol_client_quickstart].\n\n### Thread safety\n\nWe guarantee that all client instance methods are thread-safe and independent of each other ([guideline](https://azure.github.io/azure-sdk/dotnet_introduction.html#dotnet-service-methods-thread-safety)). This ensures that the recommendation of reusing client instances is always safe, even across threads.\n\n### Additional concepts\n<!-- CLIENT COMMON BAR -->\n[Client options](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#configuring-service-clients-using-clientoptions) |\n[Accessing the response](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#accessing-http-response-details-using-responset) |\n[Long-running operations](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#consuming-long-running-operations-using-operationt) |\n[Handling failures](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#reporting-errors-requestfailedexception) |\n[Diagnostics](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md) |\n[Mocking](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#mocking) |\n[Client lifetime](https://devblogs.microsoft.com/azure-sdk/lifetime-management-and-thread-safety-guarantees-of-azure-sdk-net-clients/)\n<!-- CLIENT COMMON BAR -->\n\n## Examples\n\nThe following section shows you how to initialize and authenticate your client, then get all of the type definitions in the catalog.\n\n### Get All Type Definitions\n\n```C#\nvar credential = new DefaultAzureCredential();\nvar client = new PurviewCatalogClient(new Uri(\"https://<my-account-name>.purview.azure.com\"), credential);\n\nvar response = await client.Types.GetAllTypeDefinitionsAsync();\nusing var responseDocument = JsonDocument.Parse(response.Content);\nConsole.WriteLine(responseDocument.RootElement.GetProperty(\"entityDefs\"));\n```\n\n## Troubleshooting\n\n### Setting up console logging\nThe simplest way to see the logs is to enable the console logging.\nTo create an Azure SDK log listener that outputs messages to console use AzureEventSourceListener.CreateConsoleLogger method.\n\n```C#\n// Setup a listener to monitor logged events.\nusing AzureEventSourceListener listener = AzureEventSourceListener.CreateConsoleLogger();\n```\n\nTo learn more about other logging mechanisms see [here][azure_core_diagnostics].\n\n## Next steps\n\nThis client SDK exposes operations using *protocol methods*, you can learn more about how to use SDK Clients which use protocol methods in our [documentation][protocol_client_quickstart].\n\n## Contributing\n\nSee the [CONTRIBUTING.md][contributing] for details on building, testing, and contributing to this library.\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [cla.microsoft.com][cla].\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n[source_code]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/purview/Azure.Analytics.Purview.Catalog/src\n[client_nuget_package]: https://www.nuget.org/packages?q=Azure.Analytics.Purview.Catalog\n[catalog_service_documentation]: https://azure.microsoft.com/services/purview/\n[catalog_product_documentation]: https://docs.microsoft.com/azure/purview/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/identity/Azure.Identity\n[protocol_client_quickstart]: https://aka.ms/azsdk/net/protocol/quickstart\n[default_cred_ref]: https://docs.microsoft.com/dotnet/api/azure.identity.defaultazurecredential?view=azure-dotnet\n[azure_subscription]: https://azure.microsoft.com/free/dotnet/\n[purview_resource]: https://docs.microsoft.com/azure/purview/create-catalog-portal\n[azure_core_diagnostics]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md\n[cla]: https://cla.microsoft.com\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n[contributing]: https://github.com/Azure/azure-sdk-for-net/blob/main/CONTRIBUTING.md\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2Fsdk%2Fpurview%2FAzure.Analytics.Purview.Catalog%2FREADME.png)\n",
        "repo_name": "purview/Azure.Analytics.Purview.Catalog",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/purview/Azure.Analytics.Purview.Catalog",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Purview Scanning client library for .NET\n\nAzure Purview Scanning is a fully managed cloud service whose users can scan your data into your data estate (also known as your **catalog**). Scanning is a process by which the catalog connects directly to a data source on a user-specified schedule.\n\n- Scan your data into your catalog\n- Examine your data\n- Extract schemas from your data\n\n**Please rely heavily on the [service's documentation][catalog_service_documentation] and our [protocol client docs][protocol_client_quickstart] to use this library**\n\n[Source code][source_code] | [Package (NuGet)][client_nuget_package] | [Product documentation][catalog_product_documentation]\n\n## Getting started\n\n### Install the package\n\nInstall the Azure Purview Scanning client library for .NET with [NuGet][client_nuget_package]:\n\n```dotnetcli\ndotnet add package Azure.Analytics.Purview.Scanning --prerelease\n```\n\n### Prerequisites\n\n- You must have an [Azure subscription][azure_subscription] and a [Purview resource][purview_resource] to use this package.\n\n### Authenticate the client\n\n#### Using Azure Active Directory\n\nThis document demonstrates using [DefaultAzureCredential][default_cred_ref] to authenticate via Azure Active Directory. However, any of the credentials offered by the [Azure.Identity][azure_identity] will be accepted. See the [Azure.Identity][azure_identity] documentation for more information about other credentials.\n\nOnce you have chosen and configured your credential, you can create instances of the `PurviewScanningClient`.\n\n```C#\nvar credential = new DefaultAzureCredential();\nvar client = new PurviewScanningClient(new Uri(\"https://<my-account-name>.scan.purview.azure.com\"), credential);\n```\n\n## Key concepts\n\n### Protocol Methods\n\nOperations exposed by the Purview Scanning SDK for .NET use *protocol methods* to expose the underlying REST operations. You can learn more about how to use SDK Clients which use protocol methods in our [documentation][protocol_client_quickstart].\n\n### Thread safety\n\nWe guarantee that all client instance methods are thread-safe and independent of each other ([guideline](https://azure.github.io/azure-sdk/dotnet_introduction.html#dotnet-service-methods-thread-safety)). This ensures that the recommendation of reusing client instances is always safe, even across threads.\n\n### Additional concepts\n<!-- CLIENT COMMON BAR -->\n[Client options](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#configuring-service-clients-using-clientoptions) |\n[Accessing the response](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#accessing-http-response-details-using-responset) |\n[Long-running operations](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#consuming-long-running-operations-using-operationt) |\n[Handling failures](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#reporting-errors-requestfailedexception) |\n[Diagnostics](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md) |\n[Mocking](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#mocking) |\n[Client lifetime](https://devblogs.microsoft.com/azure-sdk/lifetime-management-and-thread-safety-guarantees-of-azure-sdk-net-clients/)\n<!-- CLIENT COMMON BAR -->\n\n## Examples\n\nThe following section shows you how to initialize and authenticate your client, then list all of your data sources.\n\n### List All Data Sources\n\n```C#\nvar credential = new DefaultAzureCredential();\nvar client = new PurviewScanningServiceClient(new Uri(\"https://<my-account-name>.scan.purview.azure.com\"), credential);\n\nvar response = await client.GetDataSourcesAsync();\nusing var responseDocument = JsonDocument.Parse(response.Content);\nConsole.WriteLine(responseDocument.RootElement.GetProperty(\"value\"));\n```\n\n## Troubleshooting\n\n### Setting up console logging\nThe simplest way to see the logs is to enable the console logging.\nTo create an Azure SDK log listener that outputs messages to console use AzureEventSourceListener.CreateConsoleLogger method.\n\n```C#\n// Setup a listener to monitor logged events.\nusing AzureEventSourceListener listener = AzureEventSourceListener.CreateConsoleLogger();\n```\n\nTo learn more about other logging mechanisms see [here][azure_core_diagnostics].\n\n## Next steps\n\nThis client SDK exposes operations using *protocol methods*, you can learn more about how to use SDK Clients which use protocol methods in our [documentation][protocol_client_quickstart].\n\n## Contributing\n\nSee the [CONTRIBUTING.md][contributing] for details on building, testing, and contributing to this library.\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [cla.microsoft.com][cla].\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n[source_code]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/purview/Azure.Analytics.Purview.Scanning/src\n[client_nuget_package]: https://www.nuget.org/packages?q=Azure.Analytics.Purview.Scanning\n[catalog_service_documentation]: https://azure.microsoft.com/services/purview/\n[catalog_product_documentation]: https://docs.microsoft.com/azure/purview/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/identity/Azure.Identity\n[protocol_client_quickstart]: https://aka.ms/azsdk/net/protocol/quickstart\n[default_cred_ref]: https://docs.microsoft.com/dotnet/api/azure.identity.defaultazurecredential?view=azure-dotnet\n[azure_subscription]: https://azure.microsoft.com/free/dotnet/\n[purview_resource]: https://docs.microsoft.com/azure/purview/create-catalog-portal\n[azure_core_diagnostics]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md\n[cla]: https://cla.microsoft.com\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n[contributing]: https://github.com/Azure/azure-sdk-for-net/blob/main/CONTRIBUTING.md\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2Fsdk%2Fpurview%2FAzure.Analytics.Purview.Scanning%2FREADME.png)\n",
        "repo_name": "purview/Azure.Analytics.Purview.Scanning",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/purview/Azure.Analytics.Purview.Scanning",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Share client library for .NET\n\nMicrosoft Purview Share is a fully managed cloud service.\n\n**Please rely heavily on the [service's documentation][share_product_documentation] and our [protocol client docs][protocol_client_quickstart] to use this library**\n\n[Source code][source_code] | [Package (NuGet)][client_nuget_package] | [Product documentation][share_product_documentation]\n\n## Getting started\n\n### Install the package\n\nInstall the Microsoft Purview Share client library for .NET with [NuGet][client_nuget_package]:\n\n```dotnetcli\ndotnet add package Azure.Analytics.Purview.Share --prerelease\n```\n\n### Prerequisites\n\n- You must have an [Azure subscription][azure_subscription] and a [Purview resource][purview_resource] to use this package.\n\n### Authenticate the client\n\n#### Using Azure Active Directory\n\nThis document demonstrates using [DefaultAzureCredential][default_cred_ref] to authenticate via Azure Active Directory. However, any of the credentials offered by the [Azure.Identity][azure_identity] will be accepted.  See the [Azure.Identity][azure_identity] documentation for more information about other credentials.\n\nOnce you have chosen and configured your credential, you can create instances of the `SentSharesClient`.\n\n```C# Snippet:Azure_Analytics_Purview_Share_Authenticate_The_Client\nvar credential = new DefaultAzureCredential();\nvar endPoint = \"https://<my-account-name>.purview.azure.com/share\";\nvar sentShareClient = new SentSharesClient(endPoint, credential);\n```\n\n## Key concepts\n\n### Protocol Methods\n\nOperations exposed by the Purview Share SDK for .NET use *protocol methods* to expose the underlying REST operations. You can learn more about how to use SDK Clients which use protocol methods in our [documentation][protocol_client_quickstart].\n\n### Thread safety\n\nWe guarantee that all client instance methods are thread-safe and independent of each other ([guideline](https://azure.github.io/azure-sdk/dotnet_introduction.html#dotnet-service-methods-thread-safety)). This ensures that the recommendation of reusing client instances is always safe, even across threads.\n\n### Additional concepts\n\n<!-- CLIENT COMMON BAR -->\n[Client options](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#configuring-service-clients-using-clientoptions) |\n[Accessing the response](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#accessing-http-response-details-using-responset) |\n[Long-running operations](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#consuming-long-running-operations-using-operationt) |\n[Handling failures](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#reporting-errors-requestfailedexception) |\n[Diagnostics](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md) |\n[Mocking](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#mocking) |\n[Client lifetime](https://devblogs.microsoft.com/azure-sdk/lifetime-management-and-thread-safety-guarantees-of-azure-sdk-net-clients/)\n<!-- CLIENT COMMON BAR -->\n\n## Examples\n\nThe following section shows you how to initialize and authenticate your client and share data.\n\n### Create sent share\n\n```C# Snippet:Azure_Analytics_Purview_Share_Samples_CreateSentShare\nvar credential = new DefaultAzureCredential();\nvar endPoint = \"https://<my-account-name>.purview.azure.com/share\";\nvar sentShareClient = new SentSharesClient(endPoint, credential);\n\n// Create sent share\nvar sentShareName = \"sample-Share\";\n\nvar inPlaceSentShareDto = new\n{\n    shareKind = \"InPlace\",\n    properties = new\n    {\n        description = \"demo share\",\n        collection = new\n        {\n            // for root collection else name of any accessible child collection in the Purview account.\n            referenceName = \"<purivewAccountName>\",\n            type = \"CollectionReference\"\n        }\n    }\n};\n\nvar sentShare = await sentShareClient.CreateOrUpdateAsync(sentShareName, RequestContent.Create(inPlaceSentShareDto));\n```\n\n### Add an asset to a sent share\n\n```C# Snippet:Azure_Analytics_Purview_Share_Samples_AddAnAssetToASentShare\nvar credential = new DefaultAzureCredential();\nvar endPoint = \"https://<my-account-name>.purview.azure.com/share\";\n\n// Add asset to sent share\nvar sentShareName = \"sample-Share\";\nvar assetName = \"fabrikam-blob-asset\";\nvar assetNameForReceiver = \"receiver-visible-asset-name\";\nvar senderStorageResourceId = \"<SENDER_STORAGE_ACCOUNT_RESOURCE_ID>\";\nvar senderStorageContainer = \"fabrikamcontainer\";\nvar senderPathToShare = \"folder/sample.txt\";\nvar pathNameForReceiver = \"from-fabrikam\";\n\nvar assetData = new\n{\n    // For Adls Gen2 asset use \"AdlsGen2Account\"\n    kind = \"blobAccount\",\n    properties = new\n    {\n        storageAccountResourceId = senderStorageResourceId,\n        receiverAssetName = assetNameForReceiver,\n        paths = new[]\n        {\n            new\n            {\n                containerName = senderStorageContainer,\n                senderPath = senderPathToShare,\n                receiverPath = pathNameForReceiver\n            }\n        }\n    }\n};\nvar assetsClient = new AssetsClient(endPoint, credential);\nawait assetsClient.CreateAsync(WaitUntil.Started, sentShareName, assetName, RequestContent.Create(assetData));\n```\n\n### Send Invitation\n\n```C# Snippet:Azure_Analytics_Purview_Share_Samples_SendInvitation\nvar credential = new DefaultAzureCredential();\nvar endPoint = \"https://<my-account-name>.purview.azure.com/share\";\n\n// Send invitation\nvar sentShareName = \"sample-Share\";\nvar invitationName = \"invitation-to-fabrikam\";\n\nvar invitationData = new\n{\n    invitationKind = \"User\",\n    properties = new\n    {\n        targetEmail = \"user@domain.com\"\n    }\n};\n\n// Instead of sending invitation to Azure login email of the user, you can send invitation to object ID of a service principal and tenant ID.\n// Tenant ID is optional. To use this method, comment out the previous declaration, and uncomment the next one.\n//var invitationData = new\n//{\n//    invitationKind = \"Application\",\n//    properties = new\n//    {\n//        targetActiveDirectoryId = \"<targetActieDirectoryId>\",\n//        targetObjectId = \"<targetObjectId>\"\n//    }\n//};\n\nvar sentShareInvitationsClient = new SentShareInvitationsClient(endPoint, credential);\nawait sentShareInvitationsClient.CreateOrUpdateAsync(sentShareName, invitationName, RequestContent.Create(invitationData));\n```\n\n### View sent share invitations\n\n```C# Snippet:Azure_Analytics_Purview_Share_Samples_ViewSentShareInvitations\nvar sentShareName = \"sample-Share\";\nvar credential = new DefaultAzureCredential();\nvar endPoint = \"https://<my-account-name>.purview.azure.com/share\";\nvar sentShareInvitationsClient = new SentShareInvitationsClient(endPoint, credential);\n\n// View sent share invitations. (Pending/Rejected)\nvar sentShareInvitations = await sentShareInvitationsClient.GetSentShareInvitationsAsync(sentShareName).ToEnumerableAsync();\nvar responseInvitation = sentShareInvitations.FirstOrDefault();\n\nif (responseInvitation == null)\n{\n    //No invitations\n    return;\n}\n\nusing var responseInvitationDocument = JsonDocument.Parse(responseInvitation);\nvar targetEmail = responseInvitationDocument.RootElement.GetProperty(\"name\");\n```\n\n### View received invitations\n\n```C# Snippet:Azure_Analytics_Purview_Share_Samples_ViewReceivedInvitations\nvar credential = new DefaultAzureCredential();\nvar endPoint = \"https://<my-account-name>.purview.azure.com/share\";\nvar receivedInvitationsClient = new ReceivedInvitationsClient(endPoint, credential);\n\n// View received invitations\nvar receivedInvitations = await receivedInvitationsClient.GetReceivedInvitationsAsync().ToEnumerableAsync();\n```\n\n### Create a received share\n\n```C# Snippet:Azure_Analytics_Purview_Share_Samples_CreateAReceivedShare\nvar credential = new DefaultAzureCredential();\nvar endPoint = \"https://<my-account-name>.purview.azure.com/share\";\nvar receivedInvitationsClient = new ReceivedInvitationsClient(endPoint, credential);\n\n// Create received share\nvar receivedInvitations = await receivedInvitationsClient.GetReceivedInvitationsAsync().ToEnumerableAsync();\nvar receivedShareName = \"fabrikam-received-share\";\nvar receivedInvitation = receivedInvitations.LastOrDefault();\n\nif (receivedInvitation == null)\n{\n    //No received invitations\n    return;\n}\n\nusing var jsonDocument = JsonDocument.Parse(receivedInvitation);\nvar receivedInvitationDocument = jsonDocument.RootElement;\nvar receivedInvitationId = receivedInvitationDocument.GetProperty(\"name\");\n\nvar receivedShareData = new\n{\n    shareKind = \"InPlace\",\n    properties = new\n    {\n        invitationId = receivedInvitationId,\n        sentShareLocation = \"eastus\",\n        collection = new\n        {\n            // for root collection else name of any accessible child collection in the Purview account.\n            referenceName = \"<purivewAccountName>\",\n            type = \"CollectionReference\"\n        }\n    }\n};\n\nvar receivedShareClient = new ReceivedSharesClient(endPoint, credential);\nvar receivedShare = await receivedShareClient.CreateAsync(receivedShareName, RequestContent.Create(receivedShareData));\n```\n\n### View accepted shares\n\n```C# Snippet:Azure_Analytics_Purview_Share_Samples_ViewAcceptedShares\nvar sentShareName = \"sample-Share\";\nvar credential = new DefaultAzureCredential();\nvar endPoint = \"https://<my-account-name>.purview.azure.com/share\";\nvar acceptedSentSharesClient = new AcceptedSentSharesClient(endPoint, credential);\n\n// View accepted shares\nvar acceptedSentShares = await acceptedSentSharesClient.GetAcceptedSentSharesAsync(sentShareName).ToEnumerableAsync();\n\nvar acceptedSentShare = acceptedSentShares.FirstOrDefault();\n\nif (acceptedSentShare == null)\n{\n    //No accepted sent shares\n    return;\n}\nusing var jsonDocument = JsonDocument.Parse(acceptedSentShare);\nvar receiverEmail = jsonDocument.RootElement.GetProperty(\"properties\").GetProperty(\"receiverEmail\").GetString();\n```\n\n### Get received assets\n\n```C# Snippet:Azure_Analytics_Purview_Share_Samples_GetReceivedAssets\nvar receivedShareName = \"sample-share\";\nvar credential = new DefaultAzureCredential();\nvar endPoint = \"https://<my-account-name>.purview.azure.com/share\";\nvar receivedAssetsClient = new ReceivedAssetsClient(endPoint, credential);\n\n// Get received assets\nvar receivedAssets = await receivedAssetsClient.GetReceivedAssetsAsync(receivedShareName).ToEnumerableAsync();\nusing var jsonDocument = JsonDocument.Parse(receivedAssets.First());\nvar receivedAssetName = jsonDocument.RootElement.GetProperty(\"name\").GetString();\n\nstring assetMappingName = \"receiver-asset-mapping\";\nstring receiverContainerName = \"receivedcontainer\";\nstring receiverFolderName = \"receivedfolder\";\nstring receiverMountPath = \"receivedmountpath\";\nstring receiverStorageResourceId = \"<RECEIVER_STORAGE_ACCOUNT_RESOURCE_ID>\";\n\nvar assetMappingData = new\n{\n    // For Adls Gen2 asset use \"AdlsGen2Account\"\n    kind = \"BlobAccount\",\n    properties = new\n    {\n        assetId = Guid.Parse(receivedAssetName),\n        storageAccountResourceId = receiverStorageResourceId,\n        containerName = receiverContainerName,\n        folder = receiverFolderName,\n        mountPath = receiverMountPath\n    }\n};\n\nvar assetMappingsClient = new AssetMappingsClient(endPoint, credential);\nvar assetMapping = await assetMappingsClient.CreateAsync(WaitUntil.Completed, receivedShareName, assetMappingName, RequestContent.Create(assetMappingData));\n```\n\n## Troubleshooting\n\n### Setting up console logging\nThe simplest way to see the logs is to enable the console logging.\nTo create an Azure SDK log listener that outputs messages to console use AzureEventSourceListener.CreateConsoleLogger method.\n\n```C#\n// Setup a listener to monitor logged events.\nusing AzureEventSourceListener listener = AzureEventSourceListener.CreateConsoleLogger();\n```\n\nTo learn more about other logging mechanisms see [here][azure_core_diagnostics].\n\n## Next steps\n\nThis client SDK exposes operations using *protocol methods*, you can learn more about how to use SDK Clients which use protocol methods in our [documentation][protocol_client_quickstart].\n\n## Contributing\n\nSee the [CONTRIBUTING.md][contributing] for details on building, testing, and contributing to this library.\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [cla.microsoft.com][cla].\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n[source_code]: https://azure.microsoft.com/services/purview/\n[client_nuget_package]: https://www.nuget.org/packages?q=Azure.Analytics.Purview.Share\n[share_product_documentation]: https://docs.microsoft.com/azure/purview/concept-data-share\n[azure_identity]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/identity/Azure.Identity\n[protocol_client_quickstart]: https://aka.ms/azsdk/net/protocol/quickstart\n[default_cred_ref]: https://docs.microsoft.com/dotnet/api/azure.identity.defaultazurecredential?view=azure-dotnet\n[azure_subscription]: https://azure.microsoft.com/free/dotnet/\n[purview_resource]: https://docs.microsoft.com/azure/purview\n[azure_core_diagnostics]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md\n[cla]: https://cla.microsoft.com\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n[contributing]: https://github.com/Azure/azure-sdk-for-net/blob/main/CONTRIBUTING.md\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2Fsdk%2Fpurview%2FAzure.Analytics.Purview.Share%2FREADME.png)\n",
        "repo_name": "purview/Azure.Analytics.Purview.Share",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/purview/Azure.Analytics.Purview.Share",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Purview Share client library for .NET\n\nMicrosoft Purview Share is a fully managed cloud service.\n\n**Please rely heavily on the [service's documentation][share_product_documentation] and our [protocol client docs][protocol_client_quickstart] to use this library**\n\n[Source code][source_code] | [Package (NuGet)][client_nuget_package] | [Product documentation][share_product_documentation]\n\n## Getting started\n\n### Install the package\n\nInstall the Microsoft Purview Share client library for .NET with [NuGet][client_nuget_package]:\n\n```dotnetcli\ndotnet add package Azure.Analytics.Purview.Sharing --prerelease\n```\n\n### Prerequisites\n\n- You must have an [Azure subscription][azure_subscription] and a [Purview resource][purview_resource] to use this package.\n\n### Authenticate the client\n\n#### Using Azure Active Directory\n\nThis example demonstrates using [DefaultAzureCredential][default_cred_ref] to authenticate via Azure Active Directory. However, any of the credentials offered by the [Azure.Identity][azure_identity] will be accepted.  See the [Azure.Identity][azure_identity] documentation for more information about other credentials.\n\nOnce you have chosen and configured your credential, you can create instances of the `SentSharesClient`.\n\n```C# Snippet:SentSharesClientSample_CreateSentSharesClient\nvar credential = new DefaultAzureCredential();\nvar endPoint = \"https://my-account-name.purview.azure.com/share\";\nvar sentShareClient = new SentSharesClient(endPoint, credential);\n```\n\n```C# Snippet:ReceivedSharesClientSample_CreateReceivedSharesClient\nvar credential = new DefaultAzureCredential();\nvar endPoint = \"https://my-account-name.purview.azure.com/share\";\nvar receivedSharesClient = new ReceivedSharesClient(endPoint, credential);\n```\n\n## Key concepts\n\n### Protocol Methods\n\nOperations exposed by the Purview Share client library for .NET use *protocol methods* to expose the underlying REST operations. You can learn more about how to use Azure SDK clients which use protocol methods in our [documentation][protocol_client_quickstart].\n\n### Thread safety\n\nWe guarantee that all client instance methods are thread-safe and independent of each other ([guideline](https://azure.github.io/azure-sdk/dotnet_introduction.html#dotnet-service-methods-thread-safety)). This ensures that the recommendation of reusing client instances is always safe, even across threads.\n\n### Additional concepts\n\n<!-- CLIENT COMMON BAR -->\n[Client options](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#configuring-service-clients-using-clientoptions) |\n[Accessing the response](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#accessing-http-response-details-using-responset) |\n[Long-running operations](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#consuming-long-running-operations-using-operationt) |\n[Handling failures](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#reporting-errors-requestfailedexception) |\n[Diagnostics](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md) |\n[Mocking](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#mocking) |\n[Client lifetime](https://devblogs.microsoft.com/azure-sdk/lifetime-management-and-thread-safety-guarantees-of-azure-sdk-net-clients/)\n<!-- CLIENT COMMON BAR -->\n\n## Examples\n\nThe following section shows you how to initialize and authenticate your client and share data.\n\n### Create a sent share\n\n```C# Snippet:SentSharesClientSample_CreateSentShare\nvar credential = new DefaultAzureCredential();\nvar endPoint = \"https://my-account-name.purview.azure.com/share\";\nvar sentShareClient = new SentSharesClient(endPoint, credential);\n\nvar data = new\n{\n    shareKind = \"InPlace\",\n    properties = new\n    {\n        artifact = new\n        {\n            storeKind = \"AdlsGen2Account\",\n            storeReference = new\n            {\n                referenceName = \"/subscriptions/subscriptionId/resourceGroups/resourceGroup/providers/Microsoft.Storage/storageAccounts/sharerStorageAccount\",\n                type = \"ArmResourceReference\"\n            },\n            properties = new\n            {\n                paths = new[]\n               {\n                    new\n                    {\n                        containerName = \"containerName\",\n                        senderPath = \"senderPath\",\n                        receiverPath = \"receiverPath\"\n                    }\n                }\n            }\n        },\n        displayName = \"displayName\",\n        description = \"description\",\n    }\n};\n\nOperation<BinaryData> createResponse = await sentShareClient.CreateOrReplaceSentShareAsync(WaitUntil.Completed, \"sentShareId\", RequestContent.Create(data));\n```\n\n### Get a sent share\n\n```C# Snippet:SentSharesClientSample_GetSentShare\nvar credential = new DefaultAzureCredential();\nvar endPoint = \"https://my-account-name.purview.azure.com/share\";\nvar sentShareClient = new SentSharesClient(endPoint, credential);\n\nResponse response = await sentShareClient.GetSentShareAsync(\"sentShareId\");\n```\n\n### List sent shares\n\n```C# Snippet:SentSharesClientSample_ListSentShares\nvar credential = new DefaultAzureCredential();\nvar endPoint = \"https://my-account-name.purview.azure.com/share\";\nvar sentShareClient = new SentSharesClient(endPoint, credential);\n\nList<BinaryData> response = await sentShareClient.GetAllSentSharesAsync(\"referenceName\").ToEnumerableAsync();\n```\n\n### Create a sent share invitation\n\n```C# Snippet:SentSharesClientSample_CreateSentShareInvitation\nvar credential = new DefaultAzureCredential();\nvar endPoint = \"https://my-account-name.purview.azure.com/share\";\nvar sentShareClient = new SentSharesClient(endPoint, credential);\n\nvar data = new\n{\n    invitationKind = \"Service\",\n    properties = new\n    {\n        TargetActiveDirectoryId = \"targetActiveDirectoryId\",\n        TargetObjectId = \"targetObjectId\",\n    }\n};\n\nResponse response = await sentShareClient.CreateSentShareInvitationAsync(\"sentShareId\", \"sentShareInvitationId\", RequestContent.Create(data));\n```\n\n### Get a sent share invitation\n\n```C# Snippet:SentSharesClientSample_GetSentShareInvitation\nvar credential = new DefaultAzureCredential();\nvar endPoint = \"https://my-account-name.purview.azure.com/share\";\nvar sentShareClient = new SentSharesClient(endPoint, credential);\n\nResponse response = await sentShareClient.GetSentShareInvitationAsync(\"sentShareId\", \"sentShareInvitationId\");\n```\n\n### List sent share invitations\n\n```C# Snippet:SentSharesClientSample_ListSentShareInvitations\nvar credential = new DefaultAzureCredential();\nvar endPoint = \"https://my-account-name.purview.azure.com/share\";\nvar sentShareClient = new SentSharesClient(endPoint, credential);\n\nList<BinaryData> sentShareInvitations = await sentShareClient.GetAllSentShareInvitationsAsync(\"sentShareId\").ToEnumerableAsync();\n```\n\n### List detached received shares\n\n```C# Snippet:ReceivedSharesClientSample_ListDetachedReceivedShares\nvar credential = new DefaultAzureCredential();\nvar endPoint = \"https://my-account-name.purview.azure.com/share\";\nvar receivedSharesClient = new ReceivedSharesClient(endPoint, credential);\n\nList<BinaryData> createResponse = await receivedSharesClient.GetAllDetachedReceivedSharesAsync().ToEnumerableAsync();\n```\n\n### Create a received share\n\n```C# Snippet:ReceivedSharesClientSample_CreateReceivedShare\nvar credential = new DefaultAzureCredential();\nvar endPoint = \"https://my-account-name.purview.azure.com/share\";\nvar receivedSharesClient = new ReceivedSharesClient(endPoint, credential);\n\nvar data = new\n{\n    shareKind = \"InPlace\",\n    properties = new\n    {\n        sink = new\n        {\n            storeKind = \"AdlsGen2Account\",\n            storeReference = new\n            {\n                referenceName = \"/subscriptions/suscriptionId/resourceGroups/resourceGroup/providers/Microsoft.Storage/storageAccounts/receiverStorageAccount\",\n\n                type = \"ArmResourceReference\"\n            },\n            properties = new\n            {\n                containerName = \"containerName\",\n                folder = \"folder\",\n                mountPath = \"mountPath\",\n            }\n        },\n        displayName = \"displayName\",\n    }\n};\n\nOperation<BinaryData> createResponse = await receivedSharesClient.CreateOrReplaceReceivedShareAsync(WaitUntil.Completed, \"receivedShareId\", RequestContent.Create(data));\n```\n\n### Get a received share\n\n```C# Snippet:ReceivedSharesClientSample_GetReceivedShare\nvar credential = new DefaultAzureCredential();\nvar endPoint = \"https://my-account-name.purview.azure.com/share\";\nvar receivedSharesClient = new ReceivedSharesClient(endPoint, credential);\n\nResponse operation = await receivedSharesClient.GetReceivedShareAsync(\"receivedShareId\");\n```\n\n### List attached received shares\n\n```C# Snippet:ReceivedSharesClientSample_ListAttachedReceivedShares\nvar credential = new DefaultAzureCredential();\nvar endPoint = \"https://my-account-name.purview.azure.com/share\";\nvar receivedSharesClient = new ReceivedSharesClient(endPoint, credential);\n\nList<BinaryData> createResponse = await receivedSharesClient.GetAllAttachedReceivedSharesAsync(\"referenceName\").ToEnumerableAsync();\n```\n\n### Delete a received share\n\n```C# Snippet:ReceivedSharesClientSample_DeleteReceivedShare\nvar credential = new DefaultAzureCredential();\nvar endPoint = \"https://my-account-name.purview.azure.com/share\";\nvar receivedSharesClient = new ReceivedSharesClient(endPoint, credential);\n\nOperation operation = await receivedSharesClient.DeleteReceivedShareAsync(WaitUntil.Completed, \"receivedShareId\");\n```\n\n### Delete a sent share invitation\n\n```C# Snippet:SentSharesClientSample_DeleteSentShareInvitation\nvar credential = new DefaultAzureCredential();\nvar endPoint = \"https://my-account-name.purview.azure.com/share\";\nvar sentShareClient = new SentSharesClient(endPoint, credential);\n\nOperation operation = await sentShareClient.DeleteSentShareInvitationAsync(WaitUntil.Completed, \"sentShareId\", \"sentShareInvitationId\");\n```\n\n### Delete a sent share\n\n```C# Snippet:SentSharesClientSample_DeleteSentShare\nvar credential = new DefaultAzureCredential();\nvar endPoint = \"https://my-account-name.purview.azure.com/share\";\nvar sentShareClient = new SentSharesClient(endPoint, credential);\n\nOperation operation = await sentShareClient.DeleteSentShareAsync(WaitUntil.Completed, \"sentShareId\");\n```\n\n## Troubleshooting\n\n### Setting up console logging\nThe simplest way to see the logs is to enable the console logging.\nTo create an Azure SDK log listener that outputs messages to console use AzureEventSourceListener.CreateConsoleLogger method.\n\n```C#\n// Setup a listener to monitor logged events.\nusing AzureEventSourceListener listener = AzureEventSourceListener.CreateConsoleLogger();\n```\n\nTo learn more about other logging mechanisms see [here][azure_core_diagnostics].\n\n## Next steps\n\nThis client SDK exposes operations using *protocol methods*, you can learn more about how to use SDK Clients which use protocol methods in our [documentation][protocol_client_quickstart].\n\n## Contributing\n\nSee the [CONTRIBUTING.md][contributing] for details on building, testing, and contributing to this library.\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [cla.microsoft.com][cla].\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n[source_code]: https://azure.microsoft.com/services/purview/\n[client_nuget_package]: https://www.nuget.org/packages?q=Azure.Analytics.Purview.Sharing\n[share_product_documentation]: https://docs.microsoft.com/azure/purview/concept-data-share\n[azure_identity]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/identity/Azure.Identity\n[protocol_client_quickstart]: https://aka.ms/azsdk/net/protocol/quickstart\n[default_cred_ref]: https://docs.microsoft.com/dotnet/api/azure.identity.defaultazurecredential?view=azure-dotnet\n[azure_subscription]: https://azure.microsoft.com/free/dotnet/\n[purview_resource]: https://docs.microsoft.com/azure/purview\n[azure_core_diagnostics]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md\n[cla]: https://cla.microsoft.com\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n[contributing]: https://github.com/Azure/azure-sdk-for-net/blob/main/CONTRIBUTING.md\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2Fsdk%2Fpurview%2FAzure.Analytics.Purview.Sharing%2FREADME.png)\n",
        "repo_name": "purview/Azure.Analytics.Purview.Sharing",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/purview/Azure.Analytics.Purview.Sharing",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Purview Workflow client library for .NET\n\nWorkflows are automated, repeatable business processes that users can create within Microsoft Purview to validate and orchestrate CUD (create, update, delete) operations on their data entities. Enabling these processes allow organizations to track changes, enforce policy compliance, and ensure quality data across their data landscape.\n\nUse the client library for Purview Workflow to:\n\n- Manage workflows\n- Submit user requests and monitor workflow runs\n- View and respond to workflow tasks\n\n**For more details about how to use workflow, please refer to the [service documentation][product_documentation]**\n\n## Getting started\n\n### Install the package\n\n```dotnetcli\ndotnet add package Azure.Analytics.Purview.Workflows --prerelease\n```\n\n### Prerequisites\n\nYou must have an [Azure subscription][azure_subscription] and a [Purview resource][purview_resource] to use this package.\n\n### Authenticate the client\n\nSince the Workflow service uses an Azure Active Directory (AAD) bearer token for authentication and identification, an email address should be encoded into the token to allow for notification when using Workflow. It is recommended that the [Azure Identity][azure_identity] library be used  with a the [UsernamePasswordCredential][username_password_credential]. Before using the [Azure Identity][azure_identity] library with Workflow, [an application][app_registration] should be registered and used for the clientId passed to the [UsernamePasswordCredential][username_password_credential].\n\n```C# Snippet:Azure_Analytics_Purview_Workflows_CreateClient\nUri endpoint = new Uri(Environment.GetEnvironmentVariable(\"WORKFLOW_ENDPOINT\"));\nstring clientId = Environment.GetEnvironmentVariable(\"ClientId\");\nstring tenantId = Environment.GetEnvironmentVariable(\"TenantId\");\nstring username = Environment.GetEnvironmentVariable(\"Username\");\nstring password = Environment.GetEnvironmentVariable(\"Password\");\n\nTokenCredential usernamePasswordCredential = new UsernamePasswordCredential(clientId,tenantId, username,password, null);\nvar client = new PurviewWorkflowServiceClient(endpoint, usernamePasswordCredential);\n```\n\n## Examples\n\nThe following section provides several code snippets covering some of the most common scenarios, including:\n\n- [Azure Purview Workflow client library for .NET](#azure-purview-workflow-client-library-for-net)\n  - [Getting started](#getting-started)\n    - [Install the package](#install-the-package)\n    - [Prerequisites](#prerequisites)\n    - [Authenticate the client](#authenticate-the-client)\n  - [Examples](#examples)\n    - [Create workflow](#create-workflow)\n    - [Submit user requests](#submit-user-requests)\n    - [Approve workflow task](#approve-workflow-task)\n  - [Key concepts](#key-concepts)\n  - [Troubleshooting](#troubleshooting)\n  - [Next steps](#next-steps)\n  - [Contributing](#contributing)\n\n### Create workflow\n\n```C# Snippet:Azure_Analytics_Purview_Workflows_CreateWorkflow\nGuid workflowId = Guid.NewGuid();\n\nstring workflow = \"{\\\"name\\\":\\\"Create glossary term workflow\\\",\\\"description\\\":\\\"\\\",\\\"triggers\\\":[{\\\"type\\\":\\\"when_term_creation_is_requested\\\",\\\"underGlossaryHierarchy\\\":\\\"/glossaries/20031e20-b4df-4a66-a61d-1b0716f3fa48\\\"}],\\\"isEnabled\\\":true,\\\"actionDag\\\":{\\\"actions\\\":{\\\"Startandwaitforanapproval\\\":{\\\"type\\\":\\\"Approval\\\",\\\"inputs\\\":{\\\"parameters\\\":{\\\"approvalType\\\":\\\"PendingOnAll\\\",\\\"title\\\":\\\"ApprovalRequestforCreateGlossaryTerm\\\",\\\"assignedTo\\\":[\\\"eece94d9-0619-4669-bb8a-d6ecec5220bc\\\"]}},\\\"runAfter\\\":{}},\\\"Condition\\\":{\\\"type\\\":\\\"If\\\",\\\"expression\\\":{\\\"and\\\":[{\\\"equals\\\":[\\\"@outputs('Startandwaitforanapproval')['body/outcome']\\\",\\\"Approved\\\"]}]},\\\"actions\\\":{\\\"Createglossaryterm\\\":{\\\"type\\\":\\\"CreateTerm\\\",\\\"runAfter\\\":{}},\\\"Sendemailnotification\\\":{\\\"type\\\":\\\"EmailNotification\\\",\\\"inputs\\\":{\\\"parameters\\\":{\\\"emailSubject\\\":\\\"GlossaryTermCreate-APPROVED\\\",\\\"emailMessage\\\":\\\"YourrequestforGlossaryTerm@{triggerBody()['request']['term']['name']}isapproved.\\\",\\\"emailRecipients\\\":[\\\"@{triggerBody()['request']['requestor']}\\\"]}},\\\"runAfter\\\":{\\\"Createglossaryterm\\\":[\\\"Succeeded\\\"]}}},\\\"else\\\":{\\\"actions\\\":{\\\"Sendrejectemailnotification\\\":{\\\"type\\\":\\\"EmailNotification\\\",\\\"inputs\\\":{\\\"parameters\\\":{\\\"emailSubject\\\":\\\"GlossaryTermCreate-REJECTED\\\",\\\"emailMessage\\\":\\\"YourrequestforGlossaryTerm@{triggerBody()['request']['term']['name']}isrejected.\\\",\\\"emailRecipients\\\":[\\\"@{triggerBody()['request']['requestor']}\\\"]}},\\\"runAfter\\\":{}}}},\\\"runAfter\\\":{\\\"Startandwaitforanapproval\\\":[\\\"Succeeded\\\"]}}}}}\";\n\nResponse createResult = await client.CreateOrReplaceWorkflowAsync(workflowId, RequestContent.Create(workflow));\n```\n\n### Submit user requests\n\n```C# Snippet:Azure_Analytics_Purview_Workflows_SubmitUserRequests\nstring request = \"{\\\"operations\\\":[{\\\"type\\\":\\\"CreateTerm\\\",\\\"payload\\\":{\\\"glossaryTerm\\\":{\\\"name\\\":\\\"term\\\",\\\"anchor\\\":{\\\"glossaryGuid\\\":\\\"20031e20-b4df-4a66-a61d-1b0716f3fa48\\\"},\\\"status\\\":\\\"Approved\\\",\\\"nickName\\\":\\\"term\\\"}}}],\\\"comment\\\":\\\"Thanks!\\\"}\";\n\nResponse submitResult = await client.SubmitUserRequestsAsync(RequestContent.Create(request));\n```\n\n### Approve workflow task\n\n```C# Snippet:Azure_Analytics_Purview_Workflows_ApproveWorkflowTask\n// This taskId represents an existing workflow task. The id can be obtained by calling GetWorkflowTasksAsync API.\nGuid taskId = new Guid(\"b129fe16-72d3-4994-9135-b997b9be46e0\");\n\nstring request = \"{\\\"comment\\\":\\\"Thanks!\\\"}\";\n\nResponse approveResult = await client.ApproveApprovalTaskAsync(taskId, RequestContent.Create(request));\n```\n\n## Key concepts\n\n## Troubleshooting\n\n## Next steps\n\nThis client SDK exposes operations using *protocol methods*, you can learn more about how to use SDK Clients which use protocol methods in our [documentation][protocol_client_quickstart].\n\n## Contributing\n\nSee the [CONTRIBUTING.md][contributing] for details on building, testing, and contributing to this library.\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [cla.microsoft.com][cla].\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n[product_documentation]: https://learn.microsoft.com/azure/purview/concept-workflow\n[azure_subscription]: https://azure.microsoft.com/free/dotnet/\n[purview_resource]: https://docs.microsoft.com/azure/purview/create-catalog-portal\n[azure_identity]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/identity/Azure.Identity/README.md\n[app_registration]: https://learn.microsoft.com/azure/active-directory/develop/quickstart-register-app\n[username_password_credential]: https://learn.microsoft.com/dotnet/api/azure.identity.usernamepasswordcredential?view=azure-dotnet\n[protocol_client_quickstart]: https://aka.ms/azsdk/net/protocol/quickstart\n[cla]: https://cla.microsoft.com\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n[contributing]: https://github.com/Azure/azure-sdk-for-net/blob/main/CONTRIBUTING.md\n",
        "repo_name": "purview/Azure.Analytics.Purview.Workflows",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/purview/Azure.Analytics.Purview.Workflows",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Purview management client library for .NET\n\nMicrosoft Purview's solutions in the governance portal provide a unified data governance service that helps you manage your on-premises, multicloud, and software-as-a-service (SaaS) data.\n\nThis library supports managing Microsoft Azure Purview resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Purview management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.Purview\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "purview/Azure.ResourceManager.Purview",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/purview/Azure.ResourceManager.Purview",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Quantum Jobs client library for .NET\n\nAzure Quantum is a Microsoft Azure service that you can use to run quantum computing programs or solve optimization problems in the cloud.  Using the Azure Quantum tools and SDKs, you can create quantum programs and run them against different quantum simulators and machines.  You can use the Azure.Quantum.Jobs client library to:\n- Create, enumerate, and cancel quantum jobs\n- Enumerate provider status and quotas\n\n  [Source code][source] | [API reference documentation](https://docs.microsoft.com/qsharp/api/) | [Product documentation](https://docs.microsoft.com/azure/quantum/)\n\n## Getting started\n\nThis section should include everything a developer needs to do to install and create their first client connection *very quickly*.\n\n### Install the package\n\nInstall the Azure Quantum Jobs client library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.Quantum.Jobs --prerelease\n```\n\n### Prerequisites\n\nInclude a section after the install command that details any requirements that must be satisfied before a developer can [authenticate](#authenticate-the-client) and test all of the snippets in the [Examples](#examples) section. For example, for Cosmos DB:\n\n> You must have an [Azure subscription](https://azure.microsoft.com/free/dotnet/), [Cosmos DB account](https://docs.microsoft.com/azure/cosmos-db/account-overview) (SQL API), and [Python 3.6+](https://www.python.org/downloads/) to use this package.\n\n### Authenticate the client\n\nTo authenticate with the service, the workspace will use [DefaultAzureCredential](https://docs.microsoft.com/dotnet/api/azure.identity.defaultazurecredential?view=azure-dotnet) internally. This will try different authentication mechanisms based on the environment (e.g. Environment Variables, ManagedIdentity, CachedTokens) and finally it will fallback to [InteractiveBrowserCredential](https://docs.microsoft.com/dotnet/api/azure.identity.interactivebrowsercredential?view=azure-dotnet).\n\nWorkspace will also allow the user to override the above behavior by passing their own [TokenCredential](https://docs.microsoft.com/dotnet/api/azure.core.tokencredential?view=azure-dotnet).\n\n`TokenCredential` is the default Authentication mechanism used by Azure SDKs.\n\n## Key concepts\n\n`QuantumJobClient` is the root class to be used to authenticate and create, enumerate, and cancel jobs.\n\n`JobDetails` contains all the properties of a job.\n\n`ProviderStatus` contains status information for a provider.\n\n`QuantumJobQuota` contains quota properties.\n\n### Thread safety\nWe guarantee that all client instance methods are thread-safe and independent of each other ([guideline](https://azure.github.io/azure-sdk/dotnet_introduction.html#dotnet-service-methods-thread-safety)). This ensures that the recommendation of reusing client instances is always safe, even across threads.\n\n### Additional concepts\n<!-- CLIENT COMMON BAR -->\n[Client options](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#configuring-service-clients-using-clientoptions) |\n[Accessing the response](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#accessing-http-response-details-using-responset) |\n[Long-running operations](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#consuming-long-running-operations-using-operationt) |\n[Handling failures](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#reporting-errors-requestfailedexception) |\n[Diagnostics](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md) |\n[Mocking](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#mocking) |\n[Client lifetime](https://devblogs.microsoft.com/azure-sdk/lifetime-management-and-thread-safety-guarantees-of-azure-sdk-net-clients/)\n<!-- CLIENT COMMON BAR -->\n\n## Examples\n\n* [Get Container SAS URI](#get-container-sas-uri)\n* [Upload Input Data](#upload-input-data)\n* [Create The Job](#create-the-job)\n* [Get Job](#get-job)\n* [Get Jobs](#get-jobs)\n\n### Create the client\n\nCreate an instance of the QuantumJobClient by passing in these parameters:\n- [Subscription][subscriptions] - looks like XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX and can be found in your list of subscriptions on azure\n- [Resource Group][resource-groups] - a container that holds related resources for an Azure solution \n- [Workspace][workspaces] - a collection of assets associated with running quantum or optimization applications\n- [Location][location] - choose the best data center by geographical region \n- [StorageContainerName][blob-storage] - your blob storage \n- [Credential][credentials] - used to authenticate \n\n```C# Snippet:Azure_Quantum_Jobs_CreateClient\n// Create a QuantumJobClient\nvar subscriptionId = \"your_subscription_id\";\nvar resourceGroupName = \"your_resource_group_name\";\nvar workspaceName = \"your_quantum_workspace_name\";\nvar location = \"your_location\";\nvar storageContainerName = \"your_container_name\";\n\nvar credential = new DefaultAzureCredential(true);\n\nvar quantumJobClient =\n    new QuantumJobClient(\n        subscriptionId,\n        resourceGroupName,\n        workspaceName,\n        location,\n        credential);\n```\n\n### Get Container SAS URI\n\nCreate a storage container where to put your data.\n\n```C# Snippet:Azure_Quantum_Jobs_GetContainerSasUri\n// Get container Uri with SAS key\nvar containerUri = (quantumJobClient.GetStorageSasUri(\n    new BlobDetails(storageContainerName))).Value.SasUri;\n```\n\n### Upload Input Data\n\nUsing the SAS URI, upload the compressed json input data to the blob client.\nNote that we need to compress the json input data before uploading it to the blob storage.\nThis contains the parameters to be used with [Quantum Inspired Optimizations](https://docs.microsoft.com/azure/quantum/optimization-overview-introduction)\n\n```C# Snippet:Azure_Quantum_Jobs_UploadInputData\nstring problemFilePath = \"./problem.json\";\n\n// Get input data blob Uri with SAS key\nstring blobName = Path.GetFileName(problemFilePath);\nvar inputDataUri = (quantumJobClient.GetStorageSasUri(\n    new BlobDetails(storageContainerName)\n    {\n        BlobName = blobName,\n    })).Value.SasUri;\n\nusing (var problemStreamToUpload = new MemoryStream())\n{\n    using (FileStream problemFileStream = File.OpenRead(problemFilePath))\n    {\n        // Check if problem file is a gzip file.\n        // If it is, just read its contents.\n        // If not, read and compress the content.\n        var fileExtension = Path.GetExtension(problemFilePath).ToLower();\n        if (fileExtension == \".gz\" ||\n            fileExtension == \".gzip\")\n        {\n            problemFileStream.CopyTo(problemStreamToUpload);\n        }\n        else\n        {\n            using (var gzip = new GZipStream(problemStreamToUpload, CompressionMode.Compress, leaveOpen: true))\n            {\n                byte[] buffer = new byte[8192];\n                int count;\n                while ((count = problemFileStream.Read(buffer, 0, buffer.Length)) > 0)\n                {\n                    gzip.Write(buffer, 0, count);\n                }\n            }\n        }\n    }\n    problemStreamToUpload.Position = 0;\n\n    // Upload input data to blob\n    var blobClient = new BlobClient(new Uri(inputDataUri));\n    var blobHeaders = new BlobHttpHeaders\n    {\n        ContentType = \"application/json\",\n        ContentEncoding = \"gzip\"\n    };\n    var blobUploadOptions = new BlobUploadOptions { HttpHeaders = blobHeaders };\n    blobClient.Upload(problemStreamToUpload, options: blobUploadOptions);\n}\n```\n\n### Create The Job\n\nNow that you've uploaded your problem definition to Azure Storage, you can use `CreateJob` to define an Azure Quantum job.\n\n```C# Snippet:Azure_Quantum_Jobs_CreateJob\n// Submit job\nvar jobId = $\"job-{Guid.NewGuid():N}\";\nvar jobName = $\"jobName-{Guid.NewGuid():N}\";\nvar inputDataFormat = \"microsoft.qio.v2\";\nvar outputDataFormat = \"microsoft.qio-results.v2\";\nvar providerId = \"microsoft\";\nvar target = \"microsoft.paralleltempering-parameterfree.cpu\";\nvar inputParams = new Dictionary<string, object>() { { \"params\", new Dictionary<string, object>() } };\nvar createJobDetails = new JobDetails(containerUri, inputDataFormat, providerId, target)\n{\n    Id = jobId,\n    InputDataUri = inputDataUri,\n    Name = jobName,\n    InputParams = inputParams,\n    OutputDataFormat = outputDataFormat\n};\n\nJobDetails myJob = (quantumJobClient.CreateJob(jobId, createJobDetails)).Value;\n```\n\n### Get Job\n\n`GetJob` retrieves a specific job by its id.\n\n```C# Snippet:Azure_Quantum_Jobs_GetJob\n// Get the job that we've just created based on its jobId\nmyJob = (quantumJobClient.GetJob(jobId)).Value;\n```\n\n### Get Jobs\n\nTo enumerate all the jobs in the workspace, use the `GetJobs` method.\n\n```C# Snippet:Azure_Quantum_Jobs_GetJobs\nforeach (JobDetails job in quantumJobClient.GetJobs())\n{\n   Console.WriteLine($\"{job.Name}\");\n}\n```\n\n## Troubleshooting\n\nAll Quantum Jobs service operations will throw a RequestFailedException on failure with helpful ErrorCodes. Many of these errors are recoverable.\n\n## Next steps\n\n*  Visit our [Product documentation](https://docs.microsoft.com/azure/quantum/) to learn more about Azure Quantum.\n## Contributing\n\nSee the [CONTRIBUTING.md][contributing] for details on building,\ntesting, and contributing to this library.\n\nThis project welcomes contributions and suggestions.  Most contributions require\nyou to agree to a Contributor License Agreement (CLA) declaring that you have\nthe right to, and actually do, grant us the rights to use your contribution. For\ndetails, visit https://cla.microsoft.com.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc].\nFor more information see the [Code of Conduct FAQ][coc_faq]\nor contact opencode@microsoft.com with any\nadditional questions or comments.\n\n\n<!-- LINKS -->\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[source]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/quantum/Azure.Quantum.Jobs/src\n[resource-groups]: https://docs.microsoft.com/azure/azure-resource-manager/management/manage-resource-groups-portal\n[workspaces]: https://docs.microsoft.com/azure/quantum/how-to-create-quantum-workspaces-with-the-azure-portal\n[location]: https://azure.microsoft.com/global-infrastructure/services/?products=quantum\n[blob-storage]: https://docs.microsoft.com/azure/storage/blobs/storage-blobs-introduction\n[contributing]: https://github.com/Azure/azure-sdk-for-net/tree/main/CONTRIBUTING.md\n[subscriptions]: https://ms.portal.azure.com/#blade/Microsoft_Azure_Billing/SubscriptionsBlade\n[credentials]: https://docs.microsoft.com/dotnet/api/overview/azure/identity-readme#credentials\n[style-guide-msft]: https://docs.microsoft.com/style-guide/capitalization\n[style-guide-cloud]: https://aka.ms/azsdk/cloud-style-guide\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2Fsdk%2Fquantum%2FAzure.Quantum.Jobs%2FREADME.png)\n",
        "repo_name": "quantum/Azure.Quantum.Jobs",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/quantum/Azure.Quantum.Jobs",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Quantum management client library for .NET\n\nMicrosoft Azure Quantum is the cloud quantum computing service of Microsoft Azure, with a diverse set of quantum solutions and technologies. Azure Quantum ensures an open, flexible, and future-proofed path to quantum computing that adapts to your way of working, accelerates your progress, and protects your technology investments.\n\nThis library supports managing Microsoft Azure Quantum resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Quantum management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.Quantum --prerelease\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "quantum/Azure.ResourceManager.Quantum",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/quantum/Azure.ResourceManager.Quantum",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Qumulo management client library for .NET\n\nQumulo native solutions for Azure provides a high-performance, highly scalable file system for its customers.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Qumulo management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.Qumulo\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html)\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "qumulo/Azure.ResourceManager.Qumulo",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/qumulo/Azure.ResourceManager.Qumulo",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Quota management client library for .NET\n\nThis library supports managing Microsoft Azure Quota resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Quota management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.Quota\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "quota/Azure.ResourceManager.Quota",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/quota/Azure.ResourceManager.Quota",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Recovery Services Backup management client library for .NET\n\nThis library supports managing Microsoft Azure Recovery Services Backup resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Recovery Services Backup management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.RecoveryServicesBackup\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "recoveryservices-backup/Azure.ResourceManager.RecoveryServicesBackup",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/recoveryservices-backup/Azure.ResourceManager.RecoveryServicesBackup",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Recovery Services Site Recovery management client library for .NET\n\nThis library supports managing Microsoft Azure Recovery Services Site Recovery resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Recovery Services Site Recovery management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.RecoveryServicesSiteRecovery --prerelease\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "recoveryservices-siterecovery/Azure.ResourceManager.RecoveryServicesSiteRecovery",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/recoveryservices-siterecovery/Azure.ResourceManager.RecoveryServicesSiteRecovery",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Recovery Services management client library for .NET\n\nThis library supports managing Microsoft Azure Recovery Services.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Recovery Services management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.RecoveryServices\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "recoveryservices/Azure.ResourceManager.RecoveryServices",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/recoveryservices/Azure.ResourceManager.RecoveryServices",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Redis management client library for .NET\n\nMicrosoft Azure Cache for Redis provides an in-memory data store based on the [Redis](https://redis.io/) software. Redis improves the performance and scalability of an application that uses backend data stores heavily. It's able to process large volumes of application requests by keeping frequently accessed data in the server memory, which can be written to and read from quickly. Redis brings a critical low-latency and high-throughput data storage solution to modern applications.\n\nThis library supports managing Microsoft Azure Redis resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Redis management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.Redis\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "redis/Azure.ResourceManager.Redis",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/redis/Azure.ResourceManager.Redis",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Redis Enterprise management client library for .NET\n\nThe Microsoft Azure Cache for Redis Enterprise tiers provide fully integrated and managed Redis Enterprise on Azure.\n\nThis library supports managing Microsoft Azure Redis Enterprise resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Redis Enterprise management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.RedisEnterprise\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "redisenterprise/Azure.ResourceManager.RedisEnterprise",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/redisenterprise/Azure.ResourceManager.RedisEnterprise",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Relay management client library for .NET\n\nThe Microsoft Azure Relay service enables you to securely expose services that run in your corporate network to the public cloud.\n\nThis library supports managing Microsoft Azure Relay resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Relay management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.Relay\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "relay/Azure.ResourceManager.Relay",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/relay/Azure.ResourceManager.Relay",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Remote Rendering client library for .NET\n\nAzure Remote Rendering (ARR) is a service that enables you to render high-quality, interactive 3D content in the cloud and stream it in real time to devices, such as the HoloLens 2.\n\nThis SDK offers functionality to convert assets to the format expected by the runtime, and also to manage\nthe lifetime of remote rendering sessions.\n\n> NOTE: Once a session is running, a client application will connect to it using one of the \"runtime SDKs\".\n> These SDKs are designed to best support the needs of an interactive application doing 3d rendering.\n> They are available in ([.net](https://docs.microsoft.com/dotnet/api/microsoft.azure.remoterendering)\n> or ([C++](https://docs.microsoft.com/cpp/api/remote-rendering/)).\n\n[Product documentation](https://docs.microsoft.com/azure/remote-rendering/)\n\n## Getting started\n\n### Install the package\n\nInstall the Azure Mixed Reality ARR client library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.MixedReality.RemoteRendering\n```\n\nAdd a package reference:\n\n```xml\n<PackageReference Include=\"Azure.MixedReality.RemoteRendering\" Version=\"1.0.0\" />\n```\n\n### Prerequisites\n\nYou will need an [Azure subscription](https://azure.microsoft.com/free/dotnet/) and an [Azure Remote Rendering account](https://docs.microsoft.com/azure/remote-rendering/how-tos/create-an-account) to use this package.\n\n### Authenticate the client\n\nConstructing a remote rendering client requires an authenticated account, and a remote rendering endpoint.\nFor an account created in the eastus region, the account domain will have the form \"eastus.mixedreality.azure.com\".\nThere are several different forms of authentication:\n\n- Account Key authentication\n  - Account keys enable you to get started quickly with using Azure Remote Rendering. But before you deploy your application\n    to production, we recommend that you update your app to use Azure AD authentication.\n- Azure Active Directory (AD) token authentication\n  - If you're building an enterprise application and your company is using Azure AD as its identity system, you can use\n    user-based Azure AD authentication in your app. You then grant access to your Azure Remote Rendering accounts by using\n    your existing Azure AD security groups. You can also grant access directly to users in your organization.\n  - Otherwise, we recommend that you obtain Azure AD tokens from a web service that supports your app. We recommend this\n    method for production applications because it allows you to avoid embedding the credentials for access to Azure Spatial\n    Anchors in your client application.\n\nSee [here](https://docs.microsoft.com/azure/remote-rendering/how-tos/authentication) for detailed instructions and information.\n\nIn all the following examples, the client is constructed with a `remoteRenderingEndpoint` Uri object.\nThe available endpoints correspond to regions, and the choice of endpoint determines the region in which the service performs its work.\nAn example is `https://remoterendering.eastus2.mixedreality.azure.com`.\n\n> NOTE: For converting assets, it is preferable to pick a region close to the storage containing the assets.\n\n> NOTE: For rendering, it is strongly recommended that you pick the closest region to the devices using the service.\n> The time taken to communicate with the server impacts the quality of the experience.\n\n#### Authenticating with account key authentication\n\nUse the `AccountKeyCredential` object to use an account identifier and account key to authenticate:\n\n```C# Snippet:CreateAClient\nAzureKeyCredential accountKeyCredential = new AzureKeyCredential(accountKey);\n\nRemoteRenderingClient client = new RemoteRenderingClient(remoteRenderingEndpoint, accountId, accountDomain, accountKeyCredential);\n```\n\n#### Authenticating with an AAD client secret\n\nUse the `ClientSecretCredential` object to perform client secret authentication.\n\n```C# Snippet:CreateAClientWithAAD\nTokenCredential credential = new ClientSecretCredential(tenantId, clientId, clientSecret, new TokenCredentialOptions\n{\n    AuthorityHost = new Uri($\"https://login.microsoftonline.com/{tenantId}\")\n});\n\nRemoteRenderingClient client = new RemoteRenderingClient(remoteRenderingEndpoint, accountId, accountDomain, credential);\n```\n\n#### Authenticating a user using device code authentication\n\nUse the `DeviceCodeCredential` object to perform device code authentication.\n\n```C# Snippet:CreateAClientWithDeviceCode\nTask deviceCodeCallback(DeviceCodeInfo deviceCodeInfo, CancellationToken cancellationToken)\n{\n    Console.WriteLine(deviceCodeInfo.Message);\n    return Task.FromResult(0);\n}\n\nTokenCredential credential = new DeviceCodeCredential(deviceCodeCallback, tenantId, clientId, new TokenCredentialOptions\n{\n    AuthorityHost = new Uri($\"https://login.microsoftonline.com/{tenantId}\"),\n});\n\nRemoteRenderingClient client = new RemoteRenderingClient(remoteRenderingEndpoint, accountId, accountDomain, credential);\n```\n\nSee [here](https://github.com/AzureAD/microsoft-authentication-library-for-dotnet/wiki/Device-Code-Flow) for more\ninformation about using device code authentication flow.\n\n#### Interactive authentication with DefaultAzureCredential\n\nUse the `DefaultAzureCredential` object with `includeInteractiveCredentials: true` to use default interactive authentication\nflow:\n\n```C# Snippet:CreateAClientWithAzureCredential\nTokenCredential credential = new DefaultAzureCredential(includeInteractiveCredentials: true);\n\nRemoteRenderingClient client = new RemoteRenderingClient(remoteRenderingEndpoint, accountId, accountDomain, credential);\n```\n\n#### Authenticating with a static access token\n\nYou can pass a Mixed Reality access token as an `AccessToken` previously retrieved from the\n[Mixed Reality STS service](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/mixedreality/Azure.MixedReality.Authentication)\nto be used with a Mixed Reality client library:\n\n```C# Snippet:CreateAClientWithStaticAccessToken\n// GetMixedRealityAccessTokenFromWebService is a hypothetical method that retrieves\n// a Mixed Reality access token from a web service. The web service would use the\n// MixedRealityStsClient and credentials to obtain an access token to be returned\n// to the client.\nAccessToken accessToken = GetMixedRealityAccessTokenFromWebService();\n\nRemoteRenderingClient client = new RemoteRenderingClient(remoteRenderingEndpoint, accountId, accountDomain, accessToken);\n```\n\n## Key concepts\n\n### RemoteRenderingClient\n\nThe `RemoteRenderingClient` is the client library used to access the RemoteRenderingService.\nIt provides methods to create and manage asset conversions and rendering sessions.\n\n## Examples\n\n- [Convert a simple asset](#convert-a-simple-asset)\n- [Convert a more complex asset](#convert-a-more-complex-asset)\n- [Get the output when an asset conversion has finished](#get-the-output-when-an-asset-conversion-has-finished)\n- [List conversions](#list-conversions)\n- [Create a session](#create-a-session)\n- [Extend the lease time of a session](#extend-the-lease-time-of-a-session)\n- [List sessions](#list-sessions)\n- [Stop a session](#stop-a-session)\n\n### Convert a simple asset\n\nWe assume that a RemoteRenderingClient has been constructed as described in the [Authenticate the Client](#authenticate-the-client) section.\nThe following snippet describes how to request that \"box.fbx\", found at the root of the blob container at the given URI, gets converted.\n\n```C# Snippet:StartAnAssetConversion\nAssetConversionInputOptions inputOptions = new AssetConversionInputOptions(storageUri, \"box.fbx\");\nAssetConversionOutputOptions outputOptions = new AssetConversionOutputOptions(storageUri);\nAssetConversionOptions conversionOptions = new AssetConversionOptions(inputOptions, outputOptions);\n\n// A randomly generated GUID is a good choice for a conversionId.\nstring conversionId = Guid.NewGuid().ToString();\n\nAssetConversionOperation conversionOperation = client.StartConversion(conversionId, conversionOptions);\n```\n\nThe output files will be placed beside the input asset.\n\n### Convert a more complex asset\n\nAssets can reference other files, and blob containers can contain files belonging to many different assets.\nIn this example, we show how prefixes can be used to organize your blobs and how to convert an asset to take account of that organization.\nAssume that the blob container at `inputStorageUri` contains many files, including \"Bicycle/bicycle.gltf\", \"Bicycle/bicycle.bin\" and \"Bicycle/saddleTexture.jpg\".\n(So the prefix \"Bicycle\" is acting very like a folder.)\nWe want to convert the gltf so that it has access to the other files which share the prefix, without requiring the conversion service to access any other files.\nTo keep things tidy, we also want the output files to be written to a different storage container and given a common prefix: \"ConvertedBicycle\".\nThe code is as follows:\n\n```C# Snippet:StartAComplexAssetConversion\nAssetConversionInputOptions inputOptions = new AssetConversionInputOptions(inputStorageUri, \"bicycle.gltf\")\n{\n    BlobPrefix = \"Bicycle\"\n};\nAssetConversionOutputOptions outputOptions = new AssetConversionOutputOptions(outputStorageUri)\n{\n    BlobPrefix = \"ConvertedBicycle\"\n};\nAssetConversionOptions conversionOptions = new AssetConversionOptions(inputOptions, outputOptions);\n\nstring conversionId = Guid.NewGuid().ToString();\n\nAssetConversionOperation conversionOperation = client.StartConversion(conversionId, conversionOptions);\n```\n\n> NOTE: when a prefix is given in the input options, then the input file parameter is assumed to be relative to that prefix.\n> The same applies to the output file parameter in output options.\n\n### Get the output when an asset conversion has finished\n\nConverting an asset can take anywhere from seconds to hours.\nThis code uses an existing conversionOperation and polls regularly until the conversion has finished or failed.\nThe default polling period is 10 seconds.\nNote that a conversionOperation can be constructed from the conversionId of an existing conversion and a client.\n\n```C# Snippet:QueryConversionStatus\nAssetConversion conversion = conversionOperation.WaitForCompletionAsync().Result;\nif (conversion.Status == AssetConversionStatus.Succeeded)\n{\n    Console.WriteLine($\"Conversion succeeded: Output written to {conversion.Output.OutputAssetUri}\");\n}\nelse if (conversion.Status == AssetConversionStatus.Failed)\n{\n    Console.WriteLine($\"Conversion failed: {conversion.Error.Code} {conversion.Error.Message}\");\n}\n```\n\n### List conversions\n\nYou can get information about your conversions using the `getConversions` method.\nThis method may return conversions which have yet to start, conversions which are running and conversions which have finished.\nIn this example, we just list the output URIs of successful conversions started in the last day.\n\n```C# Snippet:GetConversions\nforeach (var conversion in client.GetConversions())\n{\n    if ((conversion.Status == AssetConversionStatus.Succeeded) && (conversion.CreatedOn > DateTimeOffset.Now.AddDays(-1)))\n    {\n        Console.WriteLine($\"output asset URI: {conversion.Output.OutputAssetUri}\");\n    }\n}\n```\n\n### Create a session\n\nWe assume that a RemoteRenderingClient has been constructed as described in the [Authenticate the Client](#authenticate-the-client) section.\nThe following snippet describes how to request that a new rendering session be started.\n\n```C# Snippet:CreateASession\nRenderingSessionOptions options = new RenderingSessionOptions(TimeSpan.FromMinutes(30), RenderingServerSize.Standard);\n\n// A randomly generated GUID is a good choice for a sessionId.\nstring sessionId = Guid.NewGuid().ToString();\n\nStartRenderingSessionOperation startSessionOperation = client.StartSession(sessionId, options);\n\nRenderingSession newSession = startSessionOperation.WaitForCompletionAsync().Result;\nif (newSession.Status == RenderingSessionStatus.Ready)\n{\n    Console.WriteLine($\"Session {sessionId} is ready.\");\n}\nelse if (newSession.Status == RenderingSessionStatus.Error)\n{\n    Console.WriteLine($\"Session {sessionId} encountered an error: {newSession.Error.Code} {newSession.Error.Message}\");\n}\n```\n\n### Extend the lease time of a session\n\nIf a session is approaching its maximum lease time, but you want to keep it alive, you will need to make a call to increase\nits maximum lease time.\nThis example shows how to query the current properties and then extend the lease if it will expire soon.\n\n> NOTE: The runtime SDKs also offer this functionality, and in many typical scenarios, you would use them to\n> extend the session lease.\n\n```C# Snippet:UpdateSession\nRenderingSession currentSession = client.GetSession(sessionId);\n\nif (currentSession.MaxLeaseTime - DateTimeOffset.Now.Subtract(currentSession.CreatedOn.Value) < TimeSpan.FromMinutes(2))\n{\n    TimeSpan newLeaseTime = currentSession.MaxLeaseTime.Value.Add(TimeSpan.FromMinutes(30));\n\n    UpdateSessionOptions longerLeaseSettings = new UpdateSessionOptions(newLeaseTime);\n\n    client.UpdateSession(sessionId, longerLeaseSettings);\n}\n```\n\n### List sessions\n\nYou can get information about your sessions using the `getSessions` method.\nThis method may return sessions which have yet to start and sessions which are ready.\n\n```C# Snippet:ListSessions\nforeach (var properties in client.GetSessions())\n{\n    if (properties.Status == RenderingSessionStatus.Starting)\n    {\n        Console.WriteLine($\"Session \\\"{properties.SessionId}\\\" is starting.\");\n    }\n    else if (properties.Status == RenderingSessionStatus.Ready)\n    {\n        Console.WriteLine($\"Session \\\"{properties.SessionId}\\\" is ready at host {properties.Host}\");\n    }\n}\n```\n\n### Stop a session\n\nThe following code will stop a running session with given id.\n\n```C# Snippet:StopSession\nclient.StopSession(sessionId);\n```\n\n## Troubleshooting\n\nFor general troubleshooting advice concerning Azure Remote Rendering, see [the Troubleshoot page](https://docs.microsoft.com/azure/remote-rendering/resources/troubleshoot) for remote rendering at docs.microsoft.com.\n\nThe client methods will throw exceptions if the request cannot be made.\nHowever, in the case of both conversions and sessions, the requests can succeed but the requested operation may not be successful.\nIn this case, no exception will be thrown, but the returned objects can be inspected to understand what happened.\n\nIf the asset in a conversion is invalid, the conversion operation will return an AssetConversion object\nwith a Failed status and carrying a RemoteRenderingServiceError with details.\nOnce the conversion service is able to process the file, a &lt;assetName&gt;.result.json file will be written to the output container.\nIf the input asset is invalid, then that file will contain a more detailed description of the problem.\n\nSimilarly, sometimes when a session is requested, the session ends up in an error state.\nThe startSessionOperation method will return a RenderingSession object, but that object will have an Error status and carry a\nRemoteRenderingServiceError with details.\n\n## Next steps\n\n- Read the [Product documentation](https://docs.microsoft.com/azure/remote-rendering/)\n- Learn about the runtime SDKs:\n  - .NET: https://docs.microsoft.com/dotnet/api/microsoft.azure.remoterendering\n  - C++: https://docs.microsoft.com/cpp/api/remote-rendering/\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License\nAgreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution.\nFor details, visit [https://cla.microsoft.com](https://cla.microsoft.com).\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the\nPR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this\nonce across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact\n[opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n",
        "repo_name": "remoterendering/Azure.MixedReality.RemoteRendering",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/remoterendering/Azure.MixedReality.RemoteRendering",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Reservations management client library for .NET\n\nThe Microsoft Azure Reservations help you save money by committing to one-year or three-year plans for multiple products.\n\nThis library supports managing Microsoft Azure Reservations resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Reservations management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.Reservations\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "reservations/Azure.ResourceManager.Reservations",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/reservations/Azure.ResourceManager.Reservations",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Resource Graph management client library for .NET\n\nThe Microsoft Azure Resource Graph is an Azure service designed to extend Azure Resource Management by providing efficient and performant resource exploration with the ability to query at scale across a given set of subscriptions so that you can effectively govern your environment.\n\nThis library supports managing Microsoft Azure Resource Graph resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Resource Graph management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.ResourceGraph\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "resourcegraph/Azure.ResourceManager.ResourceGraph",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcegraph/Azure.ResourceManager.ResourceGraph",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Resource Health management client library for .NET\n\nMicrosoft Azure Resource Health helps you diagnose and get support for service problems that affect your Azure resources. It reports on the current and past health of your resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Resource Health management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.ResourceHealth\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html)\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "resourcehealth/Azure.ResourceManager.ResourceHealth",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcehealth/Azure.ResourceManager.ResourceHealth",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Resource Manager client library for .NET\n\nMicrosoft Azure Resource Manager is the deployment and management service for Azure. It provides a management layer that enables you to create, update, and delete resources in your Azure account.\n\nThis library provides resource group and resource management capabilities for Microsoft Azure.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Resources management core library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager\n```\n\n### Prerequisites\n\n- You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n- Set up a way to authenticate to Azure with Azure Identity.\n\n  Some options are:\n    - Through the [Azure CLI sign in](https://docs.microsoft.com/cli/azure/authenticate-azure-cli).\n    - Via [Visual Studio](https://docs.microsoft.com/dotnet/api/overview/azure/identity-readme?view=azure-dotnet#authenticating-via-visual-studio).\n    - Setting [Environment Variables](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/AuthUsingEnvironmentVariables.md).\n\n    More information and different authentication approaches using Azure Identity can be found in [this document](https://docs.microsoft.com/dotnet/api/overview/azure/identity-readme?view=azure-dotnet).\n\n### Authenticate the Client\n\nThe default option to create an authenticated client is to use `DefaultAzureCredential`. Since all management APIs go through the same endpoint, in order to interact with resources, only one top-level `ArmClient` has to be created.\n\nTo authenticate to Azure and create an `ArmClient`, do the following code:\n\n```C# Snippet:Readme_AuthClient_Namespaces\nusing System;\nusing System.Threading.Tasks;\nusing Azure.Core;\nusing Azure.Identity;\nusing Azure.ResourceManager;\nusing Azure.ResourceManager.Compute;\nusing Azure.ResourceManager.Resources;\n```\n```C# Snippet:Readme_AuthClient\nArmClient client = new ArmClient(new DefaultAzureCredential());\n```\n\nMore documentation for the `Azure.Identity.DefaultAzureCredential` class can be found in [this document](https://docs.microsoft.com/dotnet/api/azure.identity.defaultazurecredential).\n\n## Key concepts\n\n### Understanding Azure Resource Hierarchy\n\nTo reduce both the number of clients needed to perform common tasks, and the number of redundant parameters that each of those clients take, we've introduced an object hierarchy in the SDK that mimics the object hierarchy in Azure. Each resource client in the SDK has methods to access the resource clients of its children that are already scoped to the proper subscription and resource group.\n\nTo accomplish this goal, we're introducing three standard types for all resources in Azure:\n\n### **[Resource]Resource.cs**\n\nThis class represents a full resource client object that contains a **Data** property exposing the details as a **[Resource]Data** type.\nIt also has access to all of the operations on that resource without needing to pass in scope parameters such as subscription ID or resource name. This resource class makes it convenient to directly execute operations on the result of list calls\nsince everything is returned as a full resource client now.\n\n```C# Snippet:Readme_LoopVms\nArmClient client = new ArmClient(new DefaultAzureCredential());\nstring resourceGroupName = \"myResourceGroup\";\nSubscriptionResource subscription = await client.GetDefaultSubscriptionAsync();\nResourceGroupCollection resourceGroups = subscription.GetResourceGroups();\nResourceGroupResource resourceGroup = await resourceGroups.GetAsync(resourceGroupName);\nawait foreach (VirtualMachineResource virtualMachine in resourceGroup.GetVirtualMachines())\n{\n    //previously we would have to take the resourceGroupName and the vmName from the vm object\n    //and pass those into the powerOff method as well as we would need to execute that on a separate compute client\n    await virtualMachine.PowerOffAsync(WaitUntil.Completed);\n}\n```\n\n### **[Resource]Data.cs**\n\nThis class represents the model that makes up a given resource. Typically, this class is the response data from a service call such as HTTP GET and provides details about the underlying resource. Previously, this class was represented by a **Model** class.\n\n### **[Resource]Collection.cs**\n\nThis class represents the operations you can perform on a collection of resources belonging to a specific parent resource.\nThis class provides most of the logical collection operations.\n\n| Collection Behavior | Collection Method |\n|-|-|\n| Iterate/List | GetAll() |\n| Index | Get(string name) |\n| Add | CreateOrUpdate(string name, [Resource]Data data) |\n| Contains | Exists(string name) |\n\nFor most things, the parent will be a **ResourceGroup**. For example, a **Subnet** is a child of a **VirtualNetwork** and a **ResourceGroup** is a child of a **Subscription**.\n\n## Putting it all together\nImagine that our company requires all virtual machines to be tagged with the owner. We're tasked with writing a program to add the tag to any missing virtual machines in a given resource group.\n\n ```C# Snippet:Readme_PuttingItAllTogether\n// First we construct our client\nArmClient client = new ArmClient(new DefaultAzureCredential());\n\n// Next we get a resource group object\n// ResourceGroupResource is a [Resource] object from above\nSubscriptionResource subscription = await client.GetDefaultSubscriptionAsync();\nResourceGroupCollection resourceGroups = subscription.GetResourceGroups();\nResourceGroupResource resourceGroup = await resourceGroups.GetAsync(\"myRgName\");\n\n// Next we get the collection for the virtual machines\n// vmCollection is a [Resource]Collection object from above\nVirtualMachineCollection virtualMachines = resourceGroup.GetVirtualMachines();\n\n// Next we loop over all vms in the collection\n// Each vm is a [Resource] object from above\nawait foreach (VirtualMachineResource virtualMachine in virtualMachines)\n{\n    // We access the [Resource]Data properties from vm.Data\n    if (!virtualMachine.Data.Tags.ContainsKey(\"owner\"))\n    {\n        // We can also access all operations from vm since it is already scoped for us\n        await virtualMachine.AddTagAsync(\"owner\", \"tagValue\");\n    }\n}\n```\n\n## Structured Resource Identifier\nResource IDs contain useful information about the resource itself, but they're plain strings that have to be parsed. Instead of implementing your own parsing logic, you can use a `ResourceIdentifier` object that will do the parsing for you: `new ResourceIdentifier(\"myid\");`.\n\n### Example: Parsing an ID using a ResourceIdentifier object \n```C# Snippet:Readme_CastToSpecificType\nResourceIdentifier id = new ResourceIdentifier(\"/subscriptions/aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee/resourceGroups/workshop2021-rg/providers/Microsoft.Network/virtualNetworks/myVnet/subnets/mySubnet\");\nConsole.WriteLine($\"Subscription: {id.SubscriptionId}\");\nConsole.WriteLine($\"ResourceGroupResource: {id.ResourceGroupName}\");\nConsole.WriteLine($\"Vnet: {id.Parent.Name}\");\nConsole.WriteLine($\"Subnet: {id.Name}\");\n```\n\n## Managing Existing Resources by Resource Identifier\nPerforming operations on resources that already exist is a common use case when using the management client libraries. In this scenario, you usually have the identifier of the resource you want to work on as a string. Although the new object hierarchy is great for provisioning, and working within the scope of a given parent, it isn't the most efficient when it comes to this specific scenario.  \n\nHere's an example how you can access an `AvailabilitySet` object and manage it directly with its ID: \n```C# Snippet:Readme_ManageAvailabilitySetOld\nResourceIdentifier id = new ResourceIdentifier(\"/subscriptions/aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee/resourceGroups/workshop2021-rg/providers/Microsoft.Compute/availabilitySets/ws2021availSet\");\n// We construct a new client to work with\nArmClient client = new ArmClient(new DefaultAzureCredential());\n// Next we get the collection of subscriptions\nSubscriptionCollection subscriptions = client.GetSubscriptions();\n// Next we get the specific subscription this resource belongs to\nSubscriptionResource subscription = await subscriptions.GetAsync(id.SubscriptionId);\n// Next we get the collection of resource groups that belong to that subscription\nResourceGroupCollection resourceGroups = subscription.GetResourceGroups();\n// Next we get the specific resource group this resource belongs to\nResourceGroupResource resourceGroup = await resourceGroups.GetAsync(id.ResourceGroupName);\n// Next we get the collection of availability sets that belong to that resource group\nAvailabilitySetCollection availabilitySets = resourceGroup.GetAvailabilitySets();\n// Finally we get the resource itself\n// Note: for this last step in this example, Azure.ResourceManager.Compute is needed\nAvailabilitySetResource availabilitySet = await availabilitySets.GetAsync(id.Name);\n```\n\nThis approach required much code and three API calls to Azure. The same can be done with less code and without any API calls by using extension methods that we've provided on the client itself. These extension methods allow you to pass in a resource identifier and retrieve a scoped resource client. The object returned is a *[Resource]* mentioned above, since it hasn't reached out to Azure to retrieve the data yet the Data property will be null.\n\nSo, the previous example would end up looking like this:\n\n```C# Snippet:Readme_ManageAvailabilitySetNow\nResourceIdentifier resourceId = new ResourceIdentifier(\"/subscriptions/aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee/resourceGroups/workshop2021-rg/providers/Microsoft.Compute/availabilitySets/ws2021availSet\");\n// We construct a new client to work with\nArmClient client = new ArmClient(new DefaultAzureCredential());\n// Next we get the AvailabilitySetResource resource client from the client\n// The method takes in a ResourceIdentifier but we can use the implicit cast from string\nAvailabilitySetResource availabilitySet = client.GetAvailabilitySetResource(resourceId);\n// At this point availabilitySet.Data will be null and trying to access it will throw\n// If we want to retrieve the objects data we can simply call get\navailabilitySet = await availabilitySet.GetAsync();\n// we now have the data representing the availabilitySet\nConsole.WriteLine(availabilitySet.Data.Name);\n```\n\nWe also provide an option that if you only know the pieces that make up the `ResourceIdentifier` each resource provides a static method to construct the full string from those pieces.\nThe above example would then look like this.\n```C# Snippet:Readme_ManageAvailabilitySetPieces\nstring subscriptionId = \"aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee\";\nstring resourceGroupName = \"workshop2021-rg\";\nstring availabilitySetName = \"ws2021availSet\";\nResourceIdentifier resourceId = AvailabilitySetResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, availabilitySetName);\n// We construct a new client to work with\nArmClient client = new ArmClient(new DefaultAzureCredential());\n// Next we get the AvailabilitySetResource resource client from the client\n// The method takes in a ResourceIdentifier but we can use the implicit cast from string\nAvailabilitySetResource availabilitySet = client.GetAvailabilitySetResource(resourceId);\n// At this point availabilitySet.Data will be null and trying to access it will throw\n// If we want to retrieve the objects data we can simply call get\navailabilitySet = await availabilitySet.GetAsync();\n// we now have the data representing the availabilitySet\nConsole.WriteLine(availabilitySet.Data.Name);\n```\n\n## Check if a [Resource] exists\n\nIf you aren't sure if a resource you want to get exists, or you just want to check if it exists, you can use `Exists()` method, which can be invoked from any [Resource]Collection class.\n\n`Exists()` and `ExistsAsync()` return `Response<bool>` where the bool will be false if the specified resource doesn't exist.  Both of these methods still give you access to the underlying raw response.\n\nBefore these methods were introduced, you would need to catch the `RequestFailedException` and inspect the status code for 404.\n\n```C# Snippet:Readme_OldExistsRG\nArmClient client = new ArmClient(new DefaultAzureCredential());\nSubscriptionResource subscription = await client.GetDefaultSubscriptionAsync();\nResourceGroupCollection resourceGroups = subscription.GetResourceGroups();\nstring resourceGroupName = \"myRgName\";\n\ntry\n{\n    ResourceGroupResource resourceGroup = await resourceGroups.GetAsync(resourceGroupName);\n    // At this point, we are sure that myRG is a not null Resource Group, so we can use this object to perform any operations we want.\n}\ncatch (RequestFailedException ex) when (ex.Status == 404)\n{\n    Console.WriteLine($\"Resource Group {resourceGroupName} does not exist.\");\n}\n```\n\nNow with these convenience methods we can do the following code.\n\n```C# Snippet:Readme_ExistsRG\nArmClient client = new ArmClient(new DefaultAzureCredential());\nSubscriptionResource subscription = await client.GetDefaultSubscriptionAsync();\nResourceGroupCollection resourceGroups = subscription.GetResourceGroups();\nstring resourceGroupName = \"myRgName\";\n\nbool exists = await resourceGroups.ExistsAsync(resourceGroupName);\n\nif (exists)\n{\n    Console.WriteLine($\"Resource Group {resourceGroupName} exists.\");\n\n    // We can get the resource group now that we know it exists.\n    // This does introduce a small race condition where resource group could have been deleted between the check and the get.\n    ResourceGroupResource resourceGroup = await resourceGroups.GetAsync(resourceGroupName);\n}\nelse\n{\n    Console.WriteLine($\"Resource Group {resourceGroupName} does not exist.\");\n}\n```\n\n## Examples\n\n### Create a resource group\n```C# Snippet:Managing_Resource_Groups_CreateAResourceGroup\n// First, initialize the ArmClient and get the default subscription\nArmClient client = new ArmClient(new DefaultAzureCredential());\n// Now we get a ResourceGroupResource collection for that subscription\nSubscriptionResource subscription = await client.GetDefaultSubscriptionAsync();\nResourceGroupCollection resourceGroups = subscription.GetResourceGroups();\n\n// With the collection, we can create a new resource group with an specific name\nstring resourceGroupName = \"myRgName\";\nAzureLocation location = AzureLocation.WestUS2;\nResourceGroupData resourceGroupData = new ResourceGroupData(location);\nArmOperation<ResourceGroupResource> operation = await resourceGroups.CreateOrUpdateAsync(WaitUntil.Completed, resourceGroupName, resourceGroupData);\nResourceGroupResource resourceGroup = operation.Value;\n```\n\n### List all resource groups\n```C# Snippet:Managing_Resource_Groups_ListAllResourceGroup\n// First, initialize the ArmClient and get the default subscription\nArmClient client = new ArmClient(new DefaultAzureCredential());\nSubscriptionResource subscription = await client.GetDefaultSubscriptionAsync();\n// Now we get a ResourceGroupResource collection for that subscription\nResourceGroupCollection resourceGroups = subscription.GetResourceGroups();\n// We can then iterate over this collection to get the resources in the collection\nawait foreach (ResourceGroupResource resourceGroup in resourceGroups)\n{\n    Console.WriteLine(resourceGroup.Data.Name);\n}\n```\n\n### Update a resource group\n```C# Snippet:Managing_Resource_Groups_UpdateAResourceGroup\n// Note: Resource group named 'myRgName' should exist for this example to work.\nArmClient client = new ArmClient(new DefaultAzureCredential());\nSubscriptionResource subscription = await client.GetDefaultSubscriptionAsync();\nResourceGroupCollection resourceGroups = subscription.GetResourceGroups();\nstring resourceGroupName = \"myRgName\";\nResourceGroupResource resourceGroup = await resourceGroups.GetAsync(resourceGroupName);\nresourceGroup = await resourceGroup.AddTagAsync(\"key\", \"value\");\n```\n\n### Delete a resource group\n```C# Snippet:Managing_Resource_Groups_DeleteResourceGroup\nArmClient client = new ArmClient(new DefaultAzureCredential());\nSubscriptionResource subscription = await client.GetDefaultSubscriptionAsync();\nResourceGroupCollection resourceGroups = subscription.GetResourceGroups();\nstring resourceGroupName = \"myRgName\";\nResourceGroupResource resourceGroup = await resourceGroups.GetAsync(resourceGroupName);\nawait resourceGroup.DeleteAsync(WaitUntil.Completed);\n```\n### Get GenericResource List\n```C# Snippet:Get_GenericResource_List\nArmClient client = new ArmClient(new DefaultAzureCredential());\nSubscriptionResource sub = client.GetDefaultSubscription();\nAsyncPageable<GenericResource> networkAndVmWithTestInName = sub.GetGenericResourcesAsync(\n    // Set filter to only return virtual network and virtual machine resource with 'test' in the name\n    filter: \"(resourceType eq 'Microsoft.Network/virtualNetworks' or resourceType eq 'Microsoft.Compute/virtualMachines') and substringof('test', name)\",\n    // Include 'createdTime' and 'changeTime' properties in the returned data\n    expand: \"createdTime,changedTime\"\n    );\n\nint count = 0;\nawait foreach (var res in networkAndVmWithTestInName)\n{\n    Console.WriteLine($\"{res.Id.Name} in resource group {res.Id.ResourceGroupName} created at {res.Data.CreatedOn} and changed at {res.Data.ChangedOn}\");\n    count++;\n}\nConsole.WriteLine($\"{count} resources found\");\n```\n### Create GenericResource\n```C# Snippet:Create_GenericResource\nArmClient client = new ArmClient(new DefaultAzureCredential());\n\nvar subnetName = \"samplesubnet\";\nvar addressSpaces = new Dictionary<string, object>()\n{\n    { \"addressPrefixes\", new List<string>() { \"10.0.0.0/16\" } }\n};\nvar subnet = new Dictionary<string, object>()\n{\n    { \"name\", subnetName },\n    { \"properties\", new Dictionary<string, object>()\n        {\n            { \"addressPrefix\", \"10.0.1.0/24\" }\n        }\n    }\n};\nvar subnets = new List<object>() { subnet };\nvar data = new GenericResourceData(AzureLocation.EastUS)\n{\n    Properties = BinaryData.FromObjectAsJson(new Dictionary<string, object>()\n    {\n        { \"addressSpace\", addressSpaces },\n        { \"subnets\", subnets }\n    })\n};\nResourceIdentifier id = new ResourceIdentifier(\"/subscriptions/{subscription_id}/resourceGroups/{resourcegroup_name}/providers/Microsoft.Network/virtualNetworks/{vnet_name}\");\n\nvar createResult = await client.GetGenericResources().CreateOrUpdateAsync(WaitUntil.Completed, id, data);\nConsole.WriteLine($\"Resource {createResult.Value.Id.Name} in resource group {createResult.Value.Id.ResourceGroupName} created\");\n```\n### Update GenericResource\n```C# Snippet:Update_GenericResource\nArmClient client = new ArmClient(new DefaultAzureCredential());\n\nvar subnetName = \"samplesubnet\";\nvar addressSpaces = new Dictionary<string, object>()\n{\n    { \"addressPrefixes\", new List<string>() { \"10.0.0.0/16\" } }\n};\nvar subnet = new Dictionary<string, object>()\n{\n    { \"name\", subnetName },\n    { \"properties\", new Dictionary<string, object>()\n        {\n            { \"addressPrefix\", \"10.0.1.0/24\" }\n        }\n    }\n};\nvar subnets = new List<object>() { subnet };\nvar data = new GenericResourceData(AzureLocation.EastUS)\n{\n    Properties = BinaryData.FromObjectAsJson(new Dictionary<string, object>()\n    {\n        { \"addressSpace\", addressSpaces },\n        { \"subnets\", subnets }\n    })\n};\nResourceIdentifier id = new ResourceIdentifier(\"/subscriptions/{subscription_id}/resourceGroups/{resourcegroup_name}/providers/Microsoft.Network/virtualNetworks/{vnet_name}\");\n\nvar createResult = await client.GetGenericResources().CreateOrUpdateAsync(WaitUntil.Completed, id, data);\nConsole.WriteLine($\"Resource {createResult.Value.Id.Name} in resource group {createResult.Value.Id.ResourceGroupName} updated\");\n```\n### Update GenericResourc Tags\n```C# Snippet:Update_GenericResourc_Tags\nArmClient client = new ArmClient(new DefaultAzureCredential());\nResourceIdentifier id = new ResourceIdentifier(\"/subscriptions/{subscription_id}/resourceGroups/{resourcegroup_name}/providers/Microsoft.Network/virtualNetworks/{vnet_name}\");\nGenericResource resource = client.GetGenericResources().Get(id).Value;\n\nGenericResourceData updateTag = new GenericResourceData(AzureLocation.EastUS);\nupdateTag.Tags.Add(\"tag1\", \"sample-for-genericresource\");\nArmOperation<GenericResource> updateTagResult = await resource.UpdateAsync(WaitUntil.Completed, updateTag);\n\nConsole.WriteLine($\"Resource {updateTagResult.Value.Id.Name} in resource group {updateTagResult.Value.Id.ResourceGroupName} updated\");\n```\n### Get GenericResource\n```C# Snippet:Get_GenericResource\nArmClient client = new ArmClient(new DefaultAzureCredential());\nResourceIdentifier id = new ResourceIdentifier(\"/subscriptions/{subscription_id}/resourceGroups/{resourcegroup_name}/providers/Microsoft.Network/virtualNetworks/{vnet_name}\");\n\nResponse<GenericResource> getResultFromGenericResourceCollection = await client.GetGenericResources().GetAsync(id);\nConsole.WriteLine($\"Resource {getResultFromGenericResourceCollection.Value.Id.Name} in resource group {getResultFromGenericResourceCollection.Value.Id.ResourceGroupName} got\");\n\nGenericResource resource = getResultFromGenericResourceCollection.Value;\nResponse<GenericResource> getResultFromGenericResource = await resource.GetAsync();\nConsole.WriteLine($\"Resource {getResultFromGenericResource.Value.Id.Name} in resource group {getResultFromGenericResource.Value.Id.ResourceGroupName} got\");\n```\n### Check whether GenericResource exists\n```C# Snippet:Is_GenericResource_Exist\nArmClient client = new ArmClient(new DefaultAzureCredential());\nResourceIdentifier id = new ResourceIdentifier(\"/subscriptions/{subscription_id}/resourceGroups/{resourcegroup_name}/providers/Microsoft.Network/virtualNetworks/{vnet_name}\");\n\nbool existResult = await client.GetGenericResources().ExistsAsync(id);\nConsole.WriteLine($\"Resource exists: {existResult}\");\n```\n### Delete GenericResource\n```C# Snippet:Delete_GenericResource\nArmClient client = new ArmClient(new DefaultAzureCredential());\nResourceIdentifier id = new ResourceIdentifier(\"/subscriptions/{subscription_id}/resourceGroups/{resourcegroup_name}/providers/Microsoft.Network/virtualNetworks/{vnet_name}\");\nGenericResource resource = client.GetGenericResources().Get(id).Value;\n\nvar deleteResult = await resource.DeleteAsync(WaitUntil.Completed);\nConsole.WriteLine($\"Resource deletion response status code: {deleteResult.WaitForCompletionResponse().Status}\");\n```\n\nFor more detailed examples, take a look at [samples](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/resourcemanager/Azure.ResourceManager/samples) we have available.\n\n## Azure Resource Manager Tests\n\nTo run test: ```dotnet test```\n\nTo run test with code coverage and auto generate an html report: ```dotnet test /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura```\n\nCoverage report will be placed in your path relative to azure-proto-core-test in```/coverage``` in html format for viewing\n\nReports can also be viewed VS or VsCode with the proper viewer plugin\n\nA terse report will also be displayed on the command line when running. \n\n\n### run test with single file or test\n\nTo run test with code coverage and auto generate an html report with just a single test: ```dotnet test /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura --filter <test-to-run>```\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n### More sample code\n\n- [Managing Resource Groups](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/samples/Sample2_ManagingResourceGroups.md)\n- [Creating a Virtual Network](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/samples/Sample3_CreatingAVirtualNetwork.md)\n- [.NET Management Library Code Samples](https://docs.microsoft.com/samples/browse/?branch=master&languages=csharp&term=managing%20using%20Azure%20.NET%20SDK)\n\n### Other Documentation\n\nIf you're migrating from the old SDK, check out this [Migration guide](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/MigrationGuide.md).\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "resourcemanager/Azure.ResourceManager",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Resource Mover management client library for .NET\n\nThe Microsoft Azure Resource Mover helps you to move Azure resources between Azure regions.\n\nThis library supports managing Microsoft Azure Resource Mover resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Resource Mover management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.ResourceMover\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "resourcemover/Azure.ResourceManager.ResourceMover",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemover/Azure.ResourceManager.ResourceMover",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Resources management client library for .NET\n\nMicrosoft Azure Resource Manager is the deployment and management service for Azure. It provides a management layer that enables you to create, update, and delete resources in your Azure account.\n\nThis library provides resource deployment capabilities for Microsoft Azure.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Resources management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.Resources\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "resources/Azure.ResourceManager.Resources",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resources/Azure.ResourceManager.Resources",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Schema Registry client library for .NET\n\nAzure Schema Registry is a schema repository service hosted by Azure Event Hubs, providing schema storage, versioning, and management. The registry is leveraged by serializers to reduce payload size while describing payload structure with schema identifiers rather than full schemas.\n\n## Getting started\n\n### Install the package\n\nInstall the Azure Schema Registry client library for .NET with [NuGet][nuget]:\n\n```dotnetcli\ndotnet add package Azure.Data.SchemaRegistry\n```\n\n### Prerequisites\n\n* An [Azure subscription][azure_sub]\n* An [Event Hubs namespace][event_hubs_namespace]\n\nIf you need to [create an Event Hubs namespace][create_event_hubs_namespace], you can use the Azure Portal or [Azure PowerShell][azure_powershell].\n\nYou can use Azure PowerShell to create the Event Hubs namespace with the following command:\n\n```PowerShell\nNew-AzEventHubNamespace -ResourceGroupName myResourceGroup -NamespaceName namespace_name -Location eastus\n```\n\n### Authenticate the client\n\nIn order to interact with the Azure Schema Registry service, you'll need to create an instance of the [Schema Registry Client][schema_registry_client] class. To create this client, you'll need Azure resource credentials and the Event Hubs namespace hostname.\n\n#### Get credentials\n\nTo acquire authenticated credentials and start interacting with Azure resources, please see the [quickstart guide here][quickstart_guide].\n\n#### Get Event Hubs namespace hostname\n\nThe simplest way is to use the [Azure portal][azure_portal] and navigate to your Event Hubs namespace. From the Overview tab, you'll see `Host name`. Copy the value from this field.\n\n#### Create SchemaRegistryClient\n\nOnce you have the Azure resource credentials and the Event Hubs namespace hostname, you can create the [SchemaRegistryClient][schema_registry_client]. You'll also need the [Azure.Identity][azure_identity] package to create the credential.\n\n```C# Snippet:SchemaRegistryCreateSchemaRegistryClient\n// Create a new SchemaRegistry client using the default credential from Azure.Identity using environment variables previously set,\n// including AZURE_CLIENT_ID, AZURE_CLIENT_SECRET, and AZURE_TENANT_ID.\n// For more information on Azure.Identity usage, see: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md\nstring fullyQualifiedNamespace = \"{hostname}.servicebus.windows.net\";\nvar client = new SchemaRegistryClient(fullyQualifiedNamespace: fullyQualifiedNamespace, credential: new DefaultAzureCredential());\n```\n\n## Key concepts\n\n### Schemas\n\nA schema has 6 components:\n- Group Name: The name of the group of schemas in the Schema Registry instance.\n- Schema Name: The name of the schema.\n- Schema ID: The ID assigned by the Schema Registry instance for the schema.\n- Schema Format: The format used for serialization of the schema. For example, Avro.\n- Schema Content: The string representation of the schema.\n- Schema Version: The version assigned to the schema in the Schema Registry instance.\n\nThese components play different roles. Some are used as input into the operations and some are outputs. Currently, [SchemaProperties][schema_properties] only exposes those properties that are potential outputs that are used in SchemaRegistry operations. Those exposed properties are `Content` and `Id`.\n\n### Thread safety\nWe guarantee that all client instance methods are thread-safe and independent of each other ([guideline](https://azure.github.io/azure-sdk/dotnet_introduction.html#dotnet-service-methods-thread-safety)). This ensures that the recommendation of reusing client instances is always safe, even across threads.\n\n### Additional concepts\n<!-- CLIENT COMMON BAR -->\n[Client options](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#configuring-service-clients-using-clientoptions) |\n[Accessing the response](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#accessing-http-response-details-using-responset) |\n[Long-running operations](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#consuming-long-running-operations-using-operationt) |\n[Handling failures](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#reporting-errors-requestfailedexception) |\n[Diagnostics](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md) |\n[Mocking](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#mocking) |\n[Client lifetime](https://devblogs.microsoft.com/azure-sdk/lifetime-management-and-thread-safety-guarantees-of-azure-sdk-net-clients/)\n<!-- CLIENT COMMON BAR -->\n\n## Examples\n\nThe following shows examples of what is available through the `SchemaRegistryClient`. There are both sync and async methods available for these client operations.\n\n* [Register a schema](#register-a-schema)\n* [Retrieve a schema ID](#retrieve-a-schema-id)\n* [Retrieve a schema](#retrieve-a-schema)\n\n### Register a schema\n\nRegister a schema to be stored in the Azure Schema Registry.\n\n```C# Snippet:SchemaRegistryRegisterSchema\nstring groupName = \"<schema_group_name>\";\nstring name = \"employeeSample\";\nSchemaFormat format = SchemaFormat.Avro;\n// Example schema's definition\nstring definition = @\"\n{\n   \"\"type\"\" : \"\"record\"\",\n    \"\"namespace\"\" : \"\"TestSchema\"\",\n    \"\"name\"\" : \"\"Employee\"\",\n    \"\"fields\"\" : [\n    { \"\"name\"\" : \"\"Name\"\" , \"\"type\"\" : \"\"string\"\" },\n    { \"\"name\"\" : \"\"Age\"\", \"\"type\"\" : \"\"int\"\" }\n    ]\n}\";\n\nResponse<SchemaProperties> schemaProperties = client.RegisterSchema(groupName, name, definition, format);\n```\n\n### Retrieve a schema ID\n\nRetrieve a previously registered schema ID from the Azure Schema Registry.\n\n```C# Snippet:SchemaRegistryRetrieveSchemaId\nstring groupName = \"<schema_group_name>\";\nstring name = \"employeeSample\";\nSchemaFormat format = SchemaFormat.Avro;\n// Example schema's content\nstring content = @\"\n{\n   \"\"type\"\" : \"\"record\"\",\n    \"\"namespace\"\" : \"\"TestSchema\"\",\n    \"\"name\"\" : \"\"Employee\"\",\n    \"\"fields\"\" : [\n    { \"\"name\"\" : \"\"Name\"\" , \"\"type\"\" : \"\"string\"\" },\n    { \"\"name\"\" : \"\"Age\"\", \"\"type\"\" : \"\"int\"\" }\n    ]\n}\";\n\nSchemaProperties schemaProperties = client.GetSchemaProperties(groupName, name, content, format);\nstring schemaId = schemaProperties.Id;\n```\n\n### Retrieve a schema\n\nRetrieve a previously registered schema's content from the Azure Schema Registry with either a schema ID or the group name, schema name, and version.\n\n```C# Snippet:SchemaRegistryRetrieveSchema\nvar schemaId = \"<schema_id>\";\nSchemaRegistrySchema schema = client.GetSchema(schemaId);\nstring definition = schema.Definition;\n```\n\n```C# Snippet:SchemaRegistryRetrieveSchemaVersion\nstring groupName = \"<schema_group_name>\";\nstring name = \"<schema_id>\";\nint version = 1;\nSchemaRegistrySchema schema = client.GetSchema(groupName, name, version);\nstring definition = schema.Definition;\n```\n\n## Troubleshooting\n\nInformation on troubleshooting steps will be provided as potential issues are discovered.\n\n## Next steps\n\nSee [Azure Schema Registry][azure_schema_registry] for additional information.\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [cla.microsoft.com][cla].\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct]. For more information see the [Code of Conduct FAQ][code_of_conduct_faq] or contact [opencode@microsoft.com][email_opencode] with any additional questions or comments.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2Fsdk%2Ftemplate%2FAzure.Template%2FREADME.png)\n\n<!-- LINKS -->\n[nuget]: https://www.nuget.org/\n[event_hubs_namespace]: https://docs.microsoft.com/azure/event-hubs/event-hubs-about\n[azure_powershell]: https://docs.microsoft.com/powershell/azure/\n[create_event_hubs_namespace]: https://docs.microsoft.com/azure/event-hubs/event-hubs-quickstart-powershell#create-an-event-hubs-namespace\n[quickstart_guide]: https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md\n[schema_registry_client]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/schemaregistry/Azure.Data.SchemaRegistry/src/SchemaRegistryClient.cs\n[azure_portal]: https://ms.portal.azure.com/\n[schema_properties]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/schemaregistry/Azure.Data.SchemaRegistry/src/SchemaProperties.cs\n[azure_identity]: https://www.nuget.org/packages/Azure.Identity\n[cla]: https://cla.microsoft.com\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[code_of_conduct_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[email_opencode]: mailto:opencode@microsoft.com\n[azure_sub]: https://azure.microsoft.com/free/dotnet/\n[azure_schema_registry]: https://aka.ms/schemaregistry\n",
        "repo_name": "schemaregistry/Azure.Data.SchemaRegistry",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/schemaregistry/Azure.Data.SchemaRegistry",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Schema Registry Apache Avro client library for .NET\n\nAzure Schema Registry is a schema repository service hosted by Azure Event Hubs, providing schema storage, versioning, and management. This package provides an Avro serializer capable of serializing and deserializing payloads containing Schema Registry schema identifiers and Avro-serialized data.\n\n## Getting started\n\n### Install the package\n\nInstall the Azure Schema Registry Apache Avro library for .NET with [NuGet][nuget]:\n\n```dotnetcli\ndotnet add package Microsoft.Azure.Data.SchemaRegistry.ApacheAvro\n```\n\n### Prerequisites\n\n* An [Azure subscription][azure_sub]\n* An [Event Hubs namespace][event_hubs_namespace]\n\nIf you need to [create an Event Hubs namespace][create_event_hubs_namespace], you can use the Azure Portal or [Azure PowerShell][azure_powershell].\n\nYou can use Azure PowerShell to create the Event Hubs namespace with the following command:\n\n```PowerShell\nNew-AzEventHubNamespace -ResourceGroupName myResourceGroup -NamespaceName namespace_name -Location eastus\n```\n\n### Authenticate the client\n\nIn order to interact with the Azure Schema Registry service, you'll need to create an instance of the [Schema Registry Client][schema_registry_client] class. To create this client, you'll need Azure resource credentials and the Event Hubs namespace hostname.\n\n#### Get credentials\n\nTo acquire authenticated credentials and start interacting with Azure resources, please see the [quickstart guide here][quickstart_guide].\n\n#### Get Event Hubs namespace hostname\n\nThe simplest way is to use the [Azure portal][azure_portal] and navigate to your Event Hubs namespace. From the Overview tab, you'll see `Host name`. Copy the value from this field.\n\n#### Create SchemaRegistryClient\n\nOnce you have the Azure resource credentials and the Event Hubs namespace hostname, you can create the [SchemaRegistryClient][schema_registry_client]. You'll also need the [Azure.Identity][azure_identity] package to create the credential.\n\n```C# Snippet:SchemaRegistryAvroCreateSchemaRegistryClient\n// Create a new SchemaRegistry client using the default credential from Azure.Identity using environment variables previously set,\n// including AZURE_CLIENT_ID, AZURE_CLIENT_SECRET, and AZURE_TENANT_ID.\n// For more information on Azure.Identity usage, see: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md\nvar schemaRegistryClient = new SchemaRegistryClient(fullyQualifiedNamespace: fullyQualifiedNamespace, credential: new DefaultAzureCredential());\n```\n\n## Key concepts\n\n### Serializer\n\nThis library provides a serializer, [SchemaRegistryAvroSerializer][schema_registry_avro_serializer], that interacts with `EventData` events. The SchemaRegistryAvroSerializer utilizes a SchemaRegistryClient to enrich the `EventData` events with the schema ID for the schema used to serialize the data.\n\nThis serializer requires the [Apache Avro library][apache_avro_library]. The payload types accepted by this serializer include [GenericRecord][generic_record] and [ISpecificRecord][specific_record].\n\n\n### Examples\n\nThe following shows examples of what is available through the `SchemaRegistryAvroSerializer`. There are both sync and async methods available for these operations. These examples use a generated Apache Avro class [Employee.cs][employee] created using this schema:\n\n```json\n{\n   \"type\" : \"record\",\n    \"namespace\" : \"TestSchema\",\n    \"name\" : \"Employee\",\n    \"fields\" : [\n        { \"name\" : \"Name\" , \"type\" : \"string\" },\n        { \"name\" : \"Age\", \"type\" : \"int\" }\n    ]\n}\n```\n\nDetails on generating a class using the Apache Avro library can be found in the [Avro C# Documentation][avro_csharp_documentation].\n\n### Serialize and deserialize data using the Event Hub EventData model\n\nIn order to serialize an `EventData` instance with Avro information, you can do the following:\n```C# Snippet:SchemaRegistryAvroEncodeEventData\nvar serializer = new SchemaRegistryAvroSerializer(client, groupName, new SchemaRegistryAvroSerializerOptions { AutoRegisterSchemas = true });\n\nvar employee = new Employee { Age = 42, Name = \"Caketown\" };\nEventData eventData = (EventData) await serializer.SerializeAsync(employee, messageType: typeof(EventData));\n\n// the schema Id will be included as a parameter of the content type\nConsole.WriteLine(eventData.ContentType);\n\n// the serialized Avro data will be stored in the EventBody\nConsole.WriteLine(eventData.EventBody);\n\n// construct a publisher and publish the events to our event hub\nvar fullyQualifiedNamespace = \"<< FULLY-QUALIFIED EVENT HUBS NAMESPACE (like something.servicebus.windows.net) >>\";\nvar eventHubName = \"<< NAME OF THE EVENT HUB >>\";\nvar credential = new DefaultAzureCredential();\n\n// It is recommended that you cache the Event Hubs clients for the lifetime of your\n// application, closing or disposing when application ends.  This example disposes\n// after the immediate scope for simplicity.\n\nawait using var producer = new EventHubProducerClient(fullyQualifiedNamespace, eventHubName, credential);\nawait producer.SendAsync(new EventData[] { eventData });\n```\n\nTo deserialize an `EventData` event that you are consuming:\n```C# Snippet:SchemaRegistryAvroDecodeEventData\n// construct a consumer and consume the event from our event hub\n\n// It is recommended that you cache the Event Hubs clients for the lifetime of your\n// application, closing or disposing when application ends.  This example disposes\n// after the immediate scope for simplicity.\n\nawait using var consumer = new EventHubConsumerClient(EventHubConsumerClient.DefaultConsumerGroupName, fullyQualifiedNamespace, eventHubName, credential);\nawait foreach (PartitionEvent receivedEvent in consumer.ReadEventsAsync())\n{\n    Employee deserialized = (Employee) await serializer.DeserializeAsync(eventData, typeof(Employee));\n    Console.WriteLine(deserialized.Age);\n    Console.WriteLine(deserialized.Name);\n    break;\n}\n```\n\nYou can also use generic methods to serialize and deserialize the data. This may be more convenient if you are not building a library on top of the Avro serializer, as you won't have to worry about the virality of generics:\n```C# Snippet:SchemaRegistryAvroEncodeEventDataGenerics\nvar serializer = new SchemaRegistryAvroSerializer(client, groupName, new SchemaRegistryAvroSerializerOptions { AutoRegisterSchemas = true });\n\nvar employee = new Employee { Age = 42, Name = \"Caketown\" };\nEventData eventData = await serializer.SerializeAsync<EventData, Employee>(employee);\n\n// the schema Id will be included as a parameter of the content type\nConsole.WriteLine(eventData.ContentType);\n\n// the serialized Avro data will be stored in the EventBody\nConsole.WriteLine(eventData.EventBody);\n```\n\nSimilarly, to deserialize:\n```C# Snippet:SchemaRegistryAvroDecodeEventDataGenerics\nEmployee deserialized = await serializer.DeserializeAsync<Employee>(eventData);\nConsole.WriteLine(deserialized.Age);\nConsole.WriteLine(deserialized.Name);\n```\n\n### Serialize and deserialize data using `MessageContent` directly\n\nIt is also possible to serialize and deserialize using `MessageContent`. Use this option if you are not integrating with any of the messaging libraries that work with `MessageContent`.\n```C# Snippet:SchemaRegistryAvroEncodeDecodeMessageContent\nvar serializer = new SchemaRegistryAvroSerializer(client, groupName, new SchemaRegistryAvroSerializerOptions { AutoRegisterSchemas = true });\nMessageContent content = await serializer.SerializeAsync<MessageContent, Employee>(employee);\n\nEmployee deserializedEmployee = await serializer.DeserializeAsync<Employee>(content);\n```\n\n## Troubleshooting\n\nIf you encounter errors when communicating with the Schema Registry service, these errors will be thrown as a [RequestFailedException][request_failed_exception]. The serializer will only communicate with the service the first time it encounters a schema (when serializing) or a schema ID (when deserializing). Any errors related to invalid Content-Types will be thrown as a `FormatException`. Errors related to invalid schemas will be thrown as an `Exception`, and the `InnerException` property will contain the underlying exception that was thrown from the Apache Avro library. This type of error would typically be caught during testing and should not be handled in code. Any errors related to incompatible schemas will be thrown as an `Exception` with the `InnerException` property set to the underlying exception from the Apache Avro library.\n\n## Next steps\n\nSee [Azure Schema Registry][azure_schema_registry] for additional information.\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [cla.microsoft.com][cla].\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct]. For more information see the [Code of Conduct FAQ][code_of_conduct_faq] or contact [opencode@microsoft.com][email_opencode] with any additional questions or comments.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2Fsdk%2Ftemplate%2FAzure.Template%2FREADME.png)\n\n<!-- LINKS -->\n[nuget]: https://www.nuget.org/\n[event_hubs_namespace]: https://docs.microsoft.com/azure/event-hubs/event-hubs-about\n[azure_powershell]: https://docs.microsoft.com/powershell/azure/\n[create_event_hubs_namespace]: https://docs.microsoft.com/azure/event-hubs/event-hubs-quickstart-powershell#create-an-event-hubs-namespace\n[quickstart_guide]: https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md\n[schema_registry_client]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/schemaregistry/Azure.Data.SchemaRegistry/src/SchemaRegistryClient.cs\n[azure_portal]: https://ms.portal.azure.com/\n[schema_properties]: src/SchemaProperties.cs\n[azure_identity]: https://www.nuget.org/packages/Azure.Identity\n[cla]: https://cla.microsoft.com\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[code_of_conduct_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[email_opencode]: mailto:opencode@microsoft.com\n[schema_registry_avro_serializer]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/schemaregistry/Microsoft.Azure.Data.SchemaRegistry.ApacheAvro/src/SchemaRegistryAvroSerializer.cs\n[employee]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/schemaregistry/Microsoft.Azure.Data.SchemaRegistry.ApacheAvro/tests/Models/Employee.cs\n[avro_csharp_documentation]: https://avro.apache.org/docs/current/api/csharp/html/index.html\n[apache_avro_library]: https://www.nuget.org/packages/Apache.Avro/\n[generic_record]: https://avro.apache.org/docs/current/api/csharp/html/classAvro_1_1Generic_1_1GenericRecord.html\n[specific_record]: https://avro.apache.org/docs/current/api/csharp/html/interfaceAvro_1_1Specific_1_1ISpecificRecord.html\n[azure_sub]: https://azure.microsoft.com/free/dotnet/\n[azure_schema_registry]: https://aka.ms/schemaregistry\n[request_failed_exception]: https://docs.microsoft.com/dotnet/api/azure.requestfailedexception?view=azure-dotnet\n",
        "repo_name": "schemaregistry/Microsoft.Azure.Data.SchemaRegistry.ApacheAvro",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/schemaregistry/Microsoft.Azure.Data.SchemaRegistry.ApacheAvro",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Cognitive Search management client library for .NET\n\nThe Microsoft Azure Cognitive Search is the only cloud search service with built-in AI capabilities that enrich all types of information to help you identify and explore relevant content at scale.\n\nThis library supports managing Microsoft Azure Cognitive Search resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Cognitive Search management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.Search\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "search/Azure.ResourceManager.Search",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/search/Azure.ResourceManager.Search",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Cognitive Search client library for .NET\n\n[Azure Cognitive Search](https://docs.microsoft.com/azure/search/) is a\nsearch-as-a-service cloud solution that gives developers APIs and tools\nfor adding a rich search experience over private, heterogeneous content\nin web, mobile, and enterprise applications.\n\nThe Azure Cognitive Search service is well suited for the following\n application scenarios:\n\n* Consolidate varied content types into a single searchable index.\n  To populate an index, you can push JSON documents that contain your content,\n  or if your data is already in Azure, create an indexer to pull in data\n  automatically.\n* Attach skillsets to an indexer to create searchable content from images\n  and large text documents. A skillset leverages AI from Cognitive Services\n  for built-in OCR, entity recognition, key phrase extraction, language\n  detection, text translation, and sentiment analysis. You can also add\n  custom skills to integrate external processing of your content during\n  data ingestion.\n* In a search client application, implement query logic and user experiences\n  similar to commercial web search engines.\n\nUse the Azure.Search.Documents client library to:\n\n* Submit queries for simple and advanced query forms that include fuzzy\n  search, wildcard search, regular expressions.\n* Implement filtered queries for faceted navigation, geospatial search,\n  or to narrow results based on filter criteria.\n* Create and manage search indexes.\n* Upload and update documents in the search index.\n* Create and manage indexers that pull data from Azure into an index.\n* Create and manage skillsets that add AI enrichment to data ingestion.\n* Create and manage analyzers for advanced text analysis or multi-lingual content.\n* Optimize results through scoring profiles to factor in business logic or freshness.\n\n[Source code][source] | [Package (NuGet)][package] | [API reference documentation][docs] | [REST API documentation][rest_docs] | [Product documentation][product_docs] | [Samples][samples]\n\n## Getting started\n\n### Install the package\n\nInstall the Azure Cognitive Search client library for .NET with [NuGet][nuget]:\n\n```dotnetcli\ndotnet add package Azure.Search.Documents\n```\n\n### Prerequisites\n\nYou need an [Azure subscription][azure_sub] and a\n[search service][create_search_service_docs] to use this package.\n\nTo create a new search service, you can use the [Azure portal][create_search_service_docs],\n[Azure PowerShell][create_search_service_ps], or the [Azure CLI][create_search_service_cli].\nHere's an example using the Azure CLI to create a free instance for getting started:\n\n```Powershell\naz search service create --name <mysearch> --resource-group <mysearch-rg> --sku free --location westus\n```\n\nSee [choosing a pricing tier](https://docs.microsoft.com/azure/search/search-sku-tier)\n for more information about available options.\n\n### Authenticate the client\n\nAll requests to a search service need an api-key that was generated specifically\nfor your service. [The api-key is the sole mechanism for authenticating access to\nyour search service endpoint.](https://docs.microsoft.com/azure/search/search-security-api-keys)\nYou can obtain your api-key from the\n[Azure portal](https://portal.azure.com/) or via the Azure CLI:\n\n```Powershell\naz search admin-key show --service-name <mysearch> --resource-group <mysearch-rg>\n```\n\nThere are two types of keys used to access your search service: **admin**\n*(read-write)* and **query** *(read-only)* keys.  Restricting access and\noperations in client apps is essential to safeguarding the search assets on your\nservice.  Always use a query key rather than an admin key for any query\noriginating from a client app.\n\n*Note: The example Azure CLI snippet above retrieves an admin key so it's easier\nto get started exploring APIs, but it should be managed carefully.*\n\nWe can use the api-key to create a new `SearchClient`.\n\n```C# Snippet:Azure_Search_Tests_Samples_Readme_Authenticate\nstring indexName = \"nycjobs\";\n\n// Get the service endpoint and API key from the environment\nUri endpoint = new Uri(Environment.GetEnvironmentVariable(\"SEARCH_ENDPOINT\"));\nstring key = Environment.GetEnvironmentVariable(\"SEARCH_API_KEY\");\n\n// Create a client\nAzureKeyCredential credential = new AzureKeyCredential(key);\nSearchClient client = new SearchClient(endpoint, indexName, credential);\n```\n### ASP.NET Core\nTo inject `SearchClient` as a dependency in an ASP.NET Core app, first install the package `Microsoft.Extensions.Azure`. Then register the client in the `Startup.ConfigureServices` method:\n\n```csharp\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddAzureClients(builder =>\n    {\n        builder.AddSearchClient(Configuration.GetSection(\"SearchClient\"));\n    });\n  \n    services.AddControllers();\n}\n```\nTo use the preceding code, add this to your configuration:\n\n```json\n{\n    \"SearchClient\": {\n      \"endpoint\": \"https://<resource-name>.search.windows.net\",\n      \"indexname\": \"nycjobs\"\n    }\n}\n```\nYou'll also need to provide your resource key to authenticate the client, but you shouldn't be putting that information in the configuration. Instead, when in development, use [User-Secrets](https://docs.microsoft.com/aspnet/core/security/app-secrets?view=aspnetcore-5.0&tabs=windows#how-the-secret-manager-tool-works). Add the following to `secrets.json`:\n\n```json\n{\n    \"SearchClient\": {\n      \"credential\": { \"key\": \"<you resource key>\" }\n    }\n}\n```\nWhen running in production, it's preferable to use [environment variables](https://docs.microsoft.com/aspnet/core/security/app-secrets?view=aspnetcore-5.0&tabs=windows#environment-variables):\n\n```\nSEARCH__CREDENTIAL__KEY=\"...\"\n```\nOr use other secure ways of storing secrets like [Azure Key Vault](https://docs.microsoft.com/aspnet/core/security/key-vault-configuration?view=aspnetcore-5.0).\n\nFor more details about Dependency Injection in ASP.NET Core apps, see [Dependency injection with the Azure SDK for .NET](https://docs.microsoft.com/dotnet/azure/sdk/dependency-injection).\n\n## Key concepts\n\nAn Azure Cognitive Search service contains one or more indexes that provide\npersistent storage of searchable data in the form of JSON documents.  _(If\nyou're brand new to search, you can make a very rough analogy between\nindexes and database tables.)_  The Azure.Search.Documents client library\nexposes operations on these resources through three main client types.\n\n* `SearchClient` helps with:\n  * [Searching](https://docs.microsoft.com/azure/search/search-lucene-query-architecture)\n    your indexed documents using\n    [rich queries](https://docs.microsoft.com/azure/search/search-query-overview)\n    and [powerful data shaping](https://docs.microsoft.com/azure/search/search-filters)\n  * [Autocompleting](https://docs.microsoft.com/rest/api/searchservice/autocomplete)\n    partially typed search terms based on documents in the index\n  * [Suggesting](https://docs.microsoft.com/rest/api/searchservice/suggestions)\n    the most likely matching text in documents as a user types\n  * [Adding, Updating or Deleting Documents](https://docs.microsoft.com/rest/api/searchservice/addupdate-or-delete-documents)\n    documents from an index\n\n* `SearchIndexClient` allows you to:\n  * [Create, delete, update, or configure a search index](https://docs.microsoft.com/rest/api/searchservice/index-operations)\n  * [Declare custom synonym maps to expand or rewrite queries](https://docs.microsoft.com/rest/api/searchservice/synonym-map-operations)\n\n* `SearchIndexerClient` allows you to:\n  * [Create indexers to automatically crawl data sources](https://docs.microsoft.com/rest/api/searchservice/indexer-operations)\n  * [Define AI powered Skillsets to transform and enrich your data](https://docs.microsoft.com/rest/api/searchservice/skillset-operations)\n\n_The `Azure.Search.Documents` client library (v11) is a brand new offering for\n.NET developers who want to use search technology in their applications.  There\nis an older, fully featured `Microsoft.Azure.Search` client library (v10) with\nmany similar looking APIs, so please be careful to avoid confusion when\nexploring online resources.  A good rule of thumb is to check for the namespace\n`using Azure.Search.Documents;` when you're looking for us._\n\n### Thread safety\nWe guarantee that all client instance methods are thread-safe and independent of each other ([guideline](https://azure.github.io/azure-sdk/dotnet_introduction.html#dotnet-service-methods-thread-safety)). This ensures that the recommendation of reusing client instances is always safe, even across threads.\n\n### Additional concepts\n<!-- CLIENT COMMON BAR -->\n[Client options](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#configuring-service-clients-using-clientoptions) |\n[Accessing the response](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#accessing-http-response-details-using-responset) |\n[Long-running operations](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#consuming-long-running-operations-using-operationt) |\n[Handling failures](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#reporting-errors-requestfailedexception) |\n[Diagnostics](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md) |\n[Mocking](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#mocking) |\n[Client lifetime](https://devblogs.microsoft.com/azure-sdk/lifetime-management-and-thread-safety-guarantees-of-azure-sdk-net-clients/)\n<!-- CLIENT COMMON BAR -->\n\n## Examples\n\nThe following examples all use a simple [Hotel data set](https://github.com/Azure-Samples/azure-search-sample-data)\nthat you can [import into your own index from the Azure portal.](https://docs.microsoft.com/azure/search/search-get-started-portal#step-1---start-the-import-data-wizard-and-create-a-data-source)\nThese are just a few of the basics - please [check out our Samples][samples] for\nmuch more.\n\n* [Querying](#querying)\n  * [Use C# types for search results](#use-c-types-for-search-results)\n  * [Use `SearchDocument` like a dictionary for search results](#use-searchdocument-like-a-dictionary-for-search-results)\n  * [SearchOptions](#searchoptions)\n* [Creating an index](#creating-an-index)\n* [Adding documents to your index](#adding-documents-to-your-index)\n* [Retrieving a specific document from your index](#retrieving-a-specific-document-from-your-index)\n* [Async APIs](#async-apis)\n\n### Advanced authentication\n \n- [Create a client that can authenticate in a national cloud](#authenticate-in-a-national-cloud)\n\n### Querying\n\nLet's start by importing our namespaces.\n\n```C# Snippet:Azure_Search_Tests_Samples_Readme_Namespace\nusing Azure;\nusing Azure.Search.Documents;\nusing Azure.Search.Documents.Indexes;\nusing Azure.Core.GeoJson;\n```\n\nWe'll then create a `SearchClient` to access our hotels search index.\n\n```C# Snippet:Azure_Search_Tests_Samples_Readme_Client\n// Get the service endpoint and API key from the environment\nUri endpoint = new Uri(Environment.GetEnvironmentVariable(\"SEARCH_ENDPOINT\"));\nstring key = Environment.GetEnvironmentVariable(\"SEARCH_API_KEY\");\nstring indexName = \"hotels\";\n\n// Create a client\nAzureKeyCredential credential = new AzureKeyCredential(key);\nSearchClient client = new SearchClient(endpoint, indexName, credential);\n```\n\nThere are two ways to interact with the data returned from a search query.\nLet's explore them with a search for a \"luxury\" hotel.\n\n#### Use C# types for search results\n\nWe can decorate our own C# types with [attributes from `System.Text.Json`](https://docs.microsoft.com/dotnet/standard/serialization/system-text-json-how-to):\n\n```C# Snippet:Azure_Search_Tests_Samples_Readme_StaticType\npublic class Hotel\n{\n    [JsonPropertyName(\"HotelId\")]\n    [SimpleField(IsKey = true, IsFilterable = true, IsSortable = true)]\n    public string Id { get; set; }\n\n    [JsonPropertyName(\"HotelName\")]\n    [SearchableField(IsFilterable = true, IsSortable = true)]\n    public string Name { get; set; }\n\n    [SimpleField(IsFilterable = true, IsSortable = true)]\n    public GeoPoint GeoLocation { get; set; }\n\n    // Complex fields are included automatically in an index if not ignored.\n    public HotelAddress Address { get; set; }\n}\n\npublic class HotelAddress\n{\n    public string StreetAddress { get; set; }\n\n    [SimpleField(IsFilterable = true, IsSortable = true, IsFacetable = true)]\n    public string City { get; set; }\n\n    [SimpleField(IsFilterable = true, IsSortable = true, IsFacetable = true)]\n    public string StateProvince { get; set; }\n\n    [SimpleField(IsFilterable = true, IsSortable = true, IsFacetable = true)]\n    public string Country { get; set; }\n\n    [SimpleField(IsFilterable = true, IsSortable = true, IsFacetable = true)]\n    public string PostalCode { get; set; }\n}\n```\n\nThen we use them as the type parameter when querying to return strongly-typed search results:\n\n```C# Snippet:Azure_Search_Tests_Samples_Readme_StaticQuery\nSearchResults<Hotel> response = client.Search<Hotel>(\"luxury\");\nforeach (SearchResult<Hotel> result in response.GetResults())\n{\n    Hotel doc = result.Document;\n    Console.WriteLine($\"{doc.Id}: {doc.Name}\");\n}\n```\n\nIf you're working with a search index and know the schema, creating C# types\nis recommended.\n\n#### Use `SearchDocument` like a dictionary for search results\n\nIf you don't have your own type for search results, `SearchDocument` can be\nused instead.  Here we perform the search, enumerate over the results, and\nextract data using `SearchDocument`'s dictionary indexer.\n\n```C# Snippet:Azure_Search_Tests_Samples_Readme_Dict\nSearchResults<SearchDocument> response = client.Search<SearchDocument>(\"luxury\");\nforeach (SearchResult<SearchDocument> result in response.GetResults())\n{\n    SearchDocument doc = result.Document;\n    string id = (string)doc[\"HotelId\"];\n    string name = (string)doc[\"HotelName\"];\n    Console.WriteLine(\"{id}: {name}\");\n}\n```\n\n#### SearchOptions\n\nThe `SearchOptions` provide powerful control over the behavior of our queries.\nLet's search for the top 5 luxury hotels with a good rating.\n\n```C# Snippet:Azure_Search_Tests_Samples_Readme_Options\nint stars = 4;\nSearchOptions options = new SearchOptions\n{\n    // Filter to only Rating greater than or equal our preference\n    Filter = SearchFilter.Create($\"Rating ge {stars}\"),\n    Size = 5, // Take only 5 results\n    OrderBy = { \"Rating desc\" } // Sort by Rating from high to low\n};\nSearchResults<Hotel> response = client.Search<Hotel>(\"luxury\", options);\n// ...\n```\n\n### Creating an index\n\nYou can use the `SearchIndexClient` to create a search index. Fields can be\ndefined from a model class using `FieldBuilder`. Indexes can also define\nsuggesters, lexical analyzers, and more.\n\nUsing the [`Hotel` sample](#use-c-types-for-search-results) above,\nwhich defines both simple and complex fields:\n\n```C# Snippet:Azure_Search_Tests_Samples_Readme_CreateIndex\nUri endpoint = new Uri(Environment.GetEnvironmentVariable(\"SEARCH_ENDPOINT\"));\nstring key = Environment.GetEnvironmentVariable(\"SEARCH_API_KEY\");\n\n// Create a service client\nAzureKeyCredential credential = new AzureKeyCredential(key);\nSearchIndexClient client = new SearchIndexClient(endpoint, credential);\n\n// Create the index using FieldBuilder.\nSearchIndex index = new SearchIndex(\"hotels\")\n{\n    Fields = new FieldBuilder().Build(typeof(Hotel)),\n    Suggesters =\n    {\n        // Suggest query terms from the HotelName field.\n        new SearchSuggester(\"sg\", \"HotelName\")\n    }\n};\n\nclient.CreateIndex(index);\n```\n\nIn scenarios when the model is not known or cannot be modified, you can\nalso create fields explicitly using convenient `SimpleField`,\n`SearchableField`, or `ComplexField` classes:\n\n```C# Snippet:Azure_Search_Tests_Samples_Readme_CreateManualIndex\n// Create the index using field definitions.\nSearchIndex index = new SearchIndex(\"hotels\")\n{\n    Fields =\n    {\n        new SimpleField(\"HotelId\", SearchFieldDataType.String) { IsKey = true, IsFilterable = true, IsSortable = true },\n        new SearchableField(\"HotelName\") { IsFilterable = true, IsSortable = true },\n        new SearchableField(\"Description\") { AnalyzerName = LexicalAnalyzerName.EnLucene },\n        new SearchableField(\"Tags\", collection: true) { IsFilterable = true, IsFacetable = true },\n        new ComplexField(\"Address\")\n        {\n            Fields =\n            {\n                new SearchableField(\"StreetAddress\"),\n                new SearchableField(\"City\") { IsFilterable = true, IsSortable = true, IsFacetable = true },\n                new SearchableField(\"StateProvince\") { IsFilterable = true, IsSortable = true, IsFacetable = true },\n                new SearchableField(\"Country\") { IsFilterable = true, IsSortable = true, IsFacetable = true },\n                new SearchableField(\"PostalCode\") { IsFilterable = true, IsSortable = true, IsFacetable = true }\n            }\n        }\n    },\n    Suggesters =\n    {\n        // Suggest query terms from the hotelName field.\n        new SearchSuggester(\"sg\", \"HotelName\")\n    }\n};\n\nclient.CreateIndex(index);\n```\n\n### Adding documents to your index\n\nYou can `Upload`, `Merge`, `MergeOrUpload`, and `Delete` multiple documents from\nan index in a single batched request.  There are\n[a few special rules for merging](https://docs.microsoft.com/rest/api/searchservice/addupdate-or-delete-documents#document-actions)\nto be aware of.\n\n```C# Snippet:Azure_Search_Tests_Samples_Readme_Index\nIndexDocumentsBatch<Hotel> batch = IndexDocumentsBatch.Create(\n    IndexDocumentsAction.Upload(new Hotel { Id = \"783\", Name = \"Upload Inn\" }),\n    IndexDocumentsAction.Merge(new Hotel { Id = \"12\", Name = \"Renovated Ranch\" }));\n\nIndexDocumentsOptions options = new IndexDocumentsOptions { ThrowOnAnyError = true };\nclient.IndexDocuments(batch, options);\n```\n\nThe request will succeed even if any of the individual actions fail and\nreturn an `IndexDocumentsResult` for inspection.  There's also a `ThrowOnAnyError`\noption if you only care about success or failure of the whole batch.\n\n### Retrieving a specific document from your index\n\nIn addition to querying for documents using keywords and optional filters,\nyou can retrieve a specific document from your index if you already know the\nkey. You could get the key from a query, for example, and want to show more\ninformation about it or navigate your customer to that document.\n\n```C# Snippet:Azure_Search_Tests_Samples_Readme_GetDocument\nHotel doc = client.GetDocument<Hotel>(\"1\");\nConsole.WriteLine($\"{doc.Id}: {doc.Name}\");\n```\n\n### Async APIs\n\nAll of the examples so far have been using synchronous APIs, but we provide full\nsupport for async APIs as well.  You'll generally just add an `Async` suffix to\nthe name of the method and `await` it.\n\n```C# Snippet:Azure_Search_Tests_Samples_Readme_StaticQueryAsync\nSearchResults<Hotel> searchResponse = await client.SearchAsync<Hotel>(\"luxury\");\nawait foreach (SearchResult<Hotel> result in searchResponse.GetResultsAsync())\n{\n    Hotel doc = result.Document;\n    Console.WriteLine($\"{doc.Id}: {doc.Name}\");\n}\n```\n\n### Authenticate in a National Cloud\n\nTo authenticate in a [National Cloud](https://docs.microsoft.com/azure/active-directory/develop/authentication-national-cloud), you will need to make the following additions to your client configuration:\n\n- Set the `AuthorityHost` in the credential options or via the `AZURE_AUTHORITY_HOST` environment variable\n- Set the `Audience` in `SearchClientOptions`\n\n```C#\n// Create a SearchClient that will authenticate through AAD in the China national cloud\nstring indexName = \"nycjobs\";\nUri endpoint = new Uri(Environment.GetEnvironmentVariable(\"SEARCH_ENDPOINT\"));\nSearchClient client = new SearchClient(endpoint, indexName,\n    new DefaultAzureCredential(\n        new DefaultAzureCredentialOptions()\n        {\n            AuthorityHost = AzureAuthorityHosts.AzureChina\n        }),\n    new SearchClientOptions()\n    {\n        Audience = SearchAudience.AzureChina\n    });\n```\n\n## Troubleshooting\n\nAny Azure.Search.Documents operation that fails will throw a\n[`RequestFailedException`][RequestFailedException] with\nhelpful [`Status` codes][status_codes].  Many of these errors are recoverable.\n\n```C# Snippet:Azure_Search_Tests_Samples_Readme_Troubleshooting\ntry\n{\n    return client.GetDocument<Hotel>(\"12345\");\n}\ncatch (RequestFailedException ex) when (ex.Status == 404)\n{\n    Console.WriteLine(\"We couldn't find the hotel you are looking for!\");\n    Console.WriteLine(\"Please try selecting another.\");\n    return null;\n}\n```\n\nYou can also easily [enable console logging](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md#logging) if you want to dig\ndeeper into the requests you're making against the service.\n\nSee our [troubleshooting guide](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/search/Azure.Search.Documents/TROUBLESHOOTING.md) for details on how to diagnose various failure scenarios.\n\n## Next steps\n\n* Go further with Azure.Search.Documents and our [samples][samples]\n* Watch a [demo or deep dive video](https://azure.microsoft.com/resources/videos/index/?services=search)\n* Read more about the [Azure Cognitive Search service](https://docs.microsoft.com/azure/search/search-what-is-azure-search)\n\n## Contributing\n\nSee our [Search CONTRIBUTING.md][search_contrib] for details on building,\ntesting, and contributing to this library.\n\nThis project welcomes contributions and suggestions.  Most contributions require\nyou to agree to a Contributor License Agreement (CLA) declaring that you have\nthe right to, and actually do, grant us the rights to use your contribution. For\ndetails, visit [cla.microsoft.com][cla].\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc].\nFor more information see the [Code of Conduct FAQ][coc_faq]\nor contact [opencode@microsoft.com][coc_contact] with any\nadditional questions or comments.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2Fsdk%2Fsearch%2FAzure.Search.Documents%2FREADME.png)\n\n<!-- LINKS -->\n[source]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/search/Azure.Search.Documents/src\n[package]: https://www.nuget.org/packages/Azure.Search.Documents/\n[docs]: https://docs.microsoft.com/dotnet/api/Azure.Search.Documents\n[rest_docs]: https://docs.microsoft.com/rest/api/searchservice/\n[product_docs]: https://docs.microsoft.com/azure/search/\n[nuget]: https://www.nuget.org/\n[create_search_service_docs]: https://docs.microsoft.com/azure/search/search-create-service-portal\n[create_search_service_ps]: https://docs.microsoft.com/azure/search/search-manage-powershell#create-or-delete-a-service\n[create_search_service_cli]: https://docs.microsoft.com/cli/azure/search/service?view=azure-cli-latest#az-search-service-create\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/dotnet/\n[RequestFailedException]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/core/Azure.Core/src/RequestFailedException.cs\n[status_codes]: https://docs.microsoft.com/rest/api/searchservice/http-status-codes\n[samples]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/search/Azure.Search.Documents/samples/\n[search_contrib]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/search/CONTRIBUTING.md\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n",
        "repo_name": "search/Azure.Search.Documents",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/search/Azure.Search.Documents",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Security Center management client library for .NET\n\nMicrosoft Azure Security Center provides security management across hybrid cloud workloads. It offers threat protection for data centers within both cloud workloads and on-premises. \n\nThis library supports managing Microsoft Azure Security Center resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Security Center management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.SecurityCenter\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "securitycenter/Azure.ResourceManager.SecurityCenter",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/securitycenter/Azure.ResourceManager.SecurityCenter",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Security DevOps management client library for .NET\n\nMicrosoft Azure DevOps supports a collaborative culture and set of processes that bring together developers, project managers, and contributors to develop software.\n\nThis library supports managing Microsoft Azure Security DevOps resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Security DevOps management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.SecurityDevOps --prerelease\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "securitydevops/Azure.ResourceManager.SecurityDevOps",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/securitydevops/Azure.ResourceManager.SecurityDevOps",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Security Insights management client library for .NET\n\nMicrosoft Azure Security Insights provides information, news, tips on the Microsoft Security Solutions including Microsoft Sentinel, Microsoft 365 Defender, Azure, and Microsoft 365.\n\nThis library supports managing Microsoft Azure Security Insights resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Security Insights management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.SecurityInsights\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "securityinsights/Azure.ResourceManager.SecurityInsights",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/securityinsights/Azure.ResourceManager.SecurityInsights",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure SelfHelp management client library for .NET\n\nThe Azure Help REST API provides you access to rich and powerful self-help solutions and diagnostics to troubleshoot Azure issues anywhere.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure SelfHelp management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.SelfHelp\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html)\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "selfhelp/Azure.ResourceManager.SelfHelp",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/selfhelp/Azure.ResourceManager.SelfHelp",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Service Bus client library for .NET\n\nAzure Service Bus allows you to build applications that take advantage of asynchronous messaging patterns using a highly-reliable service to broker messages between producers and consumers. Azure Service Bus provides flexible, brokered messaging between client and server, along with structured first-in, first-out (FIFO) messaging, and publish/subscribe capabilities with complex routing. If you would like to know more about Azure Service Bus, you may wish to review: [What is Azure Service Bus?](https://docs.microsoft.com/azure/service-bus-messaging/service-bus-messaging-overview)\n\nUse the client library for Azure Service Bus to:\n\n- Transfer business data: leverage messaging for durable exchange of information, such as sales or purchase orders, journals, or inventory movements.\n\n- Decouple applications: improve reliability and scalability of applications and services, relieving senders and receivers of the need to be online at the same time.\n\n- Control how messages are processed: support traditional competing consumers for messages using queues or allow each consumer their own instance of a message using topics and subscriptions.\n\n- Implement complex workflows: message sessions support scenarios that require message ordering or message deferral.\n\n[Source code](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/servicebus/Azure.Messaging.ServiceBus/src) | [Package (NuGet)](https://www.nuget.org/packages/Azure.Messaging.ServiceBus/) | [API reference documentation](https://docs.microsoft.com/dotnet/api/azure.messaging.servicebus) | [Product documentation](https://docs.microsoft.com/azure/service-bus/) | [Migration guide](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/servicebus/Azure.Messaging.ServiceBus/MigrationGuide.md) | [Troubleshooting guide](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/servicebus/Azure.Messaging.ServiceBus/TROUBLESHOOTING.md)\n\n## Getting started\n\n### Prerequisites\n\n- **Microsoft Azure Subscription:** To use Azure services, including Azure Service Bus, you'll need a subscription. If you do not have an existing Azure account, you may sign up for a free trial or use your MSDN subscriber benefits when you [create an account](https://azure.microsoft.com/account).\n\n- **Service Bus namespace:** To interact with Azure Service Bus, you'll also need to have a namespace available. If you are not familiar with creating Azure resources, you may wish to follow the step-by-step guide for [creating a Service Bus namespace using the Azure portal](https://docs.microsoft.com/azure/service-bus-messaging/service-bus-create-namespace-portal). There, you can also find detailed instructions for using the Azure CLI, Azure PowerShell, or Azure Resource Manager (ARM) templates to create a Service bus entity.\n\n- **C# 8.0:** The Azure Service Bus client library makes use of new features that were introduced in C# 8.0.  In order to take advantage of the C# 8.0 syntax, it is recommended that you compile using the [.NET Core SDK](https://dotnet.microsoft.com/download) 3.0 or higher with a [language version](https://docs.microsoft.com/dotnet/csharp/language-reference/configure-language-version#override-a-default) of `latest`.\n\n  Visual Studio users wishing to take full advantage of the C# 8.0 syntax will need to use Visual Studio 2019 or later.  Visual Studio 2019, including the free Community edition, can be downloaded [here](https://visualstudio.microsoft.com).  Users of Visual Studio 2017 can take advantage of the C# 8 syntax by making use of the [Microsoft.Net.Compilers NuGet package](https://www.nuget.org/packages/Microsoft.Net.Compilers/) and setting the language version, though the editing experience may not be ideal.\n\n  You can still use the library with previous C# language versions, but will need to manage asynchronous enumerable and asynchronous disposable members manually rather than benefiting from the new syntax.  You may still target any framework version supported by your .NET Core SDK, including earlier versions of .NET Core or the .NET framework.  For more information, see: [how to specify target frameworks](https://docs.microsoft.com/dotnet/standard/frameworks#how-to-specify-target-frameworks).  \n\n  **Important Note:** In order to build or run the [examples](#examples) and the [samples](#next-steps) without modification, use of C# 8.0 is mandatory.  You can still run the samples if you decide to tweak them for other language versions.  \n\nTo quickly create the needed Service Bus resources in Azure and to receive a connection string for them, you can deploy our sample template by clicking:\n\n[![Deploy to Azure](https://aka.ms/deploytoazurebutton)](https://portal.azure.com/#create/Microsoft.Template/uri/https%3A%2F%2Fraw.githubusercontent.com%2FAzure%2Fazure-sdk-for-net%2Fmaster%2Fsdk%2Fservicebus%2FAzure.Messaging.ServiceBus%2Fassets%2Fsamples-azure-deploy.json)\n\n### Install the package\n\nInstall the Azure Service Bus client library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.Messaging.ServiceBus\n```\n\n### Authenticate the client\n\nFor the Service Bus client library to interact with a queue or topic, it will need to understand how to connect and authorize with it.  The easiest means for doing so is to use a connection string, which is created automatically when creating a Service Bus namespace.  If you aren't familiar with shared access policies in Azure, you may wish to follow the step-by-step guide to [get a Service Bus connection string](https://docs.microsoft.com/azure/service-bus-messaging/service-bus-quickstart-topics-subscriptions-portal#get-the-connection-string).\n\nOnce you have a connection string, you can authenticate your client with it.\n\n```C# Snippet:ServiceBusAuthConnString\n// Create a ServiceBusClient that will authenticate using a connection string\nstring connectionString = \"<connection_string>\";\nawait using var client = new ServiceBusClient(connectionString);\n```\n\nTo see how to authenticate using Azure.Identity, view this [example](#authenticating-with-azureidentity).\n\nFor examples of how to authenticate for an ASP.NET Core application, view this [example](#registering-with-aspnet-core-dependency-injection).\n\nTo see how to initiate the connection with a custom endpoint, view this [sample](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/servicebus/Azure.Messaging.ServiceBus/samples/Sample13_AdvancedConfiguration.md#initiating-the-connection-with-a-custom-endpoint).\n\n## Key concepts\n\nOnce you've initialized a `ServiceBusClient`, you can interact with the primary resource types within a Service Bus Namespace, of which multiple can exist and on which actual message transmission takes place, the namespace often serving as an application container:\n\n* [Queue](https://docs.microsoft.com/azure/service-bus-messaging/service-bus-messaging-overview#queues): Allows for Sending and Receiving of messages. Often used for point-to-point communication.\n\n* [Topic](https://docs.microsoft.com/azure/service-bus-messaging/service-bus-messaging-overview#topics): As opposed to Queues, Topics are better suited to publish/subscribe scenarios. A topic can be sent to, but requires a subscription, of which there can be multiple in parallel, to consume from.\n\n* [Subscription](https://docs.microsoft.com/azure/service-bus-messaging/service-bus-queues-topics-subscriptions#topics-and-subscriptions): The mechanism to consume from a Topic. Each subscription is independent, and receives a copy of each message sent to the topic. Rules and Filters can be used to tailor which messages are received by a specific subscription.\n\nFor more information about these resources, see [What is Azure Service Bus?](https://docs.microsoft.com/azure/service-bus-messaging/service-bus-messaging-overview).\n\nTo interact with these resources, one should be familiar with the following SDK concepts:\n\n- A [Service Bus client](https://docs.microsoft.com/dotnet/api/azure.messaging.servicebus.servicebusclient) is the primary interface for developers interacting with the Service Bus client library. It serves as the gateway from which all interaction with the library will occur.\n\n- A [Service Bus sender](https://docs.microsoft.com/dotnet/api/azure.messaging.servicebus.servicebussender) is scoped to a particular queue or topic, and is created using the Service Bus client. The sender allows you to send messages to a queue or topic. It also allows for scheduling messages to be available for delivery at a specified date.\n\n- A [Service Bus receiver](https://docs.microsoft.com/dotnet/api/azure.messaging.servicebus.servicebusreceiver) is scoped to a particular queue or subscription, and is created using the Service Bus client. The receiver allows you to receive messages from a queue or subscription. It also allows the messages to be settled after receiving them. There are four ways of settling messages:\n  * Complete - causes the message to be deleted from the queue or topic.\n  * Abandon - releases the receiver's lock on the message allowing for the message to be received by other receivers.\n  * Defer - defers the message from being received by normal means. In order to receive deferred messages, the sequence number of the message needs to be retained.\n  * DeadLetter - moves the message to the Dead Letter queue. This will prevent the message from being received again. In order to receive messages from the Dead Letter queue, a receiver scoped to the Dead Letter queue is needed.\n\n- A [Service Bus session receiver](https://docs.microsoft.com/dotnet/api/azure.messaging.servicebus.servicebussessionreceiver) is scoped to a particular session-enabled queue or subscription, and is created using the Service Bus client. The session receiver is almost identical to the standard receiver, with the difference being that session management operations are exposed which only apply to session-enabled entities. These operations include getting and setting session state, as well as renewing session locks.\n\n- A [Service Bus processor](https://docs.microsoft.com/dotnet/api/azure.messaging.servicebus.servicebusprocessor) is scoped to a particular queue or subscription, and is created using the Service Bus client. The `ServiceBusProcessor` can be thought of as an abstraction around a set of receivers. It uses a callback model to allow code to be specified when a message is received and when an exception occurs. It offers automatic completion of processed messages, automatic message lock renewal, and concurrent execution of user specified event handlers. Because of its feature set, it should be the go to tool for writing applications that receive from Service Bus entities. The ServiceBusReceiver is recommended for more complex scenarios in which the processor is not able to provide the fine-grained control that one can expect when using the ServiceBusReceiver directly.\n\n- A [Service Bus session processor](https://docs.microsoft.com/dotnet/api/azure.messaging.servicebus.servicebussessionprocessor) is scoped to a particular session-enabled queue or subscription, and is created using the Service Bus client. The session processor is almost identical to the standard processor, with the difference being that session management operations are exposed which only apply to session-enabled entities.\n\nFor more concepts and deeper discussion, see: [Service Bus Advanced Features](https://docs.microsoft.com/azure/service-bus-messaging/service-bus-messaging-overview#advanced-features).\n\n### Client lifetime\n\nThe `ServiceBusClient`, senders, receivers, and processors are safe to cache and use as a singleton for the lifetime of the application, which is best practice when messages are being sent or received regularly. They are responsible for efficient management of network, CPU, and memory use, working to keep usage low during periods of inactivity. \n\nThese types are disposable and calling either `DisposeAsync` or `CloseAsync` is required to ensure that network resources and other unmanaged objects are properly cleaned up.  It is important to note that when a `ServiceBusClient` instance is disposed, it will automatically close and cleanup any senders, receivers, and processors that were created using it.\n\n### Thread safety\n\nWe guarantee that all client instance methods are thread-safe and independent of each other ([guideline](https://azure.github.io/azure-sdk/dotnet_introduction.html#dotnet-service-methods-thread-safety)). This ensures that the recommendation of reusing client instances is always safe, even across threads.\n\n### Additional concepts\n\n<!-- CLIENT COMMON BAR -->\n[Client options](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#configuring-service-clients-using-clientoptions) | [Diagnostics](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md) |\n[Mocking](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#mocking) \n<!-- CLIENT COMMON BAR -->\n\n## Examples\n\n* [Send and receive a message](#send-and-receive-a-message)\n* [Sending a batch of messages](#sending-a-batch-of-messages)\n* [Receiving a batch of messages](#receiving-a-batch-of-messages)\n* [Complete a message](#complete-a-message)\n* [Abandon a message](#abandon-a-message)\n* [Defer a message](#defer-a-message)\n* [Dead letter a message](#dead-letter-a-message)\n* [Using the processor](#using-the-processor)\n* [Authenticating with Azure.Identity](#authenticating-with-azureidentity)\n* [Working with sessions](#working-with-sessions)\n* [More samples](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/servicebus/Azure.Messaging.ServiceBus/samples/README.md)\n\n### Send and receive a message\n\nMessage sending is performed using the `ServiceBusSender`. Receiving is performed using the `ServiceBusReceiver`.\n\n```C# Snippet:ServiceBusSendAndReceive\nstring connectionString = \"<connection_string>\";\nstring queueName = \"<queue_name>\";\n// since ServiceBusClient implements IAsyncDisposable we create it with \"await using\"\nawait using var client = new ServiceBusClient(connectionString);\n\n// create the sender\nServiceBusSender sender = client.CreateSender(queueName);\n\n// create a message that we can send. UTF-8 encoding is used when providing a string.\nServiceBusMessage message = new ServiceBusMessage(\"Hello world!\");\n\n// send the message\nawait sender.SendMessageAsync(message);\n\n// create a receiver that we can use to receive the message\nServiceBusReceiver receiver = client.CreateReceiver(queueName);\n\n// the received message is a different type as it contains some service set properties\nServiceBusReceivedMessage receivedMessage = await receiver.ReceiveMessageAsync();\n\n// get the message body as a string\nstring body = receivedMessage.Body.ToString();\nConsole.WriteLine(body);\n```\n\n### Sending a batch of messages\n\nThere are two ways of sending several messages at once. The first way of doing this uses safe-batching. With safe-batching, you can create a `ServiceBusMessageBatch` object, which will allow you to attempt to add messages one at a time to the batch using the `TryAdd` method. If the message cannot fit in the batch, `TryAdd` will return false.\n\n```C# Snippet:ServiceBusSendAndReceiveSafeBatch\n// add the messages that we plan to send to a local queue\nQueue<ServiceBusMessage> messages = new Queue<ServiceBusMessage>();\nmessages.Enqueue(new ServiceBusMessage(\"First message\"));\nmessages.Enqueue(new ServiceBusMessage(\"Second message\"));\nmessages.Enqueue(new ServiceBusMessage(\"Third message\"));\n\n// create a message batch that we can send\n// total number of messages to be sent to the Service Bus queue\nint messageCount = messages.Count;\n\n// while all messages are not sent to the Service Bus queue\nwhile (messages.Count > 0)\n{\n    // start a new batch\n    using ServiceBusMessageBatch messageBatch = await sender.CreateMessageBatchAsync();\n\n    // add the first message to the batch\n    if (messageBatch.TryAddMessage(messages.Peek()))\n    {\n        // dequeue the message from the .NET queue once the message is added to the batch\n        messages.Dequeue();\n    }\n    else\n    {\n        // if the first message can't fit, then it is too large for the batch\n        throw new Exception($\"Message {messageCount - messages.Count} is too large and cannot be sent.\");\n    }\n\n    // add as many messages as possible to the current batch\n    while (messages.Count > 0 && messageBatch.TryAddMessage(messages.Peek()))\n    {\n        // dequeue the message from the .NET queue as it has been added to the batch\n        messages.Dequeue();\n    }\n\n    // now, send the batch\n    await sender.SendMessagesAsync(messageBatch);\n\n    // if there are any remaining messages in the .NET queue, the while loop repeats\n}\n```\n\nThe second way uses the `SendMessagesAsync` overload that accepts an IEnumerable of `ServiceBusMessage`. With this method, we will attempt to fit all of the supplied messages in a single message batch that we will send to the service. If the messages are too large to fit in a single batch, the operation will throw an exception.\n\n```C# Snippet:ServiceBusSendAndReceiveBatch\nIList<ServiceBusMessage> messages = new List<ServiceBusMessage>();\nmessages.Add(new ServiceBusMessage(\"First\"));\nmessages.Add(new ServiceBusMessage(\"Second\"));\n// send the messages\nawait sender.SendMessagesAsync(messages);\n```\n\n### Receiving a batch of messages\n```C# Snippet:ServiceBusReceiveBatch\n// create a receiver that we can use to receive the messages\nServiceBusReceiver receiver = client.CreateReceiver(queueName);\n\n// the received message is a different type as it contains some service set properties\n// a batch of messages (maximum of 2 in this case) are received\nIReadOnlyList<ServiceBusReceivedMessage> receivedMessages = await receiver.ReceiveMessagesAsync(maxMessages: 2);\n\n// go through each of the messages received\nforeach (ServiceBusReceivedMessage receivedMessage in receivedMessages)\n{\n    // get the message body as a string\n    string body = receivedMessage.Body.ToString();\n}\n```\n\n### Complete a message\n\nIn order to remove a message from a queue or subscription, we can call the `CompleteMessageAsync` method.\n\n```C# Snippet:ServiceBusCompleteMessage\nstring connectionString = \"<connection_string>\";\nstring queueName = \"<queue_name>\";\n// since ServiceBusClient implements IAsyncDisposable we create it with \"await using\"\nawait using var client = new ServiceBusClient(connectionString);\n\n// create the sender\nServiceBusSender sender = client.CreateSender(queueName);\n\n// create a message that we can send\nServiceBusMessage message = new ServiceBusMessage(\"Hello world!\");\n\n// send the message\nawait sender.SendMessageAsync(message);\n\n// create a receiver that we can use to receive and settle the message\nServiceBusReceiver receiver = client.CreateReceiver(queueName);\n\n// the received message is a different type as it contains some service set properties\nServiceBusReceivedMessage receivedMessage = await receiver.ReceiveMessageAsync();\n\n// complete the message, thereby deleting it from the service\nawait receiver.CompleteMessageAsync(receivedMessage);\n```\n\n### Abandon a message\n\nAbandoning a message releases our receiver's lock, which allows the message to be received by this or other receivers.\n\n```C# Snippet:ServiceBusAbandonMessage\nServiceBusReceivedMessage receivedMessage = await receiver.ReceiveMessageAsync();\n\n// abandon the message, thereby releasing the lock and allowing it to be received again by this or other receivers\nawait receiver.AbandonMessageAsync(receivedMessage);\n```\n\n### Defer a message\n\nDeferring a message will prevent it from being received again using the `ReceiveMessageAsync` or `ReceiveMessagesAsync` methods. Instead, there are separate methods, `ReceiveDeferredMessageAsync` and `ReceiveDeferredMessagesAsync` for receiving deferred messages.\n\n```C# Snippet:ServiceBusDeferMessage\nServiceBusReceivedMessage receivedMessage = await receiver.ReceiveMessageAsync();\n\n// defer the message, thereby preventing the message from being received again without using\n// the received deferred message API.\nawait receiver.DeferMessageAsync(receivedMessage);\n\n// receive the deferred message by specifying the service set sequence number of the original\n// received message\nServiceBusReceivedMessage deferredMessage = await receiver.ReceiveDeferredMessageAsync(receivedMessage.SequenceNumber);\n```\n\n### Dead letter a message\n\nDead lettering a message is similar to deferring with one main difference being that messages will be automatically dead lettered by the service after they have been received a certain number of times. Applications can choose to manually dead letter messages based on their requirements. When a message is dead lettered it is actually moved to a subqueue of the original queue. Note that the `ServiceBusReceiver` is used to receive messages from the dead letter subqueue regardless of whether or not the main queue is session-enabled.\n\n```C# Snippet:ServiceBusDeadLetterMessage\nServiceBusReceivedMessage receivedMessage = await receiver.ReceiveMessageAsync();\n\n// Dead-letter the message, thereby preventing the message from being received again without receiving from the dead letter queue.\n// We can optionally pass a dead letter reason and dead letter description to further describe the reason for dead-lettering the message.\nawait receiver.DeadLetterMessageAsync(receivedMessage, \"sample reason\", \"sample description\");\n\n// receive the dead lettered message with receiver scoped to the dead letter queue.\nServiceBusReceiver dlqReceiver = client.CreateReceiver(queueName, new ServiceBusReceiverOptions\n{\n    SubQueue = SubQueue.DeadLetter\n});\nServiceBusReceivedMessage dlqMessage = await dlqReceiver.ReceiveMessageAsync();\n\n// The reason and the description that we specified when dead-lettering the message will be available in the received dead letter message.\nstring reason = dlqMessage.DeadLetterReason;\nstring description = dlqMessage.DeadLetterErrorDescription;\n```\n\nFor more information, see the [overview of ServiceBus dead letter queues](https://learn.microsoft.com/azure/service-bus-messaging/service-bus-dead-letter-queues).\n\n### Using the Processor\n\nThe `ServiceBusProcessor` can be thought of as an abstraction around a set of receivers. It uses a callback model to allow code to be specified when a message is received and when an exception occurs. It offers automatic completion of processed messages, automatic message lock renewal, and concurrent execution of user specified event handlers. Because of its feature set, it should be the go to tool for writing applications that receive from Service Bus entities. The ServiceBusReceiver is recommended for more complex scenarios in which the processor is not able to provide the fine-grained control that one can expect when using the ServiceBusReceiver directly.\n\n```C# Snippet:ServiceBusProcessMessages\nstring connectionString = \"<connection_string>\";\nstring queueName = \"<queue_name>\";\n// since ServiceBusClient implements IAsyncDisposable we create it with \"await using\"\nawait using var client = new ServiceBusClient(connectionString);\n\n// create the sender\nServiceBusSender sender = client.CreateSender(queueName);\n\n// create a set of messages that we can send\nServiceBusMessage[] messages = new ServiceBusMessage[]\n{\n    new ServiceBusMessage(\"First\"),\n    new ServiceBusMessage(\"Second\")\n};\n\n// send the message batch\nawait sender.SendMessagesAsync(messages);\n\n// create the options to use for configuring the processor\nvar options = new ServiceBusProcessorOptions\n{\n    // By default or when AutoCompleteMessages is set to true, the processor will complete the message after executing the message handler\n    // Set AutoCompleteMessages to false to [settle messages](https://docs.microsoft.com/en-us/azure/service-bus-messaging/message-transfers-locks-settlement#peeklock) on your own.\n    // In both cases, if the message handler throws an exception without settling the message, the processor will abandon the message.\n    AutoCompleteMessages = false,\n\n    // I can also allow for multi-threading\n    MaxConcurrentCalls = 2\n};\n\n// create a processor that we can use to process the messages\nawait using ServiceBusProcessor processor = client.CreateProcessor(queueName, options);\n\n// configure the message and error handler to use\nprocessor.ProcessMessageAsync += MessageHandler;\nprocessor.ProcessErrorAsync += ErrorHandler;\n\nasync Task MessageHandler(ProcessMessageEventArgs args)\n{\n    string body = args.Message.Body.ToString();\n    Console.WriteLine(body);\n\n    // we can evaluate application logic and use that to determine how to settle the message.\n    await args.CompleteMessageAsync(args.Message);\n}\n\nTask ErrorHandler(ProcessErrorEventArgs args)\n{\n    // the error source tells me at what point in the processing an error occurred\n    Console.WriteLine(args.ErrorSource);\n    // the fully qualified namespace is available\n    Console.WriteLine(args.FullyQualifiedNamespace);\n    // as well as the entity path\n    Console.WriteLine(args.EntityPath);\n    Console.WriteLine(args.Exception.ToString());\n    return Task.CompletedTask;\n}\n\n// start processing\nawait processor.StartProcessingAsync();\n\n// since the processing happens in the background, we add a Console.ReadKey to allow the processing to continue until a key is pressed.\nConsole.ReadKey();\n```\n\n### Authenticating with Azure.Identity\n\nThe [Azure Identity library](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/identity/Azure.Identity/README.md) provides easy Azure Active Directory support for authentication.\n\n```C# Snippet:ServiceBusAuthAAD\n// Create a ServiceBusClient that will authenticate through Active Directory\nstring fullyQualifiedNamespace = \"yournamespace.servicebus.windows.net\";\nawait using var client = new ServiceBusClient(fullyQualifiedNamespace, new DefaultAzureCredential());\n```\n\n### Registering with ASP.NET Core dependency injection\n\nTo inject `ServiceBusClient` as a dependency in an ASP.NET Core app, install the Azure client library integration for ASP.NET Core package.\n\n```dotnetcli\ndotnet add package Microsoft.Extensions.Azure\n```\n\nThen register the client in the `Startup.ConfigureServices` method:\n\n```csharp\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddAzureClients(builder =>\n    {\n        builder.AddServiceBusClient(Configuration.GetConnectionString(\"ServiceBus\"));\n    });\n  \n    services.AddControllers();\n}\n```\n\nTo use the preceding code, add this to the configuration for your application:\n\n```json\n{\n  \"ConnectionStrings\": {\n    \"ServiceBus\": \"<connection_string>\"\n  }\n}\n```\n\nFor applications that prefer using a shared `Azure.Identity` credential for their clients, registration looks slightly different:\n\n```csharp\nvar fullyQualifiedNamespace = \"yournamespace.servicebus.windows.net\";\n\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddAzureClients(builder =>\n    {\n        // This will register the ServiceBusClient using the default credential.\n        builder.AddServiceBusClientWithNamespace(fullyQualifiedNamespace);\n\n        // By default, DefaultAzureCredential is used, which is likely desired for most\n        // scenarios. If you need to restrict to a specific credential instance, you could\n        // register that instance as the default credential instead.\n        builder.UseCredential(new ManagedIdentityCredential());\n    });\n  \n    services.AddControllers();\n}\n```\n\nFor more details, see [Dependency injection with the Azure SDK for .NET](https://docs.microsoft.com/dotnet/azure/sdk/dependency-injection).\n\n### Working with Sessions\n\n[Sessions](https://docs.microsoft.com/azure/service-bus-messaging/message-sessions) provide a mechanism for grouping related messages. In order to use sessions, you need to be working with a session-enabled entity.\n\n- [Sending and receiving session messages](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/servicebus/Azure.Messaging.ServiceBus/samples/Sample03_SendReceiveSessions.md)\n- [Using the session processor](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/servicebus/Azure.Messaging.ServiceBus/samples/Sample05_SessionProcessor.md)\n\n## Troubleshooting\n\nPlease refer to the [Service Bus Troubleshooting Guide](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/servicebus/Azure.Messaging.ServiceBus/TROUBLESHOOTING.md).\n\n## Next steps\n\nBeyond the introductory scenarios discussed, the Azure Service Bus client library offers support for additional scenarios to help take advantage of the full feature set of the Azure Service Bus service. In order to help explore some of these scenarios, the Service Bus client library offers a project of samples to serve as an illustration for common scenarios. Please see the [samples README](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/servicebus/Azure.Messaging.ServiceBus/samples/README.md) for details.\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\nPlease see our [contributing guide](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/servicebus/Azure.Messaging.ServiceBus/CONTRIBUTING.md) for more information.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2Fsdk%2Fservicebus%2FAzure.Messaging.ServiceBus%2FREADME.png)\n",
        "repo_name": "servicebus/Azure.Messaging.ServiceBus",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/servicebus/Azure.Messaging.ServiceBus",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Service Bus management client library for .NET\n\nMicrosoft Azure Service Bus is a fully managed enterprise message broker with message queues and publish-subscribe topics (in a namespace). \n\nThis library supports managing Microsoft Azure Service Bus resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Service Bus management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.ServiceBus\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\n### Create a namespace\n\nBefore creating a namespace, we need to have a resource group.\n\n```C# Snippet:Managing_ServiceBusNamespaces_GetSubscription\nArmClient armClient = new ArmClient(new DefaultAzureCredential());\nSubscriptionResource subscription = await armClient.GetDefaultSubscriptionAsync();\n```\n```C# Snippet:Managing_ServiceBusNamespaces_CreateResourceGroup\nstring rgName = \"myRgName\";\nAzureLocation location = AzureLocation.WestUS2;\nArmOperation<ResourceGroupResource> operation = await subscription.GetResourceGroups().CreateOrUpdateAsync(WaitUntil.Completed, rgName, new ResourceGroupData(location));\nResourceGroupResource resourceGroup = operation.Value;\n```\n\nThen we can create a namespace inside this resource group.\n\n```C# Snippet:Managing_ServiceBusNamespaces_CreateNamespace\nstring namespaceName = \"myNamespace\";\nServiceBusNamespaceCollection namespaceCollection = resourceGroup.GetServiceBusNamespaces();\nAzureLocation location = AzureLocation.EastUS2;\nServiceBusNamespaceResource serviceBusNamespace = (await namespaceCollection.CreateOrUpdateAsync(WaitUntil.Completed, namespaceName, new ServiceBusNamespaceData(location))).Value;\n```\n\n### Get all namespaces in a resource group\n\n```C# Snippet:Managing_ServiceBusNamespaces_ListNamespaces\nServiceBusNamespaceCollection namespaceCollection = resourceGroup.GetServiceBusNamespaces();\nawait foreach (ServiceBusNamespaceResource serviceBusNamespace in namespaceCollection.GetAllAsync())\n{\n    Console.WriteLine(serviceBusNamespace.Id.Name);\n}\n```\n\n### Get a namespace\n\n```C# Snippet:Managing_ServiceBusNamespaces_GetNamespace\nServiceBusNamespaceCollection namespaceCollection = resourceGroup.GetServiceBusNamespaces();\nServiceBusNamespaceResource serviceBusNamespace = await namespaceCollection.GetAsync(\"myNamespace\");\nConsole.WriteLine(serviceBusNamespace.Id.Name);\n```\n\n### Delete a namespace\n```C# Snippet:Managing_ServiceBusNamespaces_DeleteNamespace\nServiceBusNamespaceCollection namespaceCollection = resourceGroup.GetServiceBusNamespaces();\nServiceBusNamespaceResource serviceBusNamespace = await namespaceCollection.GetAsync(\"myNamespace\");\nawait serviceBusNamespace.DeleteAsync(WaitUntil.Completed);\n```\n\nMore code samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "servicebus/Azure.ResourceManager.ServiceBus",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/servicebus/Azure.ResourceManager.ServiceBus",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Service Bus client library for .NET\n\n> Please be aware that a newer package, [Azure.Messaging.ServiceBus](https://www.nuget.org/packages/Azure.Messaging.ServiceBus) is available as of November 2020. While this package will continue to receive critical bug fixes, we strongly encourage upgrading for new development. Please see the [migration guide](https://aka.ms/azsdk/net/migrate/sb) for more details.\n\nAzure Service Bus allows you to build applications that take advantage of asynchronous messaging patterns using a highly-reliable service to broker messages between producers and consumers. Azure Service Bus provides flexible, brokered messaging between client and server, along with structured first-in, first-out (FIFO) messaging, and publish/subscribe capabilities with complex routing.\n\nThis directory contains the open source subset of the .NET SDK. For documentation of the complete Azure SDK, please see the [Microsoft Azure .NET Developer Center](https://azure.microsoft.com/develop/net/).\n\nUse the client library for Azure Service Bus to:\n\n- Transfer business data: leverage messaging for durable exchange of information, such as sales or purchase orders, journals, or inventory movements.\n\n- Decouple applications: improve reliability and scalability of applications and services, relieving senders and receivers of the need to be online at the same time.\n\n- Control how messages are processed: support traditional competing consumers for messages using queues or allow each consumer their own instance of a message using topics and subscriptions.\n\n- Implement complex workflows: message sessions support scenarios that require message ordering or message deferral.\n\n[Source code](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/servicebus/Microsoft.Azure.ServiceBus/src) | [Package (NuGet)](https://www.nuget.org/packages/Microsoft.Azure.ServiceBus/) | [API reference documentation](https://docs.microsoft.com/dotnet/api/overview/azure/service-bus?view=azure-dotnet) | [Product documentation](https://docs.microsoft.com/azure/service-bus-messaging/)\n\n## Getting started\n\nThe complete Microsoft Azure SDK can be downloaded from the [Microsoft Azure Downloads Page](https://azure.microsoft.com/downloads/?sdk=net) and ships with support for building deployment packages, integrating with tooling, rich command line tooling, and more.\n\nIf you are not already familiar with Azure Service Bus, please review: [What is Azure Service Bus](https://docs.microsoft.com/azure/service-bus-messaging/service-bus-messaging-overview).\n\nFor the best development experience, developers should use the official Microsoft NuGet packages for libraries. NuGet packages are regularly updated with new functionality and hotfixes.\n\n## Prerequisites\n\n- Microsoft Azure Subscription: To call Microsoft Azure services, including Azure Service Bus, you need to first [create an account](https://account.windowsazure.com/Home/Index). If you do not have an existing Azure account, you may sign up for a free trial or use your MSDN subscriber benefits.\n\n- The Azure Service Bus client library shares the same [Prerequisites](https://github.com/azure/azure-sdk-for-net#prerequisites) as the Microsoft Azure SDK for .NET.\n\n## Samples\n\nCode samples for the Azure Service Bus client library that detail how to get started and how to implement common scenarios can be found in the following locations:\n\n- [Azure Code Samples](https://azure.microsoft.com/resources/samples/?sort=0&service=service-bus&platform=dotnet)\n- [Azure Service Bus Sample Repository](https://github.com/Azure/azure-service-bus/tree/master/samples/)\n- [Azure Service Bus Documentation](https://docs.microsoft.com/azure/service-bus-messaging/)\n\n## To build\n\nFor information on building the Azure Service bus client library, please see [Building the Microsoft Azure SDK for .NET](https://github.com/azure/azure-sdk-for-net#to-build)\n\n## Running tests\n\n1. Deploy the Azure Resource Manager template located at [sdk/servicebus/Microsoft.Azure.ServiceBus/assets/azure-deploy-test-dependencies.json](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/servicebus/Microsoft.Azure.ServiceBus/assets/azure-deploy-test-dependencies.json) by clicking the following button:\n\n   <a href=\"https://portal.azure.com/#create/Microsoft.Template/uri/https%3A%2F%2Fraw.githubusercontent.com%2FAzure%2Fazure-sdk-for-net%2Fmaster%2Fsdk%2Fservicebus%2FMicrosoft.Azure.ServiceBus%2Fassets%2Fazure-deploy-test-dependencies.json\" target=\"_blank\">\n       <img src=\"https://aka.ms/deploytoazurebutton\"/>\n   </a>\n\n   *Running the above template will provision a standard Service Bus namespace along with the required entities to successfully run the unit tests.*\n\n1. Add an Environment Variable named `SERVICE_BUS_CONNECTION_STRING` and set the value as the connection string of the newly created namespace. **Please note that if you are using Visual Studio, you must restart Visual Studio in order to use new Environment Variables.**\n\nOnce you have completed the above, you can run `dotnet test` from the `/sdk/servicebus/Microsoft.Azure.ServiceBus/tests` directory.\n\n## Development history\n\nFor additional insight and context, the development, release, and issue history for the Azure Service Bus client library will continue to be available in read-only form, located in the stand-alone [Azure Service Bus .NET repository](https://github.com/Azure/azure-service-bus-dotnet).\n\n## Versioning information\n\nThe Azure Service Bus client library uses [the semantic versioning scheme](https://semver.org/).\n\n## Target frameworks\n\nFor information about the target frameworks of the Azure Service Bus client library, please refer to the [Target Frameworks](https://github.com/azure/azure-sdk-for-net#target-frameworks) of the Microsoft Azure SDK for .NET.\n\n## Contributing\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\n## Additional documentation\n\n- [Azure Service Bus General Documentation](https://docs.microsoft.com/azure/service-bus-messaging/)\n- [Azure Service Bus REST API Reference](https://docs.microsoft.com/rest/api/servicebus/)\n- [Azure Service Bus SDK for .NET Documentation](https://docs.microsoft.com/dotnet/api/overview/azure/service-bus?view=azure-dotnet)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2Fsdk%2Fservicebus%2FMicrosoft.Azure.ServiceBus%2FREADME.png)\n",
        "repo_name": "servicebus/Microsoft.Azure.ServiceBus",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/servicebus/Microsoft.Azure.ServiceBus",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure WebJobs Service Bus client library for .NET\n\nThis extension provides functionality for accessing Azure Service Bus from an Azure Function.\n\n## Getting started\n\n### Install the package\n\nInstall the Service Bus extension with [NuGet](https://www.nuget.org/packages/Microsoft.Azure.WebJobs.Extensions.ServiceBus/):\n\n```dotnetcli\ndotnet add package Microsoft.Azure.WebJobs.Extensions.ServiceBus\n```\n\n### Prerequisites\n\n- **Azure Subscription:**  To use Azure services, including Azure Service Bus, you'll need a subscription.  If you do not have an existing Azure account, you may sign up for a [free trial](https://azure.microsoft.com/free/dotnet/) or use your [Visual Studio Subscription](https://visualstudio.microsoft.com/subscriptions/) benefits when you [create an account](https://azure.microsoft.com/account).\n\n- **Service Bus namespace:** To interact with Azure Service Bus, you'll also need to have a namespace available. If you are not familiar with creating Azure resources, you may wish to follow the step-by-step guide for creating a Service Bus namespace using the Azure portal. There, you can also find detailed instructions for using the Azure CLI, Azure PowerShell, or Azure Resource Manager (ARM) templates to create a Service bus entity.\n\nTo quickly create the needed Service Bus resources in Azure and to receive a connection string for them, you can deploy our sample template by clicking:\n\n[![Deploy to Azure](https://aka.ms/deploytoazurebutton)](https://portal.azure.com/#create/Microsoft.Template/uri/https%3A%2F%2Fraw.githubusercontent.com%2FAzure%2Fazure-sdk-for-net%2Fmaster%2Fsdk%2Fservicebus%2FAzure.Messaging.ServiceBus%2Fassets%2Fsamples-azure-deploy.json)\n\n\n### Authenticate the Client\n\nFor the Service Bus client library to interact with a queue or topic, it will need to understand how to connect and authorize with it.  The easiest means for doing so is to use a connection string, which is created automatically when creating a Service Bus namespace.  If you aren't familiar with shared access policies in Azure, you may wish to follow the step-by-step guide to [get a Service Bus connection string](https://docs.microsoft.com/azure/service-bus-messaging/service-bus-quickstart-topics-subscriptions-portal#get-the-connection-string).\n\nThe `Connection` property of `ServiceBusAttribute` and `ServiceBusTriggerAttribute` is used to specify the configuration property that stores the connection string. If not specified, the property `AzureWebJobsServiceBus` is expected to contain the connection string.\n\nFor local development, use the `local.settings.json` file to store the connection string:\n\n```json\n{\n  \"Values\": {\n    \"<connection_name>\": \"Endpoint=sb://<service_bus_namespace>.servicebus.windows.net/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=<access key>\"\n  }\n}\n```\n\nWhen deployed, use the [application settings](https://docs.microsoft.com/azure/azure-functions/functions-how-to-use-azure-function-app-settings) to set the connection string.\n\n#### Identity-based authentication\n\nIf your environment has [managed identity](https://docs.microsoft.com/azure/app-service/overview-managed-identity?tabs=dotnet) enabled you can use it to authenticate the Service Bus extension. Before doing so, you will need to ensure that permissions have been configured as described in the [Azure Functions developer guide](https://docs.microsoft.com/azure/azure-functions/functions-reference#grant-permission-to-the-identity).\nTo use identity-based authentication provide the `<connection_name>__fullyQualifiedNamespace` configuration setting.\n\n```json\n{\n  \"Values\": {\n    \"AzureWebJobsStorage\": \"UseDevelopmentStorage=true\",\n    \"<connection_name>__fullyQualifiedNamespace\": \"<service_bus_namespace>.servicebus.windows.net\"\n  }\n}\n```\n\nOr in the case of deployed app set the same setting in [application settings](https://docs.microsoft.com/azure/azure-functions/functions-how-to-use-azure-function-app-settings):\n\n```\n<connection_name>__fullyQualifiedNamespace=<service_bus_namespace>.servicebus.windows.net\n```\n\nMore details about configuring an identity-based connection can be found [here](https://learn.microsoft.com/azure/azure-functions/functions-reference?tabs=blob#configure-an-identity-based-connection).\n\n## Key concepts\n\n### Service Bus Trigger\n\nThe Service Bus Trigger allows a function to be executed when a message is sent to a Service Bus queue or topic.\n\nPlease follow the [Azure Service Bus trigger tutorial](https://docs.microsoft.com/azure/azure-functions/functions-bindings-service-bus-trigger?tabs=csharp) to learn more about Service Bus triggers.\n\n### Service Bus Output Binding\n\nThe Service Bus Output Binding allows a function to send Service Bus messages.\n\nPlease follow the [Azure Service Bus output binding](https://docs.microsoft.com/azure/azure-functions/functions-bindings-service-bus-output?tabs=csharp) to learn more about Service Bus bindings.\n\n## Examples\n\n### Sending individual messages\n\nYou can send individual messages to a queue or topic by applying the `ServiceBus` attribute to the function return value. The return value can be of type `string`, `byte[]`, or `ServiceBusMessage`.\n```C# Snippet:ServiceBusBindingToReturnValue\n[FunctionName(\"BindingToReturnValue\")]\n[return: ServiceBus(\"<queue_or_topic_name>\", Connection = \"<connection_name>\")]\npublic static string BindToReturnValue([TimerTrigger(\"0 */5 * * * *\")] TimerInfo myTimer)\n{\n    // This value would get stored in Service Bus message body.\n    // The string would be UTF8 encoded.\n    return $\"C# Timer trigger function executed at: {DateTime.Now}\";\n}\n```\n\nYou can also use an `out` parameter of type `string`, `byte[]`, or `ServiceBusMessage`.\n```C# Snippet:ServiceBusBindingToOutputParameter\n[FunctionName(\"BindingToOutputParameter\")]\npublic static void Run(\n[TimerTrigger(\"0 */5 * * * *\")] TimerInfo myTimer,\n[ServiceBus(\"<queue_or_topic_name>\", Connection = \"<connection_name>\")] out ServiceBusMessage message)\n{\n    message = new ServiceBusMessage($\"C# Timer trigger function executed at: {DateTime.Now}\");\n}\n```\n\n### Sending multiple messages\n\nTo send multiple messages from a single Azure Function invocation you can apply the `ServiceBus` attribute to the `IAsyncCollector<string>` or `IAsyncCollector<ServiceBusReceivedMessage>` parameter.\n```C# Snippet:ServiceBusBindingToCollector\n[FunctionName(\"BindingToCollector\")]\npublic static async Task Run(\n    [TimerTrigger(\"0 */5 * * * *\")] TimerInfo myTimer,\n    [ServiceBus(\"<queue_or_topic_name>\", Connection = \"<connection_name>\")] IAsyncCollector<ServiceBusMessage> collector)\n{\n    // IAsyncCollector allows sending multiple messages in a single function invocation\n    await collector.AddAsync(new ServiceBusMessage(new BinaryData($\"Message 1 added at: {DateTime.Now}\")));\n    await collector.AddAsync(new ServiceBusMessage(new BinaryData($\"Message 2 added at: {DateTime.Now}\")));\n}\n```\n\n### Using binding to strongly-typed models\n\nTo use strongly-typed model classes with the ServiceBus binding apply the `ServiceBus` attribute to the model parameter. Doing so will attempt to deserialize the `ServiceBusMessage.Body`into the strongly-typed model.\n```C# Snippet:ServiceBusTriggerSingleModel\n[FunctionName(\"TriggerSingleModel\")]\npublic static void Run(\n    [ServiceBusTrigger(\"<queue_name>\", Connection = \"<connection_name>\")] Dog dog,\n    ILogger logger)\n{\n    logger.LogInformation($\"Who's a good dog? {dog.Name} is!\");\n}\n```\n\n### Sending multiple messages using ServiceBusSender\n\nYou can also bind to the `ServiceBusSender` directly to have the most control over message sending.\n```C# Snippet:ServiceBusBindingToSender\n[FunctionName(\"BindingToSender\")]\npublic static async Task Run(\n    [TimerTrigger(\"0 */5 * * * *\")] TimerInfo myTimer,\n    [ServiceBus(\"<queue_or_topic_name>\", Connection = \"<connection_name>\")] ServiceBusSender sender)\n{\n    await sender.SendMessagesAsync(new[]\n    {\n        new ServiceBusMessage(new BinaryData($\"Message 1 added at: {DateTime.Now}\")),\n        new ServiceBusMessage(new BinaryData($\"Message 2 added at: {DateTime.Now}\"))\n    });\n}\n```\n\n### Per-message triggers\n\nTo run a function every time a message is sent to a Service Bus queue or subscription apply the `ServiceBusTrigger` attribute to a `string`, `byte[]`, or `ServiceBusReceivedMessage` parameter.\n```C# Snippet:ServiceBusTriggerSingle\n[FunctionName(\"TriggerSingle\")]\npublic static void Run(\n    [ServiceBusTrigger(\"<queue_name>\", Connection = \"<connection_name>\")] string messageBodyAsString,\n    ILogger logger)\n{\n    logger.LogInformation($\"C# function triggered to process a message: {messageBodyAsString}\");\n}\n```\n\n### Batch triggers\n\nTo run a function for a batch of received messages apply the `ServiceBusTrigger` attribute to a `string[]`, or `ServiceBusReceivedMessage[]` parameter.\n```C# Snippet:ServiceBusTriggerBatch\n[FunctionName(\"TriggerBatch\")]\npublic static void Run(\n    [ServiceBusTrigger(\"<queue_name>\", Connection = \"<connection_name>\")] ServiceBusReceivedMessage[] messages,\n    ILogger logger)\n{\n    foreach (ServiceBusReceivedMessage message in messages)\n    {\n        logger.LogInformation($\"C# function triggered to process a message: {message.Body}\");\n        logger.LogInformation($\"EnqueuedTime={message.EnqueuedTime}\");\n    }\n}\n```\n\n### Message settlement\n\nYou can configure messages to be automatically completed after your function executes using the `ServiceBusOptions`. If you want more control over message settlement, you can bind to the `MessageActions` with both per-message and batch triggers.\n```C# Snippet:ServiceBusBindingToMessageActions\n[FunctionName(\"BindingToMessageActions\")]\npublic static async Task Run(\n    [ServiceBusTrigger(\"<queue_name>\", Connection = \"<connection_name>\")]\n    ServiceBusReceivedMessage[] messages,\n    ServiceBusMessageActions messageActions)\n{\n    foreach (ServiceBusReceivedMessage message in messages)\n    {\n        if (message.MessageId == \"1\")\n        {\n            await messageActions.DeadLetterMessageAsync(message);\n        }\n        else\n        {\n            await messageActions.CompleteMessageAsync(message);\n        }\n    }\n}\n```\n\n### Session triggers\n\nTo receive messages from a session enabled queue or topic, you can set the `IsSessionsEnabled`\nproperty on the `ServiceBusTrigger` attribute. When working with sessions, you can bind to the `SessionMessageActions` to get access to the message settlement methods in addition to session-specific functionality.\n\n```C# Snippet:ServiceBusBindingToSessionMessageActions\n[FunctionName(\"BindingToSessionMessageActions\")]\npublic static async Task Run(\n    [ServiceBusTrigger(\"<queue_name>\", Connection = \"<connection_name>\", IsSessionsEnabled = true)]\n    ServiceBusReceivedMessage[] messages,\n    ServiceBusSessionMessageActions sessionActions)\n{\n    foreach (ServiceBusReceivedMessage message in messages)\n    {\n        if (message.MessageId == \"1\")\n        {\n            await sessionActions.DeadLetterMessageAsync(message);\n        }\n        else\n        {\n            await sessionActions.CompleteMessageAsync(message);\n        }\n    }\n\n    // We can also perform session-specific operations using the actions, such as setting state that is specific to this session.\n    await sessionActions.SetSessionStateAsync(new BinaryData(\"<session state>\"));\n}\n```\n\n### Binding to ReceiveActions\n\nIt's possible to receive additional messages from within your function invocation. This may be useful if you need more control over how many messages to process within a function invocation based on some characteristics of the initial message delivered to your function via the binding parameter. Any additional messages that you receive will be subject to the same `AutoCompleteMessages` and `MaxAutoLockRenewalDuration` configuration as the initial message delivered to your function. It is also possible to peek messages. Peeked messages are not subject to the `AutoCompleteMessages` and `MaxAutoLockRenewalDuration` configuration as these messages are not locked and therefore cannot be completed.\n\n```C# Snippet:ServiceBusBindingToReceiveActions\n[FunctionName(\"BindingToReceiveActions\")]\npublic static async Task Run(\n    [ServiceBusTrigger(\"<queue_name>\", Connection = \"<connection_name>\", IsSessionsEnabled = true)]\n    ServiceBusReceivedMessage message,\n    ServiceBusMessageActions messageActions,\n    ServiceBusReceiveActions receiveActions)\n{\n    if (message.MessageId == \"1\")\n    {\n        await messageActions.DeadLetterMessageAsync(message);\n    }\n    else\n    {\n        await messageActions.CompleteMessageAsync(message);\n\n        // attempt to receive additional messages in this session\n        var receivedMessages = await receiveActions.ReceiveMessagesAsync(maxMessages: 10);\n\n        // you can also use the receive actions to peek messages\n        var peekedMessages = await receiveActions.PeekMessagesAsync(maxMessages: 10);\n    }\n}\n```\n\n### Binding to ServiceBusClient\n\nThere may be times when you want to bind to the same `ServiceBusClient` that the trigger is using. This can be useful if you need to dynamically create a sender based on the message that is received.\n\n```C# Snippet:ServiceBusBindingToClient\n[FunctionName(\"BindingToClient\")]\npublic static async Task Run(\n    [ServiceBus(\"<queue_or_topic_name>\", Connection = \"<connection_name>\")]\n    ServiceBusReceivedMessage message,\n    ServiceBusClient client)\n{\n    ServiceBusSender sender = client.CreateSender(message.To);\n    await sender.SendMessageAsync(new ServiceBusMessage(message));\n}\n```\n\n## Troubleshooting\n\nIf your function triggers an unhandled exception and you haven't already settled the message, the extension will attempt to abandon the message so that it becomes available for receiving again immediately.\n\nPlease refer to [Monitor Azure Functions](https://docs.microsoft.com/azure/azure-functions/functions-monitoring) for more troubleshooting guidance.\n\n## Next steps\n\nRead the [introduction to Azure Functions](https://docs.microsoft.com/azure/azure-functions/functions-overview) or [creating an Azure Function guide](https://docs.microsoft.com/azure/azure-functions/functions-create-first-azure-function).\n\n## Contributing\n\nSee our [CONTRIBUTING.md][contrib] for details on building,\ntesting, and contributing to this library.\n\nThis project welcomes contributions and suggestions.  Most contributions require\nyou to agree to a Contributor License Agreement (CLA) declaring that you have\nthe right to, and actually do, grant us the rights to use your contribution. For\ndetails, visit [cla.microsoft.com][cla].\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc].\nFor more information see the [Code of Conduct FAQ][coc_faq]\nor contact [opencode@microsoft.com][coc_contact] with any\nadditional questions or comments.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2Fsdk%2Fservicebus%2FMicrosoft.Azure.WebJobs.Extensions.ServiceBus%2FREADME.png)\n\n<!-- LINKS -->\n[source]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/servicebus/Microsoft.Azure.WebJobs.Extensions.ServiceBus/src\n[package]: https://www.nuget.org/packages/Microsoft.Azure.WebJobs.Extensions.ServiceBus/\n[docs]: https://docs.microsoft.com/dotnet/api/Microsoft.Azure.WebJobs.Extensions.ServiceBus\n[nuget]: https://www.nuget.org/\n\n[contrib]: https://github.com/Azure/azure-sdk-for-net/tree/main/CONTRIBUTING.md\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n",
        "repo_name": "servicebus/Microsoft.Azure.WebJobs.Extensions.ServiceBus",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/servicebus/Microsoft.Azure.WebJobs.Extensions.ServiceBus",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Service Fabric management client library for .NET\n\nMicrosoft Azure Service Fabric is a distributed systems platform that makes it easy to package, deploy, and manage scalable and reliable microservices and containers. Service Fabric also addresses the significant challenges in developing and managing cloud native applications.\n\nThis library supports managing Microsoft Azure Service Fabric resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Service Fabric management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.ServiceFabric\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "servicefabric/Azure.ResourceManager.ServiceFabric",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/servicefabric/Azure.ResourceManager.ServiceFabric",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Service Fabric Managed Clusters management client library for .NET\n\nMicrosoft Azure Service Fabric managed clusters are an evolution of the Azure Service Fabric cluster resource model that streamlines your deployment and cluster management experience.\n\nThis library supports managing Microsoft Azure Service Fabric Managed Clusters resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Service Fabric Managed Clusters management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.ServiceFabricManagedClusters\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "servicefabricmanagedclusters/Azure.ResourceManager.ServiceFabricManagedClusters",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/servicefabricmanagedclusters/Azure.ResourceManager.ServiceFabricManagedClusters",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Service Connector management client library for .NET\n\nMicrosoft Azure Service Connector helps you connect Azure compute services to other backing services. This service configures the network settings and connection information (for example, generating environment variables) between compute services and target backing services in management plane. Developers use their preferred SDK or library that consumes the connection information to do data plane operations against the target backing service.\n\nThis library supports managing Microsoft Azure Service Connector resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Service Connector management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.ServiceLinker\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "servicelinker/Azure.ResourceManager.ServiceLinker",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/servicelinker/Azure.ResourceManager.ServiceLinker",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure ServiceNetworking management client library for .NET\n\nMicrosoft Azure Service Networking provides managing of following fully managed azure services:\n\n- Traffic Controller: Fully managed Azure Service which provides L7 Load Balancing and Dynamic Traffic Management capabilities for container workloads. Traffic Controller extends Azure's L7 Load Balancing portfolio and is offered as new SKU under Application Gateway product family.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure ServiceNetworking management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.ServiceNetworking --prerelease\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html)\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "servicenetworking/Azure.ResourceManager.ServiceNetworking",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/servicenetworking/Azure.ResourceManager.ServiceNetworking",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure SignalR management client library for .NET\n\nMicrosoft Azure SignalR Service simplifies the process of adding real-time web functionality to applications over HTTP. This real-time functionality allows the service to push content updates to connected clients, such as a single page web or mobile application.\n\nThis library supports managing Microsoft Azure SignalR resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure SignalR management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.SignalR\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "signalr/Azure.ResourceManager.SignalR",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/signalr/Azure.ResourceManager.SignalR",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure WebJobs SignalR Service client library for .NET\n\nThis extension provides functionality for accessing [Azure SignalR Service](https://aka.ms/signalr_service) from an Azure Function.\n\n## Getting started\n\n### Install the package\n\nInstall the SignalR Service client with [NuGet](https://www.nuget.org/packages/Microsoft.Azure.WebJobs.Extensions.SignalRService/):\n\n```dotnetcli\ndotnet add package Microsoft.Azure.WebJobs.Extensions.SignalRService\n```\n\n### Prerequisites\n\n- **Azure Subscription:**  To use Azure services, including Azure SignalR Service, you'll need a subscription.  If you do not have an existing Azure account, you may sign up for a [free trial](https://azure.microsoft.com/free/dotnet/) or use your [Visual Studio Subscription](https://visualstudio.microsoft.com/subscriptions/) benefits when you [create an account](https://account.windowsazure.com/Home/Index).\n\n- **Azure SignalR resource:** To use SignalR Service client library you'll also need a Azure SignalR resource. If you are not familiar with creating Azure resources, you may wish to follow the step-by-step guide for creating a SignalR resource using the Azure portal. There, you can also find detailed instructions for using the Azure CLI, Azure PowerShell, or Azure Resource Manager (ARM) templates to create a SignalR resource.\n\n    To quickly create the needed SignalR resource in Azure and to receive a connection string for them, you can deploy our sample template by clicking:\n\n    [![Deploy to Azure](https://aka.ms/deploytoazurebutton)](https://portal.azure.com/#create/Microsoft.Template/uri/https%3a%2f%2fraw.githubusercontent.com%2fAzure%2fazure-quickstart-templates%2fmaster%2fquickstarts%2fmicrosoft.signalrservice%2fsignalr%2fazuredeploy.json)\n\n    After the instance is deployed, open it in the portal and locate its Settings page. Change the Service Mode setting to *Serverless*.\n\n    ![SignalR Service mode setting](images/signalr-service-mode.png)\n\n### Authenticate the client\n\nIn order for SignalR Service client to access SignalR resource, it will need to understand how to authenticate with it. The easiest means for doing so is to use a connection string which can be found in the [Azure Portal](https://portal.azure.com/) or by using the [Azure CLI](https://docs.microsoft.com/cli/azure) / [Azure PowerShell](https://docs.microsoft.com/powershell/azure/) snippet below.\n\nAzure CLI snippet:\n```bash\naz signalr key list -n <your-resource-name> -g <your-resource-group-name> --query primaryKey -o tsv\n```\n\nAzure PowerShell snippet:\n```Powershell\nGet-AzSignalRKey -ResourceGroupName <your-resource-name> -Name <your-resource-name>\n```\n\nThe `ConnectionStringSetting` property of SignalR bindings (including `SignalRAttribute`, `SignalRConnectionInfoAttribute`, `SignalRTriggerAttribute` etc.) is used to specify the configuration property that stores the connection string. If not specified, the property `AzureSignalRConnectionString` is expected to contain the connection string.\n\nFor local development, use the `local.settings.json` file to store the connection string:\n\n```json\n{\n  \"Values\": {\n    \"<connection_name>\": \"<connection-string>\"\n  }\n}\n```\n\nWhen deployed, use the [application settings](https://docs.microsoft.com/azure/azure-functions/functions-how-to-use-azure-function-app-settings) to set the connection string.\n\n<!--TODO#### Identity-based Will reference a ms doc link once it is ready-->\n\n## Key concepts\n\n### SignalR **Service** client vs SignalR client\nSignalR **Service** client\n: It means this library. It provides *SignalR server* functionalities in a serverless style.\n\nSignalR client\n: An opposite concept of *SignalR server*. See [ASP.NET Core SignalR clients](https://docs.microsoft.com/aspnet/core/signalr/client-features) for more information.\n\n### SignalR connection info input binding\n\n`SignalRConnectionInfo` input binding makes it easy to generate the token required for SignalR clients to initiate a connection to Azure SignalR Service.\n\nPlease follow the [Azure SignalR Connection Info input binding tutorial](https://docs.microsoft.com/azure/azure-functions/functions-bindings-signalr-service-input?tabs=csharp) to learn more about SignalR Connection Info input binding.\n\n### SignalR output binding\n\n`SignalR` output binding allows :\n* send messages to all connections, to a connection, to a user, to a group.\n* add/remove connections/users in a group.\n\nPlease follow the [Azure SignalR output binding](https://docs.microsoft.com/azure/azure-functions/functions-bindings-signalr-service-output?tabs=csharp) to learn more about SignalR output binding.\n\n### SignalR trigger\n\nThe SignalR trigger allows a function to be executed when a message is sent to Azure SignalR Service.\n\nPlease follow the [Azure SignalR trigger](https://docs.microsoft.com/azure/azure-functions/functions-bindings-signalr-service-trigger?tabs=csharp) to learn more about SignalR trigger.\n\n## Supported scenarios\n- Negotiate for a SignalR client.\n- Manage group like add/remove a single user/connection in a group.\n- Send messages to a single user/connection, to a group, to all users/connections.\n- Use multiple Azure SignalR Service instances for resiliency and disaster recovery in Azure Functions. See details in [Multiple Azure SignalR Service Instances Support in Azure Functions](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/signalr/Microsoft.Azure.WebJobs.Extensions.SignalRService/docs/sharding.md).\n\n## Examples\n\n### Negotiation for SignalR client\n\nIn order for a client to connect to SignalR, it needs to obtain the SignalR client hub URL and an access token. We call the process as \"negotiation\".\n\n```C# Snippet:BasicNegotiate\n[FunctionName(\"Negotiate\")]\npublic static SignalRConnectionInfo Negotiate(\n    [HttpTrigger(AuthorizationLevel.Anonymous)] HttpRequest req,\n    [SignalRConnectionInfo(HubName = \"<hub_name>\", UserId = \"<user_id>\")] SignalRConnectionInfo connectionInfo)\n{\n    return connectionInfo;\n}\n```\n\n### Broadcast individual messages\n\nTo broadcast messages to all the connections in a hub from a single Azure Function invocation you can apply the `SignalR` attribute to the function return value. The return value should be of type `SignalRMessage`.\n\n```C# Snippet:SendMessageWithReturnValueBinding\n[FunctionName(\"sendOneMessageWithReturnValueBinding\")]\n[return: SignalR(HubName = \"<hub_name>\")]\npublic static SignalRMessage SendMessage(\n    [HttpTrigger(AuthorizationLevel.Anonymous, \"post\")] HttpRequest req)\n{\n    return new SignalRMessage\n    {\n        Target = \"<target>\",\n        Arguments = new[] { \"<here_can_be_multiple_objects>\" }\n    };\n}\n```\n\nYou can also use an `out` parameter of type `SignalRMessage`.\n```C# Snippet:SendMessageWithOutParameterBinding\n[FunctionName(\"messages\")]\npublic static void SendMessage(\n    [HttpTrigger(AuthorizationLevel.Anonymous, \"post\")] HttpRequest req, [SignalR(HubName = \"<hub_name>\")] out SignalRMessage message)\n{\n    message = new SignalRMessage\n    {\n        Target = \"<target>\",\n        Arguments = new[] { \"<here_can_be_multiple_objects>\" }\n    };\n}\n```\n### Broadcast multiple messages\n\nTo broadcast multiple messages to all the connections in a hub from a single Azure Function invocation you can apply the `SignalR` attribute to the `IAsyncCollector<SignalRMessage>` parameter.\n\n```C# Snippet:SendMessageWithAsyncCollector\n[FunctionName(\"messages\")]\npublic static Task SendMessage(\n    [HttpTrigger(AuthorizationLevel.Anonymous, \"post\")] HttpRequest req,\n    [SignalR(HubName = \"<hub_name>\")] IAsyncCollector<SignalRMessage> signalRMessages)\n{\n    return signalRMessages.AddAsync(\n    new SignalRMessage\n    {\n        Target = \"<target>\",\n        Arguments = new[] { \"<here_can_be_multiple_objects>\" }\n    });\n}\n```\n\n### Sending messages to a connection, user or group\n\nTo send messages to a connection, user or group, the function is similar to broadcasting messages above, except that you specify `ConnectionId`, `UserId` or `GroupName` in the properties of `SignalRMessage`.\n\nHere is an example to send messages to a user using return value binding.\n\n```C# Snippet:SendMessageToUser\n[FunctionName(\"messages\")]\n[return: SignalR(HubName = \"<hub_name>\")]\npublic static SignalRMessage SendMessageToUser(\n    [HttpTrigger(AuthorizationLevel.Anonymous, \"post\")] HttpRequest req)\n{\n    return new SignalRMessage\n    {\n        UserId = \"<user_id>\",\n        Target = \"<target>\",\n        Arguments = new[] { \"<here_can_be_multiple_objects>\" }\n    };\n}\n```\n### SignalR client connection trigger\n\nTo trigger a function when a SignalR client gets connected or disconnected, you can apply the `SignalRTrigger` attribute to the `InvocationContext` parameter.\n\nHere is an example to log the connection ID when a SignalR client is connected. Make sure the second paramater of `SignalRTrigger` constructor is `connections`, which stands for the category of the trigger is connections. The third\n```C# Snippet:ConnectedTrigger\n[FunctionName(\"SignalRTest\")]\npublic static void Run([SignalRTrigger(\"<hubName>\", \"connections\", \"connected\")] InvocationContext invocationContext, ILogger logger)\n{\n    logger.LogInformation($\"{invocationContext.ConnectionId} was connected.\");\n}\n```\n\n### SignalR client message trigger\n\nTo trigger a function when a SignalR client sends a message, you can apply the `SignalRTrigger` attribute to the `InvocationContext` parameter, apply the `SignalRParameter` attribute to each parameter whose name matches the parameter name in your message.\n\nHere is an example to log the message content when a SignalR client sends a message with target \"SendMessage\".\n```C# Snippet:MessageTrigger\n[FunctionName(\"SignalRTest\")]\npublic static void Run([SignalRTrigger(\"SignalRTest\", \"messages\", \"SendMessage\")] InvocationContext invocationContext, [SignalRParameter] string message, ILogger logger)\n{\n    logger.LogInformation($\"Receive {message} from {invocationContext.ConnectionId}.\");\n}\n```\n\n## Troubleshooting\n\n* Please refer to [Monitor Azure Functions](https://docs.microsoft.com/azure/azure-functions/functions-monitoring) for function troubleshooting guidance.\n* [Troubleshooting guide for Azure SignalR Service](https://docs.microsoft.com/azure/azure-signalr/signalr-howto-troubleshoot-guide)\n\n## Next steps\n\nRead the [introduction to Azure Functions](https://docs.microsoft.com/azure/azure-functions/functions-overview) or [creating an Azure Function guide](https://docs.microsoft.com/azure/azure-functions/functions-create-first-azure-function)\n\n## Contributing\n\nSee our [CONTRIBUTING.md][contrib] for details on building,\ntesting, and contributing to this library.\n\nThis project welcomes contributions and suggestions.  Most contributions require\nyou to agree to a Contributor License Agreement (CLA) declaring that you have\nthe right to, and actually do, grant us the rights to use your contribution. For\ndetails, visit [cla.microsoft.com][cla].\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc].\nFor more information see the [Code of Conduct FAQ][coc_faq]\nor contact [opencode@microsoft.com][coc_contact] with any\nadditional questions or comments.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2Fsdk%2Fsignalr%2FMicrosoft.Azure.WebJobs.Extensions.SignalRService%2FREADME.png)\n\n<!-- LINKS -->\n[nuget]: https://www.nuget.org/\n\n[contrib]: https://github.com/Azure/azure-sdk-for-net/tree/main/CONTRIBUTING.md\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n",
        "repo_name": "signalr/Microsoft.Azure.WebJobs.Extensions.SignalRService",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/signalr/Microsoft.Azure.WebJobs.Extensions.SignalRService",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure SQL management client library for .NET\n\nMicrosoft Azure SQL Database is a managed cloud database provided as part of Microsoft Azure.\n\nThis library supports managing Microsoft Azure SQL resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure SQL management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.Sql\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "sqlmanagement/Azure.ResourceManager.Sql",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/sqlmanagement/Azure.ResourceManager.Sql",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure SQL Virtual Machine management client library for .NET\n\nMicrosoft SQL Server on Azure Virtual Machines enables you to use full versions of SQL Server in the cloud without having to manage any on-premises hardware. SQL Server virtual machines (VMs) also simplify licensing costs when you pay as you go.\n\nThis library supports managing Microsoft Azure SQL Virtual Machine resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure SQL Virtual Machine management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.SqlVirtualMachine\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "sqlvirtualmachine/Azure.ResourceManager.SqlVirtualMachine",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/sqlvirtualmachine/Azure.ResourceManager.SqlVirtualMachine",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Storage management client library for .NET\n\nMicrosoft Azure Storage is a Microsoft-managed service providing cloud storage that is highly available, secure, durable, scalable, and redundant. \n\nThis library supports managing Microsoft Azure Storage resources, including the creation of new storage accounts.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started\n\n### Install the package\n\nInstall the Microsoft Azure Storage management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.Storage\n```\n\n### Prerequisites\n\nFirst, to install the [Microsoft Azure Identity](https://docs.microsoft.com/dotnet/api/overview/azure/identity-readme?view=azure-dotnet) package:\n\n```dotnetcli\ndotnet add package Azure.Identity\n```\n\nSet up a way to authenticate to Microsoft Azure with Azure Identity.\n\nSome options are:\n- Through the [Azure CLI Sign in](https://docs.microsoft.com/cli/azure/authenticate-azure-cli).\n- Via [Visual Studio](https://docs.microsoft.com/dotnet/api/overview/azure/identity-readme?view=azure-dotnet#authenticating-via-visual-studio).\n- Setting [Environment Variables](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/AuthUsingEnvironmentVariables.md).\n\nMore information and different authentication approaches using Microsoft Azure Identity can be found in [this document](https://docs.microsoft.com/dotnet/api/overview/azure/identity-readme?view=azure-dotnet).\n\n### Authenticate the Client\n\nThe default option to create an authenticated client is to use `DefaultAzureCredential`. Since all management APIs go through the same endpoint, in order to interact with resources, only one top-level `ArmClient` has to be created.\n\nTo authenticate to Microsoft Azure and create an `ArmClient`, do the following code:\n\n```C# Snippet:Managing_StorageAccounts_AuthClient_Namespaces\nusing Azure.Identity;\nusing Azure.ResourceManager;\n```\n```C# Snippet:Managing_StorageAccounts_AuthClient\nArmClient armClient = new ArmClient(new DefaultAzureCredential());\n```\n\nMore documentation for the `Azure.Identity.DefaultAzureCredential` class can be found in [this document](https://docs.microsoft.com/dotnet/api/azure.identity.defaultazurecredential).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/README.md#key-concepts)\n\n## Examples\n\n- [Managing Storage Accounts](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/storage/Azure.ResourceManager.Storage/samples/Sample1_ManagingStorageAccounts.md).\n\n- [Managing Blob Containers](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/storage/Azure.ResourceManager.Storage/samples/Sample2_ManagingBlobContainers.md).\n- [Managing File Shares](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/storage/Azure.ResourceManager.Storage/samples/Sample3_ManagingFileShares.md).\n\n## Troubleshooting\n\n-   If you find a bug or have a suggestion, file an issue via [GitHub issues](https://github.com/Azure/azure-sdk-for-net/issues), and make sure you add the \"Preview\" label to the issue.\n-   If you need help, check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net)\n    or ask new ones on StackOverflow using Azure and .NET tags.\n-   If having trouble with authentication, go to [DefaultAzureCredential documentation](https://docs.microsoft.com/dotnet/api/azure.identity.defaultazurecredential?view=azure-dotnet).\n\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "storage/Azure.ResourceManager.Storage",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/storage/Azure.ResourceManager.Storage",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Storage Blobs Batch client library for .NET\n\n> Server Version: 2021-02-12, 2020-12-06, 2020-10-02, 2020-08-04, 2020-06-12, 2020-04-08, 2020-02-10, 2019-12-12, 2019-07-07, and 2019-02-02\n\nAzure Blob storage is Microsoft's object storage solution for the cloud. Blob\nstorage is optimized for storing massive amounts of unstructured data.  This\nlibrary allows you to batch multiple Azure Blob Storage operations in a single request.\n\n[Source code][source] | [Package (NuGet)][package] | [API reference documentation][docs] | [REST API documentation][rest_docs] | [Product documentation][product_docs]\n\n## Getting started\n\n### Install the package\n\nInstall the Azure Storage Blobs Batch client library for .NET with [NuGet][nuget]:\n\n```dotnetcli\ndotnet add package Azure.Storage.Blobs.Batch\n```\n\n### Prerequisites\n\nYou need an [Azure subscription][azure_sub] and a\n[Storage Account][storage_account_docs] to use this package.\n\nTo create a new Storage Account, you can use the [Azure Portal][storage_account_create_portal],\n[Azure PowerShell][storage_account_create_ps], or the [Azure CLI][storage_account_create_cli].\nHere's an example using the Azure CLI:\n\n```Powershell\naz storage account create --name MyStorageAccount --resource-group MyResourceGroup --location westus --sku Standard_LRS\n```\n\n### Authenticate the client\n\nIn order to interact with the Azure Blobs Storage service for batch operations, you'll need to create an instance of the BlobServiceClient class.  The [Azure Identity library][identity] makes it easy to add Azure Active Directory support for authenticating Azure SDK clients with their corresponding Azure services.\n\n```C# Snippet:SampleSnippetsBlobBatch_Auth\n// Create a BlobServiceClient that will authenticate through Active Directory\nUri accountUri = new Uri(\"https://MYSTORAGEACCOUNT.blob.core.windows.net/\");\nBlobServiceClient client = new BlobServiceClient(accountUri, new DefaultAzureCredential());\nBlobBatchClient batch = client.GetBlobBatchClient();\n```\n\n## Key concepts\n\nBatching supports two types of subrequests: SetBlobAccessTier for block blobs and DeleteBlob for blobs.\n\n- Only supports up to 256 subrequests in a single batch. The size of the body for a batch request cannot exceed 4MB.\n- There are no guarantees on the order of execution of the batch subrequests.\n- Batch subrequest execution is not atomic. Each subrequest is executed independently.\n- Each subrequest must be for a resource within the same storage account.\n\n### Thread safety\nWe guarantee that all client instance methods are thread-safe and independent of each other ([guideline](https://azure.github.io/azure-sdk/dotnet_introduction.html#dotnet-service-methods-thread-safety)). This ensures that the recommendation of reusing client instances is always safe, even across threads.\n\n### Additional concepts\n<!-- CLIENT COMMON BAR -->\n[Client options](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#configuring-service-clients-using-clientoptions) |\n[Accessing the response](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#accessing-http-response-details-using-responset) |\n[Long-running operations](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#consuming-long-running-operations-using-operationt) |\n[Handling failures](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#reporting-errors-requestfailedexception) |\n[Diagnostics](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md) |\n[Mocking](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#mocking) |\n[Client lifetime](https://devblogs.microsoft.com/azure-sdk/lifetime-management-and-thread-safety-guarantees-of-azure-sdk-net-clients/)\n<!-- CLIENT COMMON BAR -->\n\n## Examples\n\n### Deleting blobs\n\n```C# Snippet:SampleSnippetsBatch_DeleteBatch\n// Get a connection string to our Azure Storage account.\nstring connectionString = \"<connection_string>\";\nstring containerName = \"sample-container\";\n\n// Get a reference to a container named \"sample-container\" and then create it\nBlobServiceClient service = new BlobServiceClient(connectionString);\nBlobContainerClient container = service.GetBlobContainerClient(containerName);\ncontainer.Create();\n\n// Create three blobs named \"foo\", \"bar\", and \"baz\"\nBlobClient foo = container.GetBlobClient(\"foo\");\nBlobClient bar = container.GetBlobClient(\"bar\");\nBlobClient baz = container.GetBlobClient(\"baz\");\nfoo.Upload(BinaryData.FromString(\"Foo!\"));\nbar.Upload(BinaryData.FromString(\"Bar!\"));\nbaz.Upload(BinaryData.FromString(\"Baz!\"));\n\n// Delete all three blobs at once\nBlobBatchClient batch = service.GetBlobBatchClient();\nbatch.DeleteBlobs(new Uri[] { foo.Uri, bar.Uri, baz.Uri });\n```\n\n### Setting Access Tiers\n\n```C# Snippet:SampleSnippetsBatch_AccessTier\n// Get a connection string to our Azure Storage account.\nstring connectionString = \"<connection_string>\";\nstring containerName = \"sample-container\";\n\n// Get a reference to a container named \"sample-container\" and then create it\nBlobServiceClient service = new BlobServiceClient(connectionString);\nBlobContainerClient container = service.GetBlobContainerClient(containerName);\ncontainer.Create();\n// Create three blobs named \"foo\", \"bar\", and \"baz\"\nBlobClient foo = container.GetBlobClient(\"foo\");\nBlobClient bar = container.GetBlobClient(\"bar\");\nBlobClient baz = container.GetBlobClient(\"baz\");\nfoo.Upload(BinaryData.FromString(\"Foo!\"));\nbar.Upload(BinaryData.FromString(\"Bar!\"));\nbaz.Upload(BinaryData.FromString(\"Baz!\"));\n\n// Set the access tier for all three blobs at once\nBlobBatchClient batch = service.GetBlobBatchClient();\nbatch.SetBlobsAccessTier(new Uri[] { foo.Uri, bar.Uri, baz.Uri }, AccessTier.Cool);\n```\n\n### Fine-grained control\n\n```C# Snippet:SampleSnippetsBatch_FineGrainedBatching\n// Get a connection string to our Azure Storage account.\nstring connectionString = \"<connection_string>\";\nstring containerName = \"sample-container\";\n\n// Get a reference to a container named \"sample-container\" and then create it\nBlobServiceClient service = new BlobServiceClient(connectionString);\nBlobContainerClient container = service.GetBlobContainerClient(containerName);\ncontainer.Create();\n\n// Create three blobs named \"foo\", \"bar\", and \"baz\"\nBlobClient foo = container.GetBlobClient(\"foo\");\nBlobClient bar = container.GetBlobClient(\"bar\");\nBlobClient baz = container.GetBlobClient(\"baz\");\nfoo.Upload(BinaryData.FromString(\"Foo!\"));\nfoo.CreateSnapshot();\nbar.Upload(BinaryData.FromString(\"Bar!\"));\nbar.CreateSnapshot();\nbaz.Upload(BinaryData.FromString(\"Baz!\"));\n\n// Create a batch with three deletes\nBlobBatchClient batchClient = service.GetBlobBatchClient();\nBlobBatch batch = batchClient.CreateBatch();\nbatch.DeleteBlob(foo.Uri, DeleteSnapshotsOption.IncludeSnapshots);\nbatch.DeleteBlob(bar.Uri, DeleteSnapshotsOption.OnlySnapshots);\nbatch.DeleteBlob(baz.Uri);\n\n// Submit the batch\nbatchClient.SubmitBatch(batch);\n```\n\n## Troubleshooting\n\nAll Blob service operations will throw a\n[RequestFailedException][RequestFailedException] on failure with\nhelpful [`ErrorCode`s][error_codes].  Many of these errors are recoverable.  Subrequest failures will be bundled together into an AggregateException.\n\n```C# Snippet:SampleSnippetsBatch_Troubleshooting\n// Get a connection string to our Azure Storage account.\nstring connectionString = \"<connection_string>\";\nstring containerName = \"sample-container\";\n\n// Get a reference to a container named \"sample-container\" and then create it\nBlobServiceClient service = new BlobServiceClient(connectionString);\nBlobContainerClient container = service.GetBlobContainerClient(containerName);\ncontainer.Create();\n\n// Create a blob named \"valid\"\nBlobClient valid = container.GetBlobClient(\"valid\");\nvalid.Upload(BinaryData.FromString(\"Valid!\"));\n\n// Get a reference to a blob named \"invalid\", but never create it\nBlobClient invalid = container.GetBlobClient(\"invalid\");\n\n// Delete both blobs at the same time\nBlobBatchClient batch = service.GetBlobBatchClient();\ntry\n{\n    batch.DeleteBlobs(new Uri[] { valid.Uri, invalid.Uri });\n}\ncatch (AggregateException)\n{\n    // An aggregate exception is thrown for all the individual failures\n    // Check ex.InnerExceptions for RequestFailedException instances\n}\n```\n\n## Next steps\n\nCheck out our [sync](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/storage/Azure.Storage.Blobs.Batch/samples/Sample03a_Batching.cs) and [async](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/storage/Azure.Storage.Blobs.Batch/samples/Sample03b_BatchingAsync.cs) samples for more.\n\n## Contributing\n\nSee the [Storage CONTRIBUTING.md][storage_contrib] for details on building,\ntesting, and contributing to this library.\n\nThis project welcomes contributions and suggestions.  Most contributions require\nyou to agree to a Contributor License Agreement (CLA) declaring that you have\nthe right to, and actually do, grant us the rights to use your contribution. For\ndetails, visit [cla.microsoft.com][cla].\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc].\nFor more information see the [Code of Conduct FAQ][coc_faq]\nor contact [opencode@microsoft.com][coc_contact] with any\nadditional questions or comments.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2Fsdk%2Fstorage%2FAzure.Storage.Blobs.Batch%2FREADME.png)\n\n<!-- LINKS -->\n[source]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/storage/Azure.Storage.Blobs.Batch/src\n[package]: https://www.nuget.org/packages/Azure.Storage.Blobs.Batch/\n[docs]: https://azure.github.io/azure-sdk-for-net/storage.html\n[rest_docs]: https://docs.microsoft.com/rest/api/storageservices/blob-service-rest-api\n[product_docs]: https://docs.microsoft.com/azure/storage/blobs/storage-blobs-overview\n[nuget]: https://www.nuget.org/\n[storage_account_docs]: https://docs.microsoft.com/azure/storage/common/storage-account-overview\n[storage_account_create_ps]: https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-powershell\n[storage_account_create_cli]: https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-cli\n[storage_account_create_portal]: https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-portal\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/dotnet/\n[identity]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/identity/Azure.Identity/README.md\n[RequestFailedException]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/core/Azure.Core/src/RequestFailedException.cs\n[error_codes]: https://docs.microsoft.com/rest/api/storageservices/blob-service-error-codes\n[storage_contrib]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/storage/CONTRIBUTING.md\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n",
        "repo_name": "storage/Azure.Storage.Blobs.Batch",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/storage/Azure.Storage.Blobs.Batch",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Storage Blobs Change Feed client library for .NET\n\n> Server Version: 2021-02-12, 2020-12-06, 2020-10-02, 2020-08-04, 2020-06-12 2020-04-08, 2020-02-10, and 2019-12-12\n\nThe purpose of the change feed is to provide transaction logs of all the changes that occur to\nthe blobs and the blob metadata in your storage account. The change feed provides ordered,\nguaranteed, durable, immutable, read-only log of these changes. Client applications can read these\nlogs at any time. The change feed enables you to build efficient and scalable solutions that\nprocess change events that occur in your Blob Storage account at a low cost.\n\n[Source code][source] | [Package (NuGet)][package] | [Product documentation][product_docs]\n\n## Getting started\n\n### Install the package\n\nInstall the Azure Storage Blobs client library for .NET with [NuGet][nuget]:\n\n```dotnetcli\ndotnet add package Azure.Storage.Blobs.ChangeFeed --prerelease\n```\n\n### Prerequisites\n\nYou need an [Azure subscription][azure_sub] and a\n[Storage Account][storage_account_docs] to use this package.\n\nTo create a new Storage Account, you can use the [Azure Portal][storage_account_create_portal],\n[Azure PowerShell][storage_account_create_ps], or the [Azure CLI][storage_account_create_cli].\nHere's an example using the Azure CLI:\n\n```Powershell\naz storage account create --name MyStorageAccount --resource-group MyResourceGroup --location westus --sku Standard_LRS\n```\n\n### Authenticate the Client\n\nAuthentication works the same as in [Azure.Storage.Blobs][authenticating_with_blobs].\n\n## Key concepts\n\nThe change feed is stored as blobs in a special container in your storage account at standard blob\npricing cost. You can control the retention period of these files based on your requirements\n(See the conditions of the current release). Change events are appended to the change feed as records\nin the Apache Avro format specification: a compact, fast, binary format that provides rich data structures\nwith inline schema. This format is widely used in the Hadoop ecosystem, Stream Analytics, and Azure Data\nFactory.\n\nYou can process these logs incrementally or in-full. Any number of client applications can independently\nread the change feed, in parallel, and at their own pace. Analytics applications such as Apache Drill or\nApache Spark can consume logs directly as Avro files, which let you process them at a low-cost, with\nhigh-bandwidth, and without having to write a custom application.\n\n### Thread safety\nWe guarantee that all client instance methods are thread-safe and independent of each other ([guideline](https://azure.github.io/azure-sdk/dotnet_introduction.html#dotnet-service-methods-thread-safety)). This ensures that the recommendation of reusing client instances is always safe, even across threads.\n\n### Additional concepts\n<!-- CLIENT COMMON BAR -->\n[Client options](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#configuring-service-clients-using-clientoptions) |\n[Accessing the response](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#accessing-http-response-details-using-responset) |\n[Long-running operations](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#consuming-long-running-operations-using-operationt) |\n[Handling failures](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#reporting-errors-requestfailedexception) |\n[Diagnostics](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md) |\n[Mocking](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#mocking) |\n[Client lifetime](https://devblogs.microsoft.com/azure-sdk/lifetime-management-and-thread-safety-guarantees-of-azure-sdk-net-clients/)\n<!-- CLIENT COMMON BAR -->\n\n## Examples\n\n### Get all events in the Change Feed\n```C# Snippet:SampleSnippetsChangeFeed_GetAllEvents\n// Get all the events in the change feed.\nList<BlobChangeFeedEvent> changeFeedEvents = new List<BlobChangeFeedEvent>();\nawait foreach (BlobChangeFeedEvent changeFeedEvent in changeFeedClient.GetChangesAsync())\n{\n    changeFeedEvents.Add(changeFeedEvent);\n}\n```\n\n### Get events between a start and end time\n```C# Snippet:SampleSnippetsChangeFeed_GetEventsBetweenStartAndEndTime\n// Create the start and end time.  The change feed client will round start time down to\n// the nearest hour, and round endTime up to the next hour if you provide DateTimeOffsets\n// with minutes and seconds.\nDateTimeOffset startTime = new DateTimeOffset(2017, 3, 2, 15, 0, 0, TimeSpan.Zero);\nDateTimeOffset endTime = new DateTimeOffset(2020, 10, 7, 2, 0, 0, TimeSpan.Zero);\n\n// You can also provide just a start or end time.\nawait foreach (BlobChangeFeedEvent changeFeedEvent in changeFeedClient.GetChangesAsync(\n    start: startTime,\n    end: endTime))\n{\n    changeFeedEvents.Add(changeFeedEvent);\n}\n```\n\n### Resume with continuationToken \n```C# Snippet:SampleSnippetsChangeFeed_ResumeWithCursor\nstring continuationToken = null;\nawait foreach (Page<BlobChangeFeedEvent> page in changeFeedClient.GetChangesAsync().AsPages(pageSizeHint: 10))\n{\n    foreach (BlobChangeFeedEvent changeFeedEvent in page.Values)\n    {\n        changeFeedEvents.Add(changeFeedEvent);\n    }\n\n    // Get the change feed continuation token.  The continuation token is not required to get each page of events,\n    // it is intended to be saved and used to resume iterating at a later date.\n    continuationToken = page.ContinuationToken;\n    break;\n}\n\n// Resume iterating from the pervious position with the continuation token.\nawait foreach (BlobChangeFeedEvent changeFeedEvent in changeFeedClient.GetChangesAsync(\n    continuationToken: continuationToken))\n{\n    changeFeedEvents.Add(changeFeedEvent);\n}\n```\n\n## Troubleshooting\nAll Blob service operations will throw a\n[RequestFailedException][RequestFailedException] on failure with\nhelpful [`ErrorCode`s][error_codes].  Many of these errors are recoverable.\n\n## Next steps\n\nGet started with our [Change Feed samples][samples]:\n\n1. [Hello World](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/storage/Azure.Storage.Blobs.ChangeFeed/samples/Sample01a_HelloWorld.cs): Get changes that have occured in your storage account (or [asynchronously](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/storage/Azure.Storage.Blobs.ChangeFeed/samples/Sample01b_HelloWorldAsync.cs))\n2. [Auth](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/storage/Azure.Storage.Blobs.ChangeFeed/samples/Sample02_Auth.cs): Authenticate with connection strings, public access, shared keys, shared access signatures, and Azure Active Directory.\n\n\n## Contributing\n\nSee the [Storage CONTRIBUTING.md][storage_contrib] for details on building,\ntesting, and contributing to this library.\n\nThis project welcomes contributions and suggestions.  Most contributions require\nyou to agree to a Contributor License Agreement (CLA) declaring that you have\nthe right to, and actually do, grant us the rights to use your contribution. For\ndetails, visit [cla.microsoft.com][cla].\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc].\nFor more information see the [Code of Conduct FAQ][coc_faq]\nor contact [opencode@microsoft.com][coc_contact] with any\nadditional questions or comments.\n\n<!-- LINKS -->\n[source]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/storage/Azure.Storage.Blobs.ChangeFeed/src\n[package]: https://www.nuget.org/packages/Azure.Storage.Blobs.ChangeFeed/\n[product_docs]: https://docs.microsoft.com/azure/storage/blobs/storage-blob-change-feed\n[azure_sub]: https://azure.microsoft.com/free/dotnet/\n[nuget]: https://www.nuget.org/\n[storage_account_docs]: https://docs.microsoft.com/azure/storage/common/storage-account-overview\n[storage_account_create_ps]: https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-powershell\n[storage_account_create_cli]: https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-cli\n[storage_account_create_portal]: https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-portal\n[authenticating_with_blobs]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/storage/Azure.Storage.Blobs/samples/Sample02_Auth.cs\n[RequestFailedException]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/core/Azure.Core/src/RequestFailedException.cs\n[error_codes]: https://docs.microsoft.com/rest/api/storageservices/blob-service-error-codes\n[samples]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/storage/Azure.Storage.Blobs.ChangeFeed/samples/\n[storage_contrib]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/storage/CONTRIBUTING.md\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n",
        "repo_name": "storage/Azure.Storage.Blobs.ChangeFeed",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/storage/Azure.Storage.Blobs.ChangeFeed",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Storage Blobs client library for .NET\n\n> Server Version: 2021-02-12, 2020-12-06, 2020-10-02, 2020-08-04, 2020-06-12, 2020-04-08, 2020-02-10, 2019-12-12, 2019-07-07, and 2019-02-02\n\nAzure Blob storage is Microsoft's object storage solution for the cloud. Blob\nstorage is optimized for storing massive amounts of unstructured data.\nUnstructured data is data that does not adhere to a particular data model or\ndefinition, such as text or binary data.\n\n[Source code][source] | [Package (NuGet)][package] | [API reference documentation][docs] | [REST API documentation][rest_docs] | [Product documentation][product_docs]\n\n## Getting started\n\n### Install the package\n\nInstall the Azure Storage Blobs client library for .NET with [NuGet][nuget]:\n\n```dotnetcli\ndotnet add package Azure.Storage.Blobs\n```\n\n### Prerequisites\n\nYou need an [Azure subscription][azure_sub] and a\n[Storage Account][storage_account_docs] to use this package.\n\nTo create a new Storage Account, you can use the [Azure Portal][storage_account_create_portal],\n[Azure PowerShell][storage_account_create_ps], or the [Azure CLI][storage_account_create_cli].\nHere's an example using the Azure CLI:\n\n```Powershell\naz storage account create --name MyStorageAccount --resource-group MyResourceGroup --location westus --sku Standard_LRS\n```\n\n### Authenticate the client\n\nIn order to interact with the Azure Blobs Storage service, you'll need to create an instance of the BlobServiceClient class.  The [Azure Identity library][identity] makes it easy to add Azure Active Directory support for authenticating Azure SDK clients with their corresponding Azure services.\n\n```C# Snippet:SampleSnippetsBlob_Auth\n// Create a BlobServiceClient that will authenticate through Active Directory\nUri accountUri = new Uri(\"https://MYSTORAGEACCOUNT.blob.core.windows.net/\");\nBlobServiceClient client = new BlobServiceClient(accountUri, new DefaultAzureCredential());\n```\n\nLearn more about enabling Azure Active Directory for authentication with Azure Storage in [our documentation][storage_ad] and [our samples](#next-steps).\n\n## Key concepts\n\nBlob storage is designed for:\n\n- Serving images or documents directly to a browser.\n- Storing files for distributed access.\n- Streaming video and audio.\n- Writing to log files.\n- Storing data for backup and restore, disaster recovery, and archiving.\n- Storing data for analysis by an on-premises or Azure-hosted service.\n\nBlob storage offers three types of resources:\n\n- The _storage account_ used via `BlobServiceClient`\n- A _container_ in the storage account used via `BlobContainerClient`\n- A _blob_ in a container used via `BlobClient`\n\nLearn more about options for authentication _(including Connection Strings, Shared Key, Shared Key Signatures, Active Directory, and anonymous public access)_ [in our samples.](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/storage/Azure.Storage.Blobs/samples/Sample02_Auth.cs)\n\n### Thread safety\nWe guarantee that all client instance methods are thread-safe and independent of each other ([guideline](https://azure.github.io/azure-sdk/dotnet_introduction.html#dotnet-service-methods-thread-safety)). This ensures that the recommendation of reusing client instances is always safe, even across threads.\n\n### Additional concepts\n<!-- CLIENT COMMON BAR -->\n[Client options](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#configuring-service-clients-using-clientoptions) |\n[Accessing the response](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#accessing-http-response-details-using-responset) |\n[Long-running operations](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#consuming-long-running-operations-using-operationt) |\n[Handling failures](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#reporting-errors-requestfailedexception) |\n[Diagnostics](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md) |\n[Mocking](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#mocking) |\n[Client lifetime](https://devblogs.microsoft.com/azure-sdk/lifetime-management-and-thread-safety-guarantees-of-azure-sdk-net-clients/)\n<!-- CLIENT COMMON BAR -->\n\n## Examples\n\n### Uploading a blob\n\n```C# Snippet:SampleSnippetsBlob_Upload\n// Get a connection string to our Azure Storage account.  You can\n// obtain your connection string from the Azure Portal (click\n// Access Keys under Settings in the Portal Storage account blade)\n// or using the Azure CLI with:\n//\n//     az storage account show-connection-string --name <account_name> --resource-group <resource_group>\n//\n// And you can provide the connection string to your application\n// using an environment variable.\n\nstring connectionString = \"<connection_string>\";\nstring containerName = \"sample-container\";\nstring blobName = \"sample-blob\";\nstring filePath = \"sample-file\";\n\n// Get a reference to a container named \"sample-container\" and then create it\nBlobContainerClient container = new BlobContainerClient(connectionString, containerName);\ncontainer.Create();\n\n// Get a reference to a blob named \"sample-file\" in a container named \"sample-container\"\nBlobClient blob = container.GetBlobClient(blobName);\n\n// Upload local file\nblob.Upload(filePath);\n```\n\n### Downloading a blob\n\n```C# Snippet:SampleSnippetsBlob_Download\n// Get a temporary path on disk where we can download the file\nstring downloadPath = \"hello.jpg\";\n\n// Download the public blob at https://aka.ms/bloburl\nnew BlobClient(new Uri(\"https://aka.ms/bloburl\")).DownloadTo(downloadPath);\n```\n\n### Enumerating blobs\n\n```C# Snippet:SampleSnippetsBlob_List\n// Get a connection string to our Azure Storage account.\nstring connectionString = \"<connection_string>\";\nstring containerName = \"sample-container\";\nstring filePath = \"hello.jpg\";\n\n// Get a reference to a container named \"sample-container\" and then create it\nBlobContainerClient container = new BlobContainerClient(connectionString, containerName);\ncontainer.Create();\n\n// Upload a few blobs so we have something to list\ncontainer.UploadBlob(\"first\", File.OpenRead(filePath));\ncontainer.UploadBlob(\"second\", File.OpenRead(filePath));\ncontainer.UploadBlob(\"third\", File.OpenRead(filePath));\n\n// Print out all the blob names\nforeach (BlobItem blob in container.GetBlobs())\n{\n    Console.WriteLine(blob.Name);\n}\n```\n\n### Async APIs\n\nWe fully support both synchronous and asynchronous APIs.\n```C# Snippet:SampleSnippetsBlob_Async\n// Get a temporary path on disk where we can download the file\nstring downloadPath = \"hello.jpg\";\n\n// Download the public blob at https://aka.ms/bloburl\nawait new BlobClient(new Uri(\"https://aka.ms/bloburl\")).DownloadToAsync(downloadPath);\n```\n\n## Troubleshooting\n\nAll Blob service operations will throw a\n[RequestFailedException][RequestFailedException] on failure with\nhelpful [`ErrorCode`s][error_codes].  Many of these errors are recoverable.\n\n```C# Snippet:SampleSnippetsBlob_Troubleshooting\n// Get a connection string to our Azure Storage account.\nstring connectionString = \"<connection_string>\";\nstring containerName = \"sample-container\";\n\n// Try to delete a container named \"sample-container\" and avoid any potential race conditions\n// that might arise by checking if the container is already deleted or is in the process\n// of being deleted.\nBlobContainerClient container = new BlobContainerClient(connectionString, containerName);\n\ntry\n{\n    container.Delete();\n}\ncatch (RequestFailedException ex)\n    when (ex.ErrorCode == BlobErrorCode.ContainerBeingDeleted ||\n          ex.ErrorCode == BlobErrorCode.ContainerNotFound)\n{\n    // Ignore any errors if the container being deleted or if it has already been deleted\n}\n```\n\n## Next steps\n\nGet started with our [Blob samples][samples]:\n\n1. [Hello World](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/storage/Azure.Storage.Blobs/samples/Sample01a_HelloWorld.cs): Upload, download, and list blobs (or [asynchronously](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/storage/Azure.Storage.Blobs/samples/Sample01b_HelloWorldAsync.cs))\n2. [Auth](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/storage/Azure.Storage.Blobs/samples/Sample02_Auth.cs): Authenticate with connection strings, public access, shared keys, shared access signatures, and Azure Active Directory.\n\n## Contributing\n\nSee the [Storage CONTRIBUTING.md][storage_contrib] for details on building,\ntesting, and contributing to this library.\n\nThis project welcomes contributions and suggestions.  Most contributions require\nyou to agree to a Contributor License Agreement (CLA) declaring that you have\nthe right to, and actually do, grant us the rights to use your contribution. For\ndetails, visit [cla.microsoft.com][cla].\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc].\nFor more information see the [Code of Conduct FAQ][coc_faq]\nor contact [opencode@microsoft.com][coc_contact] with any\nadditional questions or comments.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2Fsdk%2Fstorage%2FAzure.Storage.Blobs%2FREADME.png)\n\n<!-- LINKS -->\n[source]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/storage/Azure.Storage.Blobs/src\n[package]: https://www.nuget.org/packages/Azure.Storage.Blobs/\n[docs]: https://docs.microsoft.com/dotnet/api/azure.storage.blobs\n[rest_docs]: https://docs.microsoft.com/rest/api/storageservices/blob-service-rest-api\n[product_docs]: https://docs.microsoft.com/azure/storage/blobs/storage-blobs-overview\n[nuget]: https://www.nuget.org/\n[storage_account_docs]: https://docs.microsoft.com/azure/storage/common/storage-account-overview\n[storage_account_create_ps]: https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-powershell\n[storage_account_create_cli]: https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-cli\n[storage_account_create_portal]: https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-portal\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/dotnet/\n[identity]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/identity/Azure.Identity/README.md\n[storage_ad]: https://docs.microsoft.com/azure/storage/common/storage-auth-aad\n[storage_ad_sample]: samples/Sample02c_Auth_ActiveDirectory.cs\n[RequestFailedException]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/core/Azure.Core/src/RequestFailedException.cs\n[error_codes]: https://docs.microsoft.com/rest/api/storageservices/blob-service-error-codes\n[samples]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/storage/Azure.Storage.Blobs/samples/\n[storage_contrib]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/storage/CONTRIBUTING.md\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n",
        "repo_name": "storage/Azure.Storage.Blobs",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/storage/Azure.Storage.Blobs",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Storage Common client library for .NET\n\n> Server Version: 2021-02-12, 2020-12-06, 2020-10-02, 2020-08-04, 2020-06-12, 2020-04-08, 2020-02-10, 2019-12-12, 2019-07-07, and 2020-02-02\n\nAzure Storage is a Microsoft-managed service providing cloud storage that is\nhighly available, secure, durable, scalable, and redundant. Azure Storage\nincludes Azure Blobs (objects), Azure Data Lake Storage Gen2, Azure Files,\nand Azure Queues.\n\nThe Azure.Storage.Common library provides infrastructure shared by the other\nAzure Storage client libraries.\n\n[Source code][source] | [Package (NuGet)][package] | [API reference documentation][docs] | [REST API documentation][rest_docs] | [Product documentation][product_docs]\n\n## Getting started\n\n### Install the package\n\nInstall the Azure Storage client library for .NET you'd like to use with\n[NuGet][nuget] and the `Azure.Storage.Common` client library will be included:\n\n```dotnetcli\ndotnet add package Azure.Storage.Blobs\ndotnet add package Azure.Storage.Queues\ndotnet add package Azure.Storage.Files.Shares\n```\n\n### Prerequisites\n\nYou need an [Azure subscription][azure_sub] and a\n[Storage Account][storage_account_docs] to use this package.\n\nTo create a new Storage Account, you can use the [Azure Portal][storage_account_create_portal],\n[Azure PowerShell][storage_account_create_ps], or the [Azure CLI][storage_account_create_cli].\nHere's an example using the Azure CLI:\n\n```Powershell\naz storage account create --name MyStorageAccount --resource-group MyResourceGroup --location westus --sku Standard_LRS\n```\n\n## Key concepts\n\nThe Azure Storage Common client library contains shared infrastructure like\n[authentication credentials][auth_credentials] and [RequestFailedException][RequestFailedException].\n\n### Thread safety\nWe guarantee that all client instance methods are thread-safe and independent of each other ([guideline](https://azure.github.io/azure-sdk/dotnet_introduction.html#dotnet-service-methods-thread-safety)). This ensures that the recommendation of reusing client instances is always safe, even across threads.\n\n### Additional concepts\n<!-- CLIENT COMMON BAR -->\n[Client options](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#configuring-service-clients-using-clientoptions) |\n[Accessing the response](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#accessing-http-response-details-using-responset) |\n[Long-running operations](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#consuming-long-running-operations-using-operationt) |\n[Handling failures](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#reporting-errors-requestfailedexception) |\n[Diagnostics](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md) |\n[Mocking](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#mocking) |\n[Client lifetime](https://devblogs.microsoft.com/azure-sdk/lifetime-management-and-thread-safety-guarantees-of-azure-sdk-net-clients/)\n<!-- CLIENT COMMON BAR -->\n\n## Examples\n\nPlease see the examples for [Blobs][blobs_examples], [Queues][queues_examples], and [Files][files_examples].\n\n## Troubleshooting\n\nAll Azure Storage services will throw a [RequestFailedException][RequestFailedException]\nwith helpful [`ErrorCode`s][error_codes].\n\n## Next steps\n\nGet started with our [Common samples][samples] and then continue on with our [Blobs][blobs_samples], [Queues][queues_samples], and [Files][files_samples] samples.\n\n## Contributing\n\nSee the [Storage CONTRIBUTING.md][storage_contrib] for details on building,\ntesting, and contributing to these libraries.\n\nThis project welcomes contributions and suggestions.  Most contributions require\nyou to agree to a Contributor License Agreement (CLA) declaring that you have\nthe right to, and actually do, grant us the rights to use your contribution. For\ndetails, visit [cla.microsoft.com][cla].\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc].\nFor more information see the [Code of Conduct FAQ][coc_faq]\nor contact [opencode@microsoft.com][coc_contact] with any\nadditional questions or comments.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2Fsdk%2Fstorage%2FAzure.Storage.Common%2FREADME.png)\n\n<!-- LINKS -->\n[source]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/storage/Azure.Storage.Common/src\n[package]: https://www.nuget.org/packages/Azure.Storage.Common/\n[docs]: https://docs.microsoft.com/dotnet/api/azure.storage\n[rest_docs]: https://docs.microsoft.com/rest/api/storageservices/\n[product_docs]: https://docs.microsoft.com/azure/storage/\n[nuget]: https://www.nuget.org/\n[storage_account_docs]: https://docs.microsoft.com/azure/storage/common/storage-account-overview\n[storage_account_create_ps]: https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-powershell\n[storage_account_create_cli]: https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-cli\n[storage_account_create_portal]: https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-portal\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/dotnet/\n[auth_credentials]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/storage/Azure.Storage.Common/src/StorageSharedKeyCredential.cs\n[blobs_examples]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/storage/Azure.Storage.Blobs/README.md#Examples\n[files_examples]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/storage/Azure.Storage.Files.Shares/README.md#Examples\n[queues_examples]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/storage/Azure.Storage.Queues/README.md#Examples\n[RequestFailedException]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/core/Azure.Core/src/RequestFailedException.cs\n[error_codes]: https://docs.microsoft.com/rest/api/storageservices/common-rest-api-error-codes\n[samples]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/storage/Azure.Storage.Common/samples/\n[blobs_samples]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/storage/Azure.Storage.Blobs/README.md#next-steps\n[files_samples]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/storage/Azure.Storage.Files.Shares/README.md#next-steps\n[queues_samples]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/storage/Azure.Storage.Queues/README.md#next-steps\n[storage_contrib]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/storage/CONTRIBUTING.md\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n",
        "repo_name": "storage/Azure.Storage.Common",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/storage/Azure.Storage.Common",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Storage Data Movement Blobs client library for .NET\n\n> Server Version: 2020-04-08, 2020-02-10, 2019-12-12, 2019-07-07, and 2020-02-02\n\nAzure Storage is a Microsoft-managed service providing cloud storage that is\nhighly available, secure, durable, scalable, and redundant. Azure Storage\nincludes Azure Blobs (objects), Azure Data Lake Storage Gen2, Azure Files,\nand Azure Queues.\n\nThe Azure Storage Data Movement library is optimized for uploading, downloading and\ncopying customer data.\n\nThe Azure.Storage.DataMovement.Blobs library provides infrastructure shared by the other\nAzure Storage client libraries.\n\n[Source code][source] | [Package (NuGet)][package] | [API reference documentation][docs] | [REST API documentation][rest_docs] | [Product documentation][product_docs]\n\n## Getting started\n\n### Install the package\n\nInstall the Azure Storage client library for .NET you'd like to use with\n[NuGet][nuget] and the `Azure.Storage.DataMovement.Blobs` client library will be included:\n\n```dotnetcli\ndotnet add package Azure.Storage.DataMovement --prerelease\ndotnet add package Azure.Storage.DataMovement.Blobs --prerelease\n```\n\n### Prerequisites\n\nYou need an [Azure subscription][azure_sub] and a\n[Storage Account][storage_account_docs] to use this package.\n\nTo create a new Storage Account, you can use the [Azure Portal][storage_account_create_portal],\n[Azure PowerShell][storage_account_create_ps], or the [Azure CLI][storage_account_create_cli].\nHere's an example using the Azure CLI:\n\n```Powershell\naz storage account create --name MyStorageAccount --resource-group MyResourceGroup --location westus --sku Standard_LRS\n```\n\n### Authenticate the client\nThe Azure.Storage.DataMovement.Blobs library uses clients from the Azure.Storage.Blobs package to communicate with the Azure Blob Storage service. For more information see the Azure.Storage.Blobs [authentication documentation](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/storage/Azure.Storage.Blobs#authenticate-the-client). \n\n## Key concepts\n\nThe Azure Storage Common client library contains shared infrastructure like\n[authentication credentials][auth_credentials] and [RequestFailedException][RequestFailedException].\n\n### Thread safety\nWe guarantee that all client instance methods are thread-safe and independent of each other ([guideline](https://azure.github.io/azure-sdk/dotnet_introduction.html#dotnet-service-methods-thread-safety)). This ensures that the recommendation of reusing client instances is always safe, even across threads.\n\n### Additional concepts\n<!-- CLIENT COMMON BAR -->\n[Client options](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#configuring-service-clients-using-clientoptions) |\n[Accessing the response](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#accessing-http-response-details-using-responset) |\n[Long-running operations](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#consuming-long-running-operations-using-operationt) |\n[Handling failures](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#reporting-errors-requestfailedexception) |\n[Diagnostics](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md) |\n[Mocking](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#mocking) |\n[Client lifetime](https://devblogs.microsoft.com/azure-sdk/lifetime-management-and-thread-safety-guarantees-of-azure-sdk-net-clients/)\n<!-- CLIENT COMMON BAR -->\n\n## Examples\n\n### Examples using BlobContainerClient extension methods to upload and download directories.\n\nInstantiate the BlobContainerClient\n```C# Snippet:ExtensionMethodCreateContainerClient\nBlobServiceClient service = new BlobServiceClient(serviceUri, credential);\n\nBlobContainerClient container = service.GetBlobContainerClient(containerName);\n```\n\nUpload a local directory to the root of the container\n```C# Snippet:ExtensionMethodSimpleUploadToRoot\nDataTransfer transfer = await container.StartUploadDirectoryAsync(localPath);\n\nawait transfer.AwaitCompletion();\n```\n\nUpload a local directory to a virtual directory in the container by specifying a directory prefix\n```C# Snippet:ExtensionMethodSimpleUploadToDirectoryPrefix\nDataTransfer transfer = await container.StartUploadDirectoryAsync(localPath, blobDirectoryPrefix);\n\nawait transfer.AwaitCompletion();\n```\n\nUpload a local directory to a virtual directory in the container specifying more advanced options\n```C# Snippet:ExtensionMethodSimpleUploadWithOptions\nBlobContainerClientTransferOptions options = new BlobContainerClientTransferOptions\n{\n    BlobContainerOptions = new BlobStorageResourceContainerOptions\n    {\n        DirectoryPrefix = blobDirectoryPrefix\n    },\n    TransferOptions = new TransferOptions()\n    {\n        CreateMode = StorageResourceCreateMode.Overwrite,\n    }\n};\n\nDataTransfer transfer = await container.StartUploadDirectoryAsync(localPath, options);\n\nawait transfer.AwaitCompletion();\n```\n\nDownload the entire container to a local directory\n```C# Snippet:ExtensionMethodSimpleDownloadContainer\nDataTransfer transfer = await container.StartDownloadToDirectoryAsync(localDirectoryPath);\n\nawait transfer.AwaitCompletion();\n```\n\nDownload a directory in the container by specifying a directory prefix\n```C# Snippet:ExtensionMethodSimpleDownloadContainerDirectory\nDataTransfer tranfer = await container.StartDownloadToDirectoryAsync(localDirectoryPath2, blobDirectoryPrefix);\n\nawait tranfer.AwaitCompletion();\n```\n\nDownload from the container specifying more advanced options\n```C# Snippet:ExtensionMethodSimpleDownloadContainerDirectoryWithOptions\nBlobContainerClientTransferOptions options = new BlobContainerClientTransferOptions\n{\n    BlobContainerOptions = new BlobStorageResourceContainerOptions\n    {\n        DirectoryPrefix = blobDirectoryPrefix\n    },\n    TransferOptions = new TransferOptions()\n    {\n        CreateMode = StorageResourceCreateMode.Overwrite,\n    }\n};\n\nDataTransfer tranfer = await container.StartDownloadToDirectoryAsync(localDirectoryPath2, options);\n\nawait tranfer.AwaitCompletion();\n```\n\n### Examples using BlobContainerClient extension methods to upload and download directories.\n\nCreate Instance of TransferManager with Options\n```C# Snippet:CreateTransferManagerWithOptions\n// Create BlobTransferManager with event handler in Options bag\nTransferManagerOptions transferManagerOptions = new TransferManagerOptions();\nTransferOptions options = new TransferOptions()\n{\n    MaximumTransferChunkSize = 4 * Constants.MB,\n    CreateMode = StorageResourceCreateMode.Overwrite,\n};\nTransferManager transferManager = new TransferManager(transferManagerOptions);\n```\n\nStart Upload from Local File to Block Blob\n```C# Snippet:SimpleBlobUpload\nDataTransfer dataTransfer = await transferManager.StartTransferAsync(\n    sourceResource: new LocalFileStorageResource(sourceLocalPath),\n    destinationResource: new BlockBlobStorageResource(destinationBlob));\nawait dataTransfer.AwaitCompletion();\n```\nApply Options to Block Blob Download\n```C# Snippet:BlockBlobDownloadOptions\nawait transferManager.StartTransferAsync(\n    sourceResource: new BlockBlobStorageResource(sourceBlob, new BlockBlobStorageResourceOptions()\n    {\n        DestinationConditions = new BlobRequestConditions(){ LeaseId = \"xyz\" }\n    }),\n    destinationResource: new LocalFileStorageResource(downloadPath2));\n```\n\nStart Directory Upload\n```C# Snippet:SimpleDirectoryUpload\n// Create simple transfer directory upload job which uploads the directory and the contents of that directory\nDataTransfer dataTransfer = await transferManager.StartTransferAsync(\n    sourceResource: new LocalDirectoryStorageResourceContainer(sourcePath),\n    destinationResource: new BlobStorageResourceContainer(\n        container,\n        new BlobStorageResourceContainerOptions() { DirectoryPrefix = \"sample-directory2\" }),\n    transferOptions: options);\n```\n\nStart Directory Download\n```C# Snippet:SimpleDirectoryDownload\nDataTransfer downloadDirectoryJobId2 = await transferManager.StartTransferAsync(\n    sourceDirectory2,\n    destinationDirectory2);\n```\n\nSimple Logger Sample for Transfer Manager Options\n```C# Snippet:SimpleLoggingSample\n// Create BlobTransferManager with event handler in Options bag\nTransferManagerOptions options = new TransferManagerOptions();\nTransferOptions transferOptions = new TransferOptions();\ntransferOptions.SingleTransferCompleted += (SingleTransferCompletedEventArgs args) =>\n{\n    using (StreamWriter logStream = File.AppendText(logFile))\n    {\n        logStream.WriteLine($\"File Completed Transfer: {args.SourceResource.Path}\");\n    }\n    return Task.CompletedTask;\n};\n```\n\nSimple Failed Event Delegation for Container Transfer Options\n```C# Snippet:FailedEventDelegation\ntransferOptions.TransferFailed += (TransferFailedEventArgs args) =>\n{\n    using (StreamWriter logStream = File.AppendText(logFile))\n    {\n        // Specifying specific resources that failed, since its a directory transfer\n        // maybe only one file failed out of many\n        logStream.WriteLine($\"Exception occured with TransferId: {args.TransferId},\" +\n            $\"Source Resource: {args.SourceResource.Path}, +\" +\n            $\"Destination Resource: {args.DestinationResource.Path},\" +\n            $\"Exception Message: {args.Exception.Message}\");\n    }\n    return Task.CompletedTask;\n};\n```\n\n## Troubleshooting\n\nAll Azure Storage services will throw a [RequestFailedException][RequestFailedException]\nwith helpful [`ErrorCode`s][error_codes].\n\n## Next steps\n\nGet started with our [Blob DataMovement samples][samples].\n\n## Contributing\n\nSee the [Storage CONTRIBUTING.md][storage_contrib] for details on building,\ntesting, and contributing to these libraries.\n\nThis project welcomes contributions and suggestions.  Most contributions require\nyou to agree to a Contributor License Agreement (CLA) declaring that you have\nthe right to, and actually do, grant us the rights to use your contribution. For\ndetails, visit [cla.microsoft.com][cla].\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc].\nFor more information see the [Code of Conduct FAQ][coc_faq]\nor contact [opencode@microsoft.com][coc_contact] with any\nadditional questions or comments.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2Fsdk%2Fstorage%2FAzure.Storage.Common%2FREADME.png)\n\n<!-- LINKS -->\n[source]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/storage/Azure.Storage.Common/src\n[package]: https://www.nuget.org/packages/Azure.Storage.Common/\n[docs]: https://docs.microsoft.com/dotnet/api/azure.storage\n[rest_docs]: https://docs.microsoft.com/rest/api/storageservices/\n[product_docs]: https://docs.microsoft.com/azure/storage/\n[nuget]: https://www.nuget.org/\n[storage_account_docs]: https://docs.microsoft.com/azure/storage/common/storage-account-overview\n[storage_account_create_ps]: https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-powershell\n[storage_account_create_cli]: https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-cli\n[storage_account_create_portal]: https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-portal\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/dotnet/\n[RequestFailedException]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/core/Azure.Core/src/RequestFailedException.cs\n[error_codes]: https://docs.microsoft.com/rest/api/storageservices/common-rest-api-error-codes\n[samples]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/storage/Azure.Storage.DataMovement.Blobs/samples\n[storage_contrib]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/storage/CONTRIBUTING.md\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n",
        "repo_name": "storage/Azure.Storage.DataMovement.Blobs",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/storage/Azure.Storage.DataMovement.Blobs",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Storage Data Movement Common client library for .NET\n\n> Server Version: 2021-02-12, 2020-12-06, 2020-10-02, 2020-08-04, 2020-06-12, 2020-04-08, 2020-02-10, 2019-12-12, 2019-07-07, and 2020-02-02\n\nAzure Storage is a Microsoft-managed service providing cloud storage that is\nhighly available, secure, durable, scalable, and redundant.\n\nThe Azure Storage Data Movement library is optimized for uploading, downloading and\ncopying customer data.\n\nCurrently this version of the Data Movement library only supports Blobs.\n\n[Source code][source] | [API reference documentation][docs] | [REST API documentation][rest_docs] | [Product documentation][product_docs]\n\n## Getting started\n\n### Install the package\n\nInstall the Azure Storage client library for .NET you'd like to use with\n[NuGet][nuget] and the `Azure.Storage.DataMovement` client library will be included:\n\n```dotnetcli\ndotnet add package Azure.Storage.DataMovement --prerelease\n```\n\n### Prerequisites\n\nYou need an [Azure subscription][azure_sub] and a\n[Storage Account][storage_account_docs] to use this package.\n\nTo create a new Storage Account, you can use the [Azure Portal][storage_account_create_portal],\n[Azure PowerShell][storage_account_create_ps], or the [Azure CLI][storage_account_create_cli].\nHere's an example using the Azure CLI:\n\n```Powershell\naz storage account create --name MyStorageAccount --resource-group MyResourceGroup --location westus --sku Standard_LRS\n```\n\n### Authenticate the client\nIn order to interact with the Data Movement library you have to create an instance with the TransferManager class.\n\n### Create Instance of TransferManager\n```C# Snippet:CreateTransferManagerSimple\nTransferManager transferManager = new TransferManager(new TransferManagerOptions());\n```\n\n### Create Instance of TransferManager with Options\n```C# Snippet:CreateTransferManagerWithOptions\n// Create BlobTransferManager with event handler in Options bag\nTransferManagerOptions transferManagerOptions = new TransferManagerOptions();\nTransferOptions options = new TransferOptions()\n{\n    MaximumTransferChunkSize = 4 * Constants.MB,\n    CreateMode = StorageResourceCreateMode.Overwrite,\n};\nTransferManager transferManager = new TransferManager(transferManagerOptions);\n```\n\n## Key concepts\n\nThe Azure Storage Common client library contains shared infrastructure like\n[authentication credentials][auth_credentials] and [RequestFailedException][RequestFailedException].\n\n### Thread safety\nWe guarantee that all client instance methods are thread-safe and independent of each other ([guideline](https://azure.github.io/azure-sdk/dotnet_introduction.html#dotnet-service-methods-thread-safety)). This ensures that the recommendation of reusing client instances is always safe, even across threads.\n\n### Additional concepts\n<!-- CLIENT COMMON BAR -->\n[Client options](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#configuring-service-clients-using-clientoptions) |\n[Accessing the response](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#accessing-http-response-details-using-responset) |\n[Long-running operations](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#consuming-long-running-operations-using-operationt) |\n[Handling failures](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#reporting-errors-requestfailedexception) |\n[Diagnostics](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md) |\n[Mocking](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#mocking) |\n[Client lifetime](https://devblogs.microsoft.com/azure-sdk/lifetime-management-and-thread-safety-guarantees-of-azure-sdk-net-clients/)\n<!-- CLIENT COMMON BAR -->\n\n## Examples\n\nPlease see the examples for [Blobs DataMovement][blobs_examples].\n\nPause a transfer using the TransferManager using the respective DataTransfer object\n```C# Snippet:TransferManagerTryPause_Async\nDataTransfer dataTransfer = await transferManager.StartTransferAsync(\n    sourceResource: sourceResource,\n    destinationResource: destinationResource);\n\n// Pause from the Transfer Manager using the DataTransfer object\nawait transferManager.PauseTransferIfRunningAsync(dataTransfer);\n```\n\nPause a transfer using the TransferManager using the respective transfer ID\n```C# Snippet:TransferManagerTryPauseId_Async\nDataTransfer dataTransfer = await transferManager.StartTransferAsync(\n    sourceResource: sourceResource,\n    destinationResource: destinationResource);\nstring transferId = dataTransfer.Id;\n\n// Pause from the Transfer Manager using the Transfer Id\nawait transferManager.PauseTransferIfRunningAsync(transferId);\n```\n\nPause a transfer using the respective DataTransfer\n```C# Snippet:DataTransferTryPause_Async\nDataTransfer dataTransfer = await transferManager.StartTransferAsync(\n    sourceResource: sourceResource,\n    destinationResource: destinationResource);\n\n// Pause from the DataTransfer object\nawait dataTransfer.PauseIfRunningAsync();\n```\n\nResume a transfer\n```C# Snippet:TransferManagerResume_Async\n// Resume from checkpoint id\nTransferOptions optionsWithResumeTransferId = new TransferOptions()\n{\n    ResumeFromCheckpointId = dataTransfer.Id\n};\n\nDataTransfer resumedTransfer = await transferManager.StartTransferAsync(\n    sourceResource: sourceResource,\n    destinationResource: destinationResource,\n    transferOptions: optionsWithResumeTransferId);\n```\n\n## Troubleshooting\n\nAll Azure Storage services will throw a [RequestFailedException][RequestFailedException]\nwith helpful [`ErrorCode`s][error_codes].\n\n## Next steps\n\nGet started with our [Blob DataMovement samples][samples].\n\n## Contributing\n\nSee the [Storage CONTRIBUTING.md][storage_contrib] for details on building,\ntesting, and contributing to these libraries.\n\nThis project welcomes contributions and suggestions.  Most contributions require\nyou to agree to a Contributor License Agreement (CLA) declaring that you have\nthe right to, and actually do, grant us the rights to use your contribution. For\ndetails, visit [cla.microsoft.com][cla].\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc].\nFor more information see the [Code of Conduct FAQ][coc_faq]\nor contact [opencode@microsoft.com][coc_contact] with any\nadditional questions or comments.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2Fsdk%2Fstorage%2FAzure.Storage.Common%2FREADME.png)\n\n<!-- LINKS -->\n[source]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/storage/Azure.Storage.DataMovement/src\n[docs]: https://docs.microsoft.com/dotnet/api/azure.storage\n[rest_docs]: https://docs.microsoft.com/rest/api/storageservices/\n[product_docs]: https://docs.microsoft.com/azure/storage/\n[nuget]: https://www.nuget.org/\n[storage_account_docs]: https://docs.microsoft.com/azure/storage/common/storage-account-overview\n[storage_account_create_ps]: https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-powershell\n[storage_account_create_cli]: https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-cli\n[storage_account_create_portal]: https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-portal\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/dotnet/\n[auth_credentials]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/storage/Azure.Storage.Common/src/StorageSharedKeyCredential.cs\n[blobs_examples]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/storage/Azure.Storage.DataMovement.Blobs#examples\n[RequestFailedException]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/core/Azure.Core/src/RequestFailedException.cs\n[error_codes]: https://docs.microsoft.com/rest/api/storageservices/common-rest-api-error-codes\n[samples]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/storage/Azure.Storage.DataMovement.Blobs/samples\n[storage_contrib]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/storage/CONTRIBUTING.md\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n",
        "repo_name": "storage/Azure.Storage.DataMovement",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/storage/Azure.Storage.DataMovement",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Storage Files Data Lake client library for .NET\n\n> Server Version: 2021-02-12, 2020-12-06, 2020-10-02, 2020-08-04, 2020-06-12, 2020-04-08, 2020-02-10, 2019-12-12, 2019-07-07, and 2019-02-02\n\nAzure Data Lake includes all the capabilities required to make it easy for developers, data scientists, \nand analysts to store data of any size, shape, and speed, and do all types of processing and analytics \nacross platforms and languages. It removes the complexities of ingesting and storing all of your data\nwhile making it faster to get up and running with batch, streaming, and interactive analytics.\n\n[Source code][source] | [Package (NuGet)][package] | [API reference documentation][docs] | [REST API documentation][rest_docs] | [Product documentation][product_docs]\n\n## Getting started\n\n### Install the package\n\nInstall the Azure Storage Files Data Lake client library for .NET with [NuGet][nuget]:\n\n```dotnetcli\ndotnet add package Azure.Storage.Files.DataLake\n```\n\n### Prerequisites\n\nYou need an [Azure subscription][azure_sub] and a\n[Storage Account][storage_account_docs] to use this package.\n\nTo create a new Storage Account, you can use the [Azure Portal][storage_account_create_portal],\n[Azure PowerShell][storage_account_create_ps], or the [Azure CLI][storage_account_create_cli].\nHere's an example using the Azure CLI:\n\n```Powershell\naz storage account create --name MyStorageAccount --resource-group MyResourceGroup --location westus --sku Standard_LRS\n```\n\n## Key concepts\n\nDataLake Storage Gen2 was designed to:\n- Service multiple petabytes of information while sustaining hundreds of gigabits of throughput\n- Allow you to easily manage massive amounts of data\n\nKey Features of DataLake Storage Gen2 include:\n- Hadoop compatible access\n- A superset of POSIX permissions\n- Cost effective in terms of low-cost storage capacity and transactions\n- Optimized driver for big data analytics\n\nA fundamental part of Data Lake Storage Gen2 is the addition of a hierarchical namespace to Blob storage. The hierarchical namespace organizes objects/files into a hierarchy of directories for efficient data access.\n\nIn the past, cloud-based analytics had to compromise in areas of performance, management, and security. Data Lake Storage Gen2 addresses each of these aspects in the following ways:\n- Performance is optimized because you do not need to copy or transform data as a prerequisite for analysis. The hierarchical namespace greatly improves the performance of directory management operations, which improves overall job performance.\n- Management is easier because you can organize and manipulate files through directories and subdirectories.\n- Security is enforceable because you can define POSIX permissions on directories or individual files.\n- Cost effectiveness is made possible as Data Lake Storage Gen2 is built on top of the low-cost Azure Blob storage. The additional features further lower the total cost of ownership for running big data analytics on Azure.\n\nData Lake Storage Gen2 offers two types of resources:\n\n- The _filesystem_ used via 'DataLakeFileSystemClient'\n- The _path_ used via 'DataLakeFileClient' or 'DataLakeDirectoryClient'\n\n|ADLS Gen2 \t                | Blob       |\n| --------------------------| ---------- |\n|Filesystem                 | Container  | \n|Path (File or Directory)   | Blob       |\n\nNote: This client library does not support hierarchical namespace (HNS) disabled storage accounts.\n\n### Thread safety\nWe guarantee that all client instance methods are thread-safe and independent of each other ([guideline](https://azure.github.io/azure-sdk/dotnet_introduction.html#dotnet-service-methods-thread-safety)). This ensures that the recommendation of reusing client instances is always safe, even across threads.\n\n### Additional concepts\n<!-- CLIENT COMMON BAR -->\n[Client options](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#configuring-service-clients-using-clientoptions) |\n[Accessing the response](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#accessing-http-response-details-using-responset) |\n[Long-running operations](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#consuming-long-running-operations-using-operationt) |\n[Handling failures](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#reporting-errors-requestfailedexception) |\n[Diagnostics](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md) |\n[Mocking](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#mocking) |\n[Client lifetime](https://devblogs.microsoft.com/azure-sdk/lifetime-management-and-thread-safety-guarantees-of-azure-sdk-net-clients/)\n<!-- CLIENT COMMON BAR -->\n\n## Examples\n\n### Create a DataLakeServiceClient\n```C# Snippet:SampleSnippetDataLakeServiceClient_Create\nStorageSharedKeyCredential sharedKeyCredential = new StorageSharedKeyCredential(storageAccountName, storageAccountKey);\n\n// Create DataLakeServiceClient using StorageSharedKeyCredentials\nDataLakeServiceClient serviceClient = new DataLakeServiceClient(serviceUri, sharedKeyCredential);\n```\n\n### Create a DataLakeFileSystemClient\n```C# Snippet:SampleSnippetDataLakeFileSystemClient_Create\nStorageSharedKeyCredential sharedKeyCredential = new StorageSharedKeyCredential(storageAccountName, storageAccountKey);\n\n// Create DataLakeServiceClient using StorageSharedKeyCredentials\nDataLakeServiceClient serviceClient = new DataLakeServiceClient(serviceUri, sharedKeyCredential);\n\n// Create a DataLake Filesystem\nDataLakeFileSystemClient filesystem = serviceClient.GetFileSystemClient(Randomize(\"sample-filesystem\"));\nfilesystem.Create();\n```\n\n### Create a DataLakeDirectoryClient\n```C# Snippet:SampleSnippetDataLakeDirectoryClient_Create\nStorageSharedKeyCredential sharedKeyCredential = new StorageSharedKeyCredential(storageAccountName, storageAccountKey);\n\n// Create DataLakeServiceClient using StorageSharedKeyCredentials\nDataLakeServiceClient serviceClient = new DataLakeServiceClient(serviceUri, sharedKeyCredential);\n\n// Get a reference to a filesystem named \"sample-filesystem-append\" and then create it\nDataLakeFileSystemClient filesystem = serviceClient.GetFileSystemClient(Randomize(\"sample-filesystem-append\"));\nfilesystem.Create();\n\n// Create\nDataLakeDirectoryClient directory = filesystem.GetDirectoryClient(Randomize(\"sample-file\"));\ndirectory.Create();\n```\n\n### Create a DataLakeFileClient\n\nCreate DataLakeFileClient from a DataLakeDirectoryClient\n```C# Snippet:SampleSnippetDataLakeFileClient_Create_Directory\n// Create a DataLake Directory\nDataLakeDirectoryClient directory = filesystem.CreateDirectory(Randomize(\"sample-directory\"));\ndirectory.Create();\n\n// Create a DataLake File using a DataLake Directory\nDataLakeFileClient file = directory.GetFileClient(Randomize(\"sample-file\"));\nfile.Create();\n```\n\nCreate DataLakeFileClient from a DataLakeFileSystemClient\n```C# Snippet:SampleSnippetDataLakeFileClient_Create\n// Create a DataLake Filesystem\nDataLakeFileSystemClient filesystem = serviceClient.GetFileSystemClient(Randomize(\"sample-filesystem\"));\nfilesystem.Create();\n\n// Create a DataLake file using a DataLake Filesystem\nDataLakeFileClient file = filesystem.GetFileClient(Randomize(\"sample-file\"));\nfile.Create();\n```\n\n### Appending Data to a DataLake File\n```C# Snippet:SampleSnippetDataLakeFileClient_Append\n// Create a file\nDataLakeFileClient file = filesystem.GetFileClient(Randomize(\"sample-file\"));\nfile.Create();\n\n// Append data to the DataLake File\nfile.Append(File.OpenRead(sampleFilePath), 0);\nfile.Flush(SampleFileContent.Length);\n```\n\n### Reading Data from a DataLake File\n```C# Snippet:SampleSnippetDataLakeFileClient_Read\nResponse<FileDownloadInfo> fileContents = file.Read();\n```\n\n### Listing/Traversing through a DataLake Filesystem\n```C# Snippet:SampleSnippetDataLakeFileClient_List\nforeach (PathItem pathItem in filesystem.GetPaths())\n{\n    names.Add(pathItem.Name);\n}\n```\n\n### Set Permissions on a DataLake File\n```C# Snippet:SampleSnippetDataLakeFileClient_SetPermissions\n// Create a DataLake file so we can set the Access Controls on the files\nDataLakeFileClient fileClient = filesystem.GetFileClient(Randomize(\"sample-file\"));\nfileClient.Create();\n\n// Set the Permissions of the file\nPathPermissions pathPermissions = PathPermissions.ParseSymbolicPermissions(\"rwxrwxrwx\");\nfileClient.SetPermissions(permissions: pathPermissions);\n```\n\n### Set Access Controls (ACLs) on a DataLake File\n```C# Snippet:SampleSnippetDataLakeFileClient_SetAcls\n// Create a DataLake file so we can set the Access Controls on the files\nDataLakeFileClient fileClient = filesystem.GetFileClient(Randomize(\"sample-file\"));\nfileClient.Create();\n\n// Set Access Control List\nIList<PathAccessControlItem> accessControlList\n    = PathAccessControlExtensions.ParseAccessControlList(\"user::rwx,group::r--,mask::rwx,other::---\");\nfileClient.SetAccessControlList(accessControlList);\n```\n\n### Get Access Controls (ACLs) on a DataLake File\n```C# Snippet:SampleSnippetDataLakeFileClient_GetAcls\n// Get Access Control List\nPathAccessControl accessControlResponse = fileClient.GetAccessControl();\n```\n\n### Rename a DataLake File\n```C# Snippet:SampleSnippetDataLakeFileClient_RenameFile\nDataLakeFileClient renamedFileClient = fileClient.Rename(\"sample-file2\");\n```\n\n### Rename a DataLake Directory\n```C# Snippet:SampleSnippetDataLakeFileClient_RenameDirectory\nDataLakeDirectoryClient renamedDirectoryClient = directoryClient.Rename(\"sample-directory2\");\n```\n\n### Get Properties on a DataLake File\n```C# Snippet:SampleSnippetDataLakeFileClient_GetProperties\n// Get Properties on a File\nPathProperties filePathProperties = fileClient.GetProperties();\n```\n### Get Properties on a DataLake Directory\n```C# Snippet:SampleSnippetDataLakeDirectoryClient_GetProperties\n// Get Properties on a Directory\nPathProperties directoryPathProperties = directoryClient.GetProperties();\n```\n\n## Troubleshooting\n\nAll File DataLake service operations will throw a\n[RequestFailedException][RequestFailedException] on failure with\nhelpful [`ErrorCode`s][error_codes].  Many of these errors are recoverable.\n\n## Next steps\n\nGet started with our [DataLake samples][samples]:\n\n1. [Hello World](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/storage/Azure.Storage.Files.DataLake/samples/Sample01a_HelloWorld.cs): Append, Read, and List DataLake Files (or [asynchronously](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/storage/Azure.Storage.Files.DataLake/samples/Sample01b_HelloWorldAsync.cs))\n2. [Auth](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/storage/Azure.Storage.Files.DataLake/samples/Sample02_Auth.cs): Authenticate with public access, shared keys, shared access signatures, and Azure Active Directory.\n\n## Contributing\n\nSee the [Storage CONTRIBUTING.md][storage_contrib] for details on building,\ntesting, and contributing to this library.\n\nThis project welcomes contributions and suggestions.  Most contributions require\nyou to agree to a Contributor License Agreement (CLA) declaring that you have\nthe right to, and actually do, grant us the rights to use your contribution. For\ndetails, visit [cla.microsoft.com][cla].\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc].\nFor more information see the [Code of Conduct FAQ][coc_faq]\nor contact [opencode@microsoft.com][coc_contact] with any\nadditional questions or comments.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2Fsdk%2Fstorage%2FAzure.Storage.Files.DataLake%2FREADME.png)\n\n<!-- LINKS -->\n[samples]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/storage/Azure.Storage.Files.DataLake/samples\n[source]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/storage/Azure.Storage.Files.DataLake/src\n[package]: https://www.nuget.org/packages/Azure.Storage.Files.DataLake/\n[docs]: https://docs.microsoft.com/dotnet/api/azure.storage.files.datalake\n[rest_docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/filesystem\n[product_docs]: https://docs.microsoft.com/azure/storage/blobs/?toc=%2fazure%2fstorage%2fblobs%2ftoc.json\n[nuget]: https://www.nuget.org/\n[storage_account_docs]: https://docs.microsoft.com/azure/storage/common/storage-account-overview\n[storage_account_create_ps]: https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-powershell\n[storage_account_create_cli]: https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-cli\n[storage_account_create_portal]: https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-portal\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/dotnet/\n[identity]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/identity/Azure.Identity/README.md\n[RequestFailedException]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/core/Azure.Core/src/RequestFailedException.cs\n[error_codes]: https://docs.microsoft.com/rest/api/storageservices/blob-service-error-codes\n[storage_contrib]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/storage/CONTRIBUTING.md\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n[https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/storage/Azure.Storage.Files.DataLake/samples]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/storage/Azure.Storage.Files.DataLake/samples\n",
        "repo_name": "storage/Azure.Storage.Files.DataLake",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/storage/Azure.Storage.Files.DataLake",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Storage File Shares client library for .NET\n\n> Server Version: 2021-02-12, 2020-12-06, 2020-10-02, 2020-08-04, 2020-06-12, 2020-04-08, 2020-02-10, 2019-12-12, 2019-07-07, and 2019-02-02\n\nAzure File Shares offers fully managed file shares in the cloud that are accessible\nvia the industry standard Server Message Block (SMB) protocol. Azure file\nshares can be mounted concurrently by cloud or on-premises deployments of\nWindows, Linux, and macOS. Additionally, Azure file shares can be cached on\nWindows Servers with Azure File Sync for fast access near where the data is\nbeing used.\n\n[Source code][source] | [Package (NuGet)][package] | [API reference documentation][docs] | [REST API documentation][rest_docs] | [Product documentation][product_docs]\n\n## Getting started\n\n### Install the package\n\nInstall the Azure Storage File Shares client library for .NET with [NuGet][nuget]:\n\n```dotnetcli\ndotnet add package Azure.Storage.Files.Shares\n```\n\n### Prerequisites\n\nYou need an [Azure subscription][azure_sub] and a\n[Storage Account][storage_account_docs] to use this package.\n\nTo create a new Storage Account, you can use the [Azure Portal][storage_account_create_portal],\n[Azure PowerShell][storage_account_create_ps], or the [Azure CLI][storage_account_create_cli].\nHere's an example using the Azure CLI:\n\n```Powershell\naz storage account create --name MyStorageAccount --resource-group MyResourceGroup --location westus --sku Standard_LRS\n```\n\n## Key concepts\n\nAzure file shares can be used to:\n\n- Completely replace or supplement traditional on-premises file servers or NAS devices.\n- \"Lift and shift\" applications to the cloud that expect a file share to store file application or user data.\n- Simplify new cloud development projects with shared application settings, diagnostic shares, and Dev/Test/Debug tool file shares.\n\n### Thread safety\nWe guarantee that all client instance methods are thread-safe and independent of each other ([guideline](https://azure.github.io/azure-sdk/dotnet_introduction.html#dotnet-service-methods-thread-safety)). This ensures that the recommendation of reusing client instances is always safe, even across threads.\n\n### Additional concepts\n<!-- CLIENT COMMON BAR -->\n[Client options](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#configuring-service-clients-using-clientoptions) |\n[Accessing the response](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#accessing-http-response-details-using-responset) |\n[Long-running operations](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#consuming-long-running-operations-using-operationt) |\n[Handling failures](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#reporting-errors-requestfailedexception) |\n[Diagnostics](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md) |\n[Mocking](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#mocking) |\n[Client lifetime](https://devblogs.microsoft.com/azure-sdk/lifetime-management-and-thread-safety-guarantees-of-azure-sdk-net-clients/)\n<!-- CLIENT COMMON BAR -->\n\n## Examples\n\n### Create a share and upload a file\n\n```C# Snippet:Azure_Storage_Files_Shares_Samples_Sample01a_HelloWorld_Upload\n// Get a connection string to our Azure Storage account.  You can\n// obtain your connection string from the Azure Portal (click\n// Access Keys under Settings in the Portal Storage account blade)\n// or using the Azure CLI with:\n//\n//     az storage account show-connection-string --name <account_name> --resource-group <resource_group>\n//\n// And you can provide the connection string to your application\n// using an environment variable.\nstring connectionString = \"<connection_string>\";\n\n// Name of the share, directory, and file we'll create\nstring shareName = \"sample-share\";\nstring dirName = \"sample-dir\";\nstring fileName = \"sample-file\";\n\n// Path to the local file to upload\nstring localFilePath = @\"<path_to_local_file>\";\n\n// Get a reference to a share and then create it\nShareClient share = new ShareClient(connectionString, shareName);\nshare.Create();\n\n// Get a reference to a directory and create it\nShareDirectoryClient directory = share.GetDirectoryClient(dirName);\ndirectory.Create();\n\n// Get a reference to a file and upload it\nShareFileClient file = directory.GetFileClient(fileName);\nusing (FileStream stream = File.OpenRead(localFilePath))\n{\n    file.Create(stream.Length);\n    file.UploadRange(\n        new HttpRange(0, stream.Length),\n        stream);\n}\n```\n\n### Download a file\n\n```C# Snippet:Azure_Storage_Files_Shares_Samples_Sample01a_HelloWorld_Download\nstring connectionString = \"<connection_string>\";\n\n// Name of the share, directory, and file we'll download from\nstring shareName = \"sample-share\";\nstring dirName = \"sample-dir\";\nstring fileName = \"sample-file\";\n\n// Path to the save the downloaded file\nstring localFilePath = @\"<path_to_local_file>\";\n\n// Get a reference to the file\nShareClient share = new ShareClient(connectionString, shareName);\nShareDirectoryClient directory = share.GetDirectoryClient(dirName);\nShareFileClient file = directory.GetFileClient(fileName);\n\n// Download the file\nShareFileDownloadInfo download = file.Download();\nusing (FileStream stream = File.OpenWrite(localFilePath))\n{\n    download.Content.CopyTo(stream);\n}\n```\n\n### Traverse a share\n\n```C# Snippet:Azure_Storage_Files_Shares_Samples_Sample01a_HelloWorld_Traverse\n// Connect to the share\nstring connectionString = \"<connection_string>\";\nstring shareName = \"sample-share\";\nShareClient share = new ShareClient(connectionString, shareName);\n\n// Track the remaining directories to walk, starting from the root\nvar remaining = new Queue<ShareDirectoryClient>();\nremaining.Enqueue(share.GetRootDirectoryClient());\nwhile (remaining.Count > 0)\n{\n    // Get all of the next directory's files and subdirectories\n    ShareDirectoryClient dir = remaining.Dequeue();\n    foreach (ShareFileItem item in dir.GetFilesAndDirectories())\n    {\n        // Print the name of the item\n        Console.WriteLine(item.Name);\n\n        // Keep walking down directories\n        if (item.IsDirectory)\n        {\n            remaining.Enqueue(dir.GetSubdirectoryClient(item.Name));\n        }\n    }\n}\n```\n\n### Async APIs\n\nWe fully support both synchronous and asynchronous APIs.\n\n```C# Snippet:Azure_Storage_Files_Shares_Samples_Sample01b_HelloWorldAsync_DownloadAsync\nstring connectionString = \"<connection_string>\";\n\n// Name of the share, directory, and file we'll download from\nstring shareName = \"sample-share\";\nstring dirName = \"sample-dir\";\nstring fileName = \"sample-file\";\n\n// Path to the save the downloaded file\nstring localFilePath = @\"<path_to_local_file>\";\n\n// Get a reference to the file\nShareClient share = new ShareClient(connectionString, shareName);\nShareDirectoryClient directory = share.GetDirectoryClient(dirName);\nShareFileClient file = directory.GetFileClient(fileName);\n\n// Download the file\nShareFileDownloadInfo download = await file.DownloadAsync();\nusing (FileStream stream = File.OpenWrite(localFilePath))\n{\n    await download.Content.CopyToAsync(stream);\n}\n```\n\n## Troubleshooting\n\nAll Azure Storage File Shares service operations will throw a\n[RequestFailedException][RequestFailedException] on failure with\nhelpful [`ErrorCode`s][error_codes].  Many of these errors are recoverable.\n\n```C# Snippet:Azure_Storage_Files_Shares_Samples_Sample01a_HelloWorld_Errors\n// Connect to the existing share\nstring connectionString = \"<connection_string>\";\nstring shareName = \"sample-share\";\nShareClient share = new ShareClient(connectionString, shareName);\n\ntry\n{\n    // Try to create the share again\n    share.Create();\n}\ncatch (RequestFailedException ex)\n    when (ex.ErrorCode == ShareErrorCode.ShareAlreadyExists)\n{\n    // Ignore any errors if the share already exists\n}\n```\n\n## Next steps\n\nGet started with our [File samples][samples]:\n\n1. [Hello World](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/storage/Azure.Storage.Files.Shares/samples/Sample01a_HelloWorld.cs): Upload files, download files, and traverse shares (or [asynchronously](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/storage/Azure.Storage.Files.Shares/samples/Sample01b_HelloWorldAsync.cs))\n2. [Auth](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/storage/Azure.Storage.Files.Shares/samples/Sample02_Auth.cs): Authenticate with connection strings, shared keys, and shared access signatures.\n\n## Contributing\n\nSee the [Storage CONTRIBUTING.md][storage_contrib] for details on building,\ntesting, and contributing to this library.\n\nThis project welcomes contributions and suggestions.  Most contributions require\nyou to agree to a Contributor License Agreement (CLA) declaring that you have\nthe right to, and actually do, grant us the rights to use your contribution. For\ndetails, visit [cla.microsoft.com][cla].\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc].\nFor more information see the [Code of Conduct FAQ][coc_faq]\nor contact [opencode@microsoft.com][coc_contact] with any\nadditional questions or comments.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2Fsdk%2Fstorage%2FAzure.Storage.Files.Shares%2FREADME.png)\n\n<!-- LINKS -->\n[source]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/storage/Azure.Storage.Files.Shares/src\n[package]: https://www.nuget.org/packages/Azure.Storage.Files.Shares/\n[docs]: https://docs.microsoft.com/dotnet/api/azure.storage.files.shares\n[rest_docs]: https://docs.microsoft.com/rest/api/storageservices/file-service-rest-api\n[product_docs]: https://docs.microsoft.com/azure/storage/files/storage-files-introduction\n[nuget]: https://www.nuget.org/\n[storage_account_docs]: https://docs.microsoft.com/azure/storage/common/storage-account-overview\n[storage_account_create_ps]: https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-powershell\n[storage_account_create_cli]: https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-cli\n[storage_account_create_portal]: https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-portal\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/dotnet/\n[RequestFailedException]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/core/Azure.Core/src/RequestFailedException.cs\n[error_codes]: https://docs.microsoft.com/rest/api/storageservices/file-service-error-codes\n[samples]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/storage/Azure.Storage.Files.Shares/samples/\n[storage_contrib]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/storage/CONTRIBUTING.md\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n",
        "repo_name": "storage/Azure.Storage.Files.Shares",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/storage/Azure.Storage.Files.Shares",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Storage Internal Avro client library for .NET\n- For internal use only.\n\n## Getting started\n- For internal use only.\n\n### Install the package\n- For internal use only.\n\n### Prerequisites\n- For internal use only.\n\n### Authenticate the Client\n- For internal use only.\n\n## Key concepts\n- For internal use only.\n\n## Examples\n- For internal use only.\n\n## Troubleshooting\n- For internal use only.\n\n## Next steps\n- For internal use only.\n\n## Contributing\n- For internal use only.",
        "repo_name": "storage/Azure.Storage.Internal.Avro",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/storage/Azure.Storage.Internal.Avro",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Storage Queues client library for .NET\n\n> Server Version: 2021-02-12, 2020-12-06, 2020-10-02, 2020-08-04, 2020-06-12, 2020-04-08, 2020-02-10, 2019-12-12, 2019-07-07, and 2019-02-02\n\nAzure Queue storage is a service for storing large numbers of messages that \ncan be accessed from anywhere in the world via authenticated calls using\nHTTP or HTTPS.  A single queue message can be up to 64 KB in size, and a\nqueue can contain millions of messages, up to the total capacity limit of\na storage account.\n\n[Source code][source] | [Package (NuGet)][package] | [API reference documentation][docs] | [REST API documentation][rest_docs] | [Product documentation][product_docs]\n\n## Getting started\n\n### Install the package\n\nInstall the Azure Storage Queues client library for .NET with [NuGet][nuget]:\n\n```dotnetcli\ndotnet add package Azure.Storage.Queues\n```\n\n### Prerequisites\n\nYou need an [Azure subscription][azure_sub] and a\n[Storage Account][storage_account_docs] to use this package.\n\nTo create a new Storage Account, you can use the [Azure Portal][storage_account_create_portal],\n[Azure PowerShell][storage_account_create_ps], or the [Azure CLI][storage_account_create_cli].\nHere's an example using the Azure CLI:\n\n```Powershell\naz storage account create --name MyStorageAccount --resource-group MyResourceGroup --location westus --sku Standard_LRS\n```\n\n### Authenticate the client\n\nIn order to interact with the Azure Queue Storage service, you'll need to create an instance of the QueueClient class.  The [Azure Identity library][identity] makes it easy to add Azure Active Directory support for authenticating Azure SDK clients with their corresponding Azure services.\n\n```C# Snippet:Azure_Storage_Queues_Samples_Sample01a_HelloWorld_IdentityAuth\n// Create a QueueClient that will authenticate through Active Directory\nUri queueUri = new Uri(\"https://MYSTORAGEACCOUNT.queue.core.windows.net/QUEUENAME\");\nQueueClient queue = new QueueClient(queueUri, new DefaultAzureCredential());\n```\n\nLearn more about enabling Azure Active Directory for authentication with Azure Storage in [our documentation][storage_ad] and [our samples](#next-steps).\n\n## Key concepts\n\nCommon uses of Queue storage include:\n\n- Creating a backlog of work to process asynchronously\n- Passing messages between different parts of a distributed application\n\n### Thread safety\nWe guarantee that all client instance methods are thread-safe and independent of each other ([guideline](https://azure.github.io/azure-sdk/dotnet_introduction.html#dotnet-service-methods-thread-safety)). This ensures that the recommendation of reusing client instances is always safe, even across threads.\n\n### Additional concepts\n<!-- CLIENT COMMON BAR -->\n[Client options](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#configuring-service-clients-using-clientoptions) |\n[Accessing the response](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#accessing-http-response-details-using-responset) |\n[Long-running operations](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#consuming-long-running-operations-using-operationt) |\n[Handling failures](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#reporting-errors-requestfailedexception) |\n[Diagnostics](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md) |\n[Mocking](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#mocking) |\n[Client lifetime](https://devblogs.microsoft.com/azure-sdk/lifetime-management-and-thread-safety-guarantees-of-azure-sdk-net-clients/)\n<!-- CLIENT COMMON BAR -->\n\n## Examples\n\n### Send messages\n\n```C# Snippet:Azure_Storage_Queues_Samples_Sample01a_HelloWorld_SendMessage\n// We'll need a connection string to your Azure Storage account.\n// You can obtain your connection string from the Azure Portal\n// (click Access Keys under Settings in the Portal Storage account\n// blade) or using the Azure CLI with:\n//\n//     az storage account show-connection-string --name <account_name> --resource-group <resource_group>\n//\n// You would normally provide the connection string to your\n// application using an environment variable.\nstring connectionString = \"<connection_string>\";\n\n// Name of the queue we'll send messages to\nstring queueName = \"sample-queue\";\n\n// Get a reference to a queue and then create it\nQueueClient queue = new QueueClient(connectionString, queueName);\nqueue.Create();\n\n// Send a message to our queue\nqueue.SendMessage(\"Hello, Azure!\");\n```\n\n### Receive messages\n\n```C# Snippet:Azure_Storage_Queues_Samples_Sample01a_HelloWorld_ReceiveMessages\n// We'll need a connection string to your Azure Storage account.\nstring connectionString = \"<connection_string>\";\n\n// Name of an existing queue we'll operate on\nstring queueName = \"sample-queue\";\n\n// Get a reference to a queue and then fill it with messages\nQueueClient queue = new QueueClient(connectionString, queueName);\nqueue.SendMessage(\"first\");\nqueue.SendMessage(\"second\");\nqueue.SendMessage(\"third\");\n\n// Get the next messages from the queue\nforeach (QueueMessage message in queue.ReceiveMessages(maxMessages: 10).Value)\n{\n    // \"Process\" the message\n    Console.WriteLine($\"Message: {message.Body}\");\n\n    // Let the service know we're finished with the message and\n    // it can be safely deleted.\n    queue.DeleteMessage(message.MessageId, message.PopReceipt);\n}\n```\n\n### Async APIs\n\nWe fully support both synchronous and asynchronous APIs.\n\n```C# Snippet:Azure_Storage_Queues_Samples_Sample01b_HelloWorld_SendMessageAsync\n// We'll need a connection string to your Azure Storage account.\nstring connectionString = \"<connection_string>\";\n\n// Name of the queue we'll send messages to\nstring queueName = \"sample-queue\";\n\n// Get a reference to a queue and then create it\nQueueClient queue = new QueueClient(connectionString, queueName);\nawait queue.CreateAsync();\n\n// Send a message to our queue\nawait queue.SendMessageAsync(\"Hello, Azure!\");\n```\n\n### Message encoding\n\nThis version of library does not encode message by default. V11 and prior versions as well as Azure Functions use base64-encoded messages by default.\nTherefore it's recommended to use this feature for interop scenarios.\n\n```C# Snippet:Azure_Storage_Queues_Samples_Sample03_MessageEncoding_ConfigureMessageEncodingAsync\nQueueClientOptions queueClientOptions = new QueueClientOptions()\n{\n    MessageEncoding = QueueMessageEncoding.Base64\n};\n\nQueueClient queueClient = new QueueClient(connectionString, queueName, queueClientOptions);\n```\n\n## Troubleshooting\n\nAll Azure Storage Queue service operations will throw a\n[RequestFailedException][RequestFailedException] on failure with\nhelpful [`ErrorCode`s][error_codes].  Many of these errors are recoverable.\n\n```C# Snippet:Azure_Storage_Queues_Samples_Sample01a_HelloWorld_Errors\n// We'll need a connection string to your Azure Storage account.\nstring connectionString = \"<connection_string>\";\n\n// Name of an existing queue we'll operate on\nstring queueName = \"sample-queue\";\n\ntry\n{\n    // Try to create a queue that already exists\n    QueueClient queue = new QueueClient(connectionString, queueName);\n    queue.Create();\n}\ncatch (RequestFailedException ex)\n    when (ex.ErrorCode == QueueErrorCode.QueueAlreadyExists)\n{\n    // Ignore any errors if the queue already exists\n}\n```\n\n## Next steps\n\nGet started with our [Queue samples][samples]:\n\n1. [Hello World](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/storage/Azure.Storage.Queues/samples/Sample01a_HelloWorld.cs): Enqueue, Dequeue, Peek, and Update queue messages (or [asynchronously](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/storage/Azure.Storage.Queues/samples/Sample01b_HelloWorldAsync.cs))\n2. [Auth](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/storage/Azure.Storage.Queues/samples/Sample02_Auth.cs): Authenticate with connection strings, shared keys, shared access signatures, and Azure Active Directory.\n\n## Contributing\n\nSee the [Storage CONTRIBUTING.md][storage_contrib] for details on building,\ntesting, and contributing to this library.\n\nThis project welcomes contributions and suggestions.  Most contributions require\nyou to agree to a Contributor License Agreement (CLA) declaring that you have\nthe right to, and actually do, grant us the rights to use your contribution. For\ndetails, visit [cla.microsoft.com][cla].\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc].\nFor more information see the [Code of Conduct FAQ][coc_faq]\nor contact [opencode@microsoft.com][coc_contact] with any\nadditional questions or comments.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2Fsdk%2Fstorage%2FAzure.Storage.Queues%2FREADME.png)\n\n<!-- LINKS -->\n[source]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/storage/Azure.Storage.Queues/src\n[package]: https://www.nuget.org/packages/Azure.Storage.Queues/\n[docs]: https://docs.microsoft.com/dotnet/api/azure.storage.queues\n[rest_docs]: https://docs.microsoft.com/rest/api/storageservices/queue-service-rest-api\n[product_docs]: https://docs.microsoft.com/azure/storage/queues/storage-queues-introduction\n[nuget]: https://www.nuget.org/\n[storage_account_docs]: https://docs.microsoft.com/azure/storage/common/storage-account-overview\n[storage_account_create_ps]: https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-powershell\n[storage_account_create_cli]: https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-cli\n[storage_account_create_portal]: https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-portal\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/dotnet/\n[identity]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/identity/Azure.Identity/README.md\n[storage_ad]: https://docs.microsoft.com/azure/storage/common/storage-auth-aad\n[storage_ad_sample]: samples/Sample02c_Auth_ActiveDirectory.cs\n[RequestFailedException]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/core/Azure.Core/src/RequestFailedException.cs\n[error_codes]: https://docs.microsoft.com/rest/api/storageservices/queue-service-error-codes\n[samples]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/storage/Azure.Storage.Queues/samples/\n[storage_contrib]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/storage/CONTRIBUTING.md\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n",
        "repo_name": "storage/Azure.Storage.Queues",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/storage/Azure.Storage.Queues",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure WebJobs Storage Blobs client library for .NET\n\nThis extension provides functionality for accessing Azure Storage Blobs in Azure Functions.\n\n## Getting started\n\n### Install the package\n\nInstall the Storage Blobs extension with [NuGet][nuget]:\n\n```dotnetcli\ndotnet add package Microsoft.Azure.WebJobs.Extensions.Storage.Blobs\n```\n\n### Prerequisites\n\nYou need an [Azure subscription][azure_sub] and a\n[Storage Account][storage_account_docs] to use this package.\n\nTo create a new Storage Account, you can use the [Azure Portal][storage_account_create_portal],\n[Azure PowerShell][storage_account_create_ps], or the [Azure CLI][storage_account_create_cli].\nHere's an example using the Azure CLI:\n\n```Powershell\naz storage account create --name <your-resource-name> --resource-group <your-resource-group-name> --location westus --sku Standard_LRS\n```\n\n### Authenticate the client\n\nIn order for the extension to access Blobs, you will need the connection string which can be found in the [Azure Portal](https://portal.azure.com/) or by using the [Azure CLI](https://docs.microsoft.com/cli/azure) snippet below.\n\n```bash\naz storage account show-connection-string -g <your-resource-group-name> -n <your-resource-name>\n```\n\nThe connection string can be supplied through [AzureWebJobsStorage app setting](https://docs.microsoft.com/azure/azure-functions/functions-app-settings).\n\n## Key concepts\n\n### Using Blob trigger\n\nThe Blob storage trigger starts a function when a new or updated blob is detected. The blob contents are provided as input to the function.\n\nPlease follow the [tutorial](https://docs.microsoft.com/azure/azure-functions/functions-bindings-storage-blob-trigger?tabs=csharp) to learn about triggering an Azure Function when a blob is modified.\n\n#### Listening strategies\n\nBlob trigger offers handful of strategies when it comes to listening to blob creation and modification. The strategy can be customized by specifying `Source` property of the `BlobTrigger` (see examples below).\n\n#### Default strategy\n\nBy default blob trigger uses [polling](https://docs.microsoft.com/azure/azure-functions/functions-bindings-storage-blob-trigger?tabs=csharp#polling) which works as a hybrid between inspecting [Azure Storage analytics logging](https://docs.microsoft.com/azure/storage/common/storage-analytics-logging?tabs=dotnet) and running periodic container scans.\nBlobs are scanned in groups of 10,000 at a time with a continuation token used between intervals.\n\n[Azure Storage analytics logging](https://docs.microsoft.com/azure/storage/common/storage-analytics-logging?tabs=dotnet) is not enabled by default, see [Azure Storage analytics logging](https://docs.microsoft.com/azure/storage/common/storage-analytics-logging?tabs=dotnet) for how to enable it.\n\nThis strategy is not recommended for high-scale applications or scenarios that require low latency.\n\n#### Event grid\n\n[Blob storage events](https://docs.microsoft.com/azure/storage/blobs/storage-blob-event-overview) can be used to listen for changes. This strategy requires [additional setup](https://docs.microsoft.com/azure/event-grid/blob-event-quickstart-portal?toc=/azure/storage/blobs/toc.json).\n\nThis strategy is recommended for high-scale applications.\n\n### Using Blob binding\n\nThe input binding allows you to read blob storage data as input to an Azure Function. The output binding allows you to modify and delete blob storage data in an Azure Function.\n\nPlease follow the [input binding tutorial](https://docs.microsoft.com/azure/azure-functions/functions-bindings-storage-blob-input?tabs=csharp) and [output binding tutorial](https://docs.microsoft.com/azure/azure-functions/functions-bindings-storage-blob-output?tabs=csharp) to learn about using this extension for accessing Blobs.\n\n## Examples\n\n### Reacting to blob change\n\n#### Default strategy\n\n```C# Snippet:BlobFunction_ReactToBlobChange\npublic static class BlobFunction_ReactToBlobChange\n{\n    [FunctionName(\"BlobFunction\")]\n    public static void Run(\n        [BlobTrigger(\"sample-container/sample-blob\")] Stream blobStream,\n        ILogger logger)\n    {\n        using var blobStreamReader = new StreamReader(blobStream);\n        logger.LogInformation(\"Blob sample-container/sample-blob has been updated with content: {content}\", blobStreamReader.ReadToEnd());\n    }\n}\n```\n\n#### Event Grid strategy\n\n```C# Snippet:BlobFunction_ReactToBlobChange_EventGrid\npublic static class BlobFunction_ReactToBlobChange_EventGrid\n{\n    [FunctionName(\"BlobFunction\")]\n    public static void Run(\n        [BlobTrigger(\"sample-container/sample-blob\", Source = BlobTriggerSource.EventGrid)] Stream blobStream,\n        ILogger logger)\n    {\n        using var blobStreamReader = new StreamReader(blobStream);\n        logger.LogInformation(\"Blob sample-container/sample-blob has been updated with content: {content}\", blobStreamReader.ReadToEnd());\n    }\n}\n```\n\n### Reading from stream\n\n```C# Snippet:BlobFunction_ReadStream\npublic static class BlobFunction_ReadStream\n{\n    [FunctionName(\"BlobFunction\")]\n    public static void Run(\n        [BlobTrigger(\"sample-container/sample-blob-1\")] Stream blobStream1,\n        [Blob(\"sample-container/sample-blob-2\", FileAccess.Read)] Stream blobStream2,\n        ILogger logger)\n    {\n        using var blobStreamReader1 = new StreamReader(blobStream1);\n        logger.LogInformation(\"Blob sample-container/sample-blob-1 has been updated with content: {content}\", blobStreamReader1.ReadToEnd());\n        using var blobStreamReader2 = new StreamReader(blobStream2);\n        logger.LogInformation(\"Blob sample-container/sample-blob-2 has content: {content}\", blobStreamReader2.ReadToEnd());\n    }\n}\n```\n\n### Writing to stream\n\n```C# Snippet:BlobFunction_WriteStream\npublic static class BlobFunction_WriteStream\n{\n    [FunctionName(\"BlobFunction\")]\n    public static async Task Run(\n        [BlobTrigger(\"sample-container/sample-blob-1\")] Stream blobStream1,\n        [Blob(\"sample-container/sample-blob-2\", FileAccess.Write)] Stream blobStream2,\n        ILogger logger)\n    {\n        await blobStream1.CopyToAsync(blobStream2);\n        logger.LogInformation(\"Blob sample-container/sample-blob-1 has been copied to sample-container/sample-blob-2\");\n    }\n}\n```\n\n### Binding to string\n\n```C# Snippet:BlobFunction_String\npublic static class BlobFunction_String\n{\n    [FunctionName(\"BlobFunction\")]\n    public static void Run(\n        [BlobTrigger(\"sample-container/sample-blob-1\")] string blobContent1,\n        [Blob(\"sample-container/sample-blob-2\")] string blobContent2,\n        ILogger logger)\n    {\n        logger.LogInformation(\"Blob sample-container/sample-blob-1 has been updated with content: {content}\", blobContent1);\n        logger.LogInformation(\"Blob sample-container/sample-blob-2 has content: {content}\", blobContent2);\n    }\n}\n```\n\n### Writing string to blob\n\n```C# Snippet:BlobFunction_String_Write\npublic static class BlobFunction_String_Write\n{\n    [FunctionName(\"BlobFunction\")]\n    public static void Run(\n        [BlobTrigger(\"sample-container/sample-blob-1\")] string blobContent1,\n        [Blob(\"sample-container/sample-blob-2\")] out string blobContent2,\n        ILogger logger)\n    {\n        logger.LogInformation(\"Blob sample-container/sample-blob-1 has been updated with content: {content}\", blobContent1);\n        blobContent2 = blobContent1;\n        logger.LogInformation(\"Blob sample-container/sample-blob-1 has been copied to sample-container/sample-blob-2\");\n    }\n}\n```\n\n### Binding to byte array\n\n```C# Snippet:BlobFunction_ByteArray\npublic static class BlobFunction_ByteArray\n{\n    [FunctionName(\"BlobFunction\")]\n    public static void Run(\n        [BlobTrigger(\"sample-container/sample-blob-1\")] byte[] blobContent1,\n        [Blob(\"sample-container/sample-blob-2\")] byte[] blobContent2,\n        ILogger logger)\n    {\n        logger.LogInformation(\"Blob sample-container/sample-blob-1 has been updated with content: {content}\", Encoding.UTF8.GetString(blobContent1));\n        logger.LogInformation(\"Blob sample-container/sample-blob-2 has content: {content}\", Encoding.UTF8.GetString(blobContent2));\n    }\n}\n```\n\n### Writing byte array to blob\n\n```C# Snippet:BlobFunction_ByteArray_Write\npublic static class BlobFunction_ByteArray_Write\n{\n    [FunctionName(\"BlobFunction\")]\n    public static void Run(\n        [BlobTrigger(\"sample-container/sample-blob-1\")] byte[] blobContent1,\n        [Blob(\"sample-container/sample-blob-2\")] out byte[] blobContent2,\n        ILogger logger)\n    {\n        logger.LogInformation(\"Blob sample-container/sample-blob-1 has been updated with content: {content}\", Encoding.UTF8.GetString(blobContent1));\n        blobContent2 = blobContent1;\n        logger.LogInformation(\"Blob sample-container/sample-blob-1 has been copied to sample-container/sample-blob-2\");\n    }\n}\n```\n\n### Binding to TextReader and TextWriter\n\n```C# Snippet:BlobFunction_TextReader_TextWriter\npublic static class BlobFunction_TextReader_TextWriter\n{\n    [FunctionName(\"BlobFunction\")]\n    public static async Task Run(\n        [BlobTrigger(\"sample-container/sample-blob-1\")] TextReader blobContentReader1,\n        [Blob(\"sample-container/sample-blob-2\")] TextWriter blobContentWriter2,\n        ILogger logger)\n    {\n        while (blobContentReader1.Peek() >= 0)\n        {\n            await blobContentWriter2.WriteLineAsync(await blobContentReader1.ReadLineAsync());\n        }\n        logger.LogInformation(\"Blob sample-container/sample-blob-1 has been copied to sample-container/sample-blob-2\");\n    }\n}\n```\n\n### Binding to Azure Storage Blob SDK types\n\n```C# Snippet:BlobFunction_BlobClient\npublic static class BlobFunction_BlobClient\n{\n    [FunctionName(\"BlobFunction\")]\n    public static async Task Run(\n        [BlobTrigger(\"sample-container/sample-blob-1\")] BlobClient blobClient1,\n        [Blob(\"sample-container/sample-blob-2\")] BlobClient blobClient2,\n        ILogger logger)\n    {\n        BlobProperties blobProperties1 = await blobClient1.GetPropertiesAsync();\n        logger.LogInformation(\"Blob sample-container/sample-blob-1 has been updated on: {datetime}\", blobProperties1.LastModified);\n        BlobProperties blobProperties2 = await blobClient2.GetPropertiesAsync();\n        logger.LogInformation(\"Blob sample-container/sample-blob-2 has been updated on: {datetime}\", blobProperties2.LastModified);\n    }\n}\n```\n\n### Accessing Blob container\n\n```C# Snippet:BlobFunction_AccessContainer\npublic static class BlobFunction_AccessContainer\n{\n    [FunctionName(\"BlobFunction\")]\n    public static async Task Run(\n        [BlobTrigger(\"sample-container/sample-blob\")] Stream blobStream,\n        [Blob(\"sample-container\")] BlobContainerClient blobContainerClient,\n        ILogger logger)\n    {\n        logger.LogInformation(\"Blobs within container:\");\n        await foreach (BlobItem blobItem in blobContainerClient.GetBlobsAsync())\n        {\n            logger.LogInformation(blobItem.Name);\n        }\n    }\n}\n```\n\n### Enumerating blobs in container\n\n```C# Snippet:BlobFunction_EnumerateBlobs_Stream\npublic static class BlobFunction_EnumerateBlobs_Stream\n{\n    [FunctionName(\"BlobFunction\")]\n    public static async Task Run(\n        [BlobTrigger(\"sample-container/sample-blob\")] Stream blobStream,\n        [Blob(\"sample-container\")] IEnumerable<Stream> blobs,\n        ILogger logger)\n    {\n        logger.LogInformation(\"Blobs contents within container:\");\n        foreach (Stream content in blobs)\n        {\n            using var blobStreamReader = new StreamReader(content);\n            logger.LogInformation(await blobStreamReader.ReadToEndAsync());\n        }\n    }\n}\n```\n\n```C# Snippet:BlobFunction_EnumerateBlobs_BlobClient\npublic static class BlobFunction_EnumerateBlobs_BlobClient\n{\n    [FunctionName(\"BlobFunction\")]\n    public static void Run(\n        [BlobTrigger(\"sample-container/sample-blob\")] Stream blobStream,\n        [Blob(\"sample-container\")] IEnumerable<BlobClient> blobs,\n        ILogger logger)\n    {\n        logger.LogInformation(\"Blobs within container:\");\n        foreach (BlobClient blob in blobs)\n        {\n            logger.LogInformation(blob.Name);\n        }\n    }\n}\n```\n\n### Configuring the extension\n\nPlease refer to [sample functions app](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/storage/Microsoft.Azure.WebJobs.Extensions.Storage.Blobs/samples/functionapp).\n\n## Troubleshooting\n\nPlease refer to [Monitor Azure Functions](https://docs.microsoft.com/azure/azure-functions/functions-monitoring) for troubleshooting guidance.\n\n## Next steps\n\nRead the [introduction to Azure Function](https://docs.microsoft.com/azure/azure-functions/functions-overview) or [creating an Azure Function guide](https://docs.microsoft.com/azure/azure-functions/functions-create-first-azure-function).\n\n## Contributing\n\nSee the [Storage CONTRIBUTING.md][storage_contrib] for details on building,\ntesting, and contributing to this library.\n\nThis project welcomes contributions and suggestions.  Most contributions require\nyou to agree to a Contributor License Agreement (CLA) declaring that you have\nthe right to, and actually do, grant us the rights to use your contribution. For\ndetails, visit [cla.microsoft.com][cla].\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc].\nFor more information see the [Code of Conduct FAQ][coc_faq]\nor contact [opencode@microsoft.com][coc_contact] with any\nadditional questions or comments.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2Fsdk%2Fstorage%2FAzure.Storage.Webjobs.Extensions.Blobs%2FREADME.png)\n\n<!-- LINKS -->\n[nuget]: https://www.nuget.org/\n[storage_account_docs]: https://docs.microsoft.com/azure/storage/common/storage-account-overview\n[storage_account_create_ps]: https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-powershell\n[storage_account_create_cli]: https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-cli\n[storage_account_create_portal]: https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-portal\n[azure_sub]: https://azure.microsoft.com/free/dotnet/\n[RequestFailedException]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/core/Azure.Core/src/RequestFailedException.cs\n[storage_contrib]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/storage/CONTRIBUTING.md\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n",
        "repo_name": "storage/Microsoft.Azure.WebJobs.Extensions.Storage.Blobs",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/storage/Microsoft.Azure.WebJobs.Extensions.Storage.Blobs",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure WebJobs Storage Common client library for .NET\n\nThis package provides infrastruture shared by the other Azure WebJobs Storage libraries.\n\n## Getting started\n\n### Install the package\n\nInstall the common library with [NuGet][nuget]:\n\n```dotnetcli\ndotnet add package Azure.WebJobs.Extensions.Storage.Common --prerelease\n```\n\n### Prerequisites\n\nYou need an [Azure subscription][azure_sub] and a\n[Storage Account][storage_account_docs] to use this package.\n\nTo create a new Storage Account, you can use the [Azure Portal][storage_account_create_portal],\n[Azure PowerShell][storage_account_create_ps], or the [Azure CLI][storage_account_create_cli].\nHere's an example using the Azure CLI:\n\n```Powershell\naz storage account create --name <your-resource-name> --resource-group <your-resource-group-name> --location westus --sku Standard_LRS\n```\n\n### Authenticate the client\n\nIn order for the extensions to access Storage, you will need the connection string which can be found in the [Azure Portal](https://portal.azure.com/) or by using the [Azure CLI](https://docs.microsoft.com/cli/azure) snippet below.\n\n```bash\naz storage account show-connection-string -g <your-resource-group-name> -n <your-resource-name>\n```\n\nThe connection string can be supplied through [AzureWebJobsStorage app setting](https://docs.microsoft.com/azure/azure-functions/functions-app-settings).\n\n## Key concepts\n\n## Examples\n\n## Troubleshooting\n\nPlease refer to [Monitor Azure Functions](https://docs.microsoft.com/azure/azure-functions/functions-monitoring) for troubleshooting guidance.\n\n## Next steps\n\nRead the [introduction to Azure Function](https://docs.microsoft.com/azure/azure-functions/functions-overview) or [creating an Azure Function guide](https://docs.microsoft.com/azure/azure-functions/functions-create-first-azure-function).\n\n## Contributing\n\nSee the [Storage CONTRIBUTING.md][storage_contrib] for details on building,\ntesting, and contributing to this library.\n\nThis project welcomes contributions and suggestions.  Most contributions require\nyou to agree to a Contributor License Agreement (CLA) declaring that you have\nthe right to, and actually do, grant us the rights to use your contribution. For\ndetails, visit [cla.microsoft.com][cla].\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc].\nFor more information see the [Code of Conduct FAQ][coc_faq]\nor contact [opencode@microsoft.com][coc_contact] with any\nadditional questions or comments.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2Fsdk%2Fstorage%2FAzure.Storage.Webjobs.Extensions.Blobs%2FREADME.png)\n\n<!-- LINKS -->\n[nuget]: https://www.nuget.org/\n[storage_account_docs]: https://docs.microsoft.com/azure/storage/common/storage-account-overview\n[storage_account_create_ps]: https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-powershell\n[storage_account_create_cli]: https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-cli\n[storage_account_create_portal]: https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-portal\n[azure_sub]: https://azure.microsoft.com/free/dotnet/\n[RequestFailedException]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/core/Azure.Core/src/RequestFailedException.cs\n[storage_contrib]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/storage/CONTRIBUTING.md\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n",
        "repo_name": "storage/Microsoft.Azure.WebJobs.Extensions.Storage.Common",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/storage/Microsoft.Azure.WebJobs.Extensions.Storage.Common",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure WebJobs Storage Queues client library for .NET\n\nThis extension provides functionality for accessing Azure Storage Queues in Azure Functions.\n\n## Getting started\n\n### Install the package\n\nInstall the Storage Queues extension with [NuGet][nuget]:\n\n```dotnetcli\ndotnet add package Azure.WebJobs.Extensions.Storage.Queues\n```\n\n### Prerequisites\n\nYou need an [Azure subscription][azure_sub] and a\n[Storage Account][storage_account_docs] to use this package.\n\nTo create a new Storage Account, you can use the [Azure Portal][storage_account_create_portal],\n[Azure PowerShell][storage_account_create_ps], or the [Azure CLI][storage_account_create_cli].\nHere's an example using the Azure CLI:\n\n```Powershell\naz storage account create --name <your-resource-name> --resource-group <your-resource-group-name> --location westus --sku Standard_LRS\n```\n\n### Authenticate the client\n\nIn order for the extension to access Queues, you will need the connection string which can be found in the [Azure Portal](https://portal.azure.com/) or by using the [Azure CLI](https://docs.microsoft.com/cli/azure) snippet below.\n\n```bash\naz storage account show-connection-string -g <your-resource-group-name> -n <your-resource-name>\n```\n\nThe connection string can be supplied through [AzureWebJobsStorage app setting](https://docs.microsoft.com/azure/azure-functions/functions-app-settings).\n\n## Key concepts\n\n### Using Queue trigger\n\nThe queue storage trigger runs a function as messages are added to Azure Queue storage.\n\nPlease follow the [tutorial](https://docs.microsoft.com/azure/azure-functions/functions-bindings-storage-queue-trigger?tabs=csharp) to learn about how to listen to queues in Azure Functions.\n\n### Using Queue binding\n\nAzure Functions can create new Azure Queue storage messages by setting up an output binding.\n\nPlease follow the [binding tutorial](https://docs.microsoft.com/azure/azure-functions/functions-bindings-storage-queue-output?tabs=csharp) to learn about using this extension for producing messages into queues in Azure Functions.\n\n## Examples\n\n### Listening to queue\n\nThe following set of examples shows how to receive and react to messages that are being added to the queue.\n\n#### Binding queue message to string\n\n```C# Snippet:QueueTriggerFunction_String\npublic static class QueueTriggerFunction_String\n{\n    [FunctionName(\"QueueTriggerFunction\")]\n    public static void Run(\n        [QueueTrigger(\"sample-queue\")] string message,\n        ILogger logger)\n    {\n        logger.LogInformation(\"Received message from sample-queue, content={content}\", message);\n    }\n}\n```\n\n#### Binding queue message to BinaryData\n\n```C# Snippet:QueueTriggerFunction_BinaryData\npublic static class QueueTriggerFunction_BinaryData\n{\n    [FunctionName(\"QueueTriggerFunction\")]\n    public static void Run(\n        [QueueTrigger(\"sample-queue\")] BinaryData message,\n        ILogger logger)\n    {\n        logger.LogInformation(\"Received message from sample-queue, content={content}\", message.ToString());\n    }\n}\n```\n\n#### Binding queue message to QueueMessage\n\n```C# Snippet:QueueTriggerFunction_QueueMessage\npublic static class QueueTriggerFunction_QueueMessage\n{\n    [FunctionName(\"QueueTriggerFunction\")]\n    public static void Run(\n        [QueueTrigger(\"sample-queue\")] QueueMessage message,\n        ILogger logger)\n    {\n        logger.LogInformation(\"Received message from sample-queue, content={content}\", message.Body.ToString());\n    }\n}\n```\n\n#### Binding queue message to custom type\n\n```C# Snippet:QueueTriggerFunction_CustomObject\npublic static class QueueTriggerFunction_CustomObject\n{\n    public class CustomMessage\n    {\n        public string Content { get; set; }\n    }\n\n    [FunctionName(\"QueueTriggerFunction\")]\n    public static void Run(\n        [QueueTrigger(\"sample-queue\")] CustomMessage message,\n        ILogger logger)\n    {\n        logger.LogInformation(\"Received message from sample-queue, content={content}\", message.Content);\n    }\n}\n```\n\n#### Binding queue message to JObject\n\n```C# Snippet:QueueTriggerFunction_JObject\npublic static class QueueTriggerFunction_JObject\n{\n    [FunctionName(\"QueueTriggerFunction\")]\n    public static void Run(\n        [QueueTrigger(\"sample-queue\")] JObject message,\n        ILogger logger)\n    {\n        logger.LogInformation(\"Received message from sample-queue, content={content}\", message[\"content\"]);\n    }\n}\n```\n\n### Publishing messages to queue\n\nThe following set of examples shows how to add messages to queue by using `Queue` attribute.\n\nThe `QueueTrigger` is used just for sample completeness, i.e. any other trigger mechanism can be used instead.\n\n#### Publishing message as string\n\n```C# Snippet:QueueSenderFunction_String_Return\npublic static class QueueSenderFunction_String_Return\n{\n    [FunctionName(\"QueueFunction\")]\n    [return: Queue(\"sample-queue-2\")]\n    public static string Run(\n        [QueueTrigger(\"sample-queue-1\")] string message,\n        ILogger logger)\n    {\n        logger.LogInformation(\"Received message from sample-queue-1, content={content}\", message);\n        logger.LogInformation(\"Dispatching message to sample-queue-2\");\n        return message;\n    }\n}\n```\n\n#### Publishing message as BinaryData\n\n```C# Snippet:QueueSenderFunction_BinaryData_Return\npublic static class QueueSenderFunction_BinaryData_Return\n{\n    [FunctionName(\"QueueFunction\")]\n    [return: Queue(\"sample-queue-2\")]\n    public static BinaryData Run(\n        [QueueTrigger(\"sample-queue-1\")] BinaryData message,\n        ILogger logger)\n    {\n        logger.LogInformation(\"Received message from sample-queue-1, content={content}\", message.ToString());\n        logger.LogInformation(\"Dispatching message to sample-queue-2\");\n        return message;\n    }\n}\n```\n\n#### Publishing message as QueueMessage\n\n```C# Snippet:QueueSenderFunction_QueueMessage_Return\npublic static class QueueSenderFunction_QueueMessage_Return\n{\n    [FunctionName(\"QueueFunction\")]\n    [return: Queue(\"sample-queue-2\")]\n    public static QueueMessage Run(\n        [QueueTrigger(\"sample-queue-1\")] QueueMessage message,\n        ILogger logger)\n    {\n        logger.LogInformation(\"Received message from sample-queue-1, content={content}\", message.Body.ToString());\n        logger.LogInformation(\"Dispatching message to sample-queue-2\");\n        return message;\n    }\n}\n```\n\n#### Publishing message as custom type through out parameter\n\n```C# Snippet:QueueSenderFunction_CustomObject_OutParamter\npublic static class QueueSenderFunction_CustomObject_OutParamter\n{\n    public class CustomMessage\n    {\n        public string Content { get; set; }\n    }\n\n    [FunctionName(\"QueueFunction\")]\n    public static void Run(\n        [QueueTrigger(\"sample-queue-1\")] CustomMessage incomingMessage,\n        [Queue(\"sample-queue-2\")] out CustomMessage outgoingMessage,\n        ILogger logger)\n    {\n        logger.LogInformation(\"Received message from sample-queue-1, content={content}\", incomingMessage.Content);\n        logger.LogInformation(\"Dispatching message to sample-queue-2\");\n        outgoingMessage = incomingMessage;\n    }\n}\n```\n\n#### Publishing message as custom type through collector\n\n```C# Snippet:QueueSenderFunction_CustomObject_Collector\npublic static class QueueSenderFunction_CustomObject_Collector\n{\n    public class CustomMessage\n    {\n        public string Content { get; set; }\n    }\n\n    [FunctionName(\"QueueFunction\")]\n    public static void Run(\n        [QueueTrigger(\"sample-queue-1\")] CustomMessage incomingMessage,\n        [Queue(\"sample-queue-2\")] ICollector<CustomMessage> collector,\n        ILogger logger)\n    {\n        logger.LogInformation(\"Received message from sample-queue-1, content={content}\", incomingMessage.Content);\n        logger.LogInformation(\"Dispatching message to sample-queue-2\");\n        collector.Add(incomingMessage);\n    }\n}\n```\n\n### Accessing queue properties\n\n```C# Snippet:Function_BindingToQueueClient\npublic static class Function_BindingToQueueClient\n{\n    [FunctionName(\"QueueFunction\")]\n    public static async Task Run(\n        [QueueTrigger(\"sample-queue\")] string message,\n        [Queue(\"sample-queue\")] QueueClient queueClient,\n        ILogger logger)\n    {\n        logger.LogInformation(\"Received message from sample-queue, content={content}\", message);\n        QueueProperties queueProperties = await queueClient.GetPropertiesAsync();\n        logger.LogInformation(\"There are approximatelly {count} messages\", queueProperties.ApproximateMessagesCount);\n    }\n}\n```\n\n### Configuring the extension\n\nPlease refer to [sample functions app](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/storage/Microsoft.Azure.WebJobs.Extensions.Storage.Queues/samples/functionapp).\n\n## Troubleshooting\n\nPlease refer to [Monitor Azure Functions](https://docs.microsoft.com/azure/azure-functions/functions-monitoring) for troubleshooting guidance.\n\n## Next steps\n\nRead the [introduction to Azure Function](https://docs.microsoft.com/azure/azure-functions/functions-overview) or [creating an Azure Function guide](https://docs.microsoft.com/azure/azure-functions/functions-create-first-azure-function).\n\n## Contributing\n\nSee the [Storage CONTRIBUTING.md][storage_contrib] for details on building,\ntesting, and contributing to this library.\n\nThis project welcomes contributions and suggestions.  Most contributions require\nyou to agree to a Contributor License Agreement (CLA) declaring that you have\nthe right to, and actually do, grant us the rights to use your contribution. For\ndetails, visit [cla.microsoft.com][cla].\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc].\nFor more information see the [Code of Conduct FAQ][coc_faq]\nor contact [opencode@microsoft.com][coc_contact] with any\nadditional questions or comments.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2Fsdk%2Fstorage%2FAzure.Storage.Webjobs.Extensions.Blobs%2FREADME.png)\n\n<!-- LINKS -->\n[nuget]: https://www.nuget.org/\n[storage_account_docs]: https://docs.microsoft.com/azure/storage/common/storage-account-overview\n[storage_account_create_ps]: https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-powershell\n[storage_account_create_cli]: https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-cli\n[storage_account_create_portal]: https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-portal\n[azure_sub]: https://azure.microsoft.com/free/dotnet/\n[RequestFailedException]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/core/Azure.Core/src/RequestFailedException.cs\n[storage_contrib]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/storage/CONTRIBUTING.md\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n",
        "repo_name": "storage/Microsoft.Azure.WebJobs.Extensions.Storage.Queues",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/storage/Microsoft.Azure.WebJobs.Extensions.Storage.Queues",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure WebJobs Storage Blobs and Queues client library for .NET\n\nThis extension provides functionality for accessing Azure Storage Blobs and Queues in Azure Functions. This package is a metapackage created for backwards compatibity. Using `Azure.WebJobs.Extensions.Storage.Blobs` and `Azure.WebJobs.Extensions.Storage.Queues` directly is recommended.\n\n## Getting started\n\n### Install the package\n\nInstall the Storage Blobs and Queues extension with [NuGet][nuget]:\n\n```dotnetcli\ndotnet add package Microsoft.Azure.WebJobs.Extensions.Storage\n```\n\n### Prerequisites\n\nYou need an [Azure subscription][azure_sub] and a\n[Storage Account][storage_account_docs] to use this package.\n\nTo create a new Storage Account, you can use the [Azure Portal][storage_account_create_portal],\n[Azure PowerShell][storage_account_create_ps], or the [Azure CLI][storage_account_create_cli].\nHere's an example using the Azure CLI:\n\n```Powershell\naz storage account create --name <your-resource-name> --resource-group <your-resource-group-name> --location westus --sku Standard_LRS\n```\n\n### Authenticate the client\n\nIn order for the extension to access Blobs, you will need the connection string which can be found in the [Azure Portal](https://portal.azure.com/) or by using the [Azure CLI](https://docs.microsoft.com/cli/azure) snippet below.\n\n```bash\naz storage account show-connection-string -g <your-resource-group-name> -n <your-resource-name>\n```\n\nThe connection string can be supplied through [AzureWebJobsStorage app setting](https://docs.microsoft.com/azure/azure-functions/functions-app-settings).\n\n## Key concepts\n\n### Using Queues\n\nPlease refer to [Azure WebJobs Storage Queues](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/storage/Microsoft.Azure.WebJobs.Extensions.Storage.Queues).\n\n### Using Blobs\n\nPlease refer to [Azure WebJobs Storage Blobs](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/storage/Microsoft.Azure.WebJobs.Extensions.Storage.Blobs).\n\n## Examples\n\nPlease refer to [Azure WebJobs Storage Queues](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/storage/Microsoft.Azure.WebJobs.Extensions.Storage.Queues) and [Azure WebJobs Storage Blobs](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/storage/Microsoft.Azure.WebJobs.Extensions.Storage.Blobs).\n\n## Troubleshooting\n\nPlease refer to [Monitor Azure Functions](https://docs.microsoft.com/azure/azure-functions/functions-monitoring) for troubleshooting guidance.\n\n## Next steps\n\nRead the [introduction to Azure Function](https://docs.microsoft.com/azure/azure-functions/functions-overview) or [creating an Azure Function guide](https://docs.microsoft.com/azure/azure-functions/functions-create-first-azure-function).\n\n## Contributing\n\nSee the [Storage CONTRIBUTING.md][storage_contrib] for details on building,\ntesting, and contributing to this library.\n\nThis project welcomes contributions and suggestions.  Most contributions require\nyou to agree to a Contributor License Agreement (CLA) declaring that you have\nthe right to, and actually do, grant us the rights to use your contribution. For\ndetails, visit [cla.microsoft.com][cla].\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc].\nFor more information see the [Code of Conduct FAQ][coc_faq]\nor contact [opencode@microsoft.com][coc_contact] with any\nadditional questions or comments.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2Fsdk%2Fstorage%2FAzure.Storage.Webjobs.Extensions.Blobs%2FREADME.png)\n\n<!-- LINKS -->\n[nuget]: https://www.nuget.org/\n[storage_account_docs]: https://docs.microsoft.com/azure/storage/common/storage-account-overview\n[storage_account_create_ps]: https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-powershell\n[storage_account_create_cli]: https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-cli\n[storage_account_create_portal]: https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-portal\n[azure_sub]: https://azure.microsoft.com/free/dotnet/\n[RequestFailedException]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/core/Azure.Core/src/RequestFailedException.cs\n[storage_contrib]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/storage/CONTRIBUTING.md\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n",
        "repo_name": "storage/Microsoft.Azure.WebJobs.Extensions.Storage",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/storage/Microsoft.Azure.WebJobs.Extensions.Storage",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Storage Cache management client library for .NET\n\nThis library supports managing Microsoft Azure Storage Cache resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Storage Cache management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.StorageCache\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "storagecache/Azure.ResourceManager.StorageCache",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/storagecache/Azure.ResourceManager.StorageCache",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure StorageMover management client library for .NET\n\nMicrosoft Azure Storage Mover is a fully managed migration service that enables you to migrate your files and folders to Azure Storage while minimizing downtime for your workload. You can use Storage Mover for different migration scenarios such as lift-and-shift, and for cloud migrations that you'll have to repeat occasionally. Azure Storage Mover also helps maintain oversight and manage the migration of all your globally distributed file shares from a single storage mover resource.\n\nThis library supports managing Microsoft Azure StorageMover Configuration resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure StorageMover management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.StorageMover\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "storagemover/Azure.ResourceManager.StorageMover",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/storagemover/Azure.ResourceManager.StorageMover",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Storage Pool management client library for .NET\n\nMicrosoft Azure Storage Pool allows your applications and workloads to access a group of managed disks from a single endpoint.\n\nThis library supports managing Microsoft Azure Storage Cache resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure StoragePool management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.StoragePool\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "storagepool/Azure.ResourceManager.StoragePool",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/storagepool/Azure.ResourceManager.StoragePool",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Storage / File Sync management client library for .NET\n\nMicrosoft Azure Storage / File Sync enables centralizing your organization's file shares in Azure Files, while keeping the flexibility, performance, and compatibility of a Microsoft Windows file server.\n\nThis library supports managing Microsoft Azure Storage / File Sync resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Storage / File Sync management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.StorageSync\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "storagesync/Azure.ResourceManager.StorageSync",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/storagesync/Azure.ResourceManager.StorageSync",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Stream Analytics management client library for .NET\n\nMicrosoft Azure Stream Analytics is a fully managed stream processing engine that is designed to analyze and process large volumes of streaming data with sub-millisecond latencies.\n\nThis library supports managing Microsoft Azure Stream Analytics resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Stream Analytics management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.StreamAnalytics\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "streamanalytics/Azure.ResourceManager.StreamAnalytics",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/streamanalytics/Azure.ResourceManager.StreamAnalytics",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Subscription management client library for .NET\n\nThis library supports managing Microsoft Azure Subscription resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Subscription management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.Subscription\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "subscription/Azure.ResourceManager.Subscription",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/subscription/Azure.ResourceManager.Subscription",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Support management client library for .NET\n\nThis library supports managing Microsoft Azure Support resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Support management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.Support\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "support/Azure.ResourceManager.Support",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/support/Azure.ResourceManager.Support",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Synapse Analytics Access Control client library for .NET\n\nThis directory contains the open source subset of the .NET SDK. For documentation of the complete Azure SDK, please see the [Microsoft Azure .NET Developer Center](https://azure.microsoft.com/develop/net/).\n\nThe Azure Synapse Analytics access control client library enables programmatically managing role assignments.\n\nAzure Synapse is a limitless analytics service that brings together enterprise data warehousing and Big Data analytics. It gives you the freedom to query data on your terms, using either serverless on-demand or provisioned resources\u2014at scale. Azure Synapse brings these two worlds together with a unified experience to ingest, prepare, manage, and serve data for immediate BI and machine learning needs.\n\n## Getting started\n\nThe complete Microsoft Azure SDK can be downloaded from the [Microsoft Azure Downloads Page](https://azure.microsoft.com/downloads/?sdk=net) and ships with support for building deployment packages, integrating with tooling, rich command line tooling, and more.\n\nFor the best development experience, developers should use the official Microsoft NuGet packages for libraries. NuGet packages are regularly updated with new functionality and hotfixes.\n\n### Install the package\n\nInstall the Azure Synapse Analytics access control client library for .NET with [NuGet](https://www.nuget.org/packages/Azure.Analytics.Synapse.AccessControl/):\n\n```dotnetcli\ndotnet add package Azure.Analytics.Synapse.AccessControl --prerelease\n```\n\n### Prerequisites\n\n- **Azure Subscription:** To use Azure services, including Azure Synapse, you'll need a subscription. If you do not have an existing Azure account, you may sign up for a [free trial](https://azure.microsoft.com/free/dotnet/) or use your [Visual Studio Subscription](https://visualstudio.microsoft.com/subscriptions/) benefits when you [create an account]https://azure.microsoft.com/account).\n- An existing Azure Synapse workspace. If you need to create an Azure Synapse workspace, you can use the [Azure Portal](https://portal.azure.com/) or [Azure CLI](https://docs.microsoft.com/cli/azure).\n\nIf you use the Azure CLI, the command looks like below:\n\n```PowerShell\naz synapse workspace create \\\n    --name <your-workspace-name> \\\n    --resource-group <your-resource-group-name> \\\n    --storage-account <your-storage-account-name> \\\n    --file-system <your-storage-file-system-name> \\\n    --sql-admin-login-user <your-sql-admin-user-name> \\\n    --sql-admin-login-password <your-sql-admin-user-password> \\\n    --location <your-workspace-location>\n```\n\n### Authenticate the client\n\nIn order to interact with the Azure Synapse Analytics service, you'll need to create an instance of a [RoleAssignmentsClient](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/synapse/Azure.Analytics.Synapse.AccessControl/src/Generated/RoleAssignmentsClient.cs) and/or a [RoleDefinitionsClient](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/synapse/Azure.Analytics.Synapse.AccessControl/src/Generated/RoleDefinitionsClient.cs) class.\n\nYou will also need a **workspace endpoint**, which you may see as \"Development endpoint\" in the portal, and **client secret credentials (client id, client secret, tenant id)** to instantiate a client object.\n\nClient secret credential authentication is being used in this getting started section but you can find more ways to authenticate with [Azure identity](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/identity/Azure.Identity). To use the [DefaultAzureCredential](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/identity/Azure.Identity#defaultazurecredential) provider shown below,\nor other credential providers provided with the Azure SDK, you should install the Azure.Identity package:\n\n```dotnetcli\ndotnet add package Azure.Identity\n```\n\n## Key concepts\n\n### RoleAssignmentsClient & RoleDefinitionsClient\n\nWith a `RoleAssignmentsClient` you can create, update, and delete role assignments. With a `RoleDefinitionsClient` you can get role assignments from the workspace.\n\n### Role Assignment\n\nThe way you control access to Synapse resources is to create role assignments. A role assignment is the process of attaching a role definition to a user, group, service principal, or managed identity at a particular scope for the purpose of granting access. Access is granted by creating a role assignment, and access is revoked by removing a role assignment.\n\n### Thread safety\n\nWe guarantee that all client instance methods are thread-safe and independent of each other ([guideline](https://azure.github.io/azure-sdk/dotnet_introduction.html#dotnet-service-methods-thread-safety)). This ensures that the recommendation of reusing client instances is always safe, even across threads.\n\n### Additional concepts\n\n<!-- CLIENT COMMON BAR -->\n\n[Client options](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#configuring-service-clients-using-clientoptions) |\n[Accessing the response](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#accessing-http-response-details-using-responset) |\n[Long-running operations](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#consuming-long-running-operations-using-operationt) |\n[Handling failures](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#reporting-errors-requestfailedexception) |\n[Diagnostics](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md) |\n[Mocking](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#mocking) |\n[Client lifetime](https://devblogs.microsoft.com/azure-sdk/lifetime-management-and-thread-safety-guarantees-of-azure-sdk-net-clients/)\n\n<!-- CLIENT COMMON BAR -->\n\n## Examples\n\nThe Azure.Analytics.Synapse.AccessControl package supports synchronous and asynchronous APIs. The following section covers some of the most common Azure Synapse Analytics access control related tasks:\n\n### Role assignment examples\n\n- [Create access control client](#create-access-control-client)\n- [Create a role assignment](#create-a-role-assignment)\n- [Retrieve a role assignment](#retrieve-a-role-assignment)\n- [List role assignments](#list-role-assignments)\n- [Delete a role assignment](#delete-a-role-assignment)\n\n### Create access control client\n\nTo interact with Azure Synapse, you need to instantiate a `RoleAssignmentsClient` and a `RoleDefinitionsClient`. It requires an endpoint URL and a `TokenCredential`.\n\n```C# Snippet:CreateAccessControlClient\n// Replace the string below with your actual endpoint url.\nstring endpoint = \"<my-endpoint-url>\";\n\nRoleAssignmentsClient roleAssignmentsClient = new RoleAssignmentsClient(new Uri(endpoint), new DefaultAzureCredential());\nRoleDefinitionsClient definitionsClient = new RoleDefinitionsClient(new Uri(endpoint), new DefaultAzureCredential());\n```\n\n### Create a role assignment\n\nFirst, you need to the determine the ID of the role you wish to assign, along with the ID of the principal you wish to assign that role.\n\n```C# Snippet:PrepCreateRoleAssignment\nResponse roleDefinitionsResponse = definitionsClient.GetRoleDefinitions(true);\nBinaryData roleDefinitionsContent = roleDefinitionsResponse.Content;\nusing JsonDocument roleDefinitionsJson = JsonDocument.Parse(roleDefinitionsContent.ToMemory());\n\nJsonElement adminRoleJson = roleDefinitionsJson.RootElement.EnumerateArray().\n    Single(role => role.GetProperty(\"name\").ToString() == \"Synapse Administrator\");\nGuid adminRoleId = new Guid(adminRoleJson.GetProperty(\"id\").ToString());\n\nstring assignedScope = \"workspaces/<my-workspace-name>\";\n\n// Replace the string below with the ID you'd like to assign the role.\nGuid principalId = /*<my-principal-id>\"*/ Guid.NewGuid();\n\n// Replace the string below with the ID of the assignment you'd like to use.\nstring assignmentId = \"<my-assignment-id>\";\n```\n\nThen call `CreateRoleAssignment` with the options to create the role assignment.\n\n```C# Snippet:CreateRoleAssignment\nvar roleAssignmentDetails = new\n{\n    roleId = adminRoleId,\n    principalId = Guid.NewGuid(),\n    scope = assignedScope\n};\n\nResponse addedRoleAssignmentResponse = roleAssignmentsClient.CreateRoleAssignment(assignmentId, RequestContent.Create(roleAssignmentDetails), ContentType.ApplicationJson);\nBinaryData addedRoleAssignmentContent = addedRoleAssignmentResponse.Content;\nusing JsonDocument addedRoleAssignmentJson = JsonDocument.Parse(addedRoleAssignmentContent.ToMemory());\nstring addedRoleAssignmentId = addedRoleAssignmentJson.RootElement.GetProperty(\"id\").ToString();\n```\n\n### Retrieve a role assignment\n\nYou can retrieve the details of a role assignment by calling `GetRoleAssignmentById`, passing in the assignment ID.\n\n```C# Snippet:RetrieveRoleAssignment\nResponse roleAssignmentResponse = roleAssignmentsClient.GetRoleAssignmentById(addedRoleAssignmentId, new());\nBinaryData roleAssignmentContent = roleAssignmentResponse.Content;\nusing JsonDocument roleAssignmentJson = JsonDocument.Parse(roleAssignmentContent.ToMemory());\nstring roleAssignmentRoleDefinitionId = roleAssignmentJson.RootElement.GetProperty(\"roleDefinitionId\").ToString();\nstring roleAssignmentPrincipalId = roleAssignmentJson.RootElement.GetProperty(\"principalId\").ToString();\nConsole.WriteLine($\"Role {roleAssignmentRoleDefinitionId} is assigned to {roleAssignmentPrincipalId}.\");\n```\n\n### List role assignments\n\nTo enumerate all role assignments in the Synapse workspace you can call `ListRoleAssignments`.\n\n```C# Snippet:ListRoleAssignments\nResponse roleAssignmentsResponse = roleAssignmentsClient.GetRoleAssignments();\nBinaryData roleAssignmentsContent = roleAssignmentsResponse.Content;\nusing JsonDocument roleAssignmentsJson = JsonDocument.Parse(roleAssignmentsContent.ToMemory());\n\nforeach (JsonElement assignmentJson in roleAssignmentsJson.RootElement.GetProperty(\"value\").EnumerateArray())\n{\n    Console.WriteLine(assignmentJson.GetProperty(\"id\").ToString());\n}\n```\n\n### Delete a role assignment\n\nTo delete a role assignment no longer needed you can call `DeleteRoleAssignmentById`, passing in the assignment ID.\n\n```C# Snippet:DeleteRoleAssignment\nroleAssignmentsClient.DeleteRoleAssignmentById(addedRoleAssignmentId);\n```\n\n## To build\n\nFor information on building the Azure Synapse client library, please see [Building the Microsoft Azure SDK for .NET](https://github.com/azure/azure-sdk-for-net#to-build)\n\n## Target frameworks\n\nFor information about the target frameworks of the Azure Synapse client library, please refer to the [Target Frameworks](https://github.com/azure/azure-sdk-for-net#target-frameworks) of the Microsoft Azure SDK for .NET.\n\n## Troubleshooting\n\nPlease open issue in github.\n\n## Next steps\n\nThe next step is adding more examples\n\n## Contributing\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n",
        "repo_name": "synapse/Azure.Analytics.Synapse.AccessControl",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/synapse/Azure.Analytics.Synapse.AccessControl",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Synapse Analytics Artifacts client library for .NET\n\nThis directory contains the open source subset of the .NET SDK. For documentation of the complete Azure SDK, please see the [Microsoft Azure .NET Developer Center](https://azure.microsoft.com/develop/net/).\n\nThe Azure Synapse Analytics development client library enables programmatically managing artifacts, offering methods to create, update, list, and delete pipelines, datasets, data flows, notebooks, Spark job definitions, SQL scripts, linked services and triggers.\n\nAzure Synapse is a limitless analytics service that brings together enterprise data warehousing and Big Data analytics. It gives you the freedom to query data on your terms, using either serverless on-demand or provisioned resources\u2014at scale. Azure Synapse brings these two worlds together with a unified experience to ingest, prepare, manage, and serve data for immediate BI and machine learning needs.\n\n## Getting started\n\nThe complete Microsoft Azure SDK can be downloaded from the [Microsoft Azure Downloads Page](https://azure.microsoft.com/downloads/?sdk=net) and ships with support for building deployment packages, integrating with tooling, rich command line tooling, and more.\n\nFor the best development experience, developers should use the official Microsoft NuGet packages for libraries. NuGet packages are regularly updated with new functionality and hotfixes.\n\n### Install the package\n\nInstall the Azure Synapse Analytics development client library for .NET with [NuGet](https://www.nuget.org/packages/Azure.Analytics.Synapse.Artifacts/):\n\n```dotnetcli\ndotnet add package Azure.Analytics.Synapse.Artifacts --prerelease\n```\n\n### Prerequisites\n\n- **Azure Subscription:** To use Azure services, including Azure Synapse, you'll need a subscription. If you do not have an existing Azure account, you may sign up for a [free trial](https://azure.microsoft.com/free/dotnet/) or use your [Visual Studio Subscription](https://visualstudio.microsoft.com/subscriptions/) benefits when you [create an account](https://azure.microsoft.com/account).\n- An existing Azure Synapse workspace. If you need to create an Azure Synapse workspace, you can use the [Azure Portal](https://portal.azure.com/) or [Azure CLI](https://docs.microsoft.com/cli/azure).\n\nIf you use the Azure CLI, the command looks like below:\n\n```PowerShell\naz synapse workspace create \\\n    --name <your-workspace-name> \\\n    --resource-group <your-resource-group-name> \\\n    --storage-account <your-storage-account-name> \\\n    --file-system <your-storage-file-system-name> \\\n    --sql-admin-login-user <your-sql-admin-user-name> \\\n    --sql-admin-login-password <your-sql-admin-user-password> \\\n    --location <your-workspace-location>\n```\n\n### Authenticate the client\n\nIn order to interact with part of the Azure Synapse Analytics service, you'll need to create an instance of the respective client class:\n\n- [BigDataPoolsClient](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/synapse/Azure.Analytics.Synapse.Artifacts/src/Generated/BigDataPoolsClient.cs)\n- [DataFlowClient](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/synapse/Azure.Analytics.Synapse.Artifacts/src/Generated/DataFlowClient.cs)\n- [DataFlowDebugSessionClient](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/synapse/Azure.Analytics.Synapse.Artifacts/src/Generated/DataFlowDebugSessionClient.cs)\n- [DatasetClient](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/synapse/Azure.Analytics.Synapse.Artifacts/src/Generated/DatasetClient.cs)\n- [IntegrationRuntimesClient](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/synapse/Azure.Analytics.Synapse.Artifacts/src/Generated/IntegrationRuntimesClient.cs)\n- [LinkedServiceClient](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/synapse/Azure.Analytics.Synapse.Artifacts/src/Generated/LinkedServiceClient.cs)\n- [NotebookClient](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/synapse/Azure.Analytics.Synapse.Artifacts/src/Generated/NotebookClient.cs)\n- [PipelineClient](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/synapse/Azure.Analytics.Synapse.Artifacts/src/Generated/PipelineClient.cs)\n- [PipelineRunClient](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/synapse/Azure.Analytics.Synapse.Artifacts/src/Generated/PipelineRunClient.cs)\n- [SparkJobDefinitionClient](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/synapse/Azure.Analytics.Synapse.Artifacts/src/Generated/SparkJobDefinitionClient.cs)\n- [SqlPoolsClient](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/synapse/Azure.Analytics.Synapse.Artifacts/src/Generated/SqlPoolsClient.cs)\n- [SqlScriptClient](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/synapse/Azure.Analytics.Synapse.Artifacts/src/Generated/SqlScriptClient.cs)\n- [TriggerClient](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/synapse/Azure.Analytics.Synapse.Artifacts/src/Generated/TriggerClient.cs)\n- [TriggerRunClient](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/synapse/Azure.Analytics.Synapse.Artifacts/src/Generated/TriggerRunClient.cs)\n- [WorkspaceClient](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/synapse/Azure.Analytics.Synapse.Artifacts/src/Generated/WorkspaceClient.cs)\n- [WorkspaceGitRepoManagementClient](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/synapse/Azure.Analytics.Synapse.Artifacts/src/Generated/WorkspaceGitRepoManagementClient.cs)\n\nYou need a **workspace endpoint**, which you may see as \"Development endpoint\" in the portal, and **client secret credentials (client id, client secret, tenant id)** to instantiate a client object.\n\nClient secret credential authentication is being used in this getting started section but you can find more ways to authenticate with [Azure identity](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/identity/Azure.Identity). To use the [DefaultAzureCredential](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/identity/Azure.Identity#defaultazurecredential) provider shown below,\nor other credential providers provided with the Azure SDK, you should install the Azure.Identity package:\n\n```dotnetcli\ndotnet add package Azure.Identity\n```\n\n## Examples\n\nThe Azure.Analytics.Synapse.Artifacts package supports synchronous and asynchronous APIs. The following section covers some of the most common Azure Synapse Analytics development related tasks:\n\n### Notebook examples\n\n- [Create a notebook](#create-a-notebook)\n- [Retrieve a notebook](#retrieve-a-notebook)\n- [List notebooks](#list-notebooks)\n- [Delete a notebook](#delete-a-notebook)\n\n### Create a notebook\n\n`CreateOrUpdateNotebook` creates a notebook.\n\n```C# Snippet:CreateNotebook\nNotebookCreateOrUpdateNotebookOperation operation = await client.StartCreateOrUpdateNotebookAsync(notebookName, notebookResource);\nawait operation.WaitForCompletionAsync();\nConsole.WriteLine(\"The notebook is created\");\n```\n\n### Retrieve a notebook\n\n`GetNoteBook` retrieves a notebook.\n\n```C# Snippet:RetrieveNotebook\nNotebookResource retrievedNotebook = client.GetNotebook(notebookName);\n```\n\n### List notebooks\n\n`GetNotebooksByWorkspace` enumerates the notebooks in the Synapse workspace.\n\n```C# Snippet:ListNotebooks\nPageable<NotebookResource> notebooks = client.GetNotebooksByWorkspace();\nforeach (NotebookResource notebook in notebooks)\n{\n    Console.WriteLine(notebook.Name);\n}\n```\n\n### Delete a notebook\n\n`DeleteNotebook` deletes a notebook.\n\n```C# Snippet:DeleteNotebook\nNotebookDeleteNotebookOperation deleteNotebookOperation = client.StartDeleteNotebook(notebookName);\nawait deleteNotebookOperation.WaitForCompletionResponseAsync();\n```\n\n## To build\n\nFor information on building the Azure Synapse client library, please see [Building the Microsoft Azure SDK for .NET](https://github.com/azure/azure-sdk-for-net#to-build)\n\n## Target frameworks\n\nFor information about the target frameworks of the Azure Synapse client library, please refer to the [Target Frameworks](https://github.com/azure/azure-sdk-for-net#target-frameworks) of the Microsoft Azure SDK for .NET.\n\n## Key concepts\n\n### NotebookControlClient\n\nWith a notebook client you can create, update, list, and delete pipelines, datasets, data flows, notebooks, Spark job definitions, SQL scripts, linked services and triggers.\n\n### Thread safety\n\nWe guarantee that all client instance methods are thread-safe and independent of each other ([guideline](https://azure.github.io/azure-sdk/dotnet_introduction.html#dotnet-service-methods-thread-safety)). This ensures that the recommendation of reusing client instances is always safe, even across threads.\n\n### Additional concepts\n\n<!-- CLIENT COMMON BAR -->\n\n[Client options](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#configuring-service-clients-using-clientoptions) |\n[Accessing the response](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#accessing-http-response-details-using-responset) |\n[Long-running operations](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#consuming-long-running-operations-using-operationt) |\n[Handling failures](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#reporting-errors-requestfailedexception) |\n[Diagnostics](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md) |\n[Mocking](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#mocking) |\n[Client lifetime](https://devblogs.microsoft.com/azure-sdk/lifetime-management-and-thread-safety-guarantees-of-azure-sdk-net-clients/)\n\n<!-- CLIENT COMMON BAR -->\n\n## Troubleshooting\n\nPlease open issue in github.\n\n## Next steps\n\nThe next step is adding more examples\n\n## Contributing\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n",
        "repo_name": "synapse/Azure.Analytics.Synapse.Artifacts",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/synapse/Azure.Analytics.Synapse.Artifacts",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Synapse Analytics Managed Private Endpoints client library for .NET\n\nThis directory contains the open source subset of the .NET SDK. For documentation of the complete Azure SDK, please see the [Microsoft Azure .NET Developer Center](https://azure.microsoft.com/develop/net/).\n\nAzure Synapse is a limitless analytics service that brings together enterprise data warehousing and Big Data analytics. It gives you the freedom to query data on your terms, using either serverless on-demand or provisioned resources\u2014at scale. Azure Synapse brings these two worlds together with a unified experience to ingest, prepare, manage, and serve data for immediate BI and machine learning needs.\n\nManaged private endpoints are private endpoints created in the Managed workspace Microsoft Azure Virtual Network establishing a private link to Azure resources. Azure Synapse manages these private endpoints on your behalf.\n\nThe Azure Synapse Analytics managed private endpoints client library enables programmatically managing private endpoints.\n\n## Getting started\n\nThe complete Microsoft Azure SDK can be downloaded from the [Microsoft Azure Downloads Page](https://azure.microsoft.com/downloads/?sdk=net) and ships with support for building deployment packages, integrating with tooling, rich command line tooling, and more.\n\nFor the best development experience, developers should use the official Microsoft NuGet packages for libraries. NuGet packages are regularly updated with new functionality and hotfixes.\n\n### Install the package\n\nInstall the Azure Synapse Analytics managed private endpoints client library for .NET with [NuGet](https://www.nuget.org/packages/Azure.Analytics.Synapse.ManagedPrivateEndpoints/):\n\n```dotnetcli\ndotnet add package Azure.Analytics.Synapse.ManagedPrivateEndpoints --prerelease\n```\n\n### Prerequisites\n\n- **Azure Subscription:** To use Azure services, including Azure Synapse, you'll need a subscription. If you do not have an existing Azure account, you may sign up for a [free trial](https://azure.microsoft.com/free/dotnet/) or use your [Visual Studio Subscription](https://visualstudio.microsoft.com/subscriptions/) benefits when you [create an account](https://azure.microsoft.com/account).\n- An existing Azure Synapse workspace. If you need to create an Azure Synapse workspace, you can use the [Azure Portal](https://portal.azure.com/) or [Azure CLI](https://docs.microsoft.com/cli/azure).\n\nIf you use the Azure CLI, the command looks like below:\n\n```PowerShell\naz synapse workspace create \\\n    --name <your-workspace-name> \\\n    --resource-group <your-resource-group-name> \\\n    --storage-account <your-storage-account-name> \\\n    --file-system <your-storage-file-system-name> \\\n    --sql-admin-login-user <your-sql-admin-user-name> \\\n    --sql-admin-login-password <your-sql-admin-user-password> \\\n    --location <your-workspace-location>\n```\n\n### Authenticate the client\n\nIn order to interact with the Azure Synapse Analytics service, you'll need to create an instance of the [ManagedPrivateEndpointClient](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/synapse/Azure.Analytics.Synapse.ManagedPrivateEndpoints/src/Generated/ManagedPrivateEndpointsClient.cs) class. You need a **workspace endpoint**, which you may see as \"Development endpoint\" in the portal,\nand **client secret credentials (client id, client secret, tenant id)** to instantiate a client object.\n\nClient secret credential authentication is being used in this getting started section but you can find more ways to authenticate with [Azure identity](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/identity/Azure.Identity). To use the [DefaultAzureCredential](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/identity/Azure.Identity#defaultazurecredential) provider shown below,\nor other credential providers provided with the Azure SDK, you should install the Azure.Identity package:\n\n```dotnetcli\ndotnet add package Azure.Identity\n```\n\n## Key concepts\n\n### ManagedPrivateEndpointClient\n\nWith a `ManagedPrivateEndpointClient` you can get private endpoints from the workspace, create new private endpoint and delete private endpoints.\n\n### Thread safety\n\nWe guarantee that all client instance methods are thread-safe and independent of each other ([guideline](https://azure.github.io/azure-sdk/dotnet_introduction.html#dotnet-service-methods-thread-safety)). This ensures that the recommendation of reusing client instances is always safe, even across threads.\n\n### Additional concepts\n\n<!-- CLIENT COMMON BAR -->\n\n[Client options](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#configuring-service-clients-using-clientoptions) |\n[Accessing the response](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#accessing-http-response-details-using-responset) |\n[Long-running operations](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#consuming-long-running-operations-using-operationt) |\n[Handling failures](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#reporting-errors-requestfailedexception) |\n[Diagnostics](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md) |\n[Mocking](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#mocking) |\n[Client lifetime](https://devblogs.microsoft.com/azure-sdk/lifetime-management-and-thread-safety-guarantees-of-azure-sdk-net-clients/)\n\n<!-- CLIENT COMMON BAR -->\n\n## Examples\n\nThe Azure.Analytics.Synapse.ManagedPrivateEndpoints package supports synchronous and asynchronous APIs. The following section covers some of the most common Azure Synapse Analytics monitoring related tasks:\n\n### Private endpoints examples\n\n- [Create a private endpoint](#create-a-private-endpoint)\n- [Retrieve a private endpoint](#retrieve-a-private-endpoint)\n- [List private endpoints](#list-private-endpoints)\n- [Delete a private endpoint](#delete-a-private-endpoint)\n\n### Create a private endpoint\n\n```C# Snippet:CreateManagedPrivateEndpoint\nstring managedVnetName = \"default\";\nstring managedPrivateEndpointName = \"myPrivateEndpoint\";\nstring fakedStorageAccountName = \"myStorageAccount\";\nstring privateLinkResourceId = $\"/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/myResourceGroup/providers/Microsoft.Storage/accounts/{fakedStorageAccountName}\";\nstring groupId = \"blob\";\nclient.Create(managedVnetName, new ManagedPrivateEndpoint\n{\n    Properties = new ManagedPrivateEndpointProperties\n    {\n        PrivateLinkResourceId = privateLinkResourceId,\n        GroupId = groupId\n    }\n});\n```\n\n### Retrieve a private endpoint\n\n```C# Snippet:RetrieveManagedPrivateEndpoint\nManagedPrivateEndpoint retrievedPrivateEndpoint = client.Get(managedVnetName, managedPrivateEndpointName);\nConsole.WriteLine(retrievedPrivateEndpoint.Id);\n```\n\n### List private endpoints\n\n```C# Snippet:ListManagedPrivateEndpoints\nList<ManagedPrivateEndpoint> privateEndpoints = client.List(managedVnetName).ToList();\nforeach (ManagedPrivateEndpoint privateEndpoint in privateEndpoints)\n{\n    Console.WriteLine(privateEndpoint.Id);\n}\n```\n\n### Delete a private endpoint\n\n```C# Snippet:DeleteManagedPrivateEndpoint\nclient.Delete(managedVnetName, managedPrivateEndpointName);\n```\n\n## To build\n\nFor information on building the Azure Synapse client library, please see [Building the Microsoft Azure SDK for .NET](https://github.com/azure/azure-sdk-for-net#to-build)\n\n## Target frameworks\n\nFor information about the target frameworks of the Azure Synapse client library, please refer to the [Target Frameworks](https://github.com/azure/azure-sdk-for-net#target-frameworks) of the Microsoft Azure SDK for .NET.\n\n## Troubleshooting\n\nPlease open issue in github.\n\n## Next steps\n\nThe next step is adding more examples\n\n## Contributing\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n",
        "repo_name": "synapse/Azure.Analytics.Synapse.ManagedPrivateEndpoints",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/synapse/Azure.Analytics.Synapse.ManagedPrivateEndpoints",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Synapse Analytics Monitoring client library for .NET\n\nThis directory contains the open source subset of the .NET SDK. For documentation of the complete Azure SDK, please see the [Microsoft Azure .NET Developer Center](https://azure.microsoft.com/develop/net/).\n\nAzure Synapse Analytics provides a rich monitoring experience within the Azure portal to surface insights regarding your data warehouse workload. The Azure Synapse Analytics monitoring client library enables programmatically monitoring your resources.\n\nAzure Synapse is a limitless analytics service that brings together enterprise data warehousing and Big Data analytics. It gives you the freedom to query data on your terms, using either serverless on-demand or provisioned resources\u2014at scale. Azure Synapse brings these two worlds together with a unified experience to ingest, prepare, manage, and serve data for immediate BI and machine learning needs.\n\n## Getting started\n\nThe complete Microsoft Azure SDK can be downloaded from the [Microsoft Azure Downloads Page](https://azure.microsoft.com/downloads/?sdk=net) and ships with support for building deployment packages, integrating with tooling, rich command line tooling, and more.\n\nFor the best development experience, developers should use the official Microsoft NuGet packages for libraries. NuGet packages are regularly updated with new functionality and hotfixes.\n\n### Install the package\n\nInstall the Azure Synapse Analytics monitoring client library for .NET with [NuGet](https://www.nuget.org/packages/Azure.Analytics.Synapse.Monitoring/):\n\n```dotnetcli\ndotnet add package Azure.Analytics.Synapse.Monitoring --prerelease\n```\n\n### Prerequisites\n\n- **Azure Subscription:** To use Azure services, including Azure Synapse, you'll need a subscription. If you do not have an existing Azure account, you may sign up for a [free trial](https://azure.microsoft.com/free/dotnet/) or use your [Visual Studio Subscription](https://visualstudio.microsoft.com/subscriptions/) benefits when you [create an account](https://azure.microsoft.com/account).\n- An existing Azure Synapse workspace. If you need to create an Azure Synapse workspace, you can use the [Azure Portal](https://portal.azure.com/) or [Azure CLI](https://docs.microsoft.com/cli/azure).\n\nIf you use the Azure CLI, the command looks like below:\n\n```PowerShell\naz synapse workspace create \\\n    --name <your-workspace-name> \\\n    --resource-group <your-resource-group-name> \\\n    --storage-account <your-storage-account-name> \\\n    --file-system <your-storage-file-system-name> \\\n    --sql-admin-login-user <your-sql-admin-user-name> \\\n    --sql-admin-login-password <your-sql-admin-user-password> \\\n    --location <your-workspace-location>\n```\n\n### Authenticate the client\n\nIn order to interact with the Azure Synapse Analytics service, you'll need to create an instance of the [MonitoringClient](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/synapse/Azure.Analytics.Synapse.Monitoring/src/Generated/MonitoringClient.cs) class. You need a **workspace endpoint**, which you may see as \"Development endpoint\" in the portal,\nand **client secret credentials (client id, client secret, tenant id)** to instantiate a client object.\n\nClient secret credential authentication is being used in this getting started section but you can find more ways to authenticate with [Azure identity](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/identity/Azure.Identity). To use the [DefaultAzureCredential](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/identity/Azure.Identity#defaultazurecredential) provider shown below,\nor other credential providers provided with the Azure SDK, you should install the Azure.Identity package:\n\n```dotnetcli\ndotnet add package Azure.Identity\n```\n\n## Key concepts\n\n### MonitoringClient\n\nWith a `MonitoringClient` you can get list of Spark applications or SQL OD/DW query for the workspace.\n\n### Thread safety\n\nWe guarantee that all client instance methods are thread-safe and independent of each other ([guideline](https://azure.github.io/azure-sdk/dotnet_introduction.html#dotnet-service-methods-thread-safety)). This ensures that the recommendation of reusing client instances is always safe, even across threads.\n\n### Additional concepts\n\n<!-- CLIENT COMMON BAR -->\n\n[Client options](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#configuring-service-clients-using-clientoptions) |\n[Accessing the response](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#accessing-http-response-details-using-responset) |\n[Long-running operations](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#consuming-long-running-operations-using-operationt) |\n[Handling failures](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#reporting-errors-requestfailedexception) |\n[Diagnostics](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md) |\n[Mocking](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#mocking) |\n[Client lifetime](https://devblogs.microsoft.com/azure-sdk/lifetime-management-and-thread-safety-guarantees-of-azure-sdk-net-clients/)\n\n<!-- CLIENT COMMON BAR -->\n\n## Examples\n\nThe Azure.Analytics.Synapse.Monitoring package supports synchronous and asynchronous APIs. The following section covers some of the most common Azure Synapse Analytics monitoring related tasks:\n\n### Monitoring examples\n\n- [Get list of Spark applications](#get-list-of-spark-applications)\n- [Get SQL query](#get-sql-query)\n\n### Get list of Spark applications\n\n`GetSparkJobList` gets a list of spark applications for the workspace.\n\n```C# Snippet:GetSparkJobList\nSparkJobListViewResponse sparkJobList = client.GetSparkJobList();\nforeach (var sparkJob in sparkJobList.SparkJobs)\n{\n    if (sparkJob.State == \"Running\")\n    {\n        Console.WriteLine ($\"{sparkJob.Name} has been running for {sparkJob.RunningDuration}\");\n    }\n    else\n    {\n        Console.WriteLine ($\"{sparkJob.Name} has been in {sparkJob.State} for {sparkJob.QueuedDuration}\");\n    }\n}\n```\n\n### Get SQl query\n\n`GetSqlJobQueryString` gets the SQL OD/DW query\n\n```C# Snippet:GetSqlJobQueryString\nSqlQueryStringDataModel sqlQuery = client.GetSqlJobQueryString();\n```\n\n## To build\n\nFor information on building the Azure Synapse client library, please see [Building the Microsoft Azure SDK for .NET](https://github.com/azure/azure-sdk-for-net#to-build)\n\n## Target frameworks\n\nFor information about the target frameworks of the Azure Synapse client library, please refer to the [Target Frameworks](https://github.com/azure/azure-sdk-for-net#target-frameworks) of the Microsoft Azure SDK for .NET.\n\n## Troubleshooting\n\nPlease open issue in github.\n\n## Next steps\n\nThe next step is adding more examples\n\n## Contributing\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n",
        "repo_name": "synapse/Azure.Analytics.Synapse.Monitoring",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/synapse/Azure.Analytics.Synapse.Monitoring",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Synapse Spark client library for .NET\n\nThis directory contains the open source subset of the .NET SDK. For documentation of the complete Azure SDK, please see the [Microsoft Azure .NET Developer Center](https://azure.microsoft.com/develop/net/).\n\nUse the client library for Synapse to:\n\n- Submit Spark Batch job and Spark Session Job\n\nAzure Synapse is a limitless analytics service that brings together enterprise data warehousing and Big Data analytics. It gives you the freedom to query data on your terms, using either serverless on-demand or provisioned resources\u2014at scale. Azure Synapse brings these two worlds together with a unified experience to ingest, prepare, manage, and serve data for immediate BI and machine learning needs.\n\n## Getting started\n\nThe complete Microsoft Azure SDK can be downloaded from the [Microsoft Azure Downloads Page](https://azure.microsoft.com/downloads/?sdk=net) and ships with support for building deployment packages, integrating with tooling, rich command line tooling, and more.\n\nFor the best development experience, developers should use the official Microsoft NuGet packages for libraries. NuGet packages are regularly updated with new functionality and hotfixes.\n\n### Install the package\n\nInstall the Spark client library for Azure Synapse Analytics for .NET with [NuGet](https://www.nuget.org/packages/Azure.Analytics.Synapse.Spark/):\n\n```dotnetcli\ndotnet add package Azure.Analytics.Synapse.Spark --prerelease\n```\n\n### Prerequisites\n\n- **Azure Subscription:** To use Azure services, including Azure Synapse, you'll need a subscription. If you do not have an existing Azure account, you may sign up for a [free trial](https://azure.microsoft.com/free/dotnet/) or use your [Visual Studio Subscription](https://visualstudio.microsoft.com/subscriptions/) benefits when you [create an account](https://azure.microsoft.com/account).\n- An existing Azure Synapse workspace. If you need to create an Azure Synapse workspace, you can use the [Azure Portal](https://portal.azure.com/) or [Azure CLI](https://docs.microsoft.com/cli/azure).\n\nIf you use the Azure CLI, the command looks like below:\n\n```PowerShell\naz synapse workspace create \\\n    --name <your-workspace-name> \\\n    --resource-group <your-resource-group-name> \\\n    --storage-account <your-storage-account-name> \\\n    --file-system <your-storage-file-system-name> \\\n    --sql-admin-login-user <your-sql-admin-user-name> \\\n    --sql-admin-login-password <your-sql-admin-user-password> \\\n    --location <your-workspace-location>\n```\n\n### Authenticate the client\n\nIn order to interact with the Azure Synapse Analytics service, you'll need to create an instance of the [SparkBatchClient](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/synapse/Azure.Analytics.Synapse.Spark/src/Generated/SparkBatchClient.cs) or [SparkSessionClient](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/synapse/Azure.Analytics.Synapse.Spark/src/Generated/SparkSessionClient.cs) class. You need a **workspace endpoint**, which you may see as \"Development endpoint\" in the portal,\nand **client secret credentials (client id, client secret, tenant id)** to instantiate a client object.\n\nClient secret credential authentication is being used in this getting started section but you can find more ways to authenticate with [Azure identity](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/identity/Azure.Identity). To use the [DefaultAzureCredential](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/identity/Azure.Identity#defaultazurecredential) provider shown below,\nor other credential providers provided with the Azure SDK, you should install the Azure.Identity package:\n\n```dotnetcli\ndotnet add package Azure.Identity\n```\n\n## Examples\n\nThe Microsoft.Azure.Synapse supports the CRUD of spark batch job.\n\n### Spark Batch Job examples\n\n- [List spark batch job](#list-spark-batch-job)\n- [Create spark batch job](#create-spark-batch-job)\n- [Cancel spark batch job](#cancel-spark-batch-job)\n\n### List spark batch job\n\nList the spark batch job under the specific spark pool of a specific synapse workspace\n\n```C# Snippet:ListSparkBatchJobs\nResponse<SparkBatchJobCollection> jobs = client.GetSparkBatchJobs();\nforeach (SparkBatchJob job in jobs.Value.Sessions)\n{\n    Console.WriteLine(job.Name);\n}\n```\n\n### Create spark batch job\n\nCreate spark batch job under specific workspace and spark pool.\n\n```C# Snippet:SubmitSparkBatchJob\nstring name = $\"batch-{Guid.NewGuid()}\";\nstring file = string.Format(\"abfss://{0}@{1}.dfs.core.windows.net/samples/net/wordcount/wordcount.zip\", fileSystem, storageAccount);\nSparkBatchJobOptions request = new SparkBatchJobOptions(name, file)\n{\n    ClassName = \"WordCount\",\n    Arguments =\n    {\n        string.Format(\"abfss://{0}@{1}.dfs.core.windows.net/samples/net/wordcount/shakespeare.txt\", fileSystem, storageAccount),\n        string.Format(\"abfss://{0}@{1}.dfs.core.windows.net/samples/net/wordcount/result/\", fileSystem, storageAccount),\n    },\n    DriverMemory = \"28g\",\n    DriverCores = 4,\n    ExecutorMemory = \"28g\",\n    ExecutorCores = 4,\n    ExecutorCount = 2\n};\n\nSparkBatchOperation createOperation = client.StartCreateSparkBatchJob(request);\nwhile (!createOperation.HasCompleted)\n{\n    System.Threading.Thread.Sleep(2000);\n    createOperation.UpdateStatus();\n}\nSparkBatchJob jobCreated = createOperation.Value;\n```\n\n### Cancel spark batch job\n\nCancel a Spark batch job with Spark batch id under specific workspace and Spark pool.\n\n```C# Snippet:CancelSparkBatchJob\nResponse operation = client.CancelSparkBatchJob(jobCreated.Id);\n```\n\n## To build\n\nFor information on building the Azure Synapse client library, please see [Building the Microsoft Azure SDK for .NET](https://github.com/azure/azure-sdk-for-net#to-build)\n\n## Target frameworks\n\nFor information about the target frameworks of the Azure Synapse client library, please refer to the [Target Frameworks](https://github.com/azure/azure-sdk-for-net#target-frameworks) of the Microsoft Azure SDK for .NET.\n\n## Key concepts\n\nSubmit Spark job.\n\n### Thread safety\n\nWe guarantee that all client instance methods are thread-safe and independent of each other ([guideline](https://azure.github.io/azure-sdk/dotnet_introduction.html#dotnet-service-methods-thread-safety)). This ensures that the recommendation of reusing client instances is always safe, even across threads.\n\n### Additional concepts\n\n<!-- CLIENT COMMON BAR -->\n\n[Client options](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#configuring-service-clients-using-clientoptions) |\n[Accessing the response](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#accessing-http-response-details-using-responset) |\n[Long-running operations](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#consuming-long-running-operations-using-operationt) |\n[Handling failures](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#reporting-errors-requestfailedexception) |\n[Diagnostics](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md) |\n[Mocking](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#mocking) |\n[Client lifetime](https://devblogs.microsoft.com/azure-sdk/lifetime-management-and-thread-safety-guarantees-of-azure-sdk-net-clients/)\n\n<!-- CLIENT COMMON BAR -->\n\n## Troubleshooting\n\nPlease open issue in github.\n\n## Next steps\n\nThe next step is adding more examples\n\n## Contributing\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n",
        "repo_name": "synapse/Azure.Analytics.Synapse.Spark",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/synapse/Azure.Analytics.Synapse.Spark",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Synapse Analytics management client library for .NET\n\nMicrosoft Azure Synapse Analytics is a limitless analytics service that brings together data integration, enterprise data warehousing, and big data analytics.\n\nThis library supports managing Microsoft Azure Synapse Analytics resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Synapse Analytics management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.Synapse\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "synapse/Azure.ResourceManager.Synapse",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/synapse/Azure.ResourceManager.Synapse",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Synapse client library for .NET\n\nAzure Synapse is a limitless analytics service that brings together enterprise data warehousing and Big Data analytics. It gives you the freedom to query data on your terms, using either serverless on-demand or provisioned resources\u2014at scale. Azure Synapse brings these two worlds together with a unified experience to ingest, prepare, manage, and serve data for immediate BI and machine learning needs. \n\nThis directory contains the open source subset of the .NET SDK. For documentation of the complete Azure SDK, please see the [Microsoft Azure .NET Developer Center](https://azure.microsoft.com/develop/net/).\n\nUse the client library for Synapse to:\n\n- Submit Spark Batch job and Spark Session Job\n- Support management the ACL of Workspace\n\n## Getting started\n\nThe complete Microsoft Azure SDK can be downloaded from the [Microsoft Azure Downloads Page](https://azure.microsoft.com/downloads/?sdk=net) and ships with support for building deployment packages, integrating with tooling, rich command line tooling, and more.\n\nFor the best development experience, developers should use the official Microsoft NuGet packages for libraries. NuGet packages are regularly updated with new functionality and hotfixes.\n\n### Install the package\n\nInstall the Azure Synapse client library for .NET with [NuGet][nuget]:\n\n```dotnetcli\ndotnet add package Microsoft.Azure.Synapse --prerelease\n```\n\n### Prerequisites\n\n- Microsoft Azure Subscription: To call Microsoft Azure services, including Azure Synapse, you need to first [create an account](https://account.windowsazure.com/Home/Index). If you do not have an existing Azure account, you may sign up for a free trial or use your MSDN subscriber benefits.\n\n- The Azure Synapse client library shares the same [Prerequisites](https://github.com/azure/azure-sdk-for-net#prerequisites) as the Microsoft Azure SDK for .NET.\n\n## Examples\nThe Microsoft.Azure.Synapse supports the CRUD of spark batch job.\n\n### Spark Batch Job examples\n* [List spark batch job](#list-spark-batch-job)\n* [Create spark batch job](#create-spark-batch-job)\n* [Delete spark batch job](#delete-spark-batch-job)\n\n### List spark batch job\nList the spark batch job under the specific spark pool of a specific synapse workspace\n\n```C#\nExtendedLivyListBatchResponse listBatchResponse = synapseClient.SparkBatch.List(workspaceName, sparkPoolName);\n\nConsole.WriteLine(listBatchResponse.Total);\n```\n\n### Create spark batch job\nCreate spark batch job under specific workspace and spark pool.\n\n```C#\n    ExtendedLivyBatchRequest batchRequest = new ExtendedLivyBatchRequest()\n    {\n        Name = \"WordCount_Java\",\n        ClassName = \"WordCount\",\n\n        // The abfss path of the file\n        File = \"abfss://yourfilesystem@{your adlsgen2 account name}.dfs.core.windows.net/{your path}/wordcount.jar\",\n\n        Args= new List<string>\n        {\n            \"abfss://yourfilesystem@{your adlsgen2 account name}.dfs.core.windows.net/{your path}/input.txt\",\n            \"abfss://yourfilesystem@{your adlsgen2 account name}.dfs.core.windows.net/{your path}/result\"\n        },\n\n        DriverCores = 2,\n        DriverMemory = \"4G\",\n        ExecutorCores = 2,\n        NumExecutors = 2,\n        ExecutorMemory = \"4G\",\n    };\n\n    var batchJob = synapseClient.SparkBatch.Create(workspaceName, sparkPoolName, batchRequest);\n\n    Console.WriteLine(ExtractSparkBatchJobInfomation(batchJob));\n}\n```\n\n### Delete spark batch job\nDelete a spark batch job with spark batch id under specific workspace and spark pool.\n\n```C#\nsynapseClient.SparkBatch.Delete(workspaceName, sparkPoolName, sparkBatchId);\n```\n       \n## To build\n\nFor information on building the Azure Synapse client library, please see [Building the Microsoft Azure SDK for .NET](https://github.com/azure/azure-sdk-for-net#to-build)\n\n## Target frameworks\n\nFor information about the target frameworks of the Azure Synapse client library, please refer to the [Target Frameworks](https://github.com/azure/azure-sdk-for-net#target-frameworks) of the Microsoft Azure SDK for .NET.  \n\n## Key concepts\n\nSubmit spark job.\n\n## Troubleshooting\n\nPlease open issue in github.\n\n## Next steps\n\nThe next step is adding more examples\n\n## Contributing\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n",
        "repo_name": "synapse/Microsoft.Azure.Synapse",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/synapse/Microsoft.Azure.Synapse",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Tables client library for .NET\n\nAzure Table storage is a service that stores large amounts of structured NoSQL data in the cloud, providing\na key/attribute store with a schema-less design.\n\nAzure Cosmos DB provides a Table API for applications that are written for Azure Table storage that need premium capabilities like:\n\n- Turnkey global distribution.\n- Dedicated throughput worldwide.\n- Single-digit millisecond latencies at the 99th percentile.\n- Guaranteed high availability.\n- Automatic secondary indexing.\n\nThe Azure Tables client library can seamlessly target either Azure Table storage or Azure Cosmos DB table service endpoints with no code changes.\n\n[Source code][table_client_src] | [Package (NuGet)][table_client_nuget_package] | [API reference documentation][api_reference] | [Samples][table_client_samples] | [Change Log][table_change_log]\n\n## Getting started\n\n### Install the package\nInstall the Azure Tables client library for .NET with [NuGet][table_client_nuget_package]:\n\n```dotnetcli\ndotnet add package Azure.Data.Tables\n```\n\n### Prerequisites\n* An [Azure subscription][azure_sub].\n* An existing Azure storage account or Azure Cosmos DB database with Azure Table API specified.\n\nIf you need to create either of these, you can use the [Azure CLI][azure_cli].\n\n#### Creating a storage account\n\nCreate a storage account `mystorageaccount` in resource group `MyResourceGroup`\nin the subscription `MySubscription` in the West US region.\n```\naz storage account create -n mystorageaccount -g MyResourceGroup -l westus --subscription MySubscription\n```\n\n#### Creating a Cosmos DB\n\nCreate a Cosmos DB account `MyCosmosDBDatabaseAccount` in resource group `MyResourceGroup`\nin the subscription `MySubscription` and a table named `MyTableName` in the account.\n\n```\naz cosmosdb create --name MyCosmosDBDatabaseAccount --capabilities EnableTable --resource-group MyResourceGroup --subscription MySubscription\n\naz cosmosdb table create --name MyTableName --resource-group MyResourceGroup --account-name MyCosmosDBDatabaseAccount\n```\n\n### Authenticate the Client\n\nLearn more about options for authentication _(including Connection Strings, Shared Key, Shared Key Signatures, and TokenCredentials)_ [in our samples.](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/tables/Azure.Data.Tables/samples/Sample0Auth.md)\n\n## Key concepts\n\n- `TableServiceClient` - Client that provides methods to interact at the Table Service level such as creating, listing, and deleting tables\n- `TableClient` - Client that provides methods to interact at an table entity level such as creating, querying, and deleting entities within a table.\n- `Table` - Tables store data as collections of entities.\n- `Entity` - Entities are similar to rows. An entity has a primary key and a set of properties. A property is a name value pair, similar to a column.\n\nCommon uses of the Table service include:\n\n- Storing TBs of structured data capable of serving web scale applications\n- Storing datasets that don't require complex joins, foreign keys, or stored procedures and can be de-normalized for fast access\n- Quickly querying data using a clustered index\n- Accessing data using the OData protocol and LINQ filter expressions\n\n### Thread safety\nWe guarantee that all client instance methods are thread-safe and independent of each other ([guideline](https://azure.github.io/azure-sdk/dotnet_introduction.html#dotnet-service-methods-thread-safety)). This ensures that the recommendation of reusing client instances is always safe, even across threads.\n\n### Additional concepts\n<!-- CLIENT COMMON BAR -->\n[Client options](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#configuring-service-clients-using-clientoptions) |\n[Accessing the response](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#accessing-http-response-details-using-responset) |\n[Long-running operations](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#consuming-long-running-operations-using-operationt) |\n[Handling failures](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#reporting-errors-requestfailedexception) |\n[Diagnostics](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md) |\n[Mocking](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#mocking) |\n[Client lifetime](https://devblogs.microsoft.com/azure-sdk/lifetime-management-and-thread-safety-guarantees-of-azure-sdk-net-clients/)\n<!-- CLIENT COMMON BAR -->\n\n## Examples\n- [Create the Table service client](#create-the-table-service-client)\n    - [Create an Azure table](#create-an-azure-table)\n    - [Get an Azure table](#get-an-azure-table)\n    - [Delete an Azure table](#delete-an-azure-table)\n- [Create the Table client](#create-the-table-client)\n    - [Add table entities](#add-table-entities)\n    - [Query table entities ](#query-table-entities)\n    - [Delete table entities](#delete-table-entities)\n\n### Create the Table service client\n\nFirst, we need to construct a `TableServiceClient`.\n\n```C# Snippet:TablesSample1CreateClient\n// Construct a new \"TableServiceClient using a TableSharedKeyCredential.\n\nvar serviceClient = new TableServiceClient(\n    new Uri(storageUri),\n    new TableSharedKeyCredential(accountName, storageAccountKey));\n```\n\n### Create an Azure table\nNext, we can create a new table.\n\n```C# Snippet:TablesSample1CreateTable\n// Create a new table. The TableItem class stores properties of the created table.\nTableItem table = serviceClient.CreateTableIfNotExists(tableName);\nConsole.WriteLine($\"The created table's name is {table.Name}.\");\n```\n\n### Get an Azure table\nThe set of existing Azure tables can be queries using an OData filter.\n\n```C# Snippet:TablesSample3QueryTables\n// Use the <see cref=\"TableServiceClient\"> to query the service. Passing in OData filter strings is optional.\n\nPageable<TableItem> queryTableResults = serviceClient.Query(filter: $\"TableName eq '{tableName}'\");\n\nConsole.WriteLine(\"The following are the names of the tables in the query results:\");\n\n// Iterate the <see cref=\"Pageable\"> in order to access queried tables.\n\nforeach (TableItem table in queryTableResults)\n{\n    Console.WriteLine(table.Name);\n}\n```\n\n### Delete an Azure table\n\nIndividual tables can be deleted from the service.\n\n```C# Snippet:TablesSample1DeleteTable\n// Deletes the table made previously.\nserviceClient.DeleteTable(tableName);\n```\n\n### Create the Table client\n\nTo interact with table entities, we must first construct a `TableClient`.\n\n```C# Snippet:TablesSample2CreateTableWithTableClient\n// Construct a new <see cref=\"TableClient\" /> using a <see cref=\"TableSharedKeyCredential\" />.\nvar tableClient = new TableClient(\n    new Uri(storageUri),\n    tableName,\n    new TableSharedKeyCredential(accountName, storageAccountKey));\n\n// Create the table in the service.\ntableClient.Create();\n```\n\n### Add table entities\n\nLet's define a new `TableEntity` so that we can add it to the table.\n\n```C# Snippet:TablesSample2CreateDictionaryEntity\n// Make a dictionary entity by defining a <see cref=\"TableEntity\">.\nvar tableEntity = new TableEntity(partitionKey, rowKey)\n{\n    { \"Product\", \"Marker Set\" },\n    { \"Price\", 5.00 },\n    { \"Quantity\", 21 }\n};\n\nConsole.WriteLine($\"{tableEntity.RowKey}: {tableEntity[\"Product\"]} costs ${tableEntity.GetDouble(\"Price\")}.\");\n```\n\nUsing the `TableClient` we can now add our new entity to the table.\n\n```C# Snippet:TablesSample2AddEntity\n// Add the newly created entity.\ntableClient.AddEntity(tableEntity);\n```\n\n### Query table entities\n\nTo inspect the set of existing table entities, we can query the table using an OData filter.\n\n```C# Snippet:TablesSample4QueryEntitiesFilter\nPageable<TableEntity> queryResultsFilter = tableClient.Query<TableEntity>(filter: $\"PartitionKey eq '{partitionKey}'\");\n\n// Iterate the <see cref=\"Pageable\"> to access all queried entities.\nforeach (TableEntity qEntity in queryResultsFilter)\n{\n    Console.WriteLine($\"{qEntity.GetString(\"Product\")}: {qEntity.GetDouble(\"Price\")}\");\n}\n\nConsole.WriteLine($\"The query returned {queryResultsFilter.Count()} entities.\");\n```\n\nIf you prefer LINQ style query expressions, we can query the table using that syntax as well.\nTo demonstrate this syntax, you'll need a strongly typed model such as the one below:\n\n```C# Snippet:TablesSample2DefineStronglyTypedEntity\n// Define a strongly typed entity by implementing the ITableEntity interface.\npublic class OfficeSupplyEntity : ITableEntity\n{\n    public string Product { get; set; }\n    public double Price { get; set; }\n    public int Quantity { get; set; }\n    public string PartitionKey { get; set; }\n    public string RowKey { get; set; }\n    public DateTimeOffset? Timestamp { get; set; }\n    public ETag ETag { get; set; }\n}\n```\n\nGiven this model class definition, here is how you'd write a query:\n\n```C# Snippet:TablesSample4QueryEntitiesExpression\ndouble priceCutOff = 6.00;\nPageable<OfficeSupplyEntity> queryResultsLINQ = tableClient.Query<OfficeSupplyEntity>(ent => ent.Price >= priceCutOff);\n```\n\n### Delete table entities\n\nIf we no longer need our new table entity, it can be deleted.\n\n```C# Snippet:TablesSample2DeleteEntity\n// Delete the entity given the partition and row key.\ntableClient.DeleteEntity(partitionKey, rowKey);\n```\n\n## Troubleshooting\n\nWhen using the Azure tables library, errors returned by the service are reported using the same HTTP\nstatus codes returned for [REST API][tables_rest] requests.\n\nFor example, if you try to create a table that already exists, a `409` error is returned, indicating \"Conflict\".\n\n```C# Snippet:CreateDuplicateTable\n// Construct a new TableClient using a connection string.\n\nvar client = new TableClient(\n    connectionString,\n    tableName);\n\n// Create the table if it doesn't already exist.\n\nclient.CreateIfNotExists();\n\n// Now attempt to create the same table unconditionally.\n\ntry\n{\n    client.Create();\n}\ncatch (RequestFailedException ex) when (ex.Status == (int)HttpStatusCode.Conflict)\n{\n    Console.WriteLine(ex.ToString());\n}\n```\n\n### Setting up console logging\n\nThe simplest way to see the logs is to enable the console logging.\nTo create an Azure SDK log listener that outputs messages to console use AzureEventSourceListener.CreateConsoleLogger method.\n\n```C#\n// Setup a listener to monitor logged events.\nusing AzureEventSourceListener listener = AzureEventSourceListener.CreateConsoleLogger();\n```\n\nTo learn more about other logging mechanisms see [here][logging].\n\n## Next steps\n\nGet started with our [Table samples][table_client_samples].\n\n## Known Issues\n\nA list of currently known issues relating to Cosmos DB table endpoints can be found [here](https://aka.ms/tablesknownissues).\n\n## Contributing\n\nThis project welcomes contributions and suggestions.  Most contributions require\nyou to agree to a Contributor License Agreement (CLA) declaring that you have\nthe right to, and actually do, grant us the rights to use your contribution. For\ndetails, visit [cla.microsoft.com][cla].\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc].\nFor more information see the [Code of Conduct FAQ][coc_faq] or contact\n[opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n[tables_rest]: https://docs.microsoft.com/rest/api/storageservices/table-service-rest-api\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/dotnet/\n[table_client_nuget_package]: https://www.nuget.org/packages?q=Azure.Data.Tables\n[table_client_samples]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/tables/Azure.Data.Tables/samples\n[table_client_src]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/tables/Azure.Data.Tables/src\n[table_change_log]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/tables/Azure.Data.Tables/CHANGELOG.md\n[api_reference]: https://docs.microsoft.com/dotnet/api/overview/azure/data.tables-readme\n[logging]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2Fsdk%2Ftables%2FAzure.Data.Tables%2FREADME.png)\n",
        "repo_name": "tables/Azure.Data.Tables",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/tables/Azure.Data.Tables",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure WebJobs Tables client library for .NET\n\nThis extension provides functionality for accessing Azure Tables in Azure Functions.\n\n## Getting started\n\n### Install the package\n\nInstall the Tables extension with [NuGet][nuget]:\n\n```dotnetcli\ndotnet add package Microsoft.Azure.WebJobs.Extensions.Tables\n```\n\n### Prerequisites\n\nYou need an [Azure subscription][azure_sub] and a\n[Storage Account][storage_account_docs] or [Cosmos Tables Account][cosmos_tables_account_docs] to use this package.\n\n#### Using Storage Tables\n\nTo create a new Storage Account, you can use the [Azure Portal][storage_account_create_portal],\n[Azure PowerShell][storage_account_create_ps], or the [Azure CLI][storage_account_create_cli].\nHere's an example using the Azure CLI:\n\n```Powershell\naz storage account create --name <your-resource-name> --resource-group <your-resource-group-name> --location westus --sku Standard_LRS\n```\n\n#### Using Cosmos Tables\n\nTo create a new Cosmos Tables , you can use the [Azure Portal][storage_account_create_portal],\n[Azure PowerShell][storage_account_create_ps], or the [Azure CLI][storage_account_create_cli].\n\n### Authenticate the client\n\nConnection represents a set of information required to connect to a table service. It can contain a connection string, an endpoint, token credential or a shared key.\n\nThe `Connection` property of `TableAttribute` defines which connection is used for the Table Service access. For example, `[Tables(Connection=\"MyTableService\")]` is going to use `MyTableService` connection.\n\nThe connection information can be set in [`local.settings.json`][local_settings_json] or [application settings in Azure portal][appsettings_portal].\n\nWhen adding a setting to *local.settings.json* place it under the `Values` property:\n\n```json\n{\n  \"IsEncrypted\": false,\n  \"Values\": {\n    \"MyTableService\": \"...\"\n  }\n}\n```\n\nWhen adding a setting to application settings in Azure portal use the provided name directly:\n\n`MyTableService = ...`\n\nTables extension uses the `AzureWebJobsStorage` connection name by default.\n\n#### Connection string\n\nTo use connection strings authentication assign connection string value directly to the connection setting.\n\n`<ConnectionName>` = `DefaultEndpointsProtocol=https;AccountName=...;AccountKey=...;EndpointSuffix=core.windows.net`\n\n#### Using endpoint and token credential\n\n**NOTE:** token credential authentication is supported only for storage tables.\n\n`<ConnectionName>__endpoint` = `https://...table.core.windows.net`\n\nIf no credential information is provided the [`DefaultAzureCredential`][identity_dac] is used.\n\nWhen using user-assigned manageed identity the `clientId` and `credential` settings need to be provided:\n\n`<ConnectionName>__credential` = `managedidentity`\n\n`<ConnectionName>__clientId` = `<user-assigned client id>`\n\n#### Using shared key credential\n\nWhen using [shared key authentication](https://docs.microsoft.com/rest/api/storageservices/authorize-with-shared-key) the `endpoint`, `accountKey` and `accountName` need to be provided.\n\n`<ConnectionName>__endpoint` = `https://...table.core.windows.net`\n\n`<ConnectionName>__credential__accountName` = `<account name>`\n\n`<ConnectionName>__credential__accountKey` = `<account key>`\n\n## Key concepts\n\nThe input binding allows you to read table as input to an Azure Function. The output binding allows you to modify and delete table rows in an Azure Function.\n\nPlease follow the [input binding tutorial](https://docs.microsoft.com/azure/azure-functions/functions-bindings-storage-table-input?tabs=csharp) and [output binding tutorial](https://docs.microsoft.com/azure/azure-functions/functions-bindings-storage-table-output?tabs=csharp) to learn about using this extension for accessing table service.\n\n## Examples\n\nTables extensions provides only bindings. Bindings by themselves can't trigger a function. It can only read or write entries to the table.\n\nIn the following example we use [HTTP trigger](https://docs.microsoft.com/azure/azure-functions/functions-bindings-http-webhook-trigger?tabs=csharp) to invoke the function.\n\n### Binding to a single entity\n\n```C# Snippet:InputSingle\npublic class InputSingle\n{\n    [FunctionName(\"InputSingle\")]\n    public static void Run(\n        [HttpTrigger(AuthorizationLevel.Anonymous, \"GET\")] HttpRequest request,\n        [Table(\"MyTable\", \"<PartitionKey>\", \"<RowKey>\")] TableEntity entity, ILogger log)\n    {\n        log.LogInformation($\"PK={entity.PartitionKey}, RK={entity.RowKey}, Text={entity[\"Text\"]}\");\n    }\n}\n```\n\n### Binding to a single entity using model type\n\n```C# Snippet:MyEntity\npublic class MyEntity\n{\n    public string PartitionKey { get; set; }\n    public string RowKey { get; set; }\n    public string Text { get; set; }\n}\n```\n```C# Snippet:InputSingleModel\npublic class InputSingleModel\n{\n    [FunctionName(\"InputSingleModel\")]\n    public static void Run(\n        [HttpTrigger(AuthorizationLevel.Anonymous, \"GET\")] HttpRequest request,\n        [Table(\"MyTable\", \"<PartitionKey>\", \"<RowKey>\")] MyEntity entity, ILogger log)\n    {\n        log.LogInformation($\"PK={entity.PartitionKey}, RK={entity.RowKey}, Text={entity.Text}\");\n    }\n}\n```\n\n### Binding to multiple entities with filter\n\n```C# Snippet:InputMultipleEntitiesFilter\npublic class InputMultipleEntitiesFilter\n{\n    [FunctionName(\"InputMultipleEntitiesFilter\")]\n    public static void Run(\n        [HttpTrigger(AuthorizationLevel.Anonymous, \"GET\")] HttpRequest request,\n        [Table(\"MyTable\", \"<PartitionKey>\", Filter = \"Text ne ''\")] IEnumerable<TableEntity> entities, ILogger log)\n    {\n        foreach (var entity in entities)\n        {\n            log.LogInformation($\"PK={entity.PartitionKey}, RK={entity.RowKey}, Text={entity[\"Text\"]}\");\n        }\n    }\n}\n```\n\n### Creating a single entity\n\n```C# Snippet:OutputSingle\npublic class OutputSingle\n{\n    [FunctionName(\"OutputSingle\")]\n    public static void Run(\n        [HttpTrigger(AuthorizationLevel.Anonymous, \"GET\")] HttpRequest request,\n        [Table(\"MyTable\")] out TableEntity entity)\n    {\n        entity = new TableEntity(\"<PartitionKey>\", \"<RowKey>\")\n        {\n            [\"Text\"] = \"Hello\"\n        };\n    }\n}\n```\n\n### Creating a single entity using model\n\n```C# Snippet:MyEntity\npublic class MyEntity\n{\n    public string PartitionKey { get; set; }\n    public string RowKey { get; set; }\n    public string Text { get; set; }\n}\n```\n```C# Snippet:OutputSingleModel\npublic class OutputSingleModel\n{\n    [FunctionName(\"OutputSingleModel\")]\n    public static void Run(\n        [HttpTrigger(AuthorizationLevel.Anonymous, \"GET\")] HttpRequest request,\n        [Table(\"MyTable\")] out MyEntity entity)\n    {\n        entity = new MyEntity()\n        {\n            PartitionKey = \"<PartitionKey>\",\n            RowKey = \"<RowKey>\",\n            Text = \"Hello\"\n        };\n    }\n}\n```\n\n### Creating multiple entities\n\n```C# Snippet:OutputMultiple\npublic class OutputMultiple\n{\n    [FunctionName(\"OutputMultiple\")]\n    public static void Run(\n        [HttpTrigger(AuthorizationLevel.Anonymous, \"POST\")] HttpRequest request,\n        [Table(\"MyTable\")] IAsyncCollector<TableEntity> collector)\n    {\n        for (int i = 0; i < 10; i++)\n        {\n            collector.AddAsync(new TableEntity(\"<PartitionKey>\", i.ToString())\n            {\n                [\"Text\"] = i.ToString()\n            });\n        }\n    }\n}\n```\n\n### Creating multiple entities using model\n\n```C# Snippet:MyEntity\npublic class MyEntity\n{\n    public string PartitionKey { get; set; }\n    public string RowKey { get; set; }\n    public string Text { get; set; }\n}\n```\n```C# Snippet:OutputMultipleModel\npublic class OutputMultipleModel\n{\n    [FunctionName(\"OutputMultipleModel\")]\n    public static void Run(\n        [HttpTrigger(AuthorizationLevel.Anonymous, \"POST\")] HttpRequest request,\n        [Table(\"MyTable\")] IAsyncCollector<MyEntity> collector)\n    {\n        for (int i = 0; i < 10; i++)\n        {\n            collector.AddAsync(new MyEntity()\n            {\n                PartitionKey = \"<PartitionKey>\",\n                RowKey = i.ToString(),\n                Text = i.ToString()\n            });\n        }\n    }\n}\n```\n\n### Binding to SDK TableClient type\n\nUse a TableClient method parameter to access the table by using the Azure Tables SDK.\n\n```C# Snippet:InputTableClient\npublic class BindTableClient\n{\n    [FunctionName(\"BindTableClient\")]\n    public static async Task Run(\n        [HttpTrigger(AuthorizationLevel.Anonymous, \"POST\")] HttpRequest request,\n        [Table(\"MyTable\")] TableClient client)\n    {\n        await client.AddEntityAsync(new TableEntity(\"<PartitionKey>\", \"<RowKey>\")\n        {\n            [\"Text\"] = request.GetEncodedPathAndQuery()\n        });\n    }\n}\n```\n\n## Troubleshooting\n\nPlease refer to [Monitor Azure Functions](https://docs.microsoft.com/azure/azure-functions/functions-monitoring) for troubleshooting guidance.\n\n## Next steps\n\nRead the [introduction to Azure Function](https://docs.microsoft.com/azure/azure-functions/functions-overview) or [creating an Azure Function guide](https://docs.microsoft.com/azure/azure-functions/functions-create-first-azure-function).\n\n## Contributing\n\nSee the [CONTRIBUTING.md][contrib] for details on building,\ntesting, and contributing to this library.\n\nThis project welcomes contributions and suggestions.  Most contributions require\nyou to agree to a Contributor License Agreement (CLA) declaring that you have\nthe right to, and actually do, grant us the rights to use your contribution. For\ndetails, visit [cla.microsoft.com][cla].\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc].\nFor more information see the [Code of Conduct FAQ][coc_faq]\nor contact [opencode@microsoft.com][coc_contact] with any\nadditional questions or comments.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2Fsdk%2Fstorage%2FAzure.Storage.Webjobs.Tables%2FREADME.png)\n\n<!-- LINKS -->\n[nuget]: https://www.nuget.org/\n[storage_account_docs]: https://docs.microsoft.com/azure/storage/common/storage-account-overview\n[storage_account_create_ps]: https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-powershell\n[storage_account_create_cli]: https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-cli\n[storage_account_create_portal]: https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-portal\n\n[cosmos_tables_account_docs]: https://docs.microsoft.com/azure/cosmos-db/table/introduction\n[cosmos_tables_create_ps]: https://docs.microsoft.com/azure/cosmos-db/scripts/powershell/table/create\n[cosmos_tables_create_cli]: https://docs.microsoft.com/azure/cosmos-db/scripts/cli/table/create\n[cosmos_tables_create_portal]: https://docs.microsoft.com/azure/cosmos-db/table/how-to-create-container\n\n[identity_dac]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md#defaultazurecredential\n\n[appsettings_portal]: https://docs.microsoft.com/azure/azure-functions/functions-how-to-use-azure-function-app-settings?tabs=portal\n[local_settings_json]: https://docs.microsoft.com/azure/azure-functions/functions-host-json#override-hostjson-values\n\n[azure_sub]: https://azure.microsoft.com/free/dotnet/\n[RequestFailedException]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/core/Azure.Core/src/RequestFailedException.cs\n[contrib]: https://github.com/Azure/azure-sdk-for-net/blob/main/CONTRIBUTING.md\n\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n",
        "repo_name": "tables/Microsoft.Azure.WebJobs.Extensions.Tables",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/tables/Microsoft.Azure.WebJobs.Extensions.Tables",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Template client library for .NET\n\nAzure Template is a managed service that helps developers get secret simply and securely.\n\nUse the client library for to:\n\n* [Get secret](https://docs.microsoft.com/azure)\n\n[Source code][source_root] | [Package (NuGet)][package] | [API reference documentation][reference_docs] | [Product documentation][azconfig_docs] | [Samples][source_samples]\n\n  [Source code](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/template/Azure.Template/src) | [Package (NuGet)](https://www.nuget.org/packages) | [API reference documentation](https://azure.github.io/azure-sdk-for-net) | [Product documentation](https://docs.microsoft.com/azure)\n\n## Getting started\n\nThis section should include everything a developer needs to do to install and create their first client connection *very quickly*.\n\n### Install the package\n\nFirst, provide instruction for obtaining and installing the package or library. This section might include only a single line of code, like `dotnet add package package-name`, but should enable a developer to successfully install the package from NuGet, npm, or even cloning a GitHub repository.\n\nInstall the client library for .NET with [NuGet](https://www.nuget.org/ ):\n\n```dotnetcli\ndotnet add package Azure.Template --prerelease\n```\n\n### Prerequisites\n\nInclude a section after the install command that details any requirements that must be satisfied before a developer can [authenticate](#authenticate-the-client) and test all of the snippets in the [Examples](#examples) section. For example, for Cosmos DB:\n\n> You must have an [Azure subscription](https://azure.microsoft.com/free/dotnet/) and [Cosmos DB account](https://docs.microsoft.com/azure/cosmos-db/account-overview) (SQL API). In order to take advantage of the C# 8.0 syntax, it is recommended that you compile using the [.NET Core SDK](https://dotnet.microsoft.com/download) 3.0 or higher with a [language version](https://docs.microsoft.com/dotnet/csharp/language-reference/configure-language-version#override-a-default) of `latest`.  It is also possible to compile with the .NET Core SDK 2.1.x using a language version of `preview`.\n\n### Authenticate the client\n\nIf your library requires authentication for use, such as for Azure services, include instructions and example code needed for initializing and authenticating.\n\nFor example, include details on obtaining an account key and endpoint URI, setting environment variables for each, and initializing the client object.\n\n## Key concepts\n\nThe *Key concepts* section should describe the functionality of the main classes. Point out the most important and useful classes in the package (with links to their reference pages) and explain how those classes work together. Feel free to use bulleted lists, tables, code blocks, or even diagrams for clarity.\n\nInclude the *Thread safety* and *Additional concepts* sections below at the end of your *Key concepts* section. You may remove or add links depending on what your library makes use of:\n\n### Thread safety\n\nWe guarantee that all client instance methods are thread-safe and independent of each other ([guideline](https://azure.github.io/azure-sdk/dotnet_introduction.html#dotnet-service-methods-thread-safety)). This ensures that the recommendation of reusing client instances is always safe, even across threads.\n\n### Additional concepts\n<!-- CLIENT COMMON BAR -->\n[Client options](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#configuring-service-clients-using-clientoptions) |\n[Accessing the response](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#accessing-http-response-details-using-responset) |\n[Long-running operations](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#consuming-long-running-operations-using-operationt) |\n[Handling failures](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#reporting-errors-requestfailedexception) |\n[Diagnostics](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md) |\n[Mocking](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#mocking) |\n[Client lifetime](https://devblogs.microsoft.com/azure-sdk/lifetime-management-and-thread-safety-guarantees-of-azure-sdk-net-clients/)\n<!-- CLIENT COMMON BAR -->\n\n## Examples\n\nYou can familiarize yourself with different APIs using [Samples](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/template/Azure.Template/samples).\n\n### Get secret\n\nThe `GetSecret` method retrieves a secret from the service.\n\n```C# Snippet:Azure_Template_GetSecret\nstring endpoint = \"https://myvault.vault.azure.net\";\nvar credential = new DefaultAzureCredential();\nvar client = new TemplateClient(endpoint, credential);\n\nSecretBundle secret = client.GetSecretValue(\"TestSecret\");\n\nConsole.WriteLine(secret.Value);\n```Python\nthings = client.list_things()\n```\n\n## Troubleshooting\n\nDescribe common errors and exceptions, how to \"unpack\" them if necessary, and include guidance for graceful handling and recovery.\n\nProvide information to help developers avoid throttling or other service-enforced errors they might encounter. For example, provide guidance and examples for using retry or connection policies in the API.\n\nIf the package or a related package supports it, include tips for logging or enabling instrumentation to help them debug their code.\n\n## Next steps\n\n* Provide a link to additional code examples, ideally to those sitting alongside the README in the package's `/samples` directory.\n* If appropriate, point users to other packages that might be useful.\n* If you think there's a good chance that developers might stumble across your package in error (because they're searching for specific functionality and mistakenly think the package provides that functionality), point them to the packages they might be looking for.\n\n## Contributing\n\nThis is a template, but your SDK readme should include details on how to contribute code to the repo/package.\n\n<!-- LINKS -->\n[style-guide-msft]: https://docs.microsoft.com/style-guide/capitalization\n[style-guide-cloud]: https://aka.ms/azsdk/cloud-style-guide\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net/sdk/template/Azure.Template/README.png)",
        "repo_name": "template/Azure.Template",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/template/Azure.Template",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Cognitive Services Text Analytics code sharing library\n\nThis library is intended to serve as a common location for non-public code for the legacy REST API that is used by the [Azure Cognitive Services Text Analytics client library for .NET](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/textanalytics/Azure.AI.TextAnalytics).  The Text Analytics library includes these artifacts by shared links to enable them to be loosely hosted within those projects rather than consumed by direct project or package reference.\n  \n## Contributing  \n\nThis project welcomes contributions and suggestions.  Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\nPlease see our [contributing guide](https://github.com/Azure/azure-sdk-for-net/blob/main/CONTRIBUTING.md) for more information.\n  \n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2Fsdk%textanalytics%2FAzure.AI.TextAnalytics.Legacy.Shared%2FREADME.png)\n",
        "repo_name": "textanalytics/Azure.AI.TextAnalytics.Legacy.Shared",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/textanalytics/Azure.AI.TextAnalytics.Legacy.Shared",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Cognitive Services Text Analytics client library for .NET\n\nText Analytics is part of the Azure Cognitive Service for Language, a cloud-based service that provides Natural Language Processing (NLP) features for understanding and analyzing text. This client library offers the following features:\n\n* Language detection\n* Sentiment analysis\n* Key phrase extraction\n* Named entity recognition (NER)\n* Personally identifiable information (PII) entity recognition\n* Entity linking\n* Text analytics for health\n* Custom named entity recognition (Custom NER)\n* Custom text classification\n* Extractive text summarization\n* Abstractive text summarization\n\n[Source code][textanalytics_client_src] | [Package (NuGet)][textanalytics_nuget_package] | [API reference documentation][textanalytics_refdocs] | [Product documentation][language_service_docs] | [Samples][textanalytics_samples]\n\n## Getting started\n\n### Install the package\n\nInstall the Azure Text Analytics client library for .NET with [NuGet][nuget]:\n\n```dotnetcli\ndotnet add package Azure.AI.TextAnalytics\n```\n\nThis table shows the relationship between SDK versions and supported API versions of the service:\n\n> Note that `5.2.0` is the first stable version of the client library that targets the Azure Cognitive Service for Language APIs which includes the existing text analysis and natural language processing features found in the Text Analytics client library. In addition, the service API has changed from semantic to date-based versioning.\n\n|SDK version  |Supported API version of service\n|-------------|-----------------------------------------------------|\n|5.3.0-beta.4 | 3.0, 3.1, 2022-05-01, 2023-04-01 (default)\n|5.2.0        | 3.0, 3.1, 2022-05-01 (default)\n|5.1.X        | 3.0, 3.1 (default)\n|5.0.0        | 3.0\n|1.0.X        | 3.0\n\n### Prerequisites\n\n* An [Azure subscription][azure_sub].\n* An existing Cognitive Services or Language service resource.\n\n#### Create a Cognitive Services resource or a Language service resource\n\nAzure Cognitive Service for Language supports both [multi-service and single-service access][service_access]. Create a Cognitive Services resource if you plan to access multiple cognitive services under a single endpoint and API key. To access the features of the Language service only, create a Language service resource instead.\n\nYou can create either resource via the [Azure portal][create_ta_resource_azure_portal] or, alternatively, you can follow the steps in [this document][create_ta_resource_azure_cli] to create it using the [Azure CLI][azure_cli].\n\n### Authenticate the client\n\nInteraction with the service using the client library begins with creating an instance of the [TextAnalyticsClient][textanalytics_client_class] class. You will need an **endpoint**, and either an **API key** or ``TokenCredential`` to instantiate a client object.  For more information regarding authenticating with cognitive services, see [Authenticate requests to Azure Cognitive Services][cognitive_auth].\n\n#### Get an API key\n\nYou can get the `endpoint` and `API key` from the Cognitive Services resource or Language service resource information in the [Azure Portal][azure_portal].\n\nAlternatively, use the [Azure CLI][azure_cli] snippet below to get the API key from the Language service resource.\n\n```PowerShell\naz cognitiveservices account keys list --resource-group <your-resource-group-name> --name <your-resource-name>\n```\n\n#### Create a `TextAnalyticsClient` using an API key credential\n\nOnce you have the value for the API key, create an `AzureKeyCredential`. This will allow you to\nupdate the API key without creating a new client.\n\nWith the value of the endpoint and an `AzureKeyCredential`, you can create the [TextAnalyticsClient][textanalytics_client_class]:\n\n```C# Snippet:CreateTextAnalyticsClient\nUri endpoint = new(\"<endpoint>\");\nAzureKeyCredential credential = new(\"<apiKey>\");\nTextAnalyticsClient client = new(endpoint, credential);\n```\n\n#### Create a `TextAnalyticsClient` with an Azure Active Directory credential\n\nClient API key authentication is used in most of the examples in this getting started guide, but you can also authenticate with Azure Active Directory using the [Azure Identity library][azure_identity].  Note that regional endpoints do not support AAD authentication. Create a [custom subdomain][custom_subdomain] for your resource in order to use this type of authentication.\n\nTo use the [DefaultAzureCredential][DefaultAzureCredential] provider shown below,\nor other credential providers provided with the Azure SDK, please install the Azure.Identity package:\n\n```dotnetcli\ndotnet add package Azure.Identity\n```\n\nYou will also need to [register a new AAD application][register_aad_app] and [grant access][aad_grant_access] to the Language service by assigning the `\"Cognitive Services User\"` role to your service principal.\n\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: AZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET.\n\n```C# Snippet:CreateTextAnalyticsClientTokenCredential\nUri endpoint = new(\"<endpoint>\");\nTextAnalyticsClient client = new(endpoint, new DefaultAzureCredential());\n```\n\n## Key concepts\n\n### `TextAnalyticsClient`\n\nA `TextAnalyticsClient` is the primary interface for developers using the Text Analytics client library.  It provides both synchronous and asynchronous operations to access a specific use of text analysis, such as language detection or key phrase extraction.\n\n### Input\n\nA **document**, is a single unit of input to be analyzed by the predictive models in the Language service. Operations on `TextAnalyticsClient` may take a single document or a collection of documents to be analyzed as a batch.\nFor document length limits, maximum batch size, and supported text encoding see [here][data_limits].\n\n### Operation on multiple documents\n\nFor each supported operation, `TextAnalyticsClient` provides a method that accepts a batch of documents as strings, or a batch of either `TextDocumentInput` or `DetectLanguageInput` objects. This methods allow callers to give each document a unique ID, indicate that the documents in the batch are written in different languages, or provide a country hint about the language of the document.\n\n**Note:** It is recommended to use the batch methods when working on production environments as they allow you to send one request with multiple documents. This is more performant than sending a request per each document.\n\n### Return value\n\nReturn values, such as `AnalyzeSentimentResult`, is the result of a Text Analytics operation, containing a prediction or predictions about a single document.  An operation's return value also may optionally include information about the document and how it was processed.\n\n### Return value Collection\n\nA Return value collection, such as `AnalyzeSentimentResultCollection`, is a collection of operation results, where each corresponds to one of the documents provided in the input batch.  A document and its result will have the same index in the input and result collections. The return value also contains a `HasError` property that allows to identify if an operation executed was successful or unsuccessful for the given document. It may optionally include information about the document batch and how it was processed.\n\n### Long-Running Operations\n\nFor large documents which take a long time to execute, these operations are implemented as [**long-running operations**][dotnet_lro]. Long-running operations consist of an initial request sent to the service to start an operation, followed by polling the service at intervals to determine whether the operation has completed or failed, and if it has succeeded, to get the result.\n\nFor long running operations in the Azure SDK, the client exposes a `Start<operation-name>` method that returns an `Operation<T>` or a `PageableOperation<T>`.  You can use the extension method `WaitForCompletionAsync()` to wait for the operation to complete and obtain its result.  A sample code snippet is provided to illustrate using long-running operations [below](#run-multiple-actions-asynchronously).\n\n### Thread safety\n\nWe guarantee that all client instance methods are thread-safe and independent of each other ([guideline](https://azure.github.io/azure-sdk/dotnet_introduction.html#dotnet-service-methods-thread-safety)). This ensures that the recommendation of reusing client instances is always safe, even across threads.\n\n### Additional concepts\n\n<!-- CLIENT COMMON BAR -->\n[Client options](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#configuring-service-clients-using-clientoptions) |\n[Accessing the response](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#accessing-http-response-details-using-responset) |\n[Handling failures](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#reporting-errors-requestfailedexception) |\n[Diagnostics](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md) |\n[Mocking](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#mocking) |\n[Client lifetime](https://devblogs.microsoft.com/azure-sdk/lifetime-management-and-thread-safety-guarantees-of-azure-sdk-net-clients/)\n<!-- CLIENT COMMON BAR -->\n\n## Examples\n\nThe following section provides several code snippets using the `client` [created above](#create-a-textanalyticsclient-using-an-api-key-credential), and covers the main features present in this client library. Although most of the snippets below make use of synchronous service calls, keep in mind that the `Azure.AI.TextAnalytics` package supports both synchronous and asynchronous APIs.\n\n### Sync examples\n\n* [Detect Language](#detect-language)\n* [Analyze Sentiment](#analyze-sentiment)\n* [Extract Key Phrases](#extract-key-phrases)\n* [Recognize Named Entities](#recognize-named-entities)\n* [Recognize PII Entities](#recognize-pii-entities)\n* [Recognize Linked Entities](#recognize-linked-entities)\n\n### Async examples\n\n* [Detect Language Asynchronously](#detect-language-asynchronously)\n* [Recognize Named Entities Asynchronously](#recognize-named-entities-asynchronously)\n* [Analyze Healthcare Entities Asynchronously](#analyze-healthcare-entities-asynchronously)\n* [Run multiple actions Asynchronously](#run-multiple-actions-asynchronously)\n\n### Detect Language\n\nRun a predictive model to determine the language that the passed-in document or batch of documents are written in.\n\n```C# Snippet:Sample1_DetectLanguage\nstring document =\n    \"Este documento est\u00e1 escrito en un lenguaje diferente al ingl\u00e9s. Su objectivo es demostrar c\u00f3mo\"\n    + \" invocar el m\u00e9todo de Detecci\u00f3n de Lenguaje del servicio de Text Analytics en Microsoft Azure.\"\n    + \" Tambi\u00e9n muestra c\u00f3mo acceder a la informaci\u00f3n retornada por el servicio. Esta funcionalidad es\"\n    + \" \u00fatil para los sistemas de contenido que recopilan texto arbitrario, donde el lenguaje no se conoce\"\n    + \" de antemano. Puede usarse para detectar una amplia gama de lenguajes, variantes, dialectos y\"\n    + \" algunos idiomas regionales o culturales.\";\n\ntry\n{\n    Response<DetectedLanguage> response = client.DetectLanguage(document);\n    DetectedLanguage language = response.Value;\n\n    Console.WriteLine($\"Detected language is {language.Name} with a confidence score of {language.ConfidenceScore}.\");\n}\ncatch (RequestFailedException exception)\n{\n    Console.WriteLine($\"Error Code: {exception.ErrorCode}\");\n    Console.WriteLine($\"Message: {exception.Message}\");\n}\n```\n\nFor samples on using the production recommended option `DetectLanguageBatch` see [here][detect_language_sample].\n\nPlease refer to the service documentation for a conceptual discussion of [language detection][language_detection].\n\n### Analyze Sentiment\n\nRun a predictive model to determine the positive, negative, neutral or mixed sentiment contained in the passed-in document or batch of documents.\n\n```C# Snippet:Sample2_AnalyzeSentiment\nstring document =\n    \"I had the best day of my life. I decided to go sky-diving and it made me appreciate my whole life so\"\n    + \"much more. I developed a deep-connection with my instructor as well, and I feel as if I've made a\"\n    + \"life-long friend in her.\";\n\ntry\n{\n    Response<DocumentSentiment> response = client.AnalyzeSentiment(document);\n    DocumentSentiment docSentiment = response.Value;\n\n    Console.WriteLine($\"Document sentiment is {docSentiment.Sentiment} with: \");\n    Console.WriteLine($\"  Positive confidence score: {docSentiment.ConfidenceScores.Positive}\");\n    Console.WriteLine($\"  Neutral confidence score: {docSentiment.ConfidenceScores.Neutral}\");\n    Console.WriteLine($\"  Negative confidence score: {docSentiment.ConfidenceScores.Negative}\");\n}\ncatch (RequestFailedException exception)\n{\n    Console.WriteLine($\"Error Code: {exception.ErrorCode}\");\n    Console.WriteLine($\"Message: {exception.Message}\");\n}\n```\n\nFor samples on using the production recommended option `AnalyzeSentimentBatch` see [here][analyze_sentiment_sample].\n\nTo get more granular information about the opinions related to targets of a product/service, also known as Aspect-based Sentiment Analysis in Natural Language Processing (NLP), see a sample on sentiment analysis with opinion mining [here][analyze_sentiment_opinion_mining_sample].\n\nPlease refer to the service documentation for a conceptual discussion of [sentiment analysis][sentiment_analysis].\n\n### Extract Key Phrases\n\nRun a model to identify a collection of significant phrases found in the passed-in document or batch of documents.\n\n```C# Snippet:Sample3_ExtractKeyPhrases\nstring document =\n    \"My cat might need to see a veterinarian. It has been sneezing more than normal, and although my\"\n    + \" little sister thinks it is funny, I am worried it has the cold that I got last week. We are going\"\n    + \" to call tomorrow and try to schedule an appointment for this week. Hopefully it will be covered by\"\n    + \" the cat's insurance. It might be good to not let it sleep in my room for a while.\";\n\ntry\n{\n    Response<KeyPhraseCollection> response = client.ExtractKeyPhrases(document);\n    KeyPhraseCollection keyPhrases = response.Value;\n\n    Console.WriteLine($\"Extracted {keyPhrases.Count} key phrases:\");\n    foreach (string keyPhrase in keyPhrases)\n    {\n        Console.WriteLine($\"  {keyPhrase}\");\n    }\n}\ncatch (RequestFailedException exception)\n{\n    Console.WriteLine($\"Error Code: {exception.ErrorCode}\");\n    Console.WriteLine($\"Message: {exception.Message}\");\n}\n```\n\nFor samples on using the production recommended option `ExtractKeyPhrasesBatch` see [here][extract_key_phrases_sample].\n\nPlease refer to the service documentation for a conceptual discussion of [key phrase extraction][key_phrase_extraction].\n\n### Recognize Named Entities\n\nRun a predictive model to identify a collection of named entities in the passed-in document or batch of documents and categorize those entities into categories such as person, location, or organization.  For more information on available categories, see [Text Analytics Named Entity Categories][named_entities_categories].\n\n```C# Snippet:Sample4_RecognizeEntities\nstring document =\n    \"We love this trail and make the trip every year. The views are breathtaking and well worth the hike!\"\n    + \" Yesterday was foggy though, so we missed the spectacular views. We tried again today and it was\"\n    + \" amazing. Everyone in my family liked the trail although it was too challenging for the less\"\n    + \" athletic among us. Not necessarily recommended for small children. A hotel close to the trail\"\n    + \" offers services for childcare in case you want that.\";\n\ntry\n{\n    Response<CategorizedEntityCollection> response = client.RecognizeEntities(document);\n    CategorizedEntityCollection entitiesInDocument = response.Value;\n\n    Console.WriteLine($\"Recognized {entitiesInDocument.Count} entities:\");\n    foreach (CategorizedEntity entity in entitiesInDocument)\n    {\n        Console.WriteLine($\"  Text: {entity.Text}\");\n        Console.WriteLine($\"  Offset: {entity.Offset}\");\n        Console.WriteLine($\"  Length: {entity.Length}\");\n        Console.WriteLine($\"  Category: {entity.Category}\");\n        if (!string.IsNullOrEmpty(entity.SubCategory))\n            Console.WriteLine($\"  SubCategory: {entity.SubCategory}\");\n        Console.WriteLine($\"  Confidence score: {entity.ConfidenceScore}\");\n        Console.WriteLine();\n    }\n}\ncatch (RequestFailedException exception)\n{\n    Console.WriteLine($\"Error Code: {exception.ErrorCode}\");\n    Console.WriteLine($\"Message: {exception.Message}\");\n}\n```\n\nFor samples on using the production recommended option `RecognizeEntitiesBatch` see [here][recognize_entities_sample].\n\nPlease refer to the service documentation for a conceptual discussion of [named entity recognition][named_entity_recognition].\n\n### Recognize PII Entities\n\nRun a predictive model to identify a collection of entities containing Personally Identifiable Information found in the passed-in document or batch of documents, and categorize those entities into categories such as US social security number, drivers license number, or credit card number.\n\n```C# Snippet:Sample5_RecognizePiiEntities\nstring document =\n    \"Parker Doe has repaid all of their loans as of 2020-04-25. Their SSN is 859-98-0987. To contact them,\"\n    + \" use their phone number 800-102-1100. They are originally from Brazil and have document ID number\"\n    + \" 998.214.865-68.\";\n\ntry\n{\n    Response<PiiEntityCollection> response = client.RecognizePiiEntities(document);\n    PiiEntityCollection entities = response.Value;\n\n    Console.WriteLine($\"Redacted Text: {entities.RedactedText}\");\n    Console.WriteLine();\n    Console.WriteLine($\"Recognized {entities.Count} PII entities:\");\n    foreach (PiiEntity entity in entities)\n    {\n        Console.WriteLine($\"  Text: {entity.Text}\");\n        Console.WriteLine($\"  Category: {entity.Category}\");\n        if (!string.IsNullOrEmpty(entity.SubCategory))\n            Console.WriteLine($\"  SubCategory: {entity.SubCategory}\");\n        Console.WriteLine($\"  Confidence score: {entity.ConfidenceScore}\");\n        Console.WriteLine();\n    }\n}\ncatch (RequestFailedException exception)\n{\n    Console.WriteLine($\"Error Code: {exception.ErrorCode}\");\n    Console.WriteLine($\"Message: {exception.Message}\");\n}\n```\n\nFor samples on using the production recommended option `RecognizePiiEntitiesBatch` see [here][recognize_pii_entities_sample].\n\nPlease refer to the service documentation for supported [PII entity types][pii_entity].\n\n### Recognize Linked Entities\n\nRun a predictive model to identify a collection of entities found in the passed-in document or batch of documents, and include information linking the entities to their corresponding entries in a well-known knowledge base.\n\n```C# Snippet:Sample6_RecognizeLinkedEntities\nstring document =\n    \"Microsoft was founded by Bill Gates with some friends he met at Harvard. One of his friends, Steve\"\n    + \" Ballmer, eventually became CEO after Bill Gates as well. Steve Ballmer eventually stepped down as\"\n    + \" CEO of Microsoft, and was succeeded by Satya Nadella. Microsoft originally moved its headquarters\"\n    + \" to Bellevue, Washington in Januaray 1979, but is now headquartered in Redmond.\";\n\ntry\n{\n    Response<LinkedEntityCollection> response = client.RecognizeLinkedEntities(document);\n    LinkedEntityCollection linkedEntities = response.Value;\n\n    Console.WriteLine($\"Recognized {linkedEntities.Count} entities:\");\n    foreach (LinkedEntity linkedEntity in linkedEntities)\n    {\n        Console.WriteLine($\"  Name: {linkedEntity.Name}\");\n        Console.WriteLine($\"  Language: {linkedEntity.Language}\");\n        Console.WriteLine($\"  Data Source: {linkedEntity.DataSource}\");\n        Console.WriteLine($\"  URL: {linkedEntity.Url}\");\n        Console.WriteLine($\"  Entity Id in Data Source: {linkedEntity.DataSourceEntityId}\");\n        foreach (LinkedEntityMatch match in linkedEntity.Matches)\n        {\n            Console.WriteLine($\"    Match Text: {match.Text}\");\n            Console.WriteLine($\"    Offset: {match.Offset}\");\n            Console.WriteLine($\"    Length: {match.Length}\");\n            Console.WriteLine($\"    Confidence score: {match.ConfidenceScore}\");\n        }\n        Console.WriteLine();\n    }\n}\ncatch (RequestFailedException exception)\n{\n    Console.WriteLine($\"Error Code: {exception.ErrorCode}\");\n    Console.WriteLine($\"Message: {exception.Message}\");\n}\n```\n\nFor samples on using the production recommended option `RecognizeLinkedEntitiesBatch` see [here][recognize_linked_entities_sample].\n\nPlease refer to the service documentation for a conceptual discussion of [entity linking][entity_linking].\n\n### Detect Language Asynchronously\n\nRun a predictive model to determine the language that the passed-in document or batch of documents are written in.\n\n```C# Snippet:Sample1_DetectLanguageAsync\nstring document =\n    \"Este documento est\u00e1 escrito en un lenguaje diferente al ingl\u00e9s. Su objectivo es demostrar c\u00f3mo\"\n    + \" invocar el m\u00e9todo de Detecci\u00f3n de Lenguaje del servicio de Text Analytics en Microsoft Azure.\"\n    + \" Tambi\u00e9n muestra c\u00f3mo acceder a la informaci\u00f3n retornada por el servicio. Esta funcionalidad es\"\n    + \" \u00fatil para los sistemas de contenido que recopilan texto arbitrario, donde el lenguaje no se conoce\"\n    + \" de antemano. Puede usarse para detectar una amplia gama de lenguajes, variantes, dialectos y\"\n    + \" algunos idiomas regionales o culturales.\";\n\ntry\n{\n    Response<DetectedLanguage> response = await client.DetectLanguageAsync(document);\n    DetectedLanguage language = response.Value;\n\n    Console.WriteLine($\"Detected language is {language.Name} with a confidence score of {language.ConfidenceScore}.\");\n}\ncatch (RequestFailedException exception)\n{\n    Console.WriteLine($\"Error Code: {exception.ErrorCode}\");\n    Console.WriteLine($\"Message: {exception.Message}\");\n}\n```\n\n### Recognize Named Entities Asynchronously\n\nRun a predictive model to identify a collection of named entities in the passed-in document or batch of documents and categorize those entities into categories such as person, location, or organization.  For more information on available categories, see [Text Analytics Named Entity Categories][named_entities_categories].\n\n```C# Snippet:Sample4_RecognizeEntitiesAsync\nstring document =\n    \"We love this trail and make the trip every year. The views are breathtaking and well worth the hike!\"\n    + \" Yesterday was foggy though, so we missed the spectacular views. We tried again today and it was\"\n    + \" amazing. Everyone in my family liked the trail although it was too challenging for the less\"\n    + \" athletic among us. Not necessarily recommended for small children. A hotel close to the trail\"\n    + \" offers services for childcare in case you want that.\";\n\ntry\n{\n    Response<CategorizedEntityCollection> response = await client.RecognizeEntitiesAsync(document);\n    CategorizedEntityCollection entitiesInDocument = response.Value;\n\n    Console.WriteLine($\"Recognized {entitiesInDocument.Count} entities:\");\n    foreach (CategorizedEntity entity in entitiesInDocument)\n    {\n        Console.WriteLine($\"  Text: {entity.Text}\");\n        Console.WriteLine($\"  Offset: {entity.Offset}\");\n        Console.WriteLine($\"  Length: {entity.Length}\");\n        Console.WriteLine($\"  Category: {entity.Category}\");\n        if (!string.IsNullOrEmpty(entity.SubCategory))\n            Console.WriteLine($\"  SubCategory: {entity.SubCategory}\");\n        Console.WriteLine($\"  Confidence score: {entity.ConfidenceScore}\");\n        Console.WriteLine();\n    }\n}\ncatch (RequestFailedException exception)\n{\n    Console.WriteLine($\"Error Code: {exception.ErrorCode}\");\n    Console.WriteLine($\"Message: {exception.Message}\");\n}\n```\n\n### Analyze Healthcare Entities Asynchronously\n\nText Analytics for health is a containerized service that extracts and labels relevant medical information from unstructured texts such as doctor's notes, discharge summaries, clinical documents, and electronic health records. For more information see [How to: Use Text Analytics for health][healthcare].\n\n```C# Snippet:Sample7_AnalyzeHealthcareEntitiesConvenienceAsync_All\nstring documentA =\n    \"RECORD #333582770390100 | MH | 85986313 | | 054351 | 2/14/2001 12:00:00 AM |\"\n    + \" CORONARY ARTERY DISEASE | Signed | DIS |\"\n    + Environment.NewLine\n    + \" Admission Date: 5/22/2001 Report Status: Signed Discharge Date: 4/24/2001\"\n    + \" ADMISSION DIAGNOSIS: CORONARY ARTERY DISEASE.\"\n    + Environment.NewLine\n    + \" HISTORY OF PRESENT ILLNESS: The patient is a 54-year-old gentleman with a history of progressive\"\n    + \" angina over the past several months. The patient had a cardiac catheterization in July of this\"\n    + \" year revealing total occlusion of the RCA and 50% left main disease, with a strong family history\"\n    + \" of coronary artery disease with a brother dying at the age of 52 from a myocardial infarction and\"\n    + \" another brother who is status post coronary artery bypass grafting. The patient had a stress\"\n    + \" echocardiogram done on July, 2001, which showed no wall motion abnormalities, but this was a\"\n    + \" difficult study due to body habitus. The patient went for six minutes with minimal ST depressions\"\n    + \" in the anterior lateral leads, thought due to fatigue and wrist pain, his anginal equivalent. Due\"\n    + \" to the patient'sincreased symptoms and family history and history left main disease with total\"\n    + \" occasional of his RCA was referred for revascularization with open heart surgery.\";\n\nstring documentB = \"Prescribed 100mg ibuprofen, taken twice daily.\";\n\n// Prepare the input of the text analysis operation. You can add multiple documents to this list and\n// perform the same operation on all of them simultaneously.\nList<string> batchedDocuments = new()\n{\n    documentA,\n    documentB\n};\n\n// Perform the text analysis operation.\nAnalyzeHealthcareEntitiesOperation operation = await client.AnalyzeHealthcareEntitiesAsync(WaitUntil.Completed, batchedDocuments);\n\nConsole.WriteLine($\"The operation has completed.\");\nConsole.WriteLine();\n\n// View the operation status.\nConsole.WriteLine($\"Created On   : {operation.CreatedOn}\");\nConsole.WriteLine($\"Expires On   : {operation.ExpiresOn}\");\nConsole.WriteLine($\"Id           : {operation.Id}\");\nConsole.WriteLine($\"Status       : {operation.Status}\");\nConsole.WriteLine($\"Last Modified: {operation.LastModified}\");\nConsole.WriteLine();\n\n// View the operation results.\nawait foreach (AnalyzeHealthcareEntitiesResultCollection documentsInPage in operation.Value)\n{\n    Console.WriteLine($\"Analyze Healthcare Entities, model version: \\\"{documentsInPage.ModelVersion}\\\"\");\n    Console.WriteLine();\n\n    foreach (AnalyzeHealthcareEntitiesResult documentResult in documentsInPage)\n    {\n        if (documentResult.HasError)\n        {\n            Console.WriteLine($\"  Error!\");\n            Console.WriteLine($\"  Document error code: {documentResult.Error.ErrorCode}\");\n            Console.WriteLine($\"  Message: {documentResult.Error.Message}\");\n            continue;\n        }\n\n        Console.WriteLine($\"  Recognized the following {documentResult.Entities.Count} healthcare entities:\");\n        Console.WriteLine();\n\n        // View the healthcare entities that were recognized.\n        foreach (HealthcareEntity entity in documentResult.Entities)\n        {\n            Console.WriteLine($\"  Entity: {entity.Text}\");\n            Console.WriteLine($\"  Category: {entity.Category}\");\n            Console.WriteLine($\"  Offset: {entity.Offset}\");\n            Console.WriteLine($\"  Length: {entity.Length}\");\n            Console.WriteLine($\"  NormalizedText: {entity.NormalizedText}\");\n            Console.WriteLine($\"  Links:\");\n\n            // View the entity data sources.\n            foreach (EntityDataSource entityDataSource in entity.DataSources)\n            {\n                Console.WriteLine($\"    Entity ID in Data Source: {entityDataSource.EntityId}\");\n                Console.WriteLine($\"    DataSource: {entityDataSource.Name}\");\n            }\n\n            // View the entity assertions.\n            if (entity.Assertion is not null)\n            {\n                Console.WriteLine($\"  Assertions:\");\n\n                if (entity.Assertion?.Association is not null)\n                {\n                    Console.WriteLine($\"    Association: {entity.Assertion?.Association}\");\n                }\n\n                if (entity.Assertion?.Certainty is not null)\n                {\n                    Console.WriteLine($\"    Certainty: {entity.Assertion?.Certainty}\");\n                }\n\n                if (entity.Assertion?.Conditionality is not null)\n                {\n                    Console.WriteLine($\"    Conditionality: {entity.Assertion?.Conditionality}\");\n                }\n            }\n        }\n\n        Console.WriteLine($\"  We found {documentResult.EntityRelations.Count} relations in the current document:\");\n        Console.WriteLine();\n\n        // View the healthcare entity relations that were recognized.\n        foreach (HealthcareEntityRelation relation in documentResult.EntityRelations)\n        {\n            Console.WriteLine($\"    Relation: {relation.RelationType}\");\n            if (relation.ConfidenceScore is not null)\n            {\n                Console.WriteLine($\"    ConfidenceScore: {relation.ConfidenceScore}\");\n            }\n            Console.WriteLine($\"    For this relation there are {relation.Roles.Count} roles\");\n\n            // View the relation roles.\n            foreach (HealthcareEntityRelationRole role in relation.Roles)\n            {\n                Console.WriteLine($\"      Role Name: {role.Name}\");\n\n                Console.WriteLine($\"      Associated Entity Text: {role.Entity.Text}\");\n                Console.WriteLine($\"      Associated Entity Category: {role.Entity.Category}\");\n                Console.WriteLine();\n            }\n\n            Console.WriteLine();\n        }\n\n        Console.WriteLine();\n    }\n}\n```\n\n### Run multiple actions Asynchronously\n\nThis functionality allows running multiple actions in one or more documents. Actions include:\n\n* Named Entities Recognition\n* PII Entities Recognition\n* Linked Entity Recognition\n* Key Phrase Extraction\n* Sentiment Analysis\n* Healthcare Entities Recognition (see sample [here][analyze_healthcare_sample])\n* Custom Named Entities Recognition (see sample [here][recognize_custom_entities_sample])\n* Custom Single Label Classification (see sample [here][single_category_classify_sample])\n* Custom Multi Label Classification (see sample [here][multi_category_classify_sample])\n\n```C# Snippet:AnalyzeOperationConvenienceAsync\n    string documentA =\n        \"We love this trail and make the trip every year. The views are breathtaking and well worth the hike!\"\n        + \" Yesterday was foggy though, so we missed the spectacular views. We tried again today and it was\"\n        + \" amazing. Everyone in my family liked the trail although it was too challenging for the less\"\n        + \" athletic among us.\";\n\n    string documentB =\n        \"Last week we stayed at Hotel Foo to celebrate our anniversary. The staff knew about our anniversary\"\n        + \" so they helped me organize a little surprise for my partner. The room was clean and with the\"\n        + \" decoration I requested. It was perfect!\";\n\n    // Prepare the input of the text analysis operation. You can add multiple documents to this list and\n    // perform the same operation on all of them simultaneously.\n    List<string> batchedDocuments = new()\n    {\n        documentA,\n        documentB\n    };\n\n    TextAnalyticsActions actions = new()\n    {\n        ExtractKeyPhrasesActions = new List<ExtractKeyPhrasesAction>() { new ExtractKeyPhrasesAction() },\n        RecognizeEntitiesActions = new List<RecognizeEntitiesAction>() { new RecognizeEntitiesAction() },\n        DisplayName = \"AnalyzeOperationSample\"\n    };\n\n    // Perform the text analysis operation.\n    AnalyzeActionsOperation operation = await client.AnalyzeActionsAsync(WaitUntil.Completed, batchedDocuments, actions);\n\n    Console.WriteLine($\"Status: {operation.Status}\");\n    Console.WriteLine($\"Created On: {operation.CreatedOn}\");\n    Console.WriteLine($\"Expires On: {operation.ExpiresOn}\");\n    Console.WriteLine($\"Last modified: {operation.LastModified}\");\n    if (!string.IsNullOrEmpty(operation.DisplayName))\n        Console.WriteLine($\"Display name: {operation.DisplayName}\");\n    Console.WriteLine($\"Total actions: {operation.ActionsTotal}\");\n    Console.WriteLine($\"  Succeeded actions: {operation.ActionsSucceeded}\");\n    Console.WriteLine($\"  Failed actions: {operation.ActionsFailed}\");\n    Console.WriteLine($\"  In progress actions: {operation.ActionsInProgress}\");\n\n    await foreach (AnalyzeActionsResult documentsInPage in operation.Value)\n    {\n        IReadOnlyCollection<ExtractKeyPhrasesActionResult> keyPhrasesResults = documentsInPage.ExtractKeyPhrasesResults;\n        IReadOnlyCollection<RecognizeEntitiesActionResult> entitiesResults = documentsInPage.RecognizeEntitiesResults;\n\n        Console.WriteLine(\"Recognized Entities\");\n        int docNumber = 1;\n        foreach (RecognizeEntitiesActionResult entitiesActionResults in entitiesResults)\n        {\n            Console.WriteLine($\" Action name: {entitiesActionResults.ActionName}\");\n            foreach (RecognizeEntitiesResult documentResult in entitiesActionResults.DocumentsResults)\n            {\n                Console.WriteLine($\" Document #{docNumber++}\");\n                Console.WriteLine($\"  Recognized {documentResult.Entities.Count} entities:\");\n\n                foreach (CategorizedEntity entity in documentResult.Entities)\n                {\n                    Console.WriteLine($\"  Entity: {entity.Text}\");\n                    Console.WriteLine($\"  Category: {entity.Category}\");\n                    Console.WriteLine($\"  Offset: {entity.Offset}\");\n                    Console.WriteLine($\"  Length: {entity.Length}\");\n                    Console.WriteLine($\"  ConfidenceScore: {entity.ConfidenceScore}\");\n                    Console.WriteLine($\"  SubCategory: {entity.SubCategory}\");\n                }\n                Console.WriteLine();\n            }\n        }\n\n        Console.WriteLine(\"Key Phrases\");\n        docNumber = 1;\n        foreach (ExtractKeyPhrasesActionResult keyPhrasesActionResult in keyPhrasesResults)\n        {\n            foreach (ExtractKeyPhrasesResult documentResults in keyPhrasesActionResult.DocumentsResults)\n            {\n                Console.WriteLine($\" Document #{docNumber++}\");\n                Console.WriteLine($\"  Recognized the following {documentResults.KeyPhrases.Count} Keyphrases:\");\n\n                foreach (string keyphrase in documentResults.KeyPhrases)\n                {\n                    Console.WriteLine($\"  {keyphrase}\");\n                }\n                Console.WriteLine();\n            }\n        }\n    }\n}\n```\n\n## Troubleshooting\n\n### General\n\nWhen you interact with the Cognitive Services for Language using the .NET Text Analytics SDK, errors returned by the Language service correspond to the same HTTP status codes returned for REST API requests.\n\nFor example, if you submit a batch of text document inputs containing duplicate document ids, a `400` error is returned, indicating \"Bad Request\".\n\n```C# Snippet:BadRequest\ntry\n{\n    DetectedLanguage result = client.DetectLanguage(document);\n}\ncatch (RequestFailedException e)\n{\n    Console.WriteLine(e.ToString());\n}\n```\n\nYou will notice that additional information is logged, like the client request ID of the operation.\n\n```text\nMessage:\n    Azure.RequestFailedException:\n    Status: 400 (Bad Request)\n\nContent:\n    {\"error\":{\"code\":\"InvalidRequest\",\"innerError\":{\"code\":\"InvalidDocument\",\"message\":\"Request contains duplicated Ids. Make sure each document has a unique Id.\"},\"message\":\"Invalid document in request.\"}}\n\nHeaders:\n    Transfer-Encoding: chunked\n    x-aml-ta-request-id: 146ca04a-af54-43d4-9872-01a004bee5f8\n    X-Content-Type-Options: nosniff\n    x-envoy-upstream-service-time: 6\n    apim-request-id: c650acda-2b59-4ff7-b96a-e316442ea01b\n    Strict-Transport-Security: max-age=31536000; includeSubDomains; preload\n    Date: Wed, 18 Dec 2019 16:24:52 GMT\n    Content-Type: application/json; charset=utf-8\n```\n\n### Setting up console logging\n\nThe simplest way to see the logs is to enable the console logging.\nTo create an Azure SDK log listener that outputs messages to console use AzureEventSourceListener.CreateConsoleLogger method.\n\n```C#\n// Setup a listener to monitor logged events.\nusing AzureEventSourceListener listener = AzureEventSourceListener.CreateConsoleLogger();\n```\n\nTo learn more about other logging mechanisms see [here][logging].\n\n## Next steps\n\nSamples showing how to use this client library are available in this GitHub repository.\nSamples are provided for each main functional area, and for each area, samples are provided for analyzing a single document, and a collection of documents in both sync and async mode.\n\n* [Detect Language][detect_language_sample]\n* [Analyze Sentiment][analyze_sentiment_sample]\n* [Extract Key Phrases][extract_key_phrases_sample]\n* [Recognize Named Entities][recognize_entities_sample]\n* [Recognize PII Entities][recognize_pii_entities_sample]\n* [Recognize Linked Entities][recognize_linked_entities_sample]\n* [Recognize Healthcare Entities][analyze_healthcare_sample]\n* [Custom Named Entities Recognition][recognize_custom_entities_sample]\n* [Custom Single Label Classification][single_category_classify_sample]\n* [Custom Multi Label Classification][multi_category_classify_sample]\n* [Extractive Summarization][extractive_summarize_sample]\n* [Abstractive Summarization][abstractive_summarize_sample]\n\n### Advanced samples\n\n* [Understand how to work with long-running operations][lro_sample]\n* [Running multiple actions in one or more documents][analyze_operation_sample]\n* [Analyze Sentiment with Opinion Mining][analyze_sentiment_opinion_mining_sample]\n* [Mock a client for testing][mock_client_sample] using the [Moq][moq] library\n\n## Contributing\n\nSee the [CONTRIBUTING.md][contributing] for details on building, testing, and contributing to this library.\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [cla.microsoft.com][cla].\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2Fsdk%2Ftextanalytics%2FAzure.AI.TextAnalytics%2FREADME.png)\n\n<!-- LINKS -->\n[textanalytics_client_src]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/textanalytics/Azure.AI.TextAnalytics/src\n[language_service_docs]: https://docs.microsoft.com/azure/cognitive-services/language-service/\n[textanalytics_refdocs]: https://aka.ms/azsdk-net-textanalytics-ref-docs\n[textanalytics_nuget_package]: https://www.nuget.org/packages/Azure.AI.TextAnalytics\n[textanalytics_samples]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/textanalytics/Azure.AI.TextAnalytics/samples/README.md\n[dotnet_lro]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#consuming-long-running-operations-using-operationt\n\n[lro_sample]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/textanalytics/Azure.AI.TextAnalytics/samples/Sample_LROPolling.md\n[analyze_operation_sample]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/textanalytics/Azure.AI.TextAnalytics/samples/Sample_AnalyzeActions.md\n[analyze_sentiment_opinion_mining_sample]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/textanalytics/Azure.AI.TextAnalytics/samples/Sample2.1_AnalyzeSentimentWithOpinionMining.md\n[mock_client_sample]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/textanalytics/Azure.AI.TextAnalytics/samples/Sample_MockClient.md\n\n[healthcare]: https://docs.microsoft.com/azure/cognitive-services/language-service/text-analytics-for-health/overview?tabs=ner\n[language_detection]: https://docs.microsoft.com/azure/cognitive-services/language-service/language-detection/overview\n[sentiment_analysis]: https://docs.microsoft.com/azure/cognitive-services/language-service/sentiment-opinion-mining/overview\n[key_phrase_extraction]: https://docs.microsoft.com/azure/cognitive-services/language-service/key-phrase-extraction/overview\n[named_entity_recognition]: https://docs.microsoft.com/azure/cognitive-services/language-service/named-entity-recognition/overview\n[entity_linking]: https://docs.microsoft.com/azure/cognitive-services/language-service/entity-linking/overview\n[named_entities_categories]: https://docs.microsoft.com/azure/cognitive-services/language-service/named-entity-recognition/concepts/named-entity-categories\n[pii_entity]:https://docs.microsoft.com/azure/cognitive-services/language-service/personally-identifiable-information/overview\n\n[textanalytics_client_class]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/textanalytics/Azure.AI.TextAnalytics/src/TextAnalyticsClient.cs\n[azure_identity]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/identity/Azure.Identity\n[cognitive_auth]: https://docs.microsoft.com/azure/cognitive-services/authentication\n[register_aad_app]: https://docs.microsoft.com/azure/cognitive-services/authentication#assign-a-role-to-a-service-principal\n[aad_grant_access]: https://docs.microsoft.com/azure/cognitive-services/authentication#assign-a-role-to-a-service-principal\n[custom_subdomain]: https://docs.microsoft.com/azure/cognitive-services/authentication#create-a-resource-with-a-custom-subdomain\n[DefaultAzureCredential]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md#defaultazurecredential\n[logging]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md\n[data_limits]: https://aka.ms/azsdk/textanalytics/data-limits\n[contributing]: https://github.com/Azure/azure-sdk-for-net/blob/main/CONTRIBUTING.md\n\n[detect_language_sample]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/textanalytics/Azure.AI.TextAnalytics/samples/Sample1_DetectLanguage.md\n[analyze_sentiment_sample]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/textanalytics/Azure.AI.TextAnalytics/samples/Sample2_AnalyzeSentiment.md\n[extract_key_phrases_sample]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/textanalytics/Azure.AI.TextAnalytics/samples/Sample3_ExtractKeyPhrases.md\n[recognize_entities_sample]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/textanalytics/Azure.AI.TextAnalytics/samples/Sample4_RecognizeEntities.md\n[recognize_pii_entities_sample]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/textanalytics/Azure.AI.TextAnalytics/samples/Sample5_RecognizePiiEntities.md\n[recognize_linked_entities_sample]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/textanalytics/Azure.AI.TextAnalytics/samples/Sample6_RecognizeLinkedEntities.md\n[analyze_healthcare_sample]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/textanalytics/Azure.AI.TextAnalytics/samples/Sample7_AnalyzeHealthcareEntities.md\n[recognize_custom_entities_sample]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/textanalytics/Azure.AI.TextAnalytics/samples/Sample8_RecognizeCustomEntities.md\n[single_category_classify_sample]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/textanalytics/Azure.AI.TextAnalytics/samples/Sample9_SingleLabelClassify.md\n[multi_category_classify_sample]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/textanalytics/Azure.AI.TextAnalytics/samples/Sample10_MultiLabelClassify.md\n[extractive_summarize_sample]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/textanalytics/Azure.AI.TextAnalytics/samples/Sample11_ExtractiveSummarize.md\n[abstractive_summarize_sample]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/textanalytics/Azure.AI.TextAnalytics/samples/Sample12_AbstractiveSummarize.md\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/dotnet/\n[service_access]: https://learn.microsoft.com/azure/cognitive-services/cognitive-services-apis-create-account\n[create_ta_resource_azure_portal]: https://learn.microsoft.com/azure/cognitive-services/cognitive-services-apis-create-account\n[create_ta_resource_azure_cli]: https://learn.microsoft.com/azure/cognitive-services/cognitive-services-apis-create-account-cli\n[nuget]: https://www.nuget.org/\n[azure_portal]: https://portal.azure.com\n[moq]: https://github.com/Moq/moq4/\n\n[cla]: https://cla.microsoft.com\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n",
        "repo_name": "textanalytics/Azure.AI.TextAnalytics",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/textanalytics/Azure.AI.TextAnalytics",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Time Series Insights client library for .NET\n\n---\n[//]: <> (This content is similar to https://github.com/MicrosoftDocs/azure-docs/blob/main/includes/tsi-retirement.md)\n\n**NOTE**\n>The Time Series Insights (TSI) service will no longer be supported after March 2025. Consider migrating existing TSI environments to alternative solutions as soon as possible. For more information on the deprecation and migration, visit our [documentation](https://aka.ms/tsi2adx).\n---\n\nAzure Time Series Insights provides data exploration and telemetry tools to help you improve operational analysis. It's a fully managed analytics, storage, and visualization service where you can explore and analyze billions of Internet of Things (IoT) events simultaneously.\n\nAzure Time Series Insights gives you a global view of your data, so you can quickly validate your IoT solution and avoid costly downtime to mission-critical devices. It can help you discover hidden trends, spot anomalies, and conduct root-cause analysis in near real time.\n\nIf you are new to Azure Time Series Insights and would like to learn more about the platform, please make sure you check out the Azure Time Series Insights official [documentation page][tsi_product_documentation].\n\n## Getting started\n\nThe complete Microsoft Azure SDK can be downloaded from the [Microsoft Azure downloads][microsoft_sdk_download] page, and it ships with support for building deployment packages, integrating with tooling, rich command line tooling, and more.\n\nFor the best development experience, developers should use the official Microsoft NuGet packages for libraries. NuGet packages are regularly updated with new functionality and hotfixes.\n\n### Install the package\n\nInstall the Azure Time Series Insights client library for .NET with NuGet:\n\n```dotnetcli\ndotnet add package Azure.IoT.TimeSeriesInsights --prerelease\n```\n\nView the package details at [nuget.org][tsi_nuget].\n\n### Prerequisites\n\n- A Microsoft Azure Subscription\n  - To call Microsoft Azure services, create an [Azure subscription][azure_sub].\n\n### Authenticate the Client\n\nIn order to interact with the Azure Time Series Insights service, you will need to create an instance of a [TokenCredential class][token_credential] and pass it to the constructor of your [TimeSeriesInsightsClient](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/timeseriesinsights/Azure.IoT.TimeSeriesInsights/src/TimeSeriesInsightsClient.cs).\n\n## Key concepts\n\nThe Time Series Insights client library for .NET provides the following functionality:\n- Retrieving and being able to make changes to the Time Series Insights environment model settings, such as changing the model name or default type ID.\n- Retrieving and being able to add, update and remove Time Series instances.\n- Retrieving and being able to make changes to the Time Series Insights environment types, such as creating, updating and deleting Time Series types.\n- Retrieving and being able to make changes to the Time Series Insights hierarchies, such as creating, updating and deleting Time Series hierarchies.\n- Querying raw events, computed series and aggregate series.\n\n[Source Code][tsi_client_src] | [Package (NuGet)][tsi_nuget] | [Product documentation][tsi_product_documentation] | [Samples][tsi_samples]\n\n### Thread safety\nWe guarantee that all client instance methods are thread-safe and independent of each other ([guideline](https://azure.github.io/azure-sdk/dotnet_introduction.html#dotnet-service-methods-thread-safety)). This ensures that reusing client instances is always safe, even across threads.\n\n### Additional concepts\n<!-- CLIENT COMMON BAR -->\n[Client options](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#configuring-service-clients-using-clientoptions) |\n[Accessing the response](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#accessing-http-response-details-using-responset) |\n[Long-running operations](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#consuming-long-running-operations-using-operationt) |\n[Handling failures](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#reporting-errors-requestfailedexception) |\n[Diagnostics](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md) |\n[Mocking](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#mocking) |\n[Client lifetime](https://devblogs.microsoft.com/azure-sdk/lifetime-management-and-thread-safety-guarantees-of-azure-sdk-net-clients/)\n<!-- CLIENT COMMON BAR -->\n\n## Examples\n\nYou can familiarize yourself with different APIs using [samples for Time Series Insights][tsi_samples].\n\n## Source code folder structure\n\n### /src\n\nThe Time Series Insights public client, `TimeSeriesInsightsClient`, and the additional configuration options, `TimeSeriesInsightsClientOptions`, that can be sent to the Time Series Insights service.\n\n### /src/Generated\n\nThe code generated by autorest using the swagger file defined in the autorest config file.\n\nTo regenerate the code, run the powershell script [generate.ps1](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/timeseriesinsights/Azure.IoT.TimeSeriesInsights/src/generate.ps1).\n\nAny time the client library code is updated, the following scripts need to be run:\n\n- [Export-AdtApis.ps1](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/timeseriesinsights/Export-TsiApis.ps1), which will update the [API surface document](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/timeseriesinsights/Azure.IoT.TimeSeriesInsights/api/Azure.IoT.TimeSeriesInsights.netstandard2.0.cs).\n- [Update-Snippets.ps1](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/timeseriesinsights/Update-TsiSnippets.ps1), which will update all the code snippets in the readme files and in the client documentation comments.\n\n### /src/Customized\n\nThe customzied code written to override the following behavior of auto-generated code:\n\n- Declare some of the generated types as **internal**, instead of the autorest default of **public**.\n\n### /src/Models\n\nModel classes useful for use with the Time Series Insights client operations.\n\n### /src/Properties\n\nAssembly properties required for running unit tests.\n\n## Troubleshooting\n\nTime Series Insights service operation failures are usually returned to the user as [TimeSeriesOperationError](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/timeseriesinsights/Azure.IoT.TimeSeriesInsights/src/Generated/Models/TimeSeriesOperationError.cs). The TimeSeriesOperationError response is either returned directly by the client library API, or as a nested property within the actual response for the client library API. For example, the DeleteByName API that is part of the hierarchies client returns a TimeSeriesOperationError directly. Whereas, the Replace API that is part of the instances client returns a [InstancesOperationResult](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/timeseriesinsights/Azure.IoT.TimeSeriesInsights/src/Generated/Models/InstancesOperationResult.cs), which has a TimeSeriesOperationError property nested within it.\n\nExample below shows use of TimeSeriesInsightsSampleGetTypeById operation, iterate through response error to find out if a type does not exist.\n\n```C# Snippet:TimeSeriesInsightsSampleGetTypeById\n// Code snippet below shows getting a default Type using Id\n// The default type Id can be obtained programmatically by using the ModelSettings client.\n\nTimeSeriesInsightsModelSettings modelSettingsClient = client.GetModelSettingsClient();\nTimeSeriesModelSettings modelSettings = await modelSettingsClient.GetAsync();\nResponse<TimeSeriesTypeOperationResult[]> getTypeByIdResults = await typesClient\n    .GetByIdAsync(new string[] { modelSettings.DefaultTypeId });\n\n// The response of calling the API contains a list of type or error objects corresponding by position to the input parameter array in the request.\n// If the error object is set to null, this means the operation was a success.\nfor (int i = 0; i < getTypeByIdResults.Value.Length; i++)\n{\n    if (getTypeByIdResults.Value[i].Error == null)\n    {\n        Console.WriteLine($\"Retrieved Time Series type with Id: '{getTypeByIdResults.Value[i].TimeSeriesType.Id}'.\");\n    }\n    else\n    {\n        Console.WriteLine($\"Failed to retrieve a Time Series type due to '{getTypeByIdResults.Value[i].Error.Message}'.\");\n    }\n}\n```\n\n## Next steps\n\nSee implementation examples with our [code samples](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/timeseriesinsights/Azure.IoT.TimeSeriesInsights/samples).\n\n## Contributing\n\nThis project welcomes contributions and suggestions.\nMost contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution.\nFor details, visit <https://cla.microsoft.com.>\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment).\nSimply follow the instructions provided by the bot.\nYou will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct].\nFor more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments.\n\n<!-- LINKS -->\n[microsoft_sdk_download]: https://azure.microsoft.com/downloads/?sdk=net\n[azure_sdk_target_frameworks]: https://github.com/azure/azure-sdk-for-net#target-frameworks\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/dotnet/\n[package]: https://www.nuget.org/packages/Azure.IoT.TimeSeriesInsights\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[nuget]: https://www.nuget.org/\n[azure_portal]: https://portal.azure.com/\n[azure_rest_api]: https://docs.microsoft.com/rest/api/azure/\n[azure_core_library]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/core/Azure.Core\n[token_credential]: https://docs.microsoft.com/dotnet/api/azure.core.tokencredential?view=azure-dotnet\n[azure_cli]: https://docs.microsoft.com/cli/azure/install-azure-cli?view=azure-cli-latest\n[iot_cli_extension]: https://github.com/Azure/azure-iot-cli-extension/releases\n[iot_cli_doc]: https://docs.microsoft.com/cli/azure/ext/azure-iot/dt?view=azure-cli-latest\n[http_status_code]: https://docs.microsoft.com/dotnet/api/system.net.httpstatuscode?view=netcore-3.1\n[tsi_nuget]: https://www.nuget.org/packages/Azure.IoT.TimeSeriesInsights\n[tsi_client_src]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/timeseriesinsights/Azure.IoT.TimeSeriesInsights/src\n[tsi_product_documentation]: https://docs.microsoft.com/azure/time-series-insights/\n[tsi_samples]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/timeseriesinsights/Azure.IoT.TimeSeriesInsights/samples/Readme.md\n",
        "repo_name": "timeseriesinsights/Azure.IoT.TimeSeriesInsights",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/timeseriesinsights/Azure.IoT.TimeSeriesInsights",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Traffic Manager management client library for .NET\n\nMicrosoft Azure Traffic Manager is a DNS-based traffic load balancer. This service allows you to distribute traffic to your public facing applications across the global Azure regions. Traffic Manager also provides your public endpoints with high availability and quick responsiveness.\n\nThis library supports managing Microsoft Azure Traffic Manager resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Traffic Manager management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.TrafficManager\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "trafficmanager/Azure.ResourceManager.TrafficManager",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/trafficmanager/Azure.ResourceManager.TrafficManager",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Cognitive Services Document Translation client library for .NET\n\nAzure Cognitive Services Document Translation is a cloud service that translates documents to and from 90 languages and dialects while preserving document structure and data format. Use the client library for Document Translation to:\n\n* Translate numerous, large files from an Azure Blob Storage container to a target container in your language of choice.\n* Check the translation status and progress of each document in the translation operation.\n* Apply a custom translation model or glossaries to tailor translation to your specific case.\n\n[Source code][documenttranslation_client_src] | [Package (NuGet)][documenttranslation_nuget_package] | [API reference documentation][documenttranslation_refdocs] | [Product documentation][documenttranslation_docs] | [Samples][documenttranslation_samples]\n\n## Getting started\n\n### Install the package\nInstall the Azure Document Translation client library for .NET with [NuGet][nuget]:\n\n```dotnetcli\ndotnet add package Azure.AI.Translation.Document\n```\n\n> Note: This version of the client library defaults to the `v1.0` version of the service.\n\n### Prerequisites\n* An [Azure subscription][azure_sub].\n* An existing Translator resource.\n\n#### Create a Translator resource\nDocument Translation supports [single-service access][single_service] only.\nTo access the service, create a Translator resource.\n\nYou can create either resource using: \n\n**Option 1:** [Azure Portal][azure_portal_create_DT_resource].\n\n**Option 2:** [Azure CLI][cognitive_resource_cli]. \n\nBelow is an example of how you can create a Translator resource using the CLI:\n\n```PowerShell\n# Create a new resource group to hold the Translator resource -\n# if using an existing resource group, skip this step\naz group create --name <your-resource-name> --location <location>\n```\n\n```PowerShell\n# Create Translator\naz cognitiveservices account create \\\n    --name <your-resource-name> \\\n    --custom-domain <your-resource-name> \\\n    --resource-group <your-resource-group-name> \\\n    --kind TextTranslation \\\n    --sku S1 \\\n    --location <location> \\\n    --yes\n```\nFor more information about creating the resource or how to get the location information see [here][cognitive_resource_cli].\n\n### Authenticate the client\nIn order to interact with the Document Translation service, you'll need to create an instance of the [DocumentTranslationClient][documenttranslation_client_class] class. You will need an **endpoint**, and either an **API key** or `TokenCredential` to instantiate a client object.  For more information regarding authenticating with cognitive services, see [Authenticate requests to Azure Cognitive Services][cognitive_auth].\n\n#### Looking up the endpoint\nFor Document Translation you will need to use a [Custom Domain Endpoint][custom_domain_endpoint] using the name of you Translator resource.\n\n#### Get API Key\nYou can get the `API key` from the Translator resource information in the [Azure Portal][azure_portal].\n\nAlternatively, use the [Azure CLI][azure_cli] snippet below to get the API key from the Translator resource.\n\n```PowerShell\naz cognitiveservices account keys list --resource-group <your-resource-group-name> --name <your-resource-name>\n```\n\n#### Create DocumentTranslationClient with API Key Credential\nOnce you have the value for the API key, create an `AzureKeyCredential`. This will allow you to\nupdate the API key without creating a new client.\n\nWith the value of the endpoint and an `AzureKeyCredential`, you can create the [DocumentTranslationClient][documenttranslation_client_class]:\n\n```C# Snippet:CreateDocumentTranslationClient\nstring endpoint = \"<Document Translator Resource Endpoint>\";\nstring apiKey = \"<Document Translator Resource API Key>\";\nvar client = new DocumentTranslationClient(new Uri(endpoint), new AzureKeyCredential(apiKey));\n```\n\n#### Create DocumentTranslationClient with Azure Active Directory Credential\n\nClient API key authentication is used in most of the examples in this getting started guide, but you can also authenticate with Azure Active Directory using the [Azure Identity library][azure_identity].  Note that regional endpoints do not support AAD authentication.\n\nCreate a [custom subdomain][custom_subdomain] for your resource in order to use this type of authentication.  \n\nTo use the [DefaultAzureCredential][DefaultAzureCredential] provider shown below, or other credential providers provided with the Azure SDK, please install the Azure.Identity package:\n\n```dotnetcli\ndotnet add package Azure.Identity\n```\n\nYou will also need to [register a new AAD application][register_aad_app] and [grant access][aad_grant_access] to your Translator resource by assigning the `\"Cognitive Services User\"` role to your service principal.\n\nSet the values of the `client ID`, `tenant ID`, and `client secret` of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\n```C# Snippet:CreateDocumentTranslationClientTokenCredential\nstring endpoint = \"<Document Translator Resource Endpoint>\";\nvar client = new DocumentTranslationClient(new Uri(endpoint), new DefaultAzureCredential());\n```\n\n## Key concepts\nThe Document Translation service requires that you upload your files to an Azure Blob Storage source container and provide\na target container where the translated documents can be written. SAS tokens to the containers (or files) are used to\naccess the documents and create the translated documents in the target container. Additional information about setting this up can be found in\nthe service documentation:\n\n- [Set up Azure Blob Storage containers][source_containers] with your documents.\n- Optionally apply [glossaries][glossary] or a [custom model for translation][custom_model].\n- Generate [SAS tokens][sas_token] to your containers (or files) with the appropriate [permissions][sas_token_permissions].\n\n### DocumentTranslationClient\nA `DocumentTranslationClient` is the primary interface for developers using the Document Translation client library.  It provides both synchronous and asynchronous methods to perform the following operations:\n\n - Creating a translation operation to translate documents in your source container(s) and write results to you target container(s).\n - Enumerating all past and current translation operations.\n - Identifying supported glossary and document formats.\n\n### Translation Input\nTo start a translation operation you need to create one instance or a list of `DocumentTranslationInput`. \n\nA single source URL to documents can be translated to many different languages:\n\n```C# Snippet:DocumentTranslationSingleInput\nUri sourceSasUri = new Uri(\"<source SAS URI>\");\nUri frenchTargetSasUri = new Uri(\"<french target SAS URI>\");\nvar input = new DocumentTranslationInput(sourceSasUri, frenchTargetSasUri, \"fr\");\n```\n\nOr multiple different sources can be provided each with their own targets.\n\n```C# Snippet:DocumentTranslationMultipleInputs\nUri arabicTargetSasUri = new Uri(\"<arabic target SAS URI>\");\nUri spanishTargetSasUri = new Uri(\"<spanish target SAS URI>\");\nUri source1SasUri = new Uri(\"<source1 SAS URI>\");\nUri source2SasUri = new Uri(\"<source2 SAS URI>\");\n\nvar inputs = new List<DocumentTranslationInput>\n{\n    new DocumentTranslationInput(source1SasUri, spanishTargetSasUri, \"es\"),\n    new DocumentTranslationInput(\n        source: new TranslationSource(source2SasUri),\n        targets: new List<TranslationTarget>\n        {\n            new TranslationTarget(frenchTargetSasUri, \"fr\"),\n            new TranslationTarget(arabicTargetSasUri, \"ar\")\n        }),\n};\n```\n\nNote that documents written to a target container must have unique names. So you can't translate a source container into a target container twice or have sources with the same documents translated into the same target container.\n\n### Long-Running Operations\n\nDocument Translation is implemented as a [**long-running operation**][dotnet_lro].  Long-running operations consist of an initial request sent to the service to start an operation, followed by polling the service at intervals to determine whether the operation has completed successfully or failed.\n\nFor long running operations in the Azure SDK, the client exposes a `Start<operation-name>` method that returns a `PageableOperation<T>`.  You can use the extension method `WaitForCompletionAsync()` to wait for the operation to complete and obtain its result.  A sample code snippet is provided to illustrate using long-running operations [below](#start-translation-asynchronously).\n\n### Thread safety\nWe guarantee that all client instance methods are thread-safe and independent of each other ([guideline](https://azure.github.io/azure-sdk/dotnet_introduction.html#dotnet-service-methods-thread-safety)). This ensures that the recommendation of reusing client instances is always safe, even across threads.\n\n\n### Additional concepts\n<!-- CLIENT COMMON BAR -->\n[Client options](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#configuring-service-clients-using-clientoptions) |\n[Accessing the response](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#accessing-http-response-details-using-responset) |\n[Handling failures](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#reporting-errors-requestfailedexception) |\n[Diagnostics](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md) |\n[Mocking](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#mocking) |\n[Client lifetime](https://devblogs.microsoft.com/azure-sdk/lifetime-management-and-thread-safety-guarantees-of-azure-sdk-net-clients/)\n<!-- CLIENT COMMON BAR -->\n\n## Examples\nThe following section provides several code snippets using the `client` [created above](#create-documenttranslationclient-with-api-key-credential), and covers the main functions of Document Translation.\nNote: our `DocumentTranslationClient` provides both synchronous and asynchronous methods.\n\n### Async Examples\n* [Start Translation Asynchronously](#start-translation-asynchronously)\n* [Operations History Asynchronously](#get-operations-history-asynchronously)\n* [Multiple Inputs Asynchronously](#start-translation-with-multiple-inputs-asynchronously)\n\n### Sync Examples\nNote: our `DocumentTranslationClient` provides both synchronous and asynchronous methods.\n* [Start Translation](#start-translation)\n\n### Start Translation Asynchronously\nStart a translation operation to translate documents in the source container and write the translated files to the target container. `DocumentTranslationOperation` allows you to poll the status of the translation operation and get the status of the individual documents.\n\n```C# Snippet:StartTranslationAsync\nUri sourceUri = new Uri(\"<source SAS URI>\");\nUri targetUri = new Uri(\"<target SAS URI>\");\nvar input = new DocumentTranslationInput(sourceUri, targetUri, \"es\");\n\nDocumentTranslationOperation operation = await client.StartTranslationAsync(input);\n\nawait operation.WaitForCompletionAsync();\n\nConsole.WriteLine($\"  Status: {operation.Status}\");\nConsole.WriteLine($\"  Created on: {operation.CreatedOn}\");\nConsole.WriteLine($\"  Last modified: {operation.LastModified}\");\nConsole.WriteLine($\"  Total documents: {operation.DocumentsTotal}\");\nConsole.WriteLine($\"    Succeeded: {operation.DocumentsSucceeded}\");\nConsole.WriteLine($\"    Failed: {operation.DocumentsFailed}\");\nConsole.WriteLine($\"    In Progress: {operation.DocumentsInProgress}\");\nConsole.WriteLine($\"    Not started: {operation.DocumentsNotStarted}\");\n\nawait foreach (DocumentStatusResult document in operation.Value)\n{\n    Console.WriteLine($\"Document with Id: {document.Id}\");\n    Console.WriteLine($\"  Status:{document.Status}\");\n    if (document.Status == DocumentTranslationStatus.Succeeded)\n    {\n        Console.WriteLine($\"  Translated Document Uri: {document.TranslatedDocumentUri}\");\n        Console.WriteLine($\"  Translated to language code: {document.TranslatedToLanguageCode}.\");\n        Console.WriteLine($\"  Document source Uri: {document.SourceDocumentUri}\");\n    }\n    else\n    {\n        Console.WriteLine($\"  Error Code: {document.Error.Code}\");\n        Console.WriteLine($\"  Message: {document.Error.Message}\");\n    }\n}\n```\n\n### Get Operations History Asynchronously\nGet History of submitted translation operations from the last 7 days. The options parameter can be ommitted if the user would like to return all submitted operations.\n\n```C# Snippet:OperationsHistoryAsync\nint operationsCount = 0;\nint totalDocs = 0;\nint docsCanceled = 0;\nint docsSucceeded = 0;\nint docsFailed = 0;\n\nDateTimeOffset lastWeekTimestamp = DateTimeOffset.Now.AddDays(-7);\n\nvar options = new GetTranslationStatusesOptions\n{\n    CreatedAfter = lastWeekTimestamp\n};\n\nawait foreach (TranslationStatusResult translationStatus in client.GetTranslationStatusesAsync(options))\n{\n    if (translationStatus.Status == DocumentTranslationStatus.NotStarted ||\n        translationStatus.Status == DocumentTranslationStatus.Running)\n    {\n        DocumentTranslationOperation operation = new DocumentTranslationOperation(translationStatus.Id, client);\n        await operation.WaitForCompletionAsync();\n    }\n\n    operationsCount++;\n    totalDocs += translationStatus.DocumentsTotal;\n    docsCanceled += translationStatus.DocumentsCanceled;\n    docsSucceeded += translationStatus.DocumentsSucceeded;\n    docsFailed += translationStatus.DocumentsFailed;\n}\n\nConsole.WriteLine($\"# of operations: {operationsCount}\");\nConsole.WriteLine($\"Total Documents: {totalDocs}\");\nConsole.WriteLine($\"Succeeded Document: {docsSucceeded}\");\nConsole.WriteLine($\"Failed Document: {docsFailed}\");\nConsole.WriteLine($\"Canceled Documents: {docsCanceled}\");\n```\n\n### Start Translation with Multiple Inputs Asynchronously\nStart a translation operation to translate documents in multiple source containers to multiple target containers in different languages. `DocumentTranslationOperation` allows you to poll the status of the translation operation and get the status of the individual documents.\n\n```C# Snippet:MultipleInputsAsync\nUri source1SasUri = new Uri(\"<source1 SAS URI>\");\nUri source2SasUri = new Uri(\"<source2 SAS URI>\");\nUri frenchTargetSasUri = new Uri(\"<french target SAS URI>\");\nUri arabicTargetSasUri = new Uri(\"<arabic target SAS URI>\");\nUri spanishTargetSasUri = new Uri(\"<spanish target SAS URI>\");\nUri frenchGlossarySasUri = new Uri(\"<french glossary SAS URI>\");\n\nvar glossaryFormat = \"TSV\";\n\nvar input1 = new DocumentTranslationInput(source1SasUri, frenchTargetSasUri, \"fr\", new TranslationGlossary(frenchGlossarySasUri, glossaryFormat));\ninput1.AddTarget(spanishTargetSasUri, \"es\");\n\nvar input2 = new DocumentTranslationInput(source2SasUri, arabicTargetSasUri, \"ar\");\ninput2.AddTarget(frenchTargetSasUri, \"fr\", new TranslationGlossary(frenchGlossarySasUri, glossaryFormat));\n\nvar inputs = new List<DocumentTranslationInput>()\n    {\n        input1,\n        input2\n    };\n\nDocumentTranslationOperation operation = await client.StartTranslationAsync(inputs);\n\nawait operation.WaitForCompletionAsync();\n\nawait foreach (DocumentStatusResult document in operation.GetValuesAsync())\n{\n    Console.WriteLine($\"Document with Id: {document.Id}\");\n    Console.WriteLine($\"  Status:{document.Status}\");\n    if (document.Status == DocumentTranslationStatus.Succeeded)\n    {\n        Console.WriteLine($\"  Translated Document Uri: {document.TranslatedDocumentUri}\");\n        Console.WriteLine($\"  Translated to language code: {document.TranslatedToLanguageCode}.\");\n        Console.WriteLine($\"  Document source Uri: {document.SourceDocumentUri}\");\n    }\n    else\n    {\n        Console.WriteLine($\"  Document source Uri: {document.SourceDocumentUri}\");\n        Console.WriteLine($\"  Error Code: {document.Error.Code}\");\n        Console.WriteLine($\"  Message: {document.Error.Message}\");\n    }\n}\n```\n\n### Start Translation\nStart a translation operation to translate documents in the source container and write the translated files to the target container. `DocumentTranslationOperation` allows you to poll the status of the translation operation and get the status of the individual documents.\n\n```C# Snippet:StartTranslation\nUri sourceUri = new Uri(\"<source SAS URI>\");\nUri targetUri = new Uri(\"<target SAS URI>\");\nvar input = new DocumentTranslationInput(sourceUri, targetUri, \"es\");\n\nDocumentTranslationOperation operation = client.StartTranslation(input);\n\nTimeSpan pollingInterval = new(1000);\n\nwhile (true)\n{\n    operation.UpdateStatus();\n\n    Console.WriteLine($\"  Status: {operation.Status}\");\n    Console.WriteLine($\"  Created on: {operation.CreatedOn}\");\n    Console.WriteLine($\"  Last modified: {operation.LastModified}\");\n    Console.WriteLine($\"  Total documents: {operation.DocumentsTotal}\");\n    Console.WriteLine($\"    Succeeded: {operation.DocumentsSucceeded}\");\n    Console.WriteLine($\"    Failed: {operation.DocumentsFailed}\");\n    Console.WriteLine($\"    In Progress: {operation.DocumentsInProgress}\");\n    Console.WriteLine($\"    Not started: {operation.DocumentsNotStarted}\");\n\n    if (operation.HasCompleted)\n    {\n        break;\n    }\n    else\n    {\n        if (operation.GetRawResponse().Headers.TryGetValue(\"Retry-After\", out string value))\n        {\n            pollingInterval = TimeSpan.FromSeconds(Convert.ToInt32(value));\n        }\n        Thread.Sleep(pollingInterval);\n    }\n}\n\nforeach (DocumentStatusResult document in operation.GetValues())\n{\n    Console.WriteLine($\"Document with Id: {document.Id}\");\n    Console.WriteLine($\"  Status:{document.Status}\");\n    if (document.Status == DocumentTranslationStatus.Succeeded)\n    {\n        Console.WriteLine($\"  Translated Document Uri: {document.TranslatedDocumentUri}\");\n        Console.WriteLine($\"  Translated to language code: {document.TranslatedToLanguageCode}.\");\n        Console.WriteLine($\"  Document source Uri: {document.SourceDocumentUri}\");\n    }\n    else\n    {\n        Console.WriteLine($\"  Document source Uri: {document.SourceDocumentUri}\");\n        Console.WriteLine($\"  Error Code: {document.Error.Code}\");\n        Console.WriteLine($\"  Message: {document.Error.Message}\");\n    }\n}\n```\n\n## Troubleshooting\n\n### General\nWhen you interact with the Cognitive Services Document Translation client library using the .NET SDK, errors returned by the service correspond to the same HTTP status codes returned for [REST API][documenttranslation_rest_api] requests.\n\nFor example, if you submit a request with an empty targets list, a `400` error is returned, indicating \"Bad Request\".\n\n```C# Snippet:BadRequest\nvar invalidInput = new DocumentTranslationInput(new TranslationSource(new Uri(endpoint)), new List<TranslationTarget>());\n\ntry\n{\n    DocumentTranslationOperation operation = client.StartTranslation(invalidInput);\n}\ncatch (RequestFailedException e)\n{\n    Console.WriteLine(e.ToString());\n}\n```\n\nYou will notice that additional information is logged, like the client request ID of the operation.\n\n```\nMessage:\n    Azure.RequestFailedException: Service request failed.\n    Status: 400 (Bad Request)\n\nContent:\n    {\"error\":{\"code\":\"InvalidRequest\",\"message\":\"No translation target found.\",\"target\":\"TargetInput\",\"innerError\":{\"code\":\"NoTranslationTargetFound\",\"message\":\"No translation target found.\"}}}\n\nHeaders:\n    Transfer-Encoding: chunked\n    X-RequestId: REDACTED\n    Content-Type: application/json; charset=utf-8\n    Set-Cookie: REDACTED\n    X-Powered-By: REDACTED\n    apim-request-id: REDACTED\n    Strict-Transport-Security: REDACTED\n    x-content-type-options: REDACTED\n    Date: Mon, 22 Mar 2021 11:54:58 GMT\n```\n\n### Setting up console logging\nThe simplest way to see the logs is to enable the console logging.\nTo create an Azure SDK log listener that outputs messages to console use AzureEventSourceListener.CreateConsoleLogger method.\n\n```\n// Setup a listener to monitor logged events.\nusing AzureEventSourceListener listener = AzureEventSourceListener.CreateConsoleLogger();\n```\n\nTo learn more about other logging mechanisms see [here][logging].\n\n## Next steps\n\nSamples showing how to use the Cognitive Services Document Translation library are available in this GitHub repository.\n\n- [Start Translation][start_translation_sample]\n- [Poll Documents Status][documents_status_sample]\n- [Operations History][operations_history_sample]\n\n### Advanced samples\n- [Multiple Inputs][multiple_Inputs_sample]\n- [Create Storage Containers and start translation][using_storage_sample]\n\n## Contributing\nSee the [CONTRIBUTING.md][contributing] for details on building, testing, and contributing to this library.\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [cla.microsoft.com][cla].\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2Fsdk%2Fdocumenttranslation%2FAzure.AI.Translation.Document%2FREADME.png)\n\n\n<!-- LINKS -->\n[documenttranslation_client_src]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/translation/Azure.AI.Translation.Document/src\n[documenttranslation_docs]: https://docs.microsoft.com/azure/cognitive-services/translator/document-translation/overview\n[documenttranslation_refdocs]: https://aka.ms/azsdk/net/docs/documenttranslation\n[documenttranslation_nuget_package]: https://www.nuget.org/packages/Azure.AI.Translation.Document\n[documenttranslation_samples]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/translation/Azure.AI.Translation.Document/samples/README.md\n[documenttranslation_rest_api]: https://github.com/Azure/azure-rest-api-specs/blob/master/specification/cognitiveservices/data-plane/TranslatorText/stable/v1.0/TranslatorBatch.json\n[custom_domain_endpoint]: https://docs.microsoft.com/azure/cognitive-services/translator/document-translation/get-started-with-document-translation?tabs=csharp#what-is-the-custom-domain-endpoint\n[single_service]: https://docs.microsoft.com/azure/cognitive-services/cognitive-services-apis-create-account?tabs=singleservice%2Cwindows\n[azure_portal_create_DT_resource]: https://ms.portal.azure.com/#create/Microsoft.CognitiveServicesTextTranslation\n[cognitive_resource_cli]: https://docs.microsoft.com/azure/cognitive-services/cognitive-services-apis-create-account-cli\n[dotnet_lro]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#consuming-long-running-operations-using-operationt\n[source_containers]: https://docs.microsoft.com/azure/cognitive-services/translator/document-translation/get-started-with-document-translation?tabs=csharp#create-your-azure-blob-storage-containers\n[custom_model]: https://docs.microsoft.com/azure/cognitive-services/translator/custom-translator/quickstart-build-deploy-custom-model\n[glossary]: https://docs.microsoft.com/azure/cognitive-services/translator/document-translation/overview#supported-glossary-formats\n[sas_token]: https://docs.microsoft.com/azure/cognitive-services/translator/document-translation/create-sas-tokens?tabs=Containers#create-your-sas-tokens-with-azure-storage-explorer\n[sas_token_permissions]: https://aka.ms/azsdk/documenttranslation/sas-permissions\n\n[documenttranslation_client_class]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/translation/Azure.AI.Translation.Document/src/DocumentTranslationClient.cs\n[azure_identity]: https://github.com/Azure/azure-sdk-for-net/blob/master/sdk/identity/Azure.Identity/README.md\n[DefaultAzureCredential]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md#defaultazurecredential\n[register_aad_app]: https://docs.microsoft.com/azure/cognitive-services/authentication#assign-a-role-to-a-service-principal\n[aad_grant_access]: https://docs.microsoft.com/azure/cognitive-services/authentication#assign-a-role-to-a-service-principal\n[custom_subdomain]: https://docs.microsoft.com/azure/cognitive-services/authentication#create-a-resource-with-a-custom-subdomain\n[cognitive_auth]: https://docs.microsoft.com/azure/cognitive-services/authentication\n[logging]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md\n[contributing]: https://github.com/Azure/azure-sdk-for-net/blob/main/CONTRIBUTING.md\n\n[start_translation_sample]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/translation/Azure.AI.Translation.Document/samples/Sample1_StartTranslation.md\n[documents_status_sample]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/translation/Azure.AI.Translation.Document/samples/Sample2_PollIndividualDocuments.md\n[operations_history_sample]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/translation/Azure.AI.Translation.Document/samples/Sample3_OperationsHistory.md\n[multiple_inputs_sample]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/translation/Azure.AI.Translation.Document/samples/Sample4_MultipleInputs.md\n[using_storage_sample]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/translation/Azure.AI.Translation.Document/tests/samples/Sample_StartTranslationWithAzureBlob.cs\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/dotnet/\n[nuget]: https://www.nuget.org/\n[azure_portal]: https://portal.azure.com\n[moq]: https://github.com/Moq/moq4/\n\n[cla]: https://cla.microsoft.com\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n",
        "repo_name": "translation/Azure.AI.Translation.Document",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/translation/Azure.AI.Translation.Document",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Text Translation client library for .NET\n\nText translation is a cloud-based REST API feature of the Translator service that uses neural machine translation technology to enable quick and accurate source-to-target text translation in real time across all supported languages.\n\nUse the Text Translation client library for .NET to:\n\n* Return a list of languages supported by Translate, Transliterate, and Dictionary operations.\n\n* Render single source-language text to multiple target-language texts with a single request.\n\n* Convert text of a source language in letters of a different script.\n\n* Return equivalent words for the source term in the target language.\n\n* Return grammatical structure and context examples for the source term and target term pair.\n\n[Source code](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/translation/Azure.AI.Translation.Text/src) | [API reference documentation](https://learn.microsoft.com/azure/cognitive-services/translator/reference/v3-0-reference) | [Product documentation](https://learn.microsoft.com/azure/cognitive-services/translator/)\n\n## Getting started\n\n### Install the package\n\nInstall the Azure Text Translation client library for .NET with [NuGet][nuget]:\n\n```dotnetcli\ndotnet add package Azure.AI.Translation.Text --prerelease\n```\n\nThis table shows the relationship between SDK versions and supported API versions of the service:\n\n|SDK version  |Supported API version of service\n|-------------|-----------------------------------------------------|\n|1.0.0-beta.1 | 3.0\n\n### Prerequisites\n\n* An [Azure subscription][azure_sub].\n* An existing Translator service or Cognitive Services resource. You can create Translator resource following [Create a Translator resource][translator_resource_create].\n\n### Authenticate the client\n\nInteraction with the service using the client library begins with creating an instance of the [TextTranslationClient][translator_client_class] class. You will need an **API key** or ``TokenCredential`` to instantiate a client object. For more information regarding authenticating with Cognitive Services, see [Authenticate requests to Translator Service][translator_auth].\n\n#### Get an API key\n\nYou can get the `endpoint`, `API key` and `Region` from the Cognitive Services resource or Translator service resource information in the [Azure Portal][azure_portal].\n\nAlternatively, use the [Azure CLI][azure_cli] snippet below to get the API key from the Translator service resource.\n\n```PowerShell\naz cognitiveservices account keys list --resource-group <your-resource-group-name> --name <your-resource-name>\n```\n\n#### Create a `TextTranslationClient` using an API key and Region credential\n\nOnce you have the value for the API key and Region, create an `AzureKeyCredential`. This will allow you to\nupdate the API key without creating a new client.\n\nWith the value of the endpoint, `AzureKeyCredential` and a `Region`, you can create the [TextTranslationClient][translator_client_class]:\n\n```C#\nAzureKeyCredential credential = new(\"<apiKey>\");\nTextTranslationClient client = new(credential, \"<region>\");\n```\n\n## Key concepts\n\n### `TextTranslationClient`\n\nA `TextTranslationClient` is the primary interface for developers using the Text Translation client library.  It provides both synchronous and asynchronous operations to access a specific use of text translator, such as get supported languages detection or text translation.\n\n### Input\n\nA **text element** (`string`), is a single unit of input to be processed by the translation models in the Translator service. Operations on `TextTranslationClient` may take a single text element or a collection of text elements.\nFor text element length limits, maximum requests size, and supported text encoding see [here][translator_limits].\n\n### Return value\n\nReturn values, such as `Response<IReadOnlyList<TranslatedTextItem>>`, is the result of a Text Translation operation, It contains array with one result for each string in the input array.  An operation's return value also may optionally include information about the input text element (for example detected language).\n\n### Thread safety\n\nWe guarantee that all client instance methods are thread-safe and independent of each other ([guideline](https://azure.github.io/azure-sdk/dotnet_introduction.html#dotnet-service-methods-thread-safety)). This ensures that the recommendation of reusing client instances is always safe, even across threads.\n\n### Additional concepts\n<!-- CLIENT COMMON BAR -->\n[Client options](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#configuring-service-clients-using-clientoptions) |\n[Accessing the response](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#accessing-http-response-details-using-responset) |\n[Long-running operations](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#consuming-long-running-operations-using-operationt) |\n[Handling failures](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#reporting-errors-requestfailedexception) |\n[Diagnostics](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md) |\n[Mocking](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#mocking) |\n[Client lifetime](https://devblogs.microsoft.com/azure-sdk/lifetime-management-and-thread-safety-guarantees-of-azure-sdk-net-clients/)\n<!-- CLIENT COMMON BAR -->\n\n## Examples\n\nThe following section provides several code snippets using the `client` [created above](#create-a-texttranslationclient-using-an-api-key-and-region-credential), and covers the main features present in this client library. Although most of the snippets below make use of asynchronous service calls, keep in mind that the `Azure.AI.Translation.Text` package supports both synchronous and asynchronous APIs.\n\n### Get Supported Languages\n\nGets the set of languages currently supported by other operations of the Translator.\n\n```C#\ntry\n{\n    Response<GetLanguagesResult> response = await client.GetLanguagesAsync(cancellationToken: CancellationToken.None).ConfigureAwait(false);\n    GetLanguagesResult languages = response.Value;\n\n    Console.WriteLine($\"Number of supported languages for translate operations: {languages.Translation.Count}.\");\n}\ncatch (RequestFailedException exception)\n{\n    Console.WriteLine($\"Error Code: {exception.ErrorCode}\");\n    Console.WriteLine($\"Message: {exception.Message}\");\n}\n```\n\nFor samples on using the `languages` endpoint refer to more samples [here][languages_sample].\n\nPlease refer to the service documentation for a conceptual discussion of [languages][languages_doc].\n\n### Translate\n\nRenders single source-language text to multiple target-language texts with a single request.\n\n```C#\ntry\n{\n    string targetLanguage = \"cs\";\n    string inputText = \"This is a test.\";\n\n    Response<IReadOnlyList<TranslatedTextItem>> response = await client.TranslateAsync(targetLanguage, inputText).ConfigureAwait(false);\n    IReadOnlyList<TranslatedTextItem> translations = response.Value;\n    TranslatedTextItem translation = translations.FirstOrDefault();\n\n    Console.WriteLine($\"Detected languages of the input text: {translation?.DetectedLanguage?.Language} with score: {translation?.DetectedLanguage?.Score}.\");\n    Console.WriteLine($\"Text was translated to: '{translation?.Translations?.FirstOrDefault().To}' and the result is: '{translation?.Translations?.FirstOrDefault()?.Text}'.\");\n}\ncatch (RequestFailedException exception)\n{\n    Console.WriteLine($\"Error Code: {exception.ErrorCode}\");\n    Console.WriteLine($\"Message: {exception.Message}\");\n}\n```\n\nFor samples on using the `translate` endpoint refer to more samples [here][translate_sample].\n\nPlease refer to the service documentation for a conceptual discussion of [translate][translate_doc].\n\n### Transliterate\n\nConverts characters or letters of a source language to the corresponding characters or letters of a target language.\n\n```C#\ntry\n{\n    string language = \"zh-Hans\";\n    string fromScript = \"Hans\";\n    string toScript = \"Latn\";\n\n    string inputText = \"\u8fd9\u662f\u4e2a\u6d4b\u8bd5\u3002\";\n\n    Response<IReadOnlyList<TransliteratedText>> response = await client.TransliterateAsync(language, fromScript, toScript, inputText).ConfigureAwait(false);\n    IReadOnlyList<TransliteratedText> transliterations = response.Value;\n    TransliteratedText transliteration = transliterations.FirstOrDefault();\n\n    Console.WriteLine($\"Input text was transliterated to '{transliteration?.Script}' script. Transliterated text: '{transliteration?.Text}'.\");\n}\ncatch (RequestFailedException exception)\n{\n    Console.WriteLine($\"Error Code: {exception.ErrorCode}\");\n    Console.WriteLine($\"Message: {exception.Message}\");\n}\n```\n\nFor samples on using the `transliterate` endpoint refer to more samples [here][transliterate_sample].\n\nPlease refer to the service documentation for a conceptual discussion of [transliterate][transliterate_doc].\n\n### Break Sentence\n\nIdentifies the positioning of sentence boundaries in a piece of text.\n\n```C#\ntry\n{\n    string inputText = \"How are you? I am fine. What did you do today?\";\n\n    Response<IReadOnlyList<BreakSentenceItem>> response = await client.FindSentenceBoundariesAsync(inputText).ConfigureAwait(false);\n    IReadOnlyList<BreakSentenceItem> brokenSentences = response.Value;\n    BreakSentenceItem brokenSentence = brokenSentences.FirstOrDefault();\n\n    Console.WriteLine($\"Detected languages of the input text: {brokenSentence?.DetectedLanguage?.Language} with score: {brokenSentence?.DetectedLanguage?.Score}.\");\n    Console.WriteLine($\"The detected sentece boundaries: '{string.Join(\",\", brokenSentence?.SentLen)}'.\");\n\n}\ncatch (RequestFailedException exception)\n{\n    Console.WriteLine($\"Error Code: {exception.ErrorCode}\");\n    Console.WriteLine($\"Message: {exception.Message}\");\n}\n```\n\nFor samples on using the `break sentece` endpoint refer to more samples [here][breaksentence_sample].\n\nPlease refer to the service documentation for a conceptual discussion of [break sentence][breaksentence_doc].\n\n### Dictionary Lookup\n\nReturns equivalent words for the source term in the target language.\n\n```C#\ntry\n{\n    string sourceLanguage = \"en\";\n    string targetLanguage = \"es\";\n    string inputText = \"fly\";\n\n    Response<IReadOnlyList<DictionaryLookupItem>> response = await client.LookupDictionaryEntriesAsync(sourceLanguage, targetLanguage, inputText).ConfigureAwait(false);\n    IReadOnlyList<DictionaryLookupItem> dictionaryEntries = response.Value;\n    DictionaryLookupItem dictionaryEntry = dictionaryEntries.FirstOrDefault();\n\n    Console.WriteLine($\"For the given input {dictionaryEntry?.Translations?.Count} entries were found in the dictionary.\");\n    Console.WriteLine($\"First entry: '{dictionaryEntry?.Translations?.FirstOrDefault()?.DisplayTarget}', confidence: {dictionaryEntry?.Translations?.FirstOrDefault()?.Confidence}.\");\n\n}\ncatch (RequestFailedException exception)\n{\n    Console.WriteLine($\"Error Code: {exception.ErrorCode}\");\n    Console.WriteLine($\"Message: {exception.Message}\");\n}\n```\n\nFor samples on using the `dictionary lookup` endpoint refer to more samples [here][dictionarylookup_sample].\n\nPlease refer to the service documentation for a conceptual discussion of [dictionary lookup][dictionarylookup_doc].\n\n### Dictionary Examples\n\nReturns grammatical structure and context examples for the source term and target term pair.\n\n```C#\ntry\n{\n    string sourceLanguage = \"en\";\n    string targetLanguage = \"es\";\n    IEnumerable<InputTextWithTranslation> inputTextElements = new[]\n    {\n        new InputTextWithTranslation(\"fly\", \"volar\")\n    };\n\n    Response<IReadOnlyList<DictionaryExampleItem>> response = await client.LookupDictionaryExamplesAsync(sourceLanguage, targetLanguage, inputTextElements).ConfigureAwait(false);\n    IReadOnlyList<DictionaryExampleItem> dictionaryEntries = response.Value;\n    DictionaryExampleItem dictionaryEntry = dictionaryEntries.FirstOrDefault();\n\n    Console.WriteLine($\"For the given input {dictionaryEntry?.Examples?.Count} examples were found in the dictionary.\");\n    DictionaryExample firstExample = dictionaryEntry?.Examples?.FirstOrDefault();\n    Console.WriteLine($\"Example: '{string.Concat(firstExample.TargetPrefix, firstExample.TargetTerm, firstExample.TargetSuffix)}'.\");\n\n}\ncatch (RequestFailedException exception)\n{\n    Console.WriteLine($\"Error Code: {exception.ErrorCode}\");\n    Console.WriteLine($\"Message: {exception.Message}\");\n}\n```\n\nFor samples on using the `dictionary examples` endpoint refer to more samples [here][dictionaryexamples_sample].\n\nPlease refer to the service documentation for a conceptual discussion of [dictionary examples][dictionaryexamples_doc].\n\n## Troubleshooting\n\nWhen you interact with the Translator Service using the Text Translation client library, errors returned by the Translator service correspond to the same HTTP status codes returned for REST API requests.\n\nFor example, if you submit a translation request without a target translate language, a `400` error is returned, indicating \"Bad Request\".\n\n```C#\ntry\n{\n    var translation = client.TranslateAsync(Array.Empty<string>(), new[] { new InputText { Text = \"This is a Test\" } }).ConfigureAwait(false);\n}\ncatch (RequestFailedException e)\n{\n    Console.WriteLine(e.ToString());\n}\n```\n\nYou will notice that additional information is logged, like the client request ID of the operation.\n\n```text\nMessage:\n    Azure.RequestFailedException: Service request failed.\n    Status: 400 (Bad Request)\n\nContent:\n    {\"error\":{\"code\":400036,\"message\":\"The target language is not valid.\"}}\n\nHeaders:\n    X-RequestId: REDACTED\n    Access-Control-Expose-Headers: REDACTED\n    X-Content-Type-Options: REDACTED\n    Strict-Transport-Security: REDACTED\n    Date: Mon, 27 Feb 2023 23:31:37 GMT\n    Content-Type: text/plain; charset=utf-8\n    Content-Length: 71\n```\n\n### Setting up console logging\n\nThe simplest way to see the logs is to enable the console logging.\nTo create an Azure SDK log listener that outputs messages to console use AzureEventSourceListener.CreateConsoleLogger method.\n\n```C#\n// Setup a listener to monitor logged events.\nusing AzureEventSourceListener listener = AzureEventSourceListener.CreateConsoleLogger();\n```\n\nTo learn more about other logging mechanisms see [here][logging].\n\n## Next steps\n\nSamples showing how to use this client library are available in this GitHub repository.\nSamples are provided for each main functional area, and for each area, samples are provided in both sync and async mode.\n\n* [Create TextTranslationClient][client_sample]\n* [Languages][languages_sample]\n* [Translate][translate_sample]\n* [Transliterate][transliterate_sample]\n* [Break Sentence][breaksentence_sample]\n* [Dictionary Lookup][dictionarylookup_sample]\n* [Dictionary Examples][dictionaryexamples_sample]\n\n## Contributing\n\nSee the [CONTRIBUTING.md][contributing] for details on building, testing, and contributing to this library.\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [cla.microsoft.com][cla].\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n[contributing]: https://github.com/Azure/azure-sdk-for-net/blob/main/CONTRIBUTING.md\n[cla]: https://cla.microsoft.com\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n\n[translator_client_class]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/translation/Azure.AI.Translation.Text/src/Custom/TextTranslationClient.cs\n\n[translator_auth]: https://learn.microsoft.com/azure/cognitive-services/translator/reference/v3-0-reference#authentication\n[translator_limits]: https://learn.microsoft.com/azure/cognitive-services/translator/request-limits\n\n[languages_doc]: https://learn.microsoft.com/azure/cognitive-services/translator/reference/v3-0-languages\n[translate_doc]: https://learn.microsoft.com/azure/cognitive-services/translator/reference/v3-0-translate\n[transliterate_doc]: https://learn.microsoft.com/azure/cognitive-services/translator/reference/v3-0-transliterate\n[breaksentence_doc]: https://learn.microsoft.com/azure/cognitive-services/translator/reference/v3-0-break-sentence\n[dictionarylookup_doc]: https://learn.microsoft.com/azure/cognitive-services/translator/reference/v3-0-dictionary-lookup\n[dictionaryexamples_doc]: https://learn.microsoft.com/azure/cognitive-services/translator/reference/v3-0-dictionary-examples\n\n[client_sample]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/translation/Azure.AI.Translation.Text/samples/Sample0_CreateClient.md\n[languages_sample]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/translation/Azure.AI.Translation.Text/samples/Sample1_GetLanguages.md\n[translate_sample]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/translation/Azure.AI.Translation.Text/samples/Sample2_Translate.md\n[transliterate_sample]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/translation/Azure.AI.Translation.Text/samples/Sample3_Transliterate.md\n[breaksentence_sample]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/translation/Azure.AI.Translation.Text/samples/Sample4_BreakSentence.md\n[dictionarylookup_sample]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/translation/Azure.AI.Translation.Text/samples/Sample5_DictionaryLookup.md\n[dictionaryexamples_sample]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/translation/Azure.AI.Translation.Text/samples/Sample6_DictionaryExamples.md\n\n[translator_resource_create]: https://learn.microsoft.com/azure/cognitive-services/Translator/create-translator-resource\n\n[logging]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/dotnet/\n[nuget]: https://www.nuget.org/\n[azure_portal]: https://portal.azure.com\n",
        "repo_name": "translation/Azure.AI.Translation.Text",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/translation/Azure.AI.Translation.Text",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# **_(Retired)_**. Azure Video Analyzer Edge client library for .NET\n\nThe Azure Video Analyzer preview service has been retired as of December, 2022.  This SDK is no longer supported or maintained.\n\nAzure Video Analyzer is an [Azure Applied AI Service][applied-ai-service] that provides a platform for you to build intelligent video applications that can span both edge and cloud infrastructures. The platform offers the capability to capture, record, and analyze live video along with publishing the results, video and video analytics, to Azure services at the edge or in the cloud. It is designed to be an extensible platform, enabling you to connect different video inferencing edge modules such as Cognitive services modules, or custom inferencing modules that have been trained with your own data using either open-source machine learning or [Azure Machine Learning][machine-learning].\n\nUse the client library for Video Analyzer Edge to:\n\n-   Simplify interactions with the [Microsoft Azure IoT SDKs](https://github.com/azure/azure-iot-sdks)\n-   Programmatically construct pipeline topologies and live pipelines\n\n[Product documentation][doc_product] | [Source code][source] | [Samples][samples]\n\n## Getting started\n\nThis is a models-only SDK. All client operations are done using the [Microsoft Azure IoT SDKs](https://github.com/azure/azure-iot-sdks). This SDK provides models you can use to interact with the Azure IoT SDKs.\n\n### Authenticate the client\n\nThe client is coming from Azure IoT SDK. You will need to obtain an IoT device connection string in order to authenticate the Azure IoT SDK. For more information please visit: https://github.com/Azure/azure-iot-sdk-csharp.\n\n```C# Snippet:Azure_VideoAnalyzerSamples_ConnectionString\nstring connectionString = System.Environment.GetEnvironmentVariable(\"iothub_connectionstring\", EnvironmentVariableTarget.User);\nvar serviceClient = ServiceClient.CreateFromConnectionString(connectionString);\n```\n\n### Install the package\n\nInstall the Video Analyzer Edge client library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.Media.VideoAnalyzer.Edge --prerelease\n```\n\nInstall the Azure IoT Hub SDk for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Microsoft.Azure.Devices\n```\n\n### Prerequisites\n\n-   You need an active [Azure subscription][azure_sub] and an IoT device connection string to use this package.\n-   You will need to use the version of the SDK that corresponds to the version of the Video Analyzer Edge module you are using.\n\n    | SDK          | Video Analyzer edge module |\n    | ------------ | -------------------------- |\n    | 1.0.0-beta.5 | 1.1                        |\n    | 1.0.0-beta.4 | 1.0                        |\n    | 1.0.0-beta.3 | 1.0                        |\n    | 1.0.0-beta.2 | 1.0                        |\n    | 1.0.0-beta.1 | 1.0                        |\n\n### Creating a pipeline topology and making requests\n\nPlease visit the [Examples](#examples) for starter code.\n\n## Key concepts\n\n### Pipeline topology vs live pipeline\n\nA _pipeline topology_ is a blueprint or template for instantiating live pipelines. It defines the parameters of the pipeline using placeholders as values for them. A _live pipeline_ references a pipeline topology and specifies the parameters. This way you are able to have multiple live pipelines referencing the same topology but with different values for parameters.\n\n### CloudToDeviceMethod\n\nThe `CloudToDeviceMethod` is part of the [azure-iot-hub SDk][iot-hub-sdk]. This method allows you to communicate one way notifications to a device in your IoT hub. In our case, we want to communicate various methods such as `PipelineTopologySetRequest` and `PipelineTopologyGetRequest`. To use `CloudToDeviceMethod` you need to pass in one parameter: `MethodName` and then set the JSON payload of that method.\n\nThe parameter `MethodName` is the name of the request you are sending. Make sure to use each method's predefined `MethodName` property. For example, `PipelineTopologySetRequest.MethodName`.\n\nTo set the Json payload of the cloud method, use the pipeline request method's `GetPayloadAsJson()` function. For example, `directCloudMethod.SetPayloadJson(PipelineTopologySetRequest.GetPayloadAsJson())`\n\n### Thread safety\n\nWe guarantee that all client instance methods are thread-safe and independent of each other ([guideline](https://azure.github.io/azure-sdk/dotnet_introduction.html#dotnet-service-methods-thread-safety)). This ensures that the recommendation of reusing client instances is always safe, even across threads.\n\n### Additional concepts\n\n<!-- CLIENT COMMON BAR -->\n\n[Client options](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#configuring-service-clients-using-clientoptions) |\n[Accessing the response](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#accessing-http-response-details-using-responset) |\n[Long-running operations](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#consuming-long-running-operations-using-operationt) |\n[Handling failures](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#reporting-errors-requestfailedexception) |\n[Diagnostics](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md) |\n[Mocking](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md#mocking) |\n[Client lifetime](https://devblogs.microsoft.com/azure-sdk/lifetime-management-and-thread-safety-guarantees-of-azure-sdk-net-clients/)\n\n<!-- CLIENT COMMON BAR -->\n\n## Examples\n\n### Creating a pipeline topology\n\nTo create a pipeline topology you need to define sources and sinks.\n\n### Define Parameters\n\n```C# Snippet:Azure_VideoAnalyzerSamples_SetParameters\npipelineTopologyProperties.Parameters.Add(new ParameterDeclaration(\"rtspUserName\", ParameterType.String)\n{\n    Description = \"rtsp source user name.\",\n    Default = \"exampleUserName\"\n});\npipelineTopologyProperties.Parameters.Add(new ParameterDeclaration(\"rtspPassword\", ParameterType.SecretString)\n{\n    Description = \"rtsp source password.\",\n    Default = \"examplePassword\"\n});\npipelineTopologyProperties.Parameters.Add(new ParameterDeclaration(\"rtspUrl\", ParameterType.String)\n{\n    Description = \"rtsp Url\"\n});\n```\n\n### Define a Source\n\n```C# Snippet:Azure_VideoAnalyzerSamples_SetSourcesSinks1\npipelineTopologyProps.Sources.Add(new RtspSource(\"rtspSource\", new UnsecuredEndpoint(\"${rtspUrl}\")\n{\n    Credentials = new UsernamePasswordCredentials(\"${rtspUserName}\", \"${rtspPassword}\")\n})\n);\n```\n\n### Define a Sink\n\n```C# Snippet:Azure_VideoAnalyzerSamples_SetSourcesSinks2\nvar nodeInput = new List<NodeInput>\n{\n    new NodeInput(\"rtspSource\")\n};\npipelineTopologyProps.Sinks.Add(new VideoSink(\"videoSink\", nodeInput, \"video\", \"/var/lib/videoanalyzer/tmp/\", \"1024\"));\n```\n\n### Set the topology properties and create a topology\n\n```C# Snippet:Azure_VideoAnalyzerSamples_BuildPipelineTopology\nvar pipelineTopologyProps = new PipelineTopologyProperties\n{\n    Description = \"Continuous video recording to a Video Analyzer video\",\n};\nSetParameters(pipelineTopologyProps);\nSetSources(pipelineTopologyProps);\nSetSinks(pipelineTopologyProps);\nreturn new PipelineTopology(\"ContinuousRecording\")\n{\n    Properties = pipelineTopologyProps\n};\n```\n\n### Creating a live pipeline\n\nTo create a live pipeline, you need to have an existing pipeline topology.\n\n```C# Snippet:Azure_VideoAnalyzerSamples_BuildLivePipeline\nvar livePipelineProps = new LivePipelineProperties\n{\n    Description = \"Sample description\",\n    TopologyName = topologyName,\n};\n\nlivePipelineProps.Parameters.Add(new ParameterDefinition(\"rtspUrl\", \"rtsp://sample.com\"));\n\nreturn new LivePipeline(\"livePIpeline\")\n{\n    Properties = livePipelineProps\n};\n```\n\n### Invoking a direct method\n\nTo invoke a direct method on your device you need to first define the request using the Video Analyzer Edge SDK, then send that method request using the IoT SDK's `CloudToDeviceMethod`.\n\n```C# Snippet:Azure_VideoAnalyzerSamples_InvokeDirectMethod\nvar setPipelineTopRequest = new PipelineTopologySetRequest(pipelineTopology);\n\nvar directMethod = new CloudToDeviceMethod(setPipelineTopRequest.MethodName);\ndirectMethod.SetPayloadJson(setPipelineTopRequest.GetPayloadAsJson());\n\nvar setPipelineTopResponse = await _serviceClient.InvokeDeviceMethodAsync(_deviceId, _moduleId, directMethod);\n```\n\nTo try different pipeline topologies with the SDK, please see the official [Samples][samples].\n\n## Troubleshooting\n\n-   When sending a method request using the IoT Hub's `CloudToDeviceMethod` remember to not type in the method request name directly. Instead use `MethodRequestName.MethodName`\n\n## Next steps\n\n-   [Samples][samples]\n-   [Azure IoT Device SDK][iot-device-sdk]\n-   [Azure IoTHub Service SDK][iot-hub-sdk]\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require\nyou to agree to a Contributor License Agreement (CLA) declaring that you have\nthe right to, and actually do, grant us the rights to use your contribution.\nFor details, visit https://cla.microsoft.com.\n\nIf you encounter any issues, please open an issue on our [Github][github-page-issues].\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether\nyou need to provide a CLA and decorate the PR appropriately (e.g., label,\ncomment). Simply follow the instructions provided by the bot. You will only\nneed to do this once across all repos using our CLA.\n\nThis project has adopted the\n[Microsoft Open Source Code of Conduct][code_of_conduct]. For more information,\nsee the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact opencode@microsoft.com with any\nadditional questions or comments.\n\n<!-- LINKS -->\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/dotnet/\n[cla]: https://cla.microsoft.com\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n[package]: https://aka.ms/ava/sdk/client/net\n[source]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/videoanalyzer/Azure.Media.VideoAnalyzer.Edge/src\n[samples]: https://go.microsoft.com/fwlink/?linkid=2162276\n[doc_product]: https://docs.microsoft.com/azure/azure-video-analyzer/video-analyzer-docs/\n[iot-device-sdk]: https://www.nuget.org/packages/Microsoft.Azure.Devices.Client/\n[iot-hub-sdk]: https://www.nuget.org/packages/Microsoft.Azure.Devices/\n[github-page-issues]: https://github.com/Azure/azure-sdk-for-net/issues\n[applied-ai-service]: https://azure.microsoft.com/product-categories/applied-ai-services/#services\n[machine-learning]: https://azure.microsoft.com/services/machine-learning\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2Fsdk%2Fvideoanalyzer%2Fazure-media-videoanalyzer-edge%2FREADME.png)\n",
        "repo_name": "videoanalyzer/Azure.Media.VideoAnalyzer.Edge",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/videoanalyzer/Azure.Media.VideoAnalyzer.Edge",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure VoiceServices management client library for .NET\n\nThe VoiceServices management client library supports managing Azure Communications Gateway resources.\n\nAzure Communications Gateway is a managed, cloud-based voice gateway that simplifies connecting\noperator fixed and mobile voice networks to Teams Phone. It combines a Teams-certified and\nmobile-standards-compliant Session Border Controller (SBC) with API mediation function\u2014removing the\nneed for disruptive voice network changes and substantial IT system integration projects.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure VoiceServices management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.VoiceServices\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html)\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "voiceservices/Azure.ResourceManager.VoiceServices",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/voiceservices/Azure.ResourceManager.VoiceServices",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Web PubSub client library for .NET\n\n[Web PubSub](https://aka.ms/awps/doc) is an Azure-managed service that helps developers easily build web applications with real-time features and publish-subscribe patterns. Any scenario that requires real-time publish-subscribe messaging between server and clients or among clients can use Web PubSub. Traditional real-time features that often require polling from the server or submitting HTTP requests can also use Web PubSub.\n\nYou can use this library on your client side to manage the WebSocket client connections, as shown in the below diagram:\n\n![overflow](https://user-images.githubusercontent.com/7847428/215704912-b8a45d17-1f6f-4d26-ba0a-811452de10e1.png)\n\nUse this library to:\n\n- Send messages to groups\n- Send events to the [server](https://learn.microsoft.com/azure/azure-web-pubsub/concept-service-internals#terms)\n- Join and leave groups\n- Listen messages from groups and servers\n\nDetails about the terms used here are described in [Key concepts](#key-concepts) section.\n\n[Source code](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/webpubsub/Azure.Messaging.WebPubSub.Client/src) |\n[API reference documentation](https://aka.ms/awps/sdk/csharp) |\n[Product documentation](https://aka.ms/awps/doc) |\n\n## Getting started\n\n### Install the package\n\nInstall the client library from [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.Messaging.WebPubSub.Client --prerelease\n```\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n- An existing Web PubSub instance. [Create Web PubSub instance](https://learn.microsoft.com/azure/azure-web-pubsub/howto-develop-create-instance)\n\n### Authenticate the client\n\nA Client uses a Client Access URL to connect and authenticate with the service. The Uri follow the patten as `wss://<service_name>.webpubsub.azure.com/client/hubs/<hub_name>?access_token=<token>`. There're multiple ways to get a Client Access URL. As a quick start, you can copy and paste from Azure Portal, and for production, you usually need a negotiation server to generate the Uri.\n\n#### Use Client Access URL from Azure Portal\n\nAs a quick start, you can go to the Portal and copy the **Client Access URL** from **Key** blade.\n\n![get_client_url](https://camo.githubusercontent.com/77f1e3e39a5deef7ced866eea73684ecf844f9809dc25111006436a379f8238a/68747470733a2f2f6c6561726e2e6d6963726f736f66742e636f6d2f617a7572652f617a7572652d7765622d7075627375622f6d656469612f686f77746f2d776562736f636b65742d636f6e6e6563742f67656e65726174652d636c69656e742d75726c2e706e67)\n\nAs shown in the diagram, the client will be granted permission of sending messages to the specific group and joining the specific group. Learn more about client permission, see [permissions](https://learn.microsoft.com/azure/azure-web-pubsub/reference-json-reliable-webpubsub-subprotocol#permissions)\n\n```C# Snippet:WebPubSubClient_Construct\nvar client = new WebPubSubClient(new Uri(\"<client-access-uri>\"));\n```\n\n#### Use negotiation server to generate Client Access URL\n\nIn production, a client usually fetches the Client Access URL from a negotiation server. The server holds the connection string and generates the Client Access URL through `WebPubSubServiceClient`. As a sample, the code snippet below just demonstrates how to generate the Client Access URL inside a single process.\n\n```C# Snippet:WebPubSubClient_Construct2\nvar client = new WebPubSubClient(new WebPubSubClientCredential(token =>\n{\n    // In common practice, you will have a negotiation server for generating token. Client should fetch token from it.\n    return FetchClientAccessTokenFromServerAsync(token);\n}));\n```\n\n```C# Snippet:WebPubSubClient_GenerateClientAccessUri\npublic async ValueTask<Uri> FetchClientAccessTokenFromServerAsync(CancellationToken token)\n{\n    var serviceClient = new WebPubSubServiceClient(\"<< Connection String >>\", \"hub\");\n    return await serviceClient.GetClientAccessUriAsync();\n}\n```\n\nFeatures to differentiate `WebPubSubClient` and `WebPubSubServiceClient`.\n\n|Class Name|WebPubSubClient|WebPubSubServiceClient|\n|------|---------|---------|\n|Nuget Package Name|Azure.Messaging.WebPubSub.Client |Azure.Messaging.WebPubSub|\n|Features|Usually used on client side. Publish messages and subscribe to messages.|Usually used on server side. Generate Client Access Uri and manage clients|\n\nFind more details in [Azure.Messaging.WebPubSub](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/webpubsub/Azure.Messaging.WebPubSub)\n\n## Key concepts\n\n### Connection\n\nA connection, also known as a client connection, represents an individual WebSocket connection connected to the Web PubSub. When successfully connected, the Web PubSub assigns the connection a unique connection ID. Each `WebPubSubClient` creates its own exclusive connection.\n\n### Recovery\n\nIf a client using reliable protocols disconnects, a new WebSocket tries to establish using the connection ID of the lost connection. If the new WebSocket connection is successfully connected, the connection is recovered. Throughout the time a client is disconnected, the service retains the client's context as well as all messages that the client was subscribed to, and when the client recovers, the service will send these messages to the client. If the service returns WebSocket error code `1008` or the recovery attempt lasts more than 30 seconds, the recovery fails.\n\n### Reconnect\n\nReconnection happens when the client connection drops and fails to recover. Reconnection starts a new connection and the new connection has a new connection ID. Unlike recovery, the service treats the reconnected client as a new client connection. The client connection needs to rejoin groups. By default, the client library rejoins groups after reconnection.\n\n### Hub\n\nA hub is a logical concept representing a collection of client connections. Usually, you use one hub for one purpose: for example, a chat hub, or a notification hub. When a client connection is created, it connects to a hub, and during its lifetime, it is bound to that hub. Different applications can share one Web PubSub by using different hub names.\n\n### Group\n\nA group is a subset of connections to the hub. You can add and remove connections from a group at any time. For example, a chat room can be considered a group.  When clients join and leave the room, they are added and removed from the group. A connection can belong to multiple groups, and a group can contain multiple connections.\n\n### User\n\nConnections to Web PubSub can belong to one user. A user might have multiple connections, for example when a single user is connected across multiple devices or browser tabs.\n\n## Client Lifetime\n\nEach of the Web PubSub clients is safe to cache and use as a singleton for the lifetime of the application. The registered event callbacks share the same lifetime with the client. This means you can add or remove callbacks at any time and the registration status won't change after reconnection or even stopping the client.\n\n## Examples\n\n### Specify subprotocol\n\nYou can specify the subprotocol to be used by the client. By default, the client uses `json.reliable.webpubsub.azure.v1`. You can choose to use `json.reliable.webpubsub.azure.v1` or `json.webpubsub.azure.v1` as shown below.\n\n```C# Snippet:WebPubSubClient_JsonProtocol\nvar client = new WebPubSubClient(new Uri(\"<client-access-uri>\"), new WebPubSubClientOptions\n{\n    Protocol = new WebPubSubJsonProtocol()\n});\n```\n\n```C# Snippet:WebPubSubClient_JsonReliableProtocol\nvar client = new WebPubSubClient(new Uri(\"<client-access-uri>\"), new WebPubSubClientOptions\n{\n    Protocol = new WebPubSubJsonReliableProtocol()\n});\n```\n\n### Consume messages from the server and groups\n\nA client can add callbacks to consume messages from the server and groups. Please note, clients can only receive group messages that it has joined.\n\n```C# Snippet:WebPubSubClient_Subscribe_ServerMessage\nclient.ServerMessageReceived += eventArgs =>\n{\n    Console.WriteLine($\"Receive message: {eventArgs.Message.Data}\");\n    return Task.CompletedTask;\n};\n```\n\n```C# Snippet:WebPubSubClient_Subscribe_GroupMessage\nclient.GroupMessageReceived += eventArgs =>\n{\n    Console.WriteLine($\"Receive group message from {eventArgs.Message.Group}: {eventArgs.Message.Data}\");\n    return Task.CompletedTask;\n};\n```\n\n### Add callbacks for connected, disconnected, and stopped events\n\nWhen a client connection is connected to the service, the `Connected` event is triggered once it received the connected message from the service.\n\n```C# Snippet:WebPubSubClient_Subscribe_Connected\nclient.Connected += eventArgs =>\n{\n    Console.WriteLine($\"Connection {eventArgs.ConnectionId} is connected\");\n    return Task.CompletedTask;\n};\n```\n\nWhen a client connection is disconnected and fails to recover, the `Disconnected` event is triggered.\n\n```C# Snippet:WebPubSubClient_Subscribe_Disconnected\nclient.Disconnected += eventArgs =>\n{\n    Console.WriteLine($\"Connection is disconnected\");\n    return Task.CompletedTask;\n};\n```\n\nWhen a client is stopped, which means the client connection is disconnected and the client stops trying to reconnect, the `Stopped` event will be triggered. This usually happens after the `client.StopAsync()` is called, or disabled `AutoReconnect`. If you want to restart the client, you can call `client.StartAsync()` in the `Stopped` event.\n\n```C# Snippet:WebPubSubClient_Subscribe_Stopped\nclient.Stopped += eventArgs =>\n{\n    Console.WriteLine($\"Client is stopped\");\n    return Task.CompletedTask;\n};\n```\n\n### Auto rejoin groups and handle rejoin failure\n\nWhen a client connection has dropped and fails to recover, all group contexts will be cleaned up on the service side. That means when the client reconnects, it needs to rejoin groups. By default, the client enabled `AutoRejoinGroups` options. However, this feature has limitations. The client can only rejoin groups that it's originally joined by the client rather than joined by the server side. And rejoin group operations may fail due to various reasons, e.g. the client doesn't have permission to join groups. In such cases, users need to add a callback to handle the failure.\n\n```C# Snippet:WebPubSubClient_Subscribe_RestoreFailed\nclient.RejoinGroupFailed += eventArgs =>\n{\n    Console.WriteLine($\"Restore group failed\");\n    return Task.CompletedTask;\n};\n```\n\n### Operation and retry\n\nBy default, the operation such as `client.JoinGroupAsync()`, `client.LeaveGroupAsync()`, `client.SendToGroupAsync()`, `client.SendEventAsync()` has three reties. You can use `WebPubSubClientOptions.MessageRetryOptions` to change. If all retries have failed, an error will be thrown. You can keep retrying by passing in the same `ackId` as previous retries, thus the service can help to deduplicate the operation with the same `ackId`\n\n```C# Snippet:WebPubSubClient_JoinGroupAndRetry\n// Send message to group \"testGroup\"\ntry\n{\n    await client.JoinGroupAsync(\"testGroup\");\n}\ncatch (SendMessageFailedException ex)\n{\n    if (ex.AckId != null)\n    {\n        await client.JoinGroupAsync(\"testGroup\", ackId: ex.AckId);\n    }\n}\n```\n\n## Troubleshooting\n\n### Setting up console logging\n\nYou can also [enable console logging](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md#logging) if you want to dig deeper into the requests you're making against the service.\n\n## Next steps\n\nYou can also find [more samples here][awps_sample].\n\n## Contributing\n\nThis project welcomes contributions and suggestions.\nMost contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution.\nFor details, visit <https://cla.microsoft.com.>\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment).\nSimply follow the instructions provided by the bot.\nYou will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2Fsdk%2Ftemplate%2FAzure.Template%2FREADME.png)\n\n[azure_sub]: https://azure.microsoft.com/free/dotnet/\n[awps_sample]: https://github.com/Azure/azure-webpubsub/tree/main/samples/csharp\n",
        "repo_name": "webpubsub/Azure.Messaging.WebPubSub.Client",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/webpubsub/Azure.Messaging.WebPubSub.Client",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Web PubSub service client library for .NET\n\n[Azure Web PubSub Service](https://aka.ms/awps/doc) is an Azure-managed service that helps developers easily build web applications with real-time features and publish-subscribe pattern. Any scenario that requires real-time publish-subscribe messaging between server and clients or among clients can use Azure Web PubSub service. Traditional real-time features that often require polling from server or submitting HTTP requests can also use Azure Web PubSub service.\n\nYou can use this library in your app server side to manage the WebSocket client connections, as shown in below diagram:\n\n![overflow](https://user-images.githubusercontent.com/668244/140014067-25a00959-04dc-47e8-ac25-6957bd0a71ce.png)\n\nUse this library to:\n\n- Send messages to hubs and groups.\n- Send messages to particular users and connections.\n- Organize users and connections into groups.\n- Close connections\n- Grant, revoke, and check permissions for an existing connection\n\nDetails about the terms used here are described in [Key concepts](#key-concepts) section.\n\n[Source code](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/webpubsub/Azure.Messaging.WebPubSub/src) |\n[Package](https://www.nuget.org/packages/Azure.Messaging.WebPubSub) |\n[API reference documentation](https://aka.ms/awps/sdk/csharp) |\n[Product documentation](https://aka.ms/awps/doc) |\n[Samples][samples_ref]\n\n## Getting started\n\n### Install the package\n\nInstall the client library from [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.Messaging.WebPubSub\n```\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n- An existing Azure Web PubSub service instance.\n\n### Create and authenticate a `WebPubSubServiceClient`\n\nIn order to interact with the service, you'll need to create an instance of the `WebPubSubServiceClient` class. To make this possible, you'll need the connection string or a key, which you can access in the Azure portal.\n\n```C# Snippet:WebPubSubAuthenticate\n// Create a WebPubSubServiceClient that will authenticate using a key credential.\nvar serviceClient = new WebPubSubServiceClient(new Uri(endpoint), \"some_hub\", new AzureKeyCredential(key));\n```\n\n## Key concepts\n\n### Connection\n\nA connection, also known as a client or a client connection, represents an individual WebSocket connection connected to the Web PubSub service. When successfully connected, a unique connection ID is assigned to this connection by the Web PubSub service.\n\n### Hub\n\nA hub is a logical concept for a set of client connections. Usually you use one hub for one purpose, for example, a chat hub, or a notification hub. When a client connection is created, it connects to a hub, and during its lifetime, it belongs to that hub. Different applications can share one Azure Web PubSub service by using different hub names.\n\n### Group\n\nA group is a subset of connections to the hub. You can add a client connection to a group, or remove the client connection from the group, anytime you want. For example, when a client joins a chat room, or when a client leaves the chat room, this chat room can be considered to be a group. A client can join multiple groups, and a group can contain multiple clients.\n\n### User\n\nConnections to Web PubSub can belong to one user. A user might have multiple connections, for example when a single user is connected across multiple devices or multiple browser tabs.\n\n### Message\n\nWhen a client is connected, it can send messages to the upstream application, or receive messages from the upstream application, through the WebSocket connection.\n\n## Examples\n\n### Generate the full URI containing access token for the connection to use when connects the Azure Web PubSub\n\n```C# Snippet:GetClientAccessUri\n// Generate client access URI for userA\nserviceClient.GetClientAccessUri(userId: \"userA\");\n// Generate client access URI with initial permissions\nserviceClient.GetClientAccessUri(roles: new string[] { \"webpubsub.joinLeaveGroup.group1\", \"webpubsub.sendToGroup.group1\" });\n// Generate client access URI with initial groups to join when the connection connects\nserviceClient.GetClientAccessUri(groups: new string[] { \"group1\", \"group2\" });\n```\n\n### Send messages to the connections\n#### Broadcast a text message to all clients\n\n```C# Snippet:WebPubSubHelloWorld\nvar serviceClient = new WebPubSubServiceClient(connectionString, \"some_hub\");\n\nserviceClient.SendToAll(\"Hello World!\");\n```\n\n#### Broadcast a JSON message to all clients\n\n```C# Snippet:WebPubSubSendJson\nvar serviceClient = new WebPubSubServiceClient(connectionString, \"some_hub\");\n\nserviceClient.SendToAll(RequestContent.Create(\n        new\n        {\n            Foo = \"Hello World!\",\n            Bar = 42\n        }),\n        ContentType.ApplicationJson);\n```\n\n#### Broadcast a binary message to all clients\n\n```C# Snippet:WebPubSubSendBinary\nvar serviceClient = new WebPubSubServiceClient(connectionString, \"some_hub\");\n\nStream stream = BinaryData.FromString(\"Hello World!\").ToStream();\nserviceClient.SendToAll(RequestContent.Create(stream), ContentType.ApplicationOctetStream);\n```\n\n#### Broadcast messages to clients using filter\nAzure Web PubSub supports OData filter syntax to filter out the connections to send messages to.\n\nDetails about `filter` syntax please see [OData filter syntax for Azure Web PubSub](https://aka.ms/awps/filter-syntax).\n\n```C# Snippet:WebPubSubSendWithFilter\nvar serviceClient = new WebPubSubServiceClient(connectionString, \"some_hub\");\n\n// Use filter to send text message to anonymous connections\nserviceClient.SendToAll(\n        RequestContent.Create(\"Hello World!\"),\n        ContentType.TextPlain,\n        filter: ClientConnectionFilter.Create($\"userId eq {null}\"));\n\n// Use filter to send JSON message to connections in groupA but not in groupB\nvar group1 = \"GroupA\";\nvar group2 = \"GroupB\";\nserviceClient.SendToAll(RequestContent.Create(\n        new\n        {\n            Foo = \"Hello World!\",\n            Bar = 42\n        }),\n        ContentType.ApplicationJson,\n        filter: ClientConnectionFilter.Create($\"{group1} in groups and not({group2} in groups)\"));\n```\n\n### Connection management\n\n#### Add connections for some user to some group:\n```C# Snippet:WebPubSubAddUserToGroup\nclient.AddUserToGroup(\"some_group\", \"some_user\");\n\n// Avoid sending messages to users who do not exist.\nif (client.UserExists(\"some_user\").Value)\n{\n    client.SendToUser(\"some_user\", \"Hi, I am glad you exist!\");\n}\n\nclient.RemoveUserFromGroup(\"some_group\", \"some_user\");\n```\n\n#### Remove connection from all groups\n```C# Snippet:WebPubSubRemoveConnectionFromAllGroups\nvar client = new WebPubSubServiceClient(connectionString, \"some_hub\");\nclient.RemoveConnectionFromAllGroups(\"some_connection\");\n```\n\n## Troubleshooting\n\n### Setting up console logging\n\nYou can also easily [enable console logging](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md#logging) if you want to dig deeper into the requests you're making against the service.\n\n## Next steps\n\nPlease take a look at the\n[samples][samples_ref]\ndirectory for detailed examples on how to use this library.\n\nYou can also find [more samples here][awps_sample].\n\n## Contributing\n\nThis project welcomes contributions and suggestions.\nMost contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution.\nFor details, visit <https://cla.microsoft.com.>\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment).\nSimply follow the instructions provided by the bot.\nYou will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2Fsdk%2Ftemplate%2FAzure.Template%2FREADME.png)\n\n[azure_sub]: https://azure.microsoft.com/free/dotnet/\n[samples_ref]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/webpubsub/Azure.Messaging.WebPubSub/tests/Samples/\n[awps_sample]: https://github.com/Azure/azure-webpubsub/tree/main/samples/csharp\n",
        "repo_name": "webpubsub/Azure.Messaging.WebPubSub",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/webpubsub/Azure.Messaging.WebPubSub",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Web PubSub management client library for .NET\n\nMicrosoft Azure Web PubSub service is an Azure-managed service that helps developers easily build web applications with real-time features and publish-subscribe pattern.\n\nThis library supports managing Microsoft Azure Web PubSub resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Web PubSub management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.WebPubSub\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "webpubsub/Azure.ResourceManager.WebPubSub",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/webpubsub/Azure.ResourceManager.WebPubSub",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Web PubSub extension of isolated-process Azure Functions client library for .NET\n\nThis extension defines the binding types and triggers in the .NET isolated worker process for Azure Functions, allowing you to write functions that respond to any event published to Web PubSub.\n\n[Source code][source] |\nPackage |\nAPI reference documentation |\n[Product documentation](https://aka.ms/awps/doc) |\n[Samples]\n\n## Getting started\n\n### Install the package\n\nInstall the client library from [NuGet]:\n\n```dotnetcli\ndotnet add package Microsoft.Azure.Functions.Worker.Extensions.WebPubSub --prerelease\n```\n\n### Prerequisites\n\nYou must have an [Azure subscription][free_subs] and an Azure resource group with a Web PubSub resource. Follow this [step-by-step tutorial][tutorial] to create an Azure Web PubSub instance.\n\n### Authenticate the client\n\nIn order to let the extension work with Azure Web PubSub service, you will need to provide a valid `ConnectionString`. \n\nYou can find the **Keys** for you Azure Web PubSub service in the [Azure Portal][portal].\n\nThe `AzureWebJobsStorage` connection string is used to preserve the processing checkpoint information as required refer to [Storage considerations][storage]\n\nFor the local development use the `local.settings.json` file to store the connection string, `<connection-string>` can be set to `WebPubSubConnectionString` as default supported in the extension, or you can set customized names by mapping it with `Connection = <connection-string>` in function binding attributes:\n\n```json\n{\n  \"Values\": {\n    \"AzureWebJobsStorage\": \"UseDevelopmentStorage=true\",\n    \"<connection-string>\": \"Endpoint=https://<webpubsub-name>.webpubsub.azure.com;AccessKey=<access-key>;Version=1.0;\"\n  }\n}\n```\nWhen deployed use the [application settings][app_setting] to set the connection string.\n\n## Key concepts\n\n### Using Web PubSub input binding\n\nPlease follow the [input binding tutorial](#functions-that-uses-web-pubsub-input-binding) to learn about using this extension for building `WebPubSubConnection` to create Websockets connection to service with input binding.\n\n### Using Web PubSub output binding\n\nPlease follow the [output binding tutorial](#functions-that-uses-web-pubsub-output-binding) to learn about using this extension for publishing Web PubSub messages.\n\n### Using Web PubSub trigger\n\nPlease follow the [trigger binding tutorial](#functions-that-uses-web-pubsub-trigger) to learn about triggering an Azure Function when an event is sent from service upstream.\n\nIn `Connect` and `UserEvent` events, function will respect return values to send back service. Then service will depend on the response to proceed the request or else. The responses and events are paired. For example, `Connect` will only respect `ConnectEventResponse` or `EventErrorResponse`, and ignore other returns. When `EventErrorResponse` is returned, service will drop client connection.\n\n## Examples\n\n### Functions that uses Web PubSub input binding\n\nUse `WebPubSubConnectionInput` to build the client negotiate URL.\n\n```C# Snippet:WebPubSubConnectionInputFunction\n[Function(\"Negotiate\")]\npublic static HttpResponseData Run([HttpTrigger(AuthorizationLevel.Anonymous)] HttpRequestData req,\n[WebPubSubConnectionInput(Hub = \"<web_pubsub_hub>\", Connection = \"<web_pubsub_connection_name>\")] WebPubSubConnection connectionInfo)\n{\n    var response = req.CreateResponse(HttpStatusCode.OK);\n    response.WriteAsJsonAsync(connectionInfo);\n    return response;\n}\n```\n\nUse `WebPubSubContextInput` to read Web PubSub request under `HttpTrigger`. This is useful when work with Static Web Apps which supports `HttpTrigger` functions only.\n\n```C# Snippet:WebPubSubContextInputFunction\n// validate method when upstream set as http://<func-host>/api/{event}\n[Function(\"validate\")]\npublic static HttpResponseData Validate(\n    [HttpTrigger(AuthorizationLevel.Anonymous, \"options\")] HttpRequestData req,\n    [WebPubSubContextInput] WebPubSubContext wpsReq)\n{\n    return BuildHttpResponseData(req, wpsReq.Response);\n}\n\n// Respond AbuseProtection to put header correctly.\nprivate static HttpResponseData BuildHttpResponseData(HttpRequestData request, SimpleResponse wpsResponse)\n{\n    var response = request.CreateResponse();\n    response.StatusCode = (HttpStatusCode)wpsResponse.Status;\n    response.Body = response.Body;\n    foreach (var header in wpsResponse.Headers)\n    {\n        response.Headers.Add(header.Key, header.Value);\n    }\n    return response;\n}\n```\n\n### Functions that uses Web PubSub output binding\n\n```C# Snippet:WebPubSubOutputFunction\n[Function(\"Notification\")]\n[WebPubSubOutput(Hub = \"<web_pubsub_hub>\", Connection = \"<web_pubsub_connection_name>\")]\npublic static WebPubSubAction Run([HttpTrigger(AuthorizationLevel.Function, \"get\", \"post\")] HttpRequestData req)\n{\n    return new SendToAllAction\n    {\n        Data = BinaryData.FromString($\"Hello SendToAll.\"),\n        DataType = WebPubSubDataType.Text\n    };\n}\n```\n\n### Functions that uses Web PubSub trigger\n\n```C# Snippet:WebPubSubTriggerUserEventFunction\n[Function(\"Broadcast\")]\npublic static UserEventResponse Run(\n[WebPubSubTrigger(\"<web_pubsub_hub>\", WebPubSubEventType.User, \"message\")] UserEventRequest request)\n{\n    return new UserEventResponse(\"[SYSTEM ACK] Received.\");\n}\n```\n\nFor more details see the [samples README][samples].\n\n## Troubleshooting\n\nPlease refer to [Monitor Azure Functions][monitor] for troubleshooting guidance.\n\n## Next steps\n\nRead the [introduction to Azure Function][func_intro] or [creating an Azure Function guide][create].\n\n## Contributing\n\nSee our [CONTRIBUTING.md][contrib] for details on building,\ntesting, and contributing to this library.\n\nThis project welcomes contributions and suggestions.  Most contributions require\nyou to agree to a Contributor License Agreement (CLA) declaring that you have\nthe right to, and actually do, grant us the rights to use your contribution. For\ndetails, visit [cla.microsoft.com][cla].\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc].\nFor more information see the [Code of Conduct FAQ][coc_faq]\nor contact [opencode@microsoft.com][coc_contact] with any\nadditional questions or comments.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2Fsdk%2Fsearch%2FMicrosoft.Azure.Functions.Worker.Extensions.WebPubSub%2FREADME.png)\n\n<!-- LINKS -->\n[source]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/webpubsub/Microsoft.Azure.Functions.Worker.Extensions.WebPubSub/src\n<!-- [package] TODO: add after initial release -->\n<!-- [api_docs] TODO: add after initial release -->\n[samples]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/webpubsub/Microsoft.Azure.Functions.Worker.Extensions.WebPubSub/samples\n[nuget]: https://www.nuget.org/\n[free_subs]: https://azure.microsoft.com/free/dotnet/\n[portal]: https://portal.azure.com/\n[tutorial]: https://learn.microsoft.com/azure/azure-web-pubsub/howto-develop-create-instance\n[storage]: https://learn.microsoft.com/azure/azure-functions/storage-considerations#storage-account-requirements\n[app_setting]: https://learn.microsoft.com/azure/azure-functions/functions-how-to-use-azure-function-app-settings\n[monitor]: https://learn.microsoft.com/azure/azure-functions/functions-monitoring\n[func_intro]: https://learn.microsoft.com/azure/azure-functions/functions-overview\n[create]: https://learn.microsoft.com/azure/azure-functions/functions-overview\n\n[contrib]: https://github.com/Azure/azure-sdk-for-net/tree/main/CONTRIBUTING.md\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n",
        "repo_name": "webpubsub/Microsoft.Azure.Functions.Worker.Extensions.WebPubSub",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/webpubsub/Microsoft.Azure.Functions.Worker.Extensions.WebPubSub",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure WebJobs Web PubSub client library for .NET\n\nThis extension provides functionality for receiving Web PubSub webhook calls in Azure Functions, allowing you to easily write functions that respond to any event published to Web PubSub.\n\n[Source code](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/webpubsub/Microsoft.Azure.WebJobs.Extensions.WebPubSub/src) |\n[Package](https://www.nuget.org/packages/Microsoft.Azure.WebJobs.Extensions.WebPubSub) |\n[API reference documentation](https://docs.microsoft.com/dotnet/api/microsoft.azure.webjobs.extensions.webpubsub) |\n[Product documentation](https://aka.ms/awps/doc) |\n[Samples](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/webpubsub/Microsoft.Azure.WebJobs.Extensions.WebPubSub/samples)\n\n## Getting started\n\n### Install the package\n\nInstall the Web PubSub extension with [NuGet][nuget]:\n\n```dotnetcli\ndotnet add package Microsoft.Azure.WebJobs.Extensions.WebPubSub\n```\n\n### Prerequisites\n\nYou must have an [Azure subscription](https://azure.microsoft.com/free/dotnet/) and an Azure resource group with a Web PubSub resource. Follow this [step-by-step tutorial](https://docs.microsoft.com/azure/azure-web-pubsub/howto-develop-create-instance) to create an Azure Web PubSub instance.\n\n### Authenticate the client\n\nIn order to let the extension work with Azure Web PubSub service, you will need to provide a valid `ConnectionString`. \n\nYou can find the **Keys** for you Azure Web PubSub service in the [Azure Portal](https://portal.azure.com/).\n\nThe `AzureWebJobsStorage` connection string is used to preserve the processing checkpoint information as required refer to [Storage considerations](https://docs.microsoft.com/azure/azure-functions/storage-considerations#storage-account-requirements)\n\nFor the local development use the `local.settings.json` file to store the connection string, `<connection-string>` can be set to `WebPubSubConnectionString` as default supported in the extension, or you can set customized names by mapping it with `Connection = <connection-string>` in function binding attributes:\n\n```json\n{\n  \"Values\": {\n    \"AzureWebJobsStorage\": \"UseDevelopmentStorage=true\",\n    \"<connection-string>\": \"Endpoint=https://<webpubsub-name>.webpubsub.azure.com;AccessKey=<access-key>;Version=1.0;\"\n  }\n}\n```\nWhen deployed use the [application settings](https://docs.microsoft.com/azure/azure-functions/functions-how-to-use-azure-function-app-settings) to set the connection string.\n\n## Key concepts\n\n### Using Web PubSub input binding\n\nPlease follow the [input binding tutorial](#functions-that-uses-web-pubsub-input-binding) to learn about using this extension for building `WebPubSubConnection` to create Websockets connection to service with input binding.\n\n### Using Web PubSub output binding\n\nPlease follow the [output binding tutorial](#functions-that-uses-web-pubsub-output-binding) to learn about using this extension for publishing Web PubSub messages.\n\n### Using Web PubSub trigger\n\nPlease follow the [trigger binding tutorial](#functions-that-uses-web-pubsub-trigger) to learn about triggering an Azure Function when an event is sent from service upstream.\n\nIn `Connect` and `UserEvent` events, function will respect return values to send back service. Then service will depend on the response to proceed the request or else. The responses and events are paired. For example, `Connect` will only respect `ConnectEventResponse` or `EventErrorResponse`, and ignore other returns. When `EventErrorResponse` is returned, service will drop client connection. Please follow the [trigger binding return value tutorial](#functions-that-uses-web-pubsub-trigger-return-value) to learn about using the trigger return value.\n\n## Examples\n\n### Functions that uses Web PubSub input binding\n\n```C# Snippet:WebPubSubConnectionBindingFunction\npublic static class WebPubSubConnectionBindingFunction\n{\n    [FunctionName(\"WebPubSubConnectionBindingFunction\")]\n    public static WebPubSubConnection Run(\n        [HttpTrigger(AuthorizationLevel.Anonymous, \"get\", \"post\")] HttpRequest req,\n        [WebPubSubConnection(Hub = \"hub\", UserId = \"{query.userid}\", Connection = \"<connection-string>\")] WebPubSubConnection connection)\n    {\n        Console.WriteLine(\"login\");\n        return connection;\n    }\n}\n```\n\n### Functions that uses Web PubSub output binding\n\n```C# Snippet:WebPubSubOutputBindingFunction\npublic static class WebPubSubOutputBindingFunction\n{\n    [FunctionName(\"WebPubSubOutputBindingFunction\")]\n    public static async Task RunAsync(\n        [HttpTrigger(AuthorizationLevel.Anonymous, \"get\", \"post\")] HttpRequest req,\n        [WebPubSub(Hub = \"hub\", Connection = \"<connection-string>\")] IAsyncCollector<WebPubSubAction> action)\n    {\n        await action.AddAsync(WebPubSubAction.CreateSendToAllAction(\"Hello Web PubSub!\", WebPubSubDataType.Text));\n    }\n}\n```\n\n### Functions that uses Web PubSub trigger\n\n```C# Snippet:WebPubSubTriggerFunction\npublic static class WebPubSubTriggerFunction\n{\n    [FunctionName(\"WebPubSubTriggerFunction\")]\n    public static void Run(\n        ILogger logger,\n        [WebPubSubTrigger(\"hub\", WebPubSubEventType.User, \"message\")] UserEventRequest request,\n        string data,\n        WebPubSubDataType dataType)\n    {\n        logger.LogInformation(\"Request from: {user}, data: {data}, dataType: {dataType}\",\n            request.ConnectionContext.UserId, data, dataType);\n    }\n}\n```\n\n### Functions that uses Web PubSub trigger return value\n\n```C# Snippet:WebPubSubTriggerReturnValueFunction\npublic static class WebPubSubTriggerReturnValueFunction\n{\n    [FunctionName(\"WebPubSubTriggerReturnValueFunction\")]\n    public static UserEventResponse Run(\n        [WebPubSubTrigger(\"hub\", WebPubSubEventType.User, \"message\")] UserEventRequest request)\n    {\n        return request.CreateResponse(BinaryData.FromString(\"ack\"), WebPubSubDataType.Text);\n    }\n}\n```\n\n## Troubleshooting\n\nPlease refer to [Monitor Azure Functions](https://docs.microsoft.com/azure/azure-functions/functions-monitoring) for troubleshooting guidance.\n\n## Next steps\n\nRead the [introduction to Azure Function](https://docs.microsoft.com/azure/azure-functions/functions-overview) or [creating an Azure Function guide](https://docs.microsoft.com/azure/azure-functions/functions-create-first-azure-function).\n\n## Contributing\n\nSee our [CONTRIBUTING.md][contrib] for details on building,\ntesting, and contributing to this library.\n\nThis project welcomes contributions and suggestions.  Most contributions require\nyou to agree to a Contributor License Agreement (CLA) declaring that you have\nthe right to, and actually do, grant us the rights to use your contribution. For\ndetails, visit [cla.microsoft.com][cla].\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc].\nFor more information see the [Code of Conduct FAQ][coc_faq]\nor contact [opencode@microsoft.com][coc_contact] with any\nadditional questions or comments.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2Fsdk%2Fsearch%2FMicrosoft.Azure.WebJobs.Extensions.WebPubSub%2FREADME.png)\n\n<!-- LINKS -->\n[source]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/search/Microsoft.Azure.WebJobs.Extensions.WebPubSub/src\n[package]: https://www.nuget.org/packages/Microsoft.Azure.WebJobs.Extensions.WebPubSub/\n[docs]: https://docs.microsoft.com/dotnet/api/Microsoft.Azure.WebJobs.Extensions.WebPubSub\n[nuget]: https://www.nuget.org/\n\n[contrib]: https://github.com/Azure/azure-sdk-for-net/tree/main/CONTRIBUTING.md\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n",
        "repo_name": "webpubsub/Microsoft.Azure.WebJobs.Extensions.WebPubSub",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/webpubsub/Microsoft.Azure.WebJobs.Extensions.WebPubSub",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Web PubSub service middleware client library for .NET\n\n[Azure Web PubSub Service](https://aka.ms/awps/doc) is a service that enables you to build real-time messaging web applications using WebSockets and the publish-subscribe pattern. Any platform supporting WebSocket APIs can connect to the service easily, e.g. web pages, mobile applications, edge devices, etc. The service manages the WebSocket connections for you and allows up to 100K **concurrent** connections. It provides powerful APIs for you to manage these clients and deliver real-time messages.\n\nAny scenario that requires real-time publish-subscribe messaging between server and clients or among clients, can use Azure Web PubSub service. Traditional real-time features that often require polling from server or submitting HTTP requests, can also use Azure Web PubSub service.\n\nThis library can be used to do the following actions. Details about the terms used here are described in [Key concepts](#key-concepts) section.\n\n- Parse upstream requests under CloudNative CloudEvents\n- Add validation options for upstream request\n- API to add user defined functionality to handle different upstream events\n\n[Source code](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/webpubsub/Microsoft.Azure.WebPubSub.AspNetCore/src) |\n[Package][package_ref] |\n[API reference documentation](https://aka.ms/awps/sdk/csharp) |\n[Product documentation](https://aka.ms/awps/doc) |\n[Samples][sample_ref] |\n\n## Getting started\n\n### Install the package\n\nInstall the client library from [NuGet][package_ref]\n\n```PowerShell\ndotnet add package Microsoft.Azure.WebPubSub.AspNetCore\n```\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n- An existing Azure Web PubSub service instance.\n\n### Authenticate the client\n\nIn order to interact with the service, you'll need to provide the Web PubSub service with a valid credential. To make this possible, you'll need the connection string or a key, which you can access in the Azure portal. Besides, if you want to invoke service REST API, you can call `AddWebPubSubServiceClient<THub>()` where `THub` is user implemented [`WebPubSubHub`](#webpubsubhub) listening to important events.\n\n### Configure Web PubSub service options\n\n```C# Snippet:WebPubSubDependencyInjection\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddWebPubSub(o =>\n    {\n        o.ServiceEndpoint = new(\"<connection-string>\");\n    }).AddWebPubSubServiceClient<SampleHub>();\n}\n```\n\n### Map `WebPubSubHub` to endpoint routing\n\n```C# Snippet:WebPubSubMapHub\npublic void Configure(IApplicationBuilder app)\n{\n    app.UseEndpoints(endpoint =>\n    {\n        endpoint.MapWebPubSubHub<SampleHub>(\"/eventhandler\");\n    });\n}\n```\n\n## Key concepts\n\nFor information about general Web PubSub concepts [Concepts in Azure Web PubSub](https://docs.microsoft.com/azure/azure-web-pubsub/key-concepts)\n\n### `WebPubSubHub`\n\n`WebPubSubHub` is an abstract class to let users implement the subscribed Web PubSub service events. After user register the [event handler](https://docs.microsoft.com/azure/azure-web-pubsub/howto-develop-eventhandler) in service side, these events will be forwarded from service to server. And `WebPubSubHub` provides 4 methods mapping to the service events to enable users deal with these events, for example, client management, validations or working with `Azure.Messaging.WebPubSub` to broadcast the messages. See samples below for details.\n\n> NOTE\n>\n> Among the 4 methods, `OnConnectAsync()` and `OnMessageReceivedAsync()` are blocking events that service will respect server returns. Besides the mapped correct response, server can throw exceptions whenever the request is against the server side logic. And `UnauthorizedAccessException` will be converted to `401Unauthorized` and rest will be converted to `500InternalServerError` along with exception message to return service. Then service will drop current client connection.\n\n## Examples\n\n### Handle upstream `Connect` event\n\n```C# Snippet:WebPubSubHubMethods\nprivate sealed class SampleHub : WebPubSubHub\n{\n    internal WebPubSubServiceClient<SampleHub> _serviceClient;\n\n    // Need to ensure service client is injected by call `AddServiceHub<SampleHub>` in ConfigureServices.\n    public SampleHub(WebPubSubServiceClient<SampleHub> serviceClient)\n    {\n        _serviceClient = serviceClient;\n    }\n\n    public override ValueTask<ConnectEventResponse> OnConnectAsync(ConnectEventRequest request, CancellationToken cancellationToken)\n    {\n        var response = new ConnectEventResponse\n        {\n            UserId = request.ConnectionContext.UserId\n        };\n        return new ValueTask<ConnectEventResponse>(response);\n    }\n}\n```\n\n## Troubleshooting\n\n### Setting up console logging\n\nYou can also easily [enable console logging](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md#logging) if you want to dig deeper into the requests you're making against the service.\n\n## Next steps\n\nPlease take a look at the [Samples][sample_ref] directory for detailed examples on how to use this library.\n\n## Contributing\n\nThis project welcomes contributions and suggestions.\nMost contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution.\nFor details, visit <https://cla.microsoft.com.>\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment).\nSimply follow the instructions provided by the bot.\nYou will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2Fsdk%2Ftemplate%2FAzure.Template%2FREADME.png)\n\n[azure_sub]: https://azure.microsoft.com/free/dotnet/\n[sample_ref]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/webpubsub/Microsoft.Azure.WebPubSub.AspNetCore/tests/Samples/\n[package_ref]: https://www.nuget.org/packages/Microsoft.Azure.WebPubSub.AspNetCore/",
        "repo_name": "webpubsub/Microsoft.Azure.WebPubSub.AspNetCore",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/webpubsub/Microsoft.Azure.WebPubSub.AspNetCore",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Azure Web PubSub Event Handler events data model client library for .NET\n\nThis library defines the class to process with Azure Web PubSub service upstream requests.\n\n## Getting started\n\n### Install the package\n\nInstall the client library from [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Microsoft.Azure.WebPubSub.Common\n```\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n- An existing Azure Web PubSub service instance.\n\n### Authenticate the client\n\nNot applicable for the library. You should work with a client library to deserialize service requests in a friendly way.\n\n## Key concepts\n\n### Events\n\nConnect, Connected, Disconnected are system events indicate connection stage. And Connect is a blocking event that service will wait for the response to determine next action. Any error returned will drop the connection.\n\nUser events are message event. It's also a blocking event which service is waiting for response. And server can return information in the response which will be sent to the caller directly.\n\n### WebPubSubEventRequest\n\nWebPubSubEventRequest, represents a abstract request come from service side. In detail, it should be ValidationRequest or one of the 4 events, which are ConnectEventRequest, ConnectedEventRequest, UserEventRequest and DisconnectedEventRequest. ValidationRequest represent the request for [Abuse Protection](https://github.com/cloudevents/spec/blob/v1.0.1/http-webhook.md#4-abuse-protection).\n\n### WebPubSubEventResponse\n\nWebPubSubEventResponse, represents a abstract response should return to service. In detail, it should be EventErrorResponse or one of the 2 blocking events, which are ConnectEventResponse and UserEventResponse.\n\n## Examples\n\nCheck Microsoft.Azure.WebPubSub.AspNetCore for E2E using examples.\n\n## Troubleshooting\n\nYou can also easily [enable console logging](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md#logging) if you want to dig deeper into the requests you're making against the service.\n\n## Next steps\n\nPlease take a look at the\n[samples][samples_ref]\ndirectory for detailed examples on how to use this library.\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct]. For more information see the [Code of Conduct FAQ][code_of_conduct_faq] or contact opencode@microsoft.com with any additional questions or comments.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2Fsdk%2Feventgrid%2FMicrosoft.Azure.Messaging.EventGrid.CloudNativeCloudEvents%2FREADME.png)\n\n[azure_sub]: https://azure.microsoft.com/free/dotnet/\n[samples_ref]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/webpubsub/Azure.Messaging.WebPubSub/tests/Samples/",
        "repo_name": "webpubsub/Microsoft.Azure.WebPubSub.Common",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/webpubsub/Microsoft.Azure.WebPubSub.Common",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure App Service management client library for .NET\n\nMicrosoft Azure App Service enables you to build and host web apps, mobile back ends, and RESTful APIs in the programming language of your choice without managing infrastructure. It offers auto-scaling and high availability, supports both Microsoft Windows and Linux, and enables automated deployments from GitHub, Microsoft Azure DevOps, or any Git repo. \n\nThis library supports managing Microsoft Azure App Service resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure App Service management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.AppService\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "websites/Azure.ResourceManager.AppService",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/websites/Azure.ResourceManager.AppService",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Workload Monitor management client library for .NET\n\nThis library supports managing Microsoft Azure Workload Monitor resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Workload Monitor management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.WorkloadMonitor --prerelease\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "workloadmonitor/Azure.ResourceManager.WorkloadMonitor",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/workloadmonitor/Azure.ResourceManager.WorkloadMonitor",
        "language": [
            ".NET"
        ]
    },
    {
        "README_text": "# Microsoft Azure Workloads management client library for .NET\n\nMicrosoft Azure Workloads is an offering designed to help customers design and implement specific VM-based workloads in Microsoft Azure.\n\nThis library supports managing Microsoft Azure Workloads resources.\n\nThis library follows the [new Azure SDK guidelines](https://azure.github.io/azure-sdk/general_introduction.html), and provides many core capabilities:\n\n    - Support MSAL.NET, Azure.Identity is out of box for supporting MSAL.NET.\n    - Support [OpenTelemetry](https://opentelemetry.io/) for distributed tracing.\n    - HTTP pipeline with custom policies.\n    - Better error-handling.\n    - Support uniform telemetry across all languages.\n\n## Getting started \n\n### Install the package\n\nInstall the Microsoft Azure Workloads management library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.ResourceManager.Workloads\n```\n\n### Prerequisites\n\n* You must have an [Microsoft Azure subscription](https://azure.microsoft.com/free/dotnet/).\n\n### Authenticate the Client\n\nTo create an authenticated client and start interacting with Microsoft Azure resources, see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n\n## Key concepts\n\nKey concepts of the Microsoft Azure SDK for .NET can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html).\n\n## Documentation\n\nDocumentation is available to help you learn how to use this package:\n\n- [Quickstart](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/mgmt_quickstart.md).\n- [API References](https://docs.microsoft.com/dotnet/api/?view=azure-dotnet).\n- [Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/README.md).\n\n## Examples\n\nCode samples for using the management library for .NET can be found in the following locations\n- [.NET Management Library Code Samples](https://aka.ms/azuresdk-net-mgmt-samples)\n\n## Troubleshooting\n\n-   File an issue via [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues).\n-   Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on Stack Overflow using Azure and .NET tags.\n\n## Next steps\n\nFor more information about Microsoft Azure SDK, see [this website](https://azure.github.io/azure-sdk/).\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(for example, label, comment). Follow the instructions provided by the\nbot. You'll only need to do this action once across all repositories\nusing our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information, see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any other questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/",
        "repo_name": "workloads/Azure.ResourceManager.Workloads",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/workloads/Azure.ResourceManager.Workloads",
        "language": [
            ".NET"
        ]
    }
]