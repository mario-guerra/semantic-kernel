[{"README_text": "FARMBEATS_ENDPOINT = \"https://<your-farmbeats-resource-name>.farmbeats.azure.net\"\nAZURE_TENANT_ID = \"<your-tenant-id>\"\nAZURE_CLIENT_ID = \"<your-client-id>\"\nAZURE_CLIENT_SECRET = \"<your-client-secret>\"", "repo_name": "agrifood/azure-agrifood-farming/samples/.env", "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/agrifood/azure-agrifood-farming/samples/.env", "language": ["Python"]}, {"README_text": "---\npage_type: sample\nlanguages:\n  - python\nproducts:\n  - azure\n  - azure-cognitive-services\n  - azure-anomaly-detector\nurlFragment: anomalydetector-samples\n---\n\n# Samples for Azure Anomaly Detector client library for Python\n\nThese code samples show common scenario operations with the Anomaly Detector client library.\n\nThese sample programs show common scenarios for the Anomaly Detector client's offerings.\n\n|**File Name**|**Description**|\n|----------------|-------------|\n|[sample_detect_entire_series_anomaly.py][sample_detect_entire_series_anomaly] |Detecting anomalies in the entire time series.|\n|[sample_detect_last_point_anomaly.py][sample_detect_last_point_anomaly] |Detecting the anomaly status of the latest data point.|\n|[sample_detect_change_point.py][sample_detect_change_point] |Detecting change points in the entire time series.|\n|[sample_multivariate_detect.py][sample_multivariate_detect] |Detecting anomalies in the multivariate time series.|\n\n## Prerequisites\n* Python 2.7 or 3.5 or higher is required to use this package.\n* The Pandas data analysis library.\n* You must have an [Azure subscription][azure_subscription] and an\n[Azure Anomaly Detector account][azure_anomaly_detector_account] to run these samples.\n\n## Setup\n\n1. Install the Azure Anomaly Detector client library for Python with [pip][pip]:\n\n```bash\npip install azure-ai-anomalydetector\n```\n\n2. Clone or download this sample repository\n3. Open the sample folder in Visual Studio Code or your IDE of choice.\n\n## Running the samples\n\n1. Open a terminal window and `cd` to the directory that the samples are saved in.\n2. Set the environment variables specified in the sample file you wish to run.\n3. Follow the usage described in the file, e.g. `python sample_detect_entire_series_anomaly.py`\n\n## Next steps\n\nCheck out the [API reference documentation][python-fr-ref-docs] to learn more about\nwhat you can do with the Azure Anomaly Detector client library.\n\n[pip]: https://pypi.org/project/pip/\n[azure_subscription]: https://azure.microsoft.com/free/cognitive-services\n[azure_anomaly_detector_account]: https://ms.portal.azure.com/#create/Microsoft.CognitiveServicesAnomalyDetector\n[python-fr-ref-docs]: https://azuresdkdocs.blob.core.windows.net/$web/python/azure-cognitiveservices-anomalydetector/0.3.0/index.html\n\n[sample_detect_entire_series_anomaly]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/anomalydetector/azure-ai-anomalydetector/samples/sample_detect_entire_series_anomaly.py\n[sample_detect_last_point_anomaly]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/anomalydetector/azure-ai-anomalydetector/samples/sample_detect_last_point_anomaly.py\n[sample_detect_change_point]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/anomalydetector/azure-ai-anomalydetector/samples/sample_detect_change_point.py\n[sample_multivariate_detect]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/anomalydetector/azure-ai-anomalydetector/samples/sample_multivariate_detect.py", "repo_name": "anomalydetector/azure-ai-anomalydetector/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/anomalydetector/azure-ai-anomalydetector/samples", "language": ["Python"]}, {"README_text": "---\npage_type: sample\nlanguages:\n  - python\nproducts:\n  - azure\n  - azure-app-configuration\n---\n\n# Azure App Configuration Provider Library Python Samples\n\n## Prerequisites\n\nYou must have an [Azure subscription][azure_sub], and a [Configuration Store][configuration_store] to use this package.\n\nTo create a Configuration Store, you can either use [Azure Portal](https://ms.portal.azure.com/#create/Microsoft.Azconfig) or if you are using [Azure CLI][azure_cli] you can simply run the following snippet in your console:\n\n```Powershell\naz appconfig create --name <config-store-name> --resource-group <resource-group-name> --location eastus\n```\n\n### Create Keys\n\n```Powershell\naz appconfig kv set --name <config-store-name> --key message --value \"hi\"\naz appconfig kv set --name <config-store-name> --key test.message --value \"Hi with test Prefix\"\n```\n\n### Create Key Vault Reference\n\nRequires Key Vault with Secret already created.\n\n```Powershell\naz appconfig kv set-keyvault --name <config-store-name> --key secret --secret-identifier <key-vault-reference>\n```\n\n## Setup\n\nInstall the Azure App Configuration Provider client library for Python with pip:\n\n```commandline\npip install azure.appconfiguration.provider\n```\n\n## Contents\n\n| File | Description |\n|-------------|-------------|\n| aad_sample.py | demos connecting to app configuration with Azure Active Directory |\n| connection_string_sample.py | demos connecting to app configuration with a Connection String |\n| key_vault_reference_sample.py | demos resolving key vault references with App Configuration |\n\n## Next steps\n\nCheck out our Django and Flask examples to see how to use the provider in a web application.\n\n### [Django](https://github.com/Azure/AppConfiguration/tree/main/examples/Python/python-django-webapp-sample)\n\n### [Flask](https://github.com/Azure/AppConfiguration/tree/main/examples/Python/python-flask-webapp-sample)\n\n<!-- LINKS -->\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[configuration_store]: https://azure.microsoft.com/services/app-configuration/\n", "repo_name": "appconfiguration/azure-appconfiguration-provider/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration-provider/samples", "language": ["Python"]}, {"README_text": "---\npage_type: sample\nlanguages:\n  - python\nproducts:\n  - azure\n  - azure-app-configuration\n---\n\n# Azure App Configuration Data Library Python Samples\n\n## Prerequisites\n\n* Python 3.7 or later is required to use this package.\n* You must have an [Azure subscription][azure_sub], and a [Configuration Store][configuration_store] to use this package.\n\nTo create a Configuration Store, you can either use [Azure Portal](https://ms.portal.azure.com/#create/Microsoft.Azconfig) or if you are using [Azure CLI][azure_cli] you can simply run the following snippet in your console:\n\n```Powershell\naz appconfig create --name <config-store-name> --resource-group <resource-group-name> --location eastus\n```\n\n## Setup\n\nInstall the Azure App Configuration client library for Python with pip:\n\n```commandline\npip install azure-appconfiguration\n```\n\n## Contents\n\n| File | Description |\n|-------------|-------------|\n| hello_world_sample.py / hello_world_sample_async.py       | demos set/get/delete operations |\n| hello_world_advanced_sample.py / hello_world_advanced_sample_async.py | demos add/set with label/list operations |\n| conditional_operation_sample.py / conditional_operation_sample_async.py | demos conditional set/get/delete operations |\n| read_only_sample.py / read_only_sample_async.py | demos set_read_only operations |\n| list_revision_sample.py / list_revision_sample_async.py | demos list revision operations |\n| sync_token_samples.py / sync_token_sample_asyncs.py | demos the `update_sync_token` method |\n\n<!-- LINKS -->\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[configuration_store]: https://azure.microsoft.com/services/app-configuration/\n", "repo_name": "appconfiguration/azure-appconfiguration/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration/samples", "language": ["Python"]}, {"README_text": "---\npage_type: sample\nlanguages:\n    - python\nproducts:\n    - azure\n    - azure-security-attestation\nurlFragment: attestation-samples\n---\n\n# Samples for the Microsoft Azure Attestation client library for Python\n\nThese code samples show common scenario operations with the Azure Attestation client library.\n\nThe Async versions of the samples require Python 3.6 or later.\n\nYou can authenticate your client with a [TokenCredential](https://docs.microsoft.com/python/api/azure-identity/azure.identity.defaultazurecredential?view=azure-python).\n\nSee [sample_authentication.py][sample_authentication] and [sample_authentication_async.py][sample_authentication_async]\n\n## Service operational modes\n\nAs was mentioned in the [README.md file][readme_md], the attestation service\noperates in three different modes:\n\n* Shared\n* AAD\n* Isolated\n\nThe core difference between the three modes of operation is the operations which\nare permitted on each, and whether or not the customer needs to create an\ninstance of the provider.\n\nService Mode | Instance Creation  | Attestation | Policy Get | Policy Set | Signed Policies| Policy Management Certificate\n------ | --- | ---- | ----  | --- | --- | ---\nShared | No | Yes | Yes (default always)| No | No | No\nAAD | Yes | Yes | Yes | Yes | Optional | No\nIsolated | Yes| Yes | Yes | Yes | Yes | Yes\n\n### Shared Mode\n\nEach region in which the MAA service operates has a \"shared\" attestation instance\nwhich allows customers to perform basic attestation operations on their enclaves\nwithout having to set up an attestation instance.\nThat instance is limited in what actions it can perform: The shared instance has\na \"default\" attestation policy which simply attests the correctness of the SGX\nattestation collateral. It cannot be used for attestation types like `TPM` which\nrequire that the customer provide an attestation policy. However, for customers\nwho simply need to perform attestation operations on an SGX enclave, they can use the shared instance without creating their own instance.\n\nExamples of shared instances are:\n\n* sharedeus2.eus2.attest.azure.net\n* sharedcae.cae.attest.azure.net\n* shareduks.uks.attest.azure.net\n\n### AAD Mode\n\nAAD mode instances are intended for customers who trust ARM RBAC for authorization\ndecisions related to policy management. Attestation policies are allowed to be\neither be signed or unsigned.\n\n### Isolated Mode\n\nIsolated mode instances are intended for customers who desire an additional level\nof authorization beyond that which is allowed by ARM RBAC authorization. When a\ncustomer creates an isolated attestation instance, they also need to create an\nRSA asymmetric key pair and an X.509 certificate which contains that asymmetric\nkey (the certificate can be self signed, or it can be issued by a certificate\nauthority). Attestation policies MUST be signed with one of the private keys\nassociated with the instance (either at instance creation or added with the [add_policy_management_certificate][add_policy_management_cert] API.\n\n## Sample Requirements\n\nThese samples are written with the assumption that the following environment\nvariables have been set by the user:\n\n* ATTESTATION_AAD_URL - the base URL for an attestation service instance in AAD mode.\n* ATTESTATION_ISOLATED_URL - the base URL for an attestation service instance in Isolated mode.\n* ATTESTATION_LOCATION_SHORT_NAME - the short name for the region in which the\n    sample should be run - used to interact with the shared endpoint for that\n    region.\n* ATTESTATION_ISOLATED_SIGNING_CERTIFICATE - The DER encoded form of the signing\n    certificate used to create an isolated attestation instance, Base64 encoded.\n* ATTESTATION_ISOLATED_SIGNING_KEY - The DER encoded of an RSA Private key,\n    Base64 encoded, which was used to create an isolated attestation service instance.\n\nThe tests also assume that the currently logged on user is authorized to call\ninto the attestation service instance because they use [DefaultAzureCredential](https://docs.microsoft.com/python/api/azure-identity/azure.identity.defaultazurecredential?view=azure-python) for authorization.\n\n## Samples descriptions\n\n**File Name** | **Description**\n|-----|-------|\n| [sample_authentication](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/attestation/azure-security-attestation/samples/sample_authentication.py) and [sample_authentication_async](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/attestation/azure-security-attestation/samples/sample_authentication_async.py) | Authenticate a connection with the attestation service (also retrieves the OpenID metadata configuration for the service instance).|\n| [sample_attest_enclave](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/attestation/azure-security-attestation/samples/sample_attest_enclave.py) and [sample_attest_enclave_async](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/attestation/azure-security-attestation/samples/sample_attest_enclave_async.py) | Attest an SGX and OpenEnclave enclave with the attestation service. Also shows how to use the TokenValidationOptions to perform additional validation of the returned attestation token and validation keys.|\n|[sample_get_set_policy](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/attestation/azure-security-attestation/samples/sample_get_set_policy.py) and [sample_get_set_policy_async](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/attestation/azure-security-attestation/samples) | Policy manipulation operations - Get, Set, Reset on different attestation types.|\n\n### Prerequisites\n\n* Python 2.7, or 3.6 or later is required to use this package.\n* You must have an [Azure subscription](https://azure.microsoft.com/free/) and either an\n[Azure storage account](https://docs.microsoft.com/azure/storage/common/storage-account-overview) or an [Azure Cosmos Account](https://docs.microsoft.com/azure/cosmos-db/account-overview) to use this package.\n\n## Setup\n\n1. Install the Azure Attestation client library for Python with [pip](https://pypi.org/project/pip/):\n\n```bash\npip install --pre azure-security-attestation\n```\n\n1. Clone or download this sample repository\n1. Open the sample folder in Visual Studio Code or your IDE of choice.\n\n## Running the samples\n\n1. Open a terminal window and `cd` to the directory that the samples are saved in.\n1. Set the environment variables specified in the sample file you wish to run.\n1. Follow the usage described in the file, e.g. `python sample_attest_enclave.py`\n\n## Additional Information\n\n### Attestation Policy\n\nAn attestation policy is a document which defines authorization and claim generation\nrules for attestation operations.\n\nThe following is an example of an attestation policy document for an SGX enclave:\n\n```text\nversion= 1.0;\nauthorizationrules\n{\n    [ type==\"x-ms-sgx-is-debuggable\", value==false ] &&\n    [ type==\"x-ms-sgx-product-id\", value==<product-id> ] &&\n    [ type==\"x-ms-sgx-svn\", value>= 0 ] &&\n    [ type==\"x-ms-sgx-mrsigner\", value==\"<mrsigner>\"]\n        => permit();\n};\nissuancerules {\n    c:[type==\"x-ms-sgx-mrsigner\"] => issue(type=\"<custom-name>\", value=c.value);\n};\n```\n\nThere are two sections to the document: `authorizationrules` and `issuancerules`.\n`authorizationrules` are rules which control whether or not an attestation token\nshould be issued. `issuancerules` are rules which cause claims to be issued in an\nattestation token.\n\nIn the example, the attestation service will issue an attestation token if an only if\nthe SGX enclave is configured as follows:\n\n* Not-Debuggable\n* Enclave product ID: `<product-id>`.\n* Enclave SVN: `<svn value>` greater or equal to zero.\n* Enclave signer: matches `<mrsigner>`.\n\nAssuming a token is issued, this policy will cause a claim named `<custom-name>`\nto be issued with a value which matches the `x-ms-sgx-mrsigner` claim.\n\nFor more information on authoring attestation policy documents, see: [Authoring an attestation policy](https://docs.microsoft.com/azure/attestation/author-sign-policy)\n\n## Next Steps\n\nFor more information about the Microsoft Azure Attestation service, please see our [documentation page](https://docs.microsoft.com/azure/attestation/) .\n\n<!-- LINKS -->\n<!-- links are known to be broken, they will be fixed after this initial pull\n    request completes. -->\n[readme_md]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/attestation/azure-security-attestation/README.md\n[sample_authentication]:https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/attestation/azure-security-attestation/samples/sample_authentication.py\n[sample_authentication_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/attestation/azure-security-attestation/samples/sample_authentication_async.py\n[add_policy_management_cert]: https://docs.microsoft.com/python/api/azure-security-attestation/azure.security.attestation.attestationadministrationclient?view=azure-python-preview#add-policy-management-certificate-certificate-to-add--signing-key----kwargs-\n", "repo_name": "attestation/azure-security-attestation/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/attestation/azure-security-attestation/samples", "language": ["Python"]}, {"README_text": "---\npage_type: sample\nlanguages:\n  - python\nproducts:\n  - azure\n  - azure-cognitive-services\n  - language-service\nurlFragment: conversationslanguageunderstanding-samples\n---\n\n# Samples for Azure Conversational Language Understanding client library for Python\n\nThese code samples show common scenario operations with the Azure Conversational Language Understanding client library.\n\nYou can authenticate your client with a Conversational Language Understanding API key:\n\n- See [sample_authentication.py][sample_authentication] and [sample_authentication_async.py][sample_authentication_async] for how to authenticate in the above cases.\n\nThese sample programs show common scenarios for the Conversational Language Understanding client's offerings.\n\n| **File Name**| **Description**|\n|-|-|\n|[sample_analyze_conversation_app.py][sample_analyze_conversation_app] and [sample_analyze_conversation_app_async.py][sample_analyze_conversation_app_async] | Analyze intents and entities in your utterance using a conversation project. |\n| [sample_analyze_orchestration_app_conv_response.py][sample_analyze_orchestration_app_conv_response] and [sample_analyze_orchestration_app_conv_response_async.py][sample_analyze_orchestration_app_conv_response_async]| Analyze user utterance using an orchestration project, which selects the best candidate from one of your different apps to analyze user query (ex: Qna, Conversation, and Luis). In this case, it uses a conversation project. |\n| [sample_analyze_orchestration_app_luis_response.py][sample_analyze_orchestration_app_luis_response] and [sample_analyze_orchestration_app_luis_response_async.py][sample_analyze_orchestration_app_luis_response_async]| Analyze user utterance using an orchestration project, which selects the best candidate from one of your different apps to analyze user query (ex: Qna, Conversation, and Luis). In this case, it uses a Luis project. |\n| [sample_analyze_orchestration_app_qna_response.py][sample_analyze_orchestration_app_qna_response] and [sample_analyze_orchestration_app_qna_response_async.py][sample_analyze_orchestration_app_qna_response_async]| Analyze user utterance using an orchestration project, which selects the best candidate from one of your different apps to analyze user query (ex: Qna, Conversation, and Luis). In this case, it uses a Qna project. |\n| [sample_conv_summarization.py][sample_conv_summarization] and [sample_conv_summarization_async.py][sample_conv_summarization_async]| Summarize conversation in the form of issues and resolutions (ex: tech support conversation) |\n| [sample_manage_projects.py][sample_manage_projects] and [sample_manage_projects_async.py][sample_manage_projects_async]| Shows common authoring operations on projects. |\n\n## Prerequisites\n\n- Python 3.7 or later is required to use this package.\n- You must have an [Azure subscription][azure_subscription] and an\n  [Azure CLU account][azure_clu_account] to run these samples.\n\n## Setup\n\n1. Install the Azure Conversational Language Understanding client library for Python with [pip][pip]:\n\n```bash\npip install azure-ai-language-conversations\n```\n\nFor more information about how the versioning of the SDK corresponds to the versioning of the service's API, see [here][versioning_story_readme].\n\n2. Clone or download this sample repository\n3. Open the sample folder in Visual Studio Code or your IDE of choice.\n\n## Running the samples\n\n1. Open a terminal window and `cd` to the directory that the samples are saved in.\n2. Set the environment variables specified in the sample file you wish to run.\n3. Follow the usage described in the file, e.g. `python sample_analyze_conversation_app.py`\n\n\n\n## Next Steps\n\nCheck out the [API reference documentation][api_reference_documentation] to learn more about\nwhat you can do with the Azure Conversational Language Understanding client library.\n\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_clu_account]: https://language.azure.com/clu/projects\n[pip]: https://pypi.org/project/pip/\n\n[sample_authentication]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/cognitivelanguage/azure-ai-language-conversations/samples/sample_authentication.py\n[sample_authentication_async]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/cognitivelanguage/azure-ai-language-conversations/samples/async/sample_authentication_async.py\n\n[sample_analyze_conversation_app]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/cognitivelanguage/azure-ai-language-conversations/samples/sample_analyze_conversation_app.py\n[sample_analyze_conversation_app_async]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/cognitivelanguage/azure-ai-language-conversations/samples/async/sample_analyze_conversation_app_async.py\n\n[sample_analyze_orchestration_app_conv_response]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/cognitivelanguage/azure-ai-language-conversations/samples/sample_analyze_orchestration_app_conv_response.py\n[sample_analyze_orchestration_app_conv_response_async]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/cognitivelanguage/azure-ai-language-conversations/samples/async/sample_analyze_orchestration_app_conv_response_async.py\n\n[sample_analyze_orchestration_app_luis_response]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/cognitivelanguage/azure-ai-language-conversations/samples/sample_analyze_orchestration_app_luis_response.py\n[sample_analyze_orchestration_app_luis_response_async]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/cognitivelanguage/azure-ai-language-conversations/samples/async/sample_analyze_orchestration_app_luis_response_async.py\n\n[sample_analyze_orchestration_app_qna_response]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/cognitivelanguage/azure-ai-language-conversations/samples/sample_analyze_orchestration_app_qna_response.py\n[sample_analyze_orchestration_app_qna_response_async]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/cognitivelanguage/azure-ai-language-conversations/samples/async/sample_analyze_orchestration_app_qna_response_async.py\n\n[sample_conv_summarization]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/cognitivelanguage/azure-ai-language-conversations/samples/sample_conv_summarization.py\n[sample_conv_summarization_async]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/cognitivelanguage/azure-ai-language-conversations/samples/async/sample_conv_summarization_async.py\n\n[sample_manage_projects]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/cognitivelanguage/azure-ai-language-conversations/samples/authoring/sample_manage_projects.py\n[sample_manage_projects_async]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/cognitivelanguage/azure-ai-language-conversations/samples/async/authoring/sample_manage_projects_async.py\n\n[api_reference_documentation]: https://azuresdkdocs.blob.core.windows.net/$web/python/azure-ai-language-conversations/latest/azure.ai.language.conversations.html\n[versioning_story_readme]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/cognitivelanguage/azure-ai-language-conversations#install-the-package\n", "repo_name": "cognitivelanguage/azure-ai-language-conversations/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/cognitivelanguage/azure-ai-language-conversations/samples", "language": ["Python"]}, {"README_text": "---\npage_type: sample\nlanguages:\n  - python\nproducts:\n- azure\n- azure-cognitive-services\n- language-service\nurlFragment: languagequestionanswering-samples\n---\n\n# Samples for Language QuestionAnswering client library for Python\n\nQuestion Answering is a cloud-based API service that lets you create a conversational question-and-answer layer over your existing data. Use it to build a knowledge base by extracting questions and answers from your semi-structured content, including FAQ, manuals, and documents. Answer users' questions with the best answers from the QnAs in your knowledge base\u2014automatically. Your knowledge base gets smarter, too, as it continually learns from user behavior.\n\nThese code samples show common scenario operations with the Azure Language QuestionAnswering client library.\nYou can authenticate your client with a QuestionAnswering API key.\n\nThese sample programs show common scenarios for the QuestionAnswering client's offerings.\n\n|**File Name**|**Description**|\n|-------------|---------------|\n|[sample_query_knowledgebase.py][query_knowledgebase] and [sample_query_knowledgebase_async.py][query_knowledgebase_async]|Ask a question from a knowledge base|\n|[sample_chat.py][chat] and [sample_chat_async.py][chat_async]|Ask a follow-up question (chit-chat)|\n|[sample_query_text.py][query_text] and [sample_query_text_async.py][query_text_async]|Ask a question from provided text data|\n|[sample_create_and_deploy_project.py][create_and_deploy] and [sample_create_and_deploy_project_async.py][create_and_deploy_async]|sample for creating and deploying a Qna project|\n|[sample_export_import_project.py][export_import] and [sample_export_import_project_async.py][export_import_async]|sample for exporting and importing a project|\n|[sample_update_knowledge_sources.py][add_knowledge_sources] and [sample_update_knowledge_sources_async.py][add_knowledge_sources_async]|sample for adding knowledge sources|\n\n\n\n### Prerequisites\n\n* Python 3.7 or later is required to use this package.\n* An [Azure subscription][azure_subscription]\n* A [Language Service][language_service] resource\n\n\n## Setup\n\n1. Install the Azure QuestionAnswering client library for Python with [pip][pip]:\n```bash\npip install azure-ai-language-questionanswering\n```\n2. Clone or download this sample repository\n3. Open the sample folder in Visual Studio Code or your IDE of choice.\n\n## Running the samples\n\n1. Open a terminal window and `cd` to the directory that the samples are saved in.\n2. Set the environment variables specified in the sample file you wish to run.\n3. Follow the usage described in the file, e.g. `python sample_chat.py`\n\n\n[query_knowledgebase]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/cognitivelanguage/azure-ai-language-questionanswering/samples/sample_query_knowledgebase.py\n[query_knowledgebase_async]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/cognitivelanguage/azure-ai-language-questionanswering/samples/async_samples/sample_query_knowledgebase_async.py\n[chat]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/cognitivelanguage/azure-ai-language-questionanswering/samples/sample_chat.py\n[chat_async]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/cognitivelanguage/azure-ai-language-questionanswering/samples/async_samples/sample_chat_async.py\n[query_text]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/cognitivelanguage/azure-ai-language-questionanswering/samples/sample_query_text.py\n[query_text_async]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/cognitivelanguage/azure-ai-language-questionanswering/samples/async_samples/sample_query_text_async.py\n\n[create_and_deploy]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/cognitivelanguage/azure-ai-language-questionanswering/samples/authoring/sample_create_and_deploy_project.py\n[create_and_deploy_async]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/cognitivelanguage/azure-ai-language-questionanswering/samples/authoring/async_samples/sample_create_and_deploy_project_async.py\n[export_import]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/cognitivelanguage/azure-ai-language-questionanswering/samples/authoring/sample_export_import_project.py\n[export_import_async]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/cognitivelanguage/azure-ai-language-questionanswering/samples/authoring/async_samples/sample_export_import_project_async.py\n[add_knowledge_sources]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/cognitivelanguage/azure-ai-language-questionanswering/samples/authoring/sample_update_knowledge_sources.py\n[add_knowledge_sources_async]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/cognitivelanguage/azure-ai-language-questionanswering/samples/authoring/async_samples/sample_update_knowledge_sources_async.py\n\n[language_service]: https://ms.portal.azure.com/#create/Microsoft.CognitiveServicesTextAnalytics\n[pip]: https://pypi.org/project/pip/\n[azure_subscription]: https://azure.microsoft.com/free/\n", "repo_name": "cognitivelanguage/azure-ai-language-questionanswering/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/cognitivelanguage/azure-ai-language-questionanswering/samples", "language": ["Python"]}, {"README_text": "# -------------------------------------------------------------------------\n# Copyright (c) Microsoft Corporation. All rights reserved.\n# Licensed under the MIT License. See License.txt in the project root for\n# license information.\n# --------------------------------------------------------------------------\nimport os\nimport sys\nfrom azure.communication.callautomation import (\n    CallAutomationClient,\n    CallInvite,\n    CommunicationUserIdentifier\n)\n\nsys.path.append(\"..\")\n\nclass CallAutomationCreateCallSample(object):\n\n    connection_string = os.getenv(\"COMMUNICATION_CONNECTION_STRING\")\n\n    def create_call_to_single(self):\n        callautomation_client = CallAutomationClient.from_connection_string(self.connection_string)\n\n        # Creating a call\n        user = CommunicationUserIdentifier(\"8:acs:123\")\n        call_invite = CallInvite(target=user)\n        callback_uri = \"https://contoso.com/event\"\n\n        call_connection_properties = callautomation_client.create_call(call_invite, callback_uri)\n\n        # callconnection id of the call\n        print(call_connection_properties.call_connection_id)\n\nif __name__ == '__main__':\n    sample = CallAutomationCreateCallSample()\n    sample.create_call_to_single()", "repo_name": "communication/azure-communication-callautomation/samples/create_call_sample.py", "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-callautomation/samples/create_call_sample.py", "language": ["Python"]}, {"README_text": "\n# -------------------------------------------------------------------------\n# Copyright (c) Microsoft Corporation. All rights reserved.\n# Licensed under the MIT License. See License.txt in the project root for\n# license information.\n# --------------------------------------------------------------------------\n\n\"\"\"\nFILE: chat_client_sample.py\nDESCRIPTION:\n    These samples demonstrate create a chat client, get a chat thread client,\n    create a chat thread, get a chat thread by id, list chat threads, delete\n    a chat thread by id.\n    You need to use azure.communication.configuration module to get user access\n    token and user identity before run this sample\n\nUSAGE:\n    python chat_client_sample.py\n    Set the environment variables with your own values before running the sample:\n    1) AZURE_COMMUNICATION_SERVICE_ENDPOINT - Communication Service endpoint url\n    2) TOKEN - the user access token, from token_response.token\n    3) USER_ID - the user id, from token_response.identity\n\"\"\"\n\n\nimport os\n\n\nclass ChatClientSamples(object):\n    from azure.communication.identity import CommunicationIdentityClient\n    connection_string = os.environ.get(\"COMMUNICATION_SAMPLES_CONNECTION_STRING\", None)\n    if not connection_string:\n        raise ValueError(\"Set COMMUNICATION_SAMPLES_CONNECTION_STRING env before run this sample.\")\n\n    identity_client = CommunicationIdentityClient.from_connection_string(connection_string)\n    user = identity_client.create_user()\n    tokenresponse = identity_client.get_token(user, scopes=[\"chat\"])\n    token = tokenresponse.token\n\n    endpoint = os.environ.get(\"AZURE_COMMUNICATION_SERVICE_ENDPOINT\", None)\n    if not endpoint:\n        raise ValueError(\"Set AZURE_COMMUNICATION_SERVICE_ENDPOINT env before run this sample.\")\n\n    _thread_id = None\n\n    def create_chat_client(self):\n        token = self.token\n        endpoint = self.endpoint\n        # [START create_chat_client]\n        from azure.communication.chat import ChatClient, CommunicationTokenCredential\n\n        # set `endpoint` to an existing ACS endpoint\n        chat_client = ChatClient(endpoint, CommunicationTokenCredential(token))\n        # [END create_chat_client]\n\n    def create_thread(self):\n        token = self.token\n        endpoint = self.endpoint\n        user = self.user\n        # [START create_thread]\n        from datetime import datetime\n\n        from azure.communication.chat import(\n            ChatClient,\n            ChatParticipant,\n            CommunicationUserIdentifier,\n            CommunicationTokenCredential\n        )\n\n        # set `endpoint` to an existing ACS endpoint\n        chat_client = ChatClient(endpoint, CommunicationTokenCredential(token))\n\n        topic = \"test topic\"\n        participants = [ChatParticipant(\n            identifier=user,\n            display_name='name',\n            share_history_time=datetime.utcnow()\n        )]\n\n        # creates a new chat_thread everytime\n        create_chat_thread_result = chat_client.create_chat_thread(topic, thread_participants=participants)\n\n        # creates a new chat_thread if not exists\n        idempotency_token = 'b66d6031-fdcc-41df-8306-e524c9f226b8' # unique identifier\n        create_chat_thread_result_w_repeatability_id = chat_client.create_chat_thread(\n            topic,\n            thread_participants=participants,\n            idempotency_token=idempotency_token\n        )\n        # [END create_thread]\n\n        self._thread_id = create_chat_thread_result.chat_thread.id\n        print(\"thread created, id: \" + self._thread_id)\n\n    def get_chat_thread_client(self):\n        token = self.token\n        endpoint = self.endpoint\n        thread_id = self._thread_id\n\n        # [START get_chat_thread_client]\n        from azure.communication.chat import ChatClient, CommunicationTokenCredential\n\n        # set `endpoint` to an existing ACS endpoint\n        chat_client = ChatClient(endpoint, CommunicationTokenCredential(token))\n\n        # set `thread_id` to an existing chat thread id\n        chat_thread_client = chat_client.get_chat_thread_client(thread_id)\n        # [END get_chat_thread_client]\n\n        print(\"get_chat_thread_client succeeded with thread id: \", chat_thread_client.thread_id)\n\n\n    def list_threads(self):\n        token = self.token\n        endpoint = self.endpoint\n\n        # [START list_threads]\n        from azure.communication.chat import ChatClient, CommunicationTokenCredential\n        from datetime import datetime, timedelta\n\n        # set `endpoint` to an existing ACS endpoint\n        chat_client = ChatClient(endpoint, CommunicationTokenCredential(token))\n        start_time = datetime.utcnow() - timedelta(days=2)\n        chat_threads = chat_client.list_chat_threads(results_per_page=5, start_time=start_time)\n\n        print(\"list_threads succeeded with results_per_page is 5, and were created since 2 days ago.\")\n        for chat_thread_item_page in chat_threads.by_page():\n            for chat_thread_item in chat_thread_item_page:\n                print(\"thread id:\", chat_thread_item.id)\n        # [END list_threads]\n\n    def delete_thread(self):\n        token = self.token\n        endpoint = self.endpoint\n        thread_id = self._thread_id\n        # [START delete_thread]\n        from azure.communication.chat import ChatClient, CommunicationTokenCredential\n\n        # set `endpoint` to an existing ACS endpoint\n        chat_client = ChatClient(endpoint, CommunicationTokenCredential(token))\n\n        # set `thread_id` to an existing chat thread id\n        chat_client.delete_chat_thread(thread_id)\n        # [END delete_thread]\n\n        print(\"delete_thread succeeded\")\n\n    def clean_up(self):\n        print(\"cleaning up: deleting created user.\")\n        self.identity_client.delete_user(self.user)\n\n\nif __name__ == '__main__':\n    sample = ChatClientSamples()\n    sample.create_chat_client()\n    sample.create_thread()\n    sample.get_chat_thread_client()\n    sample.list_threads()\n    sample.delete_thread()\n    sample.clean_up()\n", "repo_name": "communication/azure-communication-chat/samples/chat_client_sample.py", "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-chat/samples/chat_client_sample.py", "language": ["Python"]}, {"README_text": "Test Attachment Text", "repo_name": "communication/azure-communication-email/samples/attachment.txt", "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-email/samples/attachment.txt", "language": ["Python"]}, {"README_text": "# coding: utf-8\n\n# -------------------------------------------------------------------------\n# Copyright (c) Microsoft Corporation. All rights reserved.\n# Licensed under the MIT License. See License.txt in the project root for\n# license information.\n# --------------------------------------------------------------------------\n\n\"\"\"\nFILE: identity_sample.py\nDESCRIPTION:\n    These samples demonstrate creating a user, issuing a token, revoking a token and deleting a user.\n\nUSAGE:\n    python identity_samples.py\n    Set the environment variables with your own values before running the sample:\n    1) COMMUNICATION_SAMPLES_CONNECTION_STRING - the connection string in your Communication Services resource\n    2) AZURE_CLIENT_ID - the client ID of your active directory application\n    3) AZURE_CLIENT_SECRET - the secret of your active directory application\n    4) AZURE_TENANT_ID - the tenant ID of your active directory application\n    5) COMMUNICATION_M365_APP_ID - the application id of Microsoft 365\n    6) COMMUNICATION_M365_AAD_AUTHORITY - the Azure AD authority of Microsoft 365  \n    7) COMMUNICATION_M365_AAD_TENANT - the tenant ID of Microsoft 365 application\n    8) COMMUNICATION_MSAL_USERNAME - the username for authenticating via MSAL library\n    9) COMMUNICATION_MSAL_PASSWORD - the password for authenticating via MSAL library\n\"\"\"\nfrom datetime import timedelta\nimport os\nfrom azure.communication.identity._shared.utils import parse_connection_str\nfrom msal import PublicClientApplication\nclass CommunicationIdentityClientSamples(object):\n\n    def __init__(self):\n        self.connection_string = os.getenv('COMMUNICATION_SAMPLES_CONNECTION_STRING')\n        self.client_id = os.getenv('AZURE_CLIENT_ID')\n        self.client_secret = os.getenv('AZURE_CLIENT_SECRET')\n        self.tenant_id = os.getenv('AZURE_TENANT_ID')\n        self.m365_client_id = os.getenv('COMMUNICATION_M365_APP_ID') \n        self.m365_aad_authority = os.getenv('COMMUNICATION_M365_AAD_AUTHORITY') \n        self.m365_aad_tenant = os.getenv('COMMUNICATION_M365_AAD_TENANT')\n        self.msal_username = os.getenv('COMMUNICATION_MSAL_USERNAME') \n        self.msal_password = os.getenv('COMMUNICATION_MSAL_PASSWORD')\n\n    def get_token(self):\n        from azure.communication.identity import (\n            CommunicationIdentityClient,\n            CommunicationTokenScope\n        )\n\n        if self.client_id is not None and self.client_secret is not None and self.tenant_id is not None:\n            from azure.identity import DefaultAzureCredential\n            endpoint, _ = parse_connection_str(self.connection_string)\n            identity_client = CommunicationIdentityClient(endpoint, DefaultAzureCredential())\n        else:\n            identity_client = CommunicationIdentityClient.from_connection_string(self.connection_string)\n        user = identity_client.create_user()\n        print(\"Getting token for: \" + user.properties.get('id'))\n        tokenresponse = identity_client.get_token(user, scopes=[CommunicationTokenScope.CHAT])\n        print(\"Token issued with value: \" + tokenresponse.token)\n        \n    def get_token_with_custom_expiration(self):\n        from azure.communication.identity import (\n            CommunicationIdentityClient,\n            CommunicationTokenScope\n        )\n\n        if self.client_id is not None and self.client_secret is not None and self.tenant_id is not None:\n            from azure.identity import DefaultAzureCredential\n            endpoint, _ = parse_connection_str(self.connection_string)\n            identity_client = CommunicationIdentityClient(endpoint, DefaultAzureCredential())\n        else:\n            identity_client = CommunicationIdentityClient.from_connection_string(self.connection_string)\n        user = identity_client.create_user()\n        print(\"Getting token for: \" + user.properties.get('id'))\n        token_expires_in = timedelta(hours=1)\n        tokenresponse = identity_client.get_token(user, scopes=[CommunicationTokenScope.CHAT], token_expires_in=token_expires_in)\n        print(\"Issued token with custom expiration\" + tokenresponse.token)\n\n    def revoke_tokens(self):\n        from azure.communication.identity import (\n            CommunicationIdentityClient,\n            CommunicationTokenScope\n        )\n\n        if self.client_id is not None and self.client_secret is not None and self.tenant_id is not None:\n            from azure.identity import DefaultAzureCredential\n            endpoint, _ = parse_connection_str(self.connection_string)\n            identity_client = CommunicationIdentityClient(endpoint, DefaultAzureCredential())\n        else:\n            identity_client = CommunicationIdentityClient.from_connection_string(self.connection_string)\n        user = identity_client.create_user()\n        tokenresponse = identity_client.get_token(user, scopes=[CommunicationTokenScope.CHAT])\n        print(\"Revoking token: \" + tokenresponse.token)\n        identity_client.revoke_tokens(user)\n        print(tokenresponse.token + \" revoked successfully\")\n\n    def create_user(self):\n        from azure.communication.identity import CommunicationIdentityClient\n\n        if self.client_id is not None and self.client_secret is not None and self.tenant_id is not None:\n            from azure.identity import DefaultAzureCredential\n            endpoint, _ = parse_connection_str(self.connection_string)\n            identity_client = CommunicationIdentityClient(endpoint, DefaultAzureCredential())\n        else:\n            identity_client = CommunicationIdentityClient.from_connection_string(self.connection_string)\n        print(\"Creating new user\")\n        user = identity_client.create_user()\n        print(\"User created with id:\" + user.properties.get('id'))\n\n    def create_user_and_token(self):\n        from azure.communication.identity import (\n            CommunicationIdentityClient,\n            CommunicationTokenScope\n        )\n        if self.client_id is not None and self.client_secret is not None and self.tenant_id is not None:\n            from azure.identity import DefaultAzureCredential\n            endpoint, _ = parse_connection_str(self.connection_string)\n            identity_client = CommunicationIdentityClient(endpoint, DefaultAzureCredential())\n        else:\n            identity_client = CommunicationIdentityClient.from_connection_string(self.connection_string)\n        print(\"Creating new user with token\")\n        user, tokenresponse = identity_client.create_user_and_token(scopes=[CommunicationTokenScope.CHAT])\n        print(\"User created with id:\" + user.properties.get('id'))\n        print(\"Token issued with value: \" + tokenresponse.token)\n        \n    def create_user_and_token_with_custom_expiration(self):\n        from azure.communication.identity import (\n            CommunicationIdentityClient,\n            CommunicationTokenScope\n        )\n        if self.client_id is not None and self.client_secret is not None and self.tenant_id is not None:\n            from azure.identity import DefaultAzureCredential\n            endpoint, _ = parse_connection_str(self.connection_string)\n            identity_client = CommunicationIdentityClient(endpoint, DefaultAzureCredential())\n        else:\n            identity_client = CommunicationIdentityClient.from_connection_string(self.connection_string)\n        print(\"Creating new user with token\")\n        token_expires_in = timedelta(hours=1)\n        user, tokenresponse = identity_client.create_user_and_token(scopes=[CommunicationTokenScope.CHAT], token_expires_in=token_expires_in)\n        print(\"User created with id:\" + user.properties.get('id'))\n        print(\"Issued token with custom expiration: \" + tokenresponse.token)\n\n    def delete_user(self):\n        from azure.communication.identity import CommunicationIdentityClient\n\n        if self.client_id is not None and self.client_secret is not None and self.tenant_id is not None:\n            from azure.identity import DefaultAzureCredential\n            endpoint, _ = parse_connection_str(self.connection_string)\n            identity_client = CommunicationIdentityClient(endpoint, DefaultAzureCredential())\n        else:\n            identity_client = CommunicationIdentityClient.from_connection_string(self.connection_string)\n        user = identity_client.create_user()\n        print(\"Deleting user: \" + user.properties.get('id'))\n        identity_client.delete_user(user)\n        print(user.properties.get('id') + \" deleted\")\n\n    def get_token_for_teams_user(self):\n        if (os.getenv(\"SKIP_INT_IDENTITY_EXCHANGE_TOKEN_TEST\") == \"true\"):\n            print(\"Skipping the Get Access Token for Teams User sample\")\n            return\n        from azure.communication.identity import CommunicationIdentityClient\n\n        if self.client_id is not None and self.client_secret is not None and self.tenant_id is not None:\n            from azure.identity import DefaultAzureCredential\n            endpoint, _ = parse_connection_str(self.connection_string)\n            identity_client = CommunicationIdentityClient(endpoint, DefaultAzureCredential())\n        else:\n            identity_client = CommunicationIdentityClient.from_connection_string(self.connection_string)\n        \n        msal_app = PublicClientApplication(client_id=self.m365_client_id, authority=\"{}/{}\".format(self.m365_aad_authority, self.m365_aad_tenant))\n        scopes = [ \n            \"https://auth.msft.communication.azure.com/Teams.ManageCalls\",\n            \"https://auth.msft.communication.azure.com/Teams.ManageChats\"\n        ]\n        result = msal_app.acquire_token_by_username_password(\n            username=self.msal_username,\n            password=self.msal_password,\n            scopes=scopes)\n        aad_token =  result[\"access_token\"]\n        teams_user_oid = result[\"id_token_claims\"][\"oid\"] \n        print(\"AAD access token of a Teams User: \" + aad_token)\n\n        tokenresponse = identity_client.get_token_for_teams_user(aad_token, self.m365_client_id, teams_user_oid)\n        print(\"Token issued with value: \" + tokenresponse.token)\n\n\nif __name__ == '__main__':\n    sample = CommunicationIdentityClientSamples()\n    sample.create_user()\n    sample.create_user_and_token()\n    sample.get_token()\n    sample.revoke_tokens()\n    sample.delete_user() \n    sample.get_token_for_teams_user()\n", "repo_name": "communication/azure-communication-identity/samples/identity_samples.py", "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-identity/samples/identity_samples.py", "language": ["Python"]}, {"README_text": "---\npage_type: sample\nlanguages:\n  - python\nproducts:\n  - azure\n  - azure-communication-services\nurlFragment: communication-jobrouter-samples \nname: azure-communication-jobrouter samples for Python\ndescription: Samples for the azure-communication-jobrouter client library\n---\n  \n# Azure Communication JobRouter client SDK Samples\n\n- Authentication\n  - [JobRouterClient and JobRouterAdministrationClient][sample_authentication]([async version][sample_authentication_async])\n    - Create client from connection string\n\n- Crud operations\n  - [Classification Policy][classificationPolicyCrudOps]([async version][classificationPolicyCrudOpsAsync])\n  - [Distribution Policy][distributionPolicyCrudOps]([async version][distributionPolicyCrudOpsAsync])\n  - [Exception Policy][exceptionPolicyCrudOps]([async version][exceptionPolicyCrudOpsAsync])\n  - [Job Queue][jobQueueCrudOps]([async version][jobQueueCrudOpsAsync])\n  - [Router Worker][routerWorkerCrudOps]([async version][routerWorkerCrudOpsAsync])\n  - [Router Job][routerJobCrudOps]([async version][routerJobCrudOpsAsync])\n\n[//]: # (- Routing Scenarios)\n\n[//]: # (  - Basic Scenario)\n\n[//]: # (    - [Create Distribution Policy, Queue, Worker and Job | Accept Job Offer | Close and Complete job][basicScenario]&#40;[async version][basicScenarioAsync]&#41;)\n\n[//]: # (    - [Requested worker selectors with job][requestedWorkerSelectorWithJobAsync])\n\n[//]: # (  - Using Classification Policy)\n\n[//]: # (    - [Queue selection with QueueSelectors][queueSelectionWithClassificationPolicyAsync])\n\n[//]: # (    - [Dynamically assigning priority to job][prioritizationWithClassificationPolicyAsync])\n\n[//]: # (    - [Dynamically attach WorkerSelectors to job][attachedWorkerSelectorWithClassificationPolicyAsync])\n\n[//]: # (  - Using Distribution Policy)\n\n[//]: # (    - [Basic Scenario][distributingOffersSimpleAsync])\n\n[//]: # (    - [Multiple offers for a job][distributingOffersAdvancedAsync])\n\n[//]: # (  - Using Exception Policy)\n\n[//]: # (    - [Trigger exception with WaitTimeExceptionTrigger][waitTimeExceptionTriggerAsync])\n\n[//]: # (    - [Trigger exception with QueueLengthExceptionTrigger][queueLengthExceptionTriggerAsync])\n\n<!-- LINKS -->\n\n[sample_authentication]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-jobrouter/samples/sample_authentication.py\n\n[sample_authentication_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-jobrouter/samples/sample_authentication_async.py\n\n[classificationPolicyCrudOps]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-jobrouter/samples/classification_policy_crud_ops.py\n\n[classificationPolicyCrudOpsAsync]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-jobrouter/samples/classification_policy_crud_ops_async.py\n\n[distributionPolicyCrudOps]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-jobrouter/samples/distribution_policy_crud_ops.py\n\n[distributionPolicyCrudOpsAsync]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-jobrouter/samples/classification_policy_crud_ops_async.py\n\n[exceptionPolicyCrudOps]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-jobrouter/samples/exception_policy_crud_ops.py\n\n[exceptionPolicyCrudOpsAsync]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-jobrouter/samples/exception_policy_crud_ops_async.py\n\n[jobQueueCrudOps]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-jobrouter/samples/job_queue_crud_ops.py\n\n[jobQueueCrudOpsAsync]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-jobrouter/samples/job_queue_crud_ops_async.py\n\n[routerWorkerCrudOps]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-jobrouter/samples/router_worker_crud_ops.py\n\n[routerWorkerCrudOpsAsync]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-jobrouter/samples/router_worker_crud_ops_async.py\n\n[routerJobCrudOps]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-jobrouter/samples/router_job_crud_ops.py\n\n[routerJobCrudOpsAsync]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-jobrouter/samples/router_job_crud_ops_async.py\n\n[//]: # ([basicScenario]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/communication/Azure.Communication.JobRouter/samples/Sample1_HelloWorld.md)\n\n[//]: # ([basicScenarioAsync]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/communication/Azure.Communication.JobRouter/samples/Sample1_HelloWorldAsync.md)\n\n[//]: # ([requestedWorkerSelectorWithJobAsync]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/communication/Azure.Communication.JobRouter/samples/Sample1_RequestedWorkerSelectorAsync.md)\n\n[//]: # ([queueSelectionWithClassificationPolicyAsync]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/communication/Azure.Communication.JobRouter/samples/Sample2_ClassificationWithQueueSelectorAsync.md)\n\n[//]: # ([prioritizationWithClassificationPolicyAsync]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/communication/Azure.Communication.JobRouter/samples/Sample2_ClassificationWithPriorityRuleAsync.md)\n\n[//]: # ([attachedWorkerSelectorWithClassificationPolicyAsync]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/communication/Azure.Communication.JobRouter/samples/Sample2_ClassificationWithWorkerSelectorAsync.md)\n\n[//]: # ([distributingOffersSimpleAsync]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/communication/Azure.Communication.JobRouter/samples/Sample3_SimpleDistributionAsync.md)\n\n[//]: # ([distributingOffersAdvancedAsync]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/communication/Azure.Communication.JobRouter/samples/Sample3_AdvancedDistributionAsync.md)\n\n[//]: # ([waitTimeExceptionTriggerAsync]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/communication/Azure.Communication.JobRouter/samples/Sample4_WaitTimeExceptionAsync.md)\n\n[//]: # ([queueLengthExceptionTriggerAsync]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/communication/Azure.Communication.JobRouter/samples/Sample4_QueueLengthExceptionTriggerAsync.md)", "repo_name": "communication/azure-communication-jobrouter/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-jobrouter/samples", "language": ["Python"]}, {"README_text": "# coding: utf-8\n\n# -------------------------------------------------------------------------\n# Copyright (c) Microsoft Corporation. All rights reserved.\n# Licensed under the MIT License. See License.txt in the project root for\n# license information.\n# --------------------------------------------------------------------------\n\n\"\"\"\nFILE: network_traversal_samples.py\nDESCRIPTION:\n    These samples demonstrate creating a user, issuing a token, revoking a token and deleting a user.\n\nUSAGE:\n    python network_traversal_samples.py\n    Set the environment variables with your own values before running the sample:\n    1) COMMUNICATION_SAMPLES_CONNECTION_STRING - the connection string in your ACS resource\n    2) AZURE_CLIENT_ID - the client ID of your active directory application\n    3) AZURE_CLIENT_SECRET - the secret of your active directory application\n    4) AZURE_TENANT_ID - the tenant ID of your active directory application\n\"\"\"\nimport os\nfrom azure.communication.networktraversal._shared.utils import parse_connection_str\n\nclass CommunicationRelayClientSamples(object):\n\n    def __init__(self):\n        self.connection_string = os.getenv('COMMUNICATION_SAMPLES_CONNECTION_STRING')\n        self.client_id = os.getenv('AZURE_CLIENT_ID')\n        self.client_secret = os.getenv('AZURE_CLIENT_SECRET')\n        self.tenant_id = os.getenv('AZURE_TENANT_ID')\n\n    def get_relay_config(self):\n        from azure.communication.networktraversal import (\n            CommunicationRelayClient\n        )\n        from azure.communication.identity import (\n            CommunicationIdentityClient\n        )\n\n        if self.client_id is not None and self.client_secret is not None and self.tenant_id is not None:\n            from azure.identity import DefaultAzureCredential\n            endpoint, _ = parse_connection_str(self.connection_string)\n            identity_client = CommunicationIdentityClient(endpoint, DefaultAzureCredential())\n            relay_client = CommunicationRelayClient(endpoint, DefaultAzureCredential())\n        else:\n            identity_client = CommunicationIdentityClient.from_connection_string(self.connection_string)\n            relay_client = CommunicationRelayClient.from_connection_string(self.connection_string)\n        \n        print(\"Creating new user\")\n        user = identity_client.create_user()\n        print(\"User created with id:\" + user.properties.get('id'))\n\n        print(\"Getting relay configuration\")\n        relay_configuration = relay_client.get_relay_configuration(user=user)\n\n        for iceServer in relay_configuration.ice_servers:\n            print(\"Icer server:\")\n            print(iceServer)\n\nif __name__ == '__main__':\n    sample = CommunicationRelayClientSamples()\n    sample.get_relay_config()\n", "repo_name": "communication/azure-communication-networktraversal/samples/network_traversal_samples.py", "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-networktraversal/samples/network_traversal_samples.py", "language": ["Python"]}, {"README_text": "# coding: utf-8\n\n# -------------------------------------------------------------------------\n# Copyright (c) Microsoft Corporation. All rights reserved.\n# Licensed under the MIT License. See License.txt in the project root for\n# license information.\n# --------------------------------------------------------------------------\n\n\"\"\"\nFILE:get_purchased_phone_number_sample.py\nDESCRIPTION:\n    This sample demonstrates how to get the information from an acquired phone number using your connection string\nUSAGE:\n    python get_purchased_phone_number_sample.py\n    Set the environment variables with your own values before running the sample:\n    1) COMMUNICATION_SAMPLES_CONNECTION_STRING - The connection string including your endpoint and \n        access key of your Azure Communication Service\n    2) AZURE_PHONE_NUMBER - The phone number you want to get its information\n\"\"\"\n\nimport os\nfrom azure.communication.phonenumbers import (\n    PhoneNumbersClient\n)\n\nconnection_str = os.getenv('COMMUNICATION_SAMPLES_CONNECTION_STRING')\nphone_number = os.getenv(\"AZURE_PHONE_NUMBER\") # e.g. \"+18001234567\"\nphone_numbers_client = PhoneNumbersClient.from_connection_string(connection_str)\n\ndef get_purchased_phone_number_information():\n    purchased_phone_number_information = phone_numbers_client.get_purchased_phone_number(phone_number)\n    print('Phone number: ' + purchased_phone_number_information.phone_number)\n    print('Country code: ' + purchased_phone_number_information.country_code)\n\nif __name__ == '__main__':\n    get_purchased_phone_number_information()\n", "repo_name": "communication/azure-communication-phonenumbers/samples/get_purchased_phone_number_sample.py", "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-phonenumbers/samples/get_purchased_phone_number_sample.py", "language": ["Python"]}, {"README_text": "# coding=utf-8\n# --------------------------------------------------------------------------\n#\n# Copyright (c) Microsoft Corporation. All rights reserved.\n#\n# The MIT License (MIT)\n#\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n# of this software and associated documentation files (the \"\"Software\"\"), to\n# deal in the Software without restriction, including without limitation the\n# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n# sell copies of the Software, and to permit persons to whom the Software is\n# furnished to do so, subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included in\n# all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n# IN THE SOFTWARE.\n#\n# --------------------------------------------------------------------------\nimport os\nimport sys\n\nfrom datetime import datetime, timedelta\nfrom azure.core.exceptions import HttpResponseError\nfrom azure.communication.identity import CommunicationIdentityClient\nfrom azure.communication.rooms import (\n    ParticipantRole,\n    RoomsClient,\n    RoomParticipant\n)\n\nsys.path.append(\"..\")\n\nclass RoomsSample(object):\n\n    def setUp(self):\n        self.connection_string = os.getenv(\"COMMUNICATION_SAMPLES_CONNECTION_STRING\")\n\n        self.rooms_client = RoomsClient.from_connection_string(self.connection_string)\n        self.identity_client = CommunicationIdentityClient.from_connection_string(\n            self.connection_string)\n        self.rooms = []\n        self.participant_1 = RoomParticipant(\n            communication_identifier=self.identity_client.create_user(),\n            role=ParticipantRole.PRESENTER)\n        self.participant_2 = RoomParticipant(\n            communication_identifier=self.identity_client.create_user(),\n            role=ParticipantRole.CONSUMER)\n\n    def tearDown(self):\n        self.delete_room_all_rooms()\n\n    def create_single_room(self):\n\n        valid_from =  datetime.now()\n        valid_until = valid_from + timedelta(weeks=4)\n        participants = [self.participant_1]\n\n        try:\n            create_room_response = self.rooms_client.create_room(\n                valid_from=valid_from,\n                valid_until=valid_until,\n                participants=participants)\n            self.printRoom(response=create_room_response)\n\n            # all created room to a list\n            self.rooms.append(create_room_response.id)\n\n        except HttpResponseError as ex:\n            print(ex)\n\n    def create_single_room_with_default_attributes(self):\n        try:\n            create_room_response = self.rooms_client.create_room()\n            self.printRoom(response=create_room_response)\n            # all created room to a list\n            self.rooms.append(create_room_response.id)\n\n        except HttpResponseError as ex:\n            print(ex)\n\n    def update_single_room(self, room_id):\n        # set attributes you want to change\n        valid_from =  datetime.now()\n        valid_until = valid_from + timedelta(weeks=7)\n\n        try:\n            update_room_response = self.rooms_client.update_room(room_id=room_id, valid_from=valid_from, valid_until=valid_until)\n            self.printRoom(response=update_room_response)\n        except HttpResponseError as ex:\n            print(ex)\n\n    def add_or_update_participants(self, room_id):\n        self.participant_1.role = ParticipantRole.ATTENDEE\n        participants = [\n            self.participant_1, # Update participant_1 role from Presenter to Attendee\n            self.participant_2  # Add participant_2 to room\n            ]\n\n        try:\n            self.rooms_client.add_or_update_participants(room_id=room_id, participants=participants)\n        except HttpResponseError as ex:\n            print(ex)\n\n    def list_participants(self, room_id):\n        try:\n            get_participants_response = self.rooms_client.list_participants(room_id=room_id)\n            print(\"participants: \\n\", self.convert_participant_list_to_string(get_participants_response))\n        except HttpResponseError as ex:\n            print(ex)\n\n    def remove_participants(self, room_id):\n        participants = [self.participant_1.communication_identifier]\n\n        try:\n            self.rooms_client.remove_participants(room_id=room_id, participants=participants)\n        except HttpResponseError as ex:\n            print(ex)\n\n    def delete_room_all_rooms(self):\n        for room in self.rooms:\n            print(\"deleting: \", room)\n            self.rooms_client.delete_room(room_id=room)\n\n    def get_room(self, room_id):\n\n        try:\n            get_room_response = self.rooms_client.get_room(room_id=room_id)\n            self.printRoom(response=get_room_response)\n\n        except HttpResponseError as ex:\n            print(ex)\n\n    def printRoom(self, response):\n        print(\"room_id: \", response.id)\n        print(\"created_at: \", response.created_at)\n        print(\"valid_from: \", response.valid_from)\n        print(\"valid_until: \", response.valid_until)\n\n    def convert_participant_list_to_string(self, participants):\n        result = ''\n        for p in participants:\n            result += \"id: {}\\n role: {}\\n\".format(\n                p.communication_identifier.properties[\"id\"], p.role)\n        return result\n\nif __name__ == '__main__':\n    sample = RoomsSample()\n    sample.setUp()\n    sample.create_single_room()\n    sample.create_single_room_with_default_attributes()\n    if len(sample.rooms) > 0:\n        sample.get_room(room_id=sample.rooms[0] )\n        sample.update_single_room(room_id=sample.rooms[0])\n        sample.add_or_update_participants(room_id=sample.rooms[0])\n        sample.list_participants(room_id=sample.rooms[0])\n        sample.remove_participants(room_id=sample.rooms[0])\n        sample.get_room(room_id=sample.rooms[0])\n    sample.tearDown()", "repo_name": "communication/azure-communication-rooms/samples/rooms_client_sample.py", "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-rooms/samples/rooms_client_sample.py", "language": ["Python"]}, {"README_text": "# coding: utf-8\n\n# -------------------------------------------------------------------------\n# Copyright (c) Microsoft Corporation. All rights reserved.\n# Licensed under the MIT License. See License.txt in the project root for\n# license information.\n# --------------------------------------------------------------------------\n\n\"\"\"\nFILE: send_sms_to_multiple_recipients_sample.py\nDESCRIPTION:\n    This sample demonstrates sending an SMS message to multiple recipients. The SMS client is \n    authenticated using a connection string.\nUSAGE:\n    python send_sms_to_multiple_recipients_sample.py\n    Set the environment variable with your own value before running the sample:\n    1) COMMUNICATION_SAMPLES_CONNECTION_STRING - the connection string in your ACS resource\n    2) AZURE_PHONE_NUMBER - a phone number with SMS capabilities in your ACS resource\n\"\"\"\n\nimport os\nimport sys\nfrom azure.communication.sms import SmsClient\n\nsys.path.append(\"..\")\n\nclass SmsMultipleRecipientsSample(object):\n\n    connection_string = os.getenv(\"COMMUNICATION_SMS_LIVETEST_DYNAMIC_CONNECTION_STRING\")\n    phone_number = os.getenv(\"SMS_PHONE_NUMBER\")\n        \n    def send_sms_to_multiple_recipients(self):\n        sms_client = SmsClient.from_connection_string(self.connection_string)\n\n        # calling send() with sms values\n        sms_responses = sms_client.send(\n            from_=self.phone_number,\n            to=[self.phone_number, self.phone_number],\n            message=\"Hello World via SMS\",\n            enable_delivery_report=True, # optional property\n            tag=\"custom-tag\") # optional property\n        \n        for sms_response in sms_responses:\n            if (sms_response.successful):\n                print(\"Message with message id {} was successful sent to {}\"\n                .format(sms_response.message_id, sms_response.to))\n            else:\n                print(\"Message failed to send to {} with the status code {} and error: {}\"\n                .format(sms_response.to, sms_response.http_status_code, sms_response.error_message))\n\nif __name__ == '__main__':\n    sample = SmsMultipleRecipientsSample()\n    sample.send_sms_to_multiple_recipients()\n", "repo_name": "communication/azure-communication-sms/samples/send_sms_to_multiple_recipients_sample.py", "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-sms/samples/send_sms_to_multiple_recipients_sample.py", "language": ["Python"]}, {"README_text": "---\npage_type: sample\nlanguages:\n  - python\nproducts:\n  - azure\n  - azure-confidentialledger\nurlFragment: azure-confidentialledger-samples\n---\n\n# Azure Confidential Ledger service client library for Python Samples\n\nThese are code samples that show common scenario operations with the Azure Confidential Ledger client library.\nThe async versions of the samples (the python sample files appended with `_async`) show asynchronous operations.\n\n## Prerequisites\n\n* Python 3.6 or later is required to use this package\n* You need an [Azure subscription][azure_sub], and a [Azure Confidential Ledger service instance][confidential_ledger_docs] to use this package.\n\n## Setup\n\n1. Install the Azure Confidential Ledger service client library for Python with [pip](https://pypi.org/project/pip/):\n\n```bash\npip install azure-confidentialledger\n```\n\n2. Clone or download this sample repository\n3. Open the sample folder in Visual Studio Code or your IDE of choice.\n\n## Running the samples\n\n1. Open a terminal window and `cd` to the directory that the samples are saved in.\n2. Set the environment variables specified in the sample file you wish to run.\n3. Follow the usage described in the file.\n\n## Next Steps\n\nTake a look at our [API Documentation][reference_docs] for more information about the APIs that are available in the clients.\n\n\n<!-- LINKS -->\n[azure_sub]: https://azure.microsoft.com/free/\n[confidential_ledger_docs]: https://aka.ms/confidentialledger-servicedocs\n[reference_docs]: https://aka.ms/azsdk/python/confidentialledger/ref-docs", "repo_name": "confidentialledger/azure-confidentialledger/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/confidentialledger/azure-confidentialledger/samples", "language": ["Python"]}, {"README_text": "---\npage_type: sample\nlanguages:\n  - python\nproducts:\n  - azure\n  - azure-container-registry\nurlFragment: containerregistry-samples\n---\n\n# Samples for Azure Container Registry\n\nThese code samples show common scenario operations with the Azure Container Registry client library. The code samples assume an environment variable `CONTAINERREGISTRY_ENDPOINT` is set, which includes the name of the login server and the `https://` prefix. For more information on using AAD with Azure Container Registry, please see the service's [Authentication Overview](https://docs.microsoft.com/azure/container-registry/container-registry-authentication).\n\n\n|**File Name**|**Description**|\n|-------------|---------------|\n|[sample_hello_world.py][hello_world] ([sample_hello_world_async.py][hello_world_async]) |Instantiate a `ContainerRegistryClient` object and iterating through the collection of tags in the repository with anonymous access |\n|[sample_delete_tags.py][delete_tags] ([sample_delete_tags_async.py][delete_tags_async]) | Delete tags from a repository |\n|[sample_delete_images.py][delete_images] ([sample_delete_images_async.py][delete_images_async]) | Delete images from a repository |\n|[sample_set_image_properties.py][set_image_properties] ([sample_set_image_properties_async.py][set_image_properties_async]) | Set read/write/delete properties on an image |\n|[sample_list_tags.py][list_tags] ([sample_list_tags_async.py][list_tags_async]) | List tags on an image with anonymous access |\n|[sample_set_get_image.py][set_get_image] ([sample_set_get_image_async.py][set_get_image_async]) | Set and get a manifest, and upload and download a blob to and from a repository |\n\n### Prerequisites\n* Python 3.7 or later is required to use this package.\n* You need an [Azure subscription][azure_sub] and a [Container Registry account][container_registry_docs] to use this package.\n\n## Setup\n\n1. Install the Azure Container Registry client library for Python with [pip](https://pypi.org/project/pip/):\n```bash\npip install --pre azure-containerregistry\n```\n2. Clone or download this sample repository\n3. Open the sample folder in Visual Studio Code or your IDE of choice.\n\n## Running the samples\n\n1. Open a terminal window and `cd` to the directory that the samples are saved in.\n2. Set the environment variables specified in the sample file you wish to run.\n3. Follow the usage described in the file, e.g. `python sample_hello_world.py`\n\n\n## Next steps\n\nCheck out the [API reference documentation][rest_docs] to learn more about what you can do with the Azure Container Registry client library.\n\n\n<!-- LINKS -->\n[azure_sub]: https://azure.microsoft.com/free/\n[rest_docs]: https://docs.microsoft.com/rest/api/containerregistry/\n[container_registry_docs]: https://docs.microsoft.com/azure/container-registry/container-registry-intro\n[hello_world]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/containerregistry/azure-containerregistry/samples/sample_hello_world.py\n[hello_world_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/containerregistry/azure-containerregistry/samples/sample_hello_world_async.py\n[delete_tags]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/containerregistry/azure-containerregistry/samples/sample_delete_tags.py\n[delete_tags_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/containerregistry/azure-containerregistry/samples/sample_delete_tags_async.py\n[delete_images]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/containerregistry/azure-containerregistry/samples/sample_delete_images.py\n[delete_images_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/containerregistry/azure-containerregistry/samples/sample_delete_images_async.py\n[set_image_properties]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/containerregistry/azure-containerregistry/samples/sample_set_image_properties.py\n[set_image_properties_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/containerregistry/azure-containerregistry/samples/sample_set_image_properties_async.py\n[list_tags]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/containerregistry/azure-containerregistry/samples/sample_list_tags.py\n[list_tags_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/containerregistry/azure-containerregistry/samples/sample_list_tags_async.py\n[set_get_image]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/containerregistry/azure-containerregistry/samples/sample_set_get_image.py\n[set_get_image_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/containerregistry/azure-containerregistry/samples/sample_set_get_image_async.py\n", "repo_name": "containerregistry/azure-containerregistry/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/containerregistry/azure-containerregistry/samples", "language": ["Python"]}, {"README_text": "# coding: utf-8\n\n# -------------------------------------------------------------------------\n# Copyright (c) Microsoft Corporation. All rights reserved.\n# Licensed under the MIT License. See License.txt in the project root for\n# license information.\n# --------------------------------------------------------------------------\n\ndef analyze_image():\n    # [START analyze_image]\n    \n    import os\n    from azure.ai.contentsafety import ContentSafetyClient\n    from azure.core.credentials import AzureKeyCredential\n    from azure.core.exceptions import HttpResponseError\n    from azure.ai.contentsafety.models import AnalyzeImageOptions, ImageData\n\n    key = os.environ[\"CONTENT_SAFETY_KEY\"]\n    endpoint = os.environ[\"CONTENT_SAFETY_ENDPOINT\"]\n    image_path = os.path.abspath(os.path.join(os.path.abspath(__file__), \"..\", \"./sample_data/image.jpg\"))\n\n    # Create an Content Safety client\n    client = ContentSafetyClient(endpoint, AzureKeyCredential(key))\n\n    # Build request\n    with open(image_path, \"rb\") as file:\n        request = AnalyzeImageOptions(image=ImageData(content=file.read()))\n\n    # Analyze image\n    try:\n        response = client.analyze_image(request)\n    except HttpResponseError as e:\n        print(\"Analyze image failed.\")\n        if e.error:\n            print(f\"Error code: {e.error.code}\")\n            print(f\"Error message: {e.error.message}\")\n            raise\n        print(e)\n        raise\n\n    if response.hate_result:\n        print(f\"Hate severity: {response.hate_result.severity}\")\n    if response.self_harm_result:\n        print(f\"SelfHarm severity: {response.self_harm_result.severity}\")\n    if response.sexual_result:\n        print(f\"Sexual severity: {response.sexual_result.severity}\")\n    if response.violence_result:\n        print(f\"Violence severity: {response.violence_result.severity}\")\n\n    # [END analyze_image]\n\n\nif __name__ == \"__main__\":\n    analyze_image()\n", "repo_name": "contentsafety/azure-ai-contentsafety/samples/sample_analyze_image.py", "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/contentsafety/azure-ai-contentsafety/samples/sample_analyze_image.py", "language": ["Python"]}, {"README_text": "---\npage_type: sample\nlanguages:\n  - python\nproducts:\n  - azure\nurlFragment: azure-core-tracing-opentelemetry-samples\n---\n\n# Azure Core Tracing OpenTelemetry Integration Python Samples\n\nThese code samples show using the tracing OpenTelemetry integration with few services including servicebus, storage and eventgrid. A simple console span exporter is used in this example to export the calls. However, the code to use the azure monitor exporter has also been provided and commented in each sample.\n\n* Trace Storage Calls to create a container: [sample_storage.py][python-sample-storage]\n* Trace Eventgrid calls to publish an event : [sample_eventgrid.py][python-sample-eventgrid]\n* Trace Servicebus calls to send messages to queue : [sample_servicebus.py][python-sample-servicebus]\n* Trace Servicebus calls to receive messages from a queue : [sample_receive_sb.py][python-sample-servicebus-receive]\n* Trace calls to send data to Eventhub : [sample_eventhubs.py][python-sample-eventhub-send]\n* Trace calls to receive data from EventHub : [sample_receive_eh.py][python-sample-eventhub-receive]\n\nIt is assumed that the relevant SDKs are installed along with this extension. Below are the relevant packages which can be found in PyPI.\n\n- [azure-storage-blob](https://pypi.org/project/azure-storage-blob/) v12 or greater.\n- [azure-servicebus](https://pypi.org/project/azure-servicebus) v7 or greater.\n- [azure-eventgrid](https://pypi.org/project/azure-eventgrid) v4 or greater.\n- [azure-eventhub](https://pypi.org/project/azure-eventhub/) v5 or greater\n- [opentelemetry-sdk](https://pypi.org/project/opentelemetry-sdk/)\n\n[python-sample-storage]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core-tracing-opentelemetry/samples/sample_storage.py\n[python-sample-eventgrid]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core-tracing-opentelemetry/samples/sample_eventgrid.py\n[python-sample-servicebus]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core-tracing-opentelemetry/samples/sample_servicebus.py\n[python-sample-servicebus-receive]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core-tracing-opentelemetry/samples/sample_receive_sb.py\n[python-sample-eventhub-send]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core-tracing-opentelemetry/samples/sample_eventhubs.py\n[python-sample-eventhub-receive]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core-tracing-opentelemetry/samples/sample_receive_eh.py\n", "repo_name": "core/azure-core-tracing-opentelemetry/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core-tracing-opentelemetry/samples", "language": ["Python"]}, {"README_text": "---\npage_type: sample\nlanguages:\n  - python\nproducts:\n  - azure\n---\n\n# Azure Core Library Python Developer Samples\n\nThese are some code snippets that show the way in which you can set up some functionalities used in new SDKs such as logging, pipelines, etc.\n\nThey are not intended to be run as standalone application, but show you how these functionalities can be configured.\n\n[test_example_sync.py](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/samples/test_example_sync.py) - samples of how to create a sync pipeline\n\n[test_example_async.py](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/samples/test_example_async.py) - samples of how to create an async pipeline\n\n[test_example_sansio.py](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/samples/test_example_sansio.py) - samples of how to config policies\n\n# Azure Core Library Python End User Samples\n\nThese are some code snippets that show the way in which end users can customize the behavior.\n\n[shared_transport.py](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/samples/example_shared_transport.py) - samples of how to use a shared sync transport\n[shared_transport_async.py](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/samples/example_shared_transport_async.py) - samples of how to use a shared async transport\n", "repo_name": "core/azure-core/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/samples", "language": ["Python"]}, {"README_text": "---\npage_type: sample\nlanguages:\n  - python\nproducts:\n  - azure\n  - azure-cosmos-db\nurlFragment: cosmos-db-samples\n---\n\n# Azure Cosmos DB SQL API client library for Python Samples\n\nThe following are code samples that show common scenario operations with the Azure Cosmos DB SQL API client library. Note that the samples use the terms 'Document' and 'Item' interchangably.\n\n* [examples.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/cosmos/azure-cosmos/samples/examples.py) - Examples of common tasks:\n    * Create Database\n    * Create Container\n    * CRUD operations on Items in Container\n    * Query a Container for Items\n    * Create a Database user\n\n* [database_management.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/cosmos/azure-cosmos/samples/database_management.py) - Example demonstrating:\n    * Basic CRUD operations on a Database resource\n    * Query for Database\n    * List all Database resources on an account\n\n* [container_management.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/cosmos/azure-cosmos/samples/container_management.py) - Example demonstrating:\n    * Basic CRUD operations on a Container resource\n    * Query for Container\n    * Manage Container Provisioned Throughput\n    * List all Container resources in a Database\n\n\n* [document_management.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/cosmos/azure-cosmos/samples/document_management.py) - Example demonstrating basic CRUD operations on an Item resource.\n\n\n* [index_management.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/cosmos/azure-cosmos/samples/index_management.py) - Example demonstrating basic CRUD operations on a Item resource in a non-partitioned Container.\n\n\n* [change_feed_management.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/cosmos/azure-cosmos/samples/change_feed_management.py) - Example demontrating how to consume the Change Feed and iterate on the results.\n\n\n* [access_cosmos_with_resource_token.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/cosmos/azure-cosmos/samples/access_cosmos_with_resource_token.py) - Example demontrating how to get and use resource token that allows restricted access to data.\n\n\n* [multi-master operations](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/cosmos/azure-cosmos/samples/MultiMasterOperations) - Example demonstrating multi-master operations.\n\n* [tracing-open-telemetry](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/cosmos/azure-cosmos/samples/tracing_open_telemetry.py) - Example demonstrating how to use OpenTelemetry tracing with our SDK.\n\n## Prerequisites\n* Python 3.6+\n* You must have an [Azure subscription](https://azure.microsoft.com/free/) and an\n[Azure Cosmos DB account](https://docs.microsoft.com/azure/cosmos-db/create-sql-api-python#create-a-database-account) to run these samples.\n\n## Setup\n\n1. Install the latest beta version of Azure Cosmos that the samples use:\n\n```bash\npip install azure-cosmos\n```\n\n2. Clone or download this sample repository.\n3. Open the sample folder in Visual Studio Code or your IDE of choice.\n\n## Running the samples\n\n1. Open a terminal window and `cd` to the directory that the samples are saved in.\n2. Set the environment variables specified in the sample file you wish to run.\n3. Follow the usage described in the file, e.g. `python database_management.py`\n\n## Next steps\n\nCheck out the [API reference documentation](https://aka.ms/azsdk-python-cosmos-ref) to learn more about\nwhat you can do with the Azure Cosmos DB SQL API client library.", "repo_name": "cosmos/azure-cosmos/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/cosmos/azure-cosmos/samples", "language": ["Python"]}, {"README_text": "# coding=utf-8\n# --------------------------------------------------------------------------\n#\n# Copyright (c) Microsoft Corporation. All rights reserved.\n#\n# The MIT License (MIT)\n#\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n# of this software and associated documentation files (the \"\"Software\"\"), to\n# deal in the Software without restriction, including without limitation the\n# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n# sell copies of the Software, and to permit persons to whom the Software is\n# furnished to do so, subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included in\n# all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n# IN THE SOFTWARE.\n#\n# --------------------------------------------------------------------------\nimport logging\nimport os\n\nfrom azure.developer.devcenter import DevCenterClient\nfrom azure.identity import DefaultAzureCredential\nfrom azure.core.exceptions import HttpResponseError\n\ndef get_project_name(LOG, client):\n    projects = list(client.projects.list_by_dev_center(top=1))\n    return projects[0].name\n\ndef main():\n    logging.basicConfig(level=logging.DEBUG)\n    LOG = logging.getLogger()\n\n    # Set the values of the dev center endpoint, client ID, and client secret of the AAD application as environment variables:\n    # DEVCENTER_ENDPOINT, AZURE_CLIENT_ID, AZURE_CLIENT_SECRET\n    try:\n        endpoint = os.environ[\"DEVCENTER_ENDPOINT\"]\n    except KeyError:\n        LOG.error(\"Missing environment variable 'DEVCENTER_ENDPOINT' - please set it before running the example\")\n        exit()\n\n    # Build a client through AAD\n    client = DevCenterClient(endpoint, credential=DefaultAzureCredential())\n\n    # Fetch control plane resource dependencies\n    projects = list(client.dev_center.list_projects(top=1))\n    target_project_name = projects[0]['name']\n\n    pools = list(client.dev_boxes.list_pools(target_project_name, top=1))\n    target_pool_name = pools[0]['name']\n\n    # Stand up a new dev box\n    create_response = client.dev_boxes.begin_create_dev_box(target_project_name, \"Test_DevBox\", {\"poolName\": target_pool_name})\n    devbox_result = create_response.result()\n\n    LOG.info(f\"Provisioned dev box with status {devbox_result['provisioningState']}.\")\n\n    # Connect to the provisioned dev box\n    remote_connection_response = client.dev_boxes.get_remote_connection(target_project_name, \"Test_DevBox\")\n    LOG.info(f\"Connect to the dev box using web URL {remote_connection_response['webUrl']}\")\n\n    # Tear down the dev box when finished\n    delete_response = client.dev_boxes.begin_delete_dev_box(target_project_name, \"Test_DevBox\")\n    delete_response.wait()\n    LOG.info(\"Deleted dev box successfully.\")\n\n\nif __name__ == \"__main__\":\n    main()", "repo_name": "devcenter/azure-developer-devcenter/samples/create_devbox_sample.py", "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/devcenter/azure-developer-devcenter/samples/create_devbox_sample.py", "language": ["Python"]}, {"README_text": "---\npage_type: sample\nlanguages:\n- python\nproducts:\n- azure\n- azure-iot\nname: Azure.IoT.DeviceUpdate samples for Python\ndescription: Samples for the azure-iot-deviceupdate client library\n---\n\n# Device Update for IoT Hub client SDK samples\n\nThese are code samples that show common scenario operations with the Device Update for IoT Hub client library.\n\n## Prerequisites\n\n* Python 3.6 or later is required to use this package\n* You need an [Azure subscription][https://azure.microsoft.com/free/], and a [Device Update for IoT Hub][https://docs.microsoft.com/azure/iot-hub-device-update/understand-device-update] \naccount and instance to use this package.\n\n## Setup\n\n1. Install the Device Update for IoT Hub client library for Python with [pip](https://pypi.org/project/pip/):\n\n```bash\npip install azure-iot-deviceupdate\n```\n\n2. Clone or download this sample repository\n3. Open the sample folder in Visual Studio Code or your IDE of choice.\n\n## Running the samples\n\n1. Open a terminal window and `cd` to the directory that the samples are saved in.\n2. Set the environment variables specified in the sample file you wish to run.\n3. Follow the usage described in the file, e.g. `python sample_list_updates.py`\n\n## Samples\n\n - [Enumerate updates](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/deviceupdate/azure-iot-deviceupdate/samples/ListUpdates/Readme.md)\n - [Get device update metadata and device update files metadata](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/deviceupdate/azure-iot-deviceupdate/samples/GetUpdate/Readme.md)\n - [Import update](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/deviceupdate/azure-iot-deviceupdate/samples/ImportUpdate/Readme.md)\n - [Delete update](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/deviceupdate/azure-iot-deviceupdate/samples/DeleteUpdate/Readme.md)\n - [Get device information](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/deviceupdate/azure-iot-deviceupdate/samples/GetDevice/Readme.md)\n - [Deploy update](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/deviceupdate/azure-iot-deviceupdate/samples/DeployUpdate/Readme.md)\n", "repo_name": "deviceupdate/azure-iot-deviceupdate/samples/Readme.md", "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/deviceupdate/azure-iot-deviceupdate/samples/Readme.md", "language": ["Python"]}, {"README_text": "# Azure Azure Digital Twins Core client library for Python\n\nThis package contains an SDK for Azure Digital Twins API to provide access to the Azure Digital Twins service for managing twins, models, relationships, etc.\n\n## Getting started\n\n### Introduction\n\nAzure Digital Twins is a developer platform for next-generation IoT solutions that lets you create, run, and manage digital representations of your business environment, securely and efficiently in the cloud. With Azure Digital Twins, creating live operational state representations is quick and cost-effective, and digital representations stay current with real-time data from IoT and other data sources. If you are new to Azure Digital Twins and would like to learn more about the platform, please make sure you check out the Azure Digital Twins [official documentation page](https://docs.microsoft.com/azure/digital-twins/overview).\n\nFor an introduction on how to program against the Azure Digital Twins service, visit the [coding tutorial page](https://docs.microsoft.com/azure/digital-twins/tutorial-code) for an easy step-by-step guide. Visit [this tutorial](https://docs.microsoft.com/azure/digital-twins/tutorial-command-line-app) to learn how to interact with an Azure Digital Twin instance using a command-line client application. Finally, for a quick guide on how to build an end-to-end Azure Digital Twins solution that is driven by live data from your environment, make sure you check out [this helpful guide](https://docs.microsoft.com/azure/digital-twins/tutorial-end-to-end).\n\nThe guides mentioned above can help you get started with key elements of Azure Digital Twins, such as creating Azure Digital Twins instances, models, twin graphs, etc. Use this samples guide below to familiarize yourself with the various APIs that help you program against Azure Digital Twins.\n\n### How to Install\n\nInstall [azure-digitaltwins-core][pypi_package_keys] and\n[azure-identity][azure_identity_pypi] with [pip][pip]:\n```Bash\npip install azure-digitaltwins-core azure-identity\n```\n[azure-identity][azure_identity] is used for Azure Active Directory\nauthentication as demonstrated below.\n\n### How to use\n\n#### Authentication, permission\n\nTo create a new digital twins client, you need the endpoint to an Azure Digital Twin instance and credentials.\nFor the samples below, the `AZURE_URL`, `AZURE_TENANT_ID`, `AZURE_CLIENT_ID`, and `AZURE_CLIENT_SECRET` environment variables have to be set.\nThe client requires an instance of [TokenCredential](https://docs.microsoft.com/dotnet/api/azure.core.tokencredential?view=azure-dotnet) or [ServiceClientCredentials](https://docs.microsoft.com/dotnet/api/microsoft.rest.serviceclientcredentials?view=azure-dotnet).\nIn this samples, we illustrate how to use one derived class: [DefaultAzureCredentials](https://docs.microsoft.com/dotnet/api/azure.identity.defaultazurecredential?view=azure-dotnet).\n\n> Note: In order to access the data plane for the Digital Twins service, the entity must be given permissions.\n> To do this, use the Azure CLI command: `az dt rbac assign-role --assignee '<user-email | application-id>' --role owner -n '<your-digital-twins-instance>'`\n\nDefaultAzureCredential supports different authentication mechanisms and determines the appropriate credential type based of the environment it is executing in.\nIt attempts to use multiple credential types in an order until it finds a working credential.\n\n##### Sample code\n\n```python Snippet:dt_create_digitaltwins_service_client.py\n# DefaultAzureCredential supports different authentication mechanisms and determines the appropriate credential type based of the environment it is executing in.\n# It attempts to use multiple credential types in an order until it finds a working credential.\n\n# - AZURE_URL: The URL to the ADT in Azure\nurl = os.getenv(\"AZURE_URL\")\n\n# DefaultAzureCredential expects the following three environment variables:\n# - AZURE_TENANT_ID: The tenant ID in Azure Active Directory\n# - AZURE_CLIENT_ID: The application (client) ID registered in the AAD tenant\n# - AZURE_CLIENT_SECRET: The client secret for the registered application\ncredential = DefaultAzureCredential()\nservice_client = DigitalTwinsClient(url, credential)\n```\n\n## Key concepts\n\nAzure Digital Twins is an Azure IoT service that creates comprehensive models of the physical environment. It can create spatial intelligence graphs to model the relationships and interactions between people, spaces, and devices.\nYou can learn more about Azure Digital Twins by visiting [Azure Digital Twins Documentation](https://docs.microsoft.com/azure/digital-twins/).\n\n## Examples\n\nYou can explore the digital twins APIs (using the client library) using the samples project.\n\nThe samples project demonstrates the following:\n\n- Instantiate the client\n- Create, get, and decommission models\n- Create, query, and delete a digital twin\n- Get and update components for a digital twin\n- Create, get, and delete relationships between digital twins\n- Create, get, and delete event routes for digital twin\n- Publish telemetry messages to a digital twin and digital twin component\n\n### Create, list, decommission, and delete models\n\n#### Create models\n\nLet's create models using the code below. You need to pass an array containing list of models.\n\n```python Snippet:dt_models_lifecycle\ntemporary_component = {\n    \"@id\": component_id,\n    \"@type\": \"Interface\",\n    \"@context\": \"dtmi:dtdl:context;2\",\n    \"displayName\": \"Component1\",\n    \"contents\": [\n    {\n        \"@type\": \"Property\",\n        \"name\": \"ComponentProp1\",\n        \"schema\": \"string\"\n    },\n    {\n        \"@type\": \"Telemetry\",\n        \"name\": \"ComponentTelemetry1\",\n        \"schema\": \"integer\"\n    }\n    ]\n}\n\ntemporary_model = {\n    \"@id\": model_id,\n    \"@type\": \"Interface\",\n    \"@context\": \"dtmi:dtdl:context;2\",\n    \"displayName\": \"TempModel\",\n    \"contents\": [\n    {\n        \"@type\": \"Property\",\n        \"name\": \"Prop1\",\n        \"schema\": \"string\"\n    },\n    {\n        \"@type\": \"Component\",\n        \"name\": \"Component1\",\n        \"schema\": component_id\n    },\n    {\n        \"@type\": \"Telemetry\",\n        \"name\": \"Telemetry1\",\n        \"schema\": \"integer\"\n    }\n    ]\n}\n\nnew_models = [temporary_component, temporary_model]\nmodels = service_client.create_models(new_models)\nprint('Created Models:')\nprint(models)\n```\n\n### List models\nUsing `list_models` to retrieve all created models\n\n```python Snippet:dt_models_lifecycle\nlisted_models = service_client.list_models()\nfor model in listed_models:\n    print(model)\n```\n\n### Get model\nUse `get_model` with model's unique identifier to get a specific model.\n\n```python Snippet:dt_models_lifecycle\n# Get a model\nget_model = service_client.get_model(model_id)\nprint('Get Model:')\nprint(get_model)\n```\n\n### Decommission model\nTo decommision a model, pass in a model Id for the model you want to decommision.\n\n```python Snippet:dt_models_lifecycle\n# Decommission a model\nservice_client.decommission_model(model_id)\n```\n\n### Delete model\nTo delete a model, pass in a model Id for the model you want to delete.\n\n```python Snippet:dt_models_lifecycle\n# Delete a model\nservice_client.delete_model(model_id)\n```\n\n## Create and delete digital twins\n\n### Create digital twins\nFor Creating Twin you will need to provide Id of a digital Twin such as `my_twin` and the application/json digital twin based on the model created earlier. You can look at sample application/json [here](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/digitaltwins/azure-digitaltwins-core/samples/dtdl/digital_twins).\n\n```python Snippet:dt_digitaltwins_lifecycle\ndigital_twin_id = 'digitalTwin-' + str(uuid.uuid4())\ntemporary_twin = {\n    \"$metadata\": {\n        \"$model\": model_id\n    },\n    \"$dtId\": digital_twin_id,\n    \"Prop1\": 42\n}\n\ncreated_twin = service_client.upsert_digital_twin(digital_twin_id, temporary_twin)\nprint('Created Digital Twin:')\nprint(created_twin)\n```\n\n### Get a digital twin\n\nGetting a digital twin is extremely easy.\n```python Snippet:dt_digitaltwins_lifecycle\nget_twin = service_client.get_digital_twin(digital_twin_id)\nprint('Get Digital Twin:')\nprint(get_twin)\n```\n\n### Query digital twins\n\nQuery the Azure Digital Twins instance for digital twins using the [Azure Digital Twins Query Store lanaguage](https://docs.microsoft.com/azure/digital-twins/concepts-query-language). Query calls support paging. Here's an example of how to query for digital twins and how to iterate over the results.\n\nNote that there may be a delay between before changes in your instance are reflected in queries.\nFor more details on query limitations, see (https://docs.microsoft.com/azure/digital-twins/how-to-query-graph#query-limitations)\n\n```python Snippet:dt_digitaltwins_query\nquery_expression = 'SELECT * FROM digitaltwins'\nquery_result = service_client.query_twins(query_expression)\nprint('DigitalTwins:')\nfor twin in query_result:\n    print(twin)\n```\n\n### Delete digital twins\n\nDelete a digital twin simply by providing Id of a digital twin as below.\n\n```python Snippet:dt_digitaltwins_lifecycle\nservice_client.delete_digital_twin(digital_twin_id)\n```\n\n## Get and update digital twin components\n\n### Update digital twin components\n\nTo update a component or in other words to replace, remove and/or add a component property or subproperty within Digital Twin, you would need Id of a digital twin, component name and application/json-patch+json operations to be performed on the specified digital twin's component. Here is the sample code on how to do it.\n\n```python Snippet:dt_component_lifecycle\ncomponent_name = \"Component1\"\npatch = [\n    {\n        \"op\": \"replace\",\n        \"path\": \"/ComponentProp1\",\n        \"value\": \"value2\"\n    }\n]\nservice_client.update_component(digital_twin_id, component_name, patch)\n```\n\n### Get digital twin components\n\nGet a component by providing name of a component and Id of digital twin to which it belongs.\n\n```python Snippet:dt_component_lifecycle\nget_component = service_client.get_component(digital_twin_id, component_name)\nprint('Get Component:')\nprint(get_component)\n```\n\n## Create and list digital twin relationships\n\n### Create digital twin relationships\n\n`upsert_relationship` creates a relationship on a digital twin provided with Id of a digital twin, name of relationship such as \"contains\", Id of an relationship such as \"FloorContainsRoom\" and an application/json relationship to be created. Must contain property with key \"\\$targetId\" to specify the target of the relationship. Sample payloads for relationships can be found [here](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-digitaltwins-core/samples/dtdl/relationships/hospitalRelationships.json).\n\n```python Snippet:dt_scenario\nhospital_relationships = [\n    {\n        \"$relationshipId\": \"BuildingHasFloor\",\n        \"$sourceId\": building_twin_id,\n        \"$relationshipName\": \"has\",\n        \"$targetId\": floor_twin_id,\n        \"isAccessRestricted\": False\n    },\n    {\n        \"$relationshipId\": \"BuildingIsEquippedWithHVAC\",\n        \"$sourceId\": building_twin_id,\n        \"$relationshipName\": \"isEquippedWith\",\n        \"$targetId\": hvac_twin_id\n    },\n    {\n        \"$relationshipId\": \"HVACCoolsFloor\",\n        \"$sourceId\": hvac_twin_id,\n        \"$relationshipName\": \"controlsTemperature\",\n        \"$targetId\": floor_twin_id\n    },\n    {\n        \"$relationshipId\": \"FloorContainsRoom\",\n        \"$sourceId\": floor_twin_id,\n        \"$relationshipName\": \"contains\",\n        \"$targetId\": room_twin_id\n    }\n]\n\nfor relationship in hospital_relationships:\n    service_client.upsert_relationship(\n        relationship[\"$sourceId\"],\n        relationship[\"$relationshipId\"],\n        relationship\n    )\n```\n\n### List digital twin relationships\n\n`list_relationships` and `list_incoming_relationships` lists all the relationships and all incoming relationships respectively of a digital twin.\n\n```python Snippet:dt_relationships_list\nrelationships = service_client.list_relationships(digital_twint_id)\nfor relationship in relationships:\n    print(relationship)\n```\n\n```python Snippet:dt_incoming_relationships_list\nincoming_relationships = service_client.list_incoming_relationships(digital_twin_id)\nfor incoming_relationship in incoming_relationships:\n    print(incoming_relationship)\n```\n\n## Create, list, and delete event routes of digital twins\n\n### Create event routes\n\nTo create an event route, provide an Id of an event route such as \"myEventRouteId\" and event route data containing the endpoint and optional filter like the example shown below.\n\n```python Snippet:dt_scenario\nevent_route_id = 'eventRoute-' + str(uuid.uuid4())\nevent_filter = \"$eventType = 'DigitalTwinTelemetryMessages' or $eventType = 'DigitalTwinLifecycleNotification'\"\nroute = DigitalTwinsEventRoute(\n    endpoint_name=event_hub_endpoint_name,\n    filter=event_filter\n)\nservice_client.upsert_event_route(event_route_id, route)\n```\n\nFor more information on the event route filter language, see the \"how to manage routes\" [filter events documentation](https://github.com/Azure/azure-digital-twins/blob/private-preview/Documentation/how-to-manage-routes.md#filter-events).\n\n### List event routes\n\nList a specific event route given event route Id or all event routes setting options with `list_event_routes`.\n\n```python Snippet:dt_event_routes_list\nevent_routes = service_client.list_event_routes()\nfor event_route in event_routes:\n    print(event_route)\n```\n\n### Delete event routes\n\nDelete an event route given event route Id.\n\n```python Snippet:dt_scenario\nservice_client.delete_event_route(event_route_id)\n```\n\n### Publish telemetry messages for a digital twin\n\nTo publish a telemetry message for a digital twin, you need to provide the digital twin Id, along with the payload on which telemetry that needs the update.\n\n```python Snippet:dt_publish_telemetry\ndigita_twin_id = \"<DIGITAL TWIN ID>\"\ntelemetry_payload = '{\"Telemetry1\": 5}'\nservice_client.publish_telemetry(\n    digita_twin_id,\n    telemetry_payload\n)\n```\n\nYou can also publish a telemetry message for a specific component in a digital twin. In addition to the digital twin Id and payload, you need to specify the target component Id.\n\n```python Snippet:dt_publish_component_telemetry\ndigita_twin_id = \"<DIGITAL TWIN ID>\"\ncomponent_name = \"<COMPONENT_NAME>\"\ntelemetry_payload = '{\"Telemetry1\": 5}'\nservice_client.publish_component_telemetry(\n    digita_twin_id,\n    component_name,\n    telemetry_payload\n)\n```\n\n## Troubleshooting\n\n## Logging\nThis library uses the standard logging library for logging. Basic information about HTTP sessions (URLs, headers, etc.) is logged at INFO level.\n\nDetailed DEBUG level logging, including request/response bodies and unredacted headers, can be enabled on a client with the logging_enable keyword argument:\n\n### Client level logging\n```python Snippet:dt_digitaltwins_get.py\nimport sys\nimport logging\n\n# Create logger\nlogger = logging.getLogger('azure')\nlogger.setLevel(logging.DEBUG)\nhandler = logging.StreamHandler(stream=sys.stdout)\nlogger.addHandler(handler)\n\n# Create service client and enable logging for all operations\nservice_client = DigitalTwinsClient(url, credential, logging_enable=True)\n```\n\n### Per-operation level logging\n```python Snippet:dt_models_get.py\nimport sys\nimport logging\n\n# Create logger\nlogger = logging.getLogger('azure')\nlogger.setLevel(logging.DEBUG)\nhandler = logging.StreamHandler(stream=sys.stdout)\nlogger.addHandler(handler)\n\n# Get model with logging enabled\nmodel = service_client.get_model(model_id, logging_enable=True)\n```\n\n### Optional Configuration\nOptional keyword arguments can be passed in at the client and per-operation level. The azure-core [reference documentation](https://azuresdkdocs.blob.core.windows.net/$web/python/azure-core/latest/azure.core.html) describes available configurations for retries, logging, transport protocols, and more.\n\n[azure_identity]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity\n[azure_identity_pypi]: https://pypi.org/project/azure-identity/\n[default_cred_ref]: https://aka.ms/azsdk/python/identity/docs#azure.identity.DefaultAzureCredential\n[pip]: https://pypi.org/project/pip/\n\n\n## Next steps\n\n### Provide Feedback\n\nIf you encounter bugs or have suggestions, please\n[open an issue](https://github.com/Azure/azure-sdk-for-python/issues).\n\n## Contributing\n\nThis project welcomes contributions and suggestions.  Most contributions require you to agree to a\nContributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us\nthe rights to use your contribution. For details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide\na CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions\nprovided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or\ncontact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.", "repo_name": "digitaltwins/azure-digitaltwins-core/samples/Readme.md", "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-digitaltwins-core/samples/Readme.md", "language": ["Python"]}, {"README_text": "# Azure EASM samples for Python client\n\nThe sample programs here demonstrate some common use case scenarios for the Azure EASM Python SDK Client.\n\n## Contents\n\n| File | Description |\n|-------------|-------------|\n| [sample1_managing_discovery_runs.py][discovery_runs_sample] | create/run discovery groups |\n| [sample2_create_disco_group_from_template.py][discovery_template_sample] | create discovery groups using templates |\n| [sample3_use_saved_filters.py][saved_filters_sample] | create saved filters |\n| [sample4_managing_external_ids.py][manage_external_ids_sample] | manage external ids using the SDK |\n\n[discovery_runs_sample]: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/easm/azure-defender-easm/samples/sample1_managing_discovery_runs.py\n[discovery_template_sample]: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/easm/azure-defender-easm/samples/sample2_create_disco_group_from_template.py\n[saved_filters_sample]: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/easm/azure-defender-easm/samples/sample3_use_saved_filters.py\n[manage_external_ids_sample]: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/easm/azure-defender-easm/samples/sample4_managing_external_ids.py\n", "repo_name": "easm/azure-defender-easm/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/easm/azure-defender-easm/samples", "language": ["Python"]}, {"README_text": "---\npage_type: sample\nlanguages:\n  - python\nproducts:\n  - azure\n  - azure-event-grid\nurlFragment: eventgrid-samples\n---\n\n# Azure Event Grid Client Library Python Samples\n\n## Sync samples\nThese code samples show common champion scenario operations with the Azure Event Grid client library.\n\n* Generate Shared Access Signature: [sample_generate_sas.py][python-eg-generate-sas]\n\n* Authenticate the client: [sample_authentication.py][python-eg-auth]\n\n* Publish events to a topic using SAS: [sample_publish_events_to_a_topic_using_sas_credential_async.py][python-eg-sample-send-using-sas]\n* Publish Event Grid Events to a topic: [sample_publish_eg_events_to_a_topic.py][python-eg-sample-eg-event]\n* Publish EventGrid Events to a domain topic: [sample_publish_eg_events_to_a_domain_topic.py][python-eg-sample-eg-event-to-domain]\n* Publish a Cloud Event: [sample_publish_events_using_cloud_events_1.0_schema.py][python-eg-sample-send-cloudevent]\n* Publish a Custom Schema: [sample_publish_custom_schema_to_a_topic.py][python-eg-publish-custom-schema]\n\nTo publish events, dict representation of the models could also be used as follows:\n* Publish EventGridEvent as dict like representation: [sample_publish_eg_event_using_dict.py][python-eg-sample-send-eg-as-dict]\n* Publish CloudEvent as dict like representation: [sample_publish_cloud_event_using_dict.py][python-eg-sample-send-cloudevent-as-dict]\n\n* Consume a Custom Payload of raw cloudevent data: [sample_consume_custom_payload.py][python-eg-sample-consume-custom-payload]\n\n## Async samples\nThese code samples show common champion scenario operations with the Azure Event Grid client library using the async client.\n\n* Authenticate the client: [sample_authentication_async.py][python-eg-auth-async]\n\n* Publish events to a topic using SAS: [sample_publish_events_to_a_topic_using_sas_credential_async.py][python-eg-sample-send-using-sas-async]\n* Publish EventGrid Events to a topic: [sample_publish_eg_events_to_a_topic_async.py][python-eg-sample-eg-event-async]\n* Publish EventGrid Events to a domain topic: [sample_publish_eg_events_to_a_domain_topic_async.py][python-eg-sample-eg-event-to-domain-async]\n* Publish a Cloud Event: [sample_publish_events_using_cloud_events_1.0_schema_async.py][python-eg-sample-send-cloudevent-async]\n* Publish a Custom Schema: [sample_publish_custom_schema_to_a_topic_async.py][python-eg-publish-custom-schema-async]\n\nTo publish events, dict representation of the models could also be used as follows:\n* Publish EventGridEvent as dict like representation: [sample_publish_eg_event_using_dict_async.py][python-eg-sample-send-eg-as-dict-async]\n* Publish CloudEvent as dict like representation: [sample_publish_cloud_event_using_dict_async.py][python-eg-sample-send-cloudevent-as-dict-async]\n\n## More Samples\n\n* More samples related to the send scenario can be seen [here][python-eg-publish-samples].\n* To see more samples related to consuming a payload from different messaging services as a typed object, please visit [Consume Samples][python-eg-consume-samples]\n\n[python-eg-auth]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/samples/sync_samples/sample_authentication.py\n[python-eg-generate-sas]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/samples/sync_samples/sample_generate_sas.py\n[python-eg-sample-send-using-sas]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/samples/sync_samples/sample_publish_events_to_a_topic_using_sas_credential.py\n[python-eg-sample-eg-event]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/samples/sync_samples/sample_publish_eg_events_to_a_topic.py\n[python-eg-sample-eg-event-to-domain]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/samples/sync_samples/sample_publish_eg_events_to_a_domain.py\n[python-eg-sample-send-cloudevent]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/samples/sync_samples/sample_publish_events_using_cloud_events_1.0_schema.py\n[python-eg-publish-custom-schema]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/samples/sync_samples/sample_publish_custom_schema_to_a_topic.py\n[python-eg-sample-send-eg-as-dict]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/samples/sync_samples/sample_publish_eg_event_using_dict.py\n[python-eg-sample-send-cloudevent-as-dict]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/samples/sync_samples/sample_publish_cloud_event_using_dict.py\n\n[python-eg-auth-async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/samples/async_samples/sample_authentication_async.py\n[python-eg-sample-send-using-sas-async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/samples/async_samples/sample_publish_events_to_a_topic_using_sas_credential_async.py\n[python-eg-sample-eg-event-async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/samples/async_samples/sample_publish_eg_events_to_a_topic_async.py\n[python-eg-sample-eg-event-to-domain-async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/samples/async_samples/sample_publish_eg_events_to_a_domain_async.py\n[python-eg-sample-send-cloudevent-async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/samples/async_samples/sample_publish_events_using_cloud_events_1.0_schema_async.py\n[python-eg-publish-custom-schema-async]:https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/samples/async_samples/sample_publish_custom_schema_to_a_topic_async.py\n[python-eg-sample-send-eg-as-dict-async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/samples/async_samples/sample_publish_eg_event_using_dict_async.py\n[python-eg-sample-send-cloudevent-as-dict-async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/samples/async_samples/sample_publish_cloud_event_using_dict_async.py\n\n[python-eg-publish-samples]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/samples/publish_samples\n[python-eg-consume-samples]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/samples/consume_samples\n\n[python-eg-sample-consume-custom-payload]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/samples/sync_samples/sample_consume_custom_payload.py\n\n[publisher-service-doc]: https://docs.microsoft.com/azure/event-grid/concepts\n", "repo_name": "eventgrid/azure-eventgrid/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/samples", "language": ["Python"]}, {"README_text": "---\npage_type: sample\nlanguages:\n  - python\nproducts:\n  - azure\n  - azure-event-hubs\nurlFragment: eventhub-checkpointstore-aio-samples\n---\n\n# Azure Event Hubs client library async samples with persistent checkpointing for Python\n\nThese sample programs show how to use the async Python client libraries for Azure Event Hubs in some common scenarios.\n\n| **File Name**                                                | **Description**                                                                                                                                                  |\n| ------------------------------------------------------------ | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| [receive_events_using_checkpoint_store_async.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/eventhub/azure-eventhub-checkpointstoreblob-aio/samples/receive_events_using_checkpoint_store_async.py)        | Demonstrates how to use the BlobCheckpointStore with EventHubConsumerClient to process events from all partitions of a consumer group in an Event Hubs instance. |\n| [receive_events_using_checkpoint_store_storage_api_version_async.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/eventhub/azure-eventhub-checkpointstoreblob-aio/samples/receive_events_using_checkpoint_store_storage_api_version_async.py) | Demonstrates how to use a specific Azure Storage Blobs API version with BlobCheckpointStore.                                                                     |\n\n## Prerequisites\n- Python 3.7 or later.\n- **Microsoft Azure Subscription:**  To use Azure services, including Azure Event Hubs, you'll need a subscription. If you do not have an existing Azure account, you may sign up for a free trial or use your MSDN subscriber benefits when you [create an account](https://azure.microsoft.com/).\n\n- **Event Hubs namespace with an Event Hub:** To interact with Azure Event Hubs, you'll also need to have a namespace and Event Hub  available.  If you are not familiar with creating Azure resources, you may wish to follow the step-by-step guide for [creating an Event Hub using the Azure portal](https://docs.microsoft.com/azure/event-hubs/event-hubs-create).  There, you can also find detailed instructions for using the Azure CLI, Azure PowerShell, or Azure Resource Manager (ARM) templates to create an Event Hub.\n\n- **Azure Storage Account:** You'll need to have an Azure Storage Account and create a Azure Blob Storage Block Container to store the checkpoint data with blobs. You may follow the guide [creating an Azure Block Blob Storage Account](https://docs.microsoft.com/azure/storage/blobs/storage-blob-create-account-block-blob).\n\n## Setup\n\n1. Install the Azure Event Hubs client library for Python with [pip](https://pypi.org/project/pip/):\n```bash\npip install azure-eventhub-checkpointstoreblob-aio\n```\n2. Clone or download this sample repository.\n3. Open the sample folder in Visual Studio Code or your IDE of choice.\n\n## Running the samples\n\n1. Open a terminal window and `cd` to the directory that the samples are saved in.\n2. Set the environment variables specified in the sample file you wish to run.\n3. Follow the usage described in the file.\n\n## Next steps\n\nCheck out the [API reference documentation](https://azuresdkdocs.blob.core.windows.net/$web/python/azure-eventhub/latest/azure.eventhub.aio.html) to learn more about\nwhat you can do with the Azure Event Hubs client library.\n", "repo_name": "eventhub/azure-eventhub-checkpointstoreblob-aio/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub-checkpointstoreblob-aio/samples", "language": ["Python"]}, {"README_text": "---\npage_type: sample\nlanguages:\n  - python\nproducts:\n  - azure\n  - azure-event-hubs\nurlFragment: eventhub-checkpointstore-samples\n---\n\n# Azure Event Hubs client library samples with persistent checkpointing for Python\n\nThese sample programs show how to use the sync Python client libraries for Azure Event Hubs in some common scenarios.\n\n| **File Name**                                                | **Description**                                                                                                                                                  |\n| ------------------------------------------------------------ | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| [receive_events_using_checkpoint_store.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/eventhub/azure-eventhub-checkpointstoreblob/samples/receive_events_using_checkpoint_store.py)        | Demonstrates how to use the async BlobCheckpointStore with EventHubConsumerClient to process events from all partitions of a consumer group in an Event Hubs instance. |\n| [receive_events_using_checkpoint_store_storage_api_version.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/eventhub/azure-eventhub-checkpointstoreblob/samples/receive_events_using_checkpoint_store_storage_api_version.py) | Demonstrates how to use a specific Azure Storage Blobs API version with BlobCheckpointStore.                                                                     |\n\n## Prerequisites\n- Python 3.7 or later.\n- **Microsoft Azure Subscription:**  To use Azure services, including Azure Event Hubs, you'll need a subscription. If you do not have an existing Azure account, you may sign up for a free trial or use your MSDN subscriber benefits when you [create an account](https://azure.microsoft.com/).\n\n- **Event Hubs namespace with an Event Hub:** To interact with Azure Event Hubs, you'll also need to have a namespace and Event Hub  available.  If you are not familiar with creating Azure resources, you may wish to follow the step-by-step guide for [creating an Event Hub using the Azure portal](https://docs.microsoft.com/azure/event-hubs/event-hubs-create).  There, you can also find detailed instructions for using the Azure CLI, Azure PowerShell, or Azure Resource Manager (ARM) templates to create an Event Hub.\n\n- **Azure Storage Account:** You'll need to have an Azure Storage Account and create a Azure Blob Storage Block Container to store the checkpoint data with blobs. You may follow the guide [creating an Azure Block Blob Storage Account](https://docs.microsoft.com/azure/storage/blobs/storage-blob-create-account-block-blob).\n\n## Setup\n\n1. Install the Azure Event Hubs client library for Python with [pip](https://pypi.org/project/pip/):\n```bash\npip install azure-eventhub-checkpointstoreblob\n```\n2. Clone or download this sample repository.\n3. Open the sample folder in Visual Studio Code or your IDE of choice.\n\n## Running the samples\n\n1. Open a terminal window and `cd` to the directory that the samples are saved in.\n2. Set the environment variables specified in the sample file you wish to run.\n3. Follow the usage described in the file.\n\n## Next steps\n\nCheck out the [API reference documentation](https://azuresdkdocs.blob.core.windows.net/$web/python/azure-eventhub/latest/azure.eventhub.html) to learn more about\nwhat you can do with the Azure Event Hubs client library.\n", "repo_name": "eventhub/azure-eventhub-checkpointstoreblob/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub-checkpointstoreblob/samples", "language": ["Python"]}, {"README_text": "import os\nfrom azure.eventhub import EventHubConsumerClient\nfrom azure.eventhub.extensions.checkpointstoretable import TableCheckpointStore\n\nCONNECTION_STR = os.environ[\"EVENT_HUB_CONN_STR\"]\nEVENTHUB_NAME = os.environ[\"EVENT_HUB_NAME\"]\nSTORAGE_CONNECTION_STR = os.environ[\"AZURE_STORAGE_CONN_STR\"]\nTABLE_NAME = \"your-table-name\"  # Please make sure the table resource exists.\n\n\ndef on_event(partition_context, event):\n    # Put your code here.\n    # Avoid time-consuming operations.\n    print(event)\n    partition_context.update_checkpoint(event)\n\n\nif __name__ == \"__main__\":\n    checkpoint_store = TableCheckpointStore.from_connection_string(\n        STORAGE_CONNECTION_STR,\n        table_name=TABLE_NAME,\n    )\n    client = EventHubConsumerClient.from_connection_string(\n        CONNECTION_STR,\n        consumer_group=\"$Default\",\n        eventhub_name=EVENTHUB_NAME,\n        checkpoint_store=checkpoint_store,\n    )\n\n    try:\n        client.receive(on_event)\n    except KeyboardInterrupt:\n        client.close()\n", "repo_name": "eventhub/azure-eventhub-checkpointstoretable/samples/receive_events_using_checkpoint_store.py", "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub-checkpointstoretable/samples/receive_events_using_checkpoint_store.py", "language": ["Python"]}, {"README_text": "---\npage_type: sample\nlanguages:\n  - python\nproducts:\n  - azure\n  - azure-event-hubs\nurlFragment: eventhub-samples\n---\n\n# Azure Event Hubs client library for Python Samples\n\nThese are code samples that show common scenario operations with the Azure Event Hubs client library.\nBoth [sync version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/eventhub/azure-eventhub/samples/sync_samples) and [async version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/eventhub/azure-eventhub/samples/async_samples) of samples are provided.\n\n- [client_creation.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/eventhub/azure-eventhub/samples/sync_samples/client_creation.py) ([async version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/eventhub/azure-eventhub/samples/async_samples/client_creation_async.py)) - Examples to create EventHubProducerClient and EventHubConsumerClient:\n    - From a connection string\n    - From a shared access key\n    - Creation with configuration parameters\n\n- [send.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/eventhub/azure-eventhub/samples/sync_samples/send.py) ([async version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/eventhub/azure-eventhub/samples/async_samples/send_async.py)) - Examples to send events:\n    - Send event data batch\n    - Send event data batch within limited size\n    - Send event data batch to a specific partition determined by partition key\n    - Send event data batch to a specific partition by partition id\n    - Send event data batch with customized properties\n\n- [send_stream.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/eventhub/azure-eventhub/samples/sync_samples/send_stream.py) ([async version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/eventhub/azure-eventhub/samples/async_samples/send_stream_async.py)) - Examples to do streaming sending:\n    - Send in a stream\n\n- [recv.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/eventhub/azure-eventhub/samples/sync_samples/recv.py) ([async version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/eventhub/azure-eventhub/samples/async_samples/recv_async.py)) - Examples to receive events:\n    - Receive events\n\n- [recv_track_last_enqueued_event_prop.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/eventhub/azure-eventhub/samples/sync_samples/recv_track_last_enqueued_event_prop.py) ([async version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/eventhub/azure-eventhub/samples/async_samples/recv_track_last_enqueued_event_prop_async.py)) - Examples to get the latest enqueued event properties of a partition while receiving:\n    - Get the latest enqueued event properties of a partition while receiving\n\n- [recv_with_custom_starting_position.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/eventhub/azure-eventhub/samples/sync_samples/recv_with_custom_starting_position.py) ([async version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/eventhub/azure-eventhub/samples/async_samples/recv_with_custom_starting_position_async.py)) - Examples to start receiving from a specific position:\n    - Start receiving from a specific position\n\n- [recv_with_checkpoint_store.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/eventhub/azure-eventhub/samples/sync_samples/recv_with_checkpoint_store.py) ([async version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/eventhub/azure-eventhub/samples/async_samples/recv_with_checkpoint_store_async.py)) - Examples to receive events and do checkpoint using blob checkpoint store:\n    - Receive events and do checkpoint using blob checkpoint store\n\n- [recv_with_checkpoint_by_event_count.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/eventhub/azure-eventhub/samples/sync_samples/recv_with_checkpoint_by_event_count.py) ([async version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/eventhub/azure-eventhub/samples/async_samples/recv_with_checkpoint_by_event_count_async.py)) - Examples to receive events and do checkpoint by event count using blob checkpoint store:\n    - Receive events and do checkpoint every fixed amount of events (e.g. checkpoint every 20 events) using blob checkpoint store\n\n- [receive_batch_with_checkpoint.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/eventhub/azure-eventhub/samples/sync_samples/receive_batch_with_checkpoint.py) ([async_version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/eventhub/azure-eventhub/samples/async_samples/receive_batch_with_checkpoint_async.py)) - Examples to receive events in batches and do checkpoint by the batch:\n    - Receive events in batches by calling `EventHubConsumer.receive_batch` and do checkpoint with the last event of that batch.\n\n- [recv_with_checkpoint_by_time_interval.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/eventhub/azure-eventhub/samples/sync_samples/recv_with_checkpoint_by_time_interval.py) ([async version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/eventhub/azure-eventhub/samples/async_samples/recv_with_checkpoint_by_time_interval_async.py)) - Examples to receive events and do checkpoint by time interval using blob checkpoint store:\n    - Receive events and do checkpoint every fixed time interval (e.g. checkpoint every 20 seconds) using blob checkpoint store\n\n- [recv_for_period.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/eventhub/azure-eventhub/samples/sync_samples/recv_for_period.py) ([async version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/eventhub/azure-eventhub/samples/async_samples/recv_for_period_async.py)) - Examples to receive events for a period of time:\n    - Receive events for a period of time\n\n- [client_identity_authentication.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/eventhub/azure-eventhub/samples/sync_samples/client_identity_authentication.py) ([async version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/eventhub/azure-eventhub/samples/async_samples/client_identity_authentication_async.py)) - Examples for authentication by Azure Active Directory:\n    - Authenticating and creating the client utilizing the `azure.identity` library\n\n- [connection_string_authentication.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/eventhub/azure-eventhub/samples/sync_samples/connection_string_authentication.py) ([async version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/eventhub/azure-eventhub/samples/async_samples/connection_string_authentication_async.py)) - Examples for authentication by connection string:\n    - Authenticating and creating the client utilizing a connection string.\n\n- [proxy.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/eventhub/azure-eventhub/samples/sync_samples/proxy.py) ([async version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/eventhub/azure-eventhub/samples/async_samples/proxy_async.py)) - Examples to send and receive events behind a proxy:\n    - Send and receive events behind a proxy\n\n- [iot_hub_connection_string_receive_async.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/eventhub/azure-eventhub/samples/async_samples/iot_hub_connection_string_receive_async.py) - Examples to receive events from an IoT Hub:\n    - Convert an IoT Hub connection string to the built-in Event Hub endpoint and receive events from it\n\n- [authenticate_with_sas_token.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/eventhub/azure-eventhub/samples/sync_samples/authenticate_with_sas_token.py) ([async_version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/eventhub/azure-eventhub/samples/async_samples/authenticate_with_sas_token_async.py)) - Examples:\n    - Utilize a SAS token to authenticate when creating an Event Hub client.\n\n- [authenticate_with_azure_sas_credential.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/eventhub/azure-eventhub/samples/sync_samples/authenticate_with_azure_sas_credential.py) ([async_version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/eventhub/azure-eventhub/samples/async_samples/authenticate_with_azure_sas_credential_async.py)) - Examples:\n    - Utilize `azure.core.credentials.AzureSasCredential` to authenticate when creating an Event Hub client.\n\n- [authenticate_with_azure_named_key_credential.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/eventhub/azure-eventhub/samples/sync_samples/authenticate_with_azure_named_key_credential.py) ([async_version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/eventhub/azure-eventhub/samples/async_samples/authenticate_with_azure_named_key_credential_async.py)) - Examples:\n    - Utilize `azure.core.credentials.AzureNamedKeyCredential` to authenticate when creating an Event Hub client.\n\n- [connection_to_custom_endpoint_address.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/eventhub/azure-eventhub/samples/sync_samples/connection_to_custom_endpoint_address.py) ([async version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/eventhub/azure-eventhub/samples/async_samples/connection_to_custom_endpoint_address_async.py)) - Examples:\n    - Create EventHubProducerClient and EventHubConsumerClient that connect to a custom endpoint with a custom certificate.\n\n- [send_and_receive_amqp_annotated_message.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/eventhub/azure-eventhub/samples/sync_samples/send_and_receive_amqp_annotated_message.py) ([async_version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/eventhub/azure-eventhub/samples/async_samples/send_and_receive_amqp_annotated_message_async.py)) - Examples to send AMQPAnnotatedMessage to and receive events from an event hub and parse the body:\n    - Send AMQPAnnotatedMessage of different body types.\n    - Receive messages and parse the body according to the body type.\n\n- [send_buffered_mode.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/eventhub/azure-eventhub/samples/sync_samples/send_buffered_mode.py) ([async_version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/eventhub/azure-eventhub/samples/async_samples/send_buffered_mode_async.py)) - Examples to send events in buffered mode:\n    - Send single events, which will be automatically batched.\n    - Send a batch of events by enqueuing an EventDataBatch object to the buffer.\n    - Send events in buffer immediately by calling `flush`.\n\n## Prerequisites\n- Python 3.7 or later.\n- **Microsoft Azure Subscription:**  To use Azure services, including Azure Event Hubs, you'll need a subscription.\nIf you do not have an existing Azure account, you may sign up for a free trial or use your MSDN subscriber benefits when you [create an account](https://account.windowsazure.com/Home/Index).\n\n- **Event Hubs namespace with an Event Hub:** To interact with Azure Event Hubs, you'll also need to have a namespace and Event Hub  available.\nIf you are not familiar with creating Azure resources, you may wish to follow the step-by-step guide\nfor [creating an Event Hub using the Azure portal](https://docs.microsoft.com/azure/event-hubs/event-hubs-create).\nThere, you can also find detailed instructions for using the Azure CLI, Azure PowerShell, or Azure Resource Manager (ARM) templates to create an Event Hub.\n\n- **Azure Storage Account (Optional)**: To run receiving samples with blob checkpoint store for persist checkpoint, you need to [create an Azure Storage account](https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-portal) and a [Blob Container](https://docs.microsoft.com/azure/storage/blobs/storage-quickstart-blobs-portal#create-a-container).\n\n## Setup\n\n1. Install the Azure Event Hubs client library for Python with [pip](https://pypi.org/project/pip/):\n```bash\npip install azure-eventhub\n```\n\nTo run samples that utilize the Azure Active Directory for authentication, please install the `azure-identity` library:\n```bash\npip install azure-identity\n```\n\nTo run receiving samples that utilize blob checkpoint store for persist checkpoint, please install the corresponding checkpoint store library:\n```bash\npip install azure-eventhub-checkpointstoreblob  # sync version\npip install azure-eventhub-checkpointstoreblob-aio  # async version\n```\n2. Clone or download this sample repository.\n3. Open the sample folder in Visual Studio Code or your IDE of choice.\n\n## Running the samples\n\n1. Open a terminal window and `cd` to the directory that the samples are saved in.\n2. Set the environment variables specified in the sample file you wish to run.\n3. Follow the usage described in the file, e.g. `python send.py`.\n\n## Next steps\n\nCheck out the [API reference documentation](https://docs.microsoft.com/python/api/overview/azure/eventhub-readme) to learn more about\nwhat you can do with the Azure Event Hubs client library.\n", "repo_name": "eventhub/azure-eventhub/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub/samples", "language": ["Python"]}, {"README_text": "---\npage_type: sample\nlanguages:\n  - python\nproducts:\n  - azure\n  - azure-cognitive-services\n  - azure-form-recognizer\nurlFragment: formrecognizer-samples\n---\n\n# Samples for Azure Form Recognizer client library for Python\n\n> Note: Starting with version 2022-08-31, a new set of clients were introduced to leverage the newest features\n> of the Form Recognizer service. Please see the [Migration Guide][migration-guide] for detailed instructions on how to update application\n> code from client library version 3.1.X or lower to the latest version. Additionally, see the [Changelog][changelog] for more detailed information.\n\nThese code samples show common scenario operations with the Azure Form Recognizer client library.\n\nAll of these samples need the endpoint to your Form Recognizer resource ([instructions on how to get endpoint][get-endpoint-instructions]), and your Form Recognizer API key ([instructions on how to get key][get-key-instructions]).\n\n## Samples for client library versions 3.2.0 and later\n\n|**File Name**|**Description**|\n|----------------|-------------|\n|[sample_authentication.py][sample_auth] and [sample_authentication_async.py][sample_auth_async]|Authenticate the client|\n|[sample_analyze_layout.py][sample_analyze_layout] and [sample_analyze_layout_async.py][sample_analyze_layout_async]|Extract text, selection marks, and table structures in a document|\n|[sample_analyze_general_documents.py][sample_analyze_general_documents] and [sample_analyze_general_documents_async.py][sample_analyze_general_documents_async]|Analyze document key-value pairs, tables, and selection marks using a prebuilt model|\n|[sample_analyze_read.py][sample_analyze_read] and [sample_analyze_read_async.py][sample_analyze_read_async]|Read document elements, such as pages and detected languages|\n|[sample_analyze_invoices.py][sample_analyze_invoices] and [sample_analyze_invoices_async.py][sample_analyze_invoices_async]|Analyze document text, selection marks, tables, and pre-trained fields and values pertaining to English invoices using a prebuilt model|\n|[sample_analyze_business_cards.py][sample_analyze_business_cards] and [sample_analyze_business_cards_async.py][sample_analyze_business_cards_async]|Analyze document text and pre-trained fields and values pertaining to English business cards using a prebuilt model|\n|[sample_analyze_identity_documents.py][sample_analyze_identity_documents] and [sample_analyze_identity_documents_async.py][sample_analyze_identity_documents_async]|Analyze document text and pre-trained fields and values pertaining to US driver licenses and international passports using a prebuilt model|\n|[sample_analyze_receipts.py][sample_analyze_receipts] and [sample_analyze_receipts_async.py][sample_analyze_receipts_async]|Analyze document text and pre-trained fields and values pertaining to English sales receipts using a prebuilt model|\n|[sample_analyze_tax_us_w2.py][sample_analyze_tax_us_w2] and [sample_analyze_tax_us_w2_async.py][sample_analyze_tax_us_w2_async]|Analyze document text and pre-trained fields and values pertaining to US tax W-2 forms using a prebuilt model|\n|[sample_analyze_custom_documents.py][sample_analyze_custom_documents] and [sample_analyze_custom_documents_async.py][sample_analyze_custom_documents_async]|Analyze custom documents with your custom model to extract text, field values, selection marks, and table data from documents|\n|[sample_build_model.py][sample_build_model] and [sample_build_model_async.py][sample_build_model_async]|Build a custom model|\n|[sample_compose_model.py][sample_composed_model] and [sample_compose_model_async.py][sample_composed_model_async]|Create a composed model from a collection of existing models to be called with a single model ID|\n|[sample_manage_models.py][sample_manage_models] and [sample_manage_models_async.py][sample_manage_models_async]|Manage the models in your account|\n|[sample_get_operations.py][sample_get_operations] and [sample_get_operations_async.py][sample_get_operations_async]|Get and list the document model operations created within the past 24 hours|\n|[sample_copy_model_to.py][sample_copy] and [sample_copy_model_to_async.py][sample_copy_async]|Copy a custom model from one Form Recognizer resource to another|\n|[sample_get_words_on_document_line.py][sample_get_words_on_document_line] and [sample_get_words_on_document_line_async.py][sample_get_words_on_document_line_async]|Get the words in a DocumentLine|\n|[sample_convert_to_and_from_dict.py][sample_convert_to_and_from_dict_v3_2] and [sample_convert_to_and_from_dict_async.py][sample_convert_to_and_from_dict_async_v3_2]|Convert model types to a dictionary that can be used to create JSON content, then convert the same dictionary back to the original model type|\n|[sample_get_elements_with_spans.py][sample_get_elements_with_spans] and [sample_get_elements_with_spans_async.py][sample_get_elements_with_spans_async]|Get elements, such as words, lines, and styles, in the result of an analyze operation by searching with spans|\n|[sample_classify_document.py][sample_classify_document] and [sample_classify_document_async.py][sample_classify_document_async]|Classify documents with a custom classification model.|\n|[sample_classify_document_from_url.py][sample_classify_document_from_url] and [sample_classify_document_from_url_async.py][sample_classify_document_from_url_async]|Classify documents from URL with a custom classification model.|\n|[sample_build_classifier.py][sample_build_classifier] and [sample_build_classifier_async.py][sample_build_classifier_async]|Build a custom document classifier.|\n|[sample_manage_classifiers.py][sample_manage_classifiers] and [sample_manage_classifiers_async.py][sample_manage_classifiers_async]|Manage custom document classification models.|\n\n\n## Samples for client library versions 3.1.X\n\n|**File Name**|**Description**|\n|----------------|-------------|\n|[sample_authentication.py][sample_authentication] and [sample_authentication_async.py][sample_authentication_async]|Authenticate the client|\n|[sample_recognize_content.py][sample_recognize_content] and [sample_recognize_content_async.py][sample_recognize_content_async]|Recognize text, selection marks, and table structures in a document|\n|[sample_recognize_receipts.py][sample_recognize_receipts] and [sample_recognize_receipts_async.py][sample_recognize_receipts_async]|Recognize data from a file of a sales receipt using a prebuilt model|\n|[sample_recognize_receipts_from_url.py][sample_recognize_receipts_from_url] and [sample_recognize_receipts_from_url_async.py][sample_recognize_receipts_from_url_async]|Recognize data from a URL of a sales receipt using a prebuilt model|\n|[sample_recognize_business_cards.py][sample_recognize_business_cards] and [sample_recognize_business_cards_async.py][sample_recognize_business_cards_async]|Recognize data from a file of a business card using a prebuilt model|\n|[sample_recognize_identity_documents.py][sample_recognize_identity_documents] and [sample_recognize_identity_documents_async.py][sample_recognize_identity_documents_async]|Recognize data from a file of an ID document using a prebuilt model|\n|[sample_recognize_invoices.py][sample_recognize_invoices] and [sample_recognize_invoices_async.py][sample_recognize_invoices_async]|Recognize data from a file of an invoice using a prebuilt model|\n|[sample_recognize_custom_forms.py][sample_recognize_custom_forms] and [sample_recognize_custom_forms_async.py][sample_recognize_custom_forms_async]|Recognize forms with your custom model|\n|[sample_train_model_without_labels.py][sample_train_model_without_labels] and [sample_train_model_without_labels_async.py][sample_train_model_without_labels_async]|Train a custom model with unlabeled data|\n|[sample_train_model_with_labels.py][sample_train_model_with_labels] and [sample_train_model_with_labels_async.py][sample_train_model_with_labels_async]|Train a custom model with labeled data|\n|[sample_manage_custom_models.py][sample_manage_custom_models] and [sample_manage_custom_models_async.py][sample_manage_custom_models_async]|Manage the custom models in your account|\n|[sample_copy_model.py][sample_copy_model] and [sample_copy_model_async.py][sample_copy_model_async]|Copy a custom model from one Form Recognizer resource to another|\n|[sample_create_composed_model.py][sample_create_composed_model] and [sample_create_composed_model_async.py][sample_create_composed_model_async]|Create a composed model from a collection of existing models trained with labels|\n|[sample_strongly_typing_recognized_form.py][sample_strongly_typing_recognized_form] and [sample_strongly_typing_recognized_form_async.py][sample_strongly_typing_recognized_form_async]|Use the fields in your recognized forms to create an object with strongly-typed fields|\n|[sample_get_bounding_boxes.py][sample_get_bounding_boxes] and [sample_get_bounding_boxes_async.py][sample_get_bounding_boxes_async]|Get info to visualize the outlines of form content and fields, which can be used for manual validation|\n|[sample_differentiate_output_models_trained_with_and_without_labels.py][sample_differentiate_output_models_trained_with_and_without_labels] and [sample_differentiate_output_models_trained_with_and_without_labels_async.py][sample_differentiate_output_models_trained_with_and_without_labels_async]|See the differences in output when using a custom model trained with labeled data and one trained with unlabeled data|\n|[sample_differentiate_output_labeled_tables.py][sample_differentiate_output_labeled_tables] and [sample_differentiate_output_labeled_tables_async.py][sample_differentiate_output_labeled_tables_async]|See the differences in output when using a custom model trained with fixed vs. dynamic table tags|\n|[sample_convert_to_and_from_dict.py][sample_convert_to_and_from_dict_v3_1] and [sample_convert_to_and_from_dict_async.py][sample_convert_to_and_from_dict_async_v3_1]|Convert model types to a dictionary that can be used to create JSON content, then convert the same dictionary back to the original model type|\n\n## Samples for client library versions 3.0.0 and below\n\nPlease see the samples [here][v3.0.0-samples-tag].\n\n## Prerequisites\n* Python 3.7 or later is required to use this package\n* You must have an [Azure subscription][azure_subscription] and an\n[Azure Form Recognizer account][azure_form_recognizer_account] to run these samples.\n\n## Setup\n\n1. Install the Azure Form Recognizer client library for Python with [pip][pip]:\n\n```bash\npip install azure-ai-formrecognizer --pre\n```\n\n2. Clone or download this sample repository\n3. Open the sample folder in Visual Studio Code or your IDE of choice.\n\n## Running the samples\n\n1. Open a terminal window and `cd` to the directory that the samples are saved in.\n2. Set the environment variables specified in the sample file you wish to run.\n3. Follow the usage described in the file, e.g. `python sample_analyze_receipts.py`\n\n## Next steps\n\nCheck out the [API reference documentation][python-fr-ref-docs] to learn more about\nwhat you can do with the Azure Form Recognizer client library.\n\n\n[azure_identity]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity\n\n[pip]: https://pypi.org/project/pip/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_form_recognizer_account]: https://docs.microsoft.com/azure/cognitive-services/cognitive-services-apis-create-account?tabs=singleservice%2Cwindows\n[azure_identity_pip]: https://pypi.org/project/azure-identity/\n[python-fr-ref-docs]: https://aka.ms/azsdk/python/formrecognizer/docs\n[get-endpoint-instructions]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/README.md#get-the-endpoint\n[get-key-instructions]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/README.md#get-the-api-key\n[changelog]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/CHANGELOG.md\n[v3.0.0-samples-tag]: https://github.com/Azure/azure-sdk-for-python/tree/azure-ai-formrecognizer_3.0.0/sdk/formrecognizer/azure-ai-formrecognizer/samples\n[migration-guide]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/formrecognizer/azure-ai-formrecognizer/MIGRATION_GUIDE.md\n\n<!-- V3.2+ links -->\n\n[sample_auth]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/samples/v3.2/sample_authentication.py\n[sample_auth_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/samples/v3.2/async_samples/sample_authentication_async.py\n[sample_analyze_layout]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/samples/v3.2/sample_analyze_layout.py\n[sample_analyze_layout_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/samples/v3.2/async_samples/sample_analyze_layout_async.py\n[sample_analyze_general_documents]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/samples/v3.2/sample_analyze_general_documents.py\n[sample_analyze_general_documents_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/samples/v3.2/async_samples/sample_analyze_general_documents_async.py\n[sample_analyze_invoices]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/samples/v3.2/sample_analyze_invoices.py\n[sample_analyze_invoices_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/samples/v3.2/async_samples/sample_analyze_invoices_async.py\n[sample_analyze_business_cards]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/samples/v3.2/sample_analyze_business_cards.py\n[sample_analyze_business_cards_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/samples/v3.2/async_samples/sample_analyze_business_cards_async.py\n[sample_analyze_identity_documents]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/samples/v3.2/sample_analyze_identity_documents.py\n[sample_analyze_identity_documents_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/samples/v3.2/async_samples/sample_analyze_identity_documents_async.py\n[sample_analyze_receipts]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/samples/v3.2/sample_analyze_receipts.py\n[sample_analyze_receipts_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/samples/v3.2/async_samples/sample_analyze_receipts_async.py\n[sample_analyze_custom_documents]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/samples/v3.2/sample_analyze_custom_documents.py\n[sample_analyze_custom_documents_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/samples/v3.2/async_samples/sample_analyze_custom_documents_async.py\n[sample_build_model]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/samples/v3.2/sample_build_model.py\n[sample_build_model_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/samples/v3.2/async_samples/sample_build_model_async.py\n[sample_composed_model]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/samples/v3.2/sample_compose_model.py\n[sample_composed_model_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/samples/v3.2/async_samples/sample_compose_model_async.py\n[sample_manage_models]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/samples/v3.2/sample_manage_models.py\n[sample_manage_models_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/samples/v3.2/async_samples/sample_manage_models_async.py\n[sample_get_operations]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/samples/v3.2/sample_get_operations.py\n[sample_get_operations_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/samples/v3.2/async_samples/sample_get_operations_async.py\n[sample_copy]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/samples/v3.2/sample_copy_model_to.py\n[sample_copy_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/samples/v3.2/async_samples/sample_copy_model_to_async.py\n[sample_get_words_on_document_line]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/samples/v3.2/sample_get_words_on_document_line.py\n[sample_get_words_on_document_line_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/samples/v3.2/async_samples/sample_get_words_on_document_line_async.py\n[sample_convert_to_and_from_dict_v3_2]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/samples/v3.2/sample_convert_to_and_from_dict.py\n[sample_convert_to_and_from_dict_async_v3_2]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/samples/v3.2/async_samples/sample_convert_to_and_from_dict_async.py\n[sample_analyze_read]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/samples/v3.2/sample_analyze_read.py\n[sample_analyze_read_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/samples/v3.2/async_samples/sample_analyze_read_async.py\n[sample_analyze_tax_us_w2]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/samples/v3.2/sample_analyze_tax_us_w2.py\n[sample_analyze_tax_us_w2_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/samples/v3.2/async_samples/sample_analyze_tax_us_w2_async.py\n[sample_get_elements_with_spans]: https://aka.ms/azsdk/python/formrecognizer/spansamplesync\n[sample_get_elements_with_spans_async]: https://aka.ms/azsdk/python/formrecognizer/spansampleasync\n[sample_classify_document]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/samples/v3.2/sample_classify_document.py\n[sample_classify_document_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/samples/v3.2/async_samples/sample_classify_document_async.py\n[sample_classify_document_from_url]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/samples/v3.2/sample_classify_document_from_url.py\n[sample_classify_document_from_url_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/samples/v3.2/async_samples/sample_classify_document_from_url_async.py\n[sample_build_classifier]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/samples/v3.2/sample_build_classifier.py\n[sample_build_classifier_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/samples/v3.2/async_samples/sample_build_classifier_async.py\n[sample_manage_classifiers]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/samples/v3.2/sample_manage_classifiers.py\n[sample_manage_classifiers_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/samples/v3.2/async_samples/sample_manage_classifiers_async.py\n\n\n<!-- V3.1 links -->\n[sample_authentication]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/formrecognizer/azure-ai-formrecognizer/samples/v3.1/sample_authentication_v3_1.py\n[sample_authentication_async]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/formrecognizer/azure-ai-formrecognizer/samples/v3.1/async_samples/sample_authentication_v3_1_async.py\n[sample_differentiate_output_models_trained_with_and_without_labels]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/formrecognizer/azure-ai-formrecognizer/samples/v3.1/sample_differentiate_output_models_trained_with_and_without_labels.py\n[sample_differentiate_output_models_trained_with_and_without_labels_async]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/formrecognizer/azure-ai-formrecognizer/samples/v3.1/async_samples/sample_differentiate_output_models_trained_with_and_without_labels_async.py\n[sample_get_bounding_boxes]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/formrecognizer/azure-ai-formrecognizer/samples/v3.1/sample_get_bounding_boxes.py\n[sample_get_bounding_boxes_async]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/formrecognizer/azure-ai-formrecognizer/samples/v3.1/async_samples/sample_get_bounding_boxes_async.py\n[sample_manage_custom_models]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/formrecognizer/azure-ai-formrecognizer/samples/v3.1/sample_manage_custom_models.py\n[sample_manage_custom_models_async]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/formrecognizer/azure-ai-formrecognizer/samples/v3.1/async_samples/sample_manage_custom_models_async.py\n[sample_recognize_content]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/formrecognizer/azure-ai-formrecognizer/samples/v3.1/sample_recognize_content.py\n[sample_recognize_content_async]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/formrecognizer/azure-ai-formrecognizer/samples/v3.1/async_samples/sample_recognize_content_async.py\n[sample_recognize_custom_forms]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/formrecognizer/azure-ai-formrecognizer/samples/v3.1/sample_recognize_custom_forms.py\n[sample_recognize_custom_forms_async]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/formrecognizer/azure-ai-formrecognizer/samples/v3.1/async_samples/sample_recognize_custom_forms_async.py\n[sample_recognize_receipts_from_url]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/formrecognizer/azure-ai-formrecognizer/samples/v3.1/sample_recognize_receipts_from_url.py\n[sample_recognize_receipts_from_url_async]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/formrecognizer/azure-ai-formrecognizer/samples/v3.1/async_samples/sample_recognize_receipts_from_url_async.py\n[sample_recognize_receipts]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/formrecognizer/azure-ai-formrecognizer/samples/v3.1/sample_recognize_receipts.py\n[sample_recognize_receipts_async]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/formrecognizer/azure-ai-formrecognizer/samples/v3.1/async_samples/sample_recognize_receipts_async.py\n[sample_recognize_business_cards]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/formrecognizer/azure-ai-formrecognizer/samples/v3.1/sample_recognize_business_cards.py\n[sample_recognize_business_cards_async]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/formrecognizer/azure-ai-formrecognizer/samples/v3.1/async_samples/sample_recognize_business_cards_async.py\n[sample_recognize_identity_documents]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/formrecognizer/azure-ai-formrecognizer/samples/v3.1/sample_recognize_identity_documents.py\n[sample_recognize_identity_documents_async]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/formrecognizer/azure-ai-formrecognizer/samples/v3.1/async_samples/sample_recognize_identity_documents_async.py\n[sample_recognize_invoices]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/formrecognizer/azure-ai-formrecognizer/samples/v3.1/sample_recognize_invoices.py\n[sample_recognize_invoices_async]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/formrecognizer/azure-ai-formrecognizer/samples/v3.1/async_samples/sample_recognize_invoices_async.py\n[sample_train_model_with_labels]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/formrecognizer/azure-ai-formrecognizer/samples/v3.1/sample_train_model_with_labels.py\n[sample_train_model_with_labels_async]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/formrecognizer/azure-ai-formrecognizer/samples/v3.1/async_samples/sample_train_model_with_labels_async.py\n[sample_train_model_without_labels]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/formrecognizer/azure-ai-formrecognizer/samples/v3.1/sample_train_model_without_labels.py\n[sample_train_model_without_labels_async]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/formrecognizer/azure-ai-formrecognizer/samples/v3.1/async_samples/sample_train_model_without_labels_async.py\n[sample_copy_model]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/formrecognizer/azure-ai-formrecognizer/samples/v3.1/sample_copy_model.py\n[sample_copy_model_async]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/formrecognizer/azure-ai-formrecognizer/samples/v3.1/async_samples/sample_copy_model_async.py\n[sample_strongly_typing_recognized_form]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/formrecognizer/azure-ai-formrecognizer/samples/v3.1/sample_strongly_typing_recognized_form.py\n[sample_strongly_typing_recognized_form_async]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/formrecognizer/azure-ai-formrecognizer/samples/v3.1/async_samples/sample_strongly_typing_recognized_form_async.py\n[sample_create_composed_model]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/samples/v3.1/sample_create_composed_model.py\n[sample_create_composed_model_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/samples/v3.1/async_samples/sample_create_composed_model_async.py\n[sample_differentiate_output_labeled_tables]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/samples/v3.1/sample_differentiate_output_labeled_tables.py\n[sample_differentiate_output_labeled_tables_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/samples/v3.1/async_samples/sample_differentiate_output_labeled_tables_async.py\n[sample_convert_to_and_from_dict_v3_1]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/samples/v3.1/sample_convert_to_and_from_dict_v3_1.py\n[sample_convert_to_and_from_dict_async_v3_1]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/samples/v3.1/async_samples/sample_convert_to_and_from_dict_v3_1_async.py\n", "repo_name": "formrecognizer/azure-ai-formrecognizer/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/samples", "language": ["Python"]}, {"README_text": "---\npage_type: sample\nlanguages:\n  - python\nproducts:\n  - azure\n  - azure-cognitive-services\n  - azure-health-insights\nurlFragment: healthinsights-cancerprofiling-samples\n---\n\n# Samples for Health Insights Cancer Profiling client library for Python\n\nThese code samples show common scenario operations with the Health Insights Cancer Profiling client library.\n\nThese sample programs show common scenarios for the Health Insights Cancer Profiling client's offerings.\n\n|**File Name**|**Description**|\n|----------------|-------------|\n|[sample_infer_cancer_profiling.py][sample_infer_cancer_profiling] and [sample_infer_cancer_profiling_async.py][sample_infer_cancer_profiling_async]|Infer cancer profiling.|\n\n## Prerequisites\n* Python 3.7 or later is required to use this package.\n* You must have an [Azure subscription][azure_subscription] and an [Azure Health Insights account][azure_healthinsights_account] to run these samples.\n\n## Setup\n\n1. Install the Azure Health Insights Cancer Profiling client library for Python with [pip][pip]:\n\n```bash\npip install azure-healthinsights-cancerprofiling\n```\n\n2. Clone or download this sample repository\n3. Open the sample folder in Visual Studio Code or your IDE of choice.\n\n## Running the samples\n\n1. Open a terminal window and `cd` to the directory that the samples are saved in.\n2. Set the environment variables specified in the sample file you wish to run.\n3. Follow the usage described in the file, e.g. `python sample_infer_cancer_profiling.py`\n\n## Next steps\n\nCheck out the [API reference documentation][python-fr-ref-docs] to learn more about\nwhat you can do with the Health Insights client library.\n\n[pip]: https://pypi.org/project/pip/\n[azure_subscription]: https://azure.microsoft.com/free/cognitive-services\n[azure_healthinsights_account]: https://docs.microsoft.com/azure/cognitive-services/cognitive-services-apis-create-account?tabs=singleservice%2Cwindows\n[sample_infer_cancer_profiling]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/healthinsights/azure-healthinsights-cancerprofiling/samples/sample_infer_cancer_profiling.py\n[sample_infer_cancer_profiling_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/healthinsights/azure-healthinsights-cancerprofiling/samples/async_samples/sample_infer_cancer_profiling_async.py\n\n", "repo_name": "healthinsights/azure-healthinsights-cancerprofiling/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/healthinsights/azure-healthinsights-cancerprofiling/samples", "language": ["Python"]}, {"README_text": "---\npage_type: sample\nlanguages:\n  - python\nproducts:\n  - azure\n  - azure-cognitive-services\n  - azure-health-insights\nurlFragment: healthinsights-clinicalmatching-samples\n---\n\n# Samples for Health Insights Clinical Matching client library for Python\n\nThese code samples show common scenario operations with the Health Insights Clinical Matching client library.\n\nThese sample programs show common scenarios for the Health Insights Clinical Matching client's offerings.\n\n|**File Name**|**Description**|\n|----------------|-------------|\n\n|[sample_match_trials_fhir.py][sample_match_trials_fhir] and [sample_match_trials_fhir_async.py][sample_match_trials_fhir_async]|Match trials fhir.|\n|[sample_match_trials_structured_coded_elements.py][sample_match_trials_structured_coded_elements] and [sample_match_trials_structured_coded_elements_async.py][sample_match_trials_structured_coded_elements_async] |Match trials structured coded elements.|\n\n\n## Prerequisites\n* Python 3.7 or later is required to use this package.\n* You must have an [Azure subscription][azure_subscription] and an [Azure Health Insights account][azure_healthinsights_account] to run these samples.\n\n## Setup\n\n1. Install the Azure Health Insights Clinical Matching client library for Python with [pip][pip]:\n\n```bash\npip install azure-healthinsights-clinicalmatching\n```\n\n2. Clone or download this sample repository\n3. Open the sample folder in Visual Studio Code or your IDE of choice.\n\n## Running the samples\n\n1. Open a terminal window and `cd` to the directory that the samples are saved in.\n2. Set the environment variables specified in the sample file you wish to run.\n3. Follow the usage described in the file, e.g. `python sample_match_trials_custom_trial.py`\n\n## Next steps\n\nCheck out the [API reference documentation][python-fr-ref-docs] to learn more about\nwhat you can do with the Health Insights client library.\n\n[pip]: https://pypi.org/project/pip/\n[azure_subscription]: https://azure.microsoft.com/free/cognitive-services\n[azure_healthinsights_account]: https://docs.microsoft.com/azure/cognitive-services/cognitive-services-apis-create-account?tabs=singleservice%2Cwindows\n[sample_match_trials_fhir]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/healthinsights/azure-healthinsights-clinicalmatching/samples/sample_match_trials_fhir.py\n[sample_match_trials_fhir_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/healthinsights/azure-healthinsights-clinicalmatching/samples/async_samples/sample_match_trials_fhir_async.py\n[sample_match_trials_structured_coded_elements]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/healthinsights/azure-healthinsights-clinicalmatching/samples/sample_match_trials_structured_coded_elements.py\n[sample_match_trials_structured_coded_elements_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/healthinsights/azure-healthinsights-clinicalmatching/samples/async_samples/sample_match_trials_structured_coded_elements_async.py\n\n\n", "repo_name": "healthinsights/azure-healthinsights-clinicalmatching/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/healthinsights/azure-healthinsights-clinicalmatching/samples", "language": ["Python"]}, {"README_text": "---\npage_type: sample\nlanguages:\n  - python\nproducts:\n  - azure\n  - azure-sdks\nurlFragment: identity-samples\n---\n\n# Azure Identity Library Python Samples\n\n## Prerequisites\n\nYou must have an [Azure subscription](https://azure.microsoft.com/free) and an\n[Azure Key Vault](https://azure.microsoft.com/services/key-vault/) to run\nthese samples. You can create a Key Vault in the\n[Azure Portal](https://portal.azure.com/#create/Microsoft.KeyVault) or with the\n[Azure CLI](https://docs.microsoft.com/azure/key-vault/secrets/quick-create-cli).\n\nAzure Key Vault is used only to demonstrate authentication. Azure Identity has\nthe same API for all compatible client libraries.\n\n## Setup\n\nTo run these samples, first install the Azure Identity and Key Vault Certificates\nand Secrets client libraries:\n\n```commandline\npip install azure-identity azure-keyvault-certificates azure-keyvault-secrets\n```\n\n## Contents\n| File | Description |\n|-------------|-------------|\n| control_interactive_prompts.py | demonstrates controlling when interactive credentials prompt for user interaction |\n| custom_credentials.py | demonstrates custom credential implementations using existing access tokens and an MSAL client |\n| key_vault_cert.py | demonstrates authenticating with a Key Vault certificate |\n| user_authentication.py | demonstrates user authentication and token cache persistence API for applications |\n| credential_creation_code_snippets.py | demonstrates how to instantiate various credentials |\n", "repo_name": "identity/azure-identity/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/samples", "language": ["Python"]}, {"README_text": "# Azure IoT Device Provisioning client library for Python Samples\n\nThese are code samples that show common usage of the Azure IoT Device Provisioning client library.\nThe async versions of any sample files will be appended with `_async` to show async client usage examples.\n\n\n## Prerequisites\n* Python 3.7 or later is required to use this package\n* You must have an [Azure subscription](https://azure.microsoft.com/free/) and an\n[Azure IoT Device Provisioning Service](https://learn.microsoft.com/azure/iot-dps/) resource to run these samples.\n\n## Setup\n\n1. Install the Azure IoT Device Provisioning client library for Python with [pip](https://pypi.org/project/pip/):\n\n```bash\npip install azure-iot-deviceprovisioning\n```\n\n2. Clone or download this sample repository\n3. Open the sample folder in Visual Studio Code or your IDE of choice.\n\n## Running the samples\n\n1. Open a terminal window and `cd` to the directory that the samples are saved in.\n2. Set the environment variables specified in the sample file you wish to run.\n3. Follow the usage described in the file, e.g. `python dps_service_sample_individual_enrollments.py`\n\n## Samples\n\n- [Client Initialization and Credentials](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/iothub/azure-iot-deviceprovisioning/samples/dps_service_sample_client_authentication.py) ([async version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/iothub/azure-iot-deviceprovisioning/samples/dps_service_sample_client_authentication_async.py)):\n    - Connection string authentication\n    - Using AzureNamedKey credentials\n    - Using AzureSasCredential authentication\n    - Using custom Active Directory credentials\n    - Using Default Azure Credentials\n\n- [Device Registration States](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/iothub/azure-iot-deviceprovisioning/samples/dps_service_sample_device_registration.py) ([async version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/iothub/azure-iot-deviceprovisioning/samples/dps_service_sample_device_registration_async.py)):\n    - Create a basic enrollment group\n    - Register a device (Requires device SDK)\n    - Query device registration states for an enrollment group\n    - Get device registration state\n    - Delete device registration state\n\n- [Enrollment Groups](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/iothub/azure-iot-deviceprovisioning/samples/dps_service_sample_enrollment_groups.py) ([async version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/iothub/azure-iot-deviceprovisioning/samples/dps_service_sample_enrollment_groups_async.py)):\n    - Create a symmetric key enrollment group\n    - Create an x509 certificate enrollment group\n    - Get an enrollment group\n    - Update an enrollment group\n    - Get enrollment group attestation mechanism\n    - Bulk enrollment group operations\n    - Delete enrollment group\n\n\n- [Individual Enrollments](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/iothub/azure-iot-deviceprovisioning/samples/dps_service_sample_individual_enrollments.py) ([async version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/iothub/azure-iot-deviceprovisioning/samples/dps_service_sample_individual_enrollments_async.py)):\n    - Create a symmetric key individual enrollment with initial twin properties\n    - Create a TPM attestation individual enrollment\n    - Create an x509 certificate individual enrollment\n    - Get an individual enrollment\n    - Update an individual enrollment\n    - Update reprovisioning policy of an enrollment\n    - Get an individual enrollment's attestation mechanism\n    - Bulk individual enrollment operations\n    - Delete an individual enrollment\n\n\n## Next steps\n\nCheck out the [API reference documentation](https://learn.microsoft.com/rest/api/iot-dps/) to learn more about\nwhat you can do with the Azure IoT Device Provisioning client library.", "repo_name": "iothub/azure-iot-deviceprovisioning/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/iothub/azure-iot-deviceprovisioning/samples", "language": ["Python"]}, {"README_text": "---\npage_type: sample\nlanguages:\n  - python\nproducts:\n  - azure\n  - azure-key-vault\nurlFragment: keyvault-administration-samples\n---\n\n# Azure Key Vault Administration Client Library Python Samples\n\n## Prerequisites\n\nYou must have an [Azure subscription](https://azure.microsoft.com/free) and an\n[Azure Managed HSM](https://docs.microsoft.com/azure/key-vault/managed-hsm/) to run\nthese samples. You can create a managed HSM with the\n[Azure CLI](https://docs.microsoft.com/azure/key-vault/managed-hsm/quick-create-cli).\n\n## Setup\n\nTo run these samples, first install the Key Vault Administration and Azure Identity libraries:\n\n```commandline\npip install azure-keyvault-administration azure-identity\n```\n\n[Azure Identity](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/README.md) is used for authenticating Key Vault clients. These samples use the\n[DefaultAzureCredential](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/README.md#defaultazurecredential), but any credential from the library can be used with Key Vault clients.\n\n## Contents\n| File | Description |\n|-------------|-------------|\n| [access_control_operations.py][access_control_operations_sample] | create/update/delete role definitions and role assignments |\n| [access_control_operations_async.py][access_control_operations_async_sample] | create/update/delete role definitions and role assignments with an async client |\n| [backup_restore_operations.py][backup_operations_sample] | full backup and restore |\n| [backup_restore_operations_async.py][backup_operations_async_sample] | full backup and restore with an async client |\n| [settings_operations.py][settings_operations_sample] | list and update Key Vault settings |\n| [settings_operations_async.py][settings_operations_async_sample] | list and update Key Vault settings with an async client |\n\n[access_control_operations_sample]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-administration/samples/access_control_operations.py\n[access_control_operations_async_sample]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-administration/samples/access_control_operations_async.py\n[backup_operations_sample]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-administration/samples/backup_restore_operations.py\n[backup_operations_async_sample]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-administration/samples/backup_restore_operations_async.py\n[settings_operations_sample]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-administration/samples/settings_operations.py\n[settings_operations_async_sample]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-administration/samples/settings_operations_async.py\n", "repo_name": "keyvault/azure-keyvault-administration/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-administration/samples", "language": ["Python"]}, {"README_text": "---\npage_type: sample\nlanguages:\n  - python\nproducts:\n  - azure\n  - azure-key-vault\nurlFragment: keyvault-certificates-samples\n---\n\n# Azure Key Vault Certificates Client Library Python Samples\n\n## Prerequisites\n\nYou must have an [Azure subscription](https://azure.microsoft.com/free) and an\n[Azure Key Vault](https://docs.microsoft.com/azure/key-vault/general/overview) to run\nthese samples. You can create a key vault with the\n[Azure CLI](https://docs.microsoft.com/azure/key-vault/general/quick-create-cli).\n\n## Setup\n\nTo run these samples, first install the Key Vault Certificates and Azure Identity libraries:\n\n```commandline\npip install azure-keyvault-certificates azure-identity\n```\n\n[Azure Identity](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/README.md) is used for authenticating Key Vault clients. These samples use the\n[DefaultAzureCredential](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/README.md#defaultazurecredential), but any credential from the library can be used with Key Vault clients.\n\n## Contents\n\n| File | Description |\n|-------------|-------------|\n| [hello_world.py][hello_world_sample] ([async version][hello_world_async_sample]) | create/get/update/delete certificates |\n| [backup_restore_operations.py][backup_operations_sample] ([async version][backup_operations_async_sample]) | back up and recover certificates |\n| [import_certificate.py][import_certificate_sample] ([async version][import_certificate_async_sample]) | import PKCS#12 (PFX) and PEM-formatted certificates into Key Vault |\n| [list_operations.py][list_operations_sample] ([async version][list_operations_async_sample]) | list certificates |\n| [recover_purge_operations.py][recover_purge_operations_sample] ([async version][recover_purge_operations_async_sample]) | recover and purge certificates |\n| [issuers.py][issuers_sample] ([async version][issuers_async_sample]) | manage certificate issuers |\n| [contacts.py][contacts_sample] ([async version][contacts_async_sample]) | manage certificate contacts |\n| [parse_certificate.py][parse_sample] ([async version][parse_async_sample]) | extract a certificate's private key |\n\n[backup_operations_sample]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-certificates/samples/backup_restore_operations.py\n[backup_operations_async_sample]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-certificates/samples/backup_restore_operations_async.py\n[hello_world_sample]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-certificates/samples/hello_world.py\n[hello_world_async_sample]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-certificates/samples/hello_world_async.py\n[import_certificate_sample]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-certificates/samples/import_certificate.py\n[import_certificate_async_sample]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-certificates/samples/import_certificate_async.py\n[keyvault_docs]: https://docs.microsoft.com/azure/key-vault/\n[list_operations_sample]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-certificates/samples/list_operations.py\n[list_operations_async_sample]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-certificates/samples/list_operations_async.py\n[recover_purge_operations_sample]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-certificates/samples/recover_purge_operations.py\n[recover_purge_operations_async_sample]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-certificates/samples/recover_purge_operations_async.py\n[contacts_sample]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-certificates/samples/contacts.py\n[contacts_async_sample]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-certificates/samples/contacts_async.py\n[issuers_sample]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-certificates/samples/issuers.py\n[issuers_async_sample]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-certificates/samples/issuers_async.py\n[parse_sample]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-certificates/samples/parse_certificate.py\n[parse_async_sample]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-certificates/samples/parse_certificate_async.py\n", "repo_name": "keyvault/azure-keyvault-certificates/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-certificates/samples", "language": ["Python"]}, {"README_text": "---\npage_type: sample\nlanguages:\n  - python\nproducts:\n  - azure\n  - azure-key-vault\nurlFragment: keyvault-keys-samples\n---\n\n# Azure Key Vault Keys Client Library Python Samples\n\n## Prerequisites\n\nYou must have an [Azure subscription](https://azure.microsoft.com/free) and an [Azure Key Vault](https://docs.microsoft.com/azure/key-vault/general/overview) to run these samples. You can create a key vault with the [Azure CLI](https://docs.microsoft.com/azure/key-vault/general/quick-create-cli).\n\nYou can also run these samples with a [Key Vault Managed HSM][managed_hsm]. If you need to create a Managed HSM, you can do so using the Azure CLI by following the steps in [this document][managed_hsm_cli].\n\n## Setup\n\nTo run these samples, first install the Key Vault Keys and Azure Identity libraries:\n\n```commandline\npip install azure-keyvault-keys azure-identity\n```\n\n[Azure Identity](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/README.md) is used for authenticating Key Vault clients. These samples use the\n[DefaultAzureCredential](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/README.md#defaultazurecredential), but any credential from the library can be used with Key Vault clients.\n\n## Contents\n\n| File | Description |\n|-------------|-------------|\n| [hello_world.py][hello_world_sample] ([async version][hello_world_async_sample]) | create/get/update/delete keys |\n| [list_operations.py][list_operations_sample] ([async version][list_operations_async_sample]) | basic list operations for keys |\n| [backup_restore_operations.py][backup_operations_sample] ([async version][backup_operations_async_sample]) | back up and recover keys |\n| [recover_purge_operations.py][recover_purge_sample] ([async version][recover_purge_async_sample]) | recover and purge keys |\n| [key_rotation.py][key_rotation_sample] ([async version][key_rotation_async_sample]) | create/update key rotation policies and rotate keys on-demand |\n| [send_request.py][send_request_sample] | use the `send_request` client method |\n\n\n[backup_operations_sample]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-keys/samples/backup_restore_operations.py\n[backup_operations_async_sample]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-keys/samples/backup_restore_operations_async.py\n\n[hello_world_sample]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-keys/samples/hello_world.py\n[hello_world_async_sample]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-keys/samples/hello_world_async.py\n\n[key_rotation_sample]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-keys/samples/key_rotation.py\n[key_rotation_async_sample]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-keys/samples/key_rotation_async.py\n\n[list_operations_sample]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-keys/samples/list_operations.py\n[list_operations_async_sample]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-keys/samples/list_operations_async.py\n\n[managed_hsm]: https://docs.microsoft.com/azure/key-vault/managed-hsm/overview\n[managed_hsm_cli]: https://docs.microsoft.com/azure/key-vault/managed-hsm/quick-create-cli\n\n[recover_purge_sample]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-keys/samples/recover_purge_operations.py\n[recover_purge_async_sample]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-keys/samples/recover_purge_operations_async.py\n\n[send_request_sample]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-keys/samples/send_request.py\n", "repo_name": "keyvault/azure-keyvault-keys/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-keys/samples", "language": ["Python"]}, {"README_text": "---\npage_type: sample\nlanguages:\n  - python\nproducts:\n  - azure\n  - azure-key-vault\nurlFragment: keyvault-secrets-samples\n---\n\n# Azure Key Vault Secrets Client Library Python Samples\n\n## Prerequisites\n\nYou must have an [Azure subscription](https://azure.microsoft.com/free) and an\n[Azure Key Vault](https://docs.microsoft.com/azure/key-vault/general/overview) to run\nthese samples. You can create a key vault with the\n[Azure CLI](https://docs.microsoft.com/azure/key-vault/general/quick-create-cli).\n\n## Setup\n\nTo run these samples, first install the Key Vault Secrets and Azure Identity libraries:\n\n```commandline\npip install azure-keyvault-secrets azure-identity\n```\n\n[Azure Identity](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/README.md) is used for authenticating Key Vault clients. These samples use the\n[DefaultAzureCredential](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/README.md#defaultazurecredential), but any credential from the library can be used with Key Vault clients.\n\n## Contents\n\n| File | Description |\n|-------------|-------------|\n| [hello_world.py][hello_world_sample] ([async version][hello_world_async_sample]) | create/get/update/delete secrets |\n| [list_operations.py][list_operations_sample] ([async version][list_operations_async_sample]) | basic list operations for secrets |\n| [backup_restore_operations.py][backup_operations_sample] ([async version][backup_operations_async_sample]) | back up and restore secrets |\n| [recover_purge_operations.py][recover_purge_sample] ([async version][recover_purge_async_sample]) | recover and purge secrets |\n\n[hello_world_sample]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-secrets/samples/hello_world.py\n[hello_world_async_sample]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-secrets/samples/hello_world_async.py\n[backup_operations_sample]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-secrets/samples/backup_restore_operations.py\n[backup_operations_async_sample]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-secrets/samples/backup_restore_operations_async.py\n[list_operations_sample]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-secrets/samples/list_operations.py\n[list_operations_async_sample]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-secrets/samples/list_operations_async.py\n[recover_purge_sample]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-secrets/samples/recover_purge_operations.py\n[recover_purge_async_sample]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-secrets/samples/recover_purge_operations_async.py\n", "repo_name": "keyvault/azure-keyvault-secrets/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-secrets/samples", "language": ["Python"]}, {"README_text": "# -------------------------------------------------------------------------\n# Copyright (c) Microsoft Corporation. All rights reserved.\n# Licensed under the MIT License. See License.txt in the project root for\n# license information.\n# --------------------------------------------------------------------------\n\n\"\"\"\nFILE: create_or_update_test_run.py\n\nDESCRIPTION:\n    This sample shows how to create or update a test run\n\nUSAGE:\n    python create_or_update_test_run.py\n\n    Set the environment variables with your own values before running the sample:\n    1)  AZURE_CLIENT_ID - client id\n    2)  AZURE_CLIENT_SECRET - client secret\n    3)  AZURE_TENANT_ID - tenant id for your Azure\n    4)  LOADTESTSERVICE_ENDPOINT - Data Plane endpoint for Loadtestservice\n\"\"\"\nfrom azure.developer.loadtesting import LoadTestRunClient\n\n# for details refer: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/loadtestservice/azure-developer\n# -loadtesting/README.md\nfrom azure.identity import DefaultAzureCredential\n\nimport os\nfrom dotenv import load_dotenv\n\nload_dotenv()\nLOADTESTSERVICE_ENDPOINT = os.environ[\"LOADTESTSERVICE_ENDPOINT\"]\n\nTEST_RUN_ID = \"some-test-run-id\"\nTEST_ID = \"my-sdk-test-id\"\n\n# Build a client through AAD and resource endpoint\nclient = LoadTestRunClient(credential=DefaultAzureCredential(), endpoint=LOADTESTSERVICE_ENDPOINT)\n\ntestRunPoller = client.begin_test_run(\n    TEST_RUN_ID,\n    {\n        \"testId\": TEST_ID,\n        \"displayName\": \"My New Load Test Run\",\n    }\n)\n\n#waiting for test run status to be completed with timeout = 3600 seconds\nresult = testRunPoller.result(3600)\n\nprint(result[\"status\"])\nprint(result)\n", "repo_name": "loadtesting/azure-developer-loadtesting/samples/begin_test_run.py", "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/loadtesting/azure-developer-loadtesting/samples/begin_test_run.py", "language": ["Python"]}, {"README_text": "---\npage_type: sample\nlanguages:\n  - python\nproducts:\n  - azure\n  - azure-maps-geolocation\n---\n\n# Samples for Azure Maps Geolocation client library for Python\n\nThese code samples show common scenario operations with the Azure Maps Geolocation client library.\n\nAuthenticate the client with a Azure Maps Geolocation [API Key Credential](https://docs.microsoft.com/azure/azure-maps/how-to-manage-account-keys):\n\n[samples authentication](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-geolocation/samples/sample_authentication.py) ([async version](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-geolocation/samples/async_samples/sample_authentication_async.py))\n\nThen for common Azure Maps Geolocation operations:\n\n* Perform get geolocation: [sample_get_country_code.py](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-geolocation/samples/sample_get_country_code.py) ([async version](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-geolocation/samples/async_samples/sample_get_country_code_async.py))\n\n## Prerequisites\n\n* Python 3.6 or later is required to use this package\n* You must have an [Azure subscription](https://azure.microsoft.com/free/)\n* A deployed Maps Services resource. You can create the resource via [Azure Portal][azure_portal] or [Azure CLI][azure_cli].\n\n## Setup\n\n1. Install the Azure Maps Geolocation client library for Python with [pip](https://pypi.org/project/pip/):\n\n   ```bash\n   pip install azure-maps-geolocation --pre\n   ```\n\n2. Clone or download [this repository](https://github.com/Azure/azure-sdk-for-python)\n3. Open this sample folder in [Visual Studio Code](https://code.visualstudio.com) or your IDE of choice.\n\n## Running the samples\n\n1. Open a terminal window and `cd` to the directory that the samples are saved in.\n2. Set the environment variables specified in the sample file you wish to run.\n3. Follow the usage described in the file, e.g. `python sample_get_country_code.py`\n\n## Next steps\n\nCheck out the [API reference documentation](https://docs.microsoft.com/rest/api/maps/geolocation)\nto learn more about what you can do with the Azure Maps Geolocation client library.\n\n<!-- LINKS -->\n[azure_portal]: https://portal.azure.com\n[azure_cli]: https://docs.microsoft.com/cli/azure\n", "repo_name": "maps/azure-maps-geolocation/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-geolocation/samples", "language": ["Python"]}, {"README_text": "---\npage_type: sample\nlanguages:\n  - python\nproducts:\n  - azure\n  - azure-maps-render\n---\n\n# Samples for Azure Maps Render client library for Python\n\nThese code samples show common scenario operations with the Azure Maps Render client library.\n\nAuthenticate the client with a Azure Maps Render [API Key Credential](https://docs.microsoft.com/azure/azure-maps/how-to-manage-account-keys):\n\n[samples authentication](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-render/samples/sample_authentication.py) ([async version](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-render/samples/async_samples/sample_authentication_async.py))\n\nThen for common Azure Maps Render operations:\n\n* Perform Get Map tile: [sample_get_map_tile.py](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-render/samples/sample_get_map_tile.py) ([async version](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-render/samples/async_samples/sample_get_map_tile_async.py))\n\n* Perform Get Map tileset: [sample_get_map_tileset.py](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-render/samples/sample_get_map_tileset.py) ([async version](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-render/samples/async_samples/sample_get_map_tileset_async.py))\n\n* Perform Get Map static image: [sample_get_map_static_image.py](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-render/samples/sample_get_map_static_image.py) ([async version](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-render/samples/async_samples/sample_get_map_static_image_async.py))\n\n* Perform Get Map Attribution: [sample_get_map_attribution.py](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-render/samples/sample_get_map_attribution.py) ([async version](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-render/samples/async_samples/sample_get_map_attribution_async.py))\n\n* Perform Get Copyright from bounding box: [sample_get_copyright_from_bounding_box.py](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-render/samples/sample_get_copyright_from_bounding_box.py) ([async version](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-render/samples/async_samples/sample_get_copyright_from_bounding_box_async.py))\n\n* Perform Get Copyright fpr world: [sample_get_copyright_for_world.py](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-render/samples/sample_get_copyright_for_world.py) ([async version](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-render/samples/async_samples/sample_get_copyright_for_world_async.py))\n\n* Perform Get Copyright for tile: [sample_get_copyright_for_tile.py](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-render/samples/sample_get_copyright_for_tile.py) ([async version](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-render/samples/async_samples/sample_get_copyright_for_tile_async.py))\n\n* Perform Get Copyright caption: [sample_get_copyright_caption.py](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-render/samples/sample_get_copyright_caption.py) ([async version](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-render/samples/async_samples/sample_get_copyright_caption_async.py))\n\n## Prerequisites\n\n* Python 3.6 or later is required to use this package\n* You must have an [Azure subscription](https://azure.microsoft.com/free/)\n* A deployed Maps Services resource. You can create the resource via [Azure Portal][azure_portal] or [Azure CLI][azure_cli].\n\n## Setup\n\n1. Install the Azure Maps Render client library for Python with [pip](https://pypi.org/project/pip/):\n\n   ```bash\n   pip install azure-maps-render --pre\n   ```\n\n2. Clone or download [this repository](https://github.com/Azure/azure-sdk-for-python)\n3. Open this sample folder in [Visual Studio Code](https://code.visualstudio.com) or your IDE of choice.\n\n## Running the samples\n\n1. Open a terminal window and `cd` to the directory that the samples are saved in.\n2. Set the environment variables specified in the sample file you wish to run.\n3. Follow the usage described in the file, e.g. `python sample_get_map_tile.py`\n\n## Next steps\n\nCheck out the [API reference documentation](https://docs.microsoft.com/rest/api/maps/render)\nto learn more about what you can do with the Azure Maps Render client library.\n\n<!-- LINKS -->\n[azure_portal]: https://portal.azure.com\n[azure_cli]: https://docs.microsoft.com/cli/azure\n", "repo_name": "maps/azure-maps-render/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-render/samples", "language": ["Python"]}, {"README_text": "---\npage_type: sample\nlanguages:\n  - python\nproducts:\n  - azure\n  - azure-maps-route\n---\n\n# Samples for Azure Maps Route client library for Python\n\nThese code samples show common scenario operations with the Azure Maps Route client library.\n\nAuthenticate the client with a Azure Maps Route [API Key Credential](https://docs.microsoft.com/azure/azure-maps/how-to-manage-account-keys):\n\n[samples authentication](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-route/samples/sample_authentication.py) ([async version](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-route/samples/async_samples/sample_authentication_async.py))\n\nThen for common Azure Maps Route operations:\n\n* Get Route Directions: [sample_get_route_directions.py](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-route/samples/sample_get_route_directions.py) ([async version](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-route/samples/async_samples/sample_get_route_directions_async.py))\n\n* Get Route Range: [sample_get_route_range.py](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-route/samples/sample_get_route_range.py) ([async version](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-route/samples/async_samples/sample_get_route_range_async.py))\n\n* Request Route Matrix: [sample_request_route_matrix.py](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-route/samples/sample_get_route_matrix.py) ([async version](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-route/samples/async_samples/sample_get_route_matrix_async.py))\n\n* Request Begin Get Route Directions batch [sample_begin_get_route_directions_batch(\n.py](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-route/samples/sample_begin_get_route_directions_batch.py) ([async version](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-route/samples/async_samples/sample_begin_get_route_directions_batch_async.py))\n\n* Request Get Route Directions Batch Sync [sample_get_route_directions_batch_sync.py](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-route/samples/sample_get_route_directions_batch_sync.py) ([async version](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-route/samples/async_samples/sample_get_route_directions_batch_sync_async.py))\n\n## Prerequisites\n\n* Python 3.6 or later is required to use this package\n* You must have an [Azure subscription](https://azure.microsoft.com/free/)\n* A deployed Maps Services resource. You can create the resource via [Azure Portal][azure_portal] or [Azure CLI][azure_cli].\n\n## Setup\n\n1. Install the Azure Maps Route client library for Python with [pip](https://pypi.org/project/pip/):\n\n   ```bash\n   pip install azure-maps-route --pre\n   ```\n\n2. Clone or download [this repository](https://github.com/Azure/azure-sdk-for-python)\n3. Open this sample folder in [Visual Studio Code](https://code.visualstudio.com) or your IDE of choice.\n\n## Running the samples\n\n1. Open a terminal window and `cd` to the directory that the samples are saved in.\n2. Set the environment variables specified in the sample file you wish to run.\n3. Follow the usage described in the file, e.g. `python sample_fuzzy_route.py`\n\n## Next steps\n\nCheck out the [API reference documentation](https://docs.microsoft.com/rest/api/maps/route)\nto learn more about what you can do with the Azure Maps Route client library.\n\n<!-- LINKS -->\n[azure_portal]: https://portal.azure.com\n[azure_cli]: https://docs.microsoft.com/cli/azure\n", "repo_name": "maps/azure-maps-route/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-route/samples", "language": ["Python"]}, {"README_text": "---\npage_type: sample\nlanguages:\n  - python\nproducts:\n  - azure\n  - azure-maps-search\n---\n\n# Samples for Azure Maps Search client library for Python\n\nThese code samples show common scenario operations with the Azure Maps Search client library.\n\nAuthenticate the client with a Azure Maps Search [API Key Credential](https://docs.microsoft.com/azure/azure-maps/how-to-manage-account-keys):\n\n[samples authentication](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-search/samples/sample_authentication.py) ([async version](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-search/samples/async_samples/sample_authentication_async.py))\n\nThen for common Azure Maps Search operations:\n\n* Perform fuzzy search: [sample_fuzzy_search.py](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-search/samples/sample_fuzzy_search.py) ([async version](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-search/samples/async_samples/sample_fuzzy_search_async.py))\n\n* Perform get POI categories search: [sample_get_point_of_interest_categories.py](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-search/samples/sample_get_point_of_interest_categories.py) ([async version](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-search/samples/async_samples/sample_get_point_of_interest_categories_async.py))\n\n* Perform reverse search address: [sample_reverse_search_address.py](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-search/samples/sample_reverse_search_address.py) ([async version](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-search/samples/async_samples/sample_reverse_search_address_async.py))\n\n* Perform reverse search cross street address: [sample_reverse_search_cross_street_address.py](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-search/samples/sample_reverse_search_cross_street_address.py) ([async version](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-search/samples/async_samples/sample_reverse_search_cross_street_address_async.py))\n\n* Get search nearby POI: [sample_search_nearby_point_of_interest.py](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-search/samples/sample_search_nearby_point_of_interest.py)) ([async version](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-search/samples/async_samples/sample_search_nearby_point_of_interest_async.py))\n\n* Get search POI: [sample_search_point_of_interest.py](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-search/samples/sample_search_point_of_interest.py) ([async version](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-search/samples/async_samples/sample_search_point_of_interest_async.py))\n\n* Get search POI category: [sample_search_point_of_interest_category.py](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-search/samples/sample_search_point_of_interest_category.py) ([async version](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-search/samples/async_samples/sample_search_point_of_interest_category_async.py))\n\n* Perform search with structured address: [sample_search_structured_address.py](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-search/samples/sample_search_structured_address.py) ([async version](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-search/samples/async_samples/sample_search_structured_address_async.py))\n\n* Search inside Geometry: [sample_search_inside_geometry.py](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-search/samples/sample_search_inside_geometry.py) ([async version](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-search/samples/async_samples/sample_search_inside_geometry_async.py))\n\n## Prerequisites\n\n* Python 3.6 or later is required to use this package\n* You must have an [Azure subscription](https://azure.microsoft.com/free/)\n* A deployed Maps Services resource. You can create the resource via [Azure Portal][azure_portal] or [Azure CLI][azure_cli].\n\n## Setup\n\n1. Install the Azure Maps Search client library for Python with [pip](https://pypi.org/project/pip/):\n\n   ```bash\n   pip install azure-maps-search --pre\n   ```\n\n2. Clone or download [this repository](https://github.com/Azure/azure-sdk-for-python)\n3. Open this sample folder in [Visual Studio Code](https://code.visualstudio.com) or your IDE of choice.\n\n## Running the samples\n\n1. Open a terminal window and `cd` to the directory that the samples are saved in.\n2. Set the environment variables specified in the sample file you wish to run.\n3. Follow the usage described in the file, e.g. `python sample_fuzzy_search.py`\n\n## Next steps\n\nCheck out the [API reference documentation](https://docs.microsoft.com/rest/api/maps/search)\nto learn more about what you can do with the Azure Maps Search client library.\n\n<!-- LINKS -->\n[azure_portal]: https://portal.azure.com\n[azure_cli]: https://docs.microsoft.com/cli/azure\n", "repo_name": "maps/azure-maps-search/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-search/samples", "language": ["Python"]}, {"README_text": "\nimport json\nimport os \nfrom azure.media.analyticsedge import *\nfrom azure.iot.hub import IoTHubRegistryManager #run pip install azure-iot-hub to get this package\nfrom azure.iot.hub.models import CloudToDeviceMethod, CloudToDeviceMethodResult\nfrom datetime import time\n\ndevice_id = \"device-id\"\nmodule_d = \"module-id\"\nconnection_string = \"connection-string\"\ngraph_instance_name = \"graphInstance1\"\ngraph_topology_name = \"graphTopology1\"\ngraph_url = \"rtsp://sample-url-from-camera\"\n\ndef build_graph_topology():\n    graph_properties = MediaGraphTopologyProperties()\n    graph_properties.description = \"Continuous video recording to an Azure Media Services Asset\"\n    user_name_param = MediaGraphParameterDeclaration(name=\"rtspUserName\",type=\"String\",default=\"dummyusername\")\n    password_param = MediaGraphParameterDeclaration(name=\"rtspPassword\",type=\"SecretString\",default=\"dummypassword\")\n    url_param = MediaGraphParameterDeclaration(name=\"rtspUrl\",type=\"String\",default=\"rtsp://www.sample.com\")\n\n    source = MediaGraphRtspSource(name=\"rtspSource\", endpoint=MediaGraphUnsecuredEndpoint(url=\"${rtspUrl}\",credentials=MediaGraphUsernamePasswordCredentials(username=\"${rtspUserName}\",password=\"${rtspPassword}\")))\n    node = MediaGraphNodeInput(node_name=\"rtspSource\")\n    sink = MediaGraphAssetSink(name=\"assetsink\", inputs=[node],asset_name_pattern='sampleAsset-${System.GraphTopologyName}-${System.GraphInstanceName}', segment_length=\"PT0H0M30S\",local_media_cache_maximum_size_mi_b=2048,local_media_cache_path=\"/var/lib/azuremediaservices/tmp/\")\n    graph_properties.parameters = [user_name_param, password_param, url_param]\n    graph_properties.sources = [source]\n    graph_properties.sinks = [sink]\n    graph = MediaGraphTopology(name=graph_topology_name,properties=graph_properties)\n\n    return graph\n\ndef build_graph_instance():\n    url_param = MediaGraphParameterDefinition(name=\"rtspUrl\", value=graph_url)\n    pass_param = MediaGraphParameterDefinition(name=\"rtspPassword\", value='testpass')\n    graph_instance_properties = MediaGraphInstanceProperties(description=\"Sample graph description\", topology_name=graph_topology_name, parameters=[url_param])\n\n    graph_instance = MediaGraphInstance(name=graph_instance_name, properties=graph_instance_properties)\n\n    return graph_instance\n\ndef invoke_method_helper(method):\n    direct_method = CloudToDeviceMethod(method_name=method.method_name, payload=method.serialize())\n    registry_manager = IoTHubRegistryManager(connection_string)\n\n    payload = registry_manager.invoke_device_module_method(device_id, module_d, direct_method).payload\n    if payload is not None and 'error' in payload:\n        print(payload['error'])\n        return None\n\n    return payload\n\ndef main():\n    graph_topology = build_graph_topology()\n    graph_instance = build_graph_instance()\n\n    try:\n        set_graph_response = invoke_method_helper(MediaGraphTopologySetRequest(graph=graph_topology))\n        \n        list_graph_response = invoke_method_helper(MediaGraphTopologyListRequest())\n        if list_graph_response:\n            list_graph_result = MediaGraphTopologyCollection.deserialize(list_graph_response)\n\n        get_graph_response = invoke_method_helper(MediaGraphTopologyGetRequest(name=graph_topology_name))\n        if get_graph_response:\n            get_graph_result = MediaGraphTopology.deserialize(get_graph_response)\n\n        set_graph_instance_response = invoke_method_helper(MediaGraphInstanceSetRequest(instance=graph_instance))\n\n        activate_graph_instance_response = invoke_method_helper(MediaGraphInstanceActivateRequest(name=graph_instance_name))\n\n        get_graph_instance_response = invoke_method_helper(MediaGraphInstanceGetRequest(name=graph_instance_name))\n        if get_graph_instance_response:\n            get_graph_instance_result = MediaGraphInstance.deserialize(get_graph_instance_response)\n\n        deactivate_graph_instance_response = invoke_method_helper(MediaGraphInstanceDeActivateRequest(name=graph_instance_name))\n\n        delete_graph_instance_response = invoke_method_helper(MediaGraphInstanceDeleteRequest(name=graph_instance_name))\n\n        delete_graph_response = invoke_method_helper(MediaGraphTopologyDeleteRequest(name=graph_topology_name))\n\n    except Exception as ex:\n        print(ex)\n\nif __name__ == \"__main__\":\n    main()", "repo_name": "media/azure-media-analytics-edge/samples/sample_lva.py", "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/media/azure-media-analytics-edge/samples/sample_lva.py", "language": ["Python"]}, {"README_text": "---\npage_type: sample\nlanguages:\n  - python\nproducts:\n  - azure\n  - azure-cognitive-services\nurlFragment: metricsadvisor-samples\n---\n\n# Samples for Azure Metrics Advisor client library for Python\n\nThese code samples show common scenario operations with the Azure Metrics Advisor client library.\n\n|**File Name**|**Description**|\n|----------------|-------------|\n|[sample_alert_configuration.py][sample_alert_configuration] and [sample_alert_configuration_async.py][sample_alert_configuration_async]|Create, list, get, update, and delete anomaly alert configurations. Also list alerts and anomalies for a specific alert configuration.|\n|[sample_authentication.py][sample_authentication] and [sample_authentication_async.py][sample_authentication_async]|Authenticate the clients|\n|[sample_data_feeds.py][sample_data_feeds] and [sample_data_feeds_async.py][sample_data_feeds_async]|Create, list, get, update, and delete data feeds|\n|[sample_datasource_credentials.py][sample_datasource_credentials] and [sample_datasource_credentials_async.py][sample_datasource_credentials_async]|Create, list, get, update, and delete datasource credentials|\n|[sample_detection_configuration.py][sample_detection_configuration] and [sample_detection_configuration_async.py][sample_detection_configuration_async]|Create, list, get, update, and delete anomaly detection configurations|\n|[sample_feedback.py][sample_feedback] and [sample_feedback_async.py][sample_feedback_async]|Add, get, and list feedback for the anomaly detection result|\n|[sample_hooks.py][sample_hooks] and [sample_hooks_async.py][sample_hooks_async]|Create, list, get, update, and delete notification hooks|\n|[sample_incidents.py][sample_incidents] and [sample_incidents_async.py][sample_incidents_async]|List incidents and root causes|\n|[sample_ingestion.py][sample_ingestion] and [sample_ingestion_async.py][sample_ingestion_async]|Check on the data feed ingestion progress, list ingestion statuses, and refresh data feed ingestion|\n|[sample_queries.py][sample_queries] and [sample_queries_async.py][sample_queries_async]|Query dimensions/data/status/etc.|\n\n## Prerequisites\n\n* Python 3.7 or later is required to use this package\n* You must have an [Azure subscription][azure_subscription] and an\n[Azure Metrics Advisor account][portal_metrics_advisor_account] to run these samples.\n\n## Setup\n\n1. Install the Azure Metrics Advisor client library for Python with [pip][pip]:\n\n```bash\npip install azure-ai-metricsadvisor\n```\n\n2. Clone or download this sample repository\n3. Open the sample folder in Visual Studio Code or your IDE of choice.\n\n## Running the samples\n\n1. Open a terminal window and `cd` to the directory that the samples are saved in.\n2. Set the environment variables specified in the sample file you wish to run.\n3. Follow the usage described in the file, e.g. `python sample_data_feeds.py`\n\n## Next steps\n\nCheck out the [reference documentation][reference_documentation] to learn more about\nwhat you can do with the Azure Metrics Advisor client library.\n\n[pip]: https://pypi.org/project/pip/\n[azure_subscription]: https://azure.microsoft.com/free/\n[portal_metrics_advisor_account]: https://ms.portal.azure.com/#create/Microsoft.CognitiveServicesMetricsAdvisor\n[reference_documentation]: https://aka.ms/azsdk/python/metricsadvisor/docs\n\n[sample_authentication]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/metricsadvisor/azure-ai-metricsadvisor/samples/sample_authentication.py\n[sample_authentication_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/metricsadvisor/azure-ai-metricsadvisor/samples/async_samples/sample_authentication_async.py\n[sample_data_feeds]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/metricsadvisor/azure-ai-metricsadvisor/samples/sample_data_feeds.py\n[sample_data_feeds_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/metricsadvisor/azure-ai-metricsadvisor/samples/async_samples/sample_data_feeds_async.py\n[sample_ingestion]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/metricsadvisor/azure-ai-metricsadvisor/samples/sample_ingestion.py\n[sample_ingestion_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/metricsadvisor/azure-ai-metricsadvisor/samples/async_samples/sample_ingestion_async.py\n[sample_detection_configuration]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/metricsadvisor/azure-ai-metricsadvisor/samples/sample_detection_configuration.py\n[sample_detection_configuration_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/metricsadvisor/azure-ai-metricsadvisor/samples/async_samples/sample_detection_configuration_async.py\n[sample_alert_configuration]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/metricsadvisor/azure-ai-metricsadvisor/samples/sample_alert_configuration.py\n[sample_alert_configuration_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/metricsadvisor/azure-ai-metricsadvisor/samples/async_samples/sample_alert_configuration_async.py\n[sample_hooks]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/metricsadvisor/azure-ai-metricsadvisor/samples/sample_hooks.py\n[sample_hooks_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/metricsadvisor/azure-ai-metricsadvisor/samples/async_samples/sample_hooks_async.py\n[sample_feedback]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/metricsadvisor/azure-ai-metricsadvisor/samples/sample_feedback.py\n[sample_feedback_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/metricsadvisor/azure-ai-metricsadvisor/samples/async_samples/sample_feedback_async.py\n[sample_queries]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/metricsadvisor/azure-ai-metricsadvisor/samples/sample_queries.py\n[sample_queries_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/metricsadvisor/azure-ai-metricsadvisor/samples/async_samples/sample_queries_async.py\n[sample_datasource_credentials]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/metricsadvisor/azure-ai-metricsadvisor/samples/sample_datasource_credentials.py\n[sample_datasource_credentials_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/metricsadvisor/azure-ai-metricsadvisor/samples/async_samples/sample_datasource_credentials_async.py\n[sample_incidents]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/metricsadvisor/azure-ai-metricsadvisor/samples/sample_incidents.py\n[sample_incidents_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/metricsadvisor/azure-ai-metricsadvisor/samples/async_samples/sample_incidents_async.py\n", "repo_name": "metricsadvisor/azure-ai-metricsadvisor/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/metricsadvisor/azure-ai-metricsadvisor/samples", "language": ["Python"]}, {"README_text": "\n# -------------------------------------------------------------------------\n# Copyright (c) Microsoft Corporation. All rights reserved.\n# Licensed under the MIT License. See License.txt in the project root for\n# license information.\n# --------------------------------------------------------------------------\n\n\"\"\"\nFILE: client_sample_async.py\nDESCRIPTION:\n    These samples demonstrate creating a client and requesting a token.\n\nUSAGE:\n    python client_sample_async.py\n    Set the environment variables with your own values before running the sample:\n    1) MIXEDREALITY_ACCOUNT_DOMAIN - the Mixed Reality account domain.\n    2) MIXEDREALITY_ACCOUNT_ID - the Mixed Reality account identifier.\n    3) MIXEDREALITY_ACCOUNT_KEY - the Mixed Reality account primary or secondary key.\n\"\"\"\n\n\nimport os\nimport asyncio\n\n\nclass ClientSamplesAsync(object):\n    from azure.core.credentials import AzureKeyCredential\n\n    account_domain = os.environ.get(\"MIXEDREALITY_ACCOUNT_DOMAIN\", None)\n    if not account_domain:\n        raise ValueError(\"Set MIXEDREALITY_ACCOUNT_DOMAIN env before run this sample.\")\n\n    account_id = os.environ.get(\"MIXEDREALITY_ACCOUNT_ID\", None)\n    if not account_id:\n        raise ValueError(\"Set MIXEDREALITY_ACCOUNT_ID env before run this sample.\")\n\n    account_key = os.environ.get(\"MIXEDREALITY_ACCOUNT_KEY\", None)\n    if not account_key:\n        raise ValueError(\"Set MIXEDREALITY_ACCOUNT_KEY env before run this sample.\")\n\n    key_credential = AzureKeyCredential(account_key)\n\n    def create_client(self):\n        # [START create_client]\n        from azure.mixedreality.authentication.aio import MixedRealityStsClient\n        client = MixedRealityStsClient(self.account_id, self.account_domain, self.key_credential)\n        # [END create_client]\n\n        print(\"client created\")\n\n    async def get_token(self):\n        from azure.mixedreality.authentication.aio import MixedRealityStsClient\n        client = MixedRealityStsClient(self.account_id, self.account_domain, self.key_credential)\n\n        async with client:\n            # [START get_token]\n            access_token = await client.get_token()\n            # [END get_token]\n\n        print(\"token retrieved: \" + access_token.token)\n\n\nasync def main():\n    sample = ClientSamplesAsync()\n    sample.create_client()\n    await sample.get_token()\n\nif __name__ == '__main__':\n    asyncio.run(main())\n", "repo_name": "mixedreality/azure-mixedreality-authentication/samples/client_sample async.py", "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/mixedreality/azure-mixedreality-authentication/samples/client_sample%20async.py", "language": ["Python"]}, {"README_text": "---\npage_type: sample\nlanguages:\n  - python\nproducts:\n  - azure\n  - azure-ai-ml\nurlFragment: ml-samples\n---\n\n# Azure Machine Learning Client Library for Python Samples\n\nThese are code samples that show common scenario operations with the Azure Machine Learning Client Library for Python.\n\nThese samples provide example code for additional scenarios commonly encountered while working with Machine Learning Library:\n\n* [ml_samples_authentication_sovereign_cloud.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/ml/azure-ai-ml/samples/ml_samples_authentication_sovereign_cloud.py) - Examples for creating MLClient for non public cloud:\n  * Set up a MLClient\n  * List workspaces in the subscription.\n\n## Prerequisites\n\n* Python 3.7 or later is required to use this package\n* You must have an [Azure subscription](https://azure.microsoft.com/free/) to run these samples.\n\n## Setup\n\n1. Install the Azure Machine Learning Client Library for Python with [pip](https://pypi.org/project/pip/):\n\n   ```bash\n    pip install azure-ai-ml\n    pip install azure-identity\n    ```\n\n2. Clone or download this sample repository\n3. Open the sample folder in Visual Studio Code or your IDE of choice.\n\n## Running the samples\n\n1. Open a terminal window and `cd` to the directory that the samples are saved in.\n2. Set the environment variables specified in the sample file you wish to run.\n3. Follow the usage described in the file, e.g. `python ml_samples_authentication_sovereign_cloud.py`\n\n## Next steps\n\nCheck out the [API reference documentation](https://learn.microsoft.com/python/api/overview/azure/ai-ml-readme?view=azure-python) to learn more about what you can do with the Azure Machine Learning Client Library.\n", "repo_name": "ml/azure-ai-ml/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/ml/azure-ai-ml/samples", "language": ["Python"]}, {"README_text": "# Azure IoT Models Repository Library Samples\n\nThis directory contains samples showing how to use the features of the Azure IoT Models Repository Library.\n\nThe pre-configured endpoints and DTMIs within the samples refer to example models that can be found on [devicemodels.azure.com](https://devicemodels.azure.com/). These values can be replaced to reflect the locations of your own models, wherever they may be.\n\n## ModelsRepositoryClient Samples\n* [get_models_sample.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/modelsrepository/azure-iot-modelsrepository/samples/get_models_sample.py) - Retrieve a model/models (and possibly dependencies) from a Model Repository, given a DTMI or DTMIs\n\n* [client_configuration_sample.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/modelsrepository/azure-iot-modelsrepository/samples/client_configuration_sample.py)- Configure the client to work with local or remote repositories, as well as custom policies and transports\n\n* [dtmi_conventions_sample.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/modelsrepository/azure-iot-modelsrepository/samples/dtmi_conventions_sample.py) - Use the `dtmi_conventions` module to manipulate and check DTMIs\n", "repo_name": "modelsrepository/azure-iot-modelsrepository/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/modelsrepository/azure-iot-modelsrepository/samples", "language": ["Python"]}, {"README_text": "---\npage_type: sample\nlanguages:\n  - python\nproducts:\n    - azure\n    - azure-monitor\nurlFragment: ingestion-azuremonitor-samples\n---\n\n# Azure Monitor Ingestion client library Python samples\n\nThis library allows you to send data from virtually any source to supported built-in tables or to custom tables that you create in Log Analytics workspaces. The following code samples show common scenarios with the Azure Monitor Ingestion client library.\n\n|**File Name**|**Description**|\n|-------------|---------------|\n|[sample_send_small_logs.py][sample_send_small_logs] and [sample_send_small_logs_async.py][sample_send_small_logs_async]|Send a small number of logs to a Log Analytics workspace.|\n|[sample_custom_error_callback.py][sample_custom_error_callback] and [sample_custom_error_callback_async.py][sample_custom_error_callback_async]|Use error callbacks to customize how errors are handled during upload. |\n|[sample_upload_file_contents.py][sample_upload_file_contents] and [sample_upload_file_contents_async.py][sample_upload_file_contents_async]|Upload the contents of a file to a Log Analytics workspace.|\n|[sample_upload_pandas_dataframe.py][sample_upload_pandas_dataframe] and [sample_upload_pandas_dataframe_async.py][sample_upload_pandas_dataframe_async]|Upload data in a pandas DataFrame to a Log Analytics workspace.|\n\n## Prerequisites\n\n- Python 3.7 or later\n- An [Azure subscription][azure_subscription]\n- An [Azure Log Analytics workspace][azure_monitor_create_using_portal]\n- A [Data Collection Endpoint (DCE)][data_collection_endpoint]\n- A [Data Collection Rule (DCR)][data_collection_rule]\n\n## How to run the samples\n\n### Install the dependencies\n\nTo run the samples, you need to install the following dependencies:\n```bash\npip install azure-monitor-ingestion azure-identity pandas\n```\n\nTo run the async samples, you need an asynchronous HTTP framework like `aiohttp`:\n\n```bash\npip install aiohttp\n```\n\n### Set up authentication\n\nWe use [azure-identity][azure_identity]'s [DefaultAzureCredential][azure_identity_default_azure_credential] to authenticate. Ensure that your service principal or managed identity has the `Monitoring Metrics Publisher` role assigned on the Data Collection Rule resource. If you are using a service principal, set the following environment variables:\n\n```bash\nAZURE_TENANT_ID=\"your Azure AD tenant (directory) ID\"\nAZURE_CLIENT_ID=\"your Azure AD client (application) ID\"\nAZURE_CLIENT_SECRET=\"your Azure AD client secret\"\n```\n\n### Set up additional environment variables\n\nChange and set the following environment variables to match your configuration:\n\n```bash\nDATA_COLLECTION_ENDPOINT=\"your data collection endpoint\"\nLOGS_DCR_RULE_ID=\"your data collection rule immutable ID\"\nLOGS_DCR_STREAM_NAME=\"your data collection rule stream name\"\n```\n\n### Run the samples\n\nNavigate to the directory that the samples are saved in, and follow the usage described in the file. For example, `python sample_send_small_logs.py`.\n\n## Next steps\n\nTo learn more about Azure Monitor, see the [Azure Monitor service documentation][azure_monitor_docs] and the [Logs Ingestion API overview][azure_monitor_logs_ingestion_overview].\n\n\n<!-- Sample links -->\n[sample_send_small_logs]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-ingestion/samples/sample_send_small_logs.py\n[sample_send_small_logs_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-ingestion/samples/async_samples/sample_send_small_logs_async.py\n[sample_custom_error_callback]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-ingestion/samples/sample_custom_error_callback.py\n[sample_custom_error_callback_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-ingestion/samples/async_samples/sample_custom_error_callback_async.py\n[sample_upload_file_contents]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-ingestion/samples/sample_upload_file_contents.py\n[sample_upload_file_contents_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-ingestion/samples/async_samples/sample_upload_file_contents_async.py\n[sample_upload_pandas_dataframe]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-ingestion/samples/sample_upload_pandas_dataframe.py\n[sample_upload_pandas_dataframe_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-ingestion/samples/async_samples/sample_upload_pandas_dataframe_async.py\n\n<!-- External links -->\n[azure_identity]: https://pypi.org/project/azure-identity/\n[azure_identity_default_azure_credential]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity#defaultazurecredential\n[azure_monitor_create_using_portal]: https://docs.microsoft.com/azure/azure-monitor/logs/quick-create-workspace\n[azure_monitor_docs]: https://docs.microsoft.com/azure/azure-monitor/\n[azure_monitor_logs_ingestion_overview]: https://learn.microsoft.com/azure/azure-monitor/logs/logs-ingestion-api-overview\n[azure_subscription]: https://azure.microsoft.com/free/\n[data_collection_endpoint]: https://learn.microsoft.com/azure/azure-monitor/essentials/data-collection-endpoint-overview\n[data_collection_rule]: https://learn.microsoft.com/azure/azure-monitor/essentials/data-collection-rule-overview\n", "repo_name": "monitor/azure-monitor-ingestion/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-ingestion/samples", "language": ["Python"]}, {"README_text": "---\npage_type: sample\nlanguages:\n  - python\nproducts:\n    - azure\n    - azure-monitor\nurlFragment: query-azuremonitor-samples\n---\n\n# Azure Monitor Query client library Python samples\n\n## Samples\n\nThe following code samples show common scenarios with the Azure Monitor Query client library.\n\nFor examples on authenticating with the Azure Monitor service, see [sample_authentication.py](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/sample_authentication.py) and [sample_authentication_async.py](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/async_samples/sample_authentication_async.py).\n\n### Logs query samples\n\n- [Send a single workspace query with LogsQueryClient and handle the response as a table](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/sample_logs_single_query.py) ([async sample](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/async_samples/sample_log_query_async.py))\n- [Send a single workspace query with LogsQueryClient and handle the response in key-value form](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/sample_logs_query_key_value_form.py)\n- [Send a single workspace query with LogsQueryClient without pandas](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/sample_single_log_query_without_pandas.py)\n- [Send a single workspace query with LogsQueryClient across multiple workspaces](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/sample_log_query_multiple_workspaces.py)\n- [Send multiple workspace queries with LogsQueryClient](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/sample_batch_query.py)  ([async sample](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/async_samples/sample_batch_query_async.py))\n- [Send a single workspace query with LogsQueryClient using server timeout](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/sample_server_timeout.py)\n- [Send a single resource query with LogsQueryClient](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/sample_resource_logs_query.py) ([async sample](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/async_samples/sample_resource_logs_query_async.py))\n\n#### Notebook samples\n\n- [Split a large query into multiple smaller queries to avoid hitting service limits](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/notebooks/sample_large_query.ipynb)\n- [Detect anomalies in Azure Monitor log data using machine learning techniques](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/notebooks/sample_machine_learning_sklearn.ipynb)\n\n\n### Metrics query samples\n\n- [Send a query using MetricsQueryClient](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/sample_metrics_query.py) ([async sample](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/async_samples/sample_metrics_query_async.py))\n- [Get a list of metric namespaces](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/sample_metric_namespaces.py) ([async sample](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/async_samples/sample_metric_namespaces_async.py))\n- [Get a list of metric definitions](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/sample_metric_definitions.py) ([async sample](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/async_samples/sample_metric_definitions_async.py))\n\n## Prerequisites\n\n- Python 3.7 or later\n- An [Azure subscription][azure_subscription]\n- To query Logs, you need an [Azure Log Analytics workspace][azure_monitor_create_using_portal].\n- To query Metrics, you need an Azure resource of any kind (Storage Account, Key Vault, Cosmos DB, etc.).\n\n## Setup\n\n1. Install the latest version of the Azure Monitor Query library:\n\n  ```bash\n  pip install azure-monitor-query\n  ```\n\n2. Clone or download this sample repository.\n3. Open the *samples* folder in Visual Studio Code or your IDE of choice.\n4. To run most of this samples, you need `azure-identity` and `pandas`. Although, those dependencies are optional and can be replaced.\n\n  ```bash\n  pip install azure-identity pandas\n  ```\n\n5. To run the async samples, you need an asynchronous HTTP framework like `aiohttp`:\n\n  ```bash\n  pip install aiohttp\n  ```\n\n## Run the samples\n\n1. Open a terminal window and `cd` to the directory that the samples are saved in.\n2. Set the environment variables specified in the sample file you wish to run.\n3. Follow the usage described in the file. For example, `python sample_logs_single_query.py`.\n\n## Next steps\n\nTo learn more about Azure Monitor, see the [Azure Monitor service documentation](https://learn.microsoft.com/azure/azure-monitor/).\n\n<!-- LINKS -->\n\n[azure_monitor_create_using_portal]: https://learn.microsoft.com/azure/azure-monitor/logs/quick-create-workspace\n[azure_subscription]: https://azure.microsoft.com/free/python/\n", "repo_name": "monitor/azure-monitor-query/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples", "language": ["Python"]}, {"README_text": "---\npage_type: sample\nlanguages:\n  - python\nproducts:\n  - azure\n  - azure-personalizer\n---\n\n# Samples for Azure Personalizer client library for Python\n\n## Prerequisites\n* Python 3.7 or later is required to use this package\n* You must have an [Azure subscription][azure_subscription] and an\n[Azure Personalizer account][personalizer] to run these samples.\n\n## Setup\n\n1. Install the Azure Personalizer client library for Python with pip:\n\n```commandline\npip install azure-ai-personalizer\n```\n\n2. Clone or download this sample repository.\n3. Open the sample folder in Visual Studio Code or your IDE of choice.\n\n## Running the samples\n\n1. Open a terminal window and `cd` to the directory that the samples are saved in.\n2. Set the environment variables specified in the sample file you wish to run.\n3. Follow the usage described in the file, e.g. `python rank_actions_and_reward_events.py`\n\n## Next steps\n\nCheck out the [API reference documentation][python-personalizer-ref-docs] to learn more about\nwhat you can do with the Azure Personalizer client library.\n\n| File                                                                                                                                                    | Description                                                                |\n|---------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------|\n| [rank_actions_and_reward_events.py][rank_actions_and_reward_events] and [rank_actions_and_reward_events_async.py][rank_actions_and_reward_events_async] | demos sending rank and reward to personalizer in single-slot configuration |\n| [multi_slot_rank_actions_and_reward_events.py][multi_slot_rank_actions_and_reward_events] and [multi_slot_rank_actions_and_reward_events_async.py][multi_slot_rank_actions_and_reward_events_async]                                             | demos sending rank and reward to personalizer in multi-slot configuration  |\n\n<!-- LINKS -->\n[azure_subscription]: https://azure.microsoft.com/free/\n[personalizer]: https://azure.microsoft.com/products/cognitive-services/personalizer/\n[python-personalizer-ref-docs]: https://aka.ms/azsdk/python/personalizer/docs\n[rank_actions_and_reward_events]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/personalizer/azure-ai-personalizer/samples/rank_actions_and_reward_events.py\n[rank_actions_and_reward_events_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/personalizer/azure-ai-personalizer/samples/async_samples/rank_actions_and_reward_events_async.py\n[multi_slot_rank_actions_and_reward_events]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/personalizer/azure-ai-personalizer/samples/multi_slot_rank_actions_and_reward_events.py\n[multi_slot_rank_actions_and_reward_events_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/personalizer/azure-ai-personalizer/samples/async_samples/multi_slot_rank_actions_and_reward_events_async.py\n", "repo_name": "personalizer/azure-ai-personalizer/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/personalizer/azure-ai-personalizer/samples", "language": ["Python"]}, {"README_text": "---\npage_type: sample\nlanguages:\n- python\nproducts:\n# Including relevant stubs from https://review.docs.microsoft.com/help/contribute/metadata-taxonomies#product\n- azure\nname: Azure.Purview.Sharing samples for python\ndescription: Samples for the Azure.Purview.Sharing client library.\n---\n\n# Azure.Purview.Sharing Samples\n\nThe following are code samples that show common scenario operations with the Azure Purview client library.\n\n* [sent_shares_examples.py](https://github.com/yamanwahsheh/azure-sdk-for-python/blob/yaman/share-v2-python-tests-and-samples/sdk/purview/azure-purview-sharing/samples/sent_shares_examples.py) - Examples of Sent Shares:\n    * Create a share client\n    * Create a sent share\n    * Get a sent share\n    * Delete a sent share\n    * Get all sent shares\n    * Send a user invitation\n    * Send a service invitation\n    * View sent invitations\n\n* [received_shares_examples.py](https://github.com/yamanwahsheh/azure-sdk-for-python/blob/yaman/share-v2-python-tests-and-samples/sdk/purview/azure-purview-sharing/samples/received_shares_examples.py) - Examples of Received Shares:\n    * Create a share client\n    * Get all detached received shares\n    * Attach a received share\n    * Get a received share\n    * List attached received shares\n    * Delete a received share\n\n## Prerequisites\n* Python 3.6+\n* You must have an [Azure subscription](https://azure.microsoft.com/free/)\n\n## Setup\n\n1. Install the latest beta version of Azure Purview Sharing that the samples use:\n\n```bash\npip install azure-purview-sharing\n```\n\n2. Clone or download this sample repository.\n3. Open the sample folder in Visual Studio Code or your IDE of choice.\n\n## Running the samples\n\n1. Open a terminal window and `cd` to the directory that the samples are saved in.\n2. Set the environment variables specified in the sample file you wish to run.\n3. Follow the usage described in the file, e.g. `python sent_shares_examples.py`\n\n## Next steps\n\nCheck out the [API reference documentation](https://aka.ms/azsdk-purview-sharing-ref) to learn more about\nwhat you can do with the Azure Purview Sharing API client library.", "repo_name": "purview/azure-purview-sharing/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/purview/azure-purview-sharing/samples", "language": ["Python"]}, {"README_text": "# coding=utf-8\n# --------------------------------------------------------------------------\n#\n# Copyright (c) Microsoft Corporation. All rights reserved.\n#\n# The MIT License (MIT)\n#\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n# of this software and associated documentation files (the \"\"Software\"\"), to\n# deal in the Software without restriction, including without limitation the\n# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n# sell copies of the Software, and to permit persons to whom the Software is\n# furnished to do so, subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included in\n# all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n# IN THE SOFTWARE.\n#\n# --------------------------------------------------------------------------\nimport logging\nimport os\n\nfrom azure.purview.workflow import PurviewWorkflowClient\nfrom azure.identity import UsernamePasswordCredential\nfrom azure.core.exceptions import HttpResponseError\n\nlogging.basicConfig(level=logging.DEBUG)\nLOG = logging.getLogger()\n\n# Set the value of the endpoint as environment variables:\n# WORKFLOW_ENDPOINT\n# Set the values of client ID and tenant ID of the AAD application as environment variables:\n# AZURE_CLIENT_ID, AZURE_TENANT_ID\n# set the values of username and password of the AAD user as environment variables:\n# USERNAME, PASSWORD\ntry:\n    endpoint = str(os.getenv(\"WORKFLOW_ENDPOINT\"))\n    client_id = str(os.getenv(\"AZURE_CLIENT_ID\"))\n    tenant_id = str(os.getenv(\"AZURE_TENANT_ID\"))\n    username = str(os.getenv(\"USERNAME\"))\n    password = str(os.getenv(\"PASSWORD\"))\nexcept KeyError:\n    LOG.error(\"Missing environment variable 'WORKFLOW_ENDPOINT' or 'AZURE_CLIENT_ID' or 'AZURE_TENANT_ID' or \"\n              \"'USERNAME' or 'PASSWORD' - please set if before running the example\")\n    exit()\ncredential = UsernamePasswordCredential(client_id=client_id, username=username, password=password,\n                                        tenant_id=tenant_id)\n# Build a client through AAD\nclient = PurviewWorkflowClient(endpoint= endpoint, credential=credential)\n\ntry:\n    approve_response = {\n      \"comment\": \"Thanks for raising this!\"\n    }\n    task_id = \"6785028c-1348-4415-b6b7-f723be6c8c31\"\n    client.approve_approval_task(task_id, approve_response)\n    print('Successfully approve a workflow task.')\n\nexcept HttpResponseError as e:\n    print(f\"Failed to send JSON message: {e}\")\n", "repo_name": "purview/azure-purview-workflow/samples/approve_workflow_task.py", "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/purview/azure-purview-workflow/samples/approve_workflow_task.py", "language": ["Python"]}, {"README_text": "# -------------------------------------------------------------------------\n# Copyright (c) Microsoft Corporation. All rights reserved.\n# Licensed under the MIT License. See License.txt in the project root for\n# license information.\n# --------------------------------------------------------------------------\n\n\"\"\"\nFILE: remote_rendering_client_sample.py\nDESCRIPTION:\n    These samples demonstrate creating a remote rendering client, converting an asset into the format used in rendering\n    sessions, listing created asset conversions, starting a rendering session, extending the lifetime of a rendering\n    session, stopping a rendering session and listing rendering sessions.\n\nUSAGE:\n    python remote_rendering_client_sample.py\n    Set the environment variables with your own values before running the sample:\n    ARR_SERVICE_ENDPOINT - the endpoint of the Azure Remote Rendering service in the desired region.\n        e.g. \"https://remoterendering.eastus.mixedreality.azure.com\" for the East US region\n        Supported regions can be found at https://docs.microsoft.com/en-us/azure/remote-rendering/reference/regions\n    ARR_ACCOUNT_DOMAIN - the Remote Rendering account domain. e.g. \"eastus.mixedreality.azure.com\"\n    ARR_ACCOUNT_ID - the Remote Rendering account identifier.\n    ARR_ACCOUNT_KEY - the Remote Rendering account primary or secondary key.\n\"\"\"\n\nimport logging\nimport os\nimport sys\nimport time\nimport uuid\n\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.core.pipeline.policies import NetworkTraceLoggingPolicy\nfrom azure.mixedreality.authentication import MixedRealityStsClient\nfrom azure.mixedreality.remoterendering import (AssetConversion,\n                                                AssetConversionInputSettings,\n                                                AssetConversionOutputSettings,\n                                                AssetConversionStatus,\n                                                RemoteRenderingClient,\n                                                RenderingSessionSize,\n                                                RenderingSessionStatus)\n\n# Create a logger for the 'azure' SDK\nlogger = logging.getLogger(\"azure\")\nlogger.setLevel(logging.DEBUG)\n\n# Configure a console output\nhandler = logging.StreamHandler(stream=sys.stdout)\nlogger.addHandler(handler)\n\n# Enable network trace logging. This will be logged at DEBUG level.\n# By default, logging is disabled.\nlogging_policy_enabled = os.environ.get(\"ARR_LOGGING_ENABLED\", None)\n\nlogging_policy = None\nif logging_policy_enabled:\n    logging_policy = NetworkTraceLoggingPolicy()\n    logging_policy.enable_http_logger = True\n\narr_endpoint = os.environ.get(\"ARR_SERVICE_ENDPOINT\", None)\nif not arr_endpoint:\n    raise ValueError(\"Set ARR_SERVICE_ENDPOINT env before run this sample.\")\n\naccount_id = os.environ.get(\"ARR_ACCOUNT_ID\", None)\nif not account_id:\n    raise ValueError(\"Set ARR_ACCOUNT_ID env before run this sample.\")\n\naccount_domain = os.environ.get(\"ARR_ACCOUNT_DOMAIN\", None)\nif not account_domain:\n    raise ValueError(\"Set ARR_ACCOUNT_DOMAIN env before run this sample.\")\n\naccount_key = os.environ.get(\"ARR_ACCOUNT_KEY\", None)\nif not account_key:\n    raise ValueError(\"Set ARR_ACCOUNT_KEY env before run this sample.\")\n\nstorage_container_uri = os.environ.get(\"ARR_STORAGE_CONTAINER_URI\", None)\nif not storage_container_uri:\n    raise ValueError(\"Set ARR_STORAGE_CONTAINER_URI env before run this sample.\")\n\ninput_blob_prefix = os.environ.get(\"ARR_STORAGE_INPUT_BLOB_PREFIX\", None)\n# if no input_blob_prefix is specified the whole content of the storage container will be retrieved for conversions\n# this is not recommended since copying lots of unneeded files will slow down conversions\n\nrelative_input_asset_path = os.environ.get(\"ARR_STORAGE_INPUT_ASSET_PATH\", None)\nif not relative_input_asset_path:\n    raise ValueError(\"Set ARR_STORAGE_INPUT_ASSET_PATH env before run this sample.\")\n\n# use AzureKeyCredentials to authenticate to the service - other auth options include AAD and getting\n# STS token using the mixed reality STS client\nkey_credential = AzureKeyCredential(account_key)\n\nclient = RemoteRenderingClient(\n    endpoint=arr_endpoint,\n    account_id=account_id,\n    account_domain=account_domain,\n    credential=key_credential,\n    logging_policy=logging_policy\n)\n\n\ndef perform_asset_conversion():\n    try:\n        # a UUID is a good conversion ID - guaranteed to be unique on an account\n        conversion_id = str(uuid.uuid4())\n\n        # In order to convert a model the input model needs to be retrieved from blob storage and the result of the\n        # conversion process will be written back to blob storage\n        # The subset of files which will be retrieved from the given input storage container is controlled by the\n        # input_settings blob_prefix more details at:\n        # https://docs.microsoft.com/en-us/azure/remote-rendering/resources/troubleshoot#conversion-file-download-errors\n        input_settings = AssetConversionInputSettings(\n            storage_container_uri=storage_container_uri,\n            blob_prefix=input_blob_prefix,  # if not specified all files from the input container will be retrieved\n            relative_input_asset_path=relative_input_asset_path,\n            # container_read_list_sas #if storage is not linked with the ARR account provide a SAS here to grant access.\n        )\n\n        output_settings = AssetConversionOutputSettings(\n            storage_container_uri=storage_container_uri,  # Note: different input/output containers can be specified\n            blob_prefix=\"output/\"+conversion_id,\n            # output_asset_filename= convertedAsset.arrAsset # if not specified the output will be \"<inputfile>.arrAsset\".\n            # container_write_sas  #if storage is not linked with the ARR account provide a SAS here to grant access.\n        )\n\n        conversion_poller = client.begin_asset_conversion(conversion_id=conversion_id,\n                                                          input_settings=input_settings,\n                                                          output_settings=output_settings)\n\n        print(\"conversion with id:\", conversion_id, \"created. Waiting for completion.\")\n        conversion = conversion_poller.result()\n        print(\"conversion with id:\", conversion_id, \"finished with result:\", conversion.status)\n        print(conversion.output.asset_uri)\n\n        # a poller can also be acquired by id\n        # id_poller = await client.get_asset_conversion_poller(conversion_id=conversion_id)\n        # conversion = await id_poller.result()\n\n        # we can also get the status of an individual asset conversion like this:\n        conversion = client.get_asset_conversion(conversion_id)\n        print(\"individual conversion retrieved with id:\", conversion.id)\n        print(\"\\tconversion status:\", conversion.status)\n\n    except Exception as e:\n        print(\"An error occurred: \", e)\n\n\ndef list_all_asset_conversions():\n    print(\"listing conversions for remote rendering account: \", account_id)\n    print(\"conversions:\")\n    conversions = client.list_asset_conversions()\n    for c in conversions:\n        created_on = c.created_on.strftime(\"%m/%d/%Y, %H:%M:%S\")\n        print(\"\\t conversion:  id:\", c.id, \"status:\", c.status, \"created on:\", created_on)\n        if c.status == AssetConversionStatus.SUCCEEDED:\n            print(\"\\t\\tconversion result URI:\", c.output.asset_uri)\n\n\ndef demonstrate_rendering_session_lifecycle():\n    try:\n        # a UUID is a good session ID - guaranteed to be unique on an account\n        session_id = str(uuid.uuid4())\n        print(\"starting rendering session with id:\", session_id)\n        session_poller = client.begin_rendering_session(\n            session_id=session_id, size=RenderingSessionSize.STANDARD, lease_time_minutes=5)\n        print(\"rendering session with id:\", session_id, \"created. Waiting for session to be ready.\",)\n\n        session = session_poller.result()\n        print(\"session with id:\", session.id, \"is ready. lease_time_minutes:\", session.lease_time_minutes,)\n\n        # a poller can also be acquired by a id if a session already exists\n        # id_poller = client.get_rendering_session_poller(session_id=session_id)\n        # session = id_poller.result()\n\n        # one can now connect to the rendering session using the runtime SDK on a Hololens 2\n        print(session)\n\n        # we can also get the properties of an individual session by id:\n        session = client.get_rendering_session(session_id)\n        print(session)\n\n        # if the session should run longer than initially requested we can extend the lifetime of the session\n        session = client.get_rendering_session(session_id)\n        if session.lease_time_minutes - session.elapsed_time_minutes < 2:\n            session = client.update_rendering_session(\n                session_id=session_id, lease_time_minutes=session.lease_time_minutes + 10)\n            print(\"session with id:\", session.id, \"updated. New lease time:\", session.lease_time_minutes, \"minutes\",)\n\n        # once we do not need the session anymore we can stop the session\n        client.stop_rendering_session(session_id)\n        print(\"session with id:\", session_id, \"stopped\")\n    except Exception as e:\n        print(\"An error occurred: \", e)\n\n\ndef list_all_rendering_sessions():\n    print(\"listing sessions for account:\", account_id)\n    print(\"sessions:\")\n    rendering_sessions = client.list_rendering_sessions()\n    for session in rendering_sessions:\n        created_on = session.created_on.strftime(\"%m/%d/%Y, %H:%M:%S\")\n        print(\"\\t session:  id:\", session.id, \"status:\", session.status, \"created on:\", created_on,)\n\n\nif __name__ == \"__main__\":\n    perform_asset_conversion()\n    # list_all_asset_conversions()\n    demonstrate_rendering_session_lifecycle()\n    list_all_rendering_sessions()\n", "repo_name": "remoterendering/azure-mixedreality-remoterendering/samples/remote_rendering_client_sample.py", "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/remoterendering/azure-mixedreality-remoterendering/samples/remote_rendering_client_sample.py", "language": ["Python"]}, {"README_text": "---\npage_type: sample\nlanguages:\n  - python\nproducts:\n  - azure\n  - azure-event-hubs\nurlFragment: schemaregistry-avroencoder-samples\n---\n\n# Azure Schema Registry Avro Encoder library for Python Samples\n\nThese are code samples that show common scenario operations with the Schema Registry Avro Encoder library.\n\nSeveral Schema Registry Avro Encoder Python SDK samples are available to you in the SDK's GitHub repository. These samples provide example code for additional scenarios commonly encountered while working with Schema Registry Avro Encoder:\n\n* [encode_and_decode_event_data_message.py][encode_and_decode_event_data_message_sample] ([async version][encode_and_decode_event_data_message_async_sample]) - Examples for common Schema Registry Avro Encoder tasks:\n    * Encode content according to the given schema and create EventData object\n    * Decode content given an EventData object with encoded content and corresponding content type\n* [eventhub_send_integration.py][eventhub_send_integration_sample] ([async version][eventhub_send_integration_async_sample]) - Examples for integration with EventHub in sending tasks:\n    * Encode content with the given schema and send `EventData` to Event Hubs.\n* [eventhub_receive_integration.py][eventhub_receive_integration_sample] ([async version][eventhub_receive_integration_async_sample]) - Examples for integration with EventHub in receiving tasks:\n    * Receive `EventData` from Event Hubs and decode the received bytes.\n\n## Prerequisites\n- Python 3.7 or later.\n- **Microsoft Azure Subscription:**  To use Azure services, including Azure Schema Registry, you'll need a subscription.\nIf you do not have an existing Azure account, you may sign up for a free trial or use your MSDN subscriber benefits when you [create an account](https://account.windowsazure.com/Home/Index).\n\n## Setup\n\n1. Install the Azure Schema Registry Avro Encoder client library and Azure Identity client library for Python with [pip](https://pypi.org/project/pip/):\n\n```bash\npip install azure-schemaregistry-avroencoder azure-identity\n```\n\nAdditionally, if using with `azure.eventhub.EventData`, install `azure-eventhub>=5.9.0`:\n\n```bash\npip install azure-eventhub>=5.9.0\n```\n\n2. Clone or download this sample repository\n3. Open the sample folder in Visual Studio Code or your IDE of choice.\n\n## Running the samples\n\n1. Open a terminal window and `cd` to the directory that the samples are saved in.\n2. Set the environment variables specified in the sample file you wish to run.\n3. Follow the usage described in the file, e.g. `python encode_and_decode_event_data_message.py`\n\n## Next steps\n\nCheck out the [API reference documentation][api_reference] to learn more about\nwhat you can do with the Azure Schema Registry Avro Encoder library.\n\n<!-- LINKS -->\n[encode_and_decode_event_data_message_sample]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/schemaregistry/azure-schemaregistry-avroencoder/samples/sync_samples/encode_and_decode_event_data_message.py\n[eventhub_send_integration_sample]:  https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/schemaregistry/azure-schemaregistry-avroencoder/samples/sync_samples/eventhub_send_integration.py\n[eventhub_receive_integration_sample]:  https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/schemaregistry/azure-schemaregistry-avroencoder/samples/sync_samples/eventhub_receive_integration.py\n[encode_and_decode_event_data_message_async_sample]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/schemaregistry/azure-schemaregistry-avroencoder/samples/async_samples/encode_and_decode_event_data_message_async.py\n[eventhub_send_integration_async_sample]:  https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/schemaregistry/azure-schemaregistry-avroencoder/samples/async_samples/eventhub_send_integration_async.py\n[eventhub_receive_integration_async_sample]:  https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/schemaregistry/azure-schemaregistry-avroencoder/samples/async_samples/eventhub_receive_integration_async.py\n[api_reference]: https://docs.microsoft.com/python/api/overview/azure/schemaregistry-avroencoder-readme\n", "repo_name": "schemaregistry/azure-schemaregistry-avroencoder/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/schemaregistry/azure-schemaregistry-avroencoder/samples", "language": ["Python"]}, {"README_text": "---\npage_type: sample\nlanguages:\n  - python\nproducts:\n  - azure\n  - azure-event-hubs\nurlFragment: schemaregistry-samples\n---\n\n# Azure Schema Registry client library for Python Samples\n\nThese are code samples that show common scenario operations with the Schema Registry client library.\nThe async versions of the samples (the python sample files appended with `_async`) show asynchronous operations.\n\nSeveral Schema Registry Python SDK samples are available to you in the SDK's GitHub repository. These samples provide example code for additional scenarios commonly encountered while working with Schema Registry:\n\n* [schema_registry.py][schema_registry_sample] ([async version][schema_registry_async_sample]) - Examples for common Schema Registry tasks:\n    * Register a schema\n    * Get schema by id\n    * Get schema by version\n    * Get schema id\n\n## Prerequisites\n- Python 3.7 or later.\n- **Microsoft Azure Subscription:**  To use Azure services, including Azure Schema Registry, you'll need a subscription.\nIf you do not have an existing Azure account, you may sign up for a free trial or use your MSDN subscriber benefits when you [create an account](https://account.windowsazure.com/Home/Index).\n\n## Setup\n\n1. Install the Azure Schema Registry client library and Azure Identity client library for Python with [pip](https://pypi.org/project/pip/):\n\n```bash\npip install azure-schemaregistry\n```\n\nTo run samples utilizing the Azure Active Directory for authentication, please install the azure-identity library:\n\n```bash\npip install azure-identity\n```\n\n2. Clone or download this sample repository.\n3. Open the sample folder in Visual Studio Code or your IDE of choice.\n\n## Running the samples\n\n1. Open a terminal window and `cd` to the directory that the samples are saved in.\n2. Set the environment variables specified in the sample file you wish to run.\n3. Follow the usage described in the file, e.g. `python schema_registry.py`\n\n## Next steps\n\nCheck out the [API reference documentation][api_reference] to learn more about\nwhat you can do with the Azure Schema Registry client library.\n\n<!-- LINKS -->\n[schema_registry_sample]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/schemaregistry/azure-schemaregistry/samples/sync_samples/schema_registry.py\n[schema_registry_async_sample]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/schemaregistry/azure-schemaregistry/samples/async_samples/schema_registry_async.py\n[api_reference]: https://docs.microsoft.com/python/api/overview/azure/schemaregistry-readme\n", "repo_name": "schemaregistry/azure-schemaregistry/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/schemaregistry/azure-schemaregistry/samples", "language": ["Python"]}, {"README_text": "---\npage_type: sample\nlanguages:\n  - python\nproducts:\n  - azure\n  - azure-search\n---\n\n# Samples for Azure Cognitive Search client library for Python\n\nThese code samples show common scenario operations with the Azure Cognitive\nSearch client library.\n\nAuthenticate the client with a Azure Cognitive Search [API Key Credential](https://docs.microsoft.com/azure/search/search-security-api-keys):\n\n[https://github.com/Azure/azure-sdk-for-python/blob/master/sdk/search/azure-search-documents/samples/sample_authentication.py](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/search/azure-search-documents/samples/sample_authentication.py) ([async version](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/search/azure-search-documents/samples/async_samples/sample_authentication_async.py))\n\nThen for common search index operations:\n\n* Get a document by key: [sample_get_document.py](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/search/azure-search-documents/samples/sample_get_document.py) ([async version](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/search/azure-search-documents/samples/async_samples/sample_get_document_async.py))\n\n* Perform a simple text query: [sample_simple_query.py](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/search/azure-search-documents/samples/sample_simple_query.py) ([async version](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/search/azure-search-documents/samples/async_samples/sample_simple_query_async.py))\n\n* Perform a filtered query: [sample_filter_query.py](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/search/azure-search-documents/samples/sample_filter_query.py) ([async version](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/search/azure-search-documents/samples/async_samples/sample_filter_query_async.py))\n\n* Perform a faceted query: [sample_facet_query.py](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/search/azure-search-documents/samples/sample_facet_query.py) ([async version](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/search/azure-search-documents/samples/async_samples/sample_facet_query_async.py))\n\n* Get auto-completions: [sample_autocomplete.py](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/search/azure-search-documents/samples/sample_autocomplete.py) ([async version](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/search/azure-search-documents/samples/async_samples/sample_autocomplete_async.py))\n\n* Get search suggestions: [sample_suggestions.py](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/search/azure-search-documents/samples/sample_suggestions.py) ([async version](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/search/azure-search-documents/samples/async_samples/sample_suggestions_async.py))\n\n* Perform basic document updates: [sample_crud_operations.py](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/search/azure-search-documents/samples/sample_crud_operations.py) ([async version](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/search/azure-search-documents/samples/async_samples/sample_crud_operations_async.py))\n\n* CRUD operations for index: [sample_index_crud_operations.py](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/search/azure-search-documents/samples/sample_index_crud_operations.py) ([async version](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/search/azure-search-documents/samples/async_samples/sample_index_crud_operations_async.py))\n\n* Analyze text: [sample_analyze_text.py](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/search/azure-search-documents/samples/sample_analyze_text.py) ([async version](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/search/azure-search-documents/samples/async_samples/sample_analyze_text_async.py))\n\n* CRUD operations for indexers: [sample_indexers_operations.py](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/search/azure-search-documents/samples/sample_indexers_operations.py) ([async version](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/search/azure-search-documents/samples/async_samples/sample_indexers_operations_async.py))\n\n* General workflow of indexer, datasource and index: [sample_indexer_datasource_skillset.py](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/search/azure-search-documents/samples/sample_indexer_datasource_skillset.py)\n\n* Semantic search: [sample_semantic_search.py](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/search/azure-search-documents/samples/sample_semantic_search.py)\n\n## Prerequisites\n\n* Python 3.7 or later is required to use this package\n* You must have an [Azure subscription](https://azure.microsoft.com/free/)\n* You must create the \"Hotels\" sample index [in the Azure Portal](https://docs.microsoft.com/azure/search/search-get-started-portal)\n\n## Setup\n\n1. Install the Azure Cognitive Search client library for Python with [pip](https://pypi.org/project/pip/):\n\n   ```bash\n   pip install azure-search-documents --pre\n   ```\n\n2. Clone or download [this repository](https://github.com/Azure/azure-sdk-for-python)\n3. Open this sample folder in [Visual Studio Code](https://code.visualstudio.com) or your IDE of choice.\n\n## Running the samples\n\n1. Open a terminal window and `cd` to the directory that the samples are saved in.\n2. Set the environment variables specified in the sample file you wish to run.\n3. Follow the usage described in the file, e.g. `python sample_simple_query.py`\n\n## Next steps\n\nCheck out the [API reference documentation](https://docs.microsoft.com/rest/api/searchservice/)\nto learn more about what you can do with the Azure Cognitive Search client library.\n", "repo_name": "search/azure-search-documents/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/search/azure-search-documents/samples", "language": ["Python"]}, {"README_text": "---\npage_type: sample\nlanguages:\n  - python\nproducts:\n  - azure\n  - azure-service-bus\nurlFragment: servicebus-samples\n---\n\n# Azure Service Bus client library for Python Samples\n\n> **NOTE**: This document outlines the samples for the latest version of the `azure-servicebus` package\n> which has different APIs than the older version (0.50). Please visit [this link](https://github.com/Azure/azure-sdk-for-python/tree/servicebus_v0.50.3/sdk/servicebus/azure-servicebus/samples) for samples of version 0.50 of this library.\n\nThese are code samples that show common scenario operations with the Azure Service Bus client library.\nBoth [sync version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/servicebus/azure-servicebus/samples/sync_samples) and [async version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/servicebus/azure-servicebus/samples/async_samples) of samples are provided.\n\n- [send_queue.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/servicebus/azure-servicebus/samples/sync_samples/send_queue.py) ([async version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/servicebus/azure-servicebus/samples/async_samples/send_queue_async.py)) - Examples to send messages to a service bus queue:\n    - From a connection string\n    - Enabling Logging\n- [send_topic.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/servicebus/azure-servicebus/samples/sync_samples/send_topic.py) ([async version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/servicebus/azure-servicebus/samples/async_samples/send_topic_async.py)) - Examples to send messages to a service bus topic:\n    - From a connection string\n    - Enabling Logging\n- [receive_queue.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/servicebus/azure-servicebus/samples/sync_samples/receive_queue.py) ([async_version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/servicebus/azure-servicebus/samples/async_samples/receive_queue_async.py)) - Examples to receive messages from a service bus queue:\n    - Receive messages\n- [receive_subscription.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/servicebus/azure-servicebus/samples/sync_samples/receive_subscription.py) ([async_version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/servicebus/azure-servicebus/samples/async_samples/receive_subscription_async.py)) - Examples to receive messages from a service bus subscription:\n    - Receive messages\n- [receive_peek.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/servicebus/azure-servicebus/samples/sync_samples/receive_peek.py) ([async_version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/servicebus/azure-servicebus/samples/async_samples/receive_peek_async.py)) - Examples to peek messages from a service bus queue:\n    - Peek messages\n- [receive_deferred_message_queue.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/servicebus/azure-servicebus/samples/sync_samples/receive_deferred_message_queue.py) ([async_version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/servicebus/azure-servicebus/samples/async_samples/receive_deferred_message_queue_async.py)) - Examples to defer received messages and receive deferred messages from a service bus queue:\n    - Defer received messages\n    - Receive deferred messages\n- [receive_deadlettered_messages.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/servicebus/azure-servicebus/samples/sync_samples/receive_deadlettered_messages.py) ([async_version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/servicebus/azure-servicebus/samples/async_samples/receive_deadlettered_messages_async.py)) - Examples to receive dead-lettered messages from a service bus queue:\n    - Receive dead-lettered messages\n- [receive_iterator_queue.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/servicebus/azure-servicebus/samples/sync_samples/receive_iterator_queue.py) ([async_version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/servicebus/azure-servicebus/samples/async_samples/receive_iterator_queue_async.py)) - Examples to receive messages from a service bus queue by iterating over ServiceBusReceiver:\n    - Receive messages by iterating over ServiceBusReceiver\n- [send_and_receive_amqp_annotated_message.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/servicebus/azure-servicebus/samples/sync_samples/send_and_receive_amqp_annotated_message.py) ([async_version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/servicebus/azure-servicebus/samples/async_samples/send_and_receive_amqp_annotated_message_async.py)) - Examples to send AMQPAnnotatedMessage to and receive messages from a service bus queue and parse the body:\n    - Send AMQPAnnotatedMessage of different body types.\n    - Receive messages and parse the body according to the body type.\n- [session_pool_receive.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/servicebus/azure-servicebus/samples/sync_samples/session_pool_receive.py) ([async_version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/servicebus/azure-servicebus/samples/async_samples/session_pool_receive_async.py)) - Examples to receive messages from multiple available sessions in parallel with a thread pool:\n    - Receive messages from multiple available sessions in parallel with a thread pool\n    - Automatically renew the lock on the session through AutoLockRenewer\n- [session_send_receive.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/servicebus/azure-servicebus/samples/sync_samples/session_send_receive.py) ([async_version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/servicebus/azure-servicebus/samples/async_samples/session_send_receive_async.py)) - Examples to send messages to and receive messages from a session-enabled service bus queue:\n    - Send messages to a session-enabled queue\n    - Receive messages from session-enabled queue\n- [schedule_messages_and_cancellation](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/servicebus/azure-servicebus/samples/sync_samples/schedule_messages_and_cancellation.py) ([async_version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/servicebus/azure-servicebus/samples/async_samples/schedule_messages_and_cancellation_async.py)) - Examples to schedule messages and cancel scheduled messages on a service bus queue:\n    - Schedule a single message or multiple messages to a queue\n    - Cancel scheduled messages from a queue\n- [schedule_topic_messages_and_cancellation](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/servicebus/azure-servicebus/samples/sync_samples/schedule_topic_messages_and_cancellation.py) ([async_version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/servicebus/azure-servicebus/samples/async_samples/schedule_topic_messages_and_cancellation_async.py)) - Examples to schedule messages and cancel scheduled messages on a service bus topic:\n    - Schedule a single message or multiple messages to a topic\n    - Cancel scheduled messages from a topic\n- [client_identity_authentication.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/servicebus/azure-servicebus/samples/sync_samples/client_identity_authentication.py) ([async_version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/servicebus/azure-servicebus/samples/async_samples/client_identity_authentication_async.py)) - Examples to authenticate the client by Azure Activate Directory:\n    - Authenticate and create the client utilizing the `azure.identity` library\n- [authenticate_client_connstr.py](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/samples/sync_samples/authenticate_client_connstr.py) ([async_version](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/samples/async_samples/authenticate_client_connstr_async.py)) - Examples to authenticate the client by Connection String:\n    - Authenticate and create the client utilizing the connection string available in the Azure portal or via Azure CLI.\n- [authenticate_using_azure_sas_credential.py](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/samples/sync_samples/authenticate_using_azure_sas_credential.py) ([async_version](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/samples/async_samples/authenticate_using_azure_sas_credential_async.py)) - Examples to authenticate the client by `azure.core.credentials.AzureSasCredential`:\n  - Authenticate and create the client utilizing the `azure.core.credentials.AzureSasCredential`.\n- [authenticate_using_azure_named_key_credential.py](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/samples/sync_samples/authenticate_using_azure_named_key_credential.py) ([async_version](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/samples/async_samples/authenticate_using_azure_named_key_credential_async.py)) - Examples to authenticate the client by `azure.core.credentials.AzureNamedKeyCredential`:\n  - Authenticate and create the client utilizing the `azure.core.credentials.AzureNamedKeyCredential`.\n- [proxy.py](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/samples/sync_samples/proxy.py) ([async_version](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/samples/async_samples/proxy_async.py)) - Examples to send message behind a proxy:\n    - Send message behind a proxy\n- [auto_lock_renew.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/servicebus/azure-servicebus/samples/sync_samples/auto_lock_renew.py) ([async_version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/servicebus/azure-servicebus/samples/async_samples/auto_lock_renew_async.py)) - Examples to show usage of AutoLockRenewer:\n    - Automatically renew lock on message received from non-sessionful entity\n    - Automatically renew lock on the session of sessionful entity\n    - Configure a callback to be triggered on auto lock renew failures.\n- [mgmt_queue.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/servicebus/azure-servicebus/samples/sync_samples/mgmt_queue.py) ([async_version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/servicebus/azure-servicebus/samples/async_samples/mgmt_queue_async.py)) - Examples to manage queue entities under a given servicebus namespace:\n    - Create a queue\n    - Delete a queue\n    - Update a queue\n    - List queues\n    - Get queue properties\n    - Get queue runtime information\n- [mgmt_topic](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/servicebus/azure-servicebus/samples/sync_samples/mgmt_topic.py) ([async_version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/servicebus/azure-servicebus/samples/async_samples/mgmt_topic_async.py)) - Examples to manage topic entities under a given servicebus namespace:\n    - Create a topic\n    - Delete a topic\n    - Update a topic\n    - List topic\n    - Get topic properties\n    - Get topic runtime information\n- [mgmt_subscription](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/servicebus/azure-servicebus/samples/sync_samples/mgmt_subscription.py) ([async_version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/servicebus/azure-servicebus/samples/async_samples/mgmt_subscription_async.py)) - Examples to manage subscription entities under a given servicebus namespace:\n    - Create a subscription\n    - Delete a subscription\n    - Update a subscription\n    - List subscription\n    - Get subscription properties\n    - Get subscription runtime information\n- [mgmt_rule](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/servicebus/azure-servicebus/samples/sync_samples/mgmt_rule.py) ([async_version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/servicebus/azure-servicebus/samples/async_samples/mgmt_rule_async.py)) - Examples to manage rule entities under a given servicebus subscription:\n    - Create a rule\n    - Delete a rule\n    - Update a rule\n    - List rule\n    - Get rule properties\n- [failure_and_recovery.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/servicebus/azure-servicebus/samples/sync_samples/failure_and_recovery.py) - A demonstration of potential failure modes from an end-to-end send receive flow, as well as possible recovery patterns.\n- [deadletter_messages_and_correct.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/servicebus/azure-servicebus/samples/sync_samples/deadletter_messages_and_correct.py) ([async_version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/servicebus/azure-servicebus/samples/async_samples/deadletter_messages_and_correct_async.py)) - Comprehensive example of moving messages to the dead-letter queue, retrieving messages from it, and resubmitting corrected messages back into main queue.\n- [topic_subscription_with_rule_operations.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/servicebus/azure-servicebus/samples/sync_samples/topic_subscription_with_rule_operations.py) ([async_version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/servicebus/azure-servicebus/samples/async_samples/topic_subscription_with_rule_operations_async.py)) - Example to manage rules on topic subscriptions and to explore different forms of subscription filters.\n- [connection_to_custom_endpoint_address](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/servicebus/azure-servicebus/samples/sync_samples/connection_to_custom_endpoint_address.py) ([async_version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/servicebus/azure-servicebus/samples/async_samples/connection_to_custom_endpoint_address_async.py)) - Example of connecting to the service using a custom endpoint.\n\n## Prerequisites\n\n- Python 3.7 or later.\n- **Microsoft Azure Subscription:**  To use Azure services, including Azure Service Bus, you'll need a subscription.\nIf you do not have an existing Azure account, you may sign up for a free trial or use your MSDN subscriber benefits when you [create an account](https://account.windowsazure.com/Home/Index).\n\n## Setup\n\n1. Install the Azure Service Bus client library for Python with [pip](https://pypi.org/project/pip/):\n```bash\npip install azure-servicebus\n```\nTo run samples that utilize the Azure Active Directory for authentication, please install the `azure-identity` library:\n```bash\npip install azure-identity\n```\n2. Clone or download this sample repository.\n3. Open the sample folder in Visual Studio Code or your IDE of choice.\n\n## Running the samples\n\n1. Open a terminal window and `cd` to the directory that the samples are saved in.\n2. Set the environment variables specified in the sample file you wish to run.\n3. Follow the usage described in the file, e.g. `python send_queue.py`.\n\n## Next steps\n\nCheck out the [API reference documentation](https://docs.microsoft.com/python/api/overview/azure/servicebus-readme) to learn more about\nwhat you can do with the Azure Service Bus client library.\n", "repo_name": "servicebus/azure-servicebus/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/samples", "language": ["Python"]}, {"README_text": "---\npage_type: sample\nlanguages:\n  - python\nproducts:\n  - azure\n  - azure-storage\nurlFragment: storage-blobchangefeed-samples\n---\n\n# Azure Storage Blob client library for Python Samples\n\nThese are code samples that show common scenario operations with the Azure Storage Blob ChangeFeed client library.\nThe async versions of the samples (the python sample files appended with `_async`) show asynchronous operations.\n\nSeveral Storage Blobs Python SDK samples are available to you in the SDK's GitHub repository. These samples provide example code for additional scenarios commonly encountered while working with Storage Blobs:\n\n* [`change_feed_samples.py`](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-blob-changefeed/samples/change_feed_samples.py) - Examples for authenticating and operating on the client:\n    * list events by page\n    * list all events\n    * list events in a time range\n    * list events starting from a continuation token\n\n## Prerequisites\n* Python 3.6 or later is required to use this package\n* You must have an [Azure subscription](https://azure.microsoft.com/free/) and an\n[Azure storage account](https://docs.microsoft.com/azure/storage/common/storage-account-overview) to run these samples.\n\n## Setup\n\n1. Install the Azure Storage Blob client library for Python with [pip](https://pypi.org/project/pip/):\n\n```bash\npip install azure-storage-blob\n```\n\n2. Clone or download this sample repository\n3. Open the sample folder in Visual Studio Code or your IDE of choice.\n\n## Running the samples\n\n1. Open a terminal window and `cd` to the directory that the samples are saved in.\n2. Set the environment variables specified in the sample file you wish to run.\n3. Follow the usage described in the file, e.g. `python change_feed_samples.py`\n\n## Next steps\n\nCheck out the [API reference documentation](https://aka.ms/azsdk-python-storage-blob-changefeed-ref) to learn more about\nwhat you can do with the Azure Storage Blob client library.\n", "repo_name": "storage/azure-storage-blob-changefeed/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob-changefeed/samples", "language": ["Python"]}, {"README_text": "Lorem ipsum dolor sit amet, consectetur adipiscing elit", "repo_name": "storage/azure-storage-blob/samples/BlockDestination.txt", "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob/samples/BlockDestination.txt", "language": ["Python"]}, {"README_text": "---\npage_type: sample\nlanguages:\n  - python\nproducts:\n  - azure\n  - azure-storage\nurlFragment: storage-datalake-samples\n---\n\n# Azure Storage Datalake client library for Python Samples\n\nThese are code samples that show common scenario operations with the Azure DataLake Storage client library.\n\nSeveral DataLake Storage Python SDK samples are available to you in the SDK's GitHub repository. These samples provide example code for additional scenarios commonly encountered while working with DataLake Storage:\n\n* [`datalake_samples_service.py`](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-file-datalake/samples/datalake_samples_service.py) - Examples for authenticating and operating on the client:\n    * Instantiate DataLakeServiceClient using connection str\n    * Instantiate DataLakeServiceClient using AAD Credential\n    * Get user delegation key\n    * Create all kinds of clients from DataLakeServiceClient and operate on those clients\n    * List file systems\n\n* [`datalake_samples_access_control.py`](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-file-datalake/samples/datalake_samples_access_control.py) - Examples for common DataLake Storage tasks:\n    * Set up a file system\n    * Create a directory\n    * Set/Get access control for the directory\n    * Create files under the directory\n    * Set/Get access control for each file\n    * Delete file system\n\n* [`datalake_samples_upload_download.py`](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-file-datalake/samples/datalake_samples_upload_download.py) - Examples for authenticating and creating the client:\n    * Set up a file system\n    * Create file\n    * Append data to the file\n    * Flush data to the file\n    * Download the uploaded data\n    * Delete file system\n\n## Prerequisites\n* Python 3.6 later is required to use this package\n* You must have an [Azure subscription](https://azure.microsoft.com/free/) and an\n[Azure storage account](https://docs.microsoft.com/azure/storage/blobs/data-lake-storage-quickstart-create-account) to run these samples.\n\n## Setup\n\n1. Install the Azure Storage Datalake client library for Python with [pip](https://pypi.org/project/pip/):\n\n```bash\npip install azure-storage-file-datalake --pre\n```\n\n2. Clone or download this sample repository\n3. Open the sample folder in Visual Studio Code or your IDE of choice.\n\n## Running the samples\n\n1. Open a terminal window and `cd` to the directory that the samples are saved in.\n2. Set the environment variables `STORAGE_ACCOUNT_NAME` and `STORAGE_ACCOUNT_KEY` with your own values.\n3. run the file, eg.`python datalake_samples_upload_download.py`\n\n## Next steps\n\nCheck out the [API reference documentation](https://aka.ms/azsdk-python-storage-filedatalake-ref) to learn more about\nwhat you can do with the DataLake Storage client library.\n", "repo_name": "storage/azure-storage-file-datalake/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-file-datalake/samples", "language": ["Python"]}, {"README_text": "---\npage_type: sample\nlanguages:\n  - python\nproducts:\n  - azure\n  - azure-storage\nurlFragment: storage-file-share-samples\n---\n\n# Azure Storage File Share client library for Python Samples\n\nThese are code samples that show common scenario operations with the Azure Storage File Share client library.\nThe async versions of the samples (the python sample files appended with `_async`) show asynchronous operations\nwith file shares.\n\n* [file_samples_hello_world.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-file-share/samples/file_samples_hello_world.py) ([async version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-file-share/samples/file_samples_hello_world_async.py)) - Examples for getting started with file shares:\n    * Client creation\n    * Create a file share\n    * Upload a file\n\n* [file_samples_authentication.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-file-share/samples/file_samples_authentication.py) ([async version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-file-share/samples/file_samples_authentication_async.py)) - Examples for authenticating and creating the client:\n    * From a connection string\n    * From a shared access key\n    * From a shared access signature token\n\n* [file_samples_service.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-file-share/samples/file_samples_service.py) ([async version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-file-share/samples/file_samples_service_async.py)) - Examples for interacting with the file service:\n    * Get and set service properties\n    * Create, list, and delete shares\n    * Get a share client\n\n* [file_samples_share.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-file-share/samples/file_samples_share.py) ([async version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-file-share/samples/file_samples_share_async.py)) - Examples for interacting with file shares:\n    * Create a share snapshot\n    * Set share quota and metadata\n    * List directories and files\n    * Get the directory or file client to interact with a specific entity\n\n* [file_samples_directory.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-file-share/samples/file_samples_directory.py) ([async version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-file-share/samples/file_samples_directory_async.py)) - Examples for interacting with directories:\n    * Create a directory and add files\n    * Create and delete subdirectories\n    * Get the subdirectory client\n\n* [file_samples_client.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-file-share/samples/file_samples_client.py) ([async version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-file-share/samples/file_samples_client_async.py)) - Examples for interacting with files:\n    * Create, upload, download, and delete files\n    * Copy a file from a URL\n\n## Prerequisites\n* Python 3.6 or later is required to use this package\n* You must have an [Azure subscription](https://azure.microsoft.com/free/) and an\n[Azure storage account](https://docs.microsoft.com/azure/storage/common/storage-account-overview) to run these samples.\n\n## Setup\n\n1. Install the Azure Storage File Share client library for Python with [pip](https://pypi.org/project/pip/):\n\n```bash\npip install azure-storage-file-share --pre\n```\n\n2. Clone or download this sample repository\n3. Open the sample folder in Visual Studio Code or your IDE of choice.\n\n## Running the samples\n\n1. Open a terminal window and `cd` to the directory that the samples are saved in.\n2. Set the environment variables specified in the sample file you wish to run.\n3. Follow the usage described in the file, e.g. `python file_samples_hello_world.py`\n\n## Next steps\n\nCheck out the [API reference documentation](https://aka.ms/azsdk-python-storage-fileshare-ref) to learn more about\nwhat you can do with the Azure Storage File Share client library.\n", "repo_name": "storage/azure-storage-file-share/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-file-share/samples", "language": ["Python"]}, {"README_text": "---\npage_type: sample\nlanguages:\n  - python\nproducts:\n  - azure\n  - azure-storage\nurlFragment: storage-queue-samples\n---\n\n# Azure Storage Queue client library for Python Samples\n\nThese are code samples that show common scenario operations with the Azure Storage Queue client library.\nThe async versions of the samples (the python sample files appended with `_async`) show asynchronous operations\nwith queues.\n\n## Contents\n\n* [queue_samples_hello_world.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-queue/samples/queue_samples_hello_world.py) ([async version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-queue/samples/queue_samples_hello_world_async.py)) - Examples for getting started with queues:\n    * Client creation\n    * Create a queue\n    * Send messages\n    * Receive messages\n\n* [queue_samples_authentication.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-queue/samples/queue_samples_authentication.py) ([async version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-queue/samples/queue_samples_authentication_async.py)) - Examples for authenticating and creating the client:\n    * From a connection string\n    * From a shared access key\n    * From a shared access signature token\n    * From Azure Active Directory\n\n* [queue_samples_service.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-queue/samples/queue_samples_service.py) ([async version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-queue/samples/queue_samples_service_async.py)) - Examples for interacting with the queue service:\n    * Get and set service properties\n    * List queues in a storage account\n    * Create and delete a queue from the service\n    * Get the QueueClient\n\n* [queue_samples_message.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-queue/samples/queue_samples_message.py) ([async version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-queue/samples/queue_samples_message_async.py)) - Examples for working with queues and messages:\n    * Set an access policy\n    * Get and set queue metadata\n    * Send and receive messages\n    * Delete specified messages and clear all messages\n    * Peek and update messages\n\n* [network_activity_logging.py](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-queue/samples/network_activity_logging.py) - Shows how to enable logging to console for the Storage Queues library:\n    * Setting up the logger and configuring output to STDOUT\n    * Setting the level on the logger\n    * Enabling the logger for the service and printing any logging messages\n\n## Prerequisites\n* Python 3.6 or later is required to use this package\n* You must have an [Azure subscription](https://azure.microsoft.com/free/) and an\n[Azure storage account](https://docs.microsoft.com/azure/storage/common/storage-account-overview) to run these samples.\n\n## Setup\n\n1. Install the Azure Storage Queues client library for Python with [pip](https://pypi.org/project/pip/):\n\n```bash\npip install azure-storage-queue\n```\n\n2. Clone or download this sample repository\n3. Open the sample folder in Visual Studio Code or your IDE of choice.\n\n## Running the samples\n\n1. Open a terminal window and `cd` to the directory that the samples are saved in.\n2. Set the environment variables specified in the sample file you wish to run.\n3. Follow the usage described in the file, e.g. `python queue_samples_hello_world.py`\n\n## Next steps\n\nCheck out the [API reference documentation](https://aka.ms/azsdk-python-storage-queue-ref) to learn more about\nwhat you can do with the Azure Storage Queues client library.", "repo_name": "storage/azure-storage-queue/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-queue/samples", "language": ["Python"]}, {"README_text": "\n# Azure Synapse Artifacts client library for Python Samples\n\nThese are code samples that show common scenario operations with the Azure Synapse Artifacts client library.\n\n## Prerequisites\n\n* Python 3.6 or later is required to use this package\n* You need an [Azure subscription][azure_sub] to use this package.\n\n## Setup\n\n1. Install the Azure Synapse Artifacts client library for Python with [pip](https://pypi.org/project/pip/):\n\n```bash\npip install azure-identity\npip install azure-synapse-artifacts\n```\n\n2. Clone or download this sample repository\n3. Open the sample folder in Visual Studio Code or your IDE of choice.\n\n## Running the samples\n\n1. Open a terminal window and `cd` to the directory that the samples are saved in.\n2. Set the environment variables specified in the sample file you wish to run.\n3. Follow the usage described in the file, e.g. `python simple_sample.py`\n\n<!-- LINKS -->\n[azure_sub]: https://azure.microsoft.com/free/\n", "repo_name": "synapse/azure-synapse-artifacts/samples/Readme.md", "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/synapse/azure-synapse-artifacts/samples/Readme.md", "language": ["Python"]}, {"README_text": "from azure.synapse import SynapseClient\nfrom azure.identity import ClientSecretCredential\n\n\nclass SynapseSamples:\n\n    def __init__(self):\n        self.synapse_client = self.synapse_data_plane_factory()\n        self.spark_batch_operation = self.synapse_client.spark_batch\n\n    @staticmethod\n    def synapse_data_plane_factory():\n        credential = ClientSecretCredential(\n            tenant_id=\"\", # your tenant id\n            client_id=\"\", #  your client id\n            client_secret=\"\", # your client secret\n        )\n        return SynapseClient(credential)\n\n    # Scenario 1: List all spark batch job under specific spark pool\n    def list_spark_batch_jobs(self, spark_pool_name, workspace_name, detailed=True):\n        self.spark_batch_operation.list(workapce_name=workspace_name, spark_pool_name=spark_pool_name,\n                                        detailed=detailed)\n\n    # Scenario 2: Get a specific spark batch job with batch id\n    def get_spark_batch_job(self, batch_id, spark_pool_name, workspace_name, detailed=True):\n        self.spark_batch_operation.get(workspace_name=workspace_name, spark_pool_name=spark_pool_name,\n                                       batch_id=batch_id)\n\n    # Scenario 3: Submit/Create a spark batch job\n    def create_spark_batch_job(self, workspace_name, spark_pool_name, job_name, file, class_name,\n                               args, driver_memory, driver_cores, executor_memory, executor_cores,\n                               num_executors, jars=None, files=None, archives=None, conf=None, artifact_id=None,\n                               tags=None, detailed=True):\n        from azure.synapse.models import ExtendedLivyBatchRequest\n\n        livy_batch_request = ExtendedLivyBatchRequest(\n            tags=tags, artifact_id=artifact_id,\n            name=job_name, file=file, class_name=class_name, args=args, jars=jars, files=files, archives=archives,\n            conf=conf, driver_memory=driver_memory, driver_cores=driver_cores, executor_memory=executor_memory,\n            executor_cores=executor_cores, num_executors=num_executors)\n\n        return self.spark_batch_operation.create(workspace_name, spark_pool_name, livy_batch_request, detailed)\n\n    # Scenario 4: Delete/Cancel a spark batch job\n    def cancel_spark_batch_job(self, batch_id, spark_pool_name, workspace_name, detailed=True):\n        self.spark_batch_operation.delete(workspace_name=workspace_name, spark_pool_name=spark_pool_name,\n                                          batch_id=batch_id)\n\n\nif __name__ == \"__main__\":\n    synapse_sample = SynapseSamples()\n    workspace_name = \"testsynapseworkspace\"\n    spark_pool_name = \"testsparkpool\"\n    batch_id = 1\n    # parameter for creating batch job\n    job_name = \"WordCount_Java\"\n    file = \"abfss://{filesystem}@{adlsgen2account}.dfs.core.windows.net/samples/java/wordcount/wordcount.jar\"\n    class_name = \"WordCount\"\n    args = [\"abfss://{filesystem}@{adlsgen2account}.dfs.core.windows.net/samples/java/wordcount/shakespeare.txt\",\n            \"abfss://{filesystem}@{adlsgen2account}.dfs.core.windows.net/samples/java/wordcount/result/\"]\n    driver_memory = \"4g\"\n    driver_cores = 4\n    executor_memory = \"4g\"\n    executor_cores = 4\n    num_executors = 2\n\n    # list\n    batch_jobs = synapse_sample.list_spark_batch_jobs(spark_pool_name, workspace_name)\n\n    # get\n    batch_job = synapse_sample.get_spark_batch_job(batch_id, spark_pool_name, workspace_name)\n\n    # Create\n    submit_result_job = synapse_sample.create_spark_batch_job(workspace_name, spark_pool_name, job_name, file,\n                                                              class_name, args, driver_memory, driver_cores,\n                                                              executor_memory, executor_cores, num_executors)\n\n    # Cancel batch job\n    synapse_sample.cancel_spark_batch_job(submit_result_job.id, submit_result_job.spark_pool_name,\n                                          submit_result_job.workspace_name)\n", "repo_name": "synapse/azure-synapse/samples/sample.py", "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/synapse/azure-synapse/samples/sample.py", "language": ["Python"]}, {"README_text": "---\npage_type: sample\nlanguages:\n  - python\nproducts:\n  - azure\n  - azure-table-storage\nurlFragment: tables-samples\n---\n\n# Samples for Azure Tables client library for Python\n\nThese code samples show common scenario operations with the Azure Data Tables client library.\n\nYou can authenticate your client with a Tables API key:\n* See [sample_authentication.py][sample_authentication] and [sample_authentication_async.py][sample_authentication_async] for how to authenticate in the above cases.\n\nThese sample programs show common scenarios for the Tables client's offerings.\n\n|**File Name**|**Description**|\n|-------------|---------------|\n|[sample_create_client.py][create_client] and [sample_create_client_async.py][create_client_async]|Instantiate a table client|Authorizing a `TableServiceClient` object and `TableClient` object|\n|[sample_create_delete_table.py][create_delete_table] and [sample_create_delete_table_async.py][create_delete_table_async]|Creating and deleting a table in a storage account|\n|[sample_insert_delete_entities.py][insert_delete_entities] and [sample_insert_delete_entities_async.py][insert_delete_entities_async]|Inserting and deleting individual entities in a table|\n|[sample_query_tables.py][query_tables] and [sample_query_tables_async.py][query_tables_async]|Querying tables in a storage account|\n|[sample_update_upsert_merge_entities.py][update_upsert_merge] and [sample_update_upsert_merge_entities_async.py][update_upsert_merge_async]| Updating, upserting, and merging entities|\n|[sample_batching.py][sample_batch] and [sample_batching_async.py][sample_batch_async]| Committing many requests in a single batch|\n|[sample_copy_table.py][sample_copy_table] and [sample_copy_table_async.py][sample_copy_table_async]| Copying a table between Tables table and Storage blob|\n\n\n### Prerequisites\n* Python 3.7 or later is required to use this package.\n* You must have an [Azure subscription](https://azure.microsoft.com/free/) and either an\n[Azure storage account](https://docs.microsoft.com/azure/storage/common/storage-account-overview) or an [Azure Cosmos Account](https://docs.microsoft.com/azure/cosmos-db/account-overview) to use this package.\n\n## Setup\n\n1. Install the Azure Data Tables client library for Python with [pip](https://pypi.org/project/pip/):\n```bash\npip install --pre azure-data-tables\n```\n2. Clone or download this sample repository\n3. Open the sample folder in Visual Studio Code or your IDE of choice.\n\n## Running the samples\n\n1. Open a terminal window and `cd` to the directory that the samples are saved in.\n2. Set the environment variables specified in the sample file you wish to run.\n3. Follow the usage described in the file, e.g. `python sample_create_table.py`\n\n## Writing Filters\n\n### Supported Comparison Operators\n|**Operator**|**URI expression**|\n|------------|------------------|\n|`Equal`|`eq`|\n|`GreaterThan`|`gt`|\n|`GreaterThanOrEqual`|`ge`|\n|`LessThan`|`lt`|\n|`LessThanOrEqual`|`le`|\n|`NotEqual`|`ne`|\n|`And`|`and`|\n|`Not`|`not`|\n|`Or`|`or`|\n\n### Formatting and quote characters\n\nQuery strings must wrap literal values in single quotes. Literal values containing single quote characters must be escaped with a double single quote.\n```python\nquery_filter = \"LastName eq 'O''Connor' and CustomerSince eq datetime'2008-07-10T00:00:00Z'\"\ntable_client.query_entities(query_filter)\n```\nQuery strings can also be parameterized using a dictionary of values, which will be automatically formatted with single quotes according to data type.\nWhen using the parameter dictionary to format filters, any single quote characters in the values will be automatically escaped.\n```python\nparameters = {\n    \"last_name\": \"O'Connor\",\n    \"customer_since\": datetime(year=2008, month=7, day=10)\n}\nquery_filter = \"LastName eq @last_name and CustomerSince eq @customer_since\"\ntable_client.query_entities(query_filter, parameters=parameters)\n```\n\nFor more information on formatting and supported characters, please see the [query reference documentation][query_reference_documentation].\n\n\n### Example Filters\n\n#### Filter on `PartitionKey` and `RowKey`:\n```python\nparameters = {\n    \"pk\": PartitionKey,\n    \"rk\": RowKey\n}\nquery_filter = \"PartitionKey eq @pk and RowKey eq @rk\"\ntable_client.query_entities(query_filter, parameters=parameters)\n```\n\n#### Filter on Properties\n```python\nparameters = {\n    \"first\": first_name,\n    \"last\": last_name\n}\nquery_filter = \"FirstName eq @first or LastName eq @last\"\ntable_client.query_entities(query_filter, parameters=parameters)\n```\n\n#### Filter with string comparison operators\n```python\nquery_filter = \"LastName ge 'A' and LastName lt 'B'\"\ntable_client.query_entities(query_filter)\n```\n\n#### Filter with numeric properties\n```python\nquery_filter = \"Age gt 30\"\ntable_client.query_entities(query_filter)\n```\n\n```python\nquery_filter = \"AmountDue le 100.25\"\ntable_client.query_entities(query_filter)\n```\n\n#### Filter with boolean properties\n```python\nquery_filter = \"IsActive eq true\"\ntable_client.query_entities(query_filter)\n```\n\n#### Filter with DateTime properties\n```python\nquery_filter = \"CustomerSince eq datetime'2008-07-10T00:00:00Z'\"\ntable_client.query_entities(query_filter)\n```\n\n#### Filter with GUID properties\n```python\nquery_filter = \"GuidValue eq guid'a455c695-df98-5678-aaaa-81d3367e5a34'\"\ntable_client.query_entities(query_filter)\n```\n\n\n## Next steps\n\nCheck out the [API reference documentation][api_reference_documentation] to learn more about\nwhat you can do with the Azure Data Tables client library.\n\n\n<!-- LINKS -->\n[api_reference_documentation]: https://docs.microsoft.com/rest/api/storageservices/table-service-rest-api\n[query_reference_documentation]: https://docs.microsoft.com/rest/api/storageservices/querying-tables-and-entities\n\n[sample_authentication]:https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/tables/azure-data-tables/samples/sample_authentication.py\n[sample_authentication_async]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/tables/azure-data-tables/samples/async_samples/sample_authentication_async.py\n\n[create_client]:https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/tables/azure-data-tables/samples/sample_create_client.py\n[create_client_async]:https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/tables/azure-data-tables/samples/async_samples/sample_create_client_async.py\n\n[create_delete_table]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/tables/azure-data-tables/samples/sample_create_delete_table.py\n[create_delete_table_async]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/tables/azure-data-tables/samples/async_samples/sample_create_delete_table_async.py\n\n[insert_delete_entities]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/tables/azure-data-tables/samples/sample_insert_delete_entities.py\n[insert_delete_entities_async]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/tables/azure-data-tables/samples/async_samples/sample_insert_delete_entities_async.py\n\n[query_entities]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/tables/azure-data-tables/samples/sample_query_table.py\n[query_table_async]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/tables/azure-data-tables/samples/async_samples/sample_query_table_async.py\n\n[query_tables]:https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/tables/azure-data-tables/samples/sample_query_tables.py\n[query_tables_async]:https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/tables/azure-data-tables/samples/async_samples/sample_query_tables_async.py\n\n[update_upsert_merge]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/tables/azure-data-tables/samples/sample_update_upsert_merge_entities.py\n[update_upsert_merge_async]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/tables/azure-data-tables/samples/async_samples/sample_update_upsert_merge_entities_async.py\n\n[sample_batch]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/tables/azure-data-tables/samples/sample_batching.py\n[sample_batch_async]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/tables/azure-data-tables/samples/async_samples/sample_batching_async.py\n\n[sample_copy_table]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/tables/azure-data-tables/samples/sample_copy_table.py\n[sample_copy_table_async]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/tables/azure-data-tables/samples/async_samples/sample_copy_table_async.py\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python/sdk/tables/azure-data-tables/README.png)", "repo_name": "tables/azure-data-tables/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/tables/azure-data-tables/samples", "language": ["Python"]}, {"README_text": "---\npage_type: sample\nlanguages:\n    - python\nproducts:\n    - azure\n    - azure-template\nurlFragment: azure-template-samples\n---\n\n# Azure Template samples\n\nProvide an overview of all the samples and explain how to run them.\n\nFor guidance on the samples README, visit the [sample guide](https://github.com/Azure/azure-sdk-for-python/blob/main/doc/dev/sample_guide.md#package-sample-readme).\n\n\n|**File Name**|**Description**|\n|----------------|-------------|\n|[sample_simple.py][sample_simple] | Run template sample method |\n\n## Prerequisites\n\n* Python 3.7 or later is required to use this package.\n\n## Setup\n\n1. Install the Azure Template client library for Python with [pip][pip]:\n\n    ```sh\n    pip install azure-template\n    ```\n\n2. Clone or download the repository containing this sample code. Alternatively, you can download the sample file directly.\n\n## Running the samples\n\n Navigate to the directory that the sample(s) are saved in, and follow the usage described in the file. For example, `python sample_simple.py`.\n\n## Next steps\n\nLink the API reference docs for your package in this section.\n\n<!-- Links -->\n\n[sample_simple]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/template/azure-template/samples/sample_simple.py\n[pip]: https://pypi.org/project/pip/\n", "repo_name": "template/azure-template/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/template/azure-template/samples", "language": ["Python"]}, {"README_text": "---\npage_type: sample\nlanguages:\n  - python\nproducts:\n  - azure\n  - azure-cognitive-services\n  - language-service\nurlFragment: textanalytics-samples\n---\n\n# Samples for Azure Text Analytics client library for Python\n\nThese code samples show common scenario operations with the Azure Text Analytics client library.\n\nYou can authenticate your client with a Language API key or through Azure Active Directory with a token credential from [azure-identity][azure_identity]:\n* See [sample_authentication.py][sample_authentication] and [sample_authentication_async.py][sample_authentication_async] for how to authenticate in the above cases.\n\nThese sample programs show common scenarios for the Text Analytics client's offerings.\n\n|**File Name**|**Description**|\n|----------------|-------------|\n|[sample_detect_language.py][detect_language] and [sample_detect_language_async.py][detect_language_async]|Detect language in documents|\n|[sample_recognize_entities.py][recognize_entities] and [sample_recognize_entities_async.py][recognize_entities_async]|Recognize named entities in documents|\n|[sample_recognize_linked_entities.py][recognize_linked_entities] and [sample_recognize_linked_entities_async.py][recognize_linked_entities_async]|Recognize linked entities in documents|\n|[sample_recognize_pii_entities.py][recognize_pii_entities] and [sample_recognize_pii_entities_async.py][recognize_pii_entities_async]|Recognize personally identifiable information in documents|\n|[sample_extract_key_phrases.py][extract_key_phrases] and [sample_extract_key_phrases_async.py][extract_key_phrases_async]|Extract key phrases from documents|\n|[sample_analyze_sentiment.py][analyze_sentiment] and [sample_analyze_sentiment_async.py][analyze_sentiment_async]|Analyze the sentiment of documents|\n|[sample_alternative_document_input.py][sample_alternative_document_input] and [sample_alternative_document_input_async.py][sample_alternative_document_input_async]|Pass documents to an endpoint using dicts|\n|[sample_analyze_healthcare_entities.py][analyze_healthcare_entities_sample] and [sample_analyze_healthcare_entities_async.py][analyze_healthcare_entities_sample_async]|Analyze healthcare entities|\n|[sample_analyze_actions.py][analyze_sample] and [sample_analyze_actions_async.py][analyze_sample_async]|Run multiple analyses together in a single request|\n|[sample_recognize_custom_entities.py][recognize_custom_entities_sample] and [sample_recognize_custom_entities_async.py][recognize_custom_entities_sample_async]|Use a custom model to recognize custom entities in documents|\n|[sample_single_label_classify.py][single_label_classify_sample] and [sample_single_label_classify_async.py][single_label_classify_sample_async]|Use a custom model to classify documents into a single category|\n|[sample_multi_label_classify.py][multi_label_classify_sample] and [sample_multi_label_classify_async.py][multi_label_classify_sample_async]|Use a custom model to classify documents into multiple categories|\n|[sample_model_version.py][sample_model_version] and [sample_model_version_async.py][sample_model_version_async]|Set the model version for pre-built Text Analytics models|\n|[sample_analyze_healthcare_action.py][sample_analyze_healthcare_action] and [sample_analyze_healthcare_action_async.py][sample_analyze_healthcare_action_async]|Run a healthcare and PII analysis together|\n|[sample_extract_summary.py][extract_summary_sample] and [sample_extract_summary_async.py][extract_summary_sample_async]|Run extractive text summarization on documents|\n|[sample_abstract_summary.py][abstract_summary_sample] and [sample_abstract_summary_async.py][abstract_summary_sample_async]|Run abstractive text summarization on documents|\n\n## Prerequisites\n* Python 3.7 or later is required to use this package\n* You must have an [Azure subscription][azure_subscription] and an\n[Azure Language account][azure_language_account] to run these samples.\n\n## Setup\n\n1. Install the Azure Text Analytics client library for Python with [pip][pip]:\n\n```bash\npip install azure-ai-textanalytics\n```\nFor more information about how the versioning story of the SDK corresponds to the versioning story of the service's API, see [here][versioning_story_readme].\n\n* If authenticating with Azure Active Directory, make sure you have [azure-identity][azure_identity_pip] installed:\n  ```bash\n  pip install azure-identity\n  ```\n\n2. Clone the repo or download the sample file\n3. Open the sample file in Visual Studio Code or your IDE of choice.\n\n## Running the samples\n\n1. Open a terminal window and `cd` to the directory that the samples are saved in.\n2. Set the environment variables specified in the sample file you wish to run.\n3. Follow the usage described in the file, e.g. `python sample_detect_language.py`\n\n## Next steps\n\nCheck out the [API reference documentation][api_reference_documentation] to learn more about\nwhat you can do with the Azure Text Analytics client library.\n\n|**Advanced Sample File Name**|**Description**|\n|----------------|-------------|\n|[sample_analyze_sentiment_with_opinion_mining.py][sample_analyze_sentiment_with_opinion_mining] and [sample_analyze_sentiment_with_opinion_mining_async.py][sample_analyze_sentiment_with_opinion_mining_async]|Analyze sentiment in documents with granular analysis into individual opinions present in a sentence. Only available with API version v3.1 and up.|\n|[sample_get_detailed_diagnostics_information.py][get_detailed_diagnostics_information] and [sample_get_detailed_diagnostics_information_async.py][get_detailed_diagnostics_information_async]|Get the request batch statistics, model version, and raw response in JSON format through a callback|\n|[sample_analyze_healthcare_entities_with_cancellation.py][sample_analyze_healthcare_entities_with_cancellation] and [sample_analyze_healthcare_entities_with_cancellation_async.py][sample_analyze_healthcare_entities_with_cancellation_async]|Cancel an analyze healthcare entities operation after it's started.|\n\n[versioning_story_readme]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/textanalytics/azure-ai-textanalytics#install-the-package\n[azure_identity]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity\n[sample_authentication]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/textanalytics/azure-ai-textanalytics/samples/sample_authentication.py\n[sample_authentication_async]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/textanalytics/azure-ai-textanalytics/samples/async_samples/sample_authentication_async.py\n[detect_language]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/textanalytics/azure-ai-textanalytics/samples/sample_detect_language.py\n[detect_language_async]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/textanalytics/azure-ai-textanalytics/samples/async_samples/sample_detect_language_async.py\n[recognize_entities]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/textanalytics/azure-ai-textanalytics/samples/sample_recognize_entities.py\n[recognize_entities_async]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/textanalytics/azure-ai-textanalytics/samples/async_samples/sample_recognize_entities_async.py\n[recognize_linked_entities]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/textanalytics/azure-ai-textanalytics/samples/sample_recognize_linked_entities.py\n[recognize_linked_entities_async]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/textanalytics/azure-ai-textanalytics/samples/async_samples/sample_recognize_linked_entities_async.py\n[recognize_pii_entities]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/textanalytics/azure-ai-textanalytics/samples/sample_recognize_pii_entities.py\n[recognize_pii_entities_async]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/textanalytics/azure-ai-textanalytics/samples/async_samples/sample_recognize_pii_entities_async.py\n[extract_key_phrases]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/textanalytics/azure-ai-textanalytics/samples/sample_extract_key_phrases.py\n[extract_key_phrases_async]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/textanalytics/azure-ai-textanalytics/samples/async_samples/sample_extract_key_phrases_async.py\n[analyze_sentiment]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/textanalytics/azure-ai-textanalytics/samples/sample_analyze_sentiment.py\n[analyze_sentiment_async]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/textanalytics/azure-ai-textanalytics/samples/async_samples/sample_analyze_sentiment_async.py\n[get_detailed_diagnostics_information]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/textanalytics/azure-ai-textanalytics/samples/sample_get_detailed_diagnostics_information.py\n[get_detailed_diagnostics_information_async]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/textanalytics/azure-ai-textanalytics/samples/async_samples/sample_get_detailed_diagnostics_information_async.py\n[sample_alternative_document_input]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/textanalytics/azure-ai-textanalytics/samples/sample_alternative_document_input.py\n[sample_alternative_document_input_async]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/textanalytics/azure-ai-textanalytics/samples/async_samples/sample_alternative_document_input_async.py\n[sample_analyze_sentiment_with_opinion_mining]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/textanalytics/azure-ai-textanalytics/samples/sample_analyze_sentiment_with_opinion_mining.py\n[sample_analyze_sentiment_with_opinion_mining_async]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/textanalytics/azure-ai-textanalytics/samples/async_samples/sample_analyze_sentiment_with_opinion_mining_async.py\n[analyze_healthcare_entities_sample]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/samples/sample_analyze_healthcare_entities.py\n[analyze_healthcare_entities_sample_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/samples/async_samples/sample_analyze_healthcare_entities_async.py\n[analyze_sample]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/samples/sample_analyze_actions.py\n[analyze_sample_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/samples/async_samples/sample_analyze_actions_async.py\n[sample_analyze_healthcare_entities_with_cancellation]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/samples/sample_analyze_healthcare_entities_with_cancellation.py\n[sample_analyze_healthcare_entities_with_cancellation_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/samples/async_samples/sample_analyze_healthcare_entities_with_cancellation_async.py\n[recognize_custom_entities_sample]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/samples/sample_recognize_custom_entities.py\n[recognize_custom_entities_sample_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/samples/async_samples/sample_recognize_custom_entities_async.py\n[single_label_classify_sample]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/samples/sample_single_label_classify.py\n[single_label_classify_sample_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/samples/async_samples/sample_single_label_classify_async.py\n[multi_label_classify_sample]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/samples/sample_multi_label_classify.py\n[multi_label_classify_sample_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/samples/async_samples/sample_multi_label_classify_async.py\n[sample_model_version]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/samples/sample_model_version.py\n[sample_model_version_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/samples/async_samples/sample_model_version_async.py\n[sample_analyze_healthcare_action]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/samples/sample_analyze_healthcare_action.py\n[sample_analyze_healthcare_action_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/samples/async_samples/sample_analyze_healthcare_action_async.py\n[extract_summary_sample]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/samples/sample_extract_summary.py\n[extract_summary_sample_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/samples/async_samples/sample_extract_summary_async.py\n[abstract_summary_sample]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/samples/sample_abstract_summary.py\n[abstract_summary_sample_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/samples/async_samples/sample_abstract_summary_async.py\n[pip]: https://pypi.org/project/pip/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_language_account]: https://docs.microsoft.com/azure/cognitive-services/cognitive-services-apis-create-account?tabs=singleservice%2Cwindows\n[azure_identity_pip]: https://pypi.org/project/azure-identity/\n[api_reference_documentation]: https://aka.ms/azsdk-python-textanalytics-ref-docs\n", "repo_name": "textanalytics/azure-ai-textanalytics/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/samples", "language": ["Python"]}, {"README_text": "---\npage_type: sample\nlanguages:\n  - python\nproducts:\n  - azure\n  - azure-cognitive-services\n  - azure-translator\nurlFragment: documenttranslation-samples\n---\n\n# Samples for Azure Document Translation client library for Python\n\nThese code samples show common scenario operations with the Azure Document Translation client library.\n\nYou can authenticate your client with a Document Translation API key or through Azure Active Directory with a token credential from [azure-identity][azure_identity]:\n* See [sample_authentication.py][sample_authentication] and [sample_authentication_async.py][sample_authentication_async] for how to authenticate in the above cases.\n\nThese sample programs show common scenarios for the Document Translation client's offerings.\n\n|**File Name**|**Description**|\n|----------------|-------------|\n|[sample_begin_translation.py][begin_translation] and [sample_begin_translation_async.py][begin_translation_async]|Translate your documents|\n|[sample_translate_multiple_inputs.py][sample_translate_multiple_inputs] and [sample_translate_multiple_inputs_async.py][sample_translate_multiple_inputs_async]|Translate multiple source containers with documents to multiple target containers in different languages|\n|[sample_translation_with_glossaries.py][begin_translation_with_glossaries] and [sample_translation_with_glossaries_async.py][begin_translation_with_glossaries_async]|Translate your documents using custom glossaries|\n|[sample_check_document_statuses.py][check_document_statuses] and [sample_check_document_statuses_async.py][check_document_statuses_async]|Check status of submitted documents|\n|[sample_list_translations.py][list_translations] and [sample_list_translations_async.py][list_translations_async]|Check status of all submitted translation operations|\n\n\n## Prerequisites\n* Python 3.7 or later is required to use this package\n* You must have an [Azure subscription][azure_subscription] and an\n[Azure Translator account][azure_document_translation_account] to run these samples.\n\n## Setup\n\n1. Install the Azure Document Translation client library for Python with [pip][pip]:\n\n```bash\npip install azure-ai-translation-document\n```\nFor more information about how the versioning of the SDK corresponds to the versioning of the service's API, see [here][versioning_story_readme].\n\n2. Clone or download this sample repository\n3. Open the sample folder in Visual Studio Code or your IDE of choice.\n\n## Running the samples\n\n1. Open a terminal window and `cd` to the directory that the samples are saved in.\n2. Set the environment variables specified in the sample file you wish to run.\n3. Follow the usage described in the file, e.g. `python sample_begin_translation.py`\n\n## Next steps\n\nCheck out the [API reference documentation][api_reference_documentation] to learn more about\nwhat you can do with the Azure Document Translation client library.\n\n|**Advanced Sample File Name**|**Description**|\n|----------------|-------------|\n|[sample_translation_with_azure_blob.py][begin_translation_with_azure_blob] and [sample_translation_with_azure_blob_async.py][begin_translation_with_azure_blob_async]|Translate documents with upload/download help using Azure Blob Storage|\n|[sample_translation_with_custom_model.py][sample_translation_with_custom_model] and [sample_translation_with_custom_model_async.py][sample_translation_with_custom_model_async]|Translate documents using a custom model|\n|[sample_begin_translation_with_filters.py][sample_begin_translation_with_filters] and [sample_begin_translation_with_filters_async.py][sample_begin_translation_with_filters_async]|Translate documents under a folder or translate only a specific document|\n|[sample_list_document_statuses_with_filters.py][sample_list_document_statuses_with_filters] and [sample_list_document_statuses_with_filters_async.py][sample_list_document_statuses_with_filters_async]|List document statuses using filters|\n|[sample_list_translations_with_filters.py][sample_list_translations_with_filters] and [sample_list_translations_with_filters_async.py][sample_list_translations_with_filters_async]|List translation operations using filters|\n\n\n[versioning_story_readme]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/translation/azure-ai-translation-document#install-the-package\n[azure_identity]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity\n[sample_authentication]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/translation/azure-ai-translation-document/samples/sample_authentication.py\n[sample_authentication_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/translation/azure-ai-translation-document/samples/async_samples/sample_authentication_async.py\n[begin_translation]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/translation/azure-ai-translation-document/samples/sample_begin_translation.py\n[begin_translation_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/translation/azure-ai-translation-document/samples/async_samples/sample_begin_translation_async.py\n[sample_translate_multiple_inputs]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/translation/azure-ai-translation-document/samples/sample_translate_multiple_inputs.py\n[sample_translate_multiple_inputs_async]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/translation/azure-ai-translation-document/samples/async_samples/sample_translate_multiple_inputs_async.py\n[begin_translation_with_azure_blob]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/translation/azure-ai-translation-document/samples/sample_translation_with_azure_blob.py\n[begin_translation_with_azure_blob_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/translation/azure-ai-translation-document/samples/async_samples/sample_translation_with_azure_blob_async.py\n[begin_translation_with_glossaries]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/translation/azure-ai-translation-document/samples/sample_translation_with_glossaries.py\n[begin_translation_with_glossaries_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/translation/azure-ai-translation-document/samples/async_samples/sample_translation_with_glossaries_async.py\n[check_document_statuses]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/translation/azure-ai-translation-document/samples/sample_check_document_statuses.py\n[check_document_statuses_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/translation/azure-ai-translation-document/samples/async_samples/sample_check_document_statuses_async.py\n[list_translations]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/translation/azure-ai-translation-document/samples/sample_list_translations.py\n[list_translations_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/translation/azure-ai-translation-document/samples/async_samples/sample_list_translations_async.py\n[sample_translation_with_custom_model]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/translation/azure-ai-translation-document/samples/sample_translation_with_custom_model.py\n[sample_translation_with_custom_model_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/translation/azure-ai-translation-document/samples/async_samples/sample_translation_with_custom_model_async.py\n[sample_begin_translation_with_filters]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/translation/azure-ai-translation-document/samples/sample_begin_translation_with_filters.py\n[sample_begin_translation_with_filters_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/translation/azure-ai-translation-document/samples/async_samples/sample_begin_translation_with_filters_async.py\n[sample_list_document_statuses_with_filters]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/translation/azure-ai-translation-document/samples/sample_list_document_statuses_with_filters.py\n[sample_list_document_statuses_with_filters_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/translation/azure-ai-translation-document/samples/async_samples/sample_list_document_statuses_with_filters_async.py\n[sample_list_translations_with_filters]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/translation/azure-ai-translation-document/samples/sample_list_translations_with_filters.py\n[sample_list_translations_with_filters_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/translation/azure-ai-translation-document/samples/async_samples/sample_list_translations_with_filters_async.py\n[pip]: https://pypi.org/project/pip/\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_document_translation_account]: https://docs.microsoft.com/azure/cognitive-services/translator/document-translation/get-started-with-document-translation?tabs=python\n[azure_identity_pip]: https://pypi.org/project/azure-identity/\n[api_reference_documentation]: https://docs.microsoft.com/azure/cognitive-services/translator/document-translation/overview\n", "repo_name": "translation/azure-ai-translation-document/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/translation/azure-ai-translation-document/samples", "language": ["Python"]}, {"README_text": "---\npage_type: sample\nlanguages:\n- python\nproducts:\n- azure\n- cognitive-services\n- azure-text-translator\nname: azure.ai.translation.text samples for Python\ndescription: Samples for the azure.ai.translation.text client library.\n---\n\n# Azure Text Translator client library for Python\n\nTranslator Service is a cloud-based neural machine translation service that is part of the Azure Cognitive Services family of REST APIs and can be used with any operating system. This client library offers the following features:\n\n* Get Supported Languages\n* Translate\n* Transliterate\n* Break Sentence\n* Dictionary Lookup\n* Dictionary Examples\n\nSee the [README][README] of the Text Translator client library for more information, including useful links and instructions.\n\n## Common scenarios samples\n\n* [Get Languages][languages_sample]\n* [Translate][translate_sample]\n* [Transliterate][transliterate_sample]\n* [Break Sentence][breaksentence_sample]\n* [Dictionary Lookup][dictionarylookup_sample]\n* [Dictionary Examples][dictionaryexamples_sample]\n\n[README]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/translation/azure-ai-translation-text/README.md\n\n[languages_sample]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/translation/azure-ai-translation-text/samples/Sample1_GetLanguages.md\n[translate_sample]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/translation/azure-ai-translation-text/samples/Sample2_Translate.md\n[transliterate_sample]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/translation/azure-ai-translation-text/samples/Sample3_Transliterate.md\n[breaksentence_sample]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/translation/azure-ai-translation-text/samples/Sample4_BreakSentence.md\n[dictionarylookup_sample]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/translation/azure-ai-translation-text/samples/Sample5_DictionaryLookup.md\n[dictionaryexamples_sample]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/translation/azure-ai-translation-text/samples/Sample6_DictionaryExamples.md\n", "repo_name": "translation/azure-ai-translation-text/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/translation/azure-ai-translation-text/samples", "language": ["Python"]}, {"README_text": "\nimport json\nimport os \nfrom azure.media.videoanalyzeredge import *\nfrom azure.iot.hub import IoTHubRegistryManager #run pip install azure-iot-hub to get this package\nfrom azure.iot.hub.models import CloudToDeviceMethod, CloudToDeviceMethodResult\nfrom datetime import time\n\ndevice_id = os.getenv(\"iothub_deviceid\");\nmodule_d = os.getenv(\"iothub_moduleid\");\nconnection_string = os.getenv(\"iothub_connectionstring\");\nlive_pipeline_name = \"pipelineInstance1\"\npipeline_topology_name = \"pipelineTopology1\"\nurl = \"rtsp://camerasimulator:8554\"\n\n\ndef build_pipeline_topology():\n    pipeline_topology_properties = PipelineTopologyProperties()\n    pipeline_topology_properties.description = \"Continuous video recording to an Azure Media Services Asset\"\n    user_name_param = ParameterDeclaration(name=\"rtspUserName\",type=\"String\",default=\"testusername\")\n    password_param = ParameterDeclaration(name=\"rtspPassword\",type=\"SecretString\",default=\"testpassword\")\n    url_param = ParameterDeclaration(name=\"rtspUrl\",type=\"String\",default=\"rtsp://www.sample.com\")\n\n    source = RtspSource(name=\"rtspSource\", endpoint=UnsecuredEndpoint(url=\"${rtspUrl}\",credentials=UsernamePasswordCredentials(username=\"${rtspUserName}\",password=\"${rtspPassword}\")))\n    node = NodeInput(node_name=\"rtspSource\")\n    sink = VideoSink(name=\"videoSink\", inputs=[node], video_name=\"video\", local_media_cache_path=\"/var/lib/videoanalyzer/tmp/\", local_media_cache_maximum_size_mi_b=\"1024\");\n    pipeline_topology_properties.parameters = [user_name_param, password_param, url_param]\n    pipeline_topology_properties.sources = [source]\n    pipeline_topology_properties.sinks = [sink]\n    pipeline_topology = PipelineTopology(name=pipeline_topology_name,properties=pipeline_topology_properties)\n\n    return pipeline_topology\n\n\ndef build_live_pipeline():\n    url_param = ParameterDefinition(name=\"rtspUrl\", value=url)\n    pass_param = ParameterDefinition(name=\"rtspPassword\", value=\"secret_password\")\n    live_pipeline_properties = LivePipelineProperties(description=\"Sample description\", topology_name=pipeline_topology_name, parameters=[url_param])\n\n    live_pipeline = LivePipeline(name=live_pipeline_name, properties=live_pipeline_properties)\n\n    return live_pipeline\n\n\ndef invoke_method_helper(method):\n    direct_method = CloudToDeviceMethod(method_name=method.method_name, payload=method.serialize())\n    registry_manager = IoTHubRegistryManager(connection_string=connection_string)\n\n    payload = registry_manager.invoke_device_module_method(device_id=device_id, module_id=module_d, direct_method_request=direct_method).payload\n    if payload is not None and 'error' in payload:\n        print(payload['error'])\n        return None\n\n    return payload\n\n\ndef create_remote_device_adapter(device_name, iot_device_name):\n    registry_manager = IoTHubRegistryManager(connection_string=connection_string)\n    try:\n        iot_device = registry_manager.get_device(device_id=iot_device_name)\n    except Exception as ex:\n        iot_device = registry_manager.create_device_with_certificate_authority(device_id=iot_device_name, status=\"enabled\")\n\n    remote_device_properties = RemoteDeviceAdapterProperties(target=RemoteDeviceAdapterTarget(host=\"camerasimulator\"), iot_hub_device_connection=IotHubDeviceConnection(device_id=iot_device_name,credentials=SymmetricKeyCredentials(key=iot_device.authentication.symmetric_key)))\n    return RemoteDeviceAdapter(name=device_name, properties=remote_device_properties)\n\n\ndef sendPipelineRequests(pipeline_topology, live_pipeline):\n    set_pipeline_top_response = invoke_method_helper(PipelineTopologySetRequest(pipeline_topology=pipeline_topology))\n    if set_pipeline_top_response:\n        set_pipeline_top_result = PipelineTopology.deserialize((set_pipeline_top_response))\n\n    list_pipeline_top_response = invoke_method_helper(PipelineTopologyListRequest())\n    if list_pipeline_top_response:\n        list_pipeline_top_result = PipelineTopologyCollection.deserialize(list_pipeline_top_response)\n\n    get_pipeline_top_response = invoke_method_helper(PipelineTopologyGetRequest(name=pipeline_topology_name))\n    if get_pipeline_top_response:\n        get_pipeline_top_result = PipelineTopology.deserialize(get_pipeline_top_response)\n\n    set_live_pipeline_response = invoke_method_helper(LivePipelineSetRequest(live_pipeline=live_pipeline))\n\n    activate_pipeline_response = invoke_method_helper(LivePipelineActivateRequest(name=live_pipeline_name))\n\n    get_pipeline_response = invoke_method_helper(LivePipelineGetRequest(name=live_pipeline_name))\n    if get_pipeline_response:\n        get_pipeline_result = LivePipeline.deserialize(get_pipeline_response)\n\n    deactivate_pipeline_response = invoke_method_helper(LivePipelineDeactivateRequest(name=live_pipeline_name))\n\n    delete_pipeline_response = invoke_method_helper(LivePipelineDeleteRequest(name=live_pipeline_name))\n\n    delete_pipeline_response = invoke_method_helper(PipelineTopologyDeleteRequest(name=pipeline_topology_name))\n\n\ndef sendDeviceRequests(remote_device_adapter):\n    remote_device_adapter_set_response = invoke_method_helper(\n        RemoteDeviceAdapterSetRequest(remote_device_adapter=remote_device_adapter))\n    if remote_device_adapter_set_response:\n        remote_device_adapter_set_result = RemoteDeviceAdapter.deserialize(remote_device_adapter_set_response)\n\n    remote_device_adapter_get_response = invoke_method_helper(\n        RemoteDeviceAdapterGetRequest(name=remote_device_adapter.name))\n    if remote_device_adapter_get_response:\n        remote_device_adapter_get_result = RemoteDeviceAdapter.deserialize(remote_device_adapter_get_response)\n\n    remote_device_adapter_list_response = invoke_method_helper(RemoteDeviceAdapterListRequest())\n    if remote_device_adapter_list_response:\n        remote_device_adapter_list_result = RemoteDeviceAdapterCollection.deserialize(\n            remote_device_adapter_list_response)\n\n    remote_device_adapter_delete_response = invoke_method_helper(\n        RemoteDeviceAdapterDeleteRequest(name=remote_device_adapter.name))\n\n    onvif_list_response = invoke_method_helper(OnvifDeviceDiscoverRequest())\n\n    onvif_get_response = invoke_method_helper(\n        OnvifDeviceGetRequest(endpoint=UnsecuredEndpoint(url=\"rtsp://camerasimulator:8554\")))\n\n\ndef main():\n    pipeline_topology = build_pipeline_topology()\n    live_pipeline = build_live_pipeline()\n    remote_device_adapter = create_remote_device_adapter(device_name=\"RemoteDeviceAdapter1\", iot_device_name=\"iotdevicesample1\")\n    try:\n        sendPipelineRequests(pipeline_topology=pipeline_topology, live_pipeline=live_pipeline)\n        sendDeviceRequests(remote_device_adapter=remote_device_adapter)\n    except Exception as ex:\n        print(ex)\n\n\nif __name__ == \"__main__\":\n    main()", "repo_name": "videoanalyzer/azure-media-videoanalyzer-edge/samples/sample_lva.py", "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/videoanalyzer/azure-media-videoanalyzer-edge/samples/sample_lva.py", "language": ["Python"]}, {"README_text": "import os\nfrom azure.messaging.webpubsubclient import WebPubSubClient, WebPubSubClientCredential\nfrom azure.messaging.webpubsubservice import WebPubSubServiceClient\nfrom azure.messaging.webpubsubclient.models import (\n    OnConnectedArgs,\n    OnGroupDataMessageArgs,\n    OnDisconnectedArgs,\n)\nfrom dotenv import load_dotenv\n\nload_dotenv()\n\n\ndef on_connected(msg: OnConnectedArgs):\n    print(\"======== connected ===========\")\n    print(f\"Connection {msg.connection_id} is connected\")\n\n\ndef on_disconnected(msg: OnDisconnectedArgs):\n    print(\"========== disconnected =========\")\n    print(f\"connection is disconnected: {msg.message}\")\n\n\ndef on_group_message(msg: OnGroupDataMessageArgs):\n    print(\"========== group message =========\")\n    if isinstance(msg.data, memoryview):\n        print(f\"Received message from {msg.group}: {bytes(msg.data).decode()}\")\n    else:\n        print(f\"Received message from {msg.group}: {msg.data}\")\n\n\ndef main():\n    service_client = WebPubSubServiceClient.from_connection_string(\n        connection_string=os.getenv(\"WEBPUBSUB_CONNECTION_STRING\", \"\"), hub=\"hub\"\n    )\n    client = WebPubSubClient(\n        credential=WebPubSubClientCredential(\n            client_access_url_provider=lambda: service_client.get_client_access_token(\n                roles=[\"webpubsub.joinLeaveGroup\", \"webpubsub.sendToGroup\"]\n            )[\"url\"]\n        ),\n    )\n\n    with client:\n        client.on(\"connected\", on_connected)\n        client.on(\"disconnected\", on_disconnected)\n        client.on(\"group-message\", on_group_message)\n        group_name = \"test\"\n        client.join_group(group_name)\n        client.send_to_group(group_name, \"hello text\", \"text\", no_echo=False, ack=False)\n        client.send_to_group(group_name, {\"hello\": \"json\"}, \"json\")\n        client.send_to_group(group_name, \"hello json\", \"json\")\n        content = memoryview(\"hello binary\".encode())\n        client.send_to_group(group_name, content, \"binary\")\n\n\nif __name__ == \"__main__\":\n    main()\n", "repo_name": "webpubsub/azure-messaging-webpubsubclient/samples/hello_world.py", "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/webpubsub/azure-messaging-webpubsubclient/samples/hello_world.py", "language": ["Python"]}, {"README_text": "---\npage_type: sample\nlanguages:\n  - python\nproducts:\n  - azure\nurlFragment: azure-messaging-webpubsubservice-samples\n---\n\n# Azure Web PubSub service client library for Python Samples\n\nThese are code samples that show common scenario operations with the Azure WebPubSub client library.\nThe async versions of the samples (the python sample files appended with `_async`) show asynchronous operations.\n\n## Prerequisites\n\n* Python 3.6 or later is required to use this package\n* You need an [Azure subscription][azure_sub], and a [Azure WebPubSub service instance][webpubsubservice_docs] to use this package.\n\n## Setup\n\n1. Install the Azure Web PubSub service client library for Python with [pip](https://pypi.org/project/pip/):\n\n```bash\npip install azure-messaging-webpubsubservice\n```\n\n2. Clone or download this sample repository\n3. Open the sample folder in Visual Studio Code or your IDE of choice.\n\n## Running the samples\n\n1. Open a terminal window and `cd` to the directory that the samples are saved in.\n2. Set the environment variables specified in the sample file you wish to run.\n3. Follow the usage described in the file, e.g. `python get_client_access_token.py`\n\n## More samples\n\nCheck [more samples here][servicesample].\n\n## Next Steps\n\nTake a look at our [API Documentation][apiref] for more information about the APIs that are available in the clients.\n\n\n<!-- LINKS -->\n[azure_sub]: https://azure.microsoft.com/free/\n[webpubsubservice_docs]: https://aka.ms/awps/doc\n[servicesample]: https://github.com/Azure/azure-webpubsub/tree/main/samples/python\n[apiref]: https://aka.ms/awps/sdk/python\n", "repo_name": "webpubsub/azure-messaging-webpubsubservice/samples/Readme.md", "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/webpubsub/azure-messaging-webpubsubservice/samples/Readme.md", "language": ["Python"]}]