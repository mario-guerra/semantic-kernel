[
    {
        "README_text": "# Azure AdvisorManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure AdvisorManagement client.\n\nREST APIs for Azure Advisor\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/advisor/arm-advisor) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-advisor) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-advisor) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-advisor` package\n\nInstall the Azure AdvisorManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-advisor\n```\n\n### Create and authenticate a `AdvisorManagementClient`\n\nTo create a client object to access the Azure AdvisorManagement API, you will need the `endpoint` of your Azure AdvisorManagement resource and a `credential`. The Azure AdvisorManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure AdvisorManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure AdvisorManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { AdvisorManagementClient } = require(\"@azure/arm-advisor\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new AdvisorManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new AdvisorManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### AdvisorManagementClient\n\n`AdvisorManagementClient` is the primary interface for developers using the Azure AdvisorManagement client library. Explore the methods on this client object to understand the different features of the Azure AdvisorManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fadvisor%2Farm-advisor%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "advisor/arm-advisor",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/advisor/arm-advisor",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Microsoft Azure Data Manager for Agriculture REST client library for JavaScript\n\nMicrosoft Azure Data Manager for Agriculture is a B2B PaaS offering from Microsoft that makes it easy for AgriFood companies to build intelligent digital agriculture solutions on Azure.Data Manager for Agriculture acquire, aggregate, and process agricultural data from various sources (farm equipment, weather, satellite) without the need to invest in deep data\u202fengineering resources.\u202f Customers can build SaaS solutions on top of Data Manager for Agriculture and leverage first class support for model building to generate insights at scale.\n\nUse Data Manager for Agriculture client library for JavaScript to do the following.\n\n- Create & update parties, farms, fields, seasonal fields and boundaries.\n- Ingest satellite and weather data for areas of interest.\n- Ingest farm operations data covering tilling, planting, harvesting and application of farm inputs.\n\n**Please rely heavily on the [service's documentation][product_documentation] and our [REST client docs][rest_client] to use this library**\n\nKey links:\n\n- [Source code][source_code]\n- [Package (NPM)][npm]\n- [API reference documentation][ref_docs]\n- [Product documentation][product_documentation]\n\n## Getting started\n\n### Currently supported environments\n\n- Node.js version 14.x.x or higher\n\n### Prerequisites\n\n- You must have an [Azure subscription][azure_subscription].\n- Microsoft Azure Data Manager for Agriculture resource - [Microsoft Azure Data Manager for Agriculture][install_farmbeats]\n\n### Install the `@azure-rest/agrifood-farming` package\n\nInstall the Data Manager for Agriculture rest client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure-rest/agrifood-farming\n```\n\n### Create and authenticate a `Microsoft Azure Data Manager for Agriculture` REST Client\n\nTo use an [Azure Active Directory (AAD) token credential][authenticate_with_token],\nprovide an instance of the desired credential type obtained from the\n[@azure/identity][azure_identity_credentials] library.\n\nTo authenticate with AAD, you must first `npm` install [`@azure/identity`][azure_identity_npm].\n\nAfter setup, you can choose which type of [credential][azure_identity_credentials] from `@azure/identity` to use.\nAs an example, [DefaultAzureCredential][default_azure_credential]\ncan be used to authenticate the client:\n\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables:\nAZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET\n\nUse the returned token credential to authenticate the client:\n\n```typescript\nimport FarmBeats from \"@azure-rest/agrifood-farming\";\nimport { DefaultAzureCredential } from \"@azure/identity\";\n\nconst client = FarmBeats(\n  \"https://<farmbeats resource name>.farmbeats.azure.net\",\n  new DefaultAzureCredential()\n);\n```\n\n## Key concepts\n\n### REST Client\n\nThis client is one of our REST clients. We highly recommend you read how to use a REST client [here][rest_client].\n\n### [Farm Hierarchy][farm_hierarchy]\n\nFarm hierarchy is a collection of below entities.\n\n- Party - is the custodian of all the agronomic data.\n- Farm - is a logical collection of fields and/or seasonal fields. They do not have any area associated with them.\n- Field - is a multi-polygon area. This is expected to be stable across seasons.\n- Seasonal field - is a multi-polygon area. To define a seasonal boundary we need the details of area (boundary), time (season) and crop. New seasonal fields are expected to be created for every growing season.\n- Boundary - is the actual multi-polygon area expressed as a geometry (in geojson). It is normally associated with a field or a seasonal field. Satellite, weather and farm operations data is linked to a boundary.\n- Cascade delete - Agronomic data is stored hierarchically with party as the root. The hierarchy includes Party -> Farms -> Fields -> Seasonal Fields -> Boundaries -> Associated data (satellite, weather, farm operations). Cascade delete refers to the process of deleting any node and its subtree.\n\n### [Scenes][scenes]\n\nScenes refers to images normally ingested using satellite APIs. This includes raw bands and derived bands (Ex: NDVI). Scenes may also include spatial outputs of an inference or AI/ML model (Ex: LAI).\n\n### [Farm Operations][farm_operations_docs]\n\nFam operations includes details pertaining to tilling, planting, application of pesticides & nutrients, and harvesting. This can either be manually pushed into FarmBeats using APIs or the same information can be pulled from farm equipment service providers like John Deere.\n\n## Examples\n\n### Create a Party\n\nOnce you have authenticated and created the client object as shown in the [Authenticate the client](#create-and-authenticate-a-farmbeats-rest-client)\nsection, you can create a party within the Data Manager for Agriculture resource like this:\n\n```typescript\nimport FarmBeats, { isUnexpected } from \"@azure-rest/agrifood-farming\";\nimport { DefaultAzureCredential } from \"@azure/identity\";\n\nconst client = FarmBeats(\n  \"https://<farmbeats resource name>.farmbeats.azure.net\",\n  new DefaultAzureCredential()\n);\n\nconst partyId = \"test_party\";\nconst result = await farmbeatsClient.path(\"/parties/{partyId}\", partyId).patch({\n  body: {\n    name: \"Contoso Party\",\n    description: \"Your custom party description here\",\n    status: \"Active\",\n    properties: { foo: \"bar\", \"numeric one\": 1, \"1\": \"numeric key\" },\n  },\n  // Set the content-type of the request\n  contentType: \"application/merge-patch+json\",\n});\n\nif (isUnexpected(result)) {\n  throw result.body.error;\n}\n\nconst party = result.body;\nconsole.log(`Created Party: ${party.name}`);\n```\n\n### List Parties\n\n```typescript\nimport FarmBeats, { isUnexpected } from \"@azure-rest/agrifood-farming\";\nimport { DefaultAzureCredential } from \"@azure/identity\";\n\nconst client = FarmBeats(\n  \"https://<farmbeats resource name>.farmbeats.azure.net\",\n  new DefaultAzureCredential()\n);\n\nconst response = await farmbeatsClient.path(\"/parties\").get();\n\nif (isUnexpected(response)) {\n  throw response.body.error;\n}\n\nconst parties = paginate(farmbeatsClient, response);\n\n// Log each party id\nfor await (const party of parties) {\n  const partyOutput = party;\n  console.log(partyOutput.id);\n}\n```\n\n### Additional Samples\n\nFor additional samples, please refer to the [samples folder][samples_folder]\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nimport { setLogLevel } from \"@azure/logger\";\n\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\n### Additional documentation\n\nFor more extensive documentation on the FarmBeats, see the [FarmBeats documentation][product_docs] on docs.microsoft.com.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fagrifood%2Fagrifood-farming-rest%2FREADME.png)\n\n[product_documentation]: https://docs.microsoft.com/azure/industry/agriculture/overview-azure-farmbeats\n[rest_client]: https://github.com/Azure/azure-sdk-for-js/blob/main/documentation/rest-clients.md\n[source_code]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/agrifood/agrifood-farming-rest\n[npm]: https://www.npmjs.com/org/azure-rest\n[ref_docs]: https://azure.github.io/azure-sdk-for-js\n[azure_subscription]: https://azure.microsoft.com/free/\n[farmbeats_resource]: https://docs.microsoft.com/azure/industry/agriculture/install-azure-farmbeats\n[authenticate_with_token]: https://docs.microsoft.com/azure/cognitive-services/authentication?tabs=powershell#authenticate-with-an-authentication-token\n[azure_identity_credentials]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#credentials\n[azure_identity_npm]: https://www.npmjs.com/package/@azure/identity\n[default_azure_credential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n[install_farmbeats]: https://aka.ms/FarmBeatsInstallDocumentationPaaS\n[farm_hierarchy]: https://aka.ms/FarmBeatsFarmHierarchyDocs\n[scenes]: https://aka.ms/FarmBeatsSatellitePaaSDocumentation\n[farm_operations_docs]: https://aka.ms/FarmBeatsFarmOperationsDocumentation\n[product_docs]: https://aka.ms/FarmBeatsProductDocumentationPaaS\n",
        "repo_name": "agrifood/agrifood-farming-rest",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/agrifood/agrifood-farming-rest",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure AgriFoodMgmt client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure AgriFoodMgmt client.\n\nAPIs documentation for Azure AgFoodPlatform Resource Provider Service.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/agrifood/arm-agrifood) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-agrifood) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-agrifood?view=azure-node-preview) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-agrifood` package\n\nInstall the Azure AgriFoodMgmt client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-agrifood\n```\n\n### Create and authenticate a `AgriFoodMgmtClient`\n\nTo create a client object to access the Azure AgriFoodMgmt API, you will need the `endpoint` of your Azure AgriFoodMgmt resource and a `credential`. The Azure AgriFoodMgmt client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure AgriFoodMgmt resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure AgriFoodMgmt** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { AgriFoodMgmtClient } = require(\"@azure/arm-agrifood\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new AgriFoodMgmtClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new AgriFoodMgmtClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### AgriFoodMgmtClient\n\n`AgriFoodMgmtClient` is the primary interface for developers using the Azure AgriFoodMgmt client library. Explore the methods on this client object to understand the different features of the Azure AgriFoodMgmt service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fagrifood%2Farm-agrifood%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "agrifood/arm-agrifood",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/agrifood/arm-agrifood",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# AzureAnalysisServices client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for AzureAnalysisServices client.\n\nThe Azure Analysis Services Web API provides a RESTful set of web services that enables users to create, retrieve, update, and delete Analysis Services servers\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/analysisservices/arm-analysisservices) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-analysisservices) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-analysisservices) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-analysisservices` package\n\nInstall the AzureAnalysisServices client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-analysisservices\n```\n\n### Create and authenticate a `AzureAnalysisServices`\n\nTo create a client object to access the AzureAnalysisServices API, you will need the `endpoint` of your AzureAnalysisServices resource and a `credential`. The AzureAnalysisServices client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your AzureAnalysisServices resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to AzureAnalysisServices** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { AzureAnalysisServices } = require(\"@azure/arm-analysisservices\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new AzureAnalysisServices(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new AzureAnalysisServices(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### AzureAnalysisServices\n\n`AzureAnalysisServices` is the primary interface for developers using the AzureAnalysisServices client library. Explore the methods on this client object to understand the different features of the AzureAnalysisServices service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fanalysisservices%2Farm-analysisservices%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "analysisservices/arm-analysisservices",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/analysisservices/arm-analysisservices",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure AnomalyDetectorRest REST client library for JavaScript\n\n[Anomaly Detector](https://learn.microsoft.com/azure/cognitive-services/Anomaly-Detector/overview) is an AI service with a set of APIs, which enables you to monitor and detect anomalies in your time series data with little machine learning (ML) knowledge, either batch validation or real-time inference.\n\nPlease refer to our [REST client docs](https://github.com/Azure/azure-sdk-for-js/blob/main/documentation/rest-clients.md) to use this library.\n\n## Getting started\n\n### Prerequisites\n\n- LTS versions of Node.js\n- You need an [Azure subscription][azure_sub] to use this package.\n- An existing Cognitive Services Anomaly Detector instance.\n\n### Install the `@azure-rest/ai-anomaly-detector` package\n\nInstall the Azure AnomalyDetectorRest REST client REST client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure-rest/ai-anomaly-detector\n```\n\n|SDK version|Supported API version of service |\n|-------------|---------------|\n|1.0.0-beta.1| 1.1|\n\n### Create and authenticate a `AnomalyDetectorRestClient`\n\nTo use an [Azure Active Directory (AAD) token credential](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token),\nprovide an instance of the desired credential type obtained from the\n[@azure/identity](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#credentials) library.\n\nTo authenticate with AAD, you must first `npm` install [`@azure/identity`](https://www.npmjs.com/package/@azure/identity) \n\nAfter setup, you can choose which type of [credential](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#credentials) from `@azure/identity` to use.\nAs an example, [DefaultAzureCredential](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential)\ncan be used to authenticate the client.\n\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables:\nAZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET\n\n## Key concepts\n\nWith the Anomaly Detector, you can either detect anomalies in one variable using **Univariate Anomaly Detection**, or detect anomalies in multiple variables with **Multivariate Anomaly Detection**.\n\n|Feature  |Description  |\n|---------|---------|\n|Univariate Anomaly Detection | Detect anomalies in one variable, like revenue, cost, etc. The model was selected automatically based on your data pattern. |\n|Multivariate Anomaly Detection| Detect anomalies in multiple variables with correlations, which are usually gathered from equipment or other complex system. The underlying model used is Graph attention network.|\n\n### Univariate Anomaly Detection\n\nThe Univariate Anomaly Detection API enables you to monitor and detect abnormalities in your time series data without having to know machine learning. The algorithms adapt by automatically identifying and applying the best-fitting models to your data, regardless of industry, scenario, or data volume. Using your time series data, the API determines boundaries for anomaly detection, expected values, and which data points are anomalies.\n\nUsing the Anomaly Detector doesn't require any prior experience in machine learning, and the REST API enables you to easily integrate the service into your applications and processes.\n\nWith the Univariate Anomaly Detection, you can automatically detect anomalies throughout your time series data, or as they occur in real-time.\n\n|Feature  |Description  |\n|---------|---------|\n| Streaming detection| Detect anomalies in your streaming data by using previously seen data points to determine if your latest one is an anomaly. This operation generates a model using the data points you send, and determines if the target point is an anomaly. By calling the API with each new data point you generate, you can monitor your data as it's created. |\n| Batch detection | Use your time series to detect any anomalies that might exist throughout your data. This operation generates a model using your entire time series data, with each point analyzed with the same model.         |\n| Change points detection | Use your time series to detect any trend change points that exist in your data. This operation generates a model using your entire time series data, with each point analyzed with the same model.    |\n\n### Multivariate Anomaly Detection\n\nThe **Multivariate Anomaly Detection** APIs further enable developers by easily integrating advanced AI for detecting anomalies from groups of metrics, without the need for machine learning knowledge or labeled data. Dependencies and inter-correlations between up to 300 different signals are now automatically counted as key factors. This new capability helps you to proactively protect your complex systems such as software applications, servers, factory machines, spacecraft, or even your business, from failures.\n\nWith the Multivariate Anomaly Detection, you can automatically detect anomalies throughout your time series data, or as they occur in real-time. There are three processes to use Multivariate Anomaly Detection.\n\n- **Training**: Use Train Model API to create and train a model, then use Get Model Status API to get the status and model metadata.\n- **Inference**:\n  - Use Async Inference API to trigger an asynchronous inference process and use Get Inference results API to get detection results on a batch of data.\n  - You could also use Sync Inference API to trigger a detection on one timestamp every time.\n- **Other operations**: List Model API and Delete Model API are supported in Multivariate Anomaly Detection model for model management.\n\n### Thread safety\n\nWe guarantee that all client instance methods are thread-safe and independent of each other ([guideline](https://azure.github.io/azure-sdk/dotnet_introduction.html#dotnet-service-methods-thread-safety)). This ensures that the recommendation of reusing client instances is always safe, even across threads.\n\n## Examples\n\nThe following section provides several code snippets covering some of the most common Anomaly Detector service tasks, including:\n\n- [Univariate Anomaly Detection - Batch detection](#batch-detection)\n- [Univariate Anomaly Detection - Streaming detection](#streaming-detection)\n- [Univariate Anomaly Detection - Detect change points](#detect-change-points)\n- [Multivariate Anomaly Detection](#multivariate-anomaly-detection-sample)\n\n### Batch detection\n\n```typescript\nconst apiKey = process.env[\"ANOMALY_DETECTOR_API_KEY\"] || \"\";\nconst endpoint = process.env[\"ANOMALY_DETECTOR_ENDPOINT\"] || \"\";\nconst timeSeriesDataPath = \"./samples-dev/example-data/request-data.csv\";\n\nfunction read_series_from_file(path: string): Array<TimeSeriesPoint> {\n  let result = Array<TimeSeriesPoint>();\n  let input = fs.readFileSync(path).toString();\n  let parsed = parse(input, { skip_empty_lines: true });\n  parsed.forEach(function (e: Array<string>) {\n    result.push({ timestamp: new Date(e[0]), value: Number(e[1]) });\n  });\n  return result;\n}\n\nexport async function main() {\n  // create client\n  const credential = new AzureKeyCredential(apiKey);\n  const client = AnomalyDetector(endpoint, credential);\n\n  // construct request\n  const options: DetectUnivariateEntireSeriesParameters = {\n    body: {\n      granularity: \"daily\",\n      imputeMode: \"auto\",\n      maxAnomalyRatio: 0.25,\n      sensitivity: 95,\n      series: read_series_from_file(timeSeriesDataPath),\n    },\n    headers: { \"Content-Type\": \"application/json\" },\n  };\n\n  // get last detect result\n  const result = await client.path(\"/timeseries/entire/detect\").post(options);\n  if (isUnexpected(result)) {\n    throw result;\n  }\n\n  if (result.body.isAnomaly) {\n    result.body.isAnomaly.forEach(function (anomaly, index) {\n      if (anomaly === true) {\n        console.log(index);\n      }\n    });\n  } else {\n    console.log(\"There is no anomaly detected from the series.\");\n  }\n```\n\n### Streaming Detection\n\n```typescript\nconst apiKey = process.env[\"ANOMALY_DETECTOR_API_KEY\"] || \"\";\nconst endpoint = process.env[\"ANOMALY_DETECTOR_ENDPOINT\"] || \"\";\nconst timeSeriesDataPath = \"./samples-dev/example-data/request-data.csv\";\n\nfunction read_series_from_file(path: string): Array<TimeSeriesPoint> {\n  let result = Array<TimeSeriesPoint>();\n  let input = fs.readFileSync(path).toString();\n  let parsed = parse(input, { skip_empty_lines: true });\n  parsed.forEach(function (e: Array<string>) {\n    result.push({ timestamp: new Date(e[0]), value: Number(e[1]) });\n  });\n  return result;\n}\n\nexport async function main() {\n  // create client\n  const credential = new AzureKeyCredential(apiKey);\n  const client = AnomalyDetector(endpoint, credential);\n\n  // construct request\n  const options: DetectUnivariateLastPointParameters = {\n    body: {\n      granularity: \"daily\",\n      imputeFixedValue: 800,\n      imputeMode: \"fixed\",\n      maxAnomalyRatio: 0.25,\n      sensitivity: 95,\n      series: read_series_from_file(timeSeriesDataPath),\n    },\n    headers: { \"Content-Type\": \"application/json\" },\n  };\n\n  // get last detect result\n  const result = await client.path(\"/timeseries/last/detect\").post(options);\n  if (isUnexpected(result)) {\n    throw result;\n  }\n\n  if (result.body.isAnomaly) {\n    console.log(\"The latest point is detected as anomaly.\");\n  } else {\n    console.log(\"The latest point is not detected as anomaly.\");\n  }\n```\n\n### Detect change points\n\n```typescript\nconst apiKey = process.env[\"ANOMALY_DETECTOR_API_KEY\"] || \"\";\nconst endpoint = process.env[\"ANOMALY_DETECTOR_ENDPOINT\"] || \"\";\nconst timeSeriesDataPath = \"./samples-dev/example-data/request-data.csv\";\n\nfunction read_series_from_file(path: string): Array<TimeSeriesPoint> {\n  let result = Array<TimeSeriesPoint>();\n  let input = fs.readFileSync(path).toString();\n  let parsed = parse(input, { skip_empty_lines: true });\n  parsed.forEach(function (e: Array<string>) {\n    result.push({ timestamp: new Date(e[0]), value: Number(e[1]) });\n  });\n  return result;\n}\n\nexport async function main() {\n  const credential = new AzureKeyCredential(apiKey);\n  const client = AnomalyDetector(endpoint, credential);\n  const options: DetectUnivariateChangePointParameters = {\n    body: {\n      granularity: \"daily\",\n      series: read_series_from_file(timeSeriesDataPath),\n    },\n    headers: { \"Content-Type\": \"application/json\" },\n  };\n  const result = await client.path(\"/timeseries/changepoint/detect\").post(options);\n  if (isUnexpected(result)) {\n    throw result;\n  }\n\n  if (result.body.isChangePoint === undefined) throw new Error(\"Empty isChangePoint\");\n  if (\n    result.body.isChangePoint.some(function (changePoint) {\n      return changePoint === true;\n    })\n  ) {\n    console.log(\"Change points were detected from the series at index:\");\n    result.body.isChangePoint.forEach(function (changePoint, index) {\n      if (changePoint === true) console.log(index);\n    });\n  } else {\n    console.log(\"There is no change point detected from the series.\");\n  }\n```\n\n### Multivariate Anomaly Detection Sample\n\nTo see how to use Anomaly Detector library to conduct Multivariate Anomaly Detection, see this [sample](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/anomalydetector/ai-anomaly-detector-rest/samples/v1-beta/typescript/src/sample_multivariate_detection.ts).\n\n## Troubleshooting\n\n### General\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\n\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nThese code samples show common scenario operations with the Azure Anomaly Detector library. More samples can be found under the [samples](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/anomalydetector/Azure.AI.AnomalyDetector/tests/samples/) directory.\n\n- Univariate Anomaly Detection - Batch Detection: [sample_detect_entire_series_anomaly.ts](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/anomalydetector/ai-anomaly-detector-rest/samples/v1-beta/typescript/src/sample_detect_entire_series_anomaly.ts)\n\n- Univariate Anomaly Detection - Streaming Detection: [ample_detect_last_point_anomaly.ts](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/anomalydetector/ai-anomaly-detector-rest/samples/v1-beta/typescript/src/sample_detect_last_point_anomaly.ts)\n\n- Univariate Anomaly Detection - Change Point Detection: [sample_detect_change_point.ts](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/anomalydetector/ai-anomaly-detector-rest/samples/v1-beta/typescript/src/sample_detect_change_point.ts)\n\n- Multivariate Anomaly Detection: [sample_multivariate_detection.ts](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/anomalydetector/ai-anomaly-detector-rest/samples/v1-beta/typescript/src/sample_multivariate_detection.ts)\n\n### Additional documentation\n\nFor more extensive documentation on Azure Anomaly Detector, see the [Anomaly Detector documentation](https://learn.microsoft.com/azure/cognitive-services/anomaly-detector/overview) on docs.microsoft.com.\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [cla.microsoft.com][cla].\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n[cla]: https://cla.microsoft.com\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n- [Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/anomalydetector/ai-anomaly-detector-rest)\n- [Package (NPM)](https://www.npmjs.com/package/@azure-rest/ai-anomaly-detector)\n- [API reference documentation](https://docs.microsoft.com/javascript/api/@azure-rest/ai-anomaly-detector?view=azure-node-preview)\n- [Samples](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/anomalydetector/ai-anomaly-detector-rest/samples)\n",
        "repo_name": "anomalydetector/ai-anomaly-detector-rest",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/anomalydetector/ai-anomaly-detector-rest",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Scaffolder of a custom widget for developer portal of Azure API Management service\n\nThis repository is managed by the [Microsoft Azure API Management](https://aka.ms/apimrocks) team and contains the\nsource code for scaffolding a custom widgets for the Developer portal. Refer to\nthe [official Azure documentation](https://aka.ms/apimdocs/portal/customwidgets) for more information and instructions.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/apimanagement/api-management-custom-widgets-scaffolder/) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/api-management-custom-widgets-scaffolder) |\n[Product documentation](https://aka.ms/apimdocs/portal/)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge, and Firefox\n\n### Prerequisites\n\n- An [Azure Subscription](https://azure.microsoft.com)\n- An [API Management](https://aka.ms/apimdocs/) resource\n- Active [Developer portal](https://aka.ms/apimdocs/portal/)\n\n### Create your first Custom widget\n\nNavigate to [Custom widgets for Developer portal documentation](https://aka.ms/apimdocs/portal/customwidgets) to learn how to create and manage Custom widgets.\n\n## Key concepts\n\nPackage contains template files and a function to generate Custom widgets for the API Management services' Developer Portal. In general, it's not meant to be imported to other projects, just used via [npx](https://docs.npmjs.com/cli/v7/commands/npx). \n\nThis package should not be confused with `@azure/api-management-custom-widgets-tools` package, which provides tools for communication between scaffolded widgets and the Developer Portal.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\nTo execute the tests you'll need to run:\n\n1. `rush update`\n2. `rush build -t @azure/api-management-custom-widgets-scaffolder`\n3. `cd sdk\\apimanagement\\api-management-custom-widgets-scaffolder`\n4. `npm run test`\n\nView our [tests](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/apimanagement/api-management-custom-widgets-scaffolder/test)\nfolder for more details.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n",
        "repo_name": "apimanagement/api-management-custom-widgets-scaffolder",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/apimanagement/api-management-custom-widgets-scaffolder",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Tools for working with custom widgets of Developer portal of Azure API Management service\n\nThis repository is managed by the [Microsoft Azure API Management](https://aka.ms/apimrocks) team and contains the\nsource code of tools for development of custom widgets for the Developer portal. Refer to\nthe [official Azure documentation](https://aka.ms/apimdocs/portal/customwidgets) for more information and instructions.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/apimanagement/api-management-custom-widgets-scaffolder/) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/api-management-custom-widgets-scaffolder) |\n[Product documentation](https://aka.ms/apimdocs/portal/)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge, and Firefox\n\n### Prerequisites\n\n- An [Azure Subscription](https://azure.microsoft.com)\n- An [API Management](https://aka.ms/apimdocs/) resource\n- Active [Developer portal](https://aka.ms/apimdocs/portal/)\n- A project of a custom widget generated by the [`@azure/api-management-custom-widgets-scaffolder` package](https://www.npmjs.com/package/@azure/api-management-custom-widgets-scaffolder)\n\n### Create your first Custom widget\n\nNavigate to [Custom widgets for Developer portal documentation](https://aka.ms/apimdocs/portal/customwidgets) to learn how to create and manage Custom widgets.\n\n## Key concepts\n\nPackage provides tools for communication between scaffolded widgets and the Developer Portal\n\nThis package should not be confused with `@azure/api-management-custom-widgets-scaffolder` package, which contains template files and a function to generate Custom widgets for the API Management services' Developer Portal.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\nTo execute the tests you'll need to run:\n\n1. `rush update`\n2. `rush build -t @azure/api-management-custom-widgets-tools`\n3. `cd sdk\\apimanagement\\api-management-custom-widgets-tools`\n4. `npm run test`\n\nView our [tests](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/apimanagement/api-management-custom-widgets-scaffolder/test)\nfolder for more details.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n",
        "repo_name": "apimanagement/api-management-custom-widgets-tools",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/apimanagement/api-management-custom-widgets-tools",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure ApiManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure ApiManagement client.\n\nApiManagement Client\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/apimanagement/arm-apimanagement) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-apimanagement) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-apimanagement) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-apimanagement` package\n\nInstall the Azure ApiManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-apimanagement\n```\n\n### Create and authenticate a `ApiManagementClient`\n\nTo create a client object to access the Azure ApiManagement API, you will need the `endpoint` of your Azure ApiManagement resource and a `credential`. The Azure ApiManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure ApiManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure ApiManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { ApiManagementClient } = require(\"@azure/arm-apimanagement\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new ApiManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new ApiManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### ApiManagementClient\n\n`ApiManagementClient` is the primary interface for developers using the Azure ApiManagement client library. Explore the methods on this client object to understand the different features of the Azure ApiManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fapimanagement%2Farm-apimanagement%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "apimanagement/arm-apimanagement",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/apimanagement/arm-apimanagement",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure AppComplianceAutomationToolForMicrosoft365 client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure AppComplianceAutomationToolForMicrosoft365 client.\n\nApp Compliance Automation Tool for Microsoft 365 API spec\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/appcomplianceautomation/arm-appcomplianceautomation) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-appcomplianceautomation) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-appcomplianceautomation?view=azure-node-preview) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-appcomplianceautomation` package\n\nInstall the Azure AppComplianceAutomationToolForMicrosoft365 client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-appcomplianceautomation\n```\n\n### Create and authenticate a `AppComplianceAutomationToolForMicrosoft365`\n\nTo create a client object to access the Azure AppComplianceAutomationToolForMicrosoft365 API, you will need the `endpoint` of your Azure AppComplianceAutomationToolForMicrosoft365 resource and a `credential`. The Azure AppComplianceAutomationToolForMicrosoft365 client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure AppComplianceAutomationToolForMicrosoft365 resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure AppComplianceAutomationToolForMicrosoft365** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { AppComplianceAutomationToolForMicrosoft365 } = require(\"@azure/arm-appcomplianceautomation\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new AppComplianceAutomationToolForMicrosoft365(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new AppComplianceAutomationToolForMicrosoft365(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### AppComplianceAutomationToolForMicrosoft365\n\n`AppComplianceAutomationToolForMicrosoft365` is the primary interface for developers using the Azure AppComplianceAutomationToolForMicrosoft365 client library. Explore the methods on this client object to understand the different features of the Azure AppComplianceAutomationToolForMicrosoft365 service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fappcomplianceautomation%2Farm-appcomplianceautomation%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "appcomplianceautomation/arm-appcomplianceautomation",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/appcomplianceautomation/arm-appcomplianceautomation",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# App Configuration client library for JavaScript\n\n[Azure App Configuration](https://docs.microsoft.com/azure/azure-app-configuration/overview) is a managed service that helps developers centralize their application and feature settings simply and securely.\n\nUse the client library for App Configuration to:\n\n- Create flexible key representations and mappings\n- Tag keys with labels\n- Replay settings from any point in time\n\nKey links:\n\n- [Source code](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/appconfiguration/app-configuration/)\n- [Package (NPM)](https://www.npmjs.com/package/@azure/app-configuration)\n- [API reference documentation](https://docs.microsoft.com/javascript/api/@azure/app-configuration)\n- [Product documentation](https://docs.microsoft.com/azure/azure-app-configuration/)\n- [Samples](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/appconfiguration/app-configuration/samples)\n\n## Getting started\n\n### Install the package\n\n```bash\nnpm install @azure/app-configuration\n```\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge, and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure Subscription](https://azure.microsoft.com)\n- An [App Configuration](https://docs.microsoft.com/azure/azure-app-configuration/) resource\n\n### Create an App Configuration resource\n\nYou can use the [Azure Portal](https://portal.azure.com) or the [Azure CLI](https://docs.microsoft.com/cli/azure) to create an Azure App Configuration resource.\n\nExample (Azure CLI):\n\n```\naz appconfig create --name <app-configuration-resource-name> --resource-group <resource-group-name> --location eastus\n```\n\n### Authenticate the client\n\nAppConfigurationClient can authenticate using a [service principal](#authenticating-with-a-service-principal) or using a [connection string](#authenticating-with-a-connection-string).\n\n#### Authenticating with a service principal\n\nAuthentication via service principal is done by:\n\n- Creating a credential using the `@azure/identity` package.\n- Setting appropriate RBAC rules on your AppConfiguration resource.\n  More information on App Configuration roles can be found [here](https://docs.microsoft.com/azure/azure-app-configuration/concept-enable-rbac#azure-built-in-roles-for-azure-app-configuration).\n\nUsing [DefaultAzureCredential](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/identity/identity/README.md#defaultazurecredential)\n\n```javascript\nconst azureIdentity = require(\"@azure/identity\");\nconst appConfig = require(\"@azure/app-configuration\");\n\nconst credential = new azureIdentity.DefaultAzureCredential();\nconst client = new appConfig.AppConfigurationClient(\n  endpoint, // ex: <https://<your appconfig resource>.azconfig.io>\n  credential\n);\n```\n\nMore information about `@azure/identity` can be found [here](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/identity/identity/README.md)\n\n#### Sovereign Clouds\n\nTo authenticate with a resource in a [Sovereign Cloud](https://docs.microsoft.com/azure/active-directory/develop/authentication-national-cloud), you will need to set the `authorityHost` in the credential options or via the `AZURE_AUTHORITY_HOST` environment variable.\n\n```javascript\nconst { AppConfigurationClient } = require(\"@azure/app-configuration\");\nconst { DefaultAzureCredential, AzureAuthorityHosts } = require(\"@azure/identity\");\n\n// Create an AppConfigurationClient that will authenticate through AAD in the China cloud\nconst client = new AppConfigurationClient(\n  endpoint, // ex: <https://<your appconfig resource>.azconfig.azure.cn>\n  new DefaultAzureCredential({ authorityHost: AzureAuthorityHosts.AzureChina })\n);\n```\n\nMore information about `@azure/identity` can be found [here](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/identity/identity/README.md)\n\n#### Authenticating with a connection string\n\nTo get the Primary **connection string** for an App Configuration resource you can use this Azure CLI command:\n\n```\naz appconfig credential list -g <resource-group-name> -n <app-configuration-resource-name> --query \"([?name=='Primary'].connectionString)[0]\"\n```\n\nAnd in code you can now create your App Configuration client with the **connection string** you got from the Azure CLI:\n\n```typescript\nconst client = new AppConfigurationClient(\"<connection string>\");\n```\n\n## Key concepts\n\nThe [`AppConfigurationClient`](https://docs.microsoft.com/javascript/api/@azure/app-configuration/appconfigurationclient) has some terminology changes from App Configuration in the portal.\n\n- Key/Value pairs are represented as [`ConfigurationSetting`](https://docs.microsoft.com/javascript/api/@azure/app-configuration/configurationsetting) objects\n- Locking and unlocking a setting is represented in the `isReadOnly` field, which you can toggle using `setReadOnly`.\n\nThe client follows a simple design methodology - [`ConfigurationSetting`](https://docs.microsoft.com/javascript/api/@azure/app-configuration/configurationsetting) can be passed into any method that takes a [`ConfigurationSettingParam`](https://docs.microsoft.com/javascript/api/@azure/app-configuration/configurationsettingparam) or [`ConfigurationSettingId`](https://docs.microsoft.com/javascript/api/@azure/app-configuration/configurationsettingid).\n\nThis means this pattern works:\n\n```typescript\nconst setting = await client.getConfigurationSetting({\n  key: \"hello\"\n});\n\nsetting.value = \"new value!\";\nawait client.setConfigurationSetting(setting);\n\n// fields unrelated to just identifying the setting are simply\n// ignored (for instance, the `value` field)\nawait client.setReadOnly(setting, true);\n\n// delete just needs to identify the setting so other fields are\n// just ignored\nawait client.deleteConfigurationSetting(setting);\n```\n\nor, for example, re-getting a setting:\n\n```typescript\nlet setting = await client.getConfigurationSetting({\n  key: \"hello\"\n});\n\n// re-get the setting\nsetting = await client.getConfigurationSetting(setting);\n```\n\n## Examples\n\n#### Create and get a setting\n\n```javascript\nconst appConfig = require(\"@azure/app-configuration\");\n\nconst client = new appConfig.AppConfigurationClient(\n  \"<App Configuration connection string goes here>\"\n);\n\nasync function run() {\n  const newSetting = await client.setConfigurationSetting({\n    key: \"testkey\",\n    value: \"testvalue\",\n    // Labels allow you to create variants of a key tailored\n    // for specific use-cases like supporting multiple environments.\n    // https://docs.microsoft.com/azure/azure-app-configuration/concept-key-value#label-keys\n    label: \"optional-label\"\n  });\n\n  let retrievedSetting = await client.getConfigurationSetting({\n    key: \"testkey\",\n    label: \"optional-label\"\n  });\n\n  console.log(\"Retrieved value:\", retrievedSetting.value);\n}\n\nrun().catch((err) => console.log(\"ERROR:\", err));\n```\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\n\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n### React Native support\n\nReact Native does not support some JavaScript API used by this SDK library so you need to provide polyfills for them.  Please see our [React Native sample with Expo](https://github.com/Azure/azure-sdk-for-js/blob/main/samples/frameworks/react-native/appconfigBasic/README.md#add-polyfills) for more details.\n\n## Next steps\n\nThe following samples show you the various ways you can interact with App Configuration:\n\n- [`helloworld.ts`](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/appconfiguration/app-configuration/samples/v1/typescript/src/helloworld.ts) - Get, set, and delete configuration values.\n- [`helloworldWithLabels.ts`](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/appconfiguration/app-configuration/samples/v1/typescript/src/helloworldWithLabels.ts) - Use labels to add additional dimensions to your settings for scenarios like beta vs production.\n- [`optimisticConcurrencyViaEtag.ts`](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/appconfiguration/app-configuration/samples/v1/typescript/src/optimisticConcurrencyViaEtag.ts) - Set values using etags to prevent accidental overwrites.\n- [`setReadOnlySample.ts`](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/appconfiguration/app-configuration/samples/v1/typescript/src/setReadOnlySample.ts) - Marking settings as read-only to prevent modification.\n- [`getSettingOnlyIfChanged.ts`](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/appconfiguration/app-configuration/samples/v1/typescript/src/getSettingOnlyIfChanged.ts) - Get a setting only if it changed from the last time you got it.\n- [`listRevisions.ts`](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/appconfiguration/app-configuration/samples/v1/typescript/src/listRevisions.ts) - List the revisions of a key, allowing you to see previous values and when they were set.\n- [`secretReference.ts`](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/appconfiguration/app-configuration/samples/v1/typescript/src/secretReference.ts) - SecretReference represents a configuration setting that references as KeyVault secret.\n- [`featureFlag.ts`](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/appconfiguration/app-configuration/samples/v1/typescript/src/featureFlag.ts) - Feature flags are settings that follow specific JSON schema for the value.\n\nMore in-depth examples can be found in the [samples](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/appconfiguration/app-configuration/samples/v1/) folder on GitHub.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\nThis module's tests are a mixture of live and unit tests, which require you to have an Azure App Configuration instance. To execute the tests you'll need to run:\n\n1. `rush update`\n2. `rush build -t @azure/app-configuration`\n3. Create a .env file with these contents in the `sdk\\appconfiguration\\app-configuration` folder:\n   `APPCONFIG_CONNECTION_STRING=connection string for your App Configuration instance`\n4. `cd sdk\\appconfiguration\\app-configuration`\n5. `npm run test`.\n\nView our [tests](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/appconfiguration/app-configuration/test)\nfolder for more details.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n- [Azure App Configuration](https://docs.microsoft.com/azure/azure-app-configuration/overview)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fappconfiguration%2Fapp-configuration%2FREADME.png)\n",
        "repo_name": "appconfiguration/app-configuration",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/appconfiguration/app-configuration",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure AppConfigurationManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure AppConfigurationManagement client.\n\n\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/appconfiguration/arm-appconfiguration) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-appconfiguration) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-appconfiguration) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-appconfiguration` package\n\nInstall the Azure AppConfigurationManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-appconfiguration\n```\n\n### Create and authenticate a `AppConfigurationManagementClient`\n\nTo create a client object to access the Azure AppConfigurationManagement API, you will need the `endpoint` of your Azure AppConfigurationManagement resource and a `credential`. The Azure AppConfigurationManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure AppConfigurationManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure AppConfigurationManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { AppConfigurationManagementClient } = require(\"@azure/arm-appconfiguration\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new AppConfigurationManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new AppConfigurationManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### AppConfigurationManagementClient\n\n`AppConfigurationManagementClient` is the primary interface for developers using the Azure AppConfigurationManagement client library. Explore the methods on this client object to understand the different features of the Azure AppConfigurationManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fappconfiguration%2Farm-appconfiguration%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "appconfiguration/arm-appconfiguration",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/appconfiguration/arm-appconfiguration",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure ContainerApps API client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure ContainerApps API client.\n\n\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/appcontainers/arm-appcontainers) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-appcontainers) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-appcontainers?view=azure-node-preview) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-appcontainers` package\n\nInstall the Azure ContainerApps API client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-appcontainers\n```\n\n### Create and authenticate a `ContainerAppsAPIClient`\n\nTo create a client object to access the Azure ContainerApps API API, you will need the `endpoint` of your Azure ContainerApps API resource and a `credential`. The Azure ContainerApps API client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure ContainerApps API resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure ContainerApps API** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { ContainerAppsAPIClient } = require(\"@azure/arm-appcontainers\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new ContainerAppsAPIClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new ContainerAppsAPIClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### ContainerAppsAPIClient\n\n`ContainerAppsAPIClient` is the primary interface for developers using the Azure ContainerApps API client library. Explore the methods on this client object to understand the different features of the Azure ContainerApps API service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fappcontainers%2Farm-appcontainers%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "appcontainers/arm-appcontainers",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/appcontainers/arm-appcontainers",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "## An isomorphic javascript sdk for - ApplicationInsightsDataClient\n\nThis package contains an isomorphic SDK for ApplicationInsightsDataClient.\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge, and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### How to Install\n\n```\nnpm install @azure/applicationinsights-query\n```\n\n### How to use\n\n#### nodejs - Authentication, client creation and get metrics as an example written in TypeScript.\n\n##### Install @azure/ms-rest-nodeauth\n\n```\nnpm install @azure/ms-rest-nodeauth\n```\n\n##### Sample code\n\n```ts\nimport * as msRest from \"@azure/ms-rest-js\";\nimport * as msRestNodeAuth from \"@azure/ms-rest-nodeauth\";\nimport { ApplicationInsightsDataClient, ApplicationInsightsDataModels, ApplicationInsightsDataMappers } from \"@azure/applicationinsights-query\";\nconst subscriptionId = process.env[\"AZURE_SUBSCRIPTION_ID\"];\n\nmsRestNodeAuth.interactiveLogin().then((creds) => {\n  const client = new ApplicationInsightsDataClient(creds, subscriptionId);\n  const appId = \"testappId\";\n  const metricId = \"requests/count\";\n  const timespan = \"testtimespan\";\n  const interval = \"P1Y2M3DT4H5M6S\";\n  const aggregation = [\"min\"];\n  const segment = [\"applicationBuild\"];\n  const top = 1;\n  const orderby = \"testorderby\";\n  const filter = \"testfilter\";\n  client.metrics.get(appId, metricId, timespan, interval, aggregation, segment, top, orderby, filter).then((result) => {\n    console.log(\"The result is:\");\n    console.log(result);\n  });\n}).catch((err) => {\n  console.error(err);\n});\n```\n\n#### browser - Authentication, client creation and get metrics as an example written in JavaScript.\n\n##### Install @azure/ms-rest-browserauth\n\n```\nnpm install @azure/ms-rest-browserauth\n```\n\n##### Sample code\n\nSee https://github.com/Azure/ms-rest-browserauth to learn how to authenticate to Azure in the browser.\n\n- index.html\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>@azure/applicationinsights-query sample</title>\n    <script src=\"node_modules/@azure/ms-rest-js/dist/msRest.browser.js\"></script>\n    <script src=\"node_modules/@azure/ms-rest-browserauth/dist/msAuth.js\"></script>\n    <script src=\"node_modules/@azure/applicationinsights-query/dist/applicationinsights-query.js\"></script>\n    <script type=\"text/javascript\">\n      const subscriptionId = \"<Subscription_Id>\";\n      const authManager = new msAuth.AuthManager({\n        clientId: \"<client id for your Azure AD app>\",\n        tenant: \"<optional tenant for your organization>\"\n      });\n      authManager.finalizeLogin().then((res) => {\n        if (!res.isLoggedIn) {\n          // may cause redirects\n          authManager.login();\n        }\n        const client = new Azure.ApplicationinsightsQuery.ApplicationInsightsDataClient(res.creds, subscriptionId);\n        const appId = \"testappId\";\n        const metricId = \"requests/count\";\n        const timespan = \"testtimespan\";\n        const interval = \"P1Y2M3DT4H5M6S\";\n        const aggregation = [\"min\"];\n        const segment = [\"applicationBuild\"];\n        const top = 1;\n        const orderby = \"testorderby\";\n        const filter = \"testfilter\";\n        client.metrics.get(appId, metricId, timespan, interval, aggregation, segment, top, orderby, filter).then((result) => {\n          console.log(\"The result is:\");\n          console.log(result);\n        }).catch((err) => {\n          console.log(\"An error occurred:\");\n          console.error(err);\n        });\n      });\n    </script>\n  </head>\n  <body></body>\n</html>\n```\n\n## Related projects\n\n- [Microsoft Azure SDK for Javascript](https://github.com/Azure/azure-sdk-for-js)\n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fapplicationinsights%2Fapplicationinsights-query%2FREADME.png)\n",
        "repo_name": "applicationinsights/applicationinsights-query",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/applicationinsights/applicationinsights-query",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure ApplicationInsightsManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure ApplicationInsightsManagement client.\n\nComposite Swagger for Application Insights Management Client\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/applicationinsights/arm-appinsights) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-appinsights) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-appinsights?view=azure-node-preview) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-appinsights` package\n\nInstall the Azure ApplicationInsightsManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-appinsights\n```\n\n### Create and authenticate a `ApplicationInsightsManagementClient`\n\nTo create a client object to access the Azure ApplicationInsightsManagement API, you will need the `endpoint` of your Azure ApplicationInsightsManagement resource and a `credential`. The Azure ApplicationInsightsManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure ApplicationInsightsManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure ApplicationInsightsManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { ApplicationInsightsManagementClient } = require(\"@azure/arm-appinsights\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new ApplicationInsightsManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new ApplicationInsightsManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### ApplicationInsightsManagementClient\n\n`ApplicationInsightsManagementClient` is the primary interface for developers using the Azure ApplicationInsightsManagement client library. Explore the methods on this client object to understand the different features of the Azure ApplicationInsightsManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fapplicationinsights%2Farm-appinsights%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "applicationinsights/arm-appinsights",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/applicationinsights/arm-appinsights",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure AppPlatformManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure AppPlatformManagement client.\n\nREST API for Azure Spring Apps\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/appplatform/arm-appplatform) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-appplatform) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-appplatform?view=azure-node-preview) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-appplatform` package\n\nInstall the Azure AppPlatformManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-appplatform\n```\n\n### Create and authenticate a `AppPlatformManagementClient`\n\nTo create a client object to access the Azure AppPlatformManagement API, you will need the `endpoint` of your Azure AppPlatformManagement resource and a `credential`. The Azure AppPlatformManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure AppPlatformManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure AppPlatformManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { AppPlatformManagementClient } = require(\"@azure/arm-appplatform\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new AppPlatformManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new AppPlatformManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### AppPlatformManagementClient\n\n`AppPlatformManagementClient` is the primary interface for developers using the Azure AppPlatformManagement client library. Explore the methods on this client object to understand the different features of the Azure AppPlatformManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fappplatform%2Farm-appplatform%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "appplatform/arm-appplatform",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/appplatform/arm-appplatform",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure WebSiteManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure WebSiteManagement client.\n\nWebSite Management Client\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/appservice/arm-appservice-profile-2020-09-01-hybrid) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-appservice-profile-2020-09-01-hybrid) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-appservice-profile-2020-09-01-hybrid) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-appservice-profile-2020-09-01-hybrid` package\n\nInstall the Azure WebSiteManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-appservice-profile-2020-09-01-hybrid\n```\n\n### Create and authenticate a `WebSiteManagementClient`\n\nTo create a client object to access the Azure WebSiteManagement API, you will need the `endpoint` of your Azure WebSiteManagement resource and a `credential`. The Azure WebSiteManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure WebSiteManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure WebSiteManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { WebSiteManagementClient } = require(\"@azure/arm-appservice-profile-2020-09-01-hybrid\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new WebSiteManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new WebSiteManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### WebSiteManagementClient\n\n`WebSiteManagementClient` is the primary interface for developers using the Azure WebSiteManagement client library. Explore the methods on this client object to understand the different features of the Azure WebSiteManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fappservice%2Farm-appservice-profile-2020-09-01-hybrid%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "appservice/arm-appservice-profile-2020-09-01-hybrid",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/appservice/arm-appservice-profile-2020-09-01-hybrid",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure WebSitemManagement REST client library for JavaScript\n\nApp Service Client\n\n**If you are not familiar with our REST client, please spend 5 minutes to take a look at our [REST client docs](https://github.com/Azure/azure-sdk-for-js/blob/main/documentation/rest-clients.md) to use this library, the REST client provides a light-weighted & developer friendly way to call azure rest api**\n\nKey links:\n\n- [Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/appservice/arm-appservice-rest)\n- [Package (NPM)](https://www.npmjs.com/package/@azure-rest/arm-appservice)\n- [API reference documentation](https://docs.microsoft.com/javascript/api/@azure-rest/arm-appservice)\n\n## Getting started\n\n### Currently supported environments\n\n- Node.js version 14.x.x or higher\n\n### Prerequisites\n\n- You must have an [Azure subscription](https://azure.microsoft.com/free/) to use this package.\n\n### Install the `@azure-rest/arm-appservice` package\n\nInstall the Azure WebSiteManagement client REST client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure-rest/arm-appservice\n```\n\n### Create and authenticate a `WebSiteManagementClient`\n\nTo use an [Azure Active Directory (AAD) token credential](https://docs.microsoft.com/azure/databricks/dev-tools/api/latest/aad/app-aad-token),\nprovide an instance of the desired credential type obtained from the\n[@azure/identity](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#credentials) library.\n\nTo authenticate with AAD, you must first `npm` install [`@azure/identity`](https://www.npmjs.com/package/@azure/identity) \n\nAfter setup, you can choose which type of [credential](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#credentials) from `@azure/identity` to use.\nAs an example, [DefaultAzureCredential](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential)\ncan be used to authenticate the client:\n\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables:\nAZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET\n\nUse the returned token credential to authenticate the client:\n\n```typescript\nimport WebSiteManagementClient from \"@azure-rest/arm-appservice\";\nimport { DefaultAzureCredential } from \"@azure/identity\";\nconst credential = new DefaultAzureCredential();\nconst client = WebSiteManagementClient(credential);\n```\n\n## Examples\n\nThe following section shows you how to initialize and authenticate your client, then list all of your App Service Plans.\n\n### List All App Service Plans\n\n```typescript\nimport WebSiteManagementClient, { paginate }  from \"@azure-rest/arm-appservice\";\nimport { DefaultAzureCredential } from \"@azure/identity\";\n\nasync function listAppServicePlans() {\n  const subscriptionId = process.env.SUBSCRIPTION_ID as string;\n  const credential = new DefaultAzureCredential();\n  const client = WebSiteManagementClient(credential);\n  const result = [];\n  const initialResposne = await client\n    .path(\"/subscriptions/{subscriptionId}/providers/Microsoft.Web/serverfarms\", subscriptionId)\n    .get();\n  const res = paginate(client, initialResposne);\n  for await (let item of res) {\n    result.push(item);\n  }\n  console.log(result);\n}\n\nlistAppServicePlans().catch(console.error);\n```\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nimport { setLogLevel } from \"@azure/logger\";\n\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n",
        "repo_name": "appservice/arm-appservice-rest",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/appservice/arm-appservice-rest",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure WebSiteManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure WebSiteManagement client.\n\nWebSite Management Client\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/appservice/arm-appservice) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-appservice) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-appservice) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-appservice` package\n\nInstall the Azure WebSiteManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-appservice\n```\n\n### Create and authenticate a `WebSiteManagementClient`\n\nTo create a client object to access the Azure WebSiteManagement API, you will need the `endpoint` of your Azure WebSiteManagement resource and a `credential`. The Azure WebSiteManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure WebSiteManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure WebSiteManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { WebSiteManagementClient } = require(\"@azure/arm-appservice\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new WebSiteManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new WebSiteManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### WebSiteManagementClient\n\n`WebSiteManagementClient` is the primary interface for developers using the Azure WebSiteManagement client library. Explore the methods on this client object to understand the different features of the Azure WebSiteManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fappservice%2Farm-appservice%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "appservice/arm-appservice",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/appservice/arm-appservice",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure AttestationManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure AttestationManagement client.\n\nVarious APIs for managing resources in attestation service. This primarily encompasses per-provider management.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/attestation/arm-attestation) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-attestation) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-attestation) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-attestation` package\n\nInstall the Azure AttestationManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-attestation\n```\n\n### Create and authenticate a `AttestationManagementClient`\n\nTo create a client object to access the Azure AttestationManagement API, you will need the `endpoint` of your Azure AttestationManagement resource and a `credential`. The Azure AttestationManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure AttestationManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure AttestationManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { AttestationManagementClient } = require(\"@azure/arm-attestation\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new AttestationManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new AttestationManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### AttestationManagementClient\n\n`AttestationManagementClient` is the primary interface for developers using the Azure AttestationManagement client library. Explore the methods on this client object to understand the different features of the Azure AttestationManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fattestation%2Farm-attestation%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "attestation/arm-attestation",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/attestation/arm-attestation",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Attestation client library for JavaScript\n\nThe Microsoft Azure Attestation (MAA) service is a unified solution for remotely verifying the trustworthiness of a platform and integrity of the binaries running inside it. The service supports attestation of the platforms backed by Trusted Platform Modules (TPMs) alongside the ability to attest to the state of Trusted Execution Environments (TEEs) such as Intel(tm) Software Guard Extensions (SGX) enclaves and Virtualization-based Security (VBS) enclaves.\n\nAttestation is a process for demonstrating that software binaries were properly instantiated on a trusted platform. Remote relying parties can then gain confidence that only such intended software is running on trusted hardware. Azure Attestation is a unified customer-facing service and framework for attestation.\n\nAzure Attestation enables cutting-edge security paradigms such as Azure Confidential computing and Intelligent Edge protection. Customers have been requesting the ability to independently verify the location of a machine, the posture of a virtual machine (VM) on that machine, and the environment within which enclaves are running on that VM. Azure Attestation will empower these and many additional customer requests.\n\nAzure Attestation receives evidence from compute entities, turns them into a set of claims, validates them against configurable policies, and produces cryptographic proofs for claims-based applications (for example, relying parties and auditing authorities).\n\nFor a more complete view of Azure libraries, see the [azure sdk typescript release](https://aka.ms/azsdk/js/all).\n\n> NOTE: This is a preview SDK for the Microsoft Azure Attestation service. It provides all the essential functionality to access the Azure Attestation service, it should be considered 'as-is\" and is subject to changes in the future which may break compatibility with previous versions.\n\nKey links:\n\n- [Source code][source_code]\n- [Package (NPM)][attestation_npm]\n- [API reference documentation][api_reference]\n- [Product documentation](https://docs.microsoft.com/azure/attestation/)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge, and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure Subscription](https://azure.microsoft.com)\n- An existing Azure Attestation Instance, or you can use the \"shared provider\" available in each Azure region. If you need to create an Azure Attestation service instance, you can use the Azure Portal or [Azure CLI][azure_cli].\n\n### Install the @azure/attestation package\n\nInstall the Microsoft Azure Attestation client library for JavaScript with [NPM][attestation_npm]:\n\n```Powershell\nnpm install @azure/attestation\n```\n\n### Authenticate the client\n\nIn order to interact with the Microsoft Azure Attestation service, you'll need to create an instance of the [Attestation Client][attestation_client] or [Attestation Administration Client][attestation_admin_client] class. You need a **attestation instance url**, which will either be the  \"Attest URI\"\nshown in the portal, or will be one of the shared attestation providers.\nYou will also need client credentials to use the Attestation Administration Client or call the `attestTpm` API. Client credentials require **(client id, client secret, tenant id)** to instantiate a client object.\n\nIn this getting started section, we'll be authenticating using client secret credentials through the [DefaultAzureCredential][defaultazurecredential] provider, but we offer more authentication mechanisms through the [@azure/identity][azure_identity] package. To install the @azure/identity package:\n\n```Powershell\nnpm install @azure/identity\n```\n\n#### Create/Get credentials\n\nUse the [Azure CLI][azure_cli] snippet below to create/get client secret credentials.\n\n- Create a service principal and configure its access to Azure resources:\n\n  ```Powershell\n  az ad sp create-for-rbac -n <your-application-name> --skip-assignment\n  ```\n\n  Output:\n\n  ```json\n  {\n    \"appId\": \"generated-app-ID\",\n    \"displayName\": \"dummy-app-name\",\n    \"name\": \"http://dummy-app-name\",\n    \"password\": \"random-password\",\n    \"tenant\": \"tenant-ID\"\n  }\n  ```\n\n- Take note of the service principal objectId\n\n  ```Powershell\n  az ad sp show --id <appId> --query objectId\n  ```\n\n  Output:\n\n  ```Powershell\n  \"<your-service-principal-object-id>\"\n  ```\n\n- Use the returned credentials above to set **AZURE_CLIENT_ID** (appId), **AZURE_CLIENT_SECRET** (password), and **AZURE_TENANT_ID** (tenant) environment variables. The following example shows a way to do this in Powershell:\n\n```Powershell\n    $Env:AZURE_CLIENT_ID=\"generated-app-ID\"\n    $Env:AZURE_CLIENT_SECRET=\"random-password\"\n    $Env:AZURE_TENANT_ID=\"tenant-ID\"\n```\n\nFor more information about the Azure Identity APIs and how to use them, see [Azure Identity client library](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity)\n\n## Key concepts\n\nThere are four major families of functionality provided in this preview SDK:\n\n- [SGX and TPM enclave attestation.](#attestation)\n- [MAA Attestation Token signing certificate discovery and validation.](#attestation-token-signing-certificate-discovery-and-validation)\n- [Attestation Policy management.](#policy-management)\n- [Attestation policy management certificate management](#policy-management-certificate-management) (yes, policy management management).\n\nThe Microsoft Azure Attestation service runs in two separate modes: \"Isolated\" and \"AAD\". When the service is running in \"Isolated\" mode, the customer needs to\nprovide additional information beyond their authentication credentials to verify that they are authorized to modify the state of an attestation instance.\n\nFinally, each region in which the Microsoft Azure Attestation service is available supports a \"shared\" instance, which\ncan be used to attest SGX enclaves which only need verification against the azure baseline (there are no policies applied to the shared provider). TPM attestation is not available in the shared provider.\nWhile the shared instance requires AAD authentication, it does not have any RBAC policies - any customer with a valid AAD bearer token can attest using the shared instance.\n\n### Attestation\n\nSGX or TPM attestation is the process of validating evidence collected from\na trusted execution environment to ensure that it meets both the Azure baseline for that environment and customer defined policies applied to that environment.\n\n### Attestation service token signing certificate discovery and validation\n\nOne of the core operational guarantees of the Azure Attestation Service is that the service operates \"operationally out of the TCB\". In other words, there is no way that a Microsoft operator could tamper with the operation of the service, or corrupt data sent from the client. To ensure this guarantee, the core of the attestation service runs in an Intel(tm) SGX enclave.\n\nTo allow customers to verify that operations were actually performed inside the enclave, most responses from the Attestation Service are encoded in a [JSON Web Token][json_web_token], which is signed by a key held within the attestation service's enclave.\n\nThis token will be signed by a signing certificate issued by the MAA service for the specified instance.\n\nIf the MAA service instance is running in a region where the service runs in an SGX enclave, then\nthe certificate issued by the server can be verified using the [oe_verify_attestation_certificate API](https://openenclave.github.io/openenclave/api/enclave_8h_a3b75c5638360adca181a0d945b45ad86.html).\n\nThe [`AttestationResponse`][attestation_response] object contains two main attributes: `token` and `value`. The `token` attribute contains the complete token returned by the attestation service, the `value` attribute contains the body of the JSON Web Token response.\n\n### Policy Management\n\nEach attestation service instance has a policy applied to it which defines additional criteria which the customer has defined.\n\nFor more information on attestation policies, see [Attestation Policy](https://docs.microsoft.com/azure/attestation/author-sign-policy)\n\n### Policy Management certificate management\n\nWhen an attestation instance is running in \"Isolated\" mode, the customer who created the instance will have provided\na policy management certificate at the time the instance is created. All policy modification operations require that the customer sign\nthe policy data with one of the existing policy management certificates. The Policy Management Certificate Management APIs enable\nclients to \"roll\" the policy management certificates.\n\n### Isolated Mode and AAD Mode\n\nEach Microsoft Azure Attestation service instance operates in either \"AAD\" mode or \"Isolated\" mode. When an MAA instance is operating in AAD mode, it means that the customer which created the attestation instance allows Azure Active Directory and Azure Role Based Access control policies to verify access to the attestation instance.\n\n### _AttestationType_\n\nThe Microsoft Azure Attestation service supports attesting different types of evidence depending on the environment.\nCurrently, MAA supports the following Trusted Execution environments:\n\n- OpenEnclave - An Intel(tm) Processor running code in an SGX Enclave where the attestation evidence was collected using the OpenEnclave [`oe_get_report`](https://openenclave.io/apidocs/v0.14/enclave_8h_aefcb89c91a9078d595e255bd7901ac71.html#aefcb89c91a9078d595e255bd7901ac71) or [`oe_get_evidence`](https://openenclave.io/apidocs/v0.14/attester_8h_a7d197e42468636e95a6ab97b8e74c451.html#a7d197e42468636e95a6ab97b8e74c451) API.\n- SgxEnclave - An Intel(tm) Processor running code in an SGX Enclave where the attestation evidence was collected using the Intel SGX SDK.\n- Tpm - A Virtualization Based Security environment where the Trusted Platform Module of the processor is used to provide the attestation evidence.\n\n### Runtime Data and Inittime Data\n\nRuntimeData refers to data which is presented to the Intel SGX Quote generation logic or the `oe_get_report`/`oe_get_evidence` APIs. If the caller to the attest API provided a `runtime_data` attribute, The Azure Attestation service will validate that the first 32 bytes of the `report_data` field in the SGX Quote/OE Report/OE Evidence matches the SHA256 hash of the `runtime_data`.\n\nInitTime data refers to data which is used to configure the SGX enclave being attested.\n\n> Note that InitTime data is not supported on Azure [DCsv2-Series](https://docs.microsoft.com/azure/virtual-machines/dcv2-series) virtual machines.\n\n### Additional concepts\n\n## Examples\n\n- [Create an attestation client instance](#create-client-instance)\n- [Attest an SGX enclave](#attest-sgx-enclave)\n- [Get attestation policy](#get-attestation-policy)\n- [Retrieve token validation certificates](#retrieve-token-certificates)\n- [Create an attestation client instance](#create-client-instance)\n\n### Create client instance\n\nCreates an instance of the Attestation Client at uri `endpoint`, using the default\nazure credentials (`DefaultAzureCredential`).\n\n```ts\nconst credentials = new DefaultAzureCredential();\nconst client = new AttestationClient(endpoint, {credentials: credentials});\n\n// Retrieve the set of attestation policy signers from the attestation client.\nconst attestationSigners = await client.getAttestationSigners();\n```\n\nIf you are not calling the `attestTpm` API, you do not need to provide credentials\nto access the attestation client. This means a client can be created simply with:\n\n```ts\nconst client = new AttestationClient(endpoint);\n\n// Retrieve the set of attestation policy signers from the attestation client.\nconst attestationSigners = await client.getAttestationSigners();\n```\n\nCreates an instance of the Attestation Administration Client at uri `endpoint`.\n\nNote that the administration client *requires* Azure credentials.\n\n```ts\n  const client = new AttestationAdministrationClient(endpoint, new DefaultAzureCredential());\n\n  // Retrieve the SGX policy from the specified attestation instance.\n  const policyResponse = await client.getPolicy(KnownAttestationType.SgxEnclave);\n\n```\n\n### Get attestation policy\n\nThe `getPolicy` method retrieves the attestation policy from the service.\nAttestation Policies are instanced on a per-attestation type basis, the `AttestationType` parameter defines the type of instance to retrieve.\n\n```js\nconst policyResult = await adminClient.getPolicy(attestationType);\n\n// The text policy document is available in the `policyResult.body`\n// property.\n\n// The actual attestation token returned by the MAA service is available\n// in `policyResult.token`.\n```\n\n### Set an attestation policy for a specified attestation type\n\nIf the attestation service instance is running in Isolated mode, the set_policy API needs to provide a signing certificate (and private key) which can be used to validate that the caller is authorized to modify policy on the attestation instance. If the service instance is running in AAD mode, then the signing certificate and key are optional.\n\nIf the service instance is running in AAD mode, the call to setPolicy is as expected:\n\n```js\nconst client = new AttestationAdministrationClient(endpoint, new DefaultAzureCredential());\n\nconst newPolicy = `<New Attestation Policy>`;\n\n// Set the new attestation policy. Set the policy as an unsecured policy.\nconst setPolicyResult = await client.setPolicy(KnownAttestationType.SgxEnclave, newPolicy);\n```\n\nIf the service instance is running in Isolated mode, the call to setPolicy requires that\nthe client be able to prove that they have access to one of the policy management private keys\nand certificates.\n\n```js\nconst client = new AttestationAdministrationClient(endpoint, new DefaultAzureCredential());\n\nconst newPolicy = `<New Policy Document>`;\n\n// Set the new attestation policy. Set the policy as an secured policy.\nconst privateKey = <Retrieve isolated mode private key from storage>\nconst certificate = <Retrieve certificate associated with that private key>\n\nconst setPolicyResult = await client.setPolicy(\n  KnownAttestationType.OpenEnclave,\n  newPolicy,\n  {\n    privateKey: privateKey,\n    certificate: certificate\n  }\n);\n```\n\nUnder the covers, the setPolicy APIs create a [JSON Web Token][json_web_token] containing on the policy document `certificate` and signed with the `privateKey` which is then sent to the attestation service.\n\nIf a client wishes to ensure that the attestation policy document was not modified before the policy document was received by the attestation service's enclave, they can use the properties returned in the [PolicyResult][attestation_policy_result] objct which can be used to verify that the service received the policy document:\n\n- [`policySigner`][attestation_policy_result_parameters] - if the `setPolicy` call included a `certificate`, this value will be the certificate provided at the time of the `setPolicy` call. If no policy signer was set, this will be null.\n- [`policyTokenHash`][attestation_policy_result_parameters] - this is the hash of the [JSON Web Signature][json_web_token] sent to the service for the setPolicy API.\n\nTo verify the hash, clients can create an attestation policy token (a helper class which represents the token used to set the attestation policy) and verify the hash generated from that token:\n\n```js\nconst expectedPolicy = createAttestationPolicyToken(\n  `<Policy Document>`,\n  privateKey,\n  certificate);\n\n// Use your favorite SHA256 hash generator function to create a hash of the\n// stringized JWS.\nconst expectedHash = generateSha256Hash(expectedPolicy.serialize());\n\n// The hash returned in expectedHash should match the value in\n// `setResult.body.policyTokenHash`.\n```\n\n### Attest SGX and Open Enclave\n\nUse the [`attestSgxEnclave`][attest_sgx] method to attest an SGX enclave.\n\nOne of the core challenges customers have interacting with encrypted environments is how to ensure that you can securely communicate with the code running in the environment (\"enclave code\").\n\nOne solution to this problem is what is known as \"Secure Key Release\", which is a pattern that enables secure communication with enclave code.\n\nTo implement the \"Secure Key Release\" pattern, the enclave code generates an ephemeral asymmetric key. It then serializes the public portion of the key to some format (possibly a JSON Web Key, or PEM, or some other serialization format).\n\nThe enclave code then calculates the SHA256 value of the public key and passes it as an input to code which generates an SGX Quote (for OpenEnclave, that would be the [oe_get_evidence](https://openenclave.io/apidocs/v0.14/attester_8h_a7d197e42468636e95a6ab97b8e74c451.html#a7d197e42468636e95a6ab97b8e74c451) or [oe_get_report](https://openenclave.io/apidocs/v0.14/enclave_8h_aefcb89c91a9078d595e255bd7901ac71.html#aefcb89c91a9078d595e255bd7901ac71)).\n\nThe client then sends the SGX quote and the serialized key to the attestation service. The attestation service will validate the quote and ensure that the hash of the key is present in the quote and will issue an \"Attestation Token\".\n\nThe client can then send that Attestation Token (which contains the serialized key) to a 3rd party \"relying party\". The relying party then validates that the attestation token was created by the attestation service, and thus the serialized key can be used to encrypt some data held by the \"relying party\" to send to the service.\n\nThis example shows one common pattern of calling into the attestation service to retrieve an attestation token associated with a request.\n\nThis example assumes that you have an existing `AttestationClient` object which is configured with the Attest URI for your endpoint. It also assumes that you have an OpenEnclave report (`report`) generated from within the SGX enclave you are attesting, and \"Runtime Data\" (`binaryRuntimeData`) which is referenced in the SGX Quote.\n\n```ts\nconst attestationResult = await client.attestOpenEnclave(report, {\n  runTimeData: binaryRuntimeData\n});\n```\n\nIt is also possible that the `binaryRuntimeData` sent to the attestation service is\nintended to be interpreted as JSON data. In that case, the client should specify `runTimeJson` in\nthe attest API call:\n\n```ts\nconst attestationResult = await client.attestOpenEnclave(report, {\n  runTimeJson: binaryRuntimeData\n});\n```\n\nSimilarly, if you are using the Intel SDK to generate a \"quote\", you can validate the quote using:\n\n```ts\nconst attestationResult = await client.attestSgxEnclave(quote, {\n  runTimeData: binaryRuntimeData\n});\n```\n\nAdditional information on how to perform attestation token validation can be found in the [MAA Service Attestation Sample](https://github.com/Azure-Samples/microsoft-azure-attestation).\n\n### Retrieve Token Certificates\n\nUse `getSigningCertificates` to retrieve the certificates which can be used to\nvalidate the token returned from the attestation service. Note that this call\ncreates a client with azure credentials, that is not needed if you are calling\nthe `attestSgxEnclave` or `attestOpenEnclave` APIs\n\n```ts\nconst credentials = new DefaultAzureCredential();\nconst client = new AttestationClient(endpoint, {credentials: credentials});\n\nconst attestationSigners = await client.getAttestationSigners();\n\nconsole.log(`There are ${attestationSigners.length} signers`);\n\n```\n\n## Troubleshooting\n\nMost Attestation service operations will raise exceptions defined in [Azure Core](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/core/README.md). The attestation service APIs will throw a `RestError` on failure with helpful error codes. Many of these errors are recoverable.\n\n```ts\ntry {\n  await client.attestSgxEnclave(openEnclaveReport);\n} catch (error) {\n  console.log(`Exception thrown for invalid request: ${error.message}`);\n}\n```\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\n\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\nAdditional troubleshooting information for the MAA service can be found [here](https://docs.microsoft.com/azure/attestation/troubleshoot-guide)\n\n## Next steps\n\nFor more information about the Microsoft Azure Attestation service, please see our [documentation page](https://docs.microsoft.com/azure/attestation/).\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [the Contributor License Agreement site](https://cla.microsoft.com).\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][microsoft_code_of_conduct]. For more information see the Code of Conduct FAQ or contact <opencode@microsoft.com> with any additional questions or comments.\n\nSee [CONTRIBUTING.md][contributing] for details on building, testing, and contributing to these libraries.\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-js/issues)\nsection of the project.\n\n<!-- LINKS -->\n\n[source_code]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/attestation/attestation\n[azure_identity]: https://docs.microsoft.com/javascript/api/@azure/identity\n[defaultazurecredential]: https://docs.microsoft.com/javascript/api/@azure/identity/defaultazurecredential\n[attestation_policy_result]: https://azuresdkdocs.blob.core.windows.net/$web/javascript/azure-attestation/1.0.0-beta.4/interfaces/policyresult.html\n[attestation_client]: https://docs.microsoft.com/javascript/api/@azure/attestation/attestationclient\n[attestation_admin_client]: https://docs.microsoft.com/javascript/api/@azure/attestation/attestationadministrationclient\n[attestation_response]: https://docs.microsoft.com/javascript/api/@azure/attestation/attestationresponse\n[attestation_policy_result_parameters]: https://docs.microsoft.com/javascript/api/@azure/attestation/policyresult#properties\n[attest_sgx]: https://docs.microsoft.com/javascript/api/@azure/attestation/attestationclient#attestSgxEnclave_Uint8Array__AttestSgxEnclaveOptions_\n[attestation_npm]: https://www.npmjs.com/package/@azure/attestation\n[api_reference]: https://docs.microsoft.com/javascript/api/@azure/attestation\n[style-guide-msft]: https://docs.microsoft.com/style-guide/capitalization\n[style-guide-cloud]: https://aka.ms/azsdk/cloud-style-guide\n[microsoft_code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[json_web_token]: https://tools.ietf.org/html/rfc7519\n[jwk]: https://tools.ietf.org/html/rfc7517\n[base64url_encoding]: https://tools.ietf.org/html/rfc4648#section-5\n[contributing]: https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n\n## Related projects\n\n- [Microsoft Azure SDK for Javascript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fattestation%2Fattestation%2FREADME.png)\n",
        "repo_name": "attestation/attestation",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/attestation/attestation",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure AuthorizationManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure AuthorizationManagement client.\n\nRole based access control provides you a way to apply granular level policy administration down to individual resources or resource groups. These operations enable you to manage role definitions and role assignments. A role definition describes the set of actions that can be performed on resources. A role assignment grants access to Azure Active Directory users.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/authorization/arm-authorization-profile-2020-09-01-hybrid) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-authorization-profile-2020-09-01-hybrid) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-authorization-profile-2020-09-01-hybrid) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-authorization-profile-2020-09-01-hybrid` package\n\nInstall the Azure AuthorizationManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-authorization-profile-2020-09-01-hybrid\n```\n\n### Create and authenticate a `AuthorizationManagementClient`\n\nTo create a client object to access the Azure AuthorizationManagement API, you will need the `endpoint` of your Azure AuthorizationManagement resource and a `credential`. The Azure AuthorizationManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure AuthorizationManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure AuthorizationManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { AuthorizationManagementClient } = require(\"@azure/arm-authorization-profile-2020-09-01-hybrid\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new AuthorizationManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new AuthorizationManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### AuthorizationManagementClient\n\n`AuthorizationManagementClient` is the primary interface for developers using the Azure AuthorizationManagement client library. Explore the methods on this client object to understand the different features of the Azure AuthorizationManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fauthorization%2Farm-authorization-profile-2020-09-01-hybrid%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "authorization/arm-authorization-profile-2020-09-01-hybrid",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/authorization/arm-authorization-profile-2020-09-01-hybrid",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure AuthorizationManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure AuthorizationManagement client.\n\nRole based access control provides you a way to apply granular level policy administration down to individual resources or resource groups. These operations enable you to manage role definitions and role assignments. A role definition describes the set of actions that can be performed on resources. A role assignment grants access to Azure Active Directory users.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/authorization/arm-authorization) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-authorization) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-authorization) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-authorization` package\n\nInstall the Azure AuthorizationManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-authorization\n```\n\n### Create and authenticate a `AuthorizationManagementClient`\n\nTo create a client object to access the Azure AuthorizationManagement API, you will need the `endpoint` of your Azure AuthorizationManagement resource and a `credential`. The Azure AuthorizationManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure AuthorizationManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure AuthorizationManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { AuthorizationManagementClient } = require(\"@azure/arm-authorization\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new AuthorizationManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new AuthorizationManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### AuthorizationManagementClient\n\n`AuthorizationManagementClient` is the primary interface for developers using the Azure AuthorizationManagement client library. Explore the methods on this client object to understand the different features of the Azure AuthorizationManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fauthorization%2Farm-authorization%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "authorization/arm-authorization",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/authorization/arm-authorization",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Automanage client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure Automanage client.\n\nAutomanage Client\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/automanage/arm-automanage) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-automanage) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-automanage) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-automanage` package\n\nInstall the Azure Automanage client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-automanage\n```\n\n### Create and authenticate a `AutomanageClient`\n\nTo create a client object to access the Azure Automanage API, you will need the `endpoint` of your Azure Automanage resource and a `credential`. The Azure Automanage client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure Automanage resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure Automanage** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { AutomanageClient } = require(\"@azure/arm-automanage\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new AutomanageClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new AutomanageClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### AutomanageClient\n\n`AutomanageClient` is the primary interface for developers using the Azure Automanage client library. Explore the methods on this client object to understand the different features of the Azure Automanage service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fautomanage%2Farm-automanage%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "automanage/arm-automanage",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/automanage/arm-automanage",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Automation client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure Automation client.\n\nAutomation Client\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/automation/arm-automation) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-automation) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-automation?view=azure-node-preview) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-automation` package\n\nInstall the Azure Automation client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-automation\n```\n\n### Create and authenticate a `AutomationClient`\n\nTo create a client object to access the Azure Automation API, you will need the `endpoint` of your Azure Automation resource and a `credential`. The Azure Automation client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure Automation resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure Automation** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { AutomationClient } = require(\"@azure/arm-automation\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new AutomationClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new AutomationClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### AutomationClient\n\n`AutomationClient` is the primary interface for developers using the Azure Automation client library. Explore the methods on this client object to understand the different features of the Azure Automation service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fautomation%2Farm-automation%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "automation/arm-automation",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/automation/arm-automation",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# AzureVMwareSolutionApi client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for AzureVMwareSolutionApi client.\n\nAzure VMware Solution API\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/avs/arm-avs) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-avs) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-avs) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-avs` package\n\nInstall the AzureVMwareSolutionApi client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-avs\n```\n\n### Create and authenticate a `AzureVMwareSolutionAPI`\n\nTo create a client object to access the AzureVMwareSolutionApi API, you will need the `endpoint` of your AzureVMwareSolutionApi resource and a `credential`. The AzureVMwareSolutionApi client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your AzureVMwareSolutionApi resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to AzureVMwareSolutionApi** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { AzureVMwareSolutionAPI } = require(\"@azure/arm-avs\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new AzureVMwareSolutionAPI(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new AzureVMwareSolutionAPI(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### AzureVMwareSolutionAPI\n\n`AzureVMwareSolutionAPI` is the primary interface for developers using the AzureVMwareSolutionApi client library. Explore the methods on this client object to understand the different features of the AzureVMwareSolutionApi service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Favs%2Farm-avs%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "avs/arm-avs",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/avs/arm-avs",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure ExternalIdentitiesConfiguration client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure ExternalIdentitiesConfiguration client.\n\nExternal Identities Configuration Client\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/azureadexternalidentities/arm-azureadexternalidentities) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-azureadexternalidentities) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-azureadexternalidentities) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-azureadexternalidentities` package\n\nInstall the Azure ExternalIdentitiesConfiguration client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-azureadexternalidentities\n```\n\n### Create and authenticate a `ExternalIdentitiesConfigurationClient`\n\nTo create a client object to access the Azure ExternalIdentitiesConfiguration API, you will need the `endpoint` of your Azure ExternalIdentitiesConfiguration resource and a `credential`. The Azure ExternalIdentitiesConfiguration client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure ExternalIdentitiesConfiguration resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure ExternalIdentitiesConfiguration** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { ExternalIdentitiesConfigurationClient } = require(\"@azure/arm-azureadexternalidentities\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new ExternalIdentitiesConfigurationClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new ExternalIdentitiesConfigurationClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### ExternalIdentitiesConfigurationClient\n\n`ExternalIdentitiesConfigurationClient` is the primary interface for developers using the Azure ExternalIdentitiesConfiguration client library. Explore the methods on this client object to understand the different features of the Azure ExternalIdentitiesConfiguration service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fazureadexternalidentities%2Farm-azureadexternalidentities%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "azureadexternalidentities/arm-azureadexternalidentities",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/azureadexternalidentities/arm-azureadexternalidentities",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# AzureStackManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for AzureStackManagement client.\n\nAzure Stack\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/azurestack/arm-azurestack) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-azurestack) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-azurestack?view=azure-node-preview) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-azurestack` package\n\nInstall the AzureStackManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-azurestack\n```\n\n### Create and authenticate a `AzureStackManagementClient`\n\nTo create a client object to access the AzureStackManagement API, you will need the `endpoint` of your AzureStackManagement resource and a `credential`. The AzureStackManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your AzureStackManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to AzureStackManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { AzureStackManagementClient } = require(\"@azure/arm-azurestack\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new AzureStackManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new AzureStackManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### AzureStackManagementClient\n\n`AzureStackManagementClient` is the primary interface for developers using the AzureStackManagement client library. Explore the methods on this client object to understand the different features of the AzureStackManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fazurestack%2Farm-azurestack%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "azurestack/arm-azurestack",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/azurestack/arm-azurestack",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# AzureStackHCI client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for AzureStackHCI client.\n\nAzure Stack HCI management service\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/azurestackhci/arm-azurestackhci) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-azurestackhci) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-azurestackhci) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-azurestackhci` package\n\nInstall the AzureStackHCI client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-azurestackhci\n```\n\n### Create and authenticate a `AzureStackHCIClient`\n\nTo create a client object to access the AzureStackHCI API, you will need the `endpoint` of your AzureStackHCI resource and a `credential`. The AzureStackHCI client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your AzureStackHCI resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to AzureStackHCI** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { AzureStackHCIClient } = require(\"@azure/arm-azurestackhci\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new AzureStackHCIClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new AzureStackHCIClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### AzureStackHCIClient\n\n`AzureStackHCIClient` is the primary interface for developers using the AzureStackHCI client library. Explore the methods on this client object to understand the different features of the AzureStackHCI service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fazurestackhci%2Farm-azurestackhci%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "azurestackhci/arm-azurestackhci",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/azurestackhci/arm-azurestackhci",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure bareMetalInfrastructure client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure bareMetalInfrastructure client.\n\nThe BareMetalInfrastructure Management client\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/baremetalinfrastructure/arm-baremetalinfrastructure) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-baremetalinfrastructure) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-baremetalinfrastructure) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-baremetalinfrastructure` package\n\nInstall the Azure bareMetalInfrastructure client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-baremetalinfrastructure\n```\n\n### Create and authenticate a `BareMetalInfrastructureClient`\n\nTo create a client object to access the Azure bareMetalInfrastructure API, you will need the `endpoint` of your Azure bareMetalInfrastructure resource and a `credential`. The Azure bareMetalInfrastructure client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure bareMetalInfrastructure resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure bareMetalInfrastructure** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { BareMetalInfrastructureClient } = require(\"@azure/arm-baremetalinfrastructure\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new BareMetalInfrastructureClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new BareMetalInfrastructureClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### BareMetalInfrastructureClient\n\n`BareMetalInfrastructureClient` is the primary interface for developers using the Azure bareMetalInfrastructure client library. Explore the methods on this client object to understand the different features of the Azure bareMetalInfrastructure service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fbaremetalinfrastructure%2Farm-baremetalinfrastructure%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "baremetalinfrastructure/arm-baremetalinfrastructure",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/baremetalinfrastructure/arm-baremetalinfrastructure",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure BatchManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure BatchManagement client.\n\nBatch Client\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/batch/arm-batch) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-batch) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-batch) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-batch` package\n\nInstall the Azure BatchManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-batch\n```\n\n### Create and authenticate a `BatchManagementClient`\n\nTo create a client object to access the Azure BatchManagement API, you will need the `endpoint` of your Azure BatchManagement resource and a `credential`. The Azure BatchManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure BatchManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure BatchManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { BatchManagementClient } = require(\"@azure/arm-batch\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new BatchManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new BatchManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### BatchManagementClient\n\n`BatchManagementClient` is the primary interface for developers using the Azure BatchManagement client library. Explore the methods on this client object to understand the different features of the Azure BatchManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fbatch%2Farm-batch%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "batch/arm-batch",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/batch/arm-batch",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "## Azure BatchServiceClient SDK for JavaScript\n\nThis package contains an isomorphic SDK for BatchServiceClient.\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge, and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### How to Install\n\n```bash\nnpm install @azure/batch\n```\n\n### How to use\n\n#### nodejs - Authentication, client creation and list application as an example written in TypeScript.\n\n##### Install @azure/ms-rest-nodeauth\n\n```bash\nnpm install @azure/ms-rest-nodeauth\n```\n\n##### Authentication\n\n1. Use the `BatchSharedKeyCredentials` exported from `@azure/batch`.\n\n```typescript\nimport { BatchServiceClient, BatchSharedKeyCredentials } from \"@azure/batch\";\n\nconst batchAccountName = process.env[\"AZURE_BATCH_ACCOUNT_NAME\"] || \"\";\nconst batchAccountKey = process.env[\"AZURE_BATCH_ACCOUNT_KEY\"] || \"\";\nconst batchEndpoint = process.env[\"AZURE_BATCH_ENDPOINT\"] || \"\";\n\nasync function main(): Promise<void> {\n  try {\n    const creds = new BatchSharedKeyCredentials(batchAccountName, batchAccountKey);\n    const client = new BatchServiceClient(creds, batchEndpoint);\n  } catch (err) {\n    console.log(err);\n  }\n}\n```\n\n2. Use the `MSIVmTokenCredentials` exported from `@azure/ms-rest-nodeauth`.\n\n```typescript\nimport { BatchServiceClient } from \"@azure/batch\";\nimport { loginWithVmMSI } from \"@azure/ms-rest-nodeauth\";\n\nconst batchEndpoint = process.env[\"AZURE_BATCH_ENDPOINT\"] || \"\";\n\nasync function main(): Promise<void> {\n  try {\n    const creds = await loginWithVmMSI({\n      resource: \"https://batch.core.windows.net/\"\n    });\n    const client = new BatchServiceClient(creds, batchEndpoint);\n  } catch (err) {\n    console.log(err);\n  }\n}\n```\n\n##### Sample code\n\n```typescript\nimport { BatchServiceClient, BatchServiceModels, BatchSharedKeyCredentials } from \"@azure/batch\";\n\nconst batchAccountName = process.env[\"AZURE_BATCH_ACCOUNT_NAME\"] || \"\";\nconst batchAccountKey = process.env[\"AZURE_BATCH_ACCOUNT_KEY\"] || \"\";\nconst batchEndpoint = process.env[\"AZURE_BATCH_ENDPOINT\"] || \"\";\n\nconst creds = new BatchSharedKeyCredentials(batchAccountName, batchAccountKey);\nconst client = new BatchServiceClient(creds, batchEndpoint);\n\nconst options: BatchServiceModels.JobListOptionalParams = {\n  jobListOptions: { maxResults: 10 }\n};\n\nasync function loop(res: BatchServiceModels.JobListResponse, nextLink?: string): Promise<void> {\n  if (nextLink !== undefined) {\n    const res1 = await client.job.listNext(nextLink);\n    if (res1.length) {\n      for (const item of res1) {\n        res.push(item);\n      }\n    }\n    return loop(res, res1.odatanextLink);\n  }\n  return Promise.resolve();\n}\n\nasync function main(): Promise<void> {\n  const result = await client.job.list(options);\n  await loop(result, result.odatanextLink);\n  console.dir(result, { depth: null, colors: true });\n}\n\nmain().catch((err) => console.log(\"An error occurred: \", err));\n```\n\n## Related projects\n\n- [Microsoft Azure SDK for Javascript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fbatch%2Fbatch%2FREADME.png)\n",
        "repo_name": "batch/batch",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/batch/batch",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure BillingManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure BillingManagement client.\n\nBilling client provides access to billing resources for Azure subscriptions.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/billing/arm-billing) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-billing) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-billing) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-billing` package\n\nInstall the Azure BillingManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-billing\n```\n\n### Create and authenticate a `BillingManagementClient`\n\nTo create a client object to access the Azure BillingManagement API, you will need the `endpoint` of your Azure BillingManagement resource and a `credential`. The Azure BillingManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure BillingManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure BillingManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { BillingManagementClient } = require(\"@azure/arm-billing\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new BillingManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new BillingManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### BillingManagementClient\n\n`BillingManagementClient` is the primary interface for developers using the Azure BillingManagement client library. Explore the methods on this client object to understand the different features of the Azure BillingManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fbilling%2Farm-billing%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "billing/arm-billing",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/billing/arm-billing",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure BillingBenefitsRp client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure BillingBenefitsRp client.\n\nAzure Benefits RP let users create and manage benefits like savings plan.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/billingbenefits/arm-billingbenefits) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-billingbenefits) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-billingbenefits) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-billingbenefits` package\n\nInstall the Azure BillingBenefitsRp client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-billingbenefits\n```\n\n### Create and authenticate a `BillingBenefitsRP`\n\nTo create a client object to access the Azure BillingBenefitsRp API, you will need the `endpoint` of your Azure BillingBenefitsRp resource and a `credential`. The Azure BillingBenefitsRp client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure BillingBenefitsRp resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure BillingBenefitsRp** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { BillingBenefitsRP } = require(\"@azure/arm-billingbenefits\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new BillingBenefitsRP(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new BillingBenefitsRP(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### BillingBenefitsRP\n\n`BillingBenefitsRP` is the primary interface for developers using the Azure BillingBenefitsRp client library. Explore the methods on this client object to understand the different features of the Azure BillingBenefitsRp service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fbillingbenefits%2Farm-billingbenefits%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "billingbenefits/arm-billingbenefits",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/billingbenefits/arm-billingbenefits",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Bot client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure Bot client.\n\nAzure Bot Service is a platform for creating smart conversational agents.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/botservice/arm-botservice) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-botservice) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-botservice) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-botservice` package\n\nInstall the Azure Bot client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-botservice\n```\n\n### Create and authenticate a `AzureBotService`\n\nTo create a client object to access the Azure Bot API, you will need the `endpoint` of your Azure Bot resource and a `credential`. The Azure Bot client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure Bot resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure Bot** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { AzureBotService } = require(\"@azure/arm-botservice\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new AzureBotService(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new AzureBotService(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### AzureBotService\n\n`AzureBotService` is the primary interface for developers using the Azure Bot client library. Explore the methods on this client object to understand the different features of the Azure Bot service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fbotservice%2Farm-botservice%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "botservice/arm-botservice",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/botservice/arm-botservice",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure CdnManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure CdnManagement client.\n\nCdn Management Client\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/cdn/arm-cdn) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-cdn) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-cdn) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-cdn` package\n\nInstall the Azure CdnManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-cdn\n```\n\n### Create and authenticate a `CdnManagementClient`\n\nTo create a client object to access the Azure CdnManagement API, you will need the `endpoint` of your Azure CdnManagement resource and a `credential`. The Azure CdnManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure CdnManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure CdnManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { CdnManagementClient } = require(\"@azure/arm-cdn\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new CdnManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new CdnManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### CdnManagementClient\n\n`CdnManagementClient` is the primary interface for developers using the Azure CdnManagement client library. Explore the methods on this client object to understand the different features of the Azure CdnManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fcdn%2Farm-cdn%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "cdn/arm-cdn",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/cdn/arm-cdn",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# AzureChangeAnalysisManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for AzureChangeAnalysisManagement client.\n\n\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/changeanalysis/arm-changeanalysis) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-changeanalysis) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-changeanalysis) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-changeanalysis` package\n\nInstall the AzureChangeAnalysisManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-changeanalysis\n```\n\n### Create and authenticate a `AzureChangeAnalysisManagementClient`\n\nTo create a client object to access the AzureChangeAnalysisManagement API, you will need the `endpoint` of your AzureChangeAnalysisManagement resource and a `credential`. The AzureChangeAnalysisManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your AzureChangeAnalysisManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to AzureChangeAnalysisManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { AzureChangeAnalysisManagementClient } = require(\"@azure/arm-changeanalysis\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new AzureChangeAnalysisManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new AzureChangeAnalysisManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### AzureChangeAnalysisManagementClient\n\n`AzureChangeAnalysisManagementClient` is the primary interface for developers using the AzureChangeAnalysisManagement client library. Explore the methods on this client object to understand the different features of the AzureChangeAnalysisManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fchangeanalysis%2Farm-changeanalysis%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "changeanalysis/arm-changeanalysis",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/changeanalysis/arm-changeanalysis",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Changes client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure Changes client.\n\nThe Resource Changes Client\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/changes/arm-changes) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-changes) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-changes) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-changes` package\n\nInstall the Azure Changes client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-changes\n```\n\n### Create and authenticate a `ChangesClient`\n\nTo create a client object to access the Azure Changes API, you will need the `endpoint` of your Azure Changes resource and a `credential`. The Azure Changes client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure Changes resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure Changes** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { ChangesClient } = require(\"@azure/arm-changes\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new ChangesClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new ChangesClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### ChangesClient\n\n`ChangesClient` is the primary interface for developers using the Azure Changes client library. Explore the methods on this client object to understand the different features of the Azure Changes service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fchanges%2Farm-changes%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "changes/arm-changes",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/changes/arm-changes",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure ChaosManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure ChaosManagement client.\n\nChaos Management Client\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/chaos/arm-chaos) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-chaos) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-chaos?view=azure-node-preview) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-chaos` package\n\nInstall the Azure ChaosManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-chaos\n```\n\n### Create and authenticate a `ChaosManagementClient`\n\nTo create a client object to access the Azure ChaosManagement API, you will need the `endpoint` of your Azure ChaosManagement resource and a `credential`. The Azure ChaosManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure ChaosManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure ChaosManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { ChaosManagementClient } = require(\"@azure/arm-chaos\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new ChaosManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new ChaosManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### ChaosManagementClient\n\n`ChaosManagementClient` is the primary interface for developers using the Azure ChaosManagement client library. Explore the methods on this client object to understand the different features of the Azure ChaosManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fchaos%2Farm-chaos%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "chaos/arm-chaos",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/chaos/arm-chaos",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure ConversationAnalysis client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure ConversationAnalysis client.\n\nThe language service conversations API is a suite of natural language processing (NLP) skills that can be used to analyze structured conversations (textual or spoken). The synchronous API in this suite accepts a request and mediates among multiple language projects, such as LUIS Generally Available, Question Answering, Conversational Language Understanding, and then calls the best candidate service to handle the request. At last, it returns a response with the candidate service's response as a payload.\n\n In some cases, this API needs to forward requests and responses between the caller and an upstream service. The asynchronous APIs in this suite enable tasks like Conversation Summarization and Conversational PII detection.\n\nKey links:\n\n- [Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/cognitivelanguage/ai-language-conversations)\n- [Package (NPM)](https://www.npmjs.com/package/@azure/ai-language-conversations)\n- [API reference documentation](https://aka.ms/clujsapidocs)\n- [Product documentation](https://docs.microsoft.com/azure/cognitive-services/language-service/)\n- [Samples](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/cognitivelanguage/ai-language-conversations/samples-dev)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n- An existing [Cognitive Services][cognitive_resource] or Language resource. If you need to create the resource, you can use the [Azure Portal][azure_portal] or [Azure CLI][azure_cli].\n\nIf you use the Azure CLI, replace `<your-resource-group-name>` and `<your-resource-name>` with your own unique names:\n\n```PowerShell\naz cognitiveservices account create --kind ConversationalLanguageUnderstanding --resource-group <your-resource-group-name> --name <your-resource-name> --sku <your-sku-name> --location <your-location>\n```\n\n### Install the `@azure/ai-language-conversations` package\n\nInstall the Azure ConversationAnalysis client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/ai-language-conversations\n```\n\n### Create and authenticate a `ConversationAnalysisClient`\n\nTo create a client object to access the Language API, you will need the `endpoint` of your Language resource and a `credential`. The Conversation Analysis client can use an API key credential to authenticate.\n\nYou can find the endpoint for your Language resource either in the [Azure Portal][azure_portal] or by using the [Azure CLI][azure_cli] snippet below:\n\n```bash\naz cognitiveservices account show --name <your-resource-name> --resource-group <your-resource-group-name> --query \"properties.endpoint\"\n```\n\n#### Using an API Key\n\nUse the [Azure Portal][azure_portal] to browse to your Language resource and retrieve an API key, or use the [Azure CLI][azure_cli] snippet below:\n\n**Note:** Sometimes the API key is referred to as a \"subscription key\" or \"subscription API key.\"\n\n```PowerShell\naz cognitiveservices account keys list --resource-group <your-resource-group-name> --name <your-resource-name>\n```\n\nOnce you have an API key and endpoint, you can use the `AzureKeyCredential` class to authenticate the client as follows:\n\n```javascript\nconst { AzureKeyCredential } = require(\"@azure/core-auth\");\nconst { ConversationAnalysisClient } = require(\"@azure/ai-language-conversations\");\n\nconst client = new ConversationAnalysisClient(\"<endpoint>\", new AzureKeyCredential(\"<API key>\"));\n```\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### ConversationAnalysisClient\n\n`ConversationAnalysisClient` is the primary interface for developers using the Azure ConversationAnalysis client library. Explore the methods on this client object to understand the different features of the Azure ConversationAnalysis service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/cognitivelanguage/ai-language-conversations/samples-dev) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fcognitivelanguage%2Fai-language-conversations%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "cognitivelanguage/ai-language-conversations",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/cognitivelanguage/ai-language-conversations",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Text Analysis client library for JavaScript\n\n[Azure Cognitive Service for Language](https://azure.microsoft.com/services/cognitive-services/language-service/) is a cloud-based service that provides advanced natural language processing over raw text, and includes the following main features:\n\n**Note:** This SDK targets Azure Cognitive Service for Language API version 2023-04-01.\n\n- Language Detection\n- Sentiment Analysis\n- Key Phrase Extraction\n- Named Entity Recognition\n- Recognition of Personally Identifiable Information\n- Entity Linking\n- Healthcare Analysis\n- Extractive Summarization\n- Abstractive Summarization\n- Custom Entity Recognition\n- Custom Document Classification\n- Support Multiple Actions Per Document\n\nUse the client library to:\n\n- Detect what language input text is written in.\n- Determine what customers think of your brand or topic by analyzing raw text for clues about positive or negative sentiment.\n- Automatically extract key phrases to quickly identify the main points.\n- Identify and categorize entities in your text as people, places, organizations, date/time, quantities, percentages, currencies, healthcare specific, and more.\n- Perform multiple of the above tasks at once.\n\nKey links:\n\n- [Source code](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/cognitivelanguage/ai-language-text/)\n- [Package (NPM)](https://www.npmjs.com/package/@azure/ai-language-text)\n- [API reference documentation](https://aka.ms/ai-language-text-js-api)\n- [Product documentation](https://docs.microsoft.com/azure/cognitive-services/language-service/)\n- [Samples](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/cognitivelanguage/ai-language-text/samples)\n\n#### **_Migrating from @azure/ai-text-analytics advisory_ \u26a0\ufe0f**\n\nPlease see the [Migration Guide](https://github.com/azure/azure-sdk-for-js/blob/main/sdk/cognitivelanguage/ai-language-text/MIGRATION_ai_text_analytics.md) for detailed instructions on how to update application code from version 5.x of the AI Text Analytics client library to the new AI Language Text client library.\n\n## What's New\n\n* [Abstractive Summarization](https://github.com/azure/azure-sdk-for-js/blob/main/sdk/cognitivelanguage/ai-language-text/Samples.md#abstractive-summarization)\n* [Healthcare Analysis](https://github.com/azure/azure-sdk-for-js/blob/main/sdk/cognitivelanguage/ai-language-text/Samples.md#healthcare-analysis)\n\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge, and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n- An existing [Cognitive Services][cognitive_resource] or Language resource. If you need to create the resource, you can use the [Azure Portal][azure_portal] or [Azure CLI][azure_cli] following the steps in [this document][cli_docs].\n\nIf you use the Azure CLI, replace `<your-resource-group-name>` and `<your-resource-name>` with your own unique names:\n\n```PowerShell\naz cognitiveservices account create --kind TextAnalytics --resource-group <your-resource-group-name> --name <your-resource-name> --sku <your-sku-name> --location <your-location>\n```\n\n### Install the `@azure/ai-language-text` package\n\nInstall the Azure Text Analysis client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/ai-language-text\n```\n\n### Create and authenticate a `TextAnalysisClient`\n\nTo create a client object to access the Language API, you will need the `endpoint` of your Language resource and a `credential`. The Text Analysis client can use either Azure Active Directory credentials or an API key credential to authenticate.\n\nYou can find the endpoint for your Language resource either in the [Azure Portal][azure_portal] or by using the [Azure CLI][azure_cli] snippet below:\n\n```bash\naz cognitiveservices account show --name <your-resource-name> --resource-group <your-resource-group-name> --query \"properties.endpoint\"\n```\n\n#### Using an API Key\n\nUse the [Azure Portal][azure_portal] to browse to your Language resource and retrieve an API key, or use the [Azure CLI][azure_cli] snippet below:\n\n**Note:** Sometimes the API key is referred to as a \"subscription key\" or \"subscription API key.\"\n\n```PowerShell\naz cognitiveservices account keys list --resource-group <your-resource-group-name> --name <your-resource-name>\n```\n\nOnce you have an API key and endpoint, you can use the `AzureKeyCredential` class to authenticate the client as follows:\n\n```javascript\nconst { TextAnalysisClient, AzureKeyCredential } = require(\"@azure/ai-language-text\");\n\nconst client = new TextAnalysisClient(\"<endpoint>\", new AzureKeyCredential(\"<API key>\"));\n```\n\n#### Using an Azure Active Directory Credential\n\nClient API key authentication is used in most of the examples, but you can also authenticate with Azure Active Directory using the [Azure Identity library][azure_identity]. To use the [DefaultAzureCredential][defaultazurecredential] provider shown below,\nor other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to [register a new AAD application][register_aad_app] and grant access to Language by assigning the `\"Cognitive Services User\"` role to your service principal (note: other roles such as `\"Owner\"` will not grant the necessary permissions, only `\"Cognitive Services User\"` will suffice to run the examples and the sample code).\n\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\n```javascript\nconst { TextAnalysisClient } = require(\"@azure/ai-language-text\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n\nconst client = new TextAnalysisClient(\"<endpoint>\", new DefaultAzureCredential());\n```\n\n## Key concepts\n\n### TextAnalysisClient\n\n`TextAnalysisClient` is the primary interface for developers using the Text Analysis client library. Explore the methods on this client object to understand the different features of the Language service that you can access.\n\n### Input\n\nA **document** represents a single unit of input to be analyzed by the predictive models in the Language service. Operations on `TextAnalysisClient` take a collection of inputs to be analyzed as a batch. The operation methods have overloads that allow the inputs to be represented as strings, or as objects with attached metadata.\n\nFor example, each document can be passed as a string in an array, e.g.\n\n```typescript\nconst documents = [\n  \"I hated the movie. It was so slow!\",\n  \"The movie made it into my top ten favorites.\",\n  \"What a great movie!\",\n];\n```\n\nor, if you wish to pass in a per-item document `id` or `language`/`countryHint`, they can be given as a list of `TextDocumentInput` or `DetectLanguageInput` depending on the operation;\n\n```javascript\nconst textDocumentInputs = [\n  { id: \"1\", language: \"en\", text: \"I hated the movie. It was so slow!\" },\n  { id: \"2\", language: \"en\", text: \"The movie made it into my top ten favorites.\" },\n  { id: \"3\", language: \"en\", text: \"What a great movie!\" },\n];\n```\n\nSee [service limitations][data_limits] for the input, including document length limits, maximum batch size, and supported text encodings.\n\n### Return Value\n\nThe return value corresponding to a single document is either a successful result or an error object. Each `TextAnalysisClient` method returns a heterogeneous array of results and errors that correspond to the inputs by index. A text input and its result will have the same index in the input and result collections.\n\nAn **result**, such as `SentimentAnalysisResult`, is the result of a Language operation, containing a prediction or predictions about a single text input. An operation's result type also may optionally include information about the input document and how it was processed.\n\nThe **error** object, `TextAnalysisErrorResult`, indicates that the service encountered an error while processing the document and contains information about the error.\n\n### Document Error Handling\n\nIn the collection returned by an operation, errors are distinguished from successful responses by the presence of the `error` property, which contains the inner `TextAnalysisError` object if an error was encountered. For successful result objects, this property is _always_ `undefined`.\n\nFor example, to filter out all errors, you could use the following `filter`:\n\n```javascript\nconst results = await client.analyze(\"SentimentAnalysis\", documents);\nconst onlySuccessful = results.filter((result) => result.error === undefined);\n```\n\n**Note**: TypeScript users can benefit from better type-checking of result and error objects if `compilerOptions.strictNullChecks` is set to `true` in the `tsconfig.json` configuration. For example:\n\n```typescript\nconst [result] = await client.analyze(\"SentimentAnalysis\", [\"Hello world!\"]);\n\nif (result.error !== undefined) {\n  // In this if block, TypeScript will be sure that the type of `result` is\n  // `TextAnalysisError` if compilerOptions.strictNullChecks is enabled in\n  // the tsconfig.json\n\n  console.log(result.error);\n}\n```\n\n## Samples\n\n### Client Usage\n* [Actions Batching](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/cognitivelanguage/ai-language-text/samples-dev/batching.ts)\n* [Choose Model Version](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/cognitivelanguage/ai-language-text/samples-dev/modelVersion.ts)\n* [Paging](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/cognitivelanguage/ai-language-text/samples-dev/paging.ts)\n* [Rehydrate Polling](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/cognitivelanguage/ai-language-text/samples-dev/rehydratePolling.ts)\n* [Get Statistics](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/cognitivelanguage/ai-language-text/samples-dev/stats.ts)\n\n### Prebuilt Tasks\n* [Abstractive Summarization](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/cognitivelanguage/ai-language-text/samples-dev/abstractiveSummarization.ts)\n* [Language Detection](https://github.com/azure/azure-sdk-for-js/blob/main/sdk/cognitivelanguage/ai-language-text/Samples.md#language-detection)\n* [Entity Linking](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/cognitivelanguage/ai-language-text/samples-dev/entityLinking.ts)\n* [Entity Regconition](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/cognitivelanguage/ai-language-text/samples-dev/entityRecognition.ts)\n* [Extractive Summarization](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/cognitivelanguage/ai-language-text/samples-dev/extractiveSummarization.ts)\n* [Healthcare Analysis](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/cognitivelanguage/ai-language-text/samples-dev/healthcare.ts)\n* [Key Phrase Extraction](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/cognitivelanguage/ai-language-text/samples-dev/keyPhraseExtraction.ts)\n* [Language Detection](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/cognitivelanguage/ai-language-text/samples-dev/languageDetection.ts)\n* [Opinion Mining](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/cognitivelanguage/ai-language-text/samples-dev/opinionMining.ts)\n* [PII Entity Recognition](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/cognitivelanguage/ai-language-text/samples-dev/piiEntityRecognition.ts)\n* [Sentiment Analysis](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/cognitivelanguage/ai-language-text/samples-dev/sentimentAnalysis.ts)\n\n### Custom Tasks\n* [Custom Entity Recognition](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/cognitivelanguage/ai-language-text/samples-dev/customEntityRecognition.ts)\n* [Custom Single-lable Classfication](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/cognitivelanguage/ai-language-text/samples-dev/customSingleLabelClassification.ts)\n* [Custom Multi-lable Classfication](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/cognitivelanguage/ai-language-text/samples-dev/customMultiLabelClassification.ts)\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\n\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/cognitivelanguage/ai-language-text/samples) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fcognitivelanguage%2Fai-language-text%2FREADME.png)\n\n[cli_docs]: https://learn.microsoft.com/azure/cognitive-services/cognitive-services-apis-create-account-cli?tabs=windows#prerequisites\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[cognitive_resource]: https://docs.microsoft.com/azure/cognitive-services/cognitive-services-apis-create-account\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[cognitive_auth]: https://docs.microsoft.com/azure/cognitive-services/authentication\n[register_aad_app]: https://docs.microsoft.com/azure/cognitive-services/authentication#assign-a-role-to-a-service-principal\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n[data_limits]: https://docs.microsoft.com/azure/cognitive-services/language-service/concepts/data-limits\n[analyze_sentiment_opinion_mining_sample]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/cognitivelanguage/ai-language-text/samples/v1-beta/javascript/opinionMining.js\n[lang_studio]: https://docs.microsoft.com/azure/cognitive-services/language-service/language-studio\n",
        "repo_name": "cognitivelanguage/ai-language-text",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/cognitivelanguage/ai-language-text",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure TextAuthoring REST client library for JavaScript\n\nText Authoring Client\n\n**If you are not familiar with our REST client, please spend 5 minutes to take a look at our [REST client docs](https://github.com/Azure/azure-sdk-for-js/blob/main/documentation/rest-clients.md) to use this library, the REST client provides a light-weighted & developer friendly way to call azure rest api\n\nKey links:\n\n- [Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/cognitivelanguage/ai-language-textauthoring)\n- [Package (NPM)](https://www.npmjs.com/package/@azure/ai-language-textauthoring)\n- [API reference documentation](https://learn.microsoft.com/rest/api/language/2022-05-01/text-analysis-authoring)\n\n## Getting started\n\n### Currently supported environments\n\n- LTS versions of Node.js\n\n### Prerequisites\n\n- You must have an [Azure subscription](https://azure.microsoft.com/free/) to use this package.\n\n### Install the `@azure/ai-language-textauthoring` package\n\nInstall the Azure TextAuthoring REST client REST client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/ai-language-textauthoring\n```\n\n### Create and authenticate a `TextAuthoringClient`\n\nTo use an [Azure Active Directory (AAD) token credential](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token),\nprovide an instance of the desired credential type obtained from the\n[@azure/identity](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#credentials) library.\n\nTo authenticate with AAD, you must first `npm` install [`@azure/identity`](https://www.npmjs.com/package/@azure/identity) \n\nAfter setup, you can choose which type of [credential](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#credentials) from `@azure/identity` to use.\nAs an example, [DefaultAzureCredential](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential)\ncan be used to authenticate the client.\n\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables:\nAZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\n\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n",
        "repo_name": "cognitivelanguage/ai-language-textauthoring",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/cognitivelanguage/ai-language-textauthoring",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure CognitiveServicesManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure CognitiveServicesManagement client.\n\nCognitive Services Management Client\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/cognitiveservices/arm-cognitiveservices) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-cognitiveservices) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-cognitiveservices) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-cognitiveservices` package\n\nInstall the Azure CognitiveServicesManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-cognitiveservices\n```\n\n### Create and authenticate a `CognitiveServicesManagementClient`\n\nTo create a client object to access the Azure CognitiveServicesManagement API, you will need the `endpoint` of your Azure CognitiveServicesManagement resource and a `credential`. The Azure CognitiveServicesManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure CognitiveServicesManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure CognitiveServicesManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { CognitiveServicesManagementClient } = require(\"@azure/arm-cognitiveservices\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new CognitiveServicesManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new CognitiveServicesManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### CognitiveServicesManagementClient\n\n`CognitiveServicesManagementClient` is the primary interface for developers using the Azure CognitiveServicesManagement client library. Explore the methods on this client object to understand the different features of the Azure CognitiveServicesManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fcognitiveservices%2Farm-cognitiveservices%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "cognitiveservices/arm-cognitiveservices",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/cognitiveservices/arm-cognitiveservices",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "## An isomorphic javascript sdk for - AnomalyDetectorClient\n\nThis package contains an isomorphic SDK for AnomalyDetectorClient.\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge, and Firefox.\n\n### How to Install\n\n```bash\nnpm install @azure/cognitiveservices-anomalydetector\n```\n\n### How to use\n\n#### nodejs - Authentication, client creation and entireDetect as an example written in TypeScript.\n\n##### Install @azure/ms-rest-azure-js\n\n```bash\nnpm install @azure/ms-rest-azure-js\n```\n\n##### Sample code\nThe following sample determines anamolies with the given time series. To know more, refer to the [Azure Documentation on Anomaly Detectors](https://docs.microsoft.com/azure/cognitive-services/anomaly-detector/)\n\n```javascript\nconst { AnomalyDetectorClient } = require(\"@azure/cognitiveservices-anomalydetector\");\nconst { CognitiveServicesCredentials } = require(\"@azure/ms-rest-azure-js\");\n\nasync function main() {\n  const anomalyDetectorKey = process.env[\"anomalyDetectorKey\"] || \"<anomalyDetectorKey>\";\n  const anomalyDetectorEndPoint =\n    process.env[\"anomalyDetectorEndPoint\"] || \"<anomalyDetectorEndPoint>\";\n\n  const cognitiveServiceCredentials = new CognitiveServicesCredentials(anomalyDetectorKey);\n\n  const client = new AnomalyDetectorClient(cognitiveServiceCredentials, anomalyDetectorEndPoint);\n\n  const body = {\n    series: [\n      {\n        timestamp: new Date(\"December 15, 2018\"),\n        value: 1.01\n      },\n      {\n        timestamp: new Date(\"December 16, 2018\"),\n        value: 1.02\n      },\n      {\n        timestamp: new Date(\"December 17, 2018\"),\n        value: 1.03\n      },\n      {\n        timestamp: new Date(\"December 18, 2018\"),\n        value: 1.04\n      },\n      {\n        timestamp: new Date(\"December 19, 2018\"),\n        value: 1.05\n      },\n      {\n        timestamp: new Date(\"December 20, 2018\"),\n        value: 1.06\n      },\n      {\n        timestamp: new Date(\"December 21, 2018\"),\n        value: 1.07\n      },\n      {\n        timestamp: new Date(\"December 22, 2018\"),\n        value: 1.08\n      },\n      {\n        timestamp: new Date(\"December 23, 2018\"),\n        value: 1.09\n      },\n      {\n        timestamp: new Date(\"December 24, 2018\"),\n        value: 1.1\n      },\n      {\n        timestamp: new Date(\"December 25, 2018\"),\n        value: 1.11\n      },\n      {\n        timestamp: new Date(\"December 26, 2018\"),\n        value: 1.12\n      }\n    ],\n    granularity: \"daily\",\n    customInterval: 1,\n    period: 1,\n    maxAnomalyRatio: 0.3,\n    sensitivity: 1\n  };\n\n  client\n    .entireDetect(body)\n    .then((result) => {\n      console.log(\"The result is:\");\n      console.log(result);\n    })\n    .catch((err) => {\n      console.log(\"An error occurred:\");\n      console.error(err);\n    });\n}\n\nmain();\n```\n\n#### browser - Authentication, client creation and entireDetect as an example written in JavaScript.\n\n##### Sample code\n\n- index.html\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>@azure/cognitiveservices-anomalydetector sample</title>\n    <script src=\"node_modules/@azure/ms-rest-js/dist/msRest.browser.js\"></script>\n    <script src=\"node_modules/@azure/cognitiveservices-anomalydetector/dist/cognitiveservices-anomalydetector.js\"></script>\n    <script type=\"text/javascript\">\n      const anomalyDetectorKey = \"<YOUR_ANOMALY_DETECTOR_KEY>\";\n      const anomalyDetectorEndPoint = \"<YOUR_ANOMALY_DETECTOR_ENDPOINT>\";\n      const cognitiveServiceCredentials = new msRest.ApiKeyCredentials({\n        inHeader: {\n          \"Ocp-Apim-Subscription-Key\": anomalyDetectorKey\n        }\n      });\n      const client = new Azure.CognitiveservicesAnomalydetector.AnomalyDetectorClient(\n        cognitiveServiceCredentials,\n        anomalyDetectorEndPoint\n      );\n\n      const body = {\n        series: [\n          {\n            timestamp: new Date(\"December 15, 2018\"),\n            value: 1.01\n          },\n          {\n            timestamp: new Date(\"December 16, 2018\"),\n            value: 1.02\n          },\n          {\n            timestamp: new Date(\"December 17, 2018\"),\n            value: 1.03\n          },\n          {\n            timestamp: new Date(\"December 18, 2018\"),\n            value: 1.04\n          },\n          {\n            timestamp: new Date(\"December 19, 2018\"),\n            value: 1.05\n          },\n          {\n            timestamp: new Date(\"December 20, 2018\"),\n            value: 1.06\n          },\n          {\n            timestamp: new Date(\"December 21, 2018\"),\n            value: 1.07\n          },\n          {\n            timestamp: new Date(\"December 22, 2018\"),\n            value: 1.08\n          },\n          {\n            timestamp: new Date(\"December 23, 2018\"),\n            value: 1.09\n          },\n          {\n            timestamp: new Date(\"December 24, 2018\"),\n            value: 1.1\n          },\n          {\n            timestamp: new Date(\"December 25, 2018\"),\n            value: 1.11\n          },\n          {\n            timestamp: new Date(\"December 26, 2018\"),\n            value: 1.12\n          }\n        ],\n        granularity: \"daily\",\n        customInterval: 1,\n        period: 1,\n        maxAnomalyRatio: 0.3,\n        sensitivity: 1\n      };\n\n      client\n        .entireDetect(body)\n        .then((result) => {\n          console.log(\"The result is:\");\n          console.log(result);\n        })\n        .catch((err) => {\n          console.log(\"An error occurred:\");\n          console.error(err);\n        });\n    </script>\n  </head>\n  <body></body>\n</html>\n```\n\n## Related projects\n\n- [Microsoft Azure SDK for Javascript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fcognitiveservices%2Fcognitiveservices-anomalydetector%2FREADME.png)\n",
        "repo_name": "cognitiveservices/cognitiveservices-anomalydetector",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/cognitiveservices/cognitiveservices-anomalydetector",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "## An isomorphic javascript sdk for - AutoSuggestClient\n\nThis package contains an isomorphic SDK for AutoSuggestClient.\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge, and Firefox.\n\n### How to Install\n\n```bash\nnpm install @azure/cognitiveservices-autosuggest\n```\n\n### How to use\n\n#### nodejs - Authentication, client creation and autoSuggest as an example written in TypeScript.\n\n##### Install @azure/ms-rest-azure-js\n\n```bash\nnpm install @azure/ms-rest-azure-js\n```\n\n##### Sample code\nThe following sample gets suggestions from Bing for the given query **Microsoft Azure**. To know more, refer to the [Azure Documentation on Bing Auto Suggest](https://docs.microsoft.com/azure/cognitive-services/bing-autosuggest/)\n\n```javascript\nconst { AutoSuggestClient } = require(\"@azure/cognitiveservices-autosuggest\");\nconst { CognitiveServicesCredentials } = require(\"@azure/ms-rest-azure-js\");\n\nasync function main() {\n  const autoSuggestKey = process.env[\"autoSuggestKey\"] || \"<autoSuggestKey>\";\n  const cognitiveServiceCredentials = new CognitiveServicesCredentials(autoSuggestKey);\n  const client = new AutoSuggestClient(cognitiveServiceCredentials);\n\n  const query = \"Microsoft Azure\";\n  const options = {\n    acceptLanguage: \"en-US\",\n    pragma: \"no-cache\",\n    clientId: \"testclientId\",\n    location: \"westus2\",\n    countryCode: \"en-US\"\n  };\n\n  client\n    .autoSuggest(query, options)\n    .then((result) => {\n      console.log(\"The result is:\");\n      result.suggestionGroups.forEach((suggestionGroup) => {\n        suggestionGroup.searchSuggestions.forEach((searchSuggestion) => {\n          console.log(`URL: ${searchSuggestion.url}`);\n          console.log(`Display Text: ${searchSuggestion.displayText}`);\n        });\n      });\n    })\n    .catch((err) => {\n      console.log(\"An error occurred:\");\n      console.error(err);\n    });\n}\n\nmain();\n```\n\n#### browser - Authentication, client creation and autoSuggest as an example written in JavaScript.\n\n##### Sample code\n\nSee https://github.com/Azure/ms-rest-browserauth to learn how to authenticate to Azure in the browser.\n\n- index.html\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>@azure/cognitiveservices-autosuggest sample</title>\n    <script src=\"node_modules/@azure/ms-rest-js/dist/msRest.browser.js\"></script>\n    <script src=\"node_modules/@azure/cognitiveservices-autosuggest/dist/cognitiveservices-autosuggest.js\"></script>\n    <script type=\"text/javascript\">\n      const autoSuggestKey = \"<YOUR_AUTO_SUGGEST_KEY>\";\n      const cognitiveServiceCredentials = new msRest.ApiKeyCredentials({\n        inHeader: {\n          \"Ocp-Apim-Subscription-Key\": autoSuggestKey\n        }\n      });\n      const client = new Azure.CognitiveservicesAutosuggest.AutoSuggestClient(\n        cognitiveServiceCredentials\n      );\n\n      const query = \"Microsoft Azure\";\n      const options = {\n        acceptLanguage: \"en-US\",\n        pragma: \"no-cache\",\n        clientId: \"testclientId\",\n        location: \"westus2\",\n        countryCode: \"en-US\"\n      };\n\n      client\n        .autoSuggest(query, options)\n        .then((result) => {\n          console.log(\"The result is:\");\n          result.suggestionGroups.forEach((suggestionGroup) => {\n            suggestionGroup.searchSuggestions.forEach((searchSuggestion) => {\n              console.log(`URL: ${searchSuggestion.url}`);\n              console.log(`Display Text: ${searchSuggestion.displayText}`);\n            });\n          });\n        })\n        .catch((err) => {\n          console.log(\"An error occurred:\");\n          console.error(err);\n        });\n    </script>\n  </head>\n  <body></body>\n</html>\n```\n\n## Related projects\n\n- [Microsoft Azure SDK for Javascript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fcognitiveservices%2Fcognitiveservices-autosuggest%2FREADME.png)\n",
        "repo_name": "cognitiveservices/cognitiveservices-autosuggest",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/cognitiveservices/cognitiveservices-autosuggest",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "## An isomorphic javascript sdk for - ComputerVisionClient\n\nThis package contains an isomorphic SDK for ComputerVisionClient.\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge, and Firefox.\n\n### How to Install\n\n```bash\nnpm install @azure/cognitiveservices-computervision\n```\n\n### How to use\n\n#### nodejs - Authentication, client creation and listModels as an example written in TypeScript.\n\n##### Install @azure/ms-rest-azure-js\n\n```bash\nnpm install @azure/ms-rest-azure-js\n```\n\n##### Sample code\nThe following sample describes a given image using Computer Vision. To know more, refer to the [Azure Documentation on Computer Vision](https://docs.microsoft.com/azure/cognitive-services/computer-vision/home)\n\n```javascript\nconst { ComputerVisionClient } = require(\"@azure/cognitiveservices-computervision\");\nconst { CognitiveServicesCredentials } = require(\"@azure/ms-rest-azure-js\");\n\nasync function main() {\n  const computerVisionKey = process.env[\"computerVisionKey\"] || \"<computerVisionKey>\";\n  const computerVisionEndPoint =\n    process.env[\"computerVisionEndPoint\"] || \"<computerVisionEndPoint>\";\n  const cognitiveServiceCredentials = new CognitiveServicesCredentials(computerVisionKey);\n  const client = new ComputerVisionClient(cognitiveServiceCredentials, computerVisionEndPoint);\n\n  const url =\n    \"https://docs.microsoft.com/azure/includes/media/shared-image-galleries/shared-image-gallery.png\";\n  const options = {\n    maxCandidates: 5,\n    language: \"en\"\n  };\n  client\n    .describeImage(url, options)\n    .then((result) => {\n      console.log(\"The result is:\");\n      console.log(result);\n    })\n    .catch((err) => {\n      console.log(\"An error occurred:\");\n      console.error(err);\n    });\n}\n\nmain();\n```\n\n#### browser - Authentication, client creation and listModels as an example written in JavaScript.\n\n##### Sample code\n\n- index.html\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>@azure/cognitiveservices-computervision sample</title>\n    <script src=\"node_modules/@azure/ms-rest-js/dist/msRest.browser.js\"></script>\n    <script src=\"node_modules/@azure/cognitiveservices-computervision/dist/cognitiveservices-computervision.js\"></script>\n    <script type=\"text/javascript\">\n      const computerVisionKey = \"<YOUR_COMPUTER_VISION_KEY>\";\n      const computerVisionEndPoint = \"<YOUR_COMPUTER_VISION_ENDPOINT>\";\n      const cognitiveServiceCredentials = new msRest.ApiKeyCredentials({\n        inHeader: {\n          \"Ocp-Apim-Subscription-Key\": computerVisionKey\n        }\n      });\n      const client = new Azure.CognitiveservicesComputervision.ComputerVisionClient(\n        cognitiveServiceCredentials,\n        computerVisionEndPoint\n      );\n\n      const url =\n        \"https://docs.microsoft.com/azure/includes/media/shared-image-galleries/shared-image-gallery.png\";\n      const options = {\n        maxCandidates: 5,\n        language: \"en\"\n      };\n\n      client\n        .describeImage(url, options)\n        .then((result) => {\n          console.log(\"The result is:\");\n          console.log(result);\n        })\n        .catch((err) => {\n          console.log(\"An error occurred:\");\n          console.error(err);\n        });\n    </script>\n  </head>\n  <body></body>\n</html>\n```\n\n## Related projects\n\n- [Microsoft Azure SDK for Javascript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fcognitiveservices%2Fcognitiveservices-computervision%2FREADME.png)\n",
        "repo_name": "cognitiveservices/cognitiveservices-computervision",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/cognitiveservices/cognitiveservices-computervision",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "## An isomorphic javascript sdk for - ContentModeratorClient\n\nThis package contains an isomorphic SDK for ContentModeratorClient.\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge, and Firefox.\n\n### How to Install\n\n```bash\nnpm install @azure/cognitiveservices-contentmoderator\n```\n\n### How to use\n\n#### nodejs - Authentication, client creation and getDetails listManagementImageLists as an example written in TypeScript.\n\n##### Install @azure/ms-rest-azure-js\n\n```bash\nnpm install @azure/ms-rest-azure-js\n```\n\n##### Sample code\nThe following sample detects the langauge of text provided using text moderator APIs. To know more, refer to the [Azure Documentation on Content Moderator](https://docs.microsoft.com/azure/cognitive-services/content-moderator/overview)\n\n```javascript\nconst { ContentModeratorClient } = require(\"@azure/cognitiveservices-contentmoderator\");\nconst { CognitiveServicesCredentials } = require(\"@azure/ms-rest-azure-js\");\n\nasync function main() {\n  const contentModeratorKey = process.env[\"contentModeratorKey\"] || \"<contentModeratorKey>\";\n  const contentModeratorEndPoint =\n    process.env[\"contentModeratorEndPoint\"] || \"<contentModeratorEndPoint>\";\n\n  const cognitiveServiceCredentials = new CognitiveServicesCredentials(contentModeratorKey);\n  const client = new ContentModeratorClient(cognitiveServiceCredentials, contentModeratorEndPoint);\n\n  client.textModeration\n    .detectLanguage(\"text/plain\", \"A Random Text\")\n    .then((result) => {\n      console.log(\"The result is: \");\n      console.log(result);\n    })\n    .catch((err) => {\n      console.log(\"An error occurred:\");\n      console.error(err);\n    });\n}\n\nmain();\n```\n\n#### browser - Authentication, client creation and getDetails listManagementImageLists as an example written in JavaScript.\n\n##### Sample code\n\n- index.html\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>@azure/cognitiveservices-contentmoderator sample</title>\n    <script src=\"node_modules/@azure/ms-rest-js/dist/msRest.browser.js\"></script>\n    <script src=\"node_modules/@azure/cognitiveservices-contentmoderator/dist/cognitiveservices-contentmoderator.js\"></script>\n    <script type=\"text/javascript\">\n      const contentModeratorKey = \"<YOUR_CONTENT_MODERATOR_KEY>\";\n      const contentModeratorEndPoint = \"<YOUR_CONTENT_MODERATOR_ENDPOINT>\";\n      const cognitiveServiceCredentials = new msRest.ApiKeyCredentials({\n        inHeader: {\n          \"Ocp-Apim-Subscription-Key\": contentModeratorKey\n        }\n      });\n      const client = new Azure.CognitiveservicesContentmoderator.ContentModeratorClient(\n        cognitiveServiceCredentials,\n        contentModeratorEndPoint\n      );\n\n      client.textModeration\n        .detectLanguage(\"text/plain\", \"A Random Text\")\n        .then((result) => {\n          console.log(\"The result is: \");\n          console.log(result);\n        })\n        .catch((err) => {\n          console.log(\"An error occurred:\");\n          console.error(err);\n        });\n    </script>\n  </head>\n  <body></body>\n</html>\n```\n\n## Related projects\n\n- [Microsoft Azure SDK for Javascript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fcognitiveservices%2Fcognitiveservices-contentmoderator%2FREADME.png)\n",
        "repo_name": "cognitiveservices/cognitiveservices-contentmoderator",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/cognitiveservices/cognitiveservices-contentmoderator",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "## An isomorphic javascript sdk for - CustomImageSearchClient\n\nThis package contains an isomorphic SDK for CustomImageSearchClient.\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge, and Firefox.\n\n### How to Install\n\n```bash\nnpm install @azure/cognitiveservices-customimagesearch\n```\n\n### How to use\n\n#### nodejs - Authentication, client creation and imageSearch customInstance as an example written in TypeScript.\n\n##### Install @azure/ms-rest-azure-js\n\n```bash\nnpm install @azure/ms-rest-azure-js\n```\n\n##### Sample code\nThe following sample performs an image search for given query on a custom configuration. The custom configuration can be setup using the Custom search portal. To know more, refer to the [Azure Documentation on Bing Custom Search](https://docs.microsoft.com/azure/cognitive-services/bing-custom-search/)\n\n```javascript\nconst { CustomImageSearchClient } = require(\"@azure/cognitiveservices-customimagesearch\");\nconst { CognitiveServicesCredentials } = require(\"@azure/ms-rest-azure-js\");\n\nasync function main() {\n  const customImageSearchKey =\n    process.env[\"customImageSearchKey\"] || \"<customImageSearchKey>\";\n  const customImageSearchEndPoint =\n    process.env[\"customImageSearchEndPoint\"] || \"<customImageSearchEndPoint>\";\n  const customImageConfig =\n    process.env[\"customImageConfig\"] || \"<customImageConfig>\";\n  const cognitiveServiceCredentials = new CognitiveServicesCredentials(\n    customImageSearchKey\n  );\n  const client = new CustomImageSearchClient(cognitiveServiceCredentials, {\n    endpoint: customImageSearchEndPoint\n  });\n  const query = \"Olympics\";\n  const options = {\n    count: 10,\n    safeSearch: \"Moderate\"\n  };\n  client.customInstance\n    .imageSearch(customImageConfig, query, options)\n    .then(result => {\n      console.log(\"The result is: \");\n      console.log(result);\n    })\n    .catch(err => {\n      console.log(\"An error occurred:\");\n      console.error(err);\n    });\n}\n\nmain();\n```\n\n#### browser - Authentication, client creation and imageSearch customInstance as an example written in JavaScript.\n\n##### Sample code\n\n- index.html\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>@azure/cognitiveservices-customimagesearch sample</title>\n    <script src=\"node_modules/@azure/ms-rest-js/dist/msRest.browser.js\"></script>\n    <script src=\"node_modules/@azure/cognitiveservices-customimagesearch/dist/cognitiveservices-customimagesearch.js\"></script>\n    <script type=\"text/javascript\">\n      const customImageSearchKey = \"<YOUR_CUSTOM_IMAGE_SEARCH_KEY>\";\n      const customImageSearchEndPoint = \"<YOUR_CUSTOM_IMAGE_SEARCH_ENDPOINT>\";\n      const customImageConfig = \"<YOUR_CUSTOM_IMAGE_CONFIG>\";\n\n      const cognitiveServiceCredentials = new msRest.ApiKeyCredentials({\n        inHeader: {\n          \"Ocp-Apim-Subscription-Key\": customImageSearchKey\n        }\n      });\n\n      const client = new Azure.CognitiveservicesCustomimagesearch.CustomImageSearchClient(\n        cognitiveServiceCredentials,\n        {\n          endpoint: customImageSearchEndPoint\n        }\n      );\n\n      const query = \"Olympics\";\n      const options = {\n        count: 10,\n        safeSearch: \"Moderate\"\n      };\n      client.customInstance\n        .imageSearch(customImageConfig, query, options)\n        .then(result => {\n          console.log(\"The result is: \");\n          console.log(result);\n        })\n        .catch(err => {\n          console.log(\"An error occurred:\");\n          console.error(err);\n        });\n    </script>\n  </head>\n  <body></body>\n</html>\n```\n\n## Related projects\n\n- [Microsoft Azure SDK for Javascript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fcognitiveservices%2Fcognitiveservices-customimagesearch%2FREADME.png)\n",
        "repo_name": "cognitiveservices/cognitiveservices-customimagesearch",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/cognitiveservices/cognitiveservices-customimagesearch",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "## An isomorphic javascript sdk for - CustomSearchClient\n\nThis package contains an isomorphic SDK for CustomSearchClient.\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge, and Firefox.\n\n### How to Install\n\n```bash\nnpm install @azure/cognitiveservices-customsearch\n```\n\n### How to use\n\n#### nodejs - Authentication, client creation and search customInstance as an example written in TypeScript.\n\n##### Install @azure/ms-rest-azure-js\n\n```bash\nnpm install @azure/ms-rest-azure-js\n```\n\n##### Sample code\nThe following sample performs a search for given query on a custom configuration. The custom configuration can be setup using the Custom search portal. To know more, refer to the [Azure Documentation Bing Custom Search](https://docs.microsoft.com/azure/cognitive-services/bing-custom-search/)\n\n```javascript\nconst { CustomSearchClient } = require(\"@azure/cognitiveservices-customsearch\");\nconst { CognitiveServicesCredentials } = require(\"@azure/ms-rest-azure-js\");\n\nasync function main() {\n  const customSearchKey = process.env[\"customSearchKey\"] || \"<customSearchKey>\";\n  const customSearchEndPoint =\n    process.env[\"customSearchEndPoint\"] || \"<customSearchEndPoint>\";\n  const customConfig = process.env[\"customConfig\"] || \"<customConfig>\";\n  const cognitiveServiceCredentials = new CognitiveServicesCredentials(\n    customSearchKey\n  );\n  const client = new CustomSearchClient(cognitiveServiceCredentials, {\n    endpoint: customSearchEndPoint\n  });\n  const query = \"World Peace\";\n  const options = {\n    count: 10,\n    safeSearch: \"Moderate\"\n  };\n  client.customInstance\n    .search(customConfig, query, options)\n    .then(result => {\n      console.log(\"The result is: \");\n      console.log(result);\n    })\n    .catch(err => {\n      console.log(\"An error occurred:\");\n      console.error(err);\n    });\n}\n\nmain();\n```\n\n#### browser - Authentication, client creation and search customInstance as an example written in JavaScript.\n\n##### Sample code\n\n- index.html\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>@azure/cognitiveservices-customsearch sample</title>\n    <script src=\"node_modules/@azure/ms-rest-js/dist/msRest.browser.js\"></script>\n    <script src=\"node_modules/@azure/cognitiveservices-customsearch/dist/cognitiveservices-customsearch.js\"></script>\n    <script type=\"text/javascript\">\n      const customSearchKey = \"<YOUR_CUSTOM_SEARCH_KEY>\";\n      const customSearchEndPoint = \"<YOUR_CUSTOM_SEARCH_ENDPOINT>\";\n      const customConfig = \"<YOUR_CUSTOM_CONFIG>\";\n\n      const cognitiveServiceCredentials = new msRest.ApiKeyCredentials({\n        inHeader: {\n          \"Ocp-Apim-Subscription-Key\": customSearchKey\n        }\n      });\n\n      const client = new Azure.CognitiveservicesCustomsearch.CustomSearchClient(\n        cognitiveServiceCredentials,\n        {\n          endpoint: customSearchEndPoint\n        }\n      );\n\n      const query = \"World Peace\";\n      const options = {\n        count: 10,\n        safeSearch: \"Moderate\"\n      };\n      client.customInstance\n        .search(customConfig, query, options)\n        .then(result => {\n          console.log(\"The result is: \");\n          console.log(result);\n        })\n        .catch(err => {\n          console.log(\"An error occurred:\");\n          console.error(err);\n        });\n    </script>\n  </head>\n  <body></body>\n</html>\n```\n\n## Related projects\n\n- [Microsoft Azure SDK for Javascript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fcognitiveservices%2Fcognitiveservices-customsearch%2FREADME.png)\n",
        "repo_name": "cognitiveservices/cognitiveservices-customsearch",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/cognitiveservices/cognitiveservices-customsearch",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "## An isomorphic javascript sdk for - PredictionAPIClient\n\nThis package contains an isomorphic SDK for PredictionAPIClient.\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge, and Firefox.\n\n### How to Install\n\n```bash\nnpm install @azure/cognitiveservices-customvision-prediction\n```\n\n### How to use\n\n#### nodejs - Authentication, client creation and classifyImageUrl as an example written in TypeScript.\n\n##### Sample code\nThe following sample predicts and classifies the given image based on your custom vision training. To know more, refer to the [Azure Documentation on Custom Vision Services](https://docs.microsoft.com/azure/cognitive-services/custom-vision-service/home).\n\n```javascript\nconst { PredictionAPIClient } = require(\"@azure/cognitiveservices-customvision-prediction\");\nconst { ApiKeyCredentials } = require(\"@azure/ms-rest-js\");\n\nasync function main() {\n  const customVisionPredictionKey =\n    process.env[\"customVisionPredictionKey\"] || \"<customVisionPredictionKey>\";\n  const customVisionPredictionEndPoint =\n    process.env[\"customVisionPredictionEndPoint\"] ||\n    \"<customVisionPredictionEndPoint>\";\n  const projectId = process.env[\"projectId\"] || \"<projectId>\";\n\n  const credentials = new ApiKeyCredentials({ inHeader: {\"Prediction-key\": customVisionPredictionKey } });\n  const client = new PredictionAPIClient(credentials, customVisionPredictionEndPoint);\n\n  const imageURL =\n    \"https://www.atlantatrails.com/wp-content/uploads/2019/02/north-georgia-waterfalls-1024x683.jpg\";\n\n  client\n    .classifyImageUrl(projectId, \"Iteration1\", { url: imageURL })\n    .then(result => {\n      console.log(\"The result is: \");\n      console.log(result);\n    })\n    .catch(err => {\n      console.log(\"An error occurred:\");\n      console.error(err);\n    });\n}\n\nmain();\n```\n\n#### browser - Authentication, client creation and classifyImageUrl  as an example written in JavaScript.\n\n##### Sample code\n\n- index.html\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>@azure/cognitiveservices-customvision-prediction sample</title>\n    <script src=\"node_modules/@azure/ms-rest-js/dist/msRest.browser.js\"></script>\n    <script src=\"node_modules/@azure/cognitiveservices-customvision-prediction/dist/cognitiveservices-customvision-prediction.js\"></script>\n    <script type=\"text/javascript\">\n      const customVisionPredictionKey = \"<YOUR_CUSTOM_VISION_PREDICTION_KEY>\";\n      const customVisionPredictionEndPoint =\n        \"<YOUR_CUSTOM_VISION_PREDICTION_ENDPOINT>\";\n      const projectId = \"<YOUR_CUSTOM_VISION_PREDICTION_PROJECTID>\";\n      const cognitiveServiceCredentials = new msRest.ApiKeyCredentials({\n        inHeader: {\n          \"Ocp-Apim-Subscription-Key\": customVisionPredictionKey\n        }\n      });\n\n      const imageURL =\n        \"https://www.atlantatrails.com/wp-content/uploads/2019/02/north-georgia-waterfalls-1024x683.jpg\";\n\n      const client = new Azure.CognitiveservicesCustomvisionPrediction.PredictionAPIClient(\n        cognitiveServiceCredentials,\n        customVisionPredictionEndPoint\n      );\n\n      client\n        .classifyImageUrl(projectId, \"Iteration1\", { url: imageURL })\n        .then(result => {\n          console.log(\"The result is: \");\n          console.log(result);\n        })\n        .catch(err => {\n          console.log(\"An error occurred:\");\n          console.error(err);\n        });\n    </script>\n  </head>\n  <body></body>\n</html>\n```\n\n## Related projects\n\n- [Microsoft Azure SDK for Javascript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fcognitiveservices%2Fcognitiveservices-customvision-prediction%2FREADME.png)\n",
        "repo_name": "cognitiveservices/cognitiveservices-customvision-prediction",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/cognitiveservices/cognitiveservices-customvision-prediction",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "## An isomorphic javascript sdk for - TrainingAPIClient\n\nThis package contains an isomorphic SDK for TrainingAPIClient.\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge, and Firefox.\n\n### How to Install\n\n```bash\nnpm install @azure/cognitiveservices-customvision-training\n```\n\n### How to use\n\n#### nodejs - Authentication, client creation and getDomains  as an example written in TypeScript.\n\n##### Sample code\nThe following sample performs a quick test of the given image based on your custom vision training. To know more, refer to the [Azure Documentation on Custom Vision Services](https://docs.microsoft.com/azure/cognitive-services/custom-vision-service/home).\n\n```javascript\nconst { TrainingAPIClient } = require(\"@azure/cognitiveservices-customvision-training\");\nconst { ApiKeyCredentials } = require(\"@azure/ms-rest-js\");\n\nasync function main() {\n  const customVisionTrainingKey =\n    process.env[\"customVisionTrainingKey\"] || \"<customVisionTrainingKey>\";\n  const customVisionTrainingEndPoint =\n    process.env[\"customVisionTrainingEndPoint\"] ||\n    \"<customVisionTrainingEndPoint>\";\n  const projectId = process.env[\"projectId\"] || \"<projectId>\";\n  const iterationId = process.env[\"iterationId\"] || \"<iterationId>\";\n\n  const credentials = new ApiKeyCredentials({ inHeader: { \"Training-key\": customVisionTrainingKey } });\n  const client = new TrainingAPIClient(credentials, customVisionTrainingEndPoint);\n\n  const imageURL =\n    \"https://www.atlantatrails.com/wp-content/uploads/2019/02/north-georgia-waterfalls-1024x683.jpg\";\n\n  const options = {\n    iterationId: iterationId\n  };\n\n  client\n    .quickTestImageUrl(\n      projectId,\n      {\n        url: imageURL\n      },\n      options\n    )\n    .then(result => {\n      console.log(\"The result is: \");\n      console.log(result);\n    })\n    .catch(err => {\n      console.log(\"An error occurred:\");\n      console.error(err);\n    });\n}\n\nmain();\n```\n\n#### browser - Authentication, client creation and getDomains  as an example written in JavaScript.\n\n##### Sample code\n\n- index.html\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>@azure/cognitiveservices-customvision-training sample</title>\n    <script src=\"node_modules/@azure/ms-rest-js/dist/msRest.browser.js\"></script>\n    <script src=\"node_modules/@azure/cognitiveservices-customvision-training/dist/cognitiveservices-customvision-training.js\"></script>\n    <script type=\"text/javascript\">\n      const customVisionTrainingKey = \"<YOUR_CUSTOM_VISION_TRAINING_KEY>\";\n      const customVisionTrainingEndPoint =\n        \"<YOUR_CUSTOM_VISION_TRAINING_ENDPOINT>\";\n      const projectId = \"<YOUR_PROJECT_ID>\";\n      const iterationId = \"<YOUR_ITERATION_ID>\";\n      const cognitiveServiceCredentials = new msRest.ApiKeyCredentials({\n        inHeader: {\n          \"Ocp-Apim-Subscription-Key\": customVisionTrainingKey\n        }\n      });\n\n      const imageURL =\n        \"https://www.atlantatrails.com/wp-content/uploads/2019/02/north-georgia-waterfalls-1024x683.jpg\";\n\n      const client = new Azure.CognitiveservicesCustomvisionTraining.TrainingAPIClient(\n        cognitiveServiceCredentials,\n        customVisionTrainingEndPoint\n      );\n\n      const options = {\n        iterationId: iterationId\n      };\n\n      client\n        .quickTestImageUrl(\n          projectId,\n          {\n            url: imageURL\n          },\n          options\n        )\n        .then(result => {\n          console.log(\"The result is: \");\n          console.log(result);\n        })\n        .catch(err => {\n          console.log(\"An error occurred:\");\n          console.error(err);\n        });\n    </script>\n  </head>\n  <body></body>\n</html>\n\n```\n\n## Related projects\n\n- [Microsoft Azure SDK for Javascript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fcognitiveservices%2Fcognitiveservices-customvision-training%2FREADME.png)\n",
        "repo_name": "cognitiveservices/cognitiveservices-customvision-training",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/cognitiveservices/cognitiveservices-customvision-training",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "## An isomorphic javascript sdk for - EntitySearchClient\n\nThis package contains an isomorphic SDK for EntitySearchClient.\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge, and Firefox.\n\n### How to Install\n\n```bash\nnpm install @azure/cognitiveservices-entitysearch\n```\n\n### How to use\n\n#### nodejs - Authentication, client creation and search entities as an example written in TypeScript.\n\n##### Install @azure/ms-rest-azure-js\n\n```bash\nnpm install @azure/ms-rest-azure-js\n```\n\n##### Sample code\nThe following sample performs a Bing entity search on the query 'Microsoft Azure'. To know more, refer to the [Azure Documentation on Bing Entities Search](https://docs.microsoft.com/azure/cognitive-services/bing-entities-search/).\n\n```javascript\nconst { EntitySearchClient } = require(\"@azure/cognitiveservices-entitysearch\");\nconst { CognitiveServicesCredentials } = require(\"@azure/ms-rest-azure-js\");\n\nasync function main() {\n  const entitySearchKey = process.env[\"entitySearchKey\"] || \"<entitySearchKey>\";\n  const entitySearchEndPoint =\n    process.env[\"entitySearchEndPoint\"] || \"<entitySearchEndPoint>\";\n  const cognitiveServiceCredentials = new CognitiveServicesCredentials(\n    entitySearchKey\n  );\n  const client = new EntitySearchClient(cognitiveServiceCredentials, {\n    endpoint: entitySearchEndPoint\n  });\n  const query = \"Microsoft Azure\";\n  client.entities\n    .search(query)\n    .then(result => {\n      console.log(\"The result is: \");\n      console.log(result);\n    })\n    .catch(err => {\n      console.log(\"An error occurred:\");\n      console.error(err);\n    });\n}\n\nmain();\n```\n\n#### browser - Authentication, client creation and search entities as an example written in JavaScript.\n\n##### Sample code\n\n- index.html\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>@azure/cognitiveservices-entitysearch sample</title>\n    <script src=\"node_modules/@azure/ms-rest-js/dist/msRest.browser.js\"></script>\n    <script src=\"node_modules/@azure/cognitiveservices-entitysearch/dist/cognitiveservices-entitysearch.js\"></script>\n    <script type=\"text/javascript\">\n      const entitySearchKey = \"<YOUR_ENTITY_SEARCH_KEY>\";\n      const entitySearchEndPoint = \"<YOUR_ENTITY_SEARCH_ENDPOINT>\";\n      const cognitiveServiceCredentials = new msRest.ApiKeyCredentials({\n        inHeader: {\n          \"Ocp-Apim-Subscription-Key\": entitySearchKey\n        }\n      });\n      const client = new Azure.CognitiveservicesEntitysearch.EntitySearchClient(\n        cognitiveServiceCredentials,\n        {\n          endpoint: entitySearchEndPoint\n        }\n      );\n\n      const query = \"Microsoft Azure\";\n      client.entities\n        .search(query)\n        .then(result => {\n          console.log(\"The result is: \");\n          console.log(result);\n        })\n        .catch(err => {\n          console.log(\"An error occurred:\");\n          console.error(err);\n        });\n    </script>\n  </head>\n  <body></body>\n</html>\n```\n\n## Related projects\n\n- [Microsoft Azure SDK for Javascript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fcognitiveservices%2Fcognitiveservices-entitysearch%2FREADME.png)\n",
        "repo_name": "cognitiveservices/cognitiveservices-entitysearch",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/cognitiveservices/cognitiveservices-entitysearch",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "## An isomorphic javascript sdk for - FaceClient\n\nThis package contains an isomorphic SDK for FaceClient.\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge, and Firefox.\n\n### How to Install\n\n```bash\nnpm install @azure/cognitiveservices-face\n```\n\n### How to use\n\n#### nodejs - Authentication, client creation and list personGroupPerson as an example written in TypeScript.\n\n##### Install @azure/ms-rest-azure-js\n\n```bash\nnpm install @azure/ms-rest-azure-js\n```\n\n##### Sample code\nThe following sample detects the facial features on the given image. To know more, refer to the [Azure Documentation on Face APIs](https://docs.microsoft.com/azure/cognitive-services/face/overview)\n\n```javascript\nconst { FaceClient, FaceModels } = require(\"@azure/cognitiveservices-face\");\nconst { CognitiveServicesCredentials } = require(\"@azure/ms-rest-azure-js\");\n\nasync function main() {\n  const faceKey = process.env[\"faceKey\"] || \"<faceKey>\";\n  const faceEndPoint = process.env[\"faceEndPoint\"] || \"<faceEndPoint>\";\n  const cognitiveServiceCredentials = new CognitiveServicesCredentials(faceKey);\n  const client = new FaceClient(cognitiveServiceCredentials, faceEndPoint);\n  const url =\n    \"https://pbs.twimg.com/profile_images/3354326900/3a5168f2b45c07d0965098be1a4e3007.jpeg\";\n  const options = {\n    returnFaceLandmarks: true\n  };\n  client.face\n    .detectWithUrl(url, options)\n    .then(result => {\n      console.log(\"The result is: \");\n      console.log(result);\n    })\n    .catch(err => {\n      console.log(\"An error occurred:\");\n      console.error(err);\n    });\n}\n\nmain();\n```\n\n#### browser - Authentication, client creation and list personGroupPerson as an example written in JavaScript.\n\n##### Sample code\n\n- index.html\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>@azure/cognitiveservices-face sample</title>\n    <script src=\"node_modules/@azure/ms-rest-js/dist/msRest.browser.js\"></script>\n    <script src=\"node_modules/@azure/cognitiveservices-face/dist/cognitiveservices-face.js\"></script>\n    <script type=\"text/javascript\">\n      const faceKey = \"<YOUR_FACE_KEY>\";\n      const faceEndPoint = \"<YOUR_FACE_ENDPOINT>\";\n      const cognitiveServiceCredentials = new msRest.ApiKeyCredentials({\n        inHeader: {\n          \"Ocp-Apim-Subscription-Key\": faceKey\n        }\n      });\n      const client = new Azure.CognitiveservicesFace.FaceClient(\n        cognitiveServiceCredentials,\n        faceEndPoint\n      );\n\n      const url =\n        \"https://pbs.twimg.com/profile_images/3354326900/3a5168f2b45c07d0965098be1a4e3007.jpeg\";\n      const options = {\n        returnFaceLandmarks: true\n      };\n      client.face\n        .detectWithUrl(url, options)\n        .then(result => {\n          console.log(\"The result is: \");\n          console.log(result);\n        })\n        .catch(err => {\n          console.log(\"An error occurred:\");\n          console.error(err);\n        });\n    </script>\n  </head>\n  <body></body>\n</html>\n```\n\n## Related projects\n\n- [Microsoft Azure SDK for Javascript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fcognitiveservices%2Fcognitiveservices-face%2FREADME.png)\n",
        "repo_name": "cognitiveservices/cognitiveservices-face",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/cognitiveservices/cognitiveservices-face",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "## An isomorphic javascript sdk for - FormRecognizerClient\n\nThis package contains an isomorphic SDK for FormRecognizerClient.\n\n> Please note, this package is deprecated and not functional as it uses a version of the Form Recognizer service (`v1.0-preview`) that is no longer available. As of August 2020, you can instead use [@azure/ai-form-recognizer](https://www.npmjs.com/package/@azure/ai-form-recognizer).\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge, and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### How to Install\n\n```bash\nnpm install @azure/cognitiveservices-formrecognizer\n```\n\n### How to use\n\n#### nodejs - Authentication, client creation and getExtractedKeys as an example written in TypeScript.\n\n##### Install @azure/ms-rest-azure-js\n\n\n```bash\nnpm install @azure/ms-rest-azure-js\n```\n\n##### Sample code\nThe following sample reads the scanned copy of a sample receipt. To know more, refer to the [Azure Documentation on Form Recognizer](https://docs.microsoft.com/azure/cognitive-services/form-recognizer/overview)\n\n```javascript\nconst { FormRecognizerClient } = require(\"@azure/cognitiveservices-formrecognizer\");\nconst { CognitiveServicesCredentials } = require(\"@azure/ms-rest-azure-js\");\n\nasync function main() {\n  const formRecognizerKey = process.env[\"formRecognizerKey\"] || \"<formRecognizerKey>\";\n  const endPoint = process.env[\"endPoint\"] || \"<endPoint>\";\n  const cognitiveServiceCredentials = new CognitiveServicesCredentials(formRecognizerKey);\n  const client = new FormRecognizerClient(cognitiveServiceCredentials, endPoint);\n\n  client\n    .batchReadReceipt(\n      \"https://raw.githubusercontent.com/Azure-Samples/cognitive-services-REST-api-samples/master/curl/form-recognizer/contoso-receipt.png\"\n    )\n    .then((result) => {\n      console.log(result);\n    })\n    .catch((err) => {\n      console.log(\"An error occurred:\");\n      console.error(err);\n    });\n}\n\nmain();\n```\n\n#### browser - Authentication, client creation and getExtractedKeys as an example written in JavaScript.\n\n##### Sample code\n\n- index.html\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>@azure/cognitiveservices-formrecognizer sample</title>\n    <script src=\"node_modules/@azure/ms-rest-js/dist/msRest.browser.js\"></script>\n    <script src=\"node_modules/@azure/cognitiveservices-formrecognizer/dist/cognitiveservices-formrecognizer.js\"></script>\n    <script type=\"text/javascript\">\n      const formRecognizerKey = \"<YOUR_FORM_RECOGNIZER_KEY>\";\n      const endPoint = \"<YOUR_FORM_RECOGNIZER_ENDPOINT>\";\n      const cognitiveServiceCredentials = new msRest.ApiKeyCredentials({\n        inHeader: {\n          \"Ocp-Apim-Subscription-Key\": formRecognizerKey\n        }\n      });\n      const client = new Azure.CognitiveservicesFormrecognizer.FormRecognizerClient(\n        cognitiveServiceCredentials,\n        endPoint\n      );\n      client\n        .batchReadReceipt(\n          \"https://raw.githubusercontent.com/Azure-Samples/cognitive-services-REST-api-samples/master/curl/form-recognizer/contoso-receipt.png\"\n        )\n        .then((result) => {\n          console.log(result);\n        })\n        .catch((err) => {\n          console.log(\"An error occurred:\");\n          console.error(err);\n        });\n    </script>\n  </head>\n  <body></body>\n</html>\n```\n\n## Related projects\n\n- [Microsoft Azure SDK for Javascript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fcognitiveservices%2Fcognitiveservices-formrecognizer%2FREADME.png)\n",
        "repo_name": "cognitiveservices/cognitiveservices-formrecognizer",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/cognitiveservices/cognitiveservices-formrecognizer",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "## An isomorphic javascript sdk for - ImageSearchClient\n\nThis package contains an isomorphic SDK for ImageSearchClient.\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge, and Firefox.\n\n### How to Install\n\n```bash\nnpm install @azure/cognitiveservices-imagesearch\n```\n\n### How to use\n\n#### nodejs - Authentication, client creation and search images as an example written in TypeScript.\n\n##### Install @azure/ms-rest-azure-js\n\n```bash\nnpm install @azure/ms-rest-azure-js\n```\n\n##### Sample code\nThe following sample performs an image search for 'Microsoft Azure' with conditions such as the color has to be 'Monochrome', etc. To know more, refer to the [Azure Documentation on Bing Image Search](https://docs.microsoft.com/azure/cognitive-services/bing-image-search/)\n\n```javascript\nconst { ImageSearchClient } = require(\"@azure/cognitiveservices-imagesearch\");\nconst { CognitiveServicesCredentials } = require(\"@azure/ms-rest-azure-js\");\n\nasync function main() {\n  const imageSearchKey = process.env[\"imageSearchKey\"] || \"<imageSearchKey>\";\n  const imageSearchEndPoint =\n    process.env[\"imageSearchEndPoint\"] || \"<imageSearchEndPoint>\";\n  const cognitiveServiceCredentials = new CognitiveServicesCredentials(\n    imageSearchKey\n  );\n  const client = new ImageSearchClient(cognitiveServiceCredentials, {\n    endpoint: imageSearchEndPoint\n  });\n\n  const query = \"Microsoft Azure\";\n  const options = {\n    color: \"Monochrome\",\n    count: 10,\n    imageType: \"Photo\",\n    safeSearch: \"Strict\"\n  };\n  client.images\n    .search(query, options)\n    .then(result => {\n      console.log(\"The result is: \");\n      console.log(result);\n    })\n    .catch(err => {\n      console.log(\"An error occurred:\");\n      console.error(err);\n    });\n}\n\nmain();\n```\n\n#### browser - Authentication, client creation and search images as an example written in JavaScript.\n\n##### Sample code\n\n- index.html\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>@azure/cognitiveservices-imagesearch sample</title>\n    <script src=\"node_modules/@azure/ms-rest-js/dist/msRest.browser.js\"></script>\n    <script src=\"node_modules/@azure/cognitiveservices-imagesearch/dist/cognitiveservices-imagesearch.js\"></script>\n    <script type=\"text/javascript\">\n      const imageSearchKey = \"<YOUR_IMAGE_SEARCH_KEY>\";\n      const imageSearchEndPoint = \"<YOUR_IMAGE_SEARCH_ENDPOINT>\";\n      const cognitiveServiceCredentials = new msRest.ApiKeyCredentials({\n        inHeader: {\n          \"Ocp-Apim-Subscription-Key\": imageSearchKey\n        }\n      });\n      const client = new Azure.CognitiveservicesImagesearch.ImageSearchClient(\n        cognitiveServiceCredentials,\n        {\n          endpoint: imageSearchEndPoint\n        }\n      );\n\n      const query = \"Microsoft Azure\";\n      const options = {\n        color: \"Monochrome\",\n        count: 10,\n        imageType: \"Photo\",\n        safeSearch: \"Strict\"\n      };\n      client.images\n        .search(query, options)\n        .then(result => {\n          console.log(\"The result is: \");\n          console.log(result);\n        })\n        .catch(err => {\n          console.log(\"An error occurred:\");\n          console.error(err);\n        });\n    </script>\n  </head>\n  <body></body>\n</html>\n\n```\n\n## Related projects\n\n- [Microsoft Azure SDK for Javascript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fcognitiveservices%2Fcognitiveservices-imagesearch%2FREADME.png)\n",
        "repo_name": "cognitiveservices/cognitiveservices-imagesearch",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/cognitiveservices/cognitiveservices-imagesearch",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "## An isomorphic javascript sdk for - LocalSearchClient\n\nThis package contains an isomorphic SDK for LocalSearchClient.\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge, and Firefox.\n\n### How to Install\n\n```bash\nnpm install @azure/cognitiveservices-localsearch\n```\n\n### How to use\n\n#### nodejs - Authentication, client creation and search local as an example written in TypeScript.\n\n##### Install @azure/ms-rest-azure-js\n\n```bash\nnpm install @azure/ms-rest-azure-js\n```\n\n##### Sample code\nThe following sample performs an local business search with the query 'Coffee 98052'. To know more, refer to the [Azure Documentation on Bing Local Search](https://docs.microsoft.com/azure/cognitive-services/bing-local-business-search/)\n\n```javascript\nconst { LocalSearchClient } = require(\"@azure/cognitiveservices-localsearch\");\nconst { CognitiveServicesCredentials } = require(\"@azure/ms-rest-azure-js\");\n\nasync function main() {\n  const localSearchKey = process.env[\"localSearchKey\"] || \"<localSearchKey>\";\n  const cognitiveServiceCredentials = new CognitiveServicesCredentials(\n    localSearchKey\n  );\n  const client = new LocalSearchClient(cognitiveServiceCredentials, {\n    baseUri: \"https://api.cognitive.microsoft.com/\"\n  });\n\n  client.local\n    .search(\"Coffee 98052\")\n    .then(result => {\n      console.log(\"The result is: \");\n      result.places.value.forEach(place => {\n        console.log(place);\n      });\n    })\n    .catch(err => {\n      console.log(\"An error occurred:\");\n      console.error(err);\n    });\n}\n\nmain();\n\n```\n\n#### browser - Authentication, client creation and search local as an example written in JavaScript.\n\n##### Sample code\n\n- index.html\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>@azure/cognitiveservices-localsearch sample</title>\n    <script src=\"node_modules/@azure/ms-rest-js/dist/msRest.browser.js\"></script>\n    <script src=\"node_modules/@azure/cognitiveservices-localsearch/dist/cognitiveservices-localsearch.js\"></script>\n    <script type=\"text/javascript\">\n      const localsearchKey = \"<YOUR_LOCAL_SEARCH_KEY>\";\n      const cognitiveServiceCredentials = new msRest.ApiKeyCredentials({\n        inHeader: {\n          \"Ocp-Apim-Subscription-Key\": localsearchKey\n        }\n      });\n      const client = new Azure.CognitiveservicesLocalsearch.LocalSearchClient(\n        cognitiveServiceCredentials,\n        {\n          baseUri: \"https://api.cognitive.microsoft.com/\"\n        }\n      );\n\n      client.local\n        .search(\"Coffee 98052\")\n        .then(result => {\n          console.log(\"The result is: \");\n          result.places.value.forEach(place => {\n            console.log(place);\n          });\n        })\n        .catch(err => {\n          console.log(\"An error occurred:\");\n          console.error(err);\n        });\n    </script>\n  </head>\n  <body></body>\n</html>\n\n```\n\n## Related projects\n\n- [Microsoft Azure SDK for Javascript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fcognitiveservices%2Fcognitiveservices-localsearch%2FREADME.png)\n",
        "repo_name": "cognitiveservices/cognitiveservices-localsearch",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/cognitiveservices/cognitiveservices-localsearch",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "## An isomorphic javascript sdk for - LUISAuthoringClient\n\nThis package contains an isomorphic SDK for LUISAuthoringClient.\n\nPackage version | LUIS Authoring API version\n--------------- | --------------------------\n3.0.0           |  /luis/api/v2.0\n4.0.0-preview.3 |  /luis/authoring/v3.0-preview\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge, and Firefox.\n\n### How to Install\n\n```bash\nnpm install @azure/cognitiveservices-luis-authoring\n```\n\n### How to use\n\n#### nodejs - Authentication, client creation and listPhraseLists features as an example written in TypeScript.\n\n##### Install @azure/ms-rest-azure-js\n\n```bash\nnpm install @azure/ms-rest-azure-js\n```\n\n##### Sample code\n\n```javascript\nconst { CognitiveServicesCredentials } = require(\"@azure/ms-rest-azure-js\");\nconst { LUISAuthoringClient } = require(\"@azure/cognitiveservices-luis-authoring\");\n\nlet authoringKey = process.env[\"luis-authoring-key\"];\nconst creds = new CognitiveServicesCredentials(authoringKey);\n\n// check the following link to find your region\n// https://docs.microsoft.com/azure/cognitive-services/luis/luis-reference-regions\nconst region = \"<your-region>\";\nconst client = new LUISAuthoringClient(\n  creds,\n  \"https://\" + region + \".api.cognitive.microsoft.com/\"\n);\n\nconst appId = \"<your-app-id>\"; // replace this with your appId.\nconst versionId = \"0.1\"; // replace with version of your luis application. Initial value will be 0.1\n\nconst skip = 1;\nconst take = 1;\n\nclient.features\n  .listPhraseLists(appId, versionId, { skip, take })\n  .then((result) => {\n    console.log(\"The result is:\");\n    console.log(result);\n  })\n  .catch((err) => {\n    console.error(err);\n  });\n```\n\n#### browser - Authentication, client creation and listPhraseLists features as an example written in JavaScript.\n\n\n##### Sample code\n\n- index.html\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>@azure/cognitiveservices-luis-authoring sample</title>\n    <script src=\"node_modules/@azure/ms-rest-js/dist/msRest.browser.js\"></script>\n    <script src=\"node_modules/@azure/cognitiveservices-luis-authoring/dist/cognitiveservices-luis-authoring.js\"></script>\n    <script type=\"text/javascript\">\n      let authoringKey = process.env[\"luis-authoring-key\"];\n      const creds = new msRest.ApiKeyCredentials({ inHeader: { 'Ocp-Apim-Subscription-Key': authoringKey } });\n\n      const region = \"<your-region>\";\n      const client = new Azure.CognitiveservicesLuisAuthoring.LUISAuthoringClient(\n        creds,\n        \"https://\" + region + \".api.cognitive.microsoft.com/\"\n      );\n      const appId = \"<your-app-id>\"; // replace this with your appId.\n      const versionId = \"0.1\"; // replace with version of your luis application. Initial value will be 0.1\n      const skip = 1;\n      const take = 1;\n      client.features\n        .listPhraseLists(appId, versionId, { skip, take })\n        .then((result) => {\n          console.log(\"The result is:\");\n          console.log(result);\n        })\n        .catch((err) => {\n          console.log(\"An error occurred:\");\n          console.error(err);\n        });\n    </script>\n  </head>\n  <body></body>\n</html>\n```\n\n## Related projects\n\n- [Microsoft Azure SDK for Javascript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fcognitiveservices%2Fcognitiveservices-luis-authoring%2FREADME.png)\n",
        "repo_name": "cognitiveservices/cognitiveservices-luis-authoring",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/cognitiveservices/cognitiveservices-luis-authoring",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "## An isomorphic javascript sdk for - LUISRuntimeClient\n\nThis package contains an isomorphic SDK for LUISRuntimeClient.\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge, and Firefox.\n\n### How to Install\n\n```bash\nnpm install @azure/cognitiveservices-luis-runtime\n```\n\n### How to use\n\n#### nodejs - Authentication, client creation and getVersionPrediction prediction as an example written in TypeScript.\n\n##### Install @azure/ms-rest-azure-js\n\n```bash\nnpm install @azure/ms-rest-azure-js\n```\n\n##### Sample code\n\n```javascript\nconst { CognitiveServicesCredentials } = require(\"@azure/ms-rest-azure-js\");\nconst { LUISRuntimeClient } = require(\"@azure/cognitiveservices-luis-runtime\");\n\nlet authoringKey = process.env[\"luis-authoring-key\"];\nconst creds = new CognitiveServicesCredentials(authoringKey);\n\n// check the following link to find your region\n// https://docs.microsoft.com/azure/cognitive-services/luis/luis-reference-regions\nconst region = \"<your-region>\";\nconst client = new LUISRuntimeClient(creds, \"https://\" + region + \".api.cognitive.microsoft.com/\");\n\nconst appId = \"<your-app-id>\"; // replace this with your appId.\nconst versionId = \"0.1\"; // replace with version of your luis application. Initial value will be 0.1\n\nconst predictionRequest = {\n  query: \"testquery\",\n  options: {\n    datetimeReference: new Date(),\n    preferExternalEntities: true\n  },\n  externalEntities: [\n    {\n      entityName: \"testentityName\",\n      startIndex: 1,\n      entityLength: 1,\n\t    score: 0.86,\n      resolution: {}\n    }\n  ],\n  dynamicLists: [\n    {\n      listEntityName: \"testlistEntityName\",\n      requestLists: [\n        {\n          name: \"testname\",\n          canonicalForm: \"testcanonicalForm\",\n          synonyms: [\"testsynonyms\"]\n        }\n      ]\n    }\n  ]\n};\nconst verbose = true;\nconst showAllIntents = true;\n\nclient.prediction\n  .getVersionPrediction(appId, versionId, predictionRequest, { verbose, showAllIntents })\n  .then((result) => {\n    console.log(\"The result is:\");\n    console.log(result);\n  })\n  .catch((err) => {\n    console.error(err);\n  });\n```\n\n#### browser - Authentication, client creation and getVersionPrediction prediction as an example written in JavaScript.\n\n\n\n##### Sample code\n\n- index.html\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>@azure/cognitiveservices-luis-runtime sample</title>\n    <script src=\"node_modules/@azure/ms-rest-js/dist/msRest.browser.js\"></script>\n    <script src=\"node_modules/@azure/cognitiveservices-luis-runtime/dist/cognitiveservices-luis-runtime.js\"></script>\n    <script type=\"text/javascript\">\n      let authoringKey = process.env[\"luis-authoring-key\"];\n      const creds = new msRest.ApiKeyCredentials({ inHeader: { 'Ocp-Apim-Subscription-Key': authoringKey } });\n\n\n      // check the following link to find your region\n      // https://docs.microsoft.com/azure/cognitive-services/luis/luis-reference-regions\n      const region = \"<your-region>\";\n      const client = new Azure.CognitiveservicesLuisRuntime.LUISRuntimeClient(\n        creds,\n        \"https://\" + region + \".api.cognitive.microsoft.com/\"\n      );\n\n      const appId = \"<your-app-id>\"; // replace this with your appId.\n      const versionId = \"0.1\"; // replace with version of your luis application. Initial value will be 0.1\n\n      const predictionRequest = {\n        query: \"testquery\",\n        options: {\n          datetimeReference: new Date(),\n          preferExternalEntities: true\n        },\n        externalEntities: [\n          {\n            entityName: \"testentityName\",\n            startIndex: 1,\n            entityLength: 1,\n\t\t\t      score: 0.9,\n            resolution: {}\n          }\n        ],\n        dynamicLists: [\n          {\n            listEntityName: \"testlistEntityName\",\n            requestLists: [\n              {\n                name: \"testname\",\n                canonicalForm: \"testcanonicalForm\",\n                synonyms: [\"testsynonyms\"]\n              }\n            ]\n          }\n        ]\n      };\n      const verbose = true;\n      const showAllIntents = true;\n\n      client.prediction\n        .getVersionPrediction(appId, versionId, predictionRequest, { verbose, showAllIntents })\n        .then((result) => {\n          console.log(\"The result is:\");\n          console.log(result);\n        })\n        .catch((err) => {\n          console.error(err);\n        });\n    </script>\n  </head>\n  <body></body>\n</html>\n```\n\n## Related projects\n\n- [Microsoft Azure SDK for Javascript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fcognitiveservices%2Fcognitiveservices-luis-runtime%2FREADME.png)\n",
        "repo_name": "cognitiveservices/cognitiveservices-luis-runtime",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/cognitiveservices/cognitiveservices-luis-runtime",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "## An isomorphic javascript sdk for - NewsSearchClient\n\nThis package contains an isomorphic SDK for NewsSearchClient.\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge, and Firefox.\n\n### How to Install\n\n```bash\nnpm install @azure/cognitiveservices-newssearch\n```\n\n### How to use\n\n#### nodejs - Authentication, client creation and search news as an example written in TypeScript.\n\n##### Install @azure/ms-rest-azure-js\n\n```bash\nnpm install @azure/ms-rest-azure-js\n```\n\n##### Sample code\nThe following sample performs a news search on 'Microsoft Azure' with conditions such as the freshness must be within a Month, etc. To know more, refer to the [Azure Documentation on Bing News Search](https://docs.microsoft.com/azure/cognitive-services/bing-news-search/)\n\n```javascript\nconst { NewsSearchClient } = require(\"@azure/cognitiveservices-newssearch\");\nconst { CognitiveServicesCredentials } = require(\"@azure/ms-rest-azure-js\");\n\nasync function main() {\n  const newsSearchKey = process.env[\"newsSearchKey\"] || \"<newsSearchKey>\";\n  const cognitiveServiceCredentials = new CognitiveServicesCredentials(\n    newsSearchKey\n  );\n  const client = new NewsSearchClient(cognitiveServiceCredentials);\n  const query = \"Microsoft Azure\";\n  const options = {\n    count: 10,\n    freshness: \"Month\",\n    safeSearch: \"Strict\"\n  };\n  client.news\n    .search(query, options)\n    .then(result => {\n      console.log(\"The result is:\");\n      console.log(result);\n    })\n    .catch(err => {\n      console.log(\"An error occurred:\");\n      console.error(err);\n    });\n}\n\nmain();\n```\n\n#### browser - Authentication, client creation and search news as an example written in JavaScript.\n\n##### Sample code\n\n- index.html\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>@azure/cognitiveservices-newssearch sample</title>\n    <script src=\"node_modules/@azure/ms-rest-js/dist/msRest.browser.js\"></script>\n    <script src=\"node_modules/@azure/cognitiveservices-newssearch/dist/cognitiveservices-newssearch.js\"></script>\n    <script type=\"text/javascript\">\n      const newsSearchKey = \"<YOUR_NEWS_SEARCH_KEY>\";\n      const cognitiveServiceCredentials = new msRest.ApiKeyCredentials({\n        inHeader: {\n          \"Ocp-Apim-Subscription-Key\": newsSearchKey\n        }\n      });\n      const client = new Azure.CognitiveservicesNewssearch.NewsSearchClient(\n        cognitiveServiceCredentials\n      );\n\n      const query = \"Microsoft Azure\";\n      const options = {\n        count: 10,\n        freshness: \"Month\",\n        safeSearch: \"Strict\"\n      };\n      client.news\n        .search(query, options)\n        .then(result => {\n          console.log(\"The result is:\");\n          console.log(result);\n        })\n        .catch(err => {\n          console.log(\"An error occurred:\");\n          console.error(err);\n        });\n    </script>\n  </head>\n  <body></body>\n</html>\n```\n\n## Related projects\n\n- [Microsoft Azure SDK for Javascript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fcognitiveservices%2Fcognitiveservices-newssearch%2FREADME.png)\n",
        "repo_name": "cognitiveservices/cognitiveservices-newssearch",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/cognitiveservices/cognitiveservices-newssearch",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "## An isomorphic javascript sdk for - PersonalizerClient\n\nThis package contains an isomorphic SDK for PersonalizerClient.\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge, and Firefox.\n\n### How to Install\n\n```bash\nnpm install @azure/cognitiveservices-personalizer\n```\n\n### How to use\n\n#### nodejs - Authentication, client creation and reward events as an example written in TypeScript.\n\n##### Install @azure/ms-rest-azure-js\n\n```bash\nnpm install @azure/ms-rest-azure-js\n```\n\n##### Sample code\nThe following sample ranks a personalized request object. To know more, refer to the [Azure Documentation on Personalizer](https://docs.microsoft.com/azure/cognitive-services/personalizer/)\n\n```javascript\nconst { PersonalizerClient } = require(\"@azure/cognitiveservices-personalizer\");\nconst { CognitiveServicesCredentials } = require(\"@azure/ms-rest-azure-js\");\n\nasync function main() {\n  const personalizerKey = process.env[\"personalizerKey\"] || \"<personalizerKey>\";\n  const personalizerEndPoint =\n    process.env[\"personalizerEndPoint\"] || \"<personalizerEndPoint>\";\n  const cognitiveServiceCredentials = new CognitiveServicesCredentials(\n    personalizerKey\n  );\n\n  const client = new PersonalizerClient(\n    cognitiveServiceCredentials,\n    personalizerEndPoint\n  );\n\n  const rankRequest = {\n    contextFeatures: [\n      {\n        timeOfDay: \"Morning\"\n      }\n    ],\n    actions: [\n      {\n        id: \"NewsArticle\",\n        features: [\n          {\n            type: \"News\"\n          }\n        ]\n      },\n      {\n        id: \"SportsArticle\",\n        features: [\n          {\n            type: \"Sports\"\n          }\n        ]\n      },\n      {\n        id: \"EntertainmentArticle\",\n        features: [\n          {\n            type: \"Entertainment\"\n          }\n        ]\n      }\n    ],\n    excludedActions: [\"SportsArticle\"],\n    eventId: \"75269AD0-BFEE-4598-8196-C57383D38E10\",\n    deferActivation: false\n  };\n\n  client\n    .rank(rankRequest)\n    .then(result => {\n      console.log(\"The result is: \");\n      console.log(result);\n    })\n    .catch(err => {\n      console.log(\"An error occurred:\");\n      console.error(err);\n    });\n}\n\nmain();\n```\n\n#### browser - Authentication, client creation and reward events as an example written in JavaScript.\n\n##### Sample code\n\n- index.html\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>@azure/cognitiveservices-personalizer sample</title>\n    <script src=\"node_modules/@azure/ms-rest-js/dist/msRest.browser.js\"></script>\n    <script src=\"node_modules/@azure/cognitiveservices-personalizer/dist/cognitiveservices-personalizer.js\"></script>\n    <script type=\"text/javascript\">\n      const personalizerKey = \"<YOUR_PERSONALIZER_KEY>\";\n      const personalizerEndPoint = \"<YOUR_PERSONALIZER_ENDPOINT>\";\n      const cognitiveServiceCredentials = new msRest.ApiKeyCredentials({\n        inHeader: {\n          \"Ocp-Apim-Subscription-Key\": personalizerKey\n        }\n      });\n      const client = new Azure.CognitiveservicesPersonalizer.PersonalizerClient(\n        cognitiveServiceCredentials,\n        personalizerEndPoint\n      );\n\n      const rankRequest = {\n        contextFeatures: [\n          {\n            timeOfDay: \"Morning\"\n          }\n        ],\n        actions: [\n          {\n            id: \"NewsArticle\",\n            features: [\n              {\n                type: \"News\"\n              }\n            ]\n          },\n          {\n            id: \"SportsArticle\",\n            features: [\n              {\n                type: \"Sports\"\n              }\n            ]\n          },\n          {\n            id: \"EntertainmentArticle\",\n            features: [\n              {\n                type: \"Entertainment\"\n              }\n            ]\n          }\n        ],\n        excludedActions: [\"SportsArticle\"],\n        eventId: \"75269AD0-BFEE-4598-8196-C57383D38E10\",\n        deferActivation: false\n      };\n\n      client\n        .rank(rankRequest)\n        .then(result => {\n          console.log(\"The result is: \");\n          console.log(result);\n        })\n        .catch(err => {\n          console.log(\"An error occurred:\");\n          console.error(err);\n        });\n    </script>\n  </head>\n  <body></body>\n</html>\n```\n\n## Related projects\n\n- [Microsoft Azure SDK for Javascript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fcognitiveservices%2Fcognitiveservices-personalizer%2FREADME.png)\n",
        "repo_name": "cognitiveservices/cognitiveservices-personalizer",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/cognitiveservices/cognitiveservices-personalizer",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "## An isomorphic javascript sdk for - QnAMakerRuntimeClient\n\nThis package contains an isomorphic SDK for interacting with the QnA Maker service such as training and asking questions.\nFor editing and creating Knowledge Bases see @azure/cognitiveservices-qnamaker.\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge, and Firefox.\n\n### How to Install\n\n```bash\nnpm install @azure/cognitiveservices-qnamaker-runtime\n```\n\n### How to use\n\n#### nodejs - Authentication, client creation and generateAnswer runtime as an example written in TypeScript.\n\n##### Install @azure/ms-rest-azure-js\n\n```bash\nnpm install @azure/ms-rest-azure-js\n```\n\n##### Sample code\n\n```javascript\nconst { QnAMakerRuntimeClient } = require(\"@azure/cognitiveservices-qnamaker-runtime\");\nconst { CognitiveServicesCredentials } = require(\"@azure/ms-rest-azure-js\");\n\nasync function main() {\n  const QNAMAKER_KEY = process.env[\"QNAMAKER_KEY\"] || \"<QNAMAKER_KEY>\";\n  const QNAMAKER_ENDPOINT = process.env[\"QNAMAKER_ENDPOINT\"] || \"<QNAMAKER_ENDPOINT>\";\n  const kbid = process.env[\"QNAMAKER_KNOWLEDGE_BASE_ID\"] || \"<QNAMAKER_KNOWLEDGE_BASE_ID>\";\n\n  const cognitiveServicesCredentials = new CognitiveServicesCredentials(QNAMAKER_KEY);\n  const client = new QnAMakerRuntimeClient(cognitiveServicesCredentials, QNAMAKER_ENDPOINT);\n  const customHeaders = { Authorization: `EndpointKey ${QNAMAKER_KEY}` };\n\n  // A question you'd like to get a response for, from the knowledge base. For example\n  const question = \"How are you?\";\n\n  // Maximum number of answer to retreive\n  const top = 1;\n\n  // Find only answers that contain these metadata\n  const strictFilters = [{ name: \"editorial\", value: \"chitchat\" }];\n\n  const result = await client.runtime.generateAnswer(\n    kbid,\n    { question, top, strictFilters },\n    { customHeaders }\n  );\n  console.log(JSON.stringify(result));\n  // Sample Result\n  // {\n  //   answers: [\n  //     {\n  //       questions: [\n  //         \"How are you?\",\n  //         \"How is your tuesday?\"\n  //       ],\n  //       answer:\n  //         \"\"I'm doing great, thanks for asking!\",\n  //       score: 100,\n  //       id: 90,\n  //       source:\n  //         \"qna_chitchat_Friendly.tsv\",\n  //       metadata: [{ name: \"editorial\", value: \"chitchat\" }],\n  //       context: { isContextOnly: false, prompts: [] }\n  //     }\n  //   ],\n  //   debugInfo: null,\n  //   activeLearningEnabled: false\n  // }\n}\n\nmain();\n```\n\n#### browser - Authentication, client creation and generateAnswer runtime  as an example written in JavaScript.\n\n##### Sample code\n\n- index.html\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>@azure/cognitiveservices-qnamaker-runtime sample</title>\n    <script src=\"node_modules/@azure/ms-rest-js/dist/msRest.browser.js\"></script>\n    <script src=\"node_modules/@azure/cognitiveservices-qnamaker-runtime/dist/cognitiveservices-qnamaker-runtime.js\"></script>\n    <script type=\"text/javascript\">\n      const QNAMAKER_KEY = \"<QNAMAKER_KEY>\";\n      const QNAMAKER_ENDPOINT = \"<QNAMAKER_ENDPOINT>\";\n      const kbid = \"<QNAMAKER_KNOWLEDGE_BASE_ID>\";\n\n      const cognitiveServiceCredentials = new msRest.ApiKeyCredentials({\n        inHeader: {\n          \"Ocp-Apim-Subscription-Key\": QNAMAKER_KEY\n        }\n      });\n\n      const client = new Azure.CognitiveservicesQnamakerRuntime.QnAMakerRuntimeClient(\n        cognitiveServiceCredentials,\n        QNAMAKER_ENDPOINT\n      );\n      const customHeaders = { Authorization: `EndpointKey ${QNAMAKER_KEY}` };\n\n      // A question you'd like to get a response for, from the knowledge base. For example\n      const question = \"How are you?\";\n\n      // Maximum number of answer to retreive\n      const topValue = 1;\n\n      // Find only answers that contain these metadata\n      const strictFilters = [{\n        name: \"editorial\",\n        value: \"chitchat\"\n      }];\n\n      client.runtime\n        .generateAnswer(kbid, {question, topValue, strictFilters}, {customHeaders})\n        .then(result => {\n          console.log(JSON.stringify(result));\n          // Sample Result\n          // {\n          //   answers: [\n          //     {\n          //       questions: [\n          //         \"How are you?\",\n          //         \"How is your tuesday?\"\n          //       ],\n          //       answer:\n          //         \"\"I'm doing great, thanks for asking!\",\n          //       score: 100,\n          //       id: 90,\n          //       source:\n          //         \"qna_chitchat_Friendly.tsv\",\n          //       metadata: [{ name: \"editorial\", value: \"chitchat\" }],\n          //       context: { isContextOnly: false, prompts: [] }\n          //     }\n          //   ],\n          //   debugInfo: null,\n          //   activeLearningEnabled: false\n          // }\n        })\n        .catch(err => {\n          console.log(\"An error occurred:\");\n          console.error(err);\n        });\n    </script>\n  </head>\n  <body></body>\n</html>\n```\n\n## Related projects\n\n- [Microsoft Azure SDK for Javascript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js/sdk/README.png)\n",
        "repo_name": "cognitiveservices/cognitiveservices-qnamaker-runtime",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/cognitiveservices/cognitiveservices-qnamaker-runtime",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "## An isomorphic javascript sdk for - QnAMakerClient\n\nThis package contains an isomorphic SDK for editing and creating Knowledge Bases, its endpoints and keys.\nFor interacting with QnAMaker such as training and asking questions please see @azure/cognitiveservices-qnamaker-runtime.\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge, and Firefox.\n\n### How to Install\n\n```bash\nnpm install @azure/cognitiveservices-qnamaker\n```\n\n### How to use\n\n#### nodejs - Authentication, client creation and getSettings endpointSettings as an example written in TypeScript.\n\n##### Install @azure/ms-rest-azure-js\n\n```bash\nnpm install @azure/ms-rest-azure-js\n```\n\n##### Sample code\n\n```javascript\nconst { CognitiveServicesCredentials } = require(\"@azure/ms-rest-azure-js\");  \nconst { QnAMakerClient } = require(\"@azure/cognitiveservices-qnamaker\");\n\nasync function main() {\n  const QNAMAKER_KEY = process.env[\"QNAMAKER_KEY\"] || \"<QNAMAKER_KEY>\";\n  const QNAMAKER_ENDPOINT = process.env[\"QNAMAKER_ENDPOINT\"] || \"<QNAMAKER_ENDPOINT>\";\n\n  const cognitiveServicesCredentials = new CognitiveServicesCredentials(QNAMAKER_KEY);\n  const client = new QnAMakerClient(cognitiveServicesCredentials, QNAMAKER_ENDPOINT);\n\n  const settings = await client.endpointSettings.getSettings();\n\n  console.log(`The result is: ${JSON.stringify(settings)}`);\n}\n\nmain();\n```\n\n#### browser - Authentication, client creation and getSettings endpointSettings as an example written in JavaScript.\n\n##### Install @azure/ms-rest-browserauth\n\n```bash\nnpm install @azure/ms-rest-browserauth\n```\n\n##### Sample code\n\nSee https://github.com/Azure/ms-rest-browserauth to learn how to authenticate to Azure in the browser.\n\n- index.html\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>@azure/cognitiveservices-qnamaker sample</title>\n    <script src=\"node_modules/@azure/ms-rest-js/dist/msRest.browser.js\"></script>\n    <script src=\"node_modules/@azure/cognitiveservices-qnamaker/dist/cognitiveservices-qnamaker.js\"></script>\n    <script type=\"text/javascript\">\n      async function main() {\n        const QNAMAKER_KEY = \"<QNAMAKER_KEY>\";\n        const QNAMAKER_ENDPOINT = \"<QNAMAKER_ENDPOINT>\";\n        const cognitiveServiceCredentials = new msRest.ApiKeyCredentials({\n          inHeader: {\n            \"Ocp-Apim-Subscription-Key\": QNAMAKER_KEY\n          }\n        });\n\n        const client = new Azure.CognitiveservicesQnamaker.QnAMakerClient(\n          cognitiveServiceCredentials,\n          QNAMAKER_ENDPOINT\n        );\n\n        const settings = client.endpointSettings.getSettings();\n        console.log(`The result is: ${settings}`);\n      }\n\n      main();\n    </script>\n  </head>\n  <body></body>\n</html>\n```\n\n## Related projects\n\n- [Microsoft Azure SDK for Javascript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js/sdk/README.png)\n",
        "repo_name": "cognitiveservices/cognitiveservices-qnamaker",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/cognitiveservices/cognitiveservices-qnamaker",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "## An isomorphic javascript sdk for - SpellCheckClient\n\nThis package contains an isomorphic SDK for SpellCheckClient.\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge, and Firefox.\n\n### How to Install\n\n```bash\nnpm install @azure/cognitiveservices-spellcheck\n```\n\n### How to use\n\n#### nodejs - Authentication, client creation and spellChecker  as an example written in TypeScript.\n\n##### Install @azure/ms-rest-azure-js\n\n```bash\nnpm install @azure/ms-rest-azure-js\n```\n\n##### Sample code\nThe following sample performs a spell check on the text - 'Bill Gatos'. The result will return a suggestion of 'Gates'. To know more, refer to the [Azure Documentation on Spell Check](https://docs.microsoft.com/azure/cognitive-services/bing-spell-check/)\n\n```javascript\nconst { SpellCheckClient } = require(\"@azure/cognitiveservices-spellcheck\");\nconst { CognitiveServicesCredentials } = require(\"@azure/ms-rest-azure-js\");\n\nasync function main() {\n  const spellCheckKey = process.env[\"spellCheckKey\"] || \"<spellCheckKey>\";\n  const spellCheckEndPoint =\n    process.env[\"spellCheckEndPoint\"] || \"<spellCheckEndPoint>\";\n  const cognitiveServiceCredentials = new CognitiveServicesCredentials(\n    spellCheckKey\n  );\n  const client = new SpellCheckClient(cognitiveServiceCredentials, {\n    endpoint: spellCheckEndPoint\n  });\n\n  const options = {\n    mode: \"proof\",\n    pragma: \"no-cache\"\n  };\n\n  client\n    .spellChecker(\"Bill Gatos\", options)\n    .then(result => {\n      console.log(\"The result is: \");\n      result.flaggedTokens.forEach(flaggedToken => {\n        flaggedToken.suggestions.forEach(suggestion => {\n          console.log(suggestion);\n        });\n      });\n    })\n    .catch(err => {\n      console.log(\"An error occurred:\");\n      console.error(err);\n    });\n}\n\nmain();\n```\n\n#### browser - Authentication, client creation and spellChecker  as an example written in JavaScript.\n\n##### Sample code\n\n- index.html\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>@azure/cognitiveservices-spellcheck sample</title>\n    <script src=\"node_modules/@azure/ms-rest-js/dist/msRest.browser.js\"></script>\n    <script src=\"node_modules/@azure/cognitiveservices-spellcheck/dist/cognitiveservices-spellcheck.js\"></script>\n    <script type=\"text/javascript\">\n      const spellcheckKey = \"<YOUR_SPELL_CHECK_KEY>\";\n      const spellcheckEndPoint = \"<YOUR_SPELL_CHECK_ENDPOINT>\";\n      const cognitiveServiceCredentials = new msRest.ApiKeyCredentials({\n        inHeader: {\n          \"Ocp-Apim-Subscription-Key\": spellcheckKey\n        }\n      });\n      const client = new Azure.CognitiveservicesSpellcheck.SpellCheckClient(\n        cognitiveServiceCredentials,\n        {\n          endpoint: spellcheckEndPoint\n        }\n      );\n\n      const options = {\n        mode: \"proof\",\n        pragma: \"no-cache\"\n      };\n\n      client\n        .spellChecker(\"Bill Gatos\", options)\n        .then(result => {\n          console.log(\"The result is: \");\n          result.flaggedTokens.forEach(flaggedToken => {\n            flaggedToken.suggestions.forEach(suggestion => {\n              console.log(suggestion);\n            });\n          });\n        })\n        .catch(err => {\n          console.log(\"An error occurred:\");\n          console.error(err);\n        });\n    </script>\n  </head>\n  <body></body>\n</html>\n```\n\n## Related projects\n\n- [Microsoft Azure SDK for Javascript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fcognitiveservices%2Fcognitiveservices-spellcheck%2FREADME.png)\n",
        "repo_name": "cognitiveservices/cognitiveservices-spellcheck",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/cognitiveservices/cognitiveservices-spellcheck",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "## An isomorphic javascript sdk for - TextAnalyticsClient\n\nThis package contains an isomorphic SDK for TextAnalyticsClient.\n\n> Please note, a newer package [@azure/ai-text-analytics](https://www.npmjs.com/package/@azure/ai-text-analytics) is available as of June, 2020 that uses Text Analytics API v3.0 or above. While this package will continue to receive critical bug fixes, it uses Text Analytics API v2.1, and we strongly encourage you to upgrade.\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge, and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### How to Install\n\n```bash\nnpm install @azure/cognitiveservices-textanalytics\n```\n\n### How to use\n\n#### nodejs - Authentication, client creation and detectLanguage  as an example written in TypeScript.\n\n##### Install @azure/ms-rest-azure-js\n\n```bash\nnpm install @azure/ms-rest-azure-js\n```\n\n##### Sample code\nThe following sample detects the langauge in the provided text. In addition, it provides data such as Characters count, transaction count, etc. To know more, refer to the [Azure Documentation on Text Analytics](https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview)\n\n```javascript\nconst { TextAnalyticsClient } = require(\"@azure/cognitiveservices-textanalytics\");\nconst { CognitiveServicesCredentials } = require(\"@azure/ms-rest-azure-js\");\n\nasync function main() {\n  const textAnalyticsKey =\n    process.env[\"textAnalyticsKey\"] || \"<textAnalyticsKey>\";\n  const textAnalyticsEndPoint =\n    process.env[\"textAnalyticsEndPoint\"] || \"<textAnalyticsEndPoint>\";\n  const cognitiveServiceCredentials = new CognitiveServicesCredentials(\n    textAnalyticsKey\n  );\n  const client = new TextAnalyticsClient(\n    cognitiveServiceCredentials,\n    textAnalyticsEndPoint\n  );\n  const options = {\n    showStats: true,\n    languageBatchInput: {\n      documents: [\n        {\n          id: \"1\",\n          text: \"Sample Text\"\n        },\n        {\n          id: \"2\",\n          text: \"Texto de ejemplo\"\n        }\n      ]\n    }\n  };\n  client\n    .detectLanguage(options)\n    .then(result => {\n      console.log(\"The result is:\");\n      result.documents.forEach(document => {\n        console.log(`Id: ${document.id}`);\n        console.log(\"Detected Languages:\");\n        document.detectedLanguages.forEach(dl => {\n          console.log(dl.name);\n        });\n        console.log(\n          `Characters Count: ${document.statistics.charactersCount}`\n        );\n        console.log(\n          `Transactions Count: ${document.statistics.transactionsCount}`\n        );\n      });\n    })\n    .catch(err => {\n      console.log(\"An error occurred:\");\n      console.error(err);\n    });\n}\n\nmain();\n\n```\n\n#### browser - Authentication, client creation and detectLanguage  as an example written in JavaScript.\n\n##### Sample code\n\n- index.html\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>@azure/cognitiveservices-textanalytics sample</title>\n    <script src=\"node_modules/@azure/ms-rest-js/dist/msRest.browser.js\"></script>\n    <script src=\"node_modules/@azure/cognitiveservices-textanalytics/dist/cognitiveservices-textanalytics.js\"></script>\n    <script type=\"text/javascript\">\n      const textAnalyticsKey = \"<YOUR_TEXT_ANALYTICS_KEY>\";\n      const textAnalyticsEndPoint = \"<YOUR_TEXT_ANALYTICS_ENDPOINT>\";\n      const cognitiveServiceCredentials = new msRest.ApiKeyCredentials({\n        inHeader: {\n          \"Ocp-Apim-Subscription-Key\": textAnalyticsKey\n        }\n      });\n      const client = new Azure.CognitiveservicesTextanalytics.TextAnalyticsClient(\n        cognitiveServiceCredentials,\n        textAnalyticsEndPoint\n      );\n\n      const options = {\n        showStats: true,\n        languageBatchInput: {\n          documents: [\n            {\n              id: \"1\",\n              text: \"Sample Text\"\n            },\n            {\n              id: \"2\",\n              text: \"Texto de ejemplo\"\n            }\n          ]\n        }\n      };\n\n      client\n        .detectLanguage(options)\n        .then(result => {\n          console.log(\"The result is:\");\n          result.documents.forEach(document => {\n            console.log(`Id: ${document.id}`);\n            console.log(\"Detected Languages:\");\n            document.detectedLanguages.forEach(dl => {\n              console.log(dl.name);\n            });\n            console.log(\n              `Characters Count: ${document.statistics.charactersCount}`\n            );\n            console.log(\n              `Transactions Count: ${document.statistics.transactionsCount}`\n            );\n          });\n        })\n        .catch(err => {\n          console.log(\"An error occurred:\");\n          console.error(err);\n        });\n    </script>\n  </head>\n  <body></body>\n</html>\n```\n\n## Related projects\n\n- [Microsoft Azure SDK for Javascript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fcognitiveservices%2Fcognitiveservices-textanalytics%2FREADME.png)\n",
        "repo_name": "cognitiveservices/cognitiveservices-textanalytics",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/cognitiveservices/cognitiveservices-textanalytics",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "## An isomorphic javascript sdk for - TranslatorTextClient\n\nThis package contains an isomorphic SDK for TranslatorTextClient.\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge, and Firefox.\n\n### How to Install\n\n```bash\nnpm install @azure/cognitiveservices-translatortext\n```\n\n### How to use\n\n#### nodejs - Authentication, client creation and languages translator as an example written in TypeScript.\n\n##### Install @azure/ms-rest-azure-js\n\n```bash\nnpm install @azure/ms-rest-azure-js\n```\n\n##### Sample code\nThe following sample translates the given text which is in Chinese to English. To know more, refer to the [Azure Documentation on Translator](https://docs.microsoft.com/azure/cognitive-services/translator/)\n\n```javascript\nconst { TranslatorTextClient } = require(\"@azure/cognitiveservices-translatortext\");\nconst { CognitiveServicesCredentials } = require(\"@azure/ms-rest-azure-js\");\n\nasync function main() {\n  const translatorTextKey =\n    process.env[\"translatorTextKey\"] || \"<translatorTextKey>\";\n  const translatorTextEndPoint =\n    process.env[\"translatorTextEndPoint\"] || \"<translatorTextEndPoint>\";\n  const cognitiveServiceCredentials = new CognitiveServicesCredentials(\n    translatorTextKey\n  );\n  const client = new TranslatorTextClient(\n    cognitiveServiceCredentials,\n    translatorTextEndPoint\n  );\n\n  const text = [\n    {\n      text: \"\u4f60\u597d\uff0c\u4e16\u754c\"\n    }\n  ];\n\n  client.translator\n    .detect(text)\n    .then(result => {\n      console.log(\"The result is: \");\n      console.log(result);\n    })\n    .catch(err => {\n      console.log(\"An error occurred:\");\n      console.error(err);\n    });\n}\n\nmain();\n```\n\n#### browser - Authentication, client creation and languages translator as an example written in JavaScript.\n\n##### Sample code\n\n- index.html\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>@azure/cognitiveservices-translatortext sample</title>\n    <script src=\"node_modules/@azure/ms-rest-js/dist/msRest.browser.js\"></script>\n    <script src=\"node_modules/@azure/cognitiveservices-translatortext/dist/cognitiveservices-translatortext.js\"></script>\n    <script type=\"text/javascript\">\n      const translatorTextKey = \"<YOUR_TRANSLATOR_TEXT_KEY>\";\n      const translatorTextEndPoint = \"<YOUR_TRANSLATOR_TEXT_ENDPOINT>\";\n\n      const cognitiveServiceCredentials = new msRest.ApiKeyCredentials({\n        inHeader: {\n          \"Ocp-Apim-Subscription-Key\": translatorTextKey\n        }\n      });\n      const client = new Azure.CognitiveservicesTranslatortext.TranslatorTextClient(\n        cognitiveServiceCredentials,\n        translatorTextEndPoint\n      );\n\n      const text = [\n        {\n          text: \"\u4f60\u597d\uff0c\u4e16\u754c\"\n        }\n      ];\n\n      client.translator\n        .detect(text)\n        .then(result => {\n          console.log(\"The result is: \");\n          console.log(result);\n        })\n        .catch(err => {\n          console.log(\"An error occurred:\");\n          console.error(err);\n        });\n    </script>\n  </head>\n  <body></body>\n</html>\n```\n\n## Related projects\n\n- [Microsoft Azure SDK for Javascript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fcognitiveservices%2Fcognitiveservices-translatortext%2FREADME.png)\n",
        "repo_name": "cognitiveservices/cognitiveservices-translatortext",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/cognitiveservices/cognitiveservices-translatortext",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "## An isomorphic javascript sdk for - VideoSearchClient\n\nThis package contains an isomorphic SDK for VideoSearchClient.\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge, and Firefox.\n\n### How to Install\n\n```bash\nnpm install @azure/cognitiveservices-videosearch\n```\n\n### How to use\n\n#### nodejs - Authentication, client creation and search videos as an example written in TypeScript.\n\n##### Install @azure/ms-rest-azure-js\n\n```bash\nnpm install @azure/ms-rest-azure-js\n```\n\n##### Sample code\nThe following sample performs a video search on 'Microsoft Azure' with conditions such as the length must be Short, pricing must be Free, etc. To know more, refer to the [Azure Documentation on Bing Video Search](https://docs.microsoft.com/azure/cognitive-services/bing-video-search/)\n\n```javascript\nconst { VideoSearchClient } = require(\"@azure/cognitiveservices-videosearch\");\nconst { CognitiveServicesCredentials } = require(\"@azure/ms-rest-azure-js\");\n\nasync function main() {\n  const videoSearchKey = process.env[\"videoSearchKey\"] || \"<videoSearchKey>\";\n  const videoSearchEndPoint =\n    process.env[\"videoSearchEndPoint\"] || \"<videoSearchEndPoint>\";\n  const cognitiveServiceCredentials = new CognitiveServicesCredentials(\n    videoSearchKey\n  );\n  const client = new VideoSearchClient(cognitiveServiceCredentials, {\n    endpoint: videoSearchEndPoint\n  });\n  const query = \"Microsoft Azure\";\n  const options = {\n    acceptLanguage: \"en-US\",\n    location: \"westus2\",\n    length: \"Short\",\n    pricing: \"Free\",\n    resolution: \"HD720p\"\n  };\n  client.videos\n    .search(query, options)\n    .then(result => {\n      console.log(\"The result is: \");\n      console.log(result);\n    })\n    .catch(err => {\n      console.log(\"An error occurred:\");\n      console.error(err);\n    });\n}\n\nmain();\n```\n\n#### browser - Authentication, client creation and search videos as an example written in JavaScript.\n\n##### Sample code\n\n- index.html\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>@azure/cognitiveservices-videosearch sample</title>\n    <script src=\"node_modules/@azure/ms-rest-js/dist/msRest.browser.js\"></script>\n    <script src=\"node_modules/@azure/cognitiveservices-videosearch/dist/cognitiveservices-videosearch.js\"></script>\n    <script type=\"text/javascript\">\n      const videoSearchKey = \"<YOUR_VIDEO_SEARCH_KEY>\";\n      const videoSearchEndPoint = \"<YOUR_VIDEO_SEARCH_ENDPOINT>\";\n      const cognitiveServiceCredentials = new msRest.ApiKeyCredentials({\n        inHeader: {\n          \"Ocp-Apim-Subscription-Key\": videoSearchKey\n        }\n      });\n      const client = new Azure.CognitiveservicesVideosearch.VideoSearchClient(\n        cognitiveServiceCredentials,\n        {\n          endpoint: videoSearchEndPoint\n        }\n      );\n\n      const query = \"Microsoft Azure\";\n      const options = {\n        acceptLanguage: \"en-US\",\n        location: \"westus2\",\n        length: \"Short\",\n        pricing: \"Free\",\n        resolution: \"HD720p\"\n      };\n      client.videos\n        .search(query, options)\n        .then(result => {\n          console.log(\"The result is: \");\n          console.log(result);\n        })\n        .catch(err => {\n          console.log(\"An error occurred:\");\n          console.error(err);\n        });\n    </script>\n  </head>\n  <body></body>\n</html>\n```\n\n## Related projects\n\n- [Microsoft Azure SDK for Javascript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fcognitiveservices%2Fcognitiveservices-videosearch%2FREADME.png)\n",
        "repo_name": "cognitiveservices/cognitiveservices-videosearch",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/cognitiveservices/cognitiveservices-videosearch",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "## An isomorphic javascript sdk for - VisualSearchClient\n\nThis package contains an isomorphic SDK for VisualSearchClient.\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge, and Firefox.\n\n### How to Install\n\n```bash\nnpm install @azure/cognitiveservices-visualsearch\n```\n\n### How to use\n\n#### nodejs - Authentication, client creation and visualSearch images as an example written in TypeScript.\n\n##### Install @azure/ms-rest-azure-js\n\n```bash\nnpm install @azure/ms-rest-azure-js\n```\n\n##### Sample code\nThe following sample performs a visual search, i.e. perform a search with a image. To know more, refer to the [Azure Documentation on Bing Visual Search](https://docs.microsoft.com/azure/cognitive-services/bing-visual-search/).\n\n```javascript\nconst { VisualSearchClient } = require(\"@azure/cognitiveservices-visualsearch\");\nconst { CognitiveServicesCredentials } = require(\"@azure/ms-rest-azure-js\");\n\nasync function main() {\n  const visualSearchKey = process.env[\"visualSearchKey\"] || \"<visualSearchKey>\";\n  const visualSearchEndPoint =\n    process.env[\"visualSearchEndPoint\"] || \"<visualSearchEndPoint>\";\n  const cognitiveServiceCredentials = new CognitiveServicesCredentials(\n    visualSearchKey\n  );\n  const client = new VisualSearchClient(cognitiveServiceCredentials, {\n    endpoint: visualSearchEndPoint\n  });\n\n  const insightsToken =\n    process.env[\"insights_token\"] || \"<insights_token>\";;\n\n  const knowledgeRequest = JSON.stringify({\n    imageInfo: {\n      imageInsightsToken: insightsToken\n    }\n  });\n\n  const options = {\n    acceptLanguage: \"en-US\",\n    knowledgeRequest: knowledgeRequest\n  };\n\n  client.images\n    .visualSearch(options)\n    .then(result => {\n      console.log(\"The result is: \");\n      console.log(result);\n    })\n    .catch(err => {\n      console.log(\"An error occurred:\");\n      console.error(err);\n    });\n}\n\nmain();\n```\n\n#### browser - Authentication, client creation and visualSearch images as an example written in JavaScript.\n\n##### Sample code\n\n- index.html\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>@azure/cognitiveservices-visualsearch sample</title>\n    <script src=\"node_modules/@azure/ms-rest-js/dist/msRest.browser.js\"></script>\n    <script src=\"node_modules/@azure/cognitiveservices-visualsearch/dist/cognitiveservices-visualsearch.js\"></script>\n    <script type=\"text/javascript\">\n      const visualSearchKey = \"<YOUR_VISUAL_SEARCH_KEY>\";\n      const visualSearchEndPoint = \"<YOUR_VISUAL_SEARCH_ENDPOINT>\";\n      const cognitiveServiceCredentials = new msRest.ApiKeyCredentials({\n        inHeader: {\n          \"Ocp-Apim-Subscription-Key\": visualSearchKey\n        }\n      });\n      const client = new Azure.CognitiveservicesVisualsearch.VisualSearchClient(\n        cognitiveServiceCredentials,\n        {\n          endpoint: visualSearchEndPoint\n        }\n      );\n\n      const insightsToken = \"<YOUR_INSIGHTS_TOKEN>\";\n\n      const knowledgeRequest = JSON.stringify({\n        imageInfo: {\n          imageInsightsToken: insightsToken\n        }\n      });\n\n      const options = {\n        acceptLanguage: \"en-US\",\n        knowledgeRequest: knowledgeRequest\n      };\n\n      client.images\n        .visualSearch(options)\n        .then(result => {\n          console.log(\"The result is: \");\n          console.log(result);\n        })\n        .catch(err => {\n          console.log(\"An error occurred:\");\n          console.error(err);\n        });\n    </script>\n  </head>\n  <body></body>\n</html>\n```\n\n## Related projects\n\n- [Microsoft Azure SDK for Javascript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fcognitiveservices%2Fcognitiveservices-visualsearch%2FREADME.png)\n",
        "repo_name": "cognitiveservices/cognitiveservices-visualsearch",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/cognitiveservices/cognitiveservices-visualsearch",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "## An isomorphic javascript sdk for - WebSearchClient\n\nThis package contains an isomorphic SDK for WebSearchClient.\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge, and Firefox.\n\n### How to Install\n\n```bash\nnpm install @azure/cognitiveservices-websearch\n```\n\n### How to use\n\n#### nodejs - Authentication, client creation and search web as an example written in TypeScript.\n\n##### Install @azure/ms-rest-azure-js\n\n```bash\nnpm install @azure/ms-rest-azure-js\n```\n\n##### Sample code\nThe following sample performs a web search on the text 'Microsoft Azure'. To know more, refer to the [Azure Documentation on Bing Web Search](https://docs.microsoft.com/azure/cognitive-services/bing-web-search/)\n\n```javascript\nconst { WebSearchClient } = require(\"@azure/cognitiveservices-websearch\");\nconst { CognitiveServicesCredentials } = require(\"@azure/ms-rest-azure-js\");\n\nasync function main() {\n  const webSearchKey = process.env[\"webSearchKey\"] || \"<webSearchKey>\";\n  const webSearchEndPoint =\n    process.env[\"webSearchEndPoint\"] || \"<webSearchEndPoint>\";\n  const cognitiveServiceCredentials = new CognitiveServicesCredentials(\n    webSearchKey\n  );\n  const client = new WebSearchClient(cognitiveServiceCredentials, {\n    endpoint: webSearchEndPoint\n  });\n  const query = \"Microsoft Azure\";\n  const options = {\n    acceptLanguage: \"en-US\",\n    pragma: \"no-cache\",\n    location: \"westus2\"\n  };\n  client.web\n    .search(query, options)\n    .then(result => {\n      console.log(\"The result is: \");\n      console.log(result);\n    })\n    .catch(err => {\n      console.log(\"An error occurred:\");\n      console.error(err);\n    });\n}\n\nmain();\n```\n\n#### browser - Authentication, client creation and search web as an example written in JavaScript.\n\n##### Sample code\n\n- index.html\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>@azure/cognitiveservices-websearch sample</title>\n    <script src=\"node_modules/@azure/ms-rest-js/dist/msRest.browser.js\"></script>\n    <script src=\"node_modules/@azure/cognitiveservices-websearch/dist/cognitiveservices-websearch.js\"></script>\n    <script type=\"text/javascript\">\n      const webSearchKey = \"<YOUR_WEB_SEARCH_KEY>\";\n      const webSearchEndPoint = \"<YOUR_WEB_SEARCH_ENDPOINT>\";\n      const cognitiveServiceCredentials = new msRest.ApiKeyCredentials({\n        inHeader: {\n          \"Ocp-Apim-Subscription-Key\": webSearchKey\n        }\n      });\n      const client = new Azure.CognitiveservicesWebsearch.WebSearchClient(\n        cognitiveServiceCredentials,\n        {\n          endpoint: webSearchEndPoint\n        }\n      );\n\n      const query = \"Microsoft Azure\";\n      const options = {\n        acceptLanguage: \"en-US\",\n        pragma: \"no-cache\",\n        location: \"westus2\"\n      };\n      client.web\n        .search(query, options)\n        .then(result => {\n          console.log(\"The result is: \");\n          console.log(result);\n        })\n        .catch(err => {\n          console.log(\"An error occurred:\");\n          console.error(err);\n        });\n    </script>\n  </head>\n  <body></body>\n</html>\n\n```\n\n## Related projects\n\n- [Microsoft Azure SDK for Javascript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fcognitiveservices%2Fcognitiveservices-websearch%2FREADME.png)\n",
        "repo_name": "cognitiveservices/cognitiveservices-websearch",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/cognitiveservices/cognitiveservices-websearch",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure UsageManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure UsageManagement client.\n\n\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/commerce/arm-commerce-profile-2020-09-01-hybrid) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-commerce-profile-2020-09-01-hybrid) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-commerce-profile-2020-09-01-hybrid?view=azure-node-preview) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-commerce-profile-2020-09-01-hybrid` package\n\nInstall the Azure UsageManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-commerce-profile-2020-09-01-hybrid\n```\n\n### Create and authenticate a `UsageManagementClient`\n\nTo create a client object to access the Azure UsageManagement API, you will need the `endpoint` of your Azure UsageManagement resource and a `credential`. The Azure UsageManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure UsageManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure UsageManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { UsageManagementClient } = require(\"@azure/arm-commerce-profile-2020-09-01-hybrid\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new UsageManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new UsageManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### UsageManagementClient\n\n`UsageManagementClient` is the primary interface for developers using the Azure UsageManagement client library. Explore the methods on this client object to understand the different features of the Azure UsageManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fcommerce%2Farm-commerce-profile-2020-09-01-hybrid%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "commerce/arm-commerce-profile-2020-09-01-hybrid",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/commerce/arm-commerce-profile-2020-09-01-hybrid",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure UsageManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure UsageManagement client.\n\n\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/commerce/arm-commerce) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-commerce) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-commerce?view=azure-node-preview) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-commerce` package\n\nInstall the Azure UsageManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-commerce\n```\n\n### Create and authenticate a `UsageManagementClient`\n\nTo create a client object to access the Azure UsageManagement API, you will need the `endpoint` of your Azure UsageManagement resource and a `credential`. The Azure UsageManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure UsageManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure UsageManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { UsageManagementClient } = require(\"@azure/arm-commerce\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new UsageManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new UsageManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### UsageManagementClient\n\n`UsageManagementClient` is the primary interface for developers using the Azure UsageManagement client library. Explore the methods on this client object to understand the different features of the Azure UsageManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fcommerce%2Farm-commerce%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "commerce/arm-commerce",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/commerce/arm-commerce",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure CommunicationServiceManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure CommunicationServiceManagement client.\n\nREST API for Azure Communication Services\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/communication/arm-communication) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-communication) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-communication) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-communication` package\n\nInstall the Azure CommunicationServiceManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-communication\n```\n\n### Create and authenticate a `CommunicationServiceManagementClient`\n\nTo create a client object to access the Azure CommunicationServiceManagement API, you will need the `endpoint` of your Azure CommunicationServiceManagement resource and a `credential`. The Azure CommunicationServiceManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure CommunicationServiceManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure CommunicationServiceManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { CommunicationServiceManagementClient } = require(\"@azure/arm-communication\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new CommunicationServiceManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new CommunicationServiceManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### CommunicationServiceManagementClient\n\n`CommunicationServiceManagementClient` is the primary interface for developers using the Azure CommunicationServiceManagement client library. Explore the methods on this client object to understand the different features of the Azure CommunicationServiceManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fcommunication%2Farm-communication%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "communication/arm-communication",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/communication/arm-communication",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Communication Alpha IDs client library for JavaScript\n\nThe Alpha IDs library provides capabilities for Alpha IDs administration.\n\n## Getting started\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n- An existing Communication Services resource. If you need to create the resource, you can use the [Azure Portal][azure_portal], the [Azure PowerShell][azure_powershell], or the [Azure CLI][azure_cli].\n\n### Installing\n\n```bash\nnpm install @azure-tools/communication-alpha-ids\n```\n\n### Browser support\n\n#### JavaScript Bundle\n\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n## Examples\n\n## Authentication\n\nTo create a client object to access the Communication Services API, you will need a `connection string` or the `endpoint` of your Communication Services resource and a `credential`. The Alpha IDs client can use either Azure Active Directory credentials or an API key credential to authenticate.\n\nYou can get a key and/or connection string from your Communication Services resource in the [Azure Portal][azure_portal]. You can also find the endpoint for your Communication Services resource in the [Azure Portal][azure_portal].\n\nOnce you have a key, you can authenticate the `AlphaIdsClient` with any of the following methods:\n\n### Using a connection string\n\n```javascript\nconst { AlphaIdsClient } = require(\"@azure-tools/communication-alpha-ids\");\n\nconst connectionString = \"endpoint=<endpoint>;accessKey=<accessKey>\";\nconst client = new AlphaIdsClient(connectionString);\n```\n\n### Using an access key with `AzureKeyCredential`\n\nIf you use a key to initialize the client you will also need to provide the appropriate endpoint. You can get this endpoint from your Communication Services resource in [Azure Portal][azure_portal]. Once you have a key and endpoint, you can authenticate with the following code:\n\n```javascript\nconst { AzureKeyCredential } = require(\"@azure/core-auth\");\nconst { AlphaIdsClient } = require(\"@azure-tools/communication-alpha-ids\");\n\nconst credential = new AzureKeyCredential(\"<key-from-resource>\");\nconst client = new AlphaIdsClient(\"<endpoint-from-resource>\", credential);\n```\n\n### Using an Azure Active Directory Credential\n\nConnection string authentication is used in most of the examples, but you can also authenticate with Azure Active Directory using the [Azure Identity library][azure_identity]. To use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the [`@azure/identity`][azure_identity] package:\n\n```bash\nnpm install @azure/identity\n```\n\nThe [`@azure/identity`][azure_identity] package provides a variety of credential types that your application can use to do this. The [README for `@azure/identity`][azure_identity_readme] provides more details and samples to get you started.\n\n```javascript\nconst { DefaultAzureCredential } = require (\"@azure/identity\");\nconst { AlphaIdsClient } = require(\"@azure-tools/communication-alpha-ids\");\n\nlet credential = new DefaultAzureCredential();\nconst client = new AlphaIdsClient(\"<endpoint-from-resource>\", credential);\n```\n\n## Usage\n\nThe following sections provide code snippets that cover some of the common tasks using the Azure Communication Services Alpha IDs client. The scenarios that are covered here consist of:\n\n- [Get the current applied configuration](#get-the-current-applied-configuration)\n\n### Get the current applied configuration\nUse the `getConfiguration` method to obtain the current applied configuration for your resource.\n\n```javascript\nconst { AlphaIdsClient } = require(\"@azure-tools/communication-alpha-ids\");\n\nconst connectionString = \"endpoint=<endpoint>;accessKey=<accessKey>\";\nconst client = new AlphaIdsClient(connectionString);\n\n// get the current configuration\nvar configuration = await client.getConfiguration();\n\nconsole.log(`Usage of Alpha IDs is currently ${(configuration.enabled ? \"enabled\" : \"disabled\")}`);\n```\n\n## Troubleshooting\n\n## Next steps\n\nPlease take a look at the samples directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for Javascript](https://github.com/Azure/azure-sdk-for-js)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_powershell]: https://docs.microsoft.com/powershell/module/az.communication/new-azcommunicationservice\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[azure_identity_readme]: https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/identity/identity/README.md\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fcommunication%2Fcommunication-alpha-ids%2FREADME.png)\n",
        "repo_name": "communication/communication-alpha-ids",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/communication/communication-alpha-ids",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Communication Call Automation client library for JavaScript\n\nThis package contains a JavaScript SDK for Azure Communication Call Automation. Call Automation provides developers the ability to build server-based, intelligent call workflows, and call recording for voice and PSTN channels.\n\n[Overview of Call Automation][overview] | [Product documentation][product_docs]\n\n## Getting started\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n- An existing Communication Services resource. If you need to create the resource, you can use the [Azure Portal][azure_portal], the [Azure PowerShell][azure_powershell], or the [Azure CLI][azure_cli].\n\n### Installing\n```bash\nnpm install @azure/communication-call-automation\n```\n\n### Browser support\n\n#### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation][build_doc].\n\n## Key concepts\n| Name                 | Description                                                                                                                                                                                                                                                                                                                              |\n| -------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| CallAutomationClient | `CallAutomationClient` is the primary interface for developers using this client library. It can be used to initiate calls by `createCall` or `answerCall`.                                                                                                                                                                              |\n| CallConnection       | `CallConnection` represents a ongoing call. Once the call is established with `createCall` or `answerCall`, further actions can be performed for the call, such as `transfer` or `addParticipant`.                                                                                                                                       |\n| CallMedia            | `CallMedia` can be used to do media related actions, such as `play`, to play media file. This can be retrieved from established `CallConnection`.                                                                                                                                                                                        |\n| CallRecording        | `CallRecording` can be used to do recording related actions, such as `startRecording`. This can be retrieved from `CallAutomationClient`.                                                                                                                                                                                                |\n| Callback Events      | Callback events are events sent back during duration of the call. It gives information and state of the call, such as `CallConnected`. `CallbackUrl` must be provided during `createCall` and `answerCall`, and callback events will be sent to this url. You can use `callAutomationEventParser` to parse these events when it arrives. |\n| Incoming Call Event  | When incoming call happens (that can be answered with `answerCall`), incoming call eventgrid event will be sent. This is different from Callback events above, and should be setup on Azure portal. See [Incoming Call][incomingcall] for detail.                                                                                        |\n\n## Examples\n### Initialize CallAutomationClient\n```JavaScript\nimport { CallAutomationClient } from '@azure/communication-call-automation';\n\n// Your unique Azure Communication service endpoint\nconst endpointUrl = '<ENDPOINT>';\nconst callAutomationClient = new CallAutomationClient(endpointUrl);\n```\n\n### Create Call\n```JavaScript\nimport { CommunicationUserIdentifier } from \"@azure/communication-common\";\nimport { CallAutomationClient, CallInvite } from '@azure/communication-call-automation';\n\n// target endpoint for ACS User\nconst target: CommunicationUserIdentifier = {\n  communicationUserId:\n    \"8:acs:...\",\n}\n\n// make invitation\nconst callInvite = new CallInvite(target);\n\n// callback url to recieve callback events\nconst callbackUrl = \"https://<MY-EVENT-HANDLER-URL>/events\";\n\n// send out the invitation, creating call\nconst response = callAutomationClient.createCall(callInvite, callbackUrl);\n```\n\n### Play Media\n```JavaScript\n// from callconnection of response above, play media of media file\nconst myFile: FileSource = { uri: \"https://<FILE-SOURCE>/<SOME-FILE>.wav\" }\nconst response = callConnection.getCallMedia().playToAll(myFile);\n```\n\n## Troubleshooting\n\n## Next steps\n- [Call Automation Overview][overview]\n- [Incoming Call Concept][incomingcall]\n- [Build a customer interaction workflow using Call Automation][build1]\n- [Redirect inbound telephony calls with Call Automation][build2]\n- [Quickstart: Play action][build3]\n- [Quickstart: Recognize action][build4]\n- [Read more about Call Recording in Azure Communication Services][recording1]\n- [Record and download calls with Event Grid][recording2]\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/master/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n<!-- LINKS -->\n[overview]: https://learn.microsoft.com/azure/communication-services/concepts/voice-video-calling/call-automation\n[product_docs]: https://docs.microsoft.com/azure/communication-services/overview\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_powershell]: https://docs.microsoft.com/powershell/module/az.communication/new-azcommunicationservice\n[build_doc]: https://github.com/Azure/azure-sdk-for-js/blob/main/documentation/Bundling.md\n[incomingcall]: https://learn.microsoft.com/azure/communication-services/concepts/voice-video-calling/incoming-call-notification\n[build1]: https://learn.microsoft.com/azure/communication-services/quickstarts/voice-video-calling/callflows-for-customer-interactions?pivots=programming-language-csha\n[build2]: https://learn.microsoft.com/azure/communication-services/how-tos/call-automation-sdk/redirect-inbound-telephony-calls?pivots=programming-language-csharp\n[build3]: https://learn.microsoft.com/azure/communication-services/quickstarts/voice-video-calling/play-action?pivots=programming-language-csharp\n[build4]: https://learn.microsoft.com/azure/communication-services/quickstarts/voice-video-calling/recognize-action?pivots=programming-language-csharp\n[recording1]: https://learn.microsoft.com/azure/communication-services/concepts/voice-video-calling/call-recording\n[recording2]: https://learn.microsoft.com/azure/communication-services/quickstarts/voice-video-calling/get-started-call-recording?pivots=programming-language-csharp\n",
        "repo_name": "communication/communication-call-automation",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/communication/communication-call-automation",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Communication Chat client library for JavaScript\n\nAzure Communication Services for Chat lets developers add chat capabilities to their app. Use this client library to manage chat threads and their users, and send and receive chat messages.\n\nRead more about Azure Communication Services [here](https://docs.microsoft.com/azure/communication-services/overview)\n\n## Getting started\n\n## Prerequisites\n\n- An [Azure subscription][azure_sub].\n- An existing Communication Services resource. If you need to create the resource, you can use the [Azure Portal][azure_portal], the [Azure PowerShell][azure_powershell], or the [Azure CLI][azure_cli].\n- [Node.js](https://nodejs.org)\n\n### Installing\n\n```bash\nnpm install @azure/communication-chat\n```\n\n### Browser support\n\n#### JavaScript Bundle\n\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\nIn `rollup.config.js`, add following customized name exports in `cjs` plugin.\n\n```JavaScript\n\ncjs({\n  namedExports: {\n    events: [\"EventEmitter\"],\n    \"@azure/communication-signaling\": [\"CommunicationSignalingClient\", \"SignalingClient\"],\n    \"@opentelemetry/api\": [\"CanonicalCode\", \"SpanKind\", \"TraceFlags\"]\n  }\n})\n\n```\n\n## Key concepts\n\nA chat conversation is represented by a thread. Each user in the thread is called a chat participant. Chat participants can chat with one another privately in a 1:1 chat or huddle up in a 1:N group chat. Users also get near-real time updates for when others are typing and when they have read the messages.\n\n### ChatClient\n\n`ChatClient` is the primary interface for developers using this client library. It provides asynchronous methods to create and delete a thread.\n\n### ChatThreadClient\n\n`ChatThreadClient` provides asynchronous methods to do the message and chat participants operations within the chat thread.\n\n## Examples\n\n### Initialize ChatClient\n\nUse resource url and user access token to initialize chat client.\n\n```JavaScript\nimport { ChatClient } from '@azure/communication-chat';\nimport { AzureCommunicationTokenCredential } from \"@azure/communication-common\";\n\n// Your unique Azure Communication service endpoint\nconst endpointUrl = '<ENDPOINT>';\nconst userAccessToken = '<USER_ACCESS_TOKEN>';\nconst tokenCredential = new AzureCommunicationTokenCredential(userAccessToken);\nconst chatClient = new ChatClient(endpointUrl, tokenCredential);\n\n```\n\n### Create a thread with two users\n\nUse the `createThread` method to create a chat thread.\n\n`createChatThreadRequest` is used to describe the thread request:\n\n- Use `topic` to give a thread topic;\n\n`createChatThreadOptions` is used to set the optional params to create the thread:\n\n- Use `participants` to list the chat participants to be added to the thread;\n- Use `idempotencyToken` to specify a repeatable request\n\n`createChatThreadResult` is the result returned from creating a thread. It contains a `chatThread` which is the thread that was created, as well as an `errors` property which will contain information about invalid participants if they failed to be added to the thread.\n\n```Javascript\nconst createChatThreadRequest = {\n  topic: \"Hello, World!\"\n};\nconst createChatThreadOptions = {\n  participants: [\n    {\n      id: { communicationUserId: '<USER_ID>' },\n      displayName: '<USER_DISPLAY_NAME>'\n    }\n  ]\n};\nconst createChatThreadResult = await chatClient.createChatThread(\n  createChatThreadRequest,\n  createChatThreadOptions\n);\nconst threadId = createChatThreadResult.chatThread.id;\n```\n\n### Create a ChatThreadClient\n\nThe ChatThreadClient will allow you to perform operations specific to a chat thread, like update the chat thread topic, send a message, add participants to the chat thread, etc.\n\nYou can initialize a new ChatThreadClient using the `getChatThreadClient` method of the ChatClient with an existing thread id:\n\n```Javascript\nconst chatThreadClient = chatClient.getChatThreadClient(threadId);\n```\n\n### Send a message to the thread\n\nUse `sendMessage` method to sends a message to a thread identified by threadId.\n\n`sendMessageRequest` is used to describe the message request:\n\n- Use `content` to provide the chat message content;\n\n`sendMessageOptions` is used to describe the operation optional params:\n\n- Use `senderDisplayName` to specify the display name of the sender;\n- Use `type` to specify the message type, such as 'text' or 'html' ;\n\n`sendChatMessageResult` is the result returned from sending a message, it contains an ID, which is the unique ID of the message.\n\n```JavaScript\nconst sendMessageRequest =\n{\n  content: 'Hello Geeta! Can you share the deck for the conference?'\n};\nconst sendMessageOptions:SendMessageOptions = {\n  senderDisplayName: \"Jack\",\n  type: \"text\"\n};\nconst sendChatMessageResult = await chatThreadClient.sendMessage(sendMessageRequest, sendMessageOptions);\nconst messageId = sendChatMessageResult.id;\n```\n\n### Receive messages from a thread\n\nWith real-time signaling, you can subscribe to listen for new incoming messages and update the current messages in memory accordingly.\n\n```JavaScript\n\n// open notifications channel\nawait chatClient.startRealtimeNotifications();\n// subscribe to new notification\nchatClient.on(\"chatMessageReceived\", (e) => {\n  console.log(\"Notification chatMessageReceived!\");\n  // your code here\n});\n\n```\n\nAlternatively you can retrieve chat messages by polling the `listMessages` method at specified intervals.\n\n```JavaScript\nfor await (const chatMessage of chatThreadClient.listMessages()) {\n   // your code here\n}\n```\n\n### Add Users to a thread\n\nOnce a thread is created, you can then add and remove users from that thread. By adding users, you give them access to be able to send messages to the thread.\nYou will need to start by getting a new access token and identity for that user. The user will need that access token in order to initialize their chat client.\nMore information on tokens here: [Authenticate to Azure Communication Services](https://docs.microsoft.com/azure/communication-services/concepts/authentication?tabs=javascript)\n\n```JavaScript\n\nconst addParticipantsRequest =\n{\n  participants: [\n    {\n      id: { communicationUserId: '<NEW_PARTICIPANT_USER_ID>' },\n      displayName: 'Jane'\n    }\n  ]\n};\n\nawait chatThreadClient.addParticipants(addParticipantsRequest);\n\n```\n\n### Remove Users from a thread\n\nSimilar to above, you can also remove users from a thread. In order to remove, you will need to track the IDs of the participants you have added.\n\n```JavaScript\n\nawait chatThreadClient.removeParticipant({ communicationUserId: '<MEMBER_ID>' });\n\n```\n\n### Subscribe to connection status of real time notifications\nSubscription to events `realTimeNotificationConnected` and `realTimeNotificationDisconnected` allows you to know when the connection to the call server is active.\n\n```JavaScript\n\n// subscribe to realTimeNotificationConnected event\nchatClient.on('realTimeNotificationConnected', () => {\n  console.log(\"Real time notification is now connected!\");\n  // your code here\n});\n\n// subscribe to realTimeNotificationDisconnected event\nchatClient.on('realTimeNotificationDisconnected', () => {\n  console.log(\"Real time notification is now disconnected!\");\n  // your code here\n});\n\n```\n\n## Troubleshooting\n\n## Next steps\n\nIn this quickstart you learned how to:\n\n- Create a chat client\n- Create a thread with 2 users\n- Send a message to the thread\n- Receive messages from a thread\n- Remove Users from a thread\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_powershell]: https://docs.microsoft.com/powershell/module/az.communication/new-azcommunicationservice\n",
        "repo_name": "communication/communication-chat",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/communication/communication-chat",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Communication Common client library for JavaScript\n\nThis package contains common code for Azure Communication Service libraries.\n\n## Getting started\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n- An existing Communication Services resource. If you need to create the resource, you can use the [Azure Portal][azure_portal], the [Azure PowerShell][azure_powershell], or the [Azure CLI][azure_cli].\n\n### Installing\n\n```bash\nnpm install @azure/communication-common\n```\n\n### Browser support\n\n#### JavaScript Bundle\n\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### CommunicationTokenCredential and AzureCommunicationTokenCredential\n\nThe `CommunicationTokenCredential` is an interface used to authenticate a user with Communication Services, such as Chat or Calling.\n\nThe `AzureCommunicationTokenCredential` offers a convenient way to create a credential implementing the said interface and allows you to take advantage of the built-in auto-refresh logic.\n\nDepending on your scenario, you may want to initialize the `AzureCommunicationTokenCredential` with:\n\n- a static token (suitable for short-lived clients used to e.g. send one-off Chat messages) or\n- a callback function that ensures a continuous authentication state during communications (ideal e.g. for long Calling sessions).\n\nThe tokens supplied to the `AzureCommunicationTokenCredential` either through the constructor or via the token refresher callback can be obtained using the Azure Communication Identity library.\n\n## Examples\n\n### Create a credential with a static token\n\nFor a short-lived clients, refreshing the token upon expiry is not necessary and the `AzureCommunicationTokenCredential` may be instantiated with a static token.\n\n```typescript\nconst tokenCredential = new AzureCommunicationTokenCredential(\n  \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjM2MDB9.adM-ddBZZlQ1WlN3pdPBOF5G4Wh9iZpxNP_fSvpF4cWs\"\n);\n```\n\n### Create a credential with a callback\n\nHere we assume that we have a function `fetchTokenFromMyServerForUser` that makes a network request to retrieve a JWT token string for a user. We pass it into the credential to fetch a token for Bob from our own server. Our server would use the Azure Communication Identity library to issue tokens. It's necessary that the `fetchTokenFromMyServerForUser` function returns a valid token (with an expiration date set in the future) at all times.\n\n```typescript\nconst tokenCredential = new AzureCommunicationTokenCredential({\n  tokenRefresher: async () => fetchTokenFromMyServerForUser(\"bob@contoso.com\"),\n});\n```\n\n### Create a credential with proactive refreshing\n\nSetting `refreshProactively` to true will call your `tokenRefresher` function when the token is close to expiry.\n\n```typescript\nconst tokenCredential = new AzureCommunicationTokenCredential({\n  tokenRefresher: async () => fetchTokenFromMyServerForUser(\"bob@contoso.com\"),\n  refreshProactively: true,\n});\n```\n\n### Create a credential with proactive refreshing and an initial token\n\nPassing `initialToken` is an optional optimization to skip the first call to `tokenRefresher`. You can use this to separate the boot from your application from subsequent token refresh cycles.\n\n```typescript\nconst tokenCredential = new AzureCommunicationTokenCredential({\n  tokenRefresher: async () => fetchTokenFromMyServerForUser(\"bob@contoso.com\"),\n  refreshProactively: true,\n  token:\n    \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjM2MDB9.adM-ddBZZlQ1WlN3pdPBOF5G4Wh9iZpxNP_fSvpF4cWs\",\n});\n```\n\n## Troubleshooting\n\n- **Invalid token specified**: Make sure the token you are passing to the `AzureCommunicationTokenCredential` constructor or to the `tokenRefresher` callback is a bare JWT token string. E.g. if you're using the [Azure Communication Identity library][invalid_token_sdk] or [REST API][invalid_token_rest] to obtain the token, make sure you're passing just the `token` part of the response object.\n\n## Next steps\n\n- [Read more about Communication user access tokens](https://docs.microsoft.com/azure/communication-services/concepts/authentication?tabs=javascript)\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for Javascript](https://github.com/Azure/azure-sdk-for-js)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_powershell]: https://docs.microsoft.com/powershell/module/az.communication/new-azcommunicationservice\n[invalid_token_sdk]: https://docs.microsoft.com/javascript/api/@azure/communication-identity/communicationaccesstoken#@azure-communication-identity-communicationaccesstoken-token\n[invalid_token_rest]: https://docs.microsoft.com/rest/api/communication/communication-identity/issue-access-token#communicationidentityaccesstoken\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fcommunication%2Fcommunication-sms%2FREADME.png)\n",
        "repo_name": "communication/communication-common",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/communication/communication-common",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Communication Email client library for JavaScript\n\nThis package contains a JavaScript/TypeScript SDK for Azure Communication Services for Email.\n\n## Getting started\n\n### Prerequisites\n\nYou need an [Azure subscription][azure_sub], a [Communication Service Resource][communication_resource_docs], and an [Email Communication Resource][email_resource_docs] with an active [Domain][domain_overview].\n\nTo create these resource, you can use the [Azure Portal][communication_resource_create_portal], the [Azure PowerShell][communication_resource_create_power_shell], or the [.NET management client library][communication_resource_create_net].\n\n### Installing\n\n```bash\nnpm install @azure/communication-email\n```\n\n## Examples\n\n`EmailClient` provides the functionality to send email messages.\n\n## Authentication\n\nEmail clients can be authenticated using the connection string acquired from an Azure Communication Resource in the [Azure Portal][azure_portal].\n\n```javascript\nconst { EmailClient } = require(\"@azure/communication-email\");\n\nconst connectionString = `endpoint=https://<resource-name>.communication.azure.com/;accessKey=<Base64-Encoded-Key>`;\nconst client = new EmailClient(connectionString);\n```\n\nYou can also authenticate with Azure Active Directory using the [Azure Identity library][azure_identity]. To use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the [`@azure/identity`][azure_identity] package:\n\n```bash\nnpm install @azure/identity\n```\n\nThe [`@azure/identity`][azure_identity] package provides a variety of credential types that your application can use to do this. The README for @azure/identity provides more details and samples to get you started.\nAZURE_CLIENT_SECRET, AZURE_CLIENT_ID and AZURE_TENANT_ID environment variables are needed to create a DefaultAzureCredential object.\n\n```typescript\nimport { DefaultAzureCredential } from \"@azure/identity\";\nimport { EmailClient } from \"@azure/communication-email\";\n\nconst endpoint = \"https://<resource-name>.communication.azure.com\";\nlet credential = new DefaultAzureCredential();\nconst client = new EmailClient(endpoint, credential);\n```\n\n### Send an Email Message\n\nTo send an email message, call the `beginSend` function from the `EmailClient`. This will return a poller. You can use this poller to check on the status of the operation and retrieve the result once it's finished.\n\n```javascript Snippet:Azure_Communication_Email_Send\nconst message = {\n  senderAddress: \"sender@contoso.com\",\n  content: {\n    subject: \"This is the subject\",\n    plainText: \"This is the body\",\n  },\n  recipients: {\n    to: [\n      {\n        address: \"customer@domain.com\",\n        displayName: \"Customer Name\",\n      },\n    ],\n  },\n};\n\nconst poller = await emailClient.beginSend(message);\nconst response = await poller.pollUntilDone();\n```\n\n### Send an Email Message to Multiple Recipients\n\nTo send an email message to multiple recipients, add a object for each recipient type and an object for each recipient.\n\n```javascript Snippet:Azure_Communication_Email_Send_Multiple_Recipients\nconst message = {\n  senderAddress: \"sender@contoso.com\",\n  content: {\n    subject: \"This is the subject\",\n    plainText: \"This is the body\",\n  },\n  recipients: {\n    to: [\n      {\n        address: \"customer1@domain.com\",\n        displayName: \"Customer Name 1\",\n      },\n      {\n        address: \"customer2@domain.com\",\n        displayName: \"Customer Name 2\",\n      },\n    ],\n    cc: [\n      {\n        address: \"ccCustomer1@domain.com\",\n        displayName: \" CC Customer 1\",\n      },\n      {\n        address: \"ccCustomer2@domain.com\",\n        displayName: \"CC Customer 2\",\n      },\n    ],\n    bcc: [\n      {\n        address: \"bccCustomer1@domain.com\",\n        displayName: \" BCC Customer 1\",\n      },\n      {\n        address: \"bccCustomer2@domain.com\",\n        displayName: \"BCC Customer 2\",\n      },\n    ],\n  },\n};\n\nconst poller = await emailClient.beginSend(message);\nconst response = await poller.pollUntilDone();\n```\n\n### Send Email with Attachments\n\nAzure Communication Services support sending email with attachments.\n\n```javascript Snippet:Azure_Communication_Email_Send_With_Attachments\nconst filePath = \"C://readme.txt\";\n\nconst message = {\n  senderAddress: \"sender@contoso.com\",\n  content: {\n    subject: \"This is the subject\",\n    plainText: \"This is the body\",\n  },\n  recipients: {\n    to: [\n      {\n        address: \"customer@domain.com\",\n        displayName: \"Customer Name\",\n      },\n    ],\n  },\n  attachments: [\n    {\n      name: path.basename(filePath),\n      contentType: \"text/plain\",\n      contentInBase64: readFileSync(filePath, \"base64\"),\n    },\n  ],\n};\n\nconst poller = await emailClient.beginSend(message);\nconst response = await poller.pollUntilDone();\n```\n\n## Next steps\n\n- [Read more about Email in Azure Communication Services][nextsteps]\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [cla.microsoft.com][cla].\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n\n[azure_sub]: https://azure.microsoft.com/free/dotnet/\n[azure_portal]: https://portal.azure.com\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[communication_resource_docs]: https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource?tabs=windows&pivots=platform-azp\n[email_resource_docs]: https://aka.ms/acsemail/createemailresource\n[communication_resource_create_portal]: https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource?tabs=windows&pivots=platform-azp\n[communication_resource_create_power_shell]: https://docs.microsoft.com/powershell/module/az.communication/new-azcommunicationservice\n[communication_resource_create_net]: https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource?tabs=windows&pivots=platform-net\n[package]: https://www.nuget.org/packages/Azure.Communication.Common/\n[product_docs]: https://aka.ms/acsemail/overview\n[nextsteps]: https://aka.ms/acsemail/overview\n[nuget]: https://www.nuget.org/\n[source]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/communication\n[domain_overview]: https://aka.ms/acsemail/domainsoverview\n",
        "repo_name": "communication/communication-email",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/communication/communication-email",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Communication Identity client library for JavaScript\n\nThe identity library is used for managing users and tokens for Azure Communication Services.\n\n## Getting started\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n- An existing Communication Services resource. If you need to create the resource, you can use the [Azure Portal][azure_portal], the [Azure PowerShell][azure_powershell], or the [Azure CLI][azure_cli].\n\n### Installing\n\n```bash\nnpm install @azure/communication-identity\n```\n\n### Browser support\n\n#### JavaScript Bundle\n\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### Clients\n\nThe `CommunicationIdentityClient` provides methods to manage users and their tokens.\n\n## Examples\n\n## Authentication\n\nYou can get a key and/or connection string from your Communication Services resource in [Azure Portal][azure_portal]. Once you have a key, you can authenticate the `CommunicationIdentityClient` with any of the following methods:\n\n### Create `KeyCredential` with `AzureKeyCredential` before initializing the client\n\n```typescript\nimport { AzureKeyCredential } from \"@azure/core-auth\";\nimport { CommunicationIdentityClient } from \"@azure/communication-identity\";\n\nconst credential = new AzureKeyCredential(KEY);\nconst client = new CommunicationIdentityClient(ENDPOINT, credential);\n```\n\n### Using a connection string\n\n```typescript\nimport { CommunicationIdentityClient } from \"@azure/communication-identity\";\n\nconst connectionString = `endpoint=ENDPOINT;accessKey=KEY`;\nconst client = new CommunicationIdentityClient(connectionString);\n```\n\n### Using a `TokenCredential`\n\n```typescript\nimport { DefaultAzureCredential } from \"@azure/identity\";\nimport { CommunicationIdentityClient } from \"@azure/communication-identity\";\n\nconst credential = new DefaultAzureCredential();\nconst client = new CommunicationIdentityClient(ENDPOINT, credential);\n```\n\nIf you use a key to initialize the client you will also need to provide the appropriate endpoint. You can get this endpoint from your Communication Services resource in [Azure Portal][azure_portal].\n\n## Usage\n\n### Creating an instance of CommunicationIdentityClient\n\n```typescript\nimport { CommunicationIdentityClient } from \"@azure/communication-identity\";\n\nconst client = new CommunicationIdentityClient(CONNECTION_STRING);\n```\n\n### Creating a new user\n\nUse the `createUser` method to create a new user.\n\n```typescript\nconst user = await client.createUser();\n```\n\n### Creating and refreshing a user token\n\nUse the `getToken` method to issue or refresh a token for an existing user. The method also takes in a list of communication token scopes. Scope options include:\n\n- `chat` (Chat)\n- `voip` (Voice over IP)\n\n```typescript\nlet { token } = await client.getToken(user, [\"chat\"]);\n```\n\nTo refresh the user token, issue another token with the same user.\n\n```typescript\nlet { token } = await client.getToken(user, [\"chat\"]);\n```\n\n### Creating a user token with custom expiration\n\nIt's also possible to create a Communication Identity access token by customizing the expiration time. Validity period of the token must be within [60,1440] minutes range. If not provided, the default value of 1440 minutes (24 hours) will be used.\n\n```typescript\nconst tokenOptions: GetTokenOptions = { tokenExpiresInMinutes: 60 };\nlet { token } = await client.getToken(user, [\"chat\"], tokenOptions);\n```\n\n### Creating a user and a token in a single request\n\nFor convenience, use `createUserAndToken` to create a new user and issue a token with one function call. This translates into a single web request as opposed to creating a user first and then issuing a token.\n\n```typescript\nlet { user, token } = await client.createUserAndToken([\"chat\"]);\n```\n\n### Creating a user and a token with custom expiration in a single request\n\nIt's also possible to create a Communication Identity access token by customizing the expiration time. Validity period of the token must be within [60,1440] minutes range. If not provided, the default value of 1440 minutes (24 hours) will be used.\n\n```typescript\nconst userAndTokenOptions: CreateUserAndTokenOptions = { tokenExpiresInMinutes: 60 };\nlet { user, token } = await client.createUserAndToken([\"chat\"], userAndTokenOptions);\n```\n\n### Revoking tokens for a user\n\nUse the `revokeTokens` method to revoke all issued tokens for a user.\n\n```typescript\nawait client.revokeTokens(user);\n```\n\n### Deleting a user\n\nUse the `deleteUser` method to delete a user.\n\n```typescript\nawait client.deleteUser(user);\n```\n\n### Exchanging Azure AD access token of a Teams User for a Communication access token\n\nUse `getTokenForTeamsUser` method to exchange an Azure AD access token of a Teams user for a new `CommunicationAccessToken` with a matching expiration time.\n\n```typescript\nawait client.getTokenForTeamsUser({\n  teamsUserAadToken: \"<aad-access-token-of-a-teams-user>\",\n  clientId: \"<cliend-id-of-an-aad-application>\",\n  userObjectId: \"<aad-object-id-of-a-teams-user>\",\n});\n```\n\n## Troubleshooting\n\n## Next steps\n\nPlease take a look at the\n[samples](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/communication/communication-identity/samples)\ndirectory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for Javascript](https://github.com/Azure/azure-sdk-for-js)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_powershell]: https://docs.microsoft.com/powershell/module/az.communication/new-azcommunicationservice\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fcommunication%2Fcommunication-identity%2FREADME.png)\n",
        "repo_name": "communication/communication-identity",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/communication/communication-identity",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Communication Job Router client sdk for JavaScript\n\nThis package contains a JS SDK for Azure Communication Services for Job Router.\n\n## Getting started\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n- An existing Communication Services resource. If you need to create the resource, you can use the [Azure Portal][azure_portal], the [Azure PowerShell][azure_powershell], or the [Azure CLI][azure_cli].\n\n### Installing\n\n```bash\nnpm install @azure/communication-job-router\n```\n\n### Browser support\n\n#### JavaScript Bundle\n\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Tutorial: Route customer support requests to workers using the Azure Communication Services (ACS) Router SDK\n\nIn this tutorial, you will learn:\n\n- How to create a queue.\n- How to create workers and associate them with a queue.\n- How to route incoming jobs to queues.\n\n### Key concepts\n\n[Job Router key concepts](https://learn.microsoft.com/azure/communication-services/concepts/router/concepts)\n\n## Setting Up\n\n### Install an IDE\n\nInstall IDE such as [VSCode](https://code.visualstudio.com/download) or [Webstorm](https://www.jetbrains.com/webstorm/download/) if you haven't (Optional)\n\n### Install NodeJS\n\nInstall [NodeJS](https://github.com/nodejs/release#release-schedule)\n\n### Create a new NodeJS Express server\n\nIn a console window (such as cmd, PowerShell, or Bash), create a new folder named `RouterQuickStart` and use `npx express-generator` to create a new Express app in the current folder. This will create a simple \"Hello World\" Express project that will listen on port `3000`, as follows:\n\n```sh\nmkdir RouterQuickStart\ncd RouterQuickStart\nnpx express-generator\nnpm install\nDEBUG=routerquickstart:* npm start\n```\n\n### Create an ACS resource on Azure\n\nCreate a new Azure Communication service resource on Azure https://ms.portal.azure.com/#home or use existing resource.\n\n### Install the Azure Communication Services Router SDK\n\nIn the application directory, install the Azure Communication Services Router client library for JavaScript package by using the `npm install --save` command\n`npm install @azure/communication-job-router`\n\n## Examples\n\n### Initialize Router Client\n\nFirst we need to initialize a Router client.\n\n```js\nconst { RouterClient } = require(\"@azure/communication-job-router\");\n\nconst acsConnectionString =\n  \"endpoint=https://<YOUR_ACS>.communication.azure.com/;accesskey=<YOUR_ACCESS_KEY>\";\nconst routerClient = new RouterClient(acsConnectionString);\nconst routerAdministrationClient = new RouterAdministrationClient(acsConnectionString);\n```\n\n## Configure Queue and Workers\n\n### Configure distribution policy\n\nCreate a distribution policy that will determine which workers will receive jobs as they are distributed off the queues.\n\n```js\nconst distributionPolicy = await routerAdministrationClient.createDistributionPolicy(\"Default\", {\n  name: \"Default Distribution Policy\",\n  offerTTL: { seconds: 30 },\n  mode: {\n    objectType: \"longest-idle\",\n    minConcurrentOffers: 1,\n    maxConcurrentOffers: 3,\n  },\n});\n```\n\n### Create a queue\n\nThen we create a sales queue with various labels.\n\n```js\nconst salesQueueResponse = await routerAdministrationClient.createQueue(\"Sales\", {\n  name: \"Sales\",\n  distributionPolicyId: distributionPolicy.Id,\n  labels: {\n    Department: \"Xbox\",\n  },\n});\n```\n\n### Register workers\n\nRegister workers \u201cBob\u201d and \u201cAlice\u201d with various labels.\n\n```js\n// Create worker Bob\nconst workerId = \"21837c88-6967-4078-86b9-1207821a8392\";\nconst bobWorkerResponse = await routerClient.createWorker(workerId, {\n  totalCapacityScore: 100,\n  labels: {\n    Xbox: 5,\n    English: 3\n    name: \"Bob\"\n  },\n  queueAssignments: { [salesQueueResponse.Id]: {} },\n  availableForOffers: true\n});\n\n// Create worker Alice\nconst workerAliceId = \"773accfb-476e-42f9-a202-b211b41a4ea4\";\nconst aliceWorkerResponse = await routerClient.createWorker(workerAliceId, {\n  totalCapacityScore: 120,\n  labels: {\n    Xbox: 5,\n    name: \"Alice\",\n    German: 4\n  },\n  queueAssignments: { [salesQueueResponse.Id]: {} },\n  availableForOffers: true\n});\n```\n\n### Creating a job\n\nIf your application can determine the correct queue, labels and/or priority, you can directly create a job with these values.\n\n```js\nawait routerClient.createJob(\"asdaccfb-476e-42f9-a202-b211b41a4ea4\", {\n  channelReference: \"66e4362e-aad5-4d71-bb51-448672ebf492\",\n  channelId: \"Voice\",\n  priority: 2,\n  queueId: salesQueueResponse.Id,\n});\n```\n\n### Configure classification policy\n\nCreate a classification policy that will house queue selectors, prioritization rule and worker selectors in order to classify incoming job.\n\n```js\nconst classificationPolicy = await routerAdministrationClient.createClassificationPolicy(\"Default\", {\n  name: \"Default Classification Policy\",\n  fallbackQueueId: salesQueueResponse.Id,\n  queueSelectors: [{\n    kind: \"static\",\n    labelSelector: { key: \"Department\", labelOperator: \"equal\", value: \"Xbox\" }\n  }],\n  workerSelectors: [{\n    kind: \"static\",\n    labelSelector: { key: \"english\", labelOperator: \"greaterThan\", value: 5 }\n  }],\n  prioritizationRule: {\n    kind: \"expression-rule\",\n    language: \"powerFx\";\n    expression: \"If(job.department = \\\"xbox\\\", 2, 1)\"\n  }\n});\n```\n\n### Creating Job via using classification policy\n\n```js\nawait routerClient.createJob(\"fdw2rcfb-476e-42f9-a202-b211b41a4ea4\", {\n  // e.g. callId or chat threadId\n  channelReference: \"a7c54dc6-c545-4151-a195-41e9e35b17c6\",\n  channelId: \"Voice\",\n  classificationPolicyId: classificationPolicy.Id,\n  labels: {\n    department: \"xbox\",\n  },\n});\n```\n\n### Receive events for jobs in queue\n\nCommunication Services Router events are delivered to customers via Azure Event Grid. See [subscribe events](https://learn.microsoft.com/azure/communication-services/how-tos/router-sdk/subscribe-events) on how to setup and handle Router events.\nIn above example, the incoming call gets routed to \u201cSales Queue\u201d queue and a worker is matched to handle the job and an OfferIssued event will arrive at event grid with matched worker information.\nOnce you setup to handle events by following steps in above link. Job events will be sent to your endpoint. Json payload of a sample event looks like this:\n\n```json\n{\n  \"id\": \"1027db4a-17fe-4a7f-ae67-276c3120a29f\",\n  \"topic\": \"/subscriptions/{subscription-id}/resourceGroups/{group-name}/providers/Microsoft.Communication/communicationServices/{communication-services-resource-name}\",\n  \"subject\": \"worker/{worker-id}/job/{job-id}\",\n  \"data\": {\n    \"workerId\": \"w100\",\n    \"jobId\": \"7f1df17b-570b-4ae5-9cf5-fe6ff64cc712\",\n    \"channelReference\": \"test-abc\",\n    \"channelId\": \"FooVoiceChannelId\",\n    \"queueId\": \"625fec06-ab81-4e60-b780-f364ed96ade1\",\n    \"offerId\": \"525fec06-ab81-4e60-b780-f364ed96ade1\",\n    \"offerTimeUtc\": \"2021-06-23T02:43:30.3847144Z\",\n    \"expiryTimeUtc\": \"2021-06-23T02:44:30.3847674Z\",\n    \"jobPriority\": 5,\n    \"jobLabels\": {\n      \"Locale\": \"en-us\",\n      \"Segment\": \"Enterprise\",\n      \"Token\": \"FooToken\"\n    },\n    \"jobTags\": {\n      \"Locale\": \"en-us\",\n      \"Segment\": \"Enterprise\",\n      \"Token\": \"FooToken\"\n    }\n  },\n  \"eventType\": \"Microsoft.Communication.RouterWorkerOfferIssued\",\n  \"dataVersion\": \"1.0\",\n  \"metadataVersion\": \"1\",\n  \"eventTime\": \"2022-02-17T00:55:25.1736293Z\"\n}\n```\n\n### Subscribing to events\n\n1. Navigate to your Azure Communication Services resource in the Azure portal and open the \u201cEvents\u201d blade.\n2. Add an event subscription for the \u201cRouter OfferIssued\u201d event and set it to go to a WebHook endpoint within your application. Other options for receiving the events include Azure Functions, Service Bus, etc. See [EventGrid documentation](https://docs.microsoft.com/azure/event-grid/overview) for details.\n3. The route in your NodeJS application that receives these notifications may look something like this:\n\n```js\napp.post('/event', (req, res) => {\n    req.body.forEach(eventGridEvent => {\n        // Deserialize the event data into the appropriate type based on event type using if/elif/else\n        if (eventGridEvent.eventType == \"Microsoft.EventGrid.SubscriptionValidationEvent\") {\n            res.send({ validationResponse: eventGridEvent.data.validationCode };\n        } else if (eventGridEvent.eventType == \"Microsoft.Azure.CommunicationServices.RouterWorkerOfferIssued\") {\n           // Got RouterWorkerOfferIssued event;\n        } else ...\n    });\n    ...\n});\n```\n\n### Accept Job\n\nOnce you receive an OfferIssued event, you can accept or decline the Job with the following SDK call, passing in the worker's ACS identity so that they can be added to the job.\n\n```js\nawait routerClient.acceptJobOffer(workerId, offerId);\n```\n\n### Complete Job\n\nOnce the worker has accepted the job, the response will include an assignment ID. This can in turn be used to complete the job once a resolution has been reached, which will transition the job into a \"wrap-up\" state.\n\n```js\nawait routerClient.completeJob(jobId, assignmentId);\n```\n\n### Close Job\n\nOnce the worker has completed the wrap-up phase of the job the worker can finally close the job and attach a disposition code to it for future reference.\n\n```js\nawait routerClient.closeJob(jobId, assignmentId, { dispositionCode: \"Resolved\" });\n```\n\n## Next steps\n\nPlease take a look at the\n[samples](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/communication/)\ndirectory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/master/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for Javascript](https://github.com/Azure/azure-sdk-for-js)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_powershell]: https://docs.microsoft.com/powershell/module/az.communication/new-azcommunicationservice\n",
        "repo_name": "communication/communication-job-router",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/communication/communication-job-router",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Communication Network Traversal client library for JavaScript\n\nAzure Communication Network Traversal is managing tokens for Azure Communication Services. \n\nIt will provide TURN credentials to a user.\n\n## Getting started\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n- An existing Communication Services resource. If you need to create the resource, you can use the [Azure Portal][azure_portal], the [Azure PowerShell][azure_powershell], or the [Azure CLI][azure_cli].\n\n### Installing\n\n```bash\nnpm install @azure/communication-network-traversal\nnpm install @azure/communication-identity\n```\n\n### Browser support\n\n#### JavaScript Bundle\n\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n## Examples\n\n## Authentication\n\nYou can get a key and/or connection string from your Communication Services resource in [Azure Portal][azure_portal]. Once you have a key, you can authenticate the `CommunicationRelayClient` with any of the following methods:\n\n### Create `KeyCredential` with `AzureKeyCredential` before initializing the client\n\n```typescript\nimport { AzureKeyCredential } from \"@azure/core-auth\";\nimport { CommunicationRelayClient } from \"@azure/communication-network-traversal\";\n\nconst credential = new AzureKeyCredential(KEY);\nconst client = new CommunicationRelayClient(ENDPOINT, credential);\n```\n\n### Using a connection string\n\n```typescript\nimport { CommunicationRelayClient } from \"@azure/communication-network-traversal\";\n\nconst connectionString = `endpoint=ENDPOINT;accessKey=KEY`;\nconst client = new CommunicationRelayClient(connectionString);\n```\n\n### Using a `TokenCredential`\n\n```typescript\nimport { DefaultAzureCredential } from \"@azure/identity\";\nimport { CommunicationRelayClient } from \"@azure/communication-network-traversal\";\n\nconst credential = new DefaultAzureCredential();\nconst client = new CommunicationRelayClient(ENDPOINT, credential);\n```\n\nIf you use a key to initialize the client you will also need to provide the appropriate endpoint. You can get this endpoint from your Communication Services resource in [Azure Portal][azure_portal].\n\n## Usage\n\n### Creating an instance of CommunicationRelayClient\n\n```typescript\nimport { CommunicationRelayClient } from \"@azure/communication-network-traversal\";\n\nconst client = new CommunicationRelayClient(CONNECTION_STRING);\n```\n\n### Creating an instance of CommunicationIdentityClient to create a user\n\n```typescript\nimport { CommunicationIdentityClient } from \"@azure/communication-identity\";\n\nconst client = new CommunicationIdentityClient(CONNECTION_STRING);\n```\n\nUse the `createUser` method to create a new user.\n\n```typescript\nconst user = await client.createUser();\n```\n\n### Getting the configurationRelay\n\nUse the `getConfigurationRelay` method to get new TURN credentials providing a user\n\n```typescript\nconst config = await relayClient.getRelayConfiguration(user);\n```\n\nAlso you can call the `getConfigurationRelay` method without providing a user\n\n```typescript\nconst config = await relayClient.getRelayConfiguration();\n```\n\nYou can specify a RouteType when calling `getConfigurationRelay`\n\n```typescript\nconst config = await relayClient.getRelayConfiguration(user, \"nearest\");\n```\n\n## Troubleshooting\n\n## Next steps\n\nPlease take a look at the\n[samples](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/communication/communication-network-traversal/samples)\ndirectory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for Javascript](https://github.com/Azure/azure-sdk-for-js)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_powershell]: https://docs.microsoft.com/powershell/module/az.communication/new-azcommunicationservice\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js)\n",
        "repo_name": "communication/communication-network-traversal",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/communication/communication-network-traversal",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Communication Phone Numbers client library for JavaScript\n\nThe phone numbers library provides capabilities for phone number administration.\n\nPurchased phone numbers can come with many capabilities, depending on the country, number type and assignment type. Examples of capabilities are SMS inbound and outbound usage, PSTN inbound and outbound usage. Phone numbers can also be assigned to a bot via a webhook URL.\n\n## Getting started\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n- An existing Communication Services resource. If you need to create the resource, you can use the [Azure Portal][azure_portal], the [Azure PowerShell][azure_powershell], or the [Azure CLI][azure_cli].\n\n### Installing\n\n```bash\nnpm install @azure/communication-phone-numbers\n```\n\n### Browser support\n\n#### JavaScript Bundle\n\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\nThis SDK provides functionality to easily manage `direct offer` and `direct routing` numbers.\n\nThe `direct offer` numbers come in two types: Geographic and Toll-Free. Geographic phone plans are phone plans associated with a location, whose phone numbers' area codes are associated with the area code of a geographic location. Toll-Free phone plans are phone plans not associated location. For example, in the US, toll-free numbers can come with area codes such as 800 or 888.\nThey are managed using the `PhoneNumbersClient`\n\nThe `direct routing` feature enables connecting your existing telephony infrastructure to ACS.\nThe configuration is managed using the `SipRoutingClient`, which provides methods for setting up SIP trunks and voice routing rules, in order to properly handle calls for your telephony subnet.\n\n### Phone numbers client\n\n#### Phone number types\n\nPhone numbers come in two types; Geographic and Toll-Free. Geographic phone numbers are phone numbers associated with a location, whose area codes are associated with the area code of a geographic location. Toll-Free phone numbers are not associated with a location. For example, in the US, toll-free numbers can come with area codes such as 800 or 888.\n\nAll geographic phone numbers within the same country are grouped into a phone plan group with a Geographic phone number type. All Toll-Free phone numbers within the same country are grouped into a phone plan group.\n\n#### Searching and acquiring numbers\n\nPhone numbers can be searched through the search creation API by providing a phone number type (geographic or toll-free), assignment type (person or application), calling and sms capabilities, an area code and quantity of phone numbers. The provided quantity of phone numbers will be reserved for 15 minutes. This search of phone numbers can either be cancelled or purchased. If the search is cancelled, then the phone numbers will become available to others. If the search is purchased, then the phone numbers are acquired for the Azure resource.\n\n#### Configuring phone numbers\n\nPhone numbers can have a combination of capabilities. They can be configured to support inbound and/or outbound calling, or neither if you won't use the phone number for calling. The same applies to sms capabilities.\n\nIt is important to consider the assignment type of your phone number. Some capabilities are restricted to a particular assignment type.\n\n### SIP routing client\n\nDirect routing feature allows connecting customer-provided telephony infrastructure to Azure Communication Resources. In order to setup routing configuration properly, customer needs to supply the SIP trunk configuration and SIP routing rules for calls. SIP routing client provides the necessary interface for setting this configuration.\n\nWhen a call is made, system tries to match the destination number with regex number patterns of defined routes. The first route to match the number will be selected. The order of regex matching is the same as the order of routes in configuration, therefore the order of routes matters.\nOnce a route is matched, the call is routed to the first trunk in the route's trunks list. If the trunk is not available, next trunk in the list is selected.\n\n## Examples\n\n## Authentication\n\nTo create a client object to access the Communication Services API, you will need a `connection string` or the `endpoint` of your Communication Services resource and a `credential`. The Phone Numbers client can use either Azure Active Directory credentials or an API key credential to authenticate.\n\nYou can get a key and/or connection string from your Communication Services resource in the [Azure Portal][azure_portal]. You can also find the endpoint for your Communication Services resource in the [Azure Portal][azure_portal].\n\nOnce you have a key, you can authenticate the client with any of the following methods:\n\n### Using a connection string\n\n```typescript\nimport { PhoneNumbersClient } from \"@azure/communication-phone-numbers\";\n\nconst connectionString = \"endpoint=<endpoint>;accessKey=<accessKey>\";\nconst client = new PhoneNumbersClient(connectionString);\n```\n\n```typescript\nimport { SipRoutingClient } from \"@azure/communication-phone-numbers\";\n\nconst connectionString = \"endpoint=<endpoint>;accessKey=<accessKey>\";\nconst client = new SipRoutingClient(connectionString);\n```\n\n### Using an access key with `AzureKeyCredential`\n\nIf you use a key to initialize the client you will also need to provide the appropriate endpoint. You can get this endpoint from your Communication Services resource in [Azure Portal][azure_portal]. Once you have a key and endpoint, you can authenticate with the following code:\n\n```typescript\nimport { AzureKeyCredential } from \"@azure/core-auth\";\nimport { PhoneNumbersClient } from \"@azure/communication-phone-numbers\";\n\nconst credential = new AzureKeyCredential(\"<key-from-resource>\");\nconst client = new PhoneNumbersClient(\"<endpoint-from-resource>\", credential);\n```\n\n```typescript\nimport { AzureKeyCredential } from \"@azure/core-auth\";\nimport { SipRoutingClient } from \"@azure/communication-phone-numbers\";\n\nconst credential = new AzureKeyCredential(\"<key-from-resource>\");\nconst client = new SipRoutingClient(\"<endpoint-from-resource>\", credential);\n```\n\n### Using an Azure Active Directory Credential\n\nConnection string authentication is used in most of the examples, but you can also authenticate with Azure Active Directory using the [Azure Identity library][azure_identity]. To use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the [`@azure/identity`][azure_identity] package:\n\n```bash\nnpm install @azure/identity\n```\n\nThe [`@azure/identity`][azure_identity] package provides a variety of credential types that your application can use to do this. The [README for `@azure/identity`][azure_identity_readme] provides more details and samples to get you started.\n\n```typescript\nimport { DefaultAzureCredential } from \"@azure/identity\";\nimport { PhoneNumbersClient } from \"@azure/communication-phone-numbers\";\n\nlet credential = new DefaultAzureCredential();\nconst client = new PhoneNumbersClient(\"<endpoint-from-resource>\", credential);\n```\n\n```typescript\nimport { DefaultAzureCredential } from \"@azure/identity\";\nimport { SipRoutingClient } from \"@azure/communication-phone-numbers\";\n\nlet credential = new DefaultAzureCredential();\nconst client = new SipRoutingClient(\"<endpoint-from-resource>\", credential);\n```\n\n## Usage\n\nThe following sections provide code snippets that cover some of the common tasks using the Azure Communication Services Phone Numbers client. The scenarios that are covered here consist of:\n\nPhoneNumbersClient\n- [Search for available phone numbers](#search-for-available-phone-numbers)\n- [Purchase phone numbers from a search](#purchase-phone-numbers-from-a-search)\n- [Release a purchased phone number](#release-a-purchased-phone-number)\n- [Update phone number capabilities](#update-phone-number-capabilities)\n- [Get a purchased phone number](#get-a-purchased-phone-number)\n- [List purchased phone numbers](#list-purchased-phone-numbers)\n\nSipRoutingClient\n- [Retrieve SIP trunks and routes](#retrieve-sip-trunks-and-routes)\n- [Replace SIP trunks and routes](#replace-sip-trunks-and-routes)\n- [Retrieve single trunk](#retrieve-single-trunk)\n- [Set single trunk](#set-single-trunk)\n- [Delete single trunk](#delete-single-trunk)\n\n### PhoneNumbersClient\n\n#### Search for available phone numbers\n\nUse the `beginSearchAvailablePhoneNumbers` method to search for phone numbers and reserve them. The phone numbers returned are reserved for 15 minutes and can be purchased during this period by providing the `searchId` to the `beginPurchasePhoneNumbers` method.\n\n`beginSearchAvailablePhoneNumbers` is a long running operation and returns a poller.\n\n```typescript\nimport {\n  PhoneNumbersClient,\n  SearchAvailablePhoneNumbersRequest\n} from \"@azure/communication-phone-numbers\";\n\nconst connectionString = \"endpoint=<endpoint>;accessKey=<accessKey>\";\nconst client = new PhoneNumbersClient(connectionString);\n\nasync function main() {\n  const searchRequest: SearchAvailablePhoneNumbersRequest = {\n    countryCode: \"US\",\n    phoneNumberType: \"tollFree\",\n    assignmentType: \"application\",\n    capabilities: {\n      sms: \"outbound\",\n      calling: \"none\"\n    },\n    quantity: 1\n  };\n\n  const searchPoller = await client.beginSearchAvailablePhoneNumbers(searchRequest);\n\n  // The search is underway. Wait to receive searchId.\n  const searchResults = await searchPoller.pollUntilDone();\n  console.log(`Found phone number: ${searchResults.phoneNumbers[0]}`);\n  console.log(`searchId: ${searchResults.searchId}`);\n}\n\nmain();\n```\n\n#### Purchase phone numbers from a search\n\nUse the `beginPurchasePhoneNumbers` method to purchase the phone numbers from your search. Purchased phone numbers will be assigned to the Communication Services resource used when initiating the client. The `searchId` returned from `beginSearchAvailablePhoneNumbers` is required.\n\n`beginPurchasePhoneNumbers` is a long running operation and returns a poller.\n\n```typescript\nimport { PhoneNumbersClient } from \"@azure/communication-phone-numbers\";\n\nconst connectionString = \"endpoint=<endpoint>;accessKey=<accessKey>\";\nconst client = new PhoneNumbersClient(connectionString);\n\nasync function main() {\n  const searchRequest = {\n    countryCode: \"US\",\n    phoneNumberType: \"tollFree\",\n    assignmentType: \"application\",\n    capabilities: {\n      sms: \"outbound\",\n      calling: \"none\"\n    },\n    quantity: 1\n  };\n\n  const searchPoller = await client.beginSearchAvailablePhoneNumbers(searchRequest);\n\n  // The search is underway. Wait to receive searchId.\n  const { searchId, phoneNumbers } = searchPoller.pollUntilDone();\n\n  const purchasePoller = await client.beginPurchasePhoneNumbers(searchId);\n\n  // Purchase is underway.\n  await purchasePoller.pollUntilDone();\n  console.log(`Successfully purchased ${phoneNumbers[0]}`);\n}\n\nmain();\n```\n\n#### Release a purchased phone number\n\nUse the `beginReleasePhoneNumber` method to release a previously purchased phone number. Released phone numbers will no longer be associated with the Communication Services resource, and will not be available for use with other operations (eg. SMS) of the resource. The phone number being released is required.\n\n`beginReleasePhoneNumber` is a long running operation and returns a poller.\n\n```typescript\nimport { PhoneNumbersClient } from \"@azure/communication-phone-numbers\";\n\nconst connectionString = \"endpoint=<endpoint>;accessKey=<accessKey>\";\nconst client = new PhoneNumbersClient(connectionString);\n\nasync function main() {\n  const phoneNumberToRelease = \"<phone-number-to-release>\";\n\n  const releasePoller = await client.beginReleasePhoneNumber(phoneNumberToRelease);\n\n  // Release is underway.\n  await releasePoller.pollUntilDone();\n  console.log(\"Successfully release phone number.\");\n}\n\nmain();\n```\n\n#### Update phone number capabilities\n\nUse the `beginUpdatePhoneNumberCapabilities` method to update the capabilities of a purchased phone number. Phone numbers can be configured to support inbound and/or outbound calling and sms, or neither.\n\n`beginUpdatePhoneNumberCapabilities` is a long running operation and returns a poller.\n\n```typescript\nimport {\n  PhoneNumbersClient,\n  PhoneNumberCapabilitiesRequest\n} from \"@azure/communication-phone-numbers\";\n\nconst connectionString = \"endpoint=<endpoint>;accessKey=<accessKey>\";\nconst client = new PhoneNumbersClient(connectionString);\n\nasync function main() {\n  const phoneNumberToUpdate = \"<phone-number-to-update>\";\n\n  // This will update phone number to send and receive sms, but only send calls.\n  const updateRequest: PhoneNumberCapabilitiesRequest = {\n    sms: \"inbound+outbound\",\n    calling: \"outbound\"\n  };\n\n  const updatePoller = await client.beginUpdatePhoneNumberCapabilities(\n    phoneNumberToUpdate,\n    updateRequest\n  );\n\n  // Update is underway.\n  const { capabilities } = await updatePoller.pollUntilDone();\n  console.log(`These are the update capabilities: ${capabilities}`);\n}\n\nmain();\n```\n\n#### Get a purchased phone number\n\nUse the `getPurchasedPhoneNumber` method to get information about a purchased phone number. This information includes the phone number's type, capabilities, cost, and purchase date.\n\n```typescript\nimport { PhoneNumbersClient } from \"@azure/communication-phone-numbers\";\n\nconst connectionString = \"endpoint=<endpoint>;accessKey=<accessKey>\";\nconst client = new PhoneNumbersClient(connectionString);\n\nasync main function() {\n  const phoneNumberToGet = \"<phone-number-to-get>\";\n\n  const phoneNumber = await client.getPurchasedPhoneNumber(phoneNumberToGet);\n\n  console.log(`The id is the same as the phone number: ${phoneNumber.id}`);\n  console.log(`Phone number type is ${phoneNumber.phoneNumberType}`);\n}\n\nmain();\n```\n\n#### List purchased phone numbers\n\nUse the `listPurchasedPhoneNumbers` method to page through all purchased phone numbers.\n\n```typescript\nimport { PhoneNumbersClient } from \"@azure/communication-phone-numbers\";\n\nconst connectionString = \"endpoint=<endpoint>;accessKey=<accessKey>\";\nconst client = new PhoneNumbersClient(connectionString);\n\nasync main function() {\n  const phoneNumbers = await client.listPurchasedPhoneNumbers();\n\n  for await (const phoneNumber of phoneNumbers) {\n    console.log(`The id is the same as the phone number: ${phoneNumber.id}`);\n    console.log(`Phone number type is ${phoneNumber.phoneNumberType}`);\n  }\n}\n\nmain();\n```\n\n### SipRoutingClient\n\n#### Retrieve SIP trunks and routes\n\nGet the list of currently configured trunks or routes.\n\n```typescript\nimport { SipRoutingClient } from \"@azure/communication-phone-numbers\";\n\nconst connectionString = \"endpoint=<endpoint>;accessKey=<accessKey>\";\nconst client = new SipRoutingClient(connectionString);\n\nasync function main() {\n  const trunks = await client.listTrunks();\n  const routes = await client.listRoutes();\n  for await(const trunk of trunks) {\n    console.log(`Trunk ${trunk.fqdn}:${trunk.sipSignalingPort}`);\n  }\n  \n  for await(const route of routes) {\n    console.log(`Route ${route.name} with pattern ${route.numberPattern}`);\n    console.log(`Route's trunks: ${route.trunks?.join()}`);\n  }\n}\n\nmain();\n```\n\n#### Replace SIP trunks and routes\n\nReplace the list of currently configured trunks or routes with new values.\n\n```typescript\nimport { SipRoutingClient } from \"@azure/communication-phone-numbers\";\n\nconst connectionString = \"endpoint=<endpoint>;accessKey=<accessKey>\";\nconst client = new SipRoutingClient(connectionString);\n\nasync function main() {\n  await client.setTrunks([\n    {\n      fqdn: 'sbc.one.domain.com',\n      sipSignalingPort: 1234\n    },{\n      fqdn: 'sbc.two.domain.com',\n      sipSignalingPort: 1234\n    }\n  ]);\n\n  await client.setRoutes([\n    {\n      name: \"First Route\",\n      description: \"route's description\",\n      numberPattern: \"^\\+[1-9][0-9]{3,23}$\",\n      trunks: [ 'sbc.one.domain.com' ]\n    },{\n      name: \"Second Route\",\n      description: \"route's description\",\n      numberPattern: \"^.*$\",\n      trunks: [ 'sbc.two.domain.com', 'sbc.one.domain.com' ]\n    }\n  ]);\n}\n\nmain();\n```\n\n#### Retrieve single trunk\n\n```typescript\nimport { SipRoutingClient } from \"@azure/communication-phone-numbers\";\n\nconst connectionString = \"endpoint=<endpoint>;accessKey=<accessKey>\";\nconst client = new SipRoutingClient(connectionString);\n\nasync function main() {\n  const trunk = await client.getTrunk('sbc.one.domain.com');\n  if (trunk) {\n    console.log(`Trunk ${trunk.fqdn}:${trunk.sipSignalingPort}`);\n  } else {\n      console.log('Trunk not found')\n  }\n}\n\nmain();\n```\n\n#### Set single trunk\n\n```typescript\nimport { SipRoutingClient } from \"@azure/communication-phone-numbers\";\n\nconst connectionString = \"endpoint=<endpoint>;accessKey=<accessKey>\";\nconst client = new SipRoutingClient(connectionString);\n\nasync function main() {\n  await client.setTrunk({\n    fqdn: 'sbc.one.domain.com',\n    sipSignalingPort: 4321\n  });\n}\n\nmain();\n```\n\n#### Delete single trunk\n\n```typescript\nimport { SipRoutingClient } from \"@azure/communication-phone-numbers\";\n\nconst connectionString = \"endpoint=<endpoint>;accessKey=<accessKey>\";\nconst client = new SipRoutingClient(connectionString);\n\nasync function main() {\n  await client.deleteTrunk('sbc.one.domain.com');\n}\n\nmain();\n```\n\n## Troubleshooting\n\n## Next steps\n\nPlease take a look at the\n[samples](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/communication/communication-phone-numbers/samples)\ndirectory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for Javascript](https://github.com/Azure/azure-sdk-for-js)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_powershell]: https://docs.microsoft.com/powershell/module/az.communication/new-azcommunicationservice\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[azure_identity_readme]: https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/identity/identity/README.md\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fcommunication%2Fcommunication-phone-numbers%2FREADME.png)\n",
        "repo_name": "communication/communication-phone-numbers",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/communication/communication-phone-numbers",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Communication Recipient Verification client library for JavaScript\n\nThe Recipient Verification library allows users to verify the phone number of recipients before sending messages or making calls to the phone number.\n\n## Getting started\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n- An existing Communication Services resource. If you need to create the resource, you can use the [Azure Portal][azure_portal], the [Azure PowerShell][azure_powershell], or the [Azure CLI][azure_cli].\n\n### Installing\n\n```bash\nnpm install @azure-tools/communication-recipient-verification\n```\n\n### Browser support\n\n#### JavaScript Bundle\n\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n## Examples\n\n## Authentication\n\nTo create a client object to access the Communication Services API, you will need a `connection string` or the `endpoint` of your Communication Services resource and a `credential`. The Recipient Verification client can use either Azure Active Directory credentials or an API key credential to authenticate.\n\nYou can get a key and/or connection string from your Communication Services resource in the [Azure Portal][azure_portal]. You can also find the endpoint for your Communication Services resource in the [Azure Portal][azure_portal].\n\nOnce you have a key, you can authenticate the `RecipientVerificationClient` with any of the following methods:\n\n### Using a connection string\n\n```javascript\nconst {\n  RecipientVerificationClient,\n} = require(\"@azure-tools/communication-recipient-verification\");\nconst connectionString = \"endpoint=<endpoint>;accessKey=<accessKey>\";\nconst client = new RecipientVerificationClient(connectionString);\n```\n\n### Using an access key with `AzureKeyCredential`\n\nIf you use a key to initialize the client you will also need to provide the appropriate endpoint. You can get this endpoint from your Communication Services resource in [Azure Portal][azure_portal]. Once you have a key and endpoint, you can authenticate with the following code:\n\n```javascript\nconst { AzureKeyCredential } = require(\"@azure/core-auth\");\nconst {\n  RecipientVerificationClient,\n} = require(\"@azure-tools/communication-recipient-verification\");\nconst credential = new AzureKeyCredential(\"<key-from-resource>\");\nconst client = new RecipientVerificationClient(\"<endpoint-from-resource>\", credential);\n```\n\n### Using an Azure Active Directory Credential\n\nConnection string authentication is used in most of the examples, but you can also authenticate with Azure Active Directory using the [Azure Identity library][azure_identity]. To use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the [`@azure/identity`][azure_identity] package:\n\n```bash\nnpm install @azure/identity\n```\n\nThe [`@azure/identity`][azure_identity] package provides a variety of credential types that your application can use to do this. The [README for `@azure/identity`][azure_identity_readme] provides more details and samples to get you started.\n\n```javascript\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst {\n  RecipientVerificationClient,\n} = require(\"@azure-tools/communication-recipient-verification\");\n\nlet credential = new DefaultAzureCredential();\nconst client = new RecipientVerificationClient(\"<endpoint-from-resource>\", credential);\n```\n\n## Usage\n\nThe following sections provide code snippets that cover some of the common tasks using the Azure Communication Services Recipient Verification Client. The scenarios that are covered here consist of:\n\n- [Request phone number verification code](#request-phone-number-verification-code)\n- [Verify phone number](#verify-phone-number)\n- [Remove a verified number](#remove-verified-number)\n- [Get verified numbers](#get-verified-numbers)\n\n### Request phone number verification code\n\n```typescript\nimport { RecipientVerificationClient } from \"@azure-tools/communication-recipient-verification\";\nconst connectionString = \"endpoint=<endpoint>;accessKey=<accessKey>\";\nconst client = new RecipientVerificationClient(connectionString);\n\nasync main function() {\n  // body of the request\n  const VerificationRequest = {\n    identity: \"+11234567890\",\n    channel: \"sms\",\n  };\n\n  // get the verification status\n  var status = await client.requestVerification(VerificationRequest);\n  console.log(status);\n}\n\nmain();\n```\n\n### Verify phone number\n\n```typescript\nimport { RecipientVerificationClient } from \"@azure-tools/communication-recipient-verification\";\nconst connectionString = \"endpoint=<endpoint>;accessKey=<accessKey>\";\nconst client = new RecipientVerificationClient(connectionString);\n\nasync main function() {\n  // id that is used to reference users phone number\n  const verificationId = \"7e5dd7e1-5203-41ab-960e-65c1eb804fc6\";\n\n  // body of the request\n  const VerificationRequest = {\n    verificationCode: \"1234567\",\n  };\n\n  // verifying your phone number\n  const status = await client.verifyIdentity(verificationId, VerificationRequest);\n  console.log(status);\n}\n\nmain();\n```\n\n### Remove verified number\n\n```typescript\nimport { RecipientVerificationClient } from \"@azure-tools/communication-recipient-verification\";\nconst connectionString = \"endpoint=<endpoint>;accessKey=<accessKey>\";\nconst client = new RecipientVerificationClient(connectionString);\n\nasync main function() {\n  // id that is used to reference users phone number\n  const verificationId = \"4d313ff0-3aeb-477e-8c15-7c9a893e8999\";\n\n  // delete verification for a resource\n  await client.deleteVerification(verificationId);\n}\n\nmain();\n```\n\n### Get verified numbers\n\n```typescript\nimport { RecipientVerificationClient } from \"@azure-tools/communication-recipient-verification\";\nconst connectionString = \"endpoint=<endpoint>;accessKey=<accessKey>\";\nconst client = new RecipientVerificationClient(connectionString);\n\nasync main function() {\n  // get all verifications for a resource\n  var verifications = await client.getVerifications();\n\n  // print all verifications\n  for await (const verification of verifications) {\n    console.log(verification);\n  }\n}\n\nmain();\n```\n\n## Troubleshooting\n\n## Next steps\n\nPlease take a look at the samples directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for Javascript](https://github.com/Azure/azure-sdk-for-js)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_powershell]: https://docs.microsoft.com/powershell/module/az.communication/new-azcommunicationservice\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[azure_identity_readme]: https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/identity/identity/README.md\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fcommunication%2Fcommunication-toll-free-verification%2FREADME.png)\n",
        "repo_name": "communication/communication-recipient-verification",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/communication/communication-recipient-verification",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure RoomsApi client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure RoomsApi client.\n\nCommunication Rooms Client\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/communication/communication-rooms) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/communication-rooms) |\n[Samples](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/communication/communication-rooms/samples)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n- An existing Communication Services resource. If you need to create the resource, you can use the [Azure Portal][azure_portal], the [Azure PowerShell][azure_powershell], or the [Azure CLI][azure_cli].\n\n### JavaScript Bundle\n\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n### Installing\n\n```bash\nnpm install @azure/communication-rooms\n```\n\n## Key concepts\n\n### RoomsApiClient\n\n`RoomsClient` is the primary interface for developers using the Azure RoomsApi client library. Explore the methods on this client object to understand the different features of the Azure RoomsApi service that you can access.\n\n## Examples\n\n## Authentication\n\nYou can get a key and/or connection string from your Communication Services resource in [Azure Portal][azure_portal]. Once you have a key, you can authenticate the `RoomsClient` with any of the following methods:\n\n### Create `KeyCredential` with `AzureKeyCredential` before initializing the client\n\n```typescript\nimport { AzureKeyCredential } from \"@azure/core-auth\";\nimport { RoomsClient } from \"@azure/communication-rooms\";\n\nconst credential = new AzureKeyCredential(KEY);\nconst client = new RoomsClient(ENDPOINT, credential);\n```\n\n### Using a connection string\n\n```typescript\nimport { RoomsClient } from \"@azure/communication-rooms\";\n\nconst connectionString = `endpoint=ENDPOINT;accessKey=KEY`;\nconst client = new RoomsClient(connectionString);\n```\n\n### Using a `TokenCredential`\n\n```typescript\nimport { DefaultAzureCredential } from \"@azure/identity\";\nimport { RoomsClient } from \"@azure/communication-rooms\";\n\nconst credential = new DefaultAzureCredential();\nconst client = new RoomsClient(ENDPOINT, credential);\n```\n\nIf you use a key to initialize the client you will also need to provide the appropriate endpoint. You can get this endpoint from your Communication Services resource in [Azure Portal][azure_portal].\n\n## Usage\n\n### Create a room\n\nTo create a room, call the `createRoom` method. All settings are optional.\n\nIf `validFrom` is not provided, it is defaulted to the current datetime. If `validUntil` is not provided, the default is `validFrom + 180 days`.\n\nWhen defining `participants`, if `role` is not specified, then it will be `attendee` by default.\n\n```js\n// create users with CommunicationIdentityClient\nconst identityClient = new CommunicationIdentityClient(connectionString);\nconst user1 = await identityClient.createUserAndToken([\"voip\"]);\n\n// create RoomsClient\nconst roomsClient: RoomsClient = new RoomsClient(CONNECTION_STRING);\n\nconst validFrom = new Date(Date.now());\nlet validForDays = 10;\nlet validUntil = new Date(validFrom.getTime());\nvalidUntil.setDate(validFrom.getDate() + validForDays);\n\n// options payload to create a room\nconst createRoomOptions: CreateRoomOptions = {\n  validFrom,\n  validUntil,\n  participants: [\n    {\n      id: user1.user,\n      role: \"Attendee\",\n    },\n  ],\n};\n\n// create room\nconst room = await roomsClient.createRoom(createRoomOptions);\n```\n\n[Find CommunicationIdentityClient here](https://github.com/Azure/azure-sdk-for-js/edit/main/sdk/communication/communication-identity)\n\n### Update a room\n\nTo update the `validFrom` and `validUntil` settings of a room use the `updateRoom` method.\n\n```js\nvalidForDays = 60;\nvalidUntil.setDate(validFrom.getDate() + validForDays);\nconst updateRoomOptions: UpdateRoomOptions = {\n  validFrom,\n  validUntil,\n};\n\n// update the room using the room id from the creation operation\nconst updatedRoom = await roomsClient.updateRoom(room.id, updateRoomOptions);\n```\n\n### Get a room\n\nTo get a room use the `getRoom` method.\n\n```js\nconst roomId = \"ROOM_ID\";\nroom = await roomsClient.getRoom(roomId);\n```\n\n### List rooms\n\nList all rooms using the `listRooms` method.\n\n```js\nconst roomsList = await roomsClient.listRooms();\nfor await (const currentRoom of roomsList) {\n  // access room data\n  console.log(`The room id is ${currentRoom.id}.`);\n}\n```\n\n### Add or update participants\n\nTo add new participants, or update existing participants, use the `addOrUpdateParticipants` method.\n\n```js\nconst user2 = await identityClient.createUserAndToken([\"voip\"]);\nconst updateParticipantsList: InvitedRoomParticipant[] = [\n  {\n    id: user1.user,\n    role: \"Presenter\",\n  },\n  {\n    id: user2.user,\n  },\n];\n\n// run addOrUpdate operation\nawait roomsClient.addOrUpdateParticipants(room.id, updateParticipantsList);\n```\n\n### Remove participants\n\nTo remove participants call the `removeParticipants` method.\n\n```js\nconst participantsToRemove = [user1.user, user2.user];\nawait roomsClient.removeParticipants(room.id, participantsToRemove);\n```\n\n### Get participants in a room\n\nTo list all the participants in a room call the `listParticipants` method.\n\n```js\nconst participantsList = await roomsClient.listParticipants(room.id);\nfor await (const participant of participantsList) {\n  // access participant data\n  console.log(`The participant's role is ${participant.role}.`);\n}\n```\n\n### Delete a room\n\nUse the `deleteRoom` method to delete a room.\n\n```js\nawait roomsClient.deleteRoom(room.id);\n```\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/communication/communication-rooms/samples) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fcommunication%2Fcommunication-rooms%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n[communication_identity]: https://github.com/Azure/azure-sdk-for-js/edit/main/sdk/communication/communication-identity\n",
        "repo_name": "communication/communication-rooms",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/communication/communication-rooms",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Communication Short Codes client library for JavaScript\n\nThe phone numbers library provides capabilities for short codes administration.\n\n## Getting started\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n- An existing Communication Services resource. If you need to create the resource, you can use the [Azure Portal][azure_portal], the [Azure PowerShell][azure_powershell], or the [Azure CLI][azure_cli].\n\n### Installing\n\n```bash\nnpm install @azure-tools/communication-short-codes\n```\n\n### Browser support\n\n#### JavaScript Bundle\n\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\nThe short codes package exposes the `ShortCodesClient` which provides methods to manage short codes.\n\n### Short Code types\n\nShort Codes come in two types; shortCode and alphaId. ShortCode = 5 digit number | alphaId = alphanumeric 5 digit combination.\n\n### Short Codes\n\nShort codes are a type of number that are available to enterprise customers. They come in the form of a 5 or 6 digit number and can be used to send sms similar to how a toll-free or geographic number is used. In order to acquire a short code it is necessary to submit an application, or program brief.\n\n### Program Briefs\n\nA program brief tracks the application for a short code and contains all the information necessary to process the application as well as information on the status of the application and any updates that may be needed. It can take 8-12 weeks for a program brief to be approved and a short code to be issued once the program brief is submitted.\n\n## Examples\n\n## Authentication\n\nTo create a client object to access the Communication Services API, you will need a `connection string` or the `endpoint` of your Communication Services resource and a `credential`. The Phone Numbers client can use either Azure Active Directory credentials or an API key credential to authenticate.\n\nYou can get a key and/or connection string from your Communication Services resource in the [Azure Portal][azure_portal]. You can also find the endpoint for your Communication Services resource in the [Azure Portal][azure_portal].\n\nOnce you have a key, you can authenticate the `ShortCodesClient` with any of the following methods:\n\n### Using a connection string\n\n```typescript\nimport { ShortCodesClient } from \"@azure-tools/communication-short-codes\";\n\nconst connectionString = \"endpoint=<endpoint>;accessKey=<accessKey>\";\nconst client = new ShortCodesClient(connectionString);\n```\n\n### Using an access key with `AzureKeyCredential`\n\nIf you use a key to initialize the client you will also need to provide the appropriate endpoint. You can get this endpoint from your Communication Services resource in [Azure Portal][azure_portal]. Once you have a key and endpoint, you can authenticate with the following code:\n\n```typescript\nimport { AzureKeyCredential } from \"@azure/core-auth\";\nimport { ShortCodesClient } from \"@azure-tools/communication-short-codes\";\n\nconst credential = new AzureKeyCredential(\"<key-from-resource>\");\nconst client = new ShortCodesClient(\"<endpoint-from-resource>\", credential);\n```\n\n### Using an Azure Active Directory Credential\n\nConnection string authentication is used in most of the examples, but you can also authenticate with Azure Active Directory using the [Azure Identity library][azure_identity]. To use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the [`@azure/identity`][azure_identity] package:\n\n```bash\nnpm install @azure/identity\n```\n\nThe [`@azure/identity`][azure_identity] package provides a variety of credential types that your application can use to do this. The [README for `@azure/identity`][azure_identity_readme] provides more details and samples to get you started.\n\n```typescript\nimport { DefaultAzureCredential } from \"@azure/identity\";\nimport { ShortCodesClient } from \"@azure-tools/communication-short-codes\";\n\nlet credential = new DefaultAzureCredential();\nconst client = new ShortCodesClient(\"<endpoint-from-resource>\", credential);\n```\n\n## Usage\n\nThe following sections provide code snippets that cover some of the common tasks using the Azure Communication Services Phone Numbers client. The scenarios that are covered here consist of:\n\n- [Create and submit a program brief](#create-and-submit-program-brief)\n- [Get and delete program briefs](#get-and-delete-program-briefs)\n- [Get and update program brief](#get-and-update-program-brief)\n- [Get short codes](#get-short-codes)\n\n### Create and submit a program brief\nInitialize a `ShortCodesCreateUSProgramBriefParams` object and populate it with the details for your program brief.\n\n```typescript\nimport { ShortCodesClient } from \"@azure-tools/communication-short-codes\";\n\nconst connectionString = \"endpoint=<endpoint>;accessKey=<accessKey>\";\nconst client = new ShortCodesClient(connectionString);\n\nasync main function() {\n  const programBriefId = \"00000000-0000-0000-0000-000000000000\";\n  const programBriefRequest: ShortCodesCreateUSProgramBriefParams = {\n    body: {\n      id: programBriefId,\n      programDetails: {\n        description: \"Customers can sign up to receive regular updates on coupons and other perks of our loyalty program.\",\n        expectedDateOfService: new Date(2022, 1, 25),\n        isPoliticalCampaign: false,\n        isVanity: false,\n        name: \"Contoso Loyalty Program\",\n        numberType: \"shortCode\",\n        privacyPolicyUrl: \"https://contoso.com/privacy\",\n        signUp: \"This program will allow customers to receive exclusive offers and information to help them utilize our loyalty program to their best advantage. Customers who opt-in will receive regular coupons they can use in our stores, as well as advanced notice of sales and other promotional and marketing campaigns.\",\n        signUpTypes: [ \"sms\", \"website\" ],\n        termsOfServiceUrl: \"https://contoso.com/terms\",\n        url: \"https://contoso.com/loyalty-program\"\n      },\n      companyInformation: {\n        address: \"1 Contoso Way Redmond, WA 98052\",\n        name: \"Contoso\",\n        url: \"contoso.com\",\n        contactInformation: {\n          email: \"alex@contoso.com\",\n          name: \"Alex\",\n          phone: \"+14255551234\"\n        },\n        customerCareInformation: {\n          email: \"customercare@contoso.com\",\n          tollFreeNumber: \"+18005551234\"\n        }\n      },\n      messageDetails: {\n        types: [ \"sms\" ],\n        recurrence: \"subscription\",\n        contentTypes: [ \"coupons\", \"loyaltyProgram\", \"loyaltyProgramPointsPrizes\" ],\n        optInMessage: \"Someone requested to subscribe this number to receive updates about Contoso's loyalty program.  To confirm subscription, reply to this message with 'JOIN'\",\n        optInReply: \"JOIN\",\n        confirmationMessage: \"Congrats, you have been successfully subscribed to loyalty program updates.  Welcome!\",\n        useCase: \"two-way\"\n      },\n      trafficDetails: {\n        estimatedVolume: 10000,\n        monthlyAverageMessagesFromUser: 1,\n        monthlyAverageMessagesToUser: 3,\n        isSpiky: true,\n        spikeDetails: \"Higher traffic expected around major shopping holidays, most notably Black Friday and Memorial Day.\"\n      }\n    }\n  }\n}\n\nmain();\n```\n\nThen add a call to `upsertUSProgramBrief` and use the object you created as the parameter. This will create a program brief object which can then be modified as much as needed until it's ready to be submitted.\n\n```typescript\n  // create program brief\n  var createResponse = await client.upsertUSProgramBrief(programBriefId, programBriefRequest);\n  if (createResponse._response.status != 201) {\n    throw new Error(`Program brief creation failed.\n    Status code: ${createResponse._response.status}; Error: ${createResponse._response.bodyAsText}; CV: ${createResponse._response.headers.get(\"MS-CV\")}`);\n  } else {\n    console.log(`Successfully created a new program brief with Id ${programBriefId}.`);\n  }\n```\n\nWhen ready to submit, call `submitUSProgramBrief` to submit for processing. After submission no edits will be allowed unless requested as part of the application process.\n\n```typescript\n  // submit program brief\n  var submittedProgramBrief = await client.submitUSProgramBrief(programBriefId);\n  if (submittedProgramBrief._response.status == 200) {\n    console.log(`Successfully submitted program brief with Id ${programBriefId}`);\n  } else {\n    throw new Error(`Failed to submit program brief with Id ${programBriefId}.\n    Status code: ${submittedProgramBrief._response.status}; Error: ${submittedProgramBrief._response.bodyAsText}; CV: ${submittedProgramBrief._response.headers.get(\"MS-CV\")}`);\n  }\n```\n\n### Get and delete program briefs\nUse the `listUSProgramBriefs` method to page through all program briefs for an ACS resource. Use `deleteUSProgramBrief` to delete unwanted program briefs. Keep in mind that once a program brief is submitted it is not eligible for deletion.\n\n```typescript\nimport { ShortCodesClient } from \"@azure-tools/communication-short-codes\";\n\nconst connectionString = \"endpoint=<endpoint>;accessKey=<accessKey>\";\nconst client = new ShortCodesClient(connectionString);\n\nasync main function() {\n  // get all program briefs for a resource\n  var programBriefs = await client.listUSProgramBriefs();\n\n  // find draft program briefs, and delete them\n  for await (const programBrief of programBriefs) {\n    console.log(`Program Brief with Id ${programBrief.id} has status ${programBrief.status}`);\n\n    // identify drafts\n    if (programBrief.status == 'draft') {\n      var unsubmittedProgramBriefId = programBrief.id;\n    \n      // delete draft program brief\n      var deleteResponse = await client.deleteUSProgramBrief(unsubmittedProgramBriefId);\n      if (deleteResponse._response.status == 200) {\n          console.log(`Successfully deleted draft program brief with Id ${unsubmittedProgramBriefId}`);\n      } else {\n          console.log(`Failed to delete draft program brief with Id ${unsubmittedProgramBriefId}.\n          Status code: ${deleteResponse._response.status}; Error: ${deleteResponse._response.bodyAsText}; CV: ${deleteResponse._response.headers.get(\"MS-CV\")}`);\n      }\n    }\n  }\n}\n\nmain();\n```\n\n### Get and update program brief\nUse the `getUSProgramBrief` to retrieve a single program brief by its Id. Use the `upsertUSProgramBrief` to update a program brief. `upsertUSProgramBrief` accepts a `ShortCodesUpsertUSProgramBriefOptionalParams` object, in which only the fields that are changing need to be set.\n\n```typescript\nimport { ShortCodesClient } from \"@azure-tools/communication-short-codes\";\n\nconst connectionString = \"endpoint=<endpoint>;accessKey=<accessKey>\";\nconst client = new ShortCodesClient(connectionString);\n\nasync main function() {\n  // get a program briefs for a resource\n  const programBriefId = process.env.PROGRAM_BRIEF_TO_GET || \"<program brief Id>\";\n  var programBrief = await client.getUSProgramBrief(programBriefId);\n  console.log(`Program brief with Id ${programBrief.id} has status ${programBrief.status} which was last updated ${programBrief.statusUpdatedDate}`);\n\n  // update the program brief\n  var updateRequest: ShortCodesUpsertUSProgramBriefOptionalParams = {\n      body: {\n          id: programBriefId,\n          programDetails: {\n              privacyPolicyUrl: \"https://contoso.com/updated-privacy\",\n              termsOfServiceUrl: \"https://contoso.com/updated-terms-of-service\"\n          }\n      }\n  };\n  var upsertResponse = await client.upsertUSProgramBrief(programBriefId, updateRequest);\n  if (upsertResponse._response.status == 200) {\n      console.log(`Successfully updated terms of service and privacy policy for program brief ${programBriefId}`);\n  } else {\n      throw new Error(`Failed to update program brief with Id ${programBriefId}.\n      Status code: ${upsertResponse._response.status}; Error: ${upsertResponse._response.bodyAsText}; CV: ${upsertResponse._response.headers.get(\"MS-CV\")}`);\n  }\n}\n\nmain();\n```\n\n### Get short codes\nUse `listShortCodes` to page through all short codes owned by a resource.\n\n```typescript\nimport { ShortCodesClient } from \"@azure-tools/communication-short-codes\";\n\nconst connectionString = \"endpoint=<endpoint>;accessKey=<accessKey>\";\nconst client = new ShortCodesClient(connectionString);\n\nasync main function() {\n  // get all short codes for a resource\n  var shortCodes = await client.listShortCodes();\n\n  // print all short codes\n  for await (const shortCode of shortCodes) {\n    console.log(`${shortCode}`);\n  }\n}\n\nmain();\n```\n\n### Get short code costs\nUse `listShortCodeCosts` to page through all short code costs eligible by a resource.\n\n```typescript\nimport { ShortCodesClient } from \"@azure-tools/communication-short-codes\";\n\nconst connectionString = \"endpoint=<endpoint>;accessKey=<accessKey>\";\nconst client = new ShortCodesClient(connectionString);\n\nasync main function() {\n  // get all eligible short code costs for a resource\n  var shortCodeCosts = await client.listShortCodeCosts();\n\n  // print all short code costs\n  for await (const shortCodeCost of shortCodeCosts) {\n    console.log(`${shortCodeCost}`);\n  }\n}\n\nmain();\n```\n\n## Troubleshooting\n\n## Next steps\n\nPlease take a look at the\n[samples](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/communication/communication-short-codes/samples)\ndirectory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for Javascript](https://github.com/Azure/azure-sdk-for-js)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_powershell]: https://docs.microsoft.com/powershell/module/az.communication/new-azcommunicationservice\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[azure_identity_readme]: https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/identity/identity/README.md\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fcommunication%2Fcommunication-phone-numbers%2FREADME.png)\n",
        "repo_name": "communication/communication-short-codes",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/communication/communication-short-codes",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Communication SMS client library for JavaScript\n\nAzure Communication SMS services gives developers the ability to send SMS messages from a phone number that can be purchased through Communication Services.\n\n## Getting started\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n- An existing Communication Services resource. If you need to create the resource, you can use the [Azure Portal][azure_portal], the [Azure PowerShell][azure_powershell], or the [Azure CLI][azure_cli].\n- A phone number assigned to your Communication Services resource. See [how to acquire a phone number](#how-to-acquire-a-phone-number) for instructions on how to add a phone number to your Communication Services resource.\n\n### Installing\n\n```bash\nnpm install @azure/communication-sms\n```\n\n### How to acquire a phone number\n\nPhone numbers can be acquired and assigned to a Communication Services resource from the [Azure Portal][azure_portal]. Instructions on how to get a phone number using the [Azure Portal][azure_portal] can be found [here][get_phone_number_az_portal].\n\nYou may also get a phone number by using the [`@azure/communication-phone-numbers`][azure_communication-phone-numbers] package. Instructions on how to use the package can be found in the [package's README][azure_communication-phone-numbers_readme].\n\n### Browser support\n\n#### JavaScript Bundle\n\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### SmsClient\n\n`SmsClient` is the primary interface for developers using this client library. It provides an asynchronous method to send SMS messages.\n\n## Examples\n\n## Authentication\n\nYou can get a key and/or connection string from your Communication Services resource in [Azure Portal][azure_portal]. Once you have a key, you may authenticate with any of the following methods:\n\n### Using a connection string\n\n```typescript\nimport { SmsClient } from \"@azure/communication-sms\";\n\nconst connectionString = `endpoint=https://<resource-name>.communication.azure.com/;accessKey=<Base64-Encoded-Key>`;\nconst client = new SmsClient(connectionString);\n```\n\n### Create a credential with `AzureKeyCredential`\n\n```typescript\nimport { AzureKeyCredential } from \"@azure/core-auth\";\nimport { SmsClient } from \"@azure/communication-sms\";\n\nconst endpoint = \"https://<resource-name>.communication.azure.com\";\nconst credential = new AzureKeyCredential(\"<Base64-Encoded-Key>\");\nconst client = new SmsClient(endpoint, credential);\n```\n\n### Using Azure Active Directory managed identity\n\nClient API key authentication is used in most of the examples, but you can also authenticate with Azure Active Directory using the [Azure Identity library][azure_identity]. To use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the [`@azure/identity`][azure_identity] package:\n\n```bash\nnpm install @azure/identity\n```\n\nThe [`@azure/identity`][azure_identity] package provides a variety of credential types that your application can use to do this. The README for @azure/identity provides more details and samples to get you started.\nAZURE_CLIENT_SECRET, AZURE_CLIENT_ID and AZURE_TENANT_ID environment variables are needed to create a DefaultAzureCredential object.\n\n```typescript\nimport { DefaultAzureCredential } from \"@azure/identity\";\nimport { SmsClient } from \"@azure/communication-sms\";\n\nconst endpoint = \"https://<resource-name>.communication.azure.com\";\nlet credential = new DefaultAzureCredential();\nconst client = new SmsClient(endpoint, credential);\n```\n\n## Send a 1:N SMS Message\n\nTo send an SMS message, call the `send` function from the `SmsClient`. You need to pass in a `SmsSendRequest` object.\nYou may also add pass in an options object to specify whether the delivery report should be enabled and set custom tags for the report.\nAn array of `SmsSendResult` is returned. A `successful` flag is used to validate if each individual message was sent successfully.\n\n```typescript\nconst sendResults = await client.send(\n  {\n    from: \"<from-phone-number>\", // Your E.164 formatted phone number used to send SMS\n    to: [\"<to-phone-number-1>\", \"<to-phone-number-2>\"], // The list of E.164 formatted phone numbers to which message is being sent\n    message: \"Weekly Promotion!\" // The message being sent\n  },\n  {\n    enableDeliveryReport: true,\n    tag: \"marketing\"\n  }\n);\n\nfor (const sendResult of sendResults) {\n  if (sendResult.successful) {\n    console.log(\"Success: \", sendResult);\n  } else {\n    console.error(\"Something went wrong when trying to send this message: \", sendResult);\n  }\n}\n```\n\n## Troubleshooting\n\nSMS operations will throw an exception if the request to the server fails.\nExceptions will not be thrown if the error is caused by an individual message, only if something fails with the overall request.\nPlease use the `successful` flag to validate each individual result to verify if the message was sent.\n\n```typescript\ntry {\n  const sendResults = await client.send({\n    from: \"<from-phone-number>\", // Your E.164 formatted phone number used to send SMS\n    to: [\"<to-phone-number-1>\", \"<to-phone-number-2>\"], // The list of E.164 formatted phone numbers to which message is being sent\n    message: \"Hello World via SMS!\" // The message being sent\n  });\n  for (const sendResult of sendResults) {\n    if (sendResult.successful) {\n      console.log(\"Success: \", sendResult);\n    } else {\n      console.error(\"Something went wrong when trying to send this message: \", sendResult);\n    }\n  }\n} catch (e) {\n  console.error(e.message);\n}\n```\n\n## Next steps\n\n- Please take a look at the [samples](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/communication/communication-sms/samples) directory for detailed examples on how to use this library.\n- [Read more about SMS in Azure Communication Services][next_steps]\n- For a basic guide on how to configure Delivery Reporting for your SMS messages please refer to the [Handle SMS Events quickstart][handle_sms_events].\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for Javascript](https://github.com/Azure/azure-sdk-for-js)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_powershell]: https://docs.microsoft.com/powershell/module/az.communication/new-azcommunicationservice\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[get_phone_number_az_portal]: https://docs.microsoft.com/azure/communication-services/quickstarts/telephony/get-phone-number?pivots=platform-azp\n[azure_communication-phone-numbers]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/communication/communication-phone-numbers\n[azure_communication-phone-numbers_readme]: https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/communication/communication-phone-numbers/README.md\n[handle_sms_events]: https://docs.microsoft.com/azure/communication-services/quickstarts/telephony-sms/handle-sms-events\n[next_steps]: https://docs.microsoft.com/azure/communication-services/quickstarts/telephony-sms/send?pivots=programming-language-javascript\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fcommunication%2Fcommunication-sms%2FREADME.png)\n",
        "repo_name": "communication/communication-sms",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/communication/communication-sms",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Communication Toll Free Verification client library for JavaScript\n\nThe Toll Free Verification library provides capabilities for Campaign Brief administration.\n\n## Getting started\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n- An existing Communication Services resource. If you need to create the resource, you can use the [Azure Portal][azure_portal], the [Azure PowerShell][azure_powershell], or the [Azure CLI][azure_cli].\n\n### Installing\n\n```bash\nnpm install @azure-tools/communication-toll-free-verification\n```\n\n### Browser support\n\n#### JavaScript Bundle\n\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n## Examples\n\n## Authentication\n\nTo create a client object to access the Communication Services API, you will need a `connection string` or the `endpoint` of your Communication Services resource and a `credential`. The Toll Free Verification client can use either Azure Active Directory credentials or an API key credential to authenticate.\n\nYou can get a key and/or connection string from your Communication Services resource in the [Azure Portal][azure_portal]. You can also find the endpoint for your Communication Services resource in the [Azure Portal][azure_portal].\n\nOnce you have a key, you can authenticate the `TollFreeVerificationClient` with any of the following methods:\n\n### Using a connection string\n\n```javascript\nconst { TollFreeVerificationClient } = require(\"@azure-tools/communication-toll-free-verification\");\n\nconst connectionString = \"endpoint=<endpoint>;accessKey=<accessKey>\";\nconst client = new TollFreeVerificationClient(connectionString);\n```\n\n### Using an access key with `AzureKeyCredential`\n\nIf you use a key to initialize the client you will also need to provide the appropriate endpoint. You can get this endpoint from your Communication Services resource in [Azure Portal][azure_portal]. Once you have a key and endpoint, you can authenticate with the following code:\n\n```javascript\nconst { AzureKeyCredential } = require(\"@azure/core-auth\");\nconst { TollFreeVerificationClient } = require(\"@azure-tools/communication-toll-free-verification\");\n\nconst credential = new AzureKeyCredential(\"<key-from-resource>\");\nconst client = new TollFreeVerificationClient(\"<endpoint-from-resource>\", credential);\n```\n\n### Using an Azure Active Directory Credential\n\nConnection string authentication is used in most of the examples, but you can also authenticate with Azure Active Directory using the [Azure Identity library][azure_identity]. To use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the [`@azure/identity`][azure_identity] package:\n\n```bash\nnpm install @azure/identity\n```\n\nThe [`@azure/identity`][azure_identity] package provides a variety of credential types that your application can use to do this. The [README for `@azure/identity`][azure_identity_readme] provides more details and samples to get you started.\n\n```javascript\nconst { DefaultAzureCredential } = require (\"@azure/identity\");\nconst { TollFreeVerificationClient } = require(\"@azure-tools/communication-toll-free-verification\");\n\nlet credential = new DefaultAzureCredential();\nconst client = new TollFreeVerificationClient(\"<endpoint-from-resource>\", credential);\n```\n\n## Usage\n\nThe following sections provide code snippets that cover some of the common tasks using the Azure Communication Services Toll Free Verification client. The scenarios that are covered here consist of:\n\n- [Get a Campaign Brief](#get-a-campaign-brief)\n\n### Get the current applied configuration\nUse the `getCampaignBrief` method to obtain the current applied configuration for your resource.\n\n```javascript\nconst { TollFreeVerificationClient } = require(\"@azure-tools/communication-toll-free-verification\");\n\nconst connectionString = \"endpoint=<endpoint>;accessKey=<accessKey>\";\nconst client = new TollFreeVerificationClient(connectionString);\n\n// get a campaign brief\nvar campaignBrief = await client.getCampaignBrief(\"63215741-b596-4eb4-a9c0-b2905ce22cb0\", \"US\");\n\nconsole.log(campaignBrief);\n```\n\n## Troubleshooting\n\n## Next steps\n\nPlease take a look at the samples directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for Javascript](https://github.com/Azure/azure-sdk-for-js)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_powershell]: https://docs.microsoft.com/powershell/module/az.communication/new-azcommunicationservice\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[azure_identity_readme]: https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/identity/identity/README.md\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fcommunication%2Fcommunication-toll-free-verification%2FREADME.png)\n",
        "repo_name": "communication/communication-toll-free-verification",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/communication/communication-toll-free-verification",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure ComputeManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure ComputeManagement client.\n\nCompute Client\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/compute/arm-compute-profile-2020-09-01-hybrid) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-compute-profile-2020-09-01-hybrid) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-compute-profile-2020-09-01-hybrid) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-compute-profile-2020-09-01-hybrid` package\n\nInstall the Azure ComputeManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-compute-profile-2020-09-01-hybrid\n```\n\n### Create and authenticate a `ComputeManagementClient`\n\nTo create a client object to access the Azure ComputeManagement API, you will need the `endpoint` of your Azure ComputeManagement resource and a `credential`. The Azure ComputeManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure ComputeManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure ComputeManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { ComputeManagementClient } = require(\"@azure/arm-compute-profile-2020-09-01-hybrid\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new ComputeManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new ComputeManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### ComputeManagementClient\n\n`ComputeManagementClient` is the primary interface for developers using the Azure ComputeManagement client library. Explore the methods on this client object to understand the different features of the Azure ComputeManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fcompute%2Farm-compute-profile-2020-09-01-hybrid%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "compute/arm-compute-profile-2020-09-01-hybrid",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/compute/arm-compute-profile-2020-09-01-hybrid",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure ComputeManagement REST client library for JavaScript\n\nCompute Management Rest Client\n\n**If you are not familiar with our REST client, please spend 5 minutes to take a look at our [REST client docs](https://github.com/Azure/azure-sdk-for-js/blob/main/documentation/rest-clients.md) to use this library, the REST client provides a light-weighted & developer friendly way to call azure rest api**\n\nKey links:\n\n- [Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/compute/arm-compute-rest)\n- [Package (NPM)](https://www.npmjs.com/package/@azure-rest/arm-compute)\n- [API reference documentation](https://docs.microsoft.com/javascript/api/@azure-rest/arm-compute?view=azure-node-preview)\n- [Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- Node.js version 14.x.x or higher\n\n### Prerequisites\n\n- You must have an [Azure subscription](https://azure.microsoft.com/free/) to use this package.\n\n### Install the `@azure-rest/arm-compute` package\n\nInstall the Azure ComputeManagement client REST client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure-rest/arm-compute\n```\n\n### Create and authenticate a `ComputeManagementClient`\n\nTo use an [Azure Active Directory (AAD) token credential](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token),\nprovide an instance of the desired credential type obtained from the\n[@azure/identity](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#credentials) library.\n\nTo authenticate with AAD, you must first `npm` install [`@azure/identity`](https://www.npmjs.com/package/@azure/identity) \n\nAfter setup, you can choose which type of [credential](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#credentials) from `@azure/identity` to use.\nAs an example, [DefaultAzureCredential](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential)\ncan be used to authenticate the client.\n\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables:\nAZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET\n\nUse the returned token credential to authenticate the client:\n\n```typescript\nimport ComputeManagementClient from \"@azure-rest/arm-compute\";\nimport { DefaultAzureCredential } from \"@azure/identity\";\nconst credential = new DefaultAzureCredential();\nconst client = ComputeManagementClient(credential);\n```\n\n## Examples\n\nThe following section shows you how to initialize and authenticate your client, then list all of your Virtual Machines within a resource group.\n### List all virtual machines within a resource group\n\n```typescript\nimport createComputeManagementClient, {\n  VirtualMachinesListParameters,\n  paginate,\n} from \"@azure-rest/arm-compute\";\nimport { DefaultAzureCredential } from \"@azure/identity\";\nasync function virtualMachinesListMaximumSetGen() {\n  const credential = new DefaultAzureCredential();\n  const client = createComputeManagementClient(credential);\n  const subscriptionId = \"\";\n  const resourceGroupName = \"rgcompute\";\n  const options: VirtualMachinesListParameters = {\n    queryParameters: {\n      $filter: \"aaaaaaaaaaaaaaaaaaaaaaa\",\n      \"api-version\": \"2022-08-01\",\n    },\n  };\n  const initialResponse = await client\n    .path(\n      \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines\",\n      subscriptionId,\n      resourceGroupName\n    )\n    .get(options);\n  const pageData = paginate(client, initialResponse);\n  const result = [];\n  for await (const item of pageData) {\n    result.push(item);\n  }\n  console.log(result);\n}\n\nvirtualMachinesListMaximumSetGen().catch(console.error);\n```\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nimport { setLogLevel } from \"@azure/logger\";\n\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n",
        "repo_name": "compute/arm-compute-rest",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/compute/arm-compute-rest",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure ComputeManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure ComputeManagement client.\n\nCompute Client\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/compute/arm-compute) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-compute) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-compute) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-compute` package\n\nInstall the Azure ComputeManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-compute\n```\n\n### Create and authenticate a `ComputeManagementClient`\n\nTo create a client object to access the Azure ComputeManagement API, you will need the `endpoint` of your Azure ComputeManagement resource and a `credential`. The Azure ComputeManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure ComputeManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure ComputeManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { ComputeManagementClient } = require(\"@azure/arm-compute\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new ComputeManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new ComputeManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### ComputeManagementClient\n\n`ComputeManagementClient` is the primary interface for developers using the Azure ComputeManagement client library. Explore the methods on this client object to understand the different features of the Azure ComputeManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fcompute%2Farm-compute%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "compute/arm-compute",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/compute/arm-compute",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure ConfidentialLedger client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure ConfidentialLedger client.\n\nMicrosoft Azure Confidential Compute Ledger Control Plane REST API version 2020-12-01-preview.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/confidentialledger/arm-confidentialledger) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-confidentialledger) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-confidentialledger?view=azure-node-preview) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-confidentialledger` package\n\nInstall the Azure ConfidentialLedger client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-confidentialledger\n```\n\n### Create and authenticate a `ConfidentialLedgerClient`\n\nTo create a client object to access the Azure ConfidentialLedger API, you will need the `endpoint` of your Azure ConfidentialLedger resource and a `credential`. The Azure ConfidentialLedger client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure ConfidentialLedger resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure ConfidentialLedger** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { ConfidentialLedgerClient } = require(\"@azure/arm-confidentialledger\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new ConfidentialLedgerClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new ConfidentialLedgerClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### ConfidentialLedgerClient\n\n`ConfidentialLedgerClient` is the primary interface for developers using the Azure ConfidentialLedger client library. Explore the methods on this client object to understand the different features of the Azure ConfidentialLedger service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fconfidentialledger%2Farm-confidentialledger%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "confidentialledger/arm-confidentialledger",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/confidentialledger/arm-confidentialledger",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Confidential Ledger REST client library for JavaScript\n\nAzure Confidential Ledger provides a service for logging to an immutable, tamper-proof ledger. As part of the [Azure Confidential Computing][azure_confidential_computing]\nportfolio, Azure Confidential Ledger runs in SGX enclaves. It is built on Microsoft Research's [Confidential Consortium Framework][ccf].\n\n**Please rely heavily on the [service's documentation][confidential_ledger_docs] and our [Rest client docs][rest_client] to use this library**\n\nKey links:\n\n- [Source code][source_code]\n- [Package (NPM)][confidentialledger_npm]\n- [API reference documentation][ref_docs]\n- [Product documentation][confidential_ledger_docs]\n\n## Getting started\n\n### Currently supported environments\n\n- Node.js version 14.x.x or higher\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n- A running instance of Azure Confidential Ledger.\n- A registered user in the Confidential Ledger, typically assigned during [ARM][azure_resource_manager] resource creation, with `Administrator` privileges.\n\n### Install the `@azure-rest/confidential-ledger` package\n\nInstall the Azure Condifential Ledger REST client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure-rest/confidential-ledger\n```\n\n### Creating and Authenticate the client\n\n#### Using Azure Active Directory\n\nThis document demonstrates using [DefaultAzureCredential][default_azure_credential] to authenticate to the Confidential Ledger via Azure Active Directory. You can find the environment variables in the Azure Portal. However, `ConfidentialLedger` accepts any [@azure/identity][azure_identity_credentials] credential.\n\n`DefaultAzureCredential` will automatically handle most Azure SDK client scenarios. To get started, set the values of client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nThen, `DefaultAzureCredential` will be able to authenticate the `ConfidentialLedger` client.\n\nCreating the client also requires your Confidential Ledger's URL and id, which you can get from the Azure CLI or the Azure Portal.\n\nBecause Confidential Ledgers use self-signed certificates securely generated and stored in an enclave, the signing certificate for each Confidential Ledger must first be retrieved from the Confidential Ledger Identity Service.\n\n```typescript\nimport ConfidentialLedger, { getLedgerIdentity } from \"../../src\";\n\nconst { ledgerIdentityCertificate } = await getLedgerIdentity(\n      // for example, test-ledger-name\n      LEDGER_IDENTITY,\n      // for example, https://identity.confidential-ledger.core.azure.com\n      IDENTITY_SERVICE_URL\n    );\n    const credential = new DefaultAzureCredential();\n\n    // ENDPOINT example: https://test-ledger-name.confidential-ledger.azure.com\n    const ledgerClient = ConfidentialLedger(ENDPOINT, ledgerIdentityCertificate, credential);\n```\n\n#### Using a client certificate\n\nAs an alternative to Azure Active Directory, clients may choose to authenticate with a client certificate in mutual TLS instead of via an Azure Active Directory token. For this kind of authentication, the client needs to be passed a `CertificateCredential` which is composed of a certificate and private key, both in PEM format.\n\n```typescript\nimport ConfidentialLedger, { getLedgerIdentity } from \"@azure-rest/confidential-ledger\";\n\n// Get the signing certificate from the Confidential Ledger Identity Service\nconst { ledgerIdentityCertificate } = await getLedgerIdentity(\n      LEDGER_IDENTITY,\n      IDENTITY_SERVICE_URL\n    );\n    // both cert (certificate key) and key (private key) are in PEM format\n    const cert = PUBLIC_KEY;\n    const key = PRIVATE_KEY;\n    // Create the Confidential Ledger Client\n    // ENDPOINT example: https://test-ledger-name.confidential-ledger.azure.com\n    const ledgerClient = ConfidentialLedger(env.ENDPOINT, ledgerIdentityCertificate, {\n      tlsOptions: {\n        cert,\n        key,\n      },\n    });\n```\n\n## Key concepts\n\n### Ledger entries and transactions\n\nEvery write to Azure Confidential Ledger generates an immutable ledger entry in the service. Writes, also referred to as transactions, are uniquely identified by transaction ids that increment with each write. Once written, ledger entries may be retrieved at any time.\n\n### Receipts\n\nState changes to the Confidential Ledger are saved in a data structure called a Merkle tree. To cryptographically verify that writes were correctly saved, a Merkle proof, or receipt, can be retrieved for any transaction id.\n\n### Collections\n\nWhile most use cases will involve one ledger, we provide the collection feature in case semantically or logically different groups of data need to be stored in the same Confidential Ledger.\n\nLedger entries are retrieved by their collection identifier. The Confidential Ledger will always assume a constant, service-determined collection id for entries submitted without a collection specified.\n\n### Users\n\nUsers are managed directly with the Confidential Ledger instead of through Azure. Users may be AAD-based, identified by their AAD object id, or certificate-based, identified by their PEM certificate fingerprint.\n\n### Confidential computing\n\n[Azure Confidential Computing][azure_confidential_computing] allows you to isolate and protect your data while it is being processed in the cloud. Azure Confidential Ledger runs on Azure Confidential Computing virtual machines, thus providing stronger data protection with encryption of data in use.\n\n### Confidential Consortium Framework\n\nAzure Confidential Ledger is built on Microsoft Research's open-source [Confidential Consortium Framework (CCF)][ccf]. Under CCF, applications are managed by a consortium of members with the ability to submit proposals to modify and govern application operation. In Azure Confidential Ledger, Microsoft Azure owns a member identity, allowing it to perform governance actions like replacing unhealthy nodes in the Confidential Ledger, or upgrading the enclave code.\n\n## Examples\n\nThis section contains code snippets for the following samples:\n\n- [Post Ledger Entry](#post-ledger-entry \"Post Ledger Entry\")\n- [Get a Ledger Entry By Transaction Id](#get-a-ledger-entry \"Get a Ledger Entry By Transaction Id\")\n- [Get All Ledger Entries](#get-all-ledger-entries \"Get All Ledger Entries\")\n- [Get All Collections](#get-all-collections \"Get All Collections\")\n- [Get Transactions for a Collection](#transactions-for-collection \"Get Transactions for a Collection\")\n- [List Enclave Quotes](#list-enclave-quotes \"List Enclave Quotes\")\n\n### Post Ledger Entry\n```typescript\nconst entry: LedgerEntry = {\n  contents: contentBody,\n};\nconst ledgerEntry: CreateLedgerEntryParameters = {\n  contentType: \"application/json\",\n  body: entry,\n};\nconst result = await client.path(\"/app/transactions\").post(ledgerEntry);\n```\n\n### Get a Ledger Entry By Transaction Id\n```typescript\nconst status = await client\n  .path(\"/app/transactions/{transactionId}/status\", transactionId)\n  .get();\n```\n\n### Get All Ledger Entries\n```typescript\nconst ledgerEntries = await client.path(\"/app/transactions\");\n```\n\n### Get All Collections\n```typescript\nconst result = await client.path(\"/app/collections\").get();\n```\n\n### Get Transactions for a Collection\n```typescript\nconst getLedgerEntriesParams = { queryParameters: { collectionId: \"my collection\" } };\nconst ledgerEntries = await client.path(\"/app/transactions\").get(getLedgerEntriesParams);\n```\n\n### List Enclave Quotes\n```typescript\n// Get enclave quotes\nconst enclaveQuotes = await confidentialLedger.path(\"/app/enclaveQuotes\").get();\n\n// Check for non-success response\nif (enclaveQuotes.status !== \"200\") {\n  throw enclaveQuotes.body.error;\n}\n\n// Log all the enclave quotes' nodeId\nObject.keys(enclaveQuotes.body.enclaveQuotes).forEach((key) => {\n  console.log(enclaveQuotes.body.enclaveQuotes[key].nodeId);\n});\n```\n\n### Full Example\n```typescript\nimport ConfidentialLedger, { getLedgerIdentity } from \"@azure-rest/confidential-ledger\";\nimport { DefaultAzureCredential } from \"@azure/identity\";\n\nexport async function main() {\n  // Get the signing certificate from the Confidential Ledger Identity Service\n  const ledgerIdentity = await getLedgerIdentity(\"<my-ledger-id>\");\n\n  // Create the Confidential Ledger Client\n  const confidentialLedger = ConfidentialLedger(\n    \"https://<ledger-name>.eastus.cloudapp.azure.com\",\n    ledgerIdentity.ledgerIdentityCertificate,\n    new DefaultAzureCredential()\n  );\n\n  // Get enclave quotes\n  const enclaveQuotes = await confidentialLedger.path(\"/app/enclaveQuotes\").get();\n\n  // Check for non-success response\n  if (enclaveQuotes.status !== \"200\") {\n    throw enclaveQuotes.body.error;\n  }\n\n  // Log all the enclave quotes' nodeId\n  Object.keys(enclaveQuotes.body.enclaveQuotes).forEach((key) => {\n    console.log(enclaveQuotes.body.enclaveQuotes[key].nodeId);\n  });\n}\n\nmain().catch((err) => {\n  console.error(err);\n});\n```\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nimport { setLogLevel } from \"@azure/logger\";\n\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/confidentialledger/confidential-ledger-rest/samples) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fconfidentialledger%2Fconfidential-ledger-rest%2FREADME.png)\n\n<!-- LINKS -->\n\n[ccf]: https://github.com/Microsoft/CCF\n[azure_confidential_computing]: https://azure.microsoft.com/solutions/confidential-compute\n[confidential_ledger_docs]: https://aka.ms/confidentialledger-servicedocs\n[rest_client]: https://github.com/Azure/azure-sdk-for-js/blob/main/documentation/rest-clients.md\n[source_code]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/confidentialledger/confidential-ledger-rest\n[confidentialledger_npm]: https://www.npmjs.com/package/@azure-rest/confidential-ledger\n[ref_docs]: https://azure.github.io/azure-sdk-for-js\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_identity_credentials]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#credentials\n[default_azure_credential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n[azure_resource_manager]: https://docs.microsoft.com/azure/azure-resource-manager/management/overview\n",
        "repo_name": "confidentialledger/confidential-ledger-rest",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/confidentialledger/confidential-ledger-rest",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure ConfluentManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure ConfluentManagement client.\n\n\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/confluent/arm-confluent) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-confluent) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-confluent?view=azure-node-preview) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-confluent` package\n\nInstall the Azure ConfluentManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-confluent\n```\n\n### Create and authenticate a `ConfluentManagementClient`\n\nTo create a client object to access the Azure ConfluentManagement API, you will need the `endpoint` of your Azure ConfluentManagement resource and a `credential`. The Azure ConfluentManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure ConfluentManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure ConfluentManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { ConfluentManagementClient } = require(\"@azure/arm-confluent\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new ConfluentManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new ConfluentManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### ConfluentManagementClient\n\n`ConfluentManagementClient` is the primary interface for developers using the Azure ConfluentManagement client library. Explore the methods on this client object to understand the different features of the Azure ConfluentManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fconfluent%2Farm-confluent%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "confluent/arm-confluent",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/confluent/arm-confluent",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Arc VMware Management client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure Arc VMware Management client.\n\nSelf service experience for VMware.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/connectedvmware/arm-connectedvmware) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-connectedvmware) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-connectedvmware?view=azure-node-preview) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-connectedvmware` package\n\nInstall the Azure Arc VMware Management client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-connectedvmware\n```\n\n### Create and authenticate a `AzureArcVMwareManagementServiceAPI`\n\nTo create a client object to access the Azure Arc VMware Management API, you will need the `endpoint` of your Azure Arc VMware Management resource and a `credential`. The Azure Arc VMware Management client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure Arc VMware Management resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure Arc VMware Management** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { AzureArcVMwareManagementServiceAPI } = require(\"@azure/arm-connectedvmware\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new AzureArcVMwareManagementServiceAPI(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new AzureArcVMwareManagementServiceAPI(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### AzureArcVMwareManagementServiceAPI\n\n`AzureArcVMwareManagementServiceAPI` is the primary interface for developers using the Azure Arc VMware Management client library. Explore the methods on this client object to understand the different features of the Azure Arc VMware Management service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fconnectedvmware%2Farm-connectedvmware%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "connectedvmware/arm-connectedvmware",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/connectedvmware/arm-connectedvmware",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure ConsumptionManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure ConsumptionManagement client.\n\nConsumption management client provides access to consumption resources for Azure Enterprise Subscriptions.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/consumption/arm-consumption) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-consumption) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-consumption) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-consumption` package\n\nInstall the Azure ConsumptionManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-consumption\n```\n\n### Create and authenticate a `ConsumptionManagementClient`\n\nTo create a client object to access the Azure ConsumptionManagement API, you will need the `endpoint` of your Azure ConsumptionManagement resource and a `credential`. The Azure ConsumptionManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure ConsumptionManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure ConsumptionManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { ConsumptionManagementClient } = require(\"@azure/arm-consumption\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new ConsumptionManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new ConsumptionManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### ConsumptionManagementClient\n\n`ConsumptionManagementClient` is the primary interface for developers using the Azure ConsumptionManagement client library. Explore the methods on this client object to understand the different features of the Azure ConsumptionManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fconsumption%2Farm-consumption%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "consumption/arm-consumption",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/consumption/arm-consumption",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure ContainerInstanceManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure ContainerInstanceManagement client.\n\n\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/containerinstance/arm-containerinstance) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-containerinstance) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-containerinstance) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-containerinstance` package\n\nInstall the Azure ContainerInstanceManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-containerinstance\n```\n\n### Create and authenticate a `ContainerInstanceManagementClient`\n\nTo create a client object to access the Azure ContainerInstanceManagement API, you will need the `endpoint` of your Azure ContainerInstanceManagement resource and a `credential`. The Azure ContainerInstanceManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure ContainerInstanceManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure ContainerInstanceManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { ContainerInstanceManagementClient } = require(\"@azure/arm-containerinstance\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new ContainerInstanceManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new ContainerInstanceManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### ContainerInstanceManagementClient\n\n`ContainerInstanceManagementClient` is the primary interface for developers using the Azure ContainerInstanceManagement client library. Explore the methods on this client object to understand the different features of the Azure ContainerInstanceManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fcontainerinstance%2Farm-containerinstance%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "containerinstance/arm-containerinstance",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/containerinstance/arm-containerinstance",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure ContainerRegistryManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure ContainerRegistryManagement client.\n\n\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/containerregistry/arm-containerregistry) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-containerregistry) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-containerregistry) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-containerregistry` package\n\nInstall the Azure ContainerRegistryManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-containerregistry\n```\n\n### Create and authenticate a `ContainerRegistryManagementClient`\n\nTo create a client object to access the Azure ContainerRegistryManagement API, you will need the `endpoint` of your Azure ContainerRegistryManagement resource and a `credential`. The Azure ContainerRegistryManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure ContainerRegistryManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure ContainerRegistryManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { ContainerRegistryManagementClient } = require(\"@azure/arm-containerregistry\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new ContainerRegistryManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new ContainerRegistryManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### ContainerRegistryManagementClient\n\n`ContainerRegistryManagementClient` is the primary interface for developers using the Azure ContainerRegistryManagement client library. Explore the methods on this client object to understand the different features of the Azure ContainerRegistryManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fcontainerregistry%2Farm-containerregistry%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "containerregistry/arm-containerregistry",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/containerregistry/arm-containerregistry",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Container Registry client library for JavaScript\n\nAzure Container Registry allows you to store and manage container images and artifacts in a private registry for all types of container deployments.\n\nUse the client library for Azure Container Registry to:\n\n- List images or artifacts in a registry\n- Obtain metadata for images and artifacts, repositories and tags\n- Set read/write/delete properties on registry items\n- Delete images and artifacts, repositories and tags\n\nKey links:\n\n- [Source code][source]\n- [Package (NPM)][package]\n- [API reference documentation][api_docs]\n- [REST API documentation][rest_docs]\n- [Product documentation][product_docs]\n- [Samples][samples]\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n> Note: This package cannot be used in the browser due to service limitations, please refer to [this document][cors] for guidance.\n\n### Prerequisites\n\n- An [Azure Subscription](https://azure.microsoft.com)\n- A [Container Registry account][container_registry_docs]\n\nTo create a new Container Registry, you can use the [Azure Portal][container_registry_create_portal],\n[Azure PowerShell][container_registry_create_ps], or the [Azure CLI][container_registry_create_cli].\nHere's an example using the Azure CLI:\n\n```Powershell\naz acr create --name MyContainerRegistry --resource-group MyResourceGroup --location westus --sku Basic\n```\n\n### Install the `@azure/container-registry` package\n\nInstall the Container Registry client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/container-registry\n```\n\n### Authenticate the client\n\nThe [Azure Identity library][identity] provides easy Azure Active Directory support for authentication.\n\n```javascript\nconst {\n  ContainerRegistryClient,\n  KnownContainerRegistryAudience,\n} = require(\"@azure/container-registry\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n\nconst endpoint = process.env.CONTAINER_REGISTRY_ENDPOINT;\n// Create a ContainerRegistryClient that will authenticate through Active Directory\nconst client = new ContainerRegistryClient(endpoint, new DefaultAzureCredential(), {\n  audience: KnownContainerRegistryAudience.AzureResourceManagerPublicCloud,\n});\n```\n\nNote that these samples assume you have a `CONTAINER_REGISTRY_ENDPOINT` environment variable set, which is the URL including the name of the login server and the `https://` prefix.\n\n#### National Clouds\n\nTo authenticate with a registry in a [National Cloud](https://docs.microsoft.com/azure/active-directory/develop/authentication-national-cloud), you will need to make the following additions to your configuration:\n\n- Set the `authorityHost` in the credential options or via the `AZURE_AUTHORITY_HOST` environment variable\n- Set the `audience` in `ContainerRegistryClientOptions`\n\n```javascript\nconst {\n  ContainerRegistryClient,\n  KnownContainerRegistryAudience,\n} = require(\"@azure/container-registry\");\nconst { DefaultAzureCredential, AzureAuthorityHosts } = require(\"@azure/identity\");\n\nconst endpoint = process.env.CONTAINER_REGISTRY_ENDPOINT;\n// Create a ContainerRegistryClient that will authenticate through AAD in the China national cloud\nconst client = new ContainerRegistryClient(\n  endpoint,\n  new DefaultAzureCredential({ authorityHost: AzureAuthorityHosts.AzureChina }),\n  {\n    audience: KnownContainerRegistryAudience.AzureResourceManagerChina,\n  }\n);\n```\n\nFor more information on using AAD with Azure Container Registry, please see the service's [Authentication Overview](https://docs.microsoft.com/azure/container-registry/container-registry-authentication).\n\n## Key concepts\n\nA **registry** stores Docker images and [OCI Artifacts](https://opencontainers.org/). An image or artifact consists of a **manifest** and **layers**. An image's manifest describes the layers that make up the image, and is uniquely identified by its **digest**. An image can also be \"tagged\" to give it a human-readable alias. An image or artifact can have zero or more **tags** associated with it, and each tag uniquely identifies the image. A collection of images that share the same name but have different tags, is referred to as a **repository**.\n\nFor more information please see [Container Registry Concepts](https://docs.microsoft.com/azure/container-registry/container-registry-concepts).\n\n## Examples\n\n### Registry operations\n\n#### Listing repositories\n\nIterate through the collection of repositories in the registry.\n\n```javascript\nconst {\n  ContainerRegistryClient,\n  KnownContainerRegistryAudience,\n} = require(\"@azure/container-registry\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n\nasync function main() {\n  // endpoint should be in the form of \"https://myregistryname.azurecr.io\"\n  // where \"myregistryname\" is the actual name of your registry\n  const endpoint = process.env.CONTAINER_REGISTRY_ENDPOINT || \"<endpoint>\";\n  const client = new ContainerRegistryClient(endpoint, new DefaultAzureCredential(), {\n    audience: KnownContainerRegistryAudience.AzureResourceManagerPublicCloud,\n  });\n\n  console.log(\"Listing repositories\");\n  const iterator = client.listRepositoryNames();\n  for await (const repository of iterator) {\n    console.log(`  repository: ${repository}`);\n  }\n}\n\nmain().catch((err) => {\n  console.error(\"The sample encountered an error:\", err);\n});\n```\n\n#### List tags with anonymous access\n\n```javascript\nconst {\n  ContainerRegistryClient,\n  KnownContainerRegistryAudience,\n} = require(\"@azure/container-registry\");\n\nasync function main() {\n  // Get the service endpoint from the environment\n  const endpoint = process.env.CONTAINER_REGISTRY_ENDPOINT || \"<endpoint>\";\n\n  // Create a new ContainerRegistryClient for anonymous access\n  const client = new ContainerRegistryClient(endpoint, {\n    audience: KnownContainerRegistryAudience.AzureResourceManagerPublicCloud,\n  });\n\n  // Obtain a RegistryArtifact object to get access to image operations\n  const image = client.getArtifact(\"library/hello-world\", \"latest\");\n\n  // List the set of tags on the hello_world image tagged as \"latest\"\n  const tagIterator = image.listTagProperties();\n\n  // Iterate through the image's tags, listing the tagged alias for the image\n  console.log(`${image.fullyQualifiedReference}  has the following aliases:`);\n  for await (const tag of tagIterator) {\n    console.log(`  ${tag.registryLoginServer}/${tag.repositoryName}:${tag.name}`);\n  }\n}\n\nmain().catch((err) => {\n  console.error(\"The sample encountered an error:\", err);\n});\n```\n\n#### Set artifact properties\n\n```javascript\nconst {\n  ContainerRegistryClient,\n  KnownContainerRegistryAudience,\n} = require(\"@azure/container-registry\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n\nasync function main() {\n  // Get the service endpoint from the environment\n  const endpoint = process.env.CONTAINER_REGISTRY_ENDPOINT || \"<endpoint>\";\n\n  // Create a new ContainerRegistryClient and RegistryArtifact to access image operations\n  const client = new ContainerRegistryClient(endpoint, new DefaultAzureCredential(), {\n    audience: KnownContainerRegistryAudience.AzureResourceManagerPublicCloud,\n  });\n  const image = client.getArtifact(\"library/hello-world\", \"v1\");\n\n  // Set permissions on the image's \"latest\" tag\n  await image.updateTagProperties(\"latest\", { canWrite: false, canDelete: false });\n}\n\nmain().catch((err) => {\n  console.error(\"The sample encountered an error:\", err);\n});\n```\n\n#### Delete images\n\n```javascript\nconst {\n  ContainerRegistryClient,\n  KnownContainerRegistryAudience,\n} = require(\"@azure/container-registry\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n\nasync function main() {\n  // Get the service endpoint from the environment\n  const endpoint = process.env.CONTAINER_REGISTRY_ENDPOINT || \"<endpoint>\";\n  // Create a new ContainerRegistryClient\n  const client = new ContainerRegistryClient(endpoint, new DefaultAzureCredential(), {\n    audience: KnownContainerRegistryAudience.AzureResourceManagerPublicCloud,\n  });\n\n  // Iterate through repositories\n  const repositoryNames = client.listRepositoryNames();\n  for await (const repositoryName of repositoryNames) {\n    const repository = client.getRepository(repositoryName);\n    // Obtain the images ordered from newest to oldest by passing the `order` option\n    const imageManifests = repository.listManifestProperties({\n      order: \"LastUpdatedOnDescending\",\n    });\n    const imagesToKeep = 3;\n    let imageCount = 0;\n    // Delete images older than the first three.\n    for await (const manifest of imageManifests) {\n      imageCount++;\n      if (imageCount > imagesToKeep) {\n        const image = repository.getArtifact(manifest.digest);\n        console.log(`Deleting image with digest ${manifest.digest}`);\n        console.log(`  Deleting the following tags from the image:`);\n        for (const tagName of manifest.tags) {\n          console.log(`    ${manifest.repositoryName}:${tagName}`);\n          image.deleteTag(tagName);\n        }\n        await image.delete();\n      }\n    }\n  }\n}\n\nmain().catch((err) => {\n  console.error(\"The sample encountered an error:\", err);\n});\n```\n\n### Blob and manifest operations\n\n#### Upload images\n\n```javascript\nconst { ContainerRegistryContentClient } = require(\"@azure/container-registry\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nrequire(\"dotenv\").config();\n\nasync function main() {\n  // endpoint should be in the form of \"https://myregistryname.azurecr.io\"\n  // where \"myregistryname\" is the actual name of your registry\n  const endpoint = process.env.CONTAINER_REGISTRY_ENDPOINT || \"<endpoint>\";\n  const repository = process.env.CONTAINER_REGISTRY_REPOSITORY || \"library/hello-world\";\n  const client = new ContainerRegistryContentClient(\n    endpoint,\n    repository,\n    new DefaultAzureCredential()\n  );\n\n  const config = Buffer.from(\"Sample config\");\n  const { digest: configDigest, sizeInBytes: configSize } = await client.uploadBlob(config);\n\n  const layer = Buffer.from(\"Sample layer\");\n  const { digest: layerDigest, sizeInBytes: layerSize } = await client.uploadBlob(layer);\n\n  const manifest = {\n    schemaVersion: 2,\n    config: {\n      digest: configDigest,\n      size: configSize,\n      mediaType: \"application/vnd.oci.image.config.v1+json\",\n    },\n    layers: [\n      {\n        digest: layerDigest,\n        size: layerSize,\n        mediaType: \"application/vnd.oci.image.layer.v1.tar\",\n      },\n    ],\n  };\n\n  await client.setManifest(manifest, { tag: \"demo\" });\n}\n\nmain().catch((err) => {\n  console.error(\"The sample encountered an error:\", err);\n});\n```\n\n#### Download images\n\n```javascript\nconst {\n  ContainerRegistryContentClient,\n  KnownManifestMediaType,\n} = require(\"@azure/container-registry\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst dotenv = require(\"dotenv\");\nconst fs = require(\"fs\");\ndotenv.config();\n\nfunction trimSha(digest) {\n  const index = digest.indexOf(\":\");\n  return index === -1 ? digest : digest.substring(index);\n}\n\nasync function main() {\n  // endpoint should be in the form of \"https://myregistryname.azurecr.io\"\n  // where \"myregistryname\" is the actual name of your registry\n  const endpoint = process.env.CONTAINER_REGISTRY_ENDPOINT || \"<endpoint>\";\n  const repository = process.env.CONTAINER_REGISTRY_REPOSITORY || \"library/hello-world\";\n  const client = new ContainerRegistryContentClient(\n    endpoint,\n    repository,\n    new DefaultAzureCredential()\n  );\n\n  // Download the manifest to obtain the list of files in the image based on the tag\n  const result = await client.getManifest(\"demo\");\n\n  if (result.mediaType !== KnownManifestMediaType.OciImageManifest) {\n    throw new Error(\"Expected an OCI image manifest\");\n  }\n\n  const manifest = result.manifest;\n\n  // Manifests of all media types have a buffer containing their content; this can be written to a file.\n  fs.writeFileSync(\"manifest.json\", result.content);\n\n  const configResult = await client.downloadBlob(manifest.config.digest);\n  const configFile = fs.createWriteStream(\"config.json\");\n  configResult.content.pipe(configFile);\n\n  // Download and write out the layers\n  for (const layer of manifest.layers) {\n    const fileName = trimSha(layer.digest);\n    const layerStream = fs.createWriteStream(fileName);\n    const downloadLayerResult = await client.downloadBlob(layer.digest);\n    downloadLayerResult.content.pipe(layerStream);\n  }\n}\n\nmain().catch((err) => {\n  console.error(\"The sample encountered an error:\", err);\n});\n```\n\n#### Delete manifest\n\n```javascript\nconst { ContainerRegistryContentClient } = require(\"@azure/container-registry\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nrequire(\"dotenv\").config();\n\nasync function main() {\n  // Get the service endpoint from the environment\n  const endpoint = process.env.CONTAINER_REGISTRY_ENDPOINT || \"<endpoint>\";\n  const repository = process.env.CONTAINER_REGISTRY_REPOSITORY || \"library/hello-world\";\n  // Create a new ContainerRegistryClient\n  const client = new ContainerRegistryContentClient(\n    endpoint,\n    repository,\n    new DefaultAzureCredential()\n  );\n\n  const downloadResult = await client.getManifest(\"latest\");\n  await client.deleteManifest(downloadResult.digest);\n}\n\nmain().catch((err) => {\n  console.error(\"The sample encountered an error:\", err);\n});\n```\n\n#### Delete blob\n\n```javascript\nconst {\n  ContainerRegistryContentClient,\n  KnownManifestMediaType,\n} = require(\"@azure/container-registry\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nrequire(\"dotenv\").config();\n\nasync function main() {\n  // Get the service endpoint from the environment\n  const endpoint = process.env.CONTAINER_REGISTRY_ENDPOINT || \"<endpoint>\";\n  const repository = process.env.CONTAINER_REGISTRY_REPOSITORY || \"library/hello-world\";\n  // Create a new ContainerRegistryClient\n  const client = new ContainerRegistryContentClient(\n    endpoint,\n    repository,\n    new DefaultAzureCredential()\n  );\n\n  const downloadResult = await client.getManifest(\"latest\");\n\n  if (downloadResult.mediaType !== KnownManifestMediaType.OciImageManifest) {\n    throw new Error(\"Expected an OCI image manifest\");\n  }\n\n  for (const layer of downloadResult.manifest.layers) {\n    await client.deleteBlob(layer.digest);\n  }\n}\n```\n\n## Troubleshooting\n\nFor infomation about troubleshooting, refer to the [troubleshooting guide].\n\n## Next steps\n\nPlease take a look at the [samples][samples] directory for detailed examples that demonstrate how to use the client libraries.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for Javascript][az_sdk_js]\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fcontainerregistry%2Fcontainer-registry%2FREADME.png)\n\n[azure_sub]: https://azure.microsoft.com/free/\n[acr_resource]: https://ms.portal.azure.com/#create/Microsoft.ContainerRegistry\n[source]: https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/containerregistry/container-registry/\n[package]: https://www.npmjs.com/package/@azure/container-registry\n[api_docs]: https://docs.microsoft.com/javascript/api/@azure/container-registry\n[rest_docs]: https://docs.microsoft.com/rest/api/containerregistry/\n[product_docs]: https://docs.microsoft.com/azure/container-registry/\n[cors]: https://github.com/Azure/azure-sdk-for-js/blob/main/samples/cors/ts/README.md\n[samples]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/containerregistry/container-registry/samples\n[container_registry_docs]: https://docs.microsoft.com/azure/container-registry/container-registry-intro\n[container_registry_create_ps]: https://docs.microsoft.com/azure/container-registry/container-registry-get-started-powershell\n[container_registry_create_cli]: https://docs.microsoft.com/azure/container-registry/container-registry-get-started-azure-cli\n[container_registry_create_portal]: https://docs.microsoft.com/azure/container-registry/container-registry-get-started-portal\n[container_registry_concepts]: https://docs.microsoft.com/azure/container-registry/container-registry-concepts\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[identity]: https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/identity/identity/README.md\n[az_sdk_js]: https://github.com/Azure/azure-sdk-for-js\n[troubleshooting guide]: https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/containerregistry/container-registry/TROUBLESHOOTING.md\n",
        "repo_name": "containerregistry/container-registry",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/containerregistry/container-registry",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure ContainerService client library for JavaScript\n\nContainer Service Client\n\n**Please rely heavily on our [REST client docs](https://github.com/Azure/azure-sdk-for-js/blob/main/documentation/rest-clients.md) to use this library**\n\nKey links:\n\n- [Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/containerservice/arm-containerservice-rest)\n- [Package (NPM)](https://www.npmjs.com/package/@azure-rest/arm-containerservice)\n- [API reference documentation](https://docs.microsoft.com/javascript/api/@azure-rest/arm-containerservice?view=azure-node-preview)\n- [Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- Node.js version 14.x.x or higher\n\n### Prerequisites\n\n- You must have an [Azure subscription](https://azure.microsoft.com/free/) to use this package.\n\n### Install the `@azure-rest/arm-containerservice` package\n\nInstall the Azure ContainerService client REST client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure-rest/arm-containerservice\n```\n\n### Create and authenticate a `ContainerServiceClient`\n\nTo use an [Azure Active Directory (AAD) token credential](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token),\nprovide an instance of the desired credential type obtained from the\n[@azure/identity](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#credentials) library.\n\nTo authenticate with AAD, you must first `npm` install [`@azure/identity`](https://www.npmjs.com/package/@azure/identity) \n\nAfter setup, you can choose which type of [credential](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#credentials) from `@azure/identity` to use.\nAs an example, [DefaultAzureCredential](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential)\ncan be used to authenticate the client.\n\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables:\nAZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET\n\n## Examples\n\nThe following section shows you how to initialize and authenticate your client, then list all of your Managed Clusters.\n\n### List All Managed Clusters\n\n```typescript\nimport ContainerServiceManagementClient, { paginate } from \"@azure-rest/arm-containerservice\";\nimport { DefaultAzureCredential } from \"@azure/identity\";\n\nasync function listManagedClusters() {\n  const subscriptionId = process.env.SUBSCRIPTION_ID as string;\n  const credential = new DefaultAzureCredential();\n  const client = ContainerServiceManagementClient(credential);\n  const initialResponse = await client.path(\n    \"/subscriptions/{subscriptionId}/providers/Microsoft.ContainerService/managedClusters\",\n    subscriptionId\n  ).get();\n  const result = paginate(client, initialResponse);\n  const resArray = new Array();\n  for await (let item of result) {\n    resArray.push(item);\n  }\n  console.log(resArray);\n}\n\nlistManagedClusters().catch(console.error);\n```\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nimport { setLogLevel } from \"@azure/logger\";\n\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n",
        "repo_name": "containerservice/arm-containerservice-rest",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/containerservice/arm-containerservice-rest",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure ContainerService client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure ContainerService client.\n\nThe Container Service Client.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/containerservice/arm-containerservice) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-containerservice) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-containerservice) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-containerservice` package\n\nInstall the Azure ContainerService client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-containerservice\n```\n\n### Create and authenticate a `ContainerServiceClient`\n\nTo create a client object to access the Azure ContainerService API, you will need the `endpoint` of your Azure ContainerService resource and a `credential`. The Azure ContainerService client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure ContainerService resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure ContainerService** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { ContainerServiceClient } = require(\"@azure/arm-containerservice\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new ContainerServiceClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new ContainerServiceClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### ContainerServiceClient\n\n`ContainerServiceClient` is the primary interface for developers using the Azure ContainerService client library. Explore the methods on this client object to understand the different features of the Azure ContainerService service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fcontainerservice%2Farm-containerservice%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "containerservice/arm-containerservice",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/containerservice/arm-containerservice",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Abort Controller client library for JavaScript\n\nThe `@azure/abort-controller` package provides `AbortController` and `AbortSignal` classes. These classes are compatible\nwith the [AbortController](https://developer.mozilla.org/docs/Web/API/AbortController) built into modern browsers\nand the `AbortSignal` used by [fetch](https://developer.mozilla.org/docs/Web/API/Fetch_API).\nUse the `AbortController` class to create an instance of the `AbortSignal` class that can be used to cancel an operation\nin an Azure SDK that accept a parameter of type `AbortSignalLike`.\n\nKey links:\n\n- [Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/abort-controller)\n- [Package (npm)](https://www.npmjs.com/package/@azure/abort-controller)\n- [API Reference Documentation](https://docs.microsoft.com/javascript/api/overview/azure/abort-controller-readme)\n\n## Getting started\n\n### Installation\n\nInstall this library using npm as follows\n\n```\nnpm install @azure/abort-controller\n```\n\n## Key Concepts\n\nUse the `AbortController` to create an `AbortSignal` which can then be passed to Azure SDK operations to cancel\npending work. The `AbortSignal` can be accessed via the `signal` property on an instantiated `AbortController`.\nAn `AbortSignal` can also be returned directly from a static method, e.g. `AbortController.timeout(100)`.\nthat is cancelled after 100 milliseconds.\n\nCalling `abort()` on the instantiated `AbortController` invokes the registered `abort`\nevent listeners on the associated `AbortSignal`.\nAny subsequent calls to `abort()` on the same controller will have no effect.\n\nThe `AbortSignal.none` static property returns an `AbortSignal` that can not be aborted.\n\nMultiple instances of an `AbortSignal` can be linked so that calling `abort()` on the parent signal,\naborts all linked signals.\nThis linkage is one-way, meaning that a parent signal can affect a linked signal, but not the other way around.\nTo link `AbortSignals` together, pass in the parent signals to the `AbortController` constructor.\n\n## Examples\n\nThe below examples assume that `doAsyncWork` is a function that takes a bag of properties, one of which is\nof the abort signal.\n\n### Example 1 - basic usage\n\n```js\nimport { AbortController } from \"@azure/abort-controller\";\n\nconst controller = new AbortController();\ndoAsyncWork({ abortSignal: controller.signal });\n\n// at some point later\ncontroller.abort();\n```\n\n### Example 2 - Aborting with timeout\n\n```js\nimport { AbortController } from \"@azure/abort-controller\";\n\nconst signal = AbortController.timeout(1000);\ndoAsyncWork({ abortSignal: signal });\n```\n\n### Example 3 - Aborting sub-tasks\n\n```js\nimport { AbortController } from \"@azure/abort-controller\";\n\nconst allTasksController = new AbortController();\n\nconst subTask1 = new AbortController(allTasksController.signal);\nconst subtask2 = new AbortController(allTasksController.signal);\n\nallTasksController.abort(); // aborts allTasksSignal, subTask1, subTask2\nsubTask1.abort(); // aborts only subTask1\n```\n\n### Example 4 - Aborting with parent signal or timeout\n\n```js\nimport { AbortController } from \"@azure/abort-controller\";\n\nconst allTasksController = new AbortController();\n\n// create a subtask controller that can be aborted manually,\n// or when either the parent task aborts or the timeout is reached.\nconst subTask = new AbortController(allTasksController.signal, AbortController.timeout(100));\n\nallTasksController.abort(); // aborts allTasksSignal, subTask\nsubTask.abort(); // aborts only subTask\n```\n\n## Next steps\n\nYou can build and run the tests locally by executing `rushx test`. Explore the `test` folder to see advanced usage and behavior of the public classes.\n\n## Troubleshooting\n\nIf you run into issues while using this library, please feel free to [file an issue](https://github.com/Azure/azure-sdk-for-js/issues/new).\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fcore%2Fabort-controller%2FREADME.png)\n",
        "repo_name": "core/abort-controller",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/core/abort-controller",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Core AMQP client library for JavaScript\n\nThe `@azure/core-amqp` package provides common functionality for **Azure** JavaScript\nlibraries that use the [AMQP protocol](https://docs.microsoft.com/azure/service-bus-messaging/service-bus-amqp-protocol-guide)\nlike the ones for Azure Service Bus and Azure Event Hubs.\n\n## Getting started\n\n### Installation\n\nInstall this library using npm as follows:\n\n```bash\nnpm install @azure/core-amqp\n```\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge, and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n## Key concepts\n\nSome of the key features of Azure Core AMQP library are:\n\n- [Claims based Authorization](https://docs.microsoft.com/azure/service-bus-messaging/service-bus-amqp-protocol-guide#claims-based-authorization)\n- Request-Response link for [sending request and receiving response over AMQP](https://docs.microsoft.com/azure/service-bus-messaging/service-bus-amqp-protocol-guide#amqp-management)\n- Error translation of AMQP error codes along with errors specific to Azure Service Bus and Azure Event Hubs.\n- RetryPolicy for retrying a given operation if a retryable error was encountered.\n\n## Next steps\n\nYou can build and run the tests locally by executing `rushx test`. Explore the `test` folder to see advanced usage and behavior of the public classes.\n\n## Troubleshooting\n\nThe core-amqp library depends on the [rhea-promise](https://github.com/amqp/rhea-promise) library for managing connections, and for sending and receiving events over the [AMQP](https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-complete-v1.0-os.pdf) protocol.\n\n### Logging\n\nYou can set the `AZURE_LOG_LEVEL` environment variable to one of the following values to enable logging to `stderr`:\n\n- verbose\n- info\n- warning\n- error\n\nYou can also set the log level programmatically by importing the\n[@azure/logger](https://www.npmjs.com/package/@azure/logger) package and calling the\n`setLogLevel` function with one of the log level values.\nFor example, when you set the log level to `info`, the logs that are written for levels\n`warning` and `error` are also emitted.\nThis SDK follows the Azure SDK for TypeScript [guidelines](https://azure.github.io/azure-sdk/typescript_implementation.html#general-logging)\nwhen determining which level to log to.\n\nWhen setting a log level either programmatically or via the `AZURE_LOG_LEVEL` environment variable,\nany logs that are written using a log level equal to or less than the one you choose will be emitted.\n\nYou can alternatively set the `DEBUG` environment variable to get logs when using this library.\nThis can be useful if you also want to emit logs from the dependencies `rhea-promise` and `rhea` as well.\n\n**Note:** AZURE_LOG_LEVEL, if set, takes precedence over DEBUG.\nDo not specify any `azure` libraries via DEBUG when also specifying\nAZURE_LOG_LEVEL or calling setLogLevel.\n\n- Getting only info level debug logs from the core-amqp library.\n\n```bash\nexport DEBUG=azure:core-amqp:info\n```\n\n- Getting debug logs from the core-amqp and the protocol level library.\n\n```bash\nexport DEBUG=azure:core-amqp:*,rhea*\n```\n\n- If you are **not interested in viewing the raw event data** (which consumes a large amount of console/disk space) then you can set the `DEBUG` environment variable as follows:\n\n```bash\nexport DEBUG=azure:core-amqp:*,rhea*,-rhea:raw,-rhea:message\n```\n\n- If you are interested only in **errors** and SDK **warnings**, then you can set the `DEBUG` environment variable as follows:\n\n```bash\nexport DEBUG=azure:core-amqp:(error|warning),rhea-promise:error,rhea:events,rhea:frames,rhea:io,rhea:flow\n```\n\n#### Logging to a file\n\n- Set the `DEBUG` environment variable as shown above and then run your test script as follows:\n  - Logging statements from you test script go to `out.log` and logging statement from the sdk go to `debug.log`.\n    ```bash\n    node your-test-script.js > out.log 2>debug.log\n    ```\n  - Logging statements from your test script and the sdk go to the same file `out.log` by redirecting stderr to stdout (&1), and then redirect stdout to a file:\n    ```bash\n    node your-test-script.js >out.log 2>&1\n    ```\n  - Logging statements from your test script and the sdk go to the same file `out.log`.\n    ```bash\n    node your-test-script.js &> out.log\n    ```\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a\nContributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us\nthe rights to use your contribution. For details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide\na CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions\nprovided by the bot. You will only need to do this once across all repos using our CLA.\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or\ncontact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fcore%2Fcore-amqp%2FREADME.png)\n",
        "repo_name": "core/core-amqp",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/core/core-amqp",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Core Authentication client library for JavaScript\n\nThe `@azure/core-auth` package provides core interfaces and helper methods for authenticating with Azure services using Azure Active Directory and other authentication schemes common across the Azure SDK. As a \"core\" library, it shouldn't need to be added as a dependency to any user code, only other Azure SDK libraries.\n\n## Getting started\n\n### Installation\n\nInstall this library using npm as follows\n\n```\nnpm install @azure/core-auth\n```\n\n## Key Concepts\n\nThe `TokenCredential` interface represents a credential capable of providing an authentication token. The `@azure/identity` package contains various credentials that implement the `TokenCredential` interface.\n\nThe `AzureKeyCredential` is a static key-based credential that supports key rotation via the `update` method. Use this when a single secret value is needed for authentication, e.g. when using a shared access key.\n\nThe `AzureNamedKeyCredential` is a static name/key-based credential that supports name and key rotation via the `update` method. Use this when both a secret value and a label are needed, e.g. when using a shared access key and shared access key name.\n\nThe `AzureSASCredential` is a static signature-based credential that supports updating the signature value via the `update` method. Use this when using a shared access signature.\n\n## Examples\n\n### AzureKeyCredential\n\n```js\nconst { AzureKeyCredential } = require(\"@azure/core-auth\");\n\nconst credential = new AzureKeyCredential(\"secret value\");\n// prints: \"secret value\"\nconsole.log(credential.key);\ncredential.update(\"other secret value\");\n// prints: \"other secret value\"\nconsole.log(credential.key);\n```\n\n### AzureNamedKeyCredential\n\n```js\nconst { AzureNamedKeyCredential } = require(\"@azure/core-auth\");\n\nconst credential = new AzureNamedKeyCredential(\"ManagedPolicy\", \"secret value\");\n// prints: \"ManagedPolicy, secret value\"\nconsole.log(`${credential.name}, ${credential.key}`);\ncredential.update(\"OtherManagedPolicy\", \"other secret value\");\n// prints: \"OtherManagedPolicy, other secret value\"\nconsole.log(`${credential.name}, ${credential.key}`);\n```\n\n### AzureSASCredential\n\n```js\nconst { AzureSASCredential } = require(\"@azure/core-auth\");\n\nconst credential = new AzureSASCredential(\"signature1\");\n// prints: \"signature1\"\nconsole.log(credential.signature);\ncredential.update(\"signature2\");\n// prints: \"signature2\"\nconsole.log(credential.signature);\n```\n\n## Next steps\n\nYou can build and run the tests locally by executing `rushx test`. Explore the `test` folder to see advanced usage and behavior of the public classes.\n\n## Troubleshooting\n\nIf you run into issues while using this library, please feel free to [file an issue](https://github.com/Azure/azure-sdk-for-js/issues/new).\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fcore%2Fcore-auth%2FREADME.png)\n",
        "repo_name": "core/core-auth",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/core/core-auth",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Rest Core client library for JavaScript\n\nThis library is primarily intended to be used in code generated by [AutoRest](https://github.com/Azure/Autorest) and [`autorest.typescript`](https://github.com/Azure/autorest.typescript). Specifically for rest level clients\n\n## Getting started\n\n### Requirements\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge, and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Installation\n\nThis package is primarily used in generated code and not meant to be consumed directly by end users.\n\n## Key concepts\n\n## Examples\n\nExamples can be found in the `samples` folder.\n\n## Next steps\n\nYou can build and run the tests locally by executing `rushx test`. Explore the `test` folder to see advanced usage and behavior of the public classes.\n\nLearn more about [AutoRest](https://github.com/Azure/autorest) and the [autorest.typescript extension](https://github.com/Azure/autorest.typescript) for generating a compatible client on top of this package.\n\n## Troubleshooting\n\nIf you run into issues while using this library, please feel free to [file an issue](https://github.com/Azure/azure-sdk-for-js/issues/new).\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fcore-rest%2Fcore-client%2FREADME.png)\n",
        "repo_name": "core/core-client-rest",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/core/core-client-rest",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Core Service client library for JavaScript\n\nThis library is primarily intended to be used in code generated by [AutoRest](https://github.com/Azure/Autorest) and [`autorest.typescript`](https://github.com/Azure/autorest.typescript).\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge, and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Installation\n\nThis package is primarily used in generated code and not meant to be consumed directly by end users.\n\n## Key concepts\n\n### ServiceClient\n\nThis is the common base class for generated clients. It provides the methods `sendOperationRequest` and `sendRequest`.\n\n`sendRequest` simply makes an HTTP request using a `Pipeline` (see `@azure/core-rest-pipeline` for details.)\n\n`sendOperationRequest` is used by generated code to make a request using an `OperationSpec` and `OperationArguments`. An `OperationSpec` is a translation of request requirements from the OpenAPI/Swagger file that describes the service.\n\n### createClientPipeline\n\nThis method is used to create a `Pipeline` instance that is customized with extra policies that perform serialization and deserialization. The bulk of the work is in converting requests into the right HTTP message that a service expects and then converting the HTTP response payload into the response shape described by the service's OpenAPI specification file.\n\n### Mappers / createSerializer\n\n`Mapper`s are used to encode and decode data into HTTP headers and bodies. They describe all request and response fields. They are referenced by `OperationSpec`s.\n\nThe method `createSerializer` creates a `Serializer` that is used to do the bulk of the work transforming data when making a request or processing a response. Given a corpus of `Mapper`s and the appropriate `OperationSpec` it can manufacture an HTTP request object from a user provided input or convert an HTTP response object into a user-friendly form.\n\n## Examples\n\nExamples can be found in the [samples](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/core-client/samples) folder.\n\n## Next steps\n\nYou can build and run the tests locally by executing `rushx test`. Explore the [test](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/core-client/test) folder to see advanced usage and behavior of the public classes.\n\nLearn more about [AutoRest](https://github.com/Azure/autorest) and the [autorest.typescript extension](https://github.com/Azure/autorest.typescript) for generating a compatible client on top of this package.\n\n## Troubleshooting\n\nIf you run into issues while using this library, please feel free to [file an issue](https://github.com/Azure/azure-sdk-for-js/issues/new).\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fcore%2Fcore-client%2FREADME.png)\n",
        "repo_name": "core/core-client",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/core/core-client",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Core HTTP Compatibility library for JavaScript\n\nThis library provides classes and interfaces to be used by Azure client libraries that want to move from using [@azure/core-http](https://www.npmjs.com/package/@azure/core-http) to [@azure/core-client](https://www.npmjs.com/package/@azure/core-client) & [@azure/core-rest-pipeline](https://www.npmjs.com/package/@azure/core-rest-pipeline) without causing breaking changes in their public API surface.\n\n## Usage\n\n### ExtendedCommonClientOptions\n\nWith `@azure/core-http` library, the `options` parameter to the custom client will look like:\n\n```\nexport interface SearchClientOptions extends PipelineOptions {\n  apiVersion?: string;\n}\n```\n\nWith the `@azure/core-client` & `@azure/core-rest-pipeline` libraries, the `options` parameter to the custom client will look like:\n\n```\nexport interface SearchClientOptions extends CommonClientOptions {\n  apiVersion?: string;\n}\n```\n\nWith the Core HTTP Compatibility library, the `options` parameter to the custom client will look like:\n\n```\nexport interface SearchClientOptions extends ExtendedCommonClientOptions {\n  apiVersion?: string;\n}\n```\n",
        "repo_name": "core/core-http-compat",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/core/core-http-compat",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Core HTTP client library for JavaScript\n\nThis is the core HTTP pipeline for Azure SDK JavaScript libraries which work in the browser and Node.js. This library is primarily intended to be used in code generated by [AutoRest](https://github.com/Azure/Autorest) and [`autorest.typescript`](https://github.com/Azure/autorest.typescript).\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge, and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Installation\n\nThis package is primarily used in generated code and not meant to be consumed directly by end users.\n\n## Key concepts\n\nYou can find an explanation of how this repository's code works by going to our [architecture overview](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/core/core-http/docs/architectureOverview.md).\n\n## Examples\n\nExamples can be found in the `samples` folder.\n\n## Next steps\n\n- Build this library (`core-http`). For more information on how to build project in this repo, please refer to the [Contributing Guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md).\n\n- The code in `samples\\node-sample.ts` shows how to create a `ServiceClient` instance with a test `TokenCredential` implementation and use the client instance to perform a `GET` operation from the Azure management service endpoint for subscriptions. To run the code, first obtain an access token to the Azure management service.\n\nOne easy way to get an access token is using [Azure CLI](https://docs.microsoft.com/cli/azure/?view=azure-cli-latest)\n\n1. Sign in\n```shell\naz login\n```\n2. Select the subscription to use\n```shell\naz account set -s <subscription id>\n```\n3. Obtain an access token\n```shell\naz account get-access-token --resource=https://management.azure.com\n```\n\n### NodeJS\n\n- Set values of `subscriptionId` and `token` variable in `samples/node-sample.ts`\n\n- Change directory to samples folder, compile the TypeScript code, then run the sample\n\n```\ncd samples\ntsc node-sample.ts\nnode node-sample.js\n```\n\n### Browser\n\n- Set values of `subscriptionId` and `token` variable in `samples/index.js`\n- Follow the instructions of [JavaScript Bundling Guide using Parcel](https://github.com/Azure/azure-sdk-for-js/blob/main/documentation/Bundling.md#using-parcel) to build and run the code in the browser.\n\n## Troubleshooting\n\nIf you run into issues while using this library, please feel free to [file an issue](https://github.com/Azure/azure-sdk-for-js/issues/new).\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fcore%2Fcore-http%2FREADME.png)\n",
        "repo_name": "core/core-http",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/core/core-http",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Core LRO client library for JavaScript\n\nThis is the default implementation of long running operations in Azure SDK JavaScript client libraries which work in both the browser and NodeJS. This library is primarily intended to be used in code generated by [AutoRest](https://github.com/Azure/Autorest) and [`autorest.typescript`](https://github.com/Azure/autorest.typescript).\n\n`@azure/core-lro` follows [The Azure SDK Design Guidelines for Long Running Operations](https://azure.github.io/azure-sdk/typescript_design.html#ts-lro)\n\nKey links:\n\n- [Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/core-lro)\n- [Package (npm)](https://www.npmjs.com/package/@azure/core-lro) \n- [API Reference Documentation](https://docs.microsoft.com/javascript/api/@azure/core-lro) \n- [Samples](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/core/core-lro/samples)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge, and Firefox.\n\n### Installation\n\nThis package is primarily used in generated code and not meant to be consumed directly by end users.\n\n## Key concepts\n\n### `SimplePollerLike`\n\nA poller is an object that can poll the long running operation on the server for its state until it reaches a terminal state. It provides the following methods:\n\n- `getOperationState`: returns the state of the operation, typed as a type that extends `OperationState`\n- `getResult`: returns the result of the operation when it completes and `undefined` otherwise\n- `isDone`: returns whether the operation is in a terminal state\n- `isStopped`: returns whether the polling stopped\n- `onProgress`: registers callback functions to be called every time a polling response is received\n- `poll`: sends a single polling request\n- `pollUntilDone`: returns a promise that will resolve with the result of the operation\n- `stopPolling`: stops polling;\n- `toString`: serializes the state of the poller\n\n### `OperationState`\n\nA type for the operation state. It contains a `status` field with the following possible values: `notStarted`, `running`, `succeeded`, `failed`, and `canceled`. It can be accessed as follows:\n\n```typescript\nswitch(poller.getOperationState().status) {\n  case \"succeeded\":  // return poller.getResult();\n  case \"failed\":     // throw poller.getOperationState().error;\n  case \"canceled\":   // throw new Error(\"Operation was canceled\");\n  case \"running\":    // ...\n  case \"notStarted\": // ...\n}\n```\n\n### `createHttpPoller`\n\nA function that returns an object of type `SimplePollerLike`. This poller behaves as follows in the presence of errors:\n\n- calls to `poll` and `pollUntilDone` will throw an error in case the operation has failed or canceled unless the `resolveOnUnsuccessful` option was set to true.\n- `poller.getOperationState().status` will be set to true when either the operation fails or it returns an error response.\n\n\n## Examples\n\nExamples can be found in the `samples` folder.\n\n## Troubleshooting\n\n### Logging\n\nLogs can be added at the discretion of the library implementing the Long Running Operation poller.\nPackages inside of [azure-sdk-for-js](https://github.com/Azure/azure-sdk-for-js) use\n[@azure/logger](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/core/core-lro/samples) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n### Testing\n\nTo run our tests, first install the dependencies (with `npm install` or `rush install`),\nthen run the unit tests with: `npm run unit-test`.\n\n### Code of Conduct\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or\ncontact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fcore%2Fcore-lro%2FREADME.png)\n",
        "repo_name": "core/core-lro",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/core/core-lro",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Core Paging client library for JavaScript\n\nThis library provides core types for paging async iterable iterators.\n\n## Getting started\n\n### Installation\n\nIf using this as part of another project in the [azure-sdk-for-js](https://github.com/Azure/azure-sdk-for-js) repo,\nthen run `rush install` after cloning the repo.\n\nOtherwise, use npm to install this package in your application as follows\n\n```javascript\nnpm install @azure/core-paging\n```\n\n## Key concepts\n\nYou can find an explanation of how this repository's code works by going to our [architecture overview](https://github.com/Azure/ms-rest-js/blob/master/docs/architectureOverview.md).\n\n## Examples\n\nExample of building with the types:\n\n```typescript\n  public listSecrets(\n    options: ListSecretsOptions = {}\n  ): PagedAsyncIterableIterator<SecretAttributes> {\n    const iter = this.listSecretsAll(options);\n    return {\n      async next() { return iter.next(); },\n      [Symbol.asyncIterator]() { return this; },\n      byPage: (settings: PageSettings = {}) => this.listSecretsPage(settings, options),\n    };\n  }\n```\n\nAnd using the types:\n\n```\n  for await (let page of client.listSecrets().byPage({ maxPageSize: 2 })) {\n    for (const secret of page) {\n      console.log(\"secret: \", secret);\n    }\n  }\n```\n\n## Next steps\n\nTry out this package in your application when dealing with async iterable iterators and provide feedback!\n\n## Troubleshooting\n\nLog an issue at https://github.com/Azure/azure-sdk-for-js/issues\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fcore%2Fcore-paging%2FREADME.png)\n",
        "repo_name": "core/core-paging",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/core/core-paging",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Core HTTP client library for JavaScript\n\nThis is the core HTTP pipeline for Azure SDK JavaScript libraries which work in the browser and Node.js. This library is primarily intended to be used in code generated by [AutoRest](https://github.com/Azure/Autorest) and [`autorest.typescript`](https://github.com/Azure/autorest.typescript).\n\n## Getting started\n\n### Requirements\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge, and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Installation\n\nThis package is primarily used in generated code and not meant to be consumed directly by end users.\n\n## Key concepts\n\n### PipelineRequest\n\nA `PipelineRequest` describes all the information necessary to make a request to an HTTP REST endpoint.\n\n### PipelineResponse\n\nA `PipelineResponse` describes the HTTP response (body, headers, and status code) from a REST endpoint that was returned after making an HTTP request.\n\n### SendRequest\n\nA `SendRequest` method is a method that given a `PipelineRequest` can asynchronously return a `PipelineResponse`.\n\n```ts\nexport type SendRequest = (request: PipelineRequest) => Promise<PipelineResponse>;\n```\n\n### HttpClient\n\nAn `HttpClient` is any object that satisfies the following interface to implement a `SendRequest` method:\n\n```ts\nexport interface HttpClient {\n  /**\n   * The method that makes the request and returns a response.\n   */\n  sendRequest: SendRequest;\n}\n```\n\n`HttpClient`s are expected to actually make the HTTP request to a server endpoint, using some platform-specific mechanism for doing so.\n\n### Pipeline Policies\n\nA `PipelinePolicy` is a simple object that implements the following interface:\n\n```ts\nexport interface PipelinePolicy {\n  /**\n   * The policy name. Must be a unique string in the pipeline.\n   */\n  name: string;\n  /**\n   * The main method to implement that manipulates a request/response.\n   * @param request The request being performed.\n   * @param next The next policy in the pipeline. Must be called to continue the pipeline.\n   */\n  sendRequest(request: PipelineRequest, next: SendRequest): Promise<PipelineResponse>;\n}\n```\n\nIt is similar in shape to `HttpClient`, but includes a policy name as well as a slightly modified `SendRequest` signature that allows it to conditionally call the next policy in the pipeline.\n\nOne can view the role of policies as that of `middleware`, a concept that is familiar to NodeJS developers who have worked with frameworks such as [Express](https://expressjs.com/).\n\nThe `sendRequest` implementation can both transform the outgoing request as well as the incoming response:\n\n```ts\nconst customPolicy = {\n  name: \"My wonderful policy\",\n  async sendRequest(request: PipelineRequest, next: SendRequest): Promise<PipelineResponse> {\n    // Change the outgoing request by adding a new header\n    request.headers.set(\"X-Cool-Header\", 42);\n    const result = await next(request);\n    if (response.status === 403) {\n      // Do something special if this policy sees Forbidden\n    }\n    return result;\n  }\n};\n```\n\nMost policies only concern themselves with either the request or the response, but there are some exceptions such as the [LogPolicy](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/core/core-rest-pipeline/src/policies/logPolicy.ts) which logs information from each.\n\n### Pipelines\n\nA `Pipeline` is an object that manages a set of `PipelinePolicy` objects. Its main function is to ensure that policies are executed in a consistent and predictable order.\n\nYou can think of policies being applied like a stack (first-in/last-out.) The first `PipelinePolicy` is able to modify the `PipelineRequest` before any other policies, and it is also the last to modify the `PipelineResponse`, making it the closest to the caller. The final policy is the last able to modify the outgoing request, and the first to handle the response, making it the closest to the network.\n\nA `Pipeline` satisfies the following interface:\n\n```ts\nexport interface Pipeline {\n  addPolicy(policy: PipelinePolicy, options?: AddPolicyOptions): void;\n  removePolicy(options: { name?: string; phase?: PipelinePhase }): PipelinePolicy[];\n  sendRequest(httpClient: HttpClient, request: PipelineRequest): Promise<PipelineResponse>;\n  getOrderedPolicies(): PipelinePolicy[];\n  clone(): Pipeline;\n}\n```\n\nAs you can see it allows for policies to be added or removed and it is loosely coupled with `HttpClient` to perform the real request to the server endpoint.\n\nOne important concept for `Pipeline`s is that they group policies into ordered phases:\n\n1. Serialize Phase\n2. Policies not in a phase\n3. Deserialize Phase\n4. Retry Phase\n\nPhases occur in the above order, with serialization policies being applied first and retry policies being applied last. Most custom policies fall into the second bucket and are not given a phase name.\n\nWhen adding a policy to the pipeline you can specify not only what phase a policy is in, but also if it has any dependencies:\n\n```ts\nexport interface AddPolicyOptions {\n  beforePolicies?: string[];\n  afterPolicies?: string[];\n  afterPhase?: PipelinePhase;\n  phase?: PipelinePhase;\n}\n```\n\n`beforePolicies` are policies that the new policy must execute before and `afterPolicies` are policies that the new policy must happen after. Similarly, `afterPhase` means the policy must only execute after the specified phase has occurred.\n\nThis syntax allows custom policy authors to express any necessary relationships between their own policies and the built-in policies provided by `@azure/core-rest-pipeline` when creating a pipeline using `createPipelineFromOptions`.\n\nImplementers are also able to remove policies by name or phase, in the case that they wish to modify an existing `Pipeline` without having to create a new one using `createEmptyPipeline`. The `clone` method is particularly useful when recreating a `Pipeline` without modifying the original.\n\nAfter all other constraints have been satisfied, policies are applied in the order which they were added.\n\n## Examples\n\nExamples can be found in the `samples` folder.\n\n## Next steps\n\nYou can build and run the tests locally by executing `rushx test`. Explore the `test` folder to see advanced usage and behavior of the public classes.\n\n## Troubleshooting\n\nIf you run into issues while using this library, please feel free to [file an issue](https://github.com/Azure/azure-sdk-for-js/issues/new).\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fcore%2Fcore-rest-pipeline%2FREADME.png)\n",
        "repo_name": "core/core-rest-pipeline",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/core/core-rest-pipeline",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Core tracing library for JavaScript\n\nThis is the core tracing library that provides low-level interfaces and helper methods for tracing in Azure SDK JavaScript libraries which work in the browser and Node.js.\n\n## Getting started\n\n### Installation\n\nThis package is primarily used in Azure client libraries and not meant to be used directly by consumers of Azure SDKs.\n\n## Key Concepts\n\n- `TracingClient` is the primary interface providing tracing functionality to client libraries. Client libraries should only be aware of and interact with a `TracingClient` instance.\n  - A `TracingClient` implementation can be created using the `createTracingClient` factory function.\n- `Instrumenter` provides an abstraction over an instrumentation and acts as the interop point for using third party libraries like OpenTelemetry. By default, a no-op `Instrumenter` is used. Customers who wish to enable `OpenTelemetry` based tracing will do so by installing and registering the [@azure/opentelemetry-instrumentation-azure-sdk] package.\n- `TracingContext` is an **immutable** data container, used to pass operation-specific information around (such as span parenting information).\n- `TracingSpan` is an abstraction of a `Span` which can be used to record events, attributes, and exceptions.\n\n## Examples\n\nExamples can be found in the `samples` folder.\n\n## Next steps\n\nYou can build and run the tests locally by executing `rushx test`. Explore the `test` folder to see advanced usage and behavior of the public classes.\n\n## Troubleshooting\n\nIf you run into issues while using this library, please feel free to [file an issue](https://github.com/Azure/azure-sdk-for-js/issues/new).\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n[@azure/opentelemetry-instrumentation-azure-sdk]: https://www.npmjs.com/package/@azure/opentelemetry-instrumentation-azure-sdk\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fcore%2Fcore-tracing%2FREADME.png)\n",
        "repo_name": "core/core-tracing",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/core/core-tracing",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Core Util client library for JavaScript (Experimental)\n\nThis library is intended to provide various shared utility functions for client SDK packages.\n\n## Getting started\n\n### Requirements\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge, and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Installation\n\nThis package is primarily used in authoring client SDKs and not meant to be consumed directly by end users.\n\n## Key concepts\n\nUtility methods provided by this library should be stateless.\n\n## Examples\n\nExamples can be found in the `samples` folder.\n\n## Next steps\n\nLook at usage in dependent client SDKs.\n\n## Troubleshooting\n\nIf you run into issues while using this library, please feel free to [file an issue](https://github.com/Azure/azure-sdk-for-js/issues/new).\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fcore%2Fcore-util%2FREADME.png)\n",
        "repo_name": "core/core-util",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/core/core-util",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Core XML client library for JavaScript\n\nThis library is primarily intended to be used in code generated by [AutoRest](https://github.com/Azure/Autorest) and [`autorest.typescript`](https://github.com/Azure/autorest.typescript) for APIs that require parsing XML payloads.\n\n## Getting started\n\n### Requirements\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge, and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Installation\n\nThis package is primarily used in generated code and not meant to be consumed directly by end users.\n\n## Key concepts\n\nXML parsing is mostly delegated to the browser and `xml2js`.\n\n## Examples\n\nExamples can be found in the `samples-dev` folder and can be ran using `rushx execute:samples`.\n\n## Next steps\n\nSee `@azure/core-client` for actual usage.\n\n## Troubleshooting\n\nIf you run into issues while using this library, please feel free to [file an issue](https://github.com/Azure/azure-sdk-for-js/issues/new).\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fcore%2Fcore-client%2FREADME.png)\n",
        "repo_name": "core/core-xml",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/core/core-xml",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Logger client library for JavaScript\n\nThe `@azure/logger` package can be used to enable logging in the Azure SDKs for JavaScript.\n\nLogging can be enabled for the Azure SDK in the following ways:\n\n- Setting the AZURE_LOG_LEVEL environment variable\n- Calling setLogLevel imported from \"@azure/logger\"\n- Calling enable() on specific loggers\n- Using the `DEBUG` environment variable.\n\nNote that AZURE_LOG_LEVEL, if set, takes precedence over DEBUG. Only use DEBUG without specifying AZURE_LOG_LEVEL or calling setLogLevel.\n\n## Getting started\n\n### Installation\n\nInstall this library using npm as follows\n\n```\nnpm install @azure/logger\n```\n\n## Key Concepts\n\nThe `@azure/logger` package supports the following log levels\nspecified in order of most verbose to least verbose:\n\n- verbose\n- info\n- warning\n- error\n\nWhen setting a log level, either programmatically or via the `AZURE_LOG_LEVEL` environment variable,\nany logs that are written using a log level equal to or less than the one you choose\nwill be emitted.\n\nFor example, setting the log level to `warning` will cause all logs that have the log\nlevel `warning` or `error` to be emitted.\n\n\n**NOTE**: When logging requests and responses, we sanitize these objects to make sure things like `Authorization` headers that contain secrets are not logged. \n\nRequest and response bodies are never logged. Headers are redacted by default, unless present in the following list or explicitly allowed by the client SDK:\n- \"x-ms-client-request-id\",\n- \"x-ms-return-client-request-id\",\n- \"x-ms-useragent\",\n- \"x-ms-correlation-request-id\",\n- \"x-ms-request-id\",\n- \"client-request-id\",\n- \"ms-cv\",\n- \"return-client-request-id\",\n- \"traceparent\", \n- \"Access-Control-Allow-Credentials\",\n- \"Access-Control-Allow-Headers\",\n- \"Access-Control-Allow-Methods\",\n- \"Access-Control-Allow-Origin\",\n- \"Access-Control-Expose-Headers\",\n- \"Access-Control-Max-Age\",\n- \"Access-Control-Request-Headers\",\n- \"Access-Control-Request-Method\",\n- \"Origin\",\n- \"Accept\",\n- \"Accept-Encoding\",\n- \"Cache-Control\",\n- \"Connection\",\n- \"Content-Length\",\n- \"Content-Type\",\n- \"Date\",\n- \"ETag\",\n- \"Expires\",\n- \"If-Match\",\n- \"If-Modified-Since\",\n- \"If-None-Match\",\n- \"If-Unmodified-Since\",\n- \"Last-Modified\",\n- \"Pragma\",\n- \"Request-Id\",\n- \"Retry-After\",\n- \"Server\",\n- \"Transfer-Encoding\",\n- \"User-Agent\",\n- \"WWW-Authenticate\",\n\n## Examples\n\n### Example 1 - basic usage\n\n```js\nconst { EventHubClient } = require('@azure/event-hubs');\n\nconst logger = require('@azure/logger');\nlogger.setLogLevel('info');\n\n// operations will now emit info, warning, and error logs\nconst client = new EventHubClient(/* params */);\nclient.getPartitionIds()\n  .then(ids => { /* do work */ })\n  .catch(e => { /* do work */ });\n});\n```\n\n### Example 2 - redirect log output\n\n```js\nconst { AzureLogger, setLogLevel } = require(\"@azure/logger\");\n\nsetLogLevel(\"verbose\");\n\n// override logging to output to console.log (default location is stderr)\nAzureLogger.log = (...args) => {\n  console.log(...args);\n};\n```\n\nUsing `AzureLogger`, it is possible to redirect the logging output from the Azure SDKs by\noverriding the `AzureLogger.log` method. This may be useful if you want to redirect logs to\na location other than stderr.\n\n## Next steps\n\nYou can build and run the tests locally by executing `rushx test`. Explore the `test` folder to see advanced usage and behavior of the public classes.\n\n## Troubleshooting\n\nIf you run into issues while using this library, please feel free to [file an issue](https://github.com/Azure/azure-sdk-for-js/issues/new).\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fcore%2Flogger%2FREADME.png)\n",
        "repo_name": "core/logger",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/core/logger",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure CosmosDBManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure CosmosDBManagement client.\n\nAzure Cosmos DB Database Service Resource Provider REST API\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/cosmosdb/arm-cosmosdb) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-cosmosdb) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-cosmosdb) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-cosmosdb` package\n\nInstall the Azure CosmosDBManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-cosmosdb\n```\n\n### Create and authenticate a `CosmosDBManagementClient`\n\nTo create a client object to access the Azure CosmosDBManagement API, you will need the `endpoint` of your Azure CosmosDBManagement resource and a `credential`. The Azure CosmosDBManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure CosmosDBManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure CosmosDBManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { CosmosDBManagementClient } = require(\"@azure/arm-cosmosdb\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new CosmosDBManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new CosmosDBManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### CosmosDBManagementClient\n\n`CosmosDBManagementClient` is the primary interface for developers using the Azure CosmosDBManagement client library. Explore the methods on this client object to understand the different features of the Azure CosmosDBManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fcosmosdb%2Farm-cosmosdb%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "cosmosdb/arm-cosmosdb",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/cosmosdb/arm-cosmosdb",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Cosmos DB client library for JavaScript/TypeScript\n\n[![latest npm badge](https://img.shields.io/npm/v/%40azure%2Fcosmos/latest.svg)][npm]\n[![Build Status](https://dev.azure.com/azure-sdk/public/_apis/build/status/js/js%20-%20cosmosdb%20-%20ci?branchName=main)](https://dev.azure.com/azure-sdk/public/_build/latest?definitionId=850&branchName=main)\n\nAzure Cosmos DB is a globally distributed, multi-model database service that supports document, key-value, wide-column, and graph databases. This package is intended for JavaScript/TypeScript applications to interact with **SQL API** databases and the JSON documents they contain:\n\n- Create Cosmos DB databases and modify their settings\n- Create and modify containers to store collections of JSON documents\n- Create, read, update, and delete the items (JSON documents) in your containers\n- Query the documents in your database using SQL-like syntax\n\nKey links:\n\n- [Package (npm)][npm]\n- [API reference documentation](https://docs.microsoft.com/javascript/api/@azure/cosmos/?view=azure-node-lates)\n- [Product documentation][cosmos_docs]\n\n## Getting started\n\n### Prerequisites\n\n#### Azure Subscription and Cosmos DB SQL API Account\n\nYou must have an [Azure Subscription][azure_sub], and a [Cosmos DB account][cosmos_account] (SQL API) to use this package.\n\nIf you need a Cosmos DB SQL API account, you can use the Azure [Cloud Shell][cloud_shell_bash] to create one with this Azure CLI command:\n\n```Bash\naz cosmosdb create --resource-group <resource-group-name> --name <cosmos-database-account-name>\n```\n\nOr you can create an account in the [Azure Portal](https://portal.azure.com/#create/microsoft.documentdb)\n\n#### NodeJS\n\nThis package is distributed via [npm][npm] which comes preinstalled with [NodeJS](https://nodejs.org/en/). You should be using Node v10 or above.\n\n#### CORS\n\nYou need to set up [Cross-Origin Resource Sharing (CORS)](https://docs.microsoft.com/azure/cosmos-db/how-to-configure-cross-origin-resource-sharing) rules for your Cosmos DB account if you need to develop for browsers. Follow the instructions in the linked document to create new CORS rules for your Cosmos DB.\n\n### Install this package\n\n```Bash\nnpm install @azure/cosmos\n```\n\n### Get Account Credentials\n\nYou will need your Cosmos DB **Account Endpoint** and **Key**. You can find these in the [Azure Portal](https://portal.azure.com/#blade/hubsextension/browseresource/resourcetype/microsoft.documentdb%2fdatabaseaccounts) or use the [Azure CLI][azure_cli] snippet below. The snippet is formatted for the Bash shell.\n\n```Bash\naz cosmosdb show --resource-group <your-resource-group> --name <your-account-name> --query documentEndpoint --output tsv\naz cosmosdb keys list --resource-group <your-resource-group> --name <your-account-name> --query primaryMasterKey --output tsv\n```\n\n### Create an instance of `CosmosClient`\n\nInteraction with Cosmos DB starts with an instance of the [CosmosClient](https://docs.microsoft.com/javascript/api/@azure/cosmos/cosmosclient?view=azure-node-latest) class\n\n```js\nconst { CosmosClient } = require(\"@azure/cosmos\");\n\nconst endpoint = \"https://your-account.documents.azure.com\";\nconst key = \"<database account masterkey>\";\nconst client = new CosmosClient({ endpoint, key });\n\nasync function main() {\n  // The rest of the README samples are designed to be pasted into this function body\n}\n\nmain().catch((error) => {\n  console.error(error);\n});\n```\n\nFor simplicity we have included the `key` and `endpoint` directly in the code but you will likely want to load these from a file not in source control using a project such as [dotenv](https://www.npmjs.com/package/dotenv) or loading from environment variables\n\nIn production environments, secrets like keys should be stored in [Azure Key Vault](https://azure.microsoft.com/services/key-vault/)\n\n## Key concepts\n\nOnce you've initialized a [CosmosClient](https://docs.microsoft.com/javascript/api/@azure/cosmos/cosmosclient?view=azure-node-lates), you can interact with the primary resource types in Cosmos DB:\n\n- [Database](https://docs.microsoft.com/javascript/api/@azure/cosmos/database?view=azure-node-latest): A Cosmos DB account can contain multiple databases. When you create a database, you specify the API you'd like to use when interacting with its documents: SQL, MongoDB, Gremlin, Cassandra, or Azure Table. Use the [Database](https://docs.microsoft.com/javascript/api/@azure/cosmos/database?view=azure-node-latest) object to manage its containers.\n\n- [Container](https://docs.microsoft.com/javascript/api/@azure/cosmos/container?view=azure-node-latest): A container is a collection of JSON documents. You create (insert), read, update, and delete items in a container by using methods on the [Container](https://docs.microsoft.com/javascript/api/@azure/cosmos/container?view=azure-node-latest) object.\n\n- [Item](https://docs.microsoft.com/javascript/api/@azure/cosmos/item?view=azure-node-latest): An Item is a JSON document stored in a container. Each Item must include an `id` key with a value that uniquely identifies the item within the container. If you do not provide an `id`, the SDK will generate one automatically.\n\nFor more information about these resources, see [Working with Azure Cosmos databases, containers and items][cosmos_resources].\n\n## Examples\n\nThe following sections provide several code snippets covering some of the most common Cosmos DB tasks, including:\n\n- [Create a database](#create-a-database)\n- [Create a container](#create-a-container)\n- [Using Partition Keys](#using-partition-keys)\n- [Insert items](#insert-items)\n- [Query documents](#query-the-database)\n- [Read an item](#read-an-item)\n- [Delete an item](#delete-an-data)\n- [CRUD on Container with hierarchical partition key](#container-hierarchical-partition-key)\n### Create a database\n\nAfter authenticating your [CosmosClient](https://docs.microsoft.com/javascript/api/@azure/cosmos/cosmosclient?view=azure-node-latest), you can work with any resource in the account. The code snippet below creates a NOSQL API database.\n\n```js\nconst { database } = await client.databases.createIfNotExists({ id: \"Test Database\" });\nconsole.log(database.id);\n```\n\n### Create a container\n\nThis example creates a container with default settings\n\n```js\nconst { container } = await database.containers.createIfNotExists({ id: \"Test Database\" });\nconsole.log(container.id);\n```\n\n### Using Partition Keys\nThis example shows various types of partition Keys supported.\n```js\nawait container.item(\"id\", \"1\").read();        // string type\nawait container.item(\"id\", 2).read();          // number type\nawait container.item(\"id\", true).read();       // boolean type\nawait container.item(\"id\", {}).read();         // None type\nawait container.item(\"id\", undefined).read();  // None type\nawait container.item(\"id\", null).read();       // null type\n```\n\nIf the Partition Key consists of a single value, it could be supplied either as a lietral value, or an array.\n\n```js\nawait container.item(\"id\", \"1\").read();\nawait container.item(\"id\", [\"1\"]).read();\n```\n\nIf the Partition Key consists of more than one values, it should be supplied as an array.\n```js\nawait container.item(\"id\", [\"a\", \"b\"]).read();\nawait container.item(\"id\", [\"a\", 2]).read();\nawait container.item(\"id\", [{}, {}]).read();\nawait container.item(\"id\", [\"a\", {}]).read();\nawait container.item(\"id\", [2, null]).read();\n\n```\n\n### Insert items\n\nTo insert items into a container, pass an object containing your data to [Items.upsert](https://docs.microsoft.com/javascript/api/@azure/cosmos/items?view=azure-node-latest#upsert-t--requestoptions-). The Azure Cosmos DB service requires each item has an `id` key. If you do not provide one, the SDK will generate an `id` automatically.\n\nThis example inserts several items into the container\n\n```js\nconst cities = [\n  { id: \"1\", name: \"Olympia\", state: \"WA\", isCapitol: true },\n  { id: \"2\", name: \"Redmond\", state: \"WA\", isCapitol: false },\n  { id: \"3\", name: \"Chicago\", state: \"IL\", isCapitol: false }\n];\nfor (const city of cities) {\n  await container.items.create(city);\n}\n```\n\n### Read an item\n\nTo read a single item from a container, use [Item.read](https://docs.microsoft.com/javascript/api/@azure/cosmos/item?view=azure-node-latest#read-requestoptions-). This is a less expensive operation than using SQL to query by `id`.\n\n```js\nawait container.item(\"1\", \"1\").read();\n```\n### CRUD on Container with hierarchical partition key\n\nCreate a Container with hierarchical partition key\n```js\nconst containerDefinition = {\n  id: \"Test Database\",\n  partitionKey: {\n    paths: [\"/name\", \"/address/zip\"],\n    version: PartitionKeyDefinitionVersion.V2,\n    kind: PartitionKeyKind.MultiHash,\n  },\n}\nconst { container } = await database.containers.createIfNotExists(containerDefinition);\nconsole.log(container.id);\n```\nInsert an item with hierarchical partition key defined as - `[\"/name\", \"/address/zip\"]`\n```js\nconst item = {\n  id: 1,\n  name: 'foo',\n  address: {\n    zip: 100\n  },\n  active: true\n}\nawait container.items.create(item);\n```\n\nTo read a single item from a container with hierarchical partition key defined as - `[\"/name\", \"/address/zip\"],`\n```js\nawait container.item(\"1\", [\"foo\", 100]).read();\n```\nQuery an item with hierarchical partition key with hierarchical partition key defined as - `[\"/name\", \"/address/zip\"],`\n```js\nconst { resources } = await container.items\n  .query(\"SELECT * from c WHERE c.active = true\", {\n          partitionKey: [\"foo\", 100],\n        })\n  .fetchAll();\nfor (const item of resources) {\n  console.log(`${item.name}, ${item.address.zip} `);\n}\n```\n### Delete an item\n\nTo delete items from a container, use [Item.delete](https://docs.microsoft.com/javascript/api/@azure/cosmos/item?view=azure-node-latest#delete-requestoptions-).\n\n```js\n// Delete the first item returned by the query above\nawait container.item(\"1\").delete();\n```\n\n### Query the database\n\nA Cosmos DB SQL API database supports querying the items in a container with [Items.query](https://docs.microsoft.com/javascript/api/@azure/cosmos/items?view=azure-node-latest#query-string---sqlqueryspec--feedoptions-) using SQL-like syntax:\n\n```js\nconst { resources } = await container.items\n  .query(\"SELECT * from c WHERE c.isCapitol = true\")\n  .fetchAll();\nfor (const city of resources) {\n  console.log(`${city.name}, ${city.state} is a capitol `);\n}\n```\n\nPerform parameterized queries by passing an object containing the parameters and their values to [Items.query](https://docs.microsoft.com/javascript/api/@azure/cosmos/items?view=azure-node-latest#query-string---sqlqueryspec--feedoptions-):\n\n```js\nconst { resources } = await container.items\n  .query({\n    query: \"SELECT * from c WHERE c.isCapitol = @isCapitol\",\n    parameters: [{ name: \"@isCapitol\", value: true }]\n  })\n  .fetchAll();\nfor (const city of resources) {\n  console.log(`${city.name}, ${city.state} is a capitol `);\n}\n```\n\nFor more information on querying Cosmos DB databases using the SQL API, see [Query Azure Cosmos DB data with SQL queries][cosmos_sql_queries].\n\n## Error Handling\n\nThe SDK generates various types of errors that can occur during an operation.\n\n1. `ErrorResponse` is thrown if the response of an operation returns an error code of >=400.\n2. `TimeoutError` is thrown if Abort is called internally due to timeout.\n3. `AbortError` is thrown if any user passed signal caused the abort.\n4. `RestError` is thrown in case of failure of underlying system call due to network issues.\n5. Errors generated by any devDependencies. For Eg. `@azure/identity` package could throw `CredentialUnavailableError`.\n\nFollowing is an example for handling errors of type `ErrorResponse`, `TimeoutError`, `AbortError`, and `RestError`.\n\n```js\ntry {\n  // some code\n} catch (err) {\n  if (err instanceof ErrorResponse) {\n    // some specific error handling.\n  } else if (err instanceof RestError) {\n    // some specific error handling.\n  }\n  // handle other type of errors in similar way.\n  else {\n    // for any other error.\n  }\n}\n```\n\nIt's important to properly handle these errors to ensure that your application can gracefully recover from any failures and continue functioning as expected. More details about some of these errors and their possible solutions can be found [here](https://learn.microsoft.com/azure/cosmos-db/nosql/conceptual-resilient-sdk-applications#should-my-application-retry-on-errors).\n\n## Troubleshooting\n\n### General\n\nWhen you interact with Cosmos DB errors returned by the service correspond to the same HTTP status codes returned for REST API requests:\n\n[HTTP Status Codes for Azure Cosmos DB][cosmos_http_status_codes]\n\n#### Conflicts\n\nFor example, if you try to create an item using an `id` that's already in use in your Cosmos DB database, a `409` error is returned, indicating the conflict. In the following snippet, the error is handled gracefully by catching the exception and displaying additional information about the error.\n\n```js\ntry {\n  await containers.items.create({ id: \"existing-item-id\" });\n} catch (error) {\n  if (error.code === 409) {\n    console.log(\"There was a conflict with an existing item\");\n  }\n}\n```\n\n### Transpiling\n\nThe Azure SDKs are designed to support ES5 JavaScript syntax and [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule). If you need support for earlier JavaScript runtimes such as Internet Explorer or Node 6, you will need to transpile the SDK code as part of your build process.\n\n### Handle transient errors with retries\n\nWhile working with Cosmos DB, you might encounter transient failures caused by [rate limits][cosmos_request_units] enforced by the service, or other transient problems like network outages. For information about handling these types of failures, see [Retry pattern][azure_pattern_retry] in the Cloud Design Patterns guide, and the related [Circuit Breaker pattern][azure_pattern_circuit_breaker].\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`. While using `AZURE_LOG_LEVEL` make sure to set it before logging library is initialized.\nIdeally pass it through command line, if using libraries like `dotenv` make sure such libraries are initialized before logging library.\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\n### More sample code\n\n[Several samples][cosmos_samples] are available to you in the SDK's GitHub repository. These samples provide example code for additional scenarios commonly encountered while working with Cosmos DB:\n\n- Database Operations\n- Container Operations\n- Item Operations\n- Configuring Indexing\n- Reading a container Change Feed\n- Stored Procedures\n- Changing Database/Container throughput settings\n- Multi Region Write Operations\n\n### Limitations \n\nCurrently the features below are **not supported**. For alternatives options, check the **Workarounds** section below.\n\n### Data Plane Limitations:\n\n* Queries with COUNT from a DISTINCT subquery\u200b\n* Direct TCP Mode access\u200b\n* Aggregate cross-partition queries, like sorting, counting, and distinct, don't support continuation tokens.       Streamable queries, like SELECT \\* FROM <table> WHERE <condition>, support continuation tokens. See the \"Workaround\" section for executing non-streamable queries without a continuation token.\n* Change Feed: Processor\n* Change Feed: Read multiple partitions key values\n* Change Feed: Read specific time\n* Change Feed: Read from the beginning\n* Change Feed: Pull model\n* Cross-partition ORDER BY for mixed types\n\n### Control Plane Limitations:\n\n* Get CollectionSizeUsage, DatabaseUsage, and DocumentUsage metrics\u200b\n* Create Geospatial Index\n* Update Autoscale throughput\n\n## Workarounds\n\n### Continuation token for cross partitions queries\nYou can achieve cross partition queries with continuation token support by using\n[Side car pattern](https://github.com/Azure-Samples/Cosmosdb-query-sidecar).\nThis pattern can also enable applications to be composed of heterogeneous components and technologies.\n\n### Executing non-stremable cross-partition query\n\nTo execute non-streamable queries without the use of continuation tokens, you can create a query iterator with the required query specification and options. The following sample code demonstrates how to use a query iterator to fetch all results without the need for a continuation token:\n\n```javascript\nconst querySpec = {\n  query: \"SELECT * FROM c WHERE c.status = @status\",\n  parameters: [{ name: \"@status\", value: \"active\" }],\n};\nconst queryOptions = {\n  maxItemCount: 10, // maximum number of items to return per page\n  enableCrossPartitionQuery: true,\n};\nconst querIterator = await container.items.query(querySpec, queryOptions);\nwhile (querIterator.hasMoreResults()) {\n  const { resources: result } = await querIterator.fetchNext();\n  //Do something with result\n}\n```\n\nThis approach can also be used for streamable queries.\n\n### Control Plane operations\nTypically, you can use [Azure Portal](https://portal.azure.com/), [Azure Cosmos DB Resource Provider REST API](https://docs.microsoft.com/rest/api/cosmos-db-resource-provider), [Azure CLI](https://docs.microsoft.com/cli/azure/azure-cli-reference-for-cosmos-db) or [PowerShell](https://docs.microsoft.com/azure/cosmos-db/manage-with-powershell) for the control plane unsupported limitations.\n\n\n### Additional documentation\n\nFor more extensive documentation on the Cosmos DB service, see the [Azure Cosmos DB documentation][cosmos_docs] on docs.microsoft.com.\n\n## Useful links\n\n- [Welcome to Azure Cosmos DB](https://docs.microsoft.com/azure/cosmos-db/community)\n- [Quick start](https://docs.microsoft.com/azure/cosmos-db/sql-api-nodejs-get-started)\n- [Tutorial](https://docs.microsoft.com/azure/cosmos-db/sql-api-nodejs-application)\n- [Samples](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/cosmosdb/cosmos/samples)\n- [Introduction to Resource Model of Azure Cosmos DB Service](https://docs.microsoft.com/azure/cosmos-db/sql-api-resources)\n- [Introduction to SQL API of Azure Cosmos DB Service](https://docs.microsoft.com/azure/cosmos-db/sql-api-sql-query)\n- [Partitioning](https://docs.microsoft.com/azure/cosmos-db/sql-api-partition-data)\n- [API Documentation](https://docs.microsoft.com/javascript/api/%40azure/cosmos/?view=azure-node-latest)\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fcosmosdb%2Fcosmos%2FREADME.png)\n\n<!-- LINKS -->\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_pattern_circuit_breaker]: https://docs.microsoft.com/azure/architecture/patterns/circuit-breaker\n[azure_pattern_retry]: https://docs.microsoft.com/azure/architecture/patterns/retry\n[azure_portal]: https://portal.azure.com\n[azure_sub]: https://azure.microsoft.com/free/\n[cloud_shell]: https://docs.microsoft.com/azure/cloud-shell/overview\n[cloud_shell_bash]: https://shell.azure.com/bash\n[cosmos_account_create]: https://docs.microsoft.com/azure/cosmos-db/how-to-manage-database-account\n[cosmos_account]: https://docs.microsoft.com/azure/cosmos-db/account-overview\n[cosmos_container]: https://docs.microsoft.com/azure/cosmos-db/databases-containers-items#azure-cosmos-containers\n[cosmos_database]: https://docs.microsoft.com/azure/cosmos-db/databases-containers-items#azure-cosmos-databases\n[cosmos_docs]: https://docs.microsoft.com/azure/cosmos-db/\n[cosmos_http_status_codes]: https://docs.microsoft.com/rest/api/cosmos-db/http-status-codes-for-cosmosdb\n[cosmos_item]: https://docs.microsoft.com/azure/cosmos-db/databases-containers-items#azure-cosmos-items\n[cosmos_request_units]: https://docs.microsoft.com/azure/cosmos-db/request-units\n[cosmos_resources]: https://docs.microsoft.com/azure/cosmos-db/databases-containers-items\n[cosmos_samples]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/cosmosdb/cosmos/samples\n[cosmos_sql_queries]: https://docs.microsoft.com/azure/cosmos-db/how-to-sql-query\n[cosmos_ttl]: https://docs.microsoft.com/azure/cosmos-db/time-to-live\n[npm]: https://www.npmjs.com/package/@azure/cosmos\n",
        "repo_name": "cosmosdb/cosmos",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/cosmosdb/cosmos",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure CostManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure CostManagement client.\n\nCostManagement management client provides access to CostManagement resources for Azure Enterprise Subscriptions.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/cost-management/arm-costmanagement) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-costmanagement) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-costmanagement) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-costmanagement` package\n\nInstall the Azure CostManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-costmanagement\n```\n\n### Create and authenticate a `CostManagementClient`\n\nTo create a client object to access the Azure CostManagement API, you will need the `endpoint` of your Azure CostManagement resource and a `credential`. The Azure CostManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure CostManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure CostManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { CostManagementClient } = require(\"@azure/arm-costmanagement\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new CostManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new CostManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### CostManagementClient\n\n`CostManagementClient` is the primary interface for developers using the Azure CostManagement client library. Explore the methods on this client object to understand the different features of the Azure CostManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fcost-management%2Farm-costmanagement%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "cost-management/arm-costmanagement",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/cost-management/arm-costmanagement",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure CustomerInsightsManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure CustomerInsightsManagement client.\n\nThe Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/customer-insights/arm-customerinsights) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-customerinsights) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-customerinsights) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-customerinsights` package\n\nInstall the Azure CustomerInsightsManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-customerinsights\n```\n\n### Create and authenticate a `CustomerInsightsManagementClient`\n\nTo create a client object to access the Azure CustomerInsightsManagement API, you will need the `endpoint` of your Azure CustomerInsightsManagement resource and a `credential`. The Azure CustomerInsightsManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure CustomerInsightsManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure CustomerInsightsManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { CustomerInsightsManagementClient } = require(\"@azure/arm-customerinsights\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new CustomerInsightsManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new CustomerInsightsManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### CustomerInsightsManagementClient\n\n`CustomerInsightsManagementClient` is the primary interface for developers using the Azure CustomerInsightsManagement client library. Explore the methods on this client object to understand the different features of the Azure CustomerInsightsManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fcustomer-insights%2Farm-customerinsights%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "customer-insights/arm-customerinsights",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/customer-insights/arm-customerinsights",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure DashboardManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure DashboardManagement client.\n\nThe Microsoft.Dashboard Rest API spec.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/dashboard/arm-dashboard) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-dashboard) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-dashboard) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-dashboard` package\n\nInstall the Azure DashboardManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-dashboard\n```\n\n### Create and authenticate a `DashboardManagementClient`\n\nTo create a client object to access the Azure DashboardManagement API, you will need the `endpoint` of your Azure DashboardManagement resource and a `credential`. The Azure DashboardManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure DashboardManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure DashboardManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { DashboardManagementClient } = require(\"@azure/arm-dashboard\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new DashboardManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new DashboardManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### DashboardManagementClient\n\n`DashboardManagementClient` is the primary interface for developers using the Azure DashboardManagement client library. Explore the methods on this client object to understand the different features of the Azure DashboardManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fdashboard%2Farm-dashboard%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "dashboard/arm-dashboard",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/dashboard/arm-dashboard",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure DataBoxManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure DataBoxManagement client.\n\n\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/databox/arm-databox) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-databox) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-databox) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-databox` package\n\nInstall the Azure DataBoxManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-databox\n```\n\n### Create and authenticate a `DataBoxManagementClient`\n\nTo create a client object to access the Azure DataBoxManagement API, you will need the `endpoint` of your Azure DataBoxManagement resource and a `credential`. The Azure DataBoxManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure DataBoxManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure DataBoxManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { DataBoxManagementClient } = require(\"@azure/arm-databox\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new DataBoxManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new DataBoxManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### DataBoxManagementClient\n\n`DataBoxManagementClient` is the primary interface for developers using the Azure DataBoxManagement client library. Explore the methods on this client object to understand the different features of the Azure DataBoxManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fdatabox%2Farm-databox%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "databox/arm-databox",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/databox/arm-databox",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure DataBoxEdgeManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure DataBoxEdgeManagement client.\n\n\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/databoxedge/arm-databoxedge-profile-2020-09-01-hybrid) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-databoxedge-profile-2020-09-01-hybrid) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-databoxedge-profile-2020-09-01-hybrid) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-databoxedge-profile-2020-09-01-hybrid` package\n\nInstall the Azure DataBoxEdgeManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-databoxedge-profile-2020-09-01-hybrid\n```\n\n### Create and authenticate a `DataBoxEdgeManagementClient`\n\nTo create a client object to access the Azure DataBoxEdgeManagement API, you will need the `endpoint` of your Azure DataBoxEdgeManagement resource and a `credential`. The Azure DataBoxEdgeManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure DataBoxEdgeManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure DataBoxEdgeManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { DataBoxEdgeManagementClient } = require(\"@azure/arm-databoxedge-profile-2020-09-01-hybrid\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new DataBoxEdgeManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new DataBoxEdgeManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### DataBoxEdgeManagementClient\n\n`DataBoxEdgeManagementClient` is the primary interface for developers using the Azure DataBoxEdgeManagement client library. Explore the methods on this client object to understand the different features of the Azure DataBoxEdgeManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fdataboxedge%2Farm-databoxedge-profile-2020-09-01-hybrid%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "databoxedge/arm-databoxedge-profile-2020-09-01-hybrid",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/databoxedge/arm-databoxedge-profile-2020-09-01-hybrid",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure DataBoxEdgeManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure DataBoxEdgeManagement client.\n\n\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/databoxedge/arm-databoxedge) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-databoxedge) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-databoxedge) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-databoxedge` package\n\nInstall the Azure DataBoxEdgeManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-databoxedge\n```\n\n### Create and authenticate a `DataBoxEdgeManagementClient`\n\nTo create a client object to access the Azure DataBoxEdgeManagement API, you will need the `endpoint` of your Azure DataBoxEdgeManagement resource and a `credential`. The Azure DataBoxEdgeManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure DataBoxEdgeManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure DataBoxEdgeManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { DataBoxEdgeManagementClient } = require(\"@azure/arm-databoxedge\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new DataBoxEdgeManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new DataBoxEdgeManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### DataBoxEdgeManagementClient\n\n`DataBoxEdgeManagementClient` is the primary interface for developers using the Azure DataBoxEdgeManagement client library. Explore the methods on this client object to understand the different features of the Azure DataBoxEdgeManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fdataboxedge%2Farm-databoxedge%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "databoxedge/arm-databoxedge",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/databoxedge/arm-databoxedge",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# AzureDatabricksManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for AzureDatabricksManagement client.\n\nThe Microsoft Azure management APIs allow end users to operate on Azure Databricks Workspace resources.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/databricks/arm-databricks) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-databricks) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-databricks?view=azure-node-preview) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-databricks` package\n\nInstall the AzureDatabricksManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-databricks\n```\n\n### Create and authenticate a `AzureDatabricksManagementClient`\n\nTo create a client object to access the AzureDatabricksManagement API, you will need the `endpoint` of your AzureDatabricksManagement resource and a `credential`. The AzureDatabricksManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your AzureDatabricksManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to AzureDatabricksManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { AzureDatabricksManagementClient } = require(\"@azure/arm-databricks\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new AzureDatabricksManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new AzureDatabricksManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### AzureDatabricksManagementClient\n\n`AzureDatabricksManagementClient` is the primary interface for developers using the AzureDatabricksManagement client library. Explore the methods on this client object to understand the different features of the AzureDatabricksManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fdatabricks%2Farm-databricks%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "databricks/arm-databricks",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/databricks/arm-databricks",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure DataCatalogRest client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure DataCatalogRest client.\n\nThe Azure Data Catalog management API provides a RESTful set of web services that interact with Azure Data Catalog services.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/datacatalog/arm-datacatalog) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-datacatalog) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-datacatalog) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-datacatalog` package\n\nInstall the Azure DataCatalogRest client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-datacatalog\n```\n\n### Create and authenticate a `DataCatalogRestClient`\n\nTo create a client object to access the Azure DataCatalogRest API, you will need the `endpoint` of your Azure DataCatalogRest resource and a `credential`. The Azure DataCatalogRest client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure DataCatalogRest resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure DataCatalogRest** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { DataCatalogRestClient } = require(\"@azure/arm-datacatalog\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new DataCatalogRestClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new DataCatalogRestClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### DataCatalogRestClient\n\n`DataCatalogRestClient` is the primary interface for developers using the Azure DataCatalogRest client library. Explore the methods on this client object to understand the different features of the Azure DataCatalogRest service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fdatacatalog%2Farm-datacatalog%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "datacatalog/arm-datacatalog",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/datacatalog/arm-datacatalog",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Microsoft Datadog client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure Microsoft Datadog client.\n\n\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/datadog/arm-datadog) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-datadog) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-datadog) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-datadog` package\n\nInstall the Azure Microsoft Datadog client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-datadog\n```\n\n### Create and authenticate a `MicrosoftDatadogClient`\n\nTo create a client object to access the Azure Microsoft Datadog API, you will need the `endpoint` of your Azure Microsoft Datadog resource and a `credential`. The Azure Microsoft Datadog client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure Microsoft Datadog resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure Microsoft Datadog** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { MicrosoftDatadogClient } = require(\"@azure/arm-datadog\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new MicrosoftDatadogClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new MicrosoftDatadogClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### MicrosoftDatadogClient\n\n`MicrosoftDatadogClient` is the primary interface for developers using the Azure Microsoft Datadog client library. Explore the methods on this client object to understand the different features of the Azure Microsoft Datadog service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fdatadog%2Farm-datadog%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "datadog/arm-datadog",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/datadog/arm-datadog",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure DataFactoryManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure DataFactoryManagement client.\n\nThe Azure Data Factory V2 management API provides a RESTful set of web services that interact with Azure Data Factory V2 services.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/datafactory/arm-datafactory) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-datafactory) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-datafactory) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-datafactory` package\n\nInstall the Azure DataFactoryManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-datafactory\n```\n\n### Create and authenticate a `DataFactoryManagementClient`\n\nTo create a client object to access the Azure DataFactoryManagement API, you will need the `endpoint` of your Azure DataFactoryManagement resource and a `credential`. The Azure DataFactoryManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure DataFactoryManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure DataFactoryManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { DataFactoryManagementClient } = require(\"@azure/arm-datafactory\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new DataFactoryManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new DataFactoryManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### DataFactoryManagementClient\n\n`DataFactoryManagementClient` is the primary interface for developers using the Azure DataFactoryManagement client library. Explore the methods on this client object to understand the different features of the Azure DataFactoryManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fdatafactory%2Farm-datafactory%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "datafactory/arm-datafactory",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/datafactory/arm-datafactory",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure DataLakeAnalyticsAccountManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure DataLakeAnalyticsAccountManagement client.\n\nCreates an Azure Data Lake Analytics account management client.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/datalake-analytics/arm-datalake-analytics) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-datalake-analytics) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-datalake-analytics?view=azure-node-preview) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-datalake-analytics` package\n\nInstall the Azure DataLakeAnalyticsAccountManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-datalake-analytics\n```\n\n### Create and authenticate a `DataLakeAnalyticsAccountManagementClient`\n\nTo create a client object to access the Azure DataLakeAnalyticsAccountManagement API, you will need the `endpoint` of your Azure DataLakeAnalyticsAccountManagement resource and a `credential`. The Azure DataLakeAnalyticsAccountManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure DataLakeAnalyticsAccountManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure DataLakeAnalyticsAccountManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { DataLakeAnalyticsAccountManagementClient } = require(\"@azure/arm-datalake-analytics\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new DataLakeAnalyticsAccountManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new DataLakeAnalyticsAccountManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### DataLakeAnalyticsAccountManagementClient\n\n`DataLakeAnalyticsAccountManagementClient` is the primary interface for developers using the Azure DataLakeAnalyticsAccountManagement client library. Explore the methods on this client object to understand the different features of the Azure DataLakeAnalyticsAccountManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fdatalake-analytics%2Farm-datalake-analytics%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "datalake-analytics/arm-datalake-analytics",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/datalake-analytics/arm-datalake-analytics",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure DataMigrationManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure DataMigrationManagement client.\n\nData Migration Client\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/datamigration/arm-datamigration) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-datamigration) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-datamigration?view=azure-node-preview) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-datamigration` package\n\nInstall the Azure DataMigrationManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-datamigration\n```\n\n### Create and authenticate a `DataMigrationManagementClient`\n\nTo create a client object to access the Azure DataMigrationManagement API, you will need the `endpoint` of your Azure DataMigrationManagement resource and a `credential`. The Azure DataMigrationManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure DataMigrationManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure DataMigrationManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { DataMigrationManagementClient } = require(\"@azure/arm-datamigration\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new DataMigrationManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new DataMigrationManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### DataMigrationManagementClient\n\n`DataMigrationManagementClient` is the primary interface for developers using the Azure DataMigrationManagement client library. Explore the methods on this client object to understand the different features of the Azure DataMigrationManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fdatamigration%2Farm-datamigration%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "datamigration/arm-datamigration",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/datamigration/arm-datamigration",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Data Protection client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure Data Protection client.\n\nOpen API 2.0 Specs for Azure Data Protection service\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/dataprotection/arm-dataprotection) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-dataprotection) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-dataprotection) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-dataprotection` package\n\nInstall the Azure Data Protection client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-dataprotection\n```\n\n### Create and authenticate a `DataProtectionClient`\n\nTo create a client object to access the Azure Data Protection API, you will need the `endpoint` of your Azure Data Protection resource and a `credential`. The Azure Data Protection client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure Data Protection resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure Data Protection** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { DataProtectionClient } = require(\"@azure/arm-dataprotection\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new DataProtectionClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new DataProtectionClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### DataProtectionClient\n\n`DataProtectionClient` is the primary interface for developers using the Azure Data Protection client library. Explore the methods on this client object to understand the different features of the Azure Data Protection service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fdataprotection%2Farm-dataprotection%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "dataprotection/arm-dataprotection",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/dataprotection/arm-dataprotection",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# AzureDeploymentManager client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for AzureDeploymentManager client.\n\nREST APIs for orchestrating deployments using the Azure Deployment Manager (ADM). See https://docs.microsoft.com/azure/azure-resource-manager/deployment-manager-overview for more information.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/deploymentmanager/arm-deploymentmanager) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-deploymentmanager) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-deploymentmanager?view=azure-node-preview) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-deploymentmanager` package\n\nInstall the AzureDeploymentManager client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-deploymentmanager\n```\n\n### Create and authenticate a `AzureDeploymentManager`\n\nTo create a client object to access the AzureDeploymentManager API, you will need the `endpoint` of your AzureDeploymentManager resource and a `credential`. The AzureDeploymentManager client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your AzureDeploymentManager resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to AzureDeploymentManager** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { AzureDeploymentManager } = require(\"@azure/arm-deploymentmanager\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new AzureDeploymentManager(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new AzureDeploymentManager(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### AzureDeploymentManager\n\n`AzureDeploymentManager` is the primary interface for developers using the AzureDeploymentManager client library. Explore the methods on this client object to understand the different features of the AzureDeploymentManager service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fdeploymentmanager%2Farm-deploymentmanager%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "deploymentmanager/arm-deploymentmanager",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/deploymentmanager/arm-deploymentmanager",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Desktop Virtualization API client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure Desktop Virtualization API client.\n\n\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/desktopvirtualization/arm-desktopvirtualization) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-desktopvirtualization) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-desktopvirtualization) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-desktopvirtualization` package\n\nInstall the Azure Desktop Virtualization API client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-desktopvirtualization\n```\n\n### Create and authenticate a `DesktopVirtualizationAPIClient`\n\nTo create a client object to access the Azure Desktop Virtualization API API, you will need the `endpoint` of your Azure Desktop Virtualization API resource and a `credential`. The Azure Desktop Virtualization API client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure Desktop Virtualization API resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure Desktop Virtualization API** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { DesktopVirtualizationAPIClient } = require(\"@azure/arm-desktopvirtualization\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new DesktopVirtualizationAPIClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new DesktopVirtualizationAPIClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### DesktopVirtualizationAPIClient\n\n`DesktopVirtualizationAPIClient` is the primary interface for developers using the Azure Desktop Virtualization API client library. Explore the methods on this client object to understand the different features of the Azure Desktop Virtualization API service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fdesktopvirtualization%2Farm-desktopvirtualization%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "desktopvirtualization/arm-desktopvirtualization",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/desktopvirtualization/arm-desktopvirtualization",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure DevCenter client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure DevCenter client.\n\nDevCenter Management API\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/devcenter/arm-devcenter) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-devcenter) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-devcenter) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-devcenter` package\n\nInstall the Azure DevCenter client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-devcenter\n```\n\n### Create and authenticate a `DevCenterClient`\n\nTo create a client object to access the Azure DevCenter API, you will need the `endpoint` of your Azure DevCenter resource and a `credential`. The Azure DevCenter client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure DevCenter resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure DevCenter** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { DevCenterClient } = require(\"@azure/arm-devcenter\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new DevCenterClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new DevCenterClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### DevCenterClient\n\n`DevCenterClient` is the primary interface for developers using the Azure DevCenter client library. Explore the methods on this client object to understand the different features of the Azure DevCenter service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fdevcenter%2Farm-devcenter%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "devcenter/arm-devcenter",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/devcenter/arm-devcenter",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# AzureDevCenter client library for JavaScript\n\nThe Azure DevCenter library provides access to manage resources for Microsoft Dev Box and Azure Deployment Environments. This package enables managing developer machines and environments in Azure.\n\nUse the package for Azure DevCenter to:\n> Create, access, manage, and delete Dev Box resources\n> Create, deploy, manage, and delete Environment resources\n\n\n**Please rely heavily on our [REST client docs](https://github.com/Azure/azure-sdk-for-js/blob/main/documentation/rest-clients.md) to use this library**\n\nKey links:\n\n- [Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/devcenter/developer-devcenter-rest)\n- [Package (NPM)](https://www.npmjs.com/package/@azure-rest/developer-devcenter)\n- [API reference documentation](https://learn.microsoft.com/azure/dev-box)\n- [Samples](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/devcenter/developer-devcenter-rest/samples)\n\n## Getting started\n\n### Currently supported environments\n\n- Node.js version 14.x.x or higher\n\n### Prerequisites\n\n- You must have an [Azure subscription](https://azure.microsoft.com/free/) to use this package.\n- You must have [configured](https://learn.microsoft.com/azure/dev-box/quickstart-configure-dev-box-service) a DevCenter, Project, Network Connection, Dev Box Definition, and Pool before you can create Dev Boxes \n- You must have [configured](https://learn.microsoft.com/azure/deployment-environments/) a DevCenter, Project, Catalog, and Environment Type before you can create Environments\n\n### Install the `@azure-rest/developer-devcenter` package\n\nInstall the AzureDevCenter client REST client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure-rest/developer-devcenter\n```\n\n### Create and authenticate to the Azure DevCenter service\n\nTo use an [Azure Active Directory (AAD) token credential](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token),\nprovide an instance of the desired credential type obtained from the\n[@azure/identity](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#credentials) library.\n\nTo authenticate with AAD, you must first `npm` install [`@azure/identity`](https://www.npmjs.com/package/@azure/identity) \n\nAfter setup, you can choose which type of [credential](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#credentials) from `@azure/identity` to use.\nAs an example, [DefaultAzureCredential](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential)\ncan be used to authenticate the client.\n\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables:\nAZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET\n\n## Key Concepts\n\n### REST Client\n\nThis client is one of our REST clients. We highly recommend you read how to use a REST client [here](https://github.com/Azure/azure-sdk-for-js/blob/main/documentation/rest-clients.md).\n\n### DevCenter Concepts\nDev Boxes refer to managed developer machines running in Azure. Dev Boxes are provisioned in Pools, which define the network and image used for a Dev Box.\n\nEnvironments refer to templated developer environments, which combine a template (Catalog Item) and parameters, as well as an Environment Type which defines permissions and where the resources are deployed.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nimport { setLogLevel } from \"@azure/logger\";\n\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n",
        "repo_name": "devcenter/developer-devcenter-rest",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/devcenter/developer-devcenter-rest",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure DeveloperHubService client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure DeveloperHubService client.\n\nThe AKS Developer Hub Service Client\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/devhub/arm-devhub) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-devhub) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-devhub?view=azure-node-preview) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-devhub` package\n\nInstall the Azure DeveloperHubService client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-devhub\n```\n\n### Create and authenticate a `DeveloperHubServiceClient`\n\nTo create a client object to access the Azure DeveloperHubService API, you will need the `endpoint` of your Azure DeveloperHubService resource and a `credential`. The Azure DeveloperHubService client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure DeveloperHubService resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure DeveloperHubService** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { DeveloperHubServiceClient } = require(\"@azure/arm-devhub\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new DeveloperHubServiceClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new DeveloperHubServiceClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### DeveloperHubServiceClient\n\n`DeveloperHubServiceClient` is the primary interface for developers using the Azure DeveloperHubService client library. Explore the methods on this client object to understand the different features of the Azure DeveloperHubService service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fdevhub%2Farm-devhub%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "devhub/arm-devhub",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/devhub/arm-devhub",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure iotDps client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure iotDps client.\n\nAPI for using the Azure IoT Hub Device Provisioning Service features.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/deviceprovisioningservices/arm-deviceprovisioningservices) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-deviceprovisioningservices) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-deviceprovisioningservices) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-deviceprovisioningservices` package\n\nInstall the Azure iotDps client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-deviceprovisioningservices\n```\n\n### Create and authenticate a `IotDpsClient`\n\nTo create a client object to access the Azure iotDps API, you will need the `endpoint` of your Azure iotDps resource and a `credential`. The Azure iotDps client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure iotDps resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure iotDps** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { IotDpsClient } = require(\"@azure/arm-deviceprovisioningservices\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new IotDpsClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new IotDpsClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### IotDpsClient\n\n`IotDpsClient` is the primary interface for developers using the Azure iotDps client library. Explore the methods on this client object to understand the different features of the Azure iotDps service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fdeviceprovisioningservices%2Farm-deviceprovisioningservices%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "deviceprovisioningservices/arm-deviceprovisioningservices",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/deviceprovisioningservices/arm-deviceprovisioningservices",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure DeviceUpdate client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure DeviceUpdate client.\n\nMicrosoft Device Update resource provider.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/deviceupdate/arm-deviceupdate) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-deviceupdate) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-deviceupdate) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-deviceupdate` package\n\nInstall the Azure DeviceUpdate client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-deviceupdate\n```\n\n### Create and authenticate a `DeviceUpdate`\n\nTo create a client object to access the Azure DeviceUpdate API, you will need the `endpoint` of your Azure DeviceUpdate resource and a `credential`. The Azure DeviceUpdate client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure DeviceUpdate resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure DeviceUpdate** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { DeviceUpdate } = require(\"@azure/arm-deviceupdate\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new DeviceUpdate(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new DeviceUpdate(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### DeviceUpdate\n\n`DeviceUpdate` is the primary interface for developers using the Azure DeviceUpdate client library. Explore the methods on this client object to understand the different features of the Azure DeviceUpdate service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fdeviceupdate%2Farm-deviceupdate%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "deviceupdate/arm-deviceupdate",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/deviceupdate/arm-deviceupdate",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Device Update for IoT Hub Rest Client library for JavaScript\n\nThe library provides access to the Device Update for IoT Hub service that enables customers to publish updates for their IoT devices to the cloud, and then deploy these updates to their devices (approve updates to groups of devices managed and provisioned in IoT Hub).\n\n**Please rely heavily on the [service's documentation][device_update_product_documentation] and our [REST client docs][rest_client] to use this library**\n\nKey links:\n- [Source code][source_code]\n- [Package (NPM)][npm]\n- [API reference documentation][ref_docs]\n- [Product documentation][device_update_product_documentation]\n\n## Getting started\n\n### Currently supported environments\n\n- Node.js version 14.x.x or higher\n\n### Prerequisites\n\n- Microsoft Azure Subscription: To call Microsoft Azure services, you need to create an [Azure subscription][azure_subscription]\n- Device Update for IoT Hub instance\n- Azure IoT Hub instance\n\n### Install the `@azure-rest/iot-device-update` package\n\nInstall the Azure Iot Device Update client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure-rest/iot-device-update\n```\n\n### Create and authenticate a `DeviceUpdate`\n\nTo use an [Azure Active Directory (AAD) token credential][authenticate_with_token],\nprovide an instance of the desired credential type obtained from the\n[@azure/identity][azure_identity_credentials] library.\n\nTo authenticate with AAD, you must first `npm` install [`@azure/identity`][azure_identity_npm].\n\nAfter installation, you can choose which type of [credential][azure_identity_credentials] from `@azure/identity` to use.\nAs an example, [DefaultAzureCredential][default_azure_credential]\ncan be used to authenticate the client:\n\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables:\nAZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET\n\nUse the returned token credential to authenticate the client:\n\n```typescript\nimport DeviceUpdate from \"@azure-rest/iot-device-update\";\nimport { DefaultAzureCredential } from \"@azure/identity\";\nconst client = DeviceUpdate(\n  \"https://<my-instance-id>.api.adu.microsoft.com\",\n  new DefaultAzureCredential()\n);\n```\n\n## Key concepts\n\n### REST Client\n\nThis client is one of our REST clients. We highly recommend you read how to use a REST client [here][rest_client].\n\n## Examples\n\nThe following section shows you how to initialize and authenticate your client, then get all devices.\n\n- [Get All Devices](#get-all-devices \"Get All Devices\")\n\n```typescript\nimport DeviceUpdate from \"@azure-rest/iot-device-update\";\nimport { DefaultAzureCredential } from \"@azure/identity\";\n\nasync function main() {\n  console.log(\"== List devices ==\");\n  const client = DeviceUpdate(endpoint, new DefaultAzureCredential());\n\n  const result = await client\n    .path(\"/deviceupdate/{instanceId}/management/devices\", instanceId)\n    .get();\n\n  console.log(result);\n}\n\nmain().catch(console.error);\n```\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nimport { setLogLevel } from \"@azure/logger\";\n\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fdeviceupdate%2Fiot-device-update%2FREADME.png)\n\n[device_update_product_documentation]: https://docs.microsoft.com/azure/iot-hub-device-update/\n[rest_client]: https://github.com/Azure/azure-sdk-for-js/blob/main/documentation/rest-clients.md\n[source_code]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/deviceupdate/iot-device-update-rest\n[npm]: https://www.npmjs.com/org/azure-rest\n[ref_docs]: https://azure.github.io/azure-sdk-for-js\n[azure_subscription]: https://azure.microsoft.com/free/\n[authenticate_with_token]: https://docs.microsoft.com/azure/cognitive-services/authentication?tabs=powershell#authenticate-with-an-authentication-token\n[azure_identity_credentials]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#credentials\n[azure_identity_npm]: https://www.npmjs.com/package/@azure/identity\n[default_azure_credential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "deviceupdate/iot-device-update-rest",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/deviceupdate/iot-device-update-rest",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure DevSpacesManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure DevSpacesManagement client.\n\nDev Spaces Client\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/devspaces/arm-devspaces) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-devspaces) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-devspaces) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-devspaces` package\n\nInstall the Azure DevSpacesManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-devspaces\n```\n\n### Create and authenticate a `DevSpacesManagementClient`\n\nTo create a client object to access the Azure DevSpacesManagement API, you will need the `endpoint` of your Azure DevSpacesManagement resource and a `credential`. The Azure DevSpacesManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure DevSpacesManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure DevSpacesManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { DevSpacesManagementClient } = require(\"@azure/arm-devspaces\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new DevSpacesManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new DevSpacesManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### DevSpacesManagementClient\n\n`DevSpacesManagementClient` is the primary interface for developers using the Azure DevSpacesManagement client library. Explore the methods on this client object to understand the different features of the Azure DevSpacesManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fdevspaces%2Farm-devspaces%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "devspaces/arm-devspaces",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/devspaces/arm-devspaces",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure DevTestLabs client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure DevTestLabs client.\n\nThe DevTest Labs Client.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/devtestlabs/arm-devtestlabs) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-devtestlabs) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-devtestlabs) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-devtestlabs` package\n\nInstall the Azure DevTestLabs client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-devtestlabs\n```\n\n### Create and authenticate a `DevTestLabsClient`\n\nTo create a client object to access the Azure DevTestLabs API, you will need the `endpoint` of your Azure DevTestLabs resource and a `credential`. The Azure DevTestLabs client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure DevTestLabs resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure DevTestLabs** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { DevTestLabsClient } = require(\"@azure/arm-devtestlabs\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new DevTestLabsClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new DevTestLabsClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### DevTestLabsClient\n\n`DevTestLabsClient` is the primary interface for developers using the Azure DevTestLabs client library. Explore the methods on this client object to understand the different features of the Azure DevTestLabs service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fdevtestlabs%2Farm-devtestlabs%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "devtestlabs/arm-devtestlabs",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/devtestlabs/arm-devtestlabs",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# AzureDigitalTwinsManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for AzureDigitalTwinsManagement client.\n\nAzure Digital Twins Client for managing DigitalTwinsInstance\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/digitaltwins/arm-digitaltwins) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-digitaltwins) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-digitaltwins) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-digitaltwins` package\n\nInstall the AzureDigitalTwinsManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-digitaltwins\n```\n\n### Create and authenticate a `AzureDigitalTwinsManagementClient`\n\nTo create a client object to access the AzureDigitalTwinsManagement API, you will need the `endpoint` of your AzureDigitalTwinsManagement resource and a `credential`. The AzureDigitalTwinsManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your AzureDigitalTwinsManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to AzureDigitalTwinsManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { AzureDigitalTwinsManagementClient } = require(\"@azure/arm-digitaltwins\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new AzureDigitalTwinsManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new AzureDigitalTwinsManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### AzureDigitalTwinsManagementClient\n\n`AzureDigitalTwinsManagementClient` is the primary interface for developers using the AzureDigitalTwinsManagement client library. Explore the methods on this client object to understand the different features of the AzureDigitalTwinsManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fdigitaltwins%2Farm-digitaltwins%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "digitaltwins/arm-digitaltwins",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/digitaltwins/arm-digitaltwins",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Azure Digital Twins Core client library for JavaScript\n\nThis package contains an isomorphic SDK for Azure Digital Twins API to provide access to the Azure Digital Twins service for managing twins, models, relationships, etc.\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge, and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure Digital Twins instance](https://docs.microsoft.com/azure/digital-twins/how-to-set-up-instance-portal).\n\n### Install the `@azure/digital-twins-core` package\n\nInstall the Digital Twins Core client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/digital-twins-core\n```\n\n### Browser support\n\n#### JavaScript Bundle\n\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our\n[bundling documentation](https://aka.ms/AzureSDKBundling).\n\n#### CORS\n\nAzure Digital Twins doesn't currently support Cross-Origin Resource Sharing (CORS).\nAs a result, this library cannot be used to make direct calls to the template service from a browser.\nPlease refer to [this document](https://github.com/Azure/azure-sdk-for-js/blob/main/samples/cors/ts/README.md) for guidance.\n\n## Key concepts\n\n### Azure Digital Twins\n\nAzure Digital Twins is an Azure IoT service that creates comprehensive models of the physical environment.\nIt can create spatial intelligence graphs to model the relationships and interactions between people, spaces, and devices.\nYou can learn more about Azure Digital Twins by visiting [Azure Digital Twins Documentation](https://docs.microsoft.com/azure/digital-twins/).\n\n### `DigitalTwinsClient`\n\n`DigitalTwinsClient` is the client object that users of this library use to manage their Azure Digital Twins instance.\n\n## Examples\n\n### Create the DigitalTwinsClient\n\nTo create a new `DigitalTwinsClient`, you need the endpoint to an Azure Digital Twins instance and credentials.\nHere, we use `DefaultAzureCredential` for credentials from the package `@azure/identity`.\nIt supports different authentication mechanisms and determines the appropriate credential type based of the environment it is executing in.\nSee the [readme for @azure/identity](https://www.npmjs.com/package/@azure/identity) for more information on the different authentication options you can use.\n\n```javascript\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { DigitalTwinsClient } = require(\"@azure/digital-twins-core\");\n\nconst url = \"<URL to Azure Digital Twins instance>\";\nconst credential = new DefaultAzureCredential();\nconst serviceClient = new DigitalTwinsClient(url, credential);\n```\n\n### Create, list, get, decommission, and delete models\n\n#### Create models\n\nIn order to create models, we pass in a list of models to `createModels`.\nHere, we only create one model.\n\n```javascript\nconst myComponent = {\n  \"@id\": \"dtmi:my_component;1\",\n  \"@type\": \"Interface\",\n  \"@context\": \"dtmi:dtdl:context;2\",\n  displayName: \"Component1\",\n  contents: [\n    {\n      \"@type\": \"Property\",\n      name: \"ComponentProp1\",\n      schema: \"string\",\n    },\n  ],\n};\n\nconst models = await serviceClient.createModels([myComponent]);\n```\n\n#### List models\n\nWe use `listModels` to list all the models.\n\n```javascript\nconst models = await serviceClient.listModels();\nfor await (const model of models) {\n  console.log(`Model ID: ${model.id}`);\n}\n```\n\n#### Get model\n\nWe can get a specific model using `getModel` with the model ID.\n\n```javascript\nconst model = await serviceClient.getModel(\"<model ID>\");\n```\n\n#### Decommission model\n\nWe can decommission a model using `decomissionModel` with the model ID.\n\n```javascript\nawait serviceClient.decomissionModel(\"<model ID>\");\n```\n\n#### Delete model\n\nWe can delete a model using `deleteModel` with the model ID.\n\n```javascript\nawait serviceClient.deleteModel(\"<model ID>\");\n```\n\n### Create, get, query, and delete digital twins\n\n#### Create digital twin\n\nTo create a twin, you will need to provide an ID for the digital twin and a JSON string containing the digital twin object.\n\n```javascript\nconst digitalTwinId = \"myTwin\";\nconst newTwin = \"<JSON containing the digitalTwin object>\";\nconst createdTwin = await serviceClient.upsertDigitalTwin(digitalTwinId, newTwin);\n```\n\n#### Get digital twin\n\nWe can get a digital twin using `getDigitalTwin` with the digital twin ID.\n\n```javascript\nconst digitalTwinId = \"myTwin\";\nconst twin = await serviceClient.getDigitalTwin(digitalTwinId);\nconsole.log(`DigitalTwin's etag: ${twin.etag}`);\nconsole.log(`DigitalTwin: ${twin}`);\n```\n\n#### Query digital twins\n\nQuery the Azure Digital Twins instance for digital twins using the [Azure Digital Twins query language](https://docs.microsoft.com/azure/digital-twins/how-to-query-graph).\nHere's an example of how to query for digital twins and how to iterate over the results.\n\n```javascript\nconst query = \"SELECT * FROM digitaltwins\";\nconst queryResult = serviceClient.queryTwins(query);\nfor await (const item of queryResult) {\n  console.log(`DigitalTwin: ${item}`);\n}\n```\n\n#### Delete digital twin\n\nWe can delete a digital twin using `deleteDigitalTwin` with the digital twin ID.\n\n```javascript\nconst digitalTwinId = \"myTwin\";\nawait serviceClient.deleteDigitalTwin(digitalTwinId);\n```\n\n### Get and update digital twin components\n\n#### Get digital twin component\n\nWe can get a digital twin component using `getComponent` with the digital twin ID and the path of the component.\n\n```javascript\nconst digitalTwinId = \"myTwin\";\nconst componentPath = \"Component1\";\nconst component = await serviceClient.getComponent(digitalTwinId, componentPath);\nconsole.log(`Component: ${component}`);\n```\n\n#### Update digital twin component\n\nTo update a digital twin component (i.e., replace, remove, or add a component property or sub-property within a digital twin), you need to provide a digital twin ID, component path, and a list of patch objects with the properties `op` and `path`.\nThe value of `op` is \"replace\", \"remove\", or \"add\", and the value of `path` is the path to the digital twin component being updated.\nFor \"replace\" and \"add\" operations, the `value` property should be included with your desired value of the component property.\n\n```javascript\nconst digitalTwinId = \"myTwin\";\nconst componentPath = \"Component1\";\nconst patch = {\n  op: \"replace\",\n  path: \"/ComponentProp1\",\n  value: \"value2\",\n};\nconst updateComponentResponse = await serviceClient.updateComponent(digitalTwinId, componentPath, [\n  patch,\n]);\n```\n\n### Create and list digital twin relationships\n\n#### Create digital twin relationships\n\n`upsertRelationship` creates a relationship on a digital twin provided with ID of a digital twin, name of relationship (in this case, \"has\"), ID of an relationship (in this case \"BuildingHasFloor\") and the object representing the relationship to be created.\nThe object must contain property with key \"\\$targetId\" to specify the target of the relationship.\n\n```javascript\nconst relationship = {\n  $relationshipId: \"BuildingHasFloor\",\n  $sourceId: \"BuildingTwin\",\n  $relationshipName: \"has\",\n  $targetId: \"FloorTwin\",\n  isAccessRestricted: false,\n};\n\nawait serviceClient.upsertRelationship(\n  relationship[\"$sourceId\"],\n  relationship[\"$relationshipId\"],\n  relationship\n);\n```\n\n#### List digital twin relationships\n\nFor a digital twin, `listRelationships` and `listIncomingRelationships` list all the relationships and all incoming relationships, respectively.\n\n```javascript\nconst digitalTwinId = \"myTwin\";\nconst relationships = serviceClient.listRelationships(digitalTwinId);\nfor await (const relationship of relationships) {\n  console.log(`Relationship: ${relationship}`);\n}\n```\n\n```javascript\nconst digitalTwinId = \"myTwin\";\nconst incomingRelationships = serviceClient.listIncomingRelationships(digitalTwinId);\nfor await (const incomingRelationship of incomingRelationships) {\n  console.log(`Relationship: ${incomingRelationship}`);\n}\n```\n\n### Create, get, list, and delete event routes\n\n#### Create event route\n\nTo create an event route, provide an ID of an event route (in this case, \"myEventRouteId\") and event route data containing the endpoint and optional filter like the example shown below.\nFor more information on filtering events, see [this documentation](https://docs.microsoft.com/azure/digital-twins/how-to-manage-routes-apis-cli#filter-events).\n\n```javascript\nconst eventHubEndpointName = \"myEventHubEndpointName\";\nconst eventRouteId = \"myEventRouteId\";\nconst eventFilter =\n  \"$eventType = 'DigitalTwinTelemetryMessages' or $eventType = 'DigitalTwinLifecycleNotification'\";\nawait serviceClient.upsertEventRoute(eventRouteId, eventHubEndpointName, eventFilter);\n```\n\n#### Get event route\n\nWe can get an event route using `getEventRoute` with the event route ID.\n\n```javascript\nconst eventRouteId = \"myEventRouteId\";\nconst eventRoute = serviceClient.getEventRoute(eventRouteId);\nconsole.log(`EventRoute: ${eventRoute}`);\n```\n\n#### List event routes\n\nWe can list event routes using `listEventRoutes`.\n\n```javascript\nconst eventRoutes = serviceClient.listEventRoutes();\nfor await (const eventRoute of eventRoutes) {\n  console.log(`EventRoute: ${eventRoute}`);\n}\n```\n\n#### Delete event route\n\nWe can delete an event route using `deleteEventRoute` with the event route ID.\n\n```javascript\nconst eventRouteId = \"myEventRouteId\";\nawait serviceClient.deleteEventRoute(eventRouteId);\n```\n\n### Publish telemetry messages for a digital twin\n\nTo publish a telemetry message for a digital twin, you need to provide the digital twin ID, the payload, and a unique ID for the message.\n\n```javascript\nconst digitalTwinId = \"<digital twin ID>\";\nconst telemetryPayload = '{\"Telemetry1\": 5}';\nconst response = await serviceClient.publishTelemetry(\n  digitalTwinId,\n  telemetryPayload,\n  \"<unique message ID>\"\n);\n```\n\nYou can also publish a telemetry message for a specific component in a digital twin.\nIn addition to the digital twin ID, payload, and unique message ID, you need to specify the target component path.\n\n```javascript\nconst digitalTwinId = \"<digital twin ID>\";\nconst componentPath = \"<component path>\";\nconst telemetryPayload = '{\"Telemetry1\": 5}';\nconst response = await serviceClient.publishComponentTelemetry(\n  digitalTwinId,\n  componentPath,\n  telemetryPayload,\n  \"<unique message ID>\"\n);\n```\n\n### Additional Examples\n\nAdditional examples can be found in the\n[samples directory](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/digitaltwins/digital-twins-core/samples).\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setlogLevel } = require(\"@azure/logger\");\n\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\n- Take a look at the [samples](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/digitaltwins/digital-twins-core/samples) directory for detailed examples that demonstrate how to use the client libraries.\n- Explore the Azure Digital Twins [documentation](https://docs.microsoft.com/azure/digital-twins/)\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for Javascript](https://github.com/Azure/azure-sdk-for-js)\n",
        "repo_name": "digitaltwins/digital-twins-core",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/digitaltwins/digital-twins-core",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure DnsManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure DnsManagement client.\n\nThe DNS Management Client.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/dns/arm-dns-profile-2020-09-01-hybrid) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-dns-profile-2020-09-01-hybrid) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-dns-profile-2020-09-01-hybrid) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-dns-profile-2020-09-01-hybrid` package\n\nInstall the Azure DnsManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-dns-profile-2020-09-01-hybrid\n```\n\n### Create and authenticate a `DnsManagementClient`\n\nTo create a client object to access the Azure DnsManagement API, you will need the `endpoint` of your Azure DnsManagement resource and a `credential`. The Azure DnsManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure DnsManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure DnsManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { DnsManagementClient } = require(\"@azure/arm-dns-profile-2020-09-01-hybrid\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new DnsManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new DnsManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### DnsManagementClient\n\n`DnsManagementClient` is the primary interface for developers using the Azure DnsManagement client library. Explore the methods on this client object to understand the different features of the Azure DnsManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fdns%2Farm-dns-profile-2020-09-01-hybrid%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "dns/arm-dns-profile-2020-09-01-hybrid",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/dns/arm-dns-profile-2020-09-01-hybrid",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure DnsManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure DnsManagement client.\n\nThe DNS Management Client.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/dns/arm-dns) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-dns) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-dns) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-dns` package\n\nInstall the Azure DnsManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-dns\n```\n\n### Create and authenticate a `DnsManagementClient`\n\nTo create a client object to access the Azure DnsManagement API, you will need the `endpoint` of your Azure DnsManagement resource and a `credential`. The Azure DnsManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure DnsManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure DnsManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { DnsManagementClient } = require(\"@azure/arm-dns\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new DnsManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new DnsManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### DnsManagementClient\n\n`DnsManagementClient` is the primary interface for developers using the Azure DnsManagement client library. Explore the methods on this client object to understand the different features of the Azure DnsManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fdns%2Farm-dns%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "dns/arm-dns",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/dns/arm-dns",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure DnsResolverManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure DnsResolverManagement client.\n\nThe DNS Resolver Management Client.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/dnsresolver/arm-dnsresolver) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-dnsresolver) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-dnsresolver) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-dnsresolver` package\n\nInstall the Azure DnsResolverManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-dnsresolver\n```\n\n### Create and authenticate a `DnsResolverManagementClient`\n\nTo create a client object to access the Azure DnsResolverManagement API, you will need the `endpoint` of your Azure DnsResolverManagement resource and a `credential`. The Azure DnsResolverManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure DnsResolverManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure DnsResolverManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { DnsResolverManagementClient } = require(\"@azure/arm-dnsresolver\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new DnsResolverManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new DnsResolverManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### DnsResolverManagementClient\n\n`DnsResolverManagementClient` is the primary interface for developers using the Azure DnsResolverManagement client library. Explore the methods on this client object to understand the different features of the Azure DnsResolverManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fdnsresolver%2Farm-dnsresolver%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "dnsresolver/arm-dnsresolver",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/dnsresolver/arm-dnsresolver",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Document Translator Rest-Level client library for JavaScript\n\n[Azure Document Translator](https://docs.microsoft.com/azure/cognitive-services/translator/document-translation/overview) is a cloud-based feature of the Azure Translator service and is part of the Azure Cognitive Service family of REST APIs. The Document Translation API translates documents to and from 90 languages and dialects while preserving document structure and data format.\n\n**Note:** This Rest Level Library targets Azure Document Translator service API version v1.0-preview.1.\n\nUse the client library to:\n\n| Feature                           | Description                                                                                                                                                        |\n| --------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| Translate large files             | Translate whole documents asynchronously.                                                                                                                          |\n| Translate numerous files          | Translate multiple files to and from 90 languages and dialects.                                                                                                    |\n| Preserve source file presentation | Translate files while preserving the original layout and format.                                                                                                   |\n| Apply custom translation          | Translate documents using general and [custom translation](https://docs.microsoft.com/azure/cognitive-services/translator/customization#custom-translator) models. |\n| Apply custom glossaries           | Translate documents using custom glossaries.                                                                                                                       |\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/documenttranslator/ai-document-translator-rest/) |\n[Package (NPM)](https://www.npmjs.com/package/@azure-rest/ai-document-translator) |\n[API reference documentation](https://docs.microsoft.com/azure/cognitive-services/translator/document-translation/overview) |\n[Product documentation](https://docs.microsoft.com/azure/cognitive-services/translator/document-translation/overview) |\n[Samples](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/documenttranslator/ai-document-translator-rest/samples)\n\n## Getting started\n\n### Currently supported environments\n\n- Node.js version 14.x.x or higher\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n- An existing [Translator Service][translator_resource] resource. If you need to create the resource, you can use the [Azure Portal][azure_portal] or [Azure CLI][azure_cli].\n\n### Install the `@azure-rest/ai-document-translator` package\n\nInstall the Azure Document Translator client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure-rest/ai-document-translator\n```\n\n### Create a Document Translation resource\n\nDocument Translation supports [single-service access][single_service] only.\nTo access the service, create a Translator resource.\n\nYou can create the resource using\n\n**Option 1:** [Azure Portal][translator_resource]\n\n**Option 2:** [Azure CLI][azure_cli_create_dt_resource].\nBelow is an example of how you can create a Document Translation resource using the CLI:\n\n```bash\n# Create a new resource group to hold the document translation resource -\n# if using an existing resource group, skip this step\naz group create --name my-resource-group --location westus2\n```\n\n```bash\n# Create document translation\naz cognitiveservices account create \\\n    --name document-translation-resource \\\n    --custom-domain document-translation-resource \\\n    --resource-group my-resource-group \\\n    --kind TextTranslation \\\n    --sku S1 \\\n    --location westus2 \\\n    --yes\n```\n\n### Create and authenticate a `DocumentTranslator`\n\n#### Looking up the endpoint\n\nYou can find the endpoint for your Document Translation resource using the\n[Azure Portal][azure_portal_get_endpoint].\n\n> Note that the service requires a custom domain endpoint. Follow the instructions in the above link to format your endpoint:\n> https://{NAME-OF-YOUR-RESOURCE}.cognitiveservices.azure.com/\n\n#### Using an API Key\n\nThe API key can be found in the Azure Portal or by running the following Azure CLI command:\n\n```bash\naz cognitiveservices account keys list --name \"resource-name\" --resource-group \"resource-group-name\"\n```\n\nOnce you have an API key and endpoint, you can use the `AzureKeyCredential` class to authenticate the client as follows:\n\n```javascript\nconst DocumentTranslator = require(\"@azure-rest/ai-document-translator\");\n\nconst client = DocumentTranslator(\"<endpoint>\", { key: \"<API key>\" });\n```\n\n#### Using an Azure Active Directory Credential\n\nClient API key authentication is used in most of the examples, but you can also authenticate with Azure Active Directory using the [Azure Identity library][azure_identity]. To use the [DefaultAzureCredential][defaultazurecredential] provider shown below,\nor other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to [register a new AAD application][register_aad_app] and grant access to Document Translator by assigning the `\"Managed Application Contributor Role\"` role to your service principal (note: other roles such as `\"Owner\"` will not grant the necessary permissions, only `\"Managed Application Contributor Role\"` will suffice to run the examples and the sample code).\n\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\n```javascript\nconst DocumentTranslator = require(\"@azure-rest/ai-document-translator\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n\nconst client = DocumentTranslator(\"<endpoint>\", new DefaultAzureCredential());\n```\n\n## Key concepts\n\nThe Document Translation service requires that you upload your files to an Azure Blob Storage source container and provide\na target container where the translated documents can be written. SAS tokens to the containers (or files) are used to\naccess the documents and create the translated documents in the target container. Additional information about setting this up can be found in\nthe service documentation:\n\n- [Set up Azure Blob Storage containers][source_containers] with your documents\n- Optionally apply [glossaries][glossary] or a [custom model for translation][custom_model]\n- Generate [SAS tokens][sas_token] to your containers (or files) with the appropriate [permissions][sas_token_permissions]\n\n### DocumentTranslator\n\nInteraction with the Document Translation rest library begins with an instance of the `DocumentTranslation`.\nThe client provides operations for:\n\n- Creating a translation job to translate documents in your source container(s) and write results to you target container(s).\n- Checking the status of individual documents in the translation job and monitoring each document's progress.\n- Enumerating all past and current translation jobs with the option to wait until the job(s) finish.\n- Identifying supported glossary and document formats.\n\n### Translation Input\n\nTo create a translation job, send a post request with body of type `BatchSubmissionRequest` to the `\"/batches/\"` path..\nCreating a `BatchSubmissionRequest` requires that you pass the SAS URLs to your source and target containers (or files)\nand the target language(s) for translation.\n\nA single source container with documents can be translated to many different languages:\n\n```typescript\nimport { BatchSubmissionRequest } from \"@azure-rest/ai-document-translator\";\nconst batchSubmissionRequest: BatchSubmissionRequest = {\n  inputs: [\n    {\n      source: { sourceUrl: \"<sas_url_to_source>\" },\n      targets: [{ language: \"fr\", targetUrl: \"<sas_url_to_target_fr>\" }],\n    },\n  ],\n};\n```\n\nOr multiple different sources can be provided each with their own targets.\n\n```typescript\nimport { BatchSubmissionRequest } from \"@azure-rest/ai-document-translator\";\nconst batchSubmissionRequest: BatchSubmissionRequest = {\n  inputs: [\n    {\n      source: { sourceUrl: \"<sas_url_to_source_A>\" },\n      targets: [\n        { language: \"fr\", targetUrl: \"<sas_url_to_target_A_fr>\" },\n        { language: \"de\", targetUrl: \"<sas_url_to_target_A_de>\" },\n      ],\n    },\n    {\n      source: { sourceUrl: \"<sas_url_to_source_B>\" },\n      targets: [\n        { language: \"fr\", targetUrl: \"<sas_url_to_target_B_fr>\" },\n        { language: \"de\", targetUrl: \"<sas_url_to_target_B_de>\" },\n      ],\n    },\n  ],\n};\n```\n\n> Note: the target_url for each target language must be unique.\n\nSee the service documentation for all [supported languages][supported_languages].\n\n## Examples\n\nPlease refer to the samples folder to see code samples, including:\n\n- [List Supported Formats](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/documenttranslator/ai-document-translator-rest/samples/v1/typescript/src/listFormats.ts)\n- [Translate documents](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/documenttranslator/ai-document-translator-rest/samples/v1/typescript/src/translateFromBlob.ts)\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nimport { setLogLevel } from \"@azure/logger\";\n\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/documenttranslator/ai-document-translator-rest/samples) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fdocumenttranslator%2Fai-document-translator-rest%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[translator_resource]: https://ms.portal.azure.com/#create/Microsoft.CognitiveServicesTextTranslation\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[cognitive_auth]: https://docs.microsoft.com/azure/cognitive-services/authentication\n[register_aad_app]: https://docs.microsoft.com/azure/cognitive-services/authentication#assign-a-role-to-a-service-principal\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n[azure_cli_create_dt_resource]: https://docs.microsoft.com/azure/cognitive-services/cognitive-services-apis-create-account-cli?tabs=windows\n[azure_portal_get_endpoint]: https://docs.microsoft.com/azure/cognitive-services/translator/document-translation/get-started-with-document-translation?tabs=csharp#get-your-custom-domain-name-and-subscription-key\n[source_containers]: https://docs.microsoft.com/azure/cognitive-services/translator/document-translation/get-started-with-document-translation?tabs=csharp#create-your-azure-blob-storage-containers\n[glossary]: https://docs.microsoft.com/azure/cognitive-services/translator/document-translation/overview#supported-glossary-formats\n[custom_model]: https://docs.microsoft.com/azure/cognitive-services/translator/custom-translator/quickstart-build-deploy-custom-model\n[sas_token]: https://docs.microsoft.com/azure/cognitive-services/translator/document-translation/create-sas-tokens?tabs=Containers#create-your-sas-tokens-with-azure-storage-explorer\n[sas_token_permissions]: https://docs.microsoft.com/azure/cognitive-services/translator/document-translation/get-started-with-document-translation?tabs=csharp#create-sas-access-tokens-for-document-translation\n[supported_languages]: https://docs.microsoft.com/azure/cognitive-services/translator/language-support#translate\n",
        "repo_name": "documenttranslator/ai-document-translator-rest",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/documenttranslator/ai-document-translator-rest",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Domain client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure Domain client.\n\nThe AAD Domain Services API.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/domainservices/arm-domainservices) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-domainservices) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-domainservices) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-domainservices` package\n\nInstall the Azure Domain client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-domainservices\n```\n\n### Create and authenticate a `DomainServicesResourceProvider`\n\nTo create a client object to access the Azure Domain API, you will need the `endpoint` of your Azure Domain resource and a `credential`. The Azure Domain client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure Domain resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure Domain** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { DomainServicesResourceProvider } = require(\"@azure/arm-domainservices\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new DomainServicesResourceProvider(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new DomainServicesResourceProvider(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### DomainServicesResourceProvider\n\n`DomainServicesResourceProvider` is the primary interface for developers using the Azure Domain client library. Explore the methods on this client object to understand the different features of the Azure Domain service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fdomainservices%2Farm-domainservices%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "domainservices/arm-domainservices",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/domainservices/arm-domainservices",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure DynatraceObservability client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure DynatraceObservability client.\n\n\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/dynatrace/arm-dynatrace) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-dynatrace) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-dynatrace) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-dynatrace` package\n\nInstall the Azure DynatraceObservability client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-dynatrace\n```\n\n### Create and authenticate a `DynatraceObservability`\n\nTo create a client object to access the Azure DynatraceObservability API, you will need the `endpoint` of your Azure DynatraceObservability resource and a `credential`. The Azure DynatraceObservability client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure DynatraceObservability resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure DynatraceObservability** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { DynatraceObservability } = require(\"@azure/arm-dynatrace\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new DynatraceObservability(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new DynatraceObservability(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### DynatraceObservability\n\n`DynatraceObservability` is the primary interface for developers using the Azure DynatraceObservability client library. Explore the methods on this client object to understand the different features of the Azure DynatraceObservability service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fdynatrace%2Farm-dynatrace%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "dynatrace/arm-dynatrace",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/dynatrace/arm-dynatrace",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure EducationManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure EducationManagement client.\n\nEducation client provides access to education resources for Azure subscriptions.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/education/arm-education) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-education) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-education?view=azure-node-preview) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-education` package\n\nInstall the Azure EducationManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-education\n```\n\n### Create and authenticate a `EducationManagementClient`\n\nTo create a client object to access the Azure EducationManagement API, you will need the `endpoint` of your Azure EducationManagement resource and a `credential`. The Azure EducationManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure EducationManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure EducationManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { EducationManagementClient } = require(\"@azure/arm-education\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new EducationManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new EducationManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### EducationManagementClient\n\n`EducationManagementClient` is the primary interface for developers using the Azure EducationManagement client library. Explore the methods on this client object to understand the different features of the Azure EducationManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Feducation%2Farm-education%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "education/arm-education",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/education/arm-education",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure MicrosoftElastic client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure MicrosoftElastic client.\n\n\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/elastic/arm-elastic) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-elastic) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-elastic?view=azure-node-preview) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-elastic` package\n\nInstall the Azure MicrosoftElastic client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-elastic\n```\n\n### Create and authenticate a `MicrosoftElastic`\n\nTo create a client object to access the Azure MicrosoftElastic API, you will need the `endpoint` of your Azure MicrosoftElastic resource and a `credential`. The Azure MicrosoftElastic client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure MicrosoftElastic resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure MicrosoftElastic** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { MicrosoftElastic } = require(\"@azure/arm-elastic\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new MicrosoftElastic(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new MicrosoftElastic(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### MicrosoftElastic\n\n`MicrosoftElastic` is the primary interface for developers using the Azure MicrosoftElastic client library. Explore the methods on this client object to understand the different features of the Azure MicrosoftElastic service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Felastic%2Farm-elastic%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "elastic/arm-elastic",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/elastic/arm-elastic",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure ElasticSanManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure ElasticSanManagement client.\n\n\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/elasticsans/arm-elasticsan) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-elasticsan) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-elasticsan?view=azure-node-preview) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-elasticsan` package\n\nInstall the Azure ElasticSanManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-elasticsan\n```\n\n### Create and authenticate a `ElasticSanManagement`\n\nTo create a client object to access the Azure ElasticSanManagement API, you will need the `endpoint` of your Azure ElasticSanManagement resource and a `credential`. The Azure ElasticSanManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure ElasticSanManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure ElasticSanManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { ElasticSanManagement } = require(\"@azure/arm-elasticsan\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new ElasticSanManagement(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new ElasticSanManagement(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### ElasticSanManagement\n\n`ElasticSanManagement` is the primary interface for developers using the Azure ElasticSanManagement client library. Explore the methods on this client object to understand the different features of the Azure ElasticSanManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Felasticsans%2Farm-elasticsan%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "elasticsans/arm-elasticsan",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/elasticsans/arm-elasticsan",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Authentication Events Trigger for Azure Functions client library for Node\n\nAuthentication Event Trigger for Azure Functions handles all the backend processing, (e.g. token/json schema validation) for incoming Http requests for Authentication events. And provides the developer with a strongly typed, versioned object model to work with, meaning the developer need not have any prior knowledge of the request and response json payloads.\n\nThis project framework provides the following features:\n\n* Token validation for securing the API call\n* Object model, typing, and IDE intellisense\n* Inbound and outbound validation of the API request and response schemas\n* Versioning\n* No need for boilerplate code.\n\n## Getting started\n\n### Install the npm package\n\n```console\nnpm install @azure/functions-authentication-events \n```\n\n### Prerequisites\n\n* [Azure function tools](https://github.com/Azure/azure-functions-core-tools)\n* [Azure Function Core Tools](https://github.com/Azure/azure-functions-core-tools#installing)\n* If using Visual Studio Code the following extensions:\n  * [ms-azuretools.vscode-azurefunctions](https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-azurefunctions)\n  * [ms-dotnettools.csharp](https://marketplace.visualstudio.com/items?itemName=ms-dotnettools.csharp)\n\n### Authenticate the Client\n\nWhen Azure AD authentication events service calls your custom extension, it will send an `Authorization` header with a `Bearer {token}`. This token will represent a [service to service authentication](https://review.docs.microsoft.com/azure/active-directory/develop/v2-oauth2-client-creds-grant-flow) in which:\n\n* The '**resource**', also known as the **audience**, is the application that you register to represent your API. This is represented by the `aud` claim in the token.\n* The '**client**' is a Microsoft application that represents the Azure AD authentication events service. It has an `appId` value of `99045fe1-7639-4a75-9d4a-577b6ca3810f`. This is represented by:\n  * The `azp` claim in the token if your application `accessTokenAcceptedVersion` property is set to `2`.\n  * The `appid` claim in the token if your resource application's `accessTokenAcceptedVersion` property is set to `1` or `null`.\n\nThere are three approaches to dealing with the token. You can customize the behavior using [application settings](https://docs.microsoft.com/azure/azure-functions/functions-how-to-use-azure-function-app-settings?tabs=portal#settings) as shown below or via the [local.settings.json](https://docs.microsoft.com/azure/azure-functions/functions-develop-local#local-settings-file) file in local environments.\n\n#### Validate tokens using Azure Functions Azure AD authentication integration\n\nWhen running your function in production, it is **highly recommended** to use the [Azure Functions Azure AD authentication integration](https://docs.microsoft.com/azure/app-service/configure-authentication-provider-aad#-option-2-use-an-existing-registration-created-separately) for validating incoming tokens.\n\n1. Go to the \"Authentication\" tab in your Function App\n2. Click on \"Add identity provider\"\n3. Select \"Microsoft\" as the identity provider\n4. Select \"Provide the details of an existing app registration\"\n5. Enter the `Application ID` of the app that represents your API in Azure AD\n\nThe issuer and allowed audience depends on the [`accessTokenAcceptedVersion`](https://review.docs.microsoft.com/azure/active-directory/develop/access-tokens) property of your application (can be found in the \"Manifest\" of the application).\n\nIf the `accessTokenAcceptedVersion` property is set to `2`:\n6. Set the `Issuer URL to \"https://login.microsoftonline.com/{tenantId}/v2.0\"\n7. Set an 'Allowed Audience' to the Application ID (`appId`)\n\nIf the `accessTokenAcceptedVersion` property is set to `1` or `null`:\n6. Set the `Issuer URL to \"https://sts.windows.net/{tenantId}/\"\n7. Set an 'Allowed Audience' to the Application ID URI (also known as`identifierUri`). It should be in the format of`api://{azureFunctionAppName}.azurewebsites.net/{resourceApiAppId}` or `api://{FunctionAppFullyQualifiedDomainName}/{resourceApiAppId}` if using a [custom domain name](https://docs.microsoft.com/azure/dns/dns-custom-domain#:~:text=Azure%20Function%20App%201%20Navigate%20to%20Function%20App,Custom%20domain%20text%20field%20and%20select%20Validate.%20).\n\nBy default, the Authentication event trigger will validate that Azure Function authentication integration is configured and it will check that the **client** in the token is set to `99045fe1-7639-4a75-9d4a-577b6ca3810f` (via the `azp` or `appid` claims in the token).\n\nIf you want to test your API against some other client that is not Azure AD authentication events service, like using Postman, you can configure an _optional_ application setting:\n\n* **AuthenticationEvents__CustomCallerAppId** - the guid of your desired client. If not provided, `99045fe1-7639-4a75-9d4a-577b6ca3810f` is assumed.\n\n#### Have the trigger validate the token\n\nIn local environments or environments that aren't hosted in the Azure Function service, the trigger can do the token validation. Set the following application settings:\n\n* **AuthenticationEvents__TenantId** - your tenant ID\n* **AuthenticationEvents__AudienceAppId** - the same value as \"Allowed audience\" in option 1.\n* **AuthenticationEvents__CustomCallerAppId** (_optional_) - the guid of your desired client. If not provided, `99045fe1-7639-4a75-9d4a-577b6ca3810f` is assumed.\n\nAn example `local.settings.json` file:\n\n```json\n{\n  \"IsEncrypted\": false,\n  \"Values\": {\n    \"AzureWebJobsStorage\": \"UseDevelopmentStorage=true\",\n    \"FUNCTIONS_WORKER_RUNTIME\": \"dotnet\",\n    \"AuthenticationEvents__TenantId\": \"8615397b-****-****-****-********06c8\",\n    \"AuthenticationEvents__AudienceAppId\": \"api://46f98993-****-****-****-********0038\",\n    \"AuthenticationEvents__CustomCallerAppId\": \"46f98993-****-****-****-********0038\"\n  }\n}\n```\n\n#### No token validation\n\nIf you would like to _not_ authenticate the token while in local development, set the following application setting:\n\n* **AuthenticationEvents__BypassTokenValidation** - value of `true` will make the trigger not check for a validation of the token.\n\n### Quickstart\n\n* Visual Studio Code\n  * Start Visual Studio Code\n  * Run the terminal command `func init . --worker-runtime node` via the command palette\n  * Run the terminal command `func new` via the command palette\n  * Follow the project creation prompts\n  * Run the terminal command `npm install @azure/functions-authentication-events` via the command palette\n  * Run the terminal command `npm install` via the command palette\n  * Run the terminal command `npm run-script build` via the command palette\n* For development purpose turn of token validation for testing:\n* Add the **AuthenticationEvents__BypassTokenValidation** application key to the \"Values\" section in the local.settings.json file and set it's value to **true**.  If you do not have a local.settings.json file in your local environment, create one in the root of your Function App.\n\n```json\n{\n  \"IsEncrypted\": false,\n  \"Values\": {\n    \"AzureWebJobsStorage\": \"UseDevelopmentStorage=true\",\n    \"FUNCTIONS_WORKER_RUNTIME\": \"node\",\n    \"AuthenticationEvents__BypassTokenValidation\": true\n  }\n}\n```\n\n* Once the project is loaded, you can run the sample code and you should see the Azure functions developer's application load your end point.\n\n## Key concepts\n\nKey concepts of the Azure .NET SDK can be found [here](https://azure.github.io/azure-sdk/dotnet_introduction.html)\n\n## Documentation\n\n* One the function has been published, there's some good reading about logging and metrics that can be found [here](https://docs.microsoft.com/azure/azure-functions/functions-monitor-log-analytics?tabs=csharp)\n\n* For API Documentation, please see the (Link TBD)\n* Once this moves to preview, we except no breaking changes and would be as simple as removing the the nuget source that points to the private preview.\n\n## Examples\n\nTo Test Token Augmentation, please do the following.\n\n* Open the project that was created in the prior step. (QuickStart)\n* Run the Application. `func host start`\n* Once the Azure functions developer's application has started, copy the listening url that is displayed with the application starts up.\n* Note: All Authentication functions are listed, in the case we have one function listener registered called \"**OnTokenIssuanceStart**\"\n* Your function endpoint will then be a combination of the listening url and function, for example: \"http://localhost:7071/runtime/webhooks/AuthenticationEvents?code=(YOUR_CODE)&function=OnTokenIssuanceStart\"\n* Post the following payload using something like Postman or Fiddler.\n* Steps for using Postman can be found (Link TBD)\n\n```json\n{\n    \"type\": \"microsoft.graph.authenticationEvent.tokenIssuanceStart\",\n    \"source\": \"/tenants/00000001-0000-0ff1-ce00-000000000000/applications/ef9e995c-efdb-4e76-97a9-8cdfc6e06afc\",\n    \"data\": {\n        \"@odata.type\": \"microsoft.graph.onTokenIssuanceStartCalloutData\",\n        \"tenantId\": \"00000001-0000-0ff1-ce00-000000000000\",\n        \"authenticationEventListenerId\": \"f2390d57-9664-4dde-b625-f0115925e1e2\",\n        \"customAuthenticationExtensionId\": \"9cc1c1ed-5f04-4fdf-85c0-94a7c6ea819c\",\n        \"authenticationContext\": {\n            \"correlationId\": \"f4bd1870-b774-4fa5-ba78-e08ac6be14c0\",\n            \"client\": {\n                \"ip\": \"127.0.0.1\",\n                \"locale\": \"en-us\",\n                \"market\": \"en-us\"\n            },\n            \"protocol\": \"OAUTH2.0\",\n            \"clientServicePrincipal\": {\n                \"id\": \"eedfddb9-304e-4d62-aa83-24700a0bcf0e\",\n                \"appId\": \"ef9e995c-efdb-4e76-97a9-8cdfc6e06afc\",\n                \"appDisplayName\": \"\",\n                \"displayName\": \"Test application\"\n            },\n            \"resourceServicePrincipal\": {\n                \"id\": \"eedfddb9-304e-4d62-aa83-24700a0bcf0e\",\n                \"appId\": \"ef9e995c-efdb-4e76-97a9-8cdfc6e06afc\",\n                \"appDisplayName\": \"\",\n                \"displayName\": \"Test application\"\n            },\n            \"user\": {\n                \"companyName\": \"Evo Sts Test\",\n                \"country\": \"\",\n                \"id\": \"69d24544-c420-4721-a4bf-106f2378d9f6\",\n                \"mail\": \"testadmin@evostsoneboxtest.com\",\n                \"onPremisesSamAccountName\": \"testadmin\",\n                \"onPremisesSecurityIdentifier\": \"testadmin\",\n                \"preferredDataLocation\": \"\",\n                \"userPrincipalName\": \"testadmin@evostsoneboxtest.com\"\n            }\n        }\n    }\n}\n```\n\n* You should see this response:\n\n```json\n{\n    \"data\": {\n        \"@odata.type\": \"microsoft.graph.onTokenIssuanceStartResponseData\",\n        \"actions\": [\n            {\n                \"@odata.type\": \"ProvideClaimsForToken\",\n                \"claims\": [\n                    {\n                        \"DateOfBirth\": \"01/01/2000\"\n                    },\n                    {\n                        \"CustomRoles\": [\n                            \"Writer\",\n                            \"Editor\"\n                        ]\n                    }\n                ]\n            }\n        ]\n    }\n}\n```\n\n## Troubleshooting\n\n* Visual Studio Code\n  * If running in Visual Studio Code, you get an error along the lines of the local Azure Storage Emulator is unavailable, you can start the emulator manually.! (Note: Azure Storage emulator is now deprecated and the suggested replacement is [Azurite](https://docs.microsoft.com/azure/storage/common/storage-use-azurite?tabs=visual-studio))\n  * If using Visual Studio Code on Mac please use [Azurite](https://docs.microsoft.com/azure/storage/common/storage-use-azurite?tabs=visual-studio)\n  * If you see the following error on Windows (it's a bug) when trying to run the created projected.\n  * This can be resolved by executing this command in powershell `Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Scope LocalMachine` more info on this can be found [here](https://github.com/Azure/azure-functions-core-tools/issues/1821) and [here](https://docs.microsoft.com/powershell/module/microsoft.powershell.core/about/about_execution_policies?view=powershell-7)\n\n## Next steps\n\nFor more information on Azure SDK, please refer to [this website](https://azure.github.io/azure-sdk/)\n\n## Publish\n\n* Follow the instruction here to create and publish your Azure Application. <https://docs.microsoft.com/azure/azure-functions/functions-develop-vs?tabs=in-process#publish-to-azure>\n* To determine your published posting endpoint, combine the azure function endpoint you created, route to the listener and listener code, the listen code can be found by navigating to your azure function application, selecting \"App Keys\" and copying the value of AuthenticationEvents_extension.\n* For example: \"https://azureautheventstriggerdemo.azurewebsites.net/runtime/webhooks/AuthenticationEvents?code=(AuthenticationEvents_extension_key)&function=OnTokenIssuanceStart\"\n* Make sure your production environment has the correct application settings for token authentication.\n* Once again you can test the published function by posting the above payload to the new endpoint.\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing\nguide][cg].\n\nThis project welcomes contributions and suggestions. Most contributions\nrequire you to agree to a Contributor License Agreement (CLA) declaring\nthat you have the right to, and actually do, grant us the rights to use\nyour contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine\nwhether you need to provide a CLA and decorate the PR appropriately\n(e.g., label, comment). Simply follow the instructions provided by the\nbot. You will only need to do this once across all repositories using\nour CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For\nmore information see the [Code of Conduct FAQ][coc_faq] or contact\n<opencode@microsoft.com> with any additional questions or comments.\n\n<!-- LINKS -->\n[cg]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/docs/CONTRIBUTING.md\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n",
        "repo_name": "entra/functions-authentication-events",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/entra/functions-authentication-events",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure EventGridManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure EventGridManagement client.\n\nAzure EventGrid Management Client\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/eventgrid/arm-eventgrid) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-eventgrid) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-eventgrid?view=azure-node-preview) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-eventgrid` package\n\nInstall the Azure EventGridManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-eventgrid\n```\n\n### Create and authenticate a `EventGridManagementClient`\n\nTo create a client object to access the Azure EventGridManagement API, you will need the `endpoint` of your Azure EventGridManagement resource and a `credential`. The Azure EventGridManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure EventGridManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure EventGridManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { EventGridManagementClient } = require(\"@azure/arm-eventgrid\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new EventGridManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new EventGridManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### EventGridManagementClient\n\n`EventGridManagementClient` is the primary interface for developers using the Azure EventGridManagement client library. Explore the methods on this client object to understand the different features of the Azure EventGridManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Feventgrid%2Farm-eventgrid%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "eventgrid/arm-eventgrid",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/eventgrid/arm-eventgrid",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Event Grid client library for JavaScript\n\n[Azure Event Grid](https://azure.microsoft.com/services/event-grid/) is a cloud-based service that provides reliable event delivery at massive scale.\n\nUse the client library to:\n\n- Send events to Event Grid using either the Event Grid, Cloud Events 1.0 schemas, or a custom schema\n- Decode and process events which were delivered to an Event Grid handler\n- Generate Shared Access Signatures for Event Grid topics\n\nKey links:\n\n- [Source code](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/eventgrid/eventgrid/)\n- [Package (NPM)](https://www.npmjs.com/package/@azure/eventgrid)\n- [API reference documentation](https://docs.microsoft.com/javascript/api/@azure/eventgrid/)\n- [Product documentation](https://docs.microsoft.com/azure/event-grid/)\n- [Samples](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/eventgrid/eventgrid/samples)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge, and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n- An existing [Event Grid][event_grid] Topic or Domain. If you need to create the resource, you can use the [Azure Portal][azure_portal] or [Azure CLI][azure_cli].\n\nIf you use the Azure CLI, replace `<your-resource-group-name>` and `<your-resource-name>` with your own unique names:\n\n#### Create an Event Grid Topic\n\n```bash\naz eventgrid topic create --location <location> --resource-group <your-resource-group-name> --name <your-resource-name>\n```\n\n#### Create an Event Grid Domain\n\n```bash\naz eventgrid domain create --location <location> --resource-group <your-resource-group-name> --name <your-resource-name>\n```\n\n### Install the `@azure/eventgrid` package\n\nInstall the Azure Event Grid client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/eventgrid\n```\n\n### Create and authenticate a `EventGridPublisherClient`\n\nTo create a client object to access the Event Grid API, you will need the `endpoint` of your Event Grid topic and a `credential`. The Event Grid client can use either an Access Key or Shared Access Signature (SAS) created from an access key.\n\nYou can find the endpoint for your Event Grid topic either in the [Azure Portal][azure_portal] or by using the [Azure CLI][azure_cli] snippet below:\n\n```bash\naz eventgrid topic show --name <your-resource-name> --resource-group <your-resource-group-name> --query \"endpoint\"\n```\n\n#### Using an Access Key\n\nUse the [Azure Portal][azure_portal] to browse to your Event Grid resource and retrieve an Access Key, or use the [Azure CLI][azure_cli] snippet below:\n\n```bash\naz eventgrid topic key list --resource-group <your-resource-group-name> --name <your-event-grid-topic-name>\n```\n\nOnce you have an API key and endpoint, you can use the `AzureKeyCredential` class to authenticate the client as follows:\n\n```js\nconst { EventGridPublisherClient, AzureKeyCredential } = require(\"@azure/eventgrid\");\n\nconst client = new EventGridPublisherClient(\n  \"<endpoint>\",\n  \"<endpoint schema>\",\n  new AzureKeyCredential(\"<Access Key>\")\n);\n```\n\n#### Using a SAS Token\n\nLike an access key, a SAS token allows access to sending events to an Event Grid topic. Unlike an access key, which can be used until it is regenerated, a SAS token has an experation time, at which point it is no longer valid. To use a SAS token for authentication, use the `AzureSASCredential` as follows:\n\n```js\nconst { EventGridPublisherClient, AzureSASCredential } = require(\"@azure/eventgrid\");\n\nconst client = new EventGridPublisherClient(\n  \"<endpoint>\",\n  \"<endpoint schema>\",\n  new AzureSASCredential(\"<SAS Token>\")\n);\n```\n\nYou can generate a SAS token by using the `generateSharedAccessSigniture` function.\n\n```js\nconst { generateSharedAccessSignature, AzureKeyCredential } = require(\"@azure/eventgrid\");\n\n// Create a SAS Token which expires on 2020-01-01 at Midnight.\nconst token = generateSharedAccessSignature(\n  \"<endpoint>\",\n  new AzureKeyCredential(\"<API key>\"),\n  new Date(\"2020-01-01T00:00:00\")\n);\n```\n\n#### Using Azure Active Directory (AAD)\n\nAzure EventGrid provides integration with Azure Active Directory (Azure AD) for identity-based authentication of requests. With Azure AD, you can use role-based access control (RBAC) to grant access to your Azure Event Grid resources to users, groups, or applications.\n\nTo send events to a topic or domain with a `TokenCredential`, the authenticated identity should have the \"EventGrid Data Sender\" role assigned.\n\nWith the `@azure/identity` package, you can seamlessly authorize requests in both development and production environments. To learn more about Azure Active Directory, see the [`@azure/identity` README](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/README.md).\n\nFor example, use can use `DefaultAzureCredential` to construct a client which will authenticate using Azure Active Directory:\n\n```js\nconst { EventGridPublisherClient } = require(\"@azure/eventgrid\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n\nconst client = new EventGridPublisherClient(\n  \"<endpoint>\",\n  \"<endpoint schema>\",\n  new DefaultAzureCredential()\n);\n```\n\n## Key concepts\n\n### EventGridPublisherClient\n\n`EventGridPublisherClient` is used sending events to an Event Grid Topic or an Event Grid Domain.\n\n### Event Schemas\n\nEvent Grid supports multiple schemas for encoding events. When a Custom Topic or Domain is created, you specify the schema that will be used when publishing events. While you may configure your topic to use a _custom schema_ it is more common to use the already defined _Event Grid schema_ or _CloudEvents 1.0 schema_. [CloudEvents](https://cloudevents.io/) is a Cloud Native Computing Foundation project which produces a specification for describing event data in a common way. When you construct the EventGridPublisherClient you must specify which schema your topic is configured to use:\n\nIf your topic is configured to use the Event Grid Schema, set \"EventGrid\" as the schema type:\n\n```js\nconst client = new EventGridPublisherClient(\n  \"<endpoint>\",\n  \"EventGrid\",\n  new AzureKeyCredential(\"<API Key>\")\n);\n```\n\nIf your topic is configured to use the Cloud Event Schema, set \"CloudEvent\" as the schema type:\n\n```js\nconst client = new EventGridPublisherClient(\n  \"<endpoint>\",\n  \"CloudEvent\",\n  new AzureKeyCredential(\"<API Key>\")\n);\n```\n\nIf your topic is configured to use a Custom Event Schema, set \"Custom\" as the schema type:\n\n```js\nconst client = new EventGridPublisherClient(\n  \"<endpoint>\",\n  \"Custom\",\n  new AzureKeyCredential(\"<API Key>\")\n);\n```\n\nConstructing the client with a different schema than what the topic is configured to expect will result in an error from the service and your events will not be published.\n\nYou can see what input schema has been configured for an Event Grid topic by using the [Azure CLI][azure_cli] snippet below:\n\n```bash\naz eventgrid topic show --name <your-resource-name> --resource-group <your-resource-group-name> --query \"inputSchema\"\n```\n\n### EventGridDeserializer\n\nEvents delivered to consumers by Event Grid are delivered as JSON. Depending on the type of consumer being delivered to, the Event Grid service may deliver one or more events as part of a single payload. While these events may be deserialized using normal JavaScript methods like `JSON.parse`, this library offers a helper type for deserializing events, called `EventGridDeserializer`.\n\nCompared with using `JSON.parse` directly, `EventGridDeserializer` does some additional conversions while deserializng events:\n\n1. `EventGridDeserializer` validates that the required properties of an event are present and are the right types.\n2. `EventGridDeserializer` converts the event time property into a JavaScript `Date` object.\n3. When using Cloud Events, binary data may be used for an event's data property (by using `Uint8Array`). When the event is sent through Event Grid, it is encoded in Base 64. `EventGridDeserializer` will decode this data back into an instance of `Uint8Array`.\n4. When deserilizing a _System Event_ (an event generated by another Azure service), `EventGridDeserializer` will do additional conversions so that the `data` object matches the corresponding interface which describes its data. When using TypeScript, these interfaces ensure you have strong typing when access properties of the data object for a system event.\n\nWhen creating an instance of `EventGridDeserializer` you may supply custom deserializers that are used to further convert the `data` object.\n\n### Distributed Tracing and Cloud Events\n\nThis library supports distributed tracing using [`@azure/core-tracing`][azure-core-tracing-github]. When using distributed tracing, this library will create a span during a `send` operation. In addition, when sending events using the Cloud Events 1.0 schema, the SDK will add distributed tracing metadata to the events using the [Distributed Tracing extension][cloud-events-distributed-tracing-spec]. The values for the `traceparent` and `tracestate` extension properties correspond to the `traceparent` and `tracestate` headers from the HTTP request which sends the events. If an event already has a `traceparent` extension property it is not updated.\n\n### Event Grid on Kubernetes\n\nThis library has been tested and validated on [Kubernetes using Azure Arc][eventgrid-on-kubernetes-using-azure-arc].\n\n## Examples\n\n### Publish a Custom Event to an Event Grid Topic using the Event Grid Schema\n\n```js\nconst { EventGridPublisherClient, AzureKeyCredential } = require(\"@azure/eventgrid\");\n\nconst client = new EventGridPublisherClient(\n  \"<endpoint>\",\n  \"EventGrid\",\n  new AzureKeyCredential(\"<API key>\")\n);\n\nawait client.send([\n  {\n    eventType: \"Azure.Sdk.SampleEvent\",\n    subject: \"Event Subject\",\n    dataVersion: \"1.0\",\n    data: {\n      hello: \"world\"\n    }\n  }\n]);\n```\n\n### Publish a Custom Event to a Topic in an Event Grid Domain using the Event Grid Schema\n\nPublishing events to an Event Grid Domain is similar to publish to an Event Grid Topic, except that when using the Event Grid schema for events, you must include the `topic` property. When publishing events in the Cloud Events 1.0 schema, the required `source` property is used as the name of the topic in the domain to publish to:\n\n```js\nconst { EventGridPublisherClient, AzureKeyCredential } = require(\"@azure/eventgrid\");\n\nconst client = new EventGridPublisherClient(\n  \"<endpoint>\",\n  \"EventGrid\",\n  new AzureKeyCredential(\"<API key>\")\n);\n\nawait client.send([\n  {\n    topic: \"my-sample-topic\",\n    eventType: \"Azure.Sdk.SampleEvent\",\n    subject: \"Event Subject\",\n    dataVersion: \"1.0\",\n    data: {\n      hello: \"world\"\n    }\n  }\n]);\n```\n\n### Deserializing an Event\n\n`EventGridDeserializer` can be used to deserialize events delivered by Event Grid. When deserializing an event, you need to know the schema used to deliver the event. In this example we have events being delivered to an Azure Service Bus Queue in the Cloud Events schema. Using the Service Bus SDK we can receive these events from the Service Bus Queue and then deserialize them using `EventGridDeserializer` and use `isSystemEvent` to detect what type of events they are.\n\n```js\nconst { ServiceBusClient } = require(\"@azure/service-bus\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { EventGridDeserializer, isSystemEvent } = require(\"@azure/eventgrid\");\n\nconst client = new ServiceBusClient(\"<service bus hostname>\", new DefaultAzureCredential());\n\nconst receiver = client.createReceiver(\"<queue name>\", \"peekLock\");\n\nconst consumer = new EventGridDeserializer();\n\nasync function processMessage(message) {\n  // When delivering to a Service Bus Queue or Topic, EventGrid delivers a single event per message.\n  // so we just pluck the first one.\n  const event = (await consumer.deserializeCloudEvents(message.body))[0];\n\n  if (isSystemEvent(\"Microsoft.ContainerRegistry.ImagePushed\", event)) {\n    console.log(\n      `${event.time}: Container Registry Image Pushed event for image ${event.data.target.repository}:${event.data.target.tag}`\n    );\n  } else if (isSystemEvent(\"Microsoft.ContainerRegistry.ImageDeleted\", event)) {\n    console.log(\n      `${event.time}: Container Registry Image Deleted event for repository ${event.data.target.repository}`\n    );\n  }\n\n  await message.complete();\n}\n\nconsole.log(\"starting receiver\");\n\nreceiver.subscribe({\n  processError: async (err) => {\n    console.error(err);\n  },\n  processMessage\n});\n```\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\n\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the\n[samples](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/eventgrid/eventgrid/samples)\ndirectory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for Javascript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Feventgrid%2Feventgrid%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[event_grid]: https://docs.microsoft.com/azure/event-grid\n[azure_portal]: https://portal.azure.com\n[azure-core-tracing-github]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/core-tracing\n[cloud-events-distributed-tracing-spec]: https://github.com/cloudevents/spec/blob/v1.0.1/extensions/distributed-tracing.md\n[eventgrid-on-kubernetes-using-azure-arc]: https://docs.microsoft.com/azure/event-grid/kubernetes/\n",
        "repo_name": "eventgrid/eventgrid",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/eventgrid/eventgrid",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure EventHubManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure EventHubManagement client.\n\nAzure Event Hubs client for managing Event Hubs Cluster, IPFilter Rules and VirtualNetworkRules resources.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/eventhub/arm-eventhub-profile-2020-09-01-hybrid) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-eventhub-profile-2020-09-01-hybrid) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-eventhub-profile-2020-09-01-hybrid?view=azure-node-preview) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-eventhub-profile-2020-09-01-hybrid` package\n\nInstall the Azure EventHubManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-eventhub-profile-2020-09-01-hybrid\n```\n\n### Create and authenticate a `EventHubManagementClient`\n\nTo create a client object to access the Azure EventHubManagement API, you will need the `endpoint` of your Azure EventHubManagement resource and a `credential`. The Azure EventHubManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure EventHubManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure EventHubManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { EventHubManagementClient } = require(\"@azure/arm-eventhub-profile-2020-09-01-hybrid\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new EventHubManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new EventHubManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### EventHubManagementClient\n\n`EventHubManagementClient` is the primary interface for developers using the Azure EventHubManagement client library. Explore the methods on this client object to understand the different features of the Azure EventHubManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Feventhub%2Farm-eventhub-profile-2020-09-01-hybrid%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "eventhub/arm-eventhub-profile-2020-09-01-hybrid",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/eventhub/arm-eventhub-profile-2020-09-01-hybrid",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure EventHubManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure EventHubManagement client.\n\nAzure Event Hubs client for managing Event Hubs Cluster, IPFilter Rules and VirtualNetworkRules resources.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/eventhub/arm-eventhub) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-eventhub) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-eventhub?view=azure-node-preview) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-eventhub` package\n\nInstall the Azure EventHubManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-eventhub\n```\n\n### Create and authenticate a `EventHubManagementClient`\n\nTo create a client object to access the Azure EventHubManagement API, you will need the `endpoint` of your Azure EventHubManagement resource and a `credential`. The Azure EventHubManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure EventHubManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure EventHubManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { EventHubManagementClient } = require(\"@azure/arm-eventhub\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new EventHubManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new EventHubManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### EventHubManagementClient\n\n`EventHubManagementClient` is the primary interface for developers using the Azure EventHubManagement client library. Explore the methods on this client object to understand the different features of the Azure EventHubManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Feventhub%2Farm-eventhub%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "eventhub/arm-eventhub",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/eventhub/arm-eventhub",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Event Hubs client library for JavaScript\n\nAzure Event Hubs is a highly scalable publish-subscribe service that can ingest millions of events per second and stream them to multiple consumers. This lets you process and analyze the massive amounts of data produced by your connected devices and applications. If you would like to know more about Azure Event Hubs, you may wish to review: [What is Event Hubs](https://docs.microsoft.com/azure/event-hubs/event-hubs-about)?\n\nThe Azure Event Hubs client library allows you to send and receive events in your Node.js application.\n\nKey links:\n- [Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/eventhub/event-hubs)\n- [Package (npm)](https://www.npmjs.com/package/@azure/event-hubs)\n- [API Reference Documentation](https://docs.microsoft.com/javascript/api/@azure/event-hubs)\n- [Product documentation](https://azure.microsoft.com/services/event-hubs/)\n- [Samples](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/eventhub/event-hubs/samples)\n\n**NOTE**: If you are using version 2.1.0 or lower and want to migrate to the latest version\nof this package please look at our [migration guide to move from EventHubs V2 to EventHubs V5](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/eventhub/event-hubs/migrationguide.md)\n\nSamples for v2 and documentation are still available here:\n\n[Source code for v2.1.0](https://github.com/Azure/azure-sdk-for-js/tree/%40azure/event-hubs_2.1.0/sdk/eventhub/event-hubs) |\n[Package for v2.1.0 (npm)](https://www.npmjs.com/package/@azure/event-hubs/v/2.1.0) |\n[Samples for v2.1.0](https://github.com/Azure/azure-sdk-for-js/tree/%40azure/event-hubs_2.1.0/sdk/eventhub/event-hubs/samples)\n\n## Getting started\n\n### Install the package\n\nInstall the Azure Event Hubs client library using npm\n\n`npm install @azure/event-hubs`\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge, and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription](https://azure.microsoft.com/free/)\n- An [Event Hubs Namespace](https://docs.microsoft.com/azure/event-hubs/)\n\n#### Configure TypeScript\n\nTypeScript users need to have Node type definitions installed:\n\n```bash\nnpm install @types/node\n```\n\nYou also need to enable `compilerOptions.allowSyntheticDefaultImports` in your tsconfig.json. Note that if you have enabled `compilerOptions.esModuleInterop`, `allowSyntheticDefaultImports` is enabled by default. See [TypeScript's compiler options handbook](https://www.typescriptlang.org/docs/handbook/compiler-options.html) for more information.\n\n### JavaScript Bundle\n\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\nIn addition to what is described there, this library also needs additional polyfills for the following NodeJS core built-in modules in order to work properly in the browsers:\n\n- `buffer`\n- `os`\n- `path`\n- `process`\n\n#### Bundling with Webpack\n\nIf you are using Webpack v5, you can install the following dev dependencies\n\n- `npm install --save-dev os-browserify path-browserify`\n\nthen add the following into your webpack.config.js\n\n```diff\n const path = require(\"path\");\n+const webpack = require(\"webpack\");\n\n module.exports = {\n   entry: \"./src/index.ts\",\n@@ -12,8 +13,21 @@ module.exports = {\n       },\n     ],\n   },\n+  plugins: [\n+    new webpack.ProvidePlugin({\n+      process: \"process/browser\",\n+    }),\n+    new webpack.ProvidePlugin({\n+      Buffer: [\"buffer\", \"Buffer\"],\n+    }),\n+  ],\n   resolve: {\n     extensions: [\".ts\", \".js\"],\n+    fallback: {\n+      buffer: require.resolve(\"buffer/\"),\n+      os: require.resolve(\"os-browserify\"),\n+      path: require.resolve(\"path-browserify\"),\n+    },\n   },\n```\n\n#### Bundling with Rollup\n\nIf you are using Rollup bundler, install the following dev dependencies\n\n- `npm install --save-dev @rollup/plugin-commonjs @rollup/plugin-inject @rollup/plugin-node-resolve`\n\nThen include the following in your rollup.config.js\n\n```diff\n+import nodeResolve from \"@rollup/plugin-node-resolve\";\n+import cjs from \"@rollup/plugin-commonjs\";\n+import shim from \"rollup-plugin-shim\";\n+import inject from \"@rollup/plugin-inject\";\n\nexport default {\n  // other configs\n  plugins: [\n+    shim({\n+      fs: `export default {}`,\n+      net: `export default {}`,\n+      tls: `export default {}`,\n+      path: `export default {}`,\n+      dns: `export function resolve() { }`,\n+    }),\n+    nodeResolve({\n+      mainFields: [\"module\", \"browser\"],\n+      preferBuiltins: false,\n+    }),\n+    cjs(),\n+    inject({\n+      modules: {\n+        Buffer: [\"buffer\", \"Buffer\"],\n+        process: \"process\",\n+      },\n+      exclude: [\"./**/package.json\"],\n+    }),\n  ]\n};\n```\n\nPlease consult the documentation of your favorite bundler for more information on using polyfills.\n\n### React Native Support\n\nSimilar to browsers, React Native does not support some JavaScript API used by this SDK library so you need to provide polyfills for them.  Please see the [Messaging React Native sample with Expo](https://github.com/Azure/azure-sdk-for-js/blob/main/samples/frameworks/react-native-expo/ts/messaging/README.md) for more details.\n\n### Authenticate the client\n\nInteraction with Event Hubs starts with either an instance of the\n[EventHubConsumerClient](https://docs.microsoft.com/javascript/api/@azure/event-hubs/eventhubconsumerclient) class\nor an instance of the [EventHubProducerClient](https://docs.microsoft.com/javascript/api/@azure/event-hubs/eventhubproducerclient) class.\nThere are constructor overloads to support different ways of instantiating these classes as shown below:\n\n#### Use connection string for the Event Hubs namespace\n\nOne of the constructor overloads takes a connection string of the form `Endpoint=sb://my-servicebus-namespace.servicebus.windows.net/;SharedAccessKeyName=my-SA-name;SharedAccessKey=my-SA-key;` and entity name to your Event Hub instance. You can create a consumer group and get the connection string as well as the entity name from the [Azure portal](https://docs.microsoft.com/azure/event-hubs/event-hubs-get-connection-string#get-connection-string-from-the-portal).\n\n```javascript\nconst { EventHubProducerClient, EventHubConsumerClient } = require(\"@azure/event-hubs\");\n\nconst producerClient = new EventHubProducerClient(\"my-connection-string\", \"my-event-hub\");\nconst consumerClient = new EventHubConsumerClient(\n  \"my-consumer-group\",\n  \"my-connection-string\",\n  \"my-event-hub\"\n);\n```\n\n#### Use connection string for policy on the Event Hub\n\nAnother constructor overload takes the connection string corresponding to the shared access policy you have defined directly on the Event Hub instance (and not the Event Hubs namespace).\nThis connection string will be of the form `Endpoint=sb://my-servicebus-namespace.servicebus.windows.net/;SharedAccessKeyName=my-SA-name;SharedAccessKey=my-SA-key;EntityPath=my-event-hub-name`.\nThe key difference in the connection string format from the previous constructor overload is the `;EntityPath=my-event-hub-name`.\n\n```javascript\nconst { EventHubProducerClient, EventHubConsumerClient } = require(\"@azure/event-hubs\");\n\nconst producerClient = new EventHubProducerClient(\"my-connection-string-with-entity-path\");\nconst consumerClient = new EventHubConsumerClient(\n  \"my-consumer-group\",\n  \"my-connection-string-with-entity-path\"\n);\n```\n\n#### Use the Event Hubs namespace and Azure Identity\n\nThis constructor overload takes the host name and entity name of your Event Hub instance and credential that implements the TokenCredential interface. This allows you to authenticate using an Azure Active Directory principal. There are implementations of the `TokenCredential` interface available in the [@azure/identity](https://www.npmjs.com/package/@azure/identity) package. The host name is of the format `<yournamespace>.servicebus.windows.net`. When using Azure Active Directory, your principal must be assigned a role which allows access to Event Hubs, such as the Azure Event Hubs Data Owner role. For more information about using Azure Active Directory authorization with Event Hubs, please refer to [the associated documentation](https://docs.microsoft.com/azure/event-hubs/authorize-access-azure-active-directory).\n\n```javascript\nconst { EventHubProducerClient, EventHubConsumerClient } = require(\"@azure/event-hubs\");\n\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst credential = new DefaultAzureCredential();\nconst producerClient = new EventHubProducerClient(\"my-host-name\", \"my-event-hub\", credential);\nconst consumerClient = new EventHubConsumerClient(\n  \"my-consumer-group\",\n  \"my-host-name\",\n  \"my-event-hub\",\n  credential\n);\n```\n\n## Key concepts\n\n- An **Event Hub producer** is a source of telemetry data, diagnostics information, usage logs, or other log data, as part of an embedded device solution, a mobile device application, a game title running on a console or other device, some client or server based business solution, or a web site.\n\n- An **Event Hub consumer** picks up such information from the Event Hub and processes it. Processing may involve aggregation, complex computation and filtering. Processing may also involve distribution or storage of the information in a raw or transformed fashion. Event Hub consumers are often robust and high-scale platform infrastructure parts with built-in analytics capabilities, like Azure Stream Analytics, Apache Spark, or Apache Storm.\n\n- A **partition** is an ordered sequence of events that is held in an Event Hub. Partitions are a means of data organization associated with the parallelism required by event consumers. Azure Event Hubs provides message streaming through a partitioned consumer pattern in which each consumer only reads a specific subset, or partition, of the message stream. As newer events arrive, they are added to the end of this sequence. The number of partitions is specified at the time an Event Hub is created and cannot be changed.\n\n- A **consumer group** is a view of an entire Event Hub. Consumer groups enable multiple consuming applications to each have a separate view of the event stream, and to read the stream independently at their own pace and from their own position. There can be at most 5 concurrent readers on a partition per consumer group; however it is recommended that there is only one active consumer for a given partition and consumer group pairing. Each active reader receives all of the events from its partition; If there are multiple readers on the same partition, then they will receive duplicate events.\n\nFor more concepts and deeper discussion, see: [Event Hubs Features](https://docs.microsoft.com/azure/event-hubs/event-hubs-features)\n\n### Guidance around retries\n\nThe `EventHubConsumerClient` and `EventHubProducerClient` accept `options` where you can set the `retryOptions`\nthat allow you to tune how the SDK handles transient errors.\nExamples of transient errors include temporary network or service issues.\n\n#### Retries when consuming events\n\nIf a transient error (e.g. a temporary network issue) is encountered while the SDK is receiving events,\nit will retry receiving events based on the retry options passed into the `EventHubConsumerClient`.\nIf the maximum retry attempts are exhausted, the `processError` function will be invoked.\n\nYou can use the retry settings to control how quickly you are informed about temporary issues such as a\nnetwork connection issue.\nFor example, if you need to know when there is a network issue right away you can lower the\nvalues for `maxRetries` and `retryDelayInMs`.\n\nAfter executing the `processError` function, the client continues to receive events from the partition as long\nas the error was a retryable one. Otherwise, the client invokes the user-provided `processClose` function.\nThis function is also invoked when either you stop the subscription or when the client stops reading\nevents from the current partition due to it being picked up by another instance of your application\nas part of load balancing.\n\nThe `processClose` function provides an opportunity to update checkpoints if needed.\nAfter executing `processClose`, the client (or in the case of load balancing,\na client from another instance of you application) will invoke the user-provided\n`processInitialize` function to resume reading events from the last updated checkpoint for the same partition.\n\nIf you wish to stop attempting to read events, you must call `close()` on the `subscription` returned\nby the `subscribe` method.\n\n## Examples\n\nThe following sections provide code snippets that cover some of the common tasks using Azure Event Hubs\n\n- [Inspect an Event Hub](#inspect-an-event-hub)\n- [Publish events to an Event Hub](#publish-events-to-an-event-hub)\n- [Consume events from an Event Hub](#consume-events-from-an-event-hub)\n- [Use EventHubConsumerClient to work with IotHub](#use-eventhubconsumerclient-to-work-with-iothub)\n\n### Inspect an Event Hub\n\nMany Event Hub operations take place within the scope of a specific partition.\nBecause partitions are owned by the Event Hub, their names are assigned at the time of creation.\nTo understand what partitions are available, you query the Event Hub using either of the two clients available: `EventHubProducerClient` or `EventHubConsumerClient`\n\nIn the below example, we are using an `EventHubProducerClient`.\n\n```javascript\nconst { EventHubProducerClient } = require(\"@azure/event-hubs\");\n\nasync function main() {\n  const client = new EventHubProducerClient(\"connectionString\", \"eventHubName\");\n\n  const partitionIds = await client.getPartitionIds();\n\n  await client.close();\n}\n\nmain();\n```\n\n### Publish events to an Event Hub\n\nIn order to publish events, you'll need to create an `EventHubProducerClient`. While the below example shows one way to create the client, see the\n[Authenticate the client](#authenticate-the-client) section to learn other ways to instantiate the client.\n\nYou may publish events to a specific partition, or allow the Event Hubs service to decide which partition events should be published to. It is recommended to use automatic routing when the publishing of events needs to be highly available or when event data should be distributed evenly among the partitions. In the example below, we will take advantage of automatic routing.\n\n- Create an `EventDataBatch` object using the [createBatch](https://docs.microsoft.com/javascript/api/@azure/event-hubs/eventhubproducerclient#createbatch-createbatchoptions-)\n- Add events to the batch using the [tryAdd](https://docs.microsoft.com/javascript/api/@azure/event-hubs/eventdatabatch#tryadd-eventdata--tryaddoptions-)\n  method. You can do this until the maximum batch size limit is reached or until you are done adding the number of events you liked, whichever comes first. This method would return `false` to indicate that no more events can be added to the batch due to the max batch size being reached.\n- Send the batch of events using the [sendBatch](https://docs.microsoft.com/javascript/api/@azure/event-hubs/eventhubproducerclient#sendbatch-eventdatabatch--sendbatchoptions-) method.\n\nIn the below example, we attempt to send 10 events to Azure Event Hubs.\n\n```javascript\nconst { EventHubProducerClient } = require(\"@azure/event-hubs\");\n\nasync function main() {\n  const producerClient = new EventHubProducerClient(\"connectionString\", \"eventHubName\");\n\n  const eventDataBatch = await producerClient.createBatch();\n  let numberOfEventsToSend = 10;\n\n  while (numberOfEventsToSend > 0) {\n    let wasAdded = eventDataBatch.tryAdd({ body: \"my-event-body\" });\n    if (!wasAdded) {\n      break;\n    }\n    numberOfEventsToSend--;\n  }\n\n  await producerClient.sendBatch(eventDataBatch);\n  await producerClient.close();\n}\n\nmain();\n```\n\nThere are options you can pass at different stages to control the process of sending events to Azure Event Hubs.\n\n- The `EventHubProducerClient` constructor takes an optional parameter of type `EventHubClientOptions` which you can use to specify options like number of retries.\n- The `createBatch` method takes an optional parameter of type `CreateBatchOptions` which you can use to speicify the max batch size supported by the batch being created.\n- The `sendBatch` method takes an optional parameter of type `SendBatchOptions` which you can use to specify `abortSignal` to cancel current operation.\n- In case you want to send to a specific partition, an overload of the `sendBatch` method allows you to pass the id of the partition to send events to.\n  The [Inspect an Event Hub](#inspect-an-event-hub) example above shows how to fetch the available partitions ids.\n\n**Note**: When working with Azure Stream Analytics, the body of the event being sent should be a JSON object as well.\nFor example: `body: { \"message\": \"Hello World\" }`\n\n### Consume events from an Event Hub\n\nTo consume events from an Event Hub instance, you also need to know which consumer group you want to target.\nOnce you know this, you are ready to create an [EventHubConsumerClient](https://docs.microsoft.com/javascript/api/@azure/event-hubs/eventhubconsumerclient). While the below example shows one way to create the client, see the\n[Authenticate the client](#authenticate-the-client) section to learn other ways to instantiate the client.\n\nThe `subscribe` method on the client has overloads which, combined with the constructor, can cater to several\nways to consume events:\n\n- [Consume events in a single process](#consume-events-in-a-single-process)\n- [Consume events with load balanced across multiple processes](#consume-events-with-load-balanced-across-multiple-processes)\n- [Consume events from a single partition](#consume-events-from-a-single-partition)\n\nThe `subscribe` method takes an optional parameter of type `SubscriptionOptions` which you can use to specify options like the maxBatchSize (number of events to wait for) and maxWaitTimeInSeconds (amount of time to wait for maxBatchSize events to arrive).\n\n#### Consume events in a single process\n\nBegin by creating an instance of the `EventHubConsumerClient`, and then call the `subscribe()` method on it to start\nconsuming events.\n\nThe `subscribe` method takes callbacks to process events as they are received from Azure Event Hubs.\nTo stop receiving events, you can call `close()` on the object returned by the `subscribe()` method.\n\n```javascript\nconst { EventHubConsumerClient, earliestEventPosition } = require(\"@azure/event-hubs\");\n\nasync function main() {\n  const client = new EventHubConsumerClient(\n    \"my-consumer-group\",\n    \"connectionString\",\n    \"eventHubName\"\n  );\n\n  // In this sample, we use the position of earliest available event to start from\n  // Other common options to configure would be `maxBatchSize` and `maxWaitTimeInSeconds`\n  const subscriptionOptions = {\n    startPosition: earliestEventPosition\n  };\n\n  const subscription = client.subscribe(\n    {\n      processEvents: async (events, context) => {\n        // event processing code goes here\n      },\n      processError: async (err, context) => {\n        // error reporting/handling code here\n      }\n    },\n    subscriptionOptions\n  );\n\n  // Wait for a few seconds to receive events before closing\n  setTimeout(async () => {\n    await subscription.close();\n    await client.close();\n    console.log(`Exiting sample`);\n  }, 3 * 1000);\n}\n\nmain();\n```\n\n#### Consume events with load balanced across multiple processes\n\nAzure Event Hubs is capable of dealing with millions of events per second.\nTo scale your processing application, you can run multiple instances of your application and have it balance the load among themselves.\n\nBegin by creating an instance of the `EventHubConsumerClient` using one of the\nconstructor overloads that take a `CheckpointStore`, and then call the `subscribe()`\nmethod to start consuming events. The checkpoint store will enable the subscribers\nwithin a consumer group to coordinate the processing between multiple instances\nof your application.\n\nIn this example, we will use the `BlobCheckpointStore` from the `@azure/eventhubs-checkpointstore-blob` package\nwhich implements the required read/writes to a durable store by using Azure Blob Storage.\n\nThe `subscribe` method takes callbacks to process events as they are received from Azure Event Hubs.\nTo stop receiving events, you can call `close()` on the object returned by the `subscribe()` method.\n\n```javascript\nconst { EventHubConsumerClient } = require(\"@azure/event-hubs\");\nconst { ContainerClient } = require(\"@azure/storage-blob\");\nconst { BlobCheckpointStore } = require(\"@azure/eventhubs-checkpointstore-blob\");\n\nconst storageAccountConnectionString = \"storage-account-connection-string\";\nconst containerName = \"container-name\";\nconst eventHubConnectionString = \"eventhub-connection-string\";\nconst consumerGroup = \"my-consumer-group\";\nconst eventHubName = \"eventHubName\";\n\nasync function main() {\n  const blobContainerClient = new ContainerClient(storageAccountConnectionString, containerName);\n\n  if (!(await blobContainerClient.exists())) {\n    await blobContainerClient.create();\n  }\n\n  const checkpointStore = new BlobCheckpointStore(blobContainerClient);\n  const consumerClient = new EventHubConsumerClient(\n    consumerGroup,\n    eventHubConnectionString,\n    eventHubName,\n    checkpointStore\n  );\n\n  const subscription = consumerClient.subscribe({\n    processEvents: async (events, context) => {\n      // event processing code goes here\n      if (events.length === 0) {\n        // If the wait time expires (configured via options in maxWaitTimeInSeconds) Event Hubs\n        // will pass you an empty array.\n        return;\n      }\n\n      // Checkpointing will allow your service to pick up from\n      // where it left off when restarting.\n      //\n      // You'll want to balance how often you checkpoint with the\n      // performance of your underlying checkpoint store.\n      await context.updateCheckpoint(events[events.length - 1]);\n    },\n    processError: async (err, context) => {\n      // handle any errors that occur during the course of\n      // this subscription\n      console.log(`Errors in subscription to partition ${context.partitionId}: ${err}`);\n    }\n  });\n\n  // Wait for a few seconds to receive events before closing\n  await new Promise((resolve) => setTimeout(resolve, 10 * 1000));\n\n  await subscription.close();\n  await consumerClient.close();\n  console.log(`Exiting sample`);\n}\n\nmain();\n```\n\nPlease see [Balance partition load across multiple instances of your application](https://docs.microsoft.com/azure/event-hubs/event-processor-balance-partition-load)\nto learn more.\n\n#### Consume events from a single partition\n\nBegin by creating an instance of the `EventHubConsumerClient`, and then call the `subscribe()` method on it to start\nconsuming events. Pass the id of the partition you want to target to the `subscribe()` method to consume only from that partition.\n\nIn the below example, we are using the first partition.\n\nThe `subscribe` method takes callbacks to process events as they are received from Azure Event Hubs.\nTo stop receiving events, you can call `close()` on the object returned by the `subscribe()` method.\n\n```javascript\nconst { EventHubConsumerClient, earliestEventPosition } = require(\"@azure/event-hubs\");\n\nasync function main() {\n  const client = new EventHubConsumerClient(\n    \"my-consumer-group\",\n    \"connectionString\",\n    \"eventHubName\"\n  );\n  const partitionIds = await client.getPartitionIds();\n\n  // In this sample, we use the position of earliest available event to start from\n  // Other common options to configure would be `maxBatchSize` and `maxWaitTimeInSeconds`\n  const subscriptionOptions = {\n    startPosition: earliestEventPosition\n  };\n\n  const subscription = client.subscribe(\n    partitionIds[0],\n    {\n      processEvents: async (events, context) => {\n        // event processing code goes here\n      },\n      processError: async (err, context) => {\n        // error reporting/handling code here\n      }\n    },\n    subscriptionOptions\n  );\n\n  // Wait for a few seconds to receive events before closing\n  setTimeout(async () => {\n    await subscription.close();\n    await client.close();\n    console.log(`Exiting sample`);\n  }, 3 * 1000);\n}\n\nmain();\n```\n\n### Use EventHubConsumerClient to work with IotHub\n\nYou can use `EventHubConsumerClient` to work with IotHub as well. This is useful for receiving telemetry data of IotHub from the linked EventHub.\nThe associated connection string will not have send claims,\nhence sending events is not possible.\n\n- Please notice that the connection string needs to be for an\n  [Event Hub-compatible endpoint](https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messages-read-builtin)\n  (e.g. \"Endpoint=sb://my-iothub-namespace-[uid].servicebus.windows.net/;SharedAccessKeyName=my-SA-name;SharedAccessKey=my-SA-key;EntityPath=my-iot-hub-name\")\n\n```javascript\nconst { EventHubConsumerClient } = require(\"@azure/event-hubs\");\n\nasync function main() {\n  const client = new EventHubConsumerClient(\n    \"my-consumer-group\",\n    \"Endpoint=sb://my-iothub-namespace-[uid].servicebus.windows.net/;SharedAccessKeyName=my-SA-name;SharedAccessKey=my-SA-key;EntityPath=my-iot-hub-name\"\n  );\n  await client.getEventHubProperties();\n  // retrieve partitionIds from client.getEventHubProperties() or client.getPartitionIds()\n  const partitionId = \"0\";\n  await client.getPartitionProperties(partitionId);\n\n  await client.close();\n}\n\nmain();\n```\n\n## Troubleshooting\n\n### AMQP Dependencies\n\nThe Event Hubs library depends on the [rhea-promise](https://github.com/amqp/rhea-promise) library for managing connections, sending and receiving events over the [AMQP](https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-complete-v1.0-os.pdf) protocol.\n\n### Logging\n\nYou can set the `AZURE_LOG_LEVEL` environment variable to enable logging to `stderr`:\n\n```bash\nexport AZURE_LOG_LEVEL=verbose\n```\n\nFor more detailed instructions on how to enable logs, you can look at the\n[@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\nYou can alternatively set the `DEBUG` environment variable to get logs when using this library.\nThis can be useful if you also want to emit logs from the dependencies `rhea-promise` and `rhea` as well.\n\n**Note:** AZURE_LOG_LEVEL, if set, takes precedence over DEBUG.\nDo not specify any `azure` libraries via DEBUG when also specifying\nAZURE_LOG_LEVEL or calling setLogLevel.\n\n- Getting only info level debug logs from the Event Hubs SDK.\n\n```bash\nexport DEBUG=azure:*:info\n```\n\n- Getting debug logs from the Event Hubs SDK and the protocol level library.\n\n```bash\nexport DEBUG=azure*,rhea*\n```\n\n- If you are **not interested in viewing the raw event data** (which consumes a large amount of console/disk space) then you can set the `DEBUG` environment variable as follows:\n\n```bash\nexport DEBUG=azure*,rhea*,-rhea:raw,-rhea:message\n```\n\n- If you are interested only in **errors** and SDK **warnings**, then you can set the `DEBUG` environment variable as follows:\n\n```bash\nexport DEBUG=azure:*:(error|warning),rhea-promise:error,rhea:events,rhea:frames,rhea:io,rhea:flow\n```\n\n## Next steps\n\n### More sample code\n\nPlease take a look at the [samples](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/eventhub/event-hubs/samples)\ndirectory for detailed examples of how to use this library to send and receive events to/from\n[Event Hubs](https://docs.microsoft.com/azure/event-hubs/event-hubs-about).\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Feventhub%2Fevent-hubs%2FREADME.png)\n",
        "repo_name": "eventhub/event-hubs",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/eventhub/event-hubs",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Event Hubs Checkpoint Store client library for JavaScript\n\nAn Azure Blob storage based solution to store checkpoints and to aid in load balancing when using `EventHubConsumerClient` from the [@azure/event-hubs](https://www.npmjs.com/package/@azure/event-hubs) library\n\nKey links:\n- [Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/eventhub/eventhubs-checkpointstore-blob)\n- [Package (npm)](https://www.npmjs.com/package/@azure/eventhubs-checkpointstore-blob)\n- [API Reference Documentation](https://docs.microsoft.com/javascript/api/@azure/eventhubs-checkpointstore-blob/)\n- [Samples](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/eventhub/eventhubs-checkpointstore-blob/samples)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge, and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription](https://azure.microsoft.com/free/)\n- An [Event Hubs Namespace](https://docs.microsoft.com/azure/event-hubs/)\n- A [Storage account](https://docs.microsoft.com/azure/storage/blobs/storage-blobs-introduction)\n\n### Install the package\n\nInstall the Azure Event Hubs Checkpoint Store Blob library using npm\n\n`npm install @azure/eventhubs-checkpointstore-blob`\n\n### Configure Typescript\n\nTypeScript users need to have Node type definitions installed:\n\n```bash\nnpm install @types/node\n```\n\nYou also need to enable `compilerOptions.allowSyntheticDefaultImports` in your tsconfig.json. Note that if you have enabled `compilerOptions.esModuleInterop`, `allowSyntheticDefaultImports` is enabled by default. See [TypeScript's compiler options handbook](https://www.typescriptlang.org/docs/handbook/compiler-options.html) for more information.\n\n## Key concepts\n\n- **Scale:** Create multiple consumers, with each consumer taking ownership of reading from a few Event Hubs partitions.\n\n- **Load balance:** Applications that support load balancing consist of one or more instances of\n  `EventHubConsumerClient` which have been configured to consume events from the same Event Hub and consumer group\n  and the same `CheckpointStore`.\n  They balance the workload across different instances by distributing the partitions to be processed among themselves.\n\n- **Checkpointing:** It is a process by which readers mark or commit their position within a partition event sequence. Checkpointing is the responsibility of the consumer and\n  occurs on a per-partition basis within a consumer group. This responsibility means that for each consumer group, each partition reader must keep track of its current position\n  in the event stream, and can inform the service when it considers the data stream complete.\n\n  If a reader disconnects from a partition, when it reconnects it begins reading at the checkpoint that was previously submitted by the last reader of that partition in that consumer group.\n  When the reader connects, it passes the offset to the event hub to specify the location at which to start reading. In this way, you can use checkpointing to both mark events as \"complete\" by downstream applications,\n  and to provide resiliency if a failover between readers running on different machines occurs. It is possible to return to older data by specifying a lower offset from this checkpointing process.\n  Through this mechanism, checkpointing enables both failover resiliency and event stream replay.\n\n  A [BlobCheckpointStore](https://docs.microsoft.com/javascript/api/@azure/eventhubs-checkpointstore-blob/blobcheckpointstore)\n  is a class that implements key methods required by the EventHubConsumerClient to balance load and update checkpoints.\n\n## Examples\n\n- [Create a CheckpointStore using Azure Blob Storage](#create-a-checkpointstore-using-azure-blob-storage)\n- [Checkpoint events using Azure Blob storage](#checkpoint-events-using-azure-blob-storage)\n\n### Create a `CheckpointStore` using Azure Blob Storage\n\nUse the below code snippet to create a `CheckpointStore`. You will need to provide the connection string to your storage account.\n\n```javascript\nconst { ContainerClient } = require(\"@azure/storage-blob\");\nconst { BlobCheckpointStore } = require(\"@azure/eventhubs-checkpointstore-blob\");\n\nconst containerClient = new ContainerClient(\"storage-connection-string\", \"container-name\");\n\nif (!containerClient.exists()) {\n  await containerClient.create(); // This can be skipped if the container already exists\n}\n\nconst checkpointStore =  new BlobCheckpointStore(containerClient);\n```\n\n### Checkpoint events using Azure Blob storage\n\nTo checkpoint events received using Azure Blob Storage, you will need to pass an object\nthat is compatible with the [SubscriptionEventHandlers](https://docs.microsoft.com/javascript/api/@azure/event-hubs/subscriptioneventhandlers)\ninterface along with code to call the `updateCheckpoint()` method.\n\nIn this example, `SubscriptionHandlers` implements [SubscriptionEventHandlers](https://docs.microsoft.com/javascript/api/@azure/event-hubs/subscriptioneventhandlers) and also handles checkpointing.\n\n```javascript\nconst { EventHubConsumerClient } = require(\"@azure/event-hubs\");\nconst { ContainerClient } = require(\"@azure/storage-blob\");\nconst { BlobCheckpointStore } = require(\"@azure/eventhubs-checkpointstore-blob\");\n\nconst storageAccountConnectionString = \"storage-account-connection-string\";\nconst containerName = \"container-name\";\nconst eventHubConnectionString = \"eventhub-connection-string\";\nconst consumerGroup = \"my-consumer-group\";\nconst eventHubName = \"eventHubName\";\n\nasync function main() {\n  const blobContainerClient = new ContainerClient(storageAccountConnectionString, containerName);\n\n  if (!(await blobContainerClient.exists())) {\n    await blobContainerClient.create();\n  }\n\n  const checkpointStore = new BlobCheckpointStore(blobContainerClient);\n  const consumerClient = new EventHubConsumerClient(\n    consumerGroup,\n    eventHubConnectionString,\n    eventHubName,\n    checkpointStore\n  );\n\n  const subscription = consumerClient.subscribe({\n    processEvents: async (events, context) => {\n      // event processing code goes here\n      if (events.length === 0) {\n        // If the wait time expires (configured via options in maxWaitTimeInSeconds) Event Hubs\n        // will pass you an empty array.\n        return;\n      }\n\n      // Checkpointing will allow your service to pick up from\n      // where it left off when restarting.\n      //\n      // You'll want to balance how often you checkpoint with the\n      // performance of your underlying checkpoint store.\n      await context.updateCheckpoint(events[events.length - 1]);\n    },\n    processError: async (err, context) => {\n      // handle any errors that occur during the course of\n      // this subscription\n      console.log(`Errors in subscription to partition ${context.partitionId}: ${err}`);\n    }\n  });\n\n  // Wait for a few seconds to receive events before closing\n  await new Promise((resolve) => setTimeout(resolve, 10 * 1000));\n\n  await subscription.close();\n  await consumerClient.close();\n  console.log(`Exiting sample`);\n}\n\nmain();\n```\n\n## Troubleshooting\n\n### Logging\n\nYou can set the `AZURE_LOG_LEVEL` environment variable to one of the following values to enable logging to `stderr`:\n\n- verbose\n- info\n- warning\n- error\n\nYou can also set the log level programatically by importing the\n[@azure/logger](https://www.npmjs.com/package/@azure/logger) package and calling the\n`setLogLevel` function with one of the log level values.\n\nWhen setting a log level either programatically or via the `AZURE_LOG_LEVEL` environment variable,\nany logs that are written using a log level equal to or less than the one you choose will be emitted.\nFor example, when you set the log level to `info`, the logs that are written for levels\n`warning` and `error` are also emitted.\nThis SDK follows the Azure SDK for TypeScript [guidelines](https://azure.github.io/azure-sdk/typescript_implementation.html#general-logging)\nwhen determining which level to log to.\n\nYou can alternatively set the `DEBUG` environment variable to get logs when using this library.\nThis can be useful if you also want to emit logs from the dependencies `rhea-promise` and `rhea` as well.\n\n**Note:** AZURE_LOG_LEVEL, if set, takes precedence over DEBUG.\nDo not specify any `azure` libraries via DEBUG when also specifying\nAZURE_LOG_LEVEL or calling setLogLevel.\n\nYou can set the following environment variable to get the debug logs when using this library.\n\n- Getting only info level debug logs from the Eventhubs Checkpointstore Blob.\n\n```bash\nexport DEBUG=azure:eventhubs-checkpointstore-blob:info\n```\n\n### Logging to a file\n\n- Enable logging as shown above and then run your test script as follows:\n\n  - Logging statements from your test script go to `out.log` and logging statements from the sdk go to `debug.log`.\n    ```bash\n    node your-test-script.js > out.log 2>debug.log\n    ```\n  - Logging statements from your test script and the sdk go to the same file `out.log` by redirecting stderr to stdout (&1), and then redirect stdout to a file:\n    ```bash\n    node your-test-script.js >out.log 2>&1\n    ```\n  - Logging statements from your test script and the sdk go to the same file `out.log`.\n\n    ```bash\n    node your-test-script.js &> out.log\n    ```\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/eventhub/eventhubs-checkpointstore-blob/samples)\ndirectory for detailed example.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Feventhub%2Feventhubs-checkpointstore-blob%2FREADME.png)\n",
        "repo_name": "eventhub/eventhubs-checkpointstore-blob",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/eventhub/eventhubs-checkpointstore-blob",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Event Hubs Checkpoint Store client library for JavaScript\n\nAn Azure Table storage based solution to store checkpoints and to aid in load balancing when using `EventHubConsumerClient` from the [@azure/event-hubs](https://www.npmjs.com/package/@azure/event-hubs) library\n\nKey Links:\n- [Source code](#)\n- [Package (npm)](https://www.npmjs.com/package/@azure/eventhubs-checkpointstore-table)\n- [API Reference Documentation](#)\n- [Samples](#)\n\n## Getting started\n\n### Currently supported environments\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge, and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n\n### Prerequisites\n- An [Azure subscription](https://azure.microsoft.com/free/)\n- An [Event Hubs Namespace](https://docs.microsoft.com/azure/event-hubs/) to use this package\n- A [Storage account](https://docs.microsoft.com/azure/storage/tables/table-storage-overview)\n\n### Install the package\n\nInstall the Azure Event Hubs Checkpoint Store Table library using npm.\n\n`npm install @azure/eventhubs-checkpointstore-table`\n\n### Configure Typescript\n\nTypeScript users need to have Node type definitions installed:\n\n```bash\nnpm install @types/node\n```\n\nYou also need to enable `compilerOptions.allowSyntheticDefaultImports` in your tsconfig.json. Note that if you have enabled `compilerOptions.esModuleInterop`, `allowSyntheticDefaultImports` is enabled by default. See [TypeScript's compiler options handbook](https://www.typescriptlang.org/docs/handbook/compiler-options.html) for more information.\n\n## Key concepts\n\n- **Scale:** Create multiple consumers, with each consumer taking ownership of reading from a few Event Hubs partitions.\n\n- **Load balance:** Applications that support load balancing consist of one or more instances of\n  `EventHubConsumerClient` which have been configured to consume events from the same Event Hub and consumer group\n  and the same `CheckpointStore`.\n  They balance the workload across different instances by distributing the partitions to be processed among themselves.\n\n- **Checkpointing:** It is a process by which readers mark or commit their position within a partition event sequence. Checkpointing is the responsibility of the consumer and\n  occurs on a per-partition basis within a consumer group. This responsibility means that for each consumer group, each partition reader must keep track of its current position\n  in the event stream, and can inform the service when it considers the data stream complete.\n\n  If a reader disconnects from a partition, when it reconnects it begins reading at the checkpoint that was previously submitted by the last reader of that partition in that consumer group.\n  When the reader connects, it passes the offset to the event hub to specify the location at which to start reading. In this way, you can use checkpointing to both mark events as \"complete\" by downstream applications,\n  and to provide resiliency if a failover between readers running on different machines occurs. It is possible to return to older data by specifying a lower offset from this checkpointing process.\n  Through this mechanism, checkpointing enables both failover resiliency and event stream replay.\n\n\n\n  A [TableCheckpointStore](#)\n  is a class that implements key methods required by the EventHubConsumerClient to balance load and update checkpoints.\n\n\n## Examples\n\n- [Create a CheckpointStore using Azure Table Storage](#create-a-checkpointstore-using-azure-table-storage)\n- [Checkpoint events using Azure Table storage](#checkpoint-events-using-azure-table-storage)\n\n### Create a `CheckpointStore` using Azure Table Storage\n\nUse the below code snippet to create a `CheckpointStore`. You will need to provide the connection string to your storage account.\n\n```javascript\nconst { TableClient } = require(\"@azure/data-tables\");\nconst { TableCheckpointStore } = require(\"@azure/eventhubs-checkpointstore-table\");\n\nconst tableClient = new TableClient(\"storage-connection-string\", \"table-name\");\n\nif (!tableClient.exists()) {\n  await tableClient.create(); // This can be skipped if the table already exists\n}\n\nconst checkpointStore =  new TableCheckpointStore(tableClient);\n```\n\n### Checkpoint events using Azure Table storage\n\nTo checkpoint events received using Azure Table Storage, you will need to pass an object\nthat is compatible with the [SubscriptionEventHandlers](https://docs.microsoft.com/javascript/api/@azure/event-hubs/subscriptioneventhandlers)\ninterface along with code to call the `updateCheckpoint()` method.\n\nIn this example, `SubscriptionHandlers` implements [SubscriptionEventHandlers](https://docs.microsoft.com/javascript/api/@azure/event-hubs/subscriptioneventhandlers) and also handles checkpointing.\n\n```javascript\nconst { EventHubConsumerClient } = require(\"@azure/event-hubs\");\nconst { TableClient } = require(\"@azure/data-tables\");\nconst { TableCheckpointStore } = require(\"@azure/eventhubs-checkpointstore-table\");\n\nconst storageAccountConnectionString = \"storage-account-connection-string\";\nconst tableName = \"table-name\";\nconst eventHubConnectionString = \"eventhub-connection-string\";\nconst consumerGroup = \"my-consumer-group\";\nconst eventHubName = \"eventHubName\";\n\nasync function main() {\n  const tableClient = new TableClient(storageAccountConnectionString, tableName);\n\n  if (!(await tableClient.exists())) {\n    await tableClient.create();\n  }\n\n  const checkpointStore = new TableCheckpointStore(tableClient);\n  const consumerClient = new EventHubConsumerClient(\n    consumerGroup,\n    eventHubConnectionString,\n    eventHubName,\n    checkpointStore\n  );\n\n  const subscription = consumerClient.subscribe({\n    processEvents: async (events, context) => {\n      // event processing code goes here\n      if (events.length === 0) {\n        // If the wait time expires (configured via options in maxWaitTimeInSeconds) Event Hubs\n        // will pass you an empty array.\n        return;\n      }\n\n      // Checkpointing will allow your service to pick up from\n      // where it left off when restarting.\n      //\n      // You'll want to balance how often you checkpoint with the\n      // performance of your underlying checkpoint store.\n      await context.updateCheckpoint(events[events.length - 1]);\n    },\n    processError: async (err, context) => {\n      // handle any errors that occur during the course of\n      // this subscription\n      console.log(`Errors in subscription to partition ${context.partitionId}: ${err}`);\n    }\n  });\n\n  // Wait for a few seconds to receive events before closing\n  await new Promise((resolve) => setTimeout(resolve, 10 * 1000));\n\n  await subscription.close();\n  await consumerClient.close();\n  console.log(`Exiting sample`);\n}\n\nmain();\n```\n\n## Troubleshooting\n\n### Logging\n\nYou can set the `AZURE_LOG_LEVEL` environment variable to one of the following values to enable logging to `stderr`:\n\n- verbose\n- info\n- warning\n- error\n\nYou can also set the log level programatically by importing the\n[@azure/logger](https://www.npmjs.com/package/@azure/logger) package and calling the\n`setLogLevel` function with one of the log level values.\n\nWhen setting a log level either programatically or via the `AZURE_LOG_LEVEL` environment variable,\nany logs that are written using a log level equal to or less than the one you choose will be emitted.\nFor example, when you set the log level to `info`, the logs that are written for levels\n`warning` and `error` are also emitted.\nThis SDK follows the Azure SDK for TypeScript [guidelines](https://azure.github.io/azure-sdk/typescript_implementation.html#general-logging)\nwhen determining which level to log to.\n\nYou can alternatively set the `DEBUG` environment variable to get logs when using this library.\nThis can be useful if you also want to emit logs from the dependencies `rhea-promise` and `rhea` as well.\n\n**Note:** AZURE_LOG_LEVEL, if set, takes precedence over DEBUG.\nDo not specify any `azure` libraries via DEBUG when also specifying\nAZURE_LOG_LEVEL or calling setLogLevel.\n\nYou can set the following environment variable to get the debug logs when using this library.\n\n- Getting only info level debug logs from the Eventhubs Checkpointstore Table.\n\n```bash\nexport DEBUG=azure:eventhubs-checkpointstore-table:info\n```\n\n### Logging to a file\n\n- Enable logging as shown above and then run your test script as follows:\n\n  - Logging statements from your test script go to `out.log` and logging statements from the sdk go to `debug.log`.\n    ```bash\n    node your-test-script.js > out.log 2>debug.log\n    ```\n  - Logging statements from your test script and the sdk go to the same file `out.log` by redirecting stderr to stdout (&1), and then redirect stdout to a file:\n    ```bash\n    node your-test-script.js >out.log 2>&1\n    ```\n  - Logging statements from your test script and the sdk go to the same file `out.log`.\n\n    ```bash\n    node your-test-script.js &> out.log\n    ```\n\n## Next steps\n\n\n\nPlease take a look at the [samples](#)\ndirectory for detailed example.\n\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md)to learn more about how to build and test the code.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Feventhub%2Feventhubs-checkpointstore-table%2FREADME.png)\n",
        "repo_name": "eventhub/eventhubs-checkpointstore-table",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/eventhub/eventhubs-checkpointstore-table",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "## Mock Event Hubs service\n\nThis package exposes a mock Event Hubs service for use in testing.\n\nCurrently the mock service represents a single Event Hub within a namespace.\n\n### Goals\n\nThis project was spun up for the following reasons:\n\n1. Avoid hitting the live service for tests.\n2. Deterministically trigger 'bad' service behavior.\n3. Simplify tests that rely on state. (populate events, change consumer groups/partition ids)\n4. Extend to support record & playback.\n\nCurrently, the project only fulfills the 1st goal.\nIt is possible to start this service locally either in a separate process or in the same process as\nthe event-hubs tests and run the live tests against the local service instead.\n\n### How to use the service in Event Hubs live tests\n\nFirst, the `mock-hub` needs to be configured with a cert to support TLS.\n\nNext, the `event-hubs` unit-test scripts can be updated to start the mock event hubs service\nand run the live tests against the service using the `NODE_EXTRA_CA_CERTS` environment variable pointing to the CA that mock-hub's cert was signed with.\n\n### Next steps\n\nHere's a list of some features that would be helpful for the `event-hubs` live tests:\n\n- Support multiple Event Hubs.\n  This would allow us to create a new Event Hub for each test and let us run all our tests in parallel.\n\n- Expose listeners on mock service.\n  This could be useful so we don't need to perform as many steps as we do today for tests.\n  For instance, instead of sending events then creating a consumer to make sure those events were sent,\n  we could listen on the mock service so it can tell us if the messages were received.\n\n- Expose APIs to trigger errors.\n  For example, it would be useful to be able to tell the service to do something like 'send 5 messages then throw an error'.\n\n### Additional details\n\nSome details on what features the mock service supports can be found [here](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/eventhub/mock-hub/design/features.md).\n\nSome details on the overal architecture of this project can be found [here](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/eventhub/mock-hub/design/architecture.md).\n\nTo see a quick example of how to start the mock service, look at [here](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/eventhub/mock-hub/samples/typescript/readme.md).\n",
        "repo_name": "eventhub/mock-hub",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/eventhub/mock-hub",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure CustomLocationsManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure CustomLocationsManagement client.\n\nThe customLocations Rest API spec.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/extendedlocation/arm-extendedlocation) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-extendedlocation) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-extendedlocation?view=azure-node-preview) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-extendedlocation` package\n\nInstall the Azure CustomLocationsManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-extendedlocation\n```\n\n### Create and authenticate a `CustomLocationsManagementClient`\n\nTo create a client object to access the Azure CustomLocationsManagement API, you will need the `endpoint` of your Azure CustomLocationsManagement resource and a `credential`. The Azure CustomLocationsManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure CustomLocationsManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure CustomLocationsManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { CustomLocationsManagementClient } = require(\"@azure/arm-extendedlocation\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new CustomLocationsManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new CustomLocationsManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### CustomLocationsManagementClient\n\n`CustomLocationsManagementClient` is the primary interface for developers using the Azure CustomLocationsManagement client library. Explore the methods on this client object to understand the different features of the Azure CustomLocationsManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fextendedlocation%2Farm-extendedlocation%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "extendedlocation/arm-extendedlocation",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/extendedlocation/arm-extendedlocation",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Feature client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure Feature client.\n\nAzure Feature Exposure Control (AFEC) provides a mechanism for the resource providers to control feature exposure to users. Resource providers typically use this mechanism to provide public/private preview for new features prior to making them generally available. Users need to explicitly register for AFEC features to get access to such functionality.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/features/arm-features) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-features) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-features) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-features` package\n\nInstall the Azure Feature client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-features\n```\n\n### Create and authenticate a `FeatureClient`\n\nTo create a client object to access the Azure Feature API, you will need the `endpoint` of your Azure Feature resource and a `credential`. The Azure Feature client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure Feature resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure Feature** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { FeatureClient } = require(\"@azure/arm-features\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new FeatureClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new FeatureClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### FeatureClient\n\n`FeatureClient` is the primary interface for developers using the Azure Feature client library. Explore the methods on this client object to understand the different features of the Azure Feature service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Ffeatures%2Farm-features%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "features/arm-features",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/features/arm-features",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure FluidRelayManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure FluidRelayManagement client.\n\n\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/fluidrelay/arm-fluidrelay) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-fluidrelay) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-fluidrelay) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-fluidrelay` package\n\nInstall the Azure FluidRelayManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-fluidrelay\n```\n\n### Create and authenticate a `FluidRelayManagementClient`\n\nTo create a client object to access the Azure FluidRelayManagement API, you will need the `endpoint` of your Azure FluidRelayManagement resource and a `credential`. The Azure FluidRelayManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure FluidRelayManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure FluidRelayManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { FluidRelayManagementClient } = require(\"@azure/arm-fluidrelay\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new FluidRelayManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new FluidRelayManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### FluidRelayManagementClient\n\n`FluidRelayManagementClient` is the primary interface for developers using the Azure FluidRelayManagement client library. Explore the methods on this client object to understand the different features of the Azure FluidRelayManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Ffluidrelay%2Farm-fluidrelay%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "fluidrelay/arm-fluidrelay",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/fluidrelay/arm-fluidrelay",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Form Recognizer client library for JavaScript\n\nAzure Cognitive Services [Form Recognizer](https://azure.microsoft.com/services/cognitive-services/form-recognizer/) is a cloud service that uses machine learning to analyze text and structured data from your documents. It includes the following main features:\n\n- Layout - Extract text, table structures, and selection marks, along with their bounding region coordinates, from documents.\n- Document - Analyze entities, key-value pairs, tables, and selection marks from documents using the general prebuilt document model.\n- Read - Read information about textual elements, such as page words and lines in addition to text language information.\n- Prebuilt - Analyze data from certain types of common documents (such as receipts, invoices, business cards, or identity documents) using prebuilt models.\n- Custom - Build custom models to extract text, field values, selection marks, and table data from documents. Custom models are built with your own data, so they're tailored to your documents.\n- Classifiers - Build custom classifiers to categorize documents into predefined classes.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/formrecognizer/ai-form-recognizer/) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/ai-form-recognizer) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/ai-form-recognizer) |\n[Product documentation](https://docs.microsoft.com/azure/cognitive-services/form-recognizer/) |\n[Samples](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/formrecognizer/ai-form-recognizer/samples)\n\n#### **_Breaking change advisory_ \u26a0\ufe0f**\n\nIn version 4.0.0, this package introduces a full redesign of the Azure Form Recognizer client library. To leverage features of the newest Form Recognizer service API (version \"2022-08-31\" and newer), the new SDK is required, and application code must be changed to use the new clients. Please see the [Migration Guide](https://github.com/azure/azure-sdk-for-js/blob/main/sdk/formrecognizer/ai-form-recognizer/MIGRATION-v3_v4.md) for detailed instructions on how to update application code from version 3.x of the Form Recognizer SDK to the new version (4.x). Additionally, the [CHANGELOG](https://github.com/azure/azure-sdk-for-js/blob/main/sdk/formrecognizer/ai-form-recognizer/CHANGELOG.md) contains an outline of the changes since version 3.x. This package targets Azure Form Recognizer service API version `2022-08-31` and newer. To continue to use Form Recognizer API version 2.1, please use major version 3 of the client package (`@azure/ai-form-recognizer@^3.2.0`).\n\n### Install the `@azure/ai-form-recognizer` package\n\nInstall the Azure Form Recognizer client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/ai-form-recognizer\n```\n\n## Getting started\n\n```javascript\nconst { DocumentAnalysisClient } = require(\"@azure/ai-form-recognizer\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n\nconst fs = require(\"fs\");\n\nconst credential = new DefaultAzureCredential();\nconst client = new DocumentAnalysisClient(\n  \"https://<resource name>.cognitiveservices.azure.com\",\n  credential\n);\n\n// Form Recognizer supports many different types of files.\nconst file = fs.createReadStream(\"path/to/file.jpg\");\nconst poller = await client.beginAnalyzeDocument(\"<model ID>\", file);\n\nconst { pages, tables, styles, keyValuePairs, entities, documents } = await poller.pollUntilDone();\n```\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge, and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription](https://azure.microsoft.com/free/)\n- A [Cognitive Services or Form Recognizer resource][fr_or_cs_resource]. If you need to create the resource, you can use the [Azure Portal][azure_portal] or [Azure CLI][azure_cli].\n\n#### Create a Form Recognizer resource\n\nForm Recognizer supports both [multi-service and single-service access][multi_and_single_service]. Create a Cognitive Services resource if you plan to access multiple cognitive services under a single endpoint/key. For Form Recognizer access only, create a Form Recognizer resource.\n\nYou can create the resource using\n\n**Option 1:** [Azure Portal][azure_portal_create_fr_resource]\n\n**Option 2:** [Azure CLI][azure_cli_create_fr_resource].\n\nBelow is an example of how you can create a Form Recognizer resource using the CLI:\n\n```bash\n# Create a new resource group to hold the Form Recognizer resource -\n# if using an existing resource group, skip this step\naz group create --name my-resource-group --location westus2\n```\n\nIf you use the Azure CLI, replace `<your-resource-group-name>` and `<your-resource-name>` with your own unique names:\n\n```bash\naz cognitiveservices account create --kind FormRecognizer --resource-group <your-resource-group-name> --name <your-resource-name> --sku <your-sku-name> --location <your-location>\n```\n\n### Create and authenticate a client\n\nIn order to interact with the Form Recognizer service, you'll need to select either a `DocumentAnalysisClient` or a `DocumentModelAdministrationClient`, and create an instance of this type. In the following examples, we will use `DocumentAnalysisClient`. To create a client instance to access the Form Recognizer API, you will need the `endpoint` of your Form Recognizer resource and a `credential`. The Form Recognizer clients can use either an `AzureKeyCredential` with an API key of your resource or a `TokenCredential` that uses Azure Active Directory RBAC to authorize the client.\n\nYou can find the endpoint for your Form Recognizer resource either in the [Azure Portal][azure_portal] or by using the [Azure CLI][azure_cli] snippet below:\n\n```bash\naz cognitiveservices account show --name <your-resource-name> --resource-group <your-resource-group-name> --query \"properties.endpoint\"\n```\n\n#### Use an API key\n\nUse the [Azure Portal][azure_portal] to browse to your Form Recognizer resource and retrieve an API key, or use the [Azure CLI][azure_cli] snippet below:\n\n**Note:** Sometimes the API key is referred to as a \"subscription key\" or \"subscription API key.\"\n\n```bash\naz cognitiveservices account keys list --resource-group <your-resource-group-name> --name <your-resource-name>\n```\n\nOnce you have an API key and endpoint, you can use it as follows:\n\n```js\nconst { DocumentAnalysisClient, AzureKeyCredential } = require(\"@azure/ai-form-recognizer\");\n\nconst client = new DocumentAnalysisClient(\"<endpoint>\", new AzureKeyCredential(\"<API key>\"));\n```\n\n#### Use Azure Active Directory\n\nAPI key authorization is used in most of the examples, but you can also authenticate the client with Azure Active Directory using the [Azure Identity library][azure_identity]. To use the [DefaultAzureCredential][defaultazurecredential] provider shown below or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nTo authenticate using a service principal, you will also need to [register an AAD application][register_aad_app] and grant access to Form Recognizer by assigning the `\"Cognitive Services User\"` role to your service principal (note: other roles such as `\"Owner\"` will not grant the necessary permissions, only `\"Cognitive Services User\"` will suffice to run the examples and the sample code).\n\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\n```js\nconst { DocumentAnalysisClient } = require(\"@azure/ai-form-recognizer\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n\nconst client = new DocumentAnalysisClient(\"<endpoint>\", new DefaultAzureCredential());\n```\n\n## Key concepts\n\n### `DocumentAnalysisClient`\n\n`DocumentAnalysisClient` provides operations for analyzing input documents using custom and prebuilt models. It has three methods:\n\n- `beginAnalyzeDocument`, which extracts data from an input document file stream using a custom or prebuilt model given by its model ID. For information about the prebuilt models supported in all resources and their model IDs/outputs, please see [the service's documentation of the models][fr-models].\n- `beginAnalyzeDocumentFromUrl`, which performs the same function as `beginAnalyzeDocument`, but submits a publicly-accessible URL of a file instead of a file stream.\n\n### `DocumentModelAdministrationClient`\n\n`DocumentModelAdministrationClient` provides operations for managing (creating, reading, listing, and deleting) models in the Form Recognizer resource:\n\n- `beginBuildDocumentModel` starts an operation to create a new document model from your own training data set. The created model can extract fields according to a custom schema. The training data are expected to be located in an Azure Storage container and organized according to a particular convention. See the [service's documentation on creating a training data set][fr-build-training-set] for a more detailed explanation of applying labels to a training data set.\n- `beginComposeDocumentModel` starts an operation to compose multiple models into a single model. When used for custom form recognition, the new composed model will first perform a classification of the input documents to determine which of its submodels is most appropriate.\n- `beginCopyModelTo` starts an operation to copy a custom model from one Form Recognizer resource to another (or even to the same Form Recognizer resource). It requires a `CopyAuthorization` from the target Form Recognizer resource, which can be generated using the `getCopyAuthorization` method.\n- `getResourceDetails` retrieves information about the Form Recognizer resource's limits, such as the number of custom models and the maximum number of models the resource can support.\n- `getDocumentModel`, `listDocumentModels`, and `deleteDocumentModel` enable managing models in the resource.\n- `getOperation` and `listOperations` enable viewing the status of model creation operations, even those operations that are ongoing or that have failed. Operations are retained for 24 hours.\n\nPlease note that models can also be created using the Form Recognizer service's graphical user interface: [Form Recognizer Studio (Preview)][fr-studio].\n\nSample code snippets that illustrate the use of `DocumentModelAdministrationClient` to build a model can be found [below, in the \"Build a Model\" example section.](#build-a-model).\n\n### Long-running operations\n\nLong-running operations (LROs) are operations which consist of an initial request sent to the service to start an operation, followed by polling for a result at a certain interval to determine if the operation has completed and whether it failed or succeeded. Ultimately, the LRO will either fail with an error or produce a result.\n\nIn Azure Form Recognizer, operations that create models (including copying and composing models) as well as the analysis/data-extraction operations are LROs. The SDK clients provide asynchronous `begin<operation-name>` methods that return `Promise<PollerLike>` objects. The `PollerLike` object represents the operation, which runs asynchronously on the service's infrastructure, and a program can wait for the operation to complete by calling and awaiting the `pollUntilDone` method on the poller returned from the `begin<operation-name>` method. Sample code snippets are provided to illustrate using long-running operations in the next section.\n\n## Examples\n\nThe following section provides several JavaScript code snippets illustrating common patterns used in the Form Recognizer client libraries.\n\n- [Analyze a document with a model ID](#analyze-a-document-with-a-model-id)\n- [Use prebuilt document models](#use-prebuilt-document-models)\n- [Use the \"layout\" prebuilt](#use-the-layout-prebuilt)\n- [Use the \"document\" prebuilt](#use-the-document-prebuilt)\n- [Use the \"read\" prebuilt](#use-the-read-prebuilt)\n- [Build a model](#build-a-model)\n- [Manage models](#manage-models)\n\n### Analyze a document with a model ID\n\nThe `beginAnalyzeDocument` method can extract fields and table data from documents. Analysis may use either a custom model, trained with your own data, or a prebuilt model provided by the service (see _[Use Prebuilt Models](#use-prebuilt-models)_ below). A custom model is tailored to your own documents, so it should only be used with documents of the same structure as one of the document types in the model (there may be multiple, such as in a composed model).\n\n```javascript\nconst { DocumentAnalysisClient, AzureKeyCredential } = require(\"@azure/ai-form-recognizer\");\n\nconst fs = require(\"fs\");\n\nasync function main() {\n  const endpoint = \"<cognitive services endpoint>\";\n  const apiKey = \"<api key>\";\n  const modelId = \"<model id>\";\n  const path = \"<path to a document>\";\n\n  const readStream = fs.createReadStream(path);\n\n  const client = new DocumentAnalysisClient(endpoint, new AzureKeyCredential(apiKey));\n  const poller = await client.beginAnalyzeDocument(modelId, readStream, {\n    onProgress: ({ status }) => {\n      console.log(`status: ${status}`);\n    },\n  });\n\n  // There are more fields than just these three\n  const { documents, pages, tables } = await poller.pollUntilDone();\n\n  console.log(\"Documents:\");\n  for (const document of documents || []) {\n    console.log(`Type: ${document.docType}`);\n    console.log(\"Fields:\");\n    for (const [name, field] of Object.entries(document.fields)) {\n      console.log(\n        `Field ${name} has value '${field.value}' with a confidence score of ${field.confidence}`\n      );\n    }\n  }\n  console.log(\"Pages:\");\n  for (const page of pages || []) {\n    console.log(`Page number: ${page.pageNumber} (${page.width}x${page.height} ${page.unit})`);\n  }\n\n  console.log(\"Tables:\");\n  for (const table of tables || []) {\n    console.log(`- Table (${table.columnCount}x${table.rowCount})`);\n    for (const cell of table.cells) {\n      console.log(`  - cell (${cell.rowIndex},${cell.columnIndex}) \"${cell.content}\"`);\n    }\n  }\n}\n\nmain().catch((err) => {\n  console.error(\"The sample encountered an error:\", err);\n});\n```\n\n#### Analyze a document from a URL\n\nAs an alternative to providing a readable stream, a publicly-accessible URL can be provided instead using the `beginAnalyzeDocumentFromUrl` method. \"Publicly-accessible\" means that URL sources must be accessible from the service's infrastructure (in other words, a private intranet URL, or URLs that use header- or certificate-based secrets, will not work, as the Form Recognizer service must be able to access the URL). However, the URL itself could encode a secret, such as an Azure Storage blob URL that contains a SAS token in the query parameters.\n\n### Use prebuilt document models\n\nThe `beginAnalyzeDocument` method also supports extracting fields from certain types of common documents such as receipts, invoices, business cards, identity documents, and more using prebuilt models provided by the Form Recognizer service. The prebuilt models may be provided either as model ID strings (the same as custom document models&mdash;see the _[other prebuilt models](#other-prebuilt-models)_ section below) or using a `DocumentModel` object. When using a `DocumentModel`, the Form Recognizer SDK for JavaScript provides a much stronger TypeScript type for the resulting extracted documents based on the model's schema, and it will be converted to use JavaScript naming conventions.\n\n<a id=\"prebuiltmodels-removed\"></a>\n**Breaking Change Warning** \u26a0\ufe0f: In previous `4.0.0-beta` versions of the Azure Form Recognizer SDK for JavaScript, prebuilt `DocumentModel` objects were exported from the package through an object named `PrebuiltModels`. This object has been removed and replaced with the [`DocumentModel` samples][samples-prebuilt], which you may use as part of your own project. This change will enable us to continue to provide timely updates and ensure stability as the number of supported prebuilt models increases and as their capabilities are enhanced.\n\nExample `DocumentModel` objects for the current service API version (`2022-08-31`) can be found in [the `prebuilt` samples directory][samples-prebuilt]. In the following example, we'll use the `PrebuiltReceiptModel` from the [`prebuilt-receipt.ts`] file in that directory.\n\nSince the main benefit of `DocumentModel`-based analysis is stronger TypeScript type constraints, the following sample is written in TypeScript using ECMAScript module syntax:\n\n```typescript\nimport { DocumentAnalysisClient, AzureKeyCredential } from \"@azure/ai-form-recognizer\";\n\n// Copy the file from the above-linked sample directory so that it can be imported in this module\nimport { PrebuiltReceiptModel } from \"./prebuilt/prebuilt-receipt\";\n\nimport fs from \"fs\";\n\nasync function main() {\n  const endpoint = \"<cognitive services endpoint>\";\n  const apiKey = \"<api key>\";\n  const path = \"<path to your receipt document>\"; // pdf/jpeg/png/tiff formats\n\n  const readStream = fs.createReadStream(path);\n\n  const client = new DocumentAnalysisClient(endpoint, new AzureKeyCredential(apiKey));\n\n  // The PrebuiltReceiptModel `DocumentModel` instance encodes both the model ID and a stronger return type for the operation\n  const poller = await client.beginAnalyzeDocument(PrebuiltReceiptModel, readStream, {\n    onProgress: ({ status }) => {\n      console.log(`status: ${status}`);\n    },\n  });\n\n  const {\n    documents: [receiptDocument],\n  } = await poller.pollUntilDone();\n\n  // The fields of the document constitute the extracted receipt data.\n  const receipt = receiptDocument.fields;\n\n  if (receipt === undefined) {\n    throw new Error(\"Expected at least one receipt in analysis result.\");\n  }\n\n  console.log(`Receipt data (${receiptDocument.docType})`);\n  console.log(\"  Merchant Name:\", receipt.merchantName?.value);\n\n  // The items of the receipt are an example of a `DocumentArrayValue`\n  if (receipt.items !== undefined) {\n    console.log(\"Items:\");\n    for (const { properties: item } of receipt.items.values) {\n      console.log(\"- Description:\", item.description?.value);\n      console.log(\"  Total Price:\", item.totalPrice?.value);\n    }\n  }\n\n  console.log(\"  Total:\", receipt.total?.value);\n}\n\nmain().catch((err) => {\n  console.error(\"The sample encountered an error:\", err);\n});\n```\n\nAlternatively, as mentioned above, instead of using `PrebuiltReceiptModel`, which produces the stronger return type, the prebuilt receipt's model ID (\"prebuilt-receipt\") can be used, but the document fields will not be strongly typed in TypeScript, and the field names will generally be in \"PascalCase\" instead of \"camelCase\".\n\n#### **Other prebuilt models**\n\nYou are not limited to receipts! There are a few prebuilt models to choose from, with more on the way. Each prebuilt model has its own set of supported fields:\n\n- Receipts, using [`PrebuiltReceiptModel`][samples-prebuilt-receipt] (as above) or the prebuilt receipt model ID `\"prebuilt-receipt\"`.\n- Business cards, using [`PrebuiltBusinessCardModel`][samples-prebuilt-businesscard] or its model ID `\"prebuilt-businessCard\"`.\n- Invoices, using [`PrebuiltInvoiceModel`][samples-prebuilt-invoice] or its model ID `\"prebuilt-invoice\"`.\n- Identity Documents (such as driver licenses and passports), using [`PrebuiltIdDocumentModel`][samples-prebuilt-iddocument] or its model ID `\"prebuilt-idDocument\"`.\n- W2 Tax Forms (United States), using [`PrebuiltTaxUsW2Model`][samples-prebuilt-tax.us.w2] or its model ID `\"prebuilt-tax.us.w2\"`.\n- Health Insurance Cards (United States), using [`PrebuiltHealthInsuranceCardUsModel`][samples-prebuilt-healthinsurancecard.us] or its model ID `\"prebuilt-healthInsuranceCard.us\"`.\n\nEach of the above prebuilt models produces `documents` (extracted instances of the model's field schema). There are also three prebuilt models that do not have field schemas and therefore do not produce `documents`. They are:\n\n- The prebuilt Layout model (see _[Use the \"layout\" prebuilt](#use-the-layout-prebuilt)_ below), which extracts information about basic layout (OCR) elements such as pages and tables.\n- The prebuilt General Document model (see _[Use the \"document\" prebuilt](#use-the-document-prebuilt)_ below), which adds key-value pairs (directed associations between page elements, such as labeled elements) to the information produced by the layout model.\n- The prebuilt Read model (see _[Use the \"read\" prebuilt](#use-the-read-prebuilt)_ below), which extracts only textual elements, such as page words and lines, along with information about the language of the document.\n\nFor information about the fields of all of these models, see [the service's documentation of the available prebuilt models](https://aka.ms/azsdk/formrecognizer/models).\n\nThe fields of all prebuilt models may also be accessed programmatically using the `getDocumentModel` method (by their model IDs) of `DocumentModelAdministrationClient` and inspecting the `docTypes` field in the result.\n\n### Use the \"layout\" prebuilt\n\n<a id=\"beginextractlayout-removed\"></a>\n**Breaking Change Warning** \u26a0\ufe0f: In previous `4.0.0-beta` versions of the Azure Form Recognizer SDK for JavaScript, the prebuilt Layout model was provided by a custom method named `beginExtractLayout`. This method was removed and replaced with an example `DocumentModel` instance named [`PrebuiltLayoutModel`][samples-prebuilt-layout] for use with the same `beginAnalyzeDocument` method that is used to perform analysis with other prebuilt models. As previously, the model ID `\"prebuilt-layout\"` may still be used directly. This change will align the `prebuilt-layout` model with the other prebuilt models and enable us to continue to provide timely updates and ensure stability as the number of supported prebuilt models increases and as their capabilities are enhanced.\n\nThe `\"prebuilt-layout\"` model extracts only the basic elements of the document, such as pages, (which consist of text words/lines and selection marks), tables, and visual text styles along with their bounding regions and spans within the text content of the input documents. We provide a strongly-typed `DocumentModel` instance named [`PrebuiltLayoutModel`][samples-prebuilt-layout] that invokes this model, or as always its model ID `\"prebuilt-layout\"` may be used directly.\n\nSince the main benefit of `DocumentModel`-based analysis is stronger TypeScript type constraints, the following sample is written in TypeScript using ECMAScript module syntax:\n\n```typescript\nimport { DocumentAnalysisClient, AzureKeyCredential } from \"@azure/ai-form-recognizer\";\n\n// Copy the above-linked `DocumentModel` file so that it may be imported in this module.\nimport { PrebuiltLayoutModel } from \"./prebuilt/prebuilt-layout\";\n\nimport fs from \"fs\";\n\nasync function main() {\n  const endpoint = \"<cognitive services endpoint>\";\n  const apiKey = \"<api key>\";\n  const path = \"<path to a document>\"; // pdf/jpeg/png/tiff formats\n\n  const readStream = fs.createReadStream(path);\n\n  const client = new DocumentAnalysisClient(endpoint, new AzureKeyCredential(apiKey));\n  const poller = await client.beginAnalyzeDocument(PrebuiltLayoutModel, readStream);\n  const { pages, tables } = await poller.pollUntilDone();\n\n  for (const page of pages || []) {\n    console.log(`- Page ${page.pageNumber}: (${page.width}x${page.height} ${page.unit})`);\n  }\n\n  for (const table of tables || []) {\n    console.log(`- Table (${table.columnCount}x${table.rowCount})`);\n    for (const cell of table.cells) {\n      console.log(`  cell [${cell.rowIndex},${cell.columnIndex}] \"${cell.content}\"`);\n    }\n  }\n}\n\nmain().catch((err) => {\n  console.error(\"The sample encountered an error:\", err);\n});\n```\n\n### Use the \"document\" prebuilt\n\n<a id=\"beginextractdocument-removed\"></a>\n**Breaking Change Warning** \u26a0\ufe0f: In previous `4.0.0-beta` versions of the Azure Form Recognizer SDK for JavaScript, the prebuilt document model was provided by a custom method named `beginExtractGeneralDocument`. This method was removed and replaced with an example `DocumentModel` instance named [`PrebuiltDocumentModel`][samples-prebuilt-document] for use with the same `beginAnalyzeDocument` method that is used to perform analysis with other prebuilt models. As previously, the model ID `\"prebuilt-document\"` may still be used directly. This change will align the `prebuilt-document` model with the other prebuilt models and enable us to continue to provide timely updates and ensure stability as the number of supported prebuilt models increases and as their capabilities are enhanced.\n\nThe `\"prebuilt-document\"` model extracts information about key-value pairs (directed associations between page elements, such as labeled fields) in addition to the properties produced by the layout extraction method. This prebuilt (general) document model provides similar functionality to the custom models trained without label information in previous iterations of the Form Recognizer service, but it is now provided as a prebuilt model that works with a wide variety of documents. We provide a strongly-typed `DocumentModel` instance named [`PrebuiltDocumentModel`][samples-prebuilt-document] that invokes this model, or as always its model ID `\"prebuilt-document\"` may be used directly.\n\nSince the main benefit of `DocumentModel`-based analysis is stronger TypeScript type constraints, the following sample is written in TypeScript using ECMAScript module syntax:\n\n```typescript\nimport { DocumentAnalysisClient, AzureKeyCredential } from \"@azure/ai-form-recognizer\";\n\n// Copy the above-linked `DocumentModel` file so that it may be imported in this module.\nimport { PrebuiltDocumentModel } from \"./prebuilt/prebuilt-document\";\n\nimport fs from \"fs\";\n\nasync function main() {\n  const endpoint = \"<cognitive services endpoint>\";\n  const apiKey = \"<api key>\";\n  const path = \"<path to a document>\"; // pdf/jpeg/png/tiff formats\n\n  const readStream = fs.createReadStream(path);\n\n  const client = new DocumentAnalysisClient(endpoint, new AzureKeyCredential(apiKey));\n  const poller = await client.beginAnalyzeDocument(PrebuiltDocumentModel, readStream);\n\n  // `pages`, `tables` and `styles` are also available as in the \"layout\" example above, but for the sake of this\n  // example we won't show them here.\n  const { keyValuePairs } = await poller.pollUntilDone();\n\n  if (!keyValuePairs || keyValuePairs.length <= 0) {\n    console.log(\"No key-value pairs were extracted from the document.\");\n  } else {\n    console.log(\"Key-Value Pairs:\");\n    for (const { key, value, confidence } of keyValuePairs) {\n      console.log(\"- Key  :\", `\"${key.content}\"`);\n      console.log(\"  Value:\", `\"${value?.content ?? \"<undefined>\"}\" (${confidence})`);\n    }\n  }\n}\n\nmain().catch((err) => {\n  console.error(\"The sample encountered an error:\", err);\n});\n```\n\n### Use the \"read\" prebuilt\n\n<a id=\"beginextractdocument-removed\"></a>\n**Breaking Change Warning** \u26a0\ufe0f: In previous `4.0.0-beta` versions of the Azure Form Recognizer SDK for JavaScript, the prebuilt \"read\" model was provided by a custom method named `beginReadDocument`. This method was removed and replaced with an example `DocumentModel` instance named [`PrebuiltReadModel`][samples-prebuilt-read] for use with the same `beginAnalyzeDocument` method that is used to perform analysis with other prebuilt models. As previously, the model ID `\"prebuilt-read\"` may still be used directly. This change will align the `prebuilt-read` model with the other prebuilt models and enable us to continue to provide timely updates and ensure stability as the number of supported prebuilt models increases and as their capabilities are enhanced.\n\nThe `\"prebuilt-read\"` model extracts textual information in a document such as words and paragraphs and analyzes the language and writing style (e.g. handwritten vs. typeset) of that text. We provide a strongly-typed `DocumentModel` instance named [`PrebuiltReadModel`][samples-prebuilt-document] that invokes this model, or as always its model ID `\"prebuilt-read\"` may be used directly.\n\nSince the main benefit of `DocumentModel`-based analysis is stronger TypeScript type constraints, the following sample is written in TypeScript using ECMAScript module syntax:\n\n```typescript\nimport { DocumentAnalysisClient, AzureKeyCredential } from \"@azure/ai-form-recognizer\";\n\n// Copy the above-linked `DocumentModel` file so that it may be imported in this module.\nimport { PrebuiltReadModel } from \"./prebuilt/prebuilt-read\";\n\n// See the samples directory for a definition of this helper function.\nimport { getTextOfSpans } from \"./utils\";\n\nimport fs from \"fs\";\n\nasync function main() {\n  const endpoint = \"<cognitive services endpoint>\";\n  const apiKey = \"<api key>\";\n  const path = \"<path to a document>\"; // pdf/jpeg/png/tiff formats\n\n  const readStream = fs.createReadStream(path);\n\n  const client = new DocumentAnalysisClient(endpoint, new AzureKeyCredential(apiKey));\n  const poller = await client.beginAnalyzeDocument(PrebuiltReadModel, readStream);\n\n  // The \"prebuilt-read\" model (`beginReadDocument` method) only extracts information about the textual content of the\n  // document, such as page text elements, text styles, and information about the language of the text.\n  const { content, pages, languages } = await poller.pollUntilDone();\n\n  if (!pages || pages.length <= 0) {\n    console.log(\"No pages were extracted from the document.\");\n  } else {\n    console.log(\"Pages:\");\n    for (const page of pages) {\n      console.log(\"- Page\", page.pageNumber, `(unit: ${page.unit})`);\n      console.log(`  ${page.width}x${page.height}, angle: ${page.angle}`);\n      console.log(\n        `  ${page.lines && page.lines.length} lines, ${page.words && page.words.length} words`\n      );\n\n      if (page.lines && page.lines.length > 0) {\n        console.log(\"  Lines:\");\n\n        for (const line of page.lines) {\n          console.log(`  - \"${line.content}\"`);\n        }\n      }\n    }\n  }\n\n  if (!languages || languages.length <= 0) {\n    console.log(\"No language spans were extracted from the document.\");\n  } else {\n    console.log(\"Languages:\");\n    for (const languageEntry of languages) {\n      console.log(\n        `- Found language: ${languageEntry.locale} (confidence: ${languageEntry.confidence})`\n      );\n\n      for (const text of getTextOfSpans(content, languageEntry.spans)) {\n        const escapedText = text.replace(/\\r?\\n/g, \"\\\\n\").replace(/\"/g, '\\\\\"');\n        console.log(`  - \"${escapedText}\"`);\n      }\n    }\n  }\n}\n\nmain().catch((error) => {\n  console.error(\"An error occurred:\", error);\n  process.exit(1);\n});\n```\n\n### Classify a document\n\nThe Form Recognizer service supports custom document classifiers that can classify documents into a set of predefined categories based on a training data set. Documents can be classified with a custom classifier using the `beginClassifyDocument` method of `DocumentAnalysisClient`. Like `beginAnalyzeDocument` above, this method accepts a file or stream containing the document to be classified, and it has a `beginClassifyDocumentFromUrl` counterpart that accepts a publicly-accessible URL to a document instead.\n\nThe following sample shows how to classify a document using a custom classifier:\n\n```javascript\nconst { AzureKeyCredential, DocumentAnalysisClient } = require(\"@azure/ai-form-recognizer\");\n\nasync function main() {\n  const endpoint = \"<endpoint>\";\n  const credential = new AzureKeyCredential(\"<api key>\");\n\n  const documentUrl =\n    \"https://raw.githubusercontent.com/Azure/azure-sdk-for-js/main/sdk/formrecognizer/ai-form-recognizer/assets/invoice/Invoice_1.pdf\";\n\n  const client = new DocumentAnalysisClient(endpoint, credential);\n\n  const poller = await client.beginClassifyDocumentFromUrl(\"<classifier id>\", documentUrl);\n\n  const result = await poller.pollUntilDone();\n\n  if (result.documents === undefined || result.documents.length === 0) {\n    throw new Error(\"Failed to extract any documents.\");\n  }\n\n  for (const document of result.documents) {\n    console.log(\n      `Extracted a document with type '${document.docType}' on page ${document.boundingRegions?.[0].pageNumber} (confidence: ${document.confidence})`\n    );\n  }\n}\n\nmain().catch((error) => {\n  console.error(\"An error occurred:\", error);\n  process.exit(1);\n});\n```\n\nFor information on training a custom classifier, see the [section on classifier training at the end of the next section](#build-classifier).\n\n### Build a model\n\nThe SDK also supports creating models using the `DocumentModelAdministrationClient` class. Building a model from labeled training data creates a new model that is trained on your own documents, and the resulting model will be able to recognize values from the structures of those documents. The model building operation accepts a SAS-encoded URL to an Azure Storage Blob container that holds the training documents. The Form Recognizer service's infrastructure will read the files in the container and create a model based on their contents. For more details on how to create and structure a training data container, see the [Form Recognizer service's documentation for building a model][fr-build-model].\n\nWhile we provide these methods for programmatic model creation, the Form Recognizer service team has created an interactive web application, [Form Recognizer Studio (Preview)][fr-studio], that enables creating and managing models on the web.\n\nFor example, the following program builds a custom document model using a SAS-encoded URL to a pre-existing Azure Storage container:\n\n```javascript\nconst {\n  DocumentModelAdministrationClient,\n  AzureKeyCredential,\n} = require(\"@azure/ai-form-recognizer\");\n\nasync function main() {\n  const endpoint = \"<cognitive services endpoint>\";\n  const apiKey = \"<api key>\";\n  const containerSasUrl = \"<SAS url to the blob container storing training documents>\";\n\n  const client = new DocumentModelAdministrationClient(endpoint, new AzureKeyCredential(apiKey));\n\n  // You must provide the model ID. It can be any text that does not start with \"prebuilt-\".\n  // For example, you could provide a randomly generated GUID using the \"uuid\" package.\n  // The second parameter is the SAS-encoded URL to an Azure Storage container with the training documents.\n  // The third parameter is the build mode: one of \"template\" (the only mode prior to 4.0.0-beta.3) or \"neural\".\n  // See https://aka.ms/azsdk/formrecognizer/buildmode for more information about build modes.\n  const poller = await client.beginBuildDocumentModel(\"<model ID>\", containerSasUrl, \"template\", {\n    // The model description is optional and can be any text.\n    description: \"This is my new model!\",\n    onProgress: ({ status }) => {\n      console.log(`operation status: ${status}`);\n    },\n  });\n  const model = await poller.pollUntilDone();\n\n  console.log(\"Model ID:\", model.modelId);\n  console.log(\"Description:\", model.description);\n  console.log(\"Created:\", model.createdOn);\n\n  // A model may contain several document types, which describe the possible object structures of fields extracted using\n  // this model\n\n  console.log(\"Document Types:\");\n  for (const [docType, { description, fieldSchema: schema }] of Object.entries(\n    model.docTypes ?? {}\n  )) {\n    console.log(`- Name: \"${docType}\"`);\n    console.log(`  Description: \"${description}\"`);\n\n    // For simplicity, this example will only show top-level field names\n    console.log(\"  Fields:\");\n\n    for (const [fieldName, fieldSchema] of Object.entries(schema)) {\n      console.log(`  - \"${fieldName}\" (${fieldSchema.type})`);\n      console.log(`    ${fieldSchema.description ?? \"<no description>\"}`);\n    }\n  }\n}\n\nmain().catch((err) => {\n  console.error(\"The sample encountered an error:\", err);\n});\n```\n\n<a id=\"build-classifier\"></a>\nCustom classifiers are built in a similar way using the `beginBuildDocumentClassifier` method rather than `beginBuildDocumentModel`. Please see the [build classifier sample][sample-build-classifier] for more information about building a custom classifier, as the input training data are provided in a slightly different format. For information about building a training data set for a custom classifier, see [the Form Recognizer service documentation](https://aka.ms/azsdk/formrecognizer/buildclassifiermodel).\n\n### Manage models\n\n`DocumentModelAdministrationClient` also provides several methods for accessing and listing models. The following example shows how to iterate through the models in a Form Recognizer resource (this will include both custom models in the resource as well as prebuilt models that are common to all resources), get a model by ID, and delete a model.\n\n```javascript\nconst {\n  DocumentModelAdministrationClient,\n  AzureKeyCredential,\n} = require(\"@azure/ai-form-recognizer\");\n\nasync function main() {\n  const endpoint = \"<cognitive services endpoint>\";\n  const apiKey = \"<api key>\";\n  const client = new DocumentModelAdministrationClient(endpoint, new AzureKeyCredential(apiKey));\n\n  // Produces an async iterable that supports paging (`PagedAsyncIterableIterator`). The `listDocumentModels` method will only\n  // iterate over model summaries, which do not include detailed schema information. Schema information is only returned\n  // from `getDocumentModel` as part of the full model information.\n  const models = client.listDocumentModels();\n  let i = 1;\n  for await (const summary of models) {\n    console.log(`Model ${i++}:`, summary);\n  }\n\n  // The iterable is paged, and the application can control the flow of paging if needed\n  i = 1;\n  for await (const page of client.listDocumentModels().byPage()) {\n    for (const summary of page) {\n      console.log(`Model ${i++}`, summary);\n    }\n  }\n\n  // We can also get a full ModelInfo by ID. Here we only show the basic information. See the documentation and the\n  // `getDocumentModel` sample program for information about the `docTypes` field, which contains the model's document type\n  // schemas.\n  const model = await client.getDocumentModel(\"<model ID>\");\n  console.log(\"ID\", model.modelId);\n  console.log(\"Created:\", model.createdOn);\n  console.log(\"Description: \", model.description ?? \"<none>\");\n\n  // A model can also be deleted by its model ID. Once it is deleted, it CANNOT be recovered.\n  const modelIdToDelete = \"<model ID that should be deleted forever>\";\n  await client.deleteDocumentModel(modelIdToDelete);\n}\n\nmain().catch((err) => {\n  console.error(\"The sample encountered an error:\", err);\n});\n```\n\nSimilar methods `listDocumentClassifiers` and `getDocumentClassifier` are available for listing and getting information about custom classifiers in addition to `deleteDocumentClassifier` for deleting custom classifiers.\n\n## Troubleshooting\n\nFor assistance with troubleshooting, see the [troubleshooting guide][trouble-shooting].\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\n\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/formrecognizer/ai-form-recognizer/samples) directory for detailed code samples that show how to use this library including several features and methods that are not shown in the \"Examples\" section above, such as copying and composing models, listing model management operations, and deleting models.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fformrecognizer%2Fai-form-recognizer%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[fr_or_cs_resource]: https://docs.microsoft.com/azure/cognitive-services/cognitive-services-apis-create-account?tabs=multiservice%2Cwindows\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[register_aad_app]: https://docs.microsoft.com/azure/cognitive-services/authentication#assign-a-role-to-a-service-principal\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n[fr-build-model]: https://aka.ms/azsdk/formrecognizer/buildmodel\n[build_sample]: https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/formrecognizer/ai-form-recognizer/samples/v4-beta/typescript/src/buildModel.ts\n[multi_and_single_service]: https://docs.microsoft.com/azure/cognitive-services/cognitive-services-apis-create-account?tabs=multiservice%2Cwindows\n[azure_portal_create_fr_resource]: https://ms.portal.azure.com/#create/Microsoft.CognitiveServicesFormRecognizer\n[azure_cli_create_fr_resource]: https://docs.microsoft.com/azure/cognitive-services/cognitive-services-apis-create-account-cli?tabs=windows\n[fr-labeling-tool]: https://aka.ms/azsdk/formrecognizer/labelingtool\n[fr-studio]: https://formrecognizer.appliedai.azure.com/studio\n[fr-build-training-set]: https://aka.ms/azsdk/formrecognizer/buildtrainingset\n[fr-models]: https://aka.ms/azsdk/formrecognizer/models\n[sample-build-classifier]: https://github.com/azure/azure-sdk-for-js/blob/main/sdk/formrecognizer/ai-form-recognizer/samples/v4-beta/typescript/src/buildClassifier.ts\n[samples-prebuilt]: https://github.com/azure/azure-sdk-for-js/tree/main/sdk/formrecognizer/ai-form-recognizer/samples-dev/prebuilt/\n[samples-prebuilt-businesscard]: https://github.com/azure/azure-sdk-for-js/blob/main/sdk/formrecognizer/ai-form-recognizer/samples-dev/prebuilt/prebuilt-businessCard.ts\n[samples-prebuilt-document]: https://github.com/azure/azure-sdk-for-js/blob/main/sdk/formrecognizer/ai-form-recognizer/samples-dev/prebuilt/prebuilt-document.ts\n[samples-prebuilt-healthinsurancecard]: https://github.com/azure/azure-sdk-for-js/blob/main/sdk/formrecognizer/ai-form-recognizer/samples-dev/prebuilt/prebuilt-healthInsuranceCard.ts\n[samples-prebuilt-iddocument]: https://github.com/azure/azure-sdk-for-js/blob/main/sdk/formrecognizer/ai-form-recognizer/samples-dev/prebuilt/prebuilt-idDocument.ts\n[samples-prebuilt-invoice]: https://github.com/azure/azure-sdk-for-js/blob/main/sdk/formrecognizer/ai-form-recognizer/samples-dev/prebuilt/prebuilt-invoice.ts\n[samples-prebuilt-layout]: https://github.com/azure/azure-sdk-for-js/blob/main/sdk/formrecognizer/ai-form-recognizer/samples-dev/prebuilt/prebuilt-layout.ts\n[samples-prebuilt-read]: https://github.com/azure/azure-sdk-for-js/blob/main/sdk/formrecognizer/ai-form-recognizer/samples-dev/prebuilt/prebuilt-read.ts\n[samples-prebuilt-receipt]: https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/formrecognizer/ai-form-recognizer/samples-dev/prebuilt/prebuilt-receipt.ts\n[samples-prebuilt-tax.us.w2]: https://github.com/azure/azure-sdk-for-js/blob/main/sdk/formrecognizer/ai-form-recognizer/samples-dev/prebuilt/prebuilt-tax.us.w2.ts\n[trouble-shooting]: https://github.com/azure/azure-sdk-for-js/blob/main/sdk/formrecognizer/ai-form-recognizer/TROUBLESHOOTING.md\n",
        "repo_name": "formrecognizer/ai-form-recognizer",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/formrecognizer/ai-form-recognizer",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure FrontDoorManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure FrontDoorManagement client.\n\nFrontDoor Client\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/frontdoor/arm-frontdoor) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-frontdoor) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-frontdoor) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-frontdoor` package\n\nInstall the Azure FrontDoorManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-frontdoor\n```\n\n### Create and authenticate a `FrontDoorManagementClient`\n\nTo create a client object to access the Azure FrontDoorManagement API, you will need the `endpoint` of your Azure FrontDoorManagement resource and a `credential`. The Azure FrontDoorManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure FrontDoorManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure FrontDoorManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { FrontDoorManagementClient } = require(\"@azure/arm-frontdoor\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new FrontDoorManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new FrontDoorManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### FrontDoorManagementClient\n\n`FrontDoorManagementClient` is the primary interface for developers using the Azure FrontDoorManagement client library. Explore the methods on this client object to understand the different features of the Azure FrontDoorManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Ffrontdoor%2Farm-frontdoor%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "frontdoor/arm-frontdoor",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/frontdoor/arm-frontdoor",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "## Azure GraphRbacManagementClient SDK for JavaScript\n\n> **Warning**: This package is used to work with the Azure Active Directory Graph API which is deprecated and has been replaced by the [Microsoft Graph API](https://developer.microsoft.com/graph). Beginning on June 30th, 2022, apps using Azure AD Graph will no longer receive responses from the Azure Active Directory Graph endpoint.\n\nHelpful links:\n\n- [Update your applications to use Microsoft Authentication Library and Microsoft Graph API](https://techcommunity.microsoft.com/t5/azure-active-directory-identity/update-your-applications-to-use-microsoft-authentication-library/ba-p/1257363)\n- [App migration checklist](https://docs.microsoft.com/graph/migrate-azure-ad-graph-planning-checklist)\n- [@microsoft/microsoft-graph-client package](https://www.npmjs.com/package/@microsoft/microsoft-graph-client) for the newer Microsoft Graph API\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge, and Firefox.\n\n### How to Install\n\n```\nnpm install @azure/graph\n```\n\n### How to use\n\n#### nodejs - Authentication, client creation and get signedInUser as an example written in TypeScript.\n\n##### Install @azure/ms-rest-nodeauth\n\n```\nnpm install @azure/ms-rest-nodeauth\n```\n\n##### Sample code\n\n```ts\nimport * as msRestNodeAuth from \"@azure/ms-rest-nodeauth\";\nimport {\n  GraphRbacManagementClient,\n  GraphRbacManagementModels,\n  GraphRbacManagementMappers\n} from \"@azure/graph\";\nconst tenantId = \"<Tenant_Id>\";\n\nmsRestNodeAuth\n  .interactiveLogin({\n    tokenAudience: \"https://graph.windows.net\",\n    domain: tenantId\n  })\n  .then((creds) => {\n    const client = new GraphRbacManagementClient(creds, tenantId, {\n      baseUri: \"https://graph.windows.net\"\n    });\n    client.signedInUser.get().then((result) => {\n      console.log(\"The result is:\");\n      console.log(result);\n    });\n  })\n  .catch((err) => {\n    console.error(err);\n  });\n```\n\n#### browser - Authentication, client creation and get signedInUser as an example written in JavaScript.\n\n##### Install @azure/ms-rest-browserauth\n\n```\nnpm install @azure/ms-rest-browserauth\n```\n\n##### Sample code\n\nSee https://github.com/Azure/ms-rest-browserauth to learn how to authenticate to Azure in the browser.\n\n- index.html\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>@azure/graph sample</title>\n    <script src=\"node_modules/@azure/ms-rest-js/dist/msRest.browser.js\"></script>\n    <script src=\"node_modules/@azure/ms-rest-azure-js/dist/msRestAzure.js\"></script>\n    <script src=\"node_modules/@azure/ms-rest-browserauth/dist/msAuth.js\"></script>\n    <script src=\"node_modules/@azure/graph/dist/graph.js\"></script>\n    <script type=\"text/javascript\">\n      const tenantId = \"<Tenant_Id>\";\n      const authManager = new msAuth.AuthManager({\n        clientId: \"<client id for your Azure AD app>\",\n        tenant: \"<optional tenant for your organization>\"\n      });\n      authManager.finalizeLogin().then((res) => {\n        if (!res.isLoggedIn) {\n          // may cause redirects\n          authManager.login();\n        }\n        const client = new Azure.Graph.GraphRbacManagementClient(res.creds, tenantId, {\n          baseUri: \"https://graph.windows.net\"\n        });\n        client.signedInUser\n          .get()\n          .then((result) => {\n            console.log(\"The result is:\");\n            console.log(result);\n          })\n          .catch((err) => {\n            console.log(\"An error occurred:\");\n            console.error(err);\n          });\n      });\n    </script>\n  </head>\n  <body></body>\n</html>\n```\n\n## Related projects\n\n- [Microsoft Azure SDK for Javascript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fgraphrbac%2Fgraph%2FREADME.png)\n",
        "repo_name": "graphrbac/graph",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/graphrbac/graph",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure GraphServices client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure GraphServices client.\n\nSelf service experience for Microsoft Graph metered services\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/graphservices/arm-graphservices) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-graphservices) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-graphservices?view=azure-node-preview) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-graphservices` package\n\nInstall the Azure GraphServices client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-graphservices\n```\n\n### Create and authenticate a `GraphServices`\n\nTo create a client object to access the Azure GraphServices API, you will need the `endpoint` of your Azure GraphServices resource and a `credential`. The Azure GraphServices client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure GraphServices resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure GraphServices** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { GraphServices } = require(\"@azure/arm-graphservices\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new GraphServices(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new GraphServices(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### GraphServices\n\n`GraphServices` is the primary interface for developers using the Azure GraphServices client library. Explore the methods on this client object to understand the different features of the Azure GraphServices service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fgraphservices%2Farm-graphservices%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "graphservices/arm-graphservices",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/graphservices/arm-graphservices",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure HanaManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure HanaManagement client.\n\nHANA on Azure Client\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/hanaonazure/arm-hanaonazure) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-hanaonazure) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-hanaonazure?view=azure-node-preview) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-hanaonazure` package\n\nInstall the Azure HanaManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-hanaonazure\n```\n\n### Create and authenticate a `HanaManagementClient`\n\nTo create a client object to access the Azure HanaManagement API, you will need the `endpoint` of your Azure HanaManagement resource and a `credential`. The Azure HanaManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure HanaManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure HanaManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { HanaManagementClient } = require(\"@azure/arm-hanaonazure\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new HanaManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new HanaManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### HanaManagementClient\n\n`HanaManagementClient` is the primary interface for developers using the Azure HanaManagement client library. Explore the methods on this client object to understand the different features of the Azure HanaManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fhanaonazure%2Farm-hanaonazure%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "hanaonazure/arm-hanaonazure",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/hanaonazure/arm-hanaonazure",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# AzureDedicatedHsmResourceProvider client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for AzureDedicatedHsmResourceProvider client.\n\nThe Azure management API provides a RESTful set of web services that interact with Azure Dedicated HSM RP.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/hardwaresecuritymodules/arm-hardwaresecuritymodules) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-hardwaresecuritymodules) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-hardwaresecuritymodules) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-hardwaresecuritymodules` package\n\nInstall the AzureDedicatedHsmResourceProvider client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-hardwaresecuritymodules\n```\n\n### Create and authenticate a `AzureDedicatedHSMResourceProvider`\n\nTo create a client object to access the AzureDedicatedHsmResourceProvider API, you will need the `endpoint` of your AzureDedicatedHsmResourceProvider resource and a `credential`. The AzureDedicatedHsmResourceProvider client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your AzureDedicatedHsmResourceProvider resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to AzureDedicatedHsmResourceProvider** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { AzureDedicatedHSMResourceProvider } = require(\"@azure/arm-hardwaresecuritymodules\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new AzureDedicatedHSMResourceProvider(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new AzureDedicatedHSMResourceProvider(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### AzureDedicatedHSMResourceProvider\n\n`AzureDedicatedHSMResourceProvider` is the primary interface for developers using the AzureDedicatedHsmResourceProvider client library. Explore the methods on this client object to understand the different features of the AzureDedicatedHsmResourceProvider service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fhardwaresecuritymodules%2Farm-hardwaresecuritymodules%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "hardwaresecuritymodules/arm-hardwaresecuritymodules",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/hardwaresecuritymodules/arm-hardwaresecuritymodules",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure HDInsightManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure HDInsightManagement client.\n\nHDInsight Management Client\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/hdinsight/arm-hdinsight) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-hdinsight) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-hdinsight) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-hdinsight` package\n\nInstall the Azure HDInsightManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-hdinsight\n```\n\n### Create and authenticate a `HDInsightManagementClient`\n\nTo create a client object to access the Azure HDInsightManagement API, you will need the `endpoint` of your Azure HDInsightManagement resource and a `credential`. The Azure HDInsightManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure HDInsightManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure HDInsightManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { HDInsightManagementClient } = require(\"@azure/arm-hdinsight\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new HDInsightManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new HDInsightManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### HDInsightManagementClient\n\n`HDInsightManagementClient` is the primary interface for developers using the Azure HDInsightManagement client library. Explore the methods on this client object to understand the different features of the Azure HDInsightManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fhdinsight%2Farm-hdinsight%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "hdinsight/arm-hdinsight",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/hdinsight/arm-hdinsight",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Healthbot client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure Healthbot client.\n\nAzure Health Bot is a cloud platform that empowers developers in Healthcare organizations to build and deploy their compliant, AI-powered virtual health assistants and health bots, that help them improve processes and reduce costs.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/healthbot/arm-healthbot) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-healthbot) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-healthbot) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-healthbot` package\n\nInstall the Azure Healthbot client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-healthbot\n```\n\n### Create and authenticate a `HealthbotClient`\n\nTo create a client object to access the Azure Healthbot API, you will need the `endpoint` of your Azure Healthbot resource and a `credential`. The Azure Healthbot client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure Healthbot resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure Healthbot** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { HealthbotClient } = require(\"@azure/arm-healthbot\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new HealthbotClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new HealthbotClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### HealthbotClient\n\n`HealthbotClient` is the primary interface for developers using the Azure Healthbot client library. Explore the methods on this client object to understand the different features of the Azure Healthbot service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fhealthbot%2Farm-healthbot%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "healthbot/arm-healthbot",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/healthbot/arm-healthbot",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure HealthcareApisManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure HealthcareApisManagement client.\n\nAzure Healthcare APIs Client\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/healthcareapis/arm-healthcareapis) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-healthcareapis) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-healthcareapis) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-healthcareapis` package\n\nInstall the Azure HealthcareApisManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-healthcareapis\n```\n\n### Create and authenticate a `HealthcareApisManagementClient`\n\nTo create a client object to access the Azure HealthcareApisManagement API, you will need the `endpoint` of your Azure HealthcareApisManagement resource and a `credential`. The Azure HealthcareApisManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure HealthcareApisManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure HealthcareApisManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { HealthcareApisManagementClient } = require(\"@azure/arm-healthcareapis\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new HealthcareApisManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new HealthcareApisManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### HealthcareApisManagementClient\n\n`HealthcareApisManagementClient` is the primary interface for developers using the Azure HealthcareApisManagement client library. Explore the methods on this client object to understand the different features of the Azure HealthcareApisManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fhealthcareapis%2Farm-healthcareapis%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "healthcareapis/arm-healthcareapis",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/healthcareapis/arm-healthcareapis",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure HybridComputeManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure HybridComputeManagement client.\n\nThe Hybrid Compute Management Client.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/hybridcompute/arm-hybridcompute) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-hybridcompute) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-hybridcompute?view=azure-node-preview) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-hybridcompute` package\n\nInstall the Azure HybridComputeManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-hybridcompute\n```\n\n### Create and authenticate a `HybridComputeManagementClient`\n\nTo create a client object to access the Azure HybridComputeManagement API, you will need the `endpoint` of your Azure HybridComputeManagement resource and a `credential`. The Azure HybridComputeManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure HybridComputeManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure HybridComputeManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { HybridComputeManagementClient } = require(\"@azure/arm-hybridcompute\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new HybridComputeManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new HybridComputeManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### HybridComputeManagementClient\n\n`HybridComputeManagementClient` is the primary interface for developers using the Azure HybridComputeManagement client library. Explore the methods on this client object to understand the different features of the Azure HybridComputeManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fhybridcompute%2Farm-hybridcompute%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "hybridcompute/arm-hybridcompute",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/hybridcompute/arm-hybridcompute",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure HybridContainerService client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure HybridContainerService client.\n\nThe Microsoft.HybridContainerService Rest API spec.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/hybridcontainerservice/arm-hybridcontainerservice) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-hybridcontainerservice) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-hybridcontainerservice?view=azure-node-preview) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-hybridcontainerservice` package\n\nInstall the Azure HybridContainerService client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-hybridcontainerservice\n```\n\n### Create and authenticate a `HybridContainerServiceClient`\n\nTo create a client object to access the Azure HybridContainerService API, you will need the `endpoint` of your Azure HybridContainerService resource and a `credential`. The Azure HybridContainerService client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure HybridContainerService resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure HybridContainerService** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { HybridContainerServiceClient } = require(\"@azure/arm-hybridcontainerservice\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new HybridContainerServiceClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new HybridContainerServiceClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### HybridContainerServiceClient\n\n`HybridContainerServiceClient` is the primary interface for developers using the Azure HybridContainerService client library. Explore the methods on this client object to understand the different features of the Azure HybridContainerService service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fhybridcontainerservice%2Farm-hybridcontainerservice%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "hybridcontainerservice/arm-hybridcontainerservice",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/hybridcontainerservice/arm-hybridcontainerservice",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure ConnectedKubernetes client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure ConnectedKubernetes client.\n\nAzure Connected Cluster Resource Provider API for adopting any Kubernetes Cluster\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/hybridkubernetes/arm-hybridkubernetes) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-hybridkubernetes) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-hybridkubernetes) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-hybridkubernetes` package\n\nInstall the Azure ConnectedKubernetes client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-hybridkubernetes\n```\n\n### Create and authenticate a `ConnectedKubernetesClient`\n\nTo create a client object to access the Azure ConnectedKubernetes API, you will need the `endpoint` of your Azure ConnectedKubernetes resource and a `credential`. The Azure ConnectedKubernetes client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure ConnectedKubernetes resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure ConnectedKubernetes** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { ConnectedKubernetesClient } = require(\"@azure/arm-hybridkubernetes\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new ConnectedKubernetesClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new ConnectedKubernetesClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### ConnectedKubernetesClient\n\n`ConnectedKubernetesClient` is the primary interface for developers using the Azure ConnectedKubernetes client library. Explore the methods on this client object to understand the different features of the Azure ConnectedKubernetes service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fhybridkubernetes%2Farm-hybridkubernetes%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "hybridkubernetes/arm-hybridkubernetes",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/hybridkubernetes/arm-hybridkubernetes",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Identity Plugin for Token Cache Persistence\n\nThis package provides a plugin to the Azure Identity library for JavaScript ([`@azure/identity`](https://npmjs.com/package/@azure/identity)) that enables persistent token caching. Token cache persistence allows the built-in token cache to persist across sessions using a secure storage system provided by the local operating system.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity-cache-persistence) | [Samples](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/identity/identity-cache-persistence/samples-dev)\n\n## Getting started\n\n```javascript\nconst { useIdentityPlugin } = require(\"@azure/identity\");\nconst { cachePersistencePlugin } = require(\"@azure/identity-cache-persistence\");\n\nuseIdentityPlugin(cachePersistencePlugin);\n```\n\n### Prerequisites\n\n- An [Azure subscription](https://azure.microsoft.com/free/).\n\n### Install the package\n\nThis package is designed to be used with Azure Identity for JavaScript. Install both `@azure/identity` and this package using `npm`:\n\n```sh\n$ npm install --save @azure/identity\n$ npm install --save @azure/identity-cache-persistence\n```\n\n#### Supported Environments\n\nAzure Identity plugins for JavaScript support stable (even numbered) versions of Node.js starting from v12. While the plugins may run in other Node versions, no support is guaranteed. `@azure/identity-cache-persistence` **does not** support browser environments.\n\n## Key concepts\n\nIf this is your first time using `@azure/identity` or the Microsoft identity platform (Azure Active Directory), we recommend that you read [Using `@azure/identity` with Microsoft Identity Platform](https://github.com/Azure/azure-sdk-for-js/blob/main/documentation/using-azure-identity.md) first. This document will give you a deeper understanding of the platform and how to configure your Azure account correctly.\n\n### Azure Identity Plugins\n\nAs of `@azure/identity` version 2.0.0, the Identity client library for JavaScript includes a plugin API. This package (`@azure/identity-cache-persistence`) exports a plugin object that you must pass as an argument to the top-level `useIdentityPlugin` function from the `@azure/identity` package. Enable token cache persistence in your program as follows:\n\n```javascript\nconst { useIdentityPlugin } = require(\"@azure/identity\");\nconst { cachePersistencePlugin } = require(\"@azure/identity-cache-persistence\");\n\nuseIdentityPlugin(cachePersistencePlugin);\n```\n\nAfter calling `useIdentityPlugin`, the persistent token cache plugin is registered to the `@azure/identity` package and will be available on all credentials that support persistent token caching (those that have `tokenCachePersistenceOptions` in their constructor options).\n\n## Examples\n\nOnce the plugin is registered, you can enable token cache persistence by passing `tokenCachePersistenceOptions` with an `enabled` property set to `true` to a credential constructor. In the following example, we use the `DeviceCodeCredential`, since persistent caching of its tokens allows you to skip the interactive device-code authentication flow if a cached token is available.\n\n```javascript\nconst { useIdentityPlugin, DeviceCodeCredential } = require(\"@azure/identity\");\nconst { cachePersistencePlugin } = require(\"@azure/identity-cache-persistence\");\n\nuseIdentityPlugin(cachePersistencePlugin);\n\nasync function main() {\n  const credential = new DeviceCodeCredential({\n    tokenCachePersistenceOptions: {\n      enabled: true,\n    },\n  });\n\n  // We'll use the Microsoft Graph scope as an example\n  const scope = \"https://graph.microsoft.com/.default\";\n\n  // Print out part of the access token\n  console.log((await credential.getToken(scope)).token.substr(0, 10), \"...\");\n}\n\nmain().catch((error) => {\n  console.error(\"An error occurred:\", error);\n  process.exit(1);\n});\n```\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\n\nsetLogLevel(\"info\");\n```\n\n## Next steps\n\n### Provide Feedback\n\nIf you encounter bugs or have suggestions, please [open an issue](https://github.com/Azure/azure-sdk-for-js/issues).\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fidentity%2Fidentity%2FREADME.png)\n",
        "repo_name": "identity/identity-cache-persistence",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/identity/identity-cache-persistence",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Identity Plugin for Visual Studio Code Authentication\n\nThis package provides a plugin to the Azure Identity library for JavaScript ([`@azure/identity`](https://npmjs.com/package/@azure/identity)) that enables authentication through the \"Azure Account\" extension for Visual Studio Code. This plugin provides the dependencies of the `VisualStudioCodeCredential` in `@azure/identity` and enables it for use on its own or as part of `DefaultAzureCredential`.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity-vscode) | [Samples](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/identity/identity-vscode/samples-dev)\n\n## Getting started\n\n```javascript\nconst { useIdentityPlugin } = require(\"@azure/identity\");\nconst { vsCodePlugin } = require(\"@azure/identity-vscode\");\n\nuseIdentityPlugin(vsCodePlugin);\n```\n\n### Prerequisites\n\n- An [Azure subscription](https://azure.microsoft.com/free/).\n- Install [Visual Studio Code](https://aka.ms/vscode) and the [\"Azure Account\" extension][azaccountext]\n\n### Install the package\n\nThis package is designed to be used with Azure Identity for JavaScript. Install both `@azure/identity` and this package using `npm`:\n\n```sh\n$ npm install --save @azure/identity\n$ npm install --save-dev @azure/identity-vscode\n```\n\n#### Supported Environments\n\nAzure Identity plugins for JavaScript support stable (even numbered) versions of Node.js starting from v12. While the plugins may run in other Node versions, no support is guaranteed. `@azure/identity-vscode` **does not** support browser environments.\n\n## Key concepts\n\nIf this is your first time using `@azure/identity` or the Microsoft identity platform (Azure Active Directory), we recommend that you read [Using `@azure/identity` with Microsoft Identity Platform](https://github.com/Azure/azure-sdk-for-js/blob/main/documentation/using-azure-identity.md) first. This document will give you a deeper understanding of the platform and how to configure your Azure account correctly.\n\n### Azure Identity Plugins\n\nAs of `@azure/identity` version 2.0.0, the Identity client library for JavaScript includes a plugin API. This package (`@azure/identity-vscode`) exports a plugin object that you must pass as an argument to the top-level `useIdentityPlugin` function from the `@azure/identity` package. Enable authentication through the \"Azure Account\" extension for Visual Studio Code as follows:\n\n```javascript\nconst { useIdentityPlugin } = require(\"@azure/identity\");\nconst { vsCodePlugin } = require(\"@azure/identity-vscode\");\n\nuseIdentityPlugin(vsCodePlugin);\n```\n\nAfter calling `useIdentityPlugin`, the `VisualStudioCodeCredential` from the `@azure/identity` package will be enabled. If this plugin is not used, then `VisualStudioCodeCredential` will throw a `CredentialUnavailableError`, and it will not be available as part of `DefaultAzureCredential`.\n\n### Visual Studio Code Authentication\n\n`VisualStudioCodeCredential` uses the authentication session from the [\"Azure Account\" extension][azaccountext]. To use this credential, you must sign in to your Azure account using the extension. To do so, open Visual Studio Code, ensure that the extension is installed, and sign in from **Command Palette** using the \"Azure: Sign In\" option to open a browser window and sign in to Azure. Alternatively, you can select \"Azure: Sign In with Device Code\" to use the device code flow.\n\nAfter signing in, you may need to select a subscription (for example, if you have multiple Azure subscriptions), and you can change the active subscription by using the menu to select the \"Azure: Select Subscriptions\" entry.\n\n## Examples\n\nOnce the plugin is registered, you can use `VisualStudioCodeCredential` in a similar fashion to the other credential classes in `@azure/identity`:\n\n```javascript\nconst { useIdentityPlugin, VisualStudioCodeCredential } = require(\"@azure/identity\");\nconst { vsCodePlugin } = require(\"@azure/identity-vscode\");\n\nuseIdentityPlugin(vsCodePlugin);\n\nasync function main() {\n  const credential = new VisualStudioCodeCredential();\n\n  // The graph.microsoft.com scope is used as an example\n  const scope = \"https://graph.microsoft.com/.default\";\n\n  // Print out part of the access token\n  console.log((await credential.getToken(scope)).token.substr(0, 10), \"...\");\n}\n\nmain().catch((error) => {\n  console.error(\"An error occurred:\", error);\n  process.exit(1);\n});\n```\n\nYou can also use `DefaultAzureCredential`, which will attempt to authenticate using the \"Azure Account\" extension for Visual Studio Code if it's available:\n\n```javascript\nconst { useIdentityPlugin, DefaultAzureCredential } = require(\"@azure/identity\");\nconst { vsCodePlugin } = require(\"@azure/identity-vscode\");\n\nuseIdentityPlugin(vsCodePlugin);\n\nasync function main() {\n  // With the plugin enabled above, `DefaultAzureCredential` will use\n  // Visual Studio Code's \"Azure Account\" extension to authenticate if\n  // it is available.\n  const credential = new DefaultAzureCredential();\n\n  // This will print a JWT access_token and its expiration timestamp\n  // The graph.microsoft.com scope is used as an example\n  console.log(\"Token:\", await credential.getToken(\"https://graph.microsoft.com/.default\"));\n}\n\nmain().catch((error) => {\n  console.error(\"An error occurred:\", error);\n  process.exit(1);\n});\n```\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\n\nsetLogLevel(\"info\");\n```\n\n## Next steps\n\n### Provide Feedback\n\nIf you encounter bugs or have suggestions, please [open an issue](https://github.com/Azure/azure-sdk-for-js/issues).\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n[azaccountext]: https://marketplace.visualstudio.com/items?itemName=ms-vscode.azure-account\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fidentity%2Fidentity%2FREADME.png)\n",
        "repo_name": "identity/identity-vscode",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/identity/identity-vscode",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Identity client library for JavaScript\n\nThe Azure Identity library provides [Azure Active Directory (Azure AD)](https://learn.microsoft.com/azure/active-directory/fundamentals/active-directory-whatis) token authentication through a set of convenient [TokenCredential](https://learn.microsoft.com/javascript/api/@azure/core-auth/tokencredential) implementations.\n\nFor examples of various credentials, see the [Azure Identity examples page](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/identity/identity/samples/AzureIdentityExamples.md).\n\nKey links:\n\n- [Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity)\n- [Package (npm)](https://www.npmjs.com/package/@azure/identity)\n- [API Reference Documentation](https://learn.microsoft.com/javascript/api/@azure/identity)\n- [Azure AD documentation](https://azure.microsoft.com/services/active-directory/)\n- [Samples](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/identity/identity/samples/v2)\n\n## Getting started\n\n### Migrate from v1 to v2 of @azure/identity\n\nIf you're using v1 of `@azure/identity`, see the [migration guide](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/identity/identity/migration-v1-v2.md) to update to v2.\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n  - **Note:** If your application runs on Node.js v8 or lower and you cannot upgrade your Node.js version to latest stable version, then pin your `@azure/identity` dependency to version 1.1.0.\n- Latest versions of Safari, Chrome, Edge, and Firefox.\n  - **Note**: Among the different credentials exported in this library, `InteractiveBrowserCredential` is the only one that is supported in the browser.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Install the package\n\nInstall Azure Identity with `npm`:\n\n```sh\nnpm install --save @azure/identity\n```\n\n### Prerequisites\n\n- An [Azure subscription](https://azure.microsoft.com/free/).\n- Optional: The [Azure CLI][azure_cli] and/or [Azure PowerShell][azure_powershell] can also be useful for authenticating in a development environment and managing account roles.\n\n### When to use @azure/identity\n\nThe credential classes exposed by `@azure/identity` are focused on providing the most straightforward way to authenticate the Azure SDK clients locally, in your development environments, and in production. We aim for simplicity and reasonable support of the authentication protocols to cover most of the authentication scenarios possible on Azure. We're actively expanding to cover more scenarios. For a full list of the credentials offered, see the [Credential Classes](#credential-classes) section.\n\nAll credential types provided by `@azure/identity` are supported in Node.js. For browsers, `InteractiveBrowserCredential` is the credential type to be used for basic authentication scenarios.\n\nMost of the credential types offered by `@azure/identity` use the [Microsoft Authentication Library for JavaScript (MSAL.js)](https://github.com/AzureAD/microsoft-authentication-library-for-js). Specifically, we use the v2 MSAL.js libraries, which use [OAuth 2.0 Authorization Code Flow with PKCE](https://learn.microsoft.com/azure/active-directory/develop/v2-oauth2-auth-code-flow) and are [OpenID-compliant](https://learn.microsoft.com/azure/active-directory/develop/v2-protocols-oidc). While `@azure/identity` focuses on simplicity, the MSAL.js libraries, such as [@azure/msal-common](https://www.npmjs.com/package/@azure/msal-common), [@azure/msal-node](https://www.npmjs.com/package/@azure/msal-node), and [@azure/msal-browser](https://www.npmjs.com/package/@azure/msal-browser), are designed to provide robust support for the authentication protocols that Azure supports.\n\n#### When to use something else\n\nThe `@azure/identity` credential types are implementations of [@azure/core-auth](https://www.npmjs.com/package/@azure/core-auth)'s `TokenCredential` class. In principle, any object with a `getToken` method that satisfies `getToken(scopes: string | string[], options?: GetTokenOptions): Promise<AccessToken | null>` will work as a `TokenCredential`. This means developers can write their own credential types to support authentication cases not covered by `@azure/identity`. To learn more, see [Custom Credentials](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/identity/identity/samples/AzureIdentityExamples.md#custom-credentials).\n\nThough our credential types support many advanced cases, developers may want full control of the authentication protocol. For that use case, we recommend using [Microsoft Authentication Library for JavaScript (MSAL.js)](https://github.com/AzureAD/microsoft-authentication-library-for-js) directly. You can read more through the following links:\n\n- We portray some advanced use cases of `@azure/identity` on the [Azure Identity Examples](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/identity/identity/samples/AzureIdentityExamples.md) page.\n  - There, we specifically have an [Advanced Examples](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/identity/identity/samples/AzureIdentityExamples.md#advanced-examples) section.\n  - We also have a section that shows how to [Authenticate with MSAL directly](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-msal-directly).\n\nFor advanced authentication workflows in the browser, we have a section where we showcase how to use the [@azure/msal-browser](https://www.npmjs.com/package/@azure/msal-browser) library directly to authenticate Azure SDK clients.\n\n### Authenticate the client in development environment\n\nWhile we recommend using managed identity or service principal authentication in your production application, it is typical for a developer to use their own account for authenticating calls to Azure services when debugging and executing code locally. There are several developer tools which can be used to perform this authentication in your development environment.\n\n#### Authenticate via the Azure Developer CLI\n\nDevelopers coding outside of an IDE can also use the [Azure Developer CLI][azure_developer_cli] to authenticate. Applications using the `DefaultAzureCredential` or the `AzureDeveloperCliCredential` can then use this account to authenticate calls in their application when running locally.\n\nTo authenticate with the [Azure Developer CLI][azure_developer_cli], users can run the command `azd auth login`. For users running on a system with a default web browser, the Azure Developer CLI will launch the browser to authenticate the user.\n\nFor systems without a default web browser, the `azd auth login --use-device-code` command will use the device code authentication flow.\n\n#### Authenticate via the Azure CLI\n\nApplications using the `AzureCliCredential`, whether directly or via the `DefaultAzureCredential`, can use the Azure CLI account to authenticate calls in the application when running locally.\n\nTo authenticate with the [Azure CLI][azure_cli] users can run the command `az login`. For users running on a system with a default web browser the Azure cli will launch the browser to authenticate the user.\n\n![Azure CLI Account Sign In][azureclilogin_image]\n\nFor systems without a default web browser, the `az login` command will use the device code authentication flow. The user can also force the Azure CLI to use the device code flow rather than launching a browser by specifying the `--use-device-code` argument.\n\n![Azure CLI Account Device Code Sign In][azureclilogindevicecode_image]\n\n#### Authenticate via Azure PowerShell\n\nApplications using the `AzurePowerShellCredential`, whether directly or via the `DefaultAzureCredential`, can use the account connected to Azure PowerShell to authenticate calls in the application when running locally.\n\nTo authenticate with [Azure PowerShell][azure_powershell] users can run the `Connect-AzAccount` cmdlet. By default, ike the Azure CLI, `Connect-AzAccount` will launch the default web browser to authenticate a user account.\n\n![Azure PowerShell Account Sign In][azurepowershelllogin_image]\n\nIf interactive authentication cannot be supported in the session, then the `-UseDeviceAuthentication` argument will force the cmdlet to use a device code authentication flow instead, similar to the corresponding option in the Azure CLI credential.\n\n#### Authenticate via Visual Studio Code\n\nDevelopers using Visual Studio Code can use the [Azure Account extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode.azure-account) to authenticate via the editor. Apps using `VisualStudioCodeCredential` can then use this account to authenticate calls in their app when running locally.\n\nTo authenticate in Visual Studio Code, ensure the Azure Account extension is installed. Once installed, open the **Command Palette** and run the **Azure: Sign In** command.\n\nAdditionally, use the [`@azure/identity-vscode`](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity-vscode) plugin package. This package provides the dependencies of `VisualStudioCodeCredential` and enables it. See [Plugins](##plugins).\n\nIt's a [known issue](https://github.com/Azure/azure-sdk-for-js/issues/20500) that `VisualStudioCodeCredential` doesn't work with [Azure Account extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode.azure-account) versions newer than **0.9.11**. A long-term fix to this problem is in progress. In the meantime, consider [authenticating via the Azure CLI](#authenticating-via-the-azure-cli).\n\n### Authenticate the client in browsers\n\nTo authenticate Azure SDK clients within web browsers, we offer the `InteractiveBrowserCredential`, which can be set to use redirection or popups to complete the authentication flow. It's necessary to [create an Azure App Registration](https://learn.microsoft.com/azure/active-directory/develop/scenario-spa-app-registration) in the Azure portal for your web application first.\n\n## Key concepts\n\nIf this is your first time using `@azure/identity` or the Microsoft Identity platform (Azure AD), read [Using `@azure/identity` with Microsoft Identity Platform](https://github.com/Azure/azure-sdk-for-js/blob/main/documentation/using-azure-identity.md) first. This document provides a deeper understanding of the platform and how to configure your Azure account correctly.\n\n### Credentials\n\nA credential is a class which contains or can obtain the data needed for a service client to authenticate requests. Service clients across the Azure SDK accept credentials when they're constructed. Service clients use those credentials to authenticate requests to the service.\n\nThe Azure Identity library focuses on OAuth authentication with Azure AD, and it offers a variety of credential classes capable of acquiring an Azure AD token to authenticate service requests. All of the credential classes in this library are implementations of the [TokenCredential](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/core/core-auth/src/tokenCredential.ts) abstract class, and any of them can be used by to construct service clients capable of authenticating with a TokenCredential.\n\nSee [Credential Classes](#credential-classes).\n\n### DefaultAzureCredential\n\nThe `DefaultAzureCredential` is appropriate for most scenarios where the application is intended to ultimately be run in Azure. This is because the `DefaultAzureCredential` combines credentials commonly used to authenticate when deployed with credentials used to authenticate in a development environment.\n\n> Note: `DefaultAzureCredential` is intended to simplify getting started with the SDK by handling common scenarios with reasonable default behaviors. Developers who want more control or whose scenario isn't served by the default settings should use other credential types.\n\nIf used from Node.js, the `DefaultAzureCredential` will attempt to authenticate via the following mechanisms in order:\n\n![DefaultAzureCredential authentication flow][defaultauthflow_image]\n\n1. **Environment** - The `DefaultAzureCredential` will read account information specified via [environment variables](#environment-variables) and use it to authenticate.\n1. **Workload Identity** - If the application is deployed to Azure Kubernetes Service with Managed Identity enabled, `DefaultAzureCredential` will authenticate with it.\n1. **Managed Identity** - If the application is deployed to an Azure host with Managed Identity enabled, the `DefaultAzureCredential` will authenticate with that account.\n1. **Azure Developer CLI** - If the developer has authenticated an account via the Azure Developer CLI `azd auth login` command, the `DefaultAzureCredential` will authenticate with that account.\n1. **Azure CLI** - If the developer has authenticated an account via the Azure CLI `az login` command, the `DefaultAzureCredential` will authenticate with that account.\n1. **Azure PowerShell** - If the developer has authenticated using the Azure PowerShell module `Connect-AzAccount` command, the `DefaultAzureCredential` will authenticate with that account.\n\n#### Note about `VisualStudioCodeCredential`\n\nDue to a [known issue](https://github.com/Azure/azure-sdk-for-js/issues/20500), `VisualStudioCodeCredential` has been removed from the `DefaultAzureCredential` token chain. When the issue is resolved in a future release, this change will be reverted.\n\n## Plugins\n\nAzure Identity for JavaScript provides a plugin API that allows us to provide certain functionality through separate _plugin packages_. The `@azure/identity` package exports a top-level function (`useIdentityPlugin`) that can be used to enable a plugin. We provide two plugin packages:\n\n- [`@azure/identity-cache-persistence`](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity-cache-persistence), which provides persistent token caching in Node.js using a native secure storage system provided by your operating system. This plugin allows cached `access_token` values to persist across sessions, meaning that an interactive login flow does not need to be repeated as long as a cached token is available.\n- [`@azure/identity-vscode`](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity-vscode), which provides the dependencies of `VisualStudioCodeCredential` and enables it. Without this plugin, the `VisualStudioCodeCredential` in this package will throw a `CredentialUnavailableError`. The plugin provides the underlying implementation of this credential, enabling it for use both on its own and as part of the `DefaultAzureCredential` described above.\n\n## Examples\n\nYou can find more examples of using various credentials in [Azure Identity Examples Page](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/identity/identity/samples/AzureIdentityExamples.md)\n\n### Authenticate with the `DefaultAzureCredential`\n\nThis example demonstrates authenticating the `KeyClient` from the [@azure/keyvault-keys](https://www.npmjs.com/package/@azure/keyvault-keys) client library using the `DefaultAzureCredential`.\n\n```javascript\n// The default credential first checks environment variables for configuration as described above.\n// If environment configuration is incomplete, it will try managed identity.\n\n// Azure Key Vault service to use\nimport { KeyClient } from \"@azure/keyvault-keys\";\n\n// Azure authentication library to access Azure Key Vault\nimport { DefaultAzureCredential } from \"@azure/identity\";\n\n// Azure SDK clients accept the credential as a parameter\nconst credential = new DefaultAzureCredential();\n\n// Create authenticated client\nconst client = new KeyClient(vaultUrl, credential);\n```\n\n### Specify a user-assigned managed identity with the `DefaultAzureCredential`\n\nA relatively common scenario involves authenticating using a user-assigned managed identity for an Azure resource. Explore the [example on Authenticating a user-assigned managed identity with DefaultAzureCredential](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-a-user-assigned-managed-identity-with-defaultazurecredential) to see how this is made a relatively straightforward task that can be configured using environment variables or in code.\n\n### Define a custom authentication flow with the `ChainedTokenCredential`\n\nWhile the `DefaultAzureCredential` is generally the quickest way to get started developing applications for Azure, more advanced users may want to customize the credentials considered when authenticating. The `ChainedTokenCredential` enables users to combine multiple credential instances to define a customized chain of credentials. This example demonstrates creating a `ChainedTokenCredential` which will attempt to authenticate using two differently configured instances of `ClientSecretCredential`, to then authenticate the `KeyClient` from the [@azure/keyvault-keys](https://www.npmjs.com/package/@azure/keyvault-keys):\n\n```typescript\nimport { ClientSecretCredential, ChainedTokenCredential } from \"@azure/identity\";\n\n// When an access token is requested, the chain will try each\n// credential in order, stopping when one provides a token\nconst firstCredential = new ClientSecretCredential(tenantId, clientId, clientSecret);\nconst secondCredential = new ClientSecretCredential(tenantId, anotherClientId, anotherSecret);\nconst credentialChain = new ChainedTokenCredential(firstCredential, secondCredential);\n\n// The chain can be used anywhere a credential is required\nimport { KeyClient } from \"@azure/keyvault-keys\";\nconst client = new KeyClient(vaultUrl, credentialChain);\n```\n\n## Managed identity support\n\nThe [Managed identity authentication](https://learn.microsoft.com/azure/active-directory/managed-identities-azure-resources/overview) is supported via either the `DefaultAzureCredential` or the `ManagedIdentityCredential` credential classes directly for the following Azure services:\n\n- [Azure App Service and Azure Functions](https://learn.microsoft.com/azure/app-service/overview-managed-identity)\n- [Azure Arc](https://learn.microsoft.com/azure/azure-arc/servers/managed-identity-authentication)\n- [Azure Cloud Shell](https://learn.microsoft.com/azure/cloud-shell/msi-authorization)\n- [Azure Kubernetes Service](https://learn.microsoft.com/azure/aks/use-managed-identity)\n- [Azure Service Fabric](https://learn.microsoft.com/azure/service-fabric/concepts-managed-identity)\n- [Azure Virtual Machines](https://learn.microsoft.com/azure/active-directory/managed-identities-azure-resources/how-to-use-vm-token)\n- [Azure Virtual Machines Scale Sets](https://learn.microsoft.com/azure/active-directory/managed-identities-azure-resources/qs-configure-powershell-windows-vmss)\n\nFor examples of how to use managed identity for authentication, see [the examples](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-in-azure-with-managed-identity).\n\n## Cloud configuration\n\nCredentials default to authenticating to the Azure AD endpoint for Azure Public Cloud. To access resources in other clouds, such as Azure Government or a private cloud, configure credentials with the `authorityHost` argument in the constructor. The `AzureAuthorityHosts` interface defines authorities for well-known clouds. For the US Government cloud, you could instantiate a credential this way:\n\n```typescript\nimport { AzureAuthorityHosts, ClientSecretCredential } from \"@azure/identity\";\nconst credential = new ClientSecretCredential(\n  \"<YOUR_TENANT_ID>\",\n  \"<YOUR_CLIENT_ID>\",\n  \"<YOUR_CLIENT_SECRET>\",\n  {\n    authorityHost: AzureAuthorityHosts.AzureGovernment,\n  }\n);\n```\n\nNot all credentials require this configuration. Credentials that authenticate through a development tool, such as `AzureCliCredential`, use that tool's configuration. Similarly, `VisualStudioCodeCredential` accepts an `authorityHost` argument but defaults to the `authorityHost` matching Visual Studio Code's **Azure: Cloud** setting.\n\n## Credential classes\n\n### Authenticate Azure-hosted applications\n\n| Credential                                                                                                                                | Usage                                                                                                            | Example                                                                                                                                                                               |\n| ----------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| [`DefaultAzureCredential`](https://learn.microsoft.com/javascript/api/@azure/identity/defaultazurecredential?view=azure-node-latest)       | Provides a simplified authentication experience to quickly start developing applications run in Azure. | [example](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-defaultazurecredential)                      |\n| [`ChainedTokenCredential`](https://learn.microsoft.com/javascript/api/@azure/identity/chainedtokencredential?view=azure-node-latest)       | Allows users to define custom authentication flows composing multiple credentials.                               | [example](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/identity/identity/samples/AzureIdentityExamples.md#chaining-credentials)                                            |\n| [`EnvironmentCredential`](https://learn.microsoft.com/javascript/api/@azure/identity/environmentcredential?view=azure-node-latest)         | Authenticates a service principal or user via credential information specified in environment variables.         | [example](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-a-service-principal-with-environment-credentials) |\n| [`ManagedIdentityCredential`](https://learn.microsoft.com/javascript/api/@azure/identity/managedidentitycredential?view=azure-node-latest) | Authenticates the managed identity of an Azure resource.                                                         | [example](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-in-azure-with-managed-identity)                   |\n| [`WorkloadIdentityCredential`](https://learn.microsoft.com/javascript/api/@azure/identity/workloadidentitycredential?view=azure-node-latest)| Supports [Azure AD workload identity](https://learn.microsoft.com/azure/aks/workload-identity-overview) on Kubernetes. | |\n\n### Authenticate service principals\n\n| Credential                                                                                                                                    | Usage                                                  | Example                                                                                                                                                                            | Reference                                                                                                                        |\n| --------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------ | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------- |\n| [`ClientAssertionCredential`](https://learn.microsoft.com/javascript/api/@azure/identity/clientassertioncredential?view=azure-node-latest) | Authenticates a service principal using a signed client assertion. | [example](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-a-service-principal-with-a-client-assertion) | [Service principal authentication](https://learn.microsoft.com/azure/active-directory/develop/app-objects-and-service-principals) |\n| [`ClientCertificateCredential`](https://learn.microsoft.com/javascript/api/@azure/identity/clientcertificatecredential?view=azure-node-latest) | Authenticates a service principal using a certificate. | [example](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-a-service-principal-with-a-client-certificate) | [Service principal authentication](https://learn.microsoft.com/azure/active-directory/develop/app-objects-and-service-principals) |\n| [`ClientSecretCredential`](https://learn.microsoft.com/javascript/api/@azure/identity/clientsecretcredential?view=azure-node-latest)           | Authenticates a service principal using a secret.      | [example](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-a-service-principal-with-a-client-secret)      | [Service principal authentication](https://learn.microsoft.com/azure/active-directory/develop/app-objects-and-service-principals) |\n\n### Authenticate users\n\n| Credential                                                                                                                                      | Usage                                                                                                                                                                                                                     | Example                                                                                                                                                                          | Reference                                                                                                        |\n| ----------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------- |\n| [`AuthorizationCodeCredential`](https://learn.microsoft.com/javascript/api/@azure/identity/authorizationcodecredential?view=azure-node-latest)   | Authenticates a user with a previously obtained authorization code.                                                                                                                                                       | [example](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-a-user-account-with-auth-code-flow)          | [OAuth2 authentication code](https://learn.microsoft.com/azure/active-directory/develop/v2-oauth2-auth-code-flow) |\n| [`DeviceCodeCredential`](https://learn.microsoft.com/javascript/api/@azure/identity/devicecodecredential?view=azure-node-latest)                 | Interactively authenticates a user on devices with limited UI.                                                                                                                                                            | [example](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-a-user-account-with-device-code-flow)        | [Device code authentication](https://learn.microsoft.com/azure/active-directory/develop/v2-oauth2-device-code)    |\n| [`InteractiveBrowserCredential`](https://learn.microsoft.com/javascript/api/@azure/identity/interactivebrowsercredential?view=azure-node-latest) | Interactively authenticates a user with the default system browser. Read more about how this happens [here](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/identity/identity/interactive-browser-credential.md). | [example](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-a-user-account-interactively-in-the-browser) | [OAuth2 authentication code](https://learn.microsoft.com/azure/active-directory/develop/v2-oauth2-auth-code-flow) |\n| [`OnBehalfOfCredential`](https://learn.microsoft.com/javascript/api/@azure/identity/onbehalfofcredential?view=azure-node-latest)                 | Propagates the delegated user identity and permissions through the request chain                                                                                                                                          | | [On-behalf-of authentication](https://learn.microsoft.com/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow)\n| [`UsernamePasswordCredential`](https://learn.microsoft.com/javascript/api/@azure/identity/usernamepasswordcredential?view=azure-node-latest)     | Authenticates a user with a username and password.                                                                                                                                                                        | [example](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-a-user-account-with-username-and-password)   | [Username + password authentication](https://learn.microsoft.com/azure/active-directory/develop/v2-oauth-ropc)    |\n\n### Authenticate via development tools\n\n| Credential                                                                                                                                | Usage                                                             | Example                                                                                                                                                                   | Reference                                                                                           |\n| ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------- |\n| [`AzureCliCredential`](https://learn.microsoft.com/javascript/api/@azure/identity/azureclicredential?view=azure-node-latest)               | Authenticate in a development environment with the Azure CLI.     | [example](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-a-user-account-with-azure-cli)        | [Azure CLI authentication](https://learn.microsoft.com/cli/azure/authenticate-azure-cli)             |\n| [`AzureDeveloperCliCredential`](https://learn.microsoft.com/javascript/api/@azure/identity/azuredeveloperclicredential?view=azure-node-latest)        | Authenticate in a development environment with the enabled user or service principal in Azure Developer CLI.     |         | [Azure Developer CLI Reference](https://learn.microsoft.com/azure/developer/azure-developer-cli/reference)             |\n| [`AzurePowerShellCredential`](https://learn.microsoft.com/javascript/api/@azure/identity/azurepowershellcredential?view=azure-node-latest) | Authenticate in a development environment using Azure PowerShell. | [example](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-a-user-account-with-azure-powershell) | [Azure PowerShell authentication](https://learn.microsoft.com/powershell/azure/authenticate-azureps) |\n| [`VisualStudioCodeCredential`](https://learn.microsoft.com/javascript/api/@azure/identity/visualstudiocodecredential?view=azure-node-latest)\t| Authenticates as the user signed in to the Visual Studio Code Azure Account extension.|  |\t[VS Code Azure Account extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode.azure-account)\n\n## Environment variables\n\n`DefaultAzureCredential` and `EnvironmentCredential` can be configured with environment variables. Each type of authentication requires values for specific variables.\n\n#### Service principal with secret\n\n| Variable name         | Value                                   |\n| --------------------- | --------------------------------------- |\n| `AZURE_CLIENT_ID`     | ID of an Azure AD application           |\n| `AZURE_TENANT_ID`     | ID of the application's Azure AD tenant |\n| `AZURE_CLIENT_SECRET` | one of the application's client secrets |\n\n#### Service principal with certificate\n\n| Variable name                       | Value                                                        |\n| ----------------------------------- | ------------------------------------------------------------ |\n| `AZURE_CLIENT_ID`                   | ID of an Azure AD application                                |\n| `AZURE_TENANT_ID`                   | ID of the application's Azure AD tenant                      |\n| `AZURE_CLIENT_CERTIFICATE_PATH`     | path to a PEM-encoded certificate file including private key |\n| `AZURE_CLIENT_CERTIFICATE_PASSWORD` | password of the certificate file, if any                     |\n\n#### Username and password\n\n| Variable name     | Value                                   |\n| ----------------- | --------------------------------------- |\n| `AZURE_CLIENT_ID` | ID of an Azure AD application           |\n| `AZURE_TENANT_ID` | ID of the application's Azure AD tenant |\n| `AZURE_USERNAME`  | a username (usually an email address)   |\n| `AZURE_PASSWORD`  | that user's password                    |\n\nConfiguration is attempted in the above order. For example, if values for a client secret and certificate are both present, the client secret will be used.\n\n## Token caching\n\nToken caching is a feature provided by the Azure Identity library that allows apps to:\n\n- Cache tokens in memory (default) and on disk (opt-in).\n- Improve resilience and performance.\n- Reduce the number of requests made to Azure AD to obtain access tokens.\n\nThe Azure Identity library offers both in-memory and persistent disk caching. For more details, see the [token caching documentation](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/identity/identity/TOKEN_CACHING.md).\n\n## Troubleshooting\n\n### Error handling\n\nCredentials raise `AuthenticationError` when they fail to authenticate. This class has a `message` field which describes why authentication failed. An `AggregateAuthenticationError` will be raised by `ChainedTokenCredential` with an `errors` field containing an array of errors from each credential in the chain.\n\n### Logging\n\nEnabling logging may help uncover useful information about failures.\n\nTo see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`.\nYou can read this environment variable from the _.env_ file by explicitly specifying a file path:\n\n```javascript\nrequire(\"dotenv\").config({ path: \".env\" });\n```\n\nAlternatively, logging can be enabled at runtime by calling `setLogLevel` from the `@azure/logger` package:\n\n```typescript\nimport { setLogLevel } from \"@azure/logger\";\n\nsetLogLevel(\"info\");\n```\n\nIn cases where the authenticate code might be running in an environment with more than one credential available,\nthe `@azure/identity` package offers a unique form of logging. On the optional parameters for every credential,\ndevelopers can set `allowLoggingAccountIdentifiers` to true in the\n`loggingOptions` to log information specific to the authenticated account after\neach successful authentication, including the Client ID, the Tenant ID, the\nObject ID of the authenticated user, and if possible the User Principal Name.\n\nFor example, using the `DefaultAzureCredential`:\n\n```js\nimport { setLogLevel } from \"@azure/logger\";\n\nsetLogLevel(\"info\");\n\nconst credential = new DefaultAzureCredential({\n  loggingOptions: { allowLoggingAccountIdentifiers: true },\n});\n```\n\nOnce that credential authenticates, the following message will appear in the logs (with the real information instead of `HIDDEN`):\n\n```\nazure:identity:info [Authenticated account] Client ID: HIDDEN. Tenant ID: HIDDEN. User Principal Name: HIDDEN. Object ID (user): HIDDEN\n```\n\nFor assistance with troubleshooting, see the [troubleshooting guide](https://aka.ms/azsdk/js/identity/troubleshoot).\n\n## Next steps\n\n### Read the documentation\n\nAPI documentation for this library can be found on our [documentation site](https://learn.microsoft.com/javascript/api/@azure/identity).\n\n### Client library support\n\nClient and management libraries listed on the [Azure SDK releases page](https://azure.github.io/azure-sdk/releases/latest/js.html) that support Azure AD authentication accept credentials from this library. Learn more about using these libraries in their documentation, which is linked from the releases page.\n\n### Known issues\n\n#### Azure AD B2C support\n\nThis library doesn't support the [Azure AD B2C](https://learn.microsoft.com/azure/active-directory-b2c/overview) service.\n\nFor other open issues, see the library's [GitHub repository](https://github.com/Azure/azure-sdk-for-js/issues?q=is%3Aopen+is%3Aissue+label%3AAzure.Identity).\n\n### Provide feedback\n\nIf you encounter bugs or have suggestions, please [open an issue](https://github.com/Azure/azure-sdk-for-js/issues).\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n[1]: https://azuresdkdocs.blob.core.windows.net/$web/javascript/azure-identity/1.0.0/classes/defaultazurecredential.html\n[2]: https://azuresdkdocs.blob.core.windows.net/$web/javascript/azure-identity/1.0.0/classes/managedidentitycredential.html\n[3]: https://azuresdkdocs.blob.core.windows.net/$web/javascript/azure-identity/1.0.0/classes/environmentcredential.html\n[4]: https://azuresdkdocs.blob.core.windows.net/$web/javascript/azure-identity/1.0.0/classes/clientsecretcredential.html\n[5]: https://azuresdkdocs.blob.core.windows.net/$web/javascript/azure-identity/1.0.0/classes/clientcertificatecredential.html\n[6]: https://azuresdkdocs.blob.core.windows.net/$web/javascript/azure-identity/1.0.0/classes/devicecodecredential.html\n[7]: https://azuresdkdocs.blob.core.windows.net/$web/javascript/azure-identity/1.0.0/classes/authorizationcodecredential.html\n[8]: https://azuresdkdocs.blob.core.windows.net/$web/javascript/azure-identity/1.0.0/classes/interactivebrowsercredential.html\n[9]: https://azuresdkdocs.blob.core.windows.net/$web/javascript/azure-identity/1.0.0/classes/usernamepasswordcredential.html\n[azure_cli]: https://learn.microsoft.com/cli/azure\n[azure_powershell]: https://learn.microsoft.com/powershell/azure/\n[azureclilogin_image]: https://raw.githubusercontent.com/Azure/azure-sdk-for-js/main/sdk/identity/identity/images/AzureCliLogin.png\n[azureclilogindevicecode_image]: https://raw.githubusercontent.com/Azure/azure-sdk-for-js/main/sdk/identity/identity/images/AzureCliLoginDeviceCode.png\n[azurepowershelllogin_image]: https://raw.githubusercontent.com/Azure/azure-sdk-for-js/main/sdk/identity/identity/images/AzurePowerShellLogin.png\n[defaultauthflow_image]: https://raw.githubusercontent.com/Azure/azure-sdk-for-js/main/sdk/identity/identity/images/mermaidjs/DefaultAzureCredentialAuthFlow.svg\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fidentity%2Fidentity%2FREADME.png)\n",
        "repo_name": "identity/identity",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/identity/identity",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure ImageBuilder client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure ImageBuilder client.\n\nAzure Virtual Machine Image Builder Client\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/imagebuilder/arm-imagebuilder) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-imagebuilder) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-imagebuilder) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-imagebuilder` package\n\nInstall the Azure ImageBuilder client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-imagebuilder\n```\n\n### Create and authenticate a `ImageBuilderClient`\n\nTo create a client object to access the Azure ImageBuilder API, you will need the `endpoint` of your Azure ImageBuilder resource and a `credential`. The Azure ImageBuilder client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure ImageBuilder resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure ImageBuilder** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { ImageBuilderClient } = require(\"@azure/arm-imagebuilder\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new ImageBuilderClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new ImageBuilderClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### ImageBuilderClient\n\n`ImageBuilderClient` is the primary interface for developers using the Azure ImageBuilder client library. Explore the methods on this client object to understand the different features of the Azure ImageBuilder service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fimagebuilder%2Farm-imagebuilder%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "imagebuilder/arm-imagebuilder",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/imagebuilder/arm-imagebuilder",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure OpenTelemetry Instrumentation library for JavaScript\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge, and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n- The [@opentelemetry/instrumentation][otel_instrumentation] package.\n\nYou'll need to configure the OpenTelemetry SDK in order to produce Telemetry data. While configuring OpenTelemetry is outside the scope of this README, we encourage you to review the [OpenTelemetry documentation][otel_documentation] in order to get started using OpenTelemetry.\n\n### Install the `@azure/opentelemetry-instrumentation-azure-sdk` package\n\nInstall the Azure OpenTelemetry Instrumentation client library with `npm`:\n\n```bash\nnpm install @azure/opentelemetry-instrumentation-azure-sdk\n```\n\n### Browser support\n\n#### JavaScript Bundle\n\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n- The **createAzureSdkInstrumentation** function is the main hook exported by this library which provides a way to create an Azure SDK Instrumentation object to be registered with OpenTelemetry.\n\n## Examples\n\n### Enable OpenTelemetry instrumentation\n\n```javascript\nconst { registerInstrumentations } = require(\"@opentelemetry/instrumentation\");\nconst { createAzureSdkInstrumentation } = require(\"@azure/opentelemetry-instrumentation-azure-sdk\");\n\n// Set-up and configure a Node Tracer Provider using OpenTelemetry\nconst opentelemetry = require(\"@opentelemetry/api\");\nconst { NodeTracerProvider } = require(\"@opentelemetry/sdk-trace-node\");\nconst { SimpleSpanProcessor, ConsoleSpanExporter } = require(\"@opentelemetry/tracing\");\n\nconst provider = new NodeTracerProvider();\nprovider.addSpanProcessor(new SimpleSpanProcessor(new ConsoleSpanExporter()));\nprovider.register();\n\nregisterInstrumentations({\n  instrumentations: [createAzureSdkInstrumentation()],\n});\n\n// Continue to import any Azure SDK client libraries after registering the instrumentation.\n\nconst { keyClient } = require(\"@azure/keyvault-keys\");\n\nasync function main() {\n  // Tracing is now enabled using automatic span propagation with an active context.\n  await keyClient.getKey(\"MyKeyName\");\n\n  // If your scenario requires manual span propagation, all Azure client libraries\n  // support explicitly passing a parent context via an `options` parameter.\n  // Get a tracer from a registered provider, create a span, and get the current context.\n  const tracer = opentelemetry.trace.getTracer(\"my-tracer\");\n  const span = tracer.startSpan(\"main\");\n  const ctx = opentelemetry.trace.setSpan(opentelemetry.context.active(), span);\n\n  await keyClient.getKey(\"MyKeyName\", {\n    tracingOptions: {\n      // ctx will be used as the parent context for all operations.\n      tracingContext: ctx,\n    },\n  });\n}\n```\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\n\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for Javascript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Ftemplate%2Ftemplate%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[otel_instrumentation]: https://www.npmjs.com/package/@opentelemetry/instrumentation\n[otel_documentation]: https://opentelemetry.io/docs/js/\n",
        "repo_name": "instrumentation/opentelemetry-instrumentation-azure-README.md",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/instrumentation/opentelemetry-instrumentation-azure-sdk",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure IoT Models Repository client library for JavaScript\n\nThis package contains an isomorphic Client Library for Azure IoT Models Repository in JavaScript. Use the Azure IoT Models Repository library for JavaScript to pull DTDL files from remote endpoints.\n\nKey links:\n\n- [Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/iot/iot-modelsrepository)\n- [Package (npm)](https://www.npmjs.com/package/@azure/iot-modelsrepository/)\n- Samples\n\n## Getting started\n\n## Key concepts\n\nThe Azure IoT Models Repository library for JavaScript provides functionality for working with the [Azure IoT PlugAndPlay Models Repository](https://devicemodels.azure.com/). It does not provide full CRUD operations, simply the ability to get models from the Models Repository or any other URL endpoints. It does not require any authentication.\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge, and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### How to Install\n\nThe preferred way to install the Azure IoT Models Repository client library for JavaScript is to use the npm package manager. Type the following into a terminal window:\n\n```\nnpm install @azure/iot-modelsrepository\n```\n\n## Examples\n\n### Initializing the Models Repository Client\n\n```ts\n// When no URI is provided for instantiation, the Azure IoT Models Repository global endpoint\n// https://devicemodels.azure.com/ is used and the model dependency resolution\n// configuration is set to TryFromExpanded.\nconst { ModelsRepositoryClient } = require(\"@azure/iot-modelsrepository\");\n\nconst client = new ModelsRepositoryClient();\nconsole.log(`Initialized client point to global endpoint: ${client.repositoryLocation}`);\n```\n\n```ts\n// The client will also work with a local filesystem URI. This example shows initalization\n// with a local URI and disabling model dependency resolution.\nconst client = new ModelsRepositoryClient({\n  repositoryLocation: \"file:///path/to/repository/\",\n  dependencyResolution: \"disabled\",\n});\nconsole.log(`Initialized client pointing to local path: ${client.repositoryLocation}`);\n```\n\n### Publish Models\n\nPublishing models to the models repository requires [exercising](https://docs.microsoft.com/azure/iot-pnp/concepts-model-repository#publish-a-model) common GitHub workflows.\n\n### Get Models\n\nAfter publishing, your model(s) will be available for consumption from the global repository endpoint. The following snippet shows how to retrieve the corresponding JSON-LD content.\n\n```ts\n// Global endpoint client\nconst client = new ModelsRepositoryClient();\n\n// The output of getModels() will include at least the definition for the target dtmi.\n// If the model dependency resolution configuration is not disabled, then models in which the\n// target dtmi depends on will also be included in the returned object (mapping dtmis to model objects).\nconst dtmi = \"dtmi:com:example:TemperatureController;1\";\nconst models = await client.getModels(dtmi, { dependencyResolution: \"tryFromExpanded\" });\n\n// In this case the above dtmi has 2 model dependencies.\n// dtmi:com:example:Thermostat;1 and dtmi:azure:DeviceManagement:DeviceInformation;1\nconsole.log(`${dtmi} resolved in ${Object.keys(models).length} interfaces.`);\n```\n\nGitHub pull-request workflows are a core aspect of the IoT Models Repository service. To submit models, the user is expected to fork and clone the global [models repository project](https://github.com/Azure/iot-plugandplay-models) then iterate against the local copy. Changes would then be pushed to the fork (ideally in a new branch) and a PR created against the global repository.\n\nTo support this workflow and similar use cases, the client supports initialization with a local file-system URI. You can use this for example, to test and ensure newly added models to the locally cloned models repository are in their proper locations.\n\n```ts\n// Local sample repository client\nconst client = new ModelsRepositoryClient(`file:///path/to/repository/`);\n\n// The output of getModels() will include at least the definition for the target dtmi.\n// If the model dependency resolution configuration is not disabled, then models in which the\n// target dtmi depends on will also be included in the returned IDictionary<string, string>.\nconst dtmi = \"dtmi:com:example:TemperatureController;1\";\nconst models = await client.getModels(dtmi);\n\n// In this case the above dtmi has 2 model dependencies.\n// dtmi:com:example:Thermostat;1 and dtmi:azure:DeviceManagement:DeviceInformation;1\nconsole.log(`${dtmi} resolved in ${models.keys().length} interfaces.`);\n```\n\nYou are also able to get definitions for multiple root models at a time by leveraging the `GetModels` overload.\n\n```ts\n// Global endpoint client\nconst client = new ModelsRepositoryClient();\n\nconst dtmis = [\n  \"dtmi:com:example:TemperatureController;1\",\n  \"dtmi:com:example:azuresphere:sampledevice;1\",\n];\nconst models = await client.getModels(dtmis);\n\n// In this case the dtmi \"dtmi:com:example:TemperatureController;1\" has 2 model dependencies\n// and the dtmi \"dtmi:com:example:azuresphere:sampledevice;1\" has no additional dependencies.\n// The returned IDictionary will include 4 models.\nconsole.log(`${dtmis.toString()} resolved in ${models.keys().length} interfaces.`);\n```\n\n### Digital Twins Model Parser Integration\n\n_When the Digital Twins Model Parser is completed, we will update you with information on how to integrate this client._\n\n### DtmiConventions utility functions\n\nThe IoT Models Repository applies a set of conventions for organizing digital twin models. This package exposes two auxiliary functions related to `DtmiConventions`, `getModelUri` and `isValidDtmi`. These same functions are used throughout the client.\n\n```ts\n// This snippet shows how to validate a given DTMI string is well-formed.\n\n// Returns true\nisValidDtmi(\"dtmi:com:example:Thermostat;1\");\n\n// Returns false\nisValidDtmi(\"dtmi:com:example:Thermostat\");\n```\n\n```ts\n// This snippet shows obtaining a fully qualified path to a model file.\n\n// Local repository example\nconst localRepositoryUri: string = \"file:///path/to/repository/\";\nconst fullyQualifiedModelPath: string = getModelUri(\n  \"dtmi:com:example:Thermostat;1\",\n  localRepositoryUri\n);\n\n// Prints '/path/to/repository/dtmi/com/example/thermostat-1.json'\nconsole.log(fullyQualifiedModelPath);\n\n// Remote repository example\nconst remoteRepositoryUri: string = \"https://contoso.com/models/\";\nconst fullyQualifiedModelPath: string = GetModelUri(\n  \"dtmi:com:example:Thermostat;1\",\n  remoteRepositoryUri\n);\n\n// Prints 'https://contoso.com/models/dtmi/com/example/thermostat-1.json'\nconsole.log(fullyQualifiedModelPath);\n```\n\n---\n\n## Troubleshooting\n\n- If you run into an error, first make sure the model you are access exists at the location you are attempting to get it from.\n\n## Next steps\n\n- Review the [DTDL Spec](https://docs.microsoft.com/azure/iot-pnp/concepts-model-parser).\n- Understand the [Device Models Repository](https://devicemodels.azure.com/).\n- Code a IoT Plug and Play 'Device' using the [Azure IoT SDK for Node](https://github.com/Azure/azure-iot-sdk-node/tree/master/device/samples#plug-and-play-examples).\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a\nContributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us\nthe rights to use your contribution. For details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide\na CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions\nprovided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or\ncontact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n",
        "repo_name": "iot/iot-modelsrepository",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/iot/iot-modelsrepository",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure IotCentral client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure IotCentral client.\n\nUse this API to manage IoT Central Applications in your Azure subscription.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/iotcentral/arm-iotcentral) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-iotcentral) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-iotcentral?view=azure-node-preview) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-iotcentral` package\n\nInstall the Azure IotCentral client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-iotcentral\n```\n\n### Create and authenticate a `IotCentralClient`\n\nTo create a client object to access the Azure IotCentral API, you will need the `endpoint` of your Azure IotCentral resource and a `credential`. The Azure IotCentral client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure IotCentral resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure IotCentral** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { IotCentralClient } = require(\"@azure/arm-iotcentral\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new IotCentralClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new IotCentralClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### IotCentralClient\n\n`IotCentralClient` is the primary interface for developers using the Azure IotCentral client library. Explore the methods on this client object to understand the different features of the Azure IotCentral service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fiotcentral%2Farm-iotcentral%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "iotcentral/arm-iotcentral",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/iotcentral/arm-iotcentral",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure iotHub client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure iotHub client.\n\nUse this API to manage the IoT hubs in your Azure subscription.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/iothub/arm-iothub-profile-2020-09-01-hybrid) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-iothub-profile-2020-09-01-hybrid) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-iothub-profile-2020-09-01-hybrid?view=azure-node-preview) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-iothub-profile-2020-09-01-hybrid` package\n\nInstall the Azure iotHub client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-iothub-profile-2020-09-01-hybrid\n```\n\n### Create and authenticate a `IotHubClient`\n\nTo create a client object to access the Azure iotHub API, you will need the `endpoint` of your Azure iotHub resource and a `credential`. The Azure iotHub client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure iotHub resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure iotHub** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { IotHubClient } = require(\"@azure/arm-iothub-profile-2020-09-01-hybrid\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new IotHubClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new IotHubClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### IotHubClient\n\n`IotHubClient` is the primary interface for developers using the Azure iotHub client library. Explore the methods on this client object to understand the different features of the Azure iotHub service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fiothub%2Farm-iothub-profile-2020-09-01-hybrid%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "iothub/arm-iothub-profile-2020-09-01-hybrid",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/iothub/arm-iothub-profile-2020-09-01-hybrid",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure iotHub client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure iotHub client.\n\nUse this API to manage the IoT hubs in your Azure subscription.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/iothub/arm-iothub) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-iothub) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-iothub?view=azure-node-preview) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-iothub` package\n\nInstall the Azure iotHub client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-iothub\n```\n\n### Create and authenticate a `IotHubClient`\n\nTo create a client object to access the Azure iotHub API, you will need the `endpoint` of your Azure iotHub resource and a `credential`. The Azure iotHub client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure iotHub resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure iotHub** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { IotHubClient } = require(\"@azure/arm-iothub\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new IotHubClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new IotHubClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### IotHubClient\n\n`IotHubClient` is the primary interface for developers using the Azure iotHub client library. Explore the methods on this client object to understand the different features of the Azure iotHub service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fiothub%2Farm-iothub%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "iothub/arm-iothub",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/iothub/arm-iothub",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure KeyVaultManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure KeyVaultManagement client.\n\nThe Azure management API provides a RESTful set of web services that interact with Azure Key Vault.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/keyvault/arm-keyvault-profile-2020-09-01-hybrid) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-keyvault-profile-2020-09-01-hybrid) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-keyvault-profile-2020-09-01-hybrid) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-keyvault-profile-2020-09-01-hybrid` package\n\nInstall the Azure KeyVaultManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-keyvault-profile-2020-09-01-hybrid\n```\n\n### Create and authenticate a `KeyVaultManagementClient`\n\nTo create a client object to access the Azure KeyVaultManagement API, you will need the `endpoint` of your Azure KeyVaultManagement resource and a `credential`. The Azure KeyVaultManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure KeyVaultManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure KeyVaultManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { KeyVaultManagementClient } = require(\"@azure/arm-keyvault-profile-2020-09-01-hybrid\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new KeyVaultManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new KeyVaultManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### KeyVaultManagementClient\n\n`KeyVaultManagementClient` is the primary interface for developers using the Azure KeyVaultManagement client library. Explore the methods on this client object to understand the different features of the Azure KeyVaultManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fkeyvault%2Farm-keyvault-profile-2020-09-01-hybrid%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "keyvault/arm-keyvault-profile-2020-09-01-hybrid",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/keyvault/arm-keyvault-profile-2020-09-01-hybrid",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure KeyVaultManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure KeyVaultManagement client.\n\nThe Azure management API provides a RESTful set of web services that interact with Azure Key Vault.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/keyvault/arm-keyvault) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-keyvault) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-keyvault) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-keyvault` package\n\nInstall the Azure KeyVaultManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-keyvault\n```\n\n### Create and authenticate a `KeyVaultManagementClient`\n\nTo create a client object to access the Azure KeyVaultManagement API, you will need the `endpoint` of your Azure KeyVaultManagement resource and a `credential`. The Azure KeyVaultManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure KeyVaultManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure KeyVaultManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { KeyVaultManagementClient } = require(\"@azure/arm-keyvault\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new KeyVaultManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new KeyVaultManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### KeyVaultManagementClient\n\n`KeyVaultManagementClient` is the primary interface for developers using the Azure KeyVaultManagement client library. Explore the methods on this client object to understand the different features of the Azure KeyVaultManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fkeyvault%2Farm-keyvault%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "keyvault/arm-keyvault",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/keyvault/arm-keyvault",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Key Vault Administration client library for JavaScript\n\nAzure Key Vault Managed HSM is a fully-managed, highly-available, single-tenant, standards-compliant cloud service that enables you to safeguard cryptographic keys for your cloud applications using FIPS 140-2 Level 3 validated HSMs. If you would like to know more about Azure Key Vault Managed HSM, you may want to review: [What is Azure Key Vault Managed HSM?][managedhsm]\n\nThe package `@azure/keyvault-admin` provides support for administrative Key Vault tasks such as full backup / restore and key-level role-based access control (RBAC).\n\n> Note: The Administration library only works with [Azure Key Vault Managed HSM][managedhsm] - functions targeting a Key Vault will fail.\n>\n> Note: This package cannot be used in the browser due to Azure Key Vault service limitations, please refer to [this document](https://github.com/Azure/azure-sdk-for-js/blob/main/samples/cors/ts/README.md) for guidance.\n\nKey links:\n\n- [Source code][package-gh]\n- [Package (npm)][package-npm]\n- [API Reference Documentation][docs]\n- [Product documentation][docs-service]\n- [Samples][samples]\n\n## Getting started\n\n### Install the package\n\nInstall the Azure Key Vault administration client library for JavaScript and TypeScript with [NPM][npm]:\n\n```PowerShell\nnpm install @azure/keyvault-admin\n```\n\n### Configure TypeScript\n\nTypeScript users need to have Node type definitions installed:\n\n```bash\nnpm install @types/node\n```\n\nYou also need to enable `compilerOptions.allowSyntheticDefaultImports` in your tsconfig.json. Note that if you have enabled `compilerOptions.esModuleInterop`, `allowSyntheticDefaultImports` is enabled by default. See [TypeScript's compiler options handbook][compiler-options] for more information.\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n\n### Prerequisites\n\n- An [Azure subscription](https://azure.microsoft.com/free/)\n- An existing [Key Vault Managed HSM][azure_keyvault_mhsm]. If you need to create a Managed HSM, you can do so using the Azure CLI by following the steps in [this document][azure_keyvault_mhsm_cli].\n\n## Authenticate the client\n\nIn order to interact with the Azure Key Vault service, you will need to create an instance of either the [`KeyVaultAccessControlClient`](#create-keyvaultaccesscontrolclient) class or the [`KeyVaultBackupClient`](#create-keyvaultbackupclient) class, as well as a **vault url** (which you may see as \"DNS Name\" in the Azure Portal) and a credential object. The examples shown in this document use a credential object named [`DefaultAzureCredential`][default_azure_credential], which is appropriate for most scenarios, including local development and production environments. Additionally, we recommend using a [managed identity][managed_identity] for authentication in production environments.\n\nYou can find more information on different ways of authenticating and their corresponding credential types in the [Azure Identity documentation][azure_identity].\n\n### Create KeyVaultAccessControlClient\n\nOnce you've authenticated with [the authentication method that suits you best][default_azure_credential], you can create a `KeyVaultAccessControlClient` as follows, substituting in your Managed HSM URL in the constructor:\n\n```javascript\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { KeyVaultAccessControlClient } = require(\"@azure/keyvault-admin\");\n\nconst credentials = new DefaultAzureCredential();\n\nconst client = new KeyVaultAccessControlClient(`<your Managed HSM URL>`, credentials);\n```\n\n### Create KeyVaultBackupClient\n\nOnce you've authenticated with [the authentication method that suits you best][default_azure_credential], you can create a `KeyVaultBackupClient` as follows, substituting in your Managed HSM URL in the constructor:\n\n```javascript\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { KeyVaultBackupClient } = require(\"@azure/keyvault-admin\");\n\nconst credentials = new DefaultAzureCredential();\n\nconst client = new KeyVaultBackupClient(`<your Managed HSM URL>`, credentials);\n```\n\n## Key concepts\n\n### KeyVaultRoleDefinition\n\nA Role Definition is a collection of permissions. A role definition defines the operations that can be performed, such as read, write, and delete. It can also define the operations that are excluded from allowed operations.\n\nRole definitions can be listed and specified as part of a `KeyVaultRoleAssignment`.\n\n### KeyVaultRoleAssignment\n\nA Role Assignment is the association of a Role Definition to a service principal. They can be created, listed, fetched individually, and deleted.\n\n### KeyVaultAccessControlClient\n\nA `KeyVaultAccessControlClient` provides operations allowing for management of Role Definitions (instances of `KeyVaultRoleDefinition`) and Role Assignments (instances of `KeyVaultRoleAssignment`).\n\n### KeyVaultBackupClient\n\nA `KeyVaultBackupClient` provides operations for performing full key backups, full key restores, and selective key restores.\n\n### Long running operations\n\nThe operations done by the `KeyVaultBackupClient` may take as much time as needed by the Azure resources, requiring a client layer to keep track, serialize, and resume the operations through the lifecycle of the programs that wait for them to finish. This is done via a common abstraction through the package [@azure/core-lro][core-lro].\n\nThe `KeyVaultBackupClient` offers three methods that execute long running operations:\n\n- `beginBackup`, starts generating a backup of an Azure Key Vault Managed HSM on the specified Storage Blob account.\n- `beginRestore`, starts restoring all key materials using the SAS token pointing to a previously stored Azure Blob storage backup folder.\n- `beginSelectiveRestore`, starts restoring all key versions of a given key using user supplied SAS token pointing to a previously stored Azure Blob storage backup folder.\n\nThe methods that begin long running operations return a poller that allows you to wait indefinitely until the operation is complete. More information is available in the examples below.\n\n## Examples\n\nWe have samples both in JavaScript and TypeScript that show the access control and backup/restore features in this package. Please follow the corresponding readmes for detailed steps to run the samples.\n\n- [Readme for JavaScript samples](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/keyvault/keyvault-admin/samples/v4/javascript/README.md)\n- [Readme for TypeScript samples](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/keyvault/keyvault-admin/samples/v4/typescript/README.md)\n\n## Troubleshooting\n\nSee our [troubleshooting guide](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/keyvault/keyvault-admin/TROUBLESHOOTING.md) for details on how to diagnose various failure scenarios.\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\n\nsetLogLevel(\"info\");\n```\n\n## Next steps\n\nYou can find more code samples through the following links:\n\n- [Key Vault Administration Samples (JavaScript)](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/keyvault/keyvault-admin/samples/v4/javascript)\n- [Key Vault Administration Samples (TypeScript)](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/keyvault/keyvault-admin/samples/v4/typescript)\n- [Key Vault Administration Test Cases](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/keyvault/keyvault-admin/test/)\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fkeyvault%2Fkeyvault-admin%2FREADME.png)\n\n<!-- LINKS -->\n\n[compiler-options]: https://www.typescriptlang.org/docs/handbook/compiler-options.html\n[core-lro]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/core-lro\n[docs-service]: https://azure.microsoft.com/services/key-vault/\n[docs]: https://docs.microsoft.com/javascript/api/@azure/keyvault-admin\n[managedhsm]: https://docs.microsoft.com/azure/key-vault/managed-hsm/overview\n[npm]: https://www.npmjs.com/\n[package-gh]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/keyvault/keyvault-admin\n[package-npm]: https://www.npmjs.com/package/@azure/keyvault-admin\n[samples]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/keyvault/keyvault-admin/samples\n[azure_keyvault_mhsm]: https://docs.microsoft.com/azure/key-vault/managed-hsm/overview\n[azure_keyvault_mhsm_cli]: https://docs.microsoft.com/azure/key-vault/managed-hsm/quick-create-cli\n[default_azure_credential]: https://docs.microsoft.com/java/api/overview/azure/identity-readme?view=azure-java-stable#defaultazurecredential\n[managed_identity]: https://docs.microsoft.com/azure/active-directory/managed-identities-azure-resources/overview\n[azure_identity]: https://docs.microsoft.com/java/api/overview/azure/identity-readme?view=azure-java-stable\n",
        "repo_name": "keyvault/keyvault-admin",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/keyvault/keyvault-admin",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Key Vault Certificates client library for JavaScript\n\nAzure Key Vault is a cloud service that provides secure storage and automated management of certificates used throughout a cloud application. Multiple certificates, and multiple versions of the same certificate, can be kept in the Azure Key Vault. Each certificate in the vault has a policy associated with it which controls the issuance and lifetime of the certificate, along with actions to be taken as certificates near expiry.\n\nIf you would like to know more about Azure Key Vault, you may want to review: [What is Azure Key Vault?](https://docs.microsoft.com/azure/key-vault/key-vault-overview)\n\nUse the client library for Azure Key Vault Certificates in your Node.js application to:\n\n- Get, set and delete a certificate.\n- Update a certificate, its attributes, issuer, policy, operation and contacts.\n- Backup and restore a certificate.\n- Get, purge or recover a deleted certificate.\n- Get all the versions of a certificate.\n- Get all certificates.\n- Get all deleted certificates.\n\n> Note: This package cannot be used in the browser due to Azure Key Vault service limitations, please refer to [this document](https://github.com/Azure/azure-sdk-for-js/blob/main/samples/cors/ts/README.md) for guidance.\n\nKey links:\n\n- [Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/keyvault/keyvault-certificates)\n- [Package (npm)](https://www.npmjs.com/package/@azure/keyvault-certificates)\n- [API Reference Documentation](https://docs.microsoft.com/javascript/api/@azure/keyvault-certificates)\n- [Product documentation](https://azure.microsoft.com/services/key-vault/)\n- [Samples](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/keyvault/keyvault-certificates/samples)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n\n### Prerequisites\n\n- An [Azure subscription](https://azure.microsoft.com/free/)\n- An existing [Azure Key Vault][azure_keyvault]. If you need to create a key vault, you can do so in the Azure Portal by following the steps in [this document][azure_keyvault_portal]. Alternatively, use the Azure CLI by following [these steps][azure_keyvault_cli].\n\n### Install the package\n\nInstall the Azure Key Vault Certificates client library using npm\n\n`npm install @azure/keyvault-certificates`\n\n### Install the identity library\n\nKey Vault clients authenticate using the Azure Identity Library. Install it as well using npm\n\n`npm install @azure/identity`\n\n### Configure TypeScript\n\nTypeScript users need to have Node type definitions installed:\n\n```bash\nnpm install @types/node\n```\n\nYou also need to enable `compilerOptions.allowSyntheticDefaultImports` in your tsconfig.json. Note that if you have enabled `compilerOptions.esModuleInterop`, `allowSyntheticDefaultImports` is enabled by default. See [TypeScript's compiler options handbook](https://www.typescriptlang.org/docs/handbook/compiler-options.html) for more information.\n\n## Authenticating with Azure Active Directory\n\nThe Key Vault service relies on Azure Active Directory to authenticate requests to its APIs. The [`@azure/identity`](https://www.npmjs.com/package/@azure/identity) package provides a variety of credential types that your application can use to do this. The [README for `@azure/identity`](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/identity/identity/README.md) provides more details and samples to get you started.\n\nIn order to interact with the Azure Key Vault service, you will need to create an instance of the [`CertificateClient`](#creating-and-setting-a-certificate) class, a **vault url** and a credential object. The examples shown in this document use a credential object named [`DefaultAzureCredential`][default_azure_credential], which is appropriate for most scenarios, including local development and production environments. Additionally, we recommend using a [managed identity][managed_identity] for authentication in production environments.\n\nYou can find more information on different ways of authenticating and their corresponding credential types in the [Azure Identity documentation][azure_identity].\n\nHere's a quick example. First, import `DefaultAzureCredential` and `CertificateClient`:\n\n```javascript\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { CertificateClient } = require(\"@azure/keyvault-certificates\");\n```\n\nOnce these are imported, we can next connect to the key vault service:\n\n```javascript\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { CertificateClient } = require(\"@azure/keyvault-certificates\");\n\nconst credential = new DefaultAzureCredential();\n\n// Build the URL to reach your key vault\nconst vaultName = \"<YOUR KEYVAULT NAME>\";\nconst url = `https://${vaultName}.vault.azure.net`;\n\n// Lastly, create our certificates client and connect to the service\nconst client = new CertificateClient(url, credential);\n```\n\n## Key concepts\n\n- The **Certificates client** is the primary interface to interact with the API methods\n  related to certificates in the Azure Key Vault API from a JavaScript application.\n  Once initialized, it provides a basic set of methods that can be used to\n  create, read, update and delete certificates.\n- A **Certificate version** is a version of a certificate in the Key Vault.\n  Each time a user assigns a value to a unique certificate name, a new **version**\n  of that certificate is created. Retrieving a certificate by a name will always return\n  the latest value assigned, unless a specific version is provided to the\n  query.\n- **Soft delete** allows Key Vaults to support deletion and purging as two\n  separate steps, so deleted certificates are not immediately lost. This only happens if the Key Vault\n  has [soft-delete](https://docs.microsoft.com/azure/key-vault/key-vault-ovw-soft-delete)\n  enabled.\n- A **Certificate backup** can be generated from any created certificate. These backups come as\n  binary data, and can only be used to regenerate a previously deleted certificate.\n\n## Specifying the Azure Key Vault service API version\n\nBy default, this package uses the latest Azure Key Vault service version which is `7.1`. The only other version that is supported is `7.0`. You can change the service version being used by setting the option `serviceVersion` in the client constructor as shown below:\n\n```typescript\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { CertificateClient } = require(\"@azure/keyvault-certificates\");\n\nconst credential = new DefaultAzureCredential();\n\nconst vaultName = \"<YOUR KEYVAULT NAME>\";\nconst url = `https://${vaultName}.vault.azure.net`;\n\n// Change the Azure Key Vault service API version being used via the `serviceVersion` option\nconst client = new CertificateClient(url, credential, {\n  serviceVersion: \"7.0\",\n});\n```\n\n## Examples\n\nThe following sections provide code snippets that cover some of the common\ntasks using Azure Key Vault Certificates. The scenarios that are covered here consist of:\n\n- [Creating and setting a certificate](#creating-and-setting-a-certificate).\n- [Getting a Key Vault certificate](#getting-a-key-vault-certificate).\n- [Getting the full information of a certificate](#getting-the-full-information-of-a-certificate).\n- [Certificates in PEM format](#certificates-in-pem-format).\n- [List all certificates](#list-all-certificates).\n- [Updating a certificate](#updating-a-certificate).\n- [Deleting a certificate](#deleting-a-certificate).\n- [Iterating lists of certificates](#iterating-lists-of-certificates).\n\n### Creating and setting a certificate\n\n`beginCreateCertificate` creates a certificate to be stored in the Azure Key Vault. If\na certificate with the same name already exists, a new version of the\ncertificate is created.\n\n```javascript\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { CertificateClient } = require(\"@azure/keyvault-certificates\");\n\nconst credential = new DefaultAzureCredential();\n\nconst vaultName = \"<YOUR KEYVAULT NAME>\";\nconst url = `https://${vaultName}.vault.azure.net`;\n\nconst client = new CertificateClient(url, credential);\n\nconst certificateName = \"MyCertificateName\";\n\nasync function main() {\n  // Note: Sending `Self` as the `issuerName` of the certificate's policy will create a self-signed certificate.\n  await client.beginCreateCertificate(certificateName, {\n    issuerName: \"Self\",\n    subject: \"cn=MyCert\",\n  });\n}\n\nmain();\n```\n\nBesides the name of the certificate and the policy, you can also pass the following properties in a third argument with optional values:\n\n- `enabled`: A boolean value that determines whether the certificate can be used or not.\n- `tags`: Any set of key-values that can be used to search and filter certificates.\n\n```javascript\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { CertificateClient } = require(\"@azure/keyvault-certificates\");\n\nconst credential = new DefaultAzureCredential();\n\nconst vaultName = \"<YOUR KEYVAULT NAME>\";\nconst url = `https://${vaultName}.vault.azure.net`;\n\nconst client = new CertificateClient(url, credential);\n\nconst certificateName = \"MyCertificateName\";\n\n// Note: Sending `Self` as the `issuerName` of the certificate's policy will create a self-signed certificate.\nconst certificatePolicy = {\n  issuerName: \"Self\",\n  subject: \"cn=MyCert\",\n};\nconst enabled = true;\nconst tags = {\n  myCustomTag: \"myCustomTagsValue\",\n};\n\nasync function main() {\n  await client.beginCreateCertificate(certificateName, certificatePolicy, {\n    enabled,\n    tags,\n  });\n}\n\nmain();\n```\n\nCalling to `beginCreateCertificate` with the same name will create a new version of\nthe same certificate, which will have the latest provided attributes.\n\nSince Certificates take some time to get fully created, `beginCreateCertificate`\nreturns a poller object that keeps track of the underlying Long Running\nOperation according to our guidelines:\nhttps://azure.github.io/azure-sdk/typescript_design.html#ts-lro\n\nThe received poller will allow you to get the created certificate by calling to `poller.getResult()`.\nYou can also wait until the deletion finishes, either by running individual service\ncalls until the certificate is created, or by waiting until the process is done:\n\n```typescript\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { CertificateClient } = require(\"@azure/keyvault-certificates\");\n\nconst credential = new DefaultAzureCredential();\n\nconst vaultName = \"<YOUR KEYVAULT NAME>\";\nconst url = `https://${vaultName}.vault.azure.net`;\n\nconst client = new CertificateClient(url, credential);\n\nconst certificateName = \"MyCertificateName\";\nconst certificatePolicy = {\n  issuerName: \"Self\",\n  subject: \"cn=MyCert\",\n};\n\nasync function main() {\n  const poller = await client.beginCreateCertificate(certificateName, certificatePolicy);\n\n  // You can use the pending certificate immediately:\n  const pendingCertificate = poller.getResult();\n\n  // Or you can wait until the certificate finishes being signed:\n  const keyVaultCertificate = await poller.pollUntilDone();\n  console.log(keyVaultCertificate);\n}\n\nmain();\n```\n\nAnother way to wait until the certificate is signed is to do individual calls, as follows:\n\n```typescript\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { CertificateClient } = require(\"@azure/keyvault-certificates\");\nconst { delay } = require(\"@azure/core-http\");\n\nconst credential = new DefaultAzureCredential();\n\nconst vaultName = \"<YOUR KEYVAULT NAME>\";\nconst url = `https://${vaultName}.vault.azure.net`;\n\nconst client = new CertificateClient(url, credential);\n\nconst certificateName = \"MyCertificateName\";\nconst certificatePolicy = {\n  issuerName: \"Self\",\n  subject: \"cn=MyCert\",\n};\n\nasync function main() {\n  const poller = await client.beginCreateCertificate(certificateName, certificatePolicy);\n\n  while (!poller.isDone()) {\n    await poller.poll();\n    await delay(5000);\n  }\n\n  console.log(`The certificate ${certificateName} is fully created`);\n}\n\nmain();\n```\n\n### Getting a Key Vault certificate\n\nThe simplest way to read certificates back from the vault is to get a\ncertificate by name. `getCertificate` will retrieve the most recent\nversion of the certificate, along with the certificate's policy. You can\noptionally get a different version of the certificate by calling\n`getCertificateVersion` if you specify the version. `getCertificateVersion` does not return\nthe certificate's policy.\n\n```javascript\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { CertificateClient } = require(\"@azure/keyvault-certificates\");\n\nconst credential = new DefaultAzureCredential();\n\nconst vaultName = \"<YOUR KEYVAULT NAME>\";\nconst url = `https://${vaultName}.vault.azure.net`;\n\nconst client = new CertificateClient(url, credential);\n\nconst certificateName = \"MyCertificateName\";\n\nasync function main() {\n  const latestCertificate = await client.getCertificate(certificateName);\n  console.log(`Latest version of the certificate ${certificateName}: `, latestCertificate);\n  const specificCertificate = await client.getCertificateVersion(\n    certificateName,\n    latestCertificate.properties.version\n  );\n  console.log(\n    `The certificate ${certificateName} at the version ${latestCertificate.properties.version}: `,\n    specificCertificate\n  );\n}\n\nmain();\n```\n\n### Getting the full information of a certificate\n\nAzure Key Vault's design makes sharp distinctions between Keys,\nSecrets and Certificates. The Key Vault service's Certificates\nfeatures were designed making use of it's Keys and Secrets capabilities.\nLet's evaluate the composition of a Key Vault Certificate:\n\n> When a Key Vault certificate is created, an addressable key\n> and secret are also created with the same name. The Key Vault\n> key allows key operations and the Key Vault secret allows retrieval\n> of the certificate value as a secret. A Key Vault certificate\n> also contains public x509 certificate metadata.\n> _Source: [Composition of a Certificate][composition-of-a-certificate]._\n\nKnowing that the private key is stored in a Key Vault Secret,\nwith the public certificate included, we can retrieve it\nby using the Key Vault Secrets client.\n\n```ts\n// Using the same credential object we used before,\n// and the same keyVaultUrl,\n// let's create a SecretClient\nimport { SecretClient } from \"@azure/keyvault-secrets\";\n\nconst secretClient = new SecretClient(keyVaultUrl, credential);\n\n// Assuming you've already created a Key Vault certificate,\n// and that certificateName contains the name of your certificate\nconst certificateSecret = await secretClient.getSecret(certificateName);\n\n// Here we can find both the private key and the public certificate, in PKCS 12 format:\nconst PKCS12Certificate = certificateSecret.value!;\n\n// You can write this into a file:\nfs.writeFileSync(\"myCertificate.p12\", PKCS12Certificate);\n```\n\nNote that, by default, the content type of the certificates\nis PKCS 12. By specifying the content type\nof your certificate, you'll be able to retrieve it in PEM format.\nBefore showing how to create PEM certificates,\nlet's first explore how to retrieve a PEM secret key\nfrom a PKCS 12 certificate first.\n\nUsing `openssl`, you can retrieve the public certificate in\nPEM format by using the following command:\n\n```\nopenssl pkcs12 -in myCertificate.p12 -out myCertificate.crt.pem -clcerts -nokeys\n```\n\nYou can also use `openssl` to retrieve the private key, as follows:\n\n```\nopenssl pkcs12 -in myCertificate.p12 -out myCertificate.key.pem -nocerts -nodes\n```\n\nNote that in both cases, openssl will ask you for the\npassword used to create the certificate. The sample code we've used\nso far hasn't specified a password, so you can append `-passin 'pass:'`\nto the end of each command.\n\n### Certificates in PEM format\n\nIf you want to work with certificates in PEM format,\nyou can tell Azure's Key Vault service to create and manage your\ncertificates in PEM format by providing the `contentType` property\nat the moment of creating the certificates.\n\nThe following example shows how to create and retrieve\nthe public and the private parts of a PEM formatted certificate\nusing the Key Vault clients for Certificates and Secrets:\n\n```ts\n// Creating the certificate\nconst certificateName = \"MyCertificate\";\nconst createPoller = await client.beginCreateCertificate(certificateName, {\n  issuerName: \"Self\",\n  subject: \"cn=MyCert\",\n  contentType: \"application/x-pem-file\", // Here you specify you want to work with PEM certificates.\n});\nconst keyVaultCertificate = await createPoller.pollUntilDone();\n\n// Getting the PEM formatted private key and public certificate:\nconst certificateSecret = await secretClient.getSecret(certificateName);\nconst PEMPair = certificateSecret.value!;\n\nconsole.log(PEMPair);\n```\n\nKeep in mind that your public certificate will\nbe in the same blob of content as your private key.\nYou can use the PEM headers to extract them accordingly.\n\n### List all certificates\n\n`listPropertiesOfCertificates` will list all certificates in the Key Vault.\n\n```javascript\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { CertificateClient } = require(\"@azure/keyvault-certificates\");\n\nconst credential = new DefaultAzureCredential();\n\nconst vaultName = \"<YOUR KEYVAULT NAME>\";\nconst url = `https://${vaultName}.vault.azure.net`;\n\nconst client = new CertificateClient(url, credential);\n\nasync function main() {\n  for await (let certificateProperties of client.listPropertiesOfCertificates()) {\n    console.log(\"Certificate properties: \", certificateProperties);\n  }\n}\n\nmain();\n```\n\n### Updating a certificate\n\nThe certificate attributes can be updated to an existing certificate version with\n`updateCertificate`, as follows:\n\n```javascript\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { CertificateClient } = require(\"@azure/keyvault-certificates\");\n\nconst credential = new DefaultAzureCredential();\n\nconst vaultName = \"<YOUR KEYVAULT NAME>\";\nconst url = `https://${vaultName}.vault.azure.net`;\n\nconst client = new CertificateClient(url, credential);\n\nconst certificateName = \"MyCertificateName\";\n\nasync function main() {\n  const result = await client.getCertificate(certificateName);\n  await client.updateCertificateProperties(certificateName, result.properties.version, {\n    enabled: false,\n    tags: {\n      myCustomTag: \"myCustomTagsValue\",\n    },\n  });\n}\n\nmain();\n```\n\nThe certificate's policy can also be updated individually with `updateCertificatePolicy`, as follows:\n\n```javascript\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { CertificateClient } = require(\"@azure/keyvault-certificates\");\n\nconst credential = new DefaultAzureCredential();\n\nconst vaultName = \"<YOUR KEYVAULT NAME>\";\nconst url = `https://${vaultName}.vault.azure.net`;\n\nconst client = new CertificateClient(url, credential);\n\nconst certificateName = \"MyCertificateName\";\n\nasync function main() {\n  const result = client.getCertificate(certificateName);\n  // Note: Sending `Self` as the `issuerName` of the certificate's policy will create a self-signed certificate.\n  await client.updateCertificatePolicy(certificateName, {\n    issuerName: \"Self\",\n    subject: \"cn=MyCert\",\n  });\n}\n\nmain();\n```\n\n### Deleting a certificate\n\nThe `beginDeleteCertificate` method sets a certificate up for deletion. This process will\nhappen in the background as soon as the necessary resources are available.\n\nIf [soft-delete](https://docs.microsoft.com/azure/key-vault/key-vault-ovw-soft-delete)\nis enabled for the Key Vault, this operation will only label the certificate as a\n_deleted_ certificate. A deleted certificate can't be updated. They can only be either\nread, recovered or purged.\n\n```javascript\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { CertificateClient } = require(\"@azure/keyvault-certificates\");\n\nconst credential = new DefaultAzureCredential();\n\nconst vaultName = \"<YOUR KEYVAULT NAME>\";\nconst url = `https://${vaultName}.vault.azure.net`;\n\nconst client = new CertificateClient(url, credential);\n\nconst certificateName = \"MyCertificateName\";\n\nasync function main() {\n  const poller = await client.beginDeleteCertificate(certificateName);\n\n  // You can use the deleted certificate immediately:\n  const deletedCertificate = poller.getResult();\n\n  // The certificate is being deleted. Only wait for it if you want to restore it or purge it.\n  await poller.pollUntilDone();\n\n  // You can also get the deleted certificate this way:\n  await client.getDeletedCertificate(certificateName);\n\n  // Deleted certificates can also be recovered or purged.\n\n  // recoverDeletedCertificate returns a poller, just like beginDeleteCertificate.\n  // const recoverPoller = await client.beginRecoverDeletedCertificate(certificateName);\n  // await recoverPoller.pollUntilDone();\n\n  // If a certificate is done and the Key Vault has soft-delete enabled, the certificate can be purged with:\n  await client.purgeDeletedCertificate(certificateName);\n}\n\nmain();\n```\n\nSince the deletion of a certificate won't happen instantly, some time is needed\nafter the `beginDeleteCertificate` method is called before the deleted certificate is\navailable to be read, recovered or purged.\n\n### Iterating lists of certificates\n\nUsing the CertificateClient, you can retrieve and iterate through all of the\ncertificates in a Certificate Vault, as well as through all of the deleted certificates and the\nversions of a specific certificate. The following API methods are available:\n\n- `listPropertiesOfCertificates` will list all of your non-deleted certificates by their names, only\n  at their latest versions.\n- `listDeletedCertificates` will list all of your deleted certificates by their names,\n  only at their latest versions.\n- `listPropertiesOfCertificateVersions` will list all the versions of a certificate based on a certificate\n  name.\n\nWhich can be used as follows:\n\n```javascript\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { CertificateClient } = require(\"@azure/keyvault-certificates\");\n\nconst credential = new DefaultAzureCredential();\n\nconst vaultName = \"<YOUR KEYVAULT NAME>\";\nconst url = `https://${vaultName}.vault.azure.net`;\n\nconst client = new CertificateClient(url, credential);\n\nconst certificateName = \"MyCertificateName\";\n\nasync function main() {\n  for await (let certificateProperties of client.listPropertiesOfCertificates()) {\n    console.log(\"Certificate properties: \", certificateProperties);\n  }\n  for await (let deletedCertificate of client.listDeletedCertificates()) {\n    console.log(\"Deleted certificate: \", deletedCertificate);\n  }\n  for await (let certificateProperties of client.listPropertiesOfCertificateVersions(\n    certificateName\n  )) {\n    console.log(\"Certificate properties: \", certificateProperties);\n  }\n}\n\nmain();\n```\n\nAll of these methods will return **all of the available results** at once. To\nretrieve them by pages, add `.byPage()` right after invoking the API method you\nwant to use, as follows:\n\n```javascript\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { CertificateClient } = require(\"@azure/keyvault-certificates\");\n\nconst credential = new DefaultAzureCredential();\n\nconst vaultName = \"<YOUR KEYVAULT NAME>\";\nconst url = `https://${vaultName}.vault.azure.net`;\n\nconst client = new CertificateClient(url, credential);\n\nconst certificateName = \"MyCertificateName\";\n\nasync function main() {\n  for await (let page of client.listPropertiesOfCertificates().byPage()) {\n    for (let certificateProperties of page) {\n      console.log(\"Certificate properties: \", certificateProperties);\n    }\n  }\n  for await (let page of client.listDeletedCertificates().byPage()) {\n    for (let deletedCertificate of page) {\n      console.log(\"Deleted certificate: \", deletedCertificate);\n    }\n  }\n  for await (let page of client.listPropertiesOfCertificateVersions(certificateName).byPage()) {\n    for (let certificateProperties of page) {\n      console.log(\"Properties of certificate: \", certificateProperties);\n    }\n  }\n}\n\nmain();\n```\n\n## Troubleshooting\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nimport { setLogLevel } from \"@azure/logger\";\n\nsetLogLevel(\"info\");\n```\n\nSee our [troubleshooting guide](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/keyvault/keyvault-certificates/TROUBLESHOOTING.md) for details on how to diagnose various failure scenarios.\n\n## Next steps\n\nYou can find more code samples through the following links:\n\n- [Key Vault Certificates Samples (JavaScript)](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/keyvault/keyvault-certificates/samples/v4/javascript)\n- [Key Vault Certificates Samples (TypeScript)](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/keyvault/keyvault-certificates/samples/v4/typescript)\n- [Key Vault Certificates Test Cases](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/keyvault/keyvault-certificates/test/)\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n[azure_keyvault]: https://docs.microsoft.com/azure/key-vault/general/overview\n[azure_keyvault_cli]: https://docs.microsoft.com/azure/key-vault/general/quick-create-cli\n[azure_keyvault_portal]: https://docs.microsoft.com/azure/key-vault/general/quick-create-portal\n[default_azure_credential]: https://docs.microsoft.com/java/api/overview/azure/identity-readme?view=azure-java-stable#defaultazurecredential\n[managed_identity]: https://docs.microsoft.com/azure/active-directory/managed-identities-azure-resources/overview\n[azure_identity]: https://docs.microsoft.com/java/api/overview/azure/identity-readme?view=azure-java-stable\n[composition-of-a-certificate]: https://docs.microsoft.com/azure/key-vault/certificates/about-certificates#composition-of-a-certificate\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fkeyvault%2Fkeyvault-certificates%2FREADME.png)\n",
        "repo_name": "keyvault/keyvault-certificates",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/keyvault/keyvault-certificates",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Key Vault Common client library for JavaScript\n\nAn internal support library for the various Azure Key Vault client libraries.\n\nThis package contains common code that needs to be shared among the other Azure Key Vault libraries. **It is not meant for usage by any other consumers**.\n\n## Key Vault client libraries\n\nThe following client libraries use this package:\n\n- [@azure/keyvault-admin](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/keyvault/keyvault-admin/README.md)\n- [@azure/keyvault-certificates](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/keyvault/keyvault-certificates/README.md)\n- [@azure/keyvault-keys](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/keyvault/keyvault-keys/README.md)\n- [@azure/keyvault-secrets](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/keyvault/keyvault-secrets/README.md)\n\n## Getting started\n\nFor information on getting started, please see our [Key Vault client libraries](#key-vault-client-libraries).\n\n## Key concepts\n\nFor information on key concepts, please see our [Key Vault client libraries](#key-vault-client-libraries).\n\n## Examples\n\nFor examples, please see our [Key Vault client libraries](#key-vault-client-libraries).\n\n## Next steps\n\nFor information on next steps, please see our [Key Vault client libraries](#key-vault-client-libraries).\n\n## Troubleshooting\n\nIf you run into issues while using this library, directly or indirectly, please feel free to [file an issue](https://github.com/Azure/azure-sdk-for-js/issues/new).\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fkeyvault%2Fkeyvault-common%2FREADME.png)\n",
        "repo_name": "keyvault/keyvault-common",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/keyvault/keyvault-common",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Key Vault Key client library for JavaScript\n\nAzure Key Vault is a service that allows you to encrypt authentication keys, storage account keys, data encryption keys, .pfx files, and passwords by using secured keys.\nIf you would like to know more about Azure Key Vault, you may want to review: [What is Azure Key Vault?][keyvault]\n\nAzure Key Vault Managed HSM is a fully-managed, highly-available, single-tenant, standards-compliant cloud service that enables you to safeguard cryptographic keys for your cloud applications using FIPS 140-2 Level 3 validated HSMs. If you would like to know more about Azure Key Vault Managed HSM, you may want to review: [What is Azure Key Vault Managed HSM?][managedhsm]\n\nThe Azure Key Vault key library client supports RSA keys, Elliptic Curve (EC) keys, as well as Symmetric (oct) keys when running against a managed HSM, each with corresponding support in hardware security modules (HSM). It offers operations to create, retrieve, update, delete, purge, backup, restore, and list the keys and its versions.\n\nUse the client library for Azure Key Vault Keys in your Node.js application to:\n\n- Create keys using elliptic curve or RSA encryption, optionally backed by Hardware Security Modules (HSM).\n- Import, Delete, and Update keys.\n- Get one or more keys and deleted keys, with their attributes.\n- Recover a deleted key and restore a backed up key.\n- Get the versions of a key.\n\nUsing the cryptography client available in this library you also have access to:\n\n- Encrypting\n- Decrypting\n- Signing\n- Verifying\n- Wrapping keys\n- Unwrapping keys\n\n> Note: This package cannot be used in the browser due to Azure Key Vault service limitations, please refer to [this document][cors] for guidance.\n\nKey links:\n\n- [Source code][package-gh]\n- [Package (npm)][package-npm]\n- [API Reference Documentation][docs]\n- [Product documentation][docs-service]\n- [Samples][samples]\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n\n### Prerequisites\n\n- An [Azure subscription](https://azure.microsoft.com/free/)\n- An existing [Azure Key Vault][azure_keyvault]. If you need to create a key vault, you can do so in the Azure Portal by following the steps in [this document][azure_keyvault_portal]. Alternatively, use the Azure CLI by following [these steps][azure_keyvault_cli].\n- If using Managed HSM, an existing [Azure Key Vault Managed HSM][azure_keyvault_mhsm]. If you need to create a Managed HSM, you can do so using the Azure CLI by following the steps in [this document][azure_keyvault_mhsm_cli].\n\n### Install the package\n\nInstall the Azure Key Vault Key client library using npm\n\n`npm install @azure/keyvault-keys`\n\n### Install the identity library\n\nAzure Key Vault clients authenticate using the Azure identity library. Install it as well using npm\n\n`npm install @azure/identity`\n\n### Configure TypeScript\n\nTypeScript users need to have Node type definitions installed:\n\n```bash\nnpm install @types/node\n```\n\nYou also need to enable `compilerOptions.allowSyntheticDefaultImports` in your tsconfig.json. Note that if you have enabled `compilerOptions.esModuleInterop`, `allowSyntheticDefaultImports` is enabled by default. See [TypeScript's compiler options handbook][tscompileroptions] for more information.\n\n## Key concepts\n\n- The **Key client** is the primary interface to interact with the API methods\n  related to keys in the Azure Key Vault API from a JavaScript application.\n  Once initialized, it provides a basic set of methods that can be used to\n  create, read, update and delete keys.\n- A **Key version** is a version of a key in the Key Vault.\n  Each time a user assigns a value to a unique key name, a new **version**\n  of that key is created. Retrieving a key by a name will always return\n  the latest value assigned, unless a specific version is provided to the\n  query.\n- **Soft delete** allows Key Vaults to support deletion and purging as two\n  separate steps, so deleted keys are not immediately lost. This only happens if the Key Vault\n  has [soft-delete][softdelete]\n  enabled.\n- A **Key backup** can be generated from any created key. These backups come as\n  binary data, and can only be used to regenerate a previously deleted key.\n- The **Cryptography client** is a separate interface that interacts with the\n  keys API methods in the Key Vault API. This client focuses only in the\n  cryptography operations that can be executed using a key that has been\n  already created in the Key Vault. More about this client in the\n  [Cryptography](#cryptography) section.\n\n## Authenticating with Azure Active Directory\n\nThe Key Vault service relies on Azure Active Directory to authenticate requests to its APIs. The [`@azure/identity`](https://www.npmjs.com/package/@azure/identity) package provides a variety of credential types that your application can use to do this. The [README for `@azure/identity`](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity/README.md) provides more details and samples to get you started.\n\nIn order to interact with the Azure Key Vault service, you will need to create an instance of the `KeyClient` class, a **vault url** and a credential object. The examples shown in this document use a credential object named [`DefaultAzureCredential`][default_azure_credential], which is appropriate for most scenarios, including local development and production environments. Additionally, we recommend using a [managed identity][managed_identity] for authentication in production environments.\n\nYou can find more information on different ways of authenticating and their corresponding credential types in the [Azure Identity documentation][azure_identity].\n\nHere's a quick example. First, import `DefaultAzureCredential` and `KeyClient`:\n\n```javascript\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { KeyClient } = require(\"@azure/keyvault-keys\");\n```\n\nOnce these are imported, we can next connect to the Key Vault service:\n\n```javascript\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { KeyClient } = require(\"@azure/keyvault-keys\");\n\nconst credential = new DefaultAzureCredential();\n\n// Build the URL to reach your key vault\nconst vaultName = \"<YOUR KEYVAULT NAME>\";\nconst url = `https://${vaultName}.vault.azure.net`; // or `https://${vaultName}.managedhsm.azure.net` for managed HSM.\n\n// Lastly, create our keys client and connect to the service\nconst client = new KeyClient(url, credential);\n```\n\n## Specifying the Azure Key Vault service API version\n\nBy default, this package uses the latest Azure Key Vault service version which is `7.2`. You can change the service version being used by setting the option `serviceVersion` in the client constructor as shown below:\n\n```javascript\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { KeyClient } = require(\"@azure/keyvault-keys\");\n\nconst credential = new DefaultAzureCredential();\n\nconst vaultName = \"<YOUR KEYVAULT NAME>\";\nconst url = `https://${vaultName}.vault.azure.net`;\n\n// Change the Azure Key Vault service API version being used via the `serviceVersion` option\nconst client = new KeyClient(url, credential, {\n  serviceVersion: \"7.0\", // Or 7.1\n});\n```\n\n## Examples\n\nThe following sections provide code snippets that cover some of the common\ntasks using Azure Key Vault Keys. The scenarios that are covered here consist of:\n\n- [Creating a key](#creating-a-key).\n- [Getting a key](#getting-a-key).\n- [Creating and updating keys with attributes](#creating-and-updating-keys-with-attributes).\n- [Deleting a key](#deleting-a-key).\n- [Iterating lists of keys](#iterating-lists-of-keys).\n\n### Creating a key\n\n`createKey` creates a Key to be stored in the Azure Key Vault. If a key with the same name already exists, then a new version of the key is created.\n\n```javascript\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { KeyClient } = require(\"@azure/keyvault-keys\");\n\nconst credential = new DefaultAzureCredential();\n\nconst vaultName = \"<YOUR KEYVAULT NAME>\";\nconst url = `https://${vaultName}.vault.azure.net`;\n\nconst client = new KeyClient(url, credential);\n\nconst keyName = \"MyKeyName\";\n\nasync function main() {\n  const result = await client.createKey(keyName, \"RSA\");\n  console.log(\"result: \", result);\n}\n\nmain();\n```\n\nThe second parameter sent to `createKey` is the type of the key. The type of keys that are supported will depend on the SKU and whether you are using an Azure Key Vault or an Azure Managed HSM. For an up-to-date list of supported key types please refer to [About keys][aboutkeys]\n\n### Getting a key\n\nThe simplest way to read keys back from the vault is to get a key by name. This\nwill retrieve the most recent version of the key. You can optionally get a\ndifferent version of the key if you specify it as part of the optional\nparameters.\n\n`getKey` retrieves a key previous stores in the Key Vault.\n\n```typescript\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { KeyClient } = require(\"@azure/keyvault-keys\");\n\nconst credential = new DefaultAzureCredential();\n\nconst vaultName = \"<YOUR KEYVAULT NAME>\";\nconst url = `https://${vaultName}.vault.azure.net`;\n\nconst client = new KeyClient(url, credential);\n\nconst keyName = \"MyKeyName\";\n\nasync function main() {\n  const latestKey = await client.getKey(keyName);\n  console.log(`Latest version of the key ${keyName}: `, latestKey);\n  const specificKey = await client.getKey(keyName, { version: latestKey.properties.version! });\n  console.log(`The key ${keyName} at the version ${latestKey.properties.version!}: `, specificKey);\n}\n\nmain();\n```\n\n### Creating and updating keys with attributes\n\nThe following attributes can also be assigned to any key in a Key Vault:\n\n- `tags`: Any set of key-values that can be used to search and filter keys.\n- `keyOps`: An array of the operations that this key will be able to perform (`encrypt`, `decrypt`, `sign`, `verify`, `wrapKey`, `unwrapKey`).\n- `enabled`: A boolean value that determines whether the key value can be read or not.\n- `notBefore`: A given date after which the key value can be retrieved.\n- `expires`: A given date after which the key value cannot be retrieved.\n\nAn object with these attributes can be sent as the third parameter of\n`createKey`, right after the key's name and value, as follows:\n\n```javascript\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { KeyClient } = require(\"@azure/keyvault-keys\");\n\nconst credential = new DefaultAzureCredential();\n\nconst vaultName = \"<YOUR KEYVAULT NAME>\";\nconst url = `https://${vaultName}.vault.azure.net`;\n\nconst client = new KeyClient(url, credential);\n\nconst keyName = \"MyKeyName\";\n\nasync function main() {\n  const result = await client.createKey(keyName, \"RSA\", {\n    enabled: false,\n  });\n  console.log(\"result: \", result);\n}\n\nmain();\n```\n\nThis will create a new version of the same key, which will have the latest\nprovided attributes.\n\nAttributes can also be updated to an existing key version with\n`updateKeyProperties`, as follows:\n\n```javascript\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { KeyClient } = require(\"@azure/keyvault-keys\");\n\nconst credential = new DefaultAzureCredential();\n\nconst vaultName = \"<YOUR KEYVAULT NAME>\";\nconst url = `https://${vaultName}.vault.azure.net`;\n\nconst client = new KeyClient(url, credential);\n\nconst keyName = \"MyKeyName\";\n\nasync function main() {\n  const result = await client.createKey(keyName, \"RSA\");\n  await client.updateKeyProperties(keyName, result.properties.version, {\n    enabled: false,\n  });\n}\n\nmain();\n```\n\n### Deleting a key\n\nThe `beginDeleteKey` method starts the deletion of a key.\nThis process will happen in the background as soon as the necessary resources\nare available.\n\n```javascript\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { KeyClient } = require(\"@azure/keyvault-keys\");\n\nconst credential = new DefaultAzureCredential();\n\nconst vaultName = \"<YOUR KEYVAULT NAME>\";\nconst url = `https://${vaultName}.vault.azure.net`;\n\nconst client = new KeyClient(url, credential);\n\nconst keyName = \"MyKeyName\";\n\nasync function main() {\n  const poller = await client.beginDeleteKey(keyName);\n  await poller.pollUntilDone();\n}\n\nmain();\n```\n\nIf [soft-delete][softdelete]\nis enabled for the Key Vault, this operation will only label the key as a\n_deleted_ key. A deleted key can't be updated. They can only be\nread, recovered or purged.\n\n```typescript\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { KeyClient } = require(\"@azure/keyvault-keys\");\n\nconst credential = new DefaultAzureCredential();\n\nconst vaultName = \"<YOUR KEYVAULT NAME>\";\nconst url = `https://${vaultName}.vault.azure.net`;\n\nconst client = new KeyClient(url, credential);\n\nconst keyName = \"MyKeyName\";\n\nasync function main() {\n  const poller = await client.beginDeleteKey(keyName);\n\n  // You can use the deleted key immediately:\n  const deletedKey = poller.getResult();\n\n  // The key is being deleted. Only wait for it if you want to restore it or purge it.\n  await poller.pollUntilDone();\n\n  // You can also get the deleted key this way:\n  await client.getDeletedKey(keyName);\n\n  // Deleted keys can also be recovered or purged:\n\n  // recoverDeletedKey also returns a poller, just like beginDeleteKey.\n  const recoverPoller = await client.beginRecoverDeletedKey(keyName);\n  await recoverPoller.pollUntilDone();\n\n  // And here is how to purge a deleted key\n  await client.purgeDeletedKey(keyName);\n}\n\nmain();\n```\n\nSince Keys take some time to get fully deleted, `beginDeleteKey`\nreturns a Poller object that keeps track of the underlying Long Running\nOperation according to our guidelines:\nhttps://azure.github.io/azure-sdk/typescript_design.html#ts-lro\n\nThe received poller will allow you to get the deleted key by calling to `poller.getResult()`.\nYou can also wait until the deletion finishes either by running individual service\ncalls until the key is deleted, or by waiting until the process is done:\n\n```typescript\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { KeyClient } = require(\"@azure/keyvault-keys\");\n\nconst credential = new DefaultAzureCredential();\n\nconst vaultName = \"<YOUR KEYVAULT NAME>\";\nconst url = `https://${vaultName}.vault.azure.net`;\n\nconst client = new KeyClient(url, credential);\n\nconst keyName = \"MyKeyName\";\n\nasync function main() {\n  const poller = await client.beginDeleteKey(keyName);\n\n  // You can use the deleted key immediately:\n  let deletedKey = poller.getResult();\n\n  // Or you can wait until the key finishes being deleted:\n  deletedKey = await poller.pollUntilDone();\n  console.log(deletedKey);\n}\n\nmain();\n```\n\nAnother way to wait until the key is fully deleted is to do individual calls, as follows:\n\n```typescript\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { KeyClient } = require(\"@azure/keyvault-keys\");\nconst { delay } = require(\"@azure/core-http\");\n\nconst credential = new DefaultAzureCredential();\n\nconst vaultName = \"<YOUR KEYVAULT NAME>\";\nconst url = `https://${vaultName}.vault.azure.net`;\n\nconst client = new KeyClient(url, credential);\n\nconst keyName = \"MyKeyName\";\n\nasync function main() {\n  const poller = await client.beginDeleteKey(keyName);\n\n  while (!poller.isDone()) {\n    await poller.poll();\n    await delay(5000);\n  }\n\n  console.log(`The key ${keyName} is fully deleted`);\n}\n\nmain();\n```\n\n### Configuring Automatic Key Rotation\n\nUsing the KeyClient, you can configure automatic key rotation for a key by specifying the rotation policy.\nIn addition, KeyClient provides a method to rotate a key on-demand by creating a new version of the given key.\n\n```javascript\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { KeyClient } = require(\"@azure/keyvault-keys\");\n\nconst url = `https://<YOUR KEYVAULT NAME>.vault.azure.net`;\nconst client = new KeyClient(url, new DefaultAzureCredential());\n\nasync function main() {\n  const keyName = \"MyKeyName\";\n\n  // Set the key's automated rotation policy to rotate the key 30 days before expiry.\n  const policy = await client.updateKeyRotationPolicy(keyName, {\n    lifetimeActions: [\n      {\n        action: \"Rotate\",\n        timeBeforeExpiry: \"P30D\",\n      },\n    ],\n    // You may also specify the duration after which any newly rotated key will expire.\n    // In this case, any new key versions will expire after 90 days.\n    expiresIn: \"P90D\",\n  });\n\n  // You can get the current key rotation policy of a given key by calling the getKeyRotationPolicy method.\n  const currentPolicy = await client.getKeyRotationPolicy(keyName);\n\n  // Finally, you can rotate a key on-demand by creating a new version of the given key.\n  const rotatedKey = await client.rotateKey(keyName);\n}\n\nmain();\n```\n\n### Iterating lists of keys\n\nUsing the KeyClient, you can retrieve and iterate through all of the\nkeys in an Azure Key Vault, as well as through all of the deleted keys and the\nversions of a specific key. The following API methods are available:\n\n- `listPropertiesOfKeys` will list all of your non-deleted keys by their names, only\n  at their latest versions.\n- `listDeletedKeys` will list all of your deleted keys by their names,\n  only at their latest versions.\n- `listPropertiesOfKeyVersions` will list all the versions of a key based on a key\n  name.\n\nWhich can be used as follows:\n\n```javascript\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { KeyClient } = require(\"@azure/keyvault-keys\");\n\nconst credential = new DefaultAzureCredential();\n\nconst vaultName = \"<YOUR KEYVAULT NAME>\";\nconst url = `https://${vaultName}.vault.azure.net`;\n\nconst client = new KeyClient(url, credential);\n\nconst keyName = \"MyKeyName\";\n\nasync function main() {\n  for await (let keyProperties of client.listPropertiesOfKeys()) {\n    console.log(\"Key properties: \", keyProperties);\n  }\n  for await (let deletedKey of client.listDeletedKeys()) {\n    console.log(\"Deleted: \", deletedKey);\n  }\n  for await (let versionProperties of client.listPropertiesOfKeyVersions(keyName)) {\n    console.log(\"Version properties: \", versionProperties);\n  }\n}\n\nmain();\n```\n\nAll of these methods will return **all of the available results** at once. To\nretrieve them by pages, add `.byPage()` right after invoking the API method you\nwant to use, as follows:\n\n```javascript\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { KeyClient } = require(\"@azure/keyvault-keys\");\n\nconst credential = new DefaultAzureCredential();\n\nconst vaultName = \"<YOUR KEYVAULT NAME>\";\nconst url = `https://${vaultName}.vault.azure.net`;\n\nconst client = new KeyClient(url, credential);\n\nconst keyName = \"MyKeyName\";\n\nasync function main() {\n  for await (let page of client.listPropertiesOfKeys().byPage()) {\n    for (let keyProperties of page) {\n      console.log(\"Key properties: \", keyProperties);\n    }\n  }\n  for await (let page of client.listDeletedKeys().byPage()) {\n    for (let deletedKey of page) {\n      console.log(\"Deleted key: \", deletedKey);\n    }\n  }\n  for await (let page of client.listPropertiesOfKeyVersions(keyName).byPage()) {\n    for (let versionProperties of page) {\n      console.log(\"Version: \", versionProperties);\n    }\n  }\n}\n\nmain();\n```\n\n## Cryptography\n\nThis library also offers a set of cryptographic utilities available through\n`CryptographyClient`. Similar to the `KeyClient`, `CryptographyClient` will\nconnect to Azure Key Vault with the provided set of credentials. Once\nconnected, `CryptographyClient` can encrypt, decrypt, sign, verify, wrap keys,\nand unwrap keys.\n\nWe can next connect to the key vault service just as we do with the `KeyClient`.\nWe'll need to copy some settings from the key vault we are\nconnecting to into our environment variables. Once they are in our environment,\nwe can access them with the following code:\n\n```typescript\nimport { DefaultAzureCredential } from \"@azure/identity\";\nimport { KeyClient, CryptographyClient } from \"@azure/keyvault-keys\";\n\nconst credential = new DefaultAzureCredential();\n\nconst vaultName = \"<YOUR KEYVAULT NAME>\";\nconst url = `https://${vaultName}.vault.azure.net`;\n\nconst keysClient = new KeyClient(url, credential);\n\nasync function main() {\n  // Create or retrieve a key from the keyvault\n  let myKey = await keysClient.createKey(\"MyKey\", \"RSA\");\n\n  // Lastly, create our cryptography client and connect to the service\n  const cryptographyClient = new CryptographyClient(myKey, credential);\n}\n\nmain();\n```\n\n### Encrypt\n\n`encrypt` will encrypt a message.\n\n```javascript\nimport { DefaultAzureCredential } from \"@azure/identity\";\nimport { KeyClient, CryptographyClient } from \"@azure/keyvault-keys\";\n\nconst credential = new DefaultAzureCredential();\n\nconst vaultName = \"<YOUR KEYVAULT NAME>\";\nconst url = `https://${vaultName}.vault.azure.net`;\n\nconst keysClient = new KeyClient(url, credential);\n\nasync function main() {\n  let myKey = await keysClient.createKey(\"MyKey\", \"RSA\");\n  const cryptographyClient = new CryptographyClient(myKey.id, credential);\n\n  const encryptResult = await cryptographyClient.encrypt({\n    algorithm: \"RSA1_5\",\n    plaintext: Buffer.from(\"My Message\"),\n  });\n  console.log(\"encrypt result: \", encryptResult.result);\n}\n\nmain();\n```\n\n### Decrypt\n\n`decrypt` will decrypt an encrypted message.\n\n```javascript\nimport { DefaultAzureCredential } from \"@azure/identity\";\nimport { KeyClient, CryptographyClient } from \"@azure/keyvault-keys\";\n\nconst credential = new DefaultAzureCredential();\n\nconst vaultName = \"<YOUR KEYVAULT NAME>\";\nconst url = `https://${vaultName}.vault.azure.net`;\n\nconst keysClient = new KeyClient(url, credential);\n\nasync function main() {\n  let myKey = await keysClient.createKey(\"MyKey\", \"RSA\");\n  const cryptographyClient = new CryptographyClient(myKey.id, credential);\n\n  const encryptResult = await cryptographyClient.encrypt({\n    algorithm: \"RSA1_5\",\n    plaintext: Buffer.from(\"My Message\"),\n  });\n  console.log(\"encrypt result: \", encryptResult.result);\n\n  const decryptResult = await cryptographyClient.decrypt({\n    algorithm: \"RSA1_5\",\n    ciphertext: encryptResult.result,\n  });\n  console.log(\"decrypt result: \", decryptResult.result.toString());\n}\n\nmain();\n```\n\n### Sign\n\n`sign` will cryptographically sign the digest (hash) of a message with a signature.\n\n```javascript\nimport { DefaultAzureCredential } from \"@azure/identity\";\nimport { KeyClient, CryptographyClient } from \"@azure/keyvault-keys\";\nimport { createHash } from \"crypto\";\n\nconst credential = new DefaultAzureCredential();\n\nconst vaultName = \"<YOUR KEYVAULT NAME>\";\nconst url = `https://${vaultName}.vault.azure.net`;\n\nconst keysClient = new KeyClient(url, credential);\n\nasync function main() {\n  let myKey = await keysClient.createKey(\"MyKey\", \"RSA\");\n  const cryptographyClient = new CryptographyClient(myKey, credential);\n\n  const signatureValue = \"MySignature\";\n  let hash = createHash(\"sha256\");\n\n  let digest = hash.update(signatureValue).digest();\n  console.log(\"digest: \", digest);\n\n  const signResult = await cryptographyClient.sign(\"RS256\", digest);\n  console.log(\"sign result: \", signResult.result);\n}\n\nmain();\n```\n\n### Sign Data\n\n`signData` will cryptographically sign a message with a signature.\n\n```javascript\nimport { DefaultAzureCredential } from \"@azure/identity\";\nimport { KeyClient, CryptographyClient } from \"@azure/keyvault-keys\";\n\nconst credential = new DefaultAzureCredential();\n\nconst vaultName = \"<YOUR KEYVAULT NAME>\";\nconst url = `https://${vaultName}.vault.azure.net`;\n\nconst keysClient = new KeyClient(url, credential);\n\nasync function main() {\n  let myKey = await keysClient.createKey(\"MyKey\", \"RSA\");\n  const cryptographyClient = new CryptographyClient(myKey, credential);\n\n  const signResult = await cryptographyClient.signData(\"RS256\", Buffer.from(\"My Message\"));\n  console.log(\"sign result: \", signResult.result);\n}\n\nmain();\n```\n\n### Verify\n\n`verify` will cryptographically verify that the signed digest was signed with the given signature.\n\n```javascript\nimport { DefaultAzureCredential } from \"@azure/identity\";\nimport { KeyClient, CryptographyClient } from \"@azure/keyvault-keys\";\nimport { createHash } from \"crypto\";\n\nconst credential = new DefaultAzureCredential();\n\nconst vaultName = \"<YOUR KEYVAULT NAME>\";\nconst url = `https://${vaultName}.vault.azure.net`;\n\nconst keysClient = new KeyClient(url, credential);\n\nasync function main() {\n  let myKey = await keysClient.createKey(\"MyKey\", \"RSA\");\n  const cryptographyClient = new CryptographyClient(myKey, credential);\n\n  const hash = createHash(\"sha256\");\n  hash.update(\"My Message\");\n  const digest = hash.digest();\n\n  const signResult = await cryptographyClient.sign(\"RS256\", digest);\n  console.log(\"sign result: \", signResult.result);\n\n  const verifyResult = await cryptographyClient.verify(\"RS256\", digest, signResult.result);\n  console.log(\"verify result: \", verifyResult.result);\n}\n\nmain();\n```\n\n### Verify Data\n\n`verifyData` will cryptographically verify that the signed message was signed with the given signature.\n\n```javascript\nimport { DefaultAzureCredential } from \"@azure/identity\";\nimport { KeyClient, CryptographyClient } from \"@azure/keyvault-keys\";\n\nconst credential = new DefaultAzureCredential();\n\nconst vaultName = \"<YOUR KEYVAULT NAME>\";\nconst url = `https://${vaultName}.vault.azure.net`;\n\nconst keysClient = new KeyClient(url, credential);\n\nasync function main() {\n  let myKey = await keysClient.createKey(\"MyKey\", \"RSA\");\n  const cryptographyClient = new CryptographyClient(myKey, credential);\n\n  const buffer = Buffer.from(\"My Message\");\n\n  const signResult = await cryptographyClient.signData(\"RS256\", buffer);\n  console.log(\"sign result: \", signResult.result);\n\n  const verifyResult = await cryptographyClient.verifyData(\"RS256\", buffer, signResult.result);\n  console.log(\"verify result: \", verifyResult.result);\n}\n\nmain();\n```\n\n### Wrap Key\n\n`wrapKey` will wrap a key with an encryption layer.\n\n```javascript\nimport { DefaultAzureCredential } from \"@azure/identity\";\nimport { KeyClient, CryptographyClient } from \"@azure/keyvault-keys\";\n\nconst credential = new DefaultAzureCredential();\n\nconst vaultName = \"<YOUR KEYVAULT NAME>\";\nconst url = `https://${vaultName}.vault.azure.net`;\n\nconst keysClient = new KeyClient(url, credential);\n\nasync function main() {\n  let myKey = await keysClient.createKey(\"MyKey\", \"RSA\");\n  const cryptographyClient = new CryptographyClient(myKey, credential);\n\n  const wrapResult = await cryptographyClient.wrapKey(\"RSA-OAEP\", Buffer.from(\"My Key\"));\n  console.log(\"wrap result:\", wrapResult.result);\n}\n\nmain();\n```\n\n### Unwrap Key\n\n`unwrapKey` will unwrap a wrapped key.\n\n```javascript\nimport { DefaultAzureCredential } from \"@azure/identity\";\nimport { KeyClient, CryptographyClient } from \"@azure/keyvault-keys\";\n\nconst credential = new DefaultAzureCredential();\n\nconst vaultName = \"<YOUR KEYVAULT NAME>\";\nconst url = `https://${vaultName}.vault.azure.net`;\n\nconst keysClient = new KeyClient(url, credential);\n\nasync function main() {\n  let myKey = await keysClient.createKey(\"MyKey\", \"RSA\");\n  const cryptographyClient = new CryptographyClient(myKey, credential);\n\n  const wrapResult = await cryptographyClient.wrapKey(\"RSA-OAEP\", Buffer.from(\"My Key\"));\n  console.log(\"wrap result:\", wrapResult.result);\n\n  const unwrapResult = await cryptographyClient.unwrapKey(\"RSA-OAEP\", wrapResult.result);\n  console.log(\"unwrap result: \", unwrapResult.result);\n}\n\nmain();\n```\n\n## Troubleshooting\n\nSee our [troubleshooting guide](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/keyvault/keyvault-keys/TROUBLESHOOTING.md) for details on how to diagnose various failure scenarios.\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\n\nsetLogLevel(\"info\");\n```\n\n## Next steps\n\nYou can find more code samples through the following links:\n\n- [Key Vault Keys Samples (JavaScript)](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/keyvault/keyvault-keys/samples/v4/javascript)\n- [Key Vault Keys Samples (TypeScript)](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/keyvault/keyvault-keys/samples/v4/typescript)\n- [Key Vault Keys Test Cases](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/keyvault/keyvault-keys/test/)\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n[aboutkeys]: https://docs.microsoft.com/azure/key-vault/keys/about-keys\n[keyvault]: https://docs.microsoft.com/azure/key-vault/key-vault-overview\n[managedhsm]: https://docs.microsoft.com/azure/key-vault/managed-hsm/overview\n[cors]: https://github.com/Azure/azure-sdk-for-js/blob/main/samples/cors/ts/README.md\n[package-gh]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/keyvault/keyvault-keys\n[package-npm]: https://www.npmjs.com/package/@azure/keyvault-keys\n[docs]: https://docs.microsoft.com/javascript/api/@azure/keyvault-keys\n[docs-service]: https://azure.microsoft.com/services/key-vault/\n[samples]: https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/keyvault/keyvault-keys/samples\n[tscompileroptions]: https://www.typescriptlang.org/docs/handbook/compiler-options.html\n[softdelete]: https://docs.microsoft.com/azure/key-vault/key-vault-ovw-soft-delete\n[azure_keyvault]: https://docs.microsoft.com/azure/key-vault/general/overview\n[azure_keyvault_cli]: https://docs.microsoft.com/azure/key-vault/general/quick-create-cli\n[azure_keyvault_portal]: https://docs.microsoft.com/azure/key-vault/general/quick-create-portal\n[azure_keyvault_mhsm]: https://docs.microsoft.com/azure/key-vault/managed-hsm/overview\n[azure_keyvault_mhsm_cli]: https://docs.microsoft.com/azure/key-vault/managed-hsm/quick-create-cli\n[default_azure_credential]: https://docs.microsoft.com/java/api/overview/azure/identity-readme?view=azure-java-stable#defaultazurecredential\n[managed_identity]: https://docs.microsoft.com/azure/active-directory/managed-identities-azure-resources/overview\n[azure_identity]: https://docs.microsoft.com/java/api/overview/azure/identity-readme?view=azure-java-stable\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fkeyvault%2Fkeyvault-keys%2FREADME.png)\n",
        "repo_name": "keyvault/keyvault-keys",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/keyvault/keyvault-keys",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Key Vault Secret client library for JavaScript\n\nAzure Key Vault is a service that allows you to encrypt authentication keys, storage account keys, data encryption keys, .pfx files, and passwords by using secured keys.\nIf you would like to know more about Azure Key Vault, you may want to review: [What is Azure Key Vault?](https://docs.microsoft.com/azure/key-vault/key-vault-overview)\n\nAzure Key Vault Secrets management allows you to securely store and\ntightly control access to tokens, passwords, certificates, API keys,\nand other secrets.\n\nUse the client library for Azure Key Vault Secrets in your Node.js application to:\n\n- Get, set and delete secrets.\n- Update a secret and it's attributes.\n- Backup and restore a secret.\n- Get, purge or recover a deleted secret.\n- Get all the versions of a secret.\n- Get all secrets.\n- Get all deleted secrets.\n\n> Note: This package cannot be used in the browser due to Azure Key Vault service limitations, please refer to [this document](https://github.com/Azure/azure-sdk-for-js/blob/main/samples/cors/ts/README.md) for guidance.\n\nKey links:\n\n- [Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/keyvault/keyvault-secrets)\n- [Package (npm)](https://www.npmjs.com/package/@azure/keyvault-secrets)\n- [API Reference Documentation](https://docs.microsoft.com/javascript/api/@azure/keyvault-secrets)\n- [Product documentation](https://azure.microsoft.com/services/key-vault/)\n- [Samples](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/keyvault/keyvault-secrets/samples)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n\n### Prerequisites\n\n- An [Azure subscription](https://azure.microsoft.com/free/)\n- A [Key Vault resource](https://docs.microsoft.com/azure/key-vault/quick-create-portal)\n- An existing [Azure Key Vault][azure_keyvault]. If you need to create a key vault, you can do so in the Azure Portal by following the steps in [this document][azure_keyvault_portal]. Alternatively, you can use the Azure CLI by following the steps in [this document][azure_keyvault_cli].\n\n### Install the package\n\nInstall the Azure Key Vault Secret client library using npm:\n\n`npm install @azure/keyvault-secrets`\n\n### Install the identity library\n\nKey Vault clients authenticate using the Azure Identity Library. Install it as well using npm\n\n`npm install @azure/identity`\n\n### Configure TypeScript\n\nTypeScript users need to have Node type definitions installed:\n\n```bash\nnpm install @types/node\n```\n\nYou also need to enable `compilerOptions.allowSyntheticDefaultImports` in your tsconfig.json. Note that if you have enabled `compilerOptions.esModuleInterop`, `allowSyntheticDefaultImports` is enabled by default. See [TypeScript's compiler options handbook](https://www.typescriptlang.org/docs/handbook/compiler-options.html) for more information.\n\n## Key concepts\n\n- The **Secret client** is the primary interface to interact with the API methods\n  related to secrets in the Azure Key Vault API from a JavaScript application.\n  Once initialized, it provides a basic set of methods that can be used to\n  create, read, update and delete secrets.\n- A **Secret version** is a version of a secret in the Key Vault.\n  Each time a user assigns a value to a unique secret name, a new **version**\n  of that secret is created. Retrieving a secret by a name will always return\n  the latest value assigned, unless a specific version is provided to the\n  query.\n- **Soft delete** allows Key Vaults to support deletion and purging as two\n  separate steps, so deleted secrets are not immediately lost. This only happens if the Key Vault\n  has [soft-delete](https://docs.microsoft.com/azure/key-vault/key-vault-ovw-soft-delete)\n  enabled.\n- A **Secret backup** can be generated from any created secret. These backups come as\n  binary data, and can only be used to regenerate a previously deleted secret.\n\n## Authenticating with Azure Active Directory\n\nThe Key Vault service relies on Azure Active Directory to authenticate requests to its APIs. The [`@azure/identity`](https://www.npmjs.com/package/@azure/identity) package provides a variety of credential types that your application can use to do this. The [README for `@azure/identity`](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/identity/identity/README.md) provides more details and samples to get you started.\n\nIn order to interact with the Azure Key Vault service, you will need to create an instance of the `SecretClient` class, a **vault url** and a credential object. The examples shown in this document use a credential object named [`DefaultAzureCredential`][default_azure_credential], which is appropriate for most scenarios, including local development and production environments. Additionally, we recommend using a [managed identity][managed_identity] for authentication in production environments.\n\nYou can find more information on different ways of authenticating and their corresponding credential types in the [Azure Identity documentation][azure_identity].\n\nHere's a quick example. First, import `DefaultAzureCredential` and `SecretClient`:\n\n```javascript\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { SecretClient } = require(\"@azure/keyvault-secrets\");\n```\n\nOnce these are imported, we can next connect to the Key Vault service:\n\n```typescript\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { SecretClient } = require(\"@azure/keyvault-secrets\");\n\nconst credential = new DefaultAzureCredential();\n\n// Build the URL to reach your key vault\nconst vaultName = \"<YOUR KEYVAULT NAME>\";\nconst url = `https://${vaultName}.vault.azure.net`;\n\n// Lastly, create our secrets client and connect to the service\nconst client = new SecretClient(url, credential);\n```\n\n## Specifying the Azure Key Vault service API version\n\nBy default, this package uses the latest Azure Key Vault service version which is `7.1`. The only other version that is supported is `7.0`. You can change the service version being used by setting the option `serviceVersion` in the client constructor as shown below:\n\n```typescript\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { SecretClient } = require(\"@azure/keyvault-secrets\");\n\nconst credential = new DefaultAzureCredential();\n\nconst vaultName = \"<YOUR KEYVAULT NAME>\";\nconst url = `https://${vaultName}.vault.azure.net`;\n\n// Change the Azure Key Vault service API version being used via the `serviceVersion` option\nconst client = new SecretClient(url, credential, {\n  serviceVersion: \"7.0\",\n});\n```\n\n## Examples\n\nThe following sections provide code snippets that cover some of the common\ntasks using Azure Key Vault Secrets. The scenarios that are covered here consist of:\n\n- [Creating and setting a secret](#creating-and-setting-a-secret).\n- [Getting a secret](#getting-a-secret).\n- [Creating and updating secrets with attributes](#creating-and-updating-secrets-with-attributes).\n- [Deleting a secret](#deleting-a-secret).\n- [Iterating lists of secrets](#iterating-lists-of-secrets).\n\n### Creating and setting a secret\n\n`setSecret` assigns a provided value to the specified secret name. If a secret\nwith the same name already exists, then a new version of the secret is created.\n\n```javascript\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { SecretClient } = require(\"@azure/keyvault-secrets\");\n\nconst credential = new DefaultAzureCredential();\n\nconst vaultName = \"<YOUR KEYVAULT NAME>\";\nconst url = `https://${vaultName}.vault.azure.net`;\n\nconst client = new SecretClient(url, credential);\n\nconst secretName = \"MySecretName\";\n\nasync function main() {\n  const result = await client.setSecret(secretName, \"MySecretValue\");\n  console.log(\"result: \", result);\n}\n\nmain();\n```\n\n### Getting a secret\n\nThe simplest way to read secrets back from the vault is to get a secret by\nname. This will retrieve the most recent version of the secret. You can\noptionally get a different version of the key if you specify it as part of the\noptional parameters.\n\n```javascript\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { SecretClient } = require(\"@azure/keyvault-secrets\");\n\nconst credential = new DefaultAzureCredential();\n\nconst vaultName = \"<YOUR KEYVAULT NAME>\";\nconst url = `https://${vaultName}.vault.azure.net`;\n\nconst client = new SecretClient(url, credential);\n\nconst secretName = \"MySecretName\";\n\nasync function main() {\n  const latestSecret = await client.getSecret(secretName);\n  console.log(`Latest version of the secret ${secretName}: `, latestSecret);\n  const specificSecret = await client.getSecret(secretName, { version: latestSecret.properties.version! });\n  console.log(`The secret ${secretName} at the version ${latestSecret.properties.version!}: `, specificSecret);\n}\n\nmain();\n```\n\n### Creating and updating secrets with attributes\n\nA secret can have more information than its name and its value. They can also include\nthe following attributes:\n\n- `tags`: Any set of key-values that can be used to search and filter secrets.\n- `contentType`: Any string that can be used to help the receiver of the secret understand how to use the secret value.\n- `enabled`: A boolean value that determines whether the secret value can be read or not.\n- `notBefore`: A given date after which the secret value can be retrieved.\n- `expires`: A given date after which the secret value cannot be retrieved.\n\nAn object with these attributes can be sent as the third parameter of\n`setSecret`, right after the secret's name and value, as follows:\n\n```javascript\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { SecretClient } = require(\"@azure/keyvault-secrets\");\n\nconst credential = new DefaultAzureCredential();\n\nconst vaultName = \"<YOUR KEYVAULT NAME>\";\nconst url = `https://${vaultName}.vault.azure.net`;\n\nconst client = new SecretClient(url, credential);\n\nconst secretName = \"MySecretName\";\n\nasync function main() {\n  const result = await client.setSecret(secretName, \"MySecretValue\", {\n    enabled: false,\n  });\n}\n\nmain();\n```\n\nThis will create a new version of the same secret, which will have the latest\nprovided attributes.\n\nAttributes can also be updated to an existing secret version with\n`updateSecretProperties`, as follows:\n\n```javascript\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { SecretClient } = require(\"@azure/keyvault-secrets\");\n\nconst credential = new DefaultAzureCredential();\n\nconst vaultName = \"<YOUR KEYVAULT NAME>\";\nconst url = `https://${vaultName}.vault.azure.net`;\n\nconst client = new SecretClient(url, credential);\n\nconst secretName = \"MySecretName\";\n\nasync function main() {\n  const result = await client.getSecret(secretName);\n  await client.updateSecretProperties(secretName, result.properties.version, { enabled: false });\n}\n\nmain();\n```\n\n### Deleting a secret\n\nThe `beginDeleteSecret` method starts the deletion of a Secret.\nThis process will happen in the background as soon as the necessary resources\nare available.\n\n```javascript\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { SecretClient } = require(\"@azure/keyvault-secrets\");\n\nconst credential = new DefaultAzureCredential();\n\nconst vaultName = \"<YOUR KEYVAULT NAME>\";\nconst url = `https://${vaultName}.vault.azure.net`;\n\nconst client = new SecretClient(url, credential);\n\nconst secretName = \"MySecretName\";\n\nasync function main() {\n  await client.beginDeleteSecret(secretName);\n}\n\nmain();\n```\n\nIf [soft-delete](https://docs.microsoft.com/azure/key-vault/key-vault-ovw-soft-delete)\nis enabled for the Key Vault, this operation will only label the secret as a\n_deleted_ secret. A deleted secret can't be updated. They can only be either\nread, recovered or purged.\n\n```javascript\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { SecretClient } = require(\"@azure/keyvault-secrets\");\n\nconst credential = new DefaultAzureCredential();\n\nconst vaultName = \"<YOUR KEYVAULT NAME>\";\nconst url = `https://${vaultName}.vault.azure.net`;\n\nconst client = new SecretClient(url, credential);\n\nconst secretName = \"MySecretName\";\n\nasync function main() {\n  const poller = await client.beginDeleteSecret(secretName);\n\n  // You can use the deleted secret immediately:\n  const deletedSecret = poller.getResult();\n\n  // The secret is being deleted. Only wait for it if you want to restore it or purge it.\n  await poller.pollUntilDone();\n\n  // You can also get the deleted secret this way:\n  await client.getDeletedSecret(secretName);\n\n  // Deleted secrets can also be recovered or purged.\n\n  // recoverDeletedSecret returns a poller, just like beginDeleteSecret.\n  const recoverPoller = await client.beginRecoverDeletedSecret(secretName);\n  await recoverPoller.pollUntilDone();\n\n  // And then, to purge the deleted secret:\n  await client.purgeDeletedSecret(secretName);\n}\n\nmain();\n```\n\nSince Secrets take some time to get fully deleted, `beginDeleteSecret`\nreturns a Poller object that keeps track of the underlying Long Running\nOperation according to our guidelines:\nhttps://azure.github.io/azure-sdk/typescript_design.html#ts-lro\n\nThe received poller will allow you to get the deleted secret by calling to `poller.getResult()`.\nYou can also wait until the deletion finishes, either by running individual service\ncalls until the secret is deleted, or by waiting until the process is done:\n\n```typescript\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { SecretClient } = require(\"@azure/keyvault-secrets\");\n\nconst credential = new DefaultAzureCredential();\n\nconst vaultName = \"<YOUR KEYVAULT NAME>\";\nconst url = `https://${vaultName}.vault.azure.net`;\n\nconst client = new SecretClient(url, credential);\n\nconst secretName = \"MySecretName\";\n\nasync function main() {\n  const poller = await client.beginDeleteSecret(secretName);\n\n  // You can use the deleted secret immediately:\n  let deletedSecret = poller.getResult();\n\n  // Or you can wait until the secret finishes being deleted:\n  deletedSecret = await poller.pollUntilDone();\n  console.log(deletedSecret);\n}\n\nmain();\n```\n\nAnother way to wait until the secret is fully deleted is to do individual calls, as follows:\n\n```typescript\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { SecretClient } = require(\"@azure/keyvault-secrets\");\nconst { delay } = require(\"@azure/core-http\");\n\nconst credential = new DefaultAzureCredential();\n\nconst vaultName = \"<YOUR KEYVAULT NAME>\";\nconst url = `https://${vaultName}.vault.azure.net`;\n\nconst client = new SecretClient(url, credential);\n\nconst secretName = \"MySecretName\";\n\nasync function main() {\n  const poller = await client.beginDeleteSecret(secretName);\n\n  while (!poller.isDone()) {\n    await poller.poll();\n    await delay(5000);\n  }\n\n  console.log(`The secret ${secretName} is fully deleted`);\n}\n\nmain();\n```\n\n### Iterating lists of secrets\n\nUsing the SecretClient, you can retrieve and iterate through all of the\nsecrets in a Key Vault, as well as through all of the deleted secrets and the\nversions of a specific secret. The following API methods are available:\n\n- `listPropertiesOfSecrets` will list all of your non-deleted secrets by their names, only\n  at their latest versions.\n- `listDeletedSecrets` will list all of your deleted secrets by their names,\n  only at their latest versions.\n- `listPropertiesOfSecretVersions` will list all the versions of a secret based on a secret\n  name.\n\nWhich can be used as follows:\n\n```javascript\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { SecretClient } = require(\"@azure/keyvault-secrets\");\n\nconst credential = new DefaultAzureCredential();\n\nconst vaultName = \"<YOUR KEYVAULT NAME>\";\nconst url = `https://${vaultName}.vault.azure.net`;\n\nconst client = new SecretClient(url, credential);\n\nconst secretName = \"MySecretName\";\n\nasync function main() {\n  for await (let secretProperties of client.listPropertiesOfSecrets()) {\n    console.log(\"Secret properties: \", secretProperties);\n  }\n  for await (let deletedSecret of client.listDeletedSecrets()) {\n    console.log(\"Deleted secret: \", deletedSecret);\n  }\n  for await (let versionProperties of client.listPropertiesOfSecretVersions(secretName)) {\n    console.log(\"Version properties: \", versionProperties);\n  }\n}\n\nmain();\n```\n\nAll of these methods will return **all of the available results** at once. To\nretrieve them by pages, add `.byPage()` right after invoking the API method you\nwant to use, as follows:\n\n```javascript\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { SecretClient } = require(\"@azure/keyvault-secrets\");\n\nconst credential = new DefaultAzureCredential();\n\nconst vaultName = \"<YOUR KEYVAULT NAME>\";\nconst url = `https://${vaultName}.vault.azure.net`;\n\nconst client = new SecretClient(url, credential);\n\nconst secretName = \"MySecretName\";\n\nasync function main() {\n  for await (let page of client.listPropertiesOfSecrets().byPage()) {\n    for (let secretProperties of page) {\n      console.log(\"Secret properties: \", secretProperties);\n    }\n  }\n  for await (let page of client.listDeletedSecrets().byPage()) {\n    for (let deletedSecret of page) {\n      console.log(\"Deleted secret: \", deletedSecret);\n    }\n  }\n  for await (let page of client.listPropertiesOfSecretVersions(secretName).byPage()) {\n    for (let versionProperties of page) {\n      console.log(\"Version properties: \", versionProperties);\n    }\n  }\n}\n\nmain();\n```\n\n## Troubleshooting\n\nSee our [troubleshooting guide](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/keyvault/keyvault-secrets/TROUBLESHOOTING.md) for details on how to diagnose various failure scenarios.\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nimport { setLogLevel } from \"@azure/logger\";\n\nsetLogLevel(\"info\");\n```\n\n## Next steps\n\nYou can find more code samples through the following links:\n\n- [Key Vault Secrets Samples (JavaScript)](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/keyvault/keyvault-secrets/samples/v4/javascript)\n- [Key Vault Secrets Samples (TypeScript)](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/keyvault/keyvault-secrets/samples/v4/typescript)\n- [Key Vault Secrets Test Cases](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/keyvault/keyvault-secrets/test/)\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n[azure_keyvault]: https://docs.microsoft.com/azure/key-vault/general/overview\n[azure_keyvault_cli]: https://docs.microsoft.com/azure/key-vault/general/quick-create-cli\n[azure_keyvault_portal]: https://docs.microsoft.com/azure/key-vault/general/quick-create-portal\n[default_azure_credential]: https://docs.microsoft.com/java/api/overview/azure/identity-readme?view=azure-java-stable#defaultazurecredential\n[managed_identity]: https://docs.microsoft.com/azure/active-directory/managed-identities-azure-resources/overview\n[azure_identity]: https://docs.microsoft.com/java/api/overview/azure/identity-readme?view=azure-java-stable\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fkeyvault%2Fkeyvault-secrets%2FREADME.png)\n",
        "repo_name": "keyvault/keyvault-secrets",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/keyvault/keyvault-secrets",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure SourceControlConfiguration client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure SourceControlConfiguration client.\n\nKubernetesConfiguration Client\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/kubernetesconfiguration/arm-kubernetesconfiguration) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-kubernetesconfiguration) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-kubernetesconfiguration) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-kubernetesconfiguration` package\n\nInstall the Azure SourceControlConfiguration client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-kubernetesconfiguration\n```\n\n### Create and authenticate a `SourceControlConfigurationClient`\n\nTo create a client object to access the Azure SourceControlConfiguration API, you will need the `endpoint` of your Azure SourceControlConfiguration resource and a `credential`. The Azure SourceControlConfiguration client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure SourceControlConfiguration resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure SourceControlConfiguration** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { SourceControlConfigurationClient } = require(\"@azure/arm-kubernetesconfiguration\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new SourceControlConfigurationClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new SourceControlConfigurationClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### SourceControlConfigurationClient\n\n`SourceControlConfigurationClient` is the primary interface for developers using the Azure SourceControlConfiguration client library. Explore the methods on this client object to understand the different features of the Azure SourceControlConfiguration service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fkubernetesconfiguration%2Farm-kubernetesconfiguration%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "kubernetesconfiguration/arm-kubernetesconfiguration",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/kubernetesconfiguration/arm-kubernetesconfiguration",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure KustoManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure KustoManagement client.\n\nThe Azure Kusto management API provides a RESTful set of web services that interact with Azure Kusto services to manage your clusters and databases. The API enables you to create, update, and delete clusters and databases.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/kusto/arm-kusto) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-kusto) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-kusto) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-kusto` package\n\nInstall the Azure KustoManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-kusto\n```\n\n### Create and authenticate a `KustoManagementClient`\n\nTo create a client object to access the Azure KustoManagement API, you will need the `endpoint` of your Azure KustoManagement resource and a `credential`. The Azure KustoManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure KustoManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure KustoManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { KustoManagementClient } = require(\"@azure/arm-kusto\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new KustoManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new KustoManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### KustoManagementClient\n\n`KustoManagementClient` is the primary interface for developers using the Azure KustoManagement client library. Explore the methods on this client object to understand the different features of the Azure KustoManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fkusto%2Farm-kusto%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "kusto/arm-kusto",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/kusto/arm-kusto",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure LabServices client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure LabServices client.\n\nREST API for managing Azure Lab Services images.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/labservices/arm-labservices) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-labservices) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-labservices) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-labservices` package\n\nInstall the Azure LabServices client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-labservices\n```\n\n### Create and authenticate a `LabServicesClient`\n\nTo create a client object to access the Azure LabServices API, you will need the `endpoint` of your Azure LabServices resource and a `credential`. The Azure LabServices client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure LabServices resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure LabServices** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { LabServicesClient } = require(\"@azure/arm-labservices\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new LabServicesClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new LabServicesClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### LabServicesClient\n\n`LabServicesClient` is the primary interface for developers using the Azure LabServices client library. Explore the methods on this client object to understand the different features of the Azure LabServices service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Flabservices%2Farm-labservices%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "labservices/arm-labservices",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/labservices/arm-labservices",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure QumuloStorage client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure QumuloStorage client.\n\n\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/liftrqumulo/arm-qumulo) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-qumulo) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-qumulo) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-qumulo` package\n\nInstall the Azure QumuloStorage client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-qumulo\n```\n\n### Create and authenticate a `QumuloStorage`\n\nTo create a client object to access the Azure QumuloStorage API, you will need the `endpoint` of your Azure QumuloStorage resource and a `credential`. The Azure QumuloStorage client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure QumuloStorage resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure QumuloStorage** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { QumuloStorage } = require(\"@azure/arm-qumulo\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new QumuloStorage(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new QumuloStorage(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### QumuloStorage\n\n`QumuloStorage` is the primary interface for developers using the Azure QumuloStorage client library. Explore the methods on this client object to understand the different features of the Azure QumuloStorage service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fliftrqumulo%2Farm-qumulo%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "liftrqumulo/arm-qumulo",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/liftrqumulo/arm-qumulo",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure ManagementLink client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure ManagementLink client.\n\nAzure resources can be linked together to form logical relationships. You can establish links between resources belonging to different resource groups. However, all the linked resources must belong to the same subscription. Each resource can be linked to 50 other resources. If any of the linked resources are deleted or moved, the link owner must clean up the remaining link.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/links/arm-links) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-links) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-links) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-links` package\n\nInstall the Azure ManagementLink client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-links\n```\n\n### Create and authenticate a `ManagementLinkClient`\n\nTo create a client object to access the Azure ManagementLink API, you will need the `endpoint` of your Azure ManagementLink resource and a `credential`. The Azure ManagementLink client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure ManagementLink resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure ManagementLink** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { ManagementLinkClient } = require(\"@azure/arm-links\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new ManagementLinkClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new ManagementLinkClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### ManagementLinkClient\n\n`ManagementLinkClient` is the primary interface for developers using the Azure ManagementLink client library. Explore the methods on this client object to understand the different features of the Azure ManagementLink service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Flinks%2Farm-links%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "links/arm-links",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/links/arm-links",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure LoadTest client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure LoadTest client.\n\nLoadTest client provides access to LoadTest Resource and it's status operations.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/loadtesting/arm-loadtesting) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-loadtesting) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-loadtesting) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-loadtesting` package\n\nInstall the Azure LoadTest client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-loadtesting\n```\n\n### Create and authenticate a `LoadTestClient`\n\nTo create a client object to access the Azure LoadTest API, you will need the `endpoint` of your Azure LoadTest resource and a `credential`. The Azure LoadTest client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure LoadTest resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure LoadTest** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { LoadTestClient } = require(\"@azure/arm-loadtesting\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new LoadTestClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new LoadTestClient(credential, subscriptionId);\n```\n\n### Create an Azure Load Testing resource\n\nCreate a new Azure Load Testing resource.\n```javascript\nloadTestResourceCreatePayload = {\n  location: \"westus2\"\n};\n\nconst resource = await client.loadTests.beginCreateOrUpdateAndWait(\n  \"sample-rg\",\n  \"sample-loadtesting-resource\",\n  loadTestResourceCreatePayload\n);\n\nconsole.log(resource);\n```\n\nCreate a new Azure Load Testing resource with managed identity and customer managed key encryption.\n```javascript\nloadTestResourceCreatePayload = {\n  location: \"westus2\",\n  tags: { team: \"testing\" },\n  identity: {\n    type: 'SystemAssigned, UserAssigned',\n    userAssignedIdentities: {\n      '/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/sample-rg/providers/microsoft.managedidentity/userassignedidentities/identity1': {}\n    }\n  },\n  encryption: {\n    identity: {\n      type: 'UserAssigned',\n      resourceId: '/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/sample-rg/providers/microsoft.managedidentity/userassignedidentities/identity1'\n    },\n    keyUrl: 'https://sample-kv.vault.azure.net/keys/cmkkey/2d1ccd5c50234ea2a0858fe148b69cde'\n  }\n};\n\nconst resource = await client.loadTests.beginCreateOrUpdateAndWait(\n  \"sample-rg\",\n  \"sample-loadtesting-resource\",\n  loadTestResourceCreatePayload\n);\n\nconsole.log(resource);\n```\n\n### Get an Azure Load Testing resource\n\n```javascript\nlet resourceName = 'sample-loadtesting-resource';\nlet resourceGroupName = 'sample-rg';\n\nconst resource = await client.loadTests.get(\n  resourceGroupName,\n  resourceName\n);\n\nconsole.log(resource);\n```\n\n### Update an Azure Load Testing resource\n\n```javascript\nloadTestResourcePatchPayload = {\n  tags: { team: \"testing-dev\" },\n  identity: {\n    type: 'SystemAssigned, UserAssigned',\n    userAssignedIdentities: {\n      // removing a user-assigned managed identity by assigning the value in the payload as null\n      '/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/sample-rg/providers/microsoft.managedidentity/userassignedidentities/identity1': null,\n      '/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/sample-rg/providers/microsoft.managedidentity/userassignedidentities/identity2': {}\n    }\n  },\n  encryption: {\n    // use system-assigned managed identity for CMK encryption\n    identity: {\n      type: 'SystemAssigned',\n      resourceId: null\n    },\n    keyUrl: 'https://sample-kv.vault.azure.net/keys/cmkkey/2d1ccd5c50234ea2a0858fe148b69cde'\n  }\n};\n\nconst resource = await client.loadTests.beginUpdateAndWait(\n  \"sample-rg\",\n  \"sample-loadtesting-resource\",\n  loadTestResourcePatchPayload\n);\n\nconsole.log(resource);\n```\n\n### Delete an Azure Load Testing resource\n\n```javascript\nlet resourceName = 'sample-loadtesting-resource';\nlet resourceGroupName = 'sample-rg';\n\nconst result = await client.loadTests.beginDeleteAndWait(\n  resourceGroupName,\n  resourceName\n);\n```\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### LoadTestClient\n\n`LoadTestClient` is the primary interface for developers using the Azure LoadTest client library. Explore the methods on this client object to understand the different features of the Azure LoadTest service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Floadtestservice%2Farm-loadtesting%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "loadtesting/arm-loadtesting",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/loadtesting/arm-loadtesting",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Load Testing client library for JavaScript\n\nAzure Load Testing provides client library in JavaScript to the user by which they can interact natively with Azure Load Testing service. Azure Load Testing is a fully managed load-testing service that enables you to generate high-scale load. The service simulates traffic for your applications, regardless of where they're hosted. Developers, testers, and quality assurance (QA) engineers can use it to optimize application performance, scalability, or capacity.\n\n**Please rely heavily on our [REST client docs](https://github.com/Azure/azure-sdk-for-js/blob/main/documentation/rest-clients.md) to use this library**\n\n## Documentation\n\nVarious documentation is available to help you get started\n\n- [Source code][source_code]\n- [API reference documentation][api_reference_doc]\n- [Product Documentation][product_documentation]\n\n## Getting started\n\n### Currently supported environments\n\n- Node.js version 14.x.x or higher\n\n### Prerequisites\n\n- You must have an [Azure subscription](https://azure.microsoft.com/free/) and [Azure Load Test Service Resource](https://learn.microsoft.com/azure/load-testing/) to use this package.\n\n### Install the `@azure-rest/load-testing` package\n\nInstall the AzureLoadTesting client REST client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure-rest/load-testing\n```\n\n### Create and authenticate a `AzureLoadTesting` client\n\nTo use an [Azure Active Directory (AAD) token credential](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token),\nprovide an instance of the desired credential type obtained from the\n[@azure/identity](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#credentials) library.\n\nTo authenticate with AAD, you must first `npm` install [`@azure/identity`](https://www.npmjs.com/package/@azure/identity)\n\nAfter setup, you can choose which type of [credential](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#credentials) from `@azure/identity` to use.\nAs an example, [DefaultAzureCredential](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential)\ncan be used to authenticate the client.\n\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables:\nAZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET\n\n```javascript\nimport AzureLoadTesting, { AzureLoadTestingClient } from \"@azure-rest/load-testing\";\nimport { DefaultAzureCredential } from \"@azure/identity\";\n\nconst Client: AzureLoadTestingClient = AzureLoadTesting(Endpoint, new DefaultAzureCredential());\n```\n\n## Key concepts\n\nThe following components make up the Azure Load Testing Service. The Azure Load Test client library for JavaScript allows you to interact with each of these components through the use of a dedicated client object.\n\n#### Test\n\nA test specifies the test script, and configuration settings for running a load test. You can create one or more tests in an Azure Load Testing resource.\n\n#### App Component\n\nWhen you run a load test for an Azure-hosted application, you can monitor resource metrics for the different Azure application components (server-side metrics). While the load test runs, and after completion of the test, you can monitor and analyze the resource metrics in the Azure Load Testing dashboard.\n\n#### Metrics\n\nDuring a load test, Azure Load Testing collects metrics about the test execution. There are two types of metrics:\n\n1. Client-side metrics give you details reported by the test engine. These metrics include the number of virtual users, the request response time, the number of failed requests, or the number of requests per second.\n\n2. Server-side metrics are available for Azure-hosted applications and provide information about your Azure application components. Metrics can be for the number of database reads, the type of HTTP responses, or container resource consumption.\n\n### Test Engine\n\nA test engine is computing infrastructure that runs the Apache JMeter test script. You can scale out your load test by configuring the number of test engines. The test script runs in parallel across the specified number of test engines.\n\n### Test Run\n\nA test run represents one execution of a load test. It collects the logs associated with running the Apache JMeter script, the load test YAML configuration, the list of app components to monitor, and the results of the test.\n\n### Data-Plane Endpoint\n\nData-plane of Azure Load Testing resources is addressable using the following URL format:\n\n`00000000-0000-0000-0000-000000000000.aaa.cnt-prod.loadtesting.azure.com`\n\nThe first GUID `00000000-0000-0000-0000-000000000000` is the unique identifier used for accessing the Azure Load Testing resource. This is followed by `aaa` which is the Azure region of the resource.\n\nThe data-plane endpoint is obtained from Control Plane APIs.\n\n**Example:** `1234abcd-12ab-12ab-12ab-123456abcdef.eus.cnt-prod.loadtesting.azure.com`\n\nIn the above example, `eus` represents the Azure region `East US`.\n\n## Examples\n\n### Creating a load test\n\n```javascript\nimport { AzureLoadTestingClient } from \"@azure-rest/load-testing\";\nimport AzureLoadTesting from \"@azure-rest/load-testing\";\nimport { DefaultAzureCredential } from \"@azure/identity\";\n\nvar TEST_ID = \"some-test-id\";\nvar DISPLAY_NAME = \"my-load-test\";\n\nconst client: AzureLoadTestingClient = AzureLoadTesting(\"<Endpoint>\", new DefaultAzureCredential());\n\nawait client.path(\"/tests/{testId}\", TEST_ID).patch({\n  contentType: \"application/merge-patch+json\",\n  body: {\n    displayName: DISPLAY_NAME,\n    description: \"\",\n    loadTestConfiguration: {\n      engineInstances: 1,\n      splitAllCSVs: false,\n    },\n    secrets: {},\n    environmentVariables: {},\n    passFailCriteria: { passFailMetrics: {} },\n  },\n});\n```\n\n### Uploading .jmx file to a Test\n\n```javascript\nimport { AzureLoadTestingClient, getLongRunningPoller, isUnexpected } from \"@azure-rest/load-testing\";\nimport AzureLoadTesting from \"@azure-rest/load-testing\";\nimport { AbortController } from \"@azure/abort-controller\";\nimport { DefaultAzureCredential } from \"@azure/identity\";\nimport { createReadStream } from \"fs\";\n\nconst client: AzureLoadTestingClient = AzureLoadTesting(\"<Endpoint>\", new DefaultAzureCredential());\n\nvar TEST_ID = \"some-test-id\";\nconst readStream = createReadStream(\"./sample.jmx\");\n\nconst fileUploadResult = await client\n  .path(\"/tests/{testId}/files/{fileName}\", TEST_ID, \"sample.jmx\")\n  .put({\n    contentType: \"application/octet-stream\",\n    body: readStream,\n  });\n\nif (isUnexpected(fileUploadResult)) {\n  throw fileUploadResult.body.error;\n}\n\nlet fileValidateResult;\nconst fileValidatePoller = await getLongRunningPoller(client, fileUploadResult);\ntry{\nfileValidateResult = await fileValidatePoller.pollUntilDone({\n  abortSignal: AbortController.timeout(120*1000), // timeout of 120 seconds\n});} catch (ex: any) {\nnew Error(\"Error in polling file Validation\" + ex.message); //polling timed out\n}\n\nif (fileValidatePoller.getOperationState().status != \"succeeded\" && fileValidateResult)\n  throw new Error(\n    \"There is some issue in validation, please make sure uploaded file is a valid JMX.\" +\n      fileValidateResult.body.validationFailureDetails\n  );\n```\n\n### Running a Test and fetching Metrics\n\n```javascript\nimport { AzureLoadTestingClient, getLongRunningPoller, isUnexpected } from \"@azure-rest/load-testing\";\nimport AzureLoadTesting from \"@azure-rest/load-testing\";\nimport { DefaultAzureCredential } from \"@azure/identity\";\nimport { AbortController } from \"@azure/abort-controller\";\n\nconst client: AzureLoadTestingClient = AzureLoadTesting(\"<Endpoint>\", new DefaultAzureCredential());\n\nvar TEST_ID = \"some-test-id\";\nvar DISPLAY_NAME = \"my-load-test\";\nvar TEST_RUN_ID = \"some-test-run-id\";\n\n// Creating/Updating the test run\nconst testRunCreationResult = await client.path(\"/test-runs/{testRunId}\", TEST_RUN_ID).patch({\n  contentType: \"application/merge-patch+json\",\n  body: {\n    testId: TEST_ID,\n    displayName: DISPLAY_NAME,\n  },\n});\n\nif (isUnexpected(testRunCreationResult)) {\n  throw testRunCreationResult.body.error;\n}\n\nif (testRunCreationResult.body.testRunId === undefined)\n  throw new Error(\"Test Run ID returned as undefined.\");\n\nconst testRunPoller = await getLongRunningPoller(client, testRunCreationResult);\n  let testRunResult;\n\n  try {\n    testRunResult = await testRunPoller.pollUntilDone({\n      abortSignal: AbortController.timeout(60000), // timeout of 60 seconds\n    });\n  } catch (ex: any) {\n    new Error(\"Error in polling test run completion\" + ex.message); //polling timed out\n  }\n\n  if (testRunPoller.getOperationState().status != \"succeeded\")\n    throw new Error(\"There is some issue in running the test, Error Response : \" + testRunResult);\n\n  if (testRunResult) {\n    let testRunStarttime = testRunResult.body.startDateTime;\n    let testRunEndTime = testRunResult.body.endDateTime;\n\n    // get list of all metric namespaces and pick the first one\n    const metricNamespaces = await client\n      .path(\"/test-runs/{testRunId}/metric-namespaces\", TEST_RUN_ID)\n      .get();\n\n    if (isUnexpected(metricNamespaces)) {\n      throw metricNamespaces.body.error;\n    }\n\n    const metricNamespace = metricNamespaces.body.value[0];\n\n    if (metricNamespace.name === undefined) {\n      throw \"No Metric Namespace name is defined.\";\n    }\n\n    // get list of all metric definitions and pick the first one\n    const metricDefinitions = await client\n      .path(\"/test-runs/{testRunId}/metric-definitions\", TEST_RUN_ID)\n      .get({\n        queryParameters: {\n          metricNamespace: metricNamespace.name,\n        },\n      });\n\n    if (isUnexpected(metricDefinitions)) {\n      throw metricDefinitions.body.error;\n    }\n\n    const metricDefinition = metricDefinitions.body.value[0];\n\n    if (metricDefinition.name === undefined) {\n      throw \"No Metric Namespace name is defined.\";\n    }\n\n    // fetch client metrics using metric namespace and metric name\n    const metricsResult = await client.path(\"/test-runs/{testRunId}/metrics\", TEST_RUN_ID).post({\n      queryParameters: {\n        metricname: metricDefinition.name,\n        metricNamespace: metricNamespace.name,\n        timespan: testRunStarttime + \"/\" + testRunEndTime,\n      },\n    });\n\n    console.log(metricsResult);\n    console.log(testRunResult);\n}\n```\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nimport { setLogLevel } from \"@azure/logger\";\n\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nAzure Loading Testing JavaScript SDK samples are available to you in the SDK's GitHub repository. These samples provide example code for additional scenarios commonly encountered.\n\nSee [Azure Load Testing samples][sample_code].\n\n## Contributing\n\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md).\n\n1. Fork it\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create new Pull Request\n\n<!-- LINKS -->\n\n[source_code]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/loadtesting/load-testing-rest/src\n[sample_code]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/loadtesting/load-testing-rest/samples/v1-beta\n[api_reference_doc]: https://docs.microsoft.com/rest/api/loadtesting/\n[product_documentation]: https://azure.microsoft.com/services/load-testing/\n[azure_subscription]: https://azure.microsoft.com/free/\n",
        "repo_name": "loadtesting/load-testing-rest",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/loadtesting/load-testing-rest",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure ManagementLock client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure ManagementLock client.\n\nAzure resources can be locked to prevent other users in your organization from deleting or modifying resources.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/locks/arm-locks-profile-2020-09-01-hybrid) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-locks-profile-2020-09-01-hybrid) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-locks-profile-2020-09-01-hybrid) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-locks-profile-2020-09-01-hybrid` package\n\nInstall the Azure ManagementLock client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-locks-profile-2020-09-01-hybrid\n```\n\n### Create and authenticate a `ManagementLockClient`\n\nTo create a client object to access the Azure ManagementLock API, you will need the `endpoint` of your Azure ManagementLock resource and a `credential`. The Azure ManagementLock client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure ManagementLock resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure ManagementLock** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { ManagementLockClient } = require(\"@azure/arm-locks-profile-2020-09-01-hybrid\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new ManagementLockClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new ManagementLockClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### ManagementLockClient\n\n`ManagementLockClient` is the primary interface for developers using the Azure ManagementLock client library. Explore the methods on this client object to understand the different features of the Azure ManagementLock service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Flocks%2Farm-locks-profile-2020-09-01-hybrid%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "locks/arm-locks-profile-2020-09-01-hybrid",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/locks/arm-locks-profile-2020-09-01-hybrid",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure ManagementLock client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure ManagementLock client.\n\nAzure resources can be locked to prevent other users in your organization from deleting or modifying resources.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/locks/arm-locks) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-locks) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-locks) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-locks` package\n\nInstall the Azure ManagementLock client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-locks\n```\n\n### Create and authenticate a `ManagementLockClient`\n\nTo create a client object to access the Azure ManagementLock API, you will need the `endpoint` of your Azure ManagementLock resource and a `credential`. The Azure ManagementLock client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure ManagementLock resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure ManagementLock** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { ManagementLockClient } = require(\"@azure/arm-locks\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new ManagementLockClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new ManagementLockClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### ManagementLockClient\n\n`ManagementLockClient` is the primary interface for developers using the Azure ManagementLock client library. Explore the methods on this client object to understand the different features of the Azure ManagementLock service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Flocks%2Farm-locks%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "locks/arm-locks",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/locks/arm-locks",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure LogicManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure LogicManagement client.\n\nREST API for Azure Logic Apps.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/logic/arm-logic) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-logic) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-logic) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-logic` package\n\nInstall the Azure LogicManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-logic\n```\n\n### Create and authenticate a `LogicManagementClient`\n\nTo create a client object to access the Azure LogicManagement API, you will need the `endpoint` of your Azure LogicManagement resource and a `credential`. The Azure LogicManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure LogicManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure LogicManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { LogicManagementClient } = require(\"@azure/arm-logic\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new LogicManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new LogicManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### LogicManagementClient\n\n`LogicManagementClient` is the primary interface for developers using the Azure LogicManagement client library. Explore the methods on this client object to understand the different features of the Azure LogicManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Flogic%2Farm-logic%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "logic/arm-logic",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/logic/arm-logic",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure ML Commitment Plans Management client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure ML Commitment Plans Management client.\n\nThese APIs allow end users to operate on Azure Machine Learning Commitment Plans resources and their child Commitment Association resources. They support CRUD operations for commitment plans, get and list operations for commitment associations, moving commitment associations between commitment plans, and retrieving commitment plan usage history.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/machinelearning/arm-commitmentplans) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-commitmentplans) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-commitmentplans?view=azure-node-preview) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-commitmentplans` package\n\nInstall the Azure ML Commitment Plans Management client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-commitmentplans\n```\n\n### Create and authenticate a `AzureMLCommitmentPlansManagementClient`\n\nTo create a client object to access the Azure ML Commitment Plans Management API, you will need the `endpoint` of your Azure ML Commitment Plans Management resource and a `credential`. The Azure ML Commitment Plans Management client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure ML Commitment Plans Management resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure ML Commitment Plans Management** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { AzureMLCommitmentPlansManagementClient } = require(\"@azure/arm-commitmentplans\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new AzureMLCommitmentPlansManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new AzureMLCommitmentPlansManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### AzureMLCommitmentPlansManagementClient\n\n`AzureMLCommitmentPlansManagementClient` is the primary interface for developers using the Azure ML Commitment Plans Management client library. Explore the methods on this client object to understand the different features of the Azure ML Commitment Plans Management service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fmachinelearning%2Farm-commitmentplans%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "machinelearning/arm-commitmentplans",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/machinelearning/arm-commitmentplans",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# AzureMachineLearningWorkspaces client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for AzureMachineLearningWorkspaces client.\n\nThese APIs allow end users to operate on Azure Machine Learning Workspace resources.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/machinelearning/arm-machinelearning) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-machinelearning) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-machinelearning) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-machinelearning` package\n\nInstall the AzureMachineLearningWorkspaces client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-machinelearning\n```\n\n### Create and authenticate a `AzureMachineLearningWorkspaces`\n\nTo create a client object to access the AzureMachineLearningWorkspaces API, you will need the `endpoint` of your AzureMachineLearningWorkspaces resource and a `credential`. The AzureMachineLearningWorkspaces client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your AzureMachineLearningWorkspaces resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to AzureMachineLearningWorkspaces** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { AzureMachineLearningWorkspaces } = require(\"@azure/arm-machinelearning\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new AzureMachineLearningWorkspaces(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new AzureMachineLearningWorkspaces(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### AzureMachineLearningWorkspaces\n\n`AzureMachineLearningWorkspaces` is the primary interface for developers using the AzureMachineLearningWorkspaces client library. Explore the methods on this client object to understand the different features of the AzureMachineLearningWorkspaces service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fmachinelearning%2Farm-machinelearning%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "machinelearning/arm-machinelearning",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/machinelearning/arm-machinelearning",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure ML Web Services Management client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure ML Web Services Management client.\n\nThese APIs allow end users to operate on Azure Machine Learning Web Services resources. They support the following operations:<ul><li>Create or update a web service</li><li>Get a web service</li><li>Patch a web service</li><li>Delete a web service</li><li>Get All Web Services in a Resource Group </li><li>Get All Web Services in a Subscription</li><li>Get Web Services Keys</li></ul>\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/machinelearning/arm-webservices) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-webservices) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-webservices) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-webservices` package\n\nInstall the Azure ML Web Services Management client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-webservices\n```\n\n### Create and authenticate a `AzureMLWebServicesManagementClient`\n\nTo create a client object to access the Azure ML Web Services Management API, you will need the `endpoint` of your Azure ML Web Services Management resource and a `credential`. The Azure ML Web Services Management client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure ML Web Services Management resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure ML Web Services Management** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { AzureMLWebServicesManagementClient } = require(\"@azure/arm-webservices\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new AzureMLWebServicesManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new AzureMLWebServicesManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### AzureMLWebServicesManagementClient\n\n`AzureMLWebServicesManagementClient` is the primary interface for developers using the Azure ML Web Services Management client library. Explore the methods on this client object to understand the different features of the Azure ML Web Services Management service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fmachinelearning%2Farm-webservices%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "machinelearning/arm-webservices",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/machinelearning/arm-webservices",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Machine Learning Workspaces Management client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure Machine Learning Workspaces Management client.\n\nThese APIs allow end users to operate on Azure Machine Learning Workspace resources. They support CRUD operations for Azure Machine Learning Workspaces.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/machinelearning/arm-workspaces) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-workspaces) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-workspaces) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-workspaces` package\n\nInstall the Azure Machine Learning Workspaces Management client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-workspaces\n```\n\n### Create and authenticate a `MachineLearningWorkspacesManagementClient`\n\nTo create a client object to access the Azure Machine Learning Workspaces Management API, you will need the `endpoint` of your Azure Machine Learning Workspaces Management resource and a `credential`. The Azure Machine Learning Workspaces Management client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure Machine Learning Workspaces Management resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure Machine Learning Workspaces Management** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { MachineLearningWorkspacesManagementClient } = require(\"@azure/arm-workspaces\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new MachineLearningWorkspacesManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new MachineLearningWorkspacesManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### MachineLearningWorkspacesManagementClient\n\n`MachineLearningWorkspacesManagementClient` is the primary interface for developers using the Azure Machine Learning Workspaces Management client library. Explore the methods on this client object to understand the different features of the Azure Machine Learning Workspaces Management service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fmachinelearning%2Farm-workspaces%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "machinelearning/arm-workspaces",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/machinelearning/arm-workspaces",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Machine Learning Compute Management client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure Machine Learning Compute Management client.\n\nThese APIs allow end users to operate on Azure Machine Learning Compute resources. They support the following operations:<ul><li>Create or update a cluster</li><li>Get a cluster</li><li>Patch a cluster</li><li>Delete a cluster</li><li>Get keys for a cluster</li><li>Check if updates are available for system services in a cluster</li><li>Update system services in a cluster</li><li>Get all clusters in a resource group</li><li>Get all clusters in a subscription</li></ul>\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/machinelearningcompute/arm-machinelearningcompute) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-machinelearningcompute) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-machinelearningcompute?view=azure-node-preview) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-machinelearningcompute` package\n\nInstall the Azure Machine Learning Compute Management client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-machinelearningcompute\n```\n\n### Create and authenticate a `MachineLearningComputeManagementClient`\n\nTo create a client object to access the Azure Machine Learning Compute Management API, you will need the `endpoint` of your Azure Machine Learning Compute Management resource and a `credential`. The Azure Machine Learning Compute Management client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure Machine Learning Compute Management resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure Machine Learning Compute Management** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { MachineLearningComputeManagementClient } = require(\"@azure/arm-machinelearningcompute\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new MachineLearningComputeManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new MachineLearningComputeManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### MachineLearningComputeManagementClient\n\n`MachineLearningComputeManagementClient` is the primary interface for developers using the Azure Machine Learning Compute Management client library. Explore the methods on this client object to understand the different features of the Azure Machine Learning Compute Management service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fmachinelearningcompute%2Farm-machinelearningcompute%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "machinelearningcompute/arm-machinelearningcompute",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/machinelearningcompute/arm-machinelearningcompute",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure ML Team Account Management client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure ML Team Account Management client.\n\nThese APIs allow end users to operate on Azure Machine Learning Team Account resources. They support CRUD operations for Azure Machine Learning Team Accounts.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/machinelearningexperimentation/arm-machinelearningexperimentation) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-machinelearningexperimentation) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-machinelearningexperimentation?view=azure-node-preview) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-machinelearningexperimentation` package\n\nInstall the Azure ML Team Account Management client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-machinelearningexperimentation\n```\n\n### Create and authenticate a `MLTeamAccountManagementClient`\n\nTo create a client object to access the Azure ML Team Account Management API, you will need the `endpoint` of your Azure ML Team Account Management resource and a `credential`. The Azure ML Team Account Management client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure ML Team Account Management resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure ML Team Account Management** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { MLTeamAccountManagementClient } = require(\"@azure/arm-machinelearningexperimentation\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new MLTeamAccountManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new MLTeamAccountManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### MLTeamAccountManagementClient\n\n`MLTeamAccountManagementClient` is the primary interface for developers using the Azure ML Team Account Management client library. Explore the methods on this client object to understand the different features of the Azure ML Team Account Management service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fmachinelearningexperimentation%2Farm-machinelearningexperimentation%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "machinelearningexperimentation/arm-machinelearningexperimentation",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/machinelearningexperimentation/arm-machinelearningexperimentation",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Application client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure Application client.\n\nARM applications\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/managedapplications/arm-managedapplications) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-managedapplications) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-managedapplications) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-managedapplications` package\n\nInstall the Azure Application client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-managedapplications\n```\n\n### Create and authenticate a `ApplicationClient`\n\nTo create a client object to access the Azure Application API, you will need the `endpoint` of your Azure Application resource and a `credential`. The Azure Application client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure Application resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure Application** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { ApplicationClient } = require(\"@azure/arm-managedapplications\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new ApplicationClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new ApplicationClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### ApplicationClient\n\n`ApplicationClient` is the primary interface for developers using the Azure Application client library. Explore the methods on this client object to understand the different features of the Azure Application service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fmanagedapplications%2Farm-managedapplications%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "managedapplications/arm-managedapplications",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/managedapplications/arm-managedapplications",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure ManagementGroupsApi client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure ManagementGroupsApi client.\n\nThe Azure Management Groups API enables consolidation of multiple \nsubscriptions/resources into an organizational hierarchy and centrally \nmanage access control, policies, alerting and reporting for those resources.\n\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/managementgroups/arm-managementgroups) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-managementgroups) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-managementgroups) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-managementgroups` package\n\nInstall the Azure ManagementGroupsApi client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-managementgroups\n```\n\n### Create and authenticate a `ManagementGroupsAPI`\n\nTo create a client object to access the Azure ManagementGroupsApi API, you will need the `endpoint` of your Azure ManagementGroupsApi resource and a `credential`. The Azure ManagementGroupsApi client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure ManagementGroupsApi resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure ManagementGroupsApi** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { ManagementGroupsAPI } = require(\"@azure/arm-managementgroups\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new ManagementGroupsAPI(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new ManagementGroupsAPI(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### ManagementGroupsAPI\n\n`ManagementGroupsAPI` is the primary interface for developers using the Azure ManagementGroupsApi client library. Explore the methods on this client object to understand the different features of the Azure ManagementGroupsApi service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fmanagementgroups%2Farm-managementgroups%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "managementgroups/arm-managementgroups",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/managementgroups/arm-managementgroups",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure AceProvisioningManagementPartnerApi client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure AceProvisioningManagementPartnerApi client.\n\nThis API describe ACE Provisioning ManagementPartner\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/managementpartner/arm-managementpartner) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-managementpartner) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-managementpartner) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-managementpartner` package\n\nInstall the Azure AceProvisioningManagementPartnerApi client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-managementpartner\n```\n\n### Create and authenticate a `ACEProvisioningManagementPartnerAPI`\n\nTo create a client object to access the Azure AceProvisioningManagementPartnerApi API, you will need the `endpoint` of your Azure AceProvisioningManagementPartnerApi resource and a `credential`. The Azure AceProvisioningManagementPartnerApi client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure AceProvisioningManagementPartnerApi resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure AceProvisioningManagementPartnerApi** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { ACEProvisioningManagementPartnerAPI } = require(\"@azure/arm-managementpartner\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new ACEProvisioningManagementPartnerAPI(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new ACEProvisioningManagementPartnerAPI(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### ACEProvisioningManagementPartnerAPI\n\n`ACEProvisioningManagementPartnerAPI` is the primary interface for developers using the Azure AceProvisioningManagementPartnerApi client library. Explore the methods on this client object to understand the different features of the Azure AceProvisioningManagementPartnerApi service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fmanagementpartner%2Farm-managementpartner%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "managementpartner/arm-managementpartner",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/managementpartner/arm-managementpartner",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# AzureMapsManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for AzureMapsManagement client.\n\nAzure Maps\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/maps/arm-maps) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-maps) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-maps?view=azure-node-preview) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-maps` package\n\nInstall the AzureMapsManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-maps\n```\n\n### Create and authenticate a `AzureMapsManagementClient`\n\nTo create a client object to access the AzureMapsManagement API, you will need the `endpoint` of your AzureMapsManagement resource and a `credential`. The AzureMapsManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your AzureMapsManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to AzureMapsManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { AzureMapsManagementClient } = require(\"@azure/arm-maps\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new AzureMapsManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new AzureMapsManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### AzureMapsManagementClient\n\n`AzureMapsManagementClient` is the primary interface for developers using the AzureMapsManagement client library. Explore the methods on this client object to understand the different features of the AzureMapsManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fmaps%2Farm-maps%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "maps/arm-maps",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/maps/arm-maps",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Maps Common client library for JavaScript/TypeScript\n\nAn internal library for the various Azure Maps client libraries.\n\nThis package contains common code that needs to be shared among the other Azure Maps libraries. It is not published to NPM and is not meant for usage by any other consumers.\n\n## Maps client libraries\n\nThe following client libraries use this package:\n\n- @azure/maps-search\n- @azure-rest/maps-route\n\n## Getting started\n\nFor information on getting started, please see our [Maps client libraries](#maps-client-libraries).\n\n## Key concepts\n\nFor information on key concepts, please see our [Maps client libraries](#maps-client-libraries).\n\n## Examples\n\nFor examples, please see our [Maps client libraries](#maps-client-libraries).\n\n## Next steps\n\nFor information on next steps, please see our [Maps client libraries](#maps-client-libraries).\n\n## Troubleshooting\n\nIf you run into issues while using this library, directly or indirectly, please feel free to [file an issue](https://github.com/Azure/azure-sdk-for-js/issues/new).\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/master/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fmaps%2Fmaps-common%2FREADME.png)\n",
        "repo_name": "maps/maps-common",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/maps/maps-common",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Maps Geolocation REST client library for JavaScript\n\nAzure Maps Geolocation Client\n\n\\*\\*If you are not familiar with our REST client, please spend 5 minutes to take a look at our [REST client docs](https://github.com/Azure/azure-sdk-for-js/blob/main/documentation/rest-clients.md) to use this library, the REST client provides a light-weighted & developer friendly way to call azure rest api\n\nKey links:\n\n- [Source code][source_code]\n- [Package (NPM)][npm_package]\n- [API reference documentation][api_ref]\n- [Samples][samples]\n- [Product Information][product_info]\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://nodejs.org/about/releases/)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\n### Prerequisites\n\n- You must have an [Azure subscription][az_subscription] to use this package.\n- An [Azure Maps account][az_maps_account_management]. You can create the resource via the [Azure Portal][azure_portal], the [Azure PowerShell][azure_powershell], or the [Azure CLI][azure_cli].\n\nIf you use Azure CLI, replace `<resource-group-name>` and `<map-account-name>` of your choice, and select a proper [pricing tier][az_map_pricing] based on your needs via the `<sku-name>` parameter. Please refer to [Azure Maps Reference for Azure CLI][az_map_az_cli] for more details.\n\n```bash\naz maps account create --resource-group <resource-group-name> --name <map-account-name> --sku <sku-name>\n```\n\n### Install the `@azure-rest/maps-geolocation` package\n\nInstall the Azure Maps Geolocation REST client REST client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure-rest/maps-geolocation\n```\n\n### Create and authenticate a `MapsGeolocationClient`\n\nYou'll need a `credential` instance for authentication when creating the `MapsGeolocationClient` instance used to access the Azure Maps render APIs. You can use either an Azure Active Directory (Azure AD) credential or an Azure subscription key to authenticate. For more information on authentication, see [Authentication with Azure Maps][az_map_auth].\n\n#### Using an Azure AD credential\n\nTo use an [Azure Active Directory (AAD) token credential](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token),\nprovide an instance of the desired credential type obtained from the\n[@azure/identity](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#credentials) library.\n\nTo authenticate with AAD, you must first `npm` install [`@azure/identity`](https://www.npmjs.com/package/@azure/identity)\n\nAfter setup, you can choose which type of [credential](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#credentials) from `@azure/identity` to use.\nAs an example, [DefaultAzureCredential](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential)\ncan be used to authenticate the client.\n\nYou'll need to register the new Azure AD application and grant access to Azure Maps by assigning the required role to your service principal. For more information, see [Host a daemon on non-Azure resources](https://learn.microsoft.com/azure/azure-maps/how-to-secure-daemon-app#host-a-daemon-on-non-azure-resources). Set the values of the client ID, tenant ID, and client secret of the AAD application as environment variables:\n`AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nYou will also need to specify the Azure Maps resource you intend to use by specifying the `clientId` in the client options.\nThe Azure Maps resource client id can be found in the Authentication sections in the Azure Maps resource. Please refer to the [documentation](https://docs.microsoft.com/azure/azure-maps/how-to-manage-authentication#view-authentication-details) on how to find it.\n\n```javascript\nconst MapsGeolocation = require(\"@azure-rest/maps-geolocation\").default;\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst credential = new DefaultAzureCredential();\nconst client = MapsGeolocation(credential, \"<maps-account-client-id>\");\n```\n\n#### Using a Subscription Key Credential\n\nYou can authenticate with your Azure Maps Subscription Key. Please install the `@azure/core-auth` package:\n\n```bash\nnpm install @azure/core-auth\n```\n\n```javascript\nconst MapsGeolocation = require(\"@azure-rest/maps-geolocation\").default;\nconst { AzureKeyCredential } = require(\"@azure/core-auth\");\nconst credential = new AzureKeyCredential(\"<subscription-key>\");\nconst client = MapsGeolocation(credential);\n```\n\n## Key concepts\n\n### MapsGeolocationClient\n\n`MapsGeolocationClient` is the primary interface for developers using the Azure Maps Geolocation client library. Explore the methods on this client object to understand the different features of the Azure Maps Geolocation service that you can access.\n\n## Examples\n\nYou can get the country code from a IP address:\n\n```javascript\nconst { isUnexpected } = require(\"@azure-rest/maps-geolocation\");\n\nconst result = await client.path(\"/geolocation/ip/{format}\", \"json\").get({\n  queryParameters: { ip: \"2001:4898:80e8:b::189\" },\n});\n\nif (isUnexpected(result)) {\n  throw result.body.error;\n}\nif (!result.body.countryRegion) {\n  throw new Error(\"No country region was found for the IP address.\");\n}\nconsole.log(`The country code for the IP address is ${result.body.countryRegion.isoCode}`);\n```\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\n\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fmaps%2Fmaps-geolocation-rest%2FREADME.png)\n\n[source_code]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/maps/maps-geolocation-rest\n[npm_package]: https://www.npmjs.com/package/@azure-rest/maps-geolocation\n[api_ref]: https://docs.microsoft.com/javascript/api/@azure-rest/maps-geolocation?view=azure-node-preview\n[samples]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/maps/maps-geolocation-rest/samples\n[product_info]: https://learn.microsoft.com/rest/api/maps/geolocation\n[az_subscription]: https://azure.microsoft.com/free/\n[az_maps_account_management]: https://docs.microsoft.com/azure/azure-maps/how-to-manage-account-keys\n[azure_portal]: https://portal.azure.com\n[azure_powershell]: https://docs.microsoft.com/powershell/module/az.maps/new-azmapsaccount\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[az_map_pricing]: https://docs.microsoft.com/azure/azure-maps/choose-pricing-tier\n[az_map_az_cli]: https://docs.microsoft.com/cli/azure/maps/account?view=azure-cli-latest#az_maps_account_create\n[az_map_auth]: https://learn.microsoft.com/azure/azure-maps/azure-maps-authentication\n",
        "repo_name": "maps/maps-geolocation-rest",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/maps/maps-geolocation-rest",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure MapsRender REST client library for JavaScript\n\nAzure Maps Render Client\n\n\\*\\*If you are not familiar with our REST client, please spend 5 minutes to take a look at our [REST client docs](https://github.com/Azure/azure-sdk-for-js/blob/main/documentation/rest-clients.md) to use this library, the REST client provides a light-weighted & developer friendly way to call azure rest api\n\nKey links:\n\n- [Source code][source_code]\n- [Package (NPM)][npm_package]\n- [API reference documentation][api_ref]\n- [Product Information][product_info]\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js][nodejs_release]\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\n### Prerequisites\n\n- You must have an [Azure subscription][az_subscription] to use this package.\n- An [Azure Maps account][az_maps_account_management]. You can create the resource via the [Azure Portal][azure_portal], the [Azure PowerShell][azure_powershell], or the [Azure CLI][azure_cli].\n\nIf you use Azure CLI, replace `<resource-group-name>` and `<map-account-name>` of your choice, and select a proper [pricing tier][az_map_pricing] based on your needs via the `<sku-name>` parameter. Please refer to [Azure Maps Reference for Azure CLI][az_map_az_cli] for more details.\n\n```bash\naz maps account create --resource-group <resource-group-name> --name <map-account-name> --sku <sku-name>\n```\n\n### Install the `@azure-rest/maps-render` package\n\nInstall the Azure Maps Render REST client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure-rest/maps-render\n```\n\n### Create and authenticate a `MapsRenderClient`\n\nYou'll need a `credential` instance for authentication when creating the `MapsRenderClient` instance used to access the Azure Maps render APIs. You can use either an Azure Active Directory (Azure AD) credential or an Azure subscription key to authenticate. For more information on authentication, see [Authentication with Azure Maps][az_map_auth].\n\n#### Using an Azure AD credential\n\nTo use an [Azure Active Directory (AAD) token credential](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token),\nprovide an instance of the desired credential type obtained from the\n[@azure/identity](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#credentials) library.\n\nTo authenticate with AAD, you must first `npm` install [`@azure/identity`](https://www.npmjs.com/package/@azure/identity)\n\nAfter setup, you can choose which type of [credential](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#credentials) from `@azure/identity` to use.\nAs an example, [DefaultAzureCredential](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential)\ncan be used to authenticate the client.\n\nYou'll need to register the new Azure AD application and grant access to Azure Maps by assigning the required role to your service principal. For more information, see [Host a daemon on non-Azure resources](https://learn.microsoft.com/azure/azure-maps/how-to-secure-daemon-app#host-a-daemon-on-non-azure-resources). Set the values of the client ID, tenant ID, and client secret of the AAD application as environment variables:\n`AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nYou will also need to specify the Azure Maps resource you intend to use by specifying the `clientId` in the client options.\nThe Azure Maps resource client id can be found in the Authentication sections in the Azure Maps resource. Please refer to the [documentation](https://docs.microsoft.com/azure/azure-maps/how-to-manage-authentication#view-authentication-details) on how to find it.\n\n```javascript\nconst MapsRender = require(\"@azure-rest/maps-render\").default;\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n\nconst credential = new DefaultAzureCredential();\nconst client = MapsRender(credential, \"<maps-account-client-id>\");\n```\n\n#### Using a Subscription Key Credential\n\nYou can authenticate with your Azure Maps Subscription Key. Please install the `@azure/core-auth` package:\n\n```bash\nnpm install @azure/core-auth\n```\n\n```javascript\nconst MapsRender = require(\"@azure-rest/maps-render\").default;\nconst { AzureKeyCredential } = require(\"@azure/core-auth\");\n\nconst credential = new AzureKeyCredential(\"<subscription-key>\");\nconst client = MapsRender(credential);\n```\n\n## Key concepts\n\n### MapsRenderClient\n\n`MapsRenderClient` is the primary interface for developers using the Azure Maps Render client library. Explore the methods on this client object to understand the different features of the Azure Maps Render service that you can access.\n\n## Examples\n\nThe following sections provide several code snippets covering some of the most common Azure Maps Render tasks, including:\n\n- [Request map tiles in vector or raster formats](#request-map-tiles-in-vector-or-raster-formats)\n- [Request map copyright attribution information](#request-map-copyright-attribution-information)\n- [Request metadata for a tileset](#request-metadata-for-a-tileset)\n\n### Request map tiles in vector or raster formats\n\nYou can request map tiles in vector or raster formats. These tiles are typically to be integrated into a map control or SDK.\nSome example tiles that can be requested are Azure Maps road tiles, real-time Weather Radar tiles or the map tiles created using [Azure Maps Creator](https://docs.microsoft.com/shows/internet-of-things-show/introducing-azure-maps-creator).\n\n```javascript\nconst { createWriteStream } = require(\"fs\");\nconst { positionToTileXY } = require(\"@azure-rest/maps-render\");\n\nconst zoom = 6;\n// Use the helper function `positionToTileXY` to get the tile index from the coordinate.\nconst { x, y } = positionToTileXY([47.61559, -122.33817], 6, \"256\");\nconst response = await client\n  .path(\"/map/tile\")\n  .get({\n    queryParameters: {\n      tilesetId: \"microsoft.base.road\",\n      zoom,\n      x,\n      y,\n    },\n  })\n  .asNodeStream();\n\n// Handle the error.\nif (!response.body) {\n  throw Error(\"No response body\");\n}\nresponse.body.pipe(createWriteStream(\"tile.png\"));\n```\n\n### Request map copyright attribution information\n\nYou can request map copyright attribution information for a section of a tileset.\nA tileset is a collection of raster or vector data broken up into a uniform grid of square tiles at preset zoom levels. Every tileset has a tilesetId to use when making requests. The supported tilesetIds are listed [here](https://docs.microsoft.com/rest/api/maps/render-v2/get-map-attribution?tabs=HTTP#tilesetid).\n\n```javascript\nconst { isUnexpected } = require(\"@azure-rest/maps-render\");\n\nconst response = await client.path(\"/map/attribution\").get({\n  queryParameters: {\n    tilesetId: \"microsoft.base\",\n    zoom: 6,\n    /** The order is [SouthwestCorner_Longitude, SouthwestCorner_Latitude, NortheastCorner_Longitude, NortheastCorner_Latitude] */\n    bounds: [-122.414162, 47.57949, -122.247157, 47.668372],\n  },\n});\n\n// Handle exception.\nif (isUnexpected(response)) {\n  throw response.body.error;\n}\n\nconsole.log(\"Copyright attribution for microsoft.base: \");\nresponse.body.copyrights.forEach((copyright) => console.log(copyright));\n```\n\n### Request metadata for a tileset\n\nYou can request metadata for a tileset in TileJSON format using the following code snippet.\n\n```javascript\nconst { isUnexpected } = require(\"@azure-rest/maps-render\");\n\nconst response = await client.path(\"/map/tileset\").get({\n  queryParameters: {\n    tilesetId: \"microsoft.base\",\n  },\n});\n\nif (isUnexpected(response)) {\n  throw response.body.error;\n}\n\nconsole.log(\"The metadata of Microsoft Base tileset: \");\nconst { maxzoom, minzoom, bounds = [] } = response.body;\nconsole.log(`The zoom range started from ${minzoom} to ${maxzoom}`);\nconsole.log(\n  `The left bound is ${bounds[0]}, bottom bound is ${bounds[1]}, right bound is ${bounds[2]}, and top bound is ${bounds[3]}`\n);\n```\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\n\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples][samples] directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/master/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fmaps%2Fmaps-render-rest%2FREADME.png)\n\n[source_code]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/maps/maps-render-rest\n[npm_package]: https://www.npmjs.com/package/@azure-rest/maps-render\n[api_ref]: https://docs.microsoft.com/javascript/api/@azure-rest/maps-render?view=azure-node-preview\n[samples]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/maps/maps-render-rest/samples\n[product_info]: https://docs.microsoft.com/rest/api/maps/render-v2\n[nodejs_release]: https://nodejs.org/about/releases/\n[az_subscription]: https://azure.microsoft.com/free/\n[az_maps_account_management]: https://docs.microsoft.com/azure/azure-maps/how-to-manage-account-keys\n[azure_portal]: https://portal.azure.com\n[azure_powershell]: https://docs.microsoft.com/powershell/module/az.maps/new-azmapsaccount\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[az_map_pricing]: https://docs.microsoft.com/azure/azure-maps/choose-pricing-tier\n[az_map_az_cli]: https://docs.microsoft.com/cli/azure/maps/account?view=azure-cli-latest#az_maps_account_create\n[az_map_auth]: https://learn.microsoft.com/azure/azure-maps/azure-maps-authentication\n",
        "repo_name": "maps/maps-render-rest",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/maps/maps-render-rest",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure MapsRoute client library for JavaScript/TypeScript\n\nThe Route Directions and Route Matrix APIs in Azure Maps Route Service can be used to calculate the estimated arrival times (ETAs) for each requested route. Route APIs consider factors such as real-time traffic information and historic traffic data, like the typical road speeds on the requested day of the week and time of day. The APIs return the shortest or fastest routes available to multiple destinations at a time in sequence or in optimized order, based on time or distance. Users can also request specialized routes and details for walkers, bicyclists, and commercial vehicles like trucks.\n\n**Please rely heavily on our [REST client docs](https://github.com/Azure/azure-sdk-for-js/blob/main/documentation/rest-clients.md) to use this library**\n\nKey links:\n\n- [Source code][source_code]\n- [Package (NPM)][npm_link]\n- [API reference documentation][api_ref]\n- [Product Information](https://docs.microsoft.com/rest/api/maps/route)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://nodejs.org/about/releases/)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n- An [Azure Maps account](https://docs.microsoft.com/azure/azure-maps/how-to-manage-account-keys). You can create the resource via the [Azure Portal][azure_portal], the [Azure PowerShell][azure_powershell], or the [Azure CLI][azure_cli].\n\nIf you use Azure CLI, replace `<resource-group-name>` and `<map-account-name>` of your choice, and select a proper [pricing tier](https://docs.microsoft.com/azure/azure-maps/choose-pricing-tier) based on your needs via the `<sku-name>` parameter. Please refer to [this page](https://docs.microsoft.com/cli/azure/maps/account?view=azure-cli-latest#az_maps_account_create) for more details.\n\n### Install the `@azure-rest/maps-route` package\n\nInstall the Azure MapsRoute client REST client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure-rest/maps-route\n```\n\n### Create and authenticate a `MapsRouteClient`\n\nTo create a client object to access the Azure Maps Route APIs, you will need a `credential` object. The Azure Maps Route client can use an Azure Active Directory credential or an Azure Key credential to authenticate.\n\n#### Using an Azure Active Directory Credential\n\nYou can authenticate with Azure Active Directory using the [Azure Identity library][azure_identity]. To use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to register a new AAD application and grant access to Azure Maps by assigning the suitable role to your service principal. Please refer to the [Manage authentication](https://docs.microsoft.com/azure/azure-maps/how-to-manage-authentication) page.\n\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nYou will also need to specify the Azure Maps resource you intend to use by specifying the `clientId` in the client options.\nThe Azure Maps resource client id can be found in the Authentication sections in the Azure Maps resource. Please refer to the [documentation](https://docs.microsoft.com/azure/azure-maps/how-to-manage-authentication#view-authentication-details) on how to find it.\n\n```javascript\nconst MapsRoute = require(\"@azure-rest/maps-route\").default;\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n\nconst credential = new DefaultAzureCredential();\nconst client = MapsRoute(credential, \"<maps-account-client-id>\");\n```\n\n#### Using a Subscription Key Credential\n\nYou can authenticate with your Azure Maps Subscription Key.\n\n```javascript\nconst MapsRoute = require(\"@azure-rest/maps-route\").default;\nconst { AzureKeyCredential } = require(\"@azure/core-auth\");\n\nconst credential = new AzureKeyCredential(\"<subscription-key>\");\nconst client = MapsRoute(credential);\n```\n\n## Examples\n\nThe following sections provide several code snippets covering some of the most common Azure Maps Route tasks, including:\n\n- [Request historic and real-time data](#request-historic-and-real-time-data)\n- [Request a route for a commercial vehicle](#request-a-route-for-a-commercial-vehicle)\n- [Calculate and optimize a multi-stop route](#calculate-and-optimize-a-multi-stop-route)\n\n### Request historic and real-time data\n\nBy default, the Route service assumes the traveling mode is a car and the departure time is now. It returns route based on real-time traffic conditions unless a route calculation request specifies otherwise.\n\nTo retrieve the route direction, you need to pass in the parameters the coordinates through which the route is calculated, delimited by a colon. A minimum of two coordinates are required. The first one is the origin and the last is the destination of the route.\n\nBy default, the Route service will return an array of coordinates. The response will contain the coordinates that make up the path in a list named points. Route response also includes the distance from the start of the route and the estimated elapsed time. These values can be used to calculate the average speed for the entire route.\n\n```javascript\nconst routeDirectionsResult = await client.path(\"/route/directions/{format}\", \"json\").get({\n  queryParameters: {\n    query: \"51.368752,-0.118332:41.385426,-0.128929\",\n  },\n});\n\n// You can use the helper function `toColonDelimitedLatLonString` to compose the query string.\nconst { toColonDelimitedLatLonString } = require(\"@azure-rest/maps-route\");\nconst routeDirectionsResult = await client.path(\"/route/directions/{format}\", \"json\").get({\n  queryParameters: {\n    query: toColonDelimitedLatLonString([\n      // Origin:\n      [51.368752, -0.118332],\n      // Waypoints (Optional):\n      [45.49735, 9.182435],\n      [48.886128, 2.329742],\n      [48.159642, 11.518011],\n      // Destination:\n      [41.385426, -0.128929],\n    ]),\n  },\n});\n\n// Handle the error if the request failed\nif (isUnexpected(routeDirectionsResult)) {\n  throw routeDirectionsResult.body.error;\n}\n\nrouteDirectionsResult.body.routes.forEach(({ summary, legs }) => {\n  console.log(\n    `The total distance is ${summary.lengthInMeters} meters, and it takes ${summary.travelTimeInSeconds} seconds.`\n  );\n  legs.forEach(({ summary, points }, idx) => {\n    console.log(\n      `The ${idx + 1}th leg's length is ${summary.lengthInMeters} meters, and it takes ${\n        summary.travelTimeInSeconds\n      } seconds. Followings are the first 10 points: `\n    );\n    console.table(points.slice(0, 10));\n  });\n});\n```\n\n### Request a route for a commercial vehicle\n\nThe service supports commercial vehicle routing, covering commercial trucks routing. The APIs consider specified limits. Such as, the height and weight of the vehicle, and if the vehicle is carrying hazardous cargo. For example, if a vehicle is carrying flammable, the routing engine avoid certain tunnels that are near residential areas.\n\n```javascript\nconst routeDirectionsResult = await client.path(\"/route/directions/{format}\", \"json\").get({\n  queryParameters: {\n    query: toColonDelimitedLatLonString([\n      // Origin\n      [51.368752, -0.118332],\n      // Waypoints (Optional):\n      [45.49735, 9.182435],\n      [48.886128, 2.329742],\n      [48.159642, 11.518011],\n      // Destination:\n      [41.385426, -0.128929],\n    ]),\n    vehicleWidthInMeters: 2,\n    vehicleHeightInMeters: 2,\n    vehicleLoadType: \"USHazmatClass1\",\n    travelMode: \"truck\",\n    isCommercialVehicle: true,\n  },\n});\n\nif (isUnexpected(routeDirectionsResult)) {\n  throw routeDirectionsResult.body.error;\n}\n\nrouteDirectionsResult.body.routes.forEach(({ summary, legs }) => {\n  console.log(\n    `The total distance is ${summary.lengthInMeters} meters, and it takes ${summary.travelTimeInSeconds} seconds.`\n  );\n  legs.forEach(({ summary, points }, idx) => {\n    console.log(\n      `The ${idx + 1}th leg's length is ${summary.lengthInMeters} meters, and it takes ${\n        summary.travelTimeInSeconds\n      } seconds. Followings are the first 10 points: `\n    );\n    console.table(points.slice(0, 10));\n  });\n});\n```\n\n### Calculate and optimize a multi-stop route\n\nAzure Maps currently provides two forms of route optimizations:\n\n- Optimizations based on the requested route type, without changing the order of waypoints. You can find the [supported route types here](https://docs.microsoft.com/rest/api/maps/route/post-route-directions?tabs=HTTP#routetype).\n- Traveling salesman optimization, which changes the order of the waypoints to obtain the best order to visit each stop\n\nFor multi-stop routing, up to 150 waypoints may be specified in a single route request. The starting and ending coordinate locations can be the same, as would be the case with a round trip. But you need to provide at least one additional waypoint to make the route calculation. Waypoints can be added to the query in-between the origin and destination coordinates.\n\nIf you want to optimize the best order to visit the given waypoints, then you need to specify `computeBestWaypointOrder=true`. This scenario is also known as the traveling salesman optimization problem.\n\n```javascript\nconst routeDirectionsResult = await client.path(\"/route/directions/{format}\", \"json\").get({\n  queryParameters: {\n    query: toColonDelimitedLatLonString([\n      // Origin:\n      [51.368752, -0.118332],\n      // Waypoints:\n      [45.49735, 9.182435],\n      [48.886128, 2.329742],\n      [48.159642, 11.518011],\n      // Destination:\n      [41.385426, -0.128929],\n    ]),\n    computeBestWaypointOrder: true,\n    routeType: \"shortest\",\n  },\n});\n\nif (isUnexpected(routeDirectionsResult)) {\n  throw routeDirectionsResult.body.error;\n}\n\nconst { summary } = routeDirectionsResult.body.routes;\nconsole.log(\n  `The optimized distance is ${summary.lengthInMeters} meters, and it takes ${summary.travelTimeInSeconds} seconds.`\n);\nconsole.log(\"The route is optimized by: \");\nrouteDirectionsResult.body.optimizedWaypoints.forEach(\n  ({ providedIndex, optimizedIndex }) => `Moving index ${providedIndex} to ${optimizedIndex}`\n);\n```\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\n\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples][samples] directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/master/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fmaps%2Fmaps-route-rest%2FREADME.png)\n\n[source_code]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/maps/maps-route-rest\n[npm_link]: https://www.npmjs.com/package/@azure-rest/maps-route\n[api_ref]: https://docs.microsoft.com/javascript/api/@azure-rest/maps-route\n[samples]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/maps/maps-route-rest/samples\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_powershell]: https://docs.microsoft.com/powershell/module/az.maps/new-azmapsaccount\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/master/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/master/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "maps/maps-route-rest",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/maps/maps-route-rest",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Maps Search REST client library for JavaScript\n\nAzure Maps Search Client\n\n\\*\\*If you are not familiar with our REST client, please spend 5 minutes to take a look at our [REST client docs](https://github.com/Azure/azure-sdk-for-js/blob/main/documentation/rest-clients.md) to use this library, the REST client provides a light-weighted & developer friendly way to call azure rest api\n\nKey links:\n\n- [Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/maps/maps-search-rest)\n- [Package (NPM)](https://www.npmjs.com/package/@azure-rest/maps-search)\n- [API reference documentation](https://docs.microsoft.com/javascript/api/@azure-rest/maps-search?view=azure-node-preview)\n- [Samples](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/maps/maps-search-rest/samples)\n- [Product Information](https://docs.microsoft.com/rest/api/maps/search)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://nodejs.org/about/releases/)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\n### Prerequisites\n\n- You must have an [Azure subscription](https://azure.microsoft.com/free/) to use this package.\n- An [Azure Maps account](https://docs.microsoft.com/azure/azure-maps/how-to-manage-account-keys). You can create the resource via the [Azure Portal](https://portal.azure.com), the [Azure PowerShell](https://docs.microsoft.com/powershell/module/az.maps/new-azmapsaccount), or the [Azure CLI](https://docs.microsoft.com/cli/azure).\n\nIf you use Azure CLI, replace `<resource-group-name>` and `<map-account-name>` of your choice, and select a proper [pricing tier](https://docs.microsoft.com/azure/azure-maps/choose-pricing-tier) based on your needs via the `<sku-name>` parameter. Please refer to [this page](https://docs.microsoft.com/cli/azure/maps/account?view=azure-cli-latest#az_maps_account_create) for more details.\n\n```bash\naz maps account create --resource-group <resource-group-name> --name <map-account-name> --sku <sku-name>\n```\n\n### Install the `@azure-rest/maps-search` package\n\nInstall the Azure Maps Search REST client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure-rest/maps-search\n```\n\n### Create and authenticate a `MapsSearchClient`\n\nTo create a client object to access the Azure Maps Search APIs, you will need a `credential` object. The Azure Maps Search client can use an Azure Active Directory credential or an Azure Key credential to authenticate.\n\n#### Using an Azure Active Directory Credential\n\nYou can authenticate with Azure Active Directory using the [Azure Identity library](https://github.com/Azure/azure-sdk-for-js/tree/master/sdk/identity/identity). To use the [DefaultAzureCredential](https://github.com/Azure/azure-sdk-for-js/tree/master/sdk/identity/identity#defaultazurecredential) provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to register a new AAD application and grant access to Azure Maps by assigning the suitable role to your service principal. Please refer to the [Manage authentication](https://docs.microsoft.com/azure/azure-maps/how-to-manage-authentication) page.\n\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nYou will also need to specify the Azure Maps resource you intend to use by specifying the `clientId` in the client options.\nThe Azure Maps resource client id can be found in the Authentication sections in the Azure Maps resource. Please refer to the [documentation](https://docs.microsoft.com/azure/azure-maps/how-to-manage-authentication#view-authentication-details) on how to find it.\n\n```javascript\nconst MapsSearch = require(\"@azure-rest/maps-search\").default;\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n\nconst credential = new DefaultAzureCredential();\nconst client = MapsSearch(credential, \"<maps-account-client-id>\");\n```\n\n#### Using a Subscription Key Credential\n\nYou can authenticate with your Azure Maps Subscription Key.\n\n```javascript\nconst MapsSearch = require(\"@azure-rest/maps-search\").default;\nconst { AzureKeyCredential } = require(\"@azure/core-auth\");\n\nconst credential = new AzureKeyCredential(\"<subscription-key>\");\nconst client = MapsSearch(credential);\n```\n\n## Key concepts\n\n### MapsSearchClient\n\n`MapsSearchClient` is the primary interface for developers using the Azure Maps Search client library. Explore the methods on this client object to understand the different features of the Azure Maps Search service that you can access.\n\n## Examples\n\nThe following sections provide several code snippets covering some of the most common Azure Maps Search tasks, including:\n\n- [Request latitude and longitude coordinates for an address](#request-latitude-and-longitude-coordinates-for-an-address)\n- [Search for an address or Point of Interest](#search-for-an-address-or-point-of-interest)\n- [Make a Reverse Address Search to translate coordinate location to street address](#make-a-reverse-address-search-to-translate-coordinate-location-to-street-address)\n- [Translate coordinate location into a human understandable cross street](#translate-coordinate-location-into-a-human-understandable-cross-street)\n\n### Request latitude and longitude coordinates for an address\n\nYou can use an authenticated client to convert an address into latitude and longitude coordinates. This process is also called geocoding. In addition to returning the coordinates, the response will also return detailed address properties such as street, postal code, municipality, and country/region information.\n\n```javascript\nconst MapsSearch = require(\"@azure-rest/maps-search\").default;\nconst { AzureKeyCredential } = require(\"@azure/core-auth\");\nconst { isUnexpected } = require(\"@azure-rest/maps-search\");\n\n/** Initialize the MapsSearchClient */\nconst client = MapsSearch(new AzureKeyCredential(\"<subscription-key>\"));\n/** Make a request to the geocoding API */\nconst response = await client\n  .path(\"/search/address/{format}\", \"json\")\n  .get({ queryParameters: { query: \"400 Broad, Seattle\" } });\n/** Handle error response */\nif (isUnexpected(response)) {\n  throw response.body.error;\n}\n/** Log the response body. */\nconsole.log(`The followings are the possible coordinates of the address:`);\nresponse.body.results.forEach((result) => {\n  const { lat, lon } = result.position;\n  console.log(`Latitude: ${lat}, Longitude: ${lon}`);\n});\n```\n\n### Search for an address or Point of Interest\n\nYou can use Fuzzy Search to search an address or a point of interest (POI). The following example demonstrates how to search for `pizza` over the scope of a specific country (`France`, in this example).\n\n```javascript\nconst MapsSearch = require(\"@azure-rest/maps-search\").default;\nconst { AzureKeyCredential } = require(\"@azure/core-auth\");\nconst { isUnexpected } = require(\"@azure-rest/maps-search\");\n\n/** Initialize the MapsSearchClient */\nconst client = MapsSearch(new AzureKeyCredential(\"<subscription-key>\"));\n/** Make a request */\nconst response = await client\n  .path(\"/search/fuzzy/{format}\", \"json\")\n  .get({ queryParameters: { query: \"pizza\", countrySet: [\"fr\"] } });\n/** Handle the error response */\nif (isUnexpected(response)) {\n  throw response.body.error;\n}\n/** Log the response body */\nresponse.body.results.forEach((result) => {\n  console.log(`Address: ${result.address.freeformAddress}`);\n  console.log(`Coordinate: (${result.position.lat}, ${result.position.lon})\\n`);\n});\n```\n\n### Make a Reverse Address Search to translate coordinate location to street address\n\nYou can translate coordinates into human readable street addresses. This process is also called reverse geocoding.\nThis is often used for applications that consume GPS feeds and want to discover addresses at specific coordinate points.\n\n```javascript\nconst MapsSearch = require(\"@azure-rest/maps-search\").default;\nconst { AzureKeyCredential } = require(\"@azure/core-auth\");\nconst { isUnexpected } = require(\"@azure-rest/maps-search\");\n\n/** Initialize the MapsSearchClient */\nconst client = MapsSearch(new AzureKeyCredential(\"<subscription-key>\"));\n/** Make the request. */\nconst response = await client.path(\"/search/address/reverse/{format}\", \"json\").get({\n  queryParameters: { query: [37.337, -121.89] }, // [latitude, longitude],\n});\n/** Handle error response. */\nif (isUnexpected(response)) {\n  throw response.body.error;\n}\n/** Log the response body. */\nresponse.body.addresses.forEach((address) => {\n  console.log(address.address.freeformAddress);\n});\n```\n\n### Translate coordinate location into a human understandable cross street\n\nTranslate coordinate location into a human understandable cross street by using Search Address Reverse Cross Street API. Most often, this is needed in tracking applications that receive a GPS feed from a device or asset, and wish to know where the coordinate is located.\n\n```javascript\nconst MapsSearch = require(\"@azure-rest/maps-search\").default;\nconst { AzureKeyCredential } = require(\"@azure/core-auth\");\nconst { isUnexpected } = require(\"@azure-rest/maps-search\");\n\n/** Initialize the MapsSearchClient */\nconst client = MapsSearch(new AzureKeyCredential(\"<subscription-key>\"));\n/** Make the request. */\nconst response = await client.path(\"/search/address/reverse/crossStreet/{format}\", \"json\").get({\n  queryParameters: { query: [37.337, -121.89] },\n});\n/** Handle error response */\nif (isUnexpected(response)) {\n  throw response.body.error;\n}\n/** Log the response body */\nresponse.body.addresses.forEach(({ address }) => {\n  if (!address) {\n    throw Error(\"Unexpected error: address is undefined\");\n  }\n  console.log(address.streetName);\n});\n```\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\n\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fmaps%2Fmap-search-rest%2FREADME.png)\n",
        "repo_name": "maps/maps-search-rest",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/maps/maps-search-rest",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure MariaDBManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure MariaDBManagement client.\n\nThe Microsoft Azure management API provides create, read, update, and delete functionality for Azure MariaDB resources including servers, databases, firewall rules, VNET rules, log files and configurations with new business model.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/mariadb/arm-mariadb) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-mariadb) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-mariadb) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-mariadb` package\n\nInstall the Azure MariaDBManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-mariadb\n```\n\n### Create and authenticate a `MariaDBManagementClient`\n\nTo create a client object to access the Azure MariaDBManagement API, you will need the `endpoint` of your Azure MariaDBManagement resource and a `credential`. The Azure MariaDBManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure MariaDBManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure MariaDBManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { MariaDBManagementClient } = require(\"@azure/arm-mariadb\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new MariaDBManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new MariaDBManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### MariaDBManagementClient\n\n`MariaDBManagementClient` is the primary interface for developers using the Azure MariaDBManagement client library. Explore the methods on this client object to understand the different features of the Azure MariaDBManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fmariadb%2Farm-mariadb%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "mariadb/arm-mariadb",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/mariadb/arm-mariadb",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure MarketplaceOrderingAgreements client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure MarketplaceOrderingAgreements client.\n\nREST API for MarketplaceOrdering Agreements.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/marketplaceordering/arm-marketplaceordering) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-marketplaceordering) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-marketplaceordering) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-marketplaceordering` package\n\nInstall the Azure MarketplaceOrderingAgreements client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-marketplaceordering\n```\n\n### Create and authenticate a `MarketplaceOrderingAgreements`\n\nTo create a client object to access the Azure MarketplaceOrderingAgreements API, you will need the `endpoint` of your Azure MarketplaceOrderingAgreements resource and a `credential`. The Azure MarketplaceOrderingAgreements client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure MarketplaceOrderingAgreements resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure MarketplaceOrderingAgreements** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { MarketplaceOrderingAgreements } = require(\"@azure/arm-marketplaceordering\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new MarketplaceOrderingAgreements(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new MarketplaceOrderingAgreements(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### MarketplaceOrderingAgreements\n\n`MarketplaceOrderingAgreements` is the primary interface for developers using the Azure MarketplaceOrderingAgreements client library. Explore the methods on this client object to understand the different features of the Azure MarketplaceOrderingAgreements service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fmarketplaceordering%2Farm-marketplaceordering%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "marketplaceordering/arm-marketplaceordering",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/marketplaceordering/arm-marketplaceordering",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Media client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure Media client.\n\nThis Swagger was generated by the API Framework.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/mediaservices/arm-mediaservices) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-mediaservices) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-mediaservices) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-mediaservices` package\n\nInstall the Azure Media client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-mediaservices\n```\n\n### Create and authenticate a `AzureMediaServices`\n\nTo create a client object to access the Azure Media API, you will need the `endpoint` of your Azure Media resource and a `credential`. The Azure Media client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure Media resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure Media** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { AzureMediaServices } = require(\"@azure/arm-mediaservices\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new AzureMediaServices(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new AzureMediaServices(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### AzureMediaServices\n\n`AzureMediaServices` is the primary interface for developers using the Azure Media client library. Explore the methods on this client object to understand the different features of the Azure Media service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fmediaservices%2Farm-mediaservices%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "mediaservices/arm-mediaservices",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/mediaservices/arm-mediaservices",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Metrics Advisor client library for JavaScript\n\nMetrics Advisor is a part of Azure Cognitive Services that uses AI to perform data monitoring and anomaly detection in time series data. The service automates the process of applying models to your data and provides a set of web-based APIs for data ingestion, anomaly detection and diagnostics - without needing to know machine learning. Use Metrics Advisor to:\n\n- Analyze multi-dimensional data from multiple data sources\n- Identify and correlate anomalies\n- Configure and fine-tune the anomaly detection model used on your data\n- Diagnose anomalies and help with root cause analysis.\n\nKey links:\n\n- [Source code](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/metricsadvisor/ai-metrics-advisor/)\n- [Package (NPM)](https://www.npmjs.com/package/@azure/ai-metrics-advisor)\n- [API reference documentation](https://docs.microsoft.com/javascript/api/@azure/ai-metrics-advisor)\n- [Product documentation](https://docs.microsoft.com/azure/cognitive-services/metrics-advisor/)\n- [Samples](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/metricsadvisor/ai-metrics-advisor/samples)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge, and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n- An existing [Cognitive Services][cognitive_resource] or Metrics Advisor resource. If you need to create the resource, you can use the [Azure Portal][azure_portal] or [Azure CLI][azure_cli].\n\nIf you use the Azure CLI, replace `<your-resource-group-name>` and `<your-resource-name>` with your own unique names. You can also provide the pricing tier (or sku) `<sku level>` and an Azure location `<location>`\n\n```bash\naz cognitiveservices account create --kind MetricsAdvisor --resource-group <your-resource-group-name> --name <your-resource-name> --sku <sku level> --location <location>\n```\n\n- Existing data sources with time series metric data with the [required data schema][data_schema_requirements]. You can find the settings and requirements for [connecting different types of data sources][connect_sources_metrics_advisor] to Azure Metrics Advisor.\n- After this, [set up datafeeds to onboard data][onboard_data_feed]\n\n### Install the `@azure/ai-metrics-advisor` package\n\nInstall the Azure Metrics Advisor client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/ai-metrics-advisor\n```\n\n### Create and authenticate `MetricsAdvisorClient` or `MetricsAdvisorAdministrationClient`\n\nTo create a client object to access the Metrics Advisor API, you will need the `endpoint` of your Metrics Advisor resource and a `credential`. The Metrics Advisor clients use a Metrics Advisor key credential to authenticate.\n\nYou can find the endpoint for your Metrics Advisor resource either in the [Azure Portal][azure_portal] or by using the [Azure CLI][azure_cli] snippet below:\n\n```bash\naz cognitiveservices account show --name <your-resource-name> --resource-group <your-resource-group-name> --query \"endpoint\"\n```\n\n#### Using Subscription Key and API Key\n\nYou will need two keys to authenticate the client:\n\n- The subscription key to your Metrics Advisor resource. You can find this in the **Keys and Endpoint** section of your resource in the [Azure Portal][azure_portal].\n- The API key for your Metrics Advisor instance. Get the web portal url for Metrics Advisor from the **Overview** section of your resource in the [Azure Portal][azure_portal]. After logging into the web portal for Metrics Advisor, click on **API keys** on the left navigation menu to find the API key.\n\nUse the [Azure Portal][azure_portal] to browse to your Metrics Advisor resource and retrieve an subscription key or use the [Azure CLI][azure_cli] snippet below:\n\n```PowerShell\naz cognitiveservices account keys list --resource-group <your-resource-group-name> --name <your-resource-name>\n```\n\nIn addition, you will also need the per-user api key from your Metrics Advisor web portal.\n\nOnce you have the two keys and the endpoint, you can use the `MetricsAdvisorKeyCredential` class to authenticate the clients as follows:\n\n```javascript\nconst {\n  MetricsAdvisorKeyCredential,\n  MetricsAdvisorClient,\n  MetricsAdvisorAdministrationClient,\n} = require(\"@azure/ai-metrics-advisor\");\n\nconst credential = new MetricsAdvisorKeyCredential(\"<subscription Key>\", \"<API key>\");\n\nconst client = new MetricsAdvisorClient(\"<endpoint>\", credential);\nconst adminClient = new MetricsAdvisorAdministrationClient(\"<endpoint>\", credential);\n```\n\n#### Using Azure Service Directory\n\nAPI key authorization is used in most of the examples, but you can also authenticate the client with Azure Active Directory using the Azure Identity library. To use the DefaultAzureCredential provider shown below or other credential providers provided with the Azure SDK, please install the @azure/identity package:\n\n```\nnpm install @azure/identity\n```\n\nTo authenticate using a service principal, you will also need to register an AAD application and grant access to Metrics Advisor by assigning the \"Cognitive Services User\" role to your service principal (note: other roles such as \"Owner\" will not grant the necessary permissions, only \"Cognitive Services User\" will suffice to run the examples and the sample code).\n\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: AZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET.\nWe also support Authentication by Azure Active Directoty Credential. You will need the Azure Tenant ID, Azure Client ID and Azure Client Secret as environment variables.\n\n```javascript\nconst {\n  MetricsAdvisorKeyCredential,\n  MetricsAdvisorClient,\n  MetricsAdvisorAdministrationClient,\n} = require(\"@azure/ai-metrics-advisor\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst credential = new DefaultAzureCredential();\nconst client = new MetricsAdvisorClient(\"<endpoint>\", credential);\nconst adminClient = new MetricsAdvisorAdministrationClient(\"<endpoint>\", credential);\n```\n\n## Key concepts\n\n### MetricsAdvisorClient\n\n`MetricsAdvisorClient` is the primary query interface for developers using the Metrics Advisor client library. It provides asynchronous methods to access a specific use of Metrics Advisor, such as listing incidents, retrive root causes of incidents, retrieving original time series data and time series data enriched by the service.\n\n### MetricsAdvisorAdministrationClient\n\n`MetricsAdvisorAdministrationClient` is the interface responsible for managing entities in the Metrics Advisor resources, such as managing data feeds, anomaly detection configurations, anomaly alerting configurations.\n\n### Data Feed\n\nA data feed is what Metrics Advisor ingests from your data source, such as Cosmos DB or a SQL server. A data feed contains rows of:\n\n- timestamps\n- zero or more dimensions\n- one or more measures\n\n### Metric\n\nA metric is a quantifiable measure that is used to monitor and assess the status of a specific business process. It can be a combination of multiple time series values divided into dimensions. For example a web health metric might contain dimensions for user count and the en-us locale.\n\n### AnomalyDetectionConfiguration\n\n`AnomalyDetectionConfiguration` is required for every time series and determines whether a point in the time series is an anomaly.\n\n### Anomaly & Incident\n\nAfter a detection configuration is applied to metrics, `AnomalyIncident`s are generated whenever any series within has an `DataPointAnomaly`.\n\n### Alert\n\nYou can configure which anomalies should trigger an `AnomalyAlert`. You can set multiple alerts with different settings. For example, you could create an alert for anomalies with lower business impact and another for more important alerts.\n\n### Hook\n\nMetrics Advisor lets you create and subscribe to real-time alerts. These alerts are sent over the internet, using a notification hook.\n\nPlease refer to [the Metrics Advisory Glossary][metrics_advisor_glossary] documentation page for a comprehensive list of concepts.\n\n## Examples\n\nThe following section provides several JavaScript code snippets illustrating common patterns used in the Metrics Advisor client libraries.\n\n- [Add a data feed from a sample data source](#add-a-data-feed-from-a-sample-data-source \"Add a data feed from a sample or data source\")\n- [Check ingestion status](#check-ingestion-status \"Check ingestion status\")\n- [Configure anomaly detection configuration](#configure-anomaly-detection-configuration \"Configure anomaly detection configuration\")\n- [Add hooks for receiving anomaly alerts](#add-hooks-for-receiving-anomaly-alerts \"Add hooks for receiving anomaly alerts\")\n- [Configure alert configuration](#configure-alert-configuration \"Configure alert configuration\")\n- [Query anomaly detection results](#query-anomaly-detection-results \"Query anomaly detection results\")\n\n### Add a data feed from a sample data source\n\nMetrics Advisor supports connecting different types of data sources. Here is a sample to ingest data from SQL Server.\n\n```javascript\nconst {\n  MetricsAdvisorKeyCredential,\n  MetricsAdvisorAdministrationClient,\n} = require(\"@azure/ai-metrics-advisor\");\n\nasync function main() {\n  // You will need to set these environment variables or edit the following values\n  const endpoint = process.env[\"METRICS_ADVISOR_ENDPOINT\"] || \"<service endpoint>\";\n  const subscriptionKey = process.env[\"METRICS_ADVISOR_SUBSCRIPTION_KEY\"] || \"<subscription key>\";\n  const apiKey = process.env[\"METRICS_ADVISOR_API_KEY\"] || \"<api key>\";\n  const sqlServerConnectionString =\n    process.env[\"METRICS_ADVISOR_SQL_SERVER_CONNECTION_STRING\"] ||\n    \"<connection string to SQL Server>\";\n  const sqlServerQuery =\n    process.env[\"METRICS_ADVISOR_AZURE_SQL_SERVER_QUERY\"] || \"<SQL Server query to retrive data>\";\n  const credential = new MetricsAdvisorKeyCredential(subscriptionKey, apiKey);\n\n  const adminClient = new MetricsAdvisorAdministrationClient(endpoint, credential);\n\n  const created = await createDataFeed(adminClient, sqlServerConnectionString, sqlServerQuery);\n  console.log(`Data feed created: ${created.id}`);\n}\n\nasync function createDataFeed(adminClient, sqlServerConnectionString, sqlServerQuery) {\n  console.log(\"Creating Datafeed...\");\n  const dataFeed = {\n    name: \"test_datafeed_\" + new Date().getTime().toString(),\n    source: {\n      dataSourceType: \"SqlServer\",\n      connectionString: sqlServerConnectionString,\n      query: sqlServerQuery,\n      authenticationType: \"Basic\",\n    },\n    granularity: {\n      granularityType: \"Daily\",\n    },\n    schema: {\n      metrics: [\n        {\n          name: \"revenue\",\n          displayName: \"revenue\",\n          description: \"Metric1 description\",\n        },\n        {\n          name: \"cost\",\n          displayName: \"cost\",\n          description: \"Metric2 description\",\n        },\n      ],\n      dimensions: [\n        { name: \"city\", displayName: \"city display\" },\n        { name: \"category\", displayName: \"category display\" },\n      ],\n      timestampColumn: null,\n    },\n    ingestionSettings: {\n      ingestionStartTime: new Date(Date.UTC(2020, 5, 1)),\n      ingestionStartOffsetInSeconds: 0,\n      dataSourceRequestConcurrency: -1,\n      ingestionRetryDelayInSeconds: -1,\n      stopRetryAfterInSeconds: -1,\n    },\n    rollupSettings: {\n      rollupType: \"AutoRollup\",\n      rollupMethod: \"Sum\",\n      rollupIdentificationValue: \"__CUSTOM_SUM__\",\n    },\n    missingDataPointFillSettings: {\n      fillType: \"SmartFilling\",\n    },\n    accessMode: \"Private\",\n    admins: [\"xyz@example.com\"],\n  };\n  const result = await adminClient.createDataFeed(dataFeed);\n\n  return result;\n}\n```\n\n### Check ingestion status\n\nAfter we start the data ingestion, we can check the ingestion status.\n\n```javascript\nconst {\n  MetricsAdvisorKeyCredential,\n  MetricsAdvisorAdministrationClient,\n} = require(\"@azure/ai-metrics-advisor\");\n\nasync function main() {\n  // You will need to set these environment variables or edit the following values\n  const endpoint = process.env[\"METRICS_ADVISOR_ENDPOINT\"] || \"<service endpoint>\";\n  const subscriptionKey = process.env[\"METRICS_ADVISOR_SUBSCRIPTION_KEY\"] || \"<subscription key>\";\n  const apiKey = process.env[\"METRICS_ADVISOR_API_KEY\"] || \"<api key>\";\n  const dataFeedId = process.env[\"METRICS_DATAFEED_ID\"] || \"<data feed id>\";\n  const credential = new MetricsAdvisorKeyCredential(subscriptionKey, apiKey);\n\n  const adminClient = new MetricsAdvisorAdministrationClient(endpoint, credential);\n  await checkIngestionStatus(\n    adminClient,\n    dataFeedId,\n    new Date(Date.UTC(2020, 8, 1)),\n    new Date(Date.UTC(2020, 8, 12))\n  );\n}\n\nasync function checkIngestionStatus(adminClient, datafeedId, startTime, endTime) {\n  // This shows how to use for-await-of syntax to list status\n  console.log(\"Checking ingestion status...\");\n  const iterator = adminClient.listDataFeedIngestionStatus(datafeedId, startTime, endTime);\n  for await (const status of iterator) {\n    console.log(`  [${status.timestamp}] ${status.status} - ${status.message}`);\n  }\n}\n```\n\n### Configure anomaly detection configuration\n\nWe need an anomaly detection configuration to determine whether a point in the time series is an anomaly.\nWhile a default detection configuration is automatically applied to each metric, you can tune the detection modes used on your data by creating a customized anomaly detection configuration.\n\n```javascript\nconst {\n  MetricsAdvisorKeyCredential,\n  MetricsAdvisorAdministrationClient,\n} = require(\"@azure/ai-metrics-advisor\");\n\nasync function main() {\n  // You will need to set these environment variables or edit the following values\n  const endpoint = process.env[\"METRICS_ADVISOR_ENDPOINT\"] || \"<service endpoint>\";\n  const subscriptionKey = process.env[\"METRICS_ADVISOR_SUBSCRIPTION_KEY\"] || \"<subscription key>\";\n  const apiKey = process.env[\"METRICS_ADVISOR_API_KEY\"] || \"<api key>\";\n  const metricId = process.env[\"METRICS_ADVISOR_METRIC_ID\"] || \"<metric id>\";\n  const credential = new MetricsAdvisorKeyCredential(subscriptionKey, apiKey);\n\n  const adminClient = new MetricsAdvisorAdministrationClient(endpoint, credential);\n\n  const detectionConfig = await configureAnomalyDetectionConfiguration(adminClient, metricId);\n  console.log(`Detection configuration created: ${detectionConfig.id}`);\n}\n\nasync function configureAnomalyDetectionConfiguration(adminClient, metricId) {\n  console.log(`Creating an anomaly detection configuration on metric '${metricId}'...`);\n  const anomalyConfig = {\n    name: \"test_detection_configuration\" + new Date().getTime().toString(),\n    metricId,\n    wholeSeriesDetectionCondition: {\n      smartDetectionCondition: {\n        sensitivity: 100,\n        anomalyDetectorDirection: \"Both\",\n        suppressCondition: {\n          minNumber: 1,\n          minRatio: 1,\n        },\n      },\n    },\n    description: \"Detection configuration description\",\n  };\n  return await adminClient.createDetectionConfig(anomalyConfig);\n}\n```\n\n### Add hooks for receiving anomaly alerts\n\nWe use hooks subscribe to real-time alerts. In this example, we create a webhook for the Metrics Advisor service to POST the alert to.\n\n```javascript\nconst {\n  MetricsAdvisorKeyCredential,\n  MetricsAdvisorAdministrationClient,\n} = require(\"@azure/ai-metrics-advisor\");\n\nasync function main() {\n  // You will need to set these environment variables or edit the following values\n  const endpoint = process.env[\"METRICS_ADVISOR_ENDPOINT\"] || \"<service endpoint>\";\n  const subscriptionKey = process.env[\"METRICS_ADVISOR_SUBSCRIPTION_KEY\"] || \"<subscription key>\";\n  const apiKey = process.env[\"METRICS_ADVISOR_API_KEY\"] || \"<api key>\";\n  const credential = new MetricsAdvisorKeyCredential(subscriptionKey, apiKey);\n\n  const adminClient = new MetricsAdvisorAdministrationClient(endpoint, credential);\n  const hook = await createWebhookHook(adminClient);\n  console.log(`Webhook hook created: ${hook.id}`);\n}\n\nasync function createWebhookHook(adminClient) {\n  console.log(\"Creating a webhook hook\");\n  const hook = {\n    hookType: \"Webhook\",\n    name: \"web hook \" + new Date().getTime().toString(),\n    description: \"description\",\n    hookParameter: {\n      endpoint: \"https://example.com/handleAlerts\",\n      username: \"username\",\n      password: \"password\",\n      // certificateKey: \"certificate key\",\n      // certificatePassword: \"certificate password\"\n    },\n  };\n\n  return await adminClient.createHook(hook);\n}\n```\n\n### Configure alert configuration\n\nThen let's configure in which conditions an alert needs to be triggered and which hooks to send the alert.\n\n```javascript\nconst {\n  MetricsAdvisorKeyCredential,\n  MetricsAdvisorAdministrationClient,\n} = require(\"@azure/ai-metrics-advisor\");\n\nasync function main() {\n  // You will need to set these environment variables or edit the following values\n  const endpoint = process.env[\"METRICS_ADVISOR_ENDPOINT\"] || \"<service endpoint>\";\n  const subscriptionKey = process.env[\"METRICS_ADVISOR_SUBSCRIPTION_KEY\"] || \"<subscription key>\";\n  const apiKey = process.env[\"METRICS_ADVISOR_API_KEY\"] || \"<api key>\";\n  const detectionConfigId = process.env[\"METRICS_ADVISOR_DETECTION_CONFIG_ID\"] || \"<detection id>\";\n  const hookId = process.env[\"METRICS_ADVISOR_HOOK_ID\"] || \"<hook id>\";\n  const credential = new MetricsAdvisorKeyCredential(subscriptionKey, apiKey);\n\n  const adminClient = new MetricsAdvisorAdministrationClient(endpoint, credential);\n  const alertConfig = await configureAlertConfiguration(adminClient, detectionConfigId, [hookId]);\n  console.log(`Alert configuration created: ${alertConfig.id}`);\n}\n\nasync function configureAlertConfiguration(adminClient, detectionConfigId, hookIds) {\n  console.log(\"Creating a new alerting configuration...\");\n  const anomalyAlertConfig = {\n    name: \"test_alert_config_\" + new Date().getTime().toString(),\n    crossMetricsOperator: \"AND\",\n    metricAlertConfigurations: [\n      {\n        detectionConfigurationId: detectionConfigId,\n        alertScope: {\n          scopeType: \"All\",\n        },\n        alertConditions: {\n          severityCondition: { minAlertSeverity: \"Medium\", maxAlertSeverity: \"High\" },\n        },\n        snoozeCondition: {\n          autoSnooze: 0,\n          snoozeScope: \"Metric\",\n          onlyForSuccessive: true,\n        },\n      },\n    ],\n    hookIds,\n    description: \"Alerting config description\",\n  };\n  return await adminClient.createAlertConfig(anomalyAlertConfig);\n}\n```\n\n### Query anomaly detection results\n\nWe can query the alerts and anomalies.\n\n```javascript\nconst { MetricsAdvisorKeyCredential, MetricsAdvisorClient } = require(\"@azure/ai-metrics-advisor\");\n\nasync function main() {\n  // You will need to set these environment variables or edit the following values\n  const endpoint = process.env[\"METRICS_ADVISOR_ENDPOINT\"] || \"<service endpoint>\";\n  const subscriptionKey = process.env[\"METRICS_ADVISOR_SUBSCRIPTION_KEY\"] || \"<subscription key>\";\n  const apiKey = process.env[\"METRICS_ADVISOR_API_KEY\"] || \"<api key>\";\n  const alertConfigId = process.env[\"METRICS_ADVISOR_ALERT_CONFIG_ID\"] || \"<alert config id>\";\n  const credential = new MetricsAdvisorKeyCredential(subscriptionKey, apiKey);\n\n  const client = new MetricsAdvisorClient(endpoint, credential);\n\n  const alerts = await queryAlerts(\n    client,\n    alertConfigId,\n    new Date(Date.UTC(2020, 8, 1)),\n    new Date(Date.UTC(2020, 8, 12))\n  );\n\n  if (alerts.length > 1) {\n    // query anomalies using an alert id.\n    await queryAnomaliesByAlert(client, alerts[0]);\n  } else {\n    console.log(\"No alerts during the time period\");\n  }\n}\n\nasync function queryAlerts(client, alertConfigId, startTime, endTime) {\n  let alerts = [];\n  const iterator = client.listAlerts(alertConfigId, startTime, endTime, \"AnomalyTime\");\n  for await (const alert of iterator) {\n    alerts.push(alert);\n  }\n\n  return alerts;\n}\n\nasync function queryAnomaliesByAlert(client, alert) {\n  console.log(\n    `Listing anomalies for alert configuration '${alert.alertConfigId}' and alert '${alert.id}'`\n  );\n  const iterator = client.listAnomaliesForAlert(alert);\n  for await (const anomaly of iterator) {\n    console.log(\n      `  Anomaly ${anomaly.severity} ${anomaly.status} ${anomaly.seriesKey} ${anomaly.timestamp}`\n    );\n  }\n}\n```\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\n\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the\n[samples](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/metricsadvisor/ai-metrics-advisor/samples)\ndirectory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test \\\nthe code.\n\n## Related projects\n\n- [Microsoft Azure SDK for Javascript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fmetricsadvisor%2Fai-metrics-advisor%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[cognitive_resource]: https://docs.microsoft.com/azure/cognitive-services/cognitive-services-apis-create-account\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[register_aad_app]: https://docs.microsoft.com/azure/cognitive-services/authentication#assign-a-role-to-a-service-principal\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n[metrics_advisor_glossary]: https://docs.microsoft.com/azure/cognitive-services/metrics-advisor/glossary\n[onboard_data_feed]: https://docs.microsoft.com/azure/applied-ai-services/metrics-advisor/how-tos/onboard-your-data\n[data_schema_requirements]: https://docs.microsoft.com/azure/applied-ai-services/metrics-advisor/how-tos/onboard-your-data#data-schema-requirements-and-configuration\n[connect_sources_metrics_advisor]: https://docs.microsoft.com/azure/applied-ai-services/metrics-advisor/data-feeds-from-different-sources\n",
        "repo_name": "metricsadvisor/ai-metrics-advisor",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/metricsadvisor/ai-metrics-advisor",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# AzureMigrateV2 client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for AzureMigrateV2 client.\n\nAssess your workloads for Azure.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/migrate/arm-migrate) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-migrate) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-migrate) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-migrate` package\n\nInstall the AzureMigrateV2 client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-migrate\n```\n\n### Create and authenticate a `AzureMigrateV2`\n\nTo create a client object to access the AzureMigrateV2 API, you will need the `endpoint` of your AzureMigrateV2 resource and a `credential`. The AzureMigrateV2 client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your AzureMigrateV2 resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to AzureMigrateV2** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { AzureMigrateV2 } = require(\"@azure/arm-migrate\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new AzureMigrateV2(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new AzureMigrateV2(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### AzureMigrateV2\n\n`AzureMigrateV2` is the primary interface for developers using the AzureMigrateV2 client library. Explore the methods on this client object to understand the different features of the AzureMigrateV2 service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fmigrate%2Farm-migrate%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "migrate/arm-migrate",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/migrate/arm-migrate",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure MixedReality client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure MixedReality client.\n\nMixed Reality Client\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/mixedreality/arm-mixedreality) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-mixedreality) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-mixedreality?view=azure-node-preview) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-mixedreality` package\n\nInstall the Azure MixedReality client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-mixedreality\n```\n\n### Create and authenticate a `MixedRealityClient`\n\nTo create a client object to access the Azure MixedReality API, you will need the `endpoint` of your Azure MixedReality resource and a `credential`. The Azure MixedReality client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure MixedReality resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure MixedReality** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { MixedRealityClient } = require(\"@azure/arm-mixedreality\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new MixedRealityClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new MixedRealityClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### MixedRealityClient\n\n`MixedRealityClient` is the primary interface for developers using the Azure MixedReality client library. Explore the methods on this client object to understand the different features of the Azure MixedReality service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fmixedreality%2Farm-mixedreality%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "mixedreality/arm-mixedreality",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/mixedreality/arm-mixedreality",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Mixed Reality Authentication client library for JavaScript\n\nMixed Reality services, like Azure Spatial Anchors, Azure Remote Rendering, and others, use the Mixed Reality security\ntoken service (STS) for authentication. This package supports exchanging Mixed Reality account credentials for an access\ntoken from the STS that can be used to access Mixed Reality services.\n\nKey links:\n- [Source code](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/mixedreality/mixed-reality-authentication/) |\n- [Package (NPM)](https://www.npmjs.com/package/@azure/mixed-reality-authentication) |\n- [API reference documentation](https://aka.ms/azsdk/js/mixed-reality-authentication/docs) |\n- [Samples](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/mixedreality/mixed-reality-authentication/samples)\n\n![Mixed Reality service authentication diagram](https://docs.microsoft.com/azure/spatial-anchors/concepts/media/spatial-anchors-authentication-overview.png)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n- You must have an account with an [Azure Mixed Reality service](https://azure.microsoft.com/topic/mixed-reality/):\n  - [Azure Remote Rendering](https://docs.microsoft.com/azure/remote-rendering/)\n  - [Azure Spatial Anchors](https://docs.microsoft.com/azure/spatial-anchors/)\n- Familiarity with the authentication and credential concepts from the [Azure Identity library][azure_identity].\n\n### Install the `@azure/mixed-reality-authentication` package\n\nInstall the Azure Mixed Reality Authentication client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/mixed-reality-authentication\n```\n\n### Create and authenticate a `MixedRealityStsClient`\n\nTo create a client object to request an access token for a Mixed Reality service, you will need the `account identifier`\nand `account domain` of your Mixed Reality service resource and a `credential`.\n\nMixed Reality services support a few different forms of authentication:\n\n- Account Key authentication\n  - Account keys enable you to get started quickly with using Mixed Reality services. But before you deploy your application\n    to production, we recommend that you update your app to use Azure AD authentication.\n- Azure Active Directory (AD) token authentication\n  - If you're building an enterprise application and your company is using Azure AD as its identity system, you can use\n    user-based Azure AD authentication in your app. You then grant access to your Mixed Reality accounts by using your\n    existing Azure AD security groups. You can also grant access directly to users in your organization.\n  - Otherwise, we recommend that you obtain Azure AD tokens from a web service that supports your app. We recommend this\n    method for production applications because it allows you to avoid embedding the credentials for access to a Mixed\n    Reality service in your client application.\n\nSee [here](https://docs.microsoft.com/azure/spatial-anchors/concepts/authentication) for detailed instructions and information.\n\n#### Using account key authentication\n\nUse the [Azure Portal][azure_portal] to browse to your Mixed Reality service resource and retrieve an `account key`.\n\nOnce you have an account key, you can use the `AzureKeyCredential` class to authenticate the client as follows:\n\n```js\nconst { AzureKeyCredential } = require(\"@azure/core-auth\");\n\nconst { MixedRealityStsClient } = require(\"@azure/mixed-reality-authentication\");\n\nconst accountId = \"<ACCOUNTD ID>\";\nconst accountDomain = \"<ACCOUNT_DOMAIN>\";\nconst accountKey = \"<ACCOUNT_KEY>\";\n\nconst client = new MixedRealityStsClient(\n  accountId,\n  accountDomain,\n  new AzureKeyCredential(accountKey)\n);\n```\n\n> Note: Account key authentication is **not recommended** for production applications.\n\n#### Using an Azure Active Directory Credential\n\nAccount key authentication is used in most of the examples, but you can also authenticate with Azure Active Directory\nusing the [Azure Identity library][azure_identity]. This is the recommended method for production applications. To use\nthe [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with\nthe Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to [register a new AAD application][register_aad_app] and grant access to your Mixed Reality resource\nby assigning the appropriate role for your Mixed Reality service to your service principal.\n\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables:\n`AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\n```js\nconst { MixedRealityStsClient } = require(\"@azure/mixed-reality-authentication\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n\nconst client = new MixedRealityStsClient(accountId, accountDomain, new DefaultAzureCredential());\n```\n\n## Key concepts\n\n### MixedRealityStsClient\n\nThe `MixedRealityStsClient` is the client library used to access the Mixed Reality STS to get an access token.\n\nTokens obtained from the Mixed Reality STS have a lifetime of **24 hours**.\n\n### Return Value\n\nThe return value for a successful call to `getToken` is an `GetTokenResponse`, which is an `AccessToken` from\n[@azure/core-http](https://www.npmjs.com/package/@azure/core-http).\n\n## Examples\n\n### Retrieve an access token\n\n```js\nconst { AzureKeyCredential } = require(\"@azure/core-auth\");\n\nconst { MixedRealityStsClient } = require(\"@azure/mixed-reality-authentication\");\n\nconst accountId = \"<ACCOUNTD ID>\";\nconst accountDomain = \"<ACCOUNT_DOMAIN>\";\nconst accountKey = \"<ACCOUNT_KEY>\";\n\nconst client = new MixedRealityStsClient(\n  accountId,\n  accountDomain,\n  new AzureKeyCredential(accountKey)\n);\n\nconst token = await client.getToken();\n```\n\nSee the authentication examples [above](#authenticate-the-client) or [Azure Identity][azure_identity] for more complex\nauthentication scenarios.\n\n#### Using the access token in a Mixed Reality client library\n\nSome Mixed Reality client libraries might accept an access token in place of a credential. For example:\n\n```js\n// GetMixedRealityAccessTokenFromWebService is a hypothetical method that retrieves\n// a Mixed Reality access token from a web service. The web service would use the\n// MixedRealityStsClient and credentials to obtain an access token to be returned\n// to the client.\nconst accessToken = await GetMixedRealityAccessTokenFromWebService();\n\nconst account = new SpatialAnchorsAccount(accountId, accountDomain);\nconst client = new SpatialAnchorsClient(account, accessToken);\n```\n\nNote: The `SpatialAnchorsClient` usage above is hypothetical and may not reflect the actual library. Consult the\ndocumentation for the client library you're using to determine if and how this might be supported.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\n\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the\n[samples](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/mixedreality/mixed-reality-authentication/samples)\ndirectory for detailed examples on how to use this library.\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a\nContributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us\nthe rights to use your contribution. For details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide\na CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions\nprovided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or\ncontact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\nIf you'd like to contribute to this library, please read the\n[contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to\nbuild and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for Javascript](https://github.com/Azure/azure-sdk-for-js)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[register_aad_app]: https://docs.microsoft.com/azure/spatial-anchors/concepts/authentication\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%mixedreality%2Fmixed-reality-authentication%2FREADME.png)\n",
        "repo_name": "mixedreality/mixed-reality-authentication",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/mixedreality/mixed-reality-authentication",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure MobileNetworkManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure MobileNetworkManagement client.\n\nThe resources in this API specification will be used to manage attached data network resources in mobile network attached to a particular packet core instance\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/mobilenetwork/arm-mobilenetwork) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-mobilenetwork) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-mobilenetwork) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-mobilenetwork` package\n\nInstall the Azure MobileNetworkManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-mobilenetwork\n```\n\n### Create and authenticate a `MobileNetworkManagementClient`\n\nTo create a client object to access the Azure MobileNetworkManagement API, you will need the `endpoint` of your Azure MobileNetworkManagement resource and a `credential`. The Azure MobileNetworkManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure MobileNetworkManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure MobileNetworkManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { MobileNetworkManagementClient } = require(\"@azure/arm-mobilenetwork\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new MobileNetworkManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new MobileNetworkManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### MobileNetworkManagementClient\n\n`MobileNetworkManagementClient` is the primary interface for developers using the Azure MobileNetworkManagement client library. Explore the methods on this client object to understand the different features of the Azure MobileNetworkManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fmobilenetwork%2Farm-mobilenetwork%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "mobilenetwork/arm-mobilenetwork",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/mobilenetwork/arm-mobilenetwork",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Monitor client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure Monitor client.\n\nMonitor Management Client\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/monitor/arm-monitor-profile-2020-09-01-hybrid) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-monitor-profile-2020-09-01-hybrid) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-monitor-profile-2020-09-01-hybrid?view=azure-node-preview) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-monitor-profile-2020-09-01-hybrid` package\n\nInstall the Azure Monitor client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-monitor-profile-2020-09-01-hybrid\n```\n\n### Create and authenticate a `MonitorClient`\n\nTo create a client object to access the Azure Monitor API, you will need the `endpoint` of your Azure Monitor resource and a `credential`. The Azure Monitor client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure Monitor resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure Monitor** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { MonitorClient } = require(\"@azure/arm-monitor-profile-2020-09-01-hybrid\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new MonitorClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new MonitorClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### MonitorClient\n\n`MonitorClient` is the primary interface for developers using the Azure Monitor client library. Explore the methods on this client object to understand the different features of the Azure Monitor service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fmonitor%2Farm-monitor-profile-2020-09-01-hybrid%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "monitor/arm-monitor-profile-2020-09-01-hybrid",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/monitor/arm-monitor-profile-2020-09-01-hybrid",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Monitor client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure Monitor client.\n\nMonitor Management Client\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/monitor/arm-monitor) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-monitor) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-monitor?view=azure-node-preview) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-monitor` package\n\nInstall the Azure Monitor client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-monitor\n```\n\n### Create and authenticate a `MonitorClient`\n\nTo create a client object to access the Azure Monitor API, you will need the `endpoint` of your Azure Monitor resource and a `credential`. The Azure Monitor client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure Monitor resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure Monitor** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { MonitorClient } = require(\"@azure/arm-monitor\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new MonitorClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new MonitorClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### MonitorClient\n\n`MonitorClient` is the primary interface for developers using the Azure Monitor client library. Explore the methods on this client object to understand the different features of the Azure Monitor service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fmonitor%2Farm-monitor%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "monitor/arm-monitor",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/monitor/arm-monitor",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Monitor Ingestion client library for JS\n\nThe Azure Monitor Ingestion client library is used to send custom logs to [Azure Monitor][azure_monitor_overview] using the [Logs Ingestion API][ingestion_overview].\n\nThis library allows you to send data from virtually any source to supported built-in tables or to custom tables that you create in Log Analytics workspace. You can even extend the schema of built-in tables with custom columns.\n\n**Resources:**\n\n- [Source code](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/monitor/monitor-ingestion/src)\n- [Package (NPM)](https://www.npmjs.com/)\n- [Service documentation][azure_monitor_overview]\n- [Change log](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/monitor/monitor-ingestion/CHANGELOG.md)\n\n## Getting started\n\n### Prerequisites\n\n- An [Azure subscription](https://azure.microsoft.com/free)\n- A [Data Collection Endpoint](https://learn.microsoft.com/azure/azure-monitor/essentials/data-collection-endpoint-overview)\n- A [Data Collection Rule](https://learn.microsoft.com/azure/azure-monitor/essentials/data-collection-rule-overview)\n- A [Log Analytics workspace](https://learn.microsoft.com/azure/azure-monitor/logs/log-analytics-workspace-overview)\n\n### Install the package\n\nInstall the Azure Monitor Ingestion client library for JS with [npm](https://www.npmjs.com/):\n\n```bash\nnpm install @azure/monitor-ingestion\n```\n\n### Authenticate the client\n\nAn authenticated client is required to ingest data. To authenticate, create an instance of a [TokenCredential](https://learn.microsoft.com/javascript/api/@azure/core-auth/tokencredential?view=azure-node-latest) class (see [@azure/identity](https://www.npmjs.com/package/@azure/identity) for `DefaultAzureCredential` and other `TokenCredential` implementations). Pass it to the constructor of your client class.\n\nTo authenticate, the following example uses `DefaultAzureCredential` from the [@azure/identity](https://www.npmjs.com/package/@azure/identity) package:\n\n```ts\nimport { DefaultAzureCredential } from \"@azure/identity\";\nimport { LogsIngestionClient } from \"@azure/monitor-ingestion\";\n\nimport * as dotenv from \"dotenv\";\ndotenv.config();\n\nconst logsIngestionEndpoint = process.env.LOGS_INGESTION_ENDPOINT || \"logs_ingestion_endpoint\";\n\nconst credential = new DefaultAzureCredential();\nconst logsIngestionClient = new LogsIngestionClient(logsIngestionEndpoint, credential);\n```\n\n## Key concepts\n\n### Data Collection Endpoint\n\nData Collection Endpoints (DCEs) allow you to uniquely configure ingestion settings for Azure Monitor. [This\narticle][data_collection_endpoint] provides an overview of data collection endpoints including their contents and\nstructure and how you can create and work with them.\n\n### Data Collection Rule\n\nData collection rules (DCR) define data collected by Azure Monitor and specify how and where that data should be sent or\nstored. The REST API call must specify a DCR to use. A single DCE can support multiple DCRs, so you can specify a\ndifferent DCR for different sources and target tables.\n\nThe DCR must understand the structure of the input data and the structure of the target table. If the two don't match,\nit can use a transformation to convert the source data to match the target table. You may also use the transform to\nfilter source data and perform any other calculations or conversions.\n\nFor more details, refer to [Data collection rules in Azure Monitor][data_collection_rule].For information on how to retrieve a DCR ID, see [this tutorial][data_collection_rule_tutorial].\n\n### Log Analytics workspace tables\n\nCustom logs can send data to any custom table that you create and to certain built-in tables in your Log Analytics\nworkspace. The target table must exist before you can send data to it. The following built-in tables are currently supported:\n\n- [CommonSecurityLog](https://learn.microsoft.com/azure/azure-monitor/reference/tables/commonsecuritylog)\n- [SecurityEvents](https://learn.microsoft.com/azure/azure-monitor/reference/tables/securityevent)\n- [Syslog](https://learn.microsoft.com/azure/azure-monitor/reference/tables/syslog)\n- [WindowsEvents](https://learn.microsoft.com/azure/azure-monitor/reference/tables/windowsevent)\n\n## Examples\n\n- [Upload custom logs](#upload-custom-logs)\n- [Verify logs](#verify-logs)\n\nYou can familiarize yourself with different APIs using [Samples](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/monitor/Azure.Monitor.Ingestion/samples).\n\n### Upload custom logs\n\nYou can create a client and call the client's `Upload` method. Take note of the data ingestion [limits](https://learn.microsoft.com/azure/azure-monitor/service-limits#custom-logs).\n\n```js\nconst { isAggregateLogsUploadError, DefaultAzureCredential } = require(\"@azure/identity\");\nconst { LogsIngestionClient } = require(\"@azure/monitor-ingestion\");\n\nrequire(\"dotenv\").config();\n\nasync function main() {\n  const logsIngestionEndpoint = process.env.LOGS_INGESTION_ENDPOINT || \"logs_ingestion_endpoint\";\n  const ruleId = process.env.DATA_COLLECTION_RULE_ID || \"data_collection_rule_id\";\n  const streamName = process.env.STREAM_NAME || \"data_stream_name\";\n  const credential = new DefaultAzureCredential();\n  const client = new LogsIngestionClient(logsIngestionEndpoint, credential);\n  const logs = [\n    {\n      Time: \"2021-12-08T23:51:14.1104269Z\",\n      Computer: \"Computer1\",\n      AdditionalContext: \"context-2\",\n    },\n    {\n      Time: \"2021-12-08T23:51:14.1104269Z\",\n      Computer: \"Computer2\",\n      AdditionalContext: \"context\",\n    },\n  ];\n  try{\n    await client.upload(ruleId, streamName, logs);\n  }\n  catch(e){\n    let aggregateErrors = isAggregateLogsUploadError(e) ? e.errors : [];\n    if (aggregateErrors.length > 0) {\n      console.log(\"Some logs have failed to complete ingestion\");\n      for (const error of aggregateErrors) {\n        console.log(`Error - ${JSON.stringify(error.cause)}`);\n        console.log(`Log - ${JSON.stringify(error.failedLogs)}`);\n      }\n    } else {\n      console.log(e);\n    }\n  }\n}\n\nmain().catch((err) => {\n  console.error(\"The sample encountered an error:\", err);\n  process.exit(1);\n});\n\nmodule.exports = { main };\n```\n\n### Verify logs\n\nYou can verify that your data has been uploaded correctly by using the [@azure/monitor-query](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/monitor/monitor-query/README.md#install-the-package) library. Run the [Upload custom logs](#upload-custom-logs) sample first before verifying the logs.\n\n```js\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * @summary Demonstrates how to run query against a Log Analytics workspace to verify if the logs were uploaded\n */\n\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { LogsQueryClient } = require(\"@azure/monitor-query\");\n\nconst monitorWorkspaceId = process.env.MONITOR_WORKSPACE_ID || \"workspace_id\";\nconst tableName = process.env.TABLE_NAME || \"table_name\";\nrequire(\"dotenv\").config();\n\nasync function main() {\n  const credential = new DefaultAzureCredential();\n  const logsQueryClient = new LogsQueryClient(credential);\n  const queriesBatch = [\n    {\n      workspaceId: monitorWorkspaceId,\n      query: tableName + \" | count;\",\n      timespan: { duration: \"P1D\" },\n    },\n  ];\n\n  const result = await logsQueryClient.queryBatch(queriesBatch);\n  if (result[0].status === \"Success\") {\n    console.log(\"Table entry count: \", JSON.stringify(result[0].tables));\n  } else {\n    console.log(\n      `Some error encountered while retrieving the count. Status = ${result[0].status}`,\n      JSON.stringify(result[0])\n    );\n  }\n}\n\nmain().catch((err) => {\n  console.error(\"The sample encountered an error:\", err);\n  process.exit(1);\n});\n\nmodule.exports = { main };\n```\n\n### Uploading large batches of logs\n\nWhen uploading more than 1MB of logs in a single call to the `upload` method on `LogsIngestionClient`, the upload will be split into several smaller batches, each no larger than 1MB. By default, these batches will be uploaded in parallel, with a maximum of 5 batches being uploaded concurrently. It may be desirable to decrease the maximum concurrency if memory usage is a concern. The maximum number of concurrent uploads can be controlled using the `maxConcurrency` option, as shown in this example:\n\n```js\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { isAggregateLogsUploadError, LogsIngestionClient } = require(\"@azure/monitor-ingestion\");\n\nrequire(\"dotenv\").config();\n\nasync function main() {\n  const logsIngestionEndpoint = process.env.LOGS_INGESTION_ENDPOINT || \"logs_ingestion_endpoint\";\n  const ruleId = process.env.DATA_COLLECTION_RULE_ID || \"data_collection_rule_id\";\n  const streamName = process.env.STREAM_NAME || \"data_stream_name\";\n  const credential = new DefaultAzureCredential();\n  const client = new LogsIngestionClient(logsIngestionEndpoint, credential);\n\n  // Constructing a large number of logs to ensure batching takes place\n  const logs = [];\n  for (let i = 0; i < 100000; ++i) {\n    logs.push({\n      Time: \"2021-12-08T23:51:14.1104269Z\",\n      Computer: \"Computer1\",\n      AdditionalContext: `context-${i}`,\n    });\n  }\n\n  try{\n    // Set the maximum concurrency to 1 to prevent concurrent requests entirely\n    await client.upload(ruleId, streamName, logs, { maxConcurrency: 1 });\n  }\n  catch(e){\n    let aggregateErrors = isAggregateLogsUploadError(e) ? e.errors : [];\n    if (aggregateErrors.length > 0) {\n      console.log(\"Some logs have failed to complete ingestion\");\n      for (const error of aggregateErrors) {\n        console.log(`Error - ${JSON.stringify(error.cause)}`);\n        console.log(`Log - ${JSON.stringify(error.failedLogs)}`);\n      }\n    } else {\n      console.log(e);\n    }\n  }\n}\nmain().catch((err) => {\n  console.error(\"The sample encountered an error:\", err);\n  process.exit(1);\n});\n\nmodule.exports = { main };\n```\n\n### Retrieve logs\n\nLogs uploaded using the Monitor Ingestion client library can be retrieved using the [Monitor Query client library][monitor_query].\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. To see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```ts\nimport { setLogLevel } from \"@azure/logger\";\n\nsetLogLevel(\"info\");\n```\n\nFor detailed instructions on how to enable logs, see the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nTo learn more about Azure Monitor, see the [Azure Monitor service documentation][azure_monitor_overview]. Please take a look at the samples directory for detailed [examples][azure_monitor_samples] on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n<!-- LINKS -->\n\n[azure_monitor_overview]: https://learn.microsoft.com/azure/azure-monitor/overview\n[data_collection_endpoint]: https://learn.microsoft.com/azure/azure-monitor/essentials/data-collection-endpoint-overview\n[data_collection_rule]: https://learn.microsoft.com/azure/azure-monitor/essentials/data-collection-rule-overview\n[data_collection_rule_tutorial]: https://learn.microsoft.com/azure/azure-monitor/logs/tutorial-logs-ingestion-portal#collect-information-from-the-dcr\n[ingestion_overview]: https://learn.microsoft.com/azure/azure-monitor/logs/logs-ingestion-api-overview\n[azure_monitor_samples]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/monitor/monitor-ingestion/samples/v1-beta\n[monitor_query]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/monitor/monitor-query\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js/sdk/monitor/monitor-ingestion/README.png)\n",
        "repo_name": "monitor/monitor-ingestion",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/monitor/monitor-ingestion",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Monitor OpenTelemetry Exporter client library for JavaScript\n\n[![npm version](https://badge.fury.io/js/%40azure%2Fmonitor-opentelemetry-exporter.svg)](https://badge.fury.io/js/%40azure%2Fmonitor-opentelemetry-exporter)\n\n## Getting started\n\nThis exporter package assumes your application is [already instrumented](https://opentelemetry.io/docs/js/getting-started/) with the OpenTelemetry SDK. Once you are ready to export OpenTelemetry data, you can add this exporter to your application.\n\n### Install the package\n\n`npm install @azure/monitor-opentelemetry-exporter`\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge, and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription](https://azure.microsoft.com/free/)\n- An [Application Insights workspace](https://docs.microsoft.com/azure/azure-monitor/app/app-insights-overview/)\n\n### Distributed Tracing\n\nAdd the exporter to your existing OpenTelemetry tracer provider (`NodeTracerProvider` / `BasicTracerProvider`)\n\n```js\nconst { AzureMonitorTraceExporter } = require(\"@azure/monitor-opentelemetry-exporter\");\nconst { BatchSpanProcessor } = require(\"@opentelemetry/sdk-trace-base\");\nconst { NodeTracerProvider } = require(\"@opentelemetry/sdk-trace-node\");\nconst { Resource } = require(\"@opentelemetry/resources\"); \nconst { SemanticResourceAttributes } = require(\"@opentelemetry/semantic-conventions\"); \n\nconst provider = new NodeTracerProvider({\n  resource: new Resource({\n    [SemanticResourceAttributes.SERVICE_NAME]: \"basic-service\",\n  }),\n});\nprovider.register();\n\n// Create an exporter instance\nconst exporter = new AzureMonitorTraceExporter({\n  connectionString:\n    process.env[\"APPLICATIONINSIGHTS_CONNECTION_STRING\"] || \"<your connection string>\"\n});\n\n// Add the exporter to the provider\nprovider.addSpanProcessor(\n  new BatchSpanProcessor(exporter, {\n    bufferTimeout: 15000,\n    bufferSize: 1000\n  })\n);\n```\n\n### Metrics\n\nAdd the exporter to your existing OpenTelemetry tracer provider (`NodeTracerProvider` / `BasicTracerProvider`)\n\n```js\nconst { MeterProvider, PeriodicExportingMetricReader } = require(\"@opentelemetry/sdk-metrics\");\nconst { AzureMonitorMetricExporter } = require(\"@azure/monitor-opentelemetry-exporter\");\nconst { Resource } = require(\"@opentelemetry/resources\");\nconst { SemanticResourceAttributes } = require(\"@opentelemetry/semantic-conventions\");\n\n// Add the exporter into the MetricReader and register it with the MeterProvider\nconst provider = new MeterProvider();\nconst exporter = new AzureMonitorMetricExporter({\n  connectionString:\n    process.env[\"APPLICATIONINSIGHTS_CONNECTION_STRING\"] || \"<your connection string>\",\n});\nconst metricReaderOptions = {\n  exporter: exporter,\n};\nconst metricReader = new PeriodicExportingMetricReader(metricReaderOptions);\nprovider.addMetricReader(metricReader);\n```\n\n### Logs\n\nComing Soon\n\n### Sampling\n\nYou can enable sampling to limit the amount of telemetry records you receive. In order to enable correct sampling in Application Insights, use the `ApplicationInsightsSampler` as shown below.\n\n```js\nconst { ApplicationInsightsSampler } = require(\"@azure/monitor-opentelemetry-exporter\");\nconst { BatchSpanProcessor } = require(\"@opentelemetry/sdk-trace-base\");\nconst { NodeTracerProvider } = require(\"@opentelemetry/sdk-trace-node\");\n\n// Sampler expects a sample rate of between 0 and 1 inclusive\n// A rate of 0.75 means approximately 75 % of your traces will be sent\nconst aiSampler = new ApplicationInsightsSampler(0.75);\nconst provider = new NodeTracerProvider({\n  sampler: aiSampler,\n  resource: new Resource({\n    [SemanticResourceAttributes.SERVICE_NAME]: \"basic-service\",\n  }),\n});\nprovider.register();\n```\n\n## Examples\n\nFor complete samples of a few champion scenarios, see the [`samples/`](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/monitor/monitor-opentelemetry-exporter/samples/) folder.\n\n## Key concepts\n\nFor more information on the OpenTelemetry project, please review the [**OpenTelemetry Specifications**](https://github.com/open-telemetry/opentelemetry-specification#opentelemetry-specification).\n\n## Troubleshooting\n\n### Enable debug logging\n\nYou can enable debug logging by changing the logging level of your provider.\n\n```js\nconst { DiagConsoleLogger, DiagLogLevel, diag } = require(\"@opentelemetry/api\");\nconst { NodeTracerProvider } = require(\"@opentelemetry/sdk-trace-node\");\n\nconst provider = new NodeTracerProvider();\ndiag.setLogger(new DiagConsoleLogger(), DiagLogLevel.ALL);\nprovider.register();\n```\n\n## Next steps\n\nThis exporter is made to be used with the [OpenTelemetry JS](https://github.com/open-telemetry/opentelemetry-js).\n\n### Plugin Registry\n\nTo see if a plugin has already been made for a library you are using, please check out the [OpenTelemetry Registry](https://opentelemetry.io/registry/).\n\nIf you cannot your library in the registry, feel free to suggest a new plugin request at [`opentelemetry-js-contrib`](https://github.com/open-telemetry/opentelemetry-js-contrib).\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js/sdk/monitor/monitor-opentelemetry-exporter/README.png)\n",
        "repo_name": "monitor/monitor-opentelemetry-exporter",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/monitor/monitor-opentelemetry-exporter",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Monitor OpenTelemetry client library for JavaScript\n\n[![npm version](https://badge.fury.io/js/%40azure%2Fmonitor-opentelemetry.svg)](https://badge.fury.io/js/%40azure%2Fmonitor-opentelemetry)\n\n## Getting started\n\n### Install the package\n\n`npm install @azure/monitor-opentelemetry`\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription](https://azure.microsoft.com/free/)\n- An [Application Insights workspace](https://docs.microsoft.com/azure/azure-monitor/app/app-insights-overview/)\n\n### Enable Azure Monitor OpenTelemetry Client\n\n> *Important:* `AzureMonitorOpenTelemetryClient` must be setup *and* started *before* you import anything else. There may be resulting telemetry loss if other libraries are imported first.\n\n\n```typescript\nconst { AzureMonitorOpenTelemetryClient, AzureMonitorOpenTelemetryConfig } = require(\"@azure/monitor-opentelemetry\");\n\nconst config = new AzureMonitorOpenTelemetryConfig();\nconfig.connectionString = \"<YOUR_CONNECTION_STRING>\";\nconst client = new AzureMonitorOpenTelemetryClient(config);\n```\n\n* Connection String could be set using the environment variable APPLICATIONINSIGHTS\\_CONNECTION\\_STRING\n\n## Examples\n\nFor complete samples of a few champion scenarios, see the [`samples/`](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/monitor/monitor-opentelemetry/samples-dev/) folder.\n\n## Key concepts\n\nFor more information on the OpenTelemetry project, please review the [**OpenTelemetry Specifications**](https://github.com/open-telemetry/opentelemetry-specification#opentelemetry-specification).\n\n## Troubleshooting\n\n### Enable debug logging\n\nYou can enable debug logging by changing the logging level of your provider.\n\n```js\nconst { DiagConsoleLogger, DiagLogLevel, diag } = require(\"@opentelemetry/api\");\nconst { NodeTracerProvider } = require(\"@opentelemetry/sdk-trace-node\");\n\nconst provider = new NodeTracerProvider();\ndiag.setLogger(new DiagConsoleLogger(), DiagLogLevel.ALL);\nprovider.register();\n```\n\n### Plugin Registry\n\nTo see if a plugin has already been made for a library you are using, please check out the [OpenTelemetry Registry](https://opentelemetry.io/registry/).\n\nIf you cannot your library in the registry, feel free to suggest a new plugin request at [`opentelemetry-js-contrib`](https://github.com/open-telemetry/opentelemetry-js-contrib).\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js/sdk/monitor/monitor-opentelemetry/README.png)\n",
        "repo_name": "monitor/monitor-opentelemetry",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/monitor/monitor-opentelemetry",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Monitor Query client library for JavaScript\n\nThe Azure Monitor Query client library is used to execute read-only queries against [Azure Monitor][azure_monitor_overview]'s two data platforms:\n\n- [Logs](https://docs.microsoft.com/azure/azure-monitor/logs/data-platform-logs) - Collects and organizes log and performance data from monitored resources. Data from different sources such as platform logs from Azure services, log and performance data from virtual machines agents, and usage and performance data from apps can be consolidated into a single [Azure Log Analytics workspace](https://docs.microsoft.com/azure/azure-monitor/logs/data-platform-logs#log-analytics-and-workspaces). The various data types can be analyzed together using the [Kusto Query Language][kusto_query_language].\n- [Metrics](https://docs.microsoft.com/azure/azure-monitor/essentials/data-platform-metrics) - Collects numeric data from monitored resources into a time series database. Metrics are numerical values that are collected at regular intervals and describe some aspect of a system at a particular time. Metrics are lightweight and capable of supporting near real-time scenarios, making them particularly useful for alerting and fast detection of issues.\n\n**Resources:**\n\n- [Source code][source]\n- [Package (npm)][package]\n- [API reference documentation][msdocs_apiref]\n- [Service documentation][azure_monitor_overview]\n- [Samples][samples]\n- [Change log][changelog]\n\n## Getting started\n\n### Supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge, and Firefox\n\nFor more details, see our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md).\n\n### Prerequisites\n\n- An [Azure subscription][azure_subscription]\n- A [TokenCredential](https://docs.microsoft.com/javascript/api/@azure/core-auth/tokencredential?view=azure-node-latest) implementation, such as an [Azure Identity library credential type](https://docs.microsoft.com/javascript/api/overview/azure/identity-readme?view=azure-node-latest#credential-classes).\n- To query Logs, you need one of the following things:\n  - An [Azure Log Analytics workspace][azure_monitor_create_using_portal]\n  - An Azure resource of any kind (Storage Account, Key Vault, Cosmos DB, etc.)\n- To query Metrics, you need an Azure resource of any kind (Storage Account, Key Vault, Cosmos DB, etc.).\n\n### Install the package\n\nInstall the Azure Monitor Query client library for JavaScript with npm:\n\n```bash\nnpm install @azure/monitor-query\n```\n\n### Create the client\n\nAn authenticated client is required to query Logs or Metrics. To authenticate, the following example uses [DefaultAzureCredential](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/identity/identity/README.md#defaultazurecredential) from the [@azure/identity](https://www.npmjs.com/package/@azure/identity) package.\n\n```ts\nimport { DefaultAzureCredential } from \"@azure/identity\";\nimport { LogsQueryClient, MetricsQueryClient } from \"@azure/monitor-query\";\n\nconst credential = new DefaultAzureCredential();\n\nconst logsQueryClient = new LogsQueryClient(credential);\n// or\nconst metricsQueryClient = new MetricsQueryClient(credential);\n```\n\n#### Configure clients for non-public Azure clouds\n\nBy default, `LogsQueryClient` and `MetricsQueryClient` are configured to connect to the public Azure cloud. These can be configured to connect to non-public Azure clouds by passing in the correct `endpoint` argument. For example:\n\n```ts\nimport { DefaultAzureCredential } from \"@azure/identity\";\nimport { LogsQueryClient, MetricsQueryClient } from \"@azure/monitor-query\";\n\nconst credential = new DefaultAzureCredential();\n\nconst logsQueryClient = new LogsQueryClient(credential, {\n  endpoint: \"https://api.loganalytics.azure.cn/v1\",\n});\n\n// or\nconst metricsQueryClient = new MetricsQueryClient(credential{\n  endpoint: \"https://management.chinacloudapi.cn\",\n});\n```\n\n**Note**: Currently, `MetricsQueryClient` uses the Azure Resource Manager (ARM) endpoint for querying metrics, so you will need the corresponding management endpoint for your cloud when using this client. This is subject to change in the future.\n\n### Execute the query\n\nFor examples of Logs and Metrics queries, see the [Examples](#examples) section.\n\n## Key concepts\n\n### Logs query rate limits and throttling\n\nThe Log Analytics service applies throttling when the request rate is too high. Limits, such as the maximum number of rows returned, are also applied on the Kusto queries. For more information, see [Query API](https://learn.microsoft.com/azure/azure-monitor/service-limits#la-query-api).\n\n### Metrics data structure\n\nEach set of metric values is a time series with the following characteristics:\n\n- The time the value was collected\n- The resource associated with the value\n- A namespace that acts like a category for the metric\n- A metric name\n- The value itself\n- Some metrics may have multiple dimensions as described in multi-dimensional metrics. Custom metrics can have up to 10 dimensions.\n\n## Examples\n\n- [Logs query](#logs-query)\n  - [Handle logs query response](#handle-logs-query-response)\n- [Batch logs query](#batch-logs-query)\n  - [Handle logs batch query response](#handle-logs-batch-query-response)\n- [Advanced logs query scenarios](#advanced-logs-query-scenarios)\n  - [Set logs query timeout](#set-logs-query-timeout)\n  - [Query multiple workspaces](#query-multiple-workspaces)\n- [Metrics query](#metrics-query)\n  - [Handle metrics query response](#handle-metrics-query-response)\n  - [Example of handling response](#example-of-handling-response)\n\n### Logs query\n\nThe `LogsQueryClient` can be used to query a Log Analytics workspace using the [Kusto Query Language][kusto_query_language]. The `timespan.duration` can be specified as a string in an ISO 8601 duration format. You can use the `Durations` constants provided for some commonly used ISO 8601 durations.\n\n```ts\nimport { DefaultAzureCredential } from \"@azure/identity\";\nimport { Durations, LogsQueryClient, LogsQueryResultStatus, LogsTable } from \"@azure/monitor-query\";\n\nconst azureLogAnalyticsWorkspaceId = \"<the Workspace Id for your Azure Log Analytics resource>\";\nconst logsQueryClient = new LogsQueryClient(new DefaultAzureCredential());\n\nasync function run() {\n  const kustoQuery = \"AppEvents | limit 1\";\n  const result = await logsQueryClient.queryWorkspace(azureLogAnalyticsWorkspaceId, kustoQuery, {\n    duration: Durations.twentyFourHours,\n  });\n\n  if (result.status === LogsQueryResultStatus.Success) {\n    const tablesFromResult: LogsTable[] = result.tables;\n\n    if (tablesFromResult.length === 0) {\n      console.log(`No results for query '${kustoQuery}'`);\n      return;\n    }\n    console.log(`This query has returned table(s) - `);\n    processTables(tablesFromResult);\n  } else {\n    console.log(`Error processing the query '${kustoQuery}' - ${result.partialError}`);\n    if (result.partialTables.length > 0) {\n      console.log(`This query has also returned partial data in the following table(s) - `);\n      processTables(result.partialTables);\n    }\n  }\n}\n\nasync function processTables(tablesFromResult: LogsTable[]) {\n  for (const table of tablesFromResult) {\n    const columnHeaderString = table.columnDescriptors\n      .map((column) => `${column.name}(${column.type}) `)\n      .join(\"| \");\n    console.log(\"| \" + columnHeaderString);\n\n    for (const row of table.rows) {\n      const columnValuesString = row.map((columnValue) => `'${columnValue}' `).join(\"| \");\n      console.log(\"| \" + columnValuesString);\n    }\n  }\n}\n\nrun().catch((err) => console.log(\"ERROR:\", err));\n```\n\n#### Handle logs query response\n\nThe `queryWorkspace` function of `LogsQueryClient` returns a `LogsQueryResult` object. The object type can be `LogsQuerySuccessfulResult` or `LogsQueryPartialResult`. Here's a hierarchy of the response:\n\n```\nLogsQuerySuccessfulResult\n|---statistics\n|---visualization\n|---status (\"Success\")\n|---tables (list of `LogsTable` objects)\n    |---name\n    |---rows\n    |---columnDescriptors (list of `LogsColumn` objects)\n        |---name\n        |---type\n\nLogsQueryPartialResult\n|---statistics\n|---visualization\n|---status (\"PartialFailure\")\n|---partialError\n    |--name\n    |--code\n    |--message\n    |--stack\n|---partialTables (list of `LogsTable` objects)\n    |---name\n    |---rows\n    |---columnDescriptors (list of `LogsColumn` objects)\n        |---name\n        |---type\n```\n\nFor example, to handle a response with tables:\n\n```ts\nasync function processTables(tablesFromResult: LogsTable[]) {\n  for (const table of tablesFromResult) {\n    const columnHeaderString = table.columnDescriptors\n      .map((column) => `${column.name}(${column.type}) `)\n      .join(\"| \");\n    console.log(\"| \" + columnHeaderString);\n\n    for (const row of table.rows) {\n      const columnValuesString = row.map((columnValue) => `'${columnValue}' `).join(\"| \");\n      console.log(\"| \" + columnValuesString);\n    }\n  }\n}\n```\n\nA full sample can be found [here](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/monitor/monitor-query/samples/v1/typescript/src/logsQuery.ts).\n\n### Batch logs query\n\nThe following example demonstrates sending multiple queries at the same time using the batch query API. The queries can be represented as a list of `BatchQuery` objects.\n\n```ts\nexport async function main() {\n  if (!monitorWorkspaceId) {\n    throw new Error(\"MONITOR_WORKSPACE_ID must be set in the environment for this sample\");\n  }\n\n  const tokenCredential = new DefaultAzureCredential();\n  const logsQueryClient = new LogsQueryClient(tokenCredential);\n\n  const kqlQuery = \"AppEvents | project TimeGenerated, Name, AppRoleInstance | limit 1\";\n  const queriesBatch = [\n    {\n      workspaceId: monitorWorkspaceId,\n      query: kqlQuery,\n      timespan: { duration: \"P1D\" },\n    },\n    {\n      workspaceId: monitorWorkspaceId,\n      query: \"AzureActivity | summarize count()\",\n      timespan: { duration: \"PT1H\" },\n    },\n    {\n      workspaceId: monitorWorkspaceId,\n      query:\n        \"AppRequests | take 10 | summarize avgRequestDuration=avg(DurationMs) by bin(TimeGenerated, 10m), _ResourceId\",\n      timespan: { duration: \"PT1H\" },\n    },\n    {\n      workspaceId: monitorWorkspaceId,\n      query: \"AppRequests | take 2\",\n      timespan: { duration: \"PT1H\" },\n      includeQueryStatistics: true,\n    },\n  ];\n\n  const result = await logsQueryClient.queryBatch(queriesBatch);\n\n  if (result == null) {\n    throw new Error(\"No response for query\");\n  }\n\n  let i = 0;\n  for (const response of result) {\n    console.log(`Results for query with query: ${queriesBatch[i]}`);\n    if (response.status === LogsQueryResultStatus.Success) {\n      console.log(\n        `Printing results from query '${queriesBatch[i].query}' for '${queriesBatch[i].timespan}'`\n      );\n      processTables(response.tables);\n    } else if (response.status === LogsQueryResultStatus.PartialFailure) {\n      console.log(\n        `Printing partial results from query '${queriesBatch[i].query}' for '${queriesBatch[i].timespan}'`\n      );\n      processTables(response.partialTables);\n      console.log(\n        ` Query had errors:${response.partialError.message} with code ${response.partialError.code}`\n      );\n    } else {\n      console.log(`Printing errors from query '${queriesBatch[i].query}'`);\n      console.log(` Query had errors:${response.message} with code ${response.code}`);\n    }\n    // next query\n    i++;\n  }\n}\n\nasync function processTables(tablesFromResult: LogsTable[]) {\n  for (const table of tablesFromResult) {\n    const columnHeaderString = table.columnDescriptors\n      .map((column) => `${column.name}(${column.type}) `)\n      .join(\"| \");\n    console.log(\"| \" + columnHeaderString);\n\n    for (const row of table.rows) {\n      const columnValuesString = row.map((columnValue) => `'${columnValue}' `).join(\"| \");\n      console.log(\"| \" + columnValuesString);\n    }\n  }\n}\n```\n\n#### Handle logs batch query response\n\nThe `queryBatch` function of `LogsQueryClient` returns a `LogsQueryBatchResult` object. `LogsQueryBatchResult` contains a list of objects with the following possible types:\n\n- `LogsQueryPartialResult`\n- `LogsQuerySuccessfulResult`\n- `LogsQueryError`\n\nHere's a hierarchy of the response:\n\n```\n\nLogsQuerySuccessfulResult\n|---statistics\n|---visualization\n|---status (\"Success\")\n|---tables (list of `LogsTable` objects)\n    |---name\n    |---rows\n    |---columnDescriptors (list of `LogsColumn` objects)\n        |---name\n        |---type\n\nLogsQueryPartialResult\n|---statistics\n|---visualization\n|---status (\"PartialFailure\")\n|---partialError\n    |--name\n    |--code\n    |--message\n    |--stack\n|---partialTables (list of `LogsTable` objects)\n    |---name\n    |---rows\n    |---columnDescriptors (list of `LogsColumn` objects)\n        |---name\n        |---type\n\nLogsQueryError\n|--name\n|--code\n|--message\n|--stack\n|--status (\"Failure\")\n```\n\nFor example, the following code handles a batch logs query response:\n\n```ts\nasync function processBatchResult(result: LogsQueryBatchResult) {\n  let i = 0;\n  for (const response of result) {\n    console.log(`Results for query with query: ${queriesBatch[i]}`);\n    if (response.status === LogsQueryResultStatus.Success) {\n      console.log(\n        `Printing results from query '${queriesBatch[i].query}' for '${queriesBatch[i].timespan}'`\n      );\n      processTables(response.tables);\n    } else if (response.status === LogsQueryResultStatus.PartialFailure) {\n      console.log(\n        `Printing partial results from query '${queriesBatch[i].query}' for '${queriesBatch[i].timespan}'`\n      );\n      processTables(response.partialTables);\n      console.log(\n        ` Query had errors:${response.partialError.message} with code ${response.partialError.code}`\n      );\n    } else {\n      console.log(`Printing errors from query '${queriesBatch[i].query}'`);\n      console.log(` Query had errors:${response.message} with code ${response.code}`);\n    }\n    // next query\n    i++;\n  }\n}\n\nasync function processTables(tablesFromResult: LogsTable[]) {\n  for (const table of tablesFromResult) {\n    const columnHeaderString = table.columnDescriptors\n      .map((column) => `${column.name}(${column.type}) `)\n      .join(\"| \");\n    console.log(\"| \" + columnHeaderString);\n\n    for (const row of table.rows) {\n      const columnValuesString = row.map((columnValue) => `'${columnValue}' `).join(\"| \");\n      console.log(\"| \" + columnValuesString);\n    }\n  }\n}\n```\n\nA full sample can be found [here](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/monitor/monitor-query/samples/v1/typescript/src/logsQueryBatch.ts).\n\n### Advanced logs query scenarios\n\n#### Set logs query timeout\n\nSome logs queries take longer than 3 minutes to execute. The default server timeout is 3 minutes. You can increase the server timeout to a maximum of 10 minutes. In the following example, the `LogsQueryOptions` object's `serverTimeoutInSeconds` property is used to increase the server timeout to 10 minutes:\n\n```ts\n// setting optional parameters\nconst queryLogsOptions: LogsQueryOptions = {\n  // explicitly control the amount of time the server can spend processing the query.\n  serverTimeoutInSeconds: 600, // 600 seconds = 10 minutes\n};\n\nconst result = await logsQueryClient.queryWorkspace(\n  azureLogAnalyticsWorkspaceId,\n  kustoQuery,\n  { duration: Durations.twentyFourHours },\n  queryLogsOptions\n);\n\nconst tablesFromResult = result.tables;\n```\n\n#### Query multiple workspaces\n\nThe same logs query can be executed across multiple Log Analytics workspaces. In addition to the Kusto query, the following parameters are required:\n\n- `workspaceId` - The first (primary) workspace ID.\n- `additionalWorkspaces` - A list of workspaces, excluding the workspace provided in the `workspaceId` parameter. The parameter's list items may consist of the following identifier formats:\n  - Qualified workspace names\n  - Workspace IDs\n  - Azure resource IDs\n\nFor example, the following query executes in three workspaces:\n\n```ts\nconst queryLogsOptions: LogsQueryOptions = {\n  additionalWorkspaces: [\"<workspace2>\", \"<workspace3>\"],\n};\n\nconst kustoQuery = \"AppEvents | limit 10\";\nconst result = await logsQueryClient.queryWorkspace(\n  azureLogAnalyticsWorkspaceId,\n  kustoQuery,\n  { duration: Durations.twentyFourHours },\n  queryLogsOptions\n);\n```\n\nTo view the results for each workspace, use the `TenantId` column to either order the results or filter them in the Kusto query.\n\n**Order results by TenantId**\n\n```\nAppEvents | order by TenantId\n```\n\n**Filter results by TenantId**\n\n```\nAppEvents | filter TenantId == \"<workspace2>\"\n```\n\nA full sample can be found [here](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/monitor/monitor-query/samples/v1/typescript/src/logsQueryMultipleWorkspaces.ts).\n\n#### Include statistics\n\nTo get logs query execution statistics, such as CPU and memory consumption:\n\n1. Set the `LogsQueryOptions.includeQueryStatistics` property to `true`.\n1. Access the `statistics` field inside the `LogsQueryResult` object.\n\nThe following example prints the query execution time:\n\n```ts\nconst workspaceId = \"<workspace_id>\";\nconst logsQueryClient = new LogsQueryClient(new DefaultAzureCredential());\nconst kustoQuery = \"AzureActivity | top 10 by TimeGenerated\";\n\nconst result = await logsQueryClient.queryWorkspace(\n  monitorWorkspaceId,\n  kustoQuery,\n  { duration: Durations.oneDay },\n  {\n    includeQueryStatistics: true,\n  }\n);\n\nconst executionTime =\n  result.statistics && result.statistics.query && result.statistics.query.executionTime;\n\nconsole.log(\n  `Results for query '${kustoQuery}', execution time: ${\n    executionTime == null ? \"unknown\" : executionTime\n  }`\n);\n```\n\nBecause the structure of the `statistics` payload varies by query, a `Record<string, unknown>` return type is used. It contains the raw JSON response. The statistics are found within the `query` property of the JSON. For example:\n\n```json\n{\n  \"query\": {\n    \"executionTime\": 0.0156478,\n    \"resourceUsage\": {...},\n    \"inputDatasetStatistics\": {...},\n    \"datasetStatistics\": [{...}]\n  }\n}\n```\n\n#### Include visualization\n\nTo get visualization data for logs queries using the [render operator](https://docs.microsoft.com/azure/data-explorer/kusto/query/renderoperator?pivots=azuremonitor):\n\n1. Set the `LogsQueryOptions.includeVisualization` property to `true`.\n1. Access the `visualization` field inside the `LogsQueryResult` object.\n\nFor example:\n\n```ts\nconst workspaceId = \"<workspace_id>\";\nconst logsQueryClient = new LogsQueryClient(new DefaultAzureCredential());\n\nconst result = await logsQueryClient.queryWorkspace(\n    monitorWorkspaceId,\n    @\"StormEvents\n        | summarize event_count = count() by State\n        | where event_count > 10\n        | project State, event_count\n        | render columnchart\",\n    { duration: Durations.oneDay },\n    {\n      includeVisualization: true\n    }\n  );\nconsole.log(\"visualization result:\", result.visualization);\n```\n\nBecause the structure of the `visualization` payload varies by query, a `Record<string, unknown>` return type is used. It contains the raw JSON response. For example:\n\n```json\n{\n  \"visualization\": \"columnchart\",\n  \"title\": \"the chart title\",\n  \"accumulate\": false,\n  \"isQuerySorted\": false,\n  \"kind\": null,\n  \"legend\": null,\n  \"series\": null,\n  \"yMin\": \"NaN\",\n  \"yMax\": \"NaN\",\n  \"xAxis\": null,\n  \"xColumn\": null,\n  \"xTitle\": \"x axis title\",\n  \"yAxis\": null,\n  \"yColumns\": null,\n  \"ySplit\": null,\n  \"yTitle\": null,\n  \"anomalyColumns\": null\n}\n```\n\n### Metrics query\n\nThe following example gets metrics for an [Azure Metrics Advisor](https://docs.microsoft.com/azure/applied-ai-services/metrics-advisor/overview) subscription.\nThe resource URI must be that of the resource for which metrics are being queried. It's normally of the format `/subscriptions/<id>/resourceGroups/<rg-name>/providers/<source>/topics/<resource-name>`.\n\nTo find the resource URI:\n\n1. Navigate to your resource's page in the Azure portal.\n2. From the **Overview** blade, select the **JSON View** link.\n3. In the resulting JSON, copy the value of the `id` property.\n\n```ts\nimport { DefaultAzureCredential } from \"@azure/identity\";\nimport { Durations, Metric, MetricsQueryClient } from \"@azure/monitor-query\";\nimport * as dotenv from \"dotenv\";\n\ndotenv.config();\n\nconst metricsResourceId = process.env.METRICS_RESOURCE_ID;\n\nexport async function main() {\n  const tokenCredential = new DefaultAzureCredential();\n  const metricsQueryClient = new MetricsQueryClient(tokenCredential);\n\n  if (!metricsResourceId) {\n    throw new Error(\"METRICS_RESOURCE_ID must be set in the environment for this sample\");\n  }\n\n  const iterator = metricsQueryClient.listMetricDefinitions(metricsResourceId);\n  let result = await iterator.next();\n  let metricNames: string[] = [];\n  for await (const result of iterator) {\n    console.log(` metricDefinitions - ${result.id}, ${result.name}`);\n    if (result.name) {\n      metricNames.push(result.name);\n    }\n  }\n  const firstMetricName = metricNames[0];\n  const secondMetricName = metricNames[1];\n  if (firstMetricName && secondMetricName) {\n    console.log(`Picking an example metric to query: ${firstMetricName} and ${secondMetricName}`);\n    const metricsResponse = await metricsQueryClient.queryResource(\n      metricsResourceId,\n      [firstMetricName, secondMetricName],\n      {\n        granularity: \"PT1M\",\n        timespan: { duration: Durations.fiveMinutes },\n      }\n    );\n\n    console.log(\n      `Query cost: ${metricsResponse.cost}, interval: ${metricsResponse.granularity}, time span: ${metricsResponse.timespan}`\n    );\n\n    const metrics: Metric[] = metricsResponse.metrics;\n    console.log(`Metrics:`, JSON.stringify(metrics, undefined, 2));\n    const metric = metricsResponse.getMetricByName(firstMetricName);\n    console.log(`Selected Metric: ${firstMetricName}`, JSON.stringify(metric, undefined, 2));\n  } else {\n    console.error(`Metric names are not defined - ${firstMetricName} and ${secondMetricName}`);\n  }\n}\n\nmain().catch((err) => {\n  console.error(\"The sample encountered an error:\", err);\n  process.exit(1);\n});\n```\n\nIn the preceding sample, metric results in `metricsResponse` are ordered according to the order in which the user specifies the metric names in the `metricNames` array argument for the `queryResource` function. If the user specifies `[firstMetricName, secondMetricName]`, the result for `firstMetricName` will appear before the result for `secondMetricName` in the `metricResponse`.\n\n#### Handle metrics query response\n\nThe metrics `queryResource` function returns a `QueryMetricsResult` object. The `QueryMetricsResult` object contains properties such as a list of `Metric`-typed objects, `interval`, `namespace`, and `timespan`. The `Metric` objects list can be accessed using the `metrics` property. Each `Metric` object in this list contains a list of `TimeSeriesElement` objects. Each `TimeSeriesElement` contains `data` and `metadataValues` properties. In visual form, the object hierarchy of the response resembles the following structure:\n\n```\nQueryMetricsResult\n|---cost\n|---timespan (of type `QueryTimeInterval`)\n|---granularity\n|---namespace\n|---resourceRegion\n|---metrics (list of `Metric` objects)\n    |---id\n    |---type\n    |---name\n    |---unit\n    |---displayDescription\n    |---errorCode\n    |---timeseries (list of `TimeSeriesElement` objects)\n        |---metadataValues\n        |---data (list of data points represented by `MetricValue` objects)\n            |---timeStamp\n            |---average\n            |---minimum\n            |---maximum\n            |---total\n            |---count\n|---getMetricByName(metricName): Metric | undefined (convenience method)\n```\n\n#### Example of handling response\n\n```ts\nimport { DefaultAzureCredential } from \"@azure/identity\";\nimport { Durations, Metric, MetricsQueryClient } from \"@azure/monitor-query\";\nimport * as dotenv from \"dotenv\";\ndotenv.config();\n\nconst metricsResourceId = process.env.METRICS_RESOURCE_ID;\nexport async function main() {\n  const tokenCredential = new DefaultAzureCredential();\n  const metricsQueryClient = new MetricsQueryClient(tokenCredential);\n\n  if (!metricsResourceId) {\n    throw new Error(\n      \"METRICS_RESOURCE_ID for an Azure Metrics Advisor subscription must be set in the environment for this sample\"\n    );\n  }\n\n  console.log(`Picking an example metric to query: MatchedEventCount`);\n\n  const metricsResponse = await metricsQueryClient.queryResource(\n    metricsResourceId,\n    [\"MatchedEventCount\"],\n    {\n      timespan: {\n        duration: Durations.fiveMinutes,\n      },\n      granularity: \"PT1M\",\n      aggregations: [\"Count\"],\n    }\n  );\n\n  console.log(\n    `Query cost: ${metricsResponse.cost}, granularity: ${metricsResponse.granularity}, time span: ${metricsResponse.timespan}`\n  );\n\n  const metrics: Metric[] = metricsResponse.metrics;\n  for (const metric of metrics) {\n    console.log(metric.name);\n    for (const timeseriesElement of metric.timeseries) {\n      for (const metricValue of timeseriesElement.data!) {\n        if (metricValue.count !== 0) {\n          console.log(`There are ${metricValue.count} matched events at ${metricValue.timeStamp}`);\n        }\n      }\n    }\n  }\n}\n\nmain().catch((err) => {\n  console.error(\"The sample encountered an error:\", err);\n  process.exit(1);\n});\n```\n\nA full sample can be found [here](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/monitor/monitor-query/samples/v1/typescript/src/metricsQuery.ts).\n\n## Troubleshooting\n\nTo diagnose various failure scenarios, see the [troubleshooting guide](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/monitor/monitor-query/TROUBLESHOOTING.md).\n\n## Next steps\n\nTo learn more about Azure Monitor, see the [Azure Monitor service documentation][azure_monitor_overview].\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\nThis module's tests are a mixture of live and unit tests, which require you to have an Azure Monitor instance. To execute the tests, you'll need to run:\n\n1. `rush update`\n2. `rush build -t @azure/monitor-query`\n3. `cd into sdk/monitor/monitor-query`\n4. Copy the `sample.env` file to `.env`\n5. Open the `.env` file in an editor and fill in the values.\n6. `npm run test`.\n\nFor more details, view our [tests](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/monitor/monitor-query/test) folder.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n- [Azure Monitor][azure_monitor_overview]\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fmonitor%2Fmonitor-query%2FREADME.png)\n\n[azure_monitor_create_using_portal]: https://docs.microsoft.com/azure/azure-monitor/logs/quick-create-workspace\n[azure_monitor_overview]: https://docs.microsoft.com/azure/azure-monitor/overview\n[azure_subscription]: https://azure.microsoft.com/free/\n[changelog]: https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/monitor/monitor-query/CHANGELOG.md\n[kusto_query_language]: https://docs.microsoft.com/azure/data-explorer/kusto/query/\n[msdocs_apiref]: https://docs.microsoft.com/javascript/api/@azure/monitor-query\n[package]: https://www.npmjs.com/package/@azure/monitor-query\n[samples]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/monitor/monitor-query/samples\n[source]: https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/monitor/monitor-query/\n",
        "repo_name": "monitor/monitor-query",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/monitor/monitor-query",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure ManagedServiceIdentity client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure ManagedServiceIdentity client.\n\nThe Managed Service Identity Client.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/msi/arm-msi) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-msi) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-msi) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-msi` package\n\nInstall the Azure ManagedServiceIdentity client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-msi\n```\n\n### Create and authenticate a `ManagedServiceIdentityClient`\n\nTo create a client object to access the Azure ManagedServiceIdentity API, you will need the `endpoint` of your Azure ManagedServiceIdentity resource and a `credential`. The Azure ManagedServiceIdentity client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure ManagedServiceIdentity resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure ManagedServiceIdentity** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { ManagedServiceIdentityClient } = require(\"@azure/arm-msi\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new ManagedServiceIdentityClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new ManagedServiceIdentityClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### ManagedServiceIdentityClient\n\n`ManagedServiceIdentityClient` is the primary interface for developers using the Azure ManagedServiceIdentity client library. Explore the methods on this client object to understand the different features of the Azure ManagedServiceIdentity service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fmsi%2Farm-msi%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "msi/arm-msi",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/msi/arm-msi",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure MySQLManagementFlexibleServer client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure MySQLManagementFlexibleServer client.\n\nThe Microsoft Azure management API provides create, read, update, and delete functionality for Azure MySQL resources including servers, databases, firewall rules, VNET rules, log files and configurations with new business model.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/mysql/arm-mysql-flexible) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-mysql-flexible) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-mysql-flexible?view=azure-node-preview) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-mysql-flexible` package\n\nInstall the Azure MySQLManagementFlexibleServer client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-mysql-flexible\n```\n\n### Create and authenticate a `MySQLManagementFlexibleServerClient`\n\nTo create a client object to access the Azure MySQLManagementFlexibleServer API, you will need the `endpoint` of your Azure MySQLManagementFlexibleServer resource and a `credential`. The Azure MySQLManagementFlexibleServer client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure MySQLManagementFlexibleServer resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure MySQLManagementFlexibleServer** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { MySQLManagementFlexibleServerClient } = require(\"@azure/arm-mysql-flexible\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new MySQLManagementFlexibleServerClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new MySQLManagementFlexibleServerClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### MySQLManagementFlexibleServerClient\n\n`MySQLManagementFlexibleServerClient` is the primary interface for developers using the Azure MySQLManagementFlexibleServer client library. Explore the methods on this client object to understand the different features of the Azure MySQLManagementFlexibleServer service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fmysql%2Farm-mysql-flexible%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "mysql/arm-mysql-flexible",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/mysql/arm-mysql-flexible",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure MySQLManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure MySQLManagement client.\n\nThe Microsoft Azure management API provides create, read, update, and delete functionality for Azure MySQL resources including servers, databases, firewall rules, VNET rules, log files and configurations with new business model.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/mysql/arm-mysql) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-mysql) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-mysql) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-mysql` package\n\nInstall the Azure MySQLManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-mysql\n```\n\n### Create and authenticate a `MySQLManagementClient`\n\nTo create a client object to access the Azure MySQLManagement API, you will need the `endpoint` of your Azure MySQLManagement resource and a `credential`. The Azure MySQLManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure MySQLManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure MySQLManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { MySQLManagementClient } = require(\"@azure/arm-mysql\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new MySQLManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new MySQLManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### MySQLManagementClient\n\n`MySQLManagementClient` is the primary interface for developers using the Azure MySQLManagement client library. Explore the methods on this client object to understand the different features of the Azure MySQLManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fmysql%2Farm-mysql%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "mysql/arm-mysql",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/mysql/arm-mysql",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure NetAppManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure NetAppManagement client.\n\nMicrosoft NetApp Files Azure Resource Provider specification\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/netapp/arm-netapp) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-netapp) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-netapp) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-netapp` package\n\nInstall the Azure NetAppManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-netapp\n```\n\n### Create and authenticate a `NetAppManagementClient`\n\nTo create a client object to access the Azure NetAppManagement API, you will need the `endpoint` of your Azure NetAppManagement resource and a `credential`. The Azure NetAppManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure NetAppManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure NetAppManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { NetAppManagementClient } = require(\"@azure/arm-netapp\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new NetAppManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new NetAppManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### NetAppManagementClient\n\n`NetAppManagementClient` is the primary interface for developers using the Azure NetAppManagement client library. Explore the methods on this client object to understand the different features of the Azure NetAppManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fnetapp%2Farm-netapp%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "netapp/arm-netapp",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/netapp/arm-netapp",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure NetworkManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure NetworkManagement client.\n\nNetwork Client\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/network/arm-network-profile-2020-09-01-hybrid) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-network-profile-2020-09-01-hybrid) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-network-profile-2020-09-01-hybrid) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-network-profile-2020-09-01-hybrid` package\n\nInstall the Azure NetworkManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-network-profile-2020-09-01-hybrid\n```\n\n### Create and authenticate a `NetworkManagementClient`\n\nTo create a client object to access the Azure NetworkManagement API, you will need the `endpoint` of your Azure NetworkManagement resource and a `credential`. The Azure NetworkManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure NetworkManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure NetworkManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { NetworkManagementClient } = require(\"@azure/arm-network-profile-2020-09-01-hybrid\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new NetworkManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new NetworkManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### NetworkManagementClient\n\n`NetworkManagementClient` is the primary interface for developers using the Azure NetworkManagement client library. Explore the methods on this client object to understand the different features of the Azure NetworkManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fnetwork%2Farm-network-profile-2020-09-01-hybrid%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "network/arm-network-profile-2020-09-01-hybrid",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/network/arm-network-profile-2020-09-01-hybrid",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure NetworkManagement REST client library for JavaScript\n\nNetwork Management Rest Client\n\n**If you are not familiar with our REST client, please spend 5 minutes to take a look at our [REST client docs](https://github.com/Azure/azure-sdk-for-js/blob/main/documentation/rest-clients.md) to use this library, the REST client provides a light-weighted & developer friendly way to call azure rest api**\n\nKey links:\n\n- [Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/network/arm-network-rest)\n- [Package (NPM)](https://www.npmjs.com/package/@azure-rest/arm-network)\n- [API reference documentation](https://docs.microsoft.com/javascript/api/@azure-rest/arm-network?view=azure-node-preview)\n- [Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- Node.js version 14.x.x or higher\n\n### Prerequisites\n\n- You must have an [Azure subscription](https://azure.microsoft.com/free/) to use this package.\n\n### Install the `@azure-rest/arm-network` package\n\nInstall the Azure NetworkManagement client REST client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure-rest/arm-network\n```\n\n### Create and authenticate a `NetworkManagementClient`\n\nTo use an [Azure Active Directory (AAD) token credential](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token),\nprovide an instance of the desired credential type obtained from the\n[@azure/identity](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#credentials) library.\n\nTo authenticate with AAD, you must first `npm` install [`@azure/identity`](https://www.npmjs.com/package/@azure/identity) \n\nAfter setup, you can choose which type of [credential](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#credentials) from `@azure/identity` to use.\nAs an example, [DefaultAzureCredential](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential)\ncan be used to authenticate the client.\n\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables:\nAZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET\n\nUse the returned token credential to authenticate the client:\n\n```typescript\nimport NetworkManagementClient from \"@azure-rest/arm-network\";\nimport { DefaultAzureCredential } from \"@azure/identity\";\nconst credential = new DefaultAzureCredential();\nconst client = NetworkManagementClient(credential);\n```\n\n## Examples\n\nThe following section shows you how to initialize and authenticate your client, then list all of your Virtual Networks within a resource group.\n### List virtual networks within a resource group\n\n```typescript\nimport createNetworkManagementClient, {\n  VirtualNetworksListParameters,\n  paginate\n} from \"@azure-rest/arm-network\";\nimport { DefaultAzureCredential } from \"@azure/identity\";\nimport * as dotenv from \"dotenv\";\ndotenv.config();\nasync function listVirtualNetworksInResourceGroup() {\n  const credential = new DefaultAzureCredential();\n  const client = createNetworkManagementClient(credential);\n  const subscriptionId = \"\";\n  const resourceGroupName = \"rg1\";\n  const options: VirtualNetworksListParameters = {\n    queryParameters: { \"api-version\": \"2022-05-01\" }\n  };\n  const initialResponse = await client\n    .path(\n      \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks\",\n      subscriptionId,\n      resourceGroupName\n    )\n    .get(options);\n  const pageData = paginate(client, initialResponse);\n  const result = [];\n  for await (const item of pageData) {\n    result.push(item);\n  }\n  console.log(result);\n}\n\nlistVirtualNetworksInResourceGroup().catch(console.error);\n```\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nimport { setLogLevel } from \"@azure/logger\";\n\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n",
        "repo_name": "network/arm-network-rest",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/network/arm-network-rest",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure NetworkManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure NetworkManagement client.\n\nNetwork Client\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/network/arm-network) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-network) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-network) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-network` package\n\nInstall the Azure NetworkManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-network\n```\n\n### Create and authenticate a `NetworkManagementClient`\n\nTo create a client object to access the Azure NetworkManagement API, you will need the `endpoint` of your Azure NetworkManagement resource and a `credential`. The Azure NetworkManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure NetworkManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure NetworkManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { NetworkManagementClient } = require(\"@azure/arm-network\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new NetworkManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new NetworkManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### NetworkManagementClient\n\n`NetworkManagementClient` is the primary interface for developers using the Azure NetworkManagement client library. Explore the methods on this client object to understand the different features of the Azure NetworkManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fnetwork%2Farm-network%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "network/arm-network",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/network/arm-network",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure NetworkCloud client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure NetworkCloud client.\n\nThe Network Cloud APIs provide management of the on-premises clusters and their resources, such as, racks, bare metal hosts, virtual machines, workload networks and more.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/networkcloud/arm-networkcloud) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-networkcloud) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-networkcloud?view=azure-node-preview) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-networkcloud` package\n\nInstall the Azure NetworkCloud client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-networkcloud\n```\n\n### Create and authenticate a `NetworkCloud`\n\nTo create a client object to access the Azure NetworkCloud API, you will need the `endpoint` of your Azure NetworkCloud resource and a `credential`. The Azure NetworkCloud client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure NetworkCloud resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure NetworkCloud** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { NetworkCloud } = require(\"@azure/arm-networkcloud\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new NetworkCloud(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new NetworkCloud(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### NetworkCloud\n\n`NetworkCloud` is the primary interface for developers using the Azure NetworkCloud client library. Explore the methods on this client object to understand the different features of the Azure NetworkCloud service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fnetworkcloud%2Farm-networkcloud%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "networkcloud/arm-networkcloud",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/networkcloud/arm-networkcloud",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# AzureTrafficCollector client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for AzureTrafficCollector client.\n\nAzure Traffic Collector service\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/networkfunction/arm-networkfunction) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-networkfunction) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-networkfunction) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-networkfunction` package\n\nInstall the AzureTrafficCollector client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-networkfunction\n```\n\n### Create and authenticate a `AzureTrafficCollectorClient`\n\nTo create a client object to access the AzureTrafficCollector API, you will need the `endpoint` of your AzureTrafficCollector resource and a `credential`. The AzureTrafficCollector client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your AzureTrafficCollector resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to AzureTrafficCollector** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { AzureTrafficCollectorClient } = require(\"@azure/arm-networkfunction\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new AzureTrafficCollectorClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new AzureTrafficCollectorClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### AzureTrafficCollectorClient\n\n`AzureTrafficCollectorClient` is the primary interface for developers using the AzureTrafficCollector client library. Explore the methods on this client object to understand the different features of the AzureTrafficCollector service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fnetworkfunction%2Farm-networkfunction%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "networkfunction/arm-networkfunction",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/networkfunction/arm-networkfunction",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure NewRelicObservability client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure NewRelicObservability client.\n\n\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/newrelicobservability/arm-newrelicobservability) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-newrelicobservability) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-newrelicobservability) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-newrelicobservability` package\n\nInstall the Azure NewRelicObservability client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-newrelicobservability\n```\n\n### Create and authenticate a `NewRelicObservability`\n\nTo create a client object to access the Azure NewRelicObservability API, you will need the `endpoint` of your Azure NewRelicObservability resource and a `credential`. The Azure NewRelicObservability client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure NewRelicObservability resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure NewRelicObservability** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { NewRelicObservability } = require(\"@azure/arm-newrelicobservability\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new NewRelicObservability(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new NewRelicObservability(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### NewRelicObservability\n\n`NewRelicObservability` is the primary interface for developers using the Azure NewRelicObservability client library. Explore the methods on this client object to understand the different features of the Azure NewRelicObservability service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fnewrelicobservability%2Farm-newrelicobservability%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "newrelicobservability/arm-newrelicobservability",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/newrelicobservability/arm-newrelicobservability",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure NginxManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure NginxManagement client.\n\n\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/nginx/arm-nginx) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-nginx) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-nginx) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-nginx` package\n\nInstall the Azure NginxManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-nginx\n```\n\n### Create and authenticate a `NginxManagementClient`\n\nTo create a client object to access the Azure NginxManagement API, you will need the `endpoint` of your Azure NginxManagement resource and a `credential`. The Azure NginxManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure NginxManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure NginxManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { NginxManagementClient } = require(\"@azure/arm-nginx\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new NginxManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new NginxManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### NginxManagementClient\n\n`NginxManagementClient` is the primary interface for developers using the Azure NginxManagement client library. Explore the methods on this client object to understand the different features of the Azure NginxManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fnginx%2Farm-nginx%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "nginx/arm-nginx",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/nginx/arm-nginx",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure NotificationHubsManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure NotificationHubsManagement client.\n\nAzure NotificationHub client\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/notificationhubs/arm-notificationhubs) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-notificationhubs) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-notificationhubs) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-notificationhubs` package\n\nInstall the Azure NotificationHubsManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-notificationhubs\n```\n\n### Create and authenticate a `NotificationHubsManagementClient`\n\nTo create a client object to access the Azure NotificationHubsManagement API, you will need the `endpoint` of your Azure NotificationHubsManagement resource and a `credential`. The Azure NotificationHubsManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure NotificationHubsManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure NotificationHubsManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { NotificationHubsManagementClient } = require(\"@azure/arm-notificationhubs\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new NotificationHubsManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new NotificationHubsManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### NotificationHubsManagementClient\n\n`NotificationHubsManagementClient` is the primary interface for developers using the Azure NotificationHubsManagement client library. Explore the methods on this client object to understand the different features of the Azure NotificationHubsManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fnotificationhubs%2Farm-notificationhubs%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "notificationhubs/arm-notificationhubs",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/notificationhubs/arm-notificationhubs",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Notification Hubs SDK for JavaScript\n\nAzure Notification Hubs provide a scaled-out push engine that enables you to send notifications to any platform (Apple, Amazon Kindle, Android, Baidu, Xiaomi, Web, Windows, etc.) from any back-end (cloud or on-premises). Notification Hubs works well for both enterprise and consumer scenarios. Here are a few example scenarios:\n\n- Send breaking news notifications to millions with low latency.\n- Send location-based coupons to interested user segments.\n- Send event-related notifications to users or groups for media/sports/finance/gaming applications.\n- Push promotional contents to applications to engage and market to customers.\n- Notify users of enterprise events such as new messages and work items.\n- Send codes for multi-factor authentication.\n\nKey links:\n\n- [Source code](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/notificationhubs/notification-hubs/)\n- [Package (npm)](https://www.npmjs.com/package/@azure/notification-hubs)\n- [Product documentation](https://docs.microsoft.com/azure/notification-hubs/)\n- [Samples](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/notificationhubs/notification-hubs/samples-dev)\n\n**NOTE**: If you are coming from using the `azure-sb` package, see the [migration guide to move from azure-sb to @azure/notification-hubs](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/notificationhubs/notification-hubs/migrationguide.md)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge, and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Install the package\n\n```bash\nnpm install @azure/notification-hubs\n```\n\n### Prerequisites\n\n- An [Azure Subscription](https://azure.microsoft.com)\n- An [App Notification Hubs](https://docs.microsoft.com/azure/notification-hubs/) resource.\n\n### Create an Azure Notification Hubs resource\n\nAn Azure Notification Hub can be created using the following methods:\n\n1. [Azure Portal](https://docs.microsoft.com/azure/notification-hubs/create-notification-hub-portal)\n2. [Azure CLI](https://docs.microsoft.com/azure/notification-hubs/create-notification-hub-azure-cli)\n3. [Bicep](https://docs.microsoft.com/azure/notification-hubs/create-notification-hub-bicep)\n4. [ARM Template](https://docs.microsoft.com/azure/notification-hubs/create-notification-hub-template)\n\nOnce created, the Notification Hub can be configured using the [Azure Portal or Azure CLI](https://docs.microsoft.com/azure/notification-hubs/configure-notification-hub-portal-pns-settings?tabs=azure-portal).\n\n### Importing the Client\n\nThis SDK for JavaScript offers two ways of interacting with Azure Notification Hubs, either through the class-based approach, or with a modular design approach.  The class-based approach is consistent across all packages to create a client and then interact with the methods on the client.\n\n```typescript\nimport {\n  NotificationHubsClient,\n  createAppleInstallation\n} from \"@azure/notification-hubs\";\n\nconst client = new NotificationHubsClient(\"<connection string>\", \"<hub name>\");\n\nconst installation = createAppleInstallation({\n  installationId: \"<installation-id>\",\n  pushChannel: \"<push-channel>\",\n  tags: [\"likes_javascript\"],\n});\n\nconst result = await client.createOrUpdateInstallation(installation);\n```\n\nThe modular approach allows the developer to pick and choose which functions to import as each method is exposed individually.  This approach uses subpath-exports with ES-Modules to expose the methods via direct imports.  With the individual exports, this creates a better tree-shaking experience and smaller bundle sizes that the developer can take advantage of.\n\nNote that creating a client is exposed through the `\"@azure/notification-hubs/api\"` subpath and all client methods are exposed through the `\"@azure/notification-hubs/api\"` subpath.  Each function exported takes the `client` as the first parameter and the rest of the parameters remain unchanged.\n\nThe following subpaths are exposed:\n\n- `@azure/notification-hubs/api` - The main entry point for the client via `createClientContext` and client methods such as `getInstallation` or `sendNotification`\n- `@azure/notification-hubs/models` - The Notification Hubs models and factory methods.\n\nThe above code snippet then becomes the following:\n\n```typescript\nimport { createClientContext, createOrUpdateInstallation } from \"@azure/notification-hubs/api\";\nimport { createAppleInstallation } from \"@azure/notification-hubs/models\";\n\nconst context = createClientContext(\"<connection string>\", \"<hub name>\");\n\nconst installation = createAppleInstallation({\n  installationId: \"<installation-id>\",\n  pushChannel: \"<push-channel>\",\n  tags: [\"likes_javascript\"],\n});\n\nconst result = await createOrUpdateInstallation(context, installation);\n```\n\n### Authenticate the client\n\nInteraction with an Azure Notification Hub starts with the `NotificationHubsClient` which supports [Shared Access Signature connection strings](https://docs.microsoft.com/azure/notification-hubs/notification-hubs-push-notification-security).  This includes the following permission levels: **Listen**, **Manage**, **Send**.\n\nListen allows for a client to register itself via the Registration and Installations API. Send allows for the client to send notifications to devices using the send APIs. Finally, Manage allows the user to do Registration and Installation management, such as queries.\n\nA new `NotificationHubsClient` client can be created using the constructor with the connection string and Notification Hub name.\n\n```typescript\nimport { NotificationHubsClient } from \"@azure/notification-hubs\";\n\nconst client = new NotificationHubsClient(\"<connection string>\", \"<hub name>\");\n```\n\nUsing the modular approach, the `createClientContext` can be imported via the `\"@azure/notification-hubs/api\"` subpath.\n\n```typescript\nimport { createClientContext } from \"@azure/notification-hubs/api\";\n\nconst context = createClientContext(\"<connection string>\", \"<hub name>\");\n```\n\n## Key concepts\n\nOnce the `NotificationHubClient` has been initialized, the following concepts can be explored.\n\n- Device Management via Installations and RegistrationDescriptions\n- Send Notifications to Devices\n\n### Device Management\n\nDevice management is a core concept to Notification Hubs to be able to store the unique identifier from the native Platform Notification Service (PNS) such as APNs or Firebase, and associated metadata such as tags used for sending push notifications to audiences.  This is done with two APIs, the Installation API which is the newer and preferred mechanism, and Registrations.\n\n#### Installations API\n\nInstallations are a newer and native JSON approach to device management that contains additional properties such as an installation ID and user ID which can be used for sending to audiences.  The installations API has a few advantages over the existing Registration APIs in the following ways:\n\n- Fully idempotent API so calling create on the installation, so an operation can be retried without worries about duplications.\n- Support for `userId` and `installationId` properties which can be then used in tag expressions such as `$InstallationId:{myInstallId}` and `$UserId:{bob@contoso.com}`.\n- Templates are now part of the installation instead of a separate registration and can be reference by name as a tag for sending.\n- Partial updates are supported through the [JSON Patch Standard](https://tools.ietf.org/html/rfc6902), which allows to add tags and change other data without having to first query the installation.\n\nInstallations can be created through the `createOrUpdateInstallation` method such as the following:\n\n```typescript\nimport { NotificationHubsClient, createAppleInstallation } from \"@azure/notification-hubs\";\nimport { v4 as uuid } from \"uuid\";\n\nconst client = new NotificationHubsClient(\"<connection string>\", \"<hub name>\");\n\n// Create an installation for APNs\nlet installation = createAppleInstallation({\n  installationId: uuid(), // Must be unique\n  pushChannel: \"00fc13adff785122b4ad28809a3420982341241421348097878e577c991de8f0\", // PNS specific handle\n  tags: [\"likes_hockey\", \"likes_football\"],\n});\n\ninstallation = await client.createOrUpdateInstallation(installation);\n```\n\nUsing the modular approach, the code would be as follows:\n\n```typescript\nimport { createClientContext, createOrUpdateInstallation } from \"@azure/notification-hubs/api\";\nimport { createAppleInstallation } from \"@azure/notification-hubs/models\";\nimport { v4 as uuid } from \"uuid\";\n\nconst context = createClientContext(\"<connection string>\", \"<hub name>\");\n\n// Create an installation for APNs\nlet installation = createAppleInstallation({\n  installationId: uuid(), // Must be unique\n  pushChannel: \"00fc13adff785122b4ad28809a3420982341241421348097878e577c991de8f0\", // PNS specific handle\n  tags: [\"likes_hockey\", \"likes_football\"],\n});\n\ninstallation = await createOrUpdateInstallation(context, installation);\n```\n\nAn update to an installation can be made through the JSON Patch schema such as adding a tag and a user ID using the `updateInstallation` method.\n\n```typescript\nimport { NotificationHubsClient, JsonPatch } from \"@azure/notification-hubs\";\n\nconst client = new NotificationHubsClient(\"<connection string>\", \"<hub name>\");\n\nconst installationId = \"<unique installation ID>\";\n\nconst updates: JsonPatch[] = [\n  { op: \"add\", path: \"/tags\", value: \"likes_baseball\" },\n  { op: \"add\", path: \"/userId\", value: \"bob@contoso.com\" },\n];\n\nconst installation = await client.updateInstallation(installationId, updates);\n```\n\nUsing the modular approach, the code would be as follows:\n\n```typescript\nimport { createClientContext, updateInstallation } from \"@azure/notification-hubs/api\";\nimport { JsonPatch } from \"@azure/notification-hubs/models\";\n\nconst context = createClientContext(\"<connection string>\", \"<hub name>\");\n\nconst installationId = \"<unique installation ID>\";\n\nconst updates: JsonPatch[] = [\n  { op: \"add\", path: \"/tags\", value: \"likes_baseball\" },\n  { op: \"add\", path: \"/userId\", value: \"bob@contoso.com\" },\n];\n\nconst installation = await updateInstallation(context, installationId, updates);\n```\n\nTo retrieve an existing installation, use the `getInstallation` method with your existing unique installation ID.\n\n```typescript\nimport { NotificationHubsClient } from \"@azure/notification-hubs\";\n\nconst client = new NotificationHubsClient(\"<connection string>\", \"<hub name>\");\n\nconst installationId = \"<unique installation ID>\";\n\nconst installation = client.getInstallation(installationId);\n```\n\nUsing the modular approach, the code would be as follows:\n\n```typescript\nimport { createClientContext, getInstallation } from \"@azure/notification-hubs/api\";\n\nconst context = createClientContext(\"<connection string>\", \"<hub name>\");\n\nconst installationId = \"<unique installation ID>\";\n\nconst installation = getInstallation(context, installationId);\n```\n\n#### Registrations API\n\nA registration is associated with a PNS just as the installation above, with the unique device identifier from the PNS, and associated tags.  Templates registrations are a way of creating pre-defined body templates which can then be customized at send time with properties to fill in for the message.  For more information about templates, see [Templates documentation](https://docs.microsoft.com/azure/notification-hubs/notification-hubs-templates-cross-platform-push-messages).\n\nAn installation may be created in one of two ways, first by getting a registration ID from the server using `getInstallationId` and then `createOrUpdateRegistration` or via the `createRegistration` method.\n\n```typescript\nimport {\n  NotificationHubsClient,\n  createAppleRegistrationDescription,\n} from \"@azure/notification-hubs\";\n\nconst client = new NotificationHubsClient(\"<connection string>\", \"<hub name>\");\n\nlet registration = createAppleRegistrationDescription({\n  deviceToken: \"00fc13adff785122b4ad28809a3420982341241421348097878e577c991de8f0\",\n  tags: [\"likes_hockey\", \"likes_football\"],\n});\n\nregistration = await client.createRegistration(registration);\n\nconsole.log(`New Registration ID: ${registration.registrationId}`);\n```\n\nUsing the modular approach, the code would be as follows:\n\n```typescript\nimport { createClientContext, createRegistration } from \"@azure/notification-hubs/api\";\nimport { createAppleRegistrationDescription } from \"@azure/notification-hubs/models\";\n\nconst context = createClientContext(\"<connection string>\", \"<hub name>\");\n\nlet registration = createAppleRegistrationDescription({\n  deviceToken: \"00fc13adff785122b4ad28809a3420982341241421348097878e577c991de8f0\",\n  tags: [\"likes_hockey\", \"likes_football\"],\n});\n\nregistration = await createRegistration(context, registration);\n\nconsole.log(`New Registration ID: ${registration.registrationId}`);\n```\n\nUpdates can be done via the `updateRegistration` method but unlike installations, does not support incremental updates.  Querying for an existing registration can be done with the `getRegistration` method.\n\n```typescript\nimport { NotificationHubsClient } from \"@azure/notification-hubs\";\n\nconst client = new NotificationHubsClient(\"<connection string>\", \"<hub name>\");\n\nconst registrationId = \"<unique Registration ID>\";\n\nlet registration = await client.getRegistration(registrationId);\n\nregistration.tags.push(\"likes_sports\");\n\nregistration = await client.updateRegistration(registration);\n```\n\nUsing the modular approach, the code would be as follows:\n\n```typescript\nimport {\n  createClientContext,\n  getRegistration,\n  updateRegistration\n} from \"@azure/notification-hubs/api\";\n\nconst context = createClientContext(\"<connection string>\", \"<hub name>\");\n\nconst registrationId = \"<unique Registration ID>\";\n\nlet registration = await getRegistration(context, registrationId);\n\nregistration.tags.push(\"likes_sports\");\n\nregistration = await updateRegistration(context, registration);\n```\n\nRegistrations, unlike installations, can be queried to get all registrations, matching registrations to a condition, or by tags.  Registrations can be queried using the `listRegistrations`, `listRegistrationsByChannel` and `listRegistrationsByTag` method.  All methods support limiting via the `top` option and support asynchronous paging.\n\n```typescript\nimport { NotificationHubsClient } from \"@azure/notification-hubs/api\";\n\nconst client = new NotificationHubsClient(\"<connection string>\", \"<hub name>\");\n\nconst registrations = await client.listRegistrationsByTag(\"likes_hockey\");\n\nlet page = 0;\nfor await (const pages of registrations.byPage()) {\n  console.log(`Page number ${page++}`);\n  for (const item of pages) {\n    console.log(JSON.stringify(item, null, 2));\n  }\n}\n```\n\nUsing the modular approach, the code would be as follows:\n\n```typescript\nimport { createClientContext, listRegistrationsByTag } from \"@azure/notification-hubs/api\";\n\nconst context = createClientContext(\"<connection string>\", \"<hub name>\");\n\nconst registrations = await listRegistrationsByTag(context, \"likes_hockey\");\n\nlet page = 0;\nfor await (const pages of registrations.byPage()) {\n  console.log(`Page number ${page++}`);\n  for (const item of pages) {\n    console.log(JSON.stringify(item, null, 2));\n  }\n}\n```\n\n### Send Operations\n\nNotification Hubs supports sending notifications to devices either directly using the unique PNS provided identifier, using tags for audience send, or a general broadcast to all devices.  Using the Standard SKU and above, [scheduled send](https://docs.microsoft.com/azure/notification-hubs/notification-hubs-send-push-notifications-scheduled) allows the user to schedule notifications up to seven days in advance.  All send operations return a Tracking ID and Correlation ID which can be used for Notification Hubs support cases.  With the Standard SKU and above, a Notification ID is also returned which can be used to get notification telemetry via the `getNotificationOutcomeDetails` method.\n\nFor debugging purposes, the `enableTestSend` options can be set to `true` which gets immediate feedback from the PNS on the `sendNotification` method, however, is not supported in production scenarios.  This is not supported on the scheduled send methods.\n\nRaw JSON or XML strings can be sent to the send or scheduled send methods, or the notification builders can be used which helps construct messages per PNS such as APNs, Firebase, Baidu, ADM and WNS.  These builders will build the native message format so there is no guessing about which fields are available for each PNS.\n\n```typescript\n// Using the class-based approach\nimport { createAppleNotificationBody } from \"@azure/notification-hubs\";\n\n// Using the modular approach\nimport { createAppleNotification, createAppleNotificationBody } from \"@azure/notification-hubs/models\";\n\nconst apnsBody = createAppleNotificationBody({\n  alert: {\n    title: \"Notification Title\",\n    subtitle: \"Notification Subtitle\",\n    body: \"Notification body goes here\",\n  },\n  sound: \"default\",\n  interruptionLevel: \"time-sensitive\",\n});\n\n// Send the message using the modular approach\nconst notification = createAppleNotification({\n  body: apnsBody\n})\n\nconst result = await sendNotification(context, notification);\n```\n\n#### Broadcast Send\n\nNotification Hubs can be used to send notifications to all registered devices per platform using broadcast send through the `sendNotification` method.\n\n```typescript\nimport {\n  NotificationHubsClient,\n  createAppleNotification,\n} from \"@azure/notification-hubs/api\";\n\nconst context = createClientContext(connectionString, hubName);\n\nconst messageBody = `{ \"aps\" : { \"alert\" : \"Hello\" } }`;\n\nconst message = createAppleNotification({\n  body: messageBody,\n  headers: {\n    \"apns-priority\": \"10\",\n    \"apns-push-type\": \"alert\",\n  },\n});\n\nconst result = await client.sendNotification(message);\n\nconsole.log(`Tracking ID: ${result.trackingId}`);\nconsole.log(`Correlation ID: ${result.correlationId}`);\n\n// Only available in Standard SKU and above\nif (result.notificationId) {\n  console.log(`Notification ID: ${result.notificationId}`);\n}\n```\n\nUsing the modular approach, the code would be as follows:\n\n```typescript\nimport { createClientContext, sendNotification } from \"@azure/notification-hubs/api\";\nimport { createAppleNotification } from \"@azure/notification-hubs/models\";\n\nconst context = createClientContext(connectionString, hubName);\n\nconst messageBody = `{ \"aps\" : { \"alert\" : \"Hello\" } }`;\n\nconst message = createAppleNotification({\n  body: messageBody,\n  headers: {\n    \"apns-priority\": \"10\",\n    \"apns-push-type\": \"alert\",\n  },\n});\n\nconst result = await sendNotification(context, message);\n\nconsole.log(`Tracking ID: ${result.trackingId}`);\nconsole.log(`Correlation ID: ${result.correlationId}`);\n\n// Only available in Standard SKU and above\nif (result.notificationId) {\n  console.log(`Notification ID: ${result.notificationId}`);\n}\n```\n\n#### Direct Send\n\nTo send directly a device, the user can send using the platform provided unique identifier such as APNs device token by calling the `sendNotification` method with a `deviceHandle` parameter.\n\n```typescript\nimport {\n  NotificationHubsClient,\n  createAppleNotification,\n} from \"@azure/notification-hubs\";\n\nconst client = new NotificationHubsClient(connectionString, hubName);\n\nconst deviceHandle = \"00fc13adff785122b4ad28809a3420982341241421348097878e577c991de8f0\";\nconst messageBody = `{ \"aps\" : { \"alert\" : \"Hello\" } }`;\n\nconst message = createAppleNotification({\n  body: messageBody,\n  headers: {\n    \"apns-priority\": \"10\",\n    \"apns-push-type\": \"alert\",\n  },\n});\n\nconst result = await client.sendNotification(message, { deviceHandle });\n\nconsole.log(`Tracking ID: ${result.trackingId}`);\nconsole.log(`Correlation ID: ${result.correlationId}`);\n\n// Only available in Standard SKU and above\nif (result.notificationId) {\n  console.log(`Notification ID: ${result.notificationId}`);\n}\n```\n\nUsing the modular approach, the code would be as follows:\n\n```typescript\nimport { createClientContext, sendDirectNotification } from \"@azure/notification-hubs/api\";\nimport { createAppleNotification } from \"@azure/notification-hubs/models\";\n\nconst context = createClientContext(connectionString, hubName);\n\nconst deviceHandle = \"00fc13adff785122b4ad28809a3420982341241421348097878e577c991de8f0\";\nconst messageBody = `{ \"aps\" : { \"alert\" : \"Hello\" } }`;\n\nconst message = createAppleNotification({\n  body: messageBody,\n  headers: {\n    \"apns-priority\": \"10\",\n    \"apns-push-type\": \"alert\",\n  },\n});\n\nconst result = await sendNotification(context, message, { deviceHandle });\n\nconsole.log(`Tracking ID: ${result.trackingId}`);\nconsole.log(`Correlation ID: ${result.correlationId}`);\n\n// Only available in Standard SKU and above\nif (result.notificationId) {\n  console.log(`Notification ID: ${result.notificationId}`);\n}\n```\n\n#### Audience Send\n\nIn addition to targeting a single device, a user can target multiple devices using tags.  These tags can be supplied as a list of tags, which then creates a tag expression to match registered devices, or via a tag expression which can then use Boolean logic to target the right audience.  For more information about tags and tags expressions, see [Routing and Tag Expressions](https://docs.microsoft.com/azure/notification-hubs/notification-hubs-tags-segment-push-message).\n\nIf you wish to create a tag expression from an array of tags, there is a Tag Expression Builder available with the `createTagExpression` method which is exposed at the top level import or `@azure/notification-hubs/models/tagExpressionBuilder` modular import which creates an \"or tag expression\" from the tags.\n\n```typescript\n// Top level import\nimport { createTagExpression } from \"@azure/notification-hubs\";\n\n// Modular import\nimport { createTagExpression } from \"@azure/notification-hubs/models\";\n\nconst tags = [\"likes_football\", \"likes_hockey\"];\nconst tagExpression = createTagExpression(tags);\n\nconsole.log(tagExpression);\n// likes_football||likes_hockey\n```\n\nTag expression messages can be sent using the following code:\n\n```typescript\nimport {\n  NotificationHubsClient,\n  createAppleNotification,\n} from \"@azure/notification-hubs\";\n\nconst client = new NotificationHubsClient(\"<connection string>\", \"<hub name>\");\n\nconst tagExpression = \"likes_hockey && likes_football\";\nconst messageBody = `{ \"aps\" : { \"alert\" : \"Hello\" } }`;\n\nconst notification = createAppleNotification({\n  body: messageBody,\n  headers: {\n    \"apns-priority\": \"10\",\n    \"apns-push-type\": \"alert\",\n  },\n});\n\nconst result = await client.sendNotification(notification, { tagExpression });\n\nconsole.log(`Tracking ID: ${result.trackingId}`);\nconsole.log(`Correlation ID: ${result.correlationId}`);\n\n// Only available in Standard SKU and above\nif (result.notificationId) {\n  console.log(`Notification ID: ${result.notificationId}`);\n}\n```\n\nUsing the modular approach, the code would be as follows:\n\n```typescript\nimport { createClientContext, sendNotification } from \"@azure/notification-hubs/api\";\nimport { createAppleNotification } from \"@azure/notification-hubs/models\";\n\nconst context = createClientContext(\"<connection string>\", \"<hub name>\");\n\nconst tagExpression = \"likes_hockey && likes_football\";\nconst messageBody = `{ \"aps\" : { \"alert\" : \"Hello\" } }`;\n\nconst notification = createAppleNotification({\n  body: messageBody,\n  headers: {\n    \"apns-priority\": \"10\",\n    \"apns-push-type\": \"alert\",\n  },\n});\n\nconst result = await sendNotification(context, notification, { tagExpression });\n\nconsole.log(`Tracking ID: ${result.trackingId}`);\nconsole.log(`Correlation ID: ${result.correlationId}`);\n\n// Only available in Standard SKU and above\nif (result.notificationId) {\n  console.log(`Notification ID: ${result.notificationId}`);\n}\n```\n\n#### Scheduled Send\n\nPush notifications can be scheduled up to seven days in advance with Standard SKU namespaces and above using the `scheduleBroadcastNotification` method to send to devices with tags or a general broadcast.  This returns a notification ID which can be then used to cancel if necessary via the `cancelScheduledNotification` method.\n\n```typescript\nimport {\n  NotificationHubsClient,\n  createAppleNotification,\n} from \"@azure/notification-hubs\";\n\nconst client = new NotificationHubsClient(\"<connection string>\", \"<hub name>\");\n\nconst tagExpression = \"likes_hockey && likes_football\";\nconst messageBody = `{ \"aps\" : { \"alert\" : \"Hello\" } }`;\n\n// Schedule 8 hours from now\nconst scheduledTime = new Date(Date.now() + (8 * 60 * 60 * 1000));\n\nconst message = createAppleNotification({\n  body: messageBody,\n  headers: {\n    \"apns-priority\": \"10\",\n    \"apns-push-type\": \"alert\",\n  },\n});\n\nconst result = await client.scheduleNotification(scheduledTime, message, { tagExpression });\n\nconsole.log(`Tracking ID: ${result.trackingId}`);\nconsole.log(`Correlation ID: ${result.correlationId}`);\n\n// Can be used to cancel via the cancelScheduledSend method\nconsole.log(`Notification ID: ${result.notificationId}`);\n```\n\nUsing the modular approach, the code would be as follows:\n\n```typescript\nimport { createClientContext, scheduleNotification } from \"@azure/notification-hubs/api\";\nimport { createAppleNotification } from \"@azure/notification-hubs/models\";\n\nconst context = createClientContext(\"<connection string>\", \"<hub name>\");\n\nconst tagExpression = \"likes_hockey && likes_football\";\nconst messageBody = `{ \"aps\" : { \"alert\" : \"Hello\" } }`;\n\n// Schedule 8 hours from now\nconst scheduledTime = new Date(Date.now() + (8 * 60 * 60 * 1000));\n\nconst message = createAppleNotification({\n  body: messageBody,\n  headers: {\n    \"apns-priority\": \"10\",\n    \"apns-push-type\": \"alert\",\n  },\n});\n\nconst result = await scheduleNotification(context, scheduledTime, message, { tagExpression });\n\nconsole.log(`Tracking ID: ${result.trackingId}`);\nconsole.log(`Correlation ID: ${result.correlationId}`);\n\n// Can be used to cancel via the cancelScheduledSend method\nconsole.log(`Notification ID: ${result.notificationId}`);\n```\n\n## Troubleshooting\n\n## React Native Support\n\nReact Native currently does not have support for [`URLSearchParams`] which is used by the Azure Notification Hubs SDK.  In order to use the SDK in React Native, you will need to install the [`url-search-params-polyfill`](https://www.npmjs.com/package/url-search-params-polyfill) package and import it before using the SDK.\n\n```typescript\nimport 'url-search-params-polyfill';\n```\n\nWe also need to provide polyfill for `TextEncoder` API and async iterator API. Please see our [React Native sample with Expo](https://github.com/Azure/azure-sdk-for-js/blob/main/samples/frameworks/react-native/appconfigBasic/README.md#add-polyfills) for more details.\n\n### Diagnose Dropped Notifications\n\nAzure Notification Hubs has a complete guide to troubleshooting problems with dropped notifications in the [Diagnose dropped notifications in Azure Notification Hubs Guide](https://docs.microsoft.com/azure/notification-hubs/notification-hubs-push-notification-fixer).\n\n[Test send](https://docs.microsoft.com/azure/notification-hubs/notification-hubs-push-notification-fixer#enabletestsend-property) is supported supported in the `sendNotification` method with the `enableTestSend` option:\n\n```typescript\n// Using the client\nconst result = await client.sendNotification(notification, { tags, enableTestSend: true });\n\n// Using the modular approach\nconst result = await sendNotification(context, notification, { tags, enableTestSend: true });\n```\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\n\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nThe following samples show you the various ways you can interact with Azure Notification Hubs:\n\n**Device Management:**\n\n- Installations API\n  - [Create Or Update Installation](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/notificationhubs/notification-hubs/samples-dev/createInstallation.ts)\n  - [Update Installation](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/notificationhubs/notification-hubs/samples-dev/updateInstallation.ts)\n- Registration API\n  - [Create Registration](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/notificationhubs/notification-hubs/samples-dev/createRegistration.ts)s\n  - [Create Or Update Registration](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/notificationhubs/notification-hubs/samples-dev/createOrUpdateRegistration.ts)\n  - [Update Registration](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/notificationhubs/notification-hubs/samples-dev/updateRegistration.ts)\n  - [List Registrations](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/notificationhubs/notification-hubs/samples-dev/listRegistrations.ts)\n  - [List Registration By Tag](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/notificationhubs/notification-hubs/samples-dev/listRegistrationsByTag.ts)\n\n**Send Operations:**\n\n- [Broadcast Send](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/notificationhubs/notification-hubs/samples-dev/sendBroadcastNotification.ts)\n- [Direct Send](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/notificationhubs/notification-hubs/samples-dev/sendDirectNotification.ts)\n- [Audience Send With Tags List](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/notificationhubs/notification-hubs/samples-dev/sendTagsList.ts)\n- [Audience Send With Tag Expression](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/notificationhubs/notification-hubs/samples-dev/sendTagExpression.ts)\n- [Scheduled Broadcast Send](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/notificationhubs/notification-hubs/samples-dev/scheduledSendBroadcastNotification.ts)\n- [Scheduled Send](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/notificationhubs/notification-hubs/samples-dev/scheduledSendNotification.ts)\n\n**Management Operations:**\n\n- [Export Registrations](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/notificationhubs/notification-hubs/samples-dev/exportRegistrationsJob.ts)\n- [Import Registrations](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/notificationhubs/notification-hubs/samples-dev/importRegistrationsJob.ts)\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\nThis module's tests are a mixture of live and unit tests, which require you to have an Azure Notification Hubs instance. To execute the tests you'll need to run:\n\n1. `rush update`\n2. `rush build -t @azure/notification-hubs`\n3. Create a .env file with these contents in the `sdk\\notificationhubs\\notification-hubs` folder:\n   `NOTIFICATIONHUBS_CONNECTION_STRING=connection string for your Notification Hubs instance`\n   `NOTIFICATION_HUB_NAME=Notification Hub name`\n4. `cd sdk\\notificationhubs\\notification-hubs`\n5. `npm run test`.\n\nView our [tests](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/notificationhubs/notification-hubs/test)\nfolder for more details.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n- [Azure Notification Hubs](https://docs.microsoft.com/azure/notification-hubs/notification-hubs-push-notification-overview)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%notificationhubs%2Fnotification-hubs%2FREADME.png)\n",
        "repo_name": "notificationhubs/notification-hubs",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/notificationhubs/notification-hubs",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Open Energy Platform Management client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure Open Energy Platform Management client.\n\nOpen Energy Platform Management Service APIs\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/oep/arm-oep) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-oep) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-oep?view=azure-node-preview) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-oep` package\n\nInstall the Azure Open Energy Platform Management client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-oep\n```\n\n### Create and authenticate a `OpenEnergyPlatformManagementServiceAPIs`\n\nTo create a client object to access the Azure Open Energy Platform Management API, you will need the `endpoint` of your Azure Open Energy Platform Management resource and a `credential`. The Azure Open Energy Platform Management client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure Open Energy Platform Management resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure Open Energy Platform Management** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { OpenEnergyPlatformManagementServiceAPIs } = require(\"@azure/arm-oep\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new OpenEnergyPlatformManagementServiceAPIs(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new OpenEnergyPlatformManagementServiceAPIs(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### OpenEnergyPlatformManagementServiceAPIs\n\n`OpenEnergyPlatformManagementServiceAPIs` is the primary interface for developers using the Azure Open Energy Platform Management client library. Explore the methods on this client object to understand the different features of the Azure Open Energy Platform Management service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Foep%2Farm-oep%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "oep/arm-oep",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/oep/arm-oep",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure OpenAI client library for JavaScript\n\nThe Azure OpenAI client library for JavaScript is an adaptation of OpenAI's REST APIs that provides an idiomatic interface\nand rich integration with the rest of the Azure SDK ecosystem. It can connect to Azure OpenAI resources *or* to the\nnon-Azure OpenAI inference endpoint, making it a great choice for even non-Azure OpenAI development.\n\nUse the client library for Azure OpenAI to:\n\n* [Create a completion for text][msdocs_openai_completion]\n* [Create a chat completion with ChatGPT][msdocs_openai_chat_completion]\n* [Create a text embedding for comparisons][msdocs_openai_embedding]\n\nAzure OpenAI is a managed service that allows developers to deploy, tune, and generate content from OpenAI models on Azure resources.\n\nCheckout the following examples:\n\n- [Multiple Completions](#generate-multiple-completions-with-subscription-key)\n- [Chatbot](#generate-chatbot-response)\n- [Summarize Text](#summarize-text-with-completion)\n\nKey links:\n\n- [Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/openai/openai)\n- [Package (NPM)](https://www.npmjs.com/package/@azure/openai)\n- [API reference documentation](https://aka.ms/openai-js-api)\n- [Product documentation](https://learn.microsoft.com/azure/cognitive-services/openai)\n- [Samples](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/openai/openai/samples/v1-beta)\n\n## Getting started\n\n```javascript\nconst { OpenAIClient, AzureKeyCredential } = require(\"@azure/openai\");\n\nconst client = new OpenAIClient(\n  \"https://<resource name>.openai.azure.com/\", \n  new AzureKeyCredential(\"<Azure API key>\")\n);\nconst { id, created, choices, usage } = await client.getCompletions(\"<deployment ID>\", [\"YOUR PROMPT HERE\"]);\n```\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge, and Firefox.\n\n### Prerequisites\n\nIf you'd like to use an Azure OpenAI resource, you must have an [Azure subscription](https://azure.microsoft.com/free/dotnet/)\nand [Azure OpenAI access](https://learn.microsoft.com/azure/cognitive-services/openai/overview#how-do-i-get-access-to-azure-openai).\nThis will allow you to create an Azure OpenAI resource and get both a connection URL as well as API keys. For more\ninformation, see [Quickstart: Get started generating text using Azure OpenAI Service](https://learn.microsoft.com/azure/cognitive-services/openai/quickstart).\n\nIf you'd like to use the Azure OpenAI JS client library to connect to non-Azure OpenAI, you'll need an API key\nfrom a developer account at https://platform.openai.com/.\n\n### Install the `@azure/openai` package\n\nInstall the Azure OpenAI client client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/openai\n```\n\n### Create and authenticate a `OpenAIClient`\n\nTo configure a client for use with Azure OpenAI, provide a valid endpoint URI to an Azure OpenAI resource\nalong with a corresponding key credential, token credential, or Azure identity credential that's authorized to use the\nAzure OpenAI resource. To instead configure the client to connect to OpenAI's service, provide an API key from OpenAI's\ndeveloper portal.\n\n#### Using an API Key from Azure\n\nUse the [Azure Portal][azure_portal] to browse to your OpenAI resource and retrieve an API key, or use the [Azure CLI][azure_cli] snippet below:\n\n**Note:** Sometimes the API key is referred to as a \"subscription key\" or \"subscription API key.\"\n\n```PowerShell\naz cognitiveservices account keys list --resource-group <your-resource-group-name> --name <your-resource-name>\n```\n\nOnce you have an API key and endpoint, you can use the `AzureKeyCredential` class to authenticate the client as follows:\n\n```javascript\nconst { OpenAIClient, AzureKeyCredential } = require(\"@azure/openai\");\n\nconst client = new OpenAIClient(\"<endpoint>\", new AzureKeyCredential(\"<API key>\"));\n```\n\n#### Using an Azure Active Directory Credential\n\nClient API key authentication is used in most of the examples, but you can also authenticate with Azure Active Directory using the [Azure Identity library][azure_identity]. To use the [DefaultAzureCredential][defaultazurecredential] provider shown below,\nor other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to [register a new AAD application][register_aad_app] and grant access to OpenAI by assigning the `\"Cognitive Services User\"` role to your service principal (note: other roles such as `\"Owner\"` will not grant the necessary permissions, only `\"Cognitive Services User\"` will suffice to run the examples and the sample code).\n\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\n```javascript\nconst { OpenAIClient } = require(\"@azure/openai\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n\nconst client = new OpenAIClient(\"<endpoint>\", new DefaultAzureCredential());\n```\n\n#### Using an API Key from OpenAI\n\nTo instead configure the client to connect to OpenAI's service, provide an API key from OpenAI's\ndeveloper portal. Once you have an API key, you can use the `OpenAIKeyCredential` class to authenticate the client as follows:\n\n```javascript\nconst { OpenAIClient, OpenAIKeyCredential } = require(\"@azure/openai\");\n\nconst client = new OpenAIClient(new OpenAIKeyCredential(\"<API key>\"));\n```\n\n## Key concepts\n\nThe main concept to understand is [Completions][azure_openai_completions_docs]. Briefly explained, completions provides its functionality in the form of a text prompt, which by using a specific [model](https://learn.microsoft.com/azure/cognitive-services/openai/concepts/models), will then attempt to match the context and patterns, providing an output text. The following code snippet provides a rough overview:\n\n```javascript\nconst client = new OpenAIClient(\n  \"https://your-azure-openai-resource.com/\",\n  new AzureKeyCredential(\"your-azure-openai-resource-api-key\"));\n\nconst { choices } = await client.getCompletions(\n  \"text-davinci-003\", // assumes a matching model deployment or model name\n  [\"Hello, world!\"]);\n\nfor (const choice of choices) {\n  console.log(choice.text);\n}\n```\n\n## Examples\n\nYou can familiarize yourself with different APIs using [Samples](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/openai/openai/samples/v1-beta).\n\n### Generate Chatbot Response\n\nThis example authenticates using a DefaultAzureCredential, then generates chat responses to input chat question and messages.\n\n```javascript\nconst endpoint = \"https://myaccount.openai.azure.com/\";\nconst client = new OpenAIClient(endpoint, new DefaultAzureCredential());\n\nconst deploymentId = \"gpt-35-turbo\";\n\nconst messages = [\n  { role: \"system\", content: \"You are a helpful assistant. You will talk like a pirate.\" },\n  { role: \"user\", content: \"Can you help me?\" },\n  { role: \"assistant\", content: \"Arrrr! Of course, me hearty! What can I do for ye?\" },\n  { role: \"user\", content: \"What's the best way to train a parrot?\" },\n];\n\nconsole.log(`Messages: ${messages.map((m) => m.content).join(\"\\n\")}`);\n\nconst events = await client.listChatCompletions(deploymentId, messages, { maxTokens: 128 });\nfor await (const event of events) {\n  for (const choice of event.choices) {\n    const delta = choice.delta?.content;\n    if (delta !== undefined) {\n      console.log(`Chatbot: ${delta}`);\n    }\n  }\n}\n```\n\n### Generate Multiple Completions With Subscription Key\n\nThis example generates text responses to input prompts using an Azure subscription key\n\n```javascript\n// Replace with your Azure OpenAI key\nconst key = \"YOUR_AZURE_OPENAI_KEY\";\nconst endpoint = \"https://myaccount.openai.azure.com/\";\nconst client = new OpenAIClient(endpoint, new AzureKeyCredential(key));\n\nconst examplePrompts = [\n  \"How are you today?\",\n  \"What is Azure OpenAI?\",\n  \"Why do children love dinosaurs?\",\n  \"Generate a proof of Euler's identity\",\n  \"Describe in single words only the good things that come into your mind about your mother.\",\n];\n\nconst deploymentName = \"text-davinci-003\";\n\nlet promptIndex = 0;\nconst { choices } = await client.getCompletions(deploymentName, examplePrompts);\nfor (const choice of choices) {\n  const completion = choice.text;\n  console.log(`Input: ${examplePrompts[promptIndex++]}`);\n  console.log(`Chatbot: ${completion}`);\n}\n```\n\n### Summarize Text with Completion\n\nThis example generates a summarization of the given input prompt.\n\n```javascript\nconst endpoint = \"https://myaccount.openai.azure.com/\";\nconst client = new OpenAIClient(endpoint, new DefaultAzureCredential());\n\nconst textToSummarize = `\n  Two independent experiments reported their results this morning at CERN, Europe's high-energy physics laboratory near Geneva in Switzerland. Both show convincing evidence of a new boson particle weighing around 125 gigaelectronvolts, which so far fits predictions of the Higgs previously made by theoretical physicists.\n\n  \"\"As a layman I would say: 'I think we have it'. Would you agree?\"\" Rolf-Dieter Heuer, CERN's director-general, asked the packed auditorium. The physicists assembled there burst into applause.\n :`;\n\nconst summarizationPrompt = [`\n  Summarize the following text.\n\n  Text:\n  \"\"\"\"\"\"\n  ${textToSummarize}\n  \"\"\"\"\"\"\n\n  Summary:\n`];\n\nconsole.log(`Input: ${summarizationPrompt}`);\n\nconst deploymentName = \"text-davinci-003\";\n\nconst { choices } = await client.getCompletions(deploymentName, examplePrompts, {\n  maxTokens: 64\n});\nconst completion = choices[0].text;\nconsole.log(`Summarization: ${completion}`);\n```\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\n\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n<!-- LINKS -->\n[msdocs_openai_completion]: https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/openai/openai/samples/v1-beta/javascript/completions.js\n[msdocs_openai_chat_completion]: https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/openai/openai/samples/v1-beta/javascript/listChatCompletions.js\n[msdocs_openai_embedding]: https://learn.microsoft.com/azure/cognitive-services/openai/concepts/understand-embeddings\n[azure_openai_completions_docs]: https://learn.microsoft.com/azure/cognitive-services/openai/how-to/completions\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[register_aad_app]: https://docs.microsoft.com/azure/cognitive-services/authentication#assign-a-role-to-a-service-principal\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_portal]: https://portal.azure.com\n",
        "repo_name": "openai/openai",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/openai/openai",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure OperationalInsightsManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure OperationalInsightsManagement client.\n\nOperational Insights Client\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/operationalinsights/arm-operationalinsights) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-operationalinsights) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-operationalinsights) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-operationalinsights` package\n\nInstall the Azure OperationalInsightsManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-operationalinsights\n```\n\n### Create and authenticate a `OperationalInsightsManagementClient`\n\nTo create a client object to access the Azure OperationalInsightsManagement API, you will need the `endpoint` of your Azure OperationalInsightsManagement resource and a `credential`. The Azure OperationalInsightsManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure OperationalInsightsManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure OperationalInsightsManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { OperationalInsightsManagementClient } = require(\"@azure/arm-operationalinsights\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new OperationalInsightsManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new OperationalInsightsManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### OperationalInsightsManagementClient\n\n`OperationalInsightsManagementClient` is the primary interface for developers using the Azure OperationalInsightsManagement client library. Explore the methods on this client object to understand the different features of the Azure OperationalInsightsManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Foperationalinsights%2Farm-operationalinsights%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "operationalinsights/arm-operationalinsights",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/operationalinsights/arm-operationalinsights",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "## An isomorphic javascript sdk for - LogAnalyticsClient\n\nThis package contains an isomorphic SDK for LogAnalyticsClient.\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge, and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### How to Install\n\n```\nnpm install @azure/loganalytics\n```\n\n### How to use\n\n#### nodejs - Authentication, client creation and execute query as an example written in TypeScript.\n\n##### Install @azure/ms-rest-nodeauth\n\n```\nnpm install @azure/ms-rest-nodeauth\n```\n\n##### Sample code\n```ts\nimport * as msRest from \"@azure/ms-rest-js\";\nimport * as msRestNodeAuth from \"@azure/ms-rest-nodeauth\";\nimport { LogAnalyticsClient, LogAnalyticsModels, LogAnalyticsMappers } from \"@azure/loganalytics\";\nconst subscriptionId = process.env[\"AZURE_SUBSCRIPTION_ID\"];\n\nmsRestNodeAuth.interactiveLogin({\n  tokenAudience: \"https://api.loganalytics.io\"\n}).then((creds) => {\n  const client = new LogAnalyticsClient(creds, subscriptionId);\n  const workspaceId = \"testworkspaceId\";\n  const body: LogAnalyticsModels.QueryBody = {\n    query: \"testquery\",\n    timespan: \"testtimespan\",\n    workspaces: [\"testworkspaces\"]\n  };\n  client.query.execute(workspaceId, body).then((result) => {\n    console.log(\"The result is:\");\n    console.log(result);\n  });\n}).catch((err) => {\n  console.error(err);\n});\n```\n\n#### browser - Authentication, client creation and execute query as an example written in JavaScript.\n\n##### Install @azure/ms-rest-browserauth\n\n```\nnpm install @azure/ms-rest-browserauth\n```\n\n##### Sample code\n\nSee https://github.com/Azure/ms-rest-browserauth to learn how to authenticate to Azure in the browser.\n\n- index.html\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>@azure/loganalytics sample</title>\n    <script src=\"node_modules/@azure/ms-rest-js/dist/msRest.browser.js\"></script>\n    <script src=\"node_modules/@azure/ms-rest-browserauth/dist/msAuth.js\"></script>\n    <script src=\"node_modules/@azure/loganalytics/dist/loganalytics.js\"></script>\n    <script type=\"text/javascript\">\n      const subscriptionId = \"<Subscription_Id>\";\n      const authManager = new msAuth.AuthManager({\n        clientId: \"<client id for your Azure AD app>\",\n        tenant: \"<optional tenant for your organization>\"\n      });\n      authManager.finalizeLogin().then((res) => {\n        if (!res.isLoggedIn) {\n          // may cause redirects\n          authManager.login();\n        }\n        const client = new Azure.Loganalytics.LogAnalyticsClient(res.creds, subscriptionId);\n        const workspaceId = \"testworkspaceId\";\n        const body = {\n          query: \"testquery\",\n          timespan: \"testtimespan\",\n          workspaces: [\"testworkspaces\"]\n        };\n        client.query.execute(workspaceId, body).then((result) => {\n          console.log(\"The result is:\");\n          console.log(result);\n        }).catch((err) => {\n          console.log(\"An error occurred:\");\n          console.error(err);\n        });\n      });\n    </script>\n  </head>\n  <body></body>\n</html>\n```\n\n## Related projects\n\n- [Microsoft Azure SDK for Javascript](https://github.com/Azure/azure-sdk-for-js)\n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Foperationalinsights%2Floganalytics%2FREADME.png)\n",
        "repo_name": "operationalinsights/loganalytics",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/operationalinsights/loganalytics",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure OperationsManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure OperationsManagement client.\n\nOperations Management Client\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/operationsmanagement/arm-operations) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-operations) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-operations?view=azure-node-preview) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-operations` package\n\nInstall the Azure OperationsManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-operations\n```\n\n### Create and authenticate a `OperationsManagementClient`\n\nTo create a client object to access the Azure OperationsManagement API, you will need the `endpoint` of your Azure OperationsManagement resource and a `credential`. The Azure OperationsManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure OperationsManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure OperationsManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { OperationsManagementClient } = require(\"@azure/arm-operations\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new OperationsManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new OperationsManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### OperationsManagementClient\n\n`OperationsManagementClient` is the primary interface for developers using the Azure OperationsManagement client library. Explore the methods on this client object to understand the different features of the Azure OperationsManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Foperationsmanagement%2Farm-operations%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "operationsmanagement/arm-operations",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/operationsmanagement/arm-operations",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# AzureOrbital client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for AzureOrbital client.\n\nAzure Orbital service.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/orbital/arm-orbital) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-orbital) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-orbital) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-orbital` package\n\nInstall the AzureOrbital client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-orbital\n```\n\n### Create and authenticate a `AzureOrbital`\n\nTo create a client object to access the AzureOrbital API, you will need the `endpoint` of your AzureOrbital resource and a `credential`. The AzureOrbital client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your AzureOrbital resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to AzureOrbital** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { AzureOrbital } = require(\"@azure/arm-orbital\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new AzureOrbital(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new AzureOrbital(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### AzureOrbital\n\n`AzureOrbital` is the primary interface for developers using the AzureOrbital client library. Explore the methods on this client object to understand the different features of the AzureOrbital service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Forbital%2Farm-orbital%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "orbital/arm-orbital",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/orbital/arm-orbital",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure PaloAltoNetworksCloudngfw client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure PaloAltoNetworksCloudngfw client.\n\n\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/paloaltonetworksngfw/arm-paloaltonetworksngfw) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-paloaltonetworksngfw) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-paloaltonetworksngfw?view=azure-node-preview) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-paloaltonetworksngfw` package\n\nInstall the Azure PaloAltoNetworksCloudngfw client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-paloaltonetworksngfw\n```\n\n### Create and authenticate a `PaloAltoNetworksCloudngfw`\n\nTo create a client object to access the Azure PaloAltoNetworksCloudngfw API, you will need the `endpoint` of your Azure PaloAltoNetworksCloudngfw resource and a `credential`. The Azure PaloAltoNetworksCloudngfw client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure PaloAltoNetworksCloudngfw resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure PaloAltoNetworksCloudngfw** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { PaloAltoNetworksCloudngfw } = require(\"@azure/arm-paloaltonetworksngfw\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new PaloAltoNetworksCloudngfw(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new PaloAltoNetworksCloudngfw(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### PaloAltoNetworksCloudngfw\n\n`PaloAltoNetworksCloudngfw` is the primary interface for developers using the Azure PaloAltoNetworksCloudngfw client library. Explore the methods on this client object to understand the different features of the Azure PaloAltoNetworksCloudngfw service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fpaloaltonetworksngfw%2Farm-paloaltonetworksngfw%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "paloaltonetworksngfw/arm-paloaltonetworksngfw",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/paloaltonetworksngfw/arm-paloaltonetworksngfw",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure PeeringManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure PeeringManagement client.\n\nPeering Client\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/peering/arm-peering) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-peering) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-peering) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-peering` package\n\nInstall the Azure PeeringManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-peering\n```\n\n### Create and authenticate a `PeeringManagementClient`\n\nTo create a client object to access the Azure PeeringManagement API, you will need the `endpoint` of your Azure PeeringManagement resource and a `credential`. The Azure PeeringManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure PeeringManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure PeeringManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { PeeringManagementClient } = require(\"@azure/arm-peering\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new PeeringManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new PeeringManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### PeeringManagementClient\n\n`PeeringManagementClient` is the primary interface for developers using the Azure PeeringManagement client library. Explore the methods on this client object to understand the different features of the Azure PeeringManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fpeering%2Farm-peering%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "peering/arm-peering",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/peering/arm-peering",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Personalizer client library for JavaScript\n\nPersonalizer Client\n\n**Please rely heavily on our [REST client docs](https://github.com/Azure/azure-sdk-for-js/blob/main/documentation/rest-clients.md) to use this library**\n\nKey links:\n\n- [Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/personalizer/ai-personalizer-rest)\n- [Package (NPM)](https://www.npmjs.com/package/@azure-rest/ai-personalizer)\n- [API reference documentation](https://docs.microsoft.com/javascript/api/)\n- [Samples](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/personalizer/ai-personalizer-rest/samples/v1-beta/javascript)\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge, and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- You must have an [Azure subscription](https://azure.microsoft.com/free/) to use this package.\n\n### Install the `@azure-rest/ai-personalizer` package\n\nInstall the Azure Personalizer client REST client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure-rest/ai-personalizer\n```\n\n### Create and authenticate a `PersonalizerClient`\n\nTo use an [Azure Active Directory (AAD) token credential](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token),\nprovide an instance of the desired credential type obtained from the\n[@azure/identity](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#credentials) library.\n\nTo authenticate with AAD, you must first `npm` install [`@azure/identity`](https://www.npmjs.com/package/@azure/identity) \n\nAfter setup, you can choose which type of [credential](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#credentials) from `@azure/identity` to use.\nAs an example, [DefaultAzureCredential](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential)\ncan be used to authenticate the client.\n\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables:\nAZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nimport { setLogLevel } from \"@azure/logger\";\n\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n",
        "repo_name": "personalizer/ai-personalizer-rest",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/personalizer/ai-personalizer-rest",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Policy client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure Policy client.\n\nTo manage and control access to your resources, you can define customized policies and assign them at a scope.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/policy/arm-policy-profile-2020-09-01-hybrid) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-policy-profile-2020-09-01-hybrid) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-policy-profile-2020-09-01-hybrid) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-policy-profile-2020-09-01-hybrid` package\n\nInstall the Azure Policy client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-policy-profile-2020-09-01-hybrid\n```\n\n### Create and authenticate a `PolicyClient`\n\nTo create a client object to access the Azure Policy API, you will need the `endpoint` of your Azure Policy resource and a `credential`. The Azure Policy client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure Policy resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure Policy** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { PolicyClient } = require(\"@azure/arm-policy-profile-2020-09-01-hybrid\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new PolicyClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new PolicyClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### PolicyClient\n\n`PolicyClient` is the primary interface for developers using the Azure Policy client library. Explore the methods on this client object to understand the different features of the Azure Policy service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fpolicy%2Farm-policy-profile-2020-09-01-hybrid%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "policy/arm-policy-profile-2020-09-01-hybrid",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/policy/arm-policy-profile-2020-09-01-hybrid",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Policy client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure Policy client.\n\nTo manage and control access to your resources, you can define customized policies and assign them at a scope.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/policy/arm-policy) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-policy) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-policy) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-policy` package\n\nInstall the Azure Policy client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-policy\n```\n\n### Create and authenticate a `PolicyClient`\n\nTo create a client object to access the Azure Policy API, you will need the `endpoint` of your Azure Policy resource and a `credential`. The Azure Policy client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure Policy resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure Policy** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { PolicyClient } = require(\"@azure/arm-policy\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new PolicyClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new PolicyClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### PolicyClient\n\n`PolicyClient` is the primary interface for developers using the Azure Policy client library. Explore the methods on this client object to understand the different features of the Azure Policy service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fpolicy%2Farm-policy%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "policy/arm-policy",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/policy/arm-policy",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure PolicyInsights client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure PolicyInsights client.\n\nQuery component policy states at varying resource scopes for Resource Provider mode policies.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/policyinsights/arm-policyinsights) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-policyinsights) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-policyinsights?view=azure-node-preview) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-policyinsights` package\n\nInstall the Azure PolicyInsights client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-policyinsights\n```\n\n### Create and authenticate a `PolicyInsightsClient`\n\nTo create a client object to access the Azure PolicyInsights API, you will need the `endpoint` of your Azure PolicyInsights resource and a `credential`. The Azure PolicyInsights client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure PolicyInsights resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure PolicyInsights** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { PolicyInsightsClient } = require(\"@azure/arm-policyinsights\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new PolicyInsightsClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new PolicyInsightsClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### PolicyInsightsClient\n\n`PolicyInsightsClient` is the primary interface for developers using the Azure PolicyInsights client library. Explore the methods on this client object to understand the different features of the Azure PolicyInsights service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fpolicyinsights%2Farm-policyinsights%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "policyinsights/arm-policyinsights",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/policyinsights/arm-policyinsights",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Portal client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure Portal client.\n\nAllows creation and deletion of Azure Shared Dashboards.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/portal/arm-portal) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-portal) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-portal?view=azure-node-preview) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-portal` package\n\nInstall the Azure Portal client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-portal\n```\n\n### Create and authenticate a `Portal`\n\nTo create a client object to access the Azure Portal API, you will need the `endpoint` of your Azure Portal resource and a `credential`. The Azure Portal client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure Portal resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure Portal** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { Portal } = require(\"@azure/arm-portal\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new Portal(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new Portal(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### Portal\n\n`Portal` is the primary interface for developers using the Azure Portal client library. Explore the methods on this client object to understand the different features of the Azure Portal service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fportal%2Farm-portal%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "portal/arm-portal",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/portal/arm-portal",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure PostgreSQLManagementFlexibleServer client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure PostgreSQLManagementFlexibleServer client.\n\nThe Microsoft Azure management API provides create, read, update, and delete functionality for Azure PostgreSQL resources including servers, databases, firewall rules, VNET rules, security alert policies, log files and configurations with new business model.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/postgresql/arm-postgresql-flexible) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-postgresql-flexible) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-postgresql-flexible?view=azure-node-preview) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-postgresql-flexible` package\n\nInstall the Azure PostgreSQLManagementFlexibleServer client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-postgresql-flexible\n```\n\n### Create and authenticate a `PostgreSQLManagementFlexibleServerClient`\n\nTo create a client object to access the Azure PostgreSQLManagementFlexibleServer API, you will need the `endpoint` of your Azure PostgreSQLManagementFlexibleServer resource and a `credential`. The Azure PostgreSQLManagementFlexibleServer client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure PostgreSQLManagementFlexibleServer resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure PostgreSQLManagementFlexibleServer** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { PostgreSQLManagementFlexibleServerClient } = require(\"@azure/arm-postgresql-flexible\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new PostgreSQLManagementFlexibleServerClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new PostgreSQLManagementFlexibleServerClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### PostgreSQLManagementFlexibleServerClient\n\n`PostgreSQLManagementFlexibleServerClient` is the primary interface for developers using the Azure PostgreSQLManagementFlexibleServer client library. Explore the methods on this client object to understand the different features of the Azure PostgreSQLManagementFlexibleServer service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fpostgresql%2Farm-postgresql-flexible%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "postgresql/arm-postgresql-flexible",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/postgresql/arm-postgresql-flexible",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure PostgreSQLManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure PostgreSQLManagement client.\n\nThe Microsoft Azure management API provides create, read, update, and delete functionality for Azure PostgreSQL resources including servers, databases, firewall rules, VNET rules, security alert policies, log files and configurations with new business model.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/postgresql/arm-postgresql) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-postgresql) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-postgresql) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-postgresql` package\n\nInstall the Azure PostgreSQLManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-postgresql\n```\n\n### Create and authenticate a `PostgreSQLManagementClient`\n\nTo create a client object to access the Azure PostgreSQLManagement API, you will need the `endpoint` of your Azure PostgreSQLManagement resource and a `credential`. The Azure PostgreSQLManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure PostgreSQLManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure PostgreSQLManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { PostgreSQLManagementClient } = require(\"@azure/arm-postgresql\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new PostgreSQLManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new PostgreSQLManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### PostgreSQLManagementClient\n\n`PostgreSQLManagementClient` is the primary interface for developers using the Azure PostgreSQLManagement client library. Explore the methods on this client object to understand the different features of the Azure PostgreSQLManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fpostgresql%2Farm-postgresql%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "postgresql/arm-postgresql",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/postgresql/arm-postgresql",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure PowerBIDedicated client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure PowerBIDedicated client.\n\nPowerBI Dedicated Web API provides a RESTful set of web services that enables users to create, retrieve, update, and delete Power BI dedicated capacities\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/powerbidedicated/arm-powerbidedicated) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-powerbidedicated) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-powerbidedicated) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-powerbidedicated` package\n\nInstall the Azure PowerBIDedicated client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-powerbidedicated\n```\n\n### Create and authenticate a `PowerBIDedicated`\n\nTo create a client object to access the Azure PowerBIDedicated API, you will need the `endpoint` of your Azure PowerBIDedicated resource and a `credential`. The Azure PowerBIDedicated client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure PowerBIDedicated resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure PowerBIDedicated** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { PowerBIDedicated } = require(\"@azure/arm-powerbidedicated\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new PowerBIDedicated(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new PowerBIDedicated(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### PowerBIDedicated\n\n`PowerBIDedicated` is the primary interface for developers using the Azure PowerBIDedicated client library. Explore the methods on this client object to understand the different features of the Azure PowerBIDedicated service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fpowerbidedicated%2Farm-powerbidedicated%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "powerbidedicated/arm-powerbidedicated",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/powerbidedicated/arm-powerbidedicated",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Power BI Embedded Management client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure Power BI Embedded Management client.\n\nClient to manage your Power BI Embedded workspace collections and retrieve workspaces.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/powerbiembedded/arm-powerbiembedded) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-powerbiembedded) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-powerbiembedded) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-powerbiembedded` package\n\nInstall the Azure Power BI Embedded Management client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-powerbiembedded\n```\n\n### Create and authenticate a `PowerBIEmbeddedManagementClient`\n\nTo create a client object to access the Azure Power BI Embedded Management API, you will need the `endpoint` of your Azure Power BI Embedded Management resource and a `credential`. The Azure Power BI Embedded Management client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure Power BI Embedded Management resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure Power BI Embedded Management** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { PowerBIEmbeddedManagementClient } = require(\"@azure/arm-powerbiembedded\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new PowerBIEmbeddedManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new PowerBIEmbeddedManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### PowerBIEmbeddedManagementClient\n\n`PowerBIEmbeddedManagementClient` is the primary interface for developers using the Azure Power BI Embedded Management client library. Explore the methods on this client object to understand the different features of the Azure Power BI Embedded Management service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fpowerbiembedded%2Farm-powerbiembedded%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "powerbiembedded/arm-powerbiembedded",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/powerbiembedded/arm-powerbiembedded",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure PrivateDnsManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure PrivateDnsManagement client.\n\nThe Private DNS Management Client.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/privatedns/arm-privatedns) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-privatedns) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-privatedns) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-privatedns` package\n\nInstall the Azure PrivateDnsManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-privatedns\n```\n\n### Create and authenticate a `PrivateDnsManagementClient`\n\nTo create a client object to access the Azure PrivateDnsManagement API, you will need the `endpoint` of your Azure PrivateDnsManagement resource and a `credential`. The Azure PrivateDnsManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure PrivateDnsManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure PrivateDnsManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { PrivateDnsManagementClient } = require(\"@azure/arm-privatedns\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new PrivateDnsManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new PrivateDnsManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### PrivateDnsManagementClient\n\n`PrivateDnsManagementClient` is the primary interface for developers using the Azure PrivateDnsManagement client library. Explore the methods on this client object to understand the different features of the Azure PrivateDnsManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fprivatedns%2Farm-privatedns%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "privatedns/arm-privatedns",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/privatedns/arm-privatedns",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure PurviewManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure PurviewManagement client.\n\nCreates a Microsoft.Purview management client.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/purview/arm-purview) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-purview) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-purview) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-purview` package\n\nInstall the Azure PurviewManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-purview\n```\n\n### Create and authenticate a `PurviewManagementClient`\n\nTo create a client object to access the Azure PurviewManagement API, you will need the `endpoint` of your Azure PurviewManagement resource and a `credential`. The Azure PurviewManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure PurviewManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure PurviewManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { PurviewManagementClient } = require(\"@azure/arm-purview\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new PurviewManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new PurviewManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### PurviewManagementClient\n\n`PurviewManagementClient` is the primary interface for developers using the Azure PurviewManagement client library. Explore the methods on this client object to understand the different features of the Azure PurviewManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fpurview%2Farm-purview%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "purview/arm-purview",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/purview/arm-purview",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Purview Administration REST client library for JavaScript\n\nAzure Purview data plane administration. It supports data plane operations. It can manage account, collections, keys, resource set rule, metadata policy, metadata roles.\n\n## Azure Purview Metadata Policies\n\n**Please rely heavily on the [service's documentation][account_product_documentation] and our [REST client docs][rest_client] to use this library**\n\nKey links:\n\n- [Source code][source_code]\n- [Package (NPM)][account_npm]\n- [API reference documentation][account_ref_docs]\n- [Product documentation][account_product_documentation]\n\n## Getting started\n\n### Currently supported environments\n\n- Node.js version 14.x.x or higher\n\n### Prerequisites\n\n- You must have an [Azure subscription][azure_subscription] and a [Purview][purview_resource] to use this package.\n\n#### Create a Purview Resource\n\nFollow [these][purview_resource] instructions to create your Purview resource\n\n### Install the `@azure-rest/purview-administration` package\n\nInstall the Azure Purview Administration client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure-rest/purview-administration\n```\n\n### Create and authenticate a `PurviewAccount`\n\nTo use an [Azure Active Directory (AAD) token credential][authenticate_with_token],\nprovide an instance of the desired credential type obtained from the\n[@azure/identity][azure_identity_credentials] library.\n\nTo authenticate with AAD, you must first `npm` install [`@azure/identity`][azure_identity_npm] and\n[enable AAD authentication on your Purview resource][enable_aad]\n\nAfter setup, you can choose which type of [credential][azure_identity_credentials] from `@azure/identity` to use.\nAs an example, [DefaultAzureCredential][default_azure_credential]\ncan be used to authenticate the client:\n\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables:\nAZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET\n\nUse the returned token credential to authenticate the client:\n\n```typescript\nimport {\n  PurviewAccountClient,\n  PurviewMetadataPoliciesClient,\n} from \"@azure-rest/purview-administration\";\nimport { DefaultAzureCredential } from \"@azure/identity\";\nconst accountClient = PurviewAccountClient(\n  \"https://<my-account-name>.purview.azure.com\",\n  new DefaultAzureCredential()\n);\n\nconst metadataClient = PurviewAccountClient(\n  \"https://<my-account-name>.purview.azure.com\",\n  new DefaultAzureCredential()\n);\n```\n\n## Key concepts\n\n### REST Client\n\nThis client is one of our REST clients. We highly recommend you read how to use a REST client [here][rest_client].\n\n## Examples\n\nThe following section shows you how to initialize and authenticate your client, then get all of your type-defs.\n\n- [Get A List of Collections](#get-a-list-of-collections \"Get A List of Collections\")\n\n```typescript\nimport { PurviewAccountClient } from \"@azure-rest/purview-administration\";\nimport { DefaultAzureCredential } from \"@azure/identity\";\nimport dotenv from \"dotenv\";\n\ndotenv.config();\n\nconst endpoint = process.env[\"ENDPOINT\"] || \"\";\n\nasync function main() {\n  console.log(\"== List collections sample ==\");\n  const client = PurviewAccountClient(endpoint, new DefaultAzureCredential());\n\n  const response = await client.path(\"/collections\").get();\n\n  if (response.status !== \"200\") {\n    console.log(`GET \"/collections\" failed with ${response.status}`);\n  }\n\n  console.log(response.body);\n}\n\nmain().catch(console.error);\n```\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nimport { setLogLevel } from \"@azure/logger\";\n\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fpurview%2Fpurview-account-rest%2FREADME.png)\n\n[account_product_documentation]: https://azure.microsoft.com/services/purview/\n[rest_client]: https://github.com/Azure/azure-sdk-for-js/blob/main/documentation/rest-clients.md\n[source_code]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/purview/purview-catalog-rest\n[account_npm]: https://www.npmjs.com/org/azure-rest\n[account_ref_docs]: https://azure.github.io/azure-sdk-for-js\n[azure_subscription]: https://azure.microsoft.com/free/\n[purview_resource]: https://docs.microsoft.com/azure/purview/create-catalog-portal\n[authenticate_with_token]: https://docs.microsoft.com/azure/purview/tutorial-using-rest-apis#create-a-service-principal-application\n[azure_identity_credentials]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#credentials\n[azure_identity_npm]: https://www.npmjs.com/package/@azure/identity\n[enable_aad]: https://docs.microsoft.com/azure/purview/create-catalog-portal#add-a-security-principal-to-a-data-plane-role\n[default_azure_credential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "purview/purview-administration-rest",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/purview/purview-administration-rest",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Purview Catalog REST client library for JavaScript\n\nAzure Purview Catalog is a fully managed cloud service whose users can discover the data sources they need and understand the data sources they find. At the same time, Data Catalog helps organizations get more value from their existing investments.\n\n- Search for data using technical or business terms\n- Browse associated technical, business, semantic, and operational metadata\n- Identify the sensitivity level of data.\n\n**Please rely heavily on the [service's documentation][catalog_product_documentation] and our [REST client docs][rest_client] to use this library**\n\nKey links:\n- [Source code][source_code]\n- [Package (NPM)][catalog_npm]\n- [API reference documentation][catalog_ref_docs]\n- [Product documentation][catalog_product_documentation]\n\n## Getting started\n\n### Currently supported environments\n\n- Node.js version 14.x.x or higher\n\n### Prerequisites\n\n- You must have an [Azure subscription][azure_subscription] and a [Purview][purview_resource] to use this package.\n\n#### Create a Purview Resource\n\nFollow [these][purview_resource] instructions to create your Purview resource\n\n### Install the `@azure-rest/purview-catalog` package\n\nInstall the Azure Purview Catalog client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure-rest/purview-catalog\n```\n\n### Create and authenticate a `PurviewCatalog`\n\nTo use an [Azure Active Directory (AAD) token credential][authenticate_with_token],\nprovide an instance of the desired credential type obtained from the\n[@azure/identity][azure_identity_credentials] library.\n\nTo authenticate with AAD, you must first `npm` install [`@azure/identity`][azure_identity_npm] and\n[enable AAD authentication on your Purview resource][enable_aad]\n\nAfter setup, you can choose which type of [credential][azure_identity_credentials] from `@azure/identity` to use.\nAs an example, [DefaultAzureCredential][default_azure_credential]\ncan be used to authenticate the client:\n\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables:\nAZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET\n\nUse the returned token credential to authenticate the client:\n\n```typescript\nimport PurviewCatalog from \"@azure-rest/purview-catalog\";\nimport { DefaultAzureCredential } from \"@azure/identity\";\nconst client = PurviewCatalog(\n  \"https://<my-account-name>.purview.azure.com\",\n  new DefaultAzureCredential()\n);\n```\n\n## Key concepts\n\n### REST Client\n\nThis client is one of our REST clients. We highly recommend you read how to use a REST client [here][rest_client].\n\n## Examples\n\nThe following section shows you how to initialize and authenticate your client, then get all of your type-defs.\n\n- [Get All Type Definitions](#get-all-type-definitions \"Get All Type Definitions\")\n\n```typescript\nimport PurviewCatalog from \"@azure-rest/purview-catalog\";\nimport { DefaultAzureCredential } from \"@azure/identity\";\n\nasync function main() {\n  console.log(\"== List entity typedefs ==\");\n  const client = PurviewCatalog(endpoint, new DefaultAzureCredential());\n\n  const dataSources = await client.path(\"/atlas/v2/types/typedefs\").get();\n\n  if (dataSources.status !== \"200\") {\n    throw dataSources;\n  }\n\n  console.log(dataSources.body.entityDefs?.map((ds) => ds.name).join(\"\\n\"));\n}\n\nmain().catch(console.error);\n```\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nimport { setLogLevel } from \"@azure/logger\";\n\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fpurview%2Fpurview-catalog-rest%2FREADME.png)\n\n[catalog_product_documentation]: https://azure.microsoft.com/services/purview/\n[rest_client]: https://github.com/Azure/azure-sdk-for-js/blob/main/documentation/rest-clients.md\n[source_code]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/purview/purview-catalog-rest\n[catalog_npm]: https://www.npmjs.com/org/azure-rest\n[catalog_ref_docs]: https://azure.github.io/azure-sdk-for-js\n[azure_subscription]: https://azure.microsoft.com/free/\n[purview_resource]: https://docs.microsoft.com/azure/purview/create-catalog-portal\n[authenticate_with_token]: https://docs.microsoft.com/azure/cognitive-services/authentication?tabs=powershell#authenticate-with-an-authentication-token\n[azure_identity_credentials]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#credentials\n[azure_identity_npm]: https://www.npmjs.com/package/@azure/identity\n[enable_aad]: https://docs.microsoft.com/azure/purview/create-catalog-portal#add-a-security-principal-to-a-data-plane-role\n[default_azure_credential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "purview/purview-catalog-rest",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/purview/purview-catalog-rest",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Purview Scanning Rest-Level client library for JavaScript\n\nAzure Purview Scanning is a fully managed cloud service whose users can scan your data into your data estate (also known as your **catalog**). Scanning is a process by which the catalog connects directly to a data source on a user-specified schedule.\n\n- Scan your data into your catalog\n- Examine your data\n- Extract schemas from your data\n\n**Please rely heavily on the [service's documentation][scanning_product_documentation] and our [Rest client docs][rest_client] to use this library**\n\nKey links:\n\n- [Source code][source_code]\n- [Package (NPM)][scanning_npm]\n- [API reference documentation][scanning_ref_docs]\n- [Product documentation][scanning_product_documentation]\n\n## Getting started\n\n### Currently supported environments\n\n- Node.js version 14.x.x or higher\n\n### Prerequisites\n\n- You must have an [Azure subscription][azure_subscription] and a [Purview][purview_resource] to use this package.\n\n#### Create a Purview Resource\n\nFollow [these][purview_resource] instructions to create your Purview resource\n\n### Install the `@azure-rest/purview-scanning` package\n\nInstall the Azure Purview Scanning client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure-rest/purview-scanning\n```\n\n### Create and authenticate a `PurviewScanning`\n\nTo use an [Azure Active Directory (AAD) token credential][authenticate_with_token],\nprovide an instance of the desired credential type obtained from the\n[@azure/identity][azure_identity_credentials] library.\n\nTo authenticate with AAD, you must first `npm` install [`@azure/identity`][azure_identity_npm] and\n[enable AAD authentication on your Purview resource][enable_aad]\n\nAfter setup, you can choose which type of [credential][azure_identity_credentials] from `@azure/identity` to use.\nAs an example, [DefaultAzureCredential][default_azure_credential]\ncan be used to authenticate the client:\n\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables:\nAZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET\n\nUse the returned token credential to authenticate the client:\n\n```typescript\nimport PurviewScanning from \"@azure-rest/purview-scanning\";\nimport { DefaultAzureCredential } from \"@azure/identity\";\nconst client = PurviewScanning(\n  \"https://<my-account-name>.scan.purview.azure.com\",\n  new DefaultAzureCredential()\n);\n```\n\n## Key concepts\n\n### Rest Client\n\nThis client is one of our Rest clients. We highly recommend you read how to use a Rest client [here][rest_client].\n\n## Examples\n\nThe following section shows you how to initialize and authenticate your client, then list all of your data sources.\n\n- [List All Data Sources](#list-all-data-sources \"List All Data Sources\")\n\n### List All Data Sources\n\n```typescript\nimport PurviewScanning, { paginate, DataSource } from \"@azure-rest/purview-scanning\";\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { DefaultAzureCredential } from \"@azure/identity\";\n\nasync function main() {\n  console.log(\"== List dataSources ==\");\n  const client = PurviewScanning(\n    \"https://<my-account-name>.scan.purview.azure.com\",\n    new DefaultAzureCredential()\n  );\n\n  const dataSources = await client.path(\"/datasources\").get();\n  if (dataSources.status !== \"200\") {\n    throw dataSources.body.error;\n  }\n  const iter = paginate(client, dataSources)\n\n  const items: DataSource[] = [];\n\n  for await (const item of <PagedAsyncIterableIterator<DataSource, (DataSource)[], PageSettings>>iter) {\n    items.push(item);\n  }\n\n  console.log(items?.map((ds) => ds.name).join(\"\\n\"));\n}\n\nmain().catch(console.error);\n```\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nimport { setLogLevel } from \"@azure/logger\";\n\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fpurview%2Fpurview-scanning-rest%2FREADME.png)\n\n<!-- LINKS -->\n\n[scanning_product_documentation]: https://azure.microsoft.com/services/purview/\n[rest_client]: https://github.com/Azure/azure-sdk-for-js/blob/main/documentation/rest-clients.md\n[source_code]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/purview/purview-scanning-rest\n[scanning_npm]: https://www.npmjs.com/package/@azure-rest/purview-scanning\n[scanning_ref_docs]: https://azure.github.io/azure-sdk-for-js\n[azure_subscription]: https://azure.microsoft.com/free/\n[purview_resource]: https://docs.microsoft.com/azure/purview/create-catalog-portal\n[authenticate_with_token]: https://docs.microsoft.com/azure/cognitive-services/authentication?tabs=powershell#authenticate-with-an-authentication-token\n[azure_identity_credentials]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#credentials\n[azure_identity_npm]: https://www.npmjs.com/package/@azure/identity\n[enable_aad]: https://docs.microsoft.com/azure/purview/create-catalog-portal#add-a-security-principal-to-a-data-plane-role\n[default_azure_credential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "purview/purview-scanning-rest",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/purview/purview-scanning-rest",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Purview Sharing REST client library for JavaScript\n\nPurview Sharing Client\n\n\\*\\*If you are not familiar with our REST client, please spend 5 minutes to take a look at our [REST client docs](https://github.com/Azure/azure-sdk-for-js/blob/main/documentation/rest-clients.md) to use this library, the REST client provides a light-weighted & developer friendly way to call azure rest api\n\nKey links:\n\n- [Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/purview/purview-sharing-rest)\n- [Package (NPM)](https://www.npmjs.com/package/@azure-rest/purview-sharing)\n- [API reference documentation](https://docs.microsoft.com/javascript/api/@azure-rest/purview-sharing?view=azure-node-preview)\n- [Samples](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/purview/purview-sharing-rest/samples)\n\n## Getting started\n\n### Currently supported environments\n\n- LTS versions of Node.js\n\n### Prerequisites\n\n- You must have an [Azure subscription](https://azure.microsoft.com/free/) to use this package.\n\n### Install the `@azure-rest/purview-sharing` package\n\nInstall the Azure Purview Sharing REST client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure-rest/purview-sharing\n```\n\n### Create and authenticate a `PurviewSharingClient`\n\nTo use an [Azure Active Directory (AAD) token credential](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token),\nprovide an instance of the desired credential type obtained from the\n[@azure/identity](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#credentials) library.\n\nTo authenticate with AAD, you must first `npm` install [`@azure/identity`](https://www.npmjs.com/package/@azure/identity)\n\nAfter setup, you can choose which type of [credential](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#credentials) from `@azure/identity` to use.\nAs an example, [DefaultAzureCredential](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential)\ncan be used to authenticate the client.\n\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables:\nAZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\n\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n",
        "repo_name": "purview/purview-sharing-rest",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/purview/purview-sharing-rest",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Purview Workflow Rest-Level client library for JavaScript\n\nWorkflows are automated, repeatable business processes that users can create within Microsoft Purview to validate and orchestrate CUD (create, update, delete) operations on their data entities. Enabling these processes allow organizations to track changes, enforce policy compliance, and ensure quality data across their data landscape.\n\nUse the client library for Purview Workflow to:\n\n- Manage workflows\n- Submit user requests and monitor workflow runs\n- View and respond to workflow tasks\n\n**For more details about how to use workflow, please refer to the [service documentation][product_documentation]**\n\n## Getting started\n\n### Currently supported environments\n\n- Node.js version 14.x.x or higher\n\n### Prerequisites\n\n- You must have an [Azure subscription][azure_subscription] and a [Purview resource][purview_resource] to use this package.\n\n### Create and authenticate a `PurviewWorkflowClient`\n\nSince the Workflow service uses an Azure Active Directory (AAD) bearer token for authentication and identification, an email address should be encoded into the token to allow for notification when using Workflow. It is recommended that the [Azure Identity][azure_identity] library be used  with a the [UsernamePasswordCredential][username_password_credential]. Before using the [Azure Identity][azure_identity] library with Workflow, [an application][app_registration] should be registered and used for the clientId passed to the [UsernamePasswordCredential][username_password_credential].\nSet the values of the client ID, tenant ID, username and password as environment variables:\nAZURE_CLIENT_ID, AZURE_TENANT_ID, USERNAME, PASSWORD\n\n```typescript\nimport PurviewWorkflow from \"@azure-rest/purview-workflow\";\nimport { UsernamePasswordCredential } from \"@azure/identity\";\nimport * as dotenv from \"dotenv\";\n\ndotenv.config();\n\nconst endpoint = process.env[\"ENDPOINT\"];\nconst tenantId = process.env[\"AZURE_TENANT_ID\"];\nconst clientId = process.env[\"AZURE_CLIENT_ID\"];\nconst username = process.env[\"USERNAME\"];\nconst password = process.env[\"PASSWORD\"];\nconst client = PurviewWorkflow(\n  endpoint,\n  new UsernamePasswordCredential(\n        tenantId,\n        clientId,\n        username,\n        password\n      )\n  );\n```\n\n## Examples\n\nThe following section provides several code snippets covering some of the most common scenarios, including:\n\n- [Submit User Requests](#submit-user-requests)\n- [Approve Workflow Task](#approve-workflow-task)\n\n### Submit user requests\n\n```typescript\nimport createPurviewWorkflowClient, {\n  SubmitUserRequestsParameters\n} from \"@azure-rest/purview-workflow\";\nimport { UsernamePasswordCredential } from \"@azure/identity\";\nimport * as dotenv from \"dotenv\";\n\ndotenv.config();\n\nasync function userRequestsSubmit() {\n  const endpoint = process.env[\"ENDPOINT\"];\n  const tenantId = process.env[\"AZURE_TENANT_ID\"];\n  const clientId = process.env[\"AZURE_CLIENT_ID\"];\n  const username = process.env[\"USERNAME\"];\n  const password = process.env[\"PASSWORD\"];\n\n  const credential = new UsernamePasswordCredential(tenantId , clientId, username, password);\n  const client = createPurviewWorkflowClient(endpoint, credential);\n  const options: SubmitUserRequestsParameters = {\n    body: {\n      comment: \"Thanks!\",\n      operations: [\n        {\n          type: \"CreateTerm\",\n          payload: {\n            glossaryTerm: {\n              name: \"term\",\n              anchor: { glossaryGuid: \"20031e20-b4df-4a66-a61d-1b0716f3fa48\" },\n              nickName: \"term\",\n              status: \"Approved\"\n            }\n          }\n        }\n      ]\n    }\n  };\n  const result = await client.path(\"/userrequests\").post(options);\n  if (isUnexpected(result)) {\n    throw result.body.error;\n  }\n  console.log(result);\n}\n\nuserRequestsSubmit().catch(console.error);\n```\n\n### Approve workflow task\n\n```typescript\n// This taskId represents an existing workflow task. The id can be obtained by calling GET /workflowtasks API.\nimport createPurviewWorkflowClient, {\n  SubmitUserRequestsParameters\n} from \"@azure-rest/purview-workflow\";\nimport { UsernamePasswordCredential } from \"@azure/identity\";\nimport * as dotenv from \"dotenv\";\n\ndotenv.config();\nasync function approvalTaskApprove() {\n  const endpoint = process.env[\"ENDPOINT\"];\n  const tenantId = process.env[\"AZURE_TENANT_ID\"];\n  const clientId = process.env[\"AZURE_CLIENT_ID\"];\n  const username = process.env[\"USERNAME\"];\n  const password = process.env[\"PASSWORD\"];\n  const credential = new UsernamePasswordCredential(tenantId, clientId, username, password);\n  const client = createPurviewWorkflowClient(endpoint, credential);\n  const taskId = \"98d98e2c-23fa-4157-a3f8-ff8ce5cc095c\";\n  const options: ApproveApprovalTaskParameters = {\n    body: { comment: \"Thanks for raising this!\" }\n  };\n  const result = await client\n    .path(\"/workflowtasks/{taskId}/approve-approval\", taskId)\n    .post(options);\n  if (isUnexpected(result)) {\n    throw result.body.error;\n  }\n  console.log(result);\n}\n\napprovalTaskApprove().catch(console.error);\n```\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\n\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n<!-- LINKS -->\n[product_documentation]: https://learn.microsoft.com/azure/purview/concept-workflow\n[azure_subscription]: https://azure.microsoft.com/free/dotnet/\n[purview_resource]: https://docs.microsoft.com/azure/purview/create-catalog-portal\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#readme\n[app_registration]: https://learn.microsoft.com/azure/active-directory/develop/quickstart-register-app\n[username_password_credential]: https://learn.microsoft.com/javascript/api/@azure/identity/usernamepasswordcredential?view=azure-node-latest\n",
        "repo_name": "purview/purview-workflow-rest",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/purview/purview-workflow-rest",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "## Azure Quantum Jobs client library for JavaScript\n\nThis package contains an isomorphic SDK for QuantumJobClient.\n\nAzure Quantum is a Microsoft Azure service that you can use to run quantum computing programs or solve optimization problems in the cloud. Using the Azure Quantum tools and SDKs, you can create quantum programs and run them against different quantum simulators and machines. You can use the `@azure/quantum-jobs` client library to:\n\n- Create, enumerate, and cancel quantum jobs\n- Enumerate provider status and quotas\n\nKey links:\n- [Source code][source]\n- [API reference documentation](https://docs.microsoft.com/qsharp/api/)\n- [Product documentation](https://docs.microsoft.com/azure/quantum/)\n- [Samples](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/quantum/quantum-jobs/samples)\n\n## Getting started\n\nThis section includes everything a developer needs to install and create their first client connection _very quickly_.\n\n### Install the package\n\nInstall the Azure Quantum Jobs client library for Javascript with `npm`:\n\n```bash\nnpm install @azure/quantum-jobs\n```\n\n### Prerequisites\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- [Azure subscription](https://azure.microsoft.com/free/)\n- [Azure Quantum Workspace][workspaces]\n\n### Authenticate the client\n\nTo authenticate with the service, you can use [DefaultAzureCredential](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential) from the `@azure/identity` library. This will try different authentication mechanisms based on the environment (e.g. Environment Variables, ManagedIdentity, CachedTokens) and finally, it will fallback to InteractiveBrowserCredential.\n\nThe client also allows the user to override the above behavior by passing their own implementations of the [TokenCredential](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/core/core-auth/src/tokenCredential.ts).\n\n`TokenCredential` is the default Authentication mechanism used by Azure SDKs.\n\n## Key concepts\n\n`QuantumJobClient` is the root class to be used to authenticate, and create, enumerate, and cancel jobs.\n\n`JobDetails` contains all the properties of a job.\n\n`ProviderStatus` contains status information for a provider.\n\n`QuantumJobQuota` contains quota properties.\n\n## Examples\n\n### Create the client\n\nCreate an instance of the QuantumJobClient by passing in these parameters:\n\n- [Subscription Id][subscriptions] - looks like XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX and can be found in your list of subscriptions on azure\n- [Resource Group Name][resource-groups] - a container that holds related resources for an Azure solution\n- [Workspace Name][workspaces] - a collection of assets associated with running quantum or optimization applications\n- [Location][location] - choose the best data center by geographical region\n- [Storage Container Name][blob-storage] - your blob storage\n- [Credential][credentials] - used to authenticate\n\n```Javascript Snippet\n    const credential = new DefaultAzureCredential();\n\n    // Create a QuantumJobClient\n    const subscriptionId = \"your_subscription_id\";\n    const resourceGroupName = \"your_resource_group_name\";\n    const workspaceName = \"your_quantum_workspace_name\";\n    const storageContainerName = \"mycontainer\";\n    const location = \"westus\"; //\"your_location\";\n    const endpoint = \"https://\" + location + \".quantum.azure.com\";\n\n    const quantumJobClient = new QuantumJobClient(\n      credential,\n      subscriptionId,\n      resourceGroupName,\n      workspaceName,\n      {\n        endpoint: endpoint,\n        credentialScopes: \"https://quantum.microsoft.com/.default\"\n      }\n    );\n```\n\n### Get Container SAS URI\n\nCreate a storage container to put your data.\n\n```Javascript Snippet\n    // Get container Uri with SAS key\n    const containerUri = (\n      await quantumJobClient.storage.sasUri({\n        containerName: storageContainerName\n      })\n    ).sasUri;\n\n    // Create container if not exists\n    const containerClient = new ContainerClient(containerUri);\n    await containerClient.createIfNotExists();\n```\n\n### Upload Input Data\n\nUsing the SAS URI, upload the json input data to the blob client.\nThis contains the parameters to be used with [Quantum Inspired Optimizations](https://docs.microsoft.com/azure/quantum/optimization-overview-introduction)\n\n```Javascript Snippet\n    // Get input data blob Uri with SAS key\n    const blobName = \"myjobinput.json\";\n    const inputDataUri = (\n      await quantumJobClient.storage.sasUri({\n        containerName: storageContainerName,\n        blobName: blobName\n      })\n    ).sasUri;\n\n    // Upload input data to blob\n    const blobClient = new BlockBlobClient(inputDataUri);\n    const problemFilename = \"problem.json\";\n    const fileContent = fs.readFileSync(problemFilename, \"utf8\");\n    await blobClient.upload(fileContent, Buffer.byteLength(fileContent));\n```\n\n### Create The Job\n\nNow that you've uploaded your problem definition to Azure Storage, you can use `jobs.create` to define an Azure Quantum job.\n\n```Javascript Snippet\n    const randomId = `${Math.floor(Math.random() * 10000 + 1)}`;\n\n    // Submit job\n    const jobId = `job-${randomId}`;\n    const jobName = `jobName-${randomId}`;\n    const inputDataFormat = \"microsoft.qio.v2\";\n    const outputDataFormat = \"microsoft.qio-results.v2\";\n    const providerId = \"microsoft\";\n    const target = \"microsoft.paralleltempering-parameterfree.cpu\";\n    const createJobDetails = {\n      containerUri: containerUri,\n      inputDataFormat: inputDataFormat,\n      providerId: providerId,\n      target: target,\n      id: jobId,\n      inputDataUri: inputDataUri,\n      name: jobName,\n      outputDataFormat: outputDataFormat\n    };\n    const createdJob = await quantumJobClient.jobs.create(jobId, createJobDetails);\n```\n\n### Get Job\n\n`GetJob` retrieves a specific job by its id.\n\n```Javascript Snippet\n    // Get the job that we've just created based on its jobId\n    const myJob = await quantumJobClient.jobs.get(jobId);\n```\n\n### Get Jobs\n\nTo enumerate all the jobs in the workspace, use the `jobs.list` method.\n\n```Javascript Snippet\n    let jobListResult = await quantumJobClient.jobs.list();\n    let listOfJobs = await jobListResult.next();\n    while (!listOfJobs.done) {\n      let job = listOfJobs.value;\n      console.log(`  ${job.name}`);\n      listOfJobs = await jobListResult.next();\n    }\n```\n\n## Next steps\n\n- Visit our [Product documentation](https://docs.microsoft.com/azure/quantum/) to learn more about Azure Quantum.\n\n## Contributing\n\nSee the [CONTRIBUTING.md][contributing] for details on building,\ntesting, and contributing to this library.\n\nThis project welcomes contributions and suggestions. Most contributions require\nyou to agree to a Contributor License Agreement (CLA) declaring that you have\nthe right to, and actually do, grant us the rights to use your contribution. For\ndetails, visit [cla.microsoft.com](https://cla.opensource.microsoft.com/).\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/)\nor contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any\nadditional questions or comments.\n\n## Troubleshooting\n\nAll Quantum Jobs service operations will throw a RequestFailedException on failure with helpful ErrorCodes. Many of these errors are recoverable.\n\n<!-- LINKS -->\n\n[source]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/quantum/quantum-jobs/src\n[resource-groups]: https://docs.microsoft.com/azure/azure-resource-manager/management/manage-resource-groups-portal\n[workspaces]: https://docs.microsoft.com/azure/quantum/how-to-create-quantum-workspaces-with-the-azure-portal\n[location]: https://azure.microsoft.com/global-infrastructure/services/?products=quantum\n[blob-storage]: https://docs.microsoft.com/azure/storage/blobs/storage-blobs-introduction\n[contributing]: https://github.com/Azure/azure-sdk-for-js/tree/main/CONTRIBUTING.md\n[subscriptions]: https://ms.portal.azure.com/#blade/Microsoft_Azure_Billing/SubscriptionsBlade\n[credentials]: https://docs.microsoft.com/javascript/api/overview/azure/identity-readme?view=azure-node-latest#credentials\n[style-guide-msft]: https://docs.microsoft.com/style-guide/capitalization\n[style-guide-cloud]: https://aka.ms/azsdk/cloud-style-guide\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fappconfiguration%2Fapp-configuration%2FREADME.png)\n",
        "repo_name": "quantum/quantum-jobs",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/quantum/quantum-jobs",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# AzureQuotaExtensionApi client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for AzureQuotaExtensionApi client.\n\nMicrosoft Azure Quota Resource Provider\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/quota/arm-quota) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-quota) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-quota?view=azure-node-preview) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-quota` package\n\nInstall the AzureQuotaExtensionApi client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-quota\n```\n\n### Create and authenticate a `AzureQuotaExtensionAPI`\n\nTo create a client object to access the AzureQuotaExtensionApi API, you will need the `endpoint` of your AzureQuotaExtensionApi resource and a `credential`. The AzureQuotaExtensionApi client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your AzureQuotaExtensionApi resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to AzureQuotaExtensionApi** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { AzureQuotaExtensionAPI } = require(\"@azure/arm-quota\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new AzureQuotaExtensionAPI(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new AzureQuotaExtensionAPI(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### AzureQuotaExtensionAPI\n\n`AzureQuotaExtensionAPI` is the primary interface for developers using the AzureQuotaExtensionApi client library. Explore the methods on this client object to understand the different features of the AzureQuotaExtensionApi service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fquota%2Farm-quota%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "quota/arm-quota",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/quota/arm-quota",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure RecoveryServices client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure RecoveryServices client.\n\nRecovery Services Client\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/recoveryservices/arm-recoveryservices) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-recoveryservices) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-recoveryservices) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-recoveryservices` package\n\nInstall the Azure RecoveryServices client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-recoveryservices\n```\n\n### Create and authenticate a `RecoveryServicesClient`\n\nTo create a client object to access the Azure RecoveryServices API, you will need the `endpoint` of your Azure RecoveryServices resource and a `credential`. The Azure RecoveryServices client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure RecoveryServices resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure RecoveryServices** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { RecoveryServicesClient } = require(\"@azure/arm-recoveryservices\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new RecoveryServicesClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new RecoveryServicesClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### RecoveryServicesClient\n\n`RecoveryServicesClient` is the primary interface for developers using the Azure RecoveryServices client library. Explore the methods on this client object to understand the different features of the Azure RecoveryServices service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Frecoveryservices%2Farm-recoveryservices%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "recoveryservices/arm-recoveryservices",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/recoveryservices/arm-recoveryservices",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Recovery Services Backup client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure Recovery Services Backup client.\n\nOpen API 2.0 Specs for Azure RecoveryServices Backup service\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/recoveryservicesbackup/arm-recoveryservicesbackup) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-recoveryservicesbackup) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-recoveryservicesbackup) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-recoveryservicesbackup` package\n\nInstall the Azure Recovery Services Backup client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-recoveryservicesbackup\n```\n\n### Create and authenticate a `RecoveryServicesBackupClient`\n\nTo create a client object to access the Azure Recovery Services Backup API, you will need the `endpoint` of your Azure Recovery Services Backup resource and a `credential`. The Azure Recovery Services Backup client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure Recovery Services Backup resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure Recovery Services Backup** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { RecoveryServicesBackupClient } = require(\"@azure/arm-recoveryservicesbackup\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new RecoveryServicesBackupClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new RecoveryServicesBackupClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### RecoveryServicesBackupClient\n\n`RecoveryServicesBackupClient` is the primary interface for developers using the Azure Recovery Services Backup client library. Explore the methods on this client object to understand the different features of the Azure Recovery Services Backup service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Frecoveryservicesbackup%2Farm-recoveryservicesbackup%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "recoveryservicesbackup/arm-recoveryservicesbackup",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/recoveryservicesbackup/arm-recoveryservicesbackup",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure SiteRecoveryManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure SiteRecoveryManagement client.\n\n\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/recoveryservicessiterecovery/arm-recoveryservices-siterecovery) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-recoveryservices-siterecovery) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-recoveryservices-siterecovery) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-recoveryservices-siterecovery` package\n\nInstall the Azure SiteRecoveryManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-recoveryservices-siterecovery\n```\n\n### Create and authenticate a `SiteRecoveryManagementClient`\n\nTo create a client object to access the Azure SiteRecoveryManagement API, you will need the `endpoint` of your Azure SiteRecoveryManagement resource and a `credential`. The Azure SiteRecoveryManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure SiteRecoveryManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure SiteRecoveryManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { SiteRecoveryManagementClient } = require(\"@azure/arm-recoveryservices-siterecovery\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new SiteRecoveryManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new SiteRecoveryManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### SiteRecoveryManagementClient\n\n`SiteRecoveryManagementClient` is the primary interface for developers using the Azure SiteRecoveryManagement client library. Explore the methods on this client object to understand the different features of the Azure SiteRecoveryManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Frecoveryservicessiterecovery%2Farm-recoveryservices-siterecovery%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "recoveryservicessiterecovery/arm-recoveryservices-siterecovery",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/recoveryservicessiterecovery/arm-recoveryservices-siterecovery",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure RedisManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure RedisManagement client.\n\nREST API for Azure Redis Cache Service.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/redis/arm-rediscache) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-rediscache) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-rediscache) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-rediscache` package\n\nInstall the Azure RedisManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-rediscache\n```\n\n### Create and authenticate a `RedisManagementClient`\n\nTo create a client object to access the Azure RedisManagement API, you will need the `endpoint` of your Azure RedisManagement resource and a `credential`. The Azure RedisManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure RedisManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure RedisManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { RedisManagementClient } = require(\"@azure/arm-rediscache\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new RedisManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new RedisManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### RedisManagementClient\n\n`RedisManagementClient` is the primary interface for developers using the Azure RedisManagement client library. Explore the methods on this client object to understand the different features of the Azure RedisManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fredis%2Farm-rediscache%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "redis/arm-rediscache",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/redis/arm-rediscache",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure RedisEnterpriseManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure RedisEnterpriseManagement client.\n\nREST API for managing Redis Enterprise resources in Azure.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/redisenterprise/arm-redisenterprisecache) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-redisenterprisecache) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-redisenterprisecache?view=azure-node-preview) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-redisenterprisecache` package\n\nInstall the Azure RedisEnterpriseManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-redisenterprisecache\n```\n\n### Create and authenticate a `RedisEnterpriseManagementClient`\n\nTo create a client object to access the Azure RedisEnterpriseManagement API, you will need the `endpoint` of your Azure RedisEnterpriseManagement resource and a `credential`. The Azure RedisEnterpriseManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure RedisEnterpriseManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure RedisEnterpriseManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { RedisEnterpriseManagementClient } = require(\"@azure/arm-redisenterprisecache\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new RedisEnterpriseManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new RedisEnterpriseManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### RedisEnterpriseManagementClient\n\n`RedisEnterpriseManagementClient` is the primary interface for developers using the Azure RedisEnterpriseManagement client library. Explore the methods on this client object to understand the different features of the Azure RedisEnterpriseManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fredisenterprise%2Farm-redisenterprisecache%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "redisenterprise/arm-redisenterprisecache",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/redisenterprise/arm-redisenterprisecache",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure RelayApi client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure RelayApi client.\n\nUse these API to manage Azure Relay resources through Azure Resource Manager.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/relay/arm-relay) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-relay) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-relay) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-relay` package\n\nInstall the Azure RelayApi client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-relay\n```\n\n### Create and authenticate a `RelayAPI`\n\nTo create a client object to access the Azure RelayApi API, you will need the `endpoint` of your Azure RelayApi resource and a `credential`. The Azure RelayApi client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure RelayApi resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure RelayApi** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { RelayAPI } = require(\"@azure/arm-relay\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new RelayAPI(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new RelayAPI(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### RelayAPI\n\n`RelayAPI` is the primary interface for developers using the Azure RelayApi client library. Explore the methods on this client object to understand the different features of the Azure RelayApi service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Frelay%2Farm-relay%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "relay/arm-relay",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/relay/arm-relay",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Remote Rendering client library for JavaScript\n\nAzure Remote Rendering (ARR) is a service that enables you to render high-quality, interactive 3D content in the cloud and stream it in real time to devices, such as the HoloLens 2.\n\nThis SDK offers functionality to convert assets to the format expected by the runtime, and also to manage\nthe lifetime of remote rendering sessions.\n\n> NOTE: Once a session is running, a client application will connect to it using one of the \"runtime SDKs\".\n> These SDKs are designed to best support the needs of an interactive application doing 3d rendering.\n> They are available in ([.net](https://docs.microsoft.com/dotnet/api/microsoft.azure.remoterendering)\n> or ([C++](https://docs.microsoft.com/cpp/api/remote-rendering/)).\n\n[Product documentation](https://docs.microsoft.com/azure/remote-rendering/)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge, and Firefox.\n\n### Prerequisites\n\nYou will need an [Azure subscription](https://azure.microsoft.com/free/) and an [Azure Remote Rendering account](https://docs.microsoft.com/azure/remote-rendering/how-tos/create-an-account) to use this package.\n\n### Install the `@azure/mixed-reality-remote-rendering` package\n\nInstall the Template client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/mixed-reality-remote-rendering\n```\n\n### Browser support\n\n#### JavaScript Bundle\n\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n#### CORS\n\nThis library cannot be used to make direct calls to the Azure Remote Rendering service from a browser.\nPlease refer to [this document](https://github.com/Azure/azure-sdk-for-js/blob/main/samples/cors/ts/README.md) for guidance.\n\n### Authenticate the client\n\nConstructing a remote rendering client requires an authenticated account, and a remote rendering endpoint.\nFor an account created in the eastus region, the account domain will have the form \"eastus.mixedreality.azure.com\".\nThere are several different forms of authentication:\n\n- Account Key authentication\n  - Account keys enable you to get started quickly with using Azure Remote Rendering. But before you deploy your application\n    to production, we recommend that you update your app to use Azure AD authentication.\n- Azure Active Directory (AD) token authentication\n  - If you're building an enterprise application and your company is using Azure AD as its identity system, you can use\n    user-based Azure AD authentication in your app. You then grant access to your Azure Remote Rendering accounts by using\n    your existing Azure AD security groups. You can also grant access directly to users in your organization.\n  - Otherwise, we recommend that you obtain Azure AD tokens from a web service that supports your app. We recommend this\n    method for production applications because it allows you to avoid embedding the credentials for access to Azure Spatial\n    Anchors in your client application.\n\nSee [here](https://docs.microsoft.com/azure/remote-rendering/how-tos/authentication) for detailed instructions and information.\n\nIn all the following examples, the client is constructed with a `remoteRenderingEndpoint`.\nThe available endpoints correspond to regions, and the choice of endpoint determines the region in which the service performs its work.\nAn example is `https://remoterendering.eastus2.mixedreality.azure.com`.\n\n> NOTE: For converting assets, it is preferable to pick a region close to the storage containing the assets.\n\n> NOTE: For rendering, it is strongly recommended that you pick the closest region to the devices using the service.\n> The time taken to communicate with the server impacts the quality of the experience.\n\n#### Authenticating with account key authentication\n\nUse the `AccountKeyCredential` object to use an account identifier and account key to authenticate:\n\n```typescript Snippet:CreateAClient\nconst credential = new AzureKeyCredential(accountKey);\n\nconst client = new RemoteRenderingClient(serviceEndpoint, accountId, accountDomain, credential);\n```\n\n#### Authenticating with an AAD client secret\n\nUse the `ClientSecretCredential` object to perform client secret authentication.\n\n```typescript Snippet:CreateAClientWithAAD\nlet credential = new ClientSecretCredential(tenantId, clientId, clientSecret, {\n  authorityHost: \"https://login.microsoftonline.com/\" + tenantId\n});\n\nconst client = new RemoteRenderingClient(serviceEndpoint, accountId, accountDomain, credential);\n```\n\n#### Authenticating a user using device code authentication\n\nUse the `DeviceCodeCredential` object to perform device code authentication.\n\n```typescript Snippet:CreateAClientWithDeviceCode\nconst userPromptCallback = (deviceCodeInfo: DeviceCodeInfo) => {\n  console.debug(deviceCodeInfo.message);\n  console.log(deviceCodeInfo.message);\n};\n\nconst credential = new DeviceCodeCredential({\n  tenantId: tenantId,\n  clientId: clientId,\n  userPromptCallback: userPromptCallback,\n  authorityHost: \"https://login.microsoftonline.com/\" + tenantId\n});\n\nconst client = new RemoteRenderingClient(serviceEndpoint, accountId, accountDomain, credential);\n```\n\nSee [here](https://github.com/AzureAD/microsoft-authentication-library-for-dotnet/wiki/Device-Code-Flow) for more\ninformation about using device code authentication flow.\n\n#### Interactive authentication with DefaultAzureCredential\n\nUse the `DefaultAzureCredential` object with `includeInteractiveCredentials: true` to use default interactive authentication\nflow:\n\n```typescript Snippet:CreateAClientWithAzureCredential\nlet credential = new DefaultAzureCredential();\n\nreturn new RemoteRenderingClient(serviceEndpoint, accountId, accountDomain, credential, {\n  authenticationEndpointUrl: \"https://sts.mixedreality.azure.com\"\n});\n```\n\n#### Authenticating with a static access token\n\nYou can pass a Mixed Reality access token as an `AccessToken` previously retrieved from the\n[Mixed Reality STS service](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/mixedreality/mixed-reality-authentication)\nto be used with a Mixed Reality client library:\n\n```typescript Snippet:CreateAClientWithStaticAccessToken\n// GetMixedRealityAccessTokenFromWebService is a hypothetical method that retrieves\n// a Mixed Reality access token from a web service. The web service would use the\n// MixedRealityStsClient and credentials to obtain an access token to be returned\n// to the client.\nconst accessToken = GetMixedRealityAccessTokenFromWebService();\n\nRemoteRenderingClient client = new RemoteRenderingClient(remoteRenderingEndpoint, accountId, accessToken);\n```\n\n## Key concepts\n\n### RemoteRenderingClient\n\nThe `RemoteRenderingClient` is the client library used to access the RemoteRenderingService.\nIt provides methods to create and manage asset conversions and rendering sessions.\n\n## Examples\n\n- [Convert a simple asset](#convert-a-simple-asset)\n- [Convert a more complex asset](#convert-a-more-complex-asset)\n- [Get the output when an asset conversion has finished](#get-the-output-when-an-asset-conversion-has-finished)\n- [List conversions](#list-conversions)\n- [Create a session](#create-a-session)\n- [Extend the lease time of a session](#extend-the-lease-time-of-a-session)\n- [List sessions](#list-sessions)\n- [Stop a session](#stop-a-session)\n\n### Convert a simple asset\n\nWe assume that a RemoteRenderingClient has been constructed as described in the [Authenticate the Client](#authenticate-the-client) section.\nThe following snippet describes how to request that \"box.fbx\", found at the root of the blob container at the given URI, gets converted.\n\n```typescript Snippet:StartAnAssetConversion\nconst inputSettings: AssetConversionInputSettings = {\n  storageContainerUrl,\n  relativeInputAssetPath: \"box.fbx\"\n};\nconst outputSettings: AssetConversionOutputSettings = {\n  storageContainerUrl\n};\nconst conversionSettings: AssetConversionSettings = { inputSettings, outputSettings };\n\n// A randomly generated UUID is a good choice for a conversionId.\nconst conversionId = uuid();\n\nconst conversionPoller: AssetConversionPollerLike = await client.beginConversion(\n  conversionId,\n  conversionSettings\n);\n```\n\nThe output files will be placed beside the input asset.\n\n### Convert a more complex asset\n\nAssets can reference other files, and blob containers can contain files belonging to many different assets.\nIn this example, we show how prefixes can be used to organize your blobs and how to convert an asset to take account of that organization.\nAssume that the blob container at `inputStorageUrl` contains many files, including \"Bicycle/bicycle.gltf\", \"Bicycle/bicycle.bin\" and \"Bicycle/saddleTexture.jpg\".\n(So the prefix \"Bicycle\" is acting very like a folder.)\nWe want to convert the glTF so that it has access to the other files which share the prefix, without requiring the conversion service to access any other files.\nTo keep things tidy, we also want the output files to be written to a different storage container and given a common prefix: \"ConvertedBicycle\".\nThe code is as follows:\n\n```typescript Snippet:StartAComplexAssetConversion\n  const inputSettings: AssetConversionInputSettings = {\n    storageContainerUrl: inputStorageUrl,\n    blobPrefix: \"Bicycle\"\n    relativeInputAssetPath: \"bicycle.gltf\"\n  };\n  const outputSettings: AssetConversionOutputSettings = {\n    storageContainerUrl: outputStorageUrl,\n    blobPrefix: \"ConvertedBicycle\"\n  };\n  const conversionSettings: AssetConversionSettings = { inputSettings, outputSettings };\n\n  const conversionId = uuid();\n\n  const conversionPoller: AssetConversionPollerLike = await client.beginConversion(\n    conversionId,\n    conversionSettings\n  );\n```\n\n> NOTE: when a prefix is given in the input options, then the input file parameter is assumed to be relative to that prefix.\n> The same applies to the output file parameter in output options.\n\n### Get the output when an asset conversion has finished\n\nConverting an asset can take anywhere from seconds to hours.\nThis code uses the conversionPoller returned by beginConversion to poll regularly until the conversion has finished or failed.\nThe default polling period is 10 seconds.\n\n```typescript Snippet:QueryConversionStatus\nconst conversion = await conversionPoller.pollUntilDone();\n\nconsole.log(\"== Check results ==\");\n\nif (conversion.status === \"Succeeded\") {\n  console.log(\"Conversion succeeded: Output written to \" + conversion.output?.outputAssetUrl);\n} else if (conversion.status === \"Failed\") {\n  console.log(\"Conversion failed: \" + conversion.error.code + \" \" + conversion.error.message);\n}\n```\n\nNote that the state of a AssetConversionPollerLike can be serialized by calling conversionPoller.toString().\nThat value can later be passed into beginConversion as a `resumeFrom` value, to construct a new poller\nwhich carries on from where the earlier one left off:\n\n```typescript\nconst serializedPollerString = conversionPoller.toString();\n// ...\nconst resumedPoller = client.beginConversion({ resumeFrom: serializedPollerString });\n```\n\n### List conversions\n\nYou can get information about your conversions using the `getConversions` method.\nThis method may return conversions which have yet to start, conversions which are running and conversions which have finished.\nIn this example, we just list the output URIs of successful conversions started in the last day.\n\n```typescript Snippet:ListConversions\nfor await (const conversion of client.listConversions()) {\n  if (conversion.status === \"Succeeded\") {\n    console.log(\n      `Conversion ${conversion.conversionId} succeeded: Output written to ${conversion.output?.outputAssetUrl}`\n    );\n  } else if (conversion.status === \"Failed\") {\n    console.log(\n      `Conversion ${conversion.conversionId} failed: ${conversion.error.code} ${conversion.error.message}`\n    );\n  }\n}\n```\n\n### Create a session\n\nWe assume that a RemoteRenderingClient has been constructed as described in the [Authenticate the Client](#authenticate-the-client) section.\nThe following snippet describes how to request that a new rendering session be started.\n\n```typescript Snippet:CreateASession\nconst sessionSettings: RenderingSessionSettings = {\n  maxLeaseTimeInMinutes: 4,\n  size: \"Standard\"\n};\n\n// A randomly generated UUID is a good choice for a conversionId.\nconst sessionId = uuid();\n\nconst sessionPoller: RenderingSessionPollerLike = await client.beginSession(\n  sessionId,\n  sessionSettings\n);\n```\n\nNote that the state of a RenderingSessionPollerLike can be serialized by calling toString().\nThat value can later be passed into beginSession as a `resumeFrom` value, to construct a new poller\nwhich carries on from where the earlier one left off:\n\n```typescript\nconst serializedPollerString = sessionPoller.toString();\n// ...\nconst resumedPoller = client.beginSession({ resumeFrom: serializedPollerString });\n```\n\n### Extend the lease time of a session\n\nIf a session is approaching its maximum lease time, but you want to keep it alive, you will need to make a call to increase\nits maximum lease time.\nThis example shows how to query the current properties and then extend the lease if it will expire soon.\n\n> NOTE: The runtime SDKs also offer this functionality, and in many typical scenarios, you would use them to\n> extend the session lease.\n\n```typescript Snippet:UpdateSession\n/// When the lease is within 2 minutes of expiring, extend it by 15 minutes.\nlet currentSession = await client.getSession(sessionId);\nif (currentSession.status == \"Ready\") {\n  if (\n    currentSession.maxLeaseTimeInMinutes -\n      (Date.now() - currentSession.properties.createdOn.valueOf()) / 60000 <\n    2\n  ) {\n    let newLeaseTime = currentSession.maxLeaseTimeInMinutes + 15;\n\n    await client.updateSession(sessionId, { maxLeaseTimeInMinutes: newLeaseTime });\n  }\n}\n```\n\n### List sessions\n\nYou can get information about your sessions using the `getSessions` method.\nThis method may return sessions which have yet to start and sessions which are ready.\n\n```typescript Snippet:ListSessions\nfor await (const session of client.listSessions()) {\n  console.log(`Session ${session.sessionId} is ${session.status}`);\n}\n```\n\n### Stop a session\n\nThe following code will stop a running session with given id.\n\n```typescript Snippet:StopSession\nclient.endSession(sessionId);\n```\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setlogLevel } = require(\"@azure/logger\");\n\nsetLogLevel(\"info\");\n```\n\n### Azure Remote Rendering troubleshooting\n\nFor general troubleshooting advice concerning Azure Remote Rendering, see [the Troubleshoot page](https://docs.microsoft.com/azure/remote-rendering/resources/troubleshoot) for remote rendering at docs.microsoft.com.\n\nThe client methods will throw exceptions if the request cannot be made.\nHowever, in the case of both conversions and sessions, the requests can succeed but the requested operation may not be successful.\nIn this case, no exception will be thrown, but the returned objects can be inspected to understand what happened.\n\nIf the asset in a conversion is invalid, the conversion operation will return an AssetConversion object\nwith a Failed status and carrying a RemoteRenderingServiceError with details.\nOnce the conversion service is able to process the file, a &lt;assetName&gt;.result.json file will be written to the output container.\nIf the input asset is invalid, then that file will contain a more detailed description of the problem.\n\nSimilarly, sometimes when a session is requested, the session ends up in an error state.\nThe startSessionOperation method will return a RenderingSession object, but that object will have an Error status and carry a\nRemoteRenderingServiceError with details.\n\n## Next steps\n\n- Read the [Product documentation](https://docs.microsoft.com/azure/remote-rendering/)\n- Learn about the runtime SDKs:\n  - .NET: https://docs.microsoft.com/dotnet/api/microsoft.azure.remoterendering\n  - C++: https://docs.microsoft.com/cpp/api/remote-rendering/\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for Javascript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Ftemplate%2Ftemplate%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n",
        "repo_name": "remoterendering/mixed-reality-remote-rendering",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/remoterendering/mixed-reality-remote-rendering",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# AzureReservationApi client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for AzureReservationApi client.\n\nThis API describe Azure Reservation\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/reservations/arm-reservations) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-reservations) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-reservations) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-reservations` package\n\nInstall the AzureReservationApi client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-reservations\n```\n\n### Create and authenticate a `AzureReservationAPI`\n\nTo create a client object to access the AzureReservationApi API, you will need the `endpoint` of your AzureReservationApi resource and a `credential`. The AzureReservationApi client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your AzureReservationApi resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to AzureReservationApi** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { AzureReservationAPI } = require(\"@azure/arm-reservations\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new AzureReservationAPI(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new AzureReservationAPI(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### AzureReservationAPI\n\n`AzureReservationAPI` is the primary interface for developers using the AzureReservationApi client library. Explore the methods on this client object to understand the different features of the AzureReservationApi service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Freservations%2Farm-reservations%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "reservations/arm-reservations",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/reservations/arm-reservations",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure ResourceConnectorManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure ResourceConnectorManagement client.\n\nThe appliances Rest API spec.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/resourceconnector/arm-resourceconnector) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-resourceconnector) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-resourceconnector) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-resourceconnector` package\n\nInstall the Azure ResourceConnectorManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-resourceconnector\n```\n\n### Create and authenticate a `ResourceConnectorManagementClient`\n\nTo create a client object to access the Azure ResourceConnectorManagement API, you will need the `endpoint` of your Azure ResourceConnectorManagement resource and a `credential`. The Azure ResourceConnectorManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure ResourceConnectorManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure ResourceConnectorManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { ResourceConnectorManagementClient } = require(\"@azure/arm-resourceconnector\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new ResourceConnectorManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new ResourceConnectorManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### ResourceConnectorManagementClient\n\n`ResourceConnectorManagementClient` is the primary interface for developers using the Azure ResourceConnectorManagement client library. Explore the methods on this client object to understand the different features of the Azure ResourceConnectorManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fresourceconnector%2Farm-resourceconnector%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "resourceconnector/arm-resourceconnector",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/resourceconnector/arm-resourceconnector",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure ResourceGraph client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure ResourceGraph client.\n\nAzure Resource Graph API Reference\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/resourcegraph/arm-resourcegraph) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-resourcegraph) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-resourcegraph?view=azure-node-preview) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-resourcegraph` package\n\nInstall the Azure ResourceGraph client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-resourcegraph\n```\n\n### Create and authenticate a `ResourceGraphClient`\n\nTo create a client object to access the Azure ResourceGraph API, you will need the `endpoint` of your Azure ResourceGraph resource and a `credential`. The Azure ResourceGraph client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure ResourceGraph resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure ResourceGraph** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { ResourceGraphClient } = require(\"@azure/arm-resourcegraph\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new ResourceGraphClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new ResourceGraphClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### ResourceGraphClient\n\n`ResourceGraphClient` is the primary interface for developers using the Azure ResourceGraph client library. Explore the methods on this client object to understand the different features of the Azure ResourceGraph service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fresourcegraph%2Farm-resourcegraph%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "resourcegraph/arm-resourcegraph",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/resourcegraph/arm-resourcegraph",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure MicrosoftResourceHealth client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure MicrosoftResourceHealth client.\n\nThe Resource Health Client.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/resourcehealth/arm-resourcehealth) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-resourcehealth) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-resourcehealth) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-resourcehealth` package\n\nInstall the Azure MicrosoftResourceHealth client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-resourcehealth\n```\n\n### Create and authenticate a `MicrosoftResourceHealth`\n\nTo create a client object to access the Azure MicrosoftResourceHealth API, you will need the `endpoint` of your Azure MicrosoftResourceHealth resource and a `credential`. The Azure MicrosoftResourceHealth client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure MicrosoftResourceHealth resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure MicrosoftResourceHealth** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { MicrosoftResourceHealth } = require(\"@azure/arm-resourcehealth\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new MicrosoftResourceHealth(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new MicrosoftResourceHealth(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### MicrosoftResourceHealth\n\n`MicrosoftResourceHealth` is the primary interface for developers using the Azure MicrosoftResourceHealth client library. Explore the methods on this client object to understand the different features of the Azure MicrosoftResourceHealth service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fresourcehealth%2Farm-resourcehealth%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "resourcehealth/arm-resourcehealth",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/resourcehealth/arm-resourcehealth",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Resource Mover client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure Resource Mover client.\n\nA first party Azure service orchestrating the move of Azure resources from one Azure region to another or between zones within a region.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/resourcemover/arm-resourcemover) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-resourcemover) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-resourcemover) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-resourcemover` package\n\nInstall the Azure Resource Mover client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-resourcemover\n```\n\n### Create and authenticate a `ResourceMoverServiceAPI`\n\nTo create a client object to access the Azure Resource Mover API, you will need the `endpoint` of your Azure Resource Mover resource and a `credential`. The Azure Resource Mover client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure Resource Mover resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure Resource Mover** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { ResourceMoverServiceAPI } = require(\"@azure/arm-resourcemover\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new ResourceMoverServiceAPI(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new ResourceMoverServiceAPI(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### ResourceMoverServiceAPI\n\n`ResourceMoverServiceAPI` is the primary interface for developers using the Azure Resource Mover client library. Explore the methods on this client object to understand the different features of the Azure Resource Mover service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fresourcemover%2Farm-resourcemover%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "resourcemover/arm-resourcemover",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/resourcemover/arm-resourcemover",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Subscription client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure Subscription client.\n\nAll resource groups and resources exist within subscriptions. These operation enable you get information about your subscriptions and tenants. A tenant is a dedicated instance of Azure Active Directory (Azure AD) for your organization.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/resources-subscriptions/arm-resources-subscriptions) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-resources-subscriptions) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-resources-subscriptions) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-resources-subscriptions` package\n\nInstall the Azure Subscription client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-resources-subscriptions\n```\n\n### Create and authenticate a `SubscriptionClient`\n\nTo create a client object to access the Azure Subscription API, you will need the `endpoint` of your Azure Subscription resource and a `credential`. The Azure Subscription client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure Subscription resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure Subscription** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { SubscriptionClient } = require(\"@azure/arm-resources-subscriptions\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new SubscriptionClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new SubscriptionClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### SubscriptionClient\n\n`SubscriptionClient` is the primary interface for developers using the Azure Subscription client library. Explore the methods on this client object to understand the different features of the Azure Subscription service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fresources-subscriptions%2Farm-resources-subscriptions%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "resources-subscriptions/arm-resources-subscriptions",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/resources-subscriptions/arm-resources-subscriptions",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure ResourceManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure ResourceManagement client.\n\nProvides operations for working with resources and resource groups.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/resources/arm-resources-profile-2020-09-01-hybrid) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-resources-profile-2020-09-01-hybrid) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-resources-profile-2020-09-01-hybrid) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-resources-profile-2020-09-01-hybrid` package\n\nInstall the Azure ResourceManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-resources-profile-2020-09-01-hybrid\n```\n\n### Create and authenticate a `ResourceManagementClient`\n\nTo create a client object to access the Azure ResourceManagement API, you will need the `endpoint` of your Azure ResourceManagement resource and a `credential`. The Azure ResourceManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure ResourceManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure ResourceManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { ResourceManagementClient } = require(\"@azure/arm-resources-profile-2020-09-01-hybrid\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new ResourceManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new ResourceManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### ResourceManagementClient\n\n`ResourceManagementClient` is the primary interface for developers using the Azure ResourceManagement client library. Explore the methods on this client object to understand the different features of the Azure ResourceManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fresources%2Farm-resources-profile-2020-09-01-hybrid%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "resources/arm-resources-profile-2020-09-01-hybrid",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/resources/arm-resources-profile-2020-09-01-hybrid",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure ResourceManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure ResourceManagement client.\n\nProvides operations for working with resources and resource groups.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/resources/arm-resources) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-resources) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-resources) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-resources` package\n\nInstall the Azure ResourceManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-resources\n```\n\n### Create and authenticate a `ResourceManagementClient`\n\nTo create a client object to access the Azure ResourceManagement API, you will need the `endpoint` of your Azure ResourceManagement resource and a `credential`. The Azure ResourceManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure ResourceManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure ResourceManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { ResourceManagementClient } = require(\"@azure/arm-resources\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new ResourceManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new ResourceManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### ResourceManagementClient\n\n`ResourceManagementClient` is the primary interface for developers using the Azure ResourceManagement client library. Explore the methods on this client object to understand the different features of the Azure ResourceManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fresources%2Farm-resources%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "resources/arm-resources",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/resources/arm-resources",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Schema Registry Avro Serializer client library for JavaScript\n\nAzure Schema Registry is a schema repository service hosted by Azure Event Hubs,\nproviding schema storage, versioning, and management. This package provides an\nAvro serializer capable of serializing and deserializing payloads containing\nAvro-serialized data.\n\nKey links:\n\n- [Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/schemaregistry/schema-registry-avro)\n- [Package (npm)](https://www.npmjs.com/package/@azure/schema-registry-avro)\n- [API Reference Documentation](https://docs.microsoft.com/javascript/api/@azure/schema-registry-avro)\n- [Samples](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/schemaregistry/schema-registry-avro/samples)\n\n## Getting started\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub]\n- An existing [Schema Registry resource](https://aka.ms/schemaregistry)\n\n### Install the `@azure/schema-registry-avro` package\n\nInstall the Azure Text Analytics client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/schema-registry-avro\n```\n\n## Key concepts\n\n### AvroSerializer\n\nProvides API to serialize to and deserialize from Avro Binary Encoding wrapped in a message\nwith a content type field containing the schema ID. Uses\n`SchemaRegistryClient` from the [@azure/schema-registry](https://www.npmjs.com/package/@azure/schema-registry) package\nto get schema IDs from schema definition or vice versa. The provided API has internal cache to avoid calling the schema registry service when possible.\n\n### Messages\n\nBy default, the serializer will create messages structured as follows:\n\n- `data`: a byte array containing data in the Avro Binary Encoding. Note that it\n  is NOT Avro Object Container File. The latter includes the schema and creating\n  it defeats the purpose of using this serializer to move the schema out of the\n  message payload and into the schema registry.\n\n- `contentType`: a string of the following format `avro/binary+<Schema ID>` where\n  the `avro/binary` part signals that this message has an Avro-serialized payload\n  and the `<Schema Id>` part is the Schema ID the Schema Registry service assigned\n  to the schema used to serialize this payload.\n\nNot all messaging services are supporting the same message structure. To enable\nintegration with such services, the serializer can act on custom message structures\nby setting the `messageAdapter` option in the constructor with a corresponding\nmessage producer and consumer. Azure messaging client libraries export default\nadapters for their message types.\n\n## Examples\n\n### Serialize and deserialize an `@azure/event-hubs`'s `EventData`\n\n```javascript\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { createEventDataAdapter } = require(\"@azure/event-hubs\");\nconst { SchemaRegistryClient } = require(\"@azure/schema-registry\");\nconst { AvroSerializer } = require(\"@azure/schema-registry-avro\");\n\nconst client = new SchemaRegistryClient(\n  \"<fully qualified namespace>\",\n  new DefaultAzureCredential()\n);\nconst serializer = new AvroSerializer(client, {\n  groupName: \"<group>\",\n  messageAdapter: createEventDataAdapter(),\n});\n\n// Example Avro schema\nconst schema = JSON.stringify({\n  type: \"record\",\n  name: \"Rating\",\n  namespace: \"my.example\",\n  fields: [{ name: \"score\", type: \"int\" }],\n});\n\n// Example value that matches the Avro schema above\nconst value = { score: 42 };\n\n// Serialize value to a message\nconst message = await serializer.serialize(value, schema);\n\n// Deserialize a message to value\nconst deserializedValue = await serializer.deserialize(message);\n```\n\n## Troubleshooting\n\nThe Avro serializer communicates with the [Schema Registry][schema_registry] service as needed to register or query schemas and those service calls could throw a [RestError][resterror]. Furthermore, errors of type `Error` will be thrown when serialization or deserialization fails. The `cause` property will contain the underlying error that was thrown from the Avro implementation library.\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to\nsee a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment\nvariable to `info`. Alternatively, logging can be enabled at runtime by calling\n`setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\n\nsetLogLevel(\"info\");\n```\n\n## Next steps\n\nPlease take a look at the\n[samples](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/schemaregistry/schema-registry-avro/samples)\ndirectory for detailed examples on how to use this library.\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require\nyou to agree to a Contributor License Agreement (CLA) declaring that you have\nthe right to, and actually do, grant us the rights to use your contribution. For\ndetails, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether\nyou need to provide a CLA and decorate the PR appropriately (e.g., label,\ncomment). Simply follow the instructions provided by the bot. You will only need\nto do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of\nConduct](https://opensource.microsoft.com/codeofconduct/). For more information\nsee the [Code of Conduct\nFAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact\n[opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional\nquestions or comments.\n\nIf you'd like to contribute to this library, please read the [contributing\nguide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to\nlearn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for Javascript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fschemaregistry%2Fschema-registry-avro%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n[resterror]: https://docs.microsoft.com/javascript/api/@azure/core-rest-pipeline/resterror?view=azure-node-latest\n[schema_registry]: https://docs.microsoft.com/javascript/api/overview/azure/schema-registry-readme?view=azure-node-latest",
        "repo_name": "schemaregistry/schema-registry-avro",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/schemaregistry/schema-registry-avro",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Schema Registry client library for JavaScript\n\nAzure Schema Registry is a schema repository service hosted by Azure Event Hubs,\nproviding schema storage, versioning, and management. The registry is leveraged\nby serializers to reduce payload size while describing payload structure with\nschema identifiers rather than full schemas.\n\nKey links:\n\n- [Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/schemaregistry/schema-registry)\n- [Package (npm)](https://www.npmjs.com/package/@azure/schema-registry)\n- [API Reference Documentation](https://docs.microsoft.com/javascript/api/@azure/schema-registry)\n- [Samples](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/schemaregistry/schema-registry/samples)\n\n## Getting started\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub]\n- An existing [Schema Registry resource](https://aka.ms/schemaregistry)\n\n### Install the `@azure/schema-registry` package\n\nInstall the Azure Text Analytics client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/schema-registry\n```\n\n### Create and authenticate a `SchemaRegistryClient`\n\nTo create a client object to access the Schema Registry API, you will need the\nfully qualified namespace of your Schema Registry resource and a `credential`. The Schema\nRegistry client uses Azure Active Directory credentials to authenticate.\n\nYou can authenticate with Azure Active Directory using the [Azure Identity\nlibrary][azure_identity]. To use the\n[DefaultAzureCredential][defaultazurecredential] provider shown below, or other\ncredential providers provided with the Azure SDK, please install the\n`@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nSet the values of the client ID, tenant ID, and client secret of the AAD\napplication as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`,\n`AZURE_CLIENT_SECRET`.\n\n```js\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { SchemaRegistryClient } = require(\"@azure/schema-registry\");\n\nconst client = new SchemaRegistryClient(\"<fullyQualifiedNamespace>\", new DefaultAzureCredential());\n```\n\n## Key concepts\n\n### SchemaRegistryClient\n\n`SchemaRegistryClient` provides the API for storing and retrieving schemas in\nschema registry.\n\n## Examples\n\n### Register a schema\n\n```javascript\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { SchemaRegistryClient } = require(\"@azure/schema-registry\");\n\nconst client = new SchemaRegistryClient(\"<fullyQualifiedNamespace>\", new DefaultAzureCredential());\n\nconst description = {\n  name: \"<name>\",\n  groupName: \"<group name>\",\n  format: \"<schema format>\",\n  definition: \"<schema definition>\"\n}\n\nconst registered = await client.registerSchema(description);\nconsole.log(registered.id);\n```\n\n### Get ID of existing schema\n\n```javascript\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { SchemaRegistryClient } = require(\"@azure/schema-registry\");\n\nconst client = new SchemaRegistryClient(\"<fullyQualifiedNamespace>\", new DefaultAzureCredential());\n\nconst description = {\n  name: \"<name>\",\n  groupName: \"<group name>\",\n  format: \"<schema format>\",\n  definition: \"<schema definition>\"\n}\n\nconst found = await client.getSchemaProperties(description);\nif (found) {\n  console.log(`Got schema ID=${found.id}`);\n}\n```\n\n### Get definition of existing schema by ID\n\n```javascript\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { SchemaRegistryClient } = require(\"@azure/schema-registry\");\n\nconst client = new SchemaRegistryClient(\"<fullyQualifiedNamespace>\", new DefaultAzureCredential());\nconst foundSchema = await client.getSchema(\"<id>\");\nif (foundSchema) {\n  console.log(`Got schema definition=${foundSchema.definition}`);\n}\n```\n\n### Get definition of existing schema by version\n\n```javascript\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { SchemaRegistryClient } = require(\"@azure/schema-registry\");\n\nconst client = new SchemaRegistryClient(\"<fullyQualifiedNamespace>\", new DefaultAzureCredential());\nconst foundSchema = await client.getSchema(\"<schema name>\", \"<group name>\", version);\nif (foundSchema) {\n  console.log(`Got schema definition=${foundSchema.definition}`);\n}\n```\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to\nsee a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment\nvariable to `info`. Alternatively, logging can be enabled at runtime by calling\n`setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\n\nsetLogLevel(\"info\");\n```\n\n## Next steps\n\nPlease take a look at the\n[samples](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/schemaregistry/schema-registry/samples)\ndirectory for detailed examples on how to use this library.\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require\nyou to agree to a Contributor License Agreement (CLA) declaring that you have\nthe right to, and actually do, grant us the rights to use your contribution. For\ndetails, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether\nyou need to provide a CLA and decorate the PR appropriately (e.g., label,\ncomment). Simply follow the instructions provided by the bot. You will only need\nto do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of\nConduct](https://opensource.microsoft.com/codeofconduct/). For more information\nsee the [Code of Conduct\nFAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact\n[opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional\nquestions or comments.\n\nIf you'd like to contribute to this library, please read the [contributing\nguide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to\nlearn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for Javascript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fschemaregistry%2Fschema-registry%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "schemaregistry/schema-registry",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/schemaregistry/schema-registry",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Scvmm client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure Scvmm client.\n\nThe Microsoft.ScVmm Rest API spec.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/scvmm/arm-scvmm) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-scvmm) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-scvmm?view=azure-node-preview) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-scvmm` package\n\nInstall the Azure Scvmm client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-scvmm\n```\n\n### Create and authenticate a `Scvmm`\n\nTo create a client object to access the Azure Scvmm API, you will need the `endpoint` of your Azure Scvmm resource and a `credential`. The Azure Scvmm client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure Scvmm resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure Scvmm** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { Scvmm } = require(\"@azure/arm-scvmm\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new Scvmm(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new Scvmm(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### Scvmm\n\n`Scvmm` is the primary interface for developers using the Azure Scvmm client library. Explore the methods on this client object to understand the different features of the Azure Scvmm service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fscvmm%2Farm-scvmm%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "scvmm/arm-scvmm",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/scvmm/arm-scvmm",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure SearchManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure SearchManagement client.\n\nClient that can be used to manage Azure Cognitive Search services and API keys.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/search/arm-search) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-search) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-search) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-search` package\n\nInstall the Azure SearchManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-search\n```\n\n### Create and authenticate a `SearchManagementClient`\n\nTo create a client object to access the Azure SearchManagement API, you will need the `endpoint` of your Azure SearchManagement resource and a `credential`. The Azure SearchManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure SearchManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure SearchManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { SearchManagementClient } = require(\"@azure/arm-search\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new SearchManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new SearchManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### SearchManagementClient\n\n`SearchManagementClient` is the primary interface for developers using the Azure SearchManagement client library. Explore the methods on this client object to understand the different features of the Azure SearchManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fsearch%2Farm-search%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "search/arm-search",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/search/arm-search",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Cognitive Search client library for JavaScript\n\n[Azure Cognitive Search](https://docs.microsoft.com/azure/search/) is a search-as-a-service cloud solution that gives developers APIs and tools for adding a rich search experience over private, heterogeneous content in web, mobile, and enterprise applications.\n\nThe Azure Cognitive Search service is well suited for the following application scenarios:\n\n- Consolidate varied content types into a single searchable index. To populate an index, you can push JSON documents that contain your content, or if your data is already in Azure, create an indexer to pull in data automatically.\n- Attach skillsets to an indexer to create searchable content from images and large text documents. A skillset leverages AI from Cognitive Services for built-in OCR, entity recognition, key phrase extraction, language detection, text translation, and sentiment analysis. You can also add custom skills to integrate external processing of your content during data ingestion.\n- In a search client application, implement query logic and user experiences similar to commercial web search engines.\n\nUse the @azure/search-documents client library to:\n\n- Submit queries for simple and advanced query forms that include fuzzy search, wildcard search, regular expressions.\n- Implement filtered queries for faceted navigation, geospatial search, or to narrow results based on filter criteria.\n- Create and manage search indexes.\n- Upload and update documents in the search index.\n- Create and manage indexers that pull data from Azure into an index.\n- Create and manage skillsets that add AI enrichment to data ingestion.\n- Create and manage analyzers for advanced text analysis or multi-lingual content.\n- Optimize results through scoring profiles to factor in business logic or freshness.\n\nKey links:\n\n- [Source code](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/search/search-documents/)\n- [Package (NPM)](https://www.npmjs.com/package/@azure/search-documents)\n- [API reference documentation](https://docs.microsoft.com/javascript/api/@azure/search-documents)\n- [REST API documentation](https://docs.microsoft.com/rest/api/searchservice/)\n- [Product documentation](https://docs.microsoft.com/azure/search/)\n- [Samples](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/search/search-documents/samples)\n\n## Getting started\n\n### Install the `@azure/search-documents` package\n\n```bash\nnpm install @azure/search-documents\n```\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge, and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription](https://azure.microsoft.com/free/)\n- A [Search service][create_search_service_docs]\n\nTo create a new search service, you can use the [Azure portal][create_search_service_docs], [Azure PowerShell][create_search_service_ps], or the [Azure CLI][create_search_service_cli]. Here's an example using the Azure CLI to create a free instance for getting started:\n\n```Powershell\naz search service create --name <mysearch> --resource-group <mysearch-rg> --sku free --location westus\n```\n\nSee [choosing a pricing tier](https://docs.microsoft.com/azure/search/search-sku-tier) for more information about available options.\n\n### Authenticate the client\n\nAll requests to a search service need an API key that was generated specifically for your service. [The API key is the sole mechanism for authenticating access to your search service endpoint.](https://docs.microsoft.com/azure/search/search-security-api-keys)\n\nYou can obtain your api-key from the [Azure portal](https://portal.azure.com/) or via the Azure CLI:\n\n```PowerShell\naz search admin-key show --resource-group <your-resource-group-name> --service-name <your-resource-name>\n```\n\nAlternatively, you can get the endpoint and Admin Key from the resource information in the [Azure Portal][azure_portal].\n\nThere are two types of keys used to access your search service: **admin** _(read-write)_ and **query** _(read-only)_ keys. Restricting access and operations in client apps is essential to safeguarding the search assets on your service. Always use a query key rather than an admin key for any query originating from a client app.\n\n_Note: The example Azure CLI snippet above retrieves an admin key so it's easier to get started exploring APIs, but it should be managed carefully._\n\nOnce you have an api-key, you can use it as follows:\n\n```js\nconst {\n  SearchClient,\n  SearchIndexClient,\n  SearchIndexerClient,\n  AzureKeyCredential,\n} = require(\"@azure/search-documents\");\n\n// To query and manipulate documents\nconst searchClient = new SearchClient(\n  \"<endpoint>\",\n  \"<indexName>\",\n  new AzureKeyCredential(\"<apiKey>\")\n);\n\n// To manage indexes and synonymmaps\nconst indexClient = new SearchIndexClient(\"<endpoint>\", new AzureKeyCredential(\"<apiKey>\"));\n\n// To manage indexers, datasources and skillsets\nconst indexerClient = new SearchIndexerClient(\"<endpoint>\", new AzureKeyCredential(\"<apiKey>\"));\n```\n\n### Authenticate in a National Cloud\n\nTo authenticate in a [National Cloud](https://docs.microsoft.com/azure/active-directory/develop/authentication-national-cloud), you will need to make the following additions to your client configuration:\n\n- Set the `Audience` in `SearchClientOptions`\n\n```js\nconst {\n  SearchClient,\n  SearchIndexClient,\n  SearchIndexerClient,\n  AzureKeyCredential,\n  KnownSearchAudience,\n} = require(\"@azure/search-documents\");\n\n// To query and manipulate documents\nconst searchClient = new SearchClient(\n  \"<endpoint>\",\n  \"<indexName>\",\n  new AzureKeyCredential(\"<apiKey>\"),\n  {\n    audience: KnownSearchAudience.AzureChina,\n  }\n);\n\n// To manage indexes and synonymmaps\nconst indexClient = new SearchIndexClient(\"<endpoint>\", new AzureKeyCredential(\"<apiKey>\"), {\n  audience: KnownSearchAudience.AzureChina,\n});\n\n// To manage indexers, datasources and skillsets\nconst indexerClient = new SearchIndexerClient(\"<endpoint>\", new AzureKeyCredential(\"<apiKey>\"), {\n  audience: KnownSearchAudience.AzureChina,\n});\n```\n\n## Key concepts\n\nAn Azure Cognitive Search service contains one or more indexes that provide persistent storage of searchable data in the form of JSON documents. _(If you're brand new to search, you can make a very rough analogy between indexes and database tables.)_ The @azure/search-documents client library\nexposes operations on these resources through three main client types.\n\n- `SearchClient` helps with:\n  - [Searching](https://docs.microsoft.com/azure/search/search-lucene-query-architecture) your indexed documents using [rich queries](https://docs.microsoft.com/azure/search/search-query-overview) and [powerful data shaping](https://docs.microsoft.com/azure/search/search-filters)\n  - [Autocompleting](https://docs.microsoft.com/rest/api/searchservice/autocomplete) partially typed search terms based on documents in the index\n  - [Suggesting](https://docs.microsoft.com/rest/api/searchservice/suggestions) the most likely matching text in documents as a user types\n  - [Adding, Updating or Deleting Documents](https://docs.microsoft.com/rest/api/searchservice/addupdate-or-delete-documents) documents from an index\n- `SearchIndexClient` allows you to:\n  - [Create, delete, update, or configure a search index](https://docs.microsoft.com/rest/api/searchservice/index-operations)\n  - [Declare custom synonym maps to expand or rewrite queries](https://docs.microsoft.com/rest/api/searchservice/synonym-map-operations)\n- `SearchIndexerClient` allows you to:\n  - [Start indexers to automatically crawl data sources](https://docs.microsoft.com/rest/api/searchservice/indexer-operations)\n  - [Define AI powered Skillsets to transform and enrich your data](https://docs.microsoft.com/rest/api/searchservice/skillset-operations)\n\n**Note**: These clients cannot function in the browser because the APIs it calls do not have support for Cross-Origin Resource Sharing (CORS).\n\n## TypeScript/JavaScript specific concepts\n\n### Documents\n\nAn item stored inside a search index. The shape of this document is described in the index using `Field`s. Each Field has a name, a datatype, and additional metadata such as if it is searchable or filterable.\n\n### Pagination\n\nTypically you will only wish to [show a subset of search results](https://docs.microsoft.com/azure/search/search-pagination-page-layout#total-hits-and-page-counts) to a user at one time. To support this, you can use the `top`, `skip` and `includeTotalCount` parameters to provide a paged experience on top of search results.\n\n### Document field encoding\n\n[Supported data types](https://docs.microsoft.com/rest/api/searchservice/Supported-data-types) in an index are mapped to JSON types in API requests/responses. The JS client library keeps these mostly the same, with some exceptions:\n\n- `Edm.DateTimeOffset` is converted to a JS `Date`.\n- `Edm.GeographyPoint` is converted to a `GeographyPoint` type exported by the client library.\n- Special values of the `number` type (NaN, Infinity, -Infinity) are serialized as strings in the REST API, but are converted back to `number` by the client library.\n\n**Note**: Data types are converted based on value, not the field type in the index schema. This means that if you have an ISO8601 Date string (e.g. \"2020-03-06T18:48:27.896Z\") as the value of a field, it will be converted to a Date regardless of how you stored it in your schema.\n\n## Examples\n\nThe following examples demonstrate the basics - please [check out our samples](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/search/search-documents/samples) for much more.\n\n- [Creating an index](#create-an-index)\n- [Retrieving a specific document from your index](#retrieve-a-specific-document-from-an-index)\n- [Adding documents to your index](#adding-documents-into-an-index)\n- [Perform a search on documents](#perform-a-search-on-documents)\n  - [Querying with TypeScript](#querying-with-typescript)\n  - [Querying with OData filters](#querying-with-odata-filters)\n  - [Querying with facets](#querying-with-facets)\n\n### Create an Index\n\n```js\nconst { SearchIndexClient, AzureKeyCredential } = require(\"@azure/search-documents\");\n\nconst client = new SearchIndexClient(\"<endpoint>\", new AzureKeyCredential(\"<apiKey>\"));\n\nasync function main() {\n  const result = await client.createIndex({\n    name: \"example-index\",\n    fields: [\n      {\n        type: \"Edm.String\",\n        name: \"id\",\n        key: true,\n      },\n      {\n        type: \"Edm.Double\",\n        name: \"awesomenessLevel\",\n        sortable: true,\n        filterable: true,\n        facetable: true,\n      },\n      {\n        type: \"Edm.String\",\n        name: \"description\",\n        searchable: true,\n      },\n      {\n        type: \"Edm.ComplexType\",\n        name: \"details\",\n        fields: [\n          {\n            type: \"Collection(Edm.String)\",\n            name: \"tags\",\n            searchable: true,\n          },\n        ],\n      },\n      {\n        type: \"Edm.Int32\",\n        name: \"hiddenWeight\",\n        hidden: true,\n      },\n    ],\n  });\n\n  console.log(result);\n}\n\nmain();\n```\n\n### Retrieve a specific document from an index\n\nA specific document can be retrieved by its primary key value:\n\n```js\nconst { SearchClient, AzureKeyCredential } = require(\"@azure/search-documents\");\n\nconst client = new SearchClient(\"<endpoint>\", \"<indexName>\", new AzureKeyCredential(\"<apiKey>\"));\n\nasync function main() {\n  const result = await client.getDocument(\"1234\");\n  console.log(result);\n}\n\nmain();\n```\n\n### Adding documents into an index\n\nYou can upload multiple documents into index inside a batch:\n\n```js\nconst { SearchClient, AzureKeyCredential } = require(\"@azure/search-documents\");\n\nconst client = new SearchClient(\"<endpoint>\", \"<indexName>\", new AzureKeyCredential(\"<apiKey>\"));\n\nasync function main() {\n  const uploadResult = await client.uploadDocuments([\n    // JSON objects matching the shape of the client's index\n    {},\n    {},\n    {},\n  ]);\n  for (const result of uploadResult.results) {\n    console.log(`Uploaded ${result.key}; succeeded? ${result.succeeded}`);\n  }\n}\n\nmain();\n```\n\n### Perform a search on documents\n\nTo list all results of a particular query, you can use `search` with a search string that uses [simple query syntax](https://docs.microsoft.com/azure/search/query-simple-syntax):\n\n```js\nconst { SearchClient, AzureKeyCredential } = require(\"@azure/search-documents\");\n\nconst client = new SearchClient(\"<endpoint>\", \"<indexName>\", new AzureKeyCredential(\"<apiKey>\"));\n\nasync function main() {\n  const searchResults = await client.search(\"wifi -luxury\");\n  for await (const result of searchResults.results) {\n    console.log(result);\n  }\n}\n\nmain();\n```\n\nFor a more advanced search that uses [Lucene syntax](https://docs.microsoft.com/azure/search/query-lucene-syntax), specify `queryType` to be `full`:\n\n```js\nconst { SearchClient, AzureKeyCredential } = require(\"@azure/search-documents\");\n\nconst client = new SearchClient(\"<endpoint>\", \"<indexName>\", new AzureKeyCredential(\"<apiKey>\"));\n\nasync function main() {\n  const searchResults = await client.search('Category:budget AND \"recently renovated\"^3', {\n    queryType: \"full\",\n    searchMode: \"all\",\n  });\n  for await (const result of searchResults.results) {\n    console.log(result);\n  }\n}\n\nmain();\n```\n\n#### Querying with TypeScript\n\nIn TypeScript `SearchClient` takes a generic parameter that is the model shape of your index documents. This allows you to perform strongly typed lookup of fields returned in results. TypeScript is also able to check for fields returned when specifying a `select` parameter.\n\n```ts\nimport { SearchClient, AzureKeyCredential } from \"@azure/search-documents\";\n\n// An example schema for documents in the index\ninterface Hotel {\n  HotelId: string;\n  HotelName: string;\n  Description: string;\n  ParkingIncluded: boolean;\n  LastRenovationDate: Date;\n  Rating: number;\n}\n\nconst client = new SearchClient<Hotel>(\n  \"<endpoint>\",\n  \"<indexName>\",\n  new AzureKeyCredential(\"<apiKey>\")\n);\n\nasync function main() {\n  const searchResults = await client.search(\"wifi -luxury\", {\n    // Only fields in Hotel can be added to this array.\n    // TS will complain if one is misspelled.\n    select: [\"HotelId\", \"HotelName\", \"Rating\"],\n  });\n\n  for await (const result of searchResults.results) {\n    // result.document has HotelId, HotelName, and Rating.\n    // Trying to access result.document.Description would emit a TS error.\n    console.log(result.document.HotelName);\n  }\n}\n\nmain();\n```\n\n#### Querying with OData filters\n\nUsing the `filter` query parameter allows you to query an index using the syntax of an [OData \\$filter expression](https://docs.microsoft.com/azure/search/search-query-odata-filter).\n\n```js\nconst { SearchClient, AzureKeyCredential, odata } = require(\"@azure/search-documents\");\n\nconst client = new SearchClient(\"<endpoint>\", \"<indexName>\", new AzureKeyCredential(\"<apiKey>\"));\n\nasync function main() {\n  const baseRateMax = 200;\n  const ratingMin = 4;\n  const searchResults = await client.search(\"WiFi\", {\n    filter: odata`Rooms/any(room: room/BaseRate lt ${baseRateMax}) and Rating ge ${ratingMin}`,\n    orderBy: [\"Rating desc\"],\n    select: [\"HotelId\", \"HotelName\", \"Rating\"],\n  });\n  for await (const result of searchResults.results) {\n    // Each result will have \"HotelId\", \"HotelName\", and \"Rating\"\n    // in addition to the standard search result property \"score\"\n    console.log(result);\n  }\n}\n\nmain();\n```\n\n#### Querying with facets\n\n[Facets](https://docs.microsoft.com/azure/search/search-filters-facets) are used to help a user of your application refine a search along pre-configured dimensions. [Facet syntax](https://docs.microsoft.com/rest/api/searchservice/search-documents#facetstring-zero-or-more) provides the options to sort and bucket facet values.\n\n```js\nconst { SearchClient, AzureKeyCredential } = require(\"@azure/search-documents\");\n\nconst client = new SearchClient(\"<endpoint>\", \"<indexName>\", new AzureKeyCredential(\"<apiKey>\"));\n\nasync function main() {\n  const searchResults = await client.search(\"WiFi\", {\n    facets: [\"Category,count:3,sort:count\", \"Rooms/BaseRate,interval:100\"],\n  });\n  console.log(searchResults.facets);\n  // Output will look like:\n  // {\n  //   'Rooms/BaseRate': [\n  //     { count: 16, value: 0 },\n  //     { count: 17, value: 100 },\n  //     { count: 17, value: 200 }\n  //   ],\n  //   Category: [\n  //     { count: 5, value: 'Budget' },\n  //     { count: 5, value: 'Luxury' },\n  //     { count: 5, value: 'Resort and Spa' }\n  //   ]\n  // }\n}\n\nmain();\n```\n\nWhen retrieving results, a `facets` property will be available that will indicate the number of results that fall into each facet bucket. This can be used to drive refinement (e.g. issuing a follow-up search that filters on the `Rating` being greater than or equal to 3 and less than 4.)\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nimport { setLogLevel } from \"@azure/logger\";\n\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\n- [Go further with search-documents and our samples](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/search/search-documents/samples)\n- [Watch a demo or deep dive video](https://azure.microsoft.com/resources/videos/index/?services=search)\n- [Read more about the Azure Cognitive Search service](https://docs.microsoft.com/azure/search/search-what-is-azure-search)\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [cla.microsoft.com][cla].\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc].For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n## Related projects\n\n- [Microsoft Azure SDK for Javascript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fsearch%2Fsearch%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[search_resource]: https://docs.microsoft.com/azure/search/search-create-service-portal\n[azure_portal]: https://portal.azure.com\n[cognitive_auth]: https://docs.microsoft.com/azure/cognitive-services/authentication\n[create_search_service_docs]: https://docs.microsoft.com/azure/search/search-create-service-portal\n[create_search_service_ps]: https://docs.microsoft.com/azure/search/search-manage-powershell#create-or-delete-a-service\n[create_search_service_cli]: https://docs.microsoft.com/cli/azure/search/service?view=azure-cli-latest#az-search-service-create\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n",
        "repo_name": "search/search-documents",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/search/search-documents",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure SecurityCenter client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure SecurityCenter client.\n\nAPI spec for Microsoft.Security (Azure Security Center) resource provider\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/security/arm-security) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-security) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-security?view=azure-node-preview) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-security` package\n\nInstall the Azure SecurityCenter client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-security\n```\n\n### Create and authenticate a `SecurityCenter`\n\nTo create a client object to access the Azure SecurityCenter API, you will need the `endpoint` of your Azure SecurityCenter resource and a `credential`. The Azure SecurityCenter client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure SecurityCenter resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure SecurityCenter** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { SecurityCenter } = require(\"@azure/arm-security\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new SecurityCenter(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new SecurityCenter(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### SecurityCenter\n\n`SecurityCenter` is the primary interface for developers using the Azure SecurityCenter client library. Explore the methods on this client object to understand the different features of the Azure SecurityCenter service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fsecurity%2Farm-security%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "security/arm-security",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/security/arm-security",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure MicrosoftSecurityDevOps client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure MicrosoftSecurityDevOps client.\n\nREST APIs for Defender for DevOps\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/securitydevops/arm-securitydevops) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-securitydevops) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-securitydevops?view=azure-node-preview) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-securitydevops` package\n\nInstall the Azure MicrosoftSecurityDevOps client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-securitydevops\n```\n\n### Create and authenticate a `MicrosoftSecurityDevOps`\n\nTo create a client object to access the Azure MicrosoftSecurityDevOps API, you will need the `endpoint` of your Azure MicrosoftSecurityDevOps resource and a `credential`. The Azure MicrosoftSecurityDevOps client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure MicrosoftSecurityDevOps resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure MicrosoftSecurityDevOps** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { MicrosoftSecurityDevOps } = require(\"@azure/arm-securitydevops\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new MicrosoftSecurityDevOps(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new MicrosoftSecurityDevOps(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### MicrosoftSecurityDevOps\n\n`MicrosoftSecurityDevOps` is the primary interface for developers using the Azure MicrosoftSecurityDevOps client library. Explore the methods on this client object to understand the different features of the Azure MicrosoftSecurityDevOps service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fsecuritydevops%2Farm-securitydevops%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "securitydevops/arm-securitydevops",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/securitydevops/arm-securitydevops",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure SecurityInsights client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure SecurityInsights client.\n\nAPI spec for Microsoft.SecurityInsights (Azure Security Insights) resource provider\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/securityinsight/arm-securityinsight) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-securityinsight) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-securityinsight?view=azure-node-preview) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-securityinsight` package\n\nInstall the Azure SecurityInsights client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-securityinsight\n```\n\n### Create and authenticate a `SecurityInsights`\n\nTo create a client object to access the Azure SecurityInsights API, you will need the `endpoint` of your Azure SecurityInsights resource and a `credential`. The Azure SecurityInsights client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure SecurityInsights resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure SecurityInsights** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { SecurityInsights } = require(\"@azure/arm-securityinsight\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new SecurityInsights(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new SecurityInsights(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### SecurityInsights\n\n`SecurityInsights` is the primary interface for developers using the Azure SecurityInsights client library. Explore the methods on this client object to understand the different features of the Azure SecurityInsights service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fsecurityinsight%2Farm-securityinsight%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "securityinsight/arm-securityinsight",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/securityinsight/arm-securityinsight",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure HelpRP client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure HelpRP client.\n\nHelp RP provider\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/selfhelp/arm-selfhelp) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-selfhelp) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-selfhelp?view=azure-node-preview) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-selfhelp` package\n\nInstall the Azure HelpRP client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-selfhelp\n```\n\n### Create and authenticate a `HelpRP`\n\nTo create a client object to access the Azure HelpRP API, you will need the `endpoint` of your Azure HelpRP resource and a `credential`. The Azure HelpRP client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure HelpRP resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure HelpRP** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { HelpRP } = require(\"@azure/arm-selfhelp\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst client = new HelpRP(new DefaultAzureCredential());\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new HelpRP(credential);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### HelpRP\n\n`HelpRP` is the primary interface for developers using the Azure HelpRP client library. Explore the methods on this client object to understand the different features of the Azure HelpRP service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fselfhelp%2Farm-selfhelp%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "selfhelp/arm-selfhelp",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/selfhelp/arm-selfhelp",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure MicrosoftSerialConsole client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure MicrosoftSerialConsole client.\n\nThe Azure Serial Console allows you to access the serial console of a Virtual Machine or VM scale set instance\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/serialconsole/arm-serialconsole) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-serialconsole) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-serialconsole) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-serialconsole` package\n\nInstall the Azure MicrosoftSerialConsole client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-serialconsole\n```\n\n### Create and authenticate a `MicrosoftSerialConsoleClient`\n\nTo create a client object to access the Azure MicrosoftSerialConsole API, you will need the `endpoint` of your Azure MicrosoftSerialConsole resource and a `credential`. The Azure MicrosoftSerialConsole client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure MicrosoftSerialConsole resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure MicrosoftSerialConsole** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { MicrosoftSerialConsoleClient } = require(\"@azure/arm-serialconsole\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new MicrosoftSerialConsoleClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new MicrosoftSerialConsoleClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### MicrosoftSerialConsoleClient\n\n`MicrosoftSerialConsoleClient` is the primary interface for developers using the Azure MicrosoftSerialConsole client library. Explore the methods on this client object to understand the different features of the Azure MicrosoftSerialConsole service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fserialconsole%2Farm-serialconsole%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "serialconsole/arm-serialconsole",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/serialconsole/arm-serialconsole",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure ServiceMap client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure ServiceMap client.\n\nService Map API Reference\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/service-map/arm-servicemap) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-servicemap) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-servicemap?view=azure-node-preview) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-servicemap` package\n\nInstall the Azure ServiceMap client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-servicemap\n```\n\n### Create and authenticate a `ServiceMap`\n\nTo create a client object to access the Azure ServiceMap API, you will need the `endpoint` of your Azure ServiceMap resource and a `credential`. The Azure ServiceMap client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure ServiceMap resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure ServiceMap** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { ServiceMap } = require(\"@azure/arm-servicemap\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new ServiceMap(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new ServiceMap(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### ServiceMap\n\n`ServiceMap` is the primary interface for developers using the Azure ServiceMap client library. Explore the methods on this client object to understand the different features of the Azure ServiceMap service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fservice-map%2Farm-servicemap%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "service-map/arm-servicemap",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/service-map/arm-servicemap",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure ServiceBusManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure ServiceBusManagement client.\n\nAzure Service Bus client for managing Namespace\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/servicebus/arm-servicebus) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-servicebus) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-servicebus?view=azure-node-preview) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-servicebus` package\n\nInstall the Azure ServiceBusManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-servicebus\n```\n\n### Create and authenticate a `ServiceBusManagementClient`\n\nTo create a client object to access the Azure ServiceBusManagement API, you will need the `endpoint` of your Azure ServiceBusManagement resource and a `credential`. The Azure ServiceBusManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure ServiceBusManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure ServiceBusManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { ServiceBusManagementClient } = require(\"@azure/arm-servicebus\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new ServiceBusManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new ServiceBusManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### ServiceBusManagementClient\n\n`ServiceBusManagementClient` is the primary interface for developers using the Azure ServiceBusManagement client library. Explore the methods on this client object to understand the different features of the Azure ServiceBusManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fservicebus%2Farm-servicebus%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "servicebus/arm-servicebus",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/servicebus/arm-servicebus",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Service Bus client library for JavaScript\n\n[Azure Service Bus](https://azure.microsoft.com/services/service-bus/) is a highly-reliable cloud messaging service from Microsoft.\n\nUse the client library `@azure/service-bus` in your application to\n\n- Send messages to an Azure Service Bus Queue or Topic\n- Receive messages from an Azure Service Bus Queue or Subscription\n- Create/Get/Delete/Update/List Queues/Topics/Subscriptions/Rules in an Azure Service Bus namespace.\n\nResources for `@azure/service-bus` version 7:\n\nKey links:\n- [Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/servicebus/service-bus)\n- [Package (npm)](https://www.npmjs.com/package/@azure/service-bus)\n- [API Reference Documentation][apiref]\n- [Product documentation](https://azure.microsoft.com/services/service-bus/)\n- [Samples](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/servicebus/service-bus/samples)\n- [Troubleshooting Guide](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/servicebus/service-bus/TROUBLESHOOTING.md)\n\n**NOTE**: If you are using version 1.1.10 or lower and want to migrate to the latest version\nof this package please look at our [migration guide to move from Service Bus V1 to Service Bus V7][migrationguide]\n\n## Getting started\n\n### Install the package\n\nInstall the latest version for the Azure Service Bus client library using npm.\n\n`npm install @azure/service-bus`\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n\n### Prerequisites\n\n- An [Azure subscription](https://azure.microsoft.com/free/)\n- A [Service Bus Namespace](https://docs.microsoft.com/azure/service-bus-messaging/) \n\n### Configure TypeScript\n\nTypeScript users need to have Node type definitions installed:\n\n```bash\nnpm install @types/node\n```\n\nYou also need to enable `compilerOptions.allowSyntheticDefaultImports` in your tsconfig.json. Note that if you have enabled `compilerOptions.esModuleInterop`, `allowSyntheticDefaultImports` is enabled by default. See [TypeScript's compiler options handbook](https://www.typescriptlang.org/docs/handbook/compiler-options.html) for more information.\n\n### JavaScript Bundle\n\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\nIn addition to what is described there, this library also needs additional polyfills for the following NodeJS core built-in modules in order to work properly in the browsers:\n\n- `buffer`\n- `os`\n- `path`\n- `process`\n\n#### Bundling with Webpack\n\nIf you are using Webpack v5, you can install the following dev dependencies\n\n- `npm install --save-dev os-browserify path-browserify`\n\nthen add the following into your webpack.config.js\n\n```diff\n const path = require(\"path\");\n+const webpack = require(\"webpack\");\n\n module.exports = {\n   entry: \"./src/index.ts\",\n@@ -12,8 +13,21 @@ module.exports = {\n       },\n     ],\n   },\n+  plugins: [\n+    new webpack.ProvidePlugin({\n+      process: \"process/browser\",\n+    }),\n+    new webpack.ProvidePlugin({\n+      Buffer: [\"buffer\", \"Buffer\"],\n+    }),\n+  ],\n   resolve: {\n     extensions: [\".ts\", \".js\"],\n+    fallback: {\n+      buffer: require.resolve(\"buffer/\"),\n+      os: require.resolve(\"os-browserify\"),\n+      path: require.resolve(\"path-browserify\"),\n+    },\n   },\n```\n\n#### Bundling with Rollup\n\nIf you are using Rollup bundler, install the following dev dependencies\n\n- `npm install --save-dev @rollup/plugin-commonjs @rollup/plugin-inject @rollup/plugin-node-resolve`\n\nThen include the following in your rollup.config.js\n\n```diff\n+import nodeResolve from \"@rollup/plugin-node-resolve\";\n+import cjs from \"@rollup/plugin-commonjs\";\n+import shim from \"rollup-plugin-shim\";\n+import inject from \"@rollup/plugin-inject\";\n\nexport default {\n  // other configs\n  plugins: [\n+    shim({\n+      fs: `export default {}`,\n+      net: `export default {}`,\n+      tls: `export default {}`,\n+      path: `export default {}`,\n+      dns: `export function resolve() { }`,\n+    }),\n+    nodeResolve({\n+      mainFields: [\"module\", \"browser\"],\n+      preferBuiltins: false,\n+    }),\n+    cjs(),\n+    inject({\n+      modules: {\n+        Buffer: [\"buffer\", \"Buffer\"],\n+        process: \"process\",\n+      },\n+      exclude: [\"./**/package.json\"],\n+    }),\n  ]\n};\n```\n\nPlease consult the documentation of your favorite bundler for more information on using polyfills.\n\n### React Native Support\n\nSimilar to browsers, React Native does not support some JavaScript api used by this SDK library so you need to provide polyfills for them.  Please see the [Messaging React Native sample with Expo](https://github.com/Azure/azure-sdk-for-js/blob/main/samples/frameworks/react-native-expo/ts/messaging/README.md) for more details.\n\n### Authenticate the client\n\nInteraction with Service Bus starts with an instance of the [ServiceBusClient][sbclient] class. You can\nauthenticate to Service Bus using a connection string or using an Azure Active Directory credential.\n\n#### Using a connection string\n\nThis method takes the connection string to your Service Bus instance. You can get\nthe connection string from the Azure portal.\n\n```javascript\nconst { ServiceBusClient } = require(\"@azure/service-bus\");\n\nconst serviceBusClient = new ServiceBusClient(\"<connectionString>\");\n```\n\nMore information about this constructor is available in the [API documentation][sbclient_constructor].\n\n#### Using an Azure Active Directory Credential\n\nAuthentication with Azure Active Directory uses the [Azure Identity library][azure_identity].\n\nThe example below uses the [DefaultAzureCredential][defaultazurecredential], one of many\navailable credential providers from the `@azure/identity` library.\n\n```javascript\nconst { ServiceBusClient } = require(\"@azure/service-bus\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n\nconst fullyQualifiedNamespace = \"<name-of-service-bus-namespace>.servicebus.windows.net\";\nconst credential = new DefaultAzureCredential();\nconst serviceBusClient = new ServiceBusClient(fullyQualifiedNamespace, credential);\n```\n\n> NOTE: If you're using your own implementation of the `TokenCredential` interface\n> against AAD, then set the \"scopes\" for service-bus to the following to get\n> the appropriate token:\n\n> ```typescript\n> [\"https://servicebus.azure.net//user_impersonation\"];\n> ```\n\nMore information about this constructor is available in the [API documentation][sbclient_tokencred_overload]\n\n## Key concepts\n\nOnce you've initialized a `ServiceBusClient`, you can interact with these resources within a\nService Bus Namespace:\n\n- [Queues][queue_concept]: Allows for sending and receiving messages. Often used for point-to-point communication.\n- [Topics][topic_concept]: As opposed to Queues, Topics are better suited to publish/subscribe scenarios. A topic can be sent to, but requires a subscription, of which there can be multiple in parallel, to consume from.\n- [Subscriptions][subscription_concept]: The mechanism to consume from a Topic. Each subscription is independent, and receives a copy of each message sent to the topic. Rules and Filters can be used to tailor which messages are received by a specific subscription.\n\nFor more information about these resources, see [What is Azure Service Bus?][service_bus_overview].\n\nTo interact with these resources, one should be familiar with the following SDK concepts:\n\n- Send messages, to a queue or topic, using a [`ServiceBusSender`][sender] created using [`ServiceBusClient.createSender()`][sbclient_createsender].\n- Receive messages, from either a queue or a subscription, using a [`ServiceBusReceiver`][receiver] created using [`ServiceBusClient.createReceiver()`][sbclient_createreceiver].\n- Receive messages, from session enabled queues or subscriptions, using a [`ServiceBusSessionReceiver`][sessionreceiver] created using [`ServiceBusClient.acceptSession()`][sbclient_acceptsession] or `ServiceBusClient.acceptNextSession()`.\n\nPlease note that the Queues, Topics and Subscriptions should be created prior to using this library.\n\n## Examples\n\nThe following sections provide code snippets that cover some of the common tasks using Azure Service Bus\n\n- [Send messages](#send-messages)\n- [Receive messages](#receive-messages)\n- [Settle a message](#settle-a-message)\n- [Dead letter queues](#dead-letter-queues)\n- [Send messages using Sessions](#send-messages-using-sessions)\n- [Receive messages from Sessions](#receive-messages-from-sessions)\n- [Manage resources of a service bus namespace](#manage-resources-of-a-service-bus-namespace)\n- [Additional samples](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/servicebus/service-bus/samples)\n\n### Send messages\n\nOnce you have created an instance of a `ServiceBusClient` class, you can get a `ServiceBusSender`\nusing the [createSender][sbclient_createsender] method which you can use to [send][sender_sendmessages] messages.\n\n```javascript\nconst sender = serviceBusClient.createSender(\"my-queue\");\n\nconst messages = [\n  { body: \"Albert Einstein\" },\n  { body: \"Werner Heisenberg\" },\n  { body: \"Marie Curie\" },\n  { body: \"Steven Hawking\" },\n  { body: \"Isaac Newton\" },\n  { body: \"Niels Bohr\" },\n  { body: \"Michael Faraday\" },\n  { body: \"Galileo Galilei\" },\n  { body: \"Johannes Kepler\" },\n  { body: \"Nikolaus Kopernikus\" }\n];\n\n// sending a single message\nawait sender.sendMessages(messages[0]);\n\n// sending multiple messages in a single call\n// this will fail if the messages cannot fit in a batch\nawait sender.sendMessages(messages);\n\n// Sends multiple messages using one or more ServiceBusMessageBatch objects as required\nlet batch = await sender.createMessageBatch();\n\nfor (let i = 0; i < messages.length; i++) {\n  const message = messages[i];\n  if (!batch.tryAddMessage(message)) {\n    // Send the current batch as it is full and create a new one\n    await sender.sendMessages(batch);\n    batch = await sender.createMessageBatch();\n\n    if (!batch.tryAddMessage(messages[i])) {\n      throw new Error(\"Message too big to fit in a batch\");\n    }\n  }\n}\n// Send the batch\nawait sender.sendMessages(batch);\n```\n\n### Receive messages\n\nOnce you have created an instance of a `ServiceBusClient` class, you can get a `ServiceBusReceiver`\nusing the [createReceiver][sbclient_createreceiver] method.\n\n```javascript\nconst receiver = serviceBusClient.createReceiver(\"my-queue\");\n```\n\nThere are two `receiveMode`s available.\n\n- \"peekLock\" - In peekLock mode, the receiver has a lock on the message for the duration specified on the queue.\n- \"receiveAndDelete\" - In receiveAndDelete mode, messages are deleted from Service Bus as they are received.\n\nIf the receiveMode is not provided in the options, it defaults to the \"peekLock\" mode.\nYou can also [settle the messages](#settle-a-message) received in \"peekLock\" mode.\n\nYou can use this receiver in one of 3 ways to receive messages:\n\n#### Get an array of messages\n\nUse the [receiveMessages][receiver_receivemessages] function which returns a promise that\nresolves to an array of messages.\n\n```javascript\nconst myMessages = await receiver.receiveMessages(10);\n```\n\n#### Subscribe using a message handler\n\nUse the [subscribe][receiver_subscribe] method to set up message handlers and have\nit running as long as you need.\n\nWhen you are done, call `receiver.close()` to stop receiving any more messages.\n\n```javascript\nconst myMessageHandler = async (message) => {\n  // your code here\n  console.log(`message.body: ${message.body}`);\n};\nconst myErrorHandler = async (args) => {\n  console.log(\n    `Error occurred with ${args.entityPath} within ${args.fullyQualifiedNamespace}: `,\n    args.error\n  );\n};\nreceiver.subscribe({\n  processMessage: myMessageHandler,\n  processError: myErrorHandler\n});\n```\n\n#### Use async iterator\n\nUse the [getMessageIterator][receiver_getmessageiterator] to get an async iterator over messages\n\n```javascript\nfor await (let message of receiver.getMessageIterator()) {\n  // your code here\n}\n```\n\n### Settle a message\n\nOnce you receive a message you can call [`completeMessage()`][receiver_complete], [`abandonMessage()`][receiver_abandon], [`deferMessage()`][receiver_defer] or [`deadLetterMessage()`][receiver_deadletter] on the receiver based on how you want to settle the message.\n\nTo learn more, please read [Settling Received Messages](https://docs.microsoft.com/azure/service-bus-messaging/message-transfers-locks-settlement#settling-receive-operations)\n\n## Dead letter queues\n\nThe dead letter queue is a **sub-queue**. Each queue or subscription has its own dead letter queue. Dead letter queues store\nmessages that have been explicitly dead lettered (via [`receiver.deadLetterMessage()`][receiver_deadletter]), or messages that have exceeded\ntheir maximum delivery count.\n\nCreating a receiver for a dead letter sub-queue is similar to creating a receiver for a subscription or queue:\n\n```javascript\n// To receive from a queue's dead letter sub-queue\nconst deadLetterReceiverForQueue = serviceBusClient.createReceiver(\"queue\", {\n  subQueueType: \"deadLetter\"\n});\n\n// To receive from a subscription's dead letter sub-queue\nconst deadLetterReceiverForSubscription = serviceBusClient.createReceiver(\"topic\", \"subscription\", {\n  subQueueType: \"deadLetter\"\n});\n\n// Dead letter receivers work like any other receiver connected to a queue\n// ex:\nconst messages = await deadLetterReceiverForQueue.receiveMessages(5);\n\nfor (const message of messages) {\n  console.log(`Dead lettered message: ${message.body}`);\n}\n```\n\nFull samples demonstrating dead letter queues more thoroughly:\n\n- [Using receiver.deadLetterMessage() to explicitly send messages to the dead letter sub-queue](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/servicebus/service-bus/samples/v7/typescript/src/advanced/movingMessagesToDLQ.ts)\n- [Receiving messages from the dead letter sub-queue](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/servicebus/service-bus/samples/v7/typescript/src/advanced/processMessageFromDLQ.ts)\n\n### Send messages using Sessions\n\n> Using sessions requires you to create a session enabled Queue or Subscription. You can\n> read more about how to configure this feature in the portal [here][docsms_messagesessions_fifo].\n\nIn order to send messages to a session, use the `ServiceBusClient` to create a sender using\n[createSender][sbclient_createsender].\n\nWhen sending the message, set the `sessionId` property in the message to ensure\nyour message lands in the right session.\n\n```javascript\nconst sender = serviceBusClient.createSender(\"my-session-queue\");\nawait sender.sendMessages({\n  body: \"my-message-body\",\n  sessionId: \"my-session\"\n});\n```\n\nYou can read more about how sessions work [here][docsms_messagesessions].\n\n### Receive messages from Sessions\n\n> Using sessions requires you to create a session enabled Queue or Subscription. You can\n> read more about how to configure this feature in the portal [here][docsms_messagesessions_fifo].\n\nUnlike non-session-enabled Queues or Subscriptions, only a single receiver\ncan read from a session at any time. This is enforced by _locking_ a session,\nwhich is handled by Service Bus. Conceptually, this is similar to how message\nlocking works when using `peekLock` mode - when a message (or session) is\nlocked your receiver has exclusive access to it.\n\nIn order to open and lock a session, use an instance of `ServiceBusClient` to create a [SessionReceiver][sessionreceiver].\n\nThere are two ways of choosing which session to open:\n\n1. Specify a `sessionId`, which locks a named session.\n\n   ```javascript\n   const receiver = await serviceBusClient.acceptSession(\"my-session-queue\", \"my-session\");\n   ```\n\n2. Do not specify a session id. In this case Service Bus will find the next available session\n   that is not already locked.\n\n   ```javascript\n   const receiver = await serviceBusClient.acceptNextSession(\"my-session-queue\");\n   ```\n\n   You can find the name of the session via the `sessionId` property on the `SessionReceiver`.\n   If the receiveMode is not provided in the options, it defaults to the \"peekLock\" mode.\n   You can also [settle the messages](#settle-a-message) received in \"peekLock\" mode.\n\nOnce the receiver is created you can use choose between 3 ways to receive messages:\n\n- [Get an array of messages](#get-an-array-of-messages)\n- [Subscribe using a message handler](#subscribe-using-a-message-handler)\n- [Use async iterator](#use-async-iterator)\n\nYou can read more about how sessions work [here][docsms_messagesessions].\n\n### Manage resources of a service bus namespace\n\n`ServiceBusAdministrationClient` lets you manage a namespace with CRUD operations on the entities(queues, topics, and subscriptions) and on the rules of a subscription.\n\n- Supports authentication with a service bus connection string as well as with the AAD credentials from `@azure/identity` similar to the `ServiceBusClient`.\n\nNote: Service Bus doesn't support setting CORS rules for namespaces yet, hence `ServiceBusAdministrationClient` won't work in the browser without disabling web-security. For more info, refer [here](https://github.com/Azure/azure-sdk-for-js/issues/4983).\n\n```js\n// Get the connection string from the portal\n// OR\n// use the token credential overload, provide the host name of your Service Bus instance and the AAD credentials from the @azure/identity library\nconst serviceBusAdministrationClient = new ServiceBusAdministrationClient(\"<connectionString>\");\n\n// Similarly, you can create topics and subscriptions as well.\nconst createQueueResponse = await serviceBusAdministrationClient.createQueue(queueName);\nconsole.log(\"Created queue with name - \", createQueueResponse.name);\n\nconst queueRuntimeProperties = await serviceBusAdministrationClient.getQueueRuntimeProperties(\n  queueName\n);\nconsole.log(\"Number of messages in the queue = \", queueRuntimeProperties.totalMessageCount);\n\nawait serviceBusAdministrationClient.deleteQueue(queueName);\n```\n\n- Sample for reference - [administrationClient.ts](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/servicebus/service-bus/samples/v7/typescript/src/advanced/administrationClient.ts)\n\n## Troubleshooting\n\nHere's some initial steps to start diagnosing issues. For more information please refer to the [Service Bus Troubleshooting Guide](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/servicebus/service-bus/TROUBLESHOOTING.md).\n\n### AMQP Dependencies\n\nThe Service Bus library depends on the [rhea-promise](https://github.com/amqp/rhea-promise) library for managing connections, sending and receiving messages over the [AMQP](https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-complete-v1.0-os.pdf) protocol.\n\n### Logging\n\nYou can set the following environment variable to get the debug logs when using this library.\n\n- Getting debug logs from the Service Bus SDK\n\n```bash\nexport DEBUG=azure*\n```\n\n- Getting debug logs from the Service Bus SDK and the protocol level library.\n\n```bash\nexport DEBUG=azure*,rhea*\n```\n\n- If you are **not interested in viewing the message transformation** (which consumes lot of console/disk space) then you can set the `DEBUG` environment variable as follows:\n\n```bash\nexport DEBUG=azure*,rhea*,-rhea:raw,-rhea:message,-azure:core-amqp:datatransformer\n```\n\n- If you are interested only in **errors**, then you can set the `DEBUG` environment variable as follows:\n\n```bash\nexport DEBUG=azure:service-bus:error,azure:core-amqp:error,rhea-promise:error,rhea:events,rhea:frames,rhea:io,rhea:flow\n```\n\n### Logging to a file\n\n1. Set the `DEBUG` environment variable as shown above\n2. Run your test script as follows:\n\n- Logging statements from your test script go to `out.log` and logging statements from the sdk go to `debug.log`.\n  ```bash\n  node your-test-script.js > out.log 2>debug.log\n  ```\n- Logging statements from your test script and the sdk go to the same file `out.log` by redirecting stderr to stdout (&1), and then redirect stdout to a file:\n  ```bash\n  node your-test-script.js >out.log 2>&1\n  ```\n- Logging statements from your test script and the sdk go to the same file `out.log`.\n  ```bash\n    node your-test-script.js &> out.log\n  ```\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/servicebus/service-bus/samples)\ndirectory for detailed examples on how to use this library to send and receive messages to/from\n[Service Bus Queues, Topics and Subscriptions](https://docs.microsoft.com/azure/service-bus-messaging/service-bus-messaging-overview).\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fservicebus%2Fservice-bus%2FREADME.png)\n\n[apiref]: https://docs.microsoft.com/javascript/api/@azure/service-bus/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/identity/identity/README.md\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n[sbclient]: https://docs.microsoft.com/javascript/api/@azure/service-bus/servicebusclient\n[sbclient_constructor]: https://docs.microsoft.com/javascript/api/@azure/service-bus/servicebusclient#ServiceBusClient_string__ServiceBusClientOptions_\n[sbclient_tokencred_overload]: https://docs.microsoft.com/javascript/api/@azure/service-bus/servicebusclient#ServiceBusClient_string__TokenCredential__ServiceBusClientOptions_\n[sbclient_createsender]: https://docs.microsoft.com/javascript/api/@azure/service-bus/servicebusclient#createSender_string_\n[sbclient_createreceiver]: https://docs.microsoft.com/javascript/api/@azure/service-bus/servicebusclient#createReceiver_string__CreateReceiverOptions__peekLock___\n[sbclient_acceptsession]: https://docs.microsoft.com/javascript/api/@azure/service-bus/servicebusclient#acceptSession_string__string__AcceptSessionOptions__peekLock___\n[sender]: https://docs.microsoft.com/javascript/api/@azure/service-bus/servicebussender\n[sender_sendmessages]: https://docs.microsoft.com/javascript/api/@azure/service-bus/servicebussender#sendMessages_ServiceBusMessage___ServiceBusMessage_____ServiceBusMessageBatch__OperationOptionsBase_\n[receiver]: https://docs.microsoft.com/javascript/api/@azure/service-bus/servicebusreceiver\n[receiver_receivemessages]: https://docs.microsoft.com/javascript/api/@azure/service-bus/servicebusreceiver#receiveMessages_number__ReceiveMessagesOptions_\n[receiver_subscribe]: https://docs.microsoft.com/javascript/api/@azure/service-bus/servicebusreceiver#subscribe_MessageHandlers_ReceivedMessageT___SubscribeOptions_\n[receiver_getmessageiterator]: https://docs.microsoft.com/javascript/api/@azure/service-bus/servicebusreceiver#getMessageIterator_GetMessageIteratorOptions_\n[receiver_abandon]: https://docs.microsoft.com/javascript/api/@azure/service-bus/servicebusreceiver#abandonMessage_ServiceBusReceivedMessage___key__string___any_\n[receiver_complete]: https://docs.microsoft.com/javascript/api/@azure/service-bus/servicebusreceiver#completeMessage_ServiceBusReceivedMessage_\n[receiver_deadletter]: https://docs.microsoft.com/javascript/api/@azure/service-bus/servicebusreceiver#deadLetterMessage_ServiceBusReceivedMessage__DeadLetterOptions____key__string___any_\n[receiver_defer]: https://docs.microsoft.com/javascript/api/@azure/service-bus/servicebusreceiver#deferMessage_ServiceBusReceivedMessage___key__string___any_\n[sessionreceiver]: https://docs.microsoft.com/javascript/api/@azure/service-bus/servicebussessionreceiver\n[migrationguide]: https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/servicebus/service-bus/migrationguide.md\n[docsms_messagesessions]: https://docs.microsoft.com/azure/service-bus-messaging/message-sessions\n[docsms_messagesessions_fifo]: https://docs.microsoft.com/azure/service-bus-messaging/message-sessions#first-in-first-out-fifo-pattern\n[queue_concept]: https://docs.microsoft.com/azure/service-bus-messaging/service-bus-messaging-overview#queues\n[topic_concept]: https://docs.microsoft.com/azure/service-bus-messaging/service-bus-messaging-overview#topics\n[subscription_concept]: https://docs.microsoft.com/azure/service-bus-messaging/service-bus-queues-topics-subscriptions#topics-and-subscriptions\n[service_bus_overview]: https://docs.microsoft.com/azure/service-bus-messaging/service-bus-messaging-overview\n",
        "repo_name": "servicebus/service-bus",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/servicebus/service-bus",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure ServiceFabric client library for JavaScript\n\nService Fabric Client\n\n**Please rely heavily on our [REST client docs](https://github.com/Azure/azure-sdk-for-js/blob/main/documentation/rest-clients.md) to use this library**\n\nKey links:\n\n- [Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/servicefabric/arm-servicefabric-rest)\n- [Package (NPM)](https://www.npmjs.com/package/@azure-rest/arm-servicefabric)\n- [API reference documentation](https://docs.microsoft.com/javascript/api/@azure-rest/arm-servicefabric?view=azure-node-preview)\n- [Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- Node.js version 14.x.x or higher\n\n### Prerequisites\n\n- You must have an [Azure subscription](https://azure.microsoft.com/free/) to use this package.\n\n### Install the `@azure-rest/arm-servicefabric` package\n\nInstall the Azure ServiceFabric client REST client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure-rest/arm-servicefabric\n```\n\n### Create and authenticate a `ServiceFabricClient`\n\nTo use an [Azure Active Directory (AAD) token credential](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token),\nprovide an instance of the desired credential type obtained from the\n[@azure/identity](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#credentials) library.\n\nTo authenticate with AAD, you must first `npm` install [`@azure/identity`](https://www.npmjs.com/package/@azure/identity) \n\nAfter setup, you can choose which type of [credential](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#credentials) from `@azure/identity` to use.\nAs an example, [DefaultAzureCredential](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential)\ncan be used to authenticate the client.\n\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables:\nAZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET\n\n\n## Examples\n\nThe following section shows you how to initialize and authenticate your client, then list all of your Clusters.\n\n### List All Clusters\n\n```typescript\nimport ServiceFabricManagementClient from \"@azure-rest/arm-servicefabric\";\nimport { DefaultAzureCredential } from \"@azure/identity\";\n\nasync function listClusters() {\n  const subscriptionId = \"00000000-0000-0000-0000-000000000000\";\n  const credential = new DefaultAzureCredential();\n  const client = ServiceFabricManagementClient(credential);\n  const result = await client\n    .path(\n      \"/subscriptions/{subscriptionId}/providers/Microsoft.ServiceFabric/clusters\",\n      subscriptionId\n    )\n    .get();\n  console.log(result);\n}\n\nlistClusters().catch(console.error);\n```\n\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nimport { setLogLevel } from \"@azure/logger\";\n\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n",
        "repo_name": "servicefabric/arm-servicefabric-rest",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/servicefabric/arm-servicefabric-rest",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure ServiceFabricManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure ServiceFabricManagement client.\n\nService Fabric Management Client\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/servicefabric/arm-servicefabric) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-servicefabric) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-servicefabric) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-servicefabric` package\n\nInstall the Azure ServiceFabricManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-servicefabric\n```\n\n### Create and authenticate a `ServiceFabricManagementClient`\n\nTo create a client object to access the Azure ServiceFabricManagement API, you will need the `endpoint` of your Azure ServiceFabricManagement resource and a `credential`. The Azure ServiceFabricManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure ServiceFabricManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure ServiceFabricManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { ServiceFabricManagementClient } = require(\"@azure/arm-servicefabric\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new ServiceFabricManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new ServiceFabricManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### ServiceFabricManagementClient\n\n`ServiceFabricManagementClient` is the primary interface for developers using the Azure ServiceFabricManagement client library. Explore the methods on this client object to understand the different features of the Azure ServiceFabricManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fservicefabric%2Farm-servicefabric%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "servicefabric/arm-servicefabric",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/servicefabric/arm-servicefabric",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "## An isomorphic javascript sdk for - ServiceFabricClient\n\nThis package contains an isomorphic SDK for ServiceFabricClient.\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge, and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### How to Install\n\n```bash\nnpm install @azure/servicefabric\n```\n\n### How to use\n\n#### nodejs - Authentication, client creation and getClusterManifest as an example written in TypeScript.\n\n##### Install @azure/ms-rest-nodeauth\n\n- Please install minimum version of `\"@azure/ms-rest-nodeauth\": \"^3.0.0\"`.\n\n```bash\nnpm install @azure/ms-rest-nodeauth@\"^3.0.0\"\n```\n\n##### Sample code\n\n[Service Fabric cluster security scenarios](https://docs.microsoft.com/azure/service-fabric/service-fabric-cluster-security)\n\n```typescript\nimport { ServiceFabricClient } from \"@azure/servicefabric\";\nconst baseUri = \"<ServiceFabricURL>:<connection-port>\";\nconst client = new ServiceFabricClient({\n  baseUri\n});\nclient\n  .getClusterManifest()\n  .then((result) => {\n    console.log(result.manifest);\n  })\n  .catch(console.error);\n```\n\n#### browser - Authentication, client creation and getClusterManifest as an example written in JavaScript.\n\n##### Install @azure/ms-rest-browserauth\n\n```bash\nnpm install @azure/ms-rest-browserauth\n```\n\n##### Sample code\n\nSee https://github.com/Azure/ms-rest-browserauth to learn how to authenticate to Azure in the browser.\n\n- index.html\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>@azure/servicefabric sample</title>\n    <script src=\"node_modules/@azure/ms-rest-js/dist/msRest.browser.js\"></script>\n    <script src=\"node_modules/@azure/servicefabric/dist/servicefabric.js\"></script>\n    <script type=\"text/javascript\">\n      var baseUri = \"<ServiceFabricURL>:<connection-port>\";\n      var client = new Azure.Servicefabric.ServiceFabricClient({\n        baseUri\n      });\n      client\n        .getClusterManifest()\n        .then((result) => {\n          console.log(\"The result is:\");\n          console.log(result);\n        })\n        .catch((err) => {\n          console.log(\"An error occurred:\");\n          console.error(err);\n        });\n    </script>\n  </head>\n  <body></body>\n</html>\n```\n\n## Related projects\n\n- [Microsoft Azure SDK for Javascript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js/sdk/servicefabric/servicefabric/README.png)\n",
        "repo_name": "servicefabric/servicefabric",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/servicefabric/servicefabric",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure ServiceFabricMeshManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure ServiceFabricMeshManagement client.\n\nService Fabric Mesh Management Client\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/servicefabricmesh/arm-servicefabricmesh) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-servicefabricmesh) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-servicefabricmesh?view=azure-node-preview) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-servicefabricmesh` package\n\nInstall the Azure ServiceFabricMeshManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-servicefabricmesh\n```\n\n### Create and authenticate a `ServiceFabricMeshManagementClient`\n\nTo create a client object to access the Azure ServiceFabricMeshManagement API, you will need the `endpoint` of your Azure ServiceFabricMeshManagement resource and a `credential`. The Azure ServiceFabricMeshManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure ServiceFabricMeshManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure ServiceFabricMeshManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { ServiceFabricMeshManagementClient } = require(\"@azure/arm-servicefabricmesh\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new ServiceFabricMeshManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new ServiceFabricMeshManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### ServiceFabricMeshManagementClient\n\n`ServiceFabricMeshManagementClient` is the primary interface for developers using the Azure ServiceFabricMeshManagement client library. Explore the methods on this client object to understand the different features of the Azure ServiceFabricMeshManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fservicefabricmesh%2Farm-servicefabricmesh%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "servicefabricmesh/arm-servicefabricmesh",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/servicefabricmesh/arm-servicefabricmesh",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure ServiceLinkerManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure ServiceLinkerManagement client.\n\nMicrosoft.ServiceLinker provider\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/servicelinker/arm-servicelinker) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-servicelinker) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-servicelinker) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-servicelinker` package\n\nInstall the Azure ServiceLinkerManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-servicelinker\n```\n\n### Create and authenticate a `ServiceLinkerManagementClient`\n\nTo create a client object to access the Azure ServiceLinkerManagement API, you will need the `endpoint` of your Azure ServiceLinkerManagement resource and a `credential`. The Azure ServiceLinkerManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure ServiceLinkerManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure ServiceLinkerManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { ServiceLinkerManagementClient } = require(\"@azure/arm-servicelinker\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new ServiceLinkerManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new ServiceLinkerManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### ServiceLinkerManagementClient\n\n`ServiceLinkerManagementClient` is the primary interface for developers using the Azure ServiceLinkerManagement client library. Explore the methods on this client object to understand the different features of the Azure ServiceLinkerManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fservicelinker%2Farm-servicelinker%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "servicelinker/arm-servicelinker",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/servicelinker/arm-servicelinker",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure ServiceNetworkingManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure ServiceNetworkingManagement client.\n\nTraffic Controller Provider management API.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/servicenetworking/arm-servicenetworking) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-servicenetworking) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-servicenetworking?view=azure-node-preview) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-servicenetworking` package\n\nInstall the Azure ServiceNetworkingManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-servicenetworking\n```\n\n### Create and authenticate a `ServiceNetworkingManagementClient`\n\nTo create a client object to access the Azure ServiceNetworkingManagement API, you will need the `endpoint` of your Azure ServiceNetworkingManagement resource and a `credential`. The Azure ServiceNetworkingManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure ServiceNetworkingManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure ServiceNetworkingManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { ServiceNetworkingManagementClient } = require(\"@azure/arm-servicenetworking\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new ServiceNetworkingManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new ServiceNetworkingManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### ServiceNetworkingManagementClient\n\n`ServiceNetworkingManagementClient` is the primary interface for developers using the Azure ServiceNetworkingManagement client library. Explore the methods on this client object to understand the different features of the Azure ServiceNetworkingManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fservicenetworking%2Farm-servicenetworking%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "servicenetworking/arm-servicenetworking",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/servicenetworking/arm-servicenetworking",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure SignalRManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure SignalRManagement client.\n\nREST API for Azure SignalR Service\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/signalr/arm-signalr) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-signalr) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-signalr) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-signalr` package\n\nInstall the Azure SignalRManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-signalr\n```\n\n### Create and authenticate a `SignalRManagementClient`\n\nTo create a client object to access the Azure SignalRManagement API, you will need the `endpoint` of your Azure SignalRManagement resource and a `credential`. The Azure SignalRManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure SignalRManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure SignalRManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { SignalRManagementClient } = require(\"@azure/arm-signalr\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new SignalRManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new SignalRManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### SignalRManagementClient\n\n`SignalRManagementClient` is the primary interface for developers using the Azure SignalRManagement client library. Explore the methods on this client object to understand the different features of the Azure SignalRManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fsignalr%2Farm-signalr%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "signalr/arm-signalr",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/signalr/arm-signalr",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure SqlManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure SqlManagement client.\n\nThe Azure SQL Database management API provides a RESTful set of web services that interact with Azure SQL Database services to manage your databases. The API enables you to create, retrieve, update, and delete databases.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/sql/arm-sql) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-sql) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-sql) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-sql` package\n\nInstall the Azure SqlManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-sql\n```\n\n### Create and authenticate a `SqlManagementClient`\n\nTo create a client object to access the Azure SqlManagement API, you will need the `endpoint` of your Azure SqlManagement resource and a `credential`. The Azure SqlManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure SqlManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure SqlManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { SqlManagementClient } = require(\"@azure/arm-sql\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new SqlManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new SqlManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### SqlManagementClient\n\n`SqlManagementClient` is the primary interface for developers using the Azure SqlManagement client library. Explore the methods on this client object to understand the different features of the Azure SqlManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fsql%2Farm-sql%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "sql/arm-sql",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/sql/arm-sql",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure SqlVirtualMachineManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure SqlVirtualMachineManagement client.\n\nThe SQL virtual machine management API provides a RESTful set of web APIs that interact with Azure Compute, Network & Storage services to manage your SQL Server virtual machine. The API enables users to create, delete and retrieve a SQL virtual machine, SQL virtual machine group or availability group listener.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/sqlvirtualmachine/arm-sqlvirtualmachine) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-sqlvirtualmachine) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-sqlvirtualmachine?view=azure-node-preview) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-sqlvirtualmachine` package\n\nInstall the Azure SqlVirtualMachineManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-sqlvirtualmachine\n```\n\n### Create and authenticate a `SqlVirtualMachineManagementClient`\n\nTo create a client object to access the Azure SqlVirtualMachineManagement API, you will need the `endpoint` of your Azure SqlVirtualMachineManagement resource and a `credential`. The Azure SqlVirtualMachineManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure SqlVirtualMachineManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure SqlVirtualMachineManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { SqlVirtualMachineManagementClient } = require(\"@azure/arm-sqlvirtualmachine\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new SqlVirtualMachineManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new SqlVirtualMachineManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### SqlVirtualMachineManagementClient\n\n`SqlVirtualMachineManagementClient` is the primary interface for developers using the Azure SqlVirtualMachineManagement client library. Explore the methods on this client object to understand the different features of the Azure SqlVirtualMachineManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fsqlvirtualmachine%2Farm-sqlvirtualmachine%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "sqlvirtualmachine/arm-sqlvirtualmachine",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/sqlvirtualmachine/arm-sqlvirtualmachine",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure StorageManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure StorageManagement client.\n\nThe Azure Storage Management API.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/storage/arm-storage-profile-2020-09-01-hybrid) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-storage-profile-2020-09-01-hybrid) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-storage-profile-2020-09-01-hybrid) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-storage-profile-2020-09-01-hybrid` package\n\nInstall the Azure StorageManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-storage-profile-2020-09-01-hybrid\n```\n\n### Create and authenticate a `StorageManagementClient`\n\nTo create a client object to access the Azure StorageManagement API, you will need the `endpoint` of your Azure StorageManagement resource and a `credential`. The Azure StorageManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure StorageManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure StorageManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { StorageManagementClient } = require(\"@azure/arm-storage-profile-2020-09-01-hybrid\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new StorageManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new StorageManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### StorageManagementClient\n\n`StorageManagementClient` is the primary interface for developers using the Azure StorageManagement client library. Explore the methods on this client object to understand the different features of the Azure StorageManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fstorage%2Farm-storage-profile-2020-09-01-hybrid%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "storage/arm-storage-profile-2020-09-01-hybrid",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/storage/arm-storage-profile-2020-09-01-hybrid",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure StorageManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure StorageManagement client.\n\nThe Azure Storage Management API.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/storage/arm-storage) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-storage) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-storage) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-storage` package\n\nInstall the Azure StorageManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-storage\n```\n\n### Create and authenticate a `StorageManagementClient`\n\nTo create a client object to access the Azure StorageManagement API, you will need the `endpoint` of your Azure StorageManagement resource and a `credential`. The Azure StorageManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure StorageManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure StorageManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { StorageManagementClient } = require(\"@azure/arm-storage\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new StorageManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new StorageManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### StorageManagementClient\n\n`StorageManagementClient` is the primary interface for developers using the Azure StorageManagement client library. Explore the methods on this client object to understand the different features of the Azure StorageManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fstorage%2Farm-storage%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "storage/arm-storage",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/storage/arm-storage",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Storage Blob Change Feed client library for JavaScript\n\n> Server Version: 2019-12-12 or later.\n\nThe change feed provides an ordered, guaranteed, durable, immutable, read-only transaction log of all the changes that occur to blobs and blob metadata in your storage account. Client applications can read these logs at any time. The change feed enables you to build efficient and scalable solutions that process change events that occur in your Blob Storage account at a low cost.\n\nThis project provides a client library in JavaScript that makes it easy to consume the change feed.\n\nUse the client libraries in this package to:\n\n- Reading change feed events, all or within a time range\n- Resuming reading events from a saved position\n\nKey links:\n\n- [Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/storage/storage-blob-changefeed)\n- [Package (npm)](https://www.npmjs.com/package/@azure/storage-blob-changefeed/)\n- [API Reference Documentation](https://docs.microsoft.com/javascript/api/@azure/storage-blob-changefeed)\n- [Product documentation](https://docs.microsoft.com/azure/storage/blobs/storage-blob-change-feed)\n- [Samples](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/storage/storage-blob-changefeed/samples)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge, and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription](https://azure.microsoft.com/free/)\n- A [Storage Account](https://docs.microsoft.com/azure/storage/blobs/storage-quickstart-blobs-portal)\n\n### Install the package\n\nThe preferred way to install the Azure Storage Blob Change Feed client library for JavaScript is to use the npm package manager. Type the following into a terminal window:\n\n```bash\nnpm install @azure/storage-blob-changefeed\n```\n\n### Authenticate the client\n\nThis library uses an authenticated `BlobServiceClient` to initialize. Refer to [storage-blob](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/storage/storage-blob#authenticate-the-client) for how to authenticate a `BlobServiceClient`.\n\n### Compatibility\n\nFor now, this library is only compatible with Node.js.\n\n## Key concepts\n\nThe change feed is stored as blobs in a special container in your storage account at standard blob pricing cost. You can control the retention period of these files based on your requirements. Change events are appended to the change feed as records in the Apache Avro format specification: a compact, fast, binary format that provides rich data structures with inline schema. This format is widely used in the Hadoop ecosystem, Stream Analytics, and Azure Data\nFactory.\n\nThis library offers a client you can use to fetch the change events.\n\n## Examples\n\n- [Initialize the change feed client](#initialize-the-change-feed-client \"Initialize the change feed client\")\n- [Reading all events in the Change Feed](#reading-all-events-in-the-change-feed \"Reading all events in the Change Feed\")\n- [Resuming reading events with a continuationToken](#resuming-reading-events-with-a-continuationtoken \"Resuming reading events with a continuationToken\")\n- [Reading events within a time range](#reading-events-within-a-time-range \"Reading events within a time range\")\n\n### Initialize the change feed client\n\nThe `BlobChangeFeedClient` requires almost the same parameters as `BlobServiceClient` to initialize. Refer to [storage-blob](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/storage/storage-blob#create-the-blob-service-client) for how to create the blob service client. Here is an example using `StorageSharedKeyCredential`.\n\n```javascript\nconst { StorageSharedKeyCredential } = require(\"@azure/storage-blob\");\nconst { BlobChangeFeedClient } = require(\"@azure/storage-blob-changefeed\");\n\n// Enter your storage account name and shared key\nconst account = \"<account>\";\nconst accountKey = \"<accountkey>\";\n// Use StorageSharedKeyCredential with storage account and account key\n// StorageSharedKeyCredential is only available in Node.js runtime, not in browsers\nconst sharedKeyCredential = new StorageSharedKeyCredential(account, accountKey);\nconst changeFeedClient = new BlobChangeFeedClient(\n  // When using AnonymousCredential, following url should include a valid SAS or support public access\n  `https://${account}.blob.core.windows.net`,\n  sharedKeyCredential\n);\n```\n\n### Reading all events in the Change Feed\n\nUse `BlobChangeFeedClient.listChanges()` to get iterators to iterate through the change events.\n\n```javascript\nconst { BlobChangeFeedEvent } = require(\"@azure/storage-blob-changefeed\");\n\nlet changeFeedEvents = [];\nfor await (const event of changeFeedClient.listChanges()) {\n  changeFeedEvents.push(event);\n}\n```\n\nBy page.\n\n```javascript\nconst { BlobChangeFeedEvent } = require(\"@azure/storage-blob-changefeed\");\n\nlet changeFeedEvents = [];\nfor await (const eventPage of changeFeedClient.listChanges().byPage()) {\n  for (const event of eventPage.events) {\n    changeFeedEvents.push(event);\n  }\n}\n```\n\n### Resuming reading events with a continuationToken\n\n```javascript\nconst { BlobChangeFeedEvent } = require(\"@azure/storage-blob-changefeed\");\n\nlet changeFeedEvents = [];\nconst firstPage = await changeFeedClient\n  .listChanges()\n  .byPage({ maxPageSize: 10 })\n  .next();\nfor (const event of firstPage.value.events) {\n  changeFeedEvents.push(event);\n}\n\n// Resume iterating from the previous position with the continuationToken.\nfor await (const eventPage of changeFeedClient\n  .listChanges()\n  .byPage({ continuationToken: firstPage.value.continuationToken })) {\n  for (const event of eventPage.events) {\n    changeFeedEvents.push(event);\n  }\n}\n```\n\n### Reading events within a time range\n\nPass start time and end time to `BlobChangeFeedClient.listChanges()` to fetch events within a time range.\n\nNote that for now, the change feed client will round start time down to the nearest hour, and round end time up to the next hour.\n\n```javascript\nconst { BlobChangeFeedEvent } = require(\"@azure/storage-blob-changefeed\");\n\nconst start = new Date(Date.UTC(2020, 1, 21, 22, 30, 0)); // will be rounded down to 22:00\nconst end = new Date(Date.UTC(2020, 4, 8, 21, 10, 0)); // will be rounded up to 22:00\n\nlet changeFeedEvents = [];\n// You can also provide just a start or end time.\nfor await (const event of changeFeedClient.listChanges({ start, end })) {\n  changeFeedEvents.push(event);\n}\n```\n\n## Troubleshooting\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nimport { setLogLevel } from \"@azure/logger\";\n\nsetLogLevel(\"info\");\n```\n\n## Next steps\n\nMore code samples:\n\n- [Blob Storage Change Feed Samples (JavaScript)](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/storage/storage-blob-changefeed/samples/v12-beta/javascript)\n- [Blob Storage Change Feed Samples (TypeScript)](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/storage/storage-blob-changefeed/samples/v12-beta/typescript)\n- [Blob Storage Change Feed Test Cases](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/storage/storage-blob-changefeed/test/)\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\nAlso refer to [Storage specific guide](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/storage/CONTRIBUTING.md) for additional information on setting up the test environment for storage libraries.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fstorage%2Fstorage-blob-changefeed%2FREADME.png)\n",
        "repo_name": "storage/storage-blob-changefeed",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/storage/storage-blob-changefeed",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Storage Blob client library for JavaScript\n\nAzure Storage Blob is Microsoft's object storage solution for the cloud. Blob storage is optimized for storing massive amounts of unstructured data. Unstructured data is data that does not adhere to a particular data model or definition, such as text or binary data.\n\nThis project provides a client library in JavaScript that makes it easy to consume Microsoft Azure Storage Blob service.\n\nUse the client libraries in this package to:\n\n- Get/Set Blob Service Properties\n- Create/List/Delete Containers\n- Create/Read/List/Update/Delete Block Blobs\n- Create/Read/List/Update/Delete Page Blobs\n- Create/Read/List/Update/Delete Append Blobs\n\nKey links\n\n- [Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/storage/storage-blob)\n- [Package (npm)](https://www.npmjs.com/package/@azure/storage-blob/)\n- [API Reference Documentation](https://docs.microsoft.com/javascript/api/@azure/storage-blob)\n- [Product documentation](https://docs.microsoft.com/azure/storage/blobs/storage-blobs-overview)\n- [Samples](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/storage/storage-blob/samples)\n- [Azure Storage Blob REST APIs](https://docs.microsoft.com/rest/api/storageservices/blob-service-rest-api)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge, and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription](https://azure.microsoft.com/free/)\n- A [Storage Account](https://docs.microsoft.com/azure/storage/blobs/storage-quickstart-blobs-portal)\n\n### Install the package\n\nThe preferred way to install the Azure Storage Blob client library for JavaScript is to use the npm package manager. Type the following into a terminal window:\n\n```bash\nnpm install @azure/storage-blob\n```\n\n### Authenticate the client\n\nAzure Storage supports several ways to authenticate. In order to interact with the Azure Blob Storage service you'll need to create an instance of a Storage client - `BlobServiceClient`, `ContainerClient`, or `BlobClient` for example. See [samples for creating the `BlobServiceClient`](#create-the-blob-service-client) to learn more about authentication.\n\n- [Azure Active Directory](#with-defaultazurecredential-from-azureidentity-package)\n- [Shared Key](#with-storagesharedkeycredential)\n- [Shared access signatures](#with-sas-token)\n\n#### Azure Active Directory\n\nThe Azure Blob Storage service supports the use of Azure Active Directory to authenticate requests to its APIs. The [`@azure/identity`](https://www.npmjs.com/package/@azure/identity) package provides a variety of credential types that your application can use to do this. Please see the [README for `@azure/identity`](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/identity/identity/README.md) for more details and samples to get you started.\n\n### Compatibility\n\nThis library is compatible with Node.js and browsers, and validated against LTS Node.js versions (>=8.16.0) and latest versions of Chrome, Firefox and Edge.\n\n#### Web Workers\n\nThis library requires certain DOM objects to be globally available when used in the browser, which web workers do not make available by default. You will need to polyfill these to make this library work in web workers.\n\nFor more information please refer to our [documentation for using Azure SDK for JS in Web Workers](https://aka.ms/azsdk/js/web-workers)\n\nThis library depends on following DOM APIs which need external polyfills loaded when used in web workers:\n\n- [`document`](https://developer.mozilla.org/docs/Web/API/Document)\n- [`DOMParser`](https://developer.mozilla.org/docs/Web/API/DOMParser)\n- [`Node`](https://developer.mozilla.org/docs/Web/API/Node)\n- [`XMLSerializer`](https://developer.mozilla.org/docs/Web/API/XMLSerializer)\n\n#### Differences between Node.js and browsers\n\nThere are differences between Node.js and browsers runtime. When getting started with this library, pay attention to APIs or classes marked with _\"ONLY AVAILABLE IN NODE.JS RUNTIME\"_ or _\"ONLY AVAILABLE IN BROWSERS\"_.\n\n- If a blob holds compressed data in `gzip` or `deflate` format and its content encoding is set accordingly, downloading behavior is different between Node.js and browsers. In Node.js storage clients will download the blob in its compressed format, while in browsers the data will be downloaded in de-compressed format.\n\n##### Features, interfaces, classes or functions only available in Node.js\n\n- Shared Key Authorization based on account name and account key\n  - `StorageSharedKeyCredential`\n- Shared Access Signature(SAS) generation\n  - `generateAccountSASQueryParameters()`\n  - `generateBlobSASQueryParameters()`\n- Parallel uploading and downloading. Note that `BlockBlobClient.uploadData()` is available in both Node.js and browsers.\n  - `BlockBlobClient.uploadFile()`\n  - `BlockBlobClient.uploadStream()`\n  - `BlobClient.downloadToBuffer()`\n  - `BlobClient.downloadToFile()`\n\n##### Features, interfaces, classes or functions only available in browsers\n\n- Parallel uploading and downloading\n  - `BlockBlobClient.uploadBrowserData()`\n\n### JavaScript Bundle\n\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n### CORS\n\nYou need to set up [Cross-Origin Resource Sharing (CORS)](https://docs.microsoft.com/rest/api/storageservices/cross-origin-resource-sharing--cors--support-for-the-azure-storage-services) rules for your storage account if you need to develop for browsers. Go to Azure portal and Azure Storage Explorer, find your storage account, create new CORS rules for blob/queue/file/table service(s).\n\nFor example, you can create following CORS settings for debugging. But please customize the settings carefully according to your requirements in production environment.\n\n- Allowed origins: \\*\n- Allowed verbs: DELETE,GET,HEAD,MERGE,POST,OPTIONS,PUT\n- Allowed headers: \\*\n- Exposed headers: \\*\n- Maximum age (seconds): 86400\n\n## Key concepts\n\nBlob storage is designed for:\n\n- Serving images or documents directly to a browser.\n- Storing files for distributed access.\n- Streaming video and audio.\n- Writing to log files.\n- Storing data for backup and restore, disaster recovery, and archiving.\n- Storing data for analysis by an on-premises or Azure-hosted service.\n\nBlob storage offers three types of resources:\n\n- The _storage account_ used via `BlobServiceClient`\n- A _container_ in the storage account used via `ContainerClient`\n- A _blob_ in a container used via `BlobClient`\n\n## Examples\n\n- [Import the package](#import-the-package)\n- [Create the blob service client](#create-the-blob-service-client)\n- [Create a new container](#create-a-new-container)\n- [List the containers](#list-the-containers)\n- [Create a blob by uploading data](#create-a-blob-by-uploading-data)\n- [List blobs inside a container](#list-blobs-inside-a-container)\n- [Download a blob and convert it to a string (Node.js)](#download-a-blob-and-convert-it-to-a-string-nodejs)\n- [Download a blob and convert it to a string (Browsers)](#download-a-blob-and-convert-it-to-a-string-browsers)\n\n### Import the package\n\nTo use the clients, import the package into your file:\n\n```javascript\nconst AzureStorageBlob = require(\"@azure/storage-blob\");\n```\n\nAlternatively, selectively import only the types you need:\n\n```javascript\nconst { BlobServiceClient, StorageSharedKeyCredential } = require(\"@azure/storage-blob\");\n```\n\n### Create the blob service client\n\nThe `BlobServiceClient` requires an URL to the blob service and an access credential. It also optionally accepts some settings in the `options` parameter.\n\n#### with `DefaultAzureCredential` from `@azure/identity` package\n\n**Recommended way to instantiate a `BlobServiceClient`**\n\nSetup : Reference - Authorize access to blobs and queues with Azure Active Directory from a client application - https://docs.microsoft.com/azure/storage/common/storage-auth-aad-app\n\n- Register a new AAD application and give permissions to access Azure Storage on behalf of the signed-in user\n\n  - Register a new application in the Azure Active Directory(in the azure-portal) - https://docs.microsoft.com/azure/active-directory/develop/quickstart-register-app\n  - In the `API permissions` section, select `Add a permission` and choose `Microsoft APIs`.\n  - Pick `Azure Storage` and select the checkbox next to `user_impersonation` and then click `Add permissions`. This would allow the application to access Azure Storage on behalf of the signed-in user.\n\n- Grant access to Azure Blob data with RBAC in the Azure Portal\n\n  - RBAC roles for blobs and queues - https://docs.microsoft.com/azure/storage/common/storage-auth-aad-rbac-portal.\n  - In the azure portal, go to your storage-account and assign **Storage Blob Data Contributor** role to the registered AAD application from `Access control (IAM)` tab (in the left-side-navbar of your storage account in the azure-portal).\n\n- Environment setup for the sample\n  - From the overview page of your AAD Application, note down the `CLIENT ID` and `TENANT ID`. In the \"Certificates & Secrets\" tab, create a secret and note that down.\n  - Make sure you have AZURE_TENANT_ID, AZURE_CLIENT_ID, AZURE_CLIENT_SECRET as environment variables to successfully execute the sample(Can leverage process.env).\n\n```javascript\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { BlobServiceClient } = require(\"@azure/storage-blob\");\n\n// Enter your storage account name\nconst account = \"<account>\";\nconst defaultAzureCredential = new DefaultAzureCredential();\n\nconst blobServiceClient = new BlobServiceClient(\n  `https://${account}.blob.core.windows.net`,\n  defaultAzureCredential\n);\n```\n\nSee the [Azure AD Auth sample](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/storage/storage-blob/samples/v12/javascript/azureAdAuth.js) for a complete example using this method.\n\n[Note - Above steps are only for Node.js]\n\n#### using connection string\n\nAlternatively, you can instantiate a `BlobServiceClient` using the `fromConnectionString()` static method with the full connection string as the argument. (The connection string can be obtained from the azure portal.) [ONLY AVAILABLE IN NODE.JS RUNTIME]\n\n```javascript\nconst { BlobServiceClient } = require(\"@azure/storage-blob\");\n\nconst connStr = \"<connection string>\";\n\nconst blobServiceClient = BlobServiceClient.fromConnectionString(connStr);\n```\n\n#### with `StorageSharedKeyCredential`\n\nAlternatively, you instantiate a `BlobServiceClient` with a `StorageSharedKeyCredential` by passing account-name and account-key as arguments. (The account-name and account-key can be obtained from the azure portal.)\n[ONLY AVAILABLE IN NODE.JS RUNTIME]\n\n```javascript\nconst { BlobServiceClient, StorageSharedKeyCredential } = require(\"@azure/storage-blob\");\n\n// Enter your storage account name and shared key\nconst account = \"<account>\";\nconst accountKey = \"<accountkey>\";\n\n// Use StorageSharedKeyCredential with storage account and account key\n// StorageSharedKeyCredential is only available in Node.js runtime, not in browsers\nconst sharedKeyCredential = new StorageSharedKeyCredential(account, accountKey);\nconst blobServiceClient = new BlobServiceClient(\n  `https://${account}.blob.core.windows.net`,\n  sharedKeyCredential\n);\n```\n\n#### with SAS Token\n\nAlso, You can instantiate a `BlobServiceClient` with a shared access signatures (SAS). You can get the SAS token from the Azure Portal or generate one using `generateAccountSASQueryParameters()`.\n\n```javascript\nconst { BlobServiceClient } = require(\"@azure/storage-blob\");\n\nconst account = \"<account name>\";\nconst sas = \"<service Shared Access Signature Token>\";\n\nconst blobServiceClient = new BlobServiceClient(`https://${account}.blob.core.windows.net${sas}`);\n```\n\n### Create a new container\n\nUse `BlobServiceClient.getContainerClient()` to get a container client instance then create a new container resource.\n\n```javascript\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { BlobServiceClient } = require(\"@azure/storage-blob\");\n\nconst account = \"<account>\";\nconst defaultAzureCredential = new DefaultAzureCredential();\n\nconst blobServiceClient = new BlobServiceClient(\n  `https://${account}.blob.core.windows.net`,\n  defaultAzureCredential\n);\n\nasync function main() {\n  // Create a container\n  const containerName = `newcontainer${new Date().getTime()}`;\n  const containerClient = blobServiceClient.getContainerClient(containerName);\n  const createContainerResponse = await containerClient.create();\n  console.log(`Create container ${containerName} successfully`, createContainerResponse.requestId);\n}\n\nmain();\n```\n\n### List the containers\n\nUse `BlobServiceClient.listContainers()` function to iterate the containers,\nwith the new `for-await-of` syntax:\n\n```javascript\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { BlobServiceClient } = require(\"@azure/storage-blob\");\n\nconst account = \"<account>\";\nconst defaultAzureCredential = new DefaultAzureCredential();\n\nconst blobServiceClient = new BlobServiceClient(\n  `https://${account}.blob.core.windows.net`,\n  defaultAzureCredential\n);\n\nasync function main() {\n  let i = 1;\n  let containers = blobServiceClient.listContainers();\n  for await (const container of containers) {\n    console.log(`Container ${i++}: ${container.name}`);\n  }\n}\n\nmain();\n```\n\nAlternatively without using `for-await-of`:\n\n```javascript\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { BlobServiceClient } = require(\"@azure/storage-blob\");\n\nconst account = \"<account>\";\nconst defaultAzureCredential = new DefaultAzureCredential();\n\nconst blobServiceClient = new BlobServiceClient(\n  `https://${account}.blob.core.windows.net`,\n  defaultAzureCredential\n);\n\nasync function main() {\n  let i = 1;\n  let iter = blobServiceClient.listContainers();\n  let containerItem = await iter.next();\n  while (!containerItem.done) {\n    console.log(`Container ${i++}: ${containerItem.value.name}`);\n    containerItem = await iter.next();\n  }\n}\n\nmain();\n```\n\nIn addition, pagination is supported for listing too via `byPage()`:\n\n```javascript\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { BlobServiceClient } = require(\"@azure/storage-blob\");\n\nconst account = \"<account>\";\nconst defaultAzureCredential = new DefaultAzureCredential();\n\nconst blobServiceClient = new BlobServiceClient(\n  `https://${account}.blob.core.windows.net`,\n  defaultAzureCredential\n);\n\nasync function main() {\n  let i = 1;\n  for await (const response of blobServiceClient.listContainers().byPage({ maxPageSize: 20 })) {\n    if (response.containerItems) {\n      for (const container of response.containerItems) {\n        console.log(`Container ${i++}: ${container.name}`);\n      }\n    }\n  }\n}\n\nmain();\n```\n\nFor a complete sample on iterating containers please see [samples/v12/typescript/src/listContainers.ts](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/storage/storage-blob/samples/v12/typescript/src/listContainers.ts).\n\n### Create a blob by uploading data\n\n```javascript\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { BlobServiceClient } = require(\"@azure/storage-blob\");\n\nconst account = \"<account>\";\nconst defaultAzureCredential = new DefaultAzureCredential();\n\nconst blobServiceClient = new BlobServiceClient(\n  `https://${account}.blob.core.windows.net`,\n  defaultAzureCredential\n);\n\nconst containerName = \"<container name>\";\n\nasync function main() {\n  const containerClient = blobServiceClient.getContainerClient(containerName);\n\n  const content = \"Hello world!\";\n  const blobName = \"newblob\" + new Date().getTime();\n  const blockBlobClient = containerClient.getBlockBlobClient(blobName);\n  const uploadBlobResponse = await blockBlobClient.upload(content, content.length);\n  console.log(`Upload block blob ${blobName} successfully`, uploadBlobResponse.requestId);\n}\n\nmain();\n```\n\n### List blobs inside a container\n\nSimilar to listing containers.\n\n```javascript\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { BlobServiceClient } = require(\"@azure/storage-blob\");\n\nconst account = \"<account>\";\nconst defaultAzureCredential = new DefaultAzureCredential();\n\nconst blobServiceClient = new BlobServiceClient(\n  `https://${account}.blob.core.windows.net`,\n  defaultAzureCredential\n);\n\nconst containerName = \"<container name>\";\n\nasync function main() {\n  const containerClient = blobServiceClient.getContainerClient(containerName);\n\n  let i = 1;\n  let blobs = containerClient.listBlobsFlat();\n  for await (const blob of blobs) {\n    console.log(`Blob ${i++}: ${blob.name}`);\n  }\n}\n\nmain();\n```\n\nFor a complete sample on iterating blobs please see [samples/v12/typescript/src/listBlobsFlat.ts](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/storage/storage-blob/samples/v12/typescript/src/listBlobsFlat.ts).\n\n### Download a blob and convert it to a string (Node.js)\n\n```javascript\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { BlobServiceClient } = require(\"@azure/storage-blob\");\n\nconst account = \"<account>\";\nconst defaultAzureCredential = new DefaultAzureCredential();\n\nconst blobServiceClient = new BlobServiceClient(\n  `https://${account}.blob.core.windows.net`,\n  defaultAzureCredential\n);\n\nconst containerName = \"<container name>\";\nconst blobName = \"<blob name>\";\n\nasync function main() {\n  const containerClient = blobServiceClient.getContainerClient(containerName);\n  const blobClient = containerClient.getBlobClient(blobName);\n\n  // Get blob content from position 0 to the end\n  // In Node.js, get downloaded data by accessing downloadBlockBlobResponse.readableStreamBody\n  const downloadBlockBlobResponse = await blobClient.download();\n  const downloaded = (\n    await streamToBuffer(downloadBlockBlobResponse.readableStreamBody)\n  ).toString();\n  console.log(\"Downloaded blob content:\", downloaded);\n\n  // [Node.js only] A helper method used to read a Node.js readable stream into a Buffer\n  async function streamToBuffer(readableStream) {\n    return new Promise((resolve, reject) => {\n      const chunks = [];\n      readableStream.on(\"data\", (data) => {\n        chunks.push(data instanceof Buffer ? data : Buffer.from(data));\n      });\n      readableStream.on(\"end\", () => {\n        resolve(Buffer.concat(chunks));\n      });\n      readableStream.on(\"error\", reject);\n    });\n  }\n}\n\nmain();\n```\n\n### Download a blob and convert it to a string (Browsers).\n\nPlease refer to the [JavaScript Bundle](#javascript-bundle) section for more information on using this library in the browser.\n\n```javascript\nconst { BlobServiceClient } = require(\"@azure/storage-blob\");\n\nconst account = \"<account name>\";\nconst sas = \"<service Shared Access Signature Token>\";\nconst containerName = \"<container name>\";\nconst blobName = \"<blob name>\";\n\nconst blobServiceClient = new BlobServiceClient(`https://${account}.blob.core.windows.net${sas}`);\n\nasync function main() {\n  const containerClient = blobServiceClient.getContainerClient(containerName);\n  const blobClient = containerClient.getBlobClient(blobName);\n\n  // Get blob content from position 0 to the end\n  // In browsers, get downloaded data by accessing downloadBlockBlobResponse.blobBody\n  const downloadBlockBlobResponse = await blobClient.download();\n  const downloaded = await blobToString(await downloadBlockBlobResponse.blobBody);\n  console.log(\"Downloaded blob content\", downloaded);\n\n  // [Browsers only] A helper method used to convert a browser Blob into string.\n  async function blobToString(blob) {\n    const fileReader = new FileReader();\n    return new Promise((resolve, reject) => {\n      fileReader.onloadend = (ev) => {\n        resolve(ev.target.result);\n      };\n      fileReader.onerror = reject;\n      fileReader.readAsText(blob);\n    });\n  }\n}\n\nmain();\n```\n\nA complete example of simple scenarios is at [samples/v12/typescript/src/sharedKeyAuth.ts](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/storage/storage-blob/samples/v12/typescript/src/sharedKeyAuth.ts).\n\n## Troubleshooting\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\n\nsetLogLevel(\"info\");\n```\n\n## Next steps\n\nMore code samples:\n\n- [Blob Storage Samples (JavaScript)](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/storage/storage-blob/samples/v12/javascript)\n- [Blob Storage Samples (TypeScript)](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/storage/storage-blob/samples/v12/typescript)\n- [Blob Storage Test Cases](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/storage/storage-blob/test/)\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\nAlso refer to [Storage specific guide](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/storage/CONTRIBUTING.md) for additional information on setting up the test environment for storage libraries.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fstorage%2Fstorage-blob%2FREADME.png)\n",
        "repo_name": "storage/storage-blob",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/storage/storage-blob",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure DataLakeStorageClient SDK for JavaScript\n\nThis package contains an isomorphic SDK for DataLakeStorageClient.\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge, and Firefox.\n\n### How to Install\n\n```bash\nnpm install @azure/storage-datalake\n```\n\n### How to use\n\n#### nodejs - Authentication, client creation and list filesystem as an example written in TypeScript.\n\n##### Sample code\n\nThis sample lists the file systems in your storage account. To know more, refer to the [Azure Documentation on Storage DataLake](https://docs.microsoft.com/azure/storage/blobs/data-lake-storage-introduction)\n\n```typescript\nimport * as msRest from \"@azure/ms-rest-js\";\nimport { DataLakeStorageClient } from \"@azure/storage-datalake\";\n\nconst token = \"YOUR_STORAGE_TOKEN\";\nconst credentials = new msRest.TokenCredentials(token);\nconst accountName = \"YOUR_STORAGE_ACCOUNTNAME\";\n\nconst client = new DataLakeStorageClient(credentials, accountName);\nclient.filesystem\n  .list()\n  .then((results) => {\n    results.forEach((result) => {\n      console.log(`Name: ${result.name}`);\n      console.log(`Last Modified: ${result.lastModified}`);\n    });\n  })\n  .catch((ex) => {\n    console.log(ex);\n  });\n```\n\n#### browser - Authentication, client creation and list filesystem as an example written in JavaScript.\n\n##### Sample code\n\n- index.html\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>@azure/storage-datalake sample</title>\n    <script src=\"node_modules/@azure/ms-rest-js/dist/msRest.browser.js\"></script>\n    <script src=\"node_modules/@azure/ms-rest-azure-js/dist/msRestAzure.js\"></script>\n    <script src=\"node_modules/@azure/storage-datalake/dist/storage-datalake.js\"></script>\n    <script type=\"text/javascript\">\n      const token = \"YOUR_STORAGE_TOKEN\";\n      const credentials = new msRest.TokenCredentials(token);\n      const accountName = \"YOUR_STORAGE_ACCOUNTNAME\";\n\n      const client = new Azure.StorageDatalake.DataLakeStorageClient(credentials, accountName);\n\n      client.filesystem\n        .list()\n        .then((results) => {\n          results.forEach((result) => {\n            console.log(`Name: ${result.name}`);\n            console.log(`Last Modified: ${result.lastModified}`);\n          });\n        })\n        .catch((ex) => {\n          console.log(ex);\n        });\n    </script>\n  </head>\n  <body></body>\n</html>\n```\n\n## Troubleshooting\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nimport { setLogLevel } from \"@azure/logger\";\n\nsetLogLevel(\"info\");\n```\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\nAlso refer to [Storage specific guide](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/storage/CONTRIBUTING.md) for additional information on setting up the test environment for storage libraries.\n\n## Related projects\n\n- [Microsoft Azure SDK for Javascript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fstorage%2Fstorage-datalake%2FREADME.png)\n",
        "repo_name": "storage/storage-datalake",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/storage/storage-datalake",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Storage File Data Lake client library for JavaScript\n\nAzure Data Lake Storage (ADLS) includes all the capabilities required to make it easy for developers, data scientists, and analysts to store data of any size, shape, and speed, and do all types of processing and analytics across platforms and languages. It removes the complexities of ingesting and storing all of your data while making it faster to get up and running with batch, streaming, and interactive analytics.\n\nThis project provides a client library in JavaScript that makes it easy to consume Microsoft Azure Storage Data Lake service.\n\nUse the client libraries in this package to:\n\n- Create/List/Delete File Systems\n- Create/Read/List/Update/Delete Paths, Directories and Files\n\nkey links:\n\n- [Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/storage/storage-file-datalake)\n- [Package (npm)](https://www.npmjs.com/package/@azure/storage-file-datalake)\n- [API Reference Documentation](https://docs.microsoft.com/javascript/api/@azure/storage-file-datalake)\n- [Product documentation](https://docs.microsoft.com/azure/storage/blobs/data-lake-storage-introduction?toc=%2fazure%2fstorage%2fblobs%2ftoc.json)\n- [Samples](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/storage/storage-file-datalake/samples)\n- [Azure Storage Data Lake REST APIs](https://docs.microsoft.com/rest/api/storageservices/data-lake-storage-gen2)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge, and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription](https://azure.microsoft.com/free/)\n- A [Storage Account](https://docs.microsoft.com/azure/storage/common/storage-account-create)\n\n### Install the package\n\nThe preferred way to install the Azure Storage Data Lake client library for JavaScript is to use the npm package manager. Type the following into a terminal window:\n\n```bash\nnpm install @azure/storage-file-datalake\n```\n\n### Authenticate the client\n\nAzure Storage supports several ways to authenticate. In order to interact with the Azure Data Lake Storage service you'll need to create an instance of a Storage client - `DataLakeServiceClient`, `DataLakeFileSystemClient`, or `DataLakePathClient` for example. See [samples for creating the `DataLakeServiceClient`](#create-the-data-lake-service-client) to learn more about authentication.\n\n- [Azure Active Directory](#with-defaultazurecredential-from-azureidentity-package)\n- [Shared Key](#with-storagesharedkeycredential)\n- [Shared access signatures](#with-sas-token)\n\n#### Azure Active Directory\n\nThe Azure Data Lake Storage service supports the use of Azure Active Directory to authenticate requests to its APIs. The [`@azure/identity`](https://www.npmjs.com/package/@azure/identity) package provides a variety of credential types that your application can use to do this. Please see the [README for `@azure/identity`](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/identity/identity/README.md) for more details and samples to get you started.\n\n### Compatibility\n\nThis library is compatible with Node.js and browsers, and validated against LTS Node.js versions (>=8.16.0) and latest versions of Chrome, Firefox and Edge.\n\n#### Web Workers\n\nThis library requires certain DOM objects to be globally available when used in the browser, which web workers do not make available by default. You will need to polyfill these to make this library work in web workers.\n\nFor more information please refer to our [documentation for using Azure SDK for JS in Web Workers](https://aka.ms/azsdk/js/web-workers)\n\nThis library depends on following DOM APIs which need external polyfills loaded when used in web workers:\n\n- [`document`](https://developer.mozilla.org/docs/Web/API/Document)\n- [`DOMParser`](https://developer.mozilla.org/docs/Web/API/DOMParser)\n- [`Node`](https://developer.mozilla.org/docs/Web/API/Node)\n- [`XMLSerializer`](https://developer.mozilla.org/docs/Web/API/XMLSerializer)\n\n#### Differences between Node.js and browsers\n\nThere are differences between Node.js and browsers runtime. When getting started with this library, pay attention to APIs or classes marked with _\"ONLY AVAILABLE IN NODE.JS RUNTIME\"_ or _\"ONLY AVAILABLE IN BROWSERS\"_.\n\n- If a file holds compressed data in `gzip` or `deflate` format and its content encoding is set accordingly, downloading behavior is different between Node.js and browsers. In Node.js storage clients will download the file in its compressed format, while in browsers the data will be downloaded in de-compressed format.\n\n##### Features, interfaces, classes or functions only available in Node.js\n\n- Shared Key Authorization based on account name and account key\n  - `StorageSharedKeyCredential`\n- Shared Access Signature(SAS) generation\n  - `generateAccountSASQueryParameters()`\n  - `generateDataLakeSASQueryParameters()`\n- Parallel uploading and downloading. Note that `DataLakeFileClient.upload()` is available in both Node.js and browsers.\n  - `DataLakeFileClient.uploadFile()`\n  - `DataLakeFileClient.uploadStream()`\n  - `DataLakeFileClient.readToBuffer()`\n  - `DataLakeFileClient.readToFile()`\n\n##### Features, interfaces, classes or functions only available in browsers\n\n- N/A\n\n### JavaScript Bundle\n\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n### CORS\n\nYou need to set up [Cross-Origin Resource Sharing (CORS)](https://docs.microsoft.com/rest/api/storageservices/cross-origin-resource-sharing--cors--support-for-the-azure-storage-services) rules for your storage account if you need to develop for browsers. Go to Azure portal and Azure Storage Explorer, find your storage account, create new CORS rules for blob/queue/file/table service(s).\n\nFor example, you can create following CORS settings for debugging. But please customize the settings carefully according to your requirements in production environment.\n\n- Allowed origins: \\*\n- Allowed verbs: DELETE,GET,HEAD,MERGE,POST,OPTIONS,PUT\n- Allowed headers: \\*\n- Exposed headers: \\*\n- Maximum age (seconds): 86400\n\n> Notice: Data Lake currently shares CORS settings for blob service.\n\n## Key concepts\n\nAzure Data Lake Storage Gen2 was designed to:\n\n- Serve multiple petabytes of information while sustaining hundreds of gigabits of throughput\n- Allow you to easily manage massive amounts of data\n\nKey Features of DataLake Storage Gen2 include:\n\n- Hadoop compatible access\n- A super set of POSIX permissions\n- Cost effective in terms of low-cost storage capacity and transactions\n- Optimized driver for big data analytics\n\nA fundamental part of Data Lake Storage Gen2 is the addition of a hierarchical namespace to Blob storage. The hierarchical namespace organizes objects/files into a hierarchy of directories for efficient data access.\n\nIn the past, cloud-based analytics had to compromise in areas of performance, management, and security. Data Lake Storage Gen2 addresses each of these aspects in the following ways:\n\n- Performance is optimized because you do not need to copy or transform data as a prerequisite for analysis. The hierarchical namespace greatly improves the performance of directory management operations, which improves overall job performance.\n- Management is easier because you can organize and manipulate files through directories and subdirectories.\n- Security is enforceable because you can define POSIX permissions on directories or individual files.\n- Cost effectiveness is made possible as Data Lake Storage Gen2 is built on top of the low-cost Azure Blob storage. The additional features further lower the total cost of ownership for running big data analytics on Azure.\n\nData Lake storage offers three types of resources:\n\n- The _storage account_ used via `DataLakeServiceClient`\n- A _file system_ in the storage account used via `DataLakeFileSystemClient`\n- A _path_ in a file system used via `DataLakeDirectoryClient` or `DataLakeFileClient`\n\n| Azure DataLake Gen2      | Blob      |\n| ------------------------ | --------- |\n| Filesystem               | Container |\n| Path (File or Directory) | Blob      |\n\n> Note: This client library only supports storage accounts with hierarchical namespace (HNS) enabled.\n\n## Examples\n\n- [Import the package](#import-the-package)\n- [Create the data lake service client](#create-the-data-lake-service-client)\n- [Create a new file system](#create-a-new-file-system)\n- [List the file systems](#list-the-file-systems)\n- [Create and delete a directory](#create-and-delete-a-directory)\n- [Create a file](#create-a-file)\n- [List paths inside a file system](#list-paths-inside-a-file-system)\n- [Download a file and convert it to a string (Node.js)](#download-a-file-and-convert-it-to-a-string-nodejs)\n- [Download a file and convert it to a string (Browsers)](#download-a-file-and-convert-it-to-a-string-browsers)\n\n### Import the package\n\nTo use the clients, import the package into your file:\n\n```javascript\nconst AzureStorageDataLake = require(\"@azure/storage-file-datalake\");\n```\n\nAlternatively, selectively import only the types you need:\n\n```javascript\nconst {\n  DataLakeServiceClient,\n  StorageSharedKeyCredential\n} = require(\"@azure/storage-file-datalake\");\n```\n\n### Create the data lake service client\n\nThe `DataLakeServiceClient` requires an URL to the data lake service and an access credential. It also optionally accepts some settings in the `options` parameter.\n\n#### with `DefaultAzureCredential` from `@azure/identity` package\n\n**Recommended way to instantiate a `DataLakeServiceClient`**\n\n> Notice. Azure Data Lake currently reuses blob related roles like \"Storage Blob Data Owner\" during following AAD OAuth authentication.\n\nSetup : Reference - Authorize access to blobs (data lake) and queues with Azure Active Directory from a client application - https://docs.microsoft.com/azure/storage/common/storage-auth-aad-app\n\n- Register a new AAD application and give permissions to access Azure Storage on behalf of the signed-in user.\n\n  - Register a new application in the Azure Active Directory(in the azure-portal) - https://docs.microsoft.com/azure/active-directory/develop/quickstart-register-app\n  - In the `API permissions` section, select `Add a permission` and choose `Microsoft APIs`.\n  - Pick `Azure Storage` and select the checkbox next to `user_impersonation` and then click `Add permissions`. This would allow the application to access Azure Storage on behalf of the signed-in user.\n\n- Grant access to Azure Data Lake data with RBAC in the Azure Portal\n\n  - RBAC roles for blobs (data lake) and queues - https://docs.microsoft.com/azure/storage/common/storage-auth-aad-rbac-portal.\n  - In the azure portal, go to your storage-account and assign **Storage Blob Data Contributor** role to the registered AAD application from `Access control (IAM)` tab (in the left-side-navbar of your storage account in the azure-portal).\n\n- Environment setup for the sample\n  - From the overview page of your AAD Application, note down the `CLIENT ID` and `TENANT ID`. In the \"Certificates & Secrets\" tab, create a secret and note that down.\n  - Make sure you have AZURE_TENANT_ID, AZURE_CLIENT_ID, AZURE_CLIENT_SECRET as environment variables to successfully execute the sample(Can leverage process.env).\n\n```javascript\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { DataLakeServiceClient } = require(\"@azure/storage-file-datalake\");\n\n// Enter your storage account name\nconst account = \"<account>\";\nconst defaultAzureCredential = new DefaultAzureCredential();\n\nconst datalakeServiceClient = new DataLakeServiceClient(\n  `https://${account}.dfs.core.windows.net`,\n  defaultAzureCredential\n);\n```\n\nSee the [Azure AD Auth sample](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/storage/storage-blob/samples/v12/javascript/azureAdAuth.js) for a complete example using this method.\n\n[Note - Above steps are only for Node.js]\n\n#### using connection string\n\nAlternatively, you can instantiate a `DataLakeServiceClient` using the `fromConnectionString()` static method with the full connection string as the argument. (The connection string can be obtained from the azure portal.)\n[ONLY AVAILABLE IN NODE.JS RUNTIME]\n\n```javascript\nconst { DataLakeServiceClient } = require(\"@azure/storage-file-datalake\");\n\nconst connStr = \"<connection string>\";\n\nconst dataLakeServiceClient = DataLakeServiceClient.fromConnectionString(connStr);\n```\n\n#### with `StorageSharedKeyCredential`\n\nAlternatively, you instantiate a `DataLakeServiceClient` with a `StorageSharedKeyCredential` by passing account-name and account-key as arguments. (The account-name and account-key can be obtained from the azure portal.)\n[ONLY AVAILABLE IN NODE.JS RUNTIME]\n\n```javascript\nconst {\n  DataLakeServiceClient,\n  StorageSharedKeyCredential\n} = require(\"@azure/storage-file-datalake\");\n\n// Enter your storage account name and shared key\nconst account = \"<account>\";\nconst accountKey = \"<accountkey>\";\n\n// Use StorageSharedKeyCredential with storage account and account key\n// StorageSharedKeyCredential is only available in Node.js runtime, not in browsers\nconst sharedKeyCredential = new StorageSharedKeyCredential(account, accountKey);\nconst datalakeServiceClient = new DataLakeServiceClient(\n  `https://${account}.dfs.core.windows.net`,\n  sharedKeyCredential\n);\n```\n\n#### with SAS Token\n\nAlso, You can instantiate a `DataLakeServiceClient` with a shared access signatures (SAS). You can get the SAS token from the Azure Portal or generate one using `generateAccountSASQueryParameters()`.\n\n```javascript\nconst { DataLakeServiceClient } = require(\"@azure/storage-file-datalake\");\n\nconst account = \"<account name>\";\nconst sas = \"<service Shared Access Signature Token>\";\nconst serviceClientWithSAS = new DataLakeServiceClient(\n  `https://${account}.dfs.core.windows.net${sas}`\n);\n```\n\n### Create a new file system\n\nUse `DataLakeServiceClient.getFileSystemClient()` to get a file system client instance then create a new file system resource.\n\n```javascript\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { DataLakeServiceClient } = require(\"@azure/storage-file-datalake\");\n\nconst account = \"<account>\";\nconst defaultAzureCredential = new DefaultAzureCredential();\n\nconst datalakeServiceClient = new DataLakeServiceClient(\n  `https://${account}.dfs.core.windows.net`,\n  defaultAzureCredential\n);\n\nasync function main() {\n  // Create a file system\n  const fileSystemName = `newfilesystem${new Date().getTime()}`;\n  const fileSystemClient = datalakeServiceClient.getFileSystemClient(fileSystemName);\n  const createResponse = await fileSystemClient.create();\n  console.log(`Create file system ${fileSystemName} successfully`, createResponse.requestId);\n}\n\nmain();\n```\n\n### List the file systems\n\nUse `DataLakeServiceClient.listFileSystems()` function to iterate the file systems,\nwith the new `for-await-of` syntax:\n\n```javascript\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { DataLakeServiceClient } = require(\"@azure/storage-file-datalake\");\n\nconst account = \"<account>\";\nconst defaultAzureCredential = new DefaultAzureCredential();\n\nconst datalakeServiceClient = new DataLakeServiceClient(\n  `https://${account}.dfs.core.windows.net`,\n  defaultAzureCredential\n);\n\nasync function main() {\n  let i = 1;\n  let fileSystems = datalakeServiceClient.listFileSystems();\n  for await (const fileSystem of fileSystems) {\n    console.log(`File system ${i++}: ${fileSystem.name}`);\n  }\n}\n\nmain();\n```\n\nAlternatively without using `for-await-of`:\n\n```javascript\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { DataLakeServiceClient } = require(\"@azure/storage-file-datalake\");\n\nconst account = \"<account>\";\nconst defaultAzureCredential = new DefaultAzureCredential();\n\nconst datalakeServiceClient = new DataLakeServiceClient(\n  `https://${account}.dfs.core.windows.net`,\n  defaultAzureCredential\n);\n\nasync function main() {\n  let i = 1;\n  let iter = datalakeServiceClient.listFileSystems();\n  let fileSystemItem = await iter.next();\n  while (!fileSystemItem.done) {\n    console.log(`File System ${i++}: ${fileSystemItem.value.name}`);\n    fileSystemItem = await iter.next();\n  }\n}\n\nmain();\n```\n\nIn addition, pagination is supported for listing too via `byPage()`:\n\n```javascript\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { DataLakeServiceClient } = require(\"@azure/storage-file-datalake\");\n\nconst account = \"<account>\";\nconst defaultAzureCredential = new DefaultAzureCredential();\n\nconst datalakeServiceClient = new DataLakeServiceClient(\n  `https://${account}.dfs.core.windows.net`,\n  defaultAzureCredential\n);\n\nasync function main() {\n  let i = 1;\n  for await (const response of datalakeServiceClient\n    .listFileSystems()\n    .byPage({ maxPageSize: 20 })) {\n    if (response.fileSystemItems) {\n      for (const fileSystem of response.fileSystemItems) {\n        console.log(`File System ${i++}: ${fileSystem.name}`);\n      }\n    }\n  }\n}\n\nmain();\n```\n\n### Create and delete a directory\n\n```javascript\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { DataLakeServiceClient } = require(\"@azure/storage-file-datalake\");\n\nconst account = \"<account>\";\nconst defaultAzureCredential = new DefaultAzureCredential();\n\nconst datalakeServiceClient = new DataLakeServiceClient(\n  `https://${account}.dfs.core.windows.net`,\n  defaultAzureCredential\n);\n\nconst fileSystemName = \"<file system name>\";\n\nasync function main() {\n  const fileSystemClient = datalakeServiceClient.getFileSystemClient(fileSystemName);\n  const directoryClient = fileSystemClient.getDirectoryClient(\"directory\");\n  await directoryClient.create();\n  await directoryClient.delete();\n}\n\nmain();\n```\n\n### Create a file\n\n```javascript\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { DataLakeServiceClient } = require(\"@azure/storage-file-datalake\");\n\nconst account = \"<account>\";\nconst defaultAzureCredential = new DefaultAzureCredential();\n\nconst datalakeServiceClient = new DataLakeServiceClient(\n  `https://${account}.dfs.core.windows.net`,\n  defaultAzureCredential\n);\n\nconst fileSystemName = \"<file system name>\";\n\nasync function main() {\n  const fileSystemClient = datalakeServiceClient.getFileSystemClient(fileSystemName);\n\n  const content = \"Hello world!\";\n  const fileName = \"newfile\" + new Date().getTime();\n  const fileClient = fileSystemClient.getFileClient(fileName);\n  await fileClient.create();\n  await fileClient.append(content, 0, content.length);\n  await fileClient.flush(content.length);\n  console.log(`Create and upload file ${fileName} successfully`);\n}\n\nmain();\n```\n\n### List paths inside a file system\n\nSimilar to listing file systems.\n\n```javascript\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { DataLakeServiceClient } = require(\"@azure/storage-file-datalake\");\n\nconst account = \"<account>\";\nconst defaultAzureCredential = new DefaultAzureCredential();\n\nconst datalakeServiceClient = new DataLakeServiceClient(\n  `https://${account}.dfs.core.windows.net`,\n  defaultAzureCredential\n);\n\nconst fileSystemName = \"<file system name>\";\n\nasync function main() {\n  const fileSystemClient = datalakeServiceClient.getFileSystemClient(fileSystemName);\n\n  let i = 1;\n  let paths = fileSystemClient.listPaths();\n  for await (const path of paths) {\n    console.log(`Path ${i++}: ${path.name}, is directory: ${path.isDirectory}`);\n  }\n}\n\nmain();\n```\n\n### Download a file and convert it to a string (Node.js)\n\n```javascript\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { DataLakeServiceClient } = require(\"@azure/storage-file-datalake\");\n\nconst account = \"<account>\";\nconst defaultAzureCredential = new DefaultAzureCredential();\n\nconst datalakeServiceClient = new DataLakeServiceClient(\n  `https://${account}.dfs.core.windows.net`,\n  defaultAzureCredential\n);\n\nconst fileSystemName = \"<file system name>\";\nconst fileName = \"<file name>\";\n\nasync function main() {\n  const fileSystemClient = datalakeServiceClient.getFileSystemClient(fileSystemName);\n  const fileClient = fileSystemClient.getFileClient(fileName);\n\n  // Get file content from position 0 to the end\n  // In Node.js, get downloaded data by accessing downloadResponse.readableStreamBody\n  const downloadResponse = await fileClient.read();\n  const downloaded = await streamToBuffer(downloadResponse.readableStreamBody);\n  console.log(\"Downloaded file content:\", downloaded.toString());\n\n  // [Node.js only] A helper method used to read a Node.js readable stream into a Buffer.\n  async function streamToBuffer(readableStream) {\n    return new Promise((resolve, reject) => {\n      const chunks = [];\n      readableStream.on(\"data\", (data) => {\n        chunks.push(data instanceof Buffer ? data : Buffer.from(data));\n      });\n      readableStream.on(\"end\", () => {\n        resolve(Buffer.concat(chunks));\n      });\n      readableStream.on(\"error\", reject);\n    });\n  }\n}\n\nmain();\n```\n\n### Download a file and convert it to a string (Browsers)\n\n```javascript\nconst { DataLakeServiceClient } = require(\"@azure/storage-file-datalake\");\n\nconst account = \"<account>\";\nconst sas=\"<sas token>\"\n\nconst datalakeServiceClient = new DataLakeServiceClient(\n  `https://${account}.dfs.core.windows.net${sas}`\n);\n\nconst fileSystemName = \"<file system name>\";\nconst fileName = \"<file name>\"\n\nasync function main() {\n  const fileSystemClient = datalakeServiceClient.getFileSystemClient(fileSystemName);\n  const fileClient = fileSystemClient.getFileClient(fileName);\n\n  // Get file content from position 0 to the end\n  // In browsers, get downloaded data by accessing downloadResponse.contentAsBlob\n  const downloadResponse = await fileClient.read();\n  const downloaded = await blobToString(await downloadResponse.contentAsBlob);\n  console.log(\n    \"Downloaded file content\",\n    downloaded\n  );\n\n  // [Browsers only] A helper method used to convert a browser Blob into string.\n  async function blobToString(blob: Blob): Promise<string> {\n    const fileReader = new FileReader();\n    return new Promise<string>((resolve, reject) => {\n      fileReader.onloadend = (ev: any) => {\n        resolve(ev.target!.result);\n      };\n      fileReader.onerror = reject;\n      fileReader.readAsText(blob);\n    });\n  }\n}\n\nmain();\n```\n\n## Troubleshooting\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\n\nsetLogLevel(\"info\");\n```\n\n## Next steps\n\nMore code samples:\n\n- [DataLake Storage Samples (JavaScript)](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/storage/storage-file-datalake/samples/v12/javascript)\n- [DataLake Storage Samples (TypeScript)](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/storage/storage-file-datalake/samples/v12/typescript)\n- [DataLake Storage Test Cases](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/storage/storage-file-datalake/test/)\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fstorage%2Fstorage-blob%2FREADME.png)\n",
        "repo_name": "storage/storage-file-datalake",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/storage/storage-file-datalake",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Storage File Share client library for JavaScript\n\nAzure Files offers fully managed file shares in the cloud that are accessible via the industry standard Server Message Block (SMB) protocol. Azure file shares can be mounted concurrently by cloud or on-premises deployments of Windows, Linux, and macOS. Additionally, Azure file shares can be cached on Windows Servers with Azure File Sync for fast access near where the data is being used.\n\nThis project provides a client library in JavaScript that makes it easy to consume Microsoft Azure File Storage service.\n\nUse the client libraries in this package to:\n\n- Get/Set File Service Properties\n- Create/List/Delete File Shares\n- Create/List/Delete File Directories\n- Create/Read/List/Update/Delete Files\n\n> Note: This package was previously published under the name `@azure/storage-file`.\n> It has been renamed to `@azure/storage-file-share` to better align with the upcoming new package\n> for Azure Storage Files DataLake and provide a consistent set of APIs for working with files on Azure.\n\nKey links:\n\n- [Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/storage/storage-file-share)\n- [Package (npm)](https://www.npmjs.com/package/@azure/storage-file-share/)\n- [API Reference Documentation](https://docs.microsoft.com/javascript/api/@azure/storage-file-share)\n- [Product documentation](https://docs.microsoft.com/azure/storage/files/storage-files-introduction)\n- [Samples](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/storage/storage-file-share/samples)\n- [Azure Storage File REST APIs](https://docs.microsoft.com/rest/api/storageservices/file-service-rest-api)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge, and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription](https://azure.microsoft.com/free/)\n- A [Storage Account](https://docs.microsoft.com/azure/storage/common/storage-account-create)\n\n### Install the package\n\nThe preferred way to install the Azure File Storage client library for JavaScript is to use the npm package manager. Type the following into a terminal window:\n\n```bash\nnpm install @azure/storage-file-share\n```\n\n### Authenticate the client\n\nAzure Storage supports several ways to authenticate. In order to interact with the Azure Storage File Share service you'll need to create an instance of a Storage client - `ShareServiceClient`, `ShareClient`, or `ShareDirectoryClient` for example. See [samples for creating the `ShareServiceClient`](#create-the-share-service-client) to learn more about authentication.\n\n- [Shared Key](#with-storagesharedkeycredential)\n- [Shared access signatures](#with-sas-token)\n\n### Compatibility\n\nThis library is compatible with Node.js and browsers, and validated against LTS Node.js versions (>=8.16.0) and latest versions of Chrome, Firefox and Edge.\n\n#### Web Workers\n\nThis library requires certain DOM objects to be globally available when used in the browser, which web workers do not make available by default. You will need to polyfill these to make this library work in web workers.\n\nFor more information please refer to our [documentation for using Azure SDK for JS in Web Workers](https://aka.ms/azsdk/js/web-workers)\n\nThis library depends on following DOM APIs which need external polyfills loaded when used in web workers:\n\n- [`document`](https://developer.mozilla.org/docs/Web/API/Document)\n- [`DOMParser`](https://developer.mozilla.org/docs/Web/API/DOMParser)\n- [`Node`](https://developer.mozilla.org/docs/Web/API/Node)\n- [`XMLSerializer`](https://developer.mozilla.org/docs/Web/API/XMLSerializer)\n\n#### Differences between Node.js and browsers\n\nThere are differences between Node.js and browsers runtime. When getting started with this library, pay attention to APIs or classes marked with _\"ONLY AVAILABLE IN NODE.JS RUNTIME\"_ or _\"ONLY AVAILABLE IN BROWSERS\"_.\n\n- If a file holds compressed data in `gzip` or `deflate` format and its content encoding is set accordingly, downloading behavior is different between Node.js and browsers. In Node.js storage clients will download the file in its compressed format, while in browsers the data will be downloaded in de-compressed format.\n\n##### Following features, interfaces, classes or functions are only available in Node.js\n\n- Shared Key Authorization based on account name and account key\n  - `StorageSharedKeyCredential`\n- Shared Access Signature(SAS) generation\n  - `generateAccountSASQueryParameters()`\n  - `generateFileSASQueryParameters()`\n- Parallel uploading and downloading. Note that `ShareFileClient.uploadData()` is available in both Node.js and browsers.\n  - `ShareFileClient.uploadFile()`\n  - `ShareFileClient.uploadStream()`\n  - `ShareFileClient.downloadToBuffer()`\n  - `ShareFileClient.downloadToFile()`\n\n##### Following features, interfaces, classes or functions are only available in browsers\n\nN/A\n\n### JavaScript Bundle\n\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n### CORS\n\nYou need to set up [Cross-Origin Resource Sharing (CORS)](https://docs.microsoft.com/rest/api/storageservices/cross-origin-resource-sharing--cors--support-for-the-azure-storage-services) rules for your storage account if you need to develop for browsers. Go to Azure portal and Azure Storage Explorer, find your storage account, create new CORS rules for blob/queue/file/table service(s).\n\nFor example, you can create following CORS settings for debugging. But please customize the settings carefully according to your requirements in production environment.\n\n- Allowed origins: \\*\n- Allowed verbs: DELETE,GET,HEAD,MERGE,POST,OPTIONS,PUT\n- Allowed headers: \\*\n- Exposed headers: \\*\n- Maximum age (seconds): 86400\n\n## Key concepts\n\nThe following components and their corresponding client libraries make up the Azure Storage File Share service:\n\n- The _storage account_ itself, represented by a `ShareServiceClient`\n- A _file share_ within the storage account, represented by a `ShareClient`\n- An optional _hierarchy of directories_ within the file share, represented by `ShareDirectoryClient` instances\n- A _file_ within the file share, which may be up to 1 TiB in size, represented by a `ShareFileClient`\n\n## Examples\n\n- [Import the package](#import-the-package)\n- [Create the share service client](#create-the-share-service-client)\n- [List shares in the account](#list-shares-in-the-account)\n- [Create a new share and a directory](#create-a-new-share-and-a-directory)\n- [Create an azure file then upload to it](#create-an-azure-file-then-upload-to-it)\n- [List files and directories under a directory](#list-files-and-directories-under-a-directory)\n- [Download a file and convert it to a string (Node.js)](#download-a-file-and-convert-it-to-a-string-nodejs)\n- [Download a file and convert it to a string (Browsers)](#download-a-file-and-convert-it-to-a-string-browsers)\n\n### Import the package\n\nTo use the clients, import the package into your file:\n\n```javascript\nconst AzureStorageFileShare = require(\"@azure/storage-file-share\");\n```\n\nAlternative, selectively import only the types you need:\n\n```javascript\nconst { ShareServiceClient, StorageSharedKeyCredential } = require(\"@azure/storage-file-share\");\n```\n\n### Create the share service client\n\nThe `ShareServiceClient` requires an URL to the file share service and an access credential. It also optionally accepts some settings in the `options` parameter.\n\n#### using connection string\n\nAlternatively, you can instantiate a `ShareServiceClient` using the `fromConnectionString()` static method with the full connection string as the argument. (The connection string can be obtained from the azure portal.)\n\n```javascript\nconst { ShareServiceClient } = require(\"@azure/storage-file-share\");\n\nconst connStr = \"<connection string>\";\n\nconst shareServiceClient = ShareServiceClient.fromConnectionString(connStr);\n```\n\n#### with `StorageSharedKeyCredential`\n\nPass in a `StorageSharedKeyCredential` with your account name and account key. (The account-name and account-key can be obtained from the azure portal.)\n\n```javascript\nconst { ShareServiceClient, StorageSharedKeyCredential } = require(\"@azure/storage-file-share\");\n\n// Enter your storage account name and shared key\nconst account = \"<account>\";\nconst accountKey = \"<accountkey>\";\n\n// Use StorageSharedKeyCredential with storage account and account key\n// StorageSharedKeyCredential is only available in Node.js runtime, not in browsers\nconst credential = new StorageSharedKeyCredential(account, accountKey);\nconst serviceClient = new ShareServiceClient(\n  // When using AnonymousCredential, following url should include a valid SAS\n  `https://${account}.file.core.windows.net`,\n  credential\n);\n```\n\n#### with SAS Token\n\nAlso, You can instantiate a `ShareServiceClient` with a shared access signatures (SAS). You can get the SAS token from the Azure Portal or generate one using `generateAccountSASQueryParameters()`.\n\n```javascript\nconst { ShareServiceClient } = require(\"@azure/storage-file-share\");\n\nconst account = \"<account name>\";\nconst sas = \"<service Shared Access Signature Token>\";\n\nconst serviceClientWithSAS = new ShareServiceClient(\n  `https://${account}.file.core.windows.net${sas}`\n);\n```\n\n### List shares in the account\n\nUse `ShareServiceClient.listShares()` to iterator shares in this account,\nwith the new `for-await-of` syntax:\n\n```javascript\nconst { ShareServiceClient, StorageSharedKeyCredential } = require(\"@azure/storage-file-share\");\n\nconst account = \"<account>\";\nconst accountKey = \"<accountkey>\";\n\nconst credential = new StorageSharedKeyCredential(account, accountKey);\nconst serviceClient = new ShareServiceClient(\n  `https://${account}.file.core.windows.net`,\n  credential\n);\n\nasync function main() {\n  let shareIter = serviceClient.listShares();\n  let i = 1;\n  for await (const share of shareIter) {\n    console.log(`Share${i}: ${share.name}`);\n    i++;\n  }\n}\n\nmain();\n```\n\nAlternatively without `for-await-of`:\n\n```javascript\nconst { ShareServiceClient, StorageSharedKeyCredential } = require(\"@azure/storage-file-share\");\n\nconst account = \"<account>\";\nconst accountKey = \"<accountkey>\";\n\nconst credential = new StorageSharedKeyCredential(account, accountKey);\nconst serviceClient = new ShareServiceClient(\n  `https://${account}.file.core.windows.net`,\n  credential\n);\n\nasync function main() {\n  let shareIter = serviceClient.listShares();\n  let i = 1;\n  let shareItem = await shareIter.next();\n  while (!shareItem.done) {\n    console.log(`Share ${i++}: ${shareItem.value.name}`);\n    shareItem = await shareIter.next();\n  }\n}\n\nmain();\n```\n\n### Create a new share and a directory\n\n```javascript\nconst { ShareServiceClient, StorageSharedKeyCredential } = require(\"@azure/storage-file-share\");\n\nconst account = \"<account>\";\nconst accountKey = \"<accountkey>\";\n\nconst credential = new StorageSharedKeyCredential(account, accountKey);\nconst serviceClient = new ShareServiceClient(\n  `https://${account}.file.core.windows.net`,\n  credential\n);\n\nasync function main() {\n  const shareName = `newshare${new Date().getTime()}`;\n  const shareClient = serviceClient.getShareClient(shareName);\n  await shareClient.create();\n  console.log(`Create share ${shareName} successfully`);\n\n  const directoryName = `newdirectory${new Date().getTime()}`;\n  const directoryClient = shareClient.getDirectoryClient(directoryName);\n  await directoryClient.create();\n  console.log(`Create directory ${directoryName} successfully`);\n}\n\nmain();\n```\n\n### Create an azure file then upload to it\n\n```javascript\nconst { ShareServiceClient, StorageSharedKeyCredential } = require(\"@azure/storage-file-share\");\n\nconst account = \"<account>\";\nconst accountKey = \"<accountkey>\";\n\nconst credential = new StorageSharedKeyCredential(account, accountKey);\nconst serviceClient = new ShareServiceClient(\n  `https://${account}.file.core.windows.net`,\n  credential\n);\n\nconst shareName = \"<share name>\";\nconst directoryName = \"<directory name>\";\n\nasync function main() {\n  const directoryClient = serviceClient.getShareClient(shareName).getDirectoryClient(directoryName);\n\n  const content = \"Hello World!\";\n  const fileName = \"newfile\" + new Date().getTime();\n  const fileClient = directoryClient.getFileClient(fileName);\n  await fileClient.create(content.length);\n  console.log(`Create file ${fileName} successfully`);\n\n  // Upload file range\n  await fileClient.uploadRange(content, 0, content.length);\n  console.log(`Upload file range \"${content}\" to ${fileName} successfully`);\n}\n\nmain();\n```\n\n### List files and directories under a directory\n\nUse `DirectoryClient.listFilesAndDirectories()` to iterator over files and directories,\nwith the new `for-await-of` syntax. The `kind` property can be used to identify whether\na iterm is a directory or a file.\n\n```javascript\nconst { ShareServiceClient, StorageSharedKeyCredential } = require(\"@azure/storage-file-share\");\n\nconst account = \"<account>\";\nconst accountKey = \"<accountkey>\";\n\nconst credential = new StorageSharedKeyCredential(account, accountKey);\nconst serviceClient = new ShareServiceClient(\n  `https://${account}.file.core.windows.net`,\n  credential\n);\n\nconst shareName = \"<share name>\";\nconst directoryName = \"<directory name>\";\n\nasync function main() {\n  const directoryClient = serviceClient.getShareClient(shareName).getDirectoryClient(directoryName);\n\n  let dirIter = directoryClient.listFilesAndDirectories();\n  let i = 1;\n  for await (const item of dirIter) {\n    if (item.kind === \"directory\") {\n      console.log(`${i} - directory\\t: ${item.name}`);\n    } else {\n      console.log(`${i} - file\\t: ${item.name}`);\n    }\n    i++;\n  }\n}\n\nmain();\n```\n\nAlternatively without using `for-await-of`:\n\n```javascript\nconst { ShareServiceClient, StorageSharedKeyCredential } = require(\"@azure/storage-file-share\");\n\nconst account = \"<account>\";\nconst accountKey = \"<accountkey>\";\n\nconst credential = new StorageSharedKeyCredential(account, accountKey);\nconst serviceClient = new ShareServiceClient(\n  `https://${account}.file.core.windows.net`,\n  credential\n);\n\nconst shareName = \"<share name>\";\nconst directoryName = \"<directory name>\";\n\nasync function main() {\n  const directoryClient = serviceClient.getShareClient(shareName).getDirectoryClient(directoryName);\n\n  let dirIter = directoryClient.listFilesAndDirectories();\n  let i = 1;\n  let item = await dirIter.next();\n  while (!item.done) {\n    if (item.value.kind === \"directory\") {\n      console.log(`${i} - directory\\t: ${item.value.name}`);\n    } else {\n      console.log(`${i} - file\\t: ${item.value.name}`);\n    }\n    item = await dirIter.next();\n  }\n}\n\nmain();\n```\n\nFor a complete sample on iterating please see [samples/v12/typescript/src/listFilesAndDirectories.ts](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/storage/storage-file-share/samples/v12/typescript/src/listFilesAndDirectories.ts).\n\n### Download a file and convert it to a string (Node.js)\n\n```javascript\nconst { ShareServiceClient, StorageSharedKeyCredential } = require(\"@azure/storage-file-share\");\n\nconst account = \"<account>\";\nconst accountKey = \"<accountkey>\";\n\nconst credential = new StorageSharedKeyCredential(account, accountKey);\nconst serviceClient = new ShareServiceClient(\n  `https://${account}.file.core.windows.net`,\n  credential\n);\n\nconst shareName = \"<share name>\";\nconst fileName = \"<file name>\";\n\n// [Node.js only] A helper method used to read a Node.js readable stream into a Buffer\nasync function streamToBuffer(readableStream) {\n  return new Promise((resolve, reject) => {\n    const chunks = [];\n    readableStream.on(\"data\", (data) => {\n      chunks.push(data instanceof Buffer ? data : Buffer.from(data));\n    });\n    readableStream.on(\"end\", () => {\n      resolve(Buffer.concat(chunks));\n    });\n    readableStream.on(\"error\", reject);\n  });\n}\n\nasync function main() {\n  const fileClient = serviceClient\n    .getShareClient(shareName)\n    .rootDirectoryClient.getFileClient(fileName);\n\n  // Get file content from position 0 to the end\n  // In Node.js, get downloaded data by accessing downloadFileResponse.readableStreamBody\n  const downloadFileResponse = await fileClient.download();\n  console.log(\n    `Downloaded file content: ${(\n      await streamToBuffer(downloadFileResponse.readableStreamBody)\n    ).toString()}`\n  );\n}\n\nmain();\n```\n\n### Download a file and convert it to a string (Browsers)\n\nPlease refer to the [JavaScript Bundle](#javascript-bundle) section for more information on using this library in the browser.\n\n```javascript\nconst { ShareServiceClient } = require(\"@azure/storage-file-share\");\n\nconst account = \"<account name>\";\nconst sas = \"<service Shared Access Signature Token>\";\nconst shareName = \"<share name>\";\nconst fileName = \"<file name>\";\n\nconst serviceClient = new ShareServiceClient(`https://${account}.file.core.windows.net${sas}`);\n\nasync function main() {\n  const fileClient = serviceClient\n    .getShareClient(shareName)\n    .rootDirectoryClient.getFileClient(fileName);\n\n  // Get file content from position 0 to the end\n  // In browsers, get downloaded data by accessing downloadFileResponse.blobBody\n  const downloadFileResponse = await fileClient.download(0);\n  console.log(\n    `Downloaded file content: ${await blobToString(await downloadFileResponse.blobBody)}`\n  );\n}\n\n// [Browser only] A helper method used to convert a browser Blob into string.\nasync function blobToString(blob) {\n  const fileReader = new FileReader();\n  return new Promise((resolve, reject) => {\n    fileReader.onloadend = (ev) => {\n      resolve(ev.target.result);\n    };\n    fileReader.onerror = reject;\n    fileReader.readAsText(blob);\n  });\n}\n\nmain();\n```\n\nA complete example of simple `ShareServiceClient` scenarios is at [samples/v12/typescript/src/shareSerivceClient.ts](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/storage/storage-file-share/samples/v12/typescript/src/shareServiceClient.ts).\n\n## Troubleshooting\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\n\nsetLogLevel(\"info\");\n```\n\n## Next steps\n\nMore code samples\n\n- [File Share Storage Samples (JavaScript)](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/storage/storage-file-share/samples/v12/javascript)\n- [File Share Storage Samples (TypeScript)](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/storage/storage-file-share/samples/v12/typescript)\n- [File Share Storage Test Cases](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/storage/storage-file-share/test)\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\nAlso refer to [Storage specific guide](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/storage/CONTRIBUTING.md) for additional information on setting up the test environment for storage libraries.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fstorage%2Fstorage-file-share%2FREADME.png)\n",
        "repo_name": "storage/storage-file-share",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/storage/storage-file-share",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Storage Internal Avro client library for JavaScript\n- For internal use only.\n\n## Getting started\n- For internal use only.\n\n## Key concepts\n- For internal use only.\n\n## Examples\n- For internal use only.\n\n## Troubleshooting\n- For internal use only.\n\n## Next steps\n- For internal use only.\n\n## Contributing\n- For internal use only.",
        "repo_name": "storage/storage-internal-avro",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/storage/storage-internal-avro",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Storage Queue client library for JavaScript\n\nAzure Storage Queue provides cloud messaging between application components. In designing applications for scale, application components are often decoupled, so that they can scale independently. Queue storage delivers asynchronous messaging for communication between application components, whether they are running in the cloud, on the desktop, on an on-premises server, or on a mobile device. Queue storage also supports managing asynchronous tasks and building process work flows.\n\nThis project provides a client library in JavaScript that makes it easy to consume the Azure Storage Queue service.\n\nUse the client libraries in this package to:\n\n- Get/Set Queue Service Properties\n- Create/List/Delete Queues\n- Send/Receive/Peek/Clear/Update/Delete Queue Messages\n\nKey links:\n\n- [Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/storage/storage-queue)\n- [Package (npm)](https://www.npmjs.com/package/@azure/storage-queue)\n- [API Reference Documentation](https://docs.microsoft.com/javascript/api/@azure/storage-queue)\n- [Product documentation](https://docs.microsoft.com/azure/storage/queues/storage-queues-introduction)\n- [Samples](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/storage/storage-queue/samples)\n- [Azure Storage Queue REST APIs](https://docs.microsoft.com/rest/api/storageservices/queue-service-rest-api)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge, and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription](https://azure.microsoft.com/free/)\n- A [Storage Account](https://docs.microsoft.com/azure/storage/common/storage-account-create)\n\n### Install the package\n\nThe preferred way to install the Azure Storage Queue client library for JavaScript is to use the npm package manager. Type the following into a terminal window:\n\n```bash\nnpm install @azure/storage-queue\n```\n\n### Authenticate the client\n\nAzure Storage supports several ways to authenticate. In order to interact with the Azure Queue Storage service you'll need to create an instance of a Storage client - `QueueServiceClient` or `QueueClient` for example. See [samples for creating the `QueueServiceClient`](#create-the-queue-service-client) to learn more about authentication.\n\n- [Azure Active Directory](#with-defaultazurecredential-from-azureidentity-package)\n- [Shared Key](#with-storagesharedkeycredential)\n- [Shared access signatures](#with-sas-token)\n\n#### Azure Active Directory\n\nThe Azure Queue Storage service supports the use of Azure Active Directory to authenticate requests to its APIs. The [`@azure/identity`](https://www.npmjs.com/package/@azure/identity) package provides a variety of credential types that your application can use to do this. Please see the [README for `@azure/identity`](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity/README.md) for more details and samples to get you started.\n\n### Compatibility\n\nThis library is compatible with Node.js and browsers, and validated against LTS Node.js versions (>=8.16.0) and latest versions of Chrome, Firefox and Edge.\n\n#### Web Workers\n\nThis library requires certain DOM objects to be globally available when used in the browser, which web workers do not make available by default. You will need to polyfill these to make this library work in web workers.\n\nFor more information please refer to our [documentation for using Azure SDK for JS in Web Workers](https://aka.ms/azsdk/js/web-workers)\n\nThis library depends on following DOM APIs which need external polyfills loaded when used in web workers:\n\n- [`document`](https://developer.mozilla.org/docs/Web/API/Document)\n- [`DOMParser`](https://developer.mozilla.org/docs/Web/API/DOMParser)\n- [`Node`](https://developer.mozilla.org/docs/Web/API/Node)\n- [`XMLSerializer`](https://developer.mozilla.org/docs/Web/API/XMLSerializer)\n\n#### Differences between Node.js and browsers\n\nThere are differences between Node.js and browsers runtime. When getting started with this library, pay attention to APIs or classes marked with _\"ONLY AVAILABLE IN NODE.JS RUNTIME\"_ or _\"ONLY AVAILABLE IN BROWSERS\"_.\n\n##### Following features, interfaces, classes or functions are only available in Node.js\n\n- Shared Key Authorization based on account name and account key\n  - `StorageSharedKeyCredential`\n- Shared Access Signature(SAS) generation\n  - `generateAccountSASQueryParameters()`\n  - `generateQueueSASQueryParameters()`\n\n### JavaScript Bundle\n\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n### CORS\n\nYou need to set up [Cross-Origin Resource Sharing (CORS)](https://docs.microsoft.com/rest/api/storageservices/cross-origin-resource-sharing--cors--support-for-the-azure-storage-services) rules for your storage account if you need to develop for browsers. Go to Azure portal and Azure Storage Explorer, find your storage account, create new CORS rules for blob/queue/file/table service(s).\n\nFor example, you can create following CORS settings for debugging. But please customize the settings carefully according to your requirements in production environment.\n\n- Allowed origins: \\*\n- Allowed verbs: DELETE,GET,HEAD,MERGE,POST,OPTIONS,PUT\n- Allowed headers: \\*\n- Exposed headers: \\*\n- Maximum age (seconds): 86400\n\n## Key concepts\n\nA Queue is a data store within an Azure Storage Queue service account for sending/receiving messages\nbetween connected clients.\n\nKey data types in our library related to these services are:\n\n- A `QueueServiceClient` represents a connection (via a URL) to a given _storage account_ in the Azure Storage Queue service and provides APIs for manipulating its queues. It is authenticated to the service and can be used to create `QueueClient` objects, as well as create, delete, list queues from the service.\n- A `QueueClient` represents a single _queue_ in the storage account. It can be used to manipulate the queue's messages, for example to send, receive, and peek messages in the queue.\n\n## Examples\n\n### Import the package\n\nTo use the clients, import the package into your file:\n\n```javascript\nconst AzureStorageQueue = require(\"@azure/storage-queue\");\n```\n\nAlternatively, selectively import only the types you need:\n\n```javascript\nconst { QueueServiceClient, StorageSharedKeyCredential } = require(\"@azure/storage-queue\");\n```\n\n### Create the queue service client\n\nThe `QueueServiceClient` requires an URL to the queue service and an access credential. It also optionally accepts some settings in the `options` parameter.\n\n#### with `DefaultAzureCredential` from `@azure/identity` package\n\n**Recommended way to instantiate a `QueueServiceClient`**\n\nSetup : Reference - Authorize access to blobs and queues with Azure Active Directory from a client application - https://docs.microsoft.com/azure/storage/common/storage-auth-aad-app\n\n- Register a new AAD application and give permissions to access Azure Storage on behalf of the signed-in user\n\n  - Register a new application in the Azure Active Directory(in the azure-portal) - https://docs.microsoft.com/azure/active-directory/develop/quickstart-register-app\n  - In the `API permissions` section, select `Add a permission` and choose `Microsoft APIs`.\n  - Pick `Azure Storage` and select the checkbox next to `user_impersonation` and then click `Add permissions`. This would allow the application to access Azure Storage on behalf of the signed-in user.\n\n- Grant access to Azure Storage Queue data with RBAC in the Azure Portal\n\n  - RBAC roles for blobs and queues - https://docs.microsoft.com/azure/storage/common/storage-auth-aad-rbac-portal.\n  - In the azure portal, go to your storage-account and assign **Storage Queue Data Contributor** role to the registered AAD application from `Access control (IAM)` tab (in the left-side-navbar of your storage account in the azure-portal).\n\n- Environment setup for the sample\n  - From the overview page of your AAD Application, note down the `CLIENT ID` and `TENANT ID`. In the \"Certificates & Secrets\" tab, create a secret and note that down.\n  - Make sure you have `AZURE_TENANT_ID`, `AZURE_CLIENT_ID`, `AZURE_CLIENT_SECRET` as environment variables to successfully execute the sample (can leverage process.env).\n\n```javascript\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { QueueServiceClient } = require(\"@azure/storage-queue\");\n\nconst account = \"<account>\";\nconst credential = new DefaultAzureCredential();\n\nconst queueServiceClient = new QueueServiceClient(\n  `https://${account}.queue.core.windows.net`,\n  credential\n);\n```\n\n[Note - Above steps are only for Node.js]\n\n#### using connection string\n\nAlternatively, you can instantiate a `QueueServiceClient` using the `fromConnectionString()` static method with the full connection string as the argument. (The connection string can be obtained from the azure portal.) [ONLY AVAILABLE IN NODE.JS RUNTIME]\n\n```javascript\nconst { QueueServiceClient } = require(\"@azure/storage-queue\");\n\nconst connStr = \"<connection string>\";\n\nconst queueServiceClient = QueueServiceClient.fromConnectionString(connStr);\n```\n\n#### with `StorageSharedKeyCredential`\n\nAlternatively, you instantiate a `QueueServiceClient` with a `StorageSharedKeyCredential` by passing account-name and account-key as arguments. (The account-name and account-key can be obtained from the azure portal.)\n[ONLY AVAILABLE IN NODE.JS RUNTIME]\n\n```javascript\nconst { QueueServiceClient, StorageSharedKeyCredential } = require(\"@azure/storage-queue\");\n\n// Enter your storage account name and shared key\nconst account = \"<account>\";\nconst accountKey = \"<accountkey>\";\n\n// Use StorageSharedKeyCredential with storage account and account key\n// StorageSharedKeyCredential is only available in Node.js runtime, not in browsers\nconst sharedKeyCredential = new StorageSharedKeyCredential(account, accountKey);\n\nconst queueServiceClient = new QueueServiceClient(\n  `https://${account}.queue.core.windows.net`,\n  sharedKeyCredential,\n  {\n    retryOptions: { maxTries: 4 }, // Retry options\n    telemetry: { value: \"BasicSample/V11.0.0\" } // Customized telemetry string\n  }\n);\n```\n\n#### with SAS Token\n\nAlso, You can instantiate a `QueueServiceClient` with a shared access signatures (SAS). You can get the SAS token from the Azure Portal or generate one using `generateAccountSASQueryParameters()`.\n\n```javascript\nconst { QueueServiceClient } = require(\"@azure/storage-queue\");\nconst account = \"<account name>\";\nconst sas = \"<service Shared Access Signature Token>\";\nconst queueServiceClient = new QueueServiceClient(\n  `https://${account}.queue.core.windows.net${sas}`\n);\n```\n\n### List queues in this account\n\nUse `QueueServiceClient.listQueues()` function to iterate the queues,\nwith the new `for-await-of` syntax:\n\n```javascript\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { QueueServiceClient } = require(\"@azure/storage-queue\");\n\nconst account = \"<account>\";\nconst credential = new DefaultAzureCredential();\n\nconst queueServiceClient = new QueueServiceClient(\n  `https://${account}.queue.core.windows.net`,\n  credential\n);\n\nasync function main() {\n  let iter1 = queueServiceClient.listQueues();\n  let i = 1;\n  for await (const item of iter1) {\n    console.log(`Queue${i}: ${item.name}`);\n    i++;\n  }\n}\n\nmain();\n```\n\nAlternatively without `for-await-of`:\n\n```javascript\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { QueueServiceClient } = require(\"@azure/storage-queue\");\n\nconst account = \"<account>\";\nconst credential = new DefaultAzureCredential();\n\nconst queueServiceClient = new QueueServiceClient(\n  `https://${account}.queue.core.windows.net`,\n  credential\n);\n\nasync function main() {\n  let iter2 = queueServiceClient.listQueues();\n  let i = 1;\n  let item = await iter2.next();\n  while (!item.done) {\n    console.log(`Queue ${i++}: ${item.value.name}`);\n    item = await iter2.next();\n  }\n}\n\nmain();\n```\n\nFor a complete sample on iterating queues please see [samples/v12/typescript/listQueues.ts](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/storage/storage-queue/samples/v12/typescript/src/listQueues.ts).\n\n### Create a new queue\n\nUse `QueueServiceClient.getQueueClient()` function to create a new queue.\n\n```javascript\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { QueueServiceClient } = require(\"@azure/storage-queue\");\n\nconst account = \"<account>\";\nconst credential = new DefaultAzureCredential();\n\nconst queueServiceClient = new QueueServiceClient(\n  `https://${account}.queue.core.windows.net`,\n  credential\n);\n\nconst queueName = \"<valid queue name>\";\n\nasync function main() {\n  const queueClient = queueServiceClient.getQueueClient(queueName);\n  const createQueueResponse = await queueClient.create();\n  console.log(\n    `Created queue ${queueName} successfully, service assigned request Id: ${createQueueResponse.requestId}`\n  );\n}\n\nmain();\n```\n\n### Send a message to the queue\n\nUse `sendMessage()` to add a message to the queue:\n\n```javascript\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { QueueServiceClient } = require(\"@azure/storage-queue\");\n\nconst account = \"<account>\";\nconst credential = new DefaultAzureCredential();\n\nconst queueServiceClient = new QueueServiceClient(\n  `https://${account}.queue.core.windows.net`,\n  credential\n);\n\nconst queueName = \"<valid queue name>\";\n\nasync function main() {\n  const queueClient = queueServiceClient.getQueueClient(queueName);\n  // Send a message into the queue using the sendMessage method.\n  const sendMessageResponse = await queueClient.sendMessage(\"Hello World!\");\n  console.log(\n    `Sent message successfully, service assigned message Id: ${sendMessageResponse.messageId}, service assigned request Id: ${sendMessageResponse.requestId}`\n  );\n}\n\nmain();\n```\n\n### Peek a message\n\n`QueueClient.peekMessages()` allows looking at one or more messages in front of the queue. This call\ndoesn't prevent other code from accessing peeked messages.\n\n```javascript\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { QueueServiceClient } = require(\"@azure/storage-queue\");\n\nconst account = \"<account>\";\nconst credential = new DefaultAzureCredential();\n\nconst queueServiceClient = new QueueServiceClient(\n  `https://${account}.queue.core.windows.net`,\n  credential\n);\n\nconst queueName = \"<valid queue name>\";\n\nasync function main() {\n  const queueClient = queueServiceClient.getQueueClient(queueName);\n  const peekMessagesResponse = await queueClient.peekMessages();\n  console.log(`The peeked message is: ${peekMessagesResponse.peekedMessageItems[0].messageText}`);\n}\n\nmain();\n```\n\n### Processing a message\n\nMessages are processed in two steps.\n\n- First call `queueClient.receiveMessages()`. This makes the messages invisible to other code reading messages from this queue for a default period of 30 seconds.\n- When processing of a message is done, call `queueClient.deleteMessage()` with the message's `popReceipt`.\n\nIf your code fails to process a message due to hardware or software failure, this two-step process ensures that another instance of your code can get the same message and try again.\n\n```javascript\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { QueueServiceClient } = require(\"@azure/storage-queue\");\n\nconst account = \"<account>\";\nconst credential = new DefaultAzureCredential();\n\nconst queueServiceClient = new QueueServiceClient(\n  `https://${account}.queue.core.windows.net`,\n  credential\n);\n\nconst queueName = \"<valid queue name>\";\n\nasync function main() {\n  const queueClient = queueServiceClient.getQueueClient(queueName);\n  const response = await queueClient.receiveMessages();\n  if (response.receivedMessageItems.length == 1) {\n    const receivedMessageItem = response.receivedMessageItems[0];\n    console.log(`Processing & deleting message with content: ${receivedMessageItem.messageText}`);\n    const deleteMessageResponse = await queueClient.deleteMessage(\n      receivedMessageItem.messageId,\n      receivedMessageItem.popReceipt\n    );\n    console.log(\n      `Delete message successfully, service assigned request Id: ${deleteMessageResponse.requestId}`\n    );\n  }\n}\n\nmain();\n```\n\n### Delete a queue\n\n```javascript\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { QueueServiceClient } = require(\"@azure/storage-queue\");\n\nconst account = \"<account>\";\nconst credential = new DefaultAzureCredential();\n\nconst queueServiceClient = new QueueServiceClient(\n  `https://${account}.queue.core.windows.net`,\n  credential\n);\n\nconst queueName = \"<valid queue name>\";\n\nasync function main() {\n  const queueClient = queueServiceClient.getQueueClient(queueName);\n  const deleteQueueResponse = await queueClient.delete();\n  console.log(\n    `Deleted queue successfully, service assigned request Id: ${deleteQueueResponse.requestId}`\n  );\n}\n\nmain();\n```\n\nA complete example of simple `QueueServiceClient` scenarios is at [samples/v12/typescript/src/queueClient.ts](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/storage/storage-queue/samples/v12/typescript/src/queueClient.ts).\n\n## Troubleshooting\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\n\nsetLogLevel(\"info\");\n```\n\n## Next steps\n\nMore code samples\n\n- [Queue Storage Samples](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/storage/storage-queue/samples)\n- [Queue Storage Test Cases](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/storage/storage-queue/test)\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\nAlso refer to [Storage specific guide](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/storage/CONTRIBUTING.md) for additional information on setting up the test environment for storage libraries.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fstorage%2Fstorage-queue%2FREADME.png)\n",
        "repo_name": "storage/storage-queue",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/storage/storage-queue",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure StorageCacheManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure StorageCacheManagement client.\n\nA Storage Cache provides scalable caching service for NAS clients, serving data from either NFSv3 or Blob at-rest storage (referred to as \"Storage Targets\"). These operations allow you to manage Caches.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/storagecache/arm-storagecache) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-storagecache) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-storagecache?view=azure-node-preview) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-storagecache` package\n\nInstall the Azure StorageCacheManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-storagecache\n```\n\n### Create and authenticate a `StorageCacheManagementClient`\n\nTo create a client object to access the Azure StorageCacheManagement API, you will need the `endpoint` of your Azure StorageCacheManagement resource and a `credential`. The Azure StorageCacheManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure StorageCacheManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure StorageCacheManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { StorageCacheManagementClient } = require(\"@azure/arm-storagecache\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new StorageCacheManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new StorageCacheManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### StorageCacheManagementClient\n\n`StorageCacheManagementClient` is the primary interface for developers using the Azure StorageCacheManagement client library. Explore the methods on this client object to understand the different features of the Azure StorageCacheManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fstoragecache%2Farm-storagecache%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "storagecache/arm-storagecache",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/storagecache/arm-storagecache",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure StorageImportExport client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure StorageImportExport client.\n\nThe Storage Import/Export Resource Provider API.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/storageimportexport/arm-storageimportexport) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-storageimportexport) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-storageimportexport) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-storageimportexport` package\n\nInstall the Azure StorageImportExport client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-storageimportexport\n```\n\n### Create and authenticate a `StorageImportExport`\n\nTo create a client object to access the Azure StorageImportExport API, you will need the `endpoint` of your Azure StorageImportExport resource and a `credential`. The Azure StorageImportExport client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure StorageImportExport resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure StorageImportExport** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { StorageImportExport } = require(\"@azure/arm-storageimportexport\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new StorageImportExport(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new StorageImportExport(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### StorageImportExport\n\n`StorageImportExport` is the primary interface for developers using the Azure StorageImportExport client library. Explore the methods on this client object to understand the different features of the Azure StorageImportExport service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fstorageimportexport%2Farm-storageimportexport%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "storageimportexport/arm-storageimportexport",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/storageimportexport/arm-storageimportexport",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure StorageMover client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure StorageMover client.\n\nThe Azure Storage Mover REST API.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/storagemover/arm-storagemover) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-storagemover) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-storagemover) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-storagemover` package\n\nInstall the Azure StorageMover client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-storagemover\n```\n\n### Create and authenticate a `StorageMoverClient`\n\nTo create a client object to access the Azure StorageMover API, you will need the `endpoint` of your Azure StorageMover resource and a `credential`. The Azure StorageMover client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure StorageMover resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure StorageMover** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { StorageMoverClient } = require(\"@azure/arm-storagemover\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new StorageMoverClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new StorageMoverClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### StorageMoverClient\n\n`StorageMoverClient` is the primary interface for developers using the Azure StorageMover client library. Explore the methods on this client object to understand the different features of the Azure StorageMover service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fstoragemover%2Farm-storagemover%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "storagemover/arm-storagemover",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/storagemover/arm-storagemover",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure MicrosoftStorageSync client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure MicrosoftStorageSync client.\n\nMicrosoft Storage Sync Service API\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/storagesync/arm-storagesync) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-storagesync) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-storagesync) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-storagesync` package\n\nInstall the Azure MicrosoftStorageSync client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-storagesync\n```\n\n### Create and authenticate a `MicrosoftStorageSync`\n\nTo create a client object to access the Azure MicrosoftStorageSync API, you will need the `endpoint` of your Azure MicrosoftStorageSync resource and a `credential`. The Azure MicrosoftStorageSync client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure MicrosoftStorageSync resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure MicrosoftStorageSync** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { MicrosoftStorageSync } = require(\"@azure/arm-storagesync\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new MicrosoftStorageSync(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new MicrosoftStorageSync(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### MicrosoftStorageSync\n\n`MicrosoftStorageSync` is the primary interface for developers using the Azure MicrosoftStorageSync client library. Explore the methods on this client object to understand the different features of the Azure MicrosoftStorageSync service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fstoragesync%2Farm-storagesync%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "storagesync/arm-storagesync",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/storagesync/arm-storagesync",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure StorSimpleManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure StorSimpleManagement client.\n\n\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/storsimple1200series/arm-storsimple1200series) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-storsimple1200series) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-storsimple1200series) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-storsimple1200series` package\n\nInstall the Azure StorSimpleManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-storsimple1200series\n```\n\n### Create and authenticate a `StorSimpleManagementClient`\n\nTo create a client object to access the Azure StorSimpleManagement API, you will need the `endpoint` of your Azure StorSimpleManagement resource and a `credential`. The Azure StorSimpleManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure StorSimpleManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure StorSimpleManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { StorSimpleManagementClient } = require(\"@azure/arm-storsimple1200series\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new StorSimpleManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new StorSimpleManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### StorSimpleManagementClient\n\n`StorSimpleManagementClient` is the primary interface for developers using the Azure StorSimpleManagement client library. Explore the methods on this client object to understand the different features of the Azure StorSimpleManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fstorsimple1200series%2Farm-storsimple1200series%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "storsimple1200series/arm-storsimple1200series",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/storsimple1200series/arm-storsimple1200series",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure StorSimple8000SeriesManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure StorSimple8000SeriesManagement client.\n\n\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/storsimple8000series/arm-storsimple8000series) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-storsimple8000series) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-storsimple8000series) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-storsimple8000series` package\n\nInstall the Azure StorSimple8000SeriesManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-storsimple8000series\n```\n\n### Create and authenticate a `StorSimple8000SeriesManagementClient`\n\nTo create a client object to access the Azure StorSimple8000SeriesManagement API, you will need the `endpoint` of your Azure StorSimple8000SeriesManagement resource and a `credential`. The Azure StorSimple8000SeriesManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure StorSimple8000SeriesManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure StorSimple8000SeriesManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { StorSimple8000SeriesManagementClient } = require(\"@azure/arm-storsimple8000series\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new StorSimple8000SeriesManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new StorSimple8000SeriesManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### StorSimple8000SeriesManagementClient\n\n`StorSimple8000SeriesManagementClient` is the primary interface for developers using the Azure StorSimple8000SeriesManagement client library. Explore the methods on this client object to understand the different features of the Azure StorSimple8000SeriesManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fstorsimple8000series%2Farm-storsimple8000series%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "storsimple8000series/arm-storsimple8000series",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/storsimple8000series/arm-storsimple8000series",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Stream Analytics Management client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure Stream Analytics Management client.\n\nStream Analytics Client\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/streamanalytics/arm-streamanalytics) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-streamanalytics) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-streamanalytics) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-streamanalytics` package\n\nInstall the Azure Stream Analytics Management client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-streamanalytics\n```\n\n### Create and authenticate a `StreamAnalyticsManagementClient`\n\nTo create a client object to access the Azure Stream Analytics Management API, you will need the `endpoint` of your Azure Stream Analytics Management resource and a `credential`. The Azure Stream Analytics Management client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure Stream Analytics Management resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure Stream Analytics Management** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { StreamAnalyticsManagementClient } = require(\"@azure/arm-streamanalytics\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new StreamAnalyticsManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new StreamAnalyticsManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### StreamAnalyticsManagementClient\n\n`StreamAnalyticsManagementClient` is the primary interface for developers using the Azure Stream Analytics Management client library. Explore the methods on this client object to understand the different features of the Azure Stream Analytics Management service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fstreamanalytics%2Farm-streamanalytics%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "streamanalytics/arm-streamanalytics",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/streamanalytics/arm-streamanalytics",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Subscription client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure Subscription client.\n\nAll resource groups and resources exist within subscriptions. These operation enable you get information about your subscriptions and tenants. A tenant is a dedicated instance of Azure Active Directory (Azure AD) for your organization.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/subscription/arm-subscriptions-profile-2020-09-01-hybrid) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-subscriptions-profile-2020-09-01-hybrid) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-subscriptions-profile-2020-09-01-hybrid) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-subscriptions-profile-2020-09-01-hybrid` package\n\nInstall the Azure Subscription client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-subscriptions-profile-2020-09-01-hybrid\n```\n\n### Create and authenticate a `SubscriptionClient`\n\nTo create a client object to access the Azure Subscription API, you will need the `endpoint` of your Azure Subscription resource and a `credential`. The Azure Subscription client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure Subscription resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure Subscription** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { SubscriptionClient } = require(\"@azure/arm-subscriptions-profile-2020-09-01-hybrid\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new SubscriptionClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new SubscriptionClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### SubscriptionClient\n\n`SubscriptionClient` is the primary interface for developers using the Azure Subscription client library. Explore the methods on this client object to understand the different features of the Azure Subscription service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fsubscription%2Farm-subscriptions-profile-2020-09-01-hybrid%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "subscription/arm-subscriptions-profile-2020-09-01-hybrid",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/subscription/arm-subscriptions-profile-2020-09-01-hybrid",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Subscription client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure Subscription client.\n\nThe subscription client\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/subscription/arm-subscriptions) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-subscriptions) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-subscriptions) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-subscriptions` package\n\nInstall the Azure Subscription client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-subscriptions\n```\n\n### Create and authenticate a `SubscriptionClient`\n\nTo create a client object to access the Azure Subscription API, you will need the `endpoint` of your Azure Subscription resource and a `credential`. The Azure Subscription client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure Subscription resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure Subscription** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { SubscriptionClient } = require(\"@azure/arm-subscriptions\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new SubscriptionClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new SubscriptionClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### SubscriptionClient\n\n`SubscriptionClient` is the primary interface for developers using the Azure Subscription client library. Explore the methods on this client object to understand the different features of the Azure Subscription service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fsubscription%2Farm-subscriptions%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "subscription/arm-subscriptions",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/subscription/arm-subscriptions",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure MicrosoftSupport client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure MicrosoftSupport client.\n\nMicrosoft Azure Support Resource Provider.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/support/arm-support) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-support) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-support) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-support` package\n\nInstall the Azure MicrosoftSupport client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-support\n```\n\n### Create and authenticate a `MicrosoftSupport`\n\nTo create a client object to access the Azure MicrosoftSupport API, you will need the `endpoint` of your Azure MicrosoftSupport resource and a `credential`. The Azure MicrosoftSupport client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure MicrosoftSupport resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure MicrosoftSupport** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { MicrosoftSupport } = require(\"@azure/arm-support\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new MicrosoftSupport(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new MicrosoftSupport(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### MicrosoftSupport\n\n`MicrosoftSupport` is the primary interface for developers using the Azure MicrosoftSupport client library. Explore the methods on this client object to understand the different features of the Azure MicrosoftSupport service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fsupport%2Farm-support%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "support/arm-support",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/support/arm-support",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure SynapseManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure SynapseManagement client.\n\nAzure Synapse Analytics Management Client\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/synapse/arm-synapse) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-synapse) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-synapse?view=azure-node-preview) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-synapse` package\n\nInstall the Azure SynapseManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-synapse\n```\n\n### Create and authenticate a `SynapseManagementClient`\n\nTo create a client object to access the Azure SynapseManagement API, you will need the `endpoint` of your Azure SynapseManagement resource and a `credential`. The Azure SynapseManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure SynapseManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure SynapseManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { SynapseManagementClient } = require(\"@azure/arm-synapse\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new SynapseManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new SynapseManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### SynapseManagementClient\n\n`SynapseManagementClient` is the primary interface for developers using the Azure SynapseManagement client library. Explore the methods on this client object to understand the different features of the Azure SynapseManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fsynapse%2Farm-synapse%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "synapse/arm-synapse",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/synapse/arm-synapse",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "## Azure Synapse Access Control REST client library for JavaScript\n\nThis package contains an isomorphic REST Client SDK for Azure Synapse Access Control.\n\n**Please rely heavily on the [service's documentation][synapse_product_documentation] and our [REST client docs][rest_client] to use this library**\n\n## Getting started\n\n### Install the package\n\n```bash\nnpm install @azure-rest/synapse-access-control\n```\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge, and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n## Key concepts\n\n## Examples\n\n```ts\nimport AccessControl, { paginate } from \"@azure-rest/synapse-access-control\";\nimport { DefaultAzureCredential } from \"@azure/identity\";\n\nexport async function main(): Promise<void> {\n  const client = AccessControl(\"<endpoint>\", new DefaultAzureCredential());\n  const initialResponse = await client.path(\"/roleAssignments\").get();\n\n  if (initialResponse.status !== \"200\") {\n    throw initialResponse.body.error;\n  }\n\n  const assignments = paginate(client, initialResponse);\n\n  for await (const assignment of assignments) {\n    console.log(assignment.id);\n  }\n}\n```\n\n## Related projects\n\n- [Microsoft Azure SDK for Javascript](https://github.com/Azure/azure-sdk-for-js)\n\n## Troubleshooting\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nimport { setLogLevel } from \"@azure/logger\";\n\nsetLogLevel(\"info\");\n```\n\n## Next steps\n\nIn the future, you'll find additional code samples here.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fsynapse%2Faccess-control-rest%2FREADME.png)\n\n[synapse_product_documentation]: https://docs.microsoft.com/rest/api/synapse/data-plane/role-assignments/create-role-assignment\n[rest_client]: https://github.com/Azure/azure-sdk-for-js/blob/main/documentation/rest-clients.md\n",
        "repo_name": "synapse/synapse-access-control-rest",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/synapse/synapse-access-control-rest",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "## Azure Synapse Access Control client library for JavaScript\n\nThis package contains an isomorphic SDK for Access Control.\n\n## Getting started\n\n### Install the package\n\n```bash\nnpm install @azure/synapse-access-control\n```\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge, and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n## Key concepts\n\n## Examples\n\n```ts\nimport { AccessControlClient } from \"@azure/synapse-access-control\";\nimport { DefaultAzureCredential } from \"@azure/identity\";\n\nexport async function main(): Promise<void> {\n  const credential = new DefaultAzureCredential();\n\n  let client = new AccessControlClient(\n    credential,\n    \"https://mysynapse.dev.azuresynapse.net\"\n  );\n  let list = await client.roleDefinitions.listRoleDefinitions();\n  for await (let item of list) {\n    console.log(\"item:\", item);\n  }\n}\n```\n\n## Related projects\n\n- [Microsoft Azure SDK for Javascript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fcdn%2Farm-cdn%2FREADME.png)\n\n## Troubleshooting\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nimport { setLogLevel } from \"@azure/logger\";\n\nsetLogLevel(\"info\");\n```\n\n## Next steps\n\nIn the future, you'll find additional code samples here.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fkeyvault%2Fkeyvault-keys%2FREADME.png)\n",
        "repo_name": "synapse/synapse-access-control",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/synapse/synapse-access-control",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "## Azure Synapse Artifacts client library for JavaScript\n\nThis package contains an isomorphic SDK for Artifacts.\n\n## Getting started\n\n### Install the package\n\n```bash\nnpm install @azure/synapse-artifacts\n```\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge, and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n## Key concepts\n\n## Examples\n\n```ts\nimport { ArtifactsClient } from \"@azure/synapse-artifacts\";\nimport { DefaultAzureCredential } from \"@azure/identity\";\n\nexport async function main(): Promise<void> {\n  const credential = new DefaultAzureCredential();\n\n  let client = new ArtifactsClient(credential, \"https://mysynapse.dev.azuresynapse.net\");\n  let list = await client.pipelineOperations.listPipelinesByWorkspace();\n  for await (let item of list) {\n    console.log(\"item:\", item);\n  }\n}\n```\n\n## Related projects\n\n- [Microsoft Azure SDK for Javascript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fcdn%2Farm-cdn%2FREADME.png)\n\n## Troubleshooting\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nimport { setLogLevel } from \"@azure/logger\";\n\nsetLogLevel(\"info\");\n```\n\n## Next steps\n\nIn the future, you'll find additional code samples here.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fkeyvault%2Fkeyvault-keys%2FREADME.png)\n",
        "repo_name": "synapse/synapse-artifacts",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/synapse/synapse-artifacts",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "## Azure Synapse Managed Private Endpoints client library for JavaScript\n\nThis package contains an isomorphic SDK for Managed Private Endpoints.\n\n## Getting started\n\n### Install the package\n\n```bash\nnpm install @azure/synapse-managed-private-endpoints\n```\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge, and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n## Key concepts\n\n## Examples\n\n```ts\nimport { ManagedPrivateEndpointsClient } from \"@azure/synapse-managed-private-endpoints\";\nimport { DefaultAzureCredential } from \"@azure/identity\";\n\nexport async function main(): Promise<void> {\n  const credential = new DefaultAzureCredential();\n\n  let client = new ManagedPrivateEndpointsClient(\n    credential,\n    \"https://mysynapse.dev.azuresynapse.net\"\n  );\n  let list = await client.managedPrivateEndpoints.list(\"myvnet\");\n  for await (let item of list) {\n    console.log(\"item:\", item);\n  }\n}\n```\n\n## Related projects\n\n- [Microsoft Azure SDK for Javascript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fcdn%2Farm-cdn%2FREADME.png)\n\n## Troubleshooting\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nimport { setLogLevel } from \"@azure/logger\";\n\nsetLogLevel(\"info\");\n```\n\n## Next steps\n\nIn the future, you'll find additional code samples here.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fkeyvault%2Fkeyvault-keys%2FREADME.png)\n",
        "repo_name": "synapse/synapse-managed-private-endpoints",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/synapse/synapse-managed-private-endpoints",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "## Azure Synapse Monitoring client library for JavaScript\n\nThis package contains an isomorphic SDK for Monitoring.\n\n## Getting started\n\n### Install the package\n\n```bash\nnpm install @azure/synapse-monitoring\n```\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge, and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n## Key concepts\n\n## Examples\n\n```ts\nimport { MonitoringClient } from \"@azure/synapse-monitoring\";\nimport { DefaultAzureCredential } from \"@azure/identity\";\n\nexport async function main(): Promise<void> {\n  const credential = new DefaultAzureCredential();\n\n  let client = new MonitoringClient(credential, \"https://mysynapse.dev.azuresynapse.net\");\n  let output = await client.monitoring.getSparkJobList();\n  console.log(\"output:\", output);\n}\n```\n\n## Related projects\n\n- [Microsoft Azure SDK for Javascript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fcdn%2Farm-cdn%2FREADME.png)\n\n## Troubleshooting\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nimport { setLogLevel } from \"@azure/logger\";\n\nsetLogLevel(\"info\");\n```\n\n## Next steps\n\nIn the future, you'll find additional code samples here.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fkeyvault%2Fkeyvault-keys%2FREADME.png)\n",
        "repo_name": "synapse/synapse-monitoring",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/synapse/synapse-monitoring",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "## Azure Synapse Spark client library for JavaScript\n\nThis package contains an isomorphic SDK for Spark.\n\n## Getting started\n\n### Install the package\n\n```bash\nnpm install @azure/synapse-spark\n```\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge, and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n## Key concepts\n\n### How to use\n\n## Examples\n\n```ts\nimport { SparkClient } from \"@azure/synapse-spark\";\nimport { DefaultAzureCredential } from \"@azure/identity\";\n\nexport async function main(): Promise<void> {\n  const credential = new DefaultAzureCredential();\n\n  let client = new SparkClient(credential, \"https://mysynapse.dev.azuresynapse.net\", \"mysparkpool\");\n  let output = await client.sparkBatch.getSparkBatchJobs();\n  console.log(\"output:\", output);\n}\n```\n\n## Related projects\n\n- [Microsoft Azure SDK for Javascript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fcdn%2Farm-cdn%2FREADME.png)\n\n## Troubleshooting\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nimport { setLogLevel } from \"@azure/logger\";\n\nsetLogLevel(\"info\");\n```\n\n## Next steps\n\nIn the future, you'll find additional code samples here.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fkeyvault%2Fkeyvault-keys%2FREADME.png)\n",
        "repo_name": "synapse/synapse-spark",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/synapse/synapse-spark",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Tables client library for JavaScript\n\n[Azure Tables](https://azure.microsoft.com/services/storage/tables/) is a cloud-based service that stores structured NoSQL data, providing a key/attribute store with a schemaless design. Tables storage gives developers flexibility and scalability with all the best parts of Azure cloud.\n\nUse the client library to:\n\n- Create/Delete Tables\n- Query/Create/Read/Update/Delete Entities\n\nAzure Cosmos DB provides a Table API for applications that are written for Azure Table storage and that need premium capabilities like:\n\n- Turnkey global distribution.\n- Dedicated throughput worldwide.\n- Single-digit millisecond latencies at the 99th percentile.\n- Guaranteed high availability.\n- Automatic secondary indexing.\n- The Azure Tables client library can seamlessly target either Azure table storage or Azure Cosmos DB table service endpoints with no code changes.\n\nKey links:\n\n- [Source code](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/tables/data-tables/)\n- [Package (NPM)](https://www.npmjs.com/package/@azure/data-tables)\n- [API reference documentation](https://docs.microsoft.com/javascript/api/@azure/data-tables)\n- [Product documentation](https://docs.microsoft.com/azure/storage/tables/table-storage-overview/)\n- [Samples](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/tables/data-tables/samples)\n\n## Getting started\n\n### Prerequisites\n\nCurrently supported environments:\n\n- LTS versions of Node.js\n- Latest versions of Safari, Chrome, Edge and Firefox\n\nYou must have an [Azure subscription](https://azure.microsoft.com/free/) and a [Storage Account](https://docs.microsoft.com/azure/storage/tables/table-storage-quickstart-portal) or an [Azure CosmosDB database](https://docs.microsoft.com/azure/cosmos-db/create-cosmosdb-resources-portal) to use this package.\n\n### Install the `@azure/data-tables` package\n\nThe preferred way to install the Azure Tables client library for JavaScript is to use the npm package manager. Type the following into a terminal window:\n\n```bash\nnpm install @azure/data-tables\n```\n\n### Authenticate a `TableServiceClient`\n\nAzure Tables supports several ways to authenticate. In order to interact with the Azure Tables service you'll need to create an instance of a Tables client - `TableServiceClient` or `TableClient` for example. See [samples for creating the `TableServiceClient`](#create-the-table-service-client) to learn more about authentication.\n\nNote: Azure Active Directory (AAD) is only supported for Azure Storage accounts.\n\n- [Service client with Shared Key](#tableserviceclient-with-azurenamedkeycredential)\n- [Service client with Shared access signatures](#tableserviceclient-with-sas-token)\n- [Service client with TokenCredential (AAD)](#tableserviceclient-with-tokencredential-aad)\n- [Table client with Shared Key](#tableclient-with-azurenamedkeycredential)\n- [Table client with Shared access signatures](#tableclient-with-sas-token)\n- [Table client with TokenCredential (AAD)](#tableclient-with-tokencredential-aad)\n\n#### Following features, interfaces, classes or functions are only available in Node.js\n\n- Shared Key Authorization based on account name and account key\n  - `AzureNamedKeyCredential`\n  - Account connection string.\n\n#### JavaScript Bundle\n\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n#### CORS\n\nYou need to set up [Cross-Origin Resource Sharing (CORS)](https://docs.microsoft.com/rest/api/storageservices/cross-origin-resource-sharing--cors--support-for-the-azure-storage-services) rules for your storage account if you need to develop for browsers. Go to Azure portal and Azure Storage Explorer, find your storage account, create new CORS rules for blob/queue/file/table service(s).\n\nFor example, you can create following CORS settings for debugging. But please customize the settings carefully according to your requirements in production environment.\n\n- Allowed origins: \\*\n- Allowed verbs: DELETE,GET,HEAD,MERGE,POST,OPTIONS,PUT\n- Allowed headers: \\*\n- Exposed headers: \\*\n- Maximum age (seconds): 86400\n\n## Key concepts\n\n- `TableServiceClient` - Client that provides functions to interact at a Table Service level such as create, list and delete tables\n\n- `TableClient` - Client that provides functions to interact at an entity level such as create, list and delete entities within a table.\n\n- `Table` - Tables store data as collections of entities.\n\n- `Entity` - Entities are similar to rows. An entity has a primary key and a set of properties. A property is a name, typed-value pair, similar to a column.\n\nCommon uses of the Table service include:\n\n- Storing TBs of structured data capable of serving web scale applications\n- Storing datasets that don't require complex joins, foreign keys, or stored procedures and can be de-normalized for fast access\n- Quickly querying data using a clustered index\n- Accessing data using the OData protocol filter expressions\n\n## Examples\n\n- [Import the package](#import-the-package)\n- [Create the table service client](#create-the-table-service-client)\n  - [List tables in the account](#list-tables-in-the-account)\n  - [Create a new table](#create-a-new-table)\n- [Create the table client](#create-the-table-client)\n  - [List Entities in a table](#list-entities-in-a-table)\n  - [Create a new entity and add it to a table](#create-a-new-entity-and-add-it-to-a-table)\n\n### Import the package\n\nTo use the clients, import the package in your file:\n\n```javascript\nconst AzureTables = require(\"@azure/data-tables\");\n```\n\nAlternatively, selectively import only the types you need:\n\n```javascript\nconst { TableServiceClient, AzureNamedKeyCredential } = require(\"@azure/data-tables\");\n```\n\n### Create the Table service client\n\nThe `TableServiceClient` requires a URL to the table service and an access credential. It also optionally accepts some settings in the `options` parameter.\n\n#### `TableServiceClient` with AzureNamedKeyCredential\n\nYou can instantiate a `TableServiceClient` with a `AzureNamedKeyCredential` by passing account-name and account-key as arguments. (The account-name and account-key can be obtained from the azure portal.)\n[ONLY AVAILABLE IN NODE.JS RUNTIME]\n\n```javascript\nconst { TableServiceClient, AzureNamedKeyCredential } = require(\"@azure/data-tables\");\n\nconst account = \"<account>\";\nconst accountKey = \"<accountkey>\";\n\nconst credential = new AzureNamedKeyCredential(account, accountKey);\nconst serviceClient = new TableServiceClient(\n  `https://${account}.table.core.windows.net`,\n  credential\n);\n```\n\n#### `TableServiceClient` with TokenCredential (AAD)\n\nAzure Tables provides integration with Azure Active Directory (Azure AD) for identity-based authentication of requests\nto the Table service when targeting a Storage endpoint. With Azure AD, you can use role-based access control (RBAC) to\ngrant access to your Azure Table resources to users, groups, or applications.\n\nTo access a table resource with a `TokenCredential`, the authenticated identity should have either the \"Storage Table Data Contributor\" or \"Storage Table Data Reader\" role.\n\nWith the `@azure/identity` package, you can seamlessly authorize requests in both development and production environments.\nTo learn more about Azure AD integration in Azure Storage, see the [Azure.Identity README](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/identity/identity/README.md)\n\n```javascript\nconst { TableServiceClient } = require(\"@azure/data-tables\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n\n// DefaultAzureCredential expects the following three environment variables:\n// - AZURE_TENANT_ID: The tenant ID in Azure Active Directory\n// - AZURE_CLIENT_ID: The application (client) ID registered in the AAD tenant\n// - AZURE_CLIENT_SECRET: The client secret for the registered application\nconst credential = new DefaultAzureCredential();\nconst account = \"<account name>\";\n\nconst clientWithAAD = new TableServiceClient(\n  `https://${account}.table.core.windows.net`,\n  credential\n);\n```\n\n#### `TableServiceClient` with SAS Token\n\nAlso, You can instantiate a `TableServiceClient` with a shared access signatures (SAS). You can get the SAS token from the Azure Portal.\n\n```javascript\nconst { TableServiceClient, AzureSASCredential } = require(\"@azure/data-tables\");\n\nconst account = \"<account name>\";\nconst sas = \"<service Shared Access Signature Token>\";\n\nconst serviceClientWithSAS = new TableServiceClient(\n  `https://${account}.table.core.windows.net`,\n  new AzureSASCredential(sas)\n);\n```\n\n#### List tables in the account\n\nYou can list tables within an account through a `TableServiceClient` instance calling the `listTables` function. This function returns a `PageableAsyncIterator` that you can consume using `for-await-of`\n\n```javascript\nconst { TableServiceClient, AzureNamedKeyCredential } = require(\"@azure/data-tables\");\n\nconst account = \"<account>\";\nconst accountKey = \"<accountkey>\";\n\nconst credential = new AzureNamedKeyCredential(account, accountKey);\nconst serviceClient = new TableServiceClient(\n  `https://${account}.table.core.windows.net`,\n  credential\n);\n\nasync function main() {\n  let tablesIter = serviceClient.listTables();\n  let i = 1;\n  for await (const table of tablesIter) {\n    console.log(`Table${i}: ${table.name}`);\n    i++;\n    // Output:\n    // Table1: testTable1\n    // Table1: testTable2\n    // Table1: testTable3\n    // Table1: testTable4\n    // Table1: testTable5\n  }\n}\n\nmain();\n```\n\n#### Create a new table\n\nYou can create a table through a `TableServiceClient` instance calling the `createTable` function. This function takes the name of the table to create as a parameter.\nNote that `createTable` won't throw an error when the table already exists.\n\n```javascript\nconst { TableServiceClient, AzureNamedKeyCredential } = require(\"@azure/data-tables\");\n\nconst account = \"<account>\";\nconst accountKey = \"<accountkey>\";\n\nconst credential = new AzureNamedKeyCredential(account, accountKey);\nconst serviceClient = new TableServiceClient(\n  `https://${account}.table.core.windows.net`,\n  credential\n);\n\nasync function main() {\n  const tableName = `newtable`;\n  // If the table 'newTable' already exists, createTable doesn't throw\n  await serviceClient.createTable(tableName);\n}\n\nmain();\n```\n\nHere is a sample that demonstrates how to test if the table already exists when attempting to create it:\n\n```javascript\nconst { TableServiceClient, AzureNamedKeyCredential } = require(\"@azure/data-tables\");\n\nconst account = \"<account>\";\nconst accountKey = \"<accountkey>\";\n\nconst credential = new AzureNamedKeyCredential(account, accountKey);\nconst serviceClient = new TableServiceClient(\n  `https://${account}.table.core.windows.net`,\n  credential\n);\n\nasync function main() {\n  const tableName = `newtable${new Date().getTime()}`;\n  await serviceClient.createTable(tableName, {\n    onResponse: (response) => {\n      if (response.status === 409) {\n        console.log(`Table ${tableName} already exists`);\n      }\n    }\n  });\n}\n\nmain();\n```\n\n### Create the table client\n\nThe `TableClient` is created in a similar way as the `TableServiceClient` with the difference that `TableClient` takes a table name as a parameter\n\n#### `TableClient` with `AzureNamedKeyCredential`\n\nYou can instantiate a `TableClient` with a `AzureNamedKeyCredential` by passing account-name and account-key as arguments. (The account-name and account-key can be obtained from the azure portal.)\n[ONLY AVAILABLE IN NODE.JS RUNTIME]\n\n```javascript\nconst { TableClient, AzureNamedKeyCredential } = require(\"@azure/data-tables\");\n\n// Enter your storage account name and shared key\nconst account = \"<account>\";\nconst accountKey = \"<accountkey>\";\nconst tableName = \"<tableName>\";\n\n// Use AzureNamedKeyCredential with storage account and account key\n// AzureNamedKeyCredential is only available in Node.js runtime, not in browsers\nconst credential = new AzureNamedKeyCredential(account, accountKey);\nconst client = new TableClient(`https://${account}.table.core.windows.net`, tableName, credential);\n```\n\n#### `TableClient` with `TokenCredential` (Azure Active Directory)\n\nAzure Tables provides integration with Azure Active Directory (Azure AD) for identity-based authentication of requests\nto the Table service when targeting a Storage endpoint. With Azure AD, you can use role-based access control (RBAC) to\ngrant access to your Azure Table resources to users, groups, or applications.\n\nTo access a table resource with a `TokenCredential`, the authenticated identity should have either the \"Storage Table Data Contributor\" or \"Storage Table Data Reader\" role.\n\nWith the `@azure/identity` package, you can seamlessly authorize requests in both development and production environments.\nTo learn more about Azure AD integration in Azure Storage, see the [Azure.Identity README](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/identity/identity/README.md)\n\n```javascript\nconst { TableClient } = require(\"@azure/data-tables\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n\n// DefaultAzureCredential expects the following three environment variables:\n// - AZURE_TENANT_ID: The tenant ID in Azure Active Directory\n// - AZURE_CLIENT_ID: The application (client) ID registered in the AAD tenant\n// - AZURE_CLIENT_SECRET: The client secret for the registered application\nconst credential = new DefaultAzureCredential();\nconst account = \"<account name>\";\nconst tableName = \"<tableName>\";\n\nconst clientWithAAD = new TableClient(\n  `https://${account}.table.core.windows.net`,\n  tableName,\n  credential\n);\n```\n\n#### `TableClient` with SAS Token\n\nYou can instantiate a `TableClient` with a shared access signatures (SAS). You can get the SAS token from the Azure Portal.\n\n```javascript\nconst { TableClient, AzureSASCredential } = require(\"@azure/data-tables\");\n\nconst account = \"<account name>\";\nconst sas = \"<service Shared Access Signature Token>\";\nconst tableName = \"<tableName>\";\n\nconst clientWithSAS = new TableClient(\n  `https://${account}.table.core.windows.net`,\n  tableName,\n  new AzureSASCredential(sas)\n);\n```\n\n#### `TableClient` with TokenCredential (AAD)\n\nAzure Tables provides integration with Azure Active Directory (Azure AD) for identity-based authentication of requests\nto the Table service when targeting a Storage endpoint. With Azure AD, you can use role-based access control (RBAC) to\ngrant access to your Azure Table resources to users, groups, or applications.\n\nTo access a table resource with a `TokenCredential`, the authenticated identity should have either the \"Storage Table Data Contributor\" or \"Storage Table Data Reader\" role.\n\nWith the `@azure/identity` package, you can seamlessly authorize requests in both development and production environments.\nTo learn more about Azure AD integration in Azure Storage, see the [Azure.Identity README](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/identity/identity/README.md)\n\n```javascript\nconst { TableClient } = require(\"@azure/data-tables\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n\n// DefaultAzureCredential expects the following three environment variables:\n// - AZURE_TENANT_ID: The tenant ID in Azure Active Directory\n// - AZURE_CLIENT_ID: The application (client) ID registered in the AAD tenant\n// - AZURE_CLIENT_SECRET: The client secret for the registered application\nconst credential = new DefaultAzureCredential();\nconst account = \"<account name>\";\nconst tableName = \"<tableName>\";\n\nconst clientWithAAD = new TableClient(\n  `https://${account}.table.core.windows.net`,\n  tableName,\n  credential\n);\n```\n\n#### List Entities in a table\n\nYou can list entities within a table by through a `TableClient` instance calling the `listEntities` function. This function returns a `PageableAsyncIterator` that you can consume using `for-await-of`\n\n```javascript\nconst { TableClient, AzureNamedKeyCredential } = require(\"@azure/data-tables\");\n\nconst account = \"<account>\";\nconst accountKey = \"<accountkey>\";\nconst tableName = \"<tableName>\";\n\nconst credential = new AzureNamedKeyCredential(account, accountKey);\nconst client = new TableClient(`https://${account}.table.core.windows.net`, tableName, credential);\n\nasync function main() {\n  let entitiesIter = client.listEntities();\n  let i = 1;\n  for await (const entity of entitiesIter) {\n    console.log(`Entity${i}: PartitionKey: ${entity.partitionKey} RowKey: ${entity.rowKey}`);\n    i++;\n    // Output:\n    // Entity1: PartitionKey: P1 RowKey: R1\n    // Entity2: PartitionKey: P2 RowKey: R2\n    // Entity3: PartitionKey: P3 RowKey: R3\n    // Entity4: PartitionKey: P4 RowKey: R4\n  }\n}\n\nmain();\n```\n\n#### Create a new entity and add it to a table\n\nYou can create a new Entity in a table by through a `TableClient` instance calling the `createEntity` function. This function takes the entity to insert as a parameter. The entity must contain `partitionKey` and `rowKey`.\n\n```javascript\nconst { TableClient, AzureNamedKeyCredential } = require(\"@azure/data-tables\");\n\nconst account = \"<account>\";\nconst accountKey = \"<accountkey>\";\nconst tableName = \"<tableName>\";\n\nconst credential = new AzureNamedKeyCredential(account, accountKey);\nconst client = new TableClient(`https://${account}.table.core.windows.net`, tableName, credential);\n\nasync function main() {\n  const testEntity = {\n    partitionKey: \"P1\",\n    rowKey: \"R1\",\n    foo: \"foo\",\n    bar: 123\n  };\n  await client.createEntity(testEntity);\n}\n\nmain();\n```\n\n## Azurite and Storage Emulator\n\nThe Azure Tables Client SDK also works with Azurite, an Azure Storage and Tables API compatible server emulator. Please refer to the ([Azurite repository](https://github.com/Azure/Azurite#azurite-v3)) on how to get started using it.\n\n### Connecting to Azurite with Connection String shortcut\n\nThe easiest way to connect to Azurite from your application is to configure a connection string that references the shortcut `UseDevelopmentStorage=true`. The shortcut is equivalent to the full connection string for the emulator, which specifies the account name, the account key, and the emulator endpoints for each of the Azure Storage services: ([see more](https://github.com/Azure/Azurite#http-connection-strings)). Using this shortcut, the Azure Tables Client SDK would setup the default connection string and `allowInsecureConnection` in the client options.\n\n```typescript\nimport { TableClient } from \"@azure/data-tables\";\n\nconst connectionString = \"UseDevelopmentStorage=true\";\nconst client = TableClient.fromConnectionString(connectionString, \"myTable\");\n```\n\n### Connecting to Azurite without Connection String shortcut\n\nYou can connect to azurite manually without using the connection string shortcut by specifying the service URL and `AzureNamedKeyCredential` or a custom connection string. However, `allowInsecureConnection` will need to be set manually in case Azurite runs in an `http` endpoint.\n\n```typescript\nimport { TableClient, AzureNamedKeyCredential } from \"@azure/data-tables\";\n\nconst client = new TableClient(\n  \"<Azurite-http-table-endpoint>\",\n  \"myTable\",\n  new AzureNamedKeyCredential(\"<Azurite-account-name>\", \"<Azurite-account-key>\"),\n  { allowInsecureConnection: true }\n);\n```\n\n## Troubleshooting\n\n### General\n\nWhen you interact with Tables service using the Javascript/Typescript SDK, errors returned by the service correspond to the same HTTP status codes returned for REST API requests:\n[Storage Table Service Error Codes](https://docs.microsoft.com/rest/api/storageservices/table-service-error-codes)\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\n\nsetLogLevel(\"info\");\n```\n\n## Next steps\n\nMore code samples coming soon Issue#10531\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a\nContributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us\nthe rights to use your contribution. For details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide\na CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions\nprovided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or\ncontact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js/sdk/tables/README.png)\n",
        "repo_name": "tables/data-tables",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/tables/data-tables",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Template client library for JavaScript\n\n<!-- NOTE: This README file is a template. Read through it and replace the instructions (keeping an eye out for package names like \"@azure/template\") with the ones that pertain to your package. For a complete example based on the real Azure App Configuration SDK, see README-TEMPLATE.md in this directory. -->\n\nThis project is used as a template package for the Azure SDK for JavaScript. It is intended to help Azure SDK developers bootstrap new packages, and it provides an example of how to organize the code and documentation of a client library for an Azure service.\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge, and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\nUsually you'd put a shell command for provisioning the necessary Azure services here.\n\n### Install the `@azure/template` package\n\nInstall the Template client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/template\n```\n\n### Browser support\n\n#### JavaScript Bundle\n\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n#### CORS\n\n<!--\n\nNOTE: if your service supports CORS natively please provide instructions for enabling CORS at the service level (similar to the sample below), otherwise replace this section with guidance such as:\n\nDue to Azure template service CORS limitation this library cannot be used to make direct calls to the template service from a browser. Please refer to [this document](https://github.com/Azure/azure-sdk-for-js/blob/main/samples/cors/ts/README.md) for guidance.\n\n-->\n\nYou need to set up [Cross-Origin Resource Sharing (CORS)](https://docs.microsoft.com/rest/api/storageservices/cross-origin-resource-sharing--cors--support-for-the-azure-storage-services) rules for your storage account if you need to develop for browsers. Go to Azure portal and Azure Storage Explorer, find your storage account, create new CORS rules for blob/queue/file/table service(s).\n\nFor example, you can create the following CORS settings for debugging. But please customize the settings carefully according to your requirements in a production environment.\n\n- Allowed origins: \\*\n- Allowed verbs: DELETE,GET,HEAD,MERGE,POST,OPTIONS,PUT\n- Allowed headers: \\*\n- Exposed headers: \\*\n- Maximum age (seconds): 86400\n\n### Further examples\n\nTop-level examples usually include things like creating and authenticating the main Client. If your service supports multiple means of authenticating (e.g. key-based and Azure Active Directory) you can give a separate example of each.\n\n## Key concepts\n\n### ConfigurationClient\n\nDescribe your primary client here. Talk about what operations it can do and when a developer would want to use it.\n\n### Additional Examples\n\nCreate a section for each top-level service concept you want to explain.\n\n## Examples\n\n### First Example\n\n<!-- Examples should showcase the primary, or \"champion\" scenarios of the client SDK. -->\n\nCreate several code examples for how someone would use your library to accomplish a common task with the service.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\n\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/template/template/samples) directory for detailed examples that demonstrate how to use the client libraries.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for Javascript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Ftemplate%2Ftemplate%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n",
        "repo_name": "template/template-dpg",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/template/template-dpg",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Template client library for JavaScript\n\n<!-- NOTE: This README file is a template. Read through it and replace the instructions (keeping an eye out for package names like \"@azure/template\") with the ones that pertain to your package. For a complete example based on the real Azure App Configuration SDK, see README-TEMPLATE.md in this directory. -->\n\nThis project is used as a template package for the Azure SDK for JavaScript. It is intended to help Azure SDK developers bootstrap new packages, and it provides an example of how to organize the code and documentation of a client library for an Azure service.\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge, and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\nUsually you'd put a shell command for provisioning the necessary Azure services here.\n\n### Install the `@azure/template` package\n\nInstall the Template client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/template\n```\n\n### Browser support\n\n#### JavaScript Bundle\n\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n#### CORS\n\n<!--\n\nNOTE: if your service supports CORS natively please provide instructions for enabling CORS at the service level (similar to the sample below), otherwise replace this section with guidance such as:\n\nDue to Azure template service CORS limitation this library cannot be used to make direct calls to the template service from a browser. Please refer to [this document](https://github.com/Azure/azure-sdk-for-js/blob/main/samples/cors/ts/README.md) for guidance.\n\n-->\n\nYou need to set up [Cross-Origin Resource Sharing (CORS)](https://docs.microsoft.com/rest/api/storageservices/cross-origin-resource-sharing--cors--support-for-the-azure-storage-services) rules for your storage account if you need to develop for browsers. Go to Azure portal and Azure Storage Explorer, find your storage account, create new CORS rules for blob/queue/file/table service(s).\n\nFor example, you can create the following CORS settings for debugging. But please customize the settings carefully according to your requirements in a production environment.\n\n- Allowed origins: \\*\n- Allowed verbs: DELETE,GET,HEAD,MERGE,POST,OPTIONS,PUT\n- Allowed headers: \\*\n- Exposed headers: \\*\n- Maximum age (seconds): 86400\n\n### Further examples\n\nTop-level examples usually include things like creating and authenticating the main Client. If your service supports multiple means of authenticating (e.g. key-based and Azure Active Directory) you can give a separate example of each.\n\n## Key concepts\n\n### ConfigurationClient\n\nDescribe your primary client here. Talk about what operations it can do and when a developer would want to use it.\n\n### Additional Examples\n\nCreate a section for each top-level service concept you want to explain.\n\n## Examples\n\n### First Example\n\n<!-- Examples should showcase the primary, or \"champion\" scenarios of the client SDK. -->\n\nCreate several code examples for how someone would use your library to accomplish a common task with the service.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\n\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/template/template/samples) directory for detailed examples that demonstrate how to use the client libraries.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for Javascript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Ftemplate%2Ftemplate%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n",
        "repo_name": "template/template",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/template/template",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure TemplateSpecs client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure TemplateSpecs client.\n\nThe APIs listed in this specification can be used to manage Template Spec resources through the Azure Resource Manager.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/templatespecs/arm-templatespecs) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-templatespecs) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-templatespecs) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-templatespecs` package\n\nInstall the Azure TemplateSpecs client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-templatespecs\n```\n\n### Create and authenticate a `TemplateSpecsClient`\n\nTo create a client object to access the Azure TemplateSpecs API, you will need the `endpoint` of your Azure TemplateSpecs resource and a `credential`. The Azure TemplateSpecs client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure TemplateSpecs resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure TemplateSpecs** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { TemplateSpecsClient } = require(\"@azure/arm-templatespecs\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new TemplateSpecsClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new TemplateSpecsClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### TemplateSpecsClient\n\n`TemplateSpecsClient` is the primary interface for developers using the Azure TemplateSpecs client library. Explore the methods on this client object to understand the different features of the Azure TemplateSpecs service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Ftemplatespecs%2Farm-templatespecs%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "templatespecs/arm-templatespecs",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/templatespecs/arm-templatespecs",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Perf library for JavaScript\n\n## Getting started\n\nTo start a new perf test project for the your SDK in the js repository, follow the steps in the [GettingStarted.md](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/test-utils/perf/GettingStarted.md).\n\nLink to the wiki - [Writing-Performance-Tests](https://github.com/Azure/azure-sdk-for-js/wiki/Writing-Performance-Tests) (has the same contents as the GettingStarted docs)\n\n## KeyConcepts\n\n- A **PerfTest** test is a test that will be executed repeatedly to show both the performance of the program, and how it behaves under stress.\n- Tests have an asynchronous method called `run` which is executed based on the duration, iterations, and parallel options provided for the perf test. More about options below.\n- A **PerfOption** is a command line parameter. We use `minimist` to parse them appropriately, and then to consolidate them in a dictionary of options that is called `PerfOptionDictionary<string>`. The dictionary class accepts a union type of strings that defines the options that are allowed by each test.\n- Some default options are parsed by the Perf program. Their longer names are: `help`, `no-cleanups`, `parallel`, `duration`, `warmup`, `iterations`, `no-cleanup` and `milliseconds-to-log`.\n- Perf tests are executed as many times as possible until the `duration` parameter is specified. This process may repeat as many `iterations` are given. Before each iteration, tests might be called for a period of time up to `warmup`, to adjust to possible runtime optimizations. In each iteration, as many as `parallel` instances of the same test are called without waiting for each other, letting the event loop decide which one is prioritized (it's not true parallelism, but it's an approximation that aligns with the design in other languages, we might improve it over time).\n- Each test can have a `globalSetup` method, which is called once per CPU before the process begins, a `globalCleanup` method, which is called once per CPU after the process finishes.\n- Each test can have a `setup` method, which is called as many times as test instances are created (up to `parallel`), and help specify local state for each test instance. A `cleanup` method is also optional, called the same amount of times, but after finishing running the tests.\n- `test-proxies` url option - this option can be leveraged to avoid hitting throttling scenarios while testing the services. This option lets the requests go through proxy server(s) based on the url(s) provided, we run the `run` method once in record mode to save the requests and responses in memory and then a ton of times in playback. Workflow with the test-proxies below.\n- `parallel` and `cpus` options: `cpus` specifies the number of CPU cores to distribute parallel runs across; `parallel` specifies the number of parallel runs to perform.\n- `use-worker-threads` option: when running on multiple CPUs, set to true to use the Node worker threads module. Defaults to false, in which case the child process module is used.\n\n## Multi-core perf testing and parallelism\n\n### Overview\n\nThe perf framework has a `--parallels` option which controls the number of parallel executions that are run simultaneously during the perf test. By default, these parallel executions are split evenly across the number of CPUs available on the machine. The number of CPUs that the parallel runs are split across can be controlled manually using the `--cpus` option.\n\nTo achieve multi-core perf testing, a manager-worker architecture is used. When the perf framework is first run, a manager process is created, which is responsible for spawning a number of worker processes corresponding to the number of CPUs.\n\n```mermaid\ngraph TD\nManager[ManagerPerfProgram] --- worker1[WorkerPerfProgram]\nManager --- worker2[WorkerPerfProgram]\nManager --- worker3[WorkerPerfProgram]\nManager --- worker4[WorkerPerfProgram]\n```\n\n<p align=\"center\"><em>Figure: In the case of 4 CPUs being used, the manager creates 4 worker processes. Messages are exchanged between the manager and each worker for synchronization and reporting of results.</em></p>\n\nEach worker process is allocated a number of parallel runs by the manager. The manager is responsible for (i) synchronizing all the workers and controlling the perf test run's lifecycle, and (ii) receiving, collating, and reporting results from each of the workers. Each worker is responsible for (i) executing its assigned parallel runs and (ii) sending results and status updates to the manager process.\n\nBy default, each of the workers is a child process of the manager program, created using the Node [`child_process` module](https://nodejs.org/api/child_process.html). The `--use-worker-threads` flag can be used to create workers using the newer [`worker_threads` module](https://nodejs.org/api/worker_threads.html) instead. Note that the use of worker threads may cause performance degradation when using Node 14 or lower.\n\n### Synchronization\n\nA barrier construct is used to ensure that each worker follows the same timing. The perf test run is split into a number of stages:\n\n- Global setup\n- Setup\n- Post-setup\n- Warmup\n- Test (one 'test' stage per iteration specified with the `--iterations` option)\n- Pre-cleanup\n- Cleanup\n- Global cleanup\n\nEach worker waits for a message from the manager to before entering each stage, and can only proceed out of the stage once all the other workers have completed the stage. The manager is responsible for telling the workers to start a stage and for sending messages to workers once all the other workers have completed a stage. The diagram below shows how the manager and a worker communicates over the course of a stage:\n\n```mermaid\nsequenceDiagram\nManager->>+Worker: enterStage: globalSetup\nNote over Worker: The worker executes the `globalSetup` method on the perf test.\nWorker-->>-Manager: stageComplete: globalSetup\nActivate Manager\nNote over Manager: Manager waits until it has received a stageComplete message from all workers\nDeactivate Manager\nManager->>Worker: allComplete: globalSetup\nWorker-->>Manager: acknowledgeCompletion: globalSetup\n```\n\n<p align=\"center\"><em>Figure: example flow of synchronization messages between the manager and a worker during a stage (globalSetup in this case).</em></p>\n\n## Workflow with test proxy\n\nSteps below constitute the workflow of a typical perf test.\n\n- test resources are setup\n  - hitting the live service\n- then start record\n  - making a request to the proxy server to start recording\n  - proxy server gives a recording id, we'll use this id to save the actual requests and responses\n- run the `run` method once\n  - proxy-server saves all the requests and responses in memory\n- stop record\n  - making a request to the proxy server to stop recording\n- start playback\n  - making a request to the proxy server to start playback\n  - we use the same recording-id that we used in the record mode since that's the only way proxy-server knows what requests are supposed to be played back\n  - As a response, we get a new recording-id, which will be used for future playback requests\n- run the `run` method again\n  - based on the duration, iterations, and parallel options provided for the perf test\n  - all the requests in the `run` method are played back since we have already recorded them before\n- when the `run` loops end, stop playback\n  - making a request to the proxy server to stop playing back\n- delete the live resources that we have created before\n\n## Examples\n\nCheck the [test folder](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/test-utils/perf/test/).\n\n## Running the tests in `/test` folder\n\n> `npm run perf-test:node -- ${testClassName} ${options}`\n\n### Example\n\n> `npm run perf-test:node -- NoOp --parallel 2 --duration 7 --iterations 2 --warmup 2`\n\nIf you would like to run all the tests at once in sequence, use the following command\n\n> `rushx test:node`\n\n## Troubleshooting\n\nTODO\n\n## Next steps\n\nCheck the [source](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/test-utils/perf/src/) folder and the [test folder](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/test-utils/perf/test/).\n\nAlso check the Perf EPIC, here: https://github.com/Azure/azure-sdk-for-js/issues/8057\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Ftest-utils%2Fperf%2FREADME.png)\n",
        "repo_name": "test-utils/perf",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/test-utils/perf",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure @azure-tools/test-recorder library for JavaScript\n\nThe Azure SDK for JavaScript is composed of a multitude of libraries that attempt to deliver a common, homogenous SDK to make use of all of the services that Azure can provide. Among the challenges of such a goal, we have some that are specific to tests, some of which we can summarize in the following questions:\n\n- How to write live tests that can work as unit tests?\n- How to ensure that tests are as fast as they can be?\n- How to avoid writing mocked versions of our HTTP API?\n- How to protect sensitive data from our live tests?\n- How to write tests that support parallelism?\n- How to write isomorphic tests for NodeJS and the Browsers?\n\nOur recorder tool package `@azure-tools/test-recorder` attempts to provide an answer for those questions.\n\n**Note 1: In case you're depending on `@azure-tools/test-recorder@1.x.y` and want to migrate your tests to version 3, follow the [migration guide to recorder v3 from v1](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/test-utils/recorder/MIGRATION.md)**\n\n**Note 2: If you're looking to onboard to the asset-sync workflow to push out the test recordings to `Azure/azure-sdk-assets` repository, refer to [asset-sync-migration](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/test-utils/recorder/ASSET_SYNC_MIGRATION.md).**\n\n**Note 3: Refer to [testing-commands](https://github.com/Azure/azure-sdk-for-js/wiki/Golden-Testing-Commands) if you need help on commands to run during testing.**\n\nThis library provides interfaces and helper methods to equip the SDKs in the `azure-sdk-for-js` repo with the recording and playback capabilities for the tests, it targets HTTP requests in both Node.js and the Browsers.\n\n`@azure-tools/test-recorder`, as part of the Test Utils available in this repository, it is supposed to be added only as a devDependency and should be used only for the tests of an sdk.\n\nThis tool helps to record and playback the tests in the JS repo by leveraging the unified out-of-process test proxy server.\n\n## Index\n\n- [Key concepts](#key-concepts)\n- [Getting started](#getting-started)\n  - [Installing the package](#installing-the-package)\n  - [Configuring your project](#configuring-your-project)\n  - [TEST_MODE](#test_mode)\n- [Onboard to asset-sync workflow](#onboard-to-asset---sync-workflow)\n- [Using the `Recorder`](#using-the-recorder)\n  - [Recorder#variable()](#recordervariable)\n  - [Environment Variables](#environment-variables)\n  - [`@azure-tools/test-credential` package and the NoOpCredential](#azure-toolstest-credential-package-and-the-noopcredential)\n  - [karma.conf - for the browser tests](#karmaconf---for-the-browser-tests)\n- [Examples](#examples)\n  - [How to record](#how-to-record)\n  - [How to playback](#how-to-playback)\n  - [Update existing recordings](#update-existing-recordings)\n  - [Skipping tests](#skipping-tests)\n  - [Securing sensitive data](#securing-sensitive-data)\n  - [Supporting parallelism](#supporting-parallelism)\n  - [Isomorphic tests](#isomorphic-tests)\n- [Troubleshooting](#troubleshooting)\n- [Next steps](#next-steps)\n- [Contributing](#contributing)\n\n## Key concepts\n\n- To **record** means to intercept any HTTP request, store it in a file, then store the response received from the live resource that was originally targeted. We leverage the unified out-of-process test proxy server that is built for this use case. The output files are stored in `recordings/node/*` and in `recordings/browsers/*`, which are relative to the root of the project you're working on.\n- To **playback** means to intercept any HTTP request and to respond it with the stored response of a previously recorded matching request.\n- **Sensitive information** means content that should not be shared publicly. Content like passwords, unique identifiers or personal information should be cleaned up from the recordings. Some functionality is provided to fix this problem. You can read more at [securing sensitive data](#securing-sensitive-data).\n\n## Getting started\n\nWe're about to go through how to set up your project to use the `@azure-tools/test-recorder` package.\n\n**_Note: If you're new to this repository, follow the [ContributingGuide.md](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn how to setup/build the repo and to create/test an SDK in the [Azure/azure-sdk-for-js](https://github.com/Azure/azure-sdk-for-js) repository._**\n\n### Installing the package\n\nFrom this point forward, we'll assume that you're developing (perhaps contributing!) to one of the azure-sdk-for-js's libraries. So, your next step is to change directory to the path relevant to your project. Let's say you want to add the `@azure-tools/test-recorder` package to `@azure/data-tables` (it already uses test-recorder, but bear with us), you'll be doing the following to install the package:\n\n```bash\ncd sdk/tables/data-tables\nrush add -p @azure-tools/test-recorder@^3.0.0 --dev\n```\n\nIf you are using `@azure/identity` in your tests, also install `\"@azure-tools/test-credential\"` package.\n\n```bash\nrush add -p @azure-tools/test-credential@^1.0.0 --dev\n```\n\nWith a following `rush update`, you may see something like below.\n\n```json\n{\n  // ... your package.json properties\n  \"devDependencies\": {\n    // ... your devDependencies\n    \"@azure-tools/test-credential\": \"^1.0.0\", // If you are using `@azure/identity` in your tests\n    \"@azure-tools/test-recorder\": \"^3.0.0\"\n    // ... more of your devDependencies\n  }\n  // ... more of your package.json properties\n}\n```\n\nAnd you're ready! Now you can use the test recorder in your code, as shown below:\n\n```typescript\nimport { Recorder } from \"@azure-tools/test-recorder\";\n```\n\nOr, if you know what you want to import, you can also do the following:\n\n```typescript\nimport { Recorder, RecorderStartOptions, env, SanitizerOptions } from \"@azure-tools/test-recorder\";\n```\n\n### Configuring your project\n\nHaving the recorder as a devDependency means that you'll be able to start recording tests right away by using the `Recorder` class.\n\nThe test-recorder provides the `Recorder` class that deals with recording and playing back the network requests, depending on the value assigned to the `TEST_MODE` environment variable.\n\n- If `TEST_MODE` equals to `record`, it will automatically store network requests in a plain text file in the folder `recordings` at the root of your library (it is `sdk/tables/data-tables` in our example).\n- This package assumes that the tests in the sdk are leveraging\n  [mocha](https://mochajs.org/) and [rollup](https://rollupjs.org/guide/en/)\n  (and [karma](https://karma-runner.github.io/latest/index.html) test runner for browser tests) as suggested by the [template](https://github.com/Azure/azure-sdk-for-js/tree/master/sdk/template/template) package in the repo.\n\n#### package.json scripts\n\nFor the unified recorder client library to work, the [test proxy server](https://github.com/Azure/azure-sdk-tools/tree/main/tools/test-proxy) must be active while you are running your tests. Helpers have been added to the `dev-tool` package which manage starting and stopping the test proxy server before and after your tests are run.\n\nYour test scripts (in `package.json`) should be based on the following examples:\n\n| script name                | command                                                                                                          |\n| :------------------------- | :--------------------------------------------------------------------------------------------------------------- |\n| `unit-test:browser`        | `dev-tool run test:browser`                                                                                      |\n| `unit-test:node`           | `dev-tool run test:node-ts-input -- --timeout 1200000 --exclude 'test/**/browser/*.spec.ts' 'test/**/*.spec.ts'` |\n| `integration-test:browser` | `dev-tool run test:browser`                                                                                      |\n| `integration-test:node`    | `dev-tool run test:node-js-input -- --timeout 5000000 'dist-esm/test/**/*.spec.js'`                              |\n\nNote the difference between the dev-tool `node-ts-input` and `node-js-input` commands:\n\n- `node-ts-input` runs the tests using `ts-node`, without code coverage.\n- `node-js-input` runs the tests using the built JavaScript output, and generates coverage reporting using `nyc`.\n\nRead more at [dev-tool commands #usage](https://github.com/Azure/azure-sdk-for-js/blob/main/common/tools/dev-tool/README.md#usage)\n\nThe above `dev-tool` commands run the tests with the default configs and concurrently starts(runs) the test-proxy tool in a detached process in the background in record/playback modes if it is not already active. Additionally, more options can be passed to override the default configs.\n\nThe test-proxy tool is run at ports 5000(for HTTP) and 5001(for HTTPS) unless you specify `TEST_PROXY_HTTP_PORT` as an environment variable, in which case that will be picked.\n\nTest scripts\n\n```json\n{\n  // ... your package.json scripts section\n  \"integration-test:node\": \"...\",\n  \"unit-test:node\": \"...\"\n  // ... more of your package.json scripts\n}\n```\n\n### TEST_MODE\n\nBy using recorder with your clients, the requests are redirected to the test-proxy tool to either save them or replay them.\nInteractions with the test-proxy tool vary based on what the `TEST_MODE` environment variable is.\n\n| TEST_MODE  | What?                                                                                                                                                                                           |\n| :--------- | :---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `record`   | Stores network requests with the help of test-proxy tool in a plain text file in the folder `recordings` at the root of your repository (example: root of the `sdk/tables/data-tables` project) |\n| `playback` | Stored requests/responses are utilized by the test-proxy tool when the requests are redirected to it instead of reaching the service                                                            |\n| `live`     | Recorder and its methods are no-ops here, requests directly reach the service instead of being redirected at the test-proxy tool layer                                                          |\n\n## Onboard to asset-sync workflow\n\nThis section assumes that your package is new to the JS repo and that you're trying to onboard your tests with recorder, and the asset-sync workflow.\n\nFrom the root of the repo, navigate to your package\n\n```\ncd sdk/<service-folder>/<package-name>\n```\n\nGenerate an `sdk/<service-folder>/<package-name>/assets.json` file by running the following command.\n\n```\nnpx dev-tool test-proxy init\n```\n\nThis command would generate an `assets.json` file with an empty tag.\nOnce you generate the recordings for your tests and push them to the assets repo, the tag gets populated here.\n\nFor further understanding, please read the [asset sync migration and workflow](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/test-utils/recorder/ASSET_SYNC_MIGRATION.md).\n\n## Using the `Recorder`\n\nInside a mocha test (either in the `beforeEach` or in the test body itself), you will need to instantiate the `Recorder` as below to leverage its functionalities.\n\n```js\nlet recorder: Recorder;\n\nbeforeEach(async function (this: Mocha.Context) {\n  recorder = new Recorder(this.currentTest);\n});\n```\n\nThe tested client needs to install the recording policy that redirects requests to the test-proxy tool first before they go to the service. This is done by simply passing the client options bag through the `recorder.configureClientOptions` helper:\n\n```js\nconst client = new AnyCoreV2Client(/** args **/, recorder.configureClientOptions(/** client options **/));\n```\n\nRecording starts with the `recorder.start()` method.\n\n```js\nawait recorder.start(/** recorderOptions go here **/);\n```\n\nRecorder options will typically contain the environment setup needed for the `playback` mode, and the sanitizers that help with masking the sensitive information in the recordings, more on the recorder options below.\n\nAny requests that are made using the above `client (AnyCoreV2Client)` will be redirected to the test-proxy tool before they reach the service, the requests and responses will be recorded and saved when `recorder.stop()` is called in `record` mode.\n\nLikewise, in `playback` mode, the saved responses are utilized by the test-proxy tool when the requests are redirected to it instead of reaching the service.\n\n```js\nawait recorder.stop();\n```\n\n- Call this method to ping the test-proxy tool with a stop request, this helps to stop recording, saves the recording file in record mode.\n\n_Note: Instantiating, starting, and stopping the recorder all have no effect in the `live` mode (`TEST_MODE=live`). In `live` mode, the redirection to the test-proxy tool doesn't happen and the requests are sent to the services as usual._\n\n### Recorder#variable()\n\nTo handle the dynamic/generated values for testing that are created as part of the tests, to make sure the requests in the `playback` mode match the ones in the `record` mode, you can leverage the `Recorder#variable` function.\n\nFor example, when resources are created dynamically, the name of the resource that is generated would vary in record and playback modes.\nThis is not ideal for playing back the requests/responses because the requests wouldn't match with what was saved in the recording in record mode.\n\nFor such cases, you can leverage the `recorder.variable()` method. It acts differently based on what the TEST_MODE is.\n\n```js\n// variable method\nrecorder.variable(\"table-name\", `table${Math.ceil(Math.random() * 1000 + 1000)}`)\n\n// Shows up in the recording as\n  \"Variables\": {\n    \"table-name\": \"table1662\"\n  }\n```\n\n- Lets you register a variable to be stored with the recording. The behavior of this function depends on whether the recorder is in record/live mode or in playback mode.\n\n- In record mode, the function will store the value provided with the recording as a variable and return that value.\n\n- In playback mode, the function will fetch the value from the variables stored as part of the recording and return the retrieved variable, throwing an error if it is not found.\n\n- In live mode, no recordings are saved, just returns the provided value.\n\n### Environment variables\n\n`@azure-tools/test-recorder` exports `env` which loads the environment variables from the correct location (using `process.env` and `dotenv` in Node, and using `window.__env__` via karma in the browser), and also means that the environment variables set in `envSetupForPlayback` are used in playback mode.\n\n- `recorder.start()` internally sets up the environment variables for playback. So, make sure to have the `recorder.start()` call before you use any environment variables in your tests.\n- To use an environment variable in a test, just do `env[\"NAME_OF_THE_VARIABLE\"]`.\n- Recorder also exports a `assertEnvironmentVariable` global method, which can be used to retrieve the environment variables.\n  The function `assertEnvironmentVariable(\"NAME_OF_THE_VARIABLE\")` either returns the value or throws an error saying the variable is not defined in your environment.\n  (This function comes handy when your function args expect a non-undefined value but the environment variable may not be defined in the runtime.)\n\n### `@azure-tools/test-credential` package and the NoOpCredential\n\nWe do not record the AAD traffic since it is typically noise that is not needed for testing the SDK(unless we are testing the `@azure/identity` package directly which uses the `@azure-tools/test-recorder` differently to record the tests).\n\n- Tests with clients using AAD should make use of the new `@azure-tools/test-credential` package.\n- This package provides a `NoOpCredential` implementation of `TokenCredential` which makes no network requests, and should be used in `playback mode`.\n- The provided `createTestCredential` helper will handle switching between `NoOpCredential` in playback and `ClientSecretCredential` when recording for you:\n\n```ts\nimport { createTestCredential } from \"@azure-tools/test-credential\";\n\nconst credential = createTestCredential();\n\n// Create your client using the test credential.\nnew MyServiceClient(<endpoint>, credential);\n```\n\nSince AAD traffic is not recorded by the new recorder, there are no AAD credentials to remove from the recording using a sanitizer.\n\n### karma.conf - for the browser tests\n\nWhen running browser tests, the recorder relies on an environment variable to determine where to save the recordings. Add this snippet to your `karma.conf.js`:\n\n```ts\nconst { relativeRecordingsPath } = require(\"@azure-tools/test-recorder\");\n\nprocess.env.RECORDINGS_RELATIVE_PATH = relativeRecordingsPath();\n```\n\nAnd then, again in `karma.conf.js`, add the variable to the list of environment variables:\n\n```ts\nmodule.exports = function (config) {\n  config.set({\n    /* ... */\n\n    envPreprocessor: [\n      // variables\n      \"RECORDINGS_RELATIVE_PATH\", // Add this!\n      \"TEST_PROXY_HTTP_PORT\", // Optional (Incase you need a port other than 5000)\n      // more variables\n    ],\n\n    /* ... */\n  });\n};\n```\n\n## Onboard to asset-sync workflow\n\n## Examples\n\n### How to record\n\nTo record your tests,\n\n- make sure to set the environment variable `TEST_MODE` to `record`\n\n  ```sh\n  # Windows\n  set TEST_MODE=record\n\n  # Linux / Mac\n  export TEST_MODE=record\n  ```\n\n- then in your code, instantiate the `Recorder`\n- call `#start()` function with the recorder options\n- modify the client options using the `#configureClientOptions()` method\n- then make calls with your client as needed\n- call `#stop()` function to save the recording in a file\n\nIn the following example, we'll use the recorder with the client from `@azure/data-tables`:\n\n_[Example](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/template/template/test/public/configurationClient.spec.ts) from the template project if you want to check out._\n\n```typescript\nimport { RecorderStartOptions, Recorder, env } from \"@azure-tools/test-recorder\";\nimport { createTestCredential } from \"@azure-tools/test-credential\";\nimport { TableServiceClient } from \"@azure/data-tables\";\n\nconst recorderOptions: RecorderStartOptions = {\n  envSetupForPlayback: {\n    TABLES_URL: \"https://fakeaccount.table.core.windows.net\",\n  },\n  sanitizerOptions: {\n    bodySanitizers: [\n      {\n        target: encodeURIComponent(env.TABLES_URL ?? \"\"),\n        value: encodeURIComponent(`https://fakeaccount.table.core.windows.net`),\n      },\n    ],\n  },\n};\n\ndescribe(`TableServiceClient tests`, () => {\n  let recorder: Recorder;\n  let credential;\n\n  beforeEach(async function () {\n    recorder = new Recorder(this.currentTest);\n    await recorder.start(recorderOptions);\n    credential = createTestCredential();\n  });\n\n  afterEach(async function () {\n    await recorder.stop();\n  });\n\n  it(\"should create new table, then delete\", async () => {\n    const tableName = recorder.variable(\n      \"table-name\",\n      `table${Math.ceil(Math.random() * 1000 + 1000)}`\n    );\n    const client = new TableServiceClient(\n      env[\"TABLES_URL\"],\n      credential,\n      recorder.configureClientOptions({})\n    );\n    await client.createTable(tableName);\n    await client.deleteTable(tableName);\n  });\n});\n```\n\n- After running this test with the `TEST_MODE` environment variable set to\n  `record`, the recorder assisted by the test-proxy tool will create a recording file with the contents of the HTTP requests as well as the responses.\n\n  If the package has been onboarded to asset-sync workflow, the recording will be loacted under the `.assets/` at the root of the repository. \n    - To view the recording, refer to `.assets/.breadcrumb` to find the entry that matches your SDK. This will give you the name of the directory within `.assets` that your recordings are located in.\n    - Refer to [asset sync workflow](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/test-utils/recorder/ASSET_SYNC_MIGRATION.md#workflow-with-asset-sync-enabled) for more understanding and further steps.\n\n  Otherwise, the recording will be located at `recordings/node/tableserviceclient_tests/recording_should_create_new_table_then_delete.json`.\n\n- You'll see in the code above that we're invoking `recorder.stop`. This is so that, after each test, we can stop recording and the test file can be generated.\n\n- We recommend instantiating/starting the new recorder in the `beforeEach` block and stopping the recorder on `afterEach` to make sure that the generated files are smaller and easier to understand than by having them all in one chunk.\n\n### Securing Sensitive Data\n\nLive tests need to do sensitive operations, like authenticating with your Azure endpoints, keys, secrets, etc. These are generally contained in the environment variables which are used as part of the tests.\n\nWe must secure them and not let them leak into our recordings. To avoid storing the sensitive info in the recordings, we use the sanitizers to mask the values with the fake ones or remove them, `RecorderStartOptions` helps us here.\n\n#### `RecorderStartOptions`\n\n`RecorderStartOptions` has two components, `envSetupForPlayback` and the `sanitizers` which you'd have seen in the previous snippet.\n\nFor a live test to be run, we typically need the test secrets, which are usally stored as Environment variables.\n\nAnd since in playback mode, the requests don't reach the service, we don't actually need to have/share the test secrets to run the tests in playback mode.\n\nAnother angle to this is that the recordings store the requests, which would contain the sensitive information related to the endpoints, tokens, keys, secrets, credentials, etc that are parts of the supposedly secretive environment variables or derivatives of them.\n\nWe try our best to make sure the sensitive information is not leaked anywhere with the help of `envSetupForPlayback` and `Sanitizers`.\n\n#### `envSetupForPlayback`\n\n`envSetupForPlayback` expects key-value pairs, with keys signifying the names of the environment variables, and the values would be the fake ones that you'd like to map/swap the originals with.\n\n```js\n  envSetupForPlayback: {\n    TABLES_URL: \"https://fakeaccount.table.core.windows.net\",\n  }\n```\n\nUsed in record and playback modes. No effect in live mode.\n\n- The key-value pairs will be used as the environment variables in playback mode.\n- If the environment variables are present in the recordings as plain strings, they will be replaced with the provided values in record mode.\n\n#### `Sanitizers`\n\n| Sanitizers                  | How does it look? Example??                                                                                                                                                     | What does it do|\n| :-------------------------- | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ ||\n| `generalSanitizer`          | `{ regex: true, target: \"abc+def\", value: \"fakeValue\" }`                                                                                                                        | Offers a general regex replace across request/response Body, Headers, and URI. For the body, this means regex applying to the raw|\n| `bodySanitizer`             | `{ regex: true, target: \"(.*)&SECRET=(?<secret_content>[^&]*)&(.*)\", value: fakeSecretValue, groupForReplace: \"secret_content\" }`                                               | Offers regex replace within a returned body. Specifically, this means regex applying to the raw JSON. If you are attempting to simply replace a specific key, the `bodyKeySanitizer` is probably the way to go.                                                                                                                                                                                                                                                                                                                                                                                                                                            |\n| `headerSanitizer`           | `{ key: \"your_uuid\", value: sanitizedValue }`                                                                                                                                   | Can be used for multiple purposes:<br/>1) To replace a key with a specific value, do not set \"regex\" value.<br/>2) To do a simple regex replace operation, define arguments \"key\", \"value\", and \"regex\"<br/>3) To do a targeted substitution of a specific group, define all arguments \"key\", \"value\", and \"regex\"                                                                                                                                                                                                                                                                                                                                         |\n| `uriSanitizer`              | `{ target: secretEndpoint, value: fakeEndpoint}`                                                                                                                                | General use sanitizer for cleaning URIs via regex. Runs a regex replace on the member of your choice|\n| `connectionStringSanitizer` | `{`<br/> `actualConnString: env.TABLES_CONN_STRING,` <br/>`fakeConnString: \"Endpoint=https://fakeaccountname.net/;SharedAccessSignature=st=2021-08-03&sig=fakesigval\"` <br/>`}` | Internally, <br/>- connection strings are parsed and<br/>- each part of the connection string is mapped with its corresponding fake value<br/>- `generalRegexSanitizer` is applied for each of the parts with the real and fake values that are parsed                                                                                                                                                                                                                                                                                                                                                                                                     |\n| `bodyKeySanitizer`          | `{ jsonPath: \"$.bodyProvided.secret_info\", regex: secretValue, value: fakeSecretValue }`                                                                                        | This sanitizer offers regex update of a specific JTokenPath.<br/><br/> EG: \"TableName\" within a json response body having its value replaced by whatever substitution is offered.<br/> This simply means that if you are attempting to replace a specific key wholesale, this sanitizer will be simpler<br/> than configuring a BodyRegexSanitizer that has to match against the full \"KeyName\": \"Value\" that is part of the json structure.<br/><br/> Further reading is available [here](https://www.newtonsoft.com/json/help/html/SelectToken.htm#SelectTokenJSONPath).<br/><br/> If the body is NOT a JSON object, this sanitizer will NOT be applied. |\n| `removeHeaderSanitizer`     | `{ headersForRemoval: [\"X-Content-Type-Options\"] }`                                                                                                                             | A simple sanitizer that should be used to clean out one or multiple headers by their key. Removes headers from before saving a recording.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  |\n| `resetSanitizer`            | `true`                                                                                                                                                                          | This clears the sanitizers that are added|\n\nSanitizers can be added in two different ways.\n\n1. Pass them as part of the `recorder.start({ envSetupForPlayback, sanitizerOptions })` call. Sanitizers are applied on the recordings in record mode before they are saved.\n2. Call `recorder.addSanitizers(sanitizerOptions, [\"record\", \"playback\"])`. This way, the same sanitizer would be applied in both record and playback modes.\n\n### How to playback\n\nOnce you have recorded something, you can run your tests again with `TEST_MODE` set to `playback`.\n\nYou'll notice how the tests succeed much faster. That's because the requests don't reach the service endpoints, the recorder assisted by the test-proxy tool will respond every request with their matching copy stored in the recordings.\n\n### Update existing recordings\n\nOnce you have your recorded files, to update them after changing one of the tests, simply re-run the tests with `TEST_MODE` set to `record`. This will override previously existing files.\n\n> **Note:** If you rename the file of the test, or the name of the test, the\n> path of the recording will change. Make sure to delete the recordings\n> corresponding to the deleted tests. If at any point in time you lose your\n> recordings, don't worry. Running your tests with `TEST_MODE=record` will\n> re-generate them.\n\n### Skipping tests\n\nWriting live tests can take considerable time, specially since each time you want to check that everything works fine, you potentially need to run again every test. You can specify what test to run by following Mocha's approach of setting certain tests to `it.only`, and also to skip specific tests with `it.skip`.\n\nIf you launch the `recorder` in record mode with some of these changes (and given that you activate the recorder on `beforeEach`), only the files that relate to the changed tests will be updated. Skipped tests won't update their recordings.\n\nThis way, you can focus on fixing a specific set of tests with `.only`, then remove all the `.only` calls and trust that the playback will keep confirming that the unaffected tests are fine and green.\n\nYou can also skip specific tests with the following.\n\n```js\nimport { isLiveMode } from \"@azure-tools/test-recorder\";\n\nit(\"test-title\", function (this: Mocha.Context) {\n  // isPlaybackMode() and isRecordMode() methods are also available from recorder.\n  if (!isLiveMode()) this.skip(); // This skips the test in record and playback modes\n  // Test goes here...\n  // ...\n});\n```\n\n### Supporting parallelism\n\nA common issue while running integration tests is that, sometimes two individuals or machines might try to run the same set of tests against the same resource.\n\nThis is not directly related to the `@azure-tools/test-recorder` package, but if you're getting into issues because of concurrent conflicting requests, we strongly suggest using randomly generated strings as prefixes or suffixes for the resources you create.\n\nRefer to [Recorder#variable()](#recordervariable) section to handle the dynamic/generated values for testing that are created as part of the tests, to make sure the requests in the `playback` mode match the ones in the `record` mode.\n\nSince new resources are likely to get accumulated because some tests would crash or fail for any reason, make sure you delete the resources that are not cleared.\n\n### Isomorphic tests\n\n`@azure/test-utils-recorder` does support running tests in the browser. If you use Karma, as long as your karma configuration is correct, your tests should work both on NodeJS and in the browsers!\n\n### Troubleshooting\n\nBesides the usual debugging of your code and tests, if you ever encounter a problem while recording your tests, make sure to read the output in the recordings. If the output is not what you expected, please follow up the [contributing](#contributing) guidelines on how to write an issue for us. We'll make sure to handle it as soon as we find the time.\n\nIf you run into issues while running the tests in record/playback modes, some of the following troubleshooting steps may help:\n\n#### Viewing test proxy log output\n\n`dev-tool` by default outputs logs from the test proxy to `test-proxy-output.log` in your package's root directory. These logs can be inspected to see what requests were made to the proxy tool.\n\n#### Switching ports\nIf port 5000 is already being used in your machine, you can specify the environment variable `TEST_PROXY_HTTP_PORT` and point to the port number that you wish. (Example, `export TEST_PROXY_HTTP_PORT=2345`)\n\n### Inspecting recordings\nRefer to [asset sync workflow - inspect recordings](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/test-utils/recorder/ASSET_SYNC_MIGRATION.md#inspecting-recordings-with-asset-sync-enabled).\n\n### Next steps\n\nAlmost all the libraries in the `azure-sdk-for-js` repository leverage test-recorder(v3.0). \nIf you want to refer to the tests that leverage this package, go through the following search link:\n<https://github.com/Azure/azure-sdk-for-js/search?q=test-recorder>\n\n### Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/master/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see logs from the recorder client, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling the `setLogLevel` function in the `@azure/logger` package.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Ftest-utils%2Frecorder%2FREADME.png)\n",
        "repo_name": "test-utils/recorder",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/test-utils/recorder",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Tools - Test Credential\n\n**Note: This project is a test utility that assits with testing the packages maintained at the Azure SDK for JavaScript repository. This is not intended for the public utilization.**\n\nThis library provides a `TokenCredential` implementation for testing Azure SDK packages. This library is supposed to be utilized along with the `@azure-tools/test-recorder` library for testing Azure SDKs.\n\n## Getting started\n\n### Installation\n\nAdd this library as a dev dependency in your project.\n\n> rush add -p @azure-tools/test-credential --dev\n\n## Key concepts\n\n### Usage\n\n```ts\nimport { createTestCredential } from \"@azure-tools/test-credential\";\n\nconst credential = createTestCredential();\n```\n\nThis library provides the credential to be used in the tests\n\nIn playback mode\n\n- returns a `NoOpCredential` (does not make a request to AAD and produces a fake access_token)\n\nIn record/live modes\n\n- returns a `ClientSecretCredential` from `@azure/identity` (expects AZURE_TENANT_ID, AZURE_CLIENT_ID, AZURE_CLIENT_SECRET in your environment or in the .env file)\n- AAD traffic won't be recorded if this credential is used.\n\n## Next steps\n\nTry out this package in your application and provide feedback!\n\n## Troubleshooting\n\nLog an issue at https://github.com/Azure/azure-sdk-for-js/issues\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Ftest-utils%2Ftest-credential%2FREADME.png)\n",
        "repo_name": "test-utils/test-credential",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/test-utils/test-credential",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure test-utils client library for JavaScript\n\nThe Azure SDK for JavaScript is composed of a multitude of repositories that attempt to deliver a common, homogenous SDK to make use of all the services that Azure can provide.\n\nThis non-shipping library `@azure/test-utils` attempts to add additional testing support to libraries. It is supposed to be added only as a devDependency and should be used only for the tests of an SDK library.\n\n## Getting started\n\nWe're about to go through how to set up your project to use the `@azure/test-utils` package.\n\nThis document assumes familiarity with [git](https://git-scm.com) and [rush](https://rushjs.io).\nYou can read more about how we use rush in the following links:\n\n- Rush used for [Project Orchestration](https://github.com/sadasant/azure-sdk-for-js/blob/master/CONTRIBUTING.md#project-orchestration).\n- [Rush for NPM users](https://github.com/sadasant/azure-sdk-for-js/blob/master/CONTRIBUTING.md#rush-for-npm-users).\n\nKeep in mind that `@azure/test-utils` is not a published package. It is only intended\nto be used by the libraries in the `azure-sdk-for-js` repository.\n\n### Installing the package\n\nTo install the `@azure/test-utils` package, you'll need to start by cloning our\n`azure-sdk-for-js` repository. One way of doing this is by using the git command line interface, as\nfollows:\n\n```bash\ncd /path/to/my/github/repositories\ngit clone https://github.com/Azure/azure-sdk-for-js/\n```\n\nHaving cloned this repository, let's set it up by running the following rush commands:\n\n```bash\ncd azure-sdk-for-js\nrush update\nrush install\nrush build\n```\n\nThis will optimistically assume you're in a fresh clone.\n\nFrom this point forward, we'll assume that you're developing (perhaps contributing!) to one of the\n`azure-sdk-for-js`'s libraries. So, your next step is to change directory to the path relevant to\nyour project. Let's say you want to add the `@azure/test-utils` package to\n`@azure/keyvault-keys`, you'll be doing the following:\n\n```bash\ncd sdk/keyvault/keyvault-keys\n```\n\nOnce there, you can add the `test-utils` package by changing your package.json\nto include the following line in the `devDependencies` section:\n\n```bash\n{\n  // ... your package.json properties\n  \"devDependencies\": {\n    // ... your devDependencies\n    \"@azure/test-utils\": \"^1.0.0\",\n    // ... more of your devDependencies\n  },\n  // ... more of your package.json properties\n}\n```\n\nAfter that, we recommend you to update rush and install the dependencies again, as follows:\n\n```bash\nrush update\n```\n\n## Key concepts\n\n### Multi-version Testing\n\nOne of the promises of the modern Azure SDK libraries is to support the last N service API versions. `@azure/test-utils` attempts to add testing support for\nlibraries that support multiple service API versions. The idea employed in this library is inspired by [mocha-tags](https://www.npmjs.com/package/mocha-tags).\n\n- Our guideline recommends that service client supporting multiple service API version takes an API\n  version via the `serviceVersion` property of its constructor options bag `*ClientOptions`.\n- Service API versions supported by the SDK library under test is specified for a top-level Mocha\n  `describe()` test suite. We loop through them and run the test suite on each version.\n  - Testing of multi-service-version support is only done in `live` test mode. For other test modes\n    (`record`, `soft-record`, and `playback`), tests are only running for the latest version, or a\n    chosen version specified via options in case the latest version is not the latest stable version.\n- Optionally a list or range of versions can be specified for a nested `describe()` test suite or\n  `it()` test case. If the version being tested is not in the range of versions supported by this\n  test suite/case, then the test suite/case is skipped.\n\n### Custom Testing Matrix\n\nMost Azure SDK for JavaScript libraries support multiple methods of authentication. The `@azure/test-utils` library attempts to add testing support for writing a single test suite then running your suite multiple times based on a provided testing matrix. The most common usage is to construct your client with a different authentication method for test runs.\n\n## Examples\n\n### Import functions\n\n```javascript\nimport { versionsToTest } from \"@azure/test-utils\";\n```\n\n### Wrap top-level test suite to test multiple versions\n\nWrap a top level `describe()` of a test file to enable testing for multiple versions for that test suite:\n\n```javascript\nconst serviceApiVersions = [\"7.0\", \"7.1\"] as const;\nversionsToTest(serviceApiVersions, {}, (serviceVersion, onVersions) => {\n  describe(\"Keys client - list keys in various ways\", async function() {\n   // ...\n  }\n}\n```\n\n`versionsToTest()` takes in a list of versions that are supported by the library. it checks the\ncurrent `TEST_MODE` then either runs tests for all supported versions in `live` test mode, or runs\ntests for just one version (default version if specified in options, or latest version in the list)\nin other test modes. The top-level test suites, as well as nested test suites/test cases have access\nto the current version being tested - `serviceVersion` - so they can verify different\nbehavior/expectation if any for different service API versions.\n\nThe code to construct clients for testing also needs an update to pass the `serviceVersion` to\nclient constructors.\n\n```javascript\nconst testClient = await new TestClient(this, serviceVersion);\n```\n\nIf all your tests can run across all supported service API versions then this is all you need to do.\n\n### Override supported versions for tests\n\nBy default, a test suite or test case is executed against each `serviceVersion`. Optionally one can\nalso use `onVersions()` to specify a list (`ReadOnlyArray<string>`) or a range (`{minVer?: string, maxVer?: string }`) of supported versions for selected test suites or test cases:\n\n```javascript\n// Test author must ensure the list of versions are ordered from oldest to latest.\nconst serviceApiVersions = [\"7.0\", \"7.1\"] as const;\nversionsToTest(serviceApiVersions, {}, (serviceVersion, onVersions) => {\n// ...\n  onVersions([\"7.1\"]).describe(\n    \"Test suite that only runs for service version 7.1\",\n    async function() {\n      it(\"some test case\", async function() {\n        // ...\n      });\n    }\n  );\n  // ...\n})\n```\n\nWhen running in the `live` test mode,\n\n- with `onVersions(...).` prepended to `describe()` or `it()`, the multi-version test framework would\n  check the current `serviceVersion` against the supported versions of the test suite/test case. If\n  a test case is skipped, the skip reason is also appended to the title of that test suite or test\n  case.tests will be executed or skipped accordingly.\n- without `onVersions(...).`, original Mocha `describe()` and `it()` methods are used.\n\nHere's some sample output (for demo purpose, not from real keyvault test runs):\n\n```bash\n  Keys client - list keys in various ways (service version 7.0)\n    - can purge all keys\n    \u221a can get the versions of a key (4095ms)\nname: AbortError, message: The operation was aborted.\n    \u221a can get the versions of a key with requestOptions timeout\n    \u221a can get the versions of a key (paged) (5905ms)\n    - list 0 versions of a non-existing key (Skipping for version 7.0 as it is not in the range: [min 7.1, max <unspecified>])\n    \u221a list 0 versions of a non-existing key (paged) (469ms)\n    \u221a can get several inserted keys (12636ms)\nname: AbortError, message: The operation was aborted.\n    \u221a can get several inserted keys with requestOptions timeout\n    \u221a can get several inserted keys (paged) (14693ms)\n    \u221a list deleted keys (11593ms)\nname: AbortError, message: The operation was aborted.\n    \u221a list deleted keys with requestOptions timeout\n    \u221a list deleted keys (paged) (13791ms)\n\n  Keys client - list keys in various ways (service version 7.1)\n    - can purge all keys\n    \u221a can get the versions of a key (6101ms)\nname: AbortError, message: The operation was aborted.\n    \u221a can get the versions of a key with requestOptions timeout\n    - can get the versions of a key (paged) (Skipping for version 7.1 as it is not in the list [7.0])\n    \u221a list 0 versions of a non-existing key (562ms)\n    \u221a list 0 versions of a non-existing key (paged) (525ms)\n    \u221a can get several inserted keys (11732ms)\nname: AbortError, message: The operation was aborted.\n    \u221a can get several inserted keys with requestOptions timeout\n    \u221a can get several inserted keys (paged) (11952ms)\n    \u221a list deleted keys (14316ms)\nname: AbortError, message: The operation was aborted.\n    \u221a list deleted keys with requestOptions timeout\n    \u221a list deleted keys (paged) (13217ms)\n```\n\n### Specify service version to use in recording/playback\n\nMost of time we run record/playback using the latest version. There may be occasions when another\nversion is desired (e.g., when the latest is a beta version and we want playback tests to test the\nstable version). We can specify a version via `MultiVersionTestOptions` passed to\n`versionsToTest()` method:\n\n```javascript\nversionsToTest(\n  [\"7.0\", \"7.1\", \"7.2-preview\"],\n  { versionForRecording: \"7.1\" },\n  (serviceVersion, onVersions) => {\n    // ...\n  }\n);\n```\n\n### Disable multi-version testing via environment variable\n\nRunning live tests against multiple service versions takes more time than running against a single service version. It may be desirable to only test multiple service version in non-nightly build pipelines, for example, weekly runs with a higher timeout limit. An environment variable `DISABLE_MULTI_VERSION_TESTING` is introduced to disable live testing against multiple service versions when it is set.\n\n### Wrap top-level test suite to run test matrix\n\nWrap the top level `describe` of a test file to run the suite with the provided values.\n\n```typescript\nmatrix(\n  [\n    [true, false],\n    [1, 2, 3]\n  ] as const,\n  (enabled: boolean, attempts: number) => {\n    describe(`Run with flag ${enabled ? \"\" : \"not \"}enabled and ${attempts} attempts`, () => {\n      // ...\n    });\n  }\n);\n```\n\n`matrix` takes a jagged 2D array and a function. It then runs this function with every possible combination of elements of each of the arrays. The example above will therefore generate 6 different test suites based on the values passed.\n\n## Troubleshooting\n\nBesides the usual debugging of your code and tests, if you ever encounter a problem, please follow\nup the [contributing](#contributing) guidelines on how to write an issue for us. We'll make sure to\nhandle it as soon as we find the time.\n\n## Next steps\n\nCheck out the [source folder](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/test-utils/test-utils/src/) and the [test folder](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/test-utils/test-utils/test/).\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Ftest-utils%2Fmulti-version%2FREADME.png)\n",
        "repo_name": "test-utils/test-utils",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/test-utils/test-utils",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Text Analytics client library for JavaScript\n\n[Azure Text Analytics](https://azure.microsoft.com/services/cognitive-services/text-analytics/) is a cloud-based service that provides advanced natural language processing over raw text, and includes six main functions:\n\n**Note:** This SDK targets Azure Text Analytics service API version 3.1.0.\n\n- Language Detection\n- Sentiment Analysis\n- Key Phrase Extraction\n- Named Entity Recognition\n- Recognition of Personally Identifiable Information\n- Linked Entity Recognition\n- Healthcare Analysis\n- Support Multiple Actions Per Document\n\nUse the client library to:\n\n- Detect what language input text is written in.\n- Determine what customers think of your brand or topic by analyzing raw text for clues about positive or negative sentiment.\n- Automatically extract key phrases to quickly identify the main points.\n- Identify and categorize entities in your text as people, places, organizations, date/time, quantities, percentages, currencies, healthcare specific, and more.\n- Perform multiple of the above tasks at once.\n\nKey links:\n\n- [Source code](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/textanalytics/ai-text-analytics/)\n- [Package (NPM)](https://www.npmjs.com/package/@azure/ai-text-analytics)\n- [API reference documentation](https://docs.microsoft.com/javascript/api/@azure/ai-text-analytics)\n- [Product documentation](https://docs.microsoft.com/azure/cognitive-services/text-analytics/)\n- [Samples](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/textanalytics/ai-text-analytics/samples)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge, and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n- An existing [Cognitive Services][cognitive_resource] or Text Analytics resource. If you need to create the resource, you can use the [Azure Portal][azure_portal] or [Azure CLI][azure_cli].\n\nIf you use the Azure CLI, replace `<your-resource-group-name>` and `<your-resource-name>` with your own unique names:\n\n```PowerShell\naz cognitiveservices account create --kind TextAnalytics --resource-group <your-resource-group-name> --name <your-resource-name> --sku <your-sku-name> --location <your-location>\n```\n\n### Install the `@azure/ai-text-analytics` package\n\nInstall the Azure Text Analytics client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/ai-text-analytics\n```\n\n### Create and authenticate a `TextAnalyticsClient`\n\nTo create a client object to access the Text Analytics API, you will need the `endpoint` of your Text Analytics resource and a `credential`. The Text Analytics client can use either Azure Active Directory credentials or an API key credential to authenticate.\n\nYou can find the endpoint for your Text Analytics resource either in the [Azure Portal][azure_portal] or by using the [Azure CLI][azure_cli] snippet below:\n\n```bash\naz cognitiveservices account show --name <your-resource-name> --resource-group <your-resource-group-name> --query \"endpoint\"\n```\n\n#### Using an API Key\n\nUse the [Azure Portal][azure_portal] to browse to your Text Analytics resource and retrieve an API key, or use the [Azure CLI][azure_cli] snippet below:\n\n**Note:** Sometimes the API key is referred to as a \"subscription key\" or \"subscription API key.\"\n\n```PowerShell\naz cognitiveservices account keys list --resource-group <your-resource-group-name> --name <your-resource-name>\n```\n\nOnce you have an API key and endpoint, you can use the `AzureKeyCredential` class to authenticate the client as follows:\n\n```javascript\nconst { TextAnalyticsClient, AzureKeyCredential } = require(\"@azure/ai-text-analytics\");\n\nconst client = new TextAnalyticsClient(\"<endpoint>\", new AzureKeyCredential(\"<API key>\"));\n```\n\n#### Using an Azure Active Directory Credential\n\nClient API key authentication is used in most of the examples, but you can also authenticate with Azure Active Directory using the [Azure Identity library][azure_identity]. To use the [DefaultAzureCredential][defaultazurecredential] provider shown below,\nor other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to [register a new AAD application][register_aad_app] and grant access to Text Analytics by assigning the `\"Cognitive Services User\"` role to your service principal (note: other roles such as `\"Owner\"` will not grant the necessary permissions, only `\"Cognitive Services User\"` will suffice to run the examples and the sample code).\n\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\n```javascript\nconst { TextAnalyticsClient } = require(\"@azure/ai-text-analytics\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n\nconst client = new TextAnalyticsClient(\"<endpoint>\", new DefaultAzureCredential());\n```\n\n## Key concepts\n\n### TextAnalyticsClient\n\n`TextAnalyticsClient` is the primary interface for developers using the Text Analytics client library. Explore the methods on this client object to understand the different features of the Text Analytics service that you can access.\n\n### Input\n\nA **document** represents a single unit of input to be analyzed by the predictive models in the Text Analytics service. Operations on `TextAnalyticsClient` take a collection of inputs to be analyzed as a batch. The operation methods have overloads that allow the inputs to be represented as strings, or as objects with attached metadata.\n\nFor example, each document can be passed as a string in an array, e.g.\n\n```typescript\nconst documents = [\n  \"I hated the movie. It was so slow!\",\n  \"The movie made it into my top ten favorites.\",\n  \"What a great movie!\",\n];\n```\n\nor, if you wish to pass in a per-item document `id` or `language`/`countryHint`, they can be given as a list of `TextDocumentInput` or `DetectLanguageInput` depending on the operation;\n\n```javascript\nconst textDocumentInputs = [\n  { id: \"1\", language: \"en\", text: \"I hated the movie. It was so slow!\" },\n  { id: \"2\", language: \"en\", text: \"The movie made it into my top ten favorites.\" },\n  { id: \"3\", language: \"en\", text: \"What a great movie!\" },\n];\n```\n\nSee [service limitations][data_limits] for the input, including document length limits, maximum batch size, and supported text encodings.\n\n### Return Value\n\nThe return value corresponding to a single document is either a successful result or an error object. Each `TextAnalyticsClient` method returns a heterogeneous array of results and errors that correspond to the inputs by index. A text input and its result will have the same index in the input and result collections. The collection may also optionally include information about the input batch and how it was processed in the `statistics` field.\n\nAn **result**, such as `AnalyzeSentimentResult`, is the result of a Text Analytics operation, containing a prediction or predictions about a single text input. An operation's result type also may optionally include information about the input document and how it was processed.\n\nThe **error** object, `TextAnalyticsErrorResult`, indicates that the service encountered an error while processing the document and contains information about the error.\n\n### Document Error Handling\n\nIn the collection returned by an operation, errors are distinguished from successful responses by the presence of the `error` property, which contains the inner `TextAnalyticsError` object if an error was encountered. For successful result objects, this property is _always_ `undefined`.\n\nFor example, to filter out all errors, you could use the following `filter`:\n\n```javascript\nconst results = await client.analyzeSentiment(documents);\nconst onlySuccessful = results.filter((result) => result.error === undefined);\n```\n\n**Note**: TypeScript users can benefit from better type-checking of result and error objects if `compilerOptions.strictNullChecks` is set to `true` in the `tsconfig.json` configuration. For example:\n\n```typescript\nconst [result] = await client.analyzeSentiment([\"Hello world!\"]);\n\nif (result.error !== undefined) {\n  // In this if block, TypeScript will be sure that the type of `result` is\n  // `TextAnalyticsError` if compilerOptions.strictNullChecks is enabled in\n  // the tsconfig.json\n\n  console.log(result.error);\n}\n```\n\nThis capability was introduced in TypeScript 3.2, so users of TypeScript 3.1 must cast result values to their corresponding success variant as follows:\n\n```typescript\nconst [result] = await client.detectLanguage([\"Hello world!\"]);\n\nif (result.error === undefined) {\n  const { primaryLanguage } = result as DetectLanguageSuccessResult;\n}\n```\n\n## Examples\n\n### Analyze Sentiment\n\nAnalyze sentiment of text to determine if it is positive, negative, neutral, or mixed, including per-sentence sentiment analysis and confidence scores.\n\n```javascript\nconst { TextAnalyticsClient, AzureKeyCredential } = require(\"@azure/ai-text-analytics\");\n\nconst client = new TextAnalyticsClient(\"<endpoint>\", new AzureKeyCredential(\"<API key>\"));\n\nconst documents = [\n  \"I did not like the restaurant. The food was too spicy.\",\n  \"The restaurant was decorated beautifully. The atmosphere was unlike any other restaurant I've been to.\",\n  \"The food was yummy. :)\",\n];\n\nasync function main() {\n  const results = await client.analyzeSentiment(documents);\n\n  for (const result of results) {\n    if (result.error === undefined) {\n      console.log(\"Overall sentiment:\", result.sentiment);\n      console.log(\"Scores:\", result.confidenceScores);\n    } else {\n      console.error(\"Encountered an error:\", result.error);\n    }\n  }\n}\n\nmain();\n```\n\nTo get more granular information about the opinions related to aspects of a product/service, also known as Aspect-based Sentiment Analysis in Natural Language Processing (NLP), see a sample on sentiment analysis with opinion mining [here][analyze_sentiment_opinion_mining_sample].\n\n### Recognize Entities\n\nRecognize and categorize entities in text as people, places, organizations, dates/times, quantities, currencies, etc.\n\nThe `language` parameter is optional. If it is not specified, the default English model will be used.\n\n```javascript\nconst { TextAnalyticsClient, AzureKeyCredential } = require(\"@azure/ai-text-analytics\");\n\nconst client = new TextAnalyticsClient(\"<endpoint>\", new AzureKeyCredential(\"<API key>\"));\n\nconst documents = [\n  \"Microsoft was founded by Bill Gates and Paul Allen.\",\n  \"Redmond is a city in King County, Washington, United States, located 15 miles east of Seattle.\",\n  \"Jeff bought three dozen eggs because there was a 50% discount.\",\n];\n\nasync function main() {\n  const results = await client.recognizeEntities(documents, \"en\");\n\n  for (const result of results) {\n    if (result.error === undefined) {\n      console.log(\" -- Recognized entities for input\", result.id, \"--\");\n      for (const entity of result.entities) {\n        console.log(entity.text, \":\", entity.category, \"(Score:\", entity.confidenceScore, \")\");\n      }\n    } else {\n      console.error(\"Encountered an error:\", result.error);\n    }\n  }\n}\n\nmain();\n```\n\n### Recognize PII Entities\n\nThere is a separate endpoint and operation for recognizing Personally Identifiable Information (PII) in text such as Social Security Numbers, bank account information, credit card numbers, etc. Its usage is very similar to the standard entity recognition above:\n\n```javascript\nconst { TextAnalyticsClient, AzureKeyCredential } = require(\"@azure/ai-text-analytics\");\nconst client = new TextAnalyticsClient(\"<endpoint>\", new AzureKeyCredential(\"<API key>\"));\nconst documents = [\n  \"The employee's SSN is 555-55-5555.\",\n  \"The employee's phone number is (555) 555-5555.\",\n];\nasync function main() {\n  const results = await client.recognizePiiEntities(documents, \"en\");\n  for (const result of results) {\n    if (result.error === undefined) {\n      console.log(\" -- Recognized PII entities for input\", result.id, \"--\");\n      for (const entity of result.entities) {\n        console.log(entity.text, \":\", entity.category, \"(Score:\", entity.confidenceScore, \")\");\n      }\n    } else {\n      console.error(\"Encountered an error:\", result.error);\n    }\n  }\n}\nmain();\n```\n\n### Recognize Linked Entities\n\nA \"Linked\" entity is one that exists in a knowledge base (such as Wikipedia). The `recognizeLinkedEntities` operation can disambiguate entities by determining which entry in a knowledge base they likely refer to (for example, in a piece of text, does the word \"Mars\" refer to the planet, or to the Roman god of war). Linked entities contain associated URLs to the knowledge base that provides the definition of the entity.\n\n```javascript\nconst { TextAnalyticsClient, AzureKeyCredential } = require(\"@azure/ai-text-analytics\");\n\nconst client = new TextAnalyticsClient(\"<endpoint>\", new AzureKeyCredential(\"<API key>\"));\n\nconst documents = [\n  \"Microsoft was founded by Bill Gates and Paul Allen.\",\n  \"Easter Island, a Chilean territory, is a remote volcanic island in Polynesia.\",\n  \"I use Azure Functions to develop my product.\",\n];\n\nasync function main() {\n  const results = await client.recognizeLinkedEntities(documents, \"en\");\n\n  for (const result of results) {\n    if (result.error === undefined) {\n      console.log(\" -- Recognized linked entities for input\", result.id, \"--\");\n      for (const entity of result.entities) {\n        console.log(entity.name, \"(URL:\", entity.url, \", Source:\", entity.dataSource, \")\");\n        for (const match of entity.matches) {\n          console.log(\n            \"  Occurrence:\",\n            '\"' + match.text + '\"',\n            \"(Score:\",\n            match.confidenceScore,\n            \")\"\n          );\n        }\n      }\n    } else {\n      console.error(\"Encountered an error:\", result.error);\n    }\n  }\n}\n\nmain();\n```\n\n### Extract Key Phrases\n\nKey Phrase extraction identifies the main talking points in a document. For example, given input text \"The food was delicious and there were wonderful staff\", the service returns \"food\" and \"wonderful staff\".\n\n```javascript\nconst { TextAnalyticsClient, AzureKeyCredential } = require(\"@azure/ai-text-analytics\");\n\nconst client = new TextAnalyticsClient(\"<endpoint>\", new AzureKeyCredential(\"<API key>\"));\n\nconst documents = [\n  \"Redmond is a city in King County, Washington, United States, located 15 miles east of Seattle.\",\n  \"I need to take my cat to the veterinarian.\",\n  \"I will travel to South America in the summer.\",\n];\n\nasync function main() {\n  const results = await client.extractKeyPhrases(documents, \"en\");\n\n  for (const result of results) {\n    if (result.error === undefined) {\n      console.log(\" -- Extracted key phrases for input\", result.id, \"--\");\n      console.log(result.keyPhrases);\n    } else {\n      console.error(\"Encountered an error:\", result.error);\n    }\n  }\n}\n\nmain();\n```\n\n### Detect Language\n\nDetermine the language of a piece of text.\n\nThe `countryHint` parameter is optional, but can assist the service in providing correct output if the country of origin is known. If provided, it should be set to an ISO-3166 Alpha-2 two-letter country code (such as \"us\" for the United States or \"jp\" for Japan) or to the value `\"none\"`. If the parameter is not provided, then the default `\"us\"` (United States) model will be used. If you do not know the country of origin of the document, then the parameter `\"none\"` should be used, and the Text Analytics service will apply a model that is tuned for an unknown country of origin.\n\n```javascript\nconst { TextAnalyticsClient, AzureKeyCredential } = require(\"@azure/ai-text-analytics\");\n\nconst client = new TextAnalyticsClient(\"<endpoint>\", new AzureKeyCredential(\"<API key>\"));\n\nconst documents = [\n  \"This is written in English.\",\n  \"Il documento scritto in italiano.\",\n  \"Dies ist in deutscher Sprache verfasst.\",\n];\n\nasync function main() {\n  const results = await client.detectLanguage(documents, \"none\");\n\n  for (const result of results) {\n    if (result.error === undefined) {\n      const { primaryLanguage } = result;\n      console.log(\n        \"Input #\",\n        result.id,\n        \"identified as\",\n        primaryLanguage.name,\n        \"( ISO6391:\",\n        primaryLanguage.iso6391Name,\n        \", Score:\",\n        primaryLanguage.confidenceScore,\n        \")\"\n      );\n    } else {\n      console.error(\"Encountered an error:\", result.error);\n    }\n  }\n}\n\nmain();\n```\n\n### Analyze Healthcare Entities\n\nHealthcare analysis identifies healthcare entities. For example, given input text \"Prescribed 100mg ibuprofen, taken twice daily\", the service returns \"100mg\" categorized as Dosage, \"ibuprofen\" as MedicationName, and \"twice daily\" as Frequency.\n\n```javascript\nconst { TextAnalyticsClient, AzureKeyCredential } = require(\"@azure/ai-text-analytics\");\n\nconst client = new TextAnalyticsClient(\"<endpoint>\", new AzureKeyCredential(\"<API key>\"));\n\nconst documents = [\n  \"Prescribed 100mg ibuprofen, taken twice daily.\",\n  \"Patient does not suffer from high blood pressure.\",\n];\n\nasync function main() {\n  const poller = await client.beginAnalyzeHealthcareEntities(documents);\n  const results = await poller.pollUntilDone();\n\n  for await (const result of results) {\n    console.log(`- Document ${result.id}`);\n    if (!result.error) {\n      console.log(\"\\tRecognized Entities:\");\n      for (const entity of result.entities) {\n        console.log(`\\t- Entity ${entity.text} of type ${entity.category}`);\n      }\n    } else console.error(\"\\tError:\", result.error);\n  }\n}\n\nmain();\n```\n\n### Analyze Actions\n\nAnalyze actions enables the application of multiple analyses (named actions) at once.\n\n```javascript\nconst { TextAnalyticsClient, AzureKeyCredential } = require(\"@azure/ai-text-analytics\");\n\nconst client = new TextAnalyticsClient(\"<endpoint>\", new AzureKeyCredential(\"<API key>\"));\n\nconst documents = [\n  \"Microsoft was founded by Bill Gates and Paul Allen.\",\n  \"The employee's SSN is 555-55-5555.\",\n  \"Easter Island, a Chilean territory, is a remote volcanic island in Polynesia.\",\n  \"I use Azure Functions to develop my product.\",\n];\n\nasync function main() {\n  const actions = {\n    recognizeEntitiesActions: [{ modelVersion: \"latest\" }],\n    recognizePiiEntitiesActions: [{ modelVersion: \"latest\" }],\n    extractKeyPhrasesActions: [{ modelVersion: \"latest\" }],\n  };\n  const poller = await client.beginAnalyzeActions(documents, actions);\n  const resultPages = await poller.pollUntilDone();\n  for await (const page of resultPages) {\n    const keyPhrasesAction = page.extractKeyPhrasesResults[0];\n    if (!keyPhrasesAction.error) {\n      for (const doc of keyPhrasesAction.results) {\n        console.log(`- Document ${doc.id}`);\n        if (!doc.error) {\n          console.log(\"\\tKey phrases:\");\n          for (const phrase of doc.keyPhrases) {\n            console.log(`\\t- ${phrase}`);\n          }\n        } else {\n          console.error(\"\\tError:\", doc.error);\n        }\n      }\n    }\n\n    const entitiesAction = page.recognizeEntitiesResults[0];\n    if (!entitiesAction.error) {\n      for (const doc of entitiesAction.results) {\n        console.log(`- Document ${doc.id}`);\n        if (!doc.error) {\n          console.log(\"\\tEntities:\");\n          for (const entity of doc.entities) {\n            console.log(`\\t- Entity ${entity.text} of type ${entity.category}`);\n          }\n        } else {\n          console.error(\"\\tError:\", doc.error);\n        }\n      }\n    }\n\n    const piiEntitiesAction = page.recognizePiiEntitiesResults[0];\n    if (!piiEntitiesAction.error) {\n      for (const doc of piiEntitiesAction.results) {\n        console.log(`- Document ${doc.id}`);\n        if (!doc.error) {\n          console.log(\"\\tPii Entities:\");\n          for (const entity of doc.entities) {\n            console.log(`\\t- Entity ${entity.text} of type ${entity.category}`);\n          }\n        } else {\n          console.error(\"\\tError:\", doc.error);\n        }\n      }\n    }\n  }\n}\n\nmain();\n```\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nimport { setLogLevel } from \"@azure/logger\";\n\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/textanalytics/ai-text-analytics/samples) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Ftextanalytics%2Fai-text-analytics%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[cognitive_resource]: https://docs.microsoft.com/azure/cognitive-services/cognitive-services-apis-create-account\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[cognitive_auth]: https://docs.microsoft.com/azure/cognitive-services/authentication\n[register_aad_app]: https://docs.microsoft.com/azure/cognitive-services/authentication#assign-a-role-to-a-service-principal\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n[data_limits]: https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits\n[analyze_sentiment_opinion_mining_sample]: https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/textanalytics/ai-text-analytics/samples/v5/typescript/src/analyzeSentimentWithOpinionMining.ts\n",
        "repo_name": "textanalytics/ai-text-analytics",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/textanalytics/ai-text-analytics",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure TimeSeriesInsights client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure TimeSeriesInsights client.\n\nTime Series Insights client\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/timeseriesinsights/arm-timeseriesinsights) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-timeseriesinsights) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-timeseriesinsights?view=azure-node-preview) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-timeseriesinsights` package\n\nInstall the Azure TimeSeriesInsights client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-timeseriesinsights\n```\n\n### Create and authenticate a `TimeSeriesInsightsClient`\n\nTo create a client object to access the Azure TimeSeriesInsights API, you will need the `endpoint` of your Azure TimeSeriesInsights resource and a `credential`. The Azure TimeSeriesInsights client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure TimeSeriesInsights resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure TimeSeriesInsights** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { TimeSeriesInsightsClient } = require(\"@azure/arm-timeseriesinsights\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new TimeSeriesInsightsClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new TimeSeriesInsightsClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### TimeSeriesInsightsClient\n\n`TimeSeriesInsightsClient` is the primary interface for developers using the Azure TimeSeriesInsights client library. Explore the methods on this client object to understand the different features of the Azure TimeSeriesInsights service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Ftimeseriesinsights%2Farm-timeseriesinsights%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "timeseriesinsights/arm-timeseriesinsights",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/timeseriesinsights/arm-timeseriesinsights",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure TrafficManagerManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure TrafficManagerManagement client.\n\n\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/trafficmanager/arm-trafficmanager) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-trafficmanager) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-trafficmanager?view=azure-node-preview) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-trafficmanager` package\n\nInstall the Azure TrafficManagerManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-trafficmanager\n```\n\n### Create and authenticate a `TrafficManagerManagementClient`\n\nTo create a client object to access the Azure TrafficManagerManagement API, you will need the `endpoint` of your Azure TrafficManagerManagement resource and a `credential`. The Azure TrafficManagerManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure TrafficManagerManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure TrafficManagerManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { TrafficManagerManagementClient } = require(\"@azure/arm-trafficmanager\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new TrafficManagerManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new TrafficManagerManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### TrafficManagerManagementClient\n\n`TrafficManagerManagementClient` is the primary interface for developers using the Azure TrafficManagerManagement client library. Explore the methods on this client object to understand the different features of the Azure TrafficManagerManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Ftrafficmanager%2Farm-trafficmanager%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "trafficmanager/arm-trafficmanager",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/trafficmanager/arm-trafficmanager",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure TextTranslation REST client library for JavaScript\n\nText translation is a cloud-based REST API feature of the Translator service that uses neural\nmachine translation technology to enable quick and accurate source-to-target text translation\nin real time across all supported languages.\n\nThe following methods are supported by the Text Translation feature:\n\nLanguages. Returns a list of languages supported by Translate, Transliterate, and Dictionary Lookup operations.\n\nTranslate. Renders single source-language text to multiple target-language texts with a single request.\n\nTransliterate. Converts characters or letters of a source language to the corresponding characters or letters of a target language.\n\nDetect. Returns the source code language code and a boolean variable denoting whether the detected language is supported for text translation and transliteration.\n\nDictionary lookup. Returns equivalent words for the source term in the target language.\n\nDictionary example Returns grammatical structure and context examples for the source term and target term pair.\n\n**Please rely heavily on our [REST client docs](https://github.com/Azure/azure-sdk-for-js/blob/main/documentation/rest-clients.md) to use this library**\n\nKey links:\n\n- [Package (NPM)](https://www.npmjs.com/package/@azure-rest/ai-translation-text)\n- [API reference documentation](https://learn.microsoft.com/azure/cognitive-services/translator/reference/v3-0-reference)\n- [Samples](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/translation/ai-translation-text-rest/samples)\n\n## Getting started\n\n### Currently supported environments\n\n- LTS versions of Node.js\n- Latest versions of Edge, Chrome, Safar and Firefox\n\n### Prerequisites\n\n- An existing Translator service or Cognitive Services resource.\n\n### Install the `@azure-rest/ai-translation-text` package\n\nInstall the Azure Text Translation REST client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure-rest/ai-translation-text\n```\n\n#### Create a Translator service resource\n\nYou can create Translator resource following [Create a Translator resource][translator_resource_create].\n\n### Browser support\n\n#### JavaScript Bundle\n\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n### Authenticate the client\n\nInteraction with the service using the client library begins with creating an instance of the [TextTranslationClient][translator_client_class] class. You will need an **API key** or `TokenCredential` to instantiate a client object. For more information regarding authenticating with cognitive services, see [Authenticate requests to Translator Service][translator_auth].\n\n#### Get an API key\n\nYou can get the `endpoint`, `API key` and `Region` from the Cognitive Services resource or Translator service resource information in the [Azure Portal][azure_portal].\n\nAlternatively, use the [Azure CLI][azure_cli] snippet below to get the API key from the Translator service resource.\n\n```PowerShell\naz cognitiveservices account keys list --resource-group <your-resource-group-name> --name <your-resource-name>\n```\n\n### Create a `TextTranslationClient` using an API key and Region credential\n\nOnce you have the value for the API key and Region, create an `TranslatorCredential`.\n\nWith the value of the `TranslatorCredential` you can create the [TextTranslationClient][translator_client_class]:\n\n```javascript\nconst translateCedential = new TranslatorCredential(apiKey, region);\nconst translationClient = TextTranslationClient(endpoint, translateCedential);\n```\n\n## Examples\n\nThe following section provides several code snippets using the `client` [created above](#create-a-texttranslationclient-using-an-api-key-and-region-credential), and covers the main features present in this client library.\n\n### Get Supported Languages\n\nGets the set of languages currently supported by other operations of the Translator.\n\n```javascript\nconst langResponse = await translationClient.path(\"/languages\").get();\n\nif (isUnexpected(langResponse)) {\n  throw langResponse.body;\n}\n\nconst languages = langResponse.body;\n\nif (languages.translation) {\n  console.log(\"Translated languages:\");\n  for (const key in languages.translation) {\n    const translationLanguage = languages.translation[key];\n    console.log(`${key} -- name: ${translationLanguage.name} (${translationLanguage.nativeName})`);\n  }\n}\n\nif (languages.transliteration) {\n  console.log(\"Transliteration languages:\");\n  for (const key in languages.transliteration) {\n    const transliterationLanguage = languages.transliteration[key];\n    console.log(\n      `${key} -- name: ${transliterationLanguage.name} (${transliterationLanguage.nativeName})`\n    );\n  }\n}\n\nif (languages.dictionary) {\n  console.log(\"Dictionary languages:\");\n  for (const key in languages.dictionary) {\n    const dictionaryLanguage = languages.dictionary[key];\n    console.log(\n      `${key} -- name: ${dictionaryLanguage.name} (${dictionaryLanguage.nativeName}), supported target languages count: ${dictionaryLanguage.translations.length}`\n    );\n  }\n}\n```\n\nPlease refer to the service documentation for a conceptual discussion of [languages][languages_doc].\n\n### Translate\n\nRenders single source-language text to multiple target-language texts with a single request.\n\n```javascript\nconst inputText = [{ text: \"This is a test.\" }];\nconst parameters = {\n  to: \"cs\",\n  from: \"en\",\n};\nconst translateResponse = await translationClient.path(\"/translate\").post({\n  body: inputText,\n  queryParameters: parameters,\n});\n\nif (isUnexpected(translateResponse)) {\n  throw translateResponse.body;\n}\n\nconst translations = translateResponse.body;\nfor (const translation of translations) {\n  console.log(\n    `Text was translated to: '${translation?.translations[0]?.to}' and the result is: '${translation?.translations[0]?.text}'.`\n  );\n}\n```\n\nPlease refer to the service documentation for a conceptual discussion of [translate][translate_doc].\n\n### Transliterate\n\nConverts characters or letters of a source language to the corresponding characters or letters of a target language.\n\n```javascript\nconst inputText = [{ text: \"\u8fd9\u662f\u4e2a\u6d4b\u8bd5\u3002\" }];\nconst parameters = {\n  language: \"zh-Hans\",\n  fromScript: \"Hans\",\n  toScript: \"Latn\",\n};\nconst transliterateResponse = await translationClient.path(\"/transliterate\").post({\n  body: inputText,\n  queryParameters: parameters,\n});\n\nif (isUnexpected(transliterateResponse)) {\n  throw transliterateResponse.body;\n}\n\nconst translations = transliterateResponse.body;\nfor (const transliteration of translations) {\n  console.log(\n    `Input text was transliterated to '${transliteration?.script}' script. Transliterated text: '${transliteration?.text}'.`\n  );\n}\n```\n\nPlease refer to the service documentation for a conceptual discussion of [transliterate][transliterate_doc].\n\n### Break Sentence\n\nIdentifies the positioning of sentence boundaries in a piece of text.\n\n```javascript\nconst inputText = [{ text: \"zh\u00e8 sh\u00ec g\u00e8 c\u00e8 sh\u00ec\u3002\" }];\nconst parameters = {\n  language: \"zh-Hans\",\n  script: \"Latn\",\n};\nconst breakSentenceResponse = await translationClient.path(\"/breaksentence\").post({\n  body: inputText,\n  queryParameters: parameters,\n});\n\nif (isUnexpected(breakSentenceResponse)) {\n  throw breakSentenceResponse.body;\n}\n\nconst breakSentences = breakSentenceResponse.body;\nfor (const breakSentence of breakSentences) {\n  console.log(`The detected sentece boundaries: '${breakSentence?.sentLen.join(\", \")}'.`);\n}\n```\n\nPlease refer to the service documentation for a conceptual discussion of [break sentence][breaksentence_doc].\n\n### Dictionary Lookup\n\nReturns equivalent words for the source term in the target language.\n\n```javascript\nconst inputText = [{ text: \"fly\" }];\nconst parameters = {\n  to: \"es\",\n  from: \"en\",\n};\nconst dictionaryResponse = await translationClient.path(\"/dictionary/lookup\").post({\n  body: inputText,\n  queryParameters: parameters,\n});\n\nif (isUnexpected(dictionaryResponse)) {\n  throw dictionaryResponse.body;\n}\n\nconst dictionaryEntries = dictionaryResponse.body;\nfor (const dictionaryEntry of dictionaryEntries) {\n  console.log(\n    `For the given input ${dictionaryEntry?.translations?.length} entries were found in the dictionary.`\n  );\n  console.log(\n    `First entry: '${dictionaryEntry?.translations[0]?.displayTarget}', confidence: ${dictionaryEntry?.translations[0]?.confidence}.`\n  );\n}\n```\n\nPlease refer to the service documentation for a conceptual discussion of [dictionary lookup][dictionarylookup_doc].\n\n### Dictionary Examples\n\nReturns grammatical structure and context examples for the source term and target term pair.\n\n```javascript\nconst inputText = [{ text: \"fly\", translation: \"volar\" }];\nconst parameters = {\n  to: \"es\",\n  from: \"en\",\n};\nconst dictionaryResponse = await translationClient.path(\"/dictionary/examples\").post({\n  body: inputText,\n  queryParameters: parameters,\n});\n\nif (isUnexpected(dictionaryResponse)) {\n  throw dictionaryResponse.body;\n}\n\nconst dictionaryExamples = dictionaryResponse.body;\nfor (const dictionaryExample of dictionaryExamples) {\n  console.log(\n    `For the given input ${dictionaryExample?.examples?.length} examples were found in the dictionary.`\n  );\n  const firstExample = dictionaryExample?.examples[0];\n  console.log(\n    `Example: '${firstExample.targetPrefix + firstExample.targetTerm + firstExample.targetSuffix}'.`\n  );\n}\n```\n\nPlease refer to the service documentation for a conceptual discussion of [dictionary examples][dictionaryexamples_doc].\n\n## Troubleshooting\n\nWhen you interact with the Translator Service using the TextTranslator client library, errors returned by the Translator service correspond to the same HTTP status codes returned for REST API requests.\n\nFor example, if you submit a translation request without a target translate language, a `400` error is returned, indicating \"Bad Request\".\n\nYou can find the different error codes returned by the service in the [Service Documentation][service_errors].\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\n\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_portal]: https://portal.azure.com\n[translator_resource_create]: https://learn.microsoft.com/azure/cognitive-services/Translator/create-translator-resource\n[translator_auth]: https://learn.microsoft.com/azure/cognitive-services/translator/reference/v3-0-reference#authentication\n[service_errors]: https://learn.microsoft.com/azure/cognitive-services/translator/reference/v3-0-reference#errors\n[translator_client_class]: https://github.com/azure/azure-sdk-for-js/blob/main/sdk/translation/ai-translation-text-rest/src/generated/clientDefinitions.ts\n[languages_doc]: https://learn.microsoft.com/azure/cognitive-services/translator/reference/v3-0-languages\n[translate_doc]: https://learn.microsoft.com/azure/cognitive-services/translator/reference/v3-0-translate\n[transliterate_doc]: https://learn.microsoft.com/azure/cognitive-services/translator/reference/v3-0-transliterate\n[breaksentence_doc]: https://learn.microsoft.com/azure/cognitive-services/translator/reference/v3-0-break-sentence\n[dictionarylookup_doc]: https://learn.microsoft.com/azure/cognitive-services/translator/reference/v3-0-dictionary-lookup\n[dictionaryexamples_doc]: https://learn.microsoft.com/azure/cognitive-services/translator/reference/v3-0-dictionary-examples\n",
        "repo_name": "translation/ai-translation-text-rest",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/translation/ai-translation-text-rest",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Visual Studio Resource Provider client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure Visual Studio Resource Provider client.\n\nUse these APIs to manage Visual Studio Team Services resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://docs.microsoft.com/rest/api/index.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/visualstudio/arm-visualstudio) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-visualstudio) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-visualstudio?view=azure-node-preview) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-visualstudio` package\n\nInstall the Azure Visual Studio Resource Provider client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-visualstudio\n```\n\n### Create and authenticate a `VisualStudioResourceProviderClient`\n\nTo create a client object to access the Azure Visual Studio Resource Provider API, you will need the `endpoint` of your Azure Visual Studio Resource Provider resource and a `credential`. The Azure Visual Studio Resource Provider client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure Visual Studio Resource Provider resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure Visual Studio Resource Provider** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { VisualStudioResourceProviderClient } = require(\"@azure/arm-visualstudio\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new VisualStudioResourceProviderClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new VisualStudioResourceProviderClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### VisualStudioResourceProviderClient\n\n`VisualStudioResourceProviderClient` is the primary interface for developers using the Azure Visual Studio Resource Provider client library. Explore the methods on this client object to understand the different features of the Azure Visual Studio Resource Provider service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fvisualstudio%2Farm-visualstudio%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "visualstudio/arm-visualstudio",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/visualstudio/arm-visualstudio",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure VMwareCloudSimple client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure VMwareCloudSimple client.\n\nDescription of the new service\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/vmwarecloudsimple/arm-vmwarecloudsimple) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-vmwarecloudsimple) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-vmwarecloudsimple) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-vmwarecloudsimple` package\n\nInstall the Azure VMwareCloudSimple client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-vmwarecloudsimple\n```\n\n### Create and authenticate a `VMwareCloudSimple`\n\nTo create a client object to access the Azure VMwareCloudSimple API, you will need the `endpoint` of your Azure VMwareCloudSimple resource and a `credential`. The Azure VMwareCloudSimple client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure VMwareCloudSimple resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure VMwareCloudSimple** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { VMwareCloudSimple } = require(\"@azure/arm-vmwarecloudsimple\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new VMwareCloudSimple(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new VMwareCloudSimple(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### VMwareCloudSimple\n\n`VMwareCloudSimple` is the primary interface for developers using the Azure VMwareCloudSimple client library. Explore the methods on this client object to understand the different features of the Azure VMwareCloudSimple service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fvmwarecloudsimple%2Farm-vmwarecloudsimple%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "vmwarecloudsimple/arm-vmwarecloudsimple",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/vmwarecloudsimple/arm-vmwarecloudsimple",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure MicrosoftVoiceServices client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure MicrosoftVoiceServices client.\n\n\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/voiceservices/arm-voiceservices) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-voiceservices) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-voiceservices) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-voiceservices` package\n\nInstall the Azure MicrosoftVoiceServices client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-voiceservices\n```\n\n### Create and authenticate a `MicrosoftVoiceServices`\n\nTo create a client object to access the Azure MicrosoftVoiceServices API, you will need the `endpoint` of your Azure MicrosoftVoiceServices resource and a `credential`. The Azure MicrosoftVoiceServices client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure MicrosoftVoiceServices resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure MicrosoftVoiceServices** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { MicrosoftVoiceServices } = require(\"@azure/arm-voiceservices\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new MicrosoftVoiceServices(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new MicrosoftVoiceServices(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### MicrosoftVoiceServices\n\n`MicrosoftVoiceServices` is the primary interface for developers using the Azure MicrosoftVoiceServices client library. Explore the methods on this client object to understand the different features of the Azure MicrosoftVoiceServices service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fvoiceservices%2Farm-voiceservices%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "voiceservices/arm-voiceservices",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/voiceservices/arm-voiceservices",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure WebPubSubManagement client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure WebPubSubManagement client.\n\nREST API for Azure WebPubSub Service\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/web-pubsub/arm-webpubsub) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-webpubsub) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-webpubsub) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-webpubsub` package\n\nInstall the Azure WebPubSubManagement client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-webpubsub\n```\n\n### Create and authenticate a `WebPubSubManagementClient`\n\nTo create a client object to access the Azure WebPubSubManagement API, you will need the `endpoint` of your Azure WebPubSubManagement resource and a `credential`. The Azure WebPubSubManagement client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure WebPubSubManagement resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure WebPubSubManagement** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { WebPubSubManagementClient } = require(\"@azure/arm-webpubsub\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new WebPubSubManagementClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new WebPubSubManagementClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### WebPubSubManagementClient\n\n`WebPubSubManagementClient` is the primary interface for developers using the Azure WebPubSubManagement client library. Explore the methods on this client object to understand the different features of the Azure WebPubSubManagement service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fweb-pubsub%2Farm-webpubsub%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "web-pubsub/arm-webpubsub",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/web-pubsub/arm-webpubsub",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Web PubSub client protobuf protocol library for JavaScript\n\n[Azure Web PubSub](https://aka.ms/awps/doc) is a cloud service that helps developers easily build real-time features in web applications with publish-subscribe patterns at scale. \n\nYou can use this library to add protobuf subprotocols including `protobuf.reliable.webpubsub.azure.v1` and `protobuf.webpubsub.azure.v1` support to `@azure/web-pubsub-client` library.\n\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://nodejs.org/about/releases/)\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub]\n- A [Web PubSub resource][create_instance]\n\n### 1. Install the `@azure/web-pubsub-client-protobuf` package\n\n```bash\nnpm install @azure/web-pubsub-client-protobuf\n```\n\n### 2. Use Protobuf protocols\n\n```javascript\nlet client = new WebPubSubClient(\"client-access-url\", { protocol: WebPubSubProtobufReliableProtocol() });\n```\n\n## Troubleshooting\n\n- ### Enable logs\n\n  You can set the following environment variable to get the debug logs when using this library.\n\n```bash\nexport AZURE_LOG_LEVEL=verbose\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n- ### Live Trace\n\n  Use [Live Trace tool][live_trace] from Web PubSub portal to view the live traffic.\n---\n## Additional resources\n- Learn more about client permission, see [permissions](https://learn.microsoft.com/azure/azure-web-pubsub/reference-json-reliable-webpubsub-subprotocol#permissions)\n\n- [Server SDK - JavaScript documentation](https://aka.ms/awps/sdk/js) \n- [Product documentation](https://aka.ms/awps/doc)\n- [Samples][samples_ref]\n\n---\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n\n[azure_sub]: https://azure.microsoft.com/free/\n[samples_ref]: https://github.com/Azure/azure-webpubsub/tree/main/samples/javascript/\n[create_instance]: https://learn.microsoft.com/azure/azure-web-pubsub/howto-develop-create-instance\n[npm]: https://www.npmjs.com/package/@azure/web-pubsub-client\n[live_trace]: https://learn.microsoft.com/azure/azure-web-pubsub/howto-troubleshoot-resource-logs\n",
        "repo_name": "web-pubsub/web-pubsub-client-protobuf",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/web-pubsub/web-pubsub-client-protobuf",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Web PubSub client library for JavaScript\n\n[Azure Web PubSub](https://aka.ms/awps/doc) is a cloud service that helps developers easily build real-time features in web applications with publish-subscribe patterns at scale. \n\nAny scenario that requires real-time messaging between server and clients or among clients following publish-subscribe patterns can benefit from using Web PubSub. Developers no longer need to poll the server by sending repeated HTTP requests at intervals, which is wasteful and hard-to-scale. \n\nAs shown in the diagram below, your clients establish WebSocket connections with your Web PubSub resource. This client library: \n- simplifies managing client connections\n- simplifies sending messages among clients\n- automatically retries after unintended drops of client connection\n- reliably deliveries messages in number and in order after recovering from connection drops\n  \n\n![overflow](https://user-images.githubusercontent.com/668244/140014067-25a00959-04dc-47e8-ac25-6957bd0a71ce.png)\n\nDetails about the terms used here are described in [key concepts](#key-concepts) section.\n\n_This library is hosted on [NPM][npm]._\n***\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://nodejs.org/about/releases/)\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub]\n- A [Web PubSub resource][create_instance]\n\n### 1. Install the `@azure/web-pubsub-client` package\n\n```bash\nnpm install @azure/web-pubsub-client\n```\n\n### 2. Connect with your Web PubSub resource\n\nA client uses a Client Access URL to connect and authenticate with the service, which follows a pattern of `wss://<service_name>.webpubsub.azure.com/client/hubs/<hub_name>?access_token=<token>`. A client can have a few ways to obtain the Client Access URL. For this quick start, you can copy and paste one from Azure Portal shown below. (For production, your clients usually get the Client Access URL genegrated on your application server. [See details below](#use-negotiation-server-to-generate-client-access-url) )\n\n![get_client_url](https://learn.microsoft.com/azure/azure-web-pubsub/media/howto-websocket-connect/generate-client-url.png)\n\nAs shown in the diagram above, the client has the permissions to send messages to and join a specific group named \"_group1_\". \n\n```js\n// Imports the client libray\nconst { WebPubSubClient } = require(\"@azure/web-pubsub-client\");\n\n// Instantiates the client object\nconst client = new WebPubSubClient(\"<client-access-url>\");\n\n// Starts the client connection with your Web PubSub resource\nawait client.start();\n\n// ...\n// The client can join/leave groups, send/receive messages to and from those groups all in real-time\n```\n\n### 3. Join groups\n\nNote that a client can only receive messages from groups that it has joined and you need to add a callback to specify the logic when receiving messages.\n\n```js\n// ...continues the code snippet from above\n\n// Specifies the group to join\nlet groupName = \"group1\";\n\n// Registers a listener for the event 'group-message' early before joining a group to not miss messages\nclient.on(\"group-message\", (e) => {\n  console.log(`Received message: ${e.message.data}`);\n});\n\n// A client needs to join the group it wishes to receive messages from\nawait client.joinGroup(groupName);\n```\n\n### 4. Send messages to a group\n```js\n// ...continues the code snippet from above\n\n// Send a message to a joined group\nawait client.sendToGroup(groupName, \"hello world\", \"text\");\n\n// In the Console tab of your developer tools found in your browser, you should see the message printed there.\n```\n\n---\n## Examples\n### Add callbacks for connected, disconnected and stopped events\n#### \n1. When a client is successfully connected to your Web PubSub resource, the `connected` event is triggered.\n\n```js\nclient.on(\"connected\", (e) => {\n  console.log(`Connection ${e.connectionId} is connected.`);\n});\n```\n\n2. When a client is disconnected and fails to recover the connection, the `disconnected` event is triggered.\n\n```js\nclient.on(\"disconnected\", (e) => {\n  console.log(`Connection disconnected: ${e.message}`);\n});\n```\n\n3. The `stopped` event will be triggered when the client is disconnected *and* the client stops trying to reconnect. This usually happens after the `client.stop()` is called, or `autoReconnect` is disabled or a specified limit to trying to reconnect has reached. If you want to restart the client, you can call `client.start()` in the stopped event.\n\n```js\n// Registers a listener for the \"stopped\" event\nclient.on(\"stopped\", () => {\n  console.log(`Client has stopped`);\n});\n```\n---\n### Use a negotiation server to generate Client Access URL programatically\n\nIn production, clients usually fetch the Client Access URL from an application server. The server holds the connection string to your Web PubSub resource and generates the Client Access URL with the help from the server library `@azure/web-pubsub`.\n\n#### 1. Application server \nThe code snippet below is an example of an application server exposes a `/negotiate` path and returns the Client Access URL.\n\n```js\n// This code snippet uses the popular Express framework\nconst express = require('express');\nconst app = express();\nconst port = 8080;\n\n// Imports the server library, which is different from the client library\nconst { WebPubSubServiceClient } = require('@azure/web-pubsub');\nconst hubName = 'sample_chat';\n\nconst serviceClient = new WebPubSubServiceClient(\"<web-pubsub-connectionstring>\", hubName);\n\n// Note that the token allows the client to join and send messages to any groups. It is specified with the \"roles\" option.\napp.get('/negotiate', async (req, res) => {\n  let token = await serviceClient.getClientAccessToken({roles: [\"webpubsub.joinLeaveGroup\", \"webpubsub.sendToGroup\"] });\n  res.json({\n    url: token.url\n  });\n});\n\napp.listen(port, () => console.log(`Application server listening at http://localhost:${port}/negotiate`));\n```\n#### 2. Client side\nThe code snippet below is an example of the client side.\n\n```js\nconst { WebPubSubClient } = require(\"@azure/web-pubsub-client\")\n\nconst client = new WebPubSubClient({\n  getClientAccessUrl: async () => {\n    let value = await (await fetch(`/negotiate`)).json();\n    return value.url;\n  }\n});\n\nawait client.start();\n```\n_To see the full code of this sample, please refer to [samples-browser](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/web-pubsub/web-pubsub-client/samples-browser)._\n\n---\n### A client consumes messages from the application server or joined groups\n\nA client can add callbacks to consume messages from your application server or groups. Please note, for `group-message` event the client can _only_ receive group messages that it has joined.\n\n```js\n// Registers a listener for the \"server-message\". The callback will be invoked when your application server sends message to the connectionID, to or broadcast to all connections.\nclient.on(\"server-message\", (e) => {\n  console.log(`Received message ${e.message.data}`);\n});\n\n// Registers a listener for the \"group-message\". The callback will be invoked when the client receives a message from the groups it has joined.\nclient.on(\"group-message\", (e) => {\n    console.log(`Received message from ${e.message.group}: ${e.message.data}`);\n});\n```\n---\n### Handle rejoin failure\nWhen a client is disconnected and fails to recover, all group contexts will be cleaned up in your Web PubSub resource. This means when the client reconnects, it needs to rejoin groups. By default, the client has `autoRejoinGroup` option enabled. \n\nHowever, you should be aware of `autoRejoinGroup`'s limitations. \n- The client can only rejoin groups that it's originally joined by the client code _not_ by the server side code. \n- \"rejoin group\" operations may fail due to various reasons, e.g. the client doesn't have permission to join the groups. In such cases, you need to add a callback to handle this failure.\n\n```js\n// By default autoRejoinGroups=true. You can disable it by setting to false.\nconst client = new WebPubSubClient(\"<client-access-url>\", { autoRejoinGroups: true });\n\n// Registers a listener to handle \"rejoin-group-failed\" event\nclient.on(\"rejoin-group-failed\", e => {\n  console.log(`Rejoin group ${e.group} failed: ${e.error}`);\n})\n```\n---\n### Operation and retry\nBy default, the operation such as `client.joinGroup()`, `client.leaveGroup()`, `client.sendToGroup()`, `client.sendEvent()` has three retries. You can configure through the `messageRetryOptions`. If all retries have failed, an error will be thrown. You can keep retrying by passing in the same `ackId` as previous retries so that the Web PubSub service can deduplicate the operation.\n\n```js\ntry {\n  await client.joinGroup(groupName);\n} catch (err) {\n  let id = null;\n  if (err instanceof SendMessageError) {\n    id = err.ackId;\n  }\n  await client.joinGroup(groupName, {ackId: id});\n}\n```\n---\n### Specify subprotocol\n\nYou can change the subprotocol to be used by the client. By default, the client uses `json.reliable.webpubsub.azure.v1`. You can choose to use `json.reliable.webpubsub.azure.v1` or `json.webpubsub.azure.v1`.\n\n```js\n// Change to use json.webpubsub.azure.v1\nconst client = new WebPubSubClient(\"<client-access-url>\", { protocol: WebPubSubJsonProtocol() });\n```\n\n```js\n// Change to use json.reliable.webpubsub.azure.v1\nconst client = new WebPubSubClient(\"<client-access-url>\", { protocol: WebPubSubJsonReliableProtocol() });\n```\n---\n## Key concepts\n\n### Connection\n\nA connection, also known as a client or a client connection, represents an individual WebSocket connection connected to the Web PubSub. When successfully connected, a unique connection ID is assigned to this connection by the Web PubSub. Each `WebPubSubClient` creates its own exclusive connection.\n\n### Recovery\n\nIf a client using reliable protocols disconnects, a new WebSocket tries to establish using the connection ID of the lost connection. If the new WebSocket connection is successfully connected, the connection is recovered. Throughout the time a client is disconnected, the service retains the client's context as well as all messages that the client was subscribed to, and when the client recovers, the service will send these messages to the client. If the service returns WebSocket error code `1008` or the recovery attempt lasts more than 30 seconds, the recovery fails.\n\n### Reconnect\n\nReconnection happens when the client connection drops and fails to recover. Reconnection starts a new connection and the new connection has a new connection ID. Unlike recovery, the service treats the reconnected client as a new client connection. The client connection needs to rejoin groups. By default, the client library rejoins groups after reconnection.\n\n### Hub\n\nA hub is a logical concept for a set of client connections. Usually, you use one hub for one purpose, for example, a chat hub, or a notification hub. When a client connection is created, it connects to a hub, and during its lifetime, it belongs to that hub. Different applications can share one Web PubSub by using different hub names.\n\n### Group\n\nA group is a subset of connections to the hub. You can add a client connection to a group, or remove the client connection from the group, anytime you want. For example, when a client joins a chat room, or when a client leaves the chat room, this chat room can be considered to be a group. A client can join multiple groups, and a group can contain multiple clients.\n\n### User\n\nConnections to Web PubSub can belong to one user. A user might have multiple connections, for example when a single user is connected across multiple devices or multiple browser tabs.\n\n---\n## Client Lifetime\n\nEach of the Web PubSub clients is safe to cache and be used as a singleton for the lifetime of the application. The registered event callbacks share the same lifetime with the client. This means you can add or remove callbacks at any time and the registration status will not change after reconnection or the client being stopped.\n\n---\n## JavaScript Bundle\n\nTo use this client library in the browser, first, you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://github.com/Azure/azure-sdk-for-js/blob/main/documentation/Bundling.md).\n\n---\n\n## Troubleshooting\n\n- ### Enable logs\n\n  You can set the following environment variable to get the debug logs when using this library.\n\n```bash\nexport AZURE_LOG_LEVEL=verbose\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n- ### Live Trace\n\n  Use [Live Trace tool][live_trace] from Web PubSub portal to view the live traffic.\n---\n## Additional resources\n- Learn more about client permission, see [permissions](https://learn.microsoft.com/azure/azure-web-pubsub/reference-json-reliable-webpubsub-subprotocol#permissions)\n\n- [Server SDK - JavaScript documentation](https://aka.ms/awps/sdk/js) \n- [Product documentation](https://aka.ms/awps/doc)\n- [Samples][samples_ref]\n\n---\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n\n[azure_sub]: https://azure.microsoft.com/free/\n[samples_ref]: https://github.com/Azure/azure-webpubsub/tree/main/samples/javascript/\n[create_instance]: https://learn.microsoft.com/azure/azure-web-pubsub/howto-develop-create-instance\n[npm]: https://www.npmjs.com/package/@azure/web-pubsub-client\n[live_trace]: https://learn.microsoft.com/azure/azure-web-pubsub/howto-troubleshoot-resource-logs\n",
        "repo_name": "web-pubsub/web-pubsub-client",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/web-pubsub/web-pubsub-client",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Web PubSub CloudEvents handlers for Express\n\n[Azure Web PubSub service](https://aka.ms/awps/doc) is an Azure-managed service that helps developers easily build web applications with real-time features and publish-subscribe pattern. Any scenario that requires real-time publish-subscribe messaging between server and clients or among clients can use Azure Web PubSub service. Traditional real-time features that often require polling from server or submitting HTTP requests can also use Azure Web PubSub service.\n\nWhen a WebSocket connection connects, the Web PubSub service transforms the connection lifecycle and messages into [events in CloudEvents format](https://docs.microsoft.com/azure/azure-web-pubsub/concept-service-internals#workflow). This library provides an express middleware to handle events representing the WebSocket connection's lifecycle and messages, as shown in below diagram:\n\n![cloudevents](https://user-images.githubusercontent.com/668244/140321213-6442b3b8-72ee-4c28-aec1-127f9ea8f5d9.png)\n\nDetails about the terms used here are described in [Key concepts](#key-concepts) section.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/web-pubsub/web-pubsub-express) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/web-pubsub-express) |\n[API reference documentation](https://aka.ms/awps/sdk/js) |\n[Product documentation](https://aka.ms/awps/doc) |\n[Samples][samples_ref]\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- [Express](https://expressjs.com/) version 4.x.x or higher\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n- An existing Azure Web PubSub endpoint.\n\n### 1. Install the `@azure/web-pubsub-express` package\n\n```bash\nnpm install @azure/web-pubsub-express\n```\n\n### 2. Create a `WebPubSubEventHandler`\n\n```js\nconst express = require(\"express\");\n\nconst { WebPubSubEventHandler } = require(\"@azure/web-pubsub-express\");\nconst handler = new WebPubSubEventHandler(\"chat\");\n\nconst app = express();\n\napp.use(handler.getMiddleware());\n\napp.listen(3000, () =>\n  console.log(`Azure WebPubSub Upstream ready at http://localhost:3000${handler.path}`)\n);\n```\n\n## Key concepts\n\n### Connection\n\nA connection, also known as a client or a client connection, represents an individual WebSocket connection connected to the Web PubSub service. When successfully connected, a unique connection ID is assigned to this connection by the Web PubSub service.\n\n### Hub\n\nA hub is a logical concept for a set of client connections. Usually you use one hub for one purpose, for example, a chat hub, or a notification hub. When a client connection is created, it connects to a hub, and during its lifetime, it belongs to that hub. Different applications can share one Azure Web PubSub service by using different hub names.\n\n### Group\n\nA group is a subset of connections to the hub. You can add a client connection to a group, or remove the client connection from the group, anytime you want. For example, when a client joins a chat room, or when a client leaves the chat room, this chat room can be considered to be a group. A client can join multiple groups, and a group can contain multiple clients.\n\n### User\n\nConnections to Web PubSub can belong to one user. A user might have multiple connections, for example when a single user is connected across multiple devices or multiple browser tabs.\n\n### Client Events\n\nEvents are created during the lifecycle of a client connection. For example, a simple WebSocket client connection creates a `connect` event when it tries to connect to the service, a `connected` event when it successfully connected to the service, a `message` event when it sends messages to the service and a `disconnected` event when it disconnects from the service.\n\n### Event Handler\n\nEvent handler contains the logic to handle the client events. Event handler needs to be registered and configured in the service through the portal or Azure CLI beforehand. The place to host the event handler logic is generally considered as the server-side.\n\n## Examples\n\n### Handle the `connect` request and assign `<userId>`\n\n```js\nconst express = require(\"express\");\n\nconst { WebPubSubEventHandler } = require(\"@azure/web-pubsub-express\");\nconst handler = new WebPubSubEventHandler(\"chat\", {\n  handleConnect: (req, res) => {\n    // auth the connection and set the userId of the connection\n    res.success({\n      userId: \"<userId>\"\n    });\n  },\n  allowedEndpoints: [\"https://<yourAllowedService>.webpubsub.azure.com\"]\n});\n\nconst app = express();\n\napp.use(handler.getMiddleware());\n\napp.listen(3000, () =>\n  console.log(`Azure WebPubSub Upstream ready at http://localhost:3000${handler.path}`)\n);\n```\n\n### Only allow specified endpoints\n\n```js\nconst express = require(\"express\");\n\nconst { WebPubSubEventHandler } = require(\"@azure/web-pubsub-express\");\nconst handler = new WebPubSubEventHandler(\"chat\", {\n  allowedEndpoints: [\n    \"https://<yourAllowedService1>.webpubsub.azure.com\",\n    \"https://<yourAllowedService2>.webpubsub.azure.com\"\n  ]\n});\n\nconst app = express();\n\napp.use(handler.getMiddleware());\n\napp.listen(3000, () =>\n  console.log(`Azure WebPubSub Upstream ready at http://localhost:3000${handler.path}`)\n);\n```\n\n### Set custom event handler path\n\n```js\nconst express = require(\"express\");\n\nconst { WebPubSubEventHandler } = require(\"@azure/web-pubsub-express\");\nconst handler = new WebPubSubEventHandler(\"chat\", {\n  path: \"customPath1\"\n});\n\nconst app = express();\n\napp.use(handler.getMiddleware());\n\napp.listen(3000, () =>\n  // Azure WebPubSub Upstream ready at http://localhost:3000/customPath1\n  console.log(`Azure WebPubSub Upstream ready at http://localhost:3000${handler.path}`)\n);\n```\n\n### Set and read connection state\n\n```js\nconst express = require(\"express\");\n\nconst { WebPubSubEventHandler } = require(\"@azure/web-pubsub-express\");\n\nconst handler = new WebPubSubEventHandler(\"chat\", {\n  handleConnect(req, res) {\n    // You can set the state for the connection, it lasts throughout the lifetime of the connection\n    res.setState(\"calledTime\", 1);\n    res.success();\n  },\n  handleUserEvent(req, res) {\n    var calledTime = req.context.states.calledTime++;\n    console.log(calledTime);\n    // You can also set the state here\n    res.setState(\"calledTime\", calledTime);\n    res.success();\n  }\n});\n\nconst app = express();\n\napp.use(handler.getMiddleware());\n\napp.listen(3000, () =>\n  console.log(`Azure WebPubSub Upstream ready at http://localhost:3000${handler.path}`)\n);\n```\n\n## Troubleshooting\n\n### Enable logs\n\nYou can set the following environment variable to get the debug logs when using this library.\n\n- Getting debug logs from the SignalR client library\n\n```bash\nexport AZURE_LOG_LEVEL=verbose\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n### Live Trace\n\nUse **Live Trace** from the Web PubSub service portal to view the live traffic.\n\n## Next steps\n\nPlease take a look at the\n[samples][samples_ref]\ndirectory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for Javascript](https://github.com/Azure/azure-sdk-for-js)\n\n[azure_sub]: https://azure.microsoft.com/free/\n[samples_ref]: https://github.com/Azure/azure-webpubsub/tree/main/samples/javascript/\n",
        "repo_name": "web-pubsub/web-pubsub-express",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/web-pubsub/web-pubsub-express",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Web PubSub service client library for JavaScript\n\n[Azure Web PubSub service](https://aka.ms/awps/doc) is an Azure-managed service that helps developers easily build web applications with real-time features and publish-subscribe pattern. Any scenario that requires real-time publish-subscribe messaging between server and clients or among clients can use Azure Web PubSub service. Traditional real-time features that often require polling from server or submitting HTTP requests can also use Azure Web PubSub service.\n\nYou can use this library in your app server side to manage the WebSocket client connections, as shown in below diagram:\n\n![overflow](https://user-images.githubusercontent.com/668244/140014067-25a00959-04dc-47e8-ac25-6957bd0a71ce.png).\n\n- Send messages to hubs and groups.\n- Send messages to particular users and connections.\n- Organize users and connections into groups.\n- Close connections\n- Grant, revoke, and check permissions for an existing connection\n\nDetails about the terms used here are described in [Key concepts](#key-concepts) section.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/web-pubsub/web-pubsub) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/web-pubsub) |\n[API reference documentation](https://aka.ms/awps/sdk/js) |\n[Product documentation](https://aka.ms/awps/doc) |\n[Samples][samples_ref]\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n- An existing Azure Web PubSub service instance.\n\n### 1. Install the `@azure/web-pubsub` package\n\n```bash\nnpm install @azure/web-pubsub\n```\n\n### 2. Create and authenticate a WebPubSubServiceClient\n\n```js\nconst { WebPubSubServiceClient } = require(\"@azure/web-pubsub\");\n\nconst serviceClient = new WebPubSubServiceClient(\"<ConnectionString>\", \"<hubName>\");\n```\n\nYou can also authenticate the `WebPubSubServiceClient` using an endpoint and an `AzureKeyCredential`:\n\n```js\nconst { WebPubSubServiceClient, AzureKeyCredential } = require(\"@azure/web-pubsub\");\n\nconst key = new AzureKeyCredential(\"<Key>\");\nconst serviceClient = new WebPubSubServiceClient(\"<Endpoint>\", key, \"<hubName>\");\n```\n\nOr authenticate the `WebPubSubServiceClient` using [Azure Active Directory][aad_doc]\n\n1. Install the `@azure/identity` dependency\n\n```bash\nnpm install @azure/identity\n```\n\n2. Update the source code to use `DefaultAzureCredential`:\n\n```js\nconst { WebPubSubServiceClient, AzureKeyCredential } = require(\"@azure/web-pubsub\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n\nconst key = new DefaultAzureCredential();\nconst serviceClient = new WebPubSubServiceClient(\"<Endpoint>\", key, \"<hubName>\");\n```\n\n## Key concepts\n\n### Connection\n\nA connection, also known as a client or a client connection, represents an individual WebSocket connection connected to the Web PubSub service. When successfully connected, a unique connection ID is assigned to this connection by the Web PubSub service.\n\n### Hub\n\nA hub is a logical concept for a set of client connections. Usually you use one hub for one purpose, for example, a chat hub, or a notification hub. When a client connection is created, it connects to a hub, and during its lifetime, it belongs to that hub. Different applications can share one Azure Web PubSub service by using different hub names.\n\n### Group\n\nA group is a subset of connections to the hub. You can add a client connection to a group, or remove the client connection from the group, anytime you want. For example, when a client joins a chat room, or when a client leaves the chat room, this chat room can be considered to be a group. A client can join multiple groups, and a group can contain multiple clients.\n\n### User\n\nConnections to Web PubSub can belong to one user. A user might have multiple connections, for example when a single user is connected across multiple devices or multiple browser tabs.\n\n### Message\n\nWhen the client is connected, it can send messages to the upstream application, or receive messages from the upstream application, through the WebSocket connection.\n\n## Examples\n\n### Get the access token for a client to start the WebSocket connection\n\n```js\nconst { WebPubSubServiceClient } = require(\"@azure/web-pubsub\");\n\nconst serviceClient = new WebPubSubServiceClient(\"<ConnectionString>\", \"<hubName>\");\n\n// Get the access token for the WebSocket client connection to use\nlet token = await serviceClient.getClientAccessToken();\n\n// Or get the access token and assign the client a userId\ntoken = await serviceClient.getClientAccessToken({ userId: \"user1\" });\n\n// Or get the access token that the client will join group GroupA when it connects using the access token\ntoken = await serviceClient.getClientAccessToken({ userId: \"user1\", groups: [ \"GroupA\" ] });\n\n// return the token to the WebSocket client\n```\n\n### Broadcast messages to all connections in a hub\n\n```js\nconst { WebPubSubServiceClient } = require(\"@azure/web-pubsub\");\n\nconst serviceClient = new WebPubSubServiceClient(\"<ConnectionString>\", \"<hubName>\");\n\n// Send a JSON message\nawait serviceClient.sendToAll({ message: \"Hello world!\" });\n\n// Send a plain text message\nawait serviceClient.sendToAll(\"Hi there!\", { contentType: \"text/plain\" });\n\n// Send a binary message\nconst payload = new Uint8Array(10);\nawait serviceClient.sendToAll(payload.buffer);\n```\n\n### Send messages to all connections in a hub with OData filter syntax\n\nDetails about `filter` syntax please see [OData filter syntax for Azure Web PubSub](https://aka.ms/awps/filter-syntax).\n\n```js\nconst { WebPubSubServiceClient, odata } = require(\"@azure/web-pubsub\");\n\nconst serviceClient = new WebPubSubServiceClient(\"<ConnectionString>\", \"<hubName>\");\n\n// Send a JSON message to anonymous connections\nawait serviceClient.sendToAll(\n  { message: \"Hello world!\" },\n  { filter: \"userId eq null\" }\n  );\n\n// Send a text message to connections in groupA but not in groupB\nconst groupA = 'groupA';\nconst groupB = 'groupB';\nawait serviceClient.sendToAll(\n  \"Hello world!\",\n  { \n    contentType: \"text/plain\",\n    // use plain text \"'groupA' in groups and not('groupB' in groups)\"\n    // or use the odata helper method\n    filter: odata`${groupA} in groups and not(${groupB} in groups)` \n  });\n```\n\n### Send messages to all connections in a group\n\n```js\nconst { WebPubSubServiceClient } = require(\"@azure/web-pubsub\");\n\nconst serviceClient = new WebPubSubServiceClient(\"<ConnectionString>\", \"<hubName>\");\n\nconst groupClient = serviceClient.group(\"<groupName>\");\n\n// Add user to the group\nawait groupClient.addUser(\"user1\");\n\n// Send a JSON message\nawait groupClient.sendToAll({ message: \"Hello world!\" });\n\n// Send a plain text message\nawait groupClient.sendToAll(\"Hi there!\", { contentType: \"text/plain\" });\n\n// Send a binary message\nconst payload = new Uint8Array(10);\nawait groupClient.sendToAll(payload.buffer);\n```\n\n### Send messages to all connections for a user\n\n```js\nconst { WebPubSubServiceClient } = require(\"@azure/web-pubsub\");\n\nconst serviceClient = new WebPubSubServiceClient(\"<ConnectionString>\", \"<hubName>\");\n\n// Send a JSON message\nawait serviceClient.sendToUser(\"user1\", { message: \"Hello world!\" });\n\n// Send a plain text message\nawait serviceClient.sendToUser(\"user1\", \"Hi there!\", { contentType: \"text/plain\" });\n\n// Send a binary message\nconst payload = new Uint8Array(10);\nawait serviceClient.sendToUser(\"user1\", payload.buffer);\n```\n\n### Check if the group has any connection\n\n```js\nconst { WebPubSubServiceClient } = require(\"@azure/web-pubsub\");\nconst WebSocket = require(\"ws\");\n\nconst serviceClient = new WebPubSubServiceClient(\"<ConnectionString>\", \"<hubName>\");\n\nconst groupClient = serviceClient.group(\"<groupName>\");\n\n// close all the connections in the group\nawait groupClient.closeAllConnections({ reason: \"<closeReason>\" });\n\n// check if the group has any connections\nconst hasConnections = await serviceClient.groupExists(\"<groupName>\");\n```\n\n### Access the raw HTTP response for an operation\n\n```js\nconst { WebPubSubServiceClient } = require(\"@azure/web-pubsub\");\n\nfunction onResponse(rawResponse) {\n  console.log(rawResponse);\n}\nconst serviceClient = new WebPubSubServiceClient(\"<ConnectionString>\", \"<hubName>\");\nawait serviceClient.sendToAll({ message: \"Hello world!\" }, { onResponse });\n```\n\n## Troubleshooting\n\n### Enable logs\n\nYou can set the following environment variable to get the debug logs when using this library.\n\n- Getting debug logs from the SignalR client library\n\n```bash\nexport AZURE_LOG_LEVEL=verbose\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n### Live Trace\n\nUse **Live Trace** from the Web PubSub service portal to view the live traffic.\n\n## Next steps\n\nPlease take a look at the\n[samples][samples_ref]\ndirectory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for Javascript](https://github.com/Azure/azure-sdk-for-js)\n\n[azure_sub]: https://azure.microsoft.com/free/\n[samples_ref]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/web-pubsub/web-pubsub/samples\n[aad_doc]: https://aka.ms/awps/aad\n",
        "repo_name": "web-pubsub/web-pubsub",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/web-pubsub/web-pubsub",
        "language": [
            "JavaScript"
        ]
    },
    {
        "README_text": "# Azure Workloads client library for JavaScript\n\nThis package contains an isomorphic SDK (runs both in Node.js and in browsers) for Azure Workloads client.\n\nWorkloads client provides access to various workload operations.<br>Azure Center for SAP solutions is currently in PREVIEW. See the [Azure Center for SAP solutions - Legal Terms](https://learn.microsoft.com/legal/azure-center-for-sap-solutions/azure-center-for-sap-solutions-legal-terms) for legal notices applicable to Azure Center for SAP solutions.\n\n[Source code](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/workloads/arm-workloads) |\n[Package (NPM)](https://www.npmjs.com/package/@azure/arm-workloads) |\n[API reference documentation](https://docs.microsoft.com/javascript/api/@azure/arm-workloads) |\n[Samples](https://github.com/Azure-Samples/azure-samples-js-management)\n\n## Getting started\n\n### Currently supported environments\n\n- [LTS versions of Node.js](https://github.com/nodejs/release#release-schedule)\n- Latest versions of Safari, Chrome, Edge and Firefox.\n\nSee our [support policy](https://github.com/Azure/azure-sdk-for-js/blob/main/SUPPORT.md) for more details.\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n\n### Install the `@azure/arm-workloads` package\n\nInstall the Azure Workloads client library for JavaScript with `npm`:\n\n```bash\nnpm install @azure/arm-workloads\n```\n\n### Create and authenticate a `WorkloadsClient`\n\nTo create a client object to access the Azure Workloads API, you will need the `endpoint` of your Azure Workloads resource and a `credential`. The Azure Workloads client can use Azure Active Directory credentials to authenticate.\nYou can find the endpoint for your Azure Workloads resource in the [Azure Portal][azure_portal].\n\nYou can authenticate with Azure Active Directory using a credential from the [@azure/identity][azure_identity] library or [an existing AAD Token](https://github.com/Azure/azure-sdk-for-js/blob/master/sdk/identity/identity/samples/AzureIdentityExamples.md#authenticating-with-a-pre-fetched-access-token).\n\nTo use the [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with the Azure SDK, please install the `@azure/identity` package:\n\n```bash\nnpm install @azure/identity\n```\n\nYou will also need to **register a new AAD application and grant access to Azure Workloads** by assigning the suitable role to your service principal (note: roles such as `\"Owner\"` will not grant the necessary permissions).\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nFor more information about how to create an Azure AD Application check out [this guide](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).\n\n```javascript\nconst { WorkloadsClient } = require(\"@azure/arm-workloads\");\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\n// For client-side applications running in the browser, use InteractiveBrowserCredential instead of DefaultAzureCredential. See https://aka.ms/azsdk/js/identity/examples for more details.\n\nconst subscriptionId = \"00000000-0000-0000-0000-000000000000\";\nconst client = new WorkloadsClient(new DefaultAzureCredential(), subscriptionId);\n\n// For client-side applications running in the browser, use this code instead:\n// const credential = new InteractiveBrowserCredential({\n//   tenantId: \"<YOUR_TENANT_ID>\",\n//   clientId: \"<YOUR_CLIENT_ID>\"\n// });\n// const client = new WorkloadsClient(credential, subscriptionId);\n```\n\n\n### JavaScript Bundle\nTo use this client library in the browser, first you need to use a bundler. For details on how to do this, please refer to our [bundling documentation](https://aka.ms/AzureSDKBundling).\n\n## Key concepts\n\n### WorkloadsClient\n\n`WorkloadsClient` is the primary interface for developers using the Azure Workloads client library. Explore the methods on this client object to understand the different features of the Azure Workloads service that you can access.\n\n## Troubleshooting\n\n### Logging\n\nEnabling logging may help uncover useful information about failures. In order to see a log of HTTP requests and responses, set the `AZURE_LOG_LEVEL` environment variable to `info`. Alternatively, logging can be enabled at runtime by calling `setLogLevel` in the `@azure/logger`:\n\n```javascript\nconst { setLogLevel } = require(\"@azure/logger\");\nsetLogLevel(\"info\");\n```\n\nFor more detailed instructions on how to enable logs, you can look at the [@azure/logger package docs](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/core/logger).\n\n## Next steps\n\nPlease take a look at the [samples](https://github.com/Azure-Samples/azure-samples-js-management) directory for detailed examples on how to use this library.\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-js/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n## Related projects\n\n- [Microsoft Azure SDK for JavaScript](https://github.com/Azure/azure-sdk-for-js)\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-js%2Fsdk%2Fworkloads%2Farm-workloads%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#defaultazurecredential\n",
        "repo_name": "workloads/arm-workloads",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/workloads/arm-workloads",
        "language": [
            "JavaScript"
        ]
    }
]