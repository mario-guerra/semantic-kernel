[
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Advisor Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/advisor)\nCode samples for this package can be found at [Advisor](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://github.com/Azure-Samples/azure-samples-python-management/tree/main/samples/advisor)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-advisor%2FREADME.png)\n",
        "repo_name": "advisor/azure-mgmt-advisor",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/advisor/azure-mgmt-advisor",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Azure FarmBeats client library for Python\nFarmBeats is a B2B PaaS offering from Microsoft that makes it easy for AgriFood companies to build intelligent digital agriculture solutions on Azure.\u202fFarmBeats\u202fallows\u202fusers\u202fto acquire, aggregate, and process agricultural data from various sources (farm equipment, weather, satellite) without the need to invest in deep data\u202fengineering resources.\u202f Customers can build SaaS solutions on top of FarmBeats and leverage first class support for model building to generate insights at scale.\n\nUse FarmBeats client library for Python to do the following.\n\n- Create & update parties, farms, fields, seasonal fields and boundaries.\n- Ingest satellite and weather data for areas of interest.\n- Ingest farm operations data covering tilling, planting, harvesting and application of farm inputs.\n\n[Source code][source_code] | [Package (PyPi)][pypi-package] | [API reference documentation][api_docs] | [Product documentation][product_docs] | [Changelog][change_log]\n\n## Getting started\n\n### Prerequisites\n\nTo use this package, you must have:\n- Azure subscription - [Create a free account][azure_subscription]\n- Azure FarmBeats resource - [Install FarmBeats][install_farmbeats]\n- 3.6 or later - [Install Python][python]\n\n### Install the package\n\nInstall the Azure FarmBeats client library for Python with [pip][pip]:\n\n```bash\npip install azure-agrifood-farming\n```\n\n### Authenticate the client\n\nTo use an [Azure Active Directory (AAD) token credential][authenticate_with_token],\nprovide an instance of the desired credential type obtained from the\n[azure-identity][azure_identity_credentials] library.\n\nTo authenticate with AAD, you must first [pip][pip] install [`azure-identity`][azure_identity_pip] and\nenable AAD authentication on your FarmBeats resource. If you followed the [installation docs][install_farmbeats] when creating the FarmBeats\nresource, this is already covered.\n\nAfter setup, you can choose which type of [credential][azure_identity_credentials] from azure.identity to use.\nAs an example, [DefaultAzureCredential][default_azure_credential]\ncan be used to authenticate the client:\n\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables:\nAZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET\n\nUse the returned token credential to authenticate the client:\n\n```python\nfrom azure.agrifood.farming import FarmBeatsClient\nfrom azure.identity import DefaultAzureCredential\n\ncredential = DefaultAzureCredential()\nclient = FarmBeatsClient(endpoint=\"https://<my-account-name>.farmbeats.azure.net\", credential=credential)\n```\n\n## Key concepts\nBasic understanding of below terms will help to get started with FarmBeats client library.\n\n### [Farm Hierarchy][farm_hierarchy]\nFarm hierarchy is a collection of below entities.\n- Party - is the custodian of all the agronomic data.\n- Farm - is a logical collection of fields and/or seasonal fields. They do not have any area associated with them.\n- Field - is a multi-polygon area. This is expected to be stable across seasons.\n- Seasonal field - is a multi-polygon area. To define a seasonal boundary we need the details of area (boundary), time (season) and crop. New seasonal fields are expected to be created for every growing season.\n- Boundary - is the actual multi-polygon area expressed as a geometry (in geojson). It is normally associated with a field or a seasonal field. Satellite, weather and farm operations data is linked to a boundary.\n- Cascade delete - Agronomic data is stored hierarchically with party as the root. The hierarchy includes Party -> Farms -> Fields -> Seasonal Fields -> Boundaries -> Associated data (satellite, weather, farm operations). Cascade delete refers to the process of deleting any node and its subtree.\n\n### [Scenes][scenes]\nScenes refers to images normally ingested using satellite APIs. This includes raw bands and derived bands (Ex: NDVI). Scenes may also include spatial outputs of an inference or AI/ML model (Ex: LAI).\n\n### [Farm Operations][farm_operations_docs]\nFam operations includes details pertaining to tilling, planting, application of pesticides & nutrients, and harvesting. This can either be manually pushed into FarmBeats using APIs or the same information can be pulled from farm equipment service providers like John Deere.\n\n\n## Examples\n\n### Create a Party\nOnce you have authenticated and created the client object as shown in the [Authenticate the client](#authenticate-the-client)\nsection, you can create a party within the FarmBeats resource like this:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.agrifood.farming import FarmBeatsClient\n\ncredential = DefaultAzureCredential()\nclient = FarmBeatsClient(endpoint=\"https://<my-account-name>.farmbeats.azure.net\", credential=credential)\n\nparty_id = \"party-1\"\n\nparty = client.parties.create_or_update(\n    party_id=party_id,\n    party={\n        \"name\": party_name,\n        \"description\": party_description\n    }\n)\n```\n\n### Create a Farm\n\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.agrifood.farming import FarmBeatsClient\n\ncredential = DefaultAzureCredential()\nclient = FarmBeatsClient(endpoint=\"https://<my-account-name>.farmbeats.azure.net\", credential=credential)\n\nparty_id = \"party-1\" # Using party from previous example\n\nfarm = client.farms.create_or_update(\n    party_id=party_id,\n    farm_id=\"farm-1\",\n    farm={\n        \"name\": farm_name,\n        \"description\": farm_description\n    }\n)\n```\n\n### Create a Season\n\nCreating a Season object, spanning from April to August of 2021.\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.agrifood.farming import FarmBeatsClient\n\ncredential = DefaultAzureCredential()\nclient = FarmBeatsClient(endpoint=\"https://<my-account-name>.farmbeats.azure.net\", credential=credential)\n\nseason_id = \"contoso-season\"\nseason_name = \"contoso-season-name\"\nseason_description = \"contoso-season-description\"\nyear = \"2021\"\nstart_date_time = \"2021-01-01T20:08:10.137Z\"\nend_date_time = \"2021-06-06T20:08:10.137Z\"\n\nseason = client.seasons.create_or_update(\n        season_id=season_id,\n        season={\n            \"name\": season_name,\n            \"year\": year,\n            \"startDateTime\": start_date_time,\n            \"endDateTime\": end_date_time,\n            \"description\": season_description\n        }\n    )\n```\n\n### Create a Boundary\n\nCreating a Boundary for the Seasonal Field created in the preceding example.\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.agrifood.farming import FarmBeatsClient\n\ncredential = DefaultAzureCredential()\nclient = FarmBeatsClient(endpoint=\"https://<my-account-name>.farmbeats.azure.net\", credential=credential)\n\nparty_id = \"party-1\"\nboundary_id = \"boundary-1\"\n\nboundary = client.boundaries.create_or_update(\n    party_id=party_id,\n    boundary_id=boundary_id,\n    boundary={\n        \"geometry\": {\n            \"type\": \"Polygon\",\n            \"coordinates\":\n                [\n                    [\n                        [73.70457172393799, 20.545385304358106],\n                        [73.70457172393799, 20.545385304358106],\n                        [73.70448589324951, 20.542411534243367],\n                        [73.70877742767334, 20.541688176010233],\n                        [73.71023654937744, 20.545083911372505],\n                        [73.70663166046143, 20.546992723579137],\n                        [73.70457172393799, 20.545385304358106],\n                    ]\n                ]\n        },\n        \"status\": \"<string>\",\n        \"name\": \"<string>\",\n        \"description\": \"<string>\"\n    }\n)\n```\n\n### Ingest Satellite Imagery\n\nTriggering a Satellite Data Ingestion job for the boundary created above,\nto ingest Leaf Area Index data for the month of January 2020.\nThis is a Long Running Operation (also called a 'Job'), and returns\na Poller object. Calling the `.result()` method on the poller object\nwaits for the operation to terminate, and returns the final status.\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.agrifood.farming import FarmBeatsClient\n\nfrom isodate.tzinfo import Utc\nfrom datetime import datetime\n\ncredential = DefaultAzureCredential()\nclient = FarmBeatsClient(endpoint=\"https://<my-account-name>.farmbeats.azure.net\", credential=credential)\n\nparty_id = \"party-1\"\nboundary_id = \"westlake-boundary-1\"\nstart_date_time = \"2021-01-01T20:08:10.137Z\"\nend_date_time = \"2021-06-06T20:08:10.137Z\"\n\n# Queue the job\nsatellite_job_poller = client.scenes.begin_create_satellite_data_ingestion_job(\n    job_id=job_id,\n    job={\n        \"boundaryId\": boundary_id,\n        \"endDateTime\": end_date_time,\n        \"partyId\": party_id,\n        \"startDateTime\": start_date_time,\n        \"provider\": \"Microsoft\",\n        \"source\": \"Sentinel_2_L2A\",\n        \"data\": {\n            \"imageNames\": [\n                \"NDVI\"\n            ],\n            \"imageFormats\": [\n                \"TIF\"\n            ],\n            \"imageResolution\": [10]\n        },\n        \"name\": \"<string>\",\n        \"description\": \"<string>\"\n    }\n)\n\n# Wait for the job to terminate\nsatellite_job = satellite_job_poller.result()\njob_status = satellite_job_poller.status()\n```\n\n### Get Ingested Satellite Scenes\n\nQuerying for the scenes created by the job in the previous example.\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.agrifood.farming import FarmBeatsClient\n\nfrom datetime import datetime\n\ncredential = DefaultAzureCredential()\nclient = FarmBeatsClient(endpoint=\"https://<my-account-name>.farmbeats.azure.net\", credential=credential)\n\nparty_id = \"party-1\"\nboundary_id = \"boundary-1\"\n\nscenes = client.scenes.list(\n    party_id=party_id,\n    boundary_id=boundary_id,\n    start_date_time=start_date_time,\n    end_date_time=end_date_time,\n    provider=\"Microsoft\",\n    source=\"Sentinel_2_L2A\"\n)\n\nfor scene in scenes:\n    bands = [image_file[\"name\"] for image_file in scene[\"imageFiles\"]]\n    bands_str = \", \".join(bands)\n    print(f\"Scene has the bands {bands_str}\")\n```\n\n## Troubleshooting\n\n### General\n\nThe FarmBeats client will raise exceptions defined in [Azure Core][azure_core] if you call `.raise_for_status()` on your responses.\n\n### Logging\n\nThis library uses the standard\n[logging][python_logging] library for logging.\nBasic information about HTTP sessions (URLs, headers, etc.) is logged at INFO\nlevel.\n\nDetailed DEBUG level logging, including request/response bodies and unredacted\nheaders, can be enabled on a client with the `logging_enable` keyword argument:\n\n```python\nimport sys\nimport logging\nfrom azure.identity import DefaultAzureCredential\nfrom azure.agrifood.farming import FarmBeatsClient\n# Create a logger for the 'azure' SDK\nlogger = logging.getLogger('azure')\nlogger.setLevel(logging.DEBUG)\n# Configure a console output\nhandler = logging.StreamHandler(stream=sys.stdout)\nlogger.addHandler(handler)\nendpoint = \"https://<my-account-name>.farmbeats.azure.net\"\ncredential = DefaultAzureCredential()\n# This client will log detailed information about its HTTP sessions, at DEBUG level\nclient = FarmBeatsClient(endpoint=endpoint, credential=credential, logging_enable=True)\n```\n\nSimilarly, `logging_enable` can enable detailed logging for a single call,\neven when it isn't enabled for the client:\n```python\nclient.crops.get(crop_id=\"crop_id\", logging_enable=True)\n```\n\n## Next steps\n\n### Additional documentation\nFor more extensive documentation on the FarmBeats, see the [FarmBeats documentation][product_docs] on docs.microsoft.com.\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [cla.microsoft.com][cla].\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n[api_docs]: https://aka.ms/FarmBeatsAPIDocumentationPaaS\n[authenticate_with_token]: https://docs.microsoft.com/azure/cognitive-services/authentication?tabs=powershell#authenticate-with-an-authentication-token\n[azure_identity_credentials]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity#credentials\n[azure_identity_pip]: https://pypi.org/project/azure-identity/\n[azure_subscription]: https://azure.microsoft.com/free/\n[change_log]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/agrifood/azure-agrifood-farming/CHANGELOG.md\n[cla]: https://cla.microsoft.com\n[coc_contact]: mailto:opencode@microsoft.com\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[default_azure_credential]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity#defaultazurecredential/\n[farm_hierarchy]: https://aka.ms/FarmBeatsFarmHierarchyDocs\n[farm_operations_docs]: https://aka.ms/FarmBeatsFarmOperationsDocumentation\n[install_farmbeats]: https://aka.ms/FarmBeatsInstallDocumentationPaaS\n[product_docs]: https://aka.ms/FarmBeatsProductDocumentationPaaS\n[pip]: https://pypi.org/project/pip/\n[pypi]: https://pypi.org/\n[pypi-package]: https://pypi.org/project/azure-agrifood-farming/\n[python]: https://www.python.org/downloads/\n[python_logging]: https://docs.python.org/3.5/library/logging.html\n[samples]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/agrifood/azure-agrifood-farming/samples/\n[scenes]: https://aka.ms/FarmBeatsSatellitePaaSDocumentation\n[source_code]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/agrifood/azure-agrifood-farming/\n",
        "repo_name": "agrifood/azure-agrifood-farming",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/agrifood/azure-agrifood-farming",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Agrifood Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/)\nCode samples for this package can be found at [Agrifood Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-agrifood%2FREADME.png)\n",
        "repo_name": "agrifood/azure-mgmt-agrifood",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/agrifood/azure-mgmt-agrifood",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Devspaces Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/)\nCode samples for this package can be found at [Devspaces Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-devspaces%2FREADME.png)\n",
        "repo_name": "aks/azure-mgmt-devspaces",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/aks/azure-mgmt-devspaces",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Alerts Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/)\nCode samples for this package can be found at [Alerts Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-alertsmanagement%2FREADME.png)\n",
        "repo_name": "alertsmanagement/azure-mgmt-alertsmanagement",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/alertsmanagement/azure-mgmt-alertsmanagement",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Cognitive Services Anomaly Detector client library for Python\n\n[Anomaly Detector](https://learn.microsoft.com/azure/cognitive-services/Anomaly-Detector/overview) is an AI service with a set of APIs, which enables you to monitor and detect anomalies in your time series data with little machine learning (ML) knowledge, either batch validation or real-time inference.\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7 or later is required to use this package.\n- You need an [Azure subscription][azure_sub] to use this package.\n- An existing Cognitive Services Anomaly Detector instance.\n\n### Install the package\n\n```bash\npython -m pip install azure-ai-anomalydetector\n```\n\n> Note: This version of the client library defaults to the `3.0.0b6` version of the service.\n\nThis table shows the relationship between SDK versions and supported API versions of the service:\n\n|SDK version|Supported API version of service |\n|-------------|---------------|\n|3.0.0b6 | 1.1|\n|3.0.0b4, 3.0.0b5| 1.1-preview-1|\n|3.0.0b3 | 1.1-preview|\n|3.0.0b1, 3.0.0b2  | 1.0 |\n\n### Authenticate the client\n\n#### Get the endpoint\n\nYou can find the endpoint for your Anomaly Detector service resource using the\n[Azure Portal](https://ms.portal.azure.com/#create/Microsoft.CognitiveServicesAnomalyDetector)\nor [Azure CLI](https://learn.microsoft.com/cli/azure/):\n\n```bash\n# Get the endpoint for the Anomaly Detector service resource\naz cognitiveservices account show --name \"resource-name\" --resource-group \"resource-group-name\" --query \"properties.endpoint\"\n```\n\n#### Get the API Key\n\nYou can get the **API Key** from the Anomaly Detector service resource in the Azure Portal.\nAlternatively, you can use **Azure CLI** snippet below to get the API key of your resource.\n\n```PowerShell\naz cognitiveservices account keys list --resource-group <your-resource-group-name> --name <your-resource-name>\n```\n\n#### Create a AnomalyDetectorClient with an API Key Credential\n\nOnce you have the value for the API key, you can pass it as a string into an instance of **AzureKeyCredential**. Use the key as the credential parameter\nto authenticate the client:\n\n```python\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.anomalydetector import AnomalyDetectorClient\n\ncredential = AzureKeyCredential(\"<api_key>\")\nclient = AnomalyDetectorClient(endpoint=\"https://<resource-name>.cognitiveservices.azure.com/\", credential=credential)\n```\n\n## Key concepts\n\nWith the Anomaly Detector, you can either detect anomalies in one variable using **Univariate Anomaly Detection**, or detect anomalies in multiple variables with **Multivariate Anomaly Detection**.\n\n|Feature  |Description  |\n|---------|---------|\n|Univariate Anomaly Detection | Detect anomalies in one variable, like revenue, cost, etc. The model was selected automatically based on your data pattern. |\n|Multivariate Anomaly Detection| Detect anomalies in multiple variables with correlations, which are usually gathered from equipment or other complex system. The underlying model used is Graph attention network.|\n\n### Univariate Anomaly Detection\n\nThe Univariate Anomaly Detection API enables you to monitor and detect abnormalities in your time series data without having to know machine learning. The algorithms adapt by automatically identifying and applying the best-fitting models to your data, regardless of industry, scenario, or data volume. Using your time series data, the API determines boundaries for anomaly detection, expected values, and which data points are anomalies.\n\nUsing the Anomaly Detector doesn't require any prior experience in machine learning, and the REST API enables you to easily integrate the service into your applications and processes.\n\nWith the Univariate Anomaly Detection, you can automatically detect anomalies throughout your time series data, or as they occur in real-time.\n\n|Feature  |Description  |\n|---------|---------|\n| Streaming detection| Detect anomalies in your streaming data by using previously seen data points to determine if your latest one is an anomaly. This operation generates a model using the data points you send, and determines if the target point is an anomaly. By calling the API with each new data point you generate, you can monitor your data as it's created. |\n| Batch detection | Use your time series to detect any anomalies that might exist throughout your data. This operation generates a model using your entire time series data, with each point analyzed with the same model.         |\n| Change points detection | Use your time series to detect any trend change points that exist in your data. This operation generates a model using your entire time series data, with each point analyzed with the same model.    |\n\n### Multivariate Anomaly Detection\n\nThe **Multivariate Anomaly Detection** APIs further enable developers by easily integrating advanced AI for detecting anomalies from groups of metrics, without the need for machine learning knowledge or labeled data. Dependencies and inter-correlations between up to 300 different signals are now automatically counted as key factors. This new capability helps you to proactively protect your complex systems such as software applications, servers, factory machines, spacecraft, or even your business, from failures.\n\nWith the Multivariate Anomaly Detection, you can automatically detect anomalies throughout your time series data, or as they occur in real-time. There are three processes to use Multivariate Anomaly Detection.\n\n- **Training**: Use Train Model API to create and train a model, then use Get Model Status API to get the status and model metadata.\n- **Inference**:\n  - Use Async Inference API to trigger an asynchronous inference process and use Get Inference results API to get detection results on a batch of data.\n  - You could also use Sync Inference API to trigger a detection on one timestamp every time.\n- **Other operations**: List Model API and Delete Model API are supported in Multivariate Anomaly Detection model for model management.\n\n### Thread safety\n\nWe guarantee that all client instance methods are thread-safe and independent of each other ([guideline](https://azure.github.io/azure-sdk/dotnet_introduction.html#dotnet-service-methods-thread-safety)). This ensures that the recommendation of reusing client instances is always safe, even across threads.\n\n## Examples\n\nThe following section provides several code snippets covering some of the most common Anomaly Detector service tasks, including:\n\n- [Univariate Anomaly Detection - Batch detection](#batch-detection)\n- [Univariate Anomaly Detection - Streaming detection](#streaming-detection)\n- [Univariate Anomaly Detection - Detect change points](#detect-change-points)\n- [Multivariate Anomaly Detection](#multivariate-anomaly-detection-sample)\n\n### Batch detection\n\n```python\nfrom azure.ai.anomalydetector import AnomalyDetectorClient\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.anomalydetector.models import *\n\n\nSUBSCRIPTION_KEY = os.environ[\"ANOMALY_DETECTOR_KEY\"]\nANOMALY_DETECTOR_ENDPOINT = os.environ[\"ANOMALY_DETECTOR_ENDPOINT\"]\nTIME_SERIES_DATA_PATH = os.path.join(\"sample_data\", \"request-data.csv\")\nclient = AnomalyDetectorClient(ANOMALY_DETECTOR_ENDPOINT, AzureKeyCredential(SUBSCRIPTION_KEY))\n\nseries = []\ndata_file = pd.read_csv(TIME_SERIES_DATA_PATH, header=None, encoding=\"utf-8\", parse_dates=[0])\nfor index, row in data_file.iterrows():\n    series.append(TimeSeriesPoint(timestamp=row[0], value=row[1]))\n\nrequest = UnivariateDetectionOptions(\n    series=series,\n    granularity=TimeGranularity.DAILY,\n)\n\n\nif any(response.is_anomaly):\n    print(\"An anomaly was detected at index:\")\n    for i, value in enumerate(response.is_anomaly):\n        if value:\n            print(i)\nelse:\n    print(\"No anomalies were detected in the time series.\")\n\n```\n\n### Streaming Detection\n\n```python\nfrom azure.ai.anomalydetector import AnomalyDetectorClient\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.anomalydetector.models import *\n\n\nSUBSCRIPTION_KEY = os.environ[\"ANOMALY_DETECTOR_KEY\"]\nANOMALY_DETECTOR_ENDPOINT = os.environ[\"ANOMALY_DETECTOR_ENDPOINT\"]\nTIME_SERIES_DATA_PATH = os.path.join(\"sample_data\", \"request-data.csv\")\nclient = AnomalyDetectorClient(ANOMALY_DETECTOR_ENDPOINT, AzureKeyCredential(SUBSCRIPTION_KEY))\n\nseries = []\ndata_file = pd.read_csv(TIME_SERIES_DATA_PATH, header=None, encoding=\"utf-8\", parse_dates=[0])\nfor index, row in data_file.iterrows():\n    series.append(TimeSeriesPoint(timestamp=row[0], value=row[1]))\n\nrequest = UnivariateDetectionOptions(\n    series=series,\n    granularity=TimeGranularity.DAILY,\n)\nprint(\"Detecting the anomaly status of the latest data point.\")\n\nif response.is_anomaly:\n    print(\"The latest point is detected as anomaly.\")\nelse:\n    print(\"The latest point is not detected as anomaly.\")\n```\n\n### Detect change points\n\n```python\nfrom azure.ai.anomalydetector import AnomalyDetectorClient\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.anomalydetector.models import *\n\n\nSUBSCRIPTION_KEY = os.environ[\"ANOMALY_DETECTOR_KEY\"]\nANOMALY_DETECTOR_ENDPOINT = os.environ[\"ANOMALY_DETECTOR_ENDPOINT\"]\nTIME_SERIES_DATA_PATH = os.path.join(\"sample_data\", \"request-data.csv\")\nclient = AnomalyDetectorClient(ANOMALY_DETECTOR_ENDPOINT, AzureKeyCredential(SUBSCRIPTION_KEY))\n\nseries = []\ndata_file = pd.read_csv(TIME_SERIES_DATA_PATH, header=None, encoding=\"utf-8\", parse_dates=[0])\nfor index, row in data_file.iterrows():\n    series.append(TimeSeriesPoint(timestamp=row[0], value=row[1]))\n\nrequest = UnivariateChangePointDetectionOptions(\n    series=series,\n    granularity=TimeGranularity.DAILY,\n)\n\n\nif any(response.is_change_point):\n    print(\"An change point was detected at index:\")\n    for i, value in enumerate(response.is_change_point):\n        if value:\n            print(i)\nelse:\n    print(\"No change point were detected in the time series.\")\n\n```\n\n### Multivariate Anomaly Detection Sample\n\nTo see how to use Anomaly Detector library to conduct Multivariate Anomaly Detection, see this [sample](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/anomalydetector/azure-ai-anomalydetector/samples/sample_multivariate_detect.py).\n\nTo get more details of Anomaly Detector package, refer to this [azure.ai.anomalydetector package](https://azuresdkdocs.blob.core.windows.net/$web/python/azure-ai-anomalydetector/latest/azure.ai.anomalydetector.html#).\n\n## Troubleshooting\n\n### General\n\nAnomaly Detector client library will raise exceptions defined in [Azure Core](https://azuresdkdocs.blob.core.windows.net/$web/python/azure-core/latest/azure.core.html#module-azure.core.exceptions).\n\n### Logging\n\nThis library uses the standard [logging](https://docs.python.org/3/library/logging.html) library for logging.\n\nBasic information about HTTP sessions (URLs, headers, etc.) is logged at `INFO` level.\n\nDetailed `DEBUG` level logging, including request/response bodies and **unredacted**\nheaders, can be enabled on the client or per-operation with the `logging_enable` keyword argument.\n\nSee full SDK logging documentation with examples [here](https://learn.microsoft.com/azure/developer/python/sdk/azure-sdk-logging).\n\n### Optional Configuration\n\nOptional keyword arguments can be passed in at the client and per-operation level.\nThe azure-core [reference documentation](https://azuresdkdocs.blob.core.windows.net/$web/python/azure-core/latest/azure.core.html) describes available configurations for retries, logging, transport protocols, and more.\n\n## Next steps\n\nThese code samples show common scenario operations with the Azure Anomaly Detector library. More samples can be found under the [samples](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/anomalydetector/azure-ai-anomalydetector/samples/) directory.\n\n- Univariate Anomaly Detection - Batch Detection: [sample_detect_entire_series_anomaly.py](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/anomalydetector/azure-ai-anomalydetector/samples/sample_detect_entire_series_anomaly.py)\n\n- Univariate Anomaly Detection - Streaming Detection: [sample_detect_last_point_anomaly.py](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/anomalydetector/azure-ai-anomalydetector/samples/sample_detect_last_point_anomaly.py)\n\n- Univariate Anomaly Detection - Change Point Detection: [sample_detect_change_point.py](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/anomalydetector/azure-ai-anomalydetector/samples/sample_detect_change_point.py)\n\n- Multivariate Anomaly Detection: [sample_multivariate_detect.py](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/anomalydetector/azure-ai-anomalydetector/samples/sample_multivariate_detect.py)\n\n### Additional documentation\n\nFor more extensive documentation on Azure Anomaly Detector, see the [Anomaly Detector documentation](https://learn.microsoft.com/azure/cognitive-services/anomaly-detector/overview) on docs.microsoft.com.\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require\nyou to agree to a Contributor License Agreement (CLA) declaring that you have\nthe right to, and actually do, grant us the rights to use your contribution.\nFor details, visit [CLA homepage](https://cla.microsoft.com).\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether\nyou need to provide a CLA and decorate the PR appropriately (e.g., label,\ncomment). Simply follow the instructions provided by the bot. You will only\nneed to do this once across all repos using our CLA.\n\nThis project has adopted the\n[Microsoft Open Source Code of Conduct][code_of_conduct]. For more information,\nsee the Code of Conduct FAQ or contact opencode@microsoft.com with any\nadditional questions or comments.\n\n<!-- LINKS -->\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[azure_sub]: https://azure.microsoft.com/free/\n",
        "repo_name": "anomalydetector/azure-ai-anomalydetector",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/anomalydetector/azure-ai-anomalydetector",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure API Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-apimanagement\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.apimanagement import ApiManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = ApiManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\nCode samples for this package can be found at:\n- [Search API Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com\n- [Azure Python Mgmt SDK Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-apimanagement%2FREADME.png)\n",
        "repo_name": "apimanagement/azure-mgmt-apimanagement",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/apimanagement/azure-mgmt-apimanagement",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure App Management Client Library.\nThis package is deprecated. Please install the [azure-mgmt-appcontainers](https://pypi.org/project/azure-mgmt-appcontainers/) instead of it for your application.\n\nThe complete list of available packages can be found at: https://aka.ms/azsdk/python/all\n",
        "repo_name": "app/azure-mgmt-app",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/app/azure-mgmt-app",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Appcomplianceautomation Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/)\nCode samples for this package can be found at [Appcomplianceautomation Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-appcomplianceautomation%2FREADME.png)\n",
        "repo_name": "appcomplianceautomation/azure-mgmt-appcomplianceautomation",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/appcomplianceautomation/azure-mgmt-appcomplianceautomation",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Azure App Configuration Python Provider client library for Python\n\nAzure App Configuration is a managed service that helps developers centralize their application configurations simply and securely. This provider adds additional functionality above the azure-sdk-for-python.\n\nUsing the provider enables loading sets of configurations from an Azure App Configuration store in a managed way.\n\n## Getting started\n\n### Get credentials\n\nUse the [Azure CLI][azure_cli] snippet below to get the connection string from the Configuration Store.\n\n```Powershell\naz appconfig credential list --name <config-store-name>\n```\n\nAlternatively, get the connection string from the Azure Portal.\n\n### Creating a provider\n\nYou can create a client with a connection string:\n\n```python\nfrom azure.appconfiguration.provider import load\n\nconfig = load(connection_string=\"your-connection-string\")\n```\n\nor with AAD:\n\n```python\nfrom azure.appconfiguration.provider import load\n\nconfig = load(endpoint=\"your-endpoint\", credential=DefaultAzureCredential())\n```\n\nthese providers will by default load all configurations with `(No Label)` from your configuration store into a dictionary of key/values.\n\n### Features\n\nCurrently the Azure App Configuration Provider enables:\n\n* Connecting to an App Configuration Store using a connection string or Azure Active Directory.\n* Selecting multiple sets of configurations using `SettingSelector`.\n* Trim prefixes off key names.\n* Resolving Key Vault References, requires AAD.\n* Secret Resolver, resolve Key Vault References locally without connecting to Key Vault.\n* Json Content Type\n\n#### Future Features\n\nList of features we are going to add to the Python Provider in the future.\n\n* Geo-Replication support\n* Feature Management\n* Dynamic Refresh\n* Configuration Placeholders\n\n## Examples\n\n### Selecting configurations\n\nYou can refine or expand the configurations loaded from your store by using `SettingSelector`s. Setting selectors provide a way to pass a key filter and label filter into the provider.\n\n```python\nfrom azure.appconfiguration.provider import load, SettingSelector\nfrom azure.identity import DefaultAzureCredential\n\nselects = {SettingSelector(key_filter=\"*\", label_filter=\"\\0\"), SettingSelector(key_filter=\"*\", label_filter=\"dev\")}\nconfig = load(endpoint=endpoint, credential=DefaultAzureCredential(), selects=selects)\n```\n\nIn this example all configuration with empty label and the dev label are loaded. Because the dev selector is listed last, any configurations from dev take priority over those with `(No Label)` when duplicates are found.\n\n### Trimming Keys\n\nYou can trim the prefix off of keys by providing a list of trimmed key prefixes to the provider. For example, if you have the key(s) like `/application/message` in your configuration store, you could trim `/application/` from them.\n\n```python\nfrom azure.appconfiguration.provider import load\nfrom azure.identity import DefaultAzureCredential\n\ntrim_prefixes={\"/application/\"}\nconfig = load(endpoint=endpoint, credential=DefaultAzureCredential(), trim_prefixes=trim_prefixes)\nprint(config[\"message\"])\n```\n\n### Resolving Key Vault References\n\nKey Vault References can be resolved by providing credentials to your key vault to the provider using `AzureAppConfigurationKeyVaultOptions`.\n\n#### With Credentials\n\nYou can provide `AzureAppConfigurationKeyVaultOptions` with a credential and all key vault references will be resolved with it. The provider will attempt to connect to any key vault referenced with the credential provided.\n\n```python\nfrom azure.appconfiguration.provider import load, AzureAppConfigurationKeyVaultOptions\nfrom azure.identity import DefaultAzureCredential\n\nkey_vault_options = AzureAppConfigurationKeyVaultOptions(credential=DefaultAzureCredential())\nconfig = load(endpoint=endpoint, credential=DefaultAzureCredential(), key_vault_options=key_vault_options)\n```\n\n### With Clients\n\nYou can provide `AzureAppConfigurationKeyVaultOptions` with a list of `SecretClients`.\n\n```python\nfrom azure.appconfiguration.provider import load, AzureAppConfigurationKeyVaultOptions\nfrom azure.identity import DefaultAzureCredential\n\nkey_vault_options = AzureAppConfigurationKeyVaultOptions(\n    client_configs={key_vault_uri: {'credential': credential}})\nconfig = load(endpoint=endpoint, credential=DefaultAzureCredential(), key_vault_options=key_vault_options)\n```\n\n### Secret Resolver\n\nIf no Credentials or Clients are provided a secret resolver can be used. Secret resolver provides a way to return any value you want to a key vault reference.\n\n```python\nfrom azure.appconfiguration.provider import load, AzureAppConfigurationKeyVaultOptions\nfrom azure.identity import DefaultAzureCredential\n\ndef secret_resolver(uri):\n    return \"From Secret Resolver\"\n\nkey_vault_options = AzureAppConfigurationKeyVaultOptions(\n    secret_resolver=secret_resolver)\nconfig = load(endpoint=endpoint, credential=DefaultAzureCredential(), key_vault_options=key_vault_options)\n```\n\n## Key concepts\n\n## Troubleshooting\n\n## Next steps\n\nCheck out our Django and Flask examples to see how to use the provider in a web application.\n\n### [Django](https://github.com/Azure/AppConfiguration/tree/main/examples/Python/python-django-webapp-sample)\n\n### [Flask](https://github.com/Azure/AppConfiguration/tree/main/examples/Python/python-flask-webapp-sample)\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require\nyou to agree to a Contributor License Agreement (CLA) declaring that you have\nthe right to, and actually do, grant us the rights to use your contribution.\nFor details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether\nyou need to provide a CLA and decorate the PR appropriately (e.g., label,\ncomment). Simply follow the instructions provided by the bot. You will only\nneed to do this once across all repos using our CLA.\n\nThis project has adopted the\n[Microsoft Open Source Code of Conduct][code_of_conduct]. For more information,\nsee the Code of Conduct FAQ or contact <opencode@microsoft.com> with any\nadditional questions or comments.\n\n[azure_cli]: https://learn.microsoft.com/cli/azure/appconfig\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n",
        "repo_name": "appconfiguration/azure-appconfiguration-provider",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration-provider",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Azure App Configuration client library for Python\n\nAzure App Configuration is a managed service that helps developers centralize their application configurations simply and securely.\n\nModern programs, especially programs running in a cloud, generally have many components that are distributed in nature. Spreading configuration settings across these components can lead to hard-to-troubleshoot errors during an application deployment. Use App Configuration to securely store all the settings for your application in one place.\n\nUse the client library for App Configuration to create and manage application configuration settings.\n\n[Source code](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration)\n| [Package (Pypi)][package]\n| [Package (Conda)](https://anaconda.org/microsoft/azure-appconfiguration/)\n| [API reference documentation](https://learn.microsoft.com/python/api/azure-appconfiguration/azure.appconfiguration?view=azure-python)\n| [Product documentation][appconfig_docs]\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n_Python 3.7 or later is required to use this package. For more details, please refer to [Azure SDK for Python version support policy](https://github.com/Azure/azure-sdk-for-python/wiki/Azure-SDKs-Python-version-support-policy)._\n\n## Getting started\n\n### Install the package\n\nInstall the Azure App Configuration client library for Python with pip:\n\n```commandline\npip install azure-appconfiguration\n```\n\n### Prerequisites\n\n* Python 3.7 or later is required to use this package.\n* You need an [Azure subscription][azure_sub], and a [Configuration Store][configuration_store] to use this package.\n\nTo create a Configuration Store, you can use the Azure Portal or [Azure CLI][azure_cli].\n\nAfter that, create the Configuration Store:\n\n```Powershell\naz appconfig create --name <config-store-name> --resource-group <resource-group-name> --location eastus\n```\n\n### Authenticate the client\n\nIn order to interact with the App Configuration service, you'll need to create an instance of the\n[AzureAppConfigurationClient][configuration_client_class] class. To make this possible,\nyou can either use the connection string of the Configuration Store or use an AAD token.\n\n#### Use connection string\n\n##### Get credentials\n\nUse the [Azure CLI][azure_cli] snippet below to get the connection string from the Configuration Store.\n\n```Powershell\naz appconfig credential list --name <config-store-name>\n```\n\nAlternatively, get the connection string from the Azure Portal.\n\n##### Create client\n\nOnce you have the value of the connection string, you can create the AzureAppConfigurationClient:\n\n<!-- SNIPPET:hello_world_sample.create_app_config_client -->\n\n```python\nimport os\nfrom azure.appconfiguration import AzureAppConfigurationClient\n\nCONNECTION_STRING = os.environ[\"APPCONFIGURATION_CONNECTION_STRING\"]\n\n# Create app config client\nclient = AzureAppConfigurationClient.from_connection_string(CONNECTION_STRING)\n```\n\n<!-- END SNIPPET -->\n\n#### Use AAD token\n\nHere we demonstrate using [DefaultAzureCredential][default_cred_ref]\nto authenticate as a service principal. However, [AzureAppConfigurationClient][configuration_client_class]\naccepts any [azure-identity][azure_identity] credential. See the\n[azure-identity][azure_identity] documentation for more information about other\ncredentials.\n\n##### Create a service principal (optional)\nThis [Azure CLI][azure_cli] snippet shows how to create a\nnew service principal. Before using it, replace \"your-application-name\" with\nthe appropriate name for your service principal.\n\nCreate a service principal:\n```Bash\naz ad sp create-for-rbac --name http://my-application --skip-assignment\n```\n\n> Output:\n> ```json\n> {\n>     \"appId\": \"generated app id\",\n>     \"displayName\": \"my-application\",\n>     \"name\": \"http://my-application\",\n>     \"password\": \"random password\",\n>     \"tenant\": \"tenant id\"\n> }\n> ```\n\nUse the output to set **AZURE_CLIENT_ID** (\"appId\" above), **AZURE_CLIENT_SECRET**\n(\"password\" above) and **AZURE_TENANT_ID** (\"tenant\" above) environment variables.\nThe following example shows a way to do this in Bash:\n```Bash\nexport AZURE_CLIENT_ID=\"generated app id\"\nexport AZURE_CLIENT_SECRET=\"random password\"\nexport AZURE_TENANT_ID=\"tenant id\"\n```\n\nAssign one of the applicable [App Configuration roles](https://docs.microsoft.com/azure/azure-app-configuration/rest-api-authorization-azure-ad) to the service principal.\n\n##### Create a client\nOnce the **AZURE_CLIENT_ID**, **AZURE_CLIENT_SECRET** and\n**AZURE_TENANT_ID** environment variables are set,\n[DefaultAzureCredential][default_cred_ref] will be able to authenticate the\n[AzureAppConfigurationClient][configuration_client_class].\n\nConstructing the client also requires your configuration store's URL, which you can\nget from the Azure CLI or the Azure Portal. In the Azure Portal, the URL can be found listed as the service \"Endpoint\"\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.appconfiguration import AzureAppConfigurationClient\n\ncredential = DefaultAzureCredential()\n\nclient = AzureAppConfigurationClient(base_url=\"your_endpoint_url\", credential=credential)\n```\n\n## Key concepts\n\n### Configuration Setting\n\nA Configuration Setting is the fundamental resource within a Configuration Store. In its simplest form it is a key and a value. However, there are additional properties such as the modifiable content type and tags fields that allow the value to be interpreted or associated in different ways.\n\nThe Label property of a Configuration Setting provides a way to separate Configuration Settings into different dimensions. These dimensions are user defined and can take any form. Some common examples of dimensions to use for a label include regions, semantic versions, or environments. Many applications have a required set of configuration keys that have varying values as the application exists across different dimensions.\nFor example, MaxRequests may be 100 in \"NorthAmerica\", and 200 in \"WestEurope\". By creating a Configuration Setting named MaxRequests with a label of \"NorthAmerica\" and another, only with a different value, in the \"WestEurope\" label, an application can seamlessly retrieve Configuration Settings as it runs in these two dimensions.\n\nProperties of a Configuration Setting:\n\n```python\nkey : str\nlabel : str\ncontent_type : str\nvalue : str\nlast_modified : str\nread_only : bool\ntags : dict\netag : str\n```\n\n## Examples\n\nThe following sections provide several code snippets covering some of the most common Configuration Service tasks, including:\n\n* [Create a Configuration Setting](#create-a-configuration-setting)\n* [Get a Configuration Setting](#get-a-configuration-setting)\n* [Delete a Configuration Setting](#delete-a-configuration-setting)\n* [List Configuration Settings](#list-configuration-settings)\n* [Async APIs](#async-apis)\n\n### Create a Configuration Setting\n\nCreate a Configuration Setting to be stored in the Configuration Store.\nThere are two ways to store a Configuration Setting:\n\n- add_configuration_setting creates a setting only if the setting does not already exist in the store.\n\n<!-- SNIPPET:hello_world_advanced_sample.create_config_setting -->\n\n```python\nconfig_setting = ConfigurationSetting(\n    key=\"MyKey\", label=\"MyLabel\", value=\"my value\", content_type=\"my content type\", tags={\"my tag\": \"my tag value\"}\n)\nadded_config_setting = client.add_configuration_setting(config_setting)\n```\n\n<!-- END SNIPPET -->\n\n- set_configuration_setting creates a setting if it doesn't exist or overrides an existing setting.\n\n<!-- SNIPPET:hello_world_advanced_sample.set_config_setting -->\n\n```python\nadded_config_setting.value = \"new value\"\nadded_config_setting.content_type = \"new content type\"\nupdated_config_setting = client.set_configuration_setting(config_setting)\n```\n\n<!-- END SNIPPET -->\n\n### Get a Configuration Setting\n\nGet a previously stored Configuration Setting.\n\n<!-- SNIPPET:hello_world_sample.get_config_setting -->\n\n```python\nfetched_config_setting = client.get_configuration_setting(key=\"MyKey\")\n```\n\n<!-- END SNIPPET -->\n\n### Delete a Configuration Setting\n\nDelete an existing Configuration Setting.\n\n<!-- SNIPPET:hello_world_advanced_sample.delete_config_setting -->\n\n```python\nclient.delete_configuration_setting(\n    key=\"MyKey\",\n    label=\"MyLabel\",\n)\n```\n\n<!-- END SNIPPET -->\n\n### List Configuration Settings\n\nList all configuration settings filtered with label_filter and/or key_filter.\n\n<!-- SNIPPET:hello_world_advanced_sample.list_config_setting -->\n\n```python\nconfig_settings = client.list_configuration_settings(label_filter=\"MyLabel\")\nfor item in config_settings:\n    print_configuration_setting(item)\n```\n\n<!-- END SNIPPET -->\n\n### Async APIs\n\nAsync client is supported.\nTo use the async client library, import the AzureAppConfigurationClient from package azure.appconfiguration.aio instead of azure.appconfiguration\n\n<!-- SNIPPET:hello_world_sample_async.create_app_config_client -->\n\n```python\nimport os\nfrom azure.appconfiguration.aio import AzureAppConfigurationClient\n\nCONNECTION_STRING = os.environ[\"APPCONFIGURATION_CONNECTION_STRING\"]\n\n# Create app config client\nclient = AzureAppConfigurationClient.from_connection_string(CONNECTION_STRING)\n```\n\n<!-- END SNIPPET -->\n\nThis async AzureAppConfigurationClient has the same method signatures as the sync ones except that they're async.\nFor instance, to retrieve a Configuration Setting asynchronously, async_client can be used:\n\n<!-- SNIPPET:hello_world_sample_async.get_config_setting -->\n\n```python\nfetched_config_setting = await client.get_configuration_setting(key=\"MyKey\")\n```\n\n<!-- END SNIPPET -->\n\nTo use list_configuration_settings, call it synchronously and iterate over the returned async iterator asynchronously\n\n<!-- SNIPPET:hello_world_advanced_sample_async.list_config_setting -->\n\n```python\nconfig_settings = client.list_configuration_settings(label_filter=\"MyLabel\")\nasync for item in config_settings:\n    print_configuration_setting(item)\n```\n\n<!-- END SNIPPET -->\n\n## Troubleshooting\n\nSee the [troubleshooting guide][troubleshooting_guide] for details on how to diagnose various failure scenarios.\n\n## Next steps\n\n### More sample code\n\nSeveral App Configuration client library samples are available to you in this GitHub repository.  These include:\n- [Hello world](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration/samples/hello_world_sample.py) / [Async version](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration/samples/hello_world_sample_async.py)\n- [Hello world with labels](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration/samples/hello_world_advanced_sample.py) / [Async version](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration/samples/hello_world_advanced_sample_async.py)\n- [Make a configuration setting readonly](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration/samples/read_only_sample.py) / [Async version](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration/samples/hello_world_sample_async.py)\n- [Read revision history](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration/samples/list_revision_sample.py) / [Async version](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration/samples/list_revision_sample_async.py)\n- [Get a setting if changed](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration/samples/conditional_operation_sample.py) / [Async version](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration/samples/conditional_operation_sample_async.py)\n\n For more details see the [samples README](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration/samples/README.md).\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require\nyou to agree to a Contributor License Agreement (CLA) declaring that you have\nthe right to, and actually do, grant us the rights to use your contribution.\nFor details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether\nyou need to provide a CLA and decorate the PR appropriately (e.g., label,\ncomment). Simply follow the instructions provided by the bot. You will only\nneed to do this once across all repos using our CLA.\n\nThis project has adopted the\n[Microsoft Open Source Code of Conduct][code_of_conduct]. For more information,\nsee the Code of Conduct FAQ or contact opencode@microsoft.com with any\nadditional questions or comments.\n\n<!-- LINKS -->\n[appconfig_docs]: https://docs.microsoft.com/azure/azure-app-configuration/\n[appconfig_rest]: https://github.com/Azure/AppConfiguration#rest-api-reference\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[configuration_client_class]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration/azure/appconfiguration/_azure_appconfiguration_client.py\n[package]: https://pypi.org/project/azure-appconfiguration/\n[configuration_store]: https://azure.microsoft.com/services/app-configuration/\n[default_cred_ref]: https://aka.ms/azsdk-python-identity-default-cred-ref\n[azure_identity]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity\n[cla]: https://cla.microsoft.com\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n[troubleshooting_guide]: https://aka.ms/azsdk/python/appconfiguration/troubleshoot\n",
        "repo_name": "appconfiguration/azure-appconfiguration",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-appconfiguration",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure App Configuration Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-appconfiguration\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.appconfiguration import AppConfigurationManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = AppConfigurationManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\nCode samples for this package can be found at:\n- [Search App Configuration Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com\n- [Azure Python Mgmt SDK Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-appconfiguration%2FREADME.png)\n",
        "repo_name": "appconfiguration/azure-mgmt-appconfiguration",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/appconfiguration/azure-mgmt-appconfiguration",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Appcontainers Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-appcontainers\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.appcontainers import ContainerAppsAPIClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = ContainerAppsAPIClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\nCode samples for this package can be found at:\n- [Search Appcontainers Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com\n- [Azure Python Mgmt SDK Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-appcontainers%2FREADME.png)\n",
        "repo_name": "appcontainers/azure-mgmt-appcontainers",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/appcontainers/azure-mgmt-appcontainers",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "## Microsoft Azure SDK for Python\n\nThis package is no longer being maintained. Use the [azure-monitor-query](https://pypi.org/project/azure-monitor-query/) package instead.\n\nFor migration instructions, see the [migration guide](https://aka.ms/azsdk/python/migrate/ai-to-monitor-query).",
        "repo_name": "applicationinsights/azure-applicationinsights",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/applicationinsights/azure-applicationinsights",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Application Insights Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-applicationinsights\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.applicationinsights import ApplicationInsightsManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = ApplicationInsightsManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\nCode samples for this package can be found at:\n- [Search Application Insights Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com\n- [Azure Python Mgmt SDK Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-applicationinsights%2FREADME.png)\n",
        "repo_name": "applicationinsights/azure-mgmt-applicationinsights",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/applicationinsights/azure-mgmt-applicationinsights",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure App Platform Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-appplatform\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.appplatform import AppPlatformManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = AppPlatformManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\nCode samples for this package can be found at:\n- [Search App Platform Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com\n- [Azure Python Mgmt SDK Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-appplatform%2FREADME.png)\n",
        "repo_name": "appplatform/azure-mgmt-appplatform",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/appplatform/azure-mgmt-appplatform",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Web Apps Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-web\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.web import WebSiteManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = WebSiteManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\nCode samples for this package can be found at:\n- [Search Web Apps Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com\n- [Azure Python Mgmt SDK Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-web%2FREADME.png)\n",
        "repo_name": "appservice/azure-mgmt-web",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/appservice/azure-mgmt-web",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Attestation Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/)\nCode samples for this package can be found at [Attestation Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-attestation%2FREADME.png)\n",
        "repo_name": "attestation/azure-mgmt-attestation",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/attestation/azure-mgmt-attestation",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Azure Attestation client library for Python\n\nThe Microsoft Azure Attestation (MAA) service is a unified solution for remotely verifying the trustworthiness of a platform and integrity of the binaries running inside it. The service supports attestation of the platforms backed by Trusted Platform Modules (TPMs) alongside the ability to attest to the state of Trusted Execution Environments (TEEs) such as Intel(tm) Software Guard Extensions (SGX) enclaves and Virtualization-based Security (VBS) enclaves.\n\nAttestation is a process for demonstrating that software binaries were properly instantiated on a trusted platform. Remote relying parties can then gain confidence that only such intended software is running on trusted hardware. Azure Attestation is a unified customer-facing service and framework for attestation.\n\nAzure Attestation enables cutting-edge security paradigms such as Azure Confidential computing and Intelligent Edge protection. Customers have been requesting the ability to independently verify the location of a machine, the posture of a virtual machine (VM) on that machine, and the environment within which enclaves are running on that VM. Azure Attestation will empower these and many additional customer requests.\n\nAzure Attestation receives evidence from compute entities, turns them into a set of claims, validates them against configurable policies, and produces cryptographic proofs for claims-based applications (for example, relying parties and auditing authorities).\n\nThis package has been tested with Python 3.6+.\n\nFor a more complete view of Azure libraries, see the [Azure SDK for Python release page](https://aka.ms/azsdk/python/all).\n\n[Source code][source_code]\n| [Package (PyPI)][Attestation_pypi]\n| [Package (Conda)](https://anaconda.org/microsoft/azure-security-attestation/)\n| [API reference documentation][API_reference]\n| [Product documentation](https://docs.microsoft.com/azure/attestation/)\n\n## Getting started\n\n### Prerequisites\n\n* An Azure subscription.  To use Azure services, including the Azure Attestation service, you'll need a subscription.  If you do not have an existing Azure account, you may sign up for a [free trial][azure_sub] or use your [Visual Studio Subscription](https://visualstudio.microsoft.com/subscriptions/) benefits when you [create an account](https://account.windowsazure.com/Home/Index).\n* An existing Azure Attestation Instance, or you can use the \"shared provider\" available in each Azure region. If you need to create an Azure Attestation service instance, you can use the Azure Portal or [Azure CLI][azure_cli].\n\n### Install the package\n\nInstall the Azure Attestation client library for Python with [PyPI][Attestation_pypi]:\n\n```Powershell\npip install azure-security-attestation\n```\n\n### Authenticate the client\n\nIn order to interact with the Azure Attestation service, you'll need to create an instance of the [Attestation Client][attestation_client] or [Attestation Administration Client][attestation_admin_client] class. You need an **attestation endpoint**, which you may see as \"Attest URI\" in the portal,\nand **client credentials (client id, client secret, tenant id)** to instantiate a client object.\n\n[Client secret credential][ClientSecretCredential] authentication is being used in this getting started section but you can find more ways to authenticate with the [Azure identity package][azure_identity]. To use the [DefaultAzureCredential][DefaultAzureCredential] provider shown below,\nor other credential providers provided with the Azure SDK, you should install the azure-identity package:\n\n```Powershell\npip install azure-identity\n```\n\n#### Create/Get credentials\n\nUse the [Azure CLI][azure_cli] snippet below to create/get client secret credentials.\n\n* Create a service principal and configure its access to Azure resources:\n\n    ```Powershell\n    az ad sp create-for-rbac -n <your-application-name> --skip-assignment\n    ```\n\n    Output:\n\n    ```json\n    {\n        \"appId\": \"generated-app-ID\",\n        \"displayName\": \"dummy-app-name\",\n        \"name\": \"http://dummy-app-name\",\n        \"password\": \"random-password\",\n        \"tenant\": \"tenant-ID\"\n    }\n    ```\n\n* Take note of the service principal objectId\n\n    ```Powershell\n    az ad sp show --id <appId> --query objectId\n    ```\n\n    Output:\n\n    ```Powershell\n    \"<your-service-principal-object-id>\"\n    ```\n\n* Use the returned credentials above to set  **AZURE_CLIENT_ID** (appId), **AZURE_CLIENT_SECRET** (password), and **AZURE_TENANT_ID** (tenant) environment variables. The following example shows a way to do this in Powershell:\n\n    ```Powershell\n    $Env:AZURE_CLIENT_ID=\"generated-app-ID\"\n    $Env:AZURE_CLIENT_SECRET=\"random-password\"\n    $Env:AZURE_TENANT_ID=\"tenant-ID\"\n    ```\n\nFor more information about the Azure Identity APIs and how to use them, see [Azure Identity client library](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity)\n\n## Key concepts\n\nThere are four major families of functionality provided in this preview SDK:\n\n* [SGX and TPM enclave attestation.](#attestation)\n* [MAA Attestation Token signing certificate discovery and validation.](#attestation-token-signing-certificate-discovery-and-validation)\n* [Attestation Policy management.](#policy-management)\n* [Attestation policy management certificate management](#policy-management-certificate-management) (yes, policy management management).\n\nThe Microsoft Azure Attestation service runs in two separate modes: \"Isolated\" and \"AAD\". When the service is running in \"Isolated\" mode, the customer needs to\nprovide additional information beyond their authentication credentials to verify that they are authorized to modify the state of an attestation instance.\n\nFinally, each region in which the Azure Attestation service is available supports a \"shared\" instance, which\ncan be used to attest SGX enclaves which only need verification against the azure baseline (there are no policies applied to the shared instance). TPM attestation is not available in the shared instance.\nWhile the shared instance requires AAD authentication, it does not have any RBAC policies - any customer with a valid AAD bearer token can attest using the shared instance.\n\n### Attestation\n\nSGX or TPM attestation is the process of validating evidence collected from\na trusted execution environment to ensure that it meets both the Azure baseline for that environment and customer defined policies applied to that environment.\n\n### Attestation service token signing certificate discovery and validation\n\nOne of the core operational guarantees of the Azure Attestation Service is that the service operates \"operationally out of the TCB\". In other words, there is no way that a Microsoft operator could tamper with the operation of the service, or corrupt data sent from the client. To ensure this guarantee, the core of the attestation service runs in an Intel(tm) SGX enclave.\n\nTo allow customers to verify that operations were actually performed inside the enclave, most responses from the Attestation Service are encoded in a [JSON Web Token][json_web_token], which is signed by a key held within the attestation service's enclave.\n\nThis token will be signed by a signing certificate issued by the MAA service for the specified instance.\n\nIf the MAA service instance is running in a region where the service runs in an SGX enclave, then\nthe certificate issued by the server can be verified using the [oe_verify_attestation_certificate API](https://openenclave.github.io/openenclave/api/enclave_8h_a3b75c5638360adca181a0d945b45ad86.html).\n\n### Policy Management\n\nEach attestation service instance has a policy applied to it which defines additional criteria which the customer has defined.\n\nFor more information on attestation policies, see [Attestation Policy](https://docs.microsoft.com/azure/attestation/author-sign-policy)\n\n### Policy Management certificate management\n\nWhen an attestation instance is running in \"Isolated\" mode, the customer who created the instance will have provided\na policy management certificate at the time the instance is created. All policy modification operations require that the customer sign\nthe policy data with one of the existing policy management certificates. The Policy Management Certificate Management APIs enable\nclients to \"roll\" the policy management certificates.\n\n### Isolated Mode and AAD Mode\n\nEach Microsoft Azure Attestation service instance operates in either \"AAD\" mode or \"Isolated\" mode. When an MAA instance is operating in AAD mode, it means that the customer which created the attestation instance allows Azure Active Directory and Azure Role Based Access control policies to verify access to the attestation instance.\n\n### *AttestationType*\n\nThe Azure Attestation service supports attesting different types of evidence depending on the environment.\nCurrently, MAA supports the following Trusted Execution environments:\n\n* OpenEnclave - An Intel(tm) Processor running code in an SGX Enclave where the attestation evidence was collected using the OpenEnclave [oe_get_report](https://openenclave.io/apidocs/v0.14/enclave_8h_aefcb89c91a9078d595e255bd7901ac71.html#aefcb89c91a9078d595e255bd7901ac71) or [oe_get_evidence](https://openenclave.io/apidocs/v0.14/attester_8h_a7d197e42468636e95a6ab97b8e74c451.html#a7d197e42468636e95a6ab97b8e74c451) API.\n* SgxEnclave - An Intel(tm) Processor running code in an SGX Enclave where the attestation evidence was collected using the Intel SGX SDK.\n* Tpm - A Virtualization Based Security environment where the Trusted Platform Module of the processor is used to provide the attestation evidence.\n\n### Runtime Data and Inittime Data\n\nRuntimeData refers to data which is presented to the Intel SGX Quote generation logic or the `oe_get_report`/`oe_get_evidence` APIs. If the caller to the attest API provided a `runtime_data` attribute, The Azure Attestation service will validate that the first 32 bytes of the `report_data` field in the SGX Quote/OE Report/OE Evidence matches the SHA256 hash of the `runtime_data`.\n\nInitTime data refers to data which is used to configure the SGX enclave being attested.\n\n> Note that InitTime data is not supported on Azure [DCsv2-Series](https://docs.microsoft.com/azure/virtual-machines/dcv2-series) virtual machines.\n\n### Additional concepts\n\n## Examples\n\n* [Create an attestation client instance](#create-client-instance)\n* [Attest an SGX enclave](#attest-sgx-enclave)\n* [Get attestation policy](#get-attestation-policy)\n* [Retrieve token validation certificates](#retrieve-token-certificates)\n* [Create an attestation client instance](#create-client-instance)\n\n### Create client instance\n\nCreates an instance of the Attestation Client at uri `endpoint`.\n\n```python\nattest_client = AttestationClient(\n    endpoint=base_uri,\n    credential=DefaultAzureCredential())\n```\n\n### Get attestation policy\n\nThe `set_policy` method retrieves the attestation policy from the service.\nAttestation Policies are instanced on a per-attestation type basis, the `AttestationType` parameter defines the type to retrieve.\n\n```python\npolicy, token = attest_client.get_policy(AttestationType.SGX_ENCLAVE)\nprint('Instance SGX policy: ', policy)\nprint('Token: ', token)\n```\n\n### Set an attestation policy for a specified attestation type\n\nIf the attestation service instance is running in Isolated mode, the set_policy API needs to provide a signing certificate (and private key) which can be used to validate that the caller is authorized to modify policy on the attestation instance. If the service instance is running in AAD mode, then the signing certificate and key are optional.\n\nUnder the covers, the SetPolicy APIs create a [JSON Web Token][json_web_token] based on the policy document and signing information which is sent to the attestation service.\n\n```python\npolicy_set_response = attest_client.set_policy(AttestationType.SGX_ENCLAVE,\n    attestation_policy,\n    signing_key=key,\n    signing_certificate=signing_certificate)\nnew_policy, _ = attest_client.get_policy(AttestationType.SGX_ENCLAVE)\n# `new_policy` will equal `attestation_policy`.\n```\n\nIf the service instance is running in AAD mode, the call to set_policy can be\nsimplified:\n\n```python\npolicy_set_response = attest_client.set_policy(AttestationType.SGX_ENCLAVE,            \n    attestation_policy)\n# Now retrieve the policy which was just set.\nnew_policy, _ = attest_client.get_policy(AttestationType.SGX_ENCLAVE)\n\n```\n\nClients need to be able to verify that the attestation policy document was not modified before the policy document was received by the attestation service's enclave.\n\nThere are two properties provided in the [PolicyResult][attestation_policy_result] that can be used to verify that the service received the policy document:\n\n* [policy_signer][attestation_policy_result_parameters] - if the `set_policy` call included a signing certificate, this will be the certificate provided at the time of the `set_policy` call. If no policy signer was set, this will be null.\n* [policy_token_hash][attestation_policy_result_parameters] - this is the hash of the [JSON Web Token][json_web_token] sent to the service.\n\nTo verify the hash, clients can generate an attestation policy token and verify the hash generated from that token:\n\n```python\nfrom cryptography.hazmat.primitives import hashes\n\nexpected_policy = AttestationPolicyToken(\n    attestation_policy,\n    signing_key=key,\n    signing_certificate=signing_certificate)\nhasher = hashes.Hash(hashes.SHA256())\nhasher.update(expected_policy.serialize().encode('utf-8'))\nexpected_hash = hasher.finalize()\n\n# `expected_hash` will exactly match `policy_set_response.policy_token_hash`\n```\n\n### Attest SGX Enclave\n\nUse the [attest_sgx_enclave][attest_sgx] method to attest an SGX enclave.\n\nOne of the core challenges customers have interacting with encrypted environments is how to ensure that you can securely communicate with the code running in the environment (\"enclave code\").\n\nOne solution to this problem is what is known as \"Secure Key Release\", which is a pattern that enables secure communication with enclave code.\n\nTo implement the \"Secure Key Release\" pattern, the enclave code generates an ephemeral asymmetric key. It then serializes the public portion of the key to some format (possibly a JSON Web Key, or PEM, or some other serialization format).\n\nThe enclave code then calculates the SHA256 value of the public key and passes it as an input to code which generates an SGX Quote (for OpenEnclave, that would be the [oe_get_evidence](https://openenclave.io/apidocs/v0.14/attester_8h_a7d197e42468636e95a6ab97b8e74c451.html#a7d197e42468636e95a6ab97b8e74c451) or  [oe_get_report](https://openenclave.io/apidocs/v0.14/enclave_8h_aefcb89c91a9078d595e255bd7901ac71.html#aefcb89c91a9078d595e255bd7901ac71)).\n\nThe client then sends the SGX quote and the serialized key to the attestation service. The attestation service will validate the quote and ensure that the hash of the key is present in the quote and will issue an \"Attestation Token\".\n\nThe client can then send that Attestation Token (which contains the serialized key) to a 3rd party \"relying party\". The relying party then validates that the attestation token was created by the attestation service, and thus the serialized key can be used to encrypt some data held by the \"relying party\" to send to the service.\n\nThis example shows one common pattern of calling into the attestation service to retrieve an attestation token associated with a request.\n\nThis example assumes that you have an existing `AttestationClient` object which is configured with the base URI for your endpoint. It also assumes that you have an SGX Quote (`quote`) generated from within the SGX enclave you are attesting, and \"Runtime Data\" (`runtime_data`) which is referenced in the SGX Quote.\n\n```python\nresponse, token = attest_client.attest_sgx_enclave(quote, runtime_data=runtime_data)\n```\n\nAt this point, the enclave_held_data attribute in the attestationResult\nwill hold the input binary runtime_data.\n\nThe token is now passed to the \"relying party\". The relying party will\nvalidate that the token was issued by the Attestation Service. It then\nextracts the asymmetric key from the EnclaveHeldData field. The relying\nparty will then Encrypt its \"key\" data using the asymmetric key and\ntransmits it back to the enclave.\n\n```python\nencrypted_data = send_token_to_relying_party(attestationResult.Token)\n```\n\nNow the encrypted data can be passed into the enclave which can decrypt that data.\n\nAdditional information on how to perform attestation token validation can be found in the [MAA Service Attestation Sample](https://github.com/Azure-Samples/microsoft-azure-attestation).\n\n### Retrieve Token Certificates\n\nUse `get_signing_certificates` to retrieve the certificates which can be used to validate the token returned from the attestation service.\n\n```python\nsigners = attest_client.get_signing_certificates()\nfor signer in signers:\n    from cryptography.hazmat.backends import default_backend\n    cert = cryptography.x509.load_pem_x509_certificate(signer.certificates[0].encode('ascii'), backend=default_backend())\n    print('Cert  iss:', cert.issuer, '; subject:', cert.subject)\n```\n\n## Troubleshooting\n\nMost Attestation service operations will raise exceptions defined in [Azure Core](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/README.md). The attestation service APIs will throw a `HttpResponseError` on failure with helpful error codes. Many of these errors are recoverable.\n\n```python\ntry:\n    response, _ = attest_client.attest_sgx_enclave(\n        quote,\n        runtime_data=AttestationData(runtime_data, is_json=False))\nexcept HttpResponseError as ex:\n    # Ignore invalid quote errors.\n    if ex.error == \"InvalidParameter\":\n        pass\n}\n```\n\nAdditional troubleshooting information for the MAA service can be found [here](https://docs.microsoft.com/python/api/overview/azure/attestation?view=azure-python-preview)\n\n## Next steps\n\nFor more information about the Microsoft Azure Attestation service, please see our [documentation page](https://docs.microsoft.com/azure/attestation/).\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [the Contributor License Agreement site](https://cla.microsoft.com).\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][microsoft_code_of_conduct]. For more information see the Code of Conduct FAQ or contact <opencode@microsoft.com> with any additional questions or comments.\n\nSee [CONTRIBUTING.md][contributing] for details on building, testing, and contributing to these libraries.\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project.\n\n<!-- LINKS -->\n[source_code]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/attestation/azure-security-attestation\n[azure_identity]: https://docs.microsoft.com/python/api/overview/azure/identity-readme?view=azure-python-preview\n[DefaultAzureCredential]: https://docs.microsoft.com/python/api/azure-identity/azure.identity.defaultazurecredential?view=azure-python\n[ClientSecretCredential]: https://docs.microsoft.com/python/api/azure-identity/azure.identity.clientsecretcredential?view=azure-python\n[attestation_policy_result]:https://docs.microsoft.com/python/api/azure-security-attestation/azure.security.attestation.attestationpolicyresult\n[attestation_client]: https://docs.microsoft.com/python/api/azure-security-attestation/azure.security.attestation.attestationclient\n[attestation_admin_client]: https://docs.microsoft.com/python/api/azure-security-attestation/azure.security.attestation.attestationadministrationclient\n[attestation_policy_result_parameters]: https://docs.microsoft.com/python/api/azure-security-attestation/azure.security.attestation.attestationpolicyresult#parameters\n[attest_sgx]: https://docs.microsoft.com/python/api/azure-security-attestation/azure.security.attestation.attestationclient?view=azure-python-preview#attest-sgx-enclave-quote--inittime-data-none--runtime-data-none--draft-policy-none----kwargs-\n[attestation_pypi]: https://aka.ms/azsdk/python/azure-security-attestation\n[API_reference]:https://docs.microsoft.com/python/api/overview/azure/security-attestation-readme?view=azure-python-preview\n[style-guide-msft]: https://docs.microsoft.com/style-guide/capitalization\n[style-guide-cloud]: https://aka.ms/azsdk/cloud-style-guide\n[microsoft_code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[json_web_token]: https://tools.ietf.org/html/rfc7519\n[JWK]: https://tools.ietf.org/html/rfc7517\n[base64url_encoding]: https://tools.ietf.org/html/rfc4648#section-5\n[contributing]: https://github.com/Azure/azure-sdk-for-python/blob/main/CONTRIBUTING.md\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fsdk%2Fattestation%2Fazure-security-attestation%2FREADME.png)\n",
        "repo_name": "attestation/azure-security-attestation",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/attestation/azure-security-attestation",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Authorization Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-authorization\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.authorization import AuthorizationManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = AuthorizationManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\n\nCode samples for this package can be found at [Authorization Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com and [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-authorization%2FREADME.png)\n",
        "repo_name": "authorization/azure-mgmt-authorization",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/authorization/azure-mgmt-authorization",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Auto Manage Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/)\nCode samples for this package can be found at [Auto Manage Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://github.com/Azure-Samples/azure-samples-python-management/tree/main/samples/automanage)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-automanage%2FREADME.png)\n",
        "repo_name": "automanage/azure-mgmt-automanage",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/automanage/azure-mgmt-automanage",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Automation Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/)\nCode samples for this package can be found at [Automation](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-automation%2FREADME.png)\n",
        "repo_name": "automation/azure-mgmt-automation",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/automation/azure-mgmt-automation",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Azure Arc Data Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/)\nCode samples for this package can be found at [Azure Arc Data Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-azurearcdata%2FREADME.png)\n",
        "repo_name": "azurearcdata/azure-mgmt-azurearcdata",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/azurearcdata/azure-mgmt-azurearcdata",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Azure Stack Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/)\nCode samples for this package can be found at [Azure Stack Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-azurestack%2FREADME.png)\n",
        "repo_name": "azurestack/azure-mgmt-azurestack",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/azurestack/azure-mgmt-azurestack",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Azure Stack HCI Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/)\nCode samples for this package can be found at [Azure Stack HCI Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-azurestackhci%2FREADME.png)\n",
        "repo_name": "azurestackhci/azure-mgmt-azurestackhci",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/azurestackhci/azure-mgmt-azurestackhci",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Bare Metal Infrastructure Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/)\nCode samples for this package can be found at [Bare Metal Infrastructure Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-baremetalinfrastructure%2FREADME.png)\n",
        "repo_name": "baremetalinfrastructure/azure-mgmt-baremetalinfrastructure",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/baremetalinfrastructure/azure-mgmt-baremetalinfrastructure",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Batch Client Library.\n\nThis package has been tested with Python 3.6+\n\nFor a more complete set of Azure libraries, see https://aka.ms/azsdk/python/all\n\n# Usage\n\nFor code examples, see [the Batch samples repo](https://github.com/Azure/azure-batch-samples/tree/master/Python)\non GitHub or see [Batch](https://docs.microsoft.com/python/api/overview/azure/batch)\non docs.microsoft.com.\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project.\n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-batch%2FREADME.png)\n",
        "repo_name": "batch/azure-batch",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/batch/azure-batch",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Batch Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/batch)\nCode samples for this package can be found at [Batch Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://github.com/Azure-Samples/azure-samples-python-management/tree/main/samples/batch)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-batch%2FREADME.png)\n",
        "repo_name": "batch/azure-mgmt-batch",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/batch/azure-mgmt-batch",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Batch AI Management Client Library.\nThis package has been tested with Python 3.6+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n\n\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/)\nCode samples for this package can be found at [Batch AI Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-batchai%2FREADME.png)\n",
        "repo_name": "batchai/azure-mgmt-batchai",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/batchai/azure-mgmt-batchai",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Billing Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/billing)\nCode samples for this package can be found at [Billing](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-billing%2FREADME.png)\n",
        "repo_name": "billing/azure-mgmt-billing",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/billing/azure-mgmt-billing",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Billingbenefits Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/)\nCode samples for this package can be found at [Billingbenefits Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-billingbenefits%2FREADME.png)\n",
        "repo_name": "billingbenefits/azure-mgmt-billingbenefits",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/billingbenefits/azure-mgmt-billingbenefits",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Bot Service Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-botservice\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.botservice import AzureBotService\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = AzureBotService(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\n\nCode samples for this package can be found at [Bot Service](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com and [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-botservice%2FREADME.png)\n",
        "repo_name": "botservice/azure-mgmt-botservice",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/botservice/azure-mgmt-botservice",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure CDN Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/cdn)\nCode samples for this package can be found at [CDN Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://github.com/Azure-Samples/azure-samples-python-management/tree/main/samples/cdn)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-cdn%2FREADME.png)\n",
        "repo_name": "cdn/azure-mgmt-cdn",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/cdn/azure-mgmt-cdn",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Change Analysis Management Client Library.\nThis package has been tested with Python 3.6+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n\n\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/)\nCode samples for this package can be found at [Change Analysis Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-changeanalysis%2FREADME.png)\n",
        "repo_name": "changeanalysis/azure-mgmt-changeanalysis",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/changeanalysis/azure-mgmt-changeanalysis",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Chaos Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/)\nCode samples for this package can be found at [Chaos Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-chaos%2FREADME.png)\n",
        "repo_name": "chaos/azure-mgmt-chaos",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/chaos/azure-mgmt-chaos",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "[![Build Status](https://dev.azure.com/azure-sdk/public/_apis/build/status/azure-sdk-for-python.client?branchName=main)](https://dev.azure.com/azure-sdk/public/_build/latest?definitionId=46?branchName=main)\n\n# Azure Conversational Language Understanding client library for Python\nConversational Language Understanding - aka **CLU** for short - is a cloud-based conversational AI service which provides many language understanding capabilities like:\n- Conversation App: It's used in extracting intents and entities in conversations\n- Workflow app: Acts like an orchestrator to select the best candidate to analyze conversations to get best response from apps like Qna, Luis, and Conversation App\n- Conversational Summarization: Used to analyze conversations in the form of issues/resolution, chapter title, and narrative summarizations\n\n[Source code][conversationallanguage_client_src]\n| [Package (PyPI)][conversationallanguage_pypi_package]\n| [Package (Conda)](https://anaconda.org/microsoft/azure-ai-language-conversations/)\n| [API reference documentation][api_reference_documentation]\n| [Samples][conversationallanguage_samples]\n| [Product documentation][conversationallanguage_docs]\n| [REST API documentation][conversationallanguage_restdocs]\n\n## Getting started\n\n### Prerequisites\n\n* Python 3.7 or later is required to use this package.\n* An [Azure subscription][azure_subscription]\n* A [Language service resource][language_resource]\n\n\n### Install the package\n\nInstall the Azure Conversations client library for Python with [pip][pip_link]:\n\n```bash\npip install azure-ai-language-conversations\n```\n\n> Note: This version of the client library defaults to the 2023-04-01 version of the service\n\n### Authenticate the client\nIn order to interact with the CLU service, you'll need to create an instance of the [ConversationAnalysisClient][conversationanalysisclient_class] class, or [ConversationAuthoringClient][conversationauthoringclient_class] class. You will need an **endpoint**, and an **API key** to instantiate a client object. For more information regarding authenticating with Cognitive Services, see [Authenticate requests to Azure Cognitive Services][cognitive_auth].\n\n#### Get an API key\nYou can get the **endpoint** and an **API key** from the Cognitive Services resource in the [Azure Portal][azure_portal].\n\nAlternatively, use the [Azure CLI][azure_cli] command shown below to get the API key from the Cognitive Service resource.\n\n```powershell\naz cognitiveservices account keys list --resource-group <resource-group-name> --name <resource-name>\n```\n\n\n#### Create ConversationAnalysisClient\nOnce you've determined your **endpoint** and **API key** you can instantiate a `ConversationAnalysisClient`:\n\n```python\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.language.conversations import ConversationAnalysisClient\n\nendpoint = \"https://<my-custom-subdomain>.cognitiveservices.azure.com/\"\ncredential = AzureKeyCredential(\"<api-key>\")\nclient = ConversationAnalysisClient(endpoint, credential)\n```\n\n#### Create ConversationAuthoringClient\nOnce you've determined your **endpoint** and **API key** you can instantiate a `ConversationAuthoringClient`:\n\n```python\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.language.conversations.authoring import ConversationAuthoringClient\n\nendpoint = \"https://<my-custom-subdomain>.cognitiveservices.azure.com/\"\ncredential = AzureKeyCredential(\"<api-key>\")\nclient = ConversationAuthoringClient(endpoint, credential)\n```\n\n#### Create a client with an Azure Active Directory Credential\n\nTo use an [Azure Active Directory (AAD) token credential][cognitive_authentication_aad],\nprovide an instance of the desired credential type obtained from the\n[azure-identity][azure_identity_credentials] library.\nNote that regional endpoints do not support AAD authentication. Create a [custom subdomain][custom_subdomain]\nname for your resource in order to use this type of authentication.\n\nAuthentication with AAD requires some initial setup:\n\n- [Install azure-identity][install_azure_identity]\n- [Register a new AAD application][register_aad_app]\n- [Grant access][grant_role_access] to the Language service by assigning the \"Cognitive Services Language Reader\" role to your service principal.\n\nAfter setup, you can choose which type of [credential][azure_identity_credentials] from azure.identity to use.\nAs an example, [DefaultAzureCredential][default_azure_credential]\ncan be used to authenticate the client:\n\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables:\n`AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`\n\nUse the returned token credential to authenticate the client:\n\n```python\nfrom azure.ai.language.conversations import ConversationAnalysisClient\nfrom azure.identity import DefaultAzureCredential\n\ncredential = DefaultAzureCredential()\nclient = ConversationAnalysisClient(endpoint=\"https://<my-custom-subdomain>.cognitiveservices.azure.com/\", credential=credential)\n```\n\n## Key concepts\n\n### ConversationAnalysisClient\nThe [ConversationAnalysisClient][conversationanalysisclient_class] is the primary interface for making predictions using your deployed Conversations models. For asynchronous operations, an async `ConversationAnalysisClient` is in the `azure.ai.language.conversation.aio` namespace.\n\n### ConversationAuthoringClient\nYou can use the [ConversationAuthoringClient][conversationauthoringclient_class] to interface with the [Azure Language Portal][azure_language_portal] to carry out authoring operations on your language resource/project. For example, you can use it to create a project, populate with training data, train, test, and deploy. For asynchronous operations, an async `ConversationAuthoringClient` is in the `azure.ai.language.conversation.authoring.aio` namespace.\n\n## Examples\nThe `azure-ai-language-conversation` client library provides both synchronous and asynchronous APIs.\n\nThe following examples show common scenarios using the `client` [created above](#create-conversationanalysisclient).\n\n### Analyze Text with a Conversation App\nIf you would like to extract custom intents and entities from a user utterance, you can call the `client.analyze_conversation()` method with your conversation's project name as follows:\n\n\n```python\n# import libraries\nimport os\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.language.conversations import ConversationAnalysisClient\n\n# get secrets\nclu_endpoint = os.environ[\"AZURE_CONVERSATIONS_ENDPOINT\"]\nclu_key = os.environ[\"AZURE_CONVERSATIONS_KEY\"]\nproject_name = os.environ[\"AZURE_CONVERSATIONS_PROJECT_NAME\"]\ndeployment_name = os.environ[\"AZURE_CONVERSATIONS_DEPLOYMENT_NAME\"]\n\n# analyze quey\nclient = ConversationAnalysisClient(clu_endpoint, AzureKeyCredential(clu_key))\nwith client:\n    query = \"Send an email to Carol about the tomorrow's demo\"\n    result = client.analyze_conversation(\n        task={\n            \"kind\": \"Conversation\",\n            \"analysisInput\": {\n                \"conversationItem\": {\n                    \"participantId\": \"1\",\n                    \"id\": \"1\",\n                    \"modality\": \"text\",\n                    \"language\": \"en\",\n                    \"text\": query\n                },\n                \"isLoggingEnabled\": False\n            },\n            \"parameters\": {\n                \"projectName\": project_name,\n                \"deploymentName\": deployment_name,\n                \"verbose\": True\n            }\n        }\n    )\n\n# view result\nprint(\"query: {}\".format(result[\"result\"][\"query\"]))\nprint(\"project kind: {}\\n\".format(result[\"result\"][\"prediction\"][\"projectKind\"]))\n\nprint(\"top intent: {}\".format(result[\"result\"][\"prediction\"][\"topIntent\"]))\nprint(\"category: {}\".format(result[\"result\"][\"prediction\"][\"intents\"][0][\"category\"]))\nprint(\"confidence score: {}\\n\".format(result[\"result\"][\"prediction\"][\"intents\"][0][\"confidenceScore\"]))\n\nprint(\"entities:\")\nfor entity in result[\"result\"][\"prediction\"][\"entities\"]:\n    print(\"\\ncategory: {}\".format(entity[\"category\"]))\n    print(\"text: {}\".format(entity[\"text\"]))\n    print(\"confidence score: {}\".format(entity[\"confidenceScore\"]))\n    if \"resolutions\" in entity:\n        print(\"resolutions\")\n        for resolution in entity[\"resolutions\"]:\n            print(\"kind: {}\".format(resolution[\"resolutionKind\"]))\n            print(\"value: {}\".format(resolution[\"value\"]))\n    if \"extraInformation\" in entity:\n        print(\"extra info\")\n        for data in entity[\"extraInformation\"]:\n            print(\"kind: {}\".format(data[\"extraInformationKind\"]))\n            if data[\"extraInformationKind\"] == \"ListKey\":\n                print(\"key: {}\".format(data[\"key\"]))\n            if data[\"extraInformationKind\"] == \"EntitySubtype\":\n                print(\"value: {}\".format(data[\"value\"]))\n```\n\n### Analyze Text with an Orchestration App\n\nIf you would like to pass the user utterance to your orchestrator (worflow) app, you can call the `client.analyze_conversation()` method with your orchestration's project name. The orchestrator project simply orchestrates the submitted user utterance between your language apps (Luis, Conversation, and Question Answering) to get the best response according to the user intent. See the next example:\n\n\n```python\n# import libraries\nimport os\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.language.conversations import ConversationAnalysisClient\n\n# get secrets\nclu_endpoint = os.environ[\"AZURE_CONVERSATIONS_ENDPOINT\"]\nclu_key = os.environ[\"AZURE_CONVERSATIONS_KEY\"]\nproject_name = os.environ[\"AZURE_CONVERSATIONS_WORKFLOW_PROJECT_NAME\"]\ndeployment_name = os.environ[\"AZURE_CONVERSATIONS_WORKFLOW_DEPLOYMENT_NAME\"]\n\n# analyze query\nclient = ConversationAnalysisClient(clu_endpoint, AzureKeyCredential(clu_key))\nwith client:\n    query = \"Reserve a table for 2 at the Italian restaurant\"\n    result = client.analyze_conversation(\n        task={\n            \"kind\": \"Conversation\",\n            \"analysisInput\": {\n                \"conversationItem\": {\n                    \"participantId\": \"1\",\n                    \"id\": \"1\",\n                    \"modality\": \"text\",\n                    \"language\": \"en\",\n                    \"text\": query\n                },\n                \"isLoggingEnabled\": False\n            },\n            \"parameters\": {\n                \"projectName\": project_name,\n                \"deploymentName\": deployment_name,\n                \"verbose\": True\n            }\n        }\n    )\n\n# view result\nprint(\"query: {}\".format(result[\"result\"][\"query\"]))\nprint(\"project kind: {}\\n\".format(result[\"result\"][\"prediction\"][\"projectKind\"]))\n\n# top intent\ntop_intent = result[\"result\"][\"prediction\"][\"topIntent\"]\nprint(\"top intent: {}\".format(top_intent))\ntop_intent_object = result[\"result\"][\"prediction\"][\"intents\"][top_intent]\nprint(\"confidence score: {}\".format(top_intent_object[\"confidenceScore\"]))\nprint(\"project kind: {}\".format(top_intent_object[\"targetProjectKind\"]))\n\nif top_intent_object[\"targetProjectKind\"] == \"Luis\":\n    print(\"\\nluis response:\")\n    luis_response = top_intent_object[\"result\"][\"prediction\"]\n    print(\"top intent: {}\".format(luis_response[\"topIntent\"]))\n    print(\"\\nentities:\")\n    for entity in luis_response[\"entities\"]:\n        print(\"\\n{}\".format(entity))\n```\n\n### Conversational Summarization\n\nYou can use this sample if you need to summarize a conversation in the form of an issue, and final resolution. For example, a dialog from tech support:\n\n```python\n# import libraries\nimport os\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.language.conversations import ConversationAnalysisClient\n# get secrets\nendpoint = os.environ[\"AZURE_CONVERSATIONS_ENDPOINT\"]\nkey = os.environ[\"AZURE_CONVERSATIONS_KEY\"]\n# analyze query\nclient = ConversationAnalysisClient(endpoint, AzureKeyCredential(key))\nwith client:\n    poller = client.begin_conversation_analysis(\n        task={\n            \"displayName\": \"Analyze conversations from xxx\",\n            \"analysisInput\": {\n                \"conversations\": [\n                    {\n                        \"conversationItems\": [\n                            {\n                                \"text\": \"Hello, how can I help you?\",\n                                \"modality\": \"text\",\n                                \"id\": \"1\",\n                                \"participantId\": \"Agent\"\n                            },\n                            {\n                                \"text\": \"How to upgrade Office? I am getting error messages the whole day.\",\n                                \"modality\": \"text\",\n                                \"id\": \"2\",\n                                \"participantId\": \"Customer\"\n                            },\n                            {\n                                \"text\": \"Press the upgrade button please. Then sign in and follow the instructions.\",\n                                \"modality\": \"text\",\n                                \"id\": \"3\",\n                                \"participantId\": \"Agent\"\n                            }\n                        ],\n                        \"modality\": \"text\",\n                        \"id\": \"conversation1\",\n                        \"language\": \"en\"\n                    },\n                ]\n            },\n            \"tasks\": [\n                {\n                    \"taskName\": \"Issue task\",\n                    \"kind\": \"ConversationalSummarizationTask\",\n                    \"parameters\": {\n                        \"summaryAspects\": [\"issue\"]\n                    }\n                },\n                {\n                    \"taskName\": \"Resolution task\",\n                    \"kind\": \"ConversationalSummarizationTask\",\n                    \"parameters\": {\n                        \"summaryAspects\": [\"resolution\"]\n                    }\n                },\n            ]\n        }\n    )\n\n    # view result\n    result = poller.result()\n    task_results = result[\"tasks\"][\"items\"]\n    for task in task_results:\n        print(f\"\\n{task['taskName']} status: {task['status']}\")\n        task_result = task[\"results\"]\n        if task_result[\"errors\"]:\n            print(\"... errors occurred ...\")\n            for error in task_result[\"errors\"]:\n                print(error)\n        else:\n            conversation_result = task_result[\"conversations\"][0]\n            if conversation_result[\"warnings\"]:\n                print(\"... view warnings ...\")\n                for warning in conversation_result[\"warnings\"]:\n                    print(warning)\n            else:\n                summaries = conversation_result[\"summaries\"]\n                print(\"... view task result ...\")\n                for summary in summaries:\n                    print(f\"{summary['aspect']}: {summary['text']}\")\n```\n\n### Import a Conversation Project\nThis sample shows a common scenario for the authoring part of the SDK\n\n```python\nimport os\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.language.conversations.authoring import ConversationAuthoringClient\n\nclu_endpoint = os.environ[\"AZURE_CONVERSATIONS_ENDPOINT\"]\nclu_key = os.environ[\"AZURE_CONVERSATIONS_KEY\"]\n\nproject_name = \"test_project\"\n\nexported_project_assets = {\n    \"projectKind\": \"Conversation\",\n    \"intents\": [{\"category\": \"Read\"}, {\"category\": \"Delete\"}],\n    \"entities\": [{\"category\": \"Sender\"}],\n    \"utterances\": [\n        {\n            \"text\": \"Open Blake's email\",\n            \"dataset\": \"Train\",\n            \"intent\": \"Read\",\n            \"entities\": [{\"category\": \"Sender\", \"offset\": 5, \"length\": 5}],\n        },\n        {\n            \"text\": \"Delete last email\",\n            \"language\": \"en-gb\",\n            \"dataset\": \"Test\",\n            \"intent\": \"Delete\",\n            \"entities\": [],\n        },\n    ],\n}\n\nclient = ConversationAuthoringClient(\n    clu_endpoint, AzureKeyCredential(clu_key)\n)\npoller = client.begin_import_project(\n    project_name=project_name,\n    project={\n        \"assets\": exported_project_assets,\n        \"metadata\": {\n            \"projectKind\": \"Conversation\",\n            \"settings\": {\"confidenceThreshold\": 0.7},\n            \"projectName\": \"EmailApp\",\n            \"multilingual\": True,\n            \"description\": \"Trying out CLU\",\n            \"language\": \"en-us\",\n        },\n        \"projectFileVersion\": \"2022-05-01\",\n    },\n)\nresponse = poller.result()\nprint(response)\n\n```\n\n\n## Optional Configuration\n\nOptional keyword arguments can be passed in at the client and per-operation level. The azure-core [reference documentation][azure_core_ref_docs] describes available configurations for retries, logging, transport protocols, and more.\n\n## Troubleshooting\n\n### General\n\nThe Conversations client will raise exceptions defined in [Azure Core][azure_core_exceptions].\n\n### Logging\n\nThis library uses the standard\n[logging][python_logging] library for logging.\nBasic information about HTTP sessions (URLs, headers, etc.) is logged at INFO\nlevel.\n\nDetailed DEBUG level logging, including request/response bodies and unredacted\nheaders, can be enabled on a client with the `logging_enable` argument.\n\nSee full SDK logging documentation with examples [here][sdk_logging_docs].\n\n```python\nimport sys\nimport logging\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.language.conversations import ConversationAnalysisClient\n\n# Create a logger for the 'azure' SDK\nlogger = logging.getLogger('azure')\nlogger.setLevel(logging.DEBUG)\n\n# Configure a console output\nhandler = logging.StreamHandler(stream=sys.stdout)\nlogger.addHandler(handler)\n\nendpoint = \"https://<my-custom-subdomain>.cognitiveservices.azure.com/\"\ncredential = AzureKeyCredential(\"<my-api-key>\")\n\n# This client will log detailed information about its HTTP sessions, at DEBUG level\nclient = ConversationAnalysisClient(endpoint, credential, logging_enable=True)\nresult = client.analyze_conversation(...)\n```\n\nSimilarly, `logging_enable` can enable detailed logging for a single operation, even when it isn't enabled for the client:\n\n```python\nresult = client.analyze_conversation(..., logging_enable=True)\n```\n\n## Next steps\n\n### More sample code\n\nSee the [Sample README][conversationallanguage_samples] for several code snippets illustrating common patterns used in the CLU Python API.\n\n## Contributing\n\nSee the [CONTRIBUTING.md][contributing] for details on building, testing, and contributing to this library.\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [cla.microsoft.com][cla].\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n[azure_cli]: https://docs.microsoft.com/cli/azure/\n[azure_portal]: https://portal.azure.com/\n[azure_subscription]: https://azure.microsoft.com/free/\n[language_resource]: https://portal.azure.com/#create/Microsoft.CognitiveServicesTextAnalytics\n[cla]: https://cla.microsoft.com\n[coc_contact]: mailto:opencode@microsoft.com\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[cognitive_auth]: https://docs.microsoft.com/azure/cognitive-services/authentication/\n[contributing]: https://github.com/Azure/azure-sdk-for-python/blob/main/CONTRIBUTING.md\n[python_logging]: https://docs.python.org/3/library/logging.html\n[sdk_logging_docs]: https://docs.microsoft.com/azure/developer/python/azure-sdk-logging\n[azure_core_ref_docs]: https://azuresdkdocs.blob.core.windows.net/$web/python/azure-core/latest/azure.core.html\n[azure_core_readme]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/README.md\n[pip_link]:https://pypi.org/project/pip/\n[conversationallanguage_client_src]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/cognitivelanguage/azure-ai-language-conversations\n[conversationallanguage_pypi_package]: https://pypi.org/project/azure-ai-language-conversations/\n[api_reference_documentation]:https://azuresdkdocs.blob.core.windows.net/$web/python/azure-ai-language-conversations/latest/azure.ai.language.conversations.html\n[conversationallanguage_refdocs]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/cognitivelanguage/azure-ai-language-conversations\n[conversationallanguage_docs]: https://docs.microsoft.com/azure/cognitive-services/language-service/conversational-language-understanding/overview\n[conversationallanguage_samples]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/cognitivelanguage/azure-ai-language-conversations/samples/README.md\n[conversationallanguage_restdocs]: https://learn.microsoft.com/rest/api/language/\n[conversationanalysisclient_class]: https://azuresdkdocs.blob.core.windows.net/$web/python/azure-ai-language-conversations/latest/azure.ai.language.conversations.html#azure.ai.language.conversations.ConversationAnalysisClient\n[conversationauthoringclient_class]: https://azuresdkdocs.blob.core.windows.net/$web/python/azure-ai-language-conversations/latest/azure.ai.language.conversations.html#azure.ai.language.conversations.ConversationAuthoringClient\n[azure_core_exceptions]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/README.md\n[azure_language_portal]: https://language.cognitive.azure.com/home\n[cognitive_authentication_aad]: https://docs.microsoft.com/azure/cognitive-services/authentication#authenticate-with-azure-active-directory\n[azure_identity_credentials]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity#credentials\n[custom_subdomain]: https://docs.microsoft.com/azure/cognitive-services/authentication#create-a-resource-with-a-custom-subdomain\n[install_azure_identity]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity#install-the-package\n[register_aad_app]: https://docs.microsoft.com/azure/cognitive-services/authentication#assign-a-role-to-a-service-principal\n[grant_role_access]: https://docs.microsoft.com/azure/cognitive-services/authentication#assign-a-role-to-a-service-principal\n[default_azure_credential]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity#defaultazurecredential\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fsdk%2Ftemplate%2Fazure-template%2FREADME.png)\n",
        "repo_name": "cognitivelanguage/azure-ai-language-conversations",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/cognitivelanguage/azure-ai-language-conversations",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Azure Cognitive Language Service Question Answering client library for Python\n\nQuestion Answering is a cloud-based API service that lets you create a conversational question-and-answer layer over your existing data. Use it to build a knowledge base by extracting questions and answers from your semi-structured content, including FAQ, manuals, and documents. Answer users\u2019 questions with the best answers from the QnAs in your knowledge base\u2014automatically. Your knowledge base gets smarter, too, as it continually learns from users' behavior.\n\n[Source code][questionanswering_client_src]\n| [Package (PyPI)][questionanswering_pypi_package]\n| [Package (Conda)](https://anaconda.org/microsoft/azure-ai-language-questionanswering/)\n| [API reference documentation][questionanswering_refdocs]\n| [Product documentation][questionanswering_docs]\n| [Samples][questionanswering_samples]\n| [Analysis REST API documentation][questionanswering_rest_docs]\n| [Authoring REST API documentation][questionanswering_rest_docs_authoring]\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7 or later is required to use this package.\n- An [Azure subscription][azure_subscription]\n- A [Language Service][language_service] resource\n\n### Install the package\n\nInstall the Azure Question Answering client library for Python with [pip][pip_link]:\n\n```bash\npip install azure-ai-language-questionanswering\n```\n\n> Note: this version of the client library defaults to the service API version `2021-10-01`.\n\n### Authenticate the client\n\nIn order to interact with the Question Answering service, you'll need to create an instance of the [QuestionAnsweringClient][questionanswering_client_class] class or an instance of the [AuthoringClient][authoring_client_class] for managing projects within your resource. You will need an **endpoint**, and an **API key** to instantiate a client object. For more information regarding authenticating with Cognitive Services, see [Authenticate requests to Azure Cognitive Services][cognitive_auth].\n\n#### Get an API key\n\nYou can get the **endpoint** and an **API key** from the Language resource in the [Azure Portal][azure_portal].\n\nAlternatively, use the [Azure CLI][azure_cli] command shown below to get the API key from the Language resource.\n\n```powershell\naz cognitiveservices account keys list --resource-group <resource-group-name> --name <resource-name>\n```\n\n#### Create QuestionAnsweringClient\n\nOnce you've determined your **endpoint** and **API key** you can instantiate a [QuestionAnsweringClient][questionanswering_client_class]:\n\n```python\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.language.questionanswering import QuestionAnsweringClient\n\nendpoint = \"https://{myaccount}.api.cognitive.microsoft.com\"\ncredential = AzureKeyCredential(\"{api-key}\")\n\nclient = QuestionAnsweringClient(endpoint, credential)\n```\n\n#### Create AuthoringClient\nWith your endpoint and API key, you can instantiate a [AuthoringClient][authoring_client_class]:\n\n```python\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.language.questionanswering.authoring import AuthoringClient\n\nendpoint = \"https://{myaccount}.api.cognitive.microsoft.com\"\ncredential = AzureKeyCredential(\"{api-key}\")\n\nclient = AuthoringClient(endpoint, credential)\n```\n\n#### Create a client with an Azure Active Directory Credential\n\nTo use an [Azure Active Directory (AAD) token credential][cognitive_authentication_aad],\nprovide an instance of the desired credential type obtained from the\n[azure-identity][azure_identity_credentials] library.\nNote that regional endpoints do not support AAD authentication. Create a [custom subdomain][custom_subdomain]\nname for your resource in order to use this type of authentication.\n\nAuthentication with AAD requires some initial setup:\n\n- [Install azure-identity][install_azure_identity]\n- [Register a new AAD application][register_aad_app]\n- [Grant access][grant_role_access] to the Language service by assigning the \"Cognitive Services Language Reader\" role to your service principal.\n\nAfter setup, you can choose which type of [credential][azure_identity_credentials] from azure.identity to use.\nAs an example, [DefaultAzureCredential][default_azure_credential]\ncan be used to authenticate the client:\n\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables:\n`AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`\n\nUse the returned token credential to authenticate the client:\n\n```python\nfrom azure.ai.language.questionanswering import QuestionAnsweringClient\nfrom azure.identity import DefaultAzureCredential\n\ncredential = DefaultAzureCredential()\nclient = QuestionAnsweringClient(endpoint=\"https://<my-custom-subdomain>.cognitiveservices.azure.com/\", credential=credential)\n```\n\n## Key concepts\n\n### QuestionAnsweringClient\n\nThe [QuestionAnsweringClient][questionanswering_client_class] is the primary interface for asking questions using a knowledge base with your own information, or text input using pre-trained models.\nFor asynchronous operations, an async `QuestionAnsweringClient` is in the `azure.ai.language.questionanswering.aio` namespace.\n\n### AuthoringClient\nThe [AuthoringClient][authoring_client_class] provides an interface for managing Question Answering projects. Examples of the available operations include creating and deploying projects, updating your knowledge sources, and updating question and answer pairs. It provides both synchronous and asynchronous APIs.\n\n## Examples\n\n### QuestionAnsweringClient\nThe `azure-ai-language-questionanswering` client library provides both synchronous and asynchronous APIs.\n\n- [Ask a question](#ask-a-question \"Ask a question\")\n- [Ask a follow-up question](#ask-a-follow-up-question \"Ask a follow-up question\")\n- [Create a new project](#create-a-new-project \"Create a new project\")\n- [Add a knowledge source](#add-a-knowledge-source \"Add a knowledge source\")\n- [Deploy your project](#deploy-your-project \"Deploy your project\")\n- [Asynchronous operations](#asynchronous-operations \"Asynchronous operations\")\n\n#### Ask a question\n\nThe only input required to ask a question using a knowledge base is just the question itself:\n\n```python\nimport os\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.language.questionanswering import QuestionAnsweringClient\n\nendpoint = os.environ[\"AZURE_QUESTIONANSWERING_ENDPOINT\"]\nkey = os.environ[\"AZURE_QUESTIONANSWERING_KEY\"]\n\nclient = QuestionAnsweringClient(endpoint, AzureKeyCredential(key))\n\noutput = client.get_answers(\n    question=\"How long should my Surface battery last?\",\n    project_name=\"FAQ\",\n    deployment_name=\"production\"\n)\nfor candidate in output.answers:\n    print(\"({}) {}\".format(candidate.confidence, candidate.answer))\n    print(\"Source: {}\".format(candidate.source))\n\n```\n\nYou can set additional keyword options to limit the number of answers, specify a minimum confidence score, and more.\n\n#### Ask a follow-up question\n\nIf your knowledge base is configured for [chit-chat][questionanswering_docs_chat], the answers from the knowledge base may include suggested [prompts for follow-up questions][questionanswering_refdocs_prompts] to initiate a conversation. You can ask a follow-up question by providing the ID of your chosen answer as the context for the continued conversation:\n\n```python\nimport os\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.language.questionanswering import QuestionAnsweringClient\nfrom azure.ai.language.questionanswering import models\n\nendpoint = os.environ[\"AZURE_QUESTIONANSWERING_ENDPOINT\"]\nkey = os.environ[\"AZURE_QUESTIONANSWERING_KEY\"]\n\nclient = QuestionAnsweringClient(endpoint, AzureKeyCredential(key))\n\noutput = client.get_answers(\n    question=\"How long should charging take?\",\n    answer_context=models.KnowledgeBaseAnswerContext(\n        previous_qna_id=previous_answer.qna_id\n    ),\n    project_name=\"FAQ\",\n    deployment_name=\"production\"\n)\nfor candidate in output.answers:\n    print(\"({}) {}\".format(candidate.confidence, candidate.answer))\n    print(\"Source: {}\".format(candidate.source))\n```\n\n#### Create a new project\n\n```python\nimport os\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.language.questionanswering.authoring import AuthoringClient\n\n# get service secrets\nendpoint = os.environ[\"AZURE_QUESTIONANSWERING_ENDPOINT\"]\nkey = os.environ[\"AZURE_QUESTIONANSWERING_KEY\"]\n\n# create client\nclient = AuthoringClient(endpoint, AzureKeyCredential(key))\nwith client:\n\n    # create project\n    project_name = \"IssacNewton\"\n    project = client.create_project(\n        project_name=project_name,\n        options={\n            \"description\": \"biography of Sir Issac Newton\",\n            \"language\": \"en\",\n            \"multilingualResource\": True,\n            \"settings\": {\n                \"defaultAnswer\": \"no answer\"\n            }\n        })\n\n    print(\"view created project info:\")\n    print(\"\\tname: {}\".format(project[\"projectName\"]))\n    print(\"\\tlanguage: {}\".format(project[\"language\"]))\n    print(\"\\tdescription: {}\".format(project[\"description\"]))\n```\n\n#### Add a knowledge source\n\n```python\nimport os\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.language.questionanswering.authoring import AuthoringClient\n\n# get service secrets\nendpoint = os.environ[\"AZURE_QUESTIONANSWERING_ENDPOINT\"]\nkey = os.environ[\"AZURE_QUESTIONANSWERING_KEY\"]\n\n# create client\nclient = AuthoringClient(endpoint, AzureKeyCredential(key))\n\nproject_name = \"IssacNewton\"\nupdate_sources_poller = client.begin_update_sources(\n    project_name=project_name,\n    sources=[\n        {\n            \"op\": \"add\",\n            \"value\": {\n                \"displayName\": \"Issac Newton Bio\",\n                \"sourceUri\": \"https://wikipedia.org/wiki/Isaac_Newton\",\n                \"sourceKind\": \"url\"\n            }\n        }\n    ]\n)\nupdate_sources_poller.result()\n\n# list sources\nprint(\"list project sources\")\nsources = client.list_sources(\n    project_name=project_name\n)\nfor source in sources:\n    print(\"project: {}\".format(source[\"displayName\"]))\n    print(\"\\tsource: {}\".format(source[\"source\"]))\n    print(\"\\tsource Uri: {}\".format(source[\"sourceUri\"]))\n    print(\"\\tsource kind: {}\".format(source[\"sourceKind\"]))\n```\n\n#### Deploy your project\n\n\n```python\nimport os\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.language.questionanswering.authoring import AuthoringClient\n\n# get service secrets\nendpoint = os.environ[\"AZURE_QUESTIONANSWERING_ENDPOINT\"]\nkey = os.environ[\"AZURE_QUESTIONANSWERING_KEY\"]\n\n# create client\nclient = AuthoringClient(endpoint, AzureKeyCredential(key))\n\nproject_name = \"IssacNewton\"\n\n# deploy project\ndeployment_poller = client.begin_deploy_project(\n    project_name=project_name,\n    deployment_name=\"production\"\n)\ndeployment_poller.result()\n\n# list all deployments\ndeployments = client.list_deployments(\n    project_name=project_name\n)\n\nprint(\"view project deployments\")\nfor d in deployments:\n    print(d)\n```\n\n#### Asynchronous operations\n\nThe above examples can also be run asynchronously using the clients in the `aio` namespace:\n\n```python\nimport os\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.language.questionanswering.aio import QuestionAnsweringClient\n\nendpoint = os.environ[\"AZURE_QUESTIONANSWERING_ENDPOINT\"]\nkey = os.environ[\"AZURE_QUESTIONANSWERING_KEY\"]\n\nclient = QuestionAnsweringClient(endpoint, AzureKeyCredential(key))\n\noutput = await client.get_answers(\n    question=\"How long should my Surface battery last?\",\n    project_name=\"FAQ\",\n    deployment_name=\"production\"\n)\n```\n\n## Optional Configuration\n\nOptional keyword arguments can be passed in at the client and per-operation level. The azure-core [reference documentation][azure_core_ref_docs] describes available configurations for retries, logging, transport protocols, and more.\n\n## Troubleshooting\n\n### General\n\nAzure Question Answering clients raise exceptions defined in [Azure Core][azure_core_readme].\nWhen you interact with the Cognitive Language Service Question Answering client library using the Python SDK, errors returned by the service correspond to the same HTTP status codes returned for [REST API][questionanswering_rest_docs] requests.\n\nFor example, if you submit a question to a non-existent knowledge base, a `400` error is returned indicating \"Bad Request\".\n\n```python\nfrom azure.core.exceptions import HttpResponseError\n\ntry:\n    client.get_answers(\n        question=\"Why?\",\n        project_name=\"invalid-knowledge-base\",\n        deployment_name=\"production\"\n    )\nexcept HttpResponseError as error:\n    print(\"Query failed: {}\".format(error.message))\n```\n\n### Logging\n\nThis library uses the standard\n[logging][python_logging] library for logging.\nBasic information about HTTP sessions (URLs, headers, etc.) is logged at INFO\nlevel.\n\nDetailed DEBUG level logging, including request/response bodies and unredacted\nheaders, can be enabled on a client with the `logging_enable` argument.\n\nSee full SDK logging documentation with examples [here][sdk_logging_docs].\n\n## Next steps\n\n- View our [samples][questionanswering_samples].\n- Read about the different [features][questionanswering_docs_features] of the Question Answering service.\n- Try our service [demos][questionanswering_docs_demos].\n\n## Contributing\n\nSee the [CONTRIBUTING.md][contributing] for details on building, testing, and contributing to this library.\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [cla.microsoft.com][cla].\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n\n[azure_cli]: https://docs.microsoft.com/cli/azure/\n[azure_portal]: https://portal.azure.com/\n[azure_subscription]: https://azure.microsoft.com/free/\n[language_service]: https://ms.portal.azure.com/#create/Microsoft.CognitiveServicesTextAnalytics\n[cla]: https://cla.microsoft.com\n[coc_contact]: mailto:opencode@microsoft.com\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[cognitive_auth]: https://docs.microsoft.com/azure/cognitive-services/authentication/\n[contributing]: https://github.com/Azure/azure-sdk-for-python/blob/main/CONTRIBUTING.md\n[python_logging]: https://docs.python.org/3/library/logging.html\n[sdk_logging_docs]: https://docs.microsoft.com/azure/developer/python/azure-sdk-logging\n[azure_core_ref_docs]: https://azuresdkdocs.blob.core.windows.net/$web/python/azure-core/latest/azure.core.html\n[azure_core_readme]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/README.md\n[pip_link]: https://pypi.org/project/pip/\n[questionanswering_client_class]: https://azuresdkdocs.blob.core.windows.net/$web/python/azure-ai-language-questionanswering/latest/azure.ai.language.questionanswering.html#azure.ai.language.questionanswering.QuestionAnsweringClient\n[authoring_client_class]: https://aka.ms/azsdk/python/questionansweringauthoringclient\n[questionanswering_refdocs_prompts]: https://azuresdkdocs.blob.core.windows.net/$web/python/azure-ai-language-questionanswering/latest/azure.ai.language.questionanswering.models.html#azure.ai.language.questionanswering.models.KnowledgeBaseAnswerDialog\n[questionanswering_client_src]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/cognitivelanguage/azure-ai-language-questionanswering/\n[questionanswering_docs]: https://azure.microsoft.com/services/cognitive-services/qna-maker/\n[questionanswering_docs_chat]: https://docs.microsoft.com/azure/cognitive-services/qnamaker/how-to/chit-chat-knowledge-base\n[questionanswering_docs_demos]: https://azure.microsoft.com/services/cognitive-services/qna-maker/#demo\n[questionanswering_docs_features]: https://azure.microsoft.com/services/cognitive-services/qna-maker/#features\n[questionanswering_pypi_package]: https://pypi.org/project/azure-ai-language-questionanswering/\n[questionanswering_refdocs]: https://azuresdkdocs.blob.core.windows.net/$web/python/azure-ai-language-questionanswering/latest/azure.ai.language.questionanswering.html\n[questionanswering_rest_docs]: https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering\n[questionanswering_samples]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/cognitivelanguage/azure-ai-language-questionanswering/samples/README.md\n[cognitive_authentication_aad]: https://docs.microsoft.com/azure/cognitive-services/authentication#authenticate-with-azure-active-directory\n[azure_identity_credentials]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity#credentials\n[custom_subdomain]: https://docs.microsoft.com/azure/cognitive-services/authentication#create-a-resource-with-a-custom-subdomain\n[install_azure_identity]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity#install-the-package\n[register_aad_app]: https://docs.microsoft.com/azure/cognitive-services/authentication#assign-a-role-to-a-service-principal\n[grant_role_access]: https://docs.microsoft.com/azure/cognitive-services/authentication#assign-a-role-to-a-service-principal\n[default_azure_credential]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity#defaultazurecredential\n[questionanswering_rest_docs]: https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering\n[questionanswering_rest_docs_authoring]: https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fsdk%2Ftemplate%2Fazure-template%2FREADME.png)\n",
        "repo_name": "cognitivelanguage/azure-ai-language-questionanswering",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/cognitivelanguage/azure-ai-language-questionanswering",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Cognitive Services Anomaly Detector Client Library.\nThis package has been tested with Python 2.7, 3.6+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n\n# Usage\n\n\n\n\nFor code examples, see [Cognitive Services Anomaly Detector](https://docs.microsoft.com/python/api/overview/azure/cognitive-services) on docs.microsoft.com.\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-cognitiveservices-anomalydetector%2FREADME.png)\n",
        "repo_name": "cognitiveservices/azure-cognitiveservices-anomalydetector",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/cognitiveservices/azure-cognitiveservices-anomalydetector",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "## NOTE: This package has been deprecated\n\nThis version has endpoints that are no longer active. To use the more recent version of the Azure Form Recognizer service,\nplease install the azure-ai-formrecognizer package found here: https://pypi.org/project/azure-ai-formrecognizer/\n\n# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Cognitive Services Form Recognizer Client Library.\nThis package has been tested with Python 2.7, 3.6+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n\n# Usage\n\n\n\n\nFor code examples, see [Cognitive Services Form Recognizer](https://docs.microsoft.com/python/api/overview/azure/) on docs.microsoft.com.\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-cognitiveservices-formrecognizer%2FREADME.png)\n",
        "repo_name": "cognitiveservices/azure-cognitiveservices-formrecognizer",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/cognitiveservices/azure-cognitiveservices-formrecognizer",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure QnA Maker Client Library.\nThis package has been tested with Python 2.7, 3.6+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n\n# Usage\n\n\n\n\nFor code examples, see [QnA Maker](https://docs.microsoft.com/python/api/overview/azure/cognitive-services) on docs.microsoft.com.\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-cognitiveservices-knowledge-qnamaker%2FREADME.png)\n",
        "repo_name": "cognitiveservices/azure-cognitiveservices-knowledge-qnamaker",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/cognitiveservices/azure-cognitiveservices-knowledge-qnamaker",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Cognitive Services LUIS Client Library.\nThis package has been tested with Python 2.7, 3.6+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n\n# Usage\n\n\n\n\nFor code examples, see [Cognitive Services LUIS](https://docs.microsoft.com/python/api/overview/azure/cognitive-services) on docs.microsoft.com.\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-cognitiveservices-language-luis%2FREADME.png)\n",
        "repo_name": "cognitiveservices/azure-cognitiveservices-language-luis",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/cognitiveservices/azure-cognitiveservices-language-luis",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Cognitive Services Spellcheck Client Library.\nThis package has been tested with Python 2.7, 3.6+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n\n# Usage\n\n\n\n\nFor code examples, see [Cognitive Services Spellcheck](https://docs.microsoft.com/python/api/overview/azure/cognitive-services) on docs.microsoft.com.\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-cognitiveservices-language-spellcheck%2FREADME.png)\n",
        "repo_name": "cognitiveservices/azure-cognitiveservices-language-spellcheck",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/cognitiveservices/azure-cognitiveservices-language-spellcheck",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# NOTE: There is a newer version of this package\n\nPlease install the [azure-ai-textanalytics](https://pypi.org/project/azure-ai-textanalytics/) package for the latest features and support.\n\n# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Cognitive Services Text Analytics Client Library.\nThis package has been tested with Python 2.7, 3.6+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n\n# Usage\n\n\n\n\nFor code examples, see [Cognitive Services Text Analytics](https://docs.microsoft.com/python/api/overview/azure/cognitive-services) on docs.microsoft.com.\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-cognitiveservices-language-textanalytics%2FREADME.png)\n",
        "repo_name": "cognitiveservices/azure-cognitiveservices-language-textanalytics",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/cognitiveservices/azure-cognitiveservices-language-textanalytics",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Personalizer Client Library.\nThis package has been tested with Python 2.7, 3.6+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n\n# Usage\n\n\n\n\nFor code examples, see [Personalizer](https://docs.microsoft.com/python/api/overview/azure/) on docs.microsoft.com.\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-cognitiveservices-personalizer%2FREADME.png)\n",
        "repo_name": "cognitiveservices/azure-cognitiveservices-personalizer",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/cognitiveservices/azure-cognitiveservices-personalizer",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Auto Suggest Client Library.\nThis package has been tested with Python 2.7, 3.6+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n\n# Usage\n\n\n\n\nFor code examples, see [Auto Suggest](https://docs.microsoft.com/python/api/overview/azure/cognitive-services) on docs.microsoft.com.\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-cognitiveservices-search-autosuggest%2FREADME.png)\n",
        "repo_name": "cognitiveservices/azure-cognitiveservices-search-autosuggest",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/cognitiveservices/azure-cognitiveservices-search-autosuggest",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Cognitive Services Custom Image Search Client Library.\nThis package has been tested with Python 2.7, 3.6+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n\n# Usage\n\n\n\n\nFor code examples, see [Cognitive Services Custom Image Search](https://docs.microsoft.com/python/api/overview/azure/cognitive-services) on docs.microsoft.com.\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-cognitiveservices-search-customimagesearch%2FREADME.png)\n",
        "repo_name": "cognitiveservices/azure-cognitiveservices-search-customimagesearch",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/cognitiveservices/azure-cognitiveservices-search-customimagesearch",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Cognitive Services Custom Search Client Library.\nThis package has been tested with Python 2.7, 3.6+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n\n# Usage\n\n\n\n\nFor code examples, see [Cognitive Services Custom Search](https://docs.microsoft.com/python/api/overview/azure/cognitive-services) on docs.microsoft.com.\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-cognitiveservices-search-customsearch%2FREADME.png)\n",
        "repo_name": "cognitiveservices/azure-cognitiveservices-search-customsearch",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/cognitiveservices/azure-cognitiveservices-search-customsearch",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Cognitive Services Entity Search Client Library.\nThis package has been tested with Python 2.7, 3.6+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n\n# Usage\n\n\n\n\nFor code examples, see [Cognitive Services Entity Search](https://docs.microsoft.com/python/api/overview/azure/cognitive-services) on docs.microsoft.com.\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-cognitiveservices-search-entitysearch%2FREADME.png)\n",
        "repo_name": "cognitiveservices/azure-cognitiveservices-search-entitysearch",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/cognitiveservices/azure-cognitiveservices-search-entitysearch",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Cognitive Services Image Search Client Library.\nThis package has been tested with Python 2.7, 3.6+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n\n# Usage\n\n\n\n\nFor code examples, see [Cognitive Services Image Search](https://docs.microsoft.com/python/api/overview/azure/cognitive-services) on docs.microsoft.com.\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-cognitiveservices-search-imagesearch%2FREADME.png)\n",
        "repo_name": "cognitiveservices/azure-cognitiveservices-search-imagesearch",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/cognitiveservices/azure-cognitiveservices-search-imagesearch",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Cognitive Services News Search Client Library.\nThis package has been tested with Python 2.7, 3.6+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n\n# Usage\n\n\n\n\nFor code examples, see [Cognitive Services News Search](https://docs.microsoft.com/python/api/overview/azure/cognitive-services) on docs.microsoft.com.\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-cognitiveservices-search-newssearch%2FREADME.png)\n",
        "repo_name": "cognitiveservices/azure-cognitiveservices-search-newssearch",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/cognitiveservices/azure-cognitiveservices-search-newssearch",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Cognitive Services Video Search Client Library.\nThis package has been tested with Python 2.7, 3.6+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n\n# Usage\n\n\n\n\nFor code examples, see [Cognitive Services Video Search](https://docs.microsoft.com/python/api/overview/azure/cognitive-services) on docs.microsoft.com.\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-cognitiveservices-search-videosearch%2FREADME.png)\n",
        "repo_name": "cognitiveservices/azure-cognitiveservices-search-videosearch",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/cognitiveservices/azure-cognitiveservices-search-videosearch",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Cognitive Services Visual Search Client Library.\nThis package has been tested with Python 2.7, 3.6+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n\n# Usage\n\n\n\n\nFor code examples, see [Cognitive Services Visual Search](https://docs.microsoft.com/python/api/overview/azure/cognitive-services) on docs.microsoft.com.\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-cognitiveservices-search-visualsearch%2FREADME.png)\n",
        "repo_name": "cognitiveservices/azure-cognitiveservices-search-visualsearch",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/cognitiveservices/azure-cognitiveservices-search-visualsearch",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Cognitive Services Web Search Client Library.\nThis package has been tested with Python 2.7, 3.6+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n\n# Usage\n\n\n\n\nFor code examples, see [Cognitive Services Web Search](https://docs.microsoft.com/python/api/overview/azure/cognitive-services) on docs.microsoft.com.\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-cognitiveservices-search-websearch%2FREADME.png)\n",
        "repo_name": "cognitiveservices/azure-cognitiveservices-search-websearch",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/cognitiveservices/azure-cognitiveservices-search-websearch",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Azure Cognitive Services Computer Vision SDK for Python\n\nThe Computer Vision service provides developers with access to advanced algorithms for processing images and returning information. Computer Vision algorithms analyze the content of an image in different ways, depending on the visual features you're interested in.\n\nYou can use Computer Vision in your application to:\n\n- Analyze images for insight\n- Extract text from images\n- Generate thumbnails\n\nLooking for more documentation?\n\n* [SDK reference documentation](https://docs.microsoft.com/python/api/azure-cognitiveservices-vision-computervision/azure.cognitiveservices.vision.computervision)\n* [Cognitive Services Computer Vision documentation](https://docs.microsoft.com/azure/cognitive-services/computer-vision/)\n\n## Prerequisites\n\n* Azure subscription - [Create a free account][azure_sub]\n* Azure [Computer Vision resource][computervision_resource]\n* [Python 3.6+][python]\n\nIf you need a Computer Vision API account, you can create one with this [Azure CLI][azure_cli] command:\n\n```Bash\nRES_REGION=westeurope\nRES_GROUP=<resourcegroup-name>\nACCT_NAME=<computervision-account-name>\n\naz cognitiveservices account create \\\n    --resource-group $RES_GROUP \\\n    --name $ACCT_NAME \\\n    --location $RES_REGION \\\n    --kind ComputerVision \\\n    --sku S1 \\\n    --yes\n```\n\n## Installation\n\nInstall the Azure Cognitive Services Computer Vision SDK with [pip][pip], optionally within a [virtual environment][venv].\n\n### Configure a virtual environment (optional)\n\nAlthough not required, you can keep your base system and Azure SDK environments isolated from one another if you use a [virtual environment][virtualenv]. Execute the following commands to configure and then enter a virtual environment with [venv][venv], such as `cogsrv-vision-env`:\n\n```Bash\npython3 -m venv cogsrv-vision-env\nsource cogsrv-vision-env/bin/activate\n```\n\n### Install the SDK\n\nInstall the Azure Cognitive Services Computer Vision SDK for Python [package][pypi_computervision] with [pip][pip]:\n\n```Bash\npip install azure-cognitiveservices-vision-computervision\n```\n\n## Authentication\n\nOnce you create your Computer Vision resource, you need its **region**, and one of its **account keys** to instantiate the client object.\n\nUse these values when you create the instance of the [ComputerVisionClient][ref_computervisionclient] client object.\n\n### Get credentials\n\nUse the [Azure CLI][cloud_shell] snippet below to populate two environment variables with the Computer Vision account **region** and one of its **keys** (you can also find these values in the [Azure portal][azure_portal]). The snippet is formatted for the Bash shell.\n\n```Bash\nRES_GROUP=<resourcegroup-name>\nACCT_NAME=<computervision-account-name>\n\nexport ACCOUNT_REGION=$(az cognitiveservices account show \\\n    --resource-group $RES_GROUP \\\n    --name $ACCT_NAME \\\n    --query location \\\n    --output tsv)\n\nexport ACCOUNT_KEY=$(az cognitiveservices account keys list \\\n    --resource-group $RES_GROUP \\\n    --name $ACCT_NAME \\\n    --query key1 \\\n    --output tsv)\n```\n\n### Create client\n\nOnce you've populated the `ACCOUNT_REGION` and `ACCOUNT_KEY` environment variables, you can create the [ComputerVisionClient][ref_computervisionclient] client object.\n\n```python\nfrom azure.cognitiveservices.vision.computervision import ComputerVisionClient\nfrom azure.cognitiveservices.vision.computervision.models import VisualFeatureTypes\nfrom msrest.authentication import CognitiveServicesCredentials\n\nimport os\nregion = os.environ['ACCOUNT_REGION']\nkey = os.environ['ACCOUNT_KEY']\n\ncredentials = CognitiveServicesCredentials(key)\nclient = ComputerVisionClient(\n    endpoint=\"https://\" + region + \".api.cognitive.microsoft.com/\",\n    credentials=credentials\n)\n```\n\n## Usage\n\nOnce you've initialized a [ComputerVisionClient][ref_computervisionclient] client object, you can:\n\n* Analyze an image: You can analyze an image for certain features such as faces, colors, tags.\n* Generate thumbnails: Create a custom JPEG image to use as a thumbnail of the original image.\n* Get description of an image: Get a description of the image based on its subject domain.\n\nFor more information about this service, see [What is Computer Vision?][computervision_docs].\n\n## Examples\n\nThe following sections provide several code snippets covering some of the most common Computer Vision tasks, including:\n\n* [Analyze an image](#analyze-an-image)\n* [Get subject domain list](#get-subject-domain-list)\n* [Analyze an image by domain](#analyze-an-image-by-domain)\n* [Get text description of an image](#get-text-description-of-an-image)\n* [Get handwritten text from image](#get-text-from-image)\n* [Generate thumbnail](#generate-thumbnail)\n\n### Analyze an image\n\nYou can analyze an image for certain features with [`analyze_image`][ref_computervisionclient_analyze_image]. Use the [`visual_features`][ref_computervision_model_visualfeatures] property to set the types of analysis to perform on the image. Common values are `VisualFeatureTypes.tags` and `VisualFeatureTypes.description`.\n\n```python\nurl = \"https://upload.wikimedia.org/wikipedia/commons/thumb/1/12/Broadway_and_Times_Square_by_night.jpg/450px-Broadway_and_Times_Square_by_night.jpg\"\n\nimage_analysis = client.analyze_image(url,visual_features=[VisualFeatureTypes.tags])\n\nfor tag in image_analysis.tags:\n    print(tag)\n```\n\n### Get subject domain list\n\nReview the subject domains used to analyze your image with [`list_models`][ref_computervisionclient_list_models]. These domain names are used when [analyzing an image by domain](#analyze-an-image-by-domain). An example of a domain is `landmarks`.\n\n```python\nmodels = client.list_models()\n\nfor x in models.models_property:\n    print(x)\n```\n\n### Analyze an image by domain\n\nYou can analyze an image by subject domain with [`analyze_image_by_domain`][ref_computervisionclient_analyze_image_by_domain]. Get the [list of supported subject domains](#get-subject-domain-list) in order to use the correct domain name.\n\n```python\ndomain = \"landmarks\"\nurl = \"https://images.pexels.com/photos/338515/pexels-photo-338515.jpeg\"\nlanguage = \"en\"\n\nanalysis = client.analyze_image_by_domain(domain, url, language)\n\nfor landmark in analysis.result[\"landmarks\"]:\n    print(landmark[\"name\"])\n    print(landmark[\"confidence\"])\n```\n\n### Get text description of an image\n\nYou can get a language-based text description of an image with [`describe_image`][ref_computervisionclient_describe_image]. Request several descriptions with the `max_description` property if you are doing text analysis for keywords associated with the image. Examples of a text description for the following image include `a train crossing a bridge over a body of water`, `a large bridge over a body of water`, and `a train crossing a bridge over a large body of water`.\n\n```python\ndomain = \"landmarks\"\nurl = \"http://www.public-domain-photos.com/free-stock-photos-4/travel/san-francisco/golden-gate-bridge-in-san-francisco.jpg\"\nlanguage = \"en\"\nmax_descriptions = 3\n\nanalysis = client.describe_image(url, max_descriptions, language)\n\nfor caption in analysis.captions:\n    print(caption.text)\n    print(caption.confidence)\n```\n\n### Get text from image\n\nYou can get any handwritten or printed text from an image. This requires two calls to the SDK: [`read`][ref_computervisionclient_read] and [`get_read_result`][ref_computervisionclient_get_read_result]. The call to read is asynchronous. In the results of the get_read_result call, you need to check if the first call completed with [`OperationStatusCodes`][ref_computervision_model_operationstatuscodes] before extracting the text data. The results include the text as well as the bounding box coordinates for the text.\n\n```python\n# import models\nfrom azure.cognitiveservices.vision.computervision.models import OperationStatusCodes\n\nurl = \"https://github.com/Azure-Samples/cognitive-services-python-sdk-samples/raw/master/samples/vision/images/make_things_happen.jpg\"\nraw = True\nnumberOfCharsInOperationId = 36\n\n# SDK call\nrawHttpResponse = client.read(url, language=\"en\", raw=True)\n\n# Get ID from returned headers\noperationLocation = rawHttpResponse.headers[\"Operation-Location\"]\nidLocation = len(operationLocation) - numberOfCharsInOperationId\noperationId = operationLocation[idLocation:]\n\n# SDK call\nresult = client.get_read_result(operationId)\n\n# Get data\nif result.status == OperationStatusCodes.succeeded:\n\n    for line in result.analyze_result.read_results[0].lines:\n        print(line.text)\n        print(line.bounding_box)\n```\n\n### Generate thumbnail\n\nYou can generate a thumbnail (JPG) of an image with [`generate_thumbnail`][ref_computervisionclient_generate_thumbnail]. The thumbnail does not need to be in the same proportions as the original image.\n\nThis example uses the [Pillow][pypi_pillow] package to save the new thumbnail image locally.\n\n```python\nfrom PIL import Image\nimport io\n\nwidth = 50\nheight = 50\nurl = \"http://www.public-domain-photos.com/free-stock-photos-4/travel/san-francisco/golden-gate-bridge-in-san-francisco.jpg\"\n\nthumbnail = client.generate_thumbnail(width, height, url)\n\nfor x in thumbnail:\n    image = Image.open(io.BytesIO(x))\n\nimage.save('thumbnail.jpg')\n```\n\n## Troubleshooting\n\n### General\n\nWhen you interact with the [ComputerVisionClient][ref_computervisionclient] client object using the Python SDK, the [`ComputerVisionErrorResponseException`][ref_computervision_computervisionerrorexception] class is used to return errors. Errors returned by the service correspond to the same HTTP status codes returned for REST API requests.\n\nFor example, if you try to analyze an image with an invalid key, a `401` error is returned. In the following snippet, the [error][ref_httpfailure] is handled gracefully by catching the exception and displaying additional information about the error.\n\n```python\n\ndomain = \"landmarks\"\nurl = \"http://www.public-domain-photos.com/free-stock-photos-4/travel/san-francisco/golden-gate-bridge-in-san-francisco.jpg\"\nlanguage = \"en\"\nmax_descriptions = 3\n\ntry:\n    analysis = client.describe_image(url, max_descriptions, language)\n\n    for caption in analysis.captions:\n        print(caption.text)\n        print(caption.confidence)\nexcept HTTPFailure as e:\n    if e.status_code == 401:\n        print(\"Error unauthorized. Make sure your key and region are correct.\")\n    else:\n        raise\n```\n\n### Handle transient errors with retries\n\nWhile working with the [ComputerVisionClient][ref_computervisionclient] client, you might encounter transient failures caused by [rate limits][computervision_request_units] enforced by the service, or other transient problems like network outages. For information about handling these types of failures, see [Retry pattern][azure_pattern_retry] in the Cloud Design Patterns guide, and the related [Circuit Breaker pattern][azure_pattern_circuit_breaker].\n\n## Next steps\n\n### More sample code\n\nSeveral Computer Vision Python SDK samples are available to you in the SDK's GitHub repository. These samples provide example code for additional scenarios commonly encountered while working with Computer Vision:\n\n* [See sample repo][recognize-text]\n\n### Additional documentation\n\nFor more extensive documentation on the Computer Vision service, see the [Azure Computer Vision documentation][computervision_docs] on docs.microsoft.com.\n\n<!-- LINKS -->\n[pip]: https://pypi.org/project/pip/\n[python]: https://www.python.org/downloads/\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_pattern_circuit_breaker]: https://docs.microsoft.com/azure/architecture/patterns/circuit-breaker\n[azure_pattern_retry]: https://docs.microsoft.com/azure/architecture/patterns/retry\n[azure_portal]: https://portal.azure.com\n[azure_sub]: https://azure.microsoft.com/free/\n\n[cloud_shell]: https://docs.microsoft.com/azure/cloud-shell/overview\n\n[venv]: https://docs.python.org/3/library/venv.html\n[virtualenv]: https://virtualenv.pypa.io\n\n[source_code]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/cognitiveservices/azure-cognitiveservices-vision-computervision\n\n[pypi_computervision]:https://pypi.org/project/azure-cognitiveservices-vision-computervision/\n[pypi_pillow]:https://pypi.org/project/Pillow/\n\n[ref_computervision_sdk]: https://docs.microsoft.com/python/api/azure-cognitiveservices-vision-computervision/azure.cognitiveservices.vision.computervision?view=azure-python\n[ref_computervision_computervisionerrorexception]:https://docs.microsoft.com/python/api/azure-cognitiveservices-vision-computervision/azure.cognitiveservices.vision.computervision.models.computervisionerrorresponseexception?view=azure-python\n[ref_httpfailure]: https://docs.microsoft.com/python/api/msrest/msrest.exceptions.httpoperationerror?view=azure-python\n\n\n[computervision_resource]: https://docs.microsoft.com/azure/cognitive-services/computer-vision/vision-api-how-to-topics/howtosubscribe\n\n[computervision_docs]: https://docs.microsoft.com/azure/cognitive-services/computer-vision/home\n\n[ref_computervisionclient]: https://docs.microsoft.com/python/api/azure-cognitiveservices-vision-computervision/azure.cognitiveservices.vision.computervision.computervisionclient?view=azure-python\n\n\n[ref_computervisionclient_analyze_image]: https://docs.microsoft.com/python/api/azure-cognitiveservices-vision-computervision/azure.cognitiveservices.vision.computervision.computervisionclient?view=azure-python#analyze-image-url--visual-features-none--details-none--language--en---custom-headers-none--raw-false----operation-config-\n[ref_computervisionclient_list_models]:https://docs.microsoft.com/python/api/azure-cognitiveservices-vision-computervision/azure.cognitiveservices.vision.computervision.computervisionclient?view=azure-python#list-models-custom-headers-none--raw-false----operation-config-\n[ref_computervisionclient_analyze_image_by_domain]:https://docs.microsoft.com/python/api/azure-cognitiveservices-vision-computervision/azure.cognitiveservices.vision.computervision.computervisionclient?view=azure-python#analyze-image-by-domain-model--url--language--en---custom-headers-none--raw-false----operation-config-\n[ref_computervisionclient_describe_image]:https://docs.microsoft.com/python/api/azure-cognitiveservices-vision-computervision/azure.cognitiveservices.vision.computervision.computervisionclient?view=azure-python#describe-image-url--max-candidates--1---language--en---custom-headers-none--raw-false----operation-config-\n[ref_computervisionclient_read]:https://docs.microsoft.com/python/api/azure-cognitiveservices-vision-computervision/azure.cognitiveservices.vision.computervision.computervisionclient?view=azure-python#read-url--mode--custom-headers-none--raw-false----operation-config-\n[ref_computervisionclient_get_read_result]:https://docs.microsoft.com/python/api/azure-cognitiveservices-vision-computervision/azure.cognitiveservices.vision.computervision.computervisionclient?view=azure-python#get-read-result-operation-id--custom-headers-none--raw-false----operation-config-\n[ref_computervisionclient_generate_thumbnail]:https://docs.microsoft.com/python/api/azure-cognitiveservices-vision-computervision/azure.cognitiveservices.vision.computervision.computervisionclient?view=azure-python#generate-thumbnail-width--height--url--smart-cropping-false--custom-headers-none--raw-false--callback-none----operation-config-\n\n\n[ref_computervision_model_visualfeatures]:https://docs.microsoft.com/python/api/azure-cognitiveservices-vision-computervision/azure.cognitiveservices.vision.computervision.models.visualfeaturetypes?view=azure-python\n\n[ref_computervision_model_operationstatuscodes]:https://docs.microsoft.com/python/api/azure-cognitiveservices-vision-computervision/azure.cognitiveservices.vision.computervision.models.operationstatuscodes?view=azure-python\n\n[computervision_request_units]:https://azure.microsoft.com/pricing/details/cognitive-services/computer-vision/\n\n[recognize-text]:https://github.com/Azure-Samples/cognitive-services-python-sdk-samples/blob/master/samples/vision/computer_vision_samples.py",
        "repo_name": "cognitiveservices/azure-cognitiveservices-vision-computervision",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/cognitiveservices/azure-cognitiveservices-vision-computervision",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Cognitive Services Content Moderator Client Library.\nThis package has been tested with Python 2.7, 3.6+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n\n# Usage\n\n\n\n\nFor code examples, see [Cognitive Services Content Moderator](https://docs.microsoft.com/python/api/overview/azure/cognitive-services) on docs.microsoft.com.\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-cognitiveservices-vision-contentmoderator%2FREADME.png)\n",
        "repo_name": "cognitiveservices/azure-cognitiveservices-vision-contentmoderator",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/cognitiveservices/azure-cognitiveservices-vision-contentmoderator",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Custom Vision Client Library.\nThis package has been tested with Python 2.7, 3.6+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n\n# Usage\n\n\n\n\nFor code examples, see [Custom Vision](https://docs.microsoft.com/python/api/overview/azure/cognitive-services) on docs.microsoft.com.\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-cognitiveservices-vision-customvision%2FREADME.png)\n",
        "repo_name": "cognitiveservices/azure-cognitiveservices-vision-customvision",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/cognitiveservices/azure-cognitiveservices-vision-customvision",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Cognitive Services Face Client Library.\nThis package has been tested with Python 2.7, 3.6+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n\n# Usage\n\n\n\n\nFor code examples, see [Cognitive Services Face](https://docs.microsoft.com/python/api/overview/azure/cognitive-services) on docs.microsoft.com.\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-cognitiveservices-vision-face%2FREADME.png)\n",
        "repo_name": "cognitiveservices/azure-cognitiveservices-vision-face",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/cognitiveservices/azure-cognitiveservices-vision-face",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Cognitive Services Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-cognitiveservices\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.cognitiveservices import CognitiveServicesManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = CognitiveServicesManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\n\nCode samples for this package can be found at [Cognitive Services Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com and [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-cognitiveservices%2FREADME.png)\n",
        "repo_name": "cognitiveservices/azure-mgmt-cognitiveservices",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/cognitiveservices/azure-mgmt-cognitiveservices",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Commerce Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-commerce\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.commerce import UsageManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = UsageManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\n\nCode samples for this package can be found at [Commerce](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com and [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-commerce%2FREADME.png)\n",
        "repo_name": "commerce/azure-mgmt-commerce",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/commerce/azure-mgmt-commerce",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Azure Communication Call Automation client library for Python\n\nThis package contains a Python SDK for Azure Communication Call Automation. Call Automation provides developers the ability to build server-based, intelligent call workflows, and call recording for voice and PSTN channels.\n\n[Overview of Call Automation][overview] | [Product documentation][product_docs]\n\n## _Disclaimer_\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please\nrefer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n### Prerequisites\n- Python 3.7 or later is required to use this package.\n- You need an [Azure subscription][azure_sub] to use this package.\n- A deployed Communication Services resource. You can use the [Azure Portal][azure_portal] or the [Azure PowerShell][azure_powershell] to set it up.\n\n### Installing\nInstall the Azure Communication Service Call Automation SDK.\n\n```bash\npip install azure-communication-callautomation\n```\n\n## Key concepts\n| Name                 | Description                                                                                                                                                                                                                                                                                                                              |\n| -------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| CallAutomationClient | `CallAutomationClient` is the primary interface for developers using this client library. It can be used to initiate calls by `createCall` or `answerCall`. It can also be used to do recording actions such as `startRecording`                                                                                                         |                                                                      |\n| CallConnectionClient | `CallConnectionClient` represents a ongoing call. Once the call is established with `createCall` or `answerCall`, further actions can be performed for the call, such as `transfer` or `play_media`.                                                                                                                                     |                                                                                                                                                               |\n| Callback Events      | Callback events are events sent back during duration of the call. It gives information and state of the call, such as `CallConnected`. `CallbackUrl` must be provided during `createCall` and `answerCall`, and callback events will be sent to this url. |\n| Incoming Call Event  | When incoming call happens (that can be answered with `answerCall`), incoming call eventgrid event will be sent. This is different from Callback events above, and should be setup on Azure portal. See [Incoming Call][incomingcall] for detail.                                                                                        |\n\n## Examples\n### Initialize CallAutomationClient\n```Python\nfrom azure.communication.callautomation import (CallAutomationClient)\n\n# Your unique Azure Communication service endpoint\nendpoint_url = '<ENDPOINT>'\nclient = new CallAutomationClient.from_connection_string(endpoint_url)\n```\n\n### Create Call\n```Python\nfrom azure.communication.callautomation import (\n    CallAutomationClient,\n    CallInvite,\n    CommunicationUserIdentifier\n)\n\n# target endpoint for ACS User\nuser = CommunicationUserIdentifier(\"8:acs:...\")\n\n# make invitation\ncall_invite = CallInvite(target=user)\n\n# callback url to receive callback events\ncallback_url = \"https://<MY-EVENT-HANDLER-URL>/events\"\n\n# send out the invitation, creating call\nresult = client.create_call(call_invite, callback_url)\n\n# this id can be used to do further actions in the call\ncall_connection_id = result.call_connection_id\n```\n\n### Play Media\n```Python\n# using call connection id, get call connection\ncall_connection = client.get_call_connection(call_connection_id)\n\n# from callconnection of result above, play media to all participants\nmy_file = FileSource(url=\"https://<FILE-SOURCE>/<SOME-FILE>.wav\")\ncall_connection.play_to_all(my_file)\n```\n\n## Troubleshooting\n## Next steps\n- [Call Automation Overview][overview]\n- [Incoming Call Concept][incomingcall]\n- [Build a customer interaction workflow using Call Automation][build1]\n- [Redirect inbound telephony calls with Call Automation][build2]\n- [Quickstart: Play action][build3]\n- [Quickstart: Recognize action][build4]\n- [Read more about Call Recording in Azure Communication Services][recording1]\n- [Record and download calls with Event Grid][recording2]\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the [Issues](https://github.com/Azure/azure-sdk-for-python/issues) section of the project\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require\nyou to agree to a Contributor License Agreement (CLA) declaring that you have\nthe right to, and actually do, grant us the rights to use your contribution.\nFor details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether\nyou need to provide a CLA and decorate the PR appropriately (e.g., label,\ncomment). Simply follow the instructions provided by the bot. You will only\nneed to do this once across all repos using our CLA.\n\nThis project has adopted the\n[Microsoft Open Source Code of Conduct][code_of_conduct]. For more information,\nsee the Code of Conduct FAQ or contact opencode@microsoft.com with any\nadditional questions or comments.\n\n<!-- LINKS -->\n[overview]: https://learn.microsoft.com/azure/communication-services/concepts/voice-video-calling/call-automation\n[product_docs]: https://docs.microsoft.com/azure/communication-services/overview\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_powershell]: https://docs.microsoft.com/powershell/module/az.communication/new-azcommunicationservice\n[build_doc]: https://aka.ms/AzureSDKBundling\n[incomingcall]: https://learn.microsoft.com/azure/communication-services/concepts/voice-video-calling/incoming-call-notification\n[build1]: https://learn.microsoft.com/azure/communication-services/quickstarts/voice-video-calling/callflows-for-customer-interactions?pivots=programming-language-csha\n[build2]: https://learn.microsoft.com/azure/communication-services/how-tos/call-automation-sdk/redirect-inbound-telephony-calls?pivots=programming-language-csharp\n[build3]: https://learn.microsoft.com/azure/communication-services/quickstarts/voice-video-calling/play-action?pivots=programming-language-csharp\n[build4]: https://learn.microsoft.com/azure/communication-services/quickstarts/voice-video-calling/recognize-action?pivots=programming-language-csharp\n[recording1]: https://learn.microsoft.com/azure/communication-services/concepts/voice-video-calling/call-recording\n[recording2]: https://learn.microsoft.com/azure/communication-services/quickstarts/voice-video-calling/get-started-call-recording?pivots=programming-language-csharp\n",
        "repo_name": "communication/azure-communication-callautomation",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-callautomation",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Azure Communication Chat Package client library for Python\n\nThis package contains a Python SDK for Azure Communication Services for Chat.\nRead more about Azure Communication Services [here](https://docs.microsoft.com/azure/communication-services/overview)\n\n[Source code](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/communication/azure-communication-chat)\n| [Package (Pypi)](https://pypi.org/project/azure-communication-chat/)\n| [Package (Conda)](https://anaconda.org/microsoft/azure-communication/)\n| [API reference documentation](https://azuresdkdocs.blob.core.windows.net/$web/python/azure-communication-chat/1.0.0b5/index.html)\n| [Product documentation](https://docs.microsoft.com/azure/communication-services/)\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Getting started\n\n## Prerequisites\n\n- Python 3.7 or later is required to use this package.\n- A deployed Communication Services resource. You can use the [Azure Portal](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource?tabs=windows&pivots=platform-azp) or the [Azure PowerShell](https://docs.microsoft.com/powershell/module/az.communication/new-azcommunicationservice) to set it up.\n\n## Install the package\n\nInstall the Azure Communication Service Chat SDK.\n\n```bash\npip install --pre azure-communication-chat\n```\n\n## User Access Tokens\n\nUser access tokens enable you to build client applications that directly authenticate to Azure Communication Services. You can generate these tokens with azure.communication.identity module, and then use them to initialize the Communication Services SDKs. Example of using azure.communication.identity:\n\n```bash\npip install azure-communication-identity\n```\n\n```python\nfrom azure.communication.identity import CommunicationIdentityClient\nidentity_client = CommunicationIdentityClient.from_connection_string(\"<connection string of your Communication service>\")\nuser = identity_client.create_user()\ntokenresponse = identity_client.get_token(user, scopes=[\"chat\"])\ntoken = tokenresponse.token\n```\n\nThe `user` created above will be used later, because that user should be added as a participant of new chat thread when you creating\nit with this token. It is because the initiator of the create request must be in the list of the participants of the chat thread.\n\n## Create the Chat Client\n\nThis will allow you to create, get, list or delete chat threads.\n\n```python\nfrom azure.communication.chat import ChatClient, CommunicationTokenCredential\n\n# Your unique Azure Communication service endpoint\nendpoint = \"https://<RESOURCE_NAME>.communcationservices.azure.com\"\nchat_client = ChatClient(endpoint, CommunicationTokenCredential(token))\n```\n\n## Create Chat Thread Client\n\nThe ChatThreadClient will allow you to perform operations specific to a chat thread, like send message, get message, update\nthe chat thread topic, add participants to chat thread, etc.\n\nYou can get it by creating a new chat thread using ChatClient:\n\n```python\ncreate_chat_thread_result = chat_client.create_chat_thread(topic)\nchat_thread_client = chat_client.get_chat_thread_client(create_chat_thread_result.chat_thread.id)\n```\n\nAdditionally, the client can also direct so that the request is repeatable; that is, if the client makes the\nrequest multiple times with the same Idempotency-Token and it will get back an appropriate response without\nthe server executing the request multiple times. The value of the Idempotency-Token is an opaque string\nrepresenting a client-generated, globally unique for all time, identifier for the request.\n\n```python\ncreate_chat_thread_result = chat_client.create_chat_thread(\n    topic,\n    thread_participants=thread_participants,\n    idempotency_token=idempotency_token\n)\nchat_thread_client = chat_client.get_chat_thread_client(create_chat_thread_result.chat_thread.id)\n```\n\nAlternatively, if you have created a chat thread before and you have its thread_id, you can create it by:\n\n```python\nchat_thread_client = chat_client.get_chat_thread_client(thread_id) # thread_id is the id of an existing chat thread\n```\n\n# Key concepts\n\nA chat conversation is represented by a chat thread. Each user in the thread is called a thread participant.\nThread participants can chat with one another privately in a 1:1 chat or huddle up in a 1:N group chat.\nUsers also get near real-time updates for when others are typing and when they have read the messages.\n\nOnce you initialized a `ChatClient` class, you can do the following chat operations:\n\n## Create, get, update, and delete threads\n\nPerform CRD(Create-Read-Delete) operations on threads\n\n```python\ncreate_chat_thread(topic, **kwargs)\nlist_chat_threads(**kwargs)\ndelete_chat_thread(thread_id, **kwargs)\n```\n\nOnce you initialized a `ChatThreadClient` class, you can do the following chat operations:\n\n## Update thread\n\nPerform Update operation on thread topic\n\n```python\nupdate_topic(topic, **kwargs)\n```\n\n## Get Chat thread properties\n```python\nget_properties(**kwargs)\n```\n\n## Send, get, update, and delete messages\n\nPerform CRUD(Create-Read-Update-Delete) operations on messages\n\n```python\nsend_message(content, **kwargs)\nget_message(message_id, **kwargs)\nlist_messages(**kwargs)\nupdate_message(message_id, content, **kwargs)\ndelete_message(message_id, **kwargs)\n```\n\n## Get, add, and remove participants\n\nPerform CRD(Create-Read-Delete) operations on thread participants\n\n```python\nlist_participants(**kwargs)\nadd_participants(thread_participants, **kwargs)\nremove_participant(participant_identifier, **kwargs)\n```\n\n## Send typing notification\n\nNotify the service of typing notification\n\n```python\nsend_typing_notification(**kwargs)\n```\n\n## Send and get read receipt\n\nNotify the service that a message is read and get list of read messages.\n\n```python\nsend_read_receipt(message_id, **kwargs)\nlist_read_receipts(**kwargs)\n```\n\n# Examples\n\nThe following sections provide several code snippets covering some of the most common tasks, including:\n\n- [Thread Operations](#thread-operations)\n- [Message Operations](#message-operations)\n- [Thread Participant Operations](#thread-participant-operations)\n- [Events Operations](#events-operations)\n\n## Thread Operations\n\n### Create a thread\n\nUse the `create_chat_thread` method to create a chat thread.\n\n- Use `topic`, required, to give a thread topic;\n- Use `thread_participants`, optional, to provide a list the `ChatParticipant` to be added to the thread;\n    - `user`, required, it is the `CommunicationUserIdentifier` you created by CommunicationIdentityClient.create_user()\n      from User Access Tokens\n    <!-- [User Access Tokens](#user-access-tokens) -->\n    - `display_name`, optional, is the display name for the thread participant.\n    - `share_history_time`, optional, time from which the chat history is shared with the participant.\n- Use `idempotency_token`, optional, to specify the unique identifier for the request.\n\n\n`CreateChatThreadResult` is the result returned from creating a thread, you can use it to fetch the `id` of\nthe chat thread that got created. This `id` can then be used to fetch a `ChatThreadClient` object using\nthe `get_chat_thread_client` method. `ChatThreadClient` can be used to perform other chat operations to this chat thread.\n\n```python\n# Without idempotency_token and thread_participants\ntopic = \"test topic\"\ncreate_chat_thread_result = chat_client.create_chat_thread(topic)\nchat_thread_client = chat_client.get_chat_thread_client(create_chat_thread_result.chat_thread.id)\n```\n\n```python\n# With idempotency_token and thread_participants\nfrom azure.communication.identity import CommunicationIdentityClient\nfrom azure.communication.chat import ChatParticipant, ChatClient, CommunicationTokenCredential\nimport uuid\nfrom datetime import datetime\n\n# create an user\nidentity_client = CommunicationIdentityClient.from_connection_string('<connection_string>')\nuser = identity_client.create_user()\n\n# user access tokens\ntokenresponse = identity_client.get_token(user, scopes=[\"chat\"])\ntoken = tokenresponse.token\n\n## OR pass existing user\n# from azure.communication.chat import CommunicationUserIdentifier\n# user_id = 'some_user_id'\n# user = CommunicationUserIdentifier(user_id)\n\n# create the chat_client\nendpoint = \"https://<RESOURCE_NAME>.communcationservices.azure.com\"\nchat_client = ChatClient(endpoint, CommunicationTokenCredential(token))\n\n# modify function to implement customer logic\ndef get_unique_identifier_for_request(**kwargs):\n    res = uuid.uuid4()\n    return res\n\ntopic = \"test topic\"\nthread_participants = [ChatParticipant(\n    identifier=user,\n    display_name='name',\n    share_history_time=datetime.utcnow()\n)]\n\n# obtains idempotency_token using some customer logic\nidempotency_token = get_unique_identifier_for_request()\n\ncreate_chat_thread_result = chat_client.create_chat_thread(\n    topic,\n    thread_participants=thread_participants,\n    idempotency_token=idempotency_token)\nthread_id = create_chat_thread_result.chat_thread.id\n\n# fetch ChatThreadClient\nchat_thread_client = chat_client.get_chat_thread_client(create_chat_thread_result.chat_thread.id)\n\n# Additionally, you can also check if all participants were successfully added or not\n# and subsequently retry adding the failed participants again\ndef decide_to_retry(error, **kwargs):\n    \"\"\"\n    Insert some custom logic to decide if retry is applicable based on error\n    \"\"\"\n    return True\n\nretry = [thread_participant for thread_participant, error in create_chat_thread_result.errors if decide_to_retry(error)]\nif retry:\n    chat_thread_client.add_participants(retry)\n```\n\n\n### Get a thread\n\nUse `get_properties` method retrieves a `ChatThreadProperties` from the service; `thread_id` is the unique ID of the thread.\n\n```python\nchat_thread_properties = chat_thread_client.get_properties()\n```\n\n### List chat threads\nUse `list_chat_threads` method retrieves the list of created chat threads\n\n- Use `results_per_page`, optional, The maximum number of messages to be returned per page.\n- Use `start_time`, optional, The start time where the range query.\n\nAn iterator of `[ChatThreadItem]` is the response returned from listing threads\n\n```python\nfrom azure.communication.chat import ChatClient, CommunicationTokenCredential\nfrom datetime import datetime, timedelta\n\ntoken = \"<token>\"\nendpoint = \"https://<RESOURCE_NAME>.communcationservices.azure.com\"\nchat_client = ChatClient(endpoint, CommunicationTokenCredential(token))\nstart_time = datetime.utcnow() - timedelta(days=2)\n\nchat_threads = chat_client.list_chat_threads(results_per_page=5, start_time=start_time)\nfor chat_thread_item_page in chat_threads.by_page():\n    for chat_thread_item in chat_thread_item_page:\n        print(\"thread id:\", chat_thread_item.id)\n```\n\n### Update a thread topic\n\nUse `update_topic` method to update a thread's properties. `topic` is used to describe the change of the thread topic\n- Use `topic` to give thread a new topic;\n\n```python\ntopic = \"new topic\"\nchat_thread_client.update_topic(topic=topic)\n\nchat_thread = chat_thread_client.get_properties(thread_id)\n\nassert chat_thread.topic == topic\n```\n\n### Delete a thread\n\nUse `delete_chat_thread` method to delete a thread; `thread_id` is the unique ID of the thread.\n- Use `thread_id`, required, to specify the unique ID of the thread.\n```python\nchat_client.delete_chat_thread(thread_id=thread_id)\n```\n\n## Message Operations\n\n### Send a message\n\nUse `send_message` method to sends a message to a thread identified by `thread_id`.\n\n- Use `content`, required, to provide the chat message content.\n- Use `chat_message_type`, optional, to provide the chat message type. Possible values include: `ChatMessageType.TEXT`,\n  `ChatMessageType.HTML`, `'text'`, `'html'`; if not specified, `ChatMessageType.TEXT` will be set\n- Use `sender_display_name`,optional, to specify the display name of the sender, if not specified, empty name will be set\n\n`SendChatMessageResult` is the response returned from sending a message, it contains an id, which is the unique ID of the message.\n\n```python\nfrom azure.communication.chat import ChatMessageType\n\ntopic = \"test topic\"\ncreate_chat_thread_result = chat_client.create_chat_thread(topic)\nthread_id = create_chat_thread_result.chat_thread.id\nchat_thread_client = chat_client.get_chat_thread_client(create_chat_thread_result.chat_thread.id)\n\ncontent='hello world'\nsender_display_name='sender name'\nchat_message_type = ChatMessageType.TEXT\n\n# without specifying sender_display_name and chat_message_type\nsend_message_result = chat_thread_client.send_message(content)\nsend_message_result_id = send_message_result.id\nprint(\"Message sent: id: \", send_message_result_id)\n\n# specifying sender_display_name and chat_message_type\nsend_message_result_w_type = chat_thread_client.send_message(\n            content,\n            sender_display_name=sender_display_name,\n            chat_message_type=chat_message_type # equivalent to chat_message_type = 'text'\n)\nsend_message_result_w_type_id = send_message_result_w_type.id\nprint(\"Message sent: id: \", send_message_result_w_type_id)\n```\n\n### Get a message\n\nUse `get_message` method retrieves a message from the service; `message_id` is the unique ID of the message.\n- Use `message_id`,required, to specify message id of an existing message\n`ChatMessage` is the response returned from getting a message, it contains an id, which is the unique ID of the message, and other fields please refer to azure.communication.chat.ChatMessage\n\n```python\nchat_message = chat_thread_client.get_message(message_id=send_message_result_id)\nprint(\"get_chat_message succeeded, message id:\", chat_message.id, \"content: \", chat_message.content)\n```\n\n### List messages\n\nUse `list_messages` method retrieves messages from the service.\n- Use `results_per_page`, optional, The maximum number of messages to be returned per page.\n- Use `start_time`, optional, The start time where the range query.\n\nAn iterator of `[ChatMessage]` is the response returned from listing messages\n\n```python\nfrom datetime import datetime, timedelta\n\nstart_time = datetime.utcnow() - timedelta(days=1)\n\nchat_messages = chat_thread_client.list_messages(results_per_page=1, start_time=start_time)\nfor chat_message_page in chat_messages.by_page():\n    for chat_message in chat_message_page:\n        print(\"ChatMessage: Id=\", chat_message.id, \"; Content=\", chat_message.content.message)\n```\n\n### Update a message\n\nUse `update_message` to update a message identified by threadId and messageId.\n- Use `message_id`,required, is the unique ID of the message.\n- Use `content`, optional, is the message content to be updated; if not specified it is assigned to be empty\n\n```python\ncontent = \"updated message content\"\nchat_thread_client.update_message(send_message_result_id, content=content)\n\nchat_message = chat_thread_client.get_message(message_id=send_message_result_id)\n\nassert chat_message.content.message == content\n```\n\n### Delete a message\n\nUse `delete_message` to delete a message.\n- Use `message_id`, required, is the unique ID of the message.\n\n```python\nchat_thread_client.delete_message(message_id=send_message_result_id)\n```\n\n## Thread Participant Operations\n\n### List thread participants\n\nUse `list_participants` to retrieve the participants of the thread.\n- Use `results_per_page`, optional, The maximum number of participants to be returned per page.\n- Use `skip`, optional, to skips participants up to a specified position in response.\n\nAn iterator of `[ChatParticipant]` is the response returned from listing participants\n\n```python\nchat_participants = chat_thread_client.list_participants(results_per_page=5, skip=5)\nfor chat_participant_page in chat_participants.by_page():\n    for chat_participant in chat_participant_page:\n        print(\"ChatParticipant: \", chat_participant)\n```\n\n### Add thread participants\n\nUse `add_participants` method to add thread participants to the thread.\n\n- Use `thread_participants`, required, to list the `ChatParticipant` to be added to the thread;\n  - `user`, required, it is the `CommunicationUserIdentifier` you created by CommunicationIdentityClient.create_user() from User Access Tokens\n  <!-- [User Access Tokens](#user-access-tokens) -->\n  - `display_name`, optional, is the display name for the thread participant.\n  - `share_history_time`, optional, time from which the chat history is shared with the participant.\n\nA `list(tuple(ChatParticipant, ChatError))` is returned. When participant is successfully added,\nan empty list is expected. In case of an error encountered while adding participant, the list is populated\nwith the failed participants along with the error that was encountered.\n\n```python\nfrom azure.communication.identity import CommunicationIdentityClient\nfrom azure.communication.chat import ChatParticipant\nfrom datetime import datetime\n\n# create 2 users\nidentity_client = CommunicationIdentityClient.from_connection_string('<connection_string>')\nnew_users = [identity_client.create_user() for i in range(2)]\n\n# # conversely, you can also add an existing user to a chat thread; provided the user_id is known\n# from azure.communication.chat import CommunicationUserIdentifier\n#\n# user_id = 'some user id'\n# user_display_name = \"Wilma Flinstone\"\n# new_user = CommunicationUserIdentifier(user_id)\n# participant = ChatParticipant(\n#     identifier=new_user,\n#     display_name=user_display_name,\n#     share_history_time=datetime.utcnow())\n\nparticipants = []\nfor _user in new_users:\n  chat_participant = ChatParticipant(\n    identifier=_user,\n    display_name='Fred Flinstone',\n    share_history_time=datetime.utcnow()\n  )\n  participants.append(chat_participant)\n\nresponse = chat_thread_client.add_participants(thread_participants=participants)\n\ndef decide_to_retry(error, **kwargs):\n    \"\"\"\n    Insert some custom logic to decide if retry is applicable based on error\n    \"\"\"\n    return True\n\n# verify if all users has been successfully added or not\n# in case of partial failures, you can retry to add all the failed participants\nretry = [p for p, e in response if decide_to_retry(e)]\nif retry:\n    chat_thread_client.add_participants(retry)\n```\n\n### Remove thread participant\n\nUse `remove_participant` method to remove thread participant from the thread identified by threadId.\n`identifier` is the `CommunicationUserIdentifier` you created by CommunicationIdentityClient.create_user() from `azure-communication-identity`\n<!-- [User Access Tokens](#user-access-tokens)  -->\nand was added into this chat thread.\n- Use `identifier` to specify the `CommunicationUserIdentifier` you created\n```python\nchat_thread_client.remove_participant(identifier=new_user)\n\n# # conversely you can also do the following; provided the user_id is known\n# from azure.communication.chat import CommunicationUserIdentifier\n#\n# user_id = 'some user id'\n# chat_thread_client.remove_participant(identifier=CommunicationUserIdentifier(new_user))\n\n```\n\n## Events Operations\n\n### Send typing notification\n\nUse `send_typing_notification` method to post a typing notification event to a thread, on behalf of a user.\n\n```python\nchat_thread_client.send_typing_notification()\n```\n\n### Send read receipt\n\nUse `send_read_receipt` method to post a read receipt event to a thread, on behalf of a user.\n- Use `message_id` to specify the id of the message whose read receipt is to be sent\n```python\ncontent='hello world'\nsend_message_result = chat_thread_client.send_message(content)\nsend_message_result_id = send_message_result.id\nchat_thread_client.send_read_receipt(message_id=send_message_result_id)\n```\n\n### List read receipts\n\nUse `list_read_receipts` method retrieves read receipts for a thread.\n- Use `results_per_page`, optional, The maximum number of read receipts to be returned per page.\n- Use `skip`,optional, to skips read receipts up to a specified position in response.\n\nAn iterator of `[ChatMessageReadReceipt]` is the response returned from listing read receipts\n\n```python\nread_receipts = chat_thread_client.list_read_receipts(results_per_page=5, skip=5)\n\nfor read_receipt_page in read_receipts.by_page():\n    for read_receipt in read_receipt_page:\n        print(read_receipt)\n        print(read_receipt.sender)\n        print(read_receipt.chat_message_id)\n        print(read_receipt.read_on)\n```\n\n## Sample Code\n\nThese are code samples that show common scenario operations with the Azure Communication Chat client library.\nThe async versions of the samples (the python sample files appended with `_async`) show asynchronous operations.\nBefore run the sample code, refer to Prerequisites\n<!-- [Prerequisites](#Prerequisites) -->\nto create a resource, then set some Environment Variables\n\n```bash\nset AZURE_COMMUNICATION_SERVICE_ENDPOINT=\"https://<RESOURCE_NAME>.communcationservices.azure.com\"\nset COMMUNICATION_SAMPLES_CONNECTION_STRING=\"<connection string of your Communication service>\"\n\npip install azure-communication-identity\n\npython samples\\chat_client_sample.py\npython samples\\chat_client_sample_async.py\npython samples\\chat_thread_client_sample.py\npython samples\\chat_thread_client_sample_async.py\n```\n\n# Troubleshooting\n\nRunning into issues? This section should contain details as to what to do there.\n\n# Next steps\n\nMore sample code should go [here](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/communication/azure-communication-chat/samples), along with links out to the appropriate example tests.\n\n# Contributing\n\nIf you encounter any bugs or have suggestions, please file an issue in the [Issues](<https://github.com/Azure/azure-sdk-for-python/issues>) section of the project.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fsdk%2Ftemplate%2Fazure-template%2FREADME.png)\n",
        "repo_name": "communication/azure-communication-chat",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-chat",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Azure Communication Email client library for Python\n\nThis package contains a Python SDK for Azure Communication Services for Email.\n\n## Key concepts\n\nThe Azure Communication Email package is used to send emails to multiple types of recipients.\n\n## Getting started\n\n### Prerequisites\n\nYou need an [Azure subscription][azure_sub], a [Communication Service Resource][communication_resource_docs], and an [Email Communication Resource][email_resource_docs] with an active [Domain][domain_overview].\n\nTo create these resource, you can use the [Azure Portal][communication_resource_create_portal], the [Azure PowerShell][communication_resource_create_power_shell], or the [.NET management client library][communication_resource_create_net].\n\n### Installing\n\nInstall the Azure Communication Email client library for Python with [pip](https://pypi.org/project/pip/):\n\n```bash\npip install azure-communication-email\n```\n\n## Examples\n\n`EmailClient` provides the functionality to send email messages.\n\n## Authentication\n\nEmail clients can be authenticated using the connection string acquired from an Azure Communication Resource in the [Azure Portal][azure_portal].\n\n```python\nfrom azure.communication.email import EmailClient\n\nconnection_string = \"endpoint=https://<resource-name>.communication.azure.com/;accessKey=<Base64-Encoded-Key>\"\nclient = EmailClient.from_connection_string(connection_string);\n```\n\nAlternatively, you can also use Active Directory authentication using DefaultAzureCredential.\n\n```python\nfrom azure.communication.email import EmailClient\nfrom azure.identity import DefaultAzureCredential\n\n# To use Azure Active Directory Authentication (DefaultAzureCredential) make sure to have AZURE_TENANT_ID, AZURE_CLIENT_ID and AZURE_CLIENT_SECRET as env variables.\nendpoint = \"https://<resource-name>.communication.azure.com\"\nclient = EmailClient(endpoint, DefaultAzureCredential())\n```\n\nEmail clients can also be authenticated using an [AzureKeyCredential][azure-key-credential].\n\n```python\nfrom azure.communication.email import EmailClient\nfrom azure.core.credentials import AzureKeyCredential\n\ncredential = AzureKeyCredential(\"<api_key>\")\nendpoint = \"https://<resource-name>.communication.azure.com/\"\nclient = EmailClient(endpoint, credential);\n```\n\n### Send an Email Message\n\nTo send an email message, call the `begin_send` function from the `EmailClient`. This will return a poller. You can use this poller to check on the status of the operation and retrieve the result once it's finished.\n\n```python\nmessage = {\n    \"content\": {\n        \"subject\": \"This is the subject\",\n        \"plainText\": \"This is the body\",\n        \"html\": \"html><h1>This is the body</h1></html>\"\n    },\n    \"recipients\": {\n        \"to\": [\n            {\n                \"address\": \"customer@domain.com\",\n                \"displayName\": \"Customer Name\"\n            }\n        ]\n    },\n    \"senderAddress\": \"sender@contoso.com\"\n}\n\npoller = email_client.begin_send(message)\nresult = poller.result()\n```\n\n### Send an Email Message to Multiple Recipients\n\nTo send an email message to multiple recipients, add a object for each recipient type and an object for each recipient.\n\n```python\nmessage = {\n    \"content\": {\n        \"subject\": \"This is the subject\",\n        \"plainText\": \"This is the body\",\n        \"html\": \"html><h1>This is the body</h1></html>\"\n    },\n    \"recipients\": {\n        \"to\": [\n            {\"address\": \"customer@domain.com\", \"displayName\": \"Customer Name\"},\n            {\"address\": \"customer2@domain.com\", \"displayName\": \"Customer Name 2\"}\n        ],\n        \"cc\": [\n            {\"address\": \"ccCustomer@domain.com\", \"displayName\": \"CC Customer Name\"},\n            {\"address\": \"ccCustomer2@domain.com\", \"displayName\": \"CC Customer Name 2\"}\n        ],\n        \"bcc\": [\n            {\"address\": \"bccCustomer@domain.com\", \"displayName\": \"BCC Customer Name\"},\n            {\"address\": \"bccCustomer2@domain.com\", \"displayName\": \"BCC Customer Name 2\"}\n        ]\n    },\n    \"senderAddress\": \"sender@contoso.com\"\n}\n\npoller = email_client.begin_send(message)\nresult = poller.result()\n```\n\n### Send Email with Attachments\n\nAzure Communication Services support sending email with attachments.\n\n```python\nimport base64\n\nwith open(\"C://readme.txt\", \"r\") as file:\n    file_contents = file.read()\n\nfile_bytes_b64 = base64.b64encode(bytes(file_contents, 'utf-8'))\n\nmessage = {\n    \"content\": {\n        \"subject\": \"This is the subject\",\n        \"plainText\": \"This is the body\",\n        \"html\": \"html><h1>This is the body</h1></html>\"\n    },\n    \"recipients\": {\n        \"to\": [\n            {\n                \"address\": \"customer@domain.com\",\n                \"displayName\": \"Customer Name\"\n            }\n        ]\n    },\n    \"senderAddress\": \"sender@contoso.com\",\n    \"attachments\": [\n        {\n            \"name\": \"attachment.txt\",\n            \"attachmentType\": \"text/plain\",\n            \"contentInBase64\": file_bytes_b64.decode()\n        }\n    ]\n}\n\npoller = email_client.begin_send(message)\nresult = poller.result()\n```\n\n## Troubleshooting\n\nEmail operations will throw an exception if the request to the server fails. The Email client will raise exceptions defined in [Azure Core](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/README.md).\n\n```python\nfrom azure.core.exceptions import HttpResponseError\n\ntry:\n    response = email_client.send(message)\nexcept HttpResponseError as ex:\n    print('Exception:')\n    print(ex)\n```\n\n## Next steps\n\n- [Read more about Email in Azure Communication Services][nextsteps]\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [cla.microsoft.com][cla].\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n\n[azure_sub]: https://azure.microsoft.com/free/dotnet/\n[azure_portal]: https://portal.azure.com\n[azure-key-credential]: https://aka.ms/azsdk-python-core-azurekeycredential\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n[communication_resource_docs]: https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource?tabs=windows&pivots=platform-azp\n[email_resource_docs]: https://aka.ms/acsemail/createemailresource\n[communication_resource_create_portal]: https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource?tabs=windows&pivots=platform-azp\n[communication_resource_create_power_shell]: https://docs.microsoft.com/powershell/module/az.communication/new-azcommunicationservice\n[communication_resource_create_net]: https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource?tabs=windows&pivots=platform-net\n[package]: https://www.nuget.org/packages/Azure.Communication.Common/\n[product_docs]: https://aka.ms/acsemail/overview\n[nextsteps]: https://aka.ms/acsemail/overview\n[nuget]: https://www.nuget.org/\n[source]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/communication\n[domain_overview]: https://aka.ms/acsemail/domainsoverview\n",
        "repo_name": "communication/azure-communication-email",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-email",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Azure Communication Identity Package client library for Python\n\nAzure Communication Identity client package is intended to be used to setup the basics for opening a way to use Azure Communication Service offerings. This package helps to create identity user tokens to be used by other client packages such as chat, calling, sms.\n\n[Source code](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-identity)\n| [Package (Pypi)](https://pypi.org/project/azure-communication-identity/)\n| [Package (Conda)](https://anaconda.org/microsoft/azure-communication/)\n| [API reference documentation](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-identity)\n| [Product documentation](https://docs.microsoft.com/azure/communication-services/quickstarts/access-tokens?pivots=programming-language-python)\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Getting started\n### Prerequisites\n- Python 3.7 or later is required to use this package.\n- You must have an [Azure subscription](https://azure.microsoft.com/free/)\n- A deployed Communication Services resource. You can use the [Azure Portal](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource?tabs=windows&pivots=platform-azp) or the [Azure PowerShell](https://docs.microsoft.com/powershell/module/az.communication/new-azcommunicationservice) to set it up.\n### Install the package\nInstall the Azure Communication Identity client library for Python with [pip](https://pypi.org/project/pip/):\n\n```bash\npip install azure-communication-identity\n```\n\n# Key concepts\n## CommunicationIdentityClient\n`CommunicationIdentityClient` provides operations for:\n\n- Create/delete identities to be used in Azure Communication Services. Those identities can be used to make use of Azure Communication offerings and can be scoped to have limited abilities through token scopes.\n\n- Create/revoke scoped user access tokens to access services such as chat, calling, sms. Tokens are issued for a valid Azure Communication identity and can be revoked at any time.\n\n### Initializing Identity Client\n```python\n# You can find your endpoint and access token from your resource in the Azure Portal\nimport os\nfrom azure.communication.identity import CommunicationIdentityClient\nfrom azure.identity import DefaultAzureCredential\n\nconnection_str = \"endpoint=ENDPOINT;accessKey=KEY\"\nendpoint = \"https://<RESOURCE_NAME>.communication.azure.com\"\n\n# To use Azure Active Directory Authentication (DefaultAzureCredential) make sure to have\n# AZURE_TENANT_ID, AZURE_CLIENT_ID and AZURE_CLIENT_SECRET as env variables.\nidentity_client_managed_identity = CommunicationIdentityClient(endpoint, DefaultAzureCredential())\n\n#You can also authenticate using your connection string\nidentity_client = CommunicationIdentityClient.from_connection_string(connection_str)\n\n```\n\n## Examples\nThe following section provides several code snippets covering some of the most common Azure Communication Services tasks, including:\n\n- [Creating a new user](#creating-a-new-user)\n- [Issuing or Refreshing an access token for a user](#issuing-or-refreshing-an-access-token-for-a-user)\n- [Creating a user and a token in a single request](#creating-a-user-and-a-token-in-a-single-request)\n- [Revoking a user's access tokens](#revoking-a-users-access-tokens)\n- [Deleting a user](#deleting-a-user)\n- [Exchanging Azure AD access token of a Teams User for a Communication Identity access token](#exchanging-azure-ad-access-token-of-a-teams-user-for-a-communication-identity-access-token)\n\n### Creating a new user\n\nUse the `create_user` method to create a new user.\n```python\nuser = identity_client.create_user()\nprint(\"User created with id:\" + user.properties['id'])\n```\n\n### Issuing or Refreshing an access token for a user\n\nUse the `get_token` method to issue or refresh a scoped access token for the user. \\\nPass in the user object as a parameter, and a list of `CommunicationTokenScope`. Scope options are:\n- `CHAT` (Chat)\n- `VOIP` (VoIP)\n\n```python\ntokenresponse = identity_client.get_token(user, scopes=[CommunicationTokenScope.CHAT])\nprint(\"Token issued with value: \" + tokenresponse.token)\n```\n\n### Issuing or Refreshing an access token with custom expiration for a user\n\nYou can specify expiration time for the token. The token can be configured to expire in as little as one hour or as long as 24 hours. The default expiration time is 24 hours.\n\n```python\ntoken_expires_in = timedelta(hours=1)\ntokenresponse = identity_client.get_token(user, scopes=[CommunicationTokenScope.CHAT], token_expires_in=token_expires_in)\nprint(\"Token issued with value: \" + tokenresponse.token)\n```\n\n### Creating a user and a token in a single request\nFor convenience, use `create_user_and_token` to create a new user and issue a token with one function call. This translates into a single web request as opposed to creating a user first and then issuing a token.\n\n```python\nuser, tokenresponse = identity_client.create_user_and_token(scopes=[CommunicationTokenScope.CHAT])\nprint(\"User id:\" + user.properties['id'])\nprint(\"Token issued with value: \" + tokenresponse.token)\n```\n\n### Creating a user and a token with custom expiration in a single request\n\nYou can specify expiration time for the token. The token can be configured to expire in as little as one hour or as long as 24 hours. The default expiration time is 24 hours.\n```python\ntoken_expires_in = timedelta(hours=1)\nuser, tokenresponse = identity_client.create_user_and_token(scopes=[CommunicationTokenScope.CHAT], token_expires_in=token_expires_in)\nprint(\"User id:\" + user.properties['id'])\nprint(\"Token issued with value: \" + tokenresponse.token)\n```\n\n### Revoking a user's access tokens\n\nUse `revoke_tokens` to revoke all access tokens for a user. Pass in the user object as a parameter\n```python\nidentity_client.revoke_tokens(user)\n```\n\n### Deleting a user\n\nUse the `delete_user` method to delete a user. Pass in the user object as a parameter\n```python\nidentity_client.delete_user(user)\n```\n\n### Exchanging Azure AD access token of a Teams User for a Communication Identity access token\n\nUse the `get_token_for_teams_user` method to exchange an Azure AD access token of a Teams User for a new Communication Identity access token.\n```python\nidentity_client.get_token_for_teams_user(aad_token, client_id, user_object_id)\n```\n\n# Troubleshooting\nThe Azure Communication Service Identity client will raise exceptions defined in [Azure Core][azure_core].\n\n# Next steps\n## More sample code\n\nPlease take a look at the [samples](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/communication/azure-communication-identity/samples) directory for detailed examples of how to use this library to manage identities and tokens.\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the [Issues](https://github.com/Azure/azure-sdk-for-python/issues) section of the project\n\n# Contributing\nThis project welcomes contributions and suggestions.  Most contributions require you to agree to a\nContributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the\nPR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\n<!-- LINKS -->\n[azure_core]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/README.md\n",
        "repo_name": "communication/azure-communication-identity",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-identity",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Azure Communication JobRouter Package client library for Python\n\nThis package contains a Python SDK for Azure Communication Services for JobRouter.\nRead more about Azure Communication Services [here][product_docs]\n\n[Source code][source] | [Package (Pypi)][pypi] | [Product documentation][product_docs]\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\nYou need an [Azure subscription][azure_sub] and a [Communication Service Resource][communication_resource_docs] to use this package.\n\n- Python 3.7 or later is required to use this package. For more details, please read our page on [Azure SDK for Python version support policy](https://github.com/Azure/azure-sdk-for-python/wiki/Azure-SDKs-Python-version-support-policy).\n- To create a new Communication Service, you can use the [Azure Portal][communication_resource_create_portal], the [Azure PowerShell][communication_resource_create_power_shell]\n\n### Install the package\n\nInstall the Azure Communication JobRouter client library for Python with [pip][pip]:\n\n```bash\npip install azure-communication-jobrouter\n```\n\n## Key concepts\n\n### Job\nA Job represents the unit of work, which needs to be routed to an available Worker.\nA real-world example of this may be an incoming call or chat in the context of a call center.\n\n### Worker\nA Worker represents the supply available to handle a Job. Each worker registers with or more queues to receive jobs.\nA real-world example of this may be an agent working in a call center.\n\n### Queue\nA Queue represents an ordered list of jobs waiting to be served by a worker.  Workers will register with a queue to receive work from it.\nA real-world example of this may be a call queue in a call center.\n\n## Channel\nA Channel represents a grouping of jobs by some type.  When a worker registers to receive work, they must also specify for which channels they can handle work, and how much of each can they handle concurrently.\nA real-world example of this may be `voice calls` or `chats` in a call center.\n\n### Offer\nAn Offer is extended by JobRouter to a worker to handle a particular job when it determines a match, this notification is normally delivered via [EventGrid][subscribe_events].  The worker can either accept or decline the offer using th JobRouter API, or it will expire according to the time to live configured on the distribution policy.\nA real-world example of this may be the ringing of an agent in a call center.\n\n### Distribution Policy\nA Distribution Policy represents a configuration set that governs how jobs in a queue are distributed to workers registered with that queue.\nThis configuration includes how long an Offer is valid before it expires and the distribution mode, which define the order in which workers are picked when there are multiple available.\n\n#### Distribution Mode\nThe 3 types of modes are\n- **Round Robin**: Workers are ordered by `Id` and the next worker after the previous one that got an offer is picked.\n- **Longest Idle**: The worker that has not been working on a job for the longest.\n- **Best Worker**: You can specify an expression to compare 2 workers to determine which one to pick.\n\n### Labels\nYou can attach labels to workers, jobs and queues.  These are key value pairs that can be of `string`, `number` or `boolean` data types.\nA real-world example of this may be the skill level of a particular worker or the team or geographic location.\n\n### Label Selectors\nLabel selectors can be attached to a job in order to target a subset of workers serving the queue.\nA real-world example of this may be a condition on an incoming call that the agent must have a minimum level of knowledge of a particular product.\n\n### Classification policy\nA classification policy can be used to dynamically select a queue, determine job priority and attach worker label selectors to a job by leveraging a rules engine.\n\n### Exception policy\nAn exception policy controls the behavior of a Job based on a trigger and executes a desired action. The exception policy is attached to a Queue so it can control the behavior of Jobs in the Queue.\n\n## Examples\n\n### Client Initialization\nTo initialize the SMS Client, the connection string can be used to instantiate.\nAlternatively, you can also use Active Directory authentication using DefaultAzureCredential.\n\n```python\nfrom azure.communication.jobrouter import (\n    RouterClient,\n    RouterAdministrationClient\n)\n\nconnection_string = \"endpoint=ENDPOINT;accessKey=KEY\"\nrouter_client = RouterClient.from_connection_string(conn_str = connection_string)\nrouter_admin_client = RouterAdministrationClient.from_connection_string(conn_str = connection_string)\n```\n\n### Distribution Policy\nBefore we can create a Queue, we need a Distribution Policy.\n\n```python\nfrom azure.communication.jobrouter import (\n    LongestIdleMode,\n    DistributionPolicy\n)\n\ndistribution_policy: DistributionPolicy = DistributionPolicy(\n    offer_ttl_seconds = 24 * 60 * 60,\n    mode = LongestIdleMode(\n        min_concurrent_offers = 1,\n        max_concurrent_offers = 1\n    )\n)\n\ndistribution_policy: DistributionPolicy = router_admin_client.create_distribution_policy(\n    distribution_policy_id = \"distribution-policy-1\",\n    distribution_policy = distribution_policy\n)\n```\n### Queue\nNext, we can create the queue.\n\n```python\nfrom azure.communication.jobrouter import (\n    JobQueue\n)\n\nqueue: JobQueue = JobQueue(\n    distribution_policy_id = \"distribution-policy-1\"\n)\n\nqueue: JobQueue = router_admin_client.create_queue(\n    queue_id = \"queue-1\",\n    queue = queue\n)\n```\n\n### Job\nNow, we can submit a job directly to that queue, with a worker selector the requires the worker to have the label `Some-Skill` greater than 10.\n```python\nfrom azure.communication.jobrouter import (\n    RouterJob,\n    WorkerSelector,\n    LabelOperator\n)\n\nrouter_job: RouterJob = RouterJob(\n    channel_id = \"my-channel\",\n    queue_id = \"queue-1\",\n    channel_reference = \"12345\",\n    priority = 1,\n    requested_worker_selectors = [\n        WorkerSelector(key = \"Some-Skill\", label_operator = LabelOperator.EQUAL, value = 10)\n    ]\n)\n\njob: RouterJob = router_client.create_job(\n    job_id = \"jobId-1\",\n    router_job = router_job\n)\n```\n\n### Worker\nNow, we register a worker to receive work from that queue, with a label of `Some-Skill` equal to 11.\n```python\nfrom azure.communication.jobrouter import (\n    RouterWorker,\n    QueueAssignment,\n    ChannelConfiguration\n)\n\nrouter_worker: RouterWorker = RouterWorker(\n    total_capacity = 1,\n    queue_assignments = {\n        \"queue-1\": QueueAssignment()\n    },\n    labels = {\n        \"Some-Skill\": 11\n    },\n    channel_configurations = {\n        \"my-channel\": ChannelConfiguration(capacity_cost_per_job = 1)\n    },\n    available_for_offers = True\n)\n\nworker = router_client.create_worker(\n    worker_id = \"worker-1\",\n    router_worker = router_worker\n)\n```\n\n### Offer\nWe should get a [RouterWorkerOfferIssued][offer_issued_event_schema] from our [EventGrid subscription][subscribe_events].\n\nThere are several different Azure services that act as a [event handler][event_grid_event_handlers].\nFor this scenario, we are going to assume Webhooks for event delivery. [Learn more about Webhook event delivery][webhook_event_grid_event_delivery]\n\nOnce events are delivered to the event handler, we can deserialize the JSON payload into a list of events.\n\n```python\n# Parse the JSON payload into a list of events\nfrom azure.eventgrid import EventGridEvent\nimport json\n\n## deserialize payload into a list of typed Events\nevents = [EventGridEvent.from_json(json.loads(msg)) for msg in payload]\n```\n\n```python\noffer_id = \"\"\nfor event in events:\n    if event.event_type == \"Microsoft.Communication.RouterWorkerOfferIssued\":\n        offer_id = event.data.offer_id\n    else:\n        continue\n```\n\nHowever, we could also wait a few seconds and then query the worker directly against the JobRouter API to see if an offer was issued to it.\n```python\nfrom azure.communication.jobrouter import (\n    RouterWorker,\n)\n\nrouter_worker: RouterWorker = router_client.get_worker(worker_id = \"worker-1\")\n\nfor offer in router_worker.offers:\n    print(f\"Worker {router_worker.id} has an active offer for job {offer.job_id}\")\n```\n### Accept an offer\nOnce a worker receives an offer, it can take two possible actions: accept or decline. We are going to accept the offer.\n```python\nfrom azure.communication.jobrouter import (\n    JobOffer,\n    AcceptJobOfferResult,\n    RouterJobStatus\n)\n\n# fetching the offer id\njob_offer: JobOffer = [offer for offer in router_worker.offers if offer.job_id == \"jobId-1\"][0]\noffer_id = job_offer.id\n\n# accepting the offer sent to `worker-1`\naccept_job_offer_result: AcceptJobOfferResult = router_client.accept_job_offer(\n    worker_id = \"worker-1\",\n    offer_id = offer_id\n)\n\nprint(f\"Offer: {job_offer.id} sent to worker: {router_worker.id} has been accepted\")\nprint(f\"Job has been assigned to worker: {router_worker.id} with assignment: {accept_job_offer_result.assignment_id}\")\n\n# verify job assignment is populated when querying job\nupdated_job = router_client.get_job(job_id = \"jobId-1\")\nprint(f\"Job assignment has been successful: {updated_job.job_status == RouterJobStatus.Assigned and accept_job_offer_result.assignment_id in updated_job.assignments}\")\n```\n\n### Completing a job\nOnce the worker is done with the job, the worker has to mark the job as `completed`.\n```python\nimport datetime\nfrom azure.communication.jobrouter import (\n    CompleteJobResult\n)\n\ncomplete_job_result: CompleteJobResult = router_client.complete_job(\n    job_id = \"jobId-1\",\n    assignment_id = accept_job_offer_result.assignment_id,\n    note = f\"Job has been completed by {router_worker.id} at {datetime.datetime.utcnow()}\"\n)\n\nprint(f\"Job has been successfully completed.\")\n```\n\n### Closing a job\nAfter a job has been completed, the worker can perform wrap up actions to the job before closing the job and finally releasing its capacity to accept more incoming jobs\n```python\nfrom azure.communication.jobrouter import (\n    CloseJobResult,\n    RouterJob,\n    RouterJobStatus\n)\n\nclose_job_result: CloseJobResult = router_client.close_job(\n    job_id = \"jobId-1\",\n    assignment_id = accept_job_offer_result.assignment_id,\n    note = f\"Job has been closed by {router_worker.id} at {datetime.datetime.utcnow()}\"\n)\n\nprint(f\"Job has been successfully closed.\")\n\nupdate_job: RouterJob = router_client.get_job(job_id = \"jobId-1\")\nprint(f\"Updated job status: {update_job.job_status == RouterJobStatus.CLOSED}\")\n```\n\n```python\nimport time\nfrom datetime import datetime, timedelta\nfrom azure.communication.jobrouter import (\n    CloseJobResult,\n    RouterJob,\n    RouterJobStatus\n)\n\nclose_job_in_future_result: CloseJobResult = router_client.close_job(\n    job_id = \"jobId-1\",\n    assignment_id = accept_job_offer_result.assignment_id,\n    note = f\"Job has been closed by {router_worker.id} at {datetime.utcnow()}\",\n    close_time = datetime.utcnow() + timedelta(seconds = 2)\n)\n\nprint(f\"Job has been marked to close\")\ntime.sleep(secs = 2)\nupdate_job: RouterJob = router_client.get_job(job_id = \"jobId-1\")\nprint(f\"Updated job status: {update_job.job_status == RouterJobStatus.CLOSED}\")\n```\n\n## Troubleshooting\n\nRunning into issues? This section should contain details as to what to do there.\n\n## Next steps\n- [Read more about Router in Azure Communication Services][nextsteps]\n\n### More sample code\nPlease take a look at the [samples][job_router_samples] directory for detailed examples of how to use this library.\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the [Issues](https://github.com/Azure/azure-sdk-for-python/issues) section of the project\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [cla.microsoft.com][cla].\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n[azure_core]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/README.md\n[azure_sub]: https://azure.microsoft.com/free/python/\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n[communication_resource_docs]: https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource?tabs=windows&pivots=platform-azp\n[communication_resource_create_portal]:  https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource?tabs=windows&pivots=platform-azp\n[communication_resource_create_power_shell]: https://docs.microsoft.com/powershell/module/az.communication/new-azcommunicationservice\n[communication_resource_create_net]: https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource?tabs=windows&pivots=platform-net\n[nextsteps]:https://docs.microsoft.com/azure/communication-services/concepts/router/concepts\n\n[//]: # ([source]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-jobrouter)\n[product_docs]: https://docs.microsoft.com/azure/communication-services/overview\n[classification_concepts]: https://docs.microsoft.com/azure/communication-services/concepts/router/classification-concepts\n[subscribe_events]: https://docs.microsoft.com/azure/communication-services/how-tos/router-sdk/subscribe-events\n[offer_issued_event_schema]: https://docs.microsoft.com/azure/communication-services/how-tos/router-sdk/subscribe-events#microsoftcommunicationrouterworkerofferissued\n[deserialize_event_grid_event_data]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/eventgrid/azure-eventgrid#consume-from-servicebus\n[event_grid_event_handlers]: https://docs.microsoft.com/azure/event-grid/event-handlers\n[webhook_event_grid_event_delivery]: https://docs.microsoft.com/azure/event-grid/webhook-event-delivery\n[pypi]: https://pypi.org\n[pip]: https://pypi.org/project/pip/\n\n[//]: # ([job_router_samples]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/communication/azure-communication-jobrouter/samples)",
        "repo_name": "communication/azure-communication-jobrouter",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-jobrouter",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Azure Communication Network Traversal Package client library for Python\n\nAzure Communication Network Traversal is managing TURN credentials for Azure Communication Services.\n\nIt will provide TURN credentials to a user.\n\n[Source code](https://github.com/Azure/azure-sdk-for-python/blob/master/sdk/communication) | [API reference documentation](https://github.com/Azure/azure-sdk-for-python/blob/master/sdk/communication)\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Getting started\n\n### Prerequisites\n\n- Python 3.7 or later is required to use this package.\n- You must have an [Azure subscription](https://azure.microsoft.com/free/)\n- A deployed Communication Services resource. You can use the [Azure Portal](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource?tabs=windows&pivots=platform-azp) or the [Azure PowerShell](https://docs.microsoft.com/powershell/module/az.communication/new-azcommunicationservice) to set it up.\n\n### Install the package\n\nInstall the Azure Communication Identity client library for Python with [pip](https://pypi.org/project/pip/):\nInstall the Azure Communication Relay Client library for Python with [pip](https://pypi.org/project/pip/):\n\n```bash\npip install azure-communication-identity\npip install azure-communication-networktraversal\n```\n\n# Key concepts\n\n## Examples\n\n### Initializing Relay Client\n\nThe following section provides code snippets covering some of the most common Azure Communication Network Traversal tasks, including:\n\n- [Getting the relay configuration](#getting-the-relay-configuration)\n\n```python\n# You can find your endpoint and access token from your resource in the Azure Portal\nimport os\nfrom azure.communication.networktraversal import CommunicationRelayClient\nfrom azure.identity import DefaultAzureCredential\nfrom azure.communication.identity import CommunicationIdentityClient\n\nconnection_str = \"endpoint=ENDPOINT;accessKey=KEY\"\nendpoint = \"https://<RESOURCE_NAME>.communication.azure.com\"\n\n# To use Azure Active Directory Authentication (DefaultAzureCredential) make sure to have\n# AZURE_TENANT_ID, AZURE_CLIENT_ID and AZURE_CLIENT_SECRET as env variables.\n# We also need Identity client to get a User Identifier\nidentity_client = CommunicationIdentityClient(endpoint, DefaultAzureCredential())\nrelay_client = CommunicationRelayClient(endpoint, DefaultAzureCredential())\n```\n\n#You can also authenticate using your connection string\n\n```python\nidentity_client = CommunicationIdentityClient.from_connection_string(self.connection_string)\nrelay_client = CommunicationRelayClient.from_connection_string(self.connection_string)\n```\n\n### Getting the relay configuration providing a user\n\n```python\n# We need a user from Identity\nuser = identity_client.create_user()\nrelay_configuration = relay_client.get_relay_configuration(user=user)\n\nfor iceServer in config.ice_servers:\n    assert iceServer.username is not None\n    print('Username: ' + iceServer.username)\n\n    assert iceServer.credential is not None\n    print('Credential: ' + iceServer.credential)\n    \n    assert iceServer.urls is not None\n    for url in iceServer.urls:\n        print('Url:' + url)\n```\n\n### Getting the relay configuration without providing a user\n\n```python\nrelay_configuration = relay_client.get_relay_configuration()\n\nfor iceServer in config.ice_servers:\n    assert iceServer.username is not None\n    print('Username: ' + iceServer.username)\n\n    assert iceServer.credential is not None\n    print('Credential: ' + iceServer.credential)\n    \n    assert iceServer.urls is not None\n    for url in iceServer.urls:\n        print('Url:' + url)\n```\n\n### Getting the relay configuration without providing a RouteType\n\n```python\n# We need a user from Identity\nuser = identity_client.create_user()\nrelay_configuration = relay_client.get_relay_configuration(user=user, route_type=RouteType.NEAREST)\n\nfor iceServer in config.ice_servers:\n    assert iceServer.username is not None\n    print('Username: ' + iceServer.username)\n\n    assert iceServer.credential is not None\n    print('Credential: ' + iceServer.credential)\n    \n    assert iceServer.urls is not None\n    for url in iceServer.urls:\n        print('Url:' + url)\n```\n\n# Troubleshooting\n\nThe Azure Communication Relay client will raise exceptions defined in [Azure Core][azure_core].\n\n# Next steps\n\n## More sample code\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the [Issues](https://github.com/Azure/azure-sdk-for-python/issues) section of the project\n\n# Contributing\n\nThis project welcomes contributions and suggestions.  Most contributions require you to agree to a\nContributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the\nPR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\n<!-- LINKS -->\n[azure_core]: https://github.com/Azure/azure-sdk-for-python/blob/master/sdk/core/azure-core/README.md\n",
        "repo_name": "communication/azure-communication-networktraversal",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-networktraversal",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Azure Communication Phone Numbers Package client library for Python\n\nAzure Communication Phone Numbers client package is used to administer Phone Numbers.\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Getting started\n### Prerequisites\n- Python 3.7 or later is required to use this package.\n- You must have an [Azure subscription](https://azure.microsoft.com/free/)\n- A deployed Communication Services resource. You can use the [Azure Portal](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource?tabs=windows&pivots=platform-azp) or the [Azure PowerShell](https://docs.microsoft.com/powershell/module/az.communication/new-azcommunicationservice) to set it up.\n### Install the package\nInstall the Azure Communication Phone Numbers client library for Python with [pip](https://pypi.org/project/pip/):\n\n```bash\npip install azure-communication-phonenumbers\n```\n\n## Key concepts\n\nThis SDK provides functionality to easily manage `direct offer` and `direct routing` numbers.\n\nThe `direct offer` numbers come in two types: Geographic and Toll-Free. Geographic phone plans are phone plans associated with a location, whose phone numbers' area codes are associated with the area code of a geographic location. Toll-Free phone plans are phone plans not associated location. For example, in the US, toll-free numbers can come with area codes such as 800 or 888.\nThey are managed using the `PhoneNumbersClient`\n\nThe `direct routing` feature enables connecting your existing telephony infrastructure to ACS.\nThe configuration is managed using the `SipRoutingClient`, which provides methods for setting up SIP trunks and voice routing rules, in order to properly handle calls for your telephony subnet.\n\n### Initializing Client\nClient can be initialized using the AAD authentication.\n\n```python\nimport os\nfrom azure.communication.phonenumbers import PhoneNumbersClient\nfrom azure.identity import DefaultAzureCredential\n\nendpoint = \"https://<RESOURCE_NAME>.communication.azure.com\"\n# To use Azure Active Directory Authentication (DefaultAzureCredential) make sure to have your\n# AZURE_TENANT_ID, AZURE_CLIENT_ID and AZURE_CLIENT_SECRET as env variables.\nphone_numbers_client = PhoneNumbersClient(endpoint, DefaultAzureCredential())\n```\n\n```python\nimport os\nfrom azure.communication.phonenumbers.siprouting import SipRoutingClient\nfrom azure.identity import DefaultAzureCredential\n\nendpoint = \"https://<RESOURCE_NAME>.communication.azure.com\"\n# To use Azure Active Directory Authentication (DefaultAzureCredential) make sure to have your\n# AZURE_TENANT_ID, AZURE_CLIENT_ID and AZURE_CLIENT_SECRET as env variables.\nsip_routing_client = SipRoutingClient(endpoint, DefaultAzureCredential())\n```\n\nAnother option is to initialize the client using connection string of the resource.\n\n```python\n# You can find your connection string from your resource in the Azure Portal\nimport os\nfrom azure.communication.phonenumbers import PhoneNumbersClient\n\nconnection_str = \"endpoint=ENDPOINT;accessKey=KEY\"\nphone_numbers_client = PhoneNumbersClient.from_connection_string(connection_str)\n```\n\n```python\n# You can find your connection string from your resource in the Azure Portal\nimport os\nfrom azure.communication.phonenumbers.siprouting import SipRoutingClient\n\nconnection_str = \"endpoint=ENDPOINT;accessKey=KEY\"\nsip_routing_client = SipRoutingClient.from_connection_string(connection_str)\n```\n\n### Phone numbers client\n\n#### Phone number types overview\n\nPhone numbers come in two types; Geographic and Toll-Free. Geographic phone numbers are phone numbers associated with a location, whose area codes are associated with the area code of a geographic location. Toll-Free phone numbers are phone numbers with no associated location. For example, in the US, toll-free numbers can come with area codes such as 800 or 888.\n\n#### Searching and Purchasing and Releasing numbers\n\nPhone numbers can be searched through the search creation API by providing an area code, quantity of phone numbers, application type, phone number type, and capabilities. The provided quantity of phone numbers will be reserved for ten minutes and can be purchased within this time. If the search is not purchased, the phone numbers will become available to others after ten minutes. If the search is purchased, then the phone numbers are acquired for the Azure resources.\n\nPhone numbers can also be released using the release API.\n\n### SIP routing client\n\nDirect routing feature allows connecting customer-provided telephony infrastructure to Azure Communication Resources. In order to setup routing configuration properly, customer needs to supply the SIP trunk configuration and SIP routing rules for calls. SIP routing client provides the necessary interface for setting this configuration.\n\nWhen a call is made, system tries to match the destination number with regex number patterns of defined routes. The first route to match the number will be selected. The order of regex matching is the same as the order of routes in configuration, therefore the order of routes matters.\nOnce a route is matched, the call is routed to the first trunk in the route's trunks list. If the trunk is not available, next trunk in the list is selected.\n\n## Examples\n\n### PhoneNumbersClient\n\n#### Get All Purchased Phone Numbers\n\nLists all of your purchased phone numbers\n\n```python\npurchased_phone_numbers = phone_numbers_client.list_purchased_phone_numbers()\nfor acquired_phone_number in purchased_phone_numbers:\n    print(acquired_phone_number.phone_number)\n```\n\n#### Get Purchased Phone Number\n\nGets the information from the specified phone number\n\n```python\nresult = phone_numbers_client.get_purchased_phone_number(\"<phone number>\")\nprint(result.country_code)\nprint(result.phone_number)\n```\n\n### Long Running Operations\n\nThe Phone Number Client supports a variety of long running operations that allow indefinite polling time to the functions listed down below.\n\n#### Search for Available Phone Number\n\nYou can search for available phone numbers by providing the capabilities of the phone you want to acquire, the phone number type, the assignment type, and the country code. It's worth mentioning that for the toll-free phone number type, proving the area code is optional.\nThe result of the search can then be used to purchase the number in the corresponding API.\n\n```python\ncapabilities = PhoneNumberCapabilities(\n        calling = PhoneNumberCapabilityType.INBOUND,\n        sms = PhoneNumberCapabilityType.INBOUND_OUTBOUND\n    )\npoller = phone_numbers_client.begin_search_available_phone_numbers(\n    \"US\",\n    PhoneNumberType.TOLL_FREE,\n    PhoneNumberAssignmentType.APPLICATION,\n    capabilities,\n    area_code =\"833\", # Area code is optional for toll-free numbers\n    quantity = 2, # Quantity is optional. If not set, default is 1\n    polling = True\n)\nsearch_result = poller.result()\n```\n\n#### Purchase Phone Numbers\n\nThe result of your search can be used to purchase the specified phone numbers. This can be done by passing the `search_id` from the search response to the purchase phone number API.\n\n```python\npurchase_poller = phone_numbers_client.begin_purchase_phone_numbers(\n    search_result.search_id,\n    polling=True\n)\n```\n\n#### Release Phone Number\n\nReleases an acquired phone number.\n\n```python\npoller = self.phone_number_client.begin_release_phone_number(\n    \"<phone number>\",\n    polling = True\n)\n```\n\n#### Updating Phone Number Capabilities\n\nUpdates the specified phone number capabilities for Calling and SMS to one of:\n\n- `PhoneNumberCapabilityType.NONE`\n- `PhoneNumberCapabilityType.INBOUND`\n- `PhoneNumberCapabilityType.OUTBOUND`\n- `PhoneNumberCapabilityType.INBOUND_OUTBOUND`\n\n```python\npoller = self.phone_number_client.begin_update_phone_number_capabilities(\n    \"<phone number>\",\n    PhoneNumberCapabilityType.OUTBOUND,\n    PhoneNumberCapabilityType.INBOUND_OUTBOUND,\n    polling = True\n)\n```\n\n### SipRoutingClient\n\n#### Retrieve SIP trunks and routes\n\nGet the list of currently configured trunks or routes.\n\n```python\ntrunks = sip_routing_client.list_trunks()\nfor trunk in trunks:\n    print(trunk.fqdn)\n    print(trunk.sip_signaling_port)\nroutes = sip_routing_client.list_routes()\nfor route in routes:\n    print(route.name)\n    print(route.description)\n    print(route.number_pattern)\n    for trunk_fqdn in route.trunks:\n        print(trunk_fqdn)\n```\n\n#### Replace SIP trunks and routes\n\nReplace the list of currently configured trunks or routes with new values.\n\n```python\nnew_trunks = [SipTrunk(fqdn=\"sbs1.contoso.com\", sip_signaling_port=1122), SipTrunk(fqdn=\"sbs2.contoso.com\", sip_signaling_port=1123)]\nnew_routes = [SipTrunkRoute(name=\"First rule\", description=\"Handle numbers starting with '+123'\", number_pattern=\"\\+123[0-9]+\", trunks=[\"sbs1.sipconfigtest.com\"])]\nsip_routing_client.set_trunks(new_trunks)\nsip_routing_client.set_routes(new_routes)\n```\n\n#### Retrieve single trunk\n\n```python\ntrunk = sip_routing_client.get_trunk(\"sbs1.contoso.com\")\n```\n\n#### Set single trunk\n\n```python\n# Set function will either modify existing item or add new item to the collection.\n# The trunk is matched based on it's FQDN.\nnew_trunk = SipTrunk(fqdn=\"sbs3.contoso.com\", sip_signaling_port=5555)\nsip_routing_client.set_trunk(new_trunk)\n```\n\n#### Delete single trunk\n\n```python\nsip_routing_client.delete_trunk(\"sbs1.contoso.com\")\n```\n\n# Troubleshooting\nThe Phone Numbers Administration client will raise exceptions defined in [Azure Core][azure_core].\n\n# Next steps\n## More sample code\n\nPlease take a look at the [samples](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/communication/azure-communication-phonenumbers/samples) directory for detailed examples of how to use this library.\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the [Issues](https://github.com/Azure/azure-sdk-for-python/issues) section of the project\n\n# Contributing\nThis project welcomes contributions and suggestions.  Most contributions require you to agree to a\nContributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the\nPR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\n<!-- LINKS -->\n[azure_core]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/README.md\n",
        "repo_name": "communication/azure-communication-phonenumbers",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-phonenumbers",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Azure Communication Rooms client library for Python\nThis package contains a Python SDK for Azure Communication Services for Rooms.\nRead more about Azure Communication Services [here](https://docs.microsoft.com/azure/communication-services/overview)\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please\nrefer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Key concepts\n\nThe Azure Communication Rooms package is used to do following:\n- Create scheduled meetings\n- Create meetings with managed permissions for its participants\n## Getting started\n\n### Installating the package\n\n```bash\npython -m pip install azure-communication-rooms\n```\n\n#### Prequisites\n\n- Python 3.7 or later is required to use this package.\n- You need an [Azure subscription][azure_sub] to use this package.\n- A deployed Communication Services resource. You can use the [Azure Portal](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource?tabs=windows&pivots=platform-azp) or the [Azure PowerShell](https://docs.microsoft.com/powershell/module/az.communication/new-azcommunicationservice) to set it up.\n\n\n### Client Initialization\n\nTo initialize the Rooms Client, the connection string can be used to instantiate.\n\n```python\nfrom azure.communication.rooms import RoomsClient\n\nclient = RoomsClient.from_connection_string(conn_str='<connection_str>' )\n```\n## Examples\n\n### Key parameters\n\n- `valid_from`: A datetime object from which room will start existing\n- `valid_until`: A datetime object after which room meeting would end\n- `participants`: A list of `RoomParticipant`s containing MRI's of invitees to the room as well as optional `ParticipantRole`. If `ParticipantRole` is not specified, then it will be `Attendee` by default.\nAll the above attributes are optional. The service provides default values of valid_until and\nvalid_from if they are missing. The default for`valid_from` is current date time and the default for `valid_until` is `valid_from + 180 days`.\n\n### Create a room\nTo create a room, call the `create_room` function from `RoomsClient`. The `valid_from`, `valid_until`, and `participants` arguments are all optional.\n\n```python\nfrom azure.core.exceptions import HttpResponseError\nfrom datetime import datetime, timedelta\nfrom azure.communication.rooms import (\n    RoomsClient,\n    RoomParticipant,\n    ParticipantRole\n)\nfrom azure.communication.identity import CommunicationUserIdentifier\n\nclient = RoomsClient.from_connection_string(conn_str='<connection_str>')\nvalid_from = datetime.now()\nvalid_until = valid_from + relativedelta(months=+1)\nparticipants = []\nparticipants.append(RoomParticipant(CommunicationUserIdentifier(\"<ACS User MRI identity 1>\")))\nparticipants.append(RoomParticipant(CommunicationUserIdentifier(\"<ACS User MRI identity 2>\"), ParticipantRole.CONSUMER))\nparticipants.append(RoomParticipant(CommunicationUserIdentifier(\"<ACS User MRI identity 3>\"), ParticipantRole.PRESENTER))\n\ntry:\n    create_room_response = client.create_room(\n        valid_from=valid_from,\n        valid_until=valid_until,\n        participants=participants\n    )\nexcept HttpResponseError as ex:\n    print(ex)\n```\n### Update a room\nThe `valid_from` and `valid_until` properties of a created room can be updated by calling the `update_room` function from `RoomsClient`.\n\n```python\ntry:\n    update_room_response = client.update_room(\n        room_id=\"id of the room to be updated\",\n        valid_from=datetime.now(),\n        valid_until=valid_from + timedelta(weeks=4)\n    )\nexcept HttpResponseError as e:\n    print('service responds error: {}'.format(e))\n\n```\n\n### Get a room\nA created room can be retrieved by calling the `get_room` function from `RoomsClient` and passing in the associated `room_id`.\n\n```python\ntry:\n    get_room_response = client.get_room(room_id=\"id of the room to get\")\nexcept HttpResponseError as ex:\n    print(ex)\n```\n\n### List rooms\nRetrieve all valid rooms created with an ACS resource by calling the `list_rooms` function from `RoomsClient`.\n\n```python\ntry:\n    list_room_response = client.list_rooms()\nexcept HttpResponseError as ex:\n    print(ex)\n```\n\n### Delete a room\nTo delete a room, call the `delete_room` function from RoomsClient.\n\n```python\ntry:\n    client.delete_room(\n        room_id=\"id of the room to be deleted\")\nexcept HttpResponseError as e:\n    print('service responds error: {}'.format(e))\n\n```\n\n### Add or update participants in a room\nIn order to insert new participants or update existing participants, call the `add_or_update_participants` function from RoomsClient.\n\n```python\nparticipants = []\nparticipants.append(RoomParticipant(CommunicationUserIdentifier(\"<ACS User MRI identity 1>\")))\nparticipants.append(RoomParticipant(CommunicationUserIdentifier(\"<ACS User MRI identity 2>\"), ParticipantRole.ATTENDEE))\nparticipants.append(RoomParticipant(CommunicationUserIdentifier(\"<ACS User MRI identity 3>\"), ParticipantRole.CONSUMER))\ntry:\n    response = client.add_or_update_participants(\n        room_id=\"id of the room to be updated\",\n        participants=participants\n    )\nexcept HttpResponseError as e:\n    print('service responds error: {}'.format(e))\n```\n\n### Remove participants\nRemove participants from a room by calling the `remove_participants` function from RoomsClient.\n\n```python\ncommunication_identifiers = [CommunicationUserIdentifier(\"<ACS User MRI identity 2>\")]\n\ntry:\n    remove_participants_response = client.remove_participants(\n        room_id=room_id,\n        participants=communication_identifiers\n    )\nexcept HttpResponseError as ex:\n    print(ex)\n```\n### List participants\nRetrieve the list of participants for an existing room by referencing the `room_id`:\n\n```python\ntry:\n    participants = self.rooms_client.list_participants(room_id)\nexcept HttpResponseError as ex:\n    print(ex)\n```\n## Troubleshooting\n\nRooms operations will throw an exception if the request to the server fails. The Rooms client will raise exceptions defined in [Azure Core](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/README.md).\n\n## Next steps\n### More sample code\nPlease take a look at the [samples](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/communication/azure-communication-rooms/samples) directory for detailed examples of how to use this library to create and manage rooms.\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the [Issues](https://github.com/Azure/azure-sdk-for-python/issues) section of the project\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require\nyou to agree to a Contributor License Agreement (CLA) declaring that you have\nthe right to, and actually do, grant us the rights to use your contribution.\nFor details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether\nyou need to provide a CLA and decorate the PR appropriately (e.g., label,\ncomment). Simply follow the instructions provided by the bot. You will only\nneed to do this once across all repos using our CLA.\n\nThis project has adopted the\n[Microsoft Open Source Code of Conduct][code_of_conduct]. For more information,\nsee the Code of Conduct FAQ or contact opencode@microsoft.com with any\nadditional questions or comments.\n\n<!-- LINKS -->\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[authenticate_with_token]: https://docs.microsoft.com/azure/cognitive-services/authentication?tabs=powershell#authenticate-with-an-authentication-token\n[azure_identity_credentials]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity#credentials\n[azure_identity_pip]: https://pypi.org/project/azure-identity/\n[default_azure_credential]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity#defaultazurecredential\n[pip]: https://pypi.org/project/pip/\n[azure_sub]: https://azure.microsoft.com/free/\n",
        "repo_name": "communication/azure-communication-rooms",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-rooms",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Azure Communication SMS Package client library for Python\n\nThis package contains a Python SDK for Azure Communication Services for SMS.\nRead more about Azure Communication Services [here](https://docs.microsoft.com/azure/communication-services/overview)\n\n[Source code](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-sms)\n| [Package (Pypi)](https://pypi.org/project/azure-communication-sms/)\n| [Package (Conda)](https://anaconda.org/microsoft/azure-communication/)\n| [API reference documentation](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-sms)\n| [Product documentation](https://docs.microsoft.com/azure/communication-services/quickstarts/telephony-sms/send?pivots=programming-language-python)\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7 or later is required to use this package.\n- A deployed Communication Services resource. You can use the [Azure Portal](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource?tabs=windows&pivots=platform-azp) or the [Azure PowerShell](https://docs.microsoft.com/powershell/module/az.communication/new-azcommunicationservice) to set it up.\n- You must have a phone number configured that is associated with an Azure subscription\n\n### Install the package\n\nInstall the Azure Communication SMS client library for Python with [pip](https://pypi.org/project/pip/):\n\n```bash\npip install azure-communication-sms\n```\n\n## Key concepts\n\nAzure Communication SMS package is used to do following:\n- Send a 1:1 SMS Message\n- Send a 1:N SMS Message\n\n## Examples\n\nThe following section provides several code snippets covering some of the most common Azure Communication Services tasks, including:\n\n- [Client Initialization](#client-initialization)\n- [Send a 1:1 SMS Message](#send-a-11-sms-message)\n- [Send a 1:N SMS Message](#send-a-1n-sms-message)\n\n### Client Initialization\n\nTo initialize the SMS Client, the connection string can be used to instantiate.\nAlternatively, you can also use Active Directory authentication using DefaultAzureCredential.\n\n```python\nfrom azure.communication.sms import SmsClient\nfrom azure.identity import DefaultAzureCredential\n\nconnection_str = \"endpoint=ENDPOINT;accessKey=KEY\"\nsms_client = SmsClient.from_connection_string(connection_string)\n\n# To use Azure Active Directory Authentication (DefaultAzureCredential) make sure to have\n# AZURE_TENANT_ID, AZURE_CLIENT_ID and AZURE_CLIENT_SECRET as env variables.\nendpoint = \"https://<RESOURCE_NAME>.communication.azure.com\"\nsms_client = SmsClient(endpoint, DefaultAzureCredential())\n```\n\n### Send a 1:1 SMS Message\n\nOnce the client is initialized, the `send` method can be invoked:\n\n```python\nfrom azure.communication.sms import SendSmsOptions\n\nsms_responses = sms_client.send(\n    from_=\"<from-phone-number>\",\n    to=\"<to-phone-number-1>\",\n    message=\"Hello World via SMS\",\n    enable_delivery_report=True, # optional property\n    tag=\"custom-tag\") # optional property\n```\n\n- `from_`: An SMS enabled phone number associated with your communication service.\n- `to`: The phone number or list of phone numbers you wish to send a message to.\n- `message`: The message that you want to send.\n- `enable_delivery_report`: An optional parameter that you can use to configure delivery reporting. This is useful for scenarios where you want to emit events when SMS messages are delivered.\n- `tag`: An optional parameter that you can use to configure custom tagging.\n\n### Send a 1:N SMS Message\n\nOnce the client is initialized, the `send` method can be invoked:\n\n```python\nfrom azure.communication.sms import SendSmsOptions\n\nsms_responses = sms_client.send(\n    from_=\"<from-phone-number>\",\n    to=[\"<to-phone-number-1>\", \"<to-phone-number-2>\", \"<to-phone-number-3>\"],\n    message=\"Hello World via SMS\",\n    enable_delivery_report=True, # optional property\n    tag=\"custom-tag\") # optional property\n```\n\n- `from_`: An SMS enabled phone number associated with your communication service.\n- `to`: The phone number or list of phone numbers you wish to send a message to.\n- `message`: The message that you want to send.\n- `enable_delivery_report`: An optional parameter that you can use to configure delivery reporting. This is useful for scenarios where you want to emit events when SMS messages are delivered.\n- `tag`: An optional parameter that you can use to configure custom tagging.\n\n\n## Troubleshooting\nSMS operations will throw an exception if the request to the server fails. The SMS client will raise exceptions defined in [Azure Core](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/README.md). Exceptions will not be thrown if the error is caused by an individual message, only if something fails with the overall request. Please use the successful flag to validate each individual result to verify if the message was sent.\n\n```python\ntry:\n    sms_responses = sms_client.send(\n        from_=\"<leased-phone-number>\",\n        to=[\"<to-phone-number-1>\", \"<to-phone-number-2>\", \"<to-phone-number-3>\"],\n        message=\"Hello World via SMS\")\n\n    for sms_response in sms_responses:\n        if (sms_response.successful):\n            print(\"Message with message id {} was successful sent to {}\"\n            .format(sms_response.message_id, sms_response.to))\n        else:\n            print(\"Message failed to send to {} with the status code {} and error: {}\"\n            .format(sms_response.to, sms_response.http_status_code, sms_response.error_message))\nexcept Exception as ex:\n    print('Exception:')\n    print(ex)\n```\n\n## Next steps\n- [Read more about SMS in Azure Communication Services][next_steps]\n- For a basic guide on how to configure Delivery Reporting for your SMS messages please refer to the [Handle SMS Events quickstart][handle_sms_events].\n\n### More sample code\n\nPlease take a look at the [samples](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/communication/azure-communication-sms/samples) directory for detailed examples of how to use this library to send an sms.\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the [Issues](https://github.com/Azure/azure-sdk-for-python/issues) section of the project\n\n## Contributing\n\nThis project welcomes contributions and suggestions.  Most contributions require you to agree to a\nContributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the\nPR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\n<!-- LINKS -->\n[azure_core]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/README.md\n[handle_sms_events]: https://docs.microsoft.com/azure/communication-services/quickstarts/telephony-sms/handle-sms-events\n[next_steps]:https://docs.microsoft.com/azure/communication-services/quickstarts/telephony-sms/send?pivots=programming-language-python",
        "repo_name": "communication/azure-communication-sms",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/communication/azure-communication-sms",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Communication Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-communication\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.communication import CommunicationServiceManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = CommunicationServiceManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\nCode samples for this package can be found at:\n- [Search Communication Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com\n- [Azure Python Mgmt SDK Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-communication%2FREADME.png)\n",
        "repo_name": "communication/azure-mgmt-communication",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/communication/azure-mgmt-communication",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Avs Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-avs\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.avs import AVSClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = AVSClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\n\nCode samples for this package can be found at [Avs Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com and [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-avs%2FREADME.png)\n",
        "repo_name": "compute/azure-mgmt-avs",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/compute/azure-mgmt-avs",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Compute Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-compute\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.compute import ComputeManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = ComputeManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\nCode samples for this package can be found at:\n- [Search Compute Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com\n- [Azure Python Mgmt SDK Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-compute%2FREADME.png)\n",
        "repo_name": "compute/azure-mgmt-compute",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/compute/azure-mgmt-compute",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Image Builder Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-imagebuilder\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.imagebuilder import ImageBuilderClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = ImageBuilderClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\nCode samples for this package can be found at:\n- [Search Image Builder](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com\n- [Azure Python Mgmt SDK Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-imagebuilder%2FREADME.png)\n",
        "repo_name": "compute/azure-mgmt-imagebuilder",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/compute/azure-mgmt-imagebuilder",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure VMWare Cloud Simple Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/)\nCode samples for this package can be found at [VMWare Cloud Simple Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-vmwarecloudsimple%2FREADME.png)\n",
        "repo_name": "compute/azure-mgmt-vmwarecloudsimple",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/compute/azure-mgmt-vmwarecloudsimple",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Azure Confidential Ledger client library for Python\n\nAzure Confidential Ledger provides a service for logging to an immutable, tamper-proof ledger. As part of the [Azure Confidential Computing][azure_confidential_computing] portfolio, Azure Confidential Ledger runs in secure, hardware-based trusted execution environments, also known as enclaves. It is built on Microsoft Research's [Confidential Consortium Framework][ccf].\n\n[Source code][confidential_ledger_client_src]\n| [Package (PyPI)][pypi_package_confidential_ledger]\n| [Package (Conda)](https://anaconda.org/microsoft/azure-confidentialledger/)\n| [API reference documentation][reference_docs]\n| [Product documentation][confidential_ledger_docs]\n\n## Getting started\n### Install packages\nInstall [azure-confidentialledger][pypi_package_confidential_ledger] and [azure-identity][azure_identity_pypi] with [pip][pip]:\n```Bash\npip install azure-identity azure-confidentialledger\n```\n[azure-identity][azure_identity] is used for Azure Active Directory\nauthentication as demonstrated below.\n\n### Prerequisites\n* An [Azure subscription][azure_sub]\n* Python 3.6 or later\n* A running instance of Azure Confidential Ledger.\n* A registered user in the Confidential Ledger, typically assigned during [ARM][azure_resource_manager] resource creation, with `Administrator` privileges.\n\n### Authenticate the client\n#### Using Azure Active Directory\nThis document demonstrates using [DefaultAzureCredential][default_cred_ref] to authenticate to the Confidential Ledger via Azure Active Directory. However, `ConfidentialLedgerClient` accepts any [azure-identity][azure_identity] credential. See the [azure-identity][azure_identity] documentation for more information about other credentials.\n\n#### Using a client certificate\nAs an alternative to Azure Active Directory, clients may choose to use a client certificate to authenticate via mutual TLS. `azure.confidentialledger.ConfidentialLedgerCertificateCredential` may be used for this purpose.\n\n### Create a client\n`DefaultAzureCredential` will automatically handle most Azure SDK client scenarios. To get started, set environment variables for the AAD identity registered with your Confidential Ledger.\n```bash\nexport AZURE_CLIENT_ID=\"generated app id\"\nexport AZURE_CLIENT_SECRET=\"random password\"\nexport AZURE_TENANT_ID=\"tenant id\"\n```\nThen, `DefaultAzureCredential` will be able to authenticate the `ConfidentialLedgerClient`.\n\nConstructing the client also requires your Confidential Ledger's URL and id, which you can get from the Azure CLI or the Azure Portal. When you have retrieved those values, please replace instances of `\"my-ledger-id\"` and `\"https://my-ledger-id.confidential-ledger.azure.com\"` in the examples below. You may also need to replace `\"https://identity.confidential-ledger.core.azure.com\"` with the hostname from the `identityServiceUri` in the ARM description of your ledger.\n\nBecause Confidential Ledgers use self-signed certificates securely generated and stored in an enclave, the signing certificate for each Confidential Ledger must first be retrieved from the Confidential Ledger Identity Service.\n\n```python\nfrom azure.confidentialledger import ConfidentialLedgerClient\nfrom azure.confidentialledger.certificate import ConfidentialLedgerCertificateClient\nfrom azure.identity import DefaultAzureCredential\n\nidentity_client = ConfidentialLedgerCertificateClient()\nnetwork_identity = identity_client.get_ledger_identity(\n    ledger_id=\"my-ledger-id\"\n)\n\nledger_tls_cert_file_name = \"ledger_certificate.pem\"\nwith open(ledger_tls_cert_file_name, \"w\") as cert_file:\n    cert_file.write(network_identity[\"ledgerTlsCertificate\"])\n\ncredential = DefaultAzureCredential()\nledger_client = ConfidentialLedgerClient(\n    endpoint=\"https://my-ledger-id.confidential-ledger.azure.com\",\n    credential=credential,\n    ledger_certificate_path=ledger_tls_cert_file_name\n)\n```\n\nConveniently, the `ConfidentialLedgerClient` constructor will fetch the ledger TLS certificate (and write it to the specified file) if it is provided with a non-existent file. The user is responsible for removing the created file as needed.\n\n```python\nfrom azure.confidentialledger import ConfidentialLedgerClient\nfrom azure.identity import DefaultAzureCredential\n\ncredential = DefaultAzureCredential()\nledger_client = ConfidentialLedgerClient(\n    endpoint=\"https://my-ledger-id.confidential-ledger.azure.com\",\n    credential=credential,\n    ledger_certificate_path=\"ledger_certificate.pem\"\n)\n\n# The ledger TLS certificate is written to `ledger_certificate.pem`.\n```\n\nTo make it clear that a file is being used for the ledger TLS certificate, subsequent examples will explicitly write the ledger TLS certificate to a file.\n\n## Key concepts\n### Ledger entries and transactions\nEvery write to Azure Confidential Ledger generates an immutable ledger entry in the service. Writes, also referred to as transactions, are uniquely identified by transaction ids that increment with each write. Once written, ledger entries may be retrieved at any time.\n\n### Collections\nWhile most use cases involve just one collection per Confidential Ledger, we provide the collection id feature in case semantically or logically different groups of data need to be stored in the same Confidential Ledger.\n\nLedger entries are retrieved by their `collectionId`. The Confidential Ledger will always assume a constant, service-determined `collectionId` for entries written without a `collectionId` specified.\n\n### Users\nUsers are managed directly with the Confidential Ledger instead of through Azure. Users may be AAD-based, identified by their AAD object id, or certificate-based, identified by their PEM certificate fingerprint.\n\n### Receipts\n\nTo enforce transaction integrity guarantees, an Azure Confidential Ledger uses a [Merkle tree][merkle_tree_wiki] data structure to record the hash of all transactions blocks that are appended to the immutable ledger. After a write transaction is committed, Azure Confidential Ledger users can get a cryptographic Merkle proof, or receipt, over the entry produced in a Confidential Ledger to verify that the write operation was correctly saved. A write transaction receipt is proof that the system has committed the corresponding transaction and can be used to verify that the entry has been effectively appended to the ledger.\n\nPlease refer to the following [article](https://learn.microsoft.com/azure/confidential-ledger/write-transaction-receipts) for more information about Azure Confidential Ledger write transaction receipts.\n\n### Receipt Verification\n\nAfter getting a receipt for a write transaction, Azure Confidential Ledger users can verify the contents of the fetched receipt following a verification algorithm. The success of the verification is proof that the write operation associated to the receipt was correctly appended into the immutable ledger.\n\nPlease refer to the following [article](https://learn.microsoft.com/azure/confidential-ledger/verify-write-transaction-receipts) for more information about the verification process for Azure Confidential Ledger write transaction receipts.\n\n### Application Claims\nAzure Confidential Ledger applications can attach arbitrary data, called application claims, to write transactions. These claims represent the actions executed during a write operation. When attached to a transaction, the SHA-256 digest of the claims object is included in the ledger and committed as part of the write transaction. This guarantees that the digest is signed in place and cannot be tampered with.\n\nLater, application claims can be revealed in their un-digested form in the receipt payload corresponding to the same transaction where they were added. This allows users to leverage the information in the receipt to re-compute the same claims digest that was attached and signed in place by the Azure Confidential Ledger instance during the transaction. The claims digest can be used as part of the write transaction receipt verification process, providing an offline way for users to fully verify the authenticity of the recorded claims.\n\nMore details on the application claims format and the digest computation algorithm can be found at the following links:\n\n- [Azure Confidential Ledger application claims](https://learn.microsoft.com/azure/confidential-ledger/write-transaction-receipts#application-claims)\n- [Azure Confidential Ledger application claims digest verification](https://learn.microsoft.com/azure/confidential-ledger/verify-write-transaction-receipts#verify-application-claims-digest)\n\nPlease refer to the following CCF documentation pages for more information about CCF Application claims:\n\n- [Application Claims](https://microsoft.github.io/CCF/main/use_apps/verify_tx.html#application-claims)\n- [User-Defined Claims in Receipts](https://microsoft.github.io/CCF/main/build_apps/example_cpp.html#user-defined-claims-in-receipts)\n\n### Confidential computing\n[Azure Confidential Computing][azure_confidential_computing] allows you to isolate and protect your data while it is being processed in the cloud. Azure Confidential Ledger runs on Azure Confidential Computing virtual machines, thus providing stronger data protection with encryption of data in use.\n\n### Confidential Consortium Framework\nAzure Confidential Ledger is built on Microsoft Research's open-source [Confidential Consortium Framework (CCF)][ccf]. Under CCF, applications are managed by a consortium of members with the ability to submit proposals to modify and govern application operation. In Azure Confidential Ledger, Microsoft Azure owns an operator member identity that allows it to perform governance and maintenance actions like replacing unhealthy nodes in the Confidential Ledger and upgrading the enclave code.\n\n## Examples\nThis section contains code snippets covering common tasks, including:\n- [Append entry](#append-entry)\n- [Retrieving ledger entries](#retrieving-ledger-entries)\n- [Making a ranged query](#making-a-ranged-query)\n- [Managing users](#managing-users)\n- [Using certificate authentication](#using-certificate-authentication)\n- [Verify write transaction receipts](#verify-write-transaction-receipts)\n\n### Append entry\nData that needs to be stored immutably in a tamper-proof manner can be saved to Azure Confidential Ledger by appending an entry to the ledger.\n\nSince Confidential Ledger is a distributed system, rare transient failures may cause writes to be lost. For entries that must be preserved, it is advisable to verify that the write became durable. For less important writes where higher client throughput is preferred, the wait step may be skipped.\n\n```python\nfrom azure.confidentialledger import ConfidentialLedgerClient\nfrom azure.confidentialledger.certificate import ConfidentialLedgerCertificateClient\nfrom azure.identity import DefaultAzureCredential\n\nidentity_client = ConfidentialLedgerCertificateClient()\nnetwork_identity = identity_client.get_ledger_identity(\n    ledger_id=\"my-ledger-id\"\n)\n\nledger_tls_cert_file_name = \"ledger_certificate.pem\"\nwith open(ledger_tls_cert_file_name, \"w\") as cert_file:\n    cert_file.write(network_identity[\"ledgerTlsCertificate\"])\n\ncredential = DefaultAzureCredential()\nledger_client = ConfidentialLedgerClient(\n    endpoint=\"https://my-ledger-id.confidential-ledger.azure.com\",\n    credential=credential,\n    ledger_certificate_path=ledger_tls_cert_file_name\n)\n\npost_entry_result = ledger_client.create_ledger_entry(\n        {\"contents\": \"Hello world!\"}\n    )\ntransaction_id = post_entry_result[\"transactionId\"]\n\nwait_poller = ledger_client.begin_wait_for_commit(transaction_id)\nwait_poller.wait()\nprint(f'Ledger entry at transaction id {transaction_id} has been committed successfully')\n```\n\nAlternatively, the client may wait for commit when writing a ledger entry.\n\n```python\nfrom azure.confidentialledger import ConfidentialLedgerClient\nfrom azure.confidentialledger.certificate import ConfidentialLedgerCertificateClient\nfrom azure.identity import DefaultAzureCredential\n\nidentity_client = ConfidentialLedgerCertificateClient()\nnetwork_identity = identity_client.get_ledger_identity(\n    ledger_id=\"my-ledger-id\"\n)\n\nledger_tls_cert_file_name = \"ledger_certificate.pem\"\nwith open(ledger_tls_cert_file_name, \"w\") as cert_file:\n    cert_file.write(network_identity[\"ledgerTlsCertificate\"])\n\ncredential = DefaultAzureCredential()\nledger_client = ConfidentialLedgerClient(\n    endpoint=\"https://my-ledger-id.confidential-ledger.azure.com\",\n    credential=credential,\n    ledger_certificate_path=ledger_tls_cert_file_name\n)\n\npost_poller = ledger_client.begin_create_ledger_entry(\n    {\"contents\": \"Hello world again!\"}\n)\nnew_post_result = post_poller.result()\nprint(\n    'The new ledger entry has been committed successfully at transaction id '\n    f'{new_post_result[\"transactionId\"]}'\n)\n```\n\n### Retrieving ledger entries\nGetting ledger entries older than the latest may take some time as the service is loading historical entries, so a poller is provided.\n\nLedger entries are retrieved by collection. The returned value is the value contained in the specified collection at the point in time identified by the transaction id.\n\n```python\nfrom azure.confidentialledger import ConfidentialLedgerClient\nfrom azure.confidentialledger.certificate import ConfidentialLedgerCertificateClient\nfrom azure.identity import DefaultAzureCredential\n\nidentity_client = ConfidentialLedgerCertificateClient()\nnetwork_identity = identity_client.get_ledger_identity(\n    ledger_id=\"my-ledger-id\"\n)\n\nledger_tls_cert_file_name = \"ledger_certificate.pem\"\nwith open(ledger_tls_cert_file_name, \"w\") as cert_file:\n    cert_file.write(network_identity[\"ledgerTlsCertificate\"])\n\ncredential = DefaultAzureCredential()\nledger_client = ConfidentialLedgerClient(\n    endpoint=\"https://my-ledger-id.confidential-ledger.azure.com\",\n    credential=credential,\n    ledger_certificate_path=ledger_tls_cert_file_name\n)\n\npost_poller = ledger_client.begin_create_ledger_entry(\n    {\"contents\": \"Original hello\"}\n)\npost_result = post_poller.result()\n\npost_transaction_id = post_result[\"transactionId\"]\n\nlatest_entry = ledger_client.get_current_ledger_entry()\nprint(\n    f'Current entry (transaction id = {latest_entry[\"transactionId\"]}) '\n    f'in collection {latest_entry[\"collectionId\"]}: {latest_entry[\"contents\"]}'\n)\n\npost_poller = ledger_client.begin_create_ledger_entry(\n    {\"contents\": \"Hello!\"}\n)\npost_result = post_poller.result()\n\nget_entry_poller = ledger_client.begin_get_ledger_entry(post_transaction_id)\nolder_entry = get_entry_poller.result()\nprint(\n    f'Contents of {older_entry[\"entry\"][\"collectionId\"]} at {post_transaction_id}: {older_entry[\"entry\"][\"contents\"]}'\n)\n```\n\n### Making a ranged query\nLedger entries may be retrieved over a range of transaction ids. Entries will only be returned from the default or specified collection.\n\n```python\nfrom azure.confidentialledger import ConfidentialLedgerClient\nfrom azure.confidentialledger.certificate import ConfidentialLedgerCertificateClient\nfrom azure.identity import DefaultAzureCredential\n\nidentity_client = ConfidentialLedgerCertificateClient()\nnetwork_identity = identity_client.get_ledger_identity(\n    ledger_id=\"my-ledger-id\"\n)\n\nledger_tls_cert_file_name = \"ledger_certificate.pem\"\nwith open(ledger_tls_cert_file_name, \"w\") as cert_file:\n    cert_file.write(network_identity[\"ledgerTlsCertificate\"])\n\ncredential = DefaultAzureCredential()\nledger_client = ConfidentialLedgerClient(\n    endpoint=\"https://my-ledger-id.confidential-ledger.azure.com\",\n    credential=credential,\n    ledger_certificate_path=ledger_tls_cert_file_name\n)\n\npost_poller = ledger_client.begin_create_ledger_entry(\n    {\"contents\": \"First message\"}\n)\nfirst_transaction_id = post_poller.result()[\"transactionId\"]\n\nfor i in range(10):\n    ledger_client.create_ledger_entry(\n        {\"contents\": f\"Message {i}\"}\n    )\n\npost_poller = ledger_client.begin_create_ledger_entry(\n    {\"contents\": \"Last message\"}\n)\nlast_transaction_id = post_poller.result()[\"transactionId\"]\n\nranged_result = ledger_client.list_ledger_entries(\n    from_transaction_id=first_transaction_id,\n    to_transaction_id=last_transaction_id,\n)\nfor entry in ranged_result:\n    print(f'Contents at {entry[\"transactionId\"]}: {entry[\"contents\"]}')\n```\n\n### Managing users\nUsers with `Administrator` privileges can manage users of the Confidential Ledger directly with the Confidential Ledger itself. Available roles are `Reader` (read-only), `Contributor` (read and write), and `Administrator` (read, write, and add or remove users).\n\n```python\nfrom azure.confidentialledger import ConfidentialLedgerClient\nfrom azure.confidentialledger.certificate import ConfidentialLedgerCertificateClient\nfrom azure.identity import DefaultAzureCredential\n\nidentity_client = ConfidentialLedgerCertificateClient()\nnetwork_identity = identity_client.get_ledger_identity(\n    ledger_id=\"my-ledger-id\"\n)\n\nledger_tls_cert_file_name = \"ledger_certificate.pem\"\nwith open(ledger_tls_cert_file_name, \"w\") as cert_file:\n    cert_file.write(network_identity[\"ledgerTlsCertificate\"])\n\ncredential = DefaultAzureCredential()\nledger_client = ConfidentialLedgerClient(\n    endpoint=\"https://my-ledger-id.confidential-ledger.azure.com\",\n    credential=credential,\n    ledger_certificate_path=ledger_tls_cert_file_name\n)\n\nuser_id = \"some AAD object id\"\nuser = ledger_client.create_or_update_user(\n    user_id, {\"assignedRole\": \"Contributor\"}\n)\n# A client may now be created and used with AAD credentials (i.e. AAD-issued JWT tokens) for the user identified by `user_id`.\n\nuser = ledger_client.get_user(user_id)\nassert user[\"userId\"] == user_id\nassert user[\"assignedRole\"] == \"Contributor\"\n\nledger_client.delete_user(user_id)\n\n# For a certificate-based user, their user ID is the fingerprint for their PEM certificate.\nuser_id = \"PEM certificate fingerprint\"\nuser = ledger_client.create_or_update_user(\n    user_id, {\"assignedRole\": \"Reader\"}\n)\n\nuser = ledger_client.get_user(user_id)\nassert user[\"userId\"] == user_id\nassert user[\"assignedRole\"] == \"Reader\"\n\nledger_client.delete_user(user_id)\n```\n\n### Using certificate authentication\nClients may authenticate with a client certificate in mutual TLS instead of via an Azure Active Directory token. `ConfidentialLedgerCertificateCredential` is provided for such clients.\n\n```python\nfrom azure.confidentialledger import (\n    ConfidentialLedgerCertificateCredential,\n    ConfidentialLedgerClient,\n)\nfrom azure.confidentialledger.certificate import ConfidentialLedgerCertificateClient\n\nidentity_client = ConfidentialLedgerCertificateClient()\nnetwork_identity = identity_client.get_ledger_identity(\n    ledger_id=\"my-ledger-id\"\n)\n\nledger_tls_cert_file_name = \"ledger_certificate.pem\"\nwith open(ledger_tls_cert_file_name, \"w\") as cert_file:\n    cert_file.write(network_identity[\"ledgerTlsCertificate\"])\n\ncredential = ConfidentialLedgerCertificateCredential(\n    certificate_path=\"Path to user certificate PEM file\"\n)\nledger_client = ConfidentialLedgerClient(\n    endpoint=\"https://my-ledger-id.confidential-ledger.azure.com\",\n    credential=credential,\n    ledger_certificate_path=ledger_tls_cert_file_name\n)\n```\n\n### Verify write transaction receipts\n\nClients can leverage the receipt verification library in the SDK to verify write transaction receipts issued by Azure Confidential Legder instances. The utility can be used to fully verify receipts offline as the verification algorithm does not require to be connected to a Confidential ledger or any other Azure service.\n\nOnce a new entry has been appended to the ledger (please refer to [this example](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/confidentialledger/azure-confidentialledger#append-entry)), it is possible to get a receipt for the committed write transaction.\n\n```python\nfrom azure.confidentialledger import ConfidentialLedgerClient\nfrom azure.confidentialledger.certificate import ConfidentialLedgerCertificateClient\nfrom azure.identity import DefaultAzureCredential\n\n# Replace this with the Confidential Ledger ID \nledger_id = \"my-ledger-id\"\n\n# Setup authentication\ncredential = DefaultAzureCredential()\n\n# Create a Ledger Certificate client and use it to\n# retrieve the service identity for our ledger\nidentity_client = ConfidentialLedgerCertificateClient()\nnetwork_identity = identity_client.get_ledger_identity(\n    ledger_id=ledger_id\n)\n\n# Save ledger service certificate into a file for later use\nledger_tls_cert_file_name = \"ledger_certificate.pem\"\nwith open(ledger_tls_cert_file_name, \"w\") as cert_file:\n    cert_file.write(network_identity[\"ledgerTlsCertificate\"])\n\n# Create Confidential Ledger client\nledger_client = ConfidentialLedgerClient(\n    endpoint=f\"https://{ledger_id}.confidential-ledger.azure.com\",\n    credential=credential,\n    ledger_certificate_path=ledger_tls_cert_file_name\n)\n\n# The method begin_get_receipt returns a poller that\n# we can use to wait for the receipt to be available for retrieval \nget_receipt_poller = ledger_client.begin_get_receipt(transaction_id)\nget_receipt_result = get_receipt_poller.result()\n\nprint(f\"Write receipt for transaction id {transaction_id} was successfully retrieved: {get_receipt_result}\")\n```\n\nAfter fetching a receipt for a write transaction, it is possible to call the `verify_receipt` function to verify that the receipt is valid. The function can accept an optional list of application claims to verify against the receipt claims digest.\n\n```python\nfrom azure.confidentialledger.receipt import (\n    verify_receipt,\n)\n\n# Read contents of service certificate file saved in previous step.\nwith open(ledger_tls_cert_file_name, \"r\") as service_cert_file:\n    service_cert_content = service_cert_file.read()\n\n# Optionally read application claims, if any\napplication_claims = get_receipt_result.get(\"applicationClaims\", None) \n\ntry:\n    # Verify the contents of the receipt.\n    verify_receipt(get_receipt_result[\"receipt\"], service_cert_content, application_claims=application_claims)\n    print(f\"Receipt for transaction id {transaction_id} successfully verified\")\nexcept ValueError:\n    print(f\"Receipt verification for transaction id {transaction_id} failed\")\n```\n\nA full sample Python program that shows how to append a new entry to a running Confidential Ledger instance, get a receipt for the committed transaction, and verify the receipt contents can be found under the [samples](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/confidentialledger/azure-confidentialledger/samples) folder: [get_and_verify_receipt.py](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/confidentialledger/azure-confidentialledger/samples/get_and_verify_receipt.py).\n\n### Async API\nThis library includes a complete async API supported on Python 3.5+. To use it, you must first install an async transport, such as [aiohttp](https://pypi.org/project/aiohttp). See the [azure-core documentation](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/CLIENT_LIBRARY_DEVELOPER.md#transport) for more information.\n\nAn async client is obtained from `azure.confidentialledger.aio`. Methods have the same names and signatures as the synchronous client. Samples may be found [here](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/confidentialledger/azure-confidentialledger/samples).\n\n## Troubleshooting\n### General\nConfidential Ledger clients raise exceptions defined in [azure-core][azure_core_exceptions]. For example, if you try to get a transaction that doesn't exist, `ConfidentialLedgerClient` raises [ResourceNotFoundError](https://aka.ms/azsdk-python-core-exceptions-resource-not-found-error):\n\n```python\nfrom azure.core.exceptions import ResourceNotFoundError\nfrom azure.confidentialledger import ConfidentialLedgerClient\nfrom azure.confidentialledger.certificate import ConfidentialLedgerCertificateClient\nfrom azure.identity import DefaultAzureCredential\n\nidentity_client = ConfidentialLedgerCertificateClient()\nnetwork_identity = identity_client.get_ledger_identity(\n    ledger_id=\"my-ledger-id\"\n)\n\nledger_tls_cert_file_name = \"ledger_certificate.pem\"\nwith open(ledger_tls_cert_file_name, \"w\") as cert_file:\n    cert_file.write(network_identity[\"ledgerTlsCertificate\"])\n\ncredential = DefaultAzureCredential()\nledger_client = ConfidentialLedgerClient(\n    endpoint=\"https://my-ledger-id.confidential-ledger.azure.com\",\n    credential=credential,\n    ledger_certificate_path=ledger_tls_cert_file_name\n)\n\ntry:\n    ledger_client.begin_get_ledger_entry(\n        transaction_id=\"10000.100000\"  # Using a very high id that probably doesn't exist in the ledger if it's relatively new.\n    )\nexcept ResourceNotFoundError as e:\n    print(e.message)\n```\n\n### Logging\nThis library uses the standard\n[logging](https://docs.python.org/3.5/library/logging.html) library for logging. Basic information about HTTP sessions (URLs, headers, etc.) is logged at INFO level.\n\nDetailed DEBUG level logging, including request/response bodies and unredacted headers, can be enabled on a client with the `logging_enable` argument:\n```python\nimport logging\nimport sys\n\nfrom azure.confidentialledger import ConfidentialLedgerClient\nfrom azure.confidentialledger.certificate import ConfidentialLedgerCertificateClient\nfrom azure.identity import DefaultAzureCredential\n\n# Create a logger for the 'azure' SDK\nlogger = logging.getLogger('azure')\nlogger.setLevel(logging.DEBUG)\n\n# Configure a console output\nhandler = logging.StreamHandler(stream=sys.stdout)\nlogger.addHandler(handler)\n\nidentity_client = ConfidentialLedgerCertificateClient()\nnetwork_identity = identity_client.get_ledger_identity(\n    ledger_id=\"my-ledger-id\"\n)\n\nledger_tls_cert_file_name = \"ledger_certificate.pem\"\nwith open(ledger_tls_cert_file_name, \"w\") as cert_file:\n    cert_file.write(network_identity[\"ledgerTlsCertificate\"])\n\ncredential = DefaultAzureCredential()\n\n# This client will log detailed information about its HTTP sessions, at DEBUG level.\nledger_client = ConfidentialLedgerClient(\n    endpoint=\"https://my-ledger-id.confidential-ledger.azure.com\",\n    credential=credential,\n    ledger_certificate_path=ledger_tls_cert_file_name,\n    logging_enable=True,\n)\n```\n\nSimilarly, `logging_enable` can enable detailed logging for a single operation, even when it isn't enabled for the client:\n```python\nledger_client.get_current_ledger_entry(logging_enable=True)\n```\n\n## Next steps\n### More sample code\nThese code samples show common scenario operations with the Azure Confidential Ledger client library.\n\n#### Common scenarios\n\n- Writing to the ledger:\n  - [write_to_ledger.py](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/confidentialledger/azure-confidentialledger/samples/write_to_ledger.py) \n  - [write_to_ledger_async.py](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/confidentialledger/azure-confidentialledger/samples/write_to_ledger_async.py) (async version)\n\n- Write many ledger entries and retrieve them all afterwards:\n  - [list_ledger_entries.py](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/confidentialledger/azure-confidentialledger/samples/list_ledger_entries.py)\n  - [list_ledger_entries_async.py](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/confidentialledger/azure-confidentialledger/samples/list_ledger_entries_async.py) (async version)\n\n- Manage users using service-implemented role-based access control: \n  - [manage_users.py](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/confidentialledger/azure-confidentialledger/samples/manage_users.py)\n  - [manage_users_async.py](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/confidentialledger/azure-confidentialledger/samples/manage_users_async.py) (async version)\n\n#### Advanced scenarios\n\n- Using collections: \n  - [use_collections.py](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/confidentialledger/azure-confidentialledger/samples/use_collections.py)\n  - [use_collections_async.py](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/confidentialledger/azure-confidentialledger/samples/use_collections_async.py) (async version)\n  \n- Getting receipts for ledger writes: \n  - [get_receipt.py](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/confidentialledger/azure-confidentialledger/samples/get_receipt.py)\n  - [get_receipt_async.py](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/confidentialledger/azure-confidentialledger/samples/get_receipt_async.py) (async version)\n  \n- Verifying service details: \n  - [verify_service.py](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/confidentialledger/azure-confidentialledger/samples/verify_service.py) \n  - [verify_service_async.py](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/confidentialledger/azure-confidentialledger/samples/verify_service_async.py) (async version)\n\n###  Additional Documentation\nFor more extensive documentation on Azure Confidential Ledger, see the\n[API reference documentation][reference_docs]. You may also read more about Microsoft Research's open-source [Confidential Consortium Framework][ccf].\n\n## Contributing\nThis project welcomes contributions and suggestions. Most contributions require\nyou to agree to a Contributor License Agreement (CLA) declaring that you have\nthe right to, and actually do, grant us the rights to use your contribution.\nFor details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether\nyou need to provide a CLA and decorate the PR appropriately (e.g., label,\ncomment). Simply follow the instructions provided by the bot. You will only\nneed to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct].\nFor more information, see the\n[Code of Conduct FAQ][code_of_conduct_faq] or\ncontact opencode@microsoft.com with any additional questions or comments.\n\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_cloud_shell]: https://shell.azure.com/bash\n[azure_confidential_computing]: https://azure.microsoft.com/solutions/confidential-compute\n[azure_core_exceptions]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/core/azure-core#azure-core-library-exceptions\n[azure_identity]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity\n[azure_identity_pypi]: https://pypi.org/project/azure-identity/\n[azure_resource_manager]: https://docs.microsoft.com/azure/azure-resource-manager/management/overview\n[azure_sub]: https://azure.microsoft.com/free\n[ccf]: https://github.com/Microsoft/CCF\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct\n[code_of_conduct_faq]: https://opensource.microsoft.com/codeofconduct/faq\n[confidential_ledger_client_src]: https://aka.ms/azsdk/python/confidentialledger/src\n[confidential_ledger_docs]: https://aka.ms/confidentialledger-servicedocs\n[default_cred_ref]: https://aka.ms/azsdk/python/identity/docs#azure.identity.DefaultAzureCredential\n[pip]: https://pypi.org/project/pip/\n[pypi_package_confidential_ledger]: https://aka.ms/azsdk/python/confidentialledger/pypi\n[reference_docs]: https://aka.ms/azsdk/python/confidentialledger/ref-docs\n",
        "repo_name": "confidentialledger/azure-confidentialledger",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/confidentialledger/azure-confidentialledger",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Confidential Ledger Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-confidentialledger\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.confidentialledger import ConfidentialLedger\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = ConfidentialLedger(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\nCode samples for this package can be found at:\n- [Search Confidential Ledger Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com\n- [Azure Python Mgmt SDK Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-confidentialledger%2FREADME.png)\n",
        "repo_name": "confidentialledger/azure-mgmt-confidentialledger",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/confidentialledger/azure-mgmt-confidentialledger",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Confluent Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/)\nCode samples for this package can be found at [Confluent Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-confluent%2FREADME.png)\n",
        "repo_name": "confluent/azure-mgmt-confluent",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/confluent/azure-mgmt-confluent",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Connected VMWare Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/)\nCode samples for this package can be found at [Connected VMWare Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-connectedvmware%2FREADME.png)\n",
        "repo_name": "connectedvmware/azure-mgmt-connectedvmware",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/connectedvmware/azure-mgmt-connectedvmware",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Consumption Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/consumption)\nCode samples for this package can be found at [Consumption](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://github.com/Azure-Samples/azure-samples-python-management/tree/main/samples/consumption)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-consumption%2FREADME.png)\n",
        "repo_name": "consumption/azure-mgmt-consumption",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/consumption/azure-mgmt-consumption",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Container Instance Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-containerinstance\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.containerinstance import ContainerInstanceManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = ContainerInstanceManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\nCode samples for this package can be found at:\n- [Search Container Instance](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com\n- [Azure Python Mgmt SDK Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-containerinstance%2FREADME.png)\n",
        "repo_name": "containerinstance/azure-mgmt-containerinstance",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/containerinstance/azure-mgmt-containerinstance",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Azure Container Registry client library for Python\n\nAzure Container Registry allows you to store and manage container images and artifacts in a private registry for all types of container deployments.\n\nUse the client library for Azure Container Registry to:\n\n- List images or artifacts in a registry\n- Obtain metadata for images and artifacts, repositories and tags\n- Set read/write/delete properties on registry items\n- Delete images and artifacts, repositories and tags\n\n[Source code][source]\n| [Package (Pypi)][package]\n| [Package (Conda)](https://anaconda.org/microsoft/azure-containerregistry/)\n| [API reference documentation][docs]\n| [REST API documentation][rest_docs]\n| [Product documentation][product_docs]\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n_Python 3.7 or later is required to use this package. For more details, please refer to [Azure SDK for Python version support policy](https://github.com/Azure/azure-sdk-for-python/wiki/Azure-SDKs-Python-version-support-policy)._\n\n## Getting started\n\n### Install the package\n\nInstall the Azure Container Registry client library for Python with [pip][pip_link]:\n\n```bash\npip install --pre azure-containerregistry\n```\n\n### Prerequisites\n\n* Python 3.7 or later is required to use this package.\n* You need an [Azure subscription][azure_sub] and a [Container Registry account][container_registry_docs] to use this package.\n\nTo create a new Container Registry, you can use the [Azure Portal][container_registry_create_portal],\n[Azure PowerShell][container_registry_create_ps], or the [Azure CLI][container_registry_create_cli].\nHere's an example using the Azure CLI:\n\n```Powershell\naz acr create --name MyContainerRegistry --resource-group MyResourceGroup --location westus --sku Basic\n```\n\n### Authenticate the client\n\nThe [Azure Identity library][identity] provides easy Azure Active Directory support for authentication. The `DefaultAzureCredential` assumes the `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, and `AZURE_CLIENT_SECRET` environment variables are set, for more information refer to the [Azure Identity environment variables section](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity#environment-variables)\n\n```python\n# Create a ContainerRegistryClient that will authenticate through Active Directory\nfrom azure.containerregistry import ContainerRegistryClient\nfrom azure.identity import DefaultAzureCredential\n\nendpoint = \"https://mycontainerregistry.azurecr.io\"\naudience = \"https://management.azure.com\"\nclient = ContainerRegistryClient(endpoint, DefaultAzureCredential(), audience=audience)\n```\n\n## Key concepts\n\nA **registry** stores Docker images and [OCI Artifacts](https://opencontainers.org/).  An image or artifact consists of a **manifest** and **layers**.  An image's manifest describes the layers that make up the image, and is uniquely identified by its **digest**.  An image can also be \"tagged\" to give it a human-readable alias.  An image or artifact can have zero or more **tags** associated with it, and each tag uniquely identifies the image.  A collection of images that share the same name but have different tags, is referred to as a **repository**.\n\nFor more information please see [Container Registry Concepts](https://docs.microsoft.com/azure/container-registry/container-registry-concepts).\n\n\n## Examples\n\nThe following sections provide several code snippets covering some of the most common ACR Service tasks, including:\n\n- Registry operations:\n  - [List repositories](#list-repositories)\n  - [List tags with anonymous access](#list-tags-with-anonymous-access)\n  - [Set artifact properties](#set-artifact-properties)\n  - [Delete images](#delete-images)\n- Blob and manifest operations:\n  - [Upload images](#upload-images)\n  - [Download images](#download-images)\n  - [Delete manifest](#delete-manifest)\n  - [Delete blob](#delete-blob)\n\nPlease note that each sample assumes there is a `CONTAINERREGISTRY_ENDPOINT` environment variable set to a string containing the `https://` prefix and the name of the login server, for example \"https://myregistry.azurecr.io\". Anonymous access samples are getting endpoint value from environment variable`CONTAINERREGISTRY_ANONREGISTRY_ENDPOINT`.\n\n### List repositories\n\nIterate through the collection of repositories in the registry.\n\n<!-- SNIPPET:sample_delete_tags.list_repository_names -->\n\n```python\nwith ContainerRegistryClient(self.endpoint, self.credential) as client:\n    # Iterate through all the repositories\n    for repository_name in client.list_repository_names():\n        print(repository_name)\n```\n\n<!-- END SNIPPET -->\n\n### List tags with anonymous access\n\nIterate through the collection of tags in the repository with anonymous access.\n\n<!-- SNIPPET:sample_list_tags.list_tags_anonymous -->\n\n```python\nendpoint = os.environ.get(\"CONTAINERREGISTRY_ANONREGISTRY_ENDPOINT\")\nwith ContainerRegistryClient(endpoint) as anon_client:\n    manifest = anon_client.get_manifest_properties(\"library/hello-world\", \"latest\")\n    print(f\"Tags of {manifest.repository_name}: \")\n    # Iterate through all the tags\n    for tag in manifest.tags:\n        print(f\"{tag}\\n\")\n```\n\n<!-- END SNIPPET -->\n\n### Set artifact properties\n\nSet properties of an artifact.\n\n<!-- SNIPPET:sample_set_image_properties.update_manifest_properties -->\n\n```python\nwith ContainerRegistryClient(self.endpoint, self.credential) as client:\n    # Set permissions on image \"library/hello-world:v1\"\n    client.update_manifest_properties(\n        \"library/hello-world\",\n        \"v1\",\n        can_write=False,\n        can_delete=False\n    )\n```\n\n<!-- END SNIPPET -->\n\n### Delete images\n\nDelete images older than the first three in the repository.\n\n<!-- SNIPPET:sample_delete_images.delete_manifests -->\n\n```python\nwith ContainerRegistryClient(self.endpoint, self.credential) as client:\n    for repository in client.list_repository_names():\n        # Keep the three most recent images, delete everything else\n        manifest_count = 0\n        for manifest in client.list_manifest_properties(\n            repository, order_by=ArtifactManifestOrder.LAST_UPDATED_ON_DESCENDING\n        ):\n            manifest_count += 1\n            if manifest_count > 3:\n                # Make sure will have the permission to delete the manifest later\n                client.update_manifest_properties(\n                    repository,\n                    manifest.digest,\n                    can_write=True,\n                    can_delete=True\n                )\n                print(f\"Deleting {repository}:{manifest.digest}\")\n                client.delete_manifest(repository, manifest.digest)\n```\n\n<!-- END SNIPPET -->\n\n### Upload images\n\nTo upload a full image, we need to upload individual layers and configuration. After that we can upload a manifest which describes an image or artifact and assign it a tag.\n\n<!-- SNIPPET:sample_set_get_image.upload_blob_and_manifest -->\n\n```python\nself.repository_name = \"sample-oci-image\"\nlayer = BytesIO(b\"Sample layer\")\nconfig = BytesIO(json.dumps(\n    {\n        \"sample config\": \"content\",\n    }).encode())\nwith ContainerRegistryClient(self.endpoint, self.credential) as client:\n    # Upload a layer\n    layer_digest, layer_size = client.upload_blob(self.repository_name, layer)\n    print(f\"Uploaded layer: digest - {layer_digest}, size - {layer_size}\")\n    # Upload a config\n    config_digest, config_size = client.upload_blob(self.repository_name, config)\n    print(f\"Uploaded config: digest - {config_digest}, size - {config_size}\")\n    # Create an oci image with config and layer info\n    oci_manifest = {\n        \"config\": {\n            \"mediaType\": \"application/vnd.oci.image.config.v1+json\",\n            \"digest\": config_digest,\n            \"sizeInBytes\": config_size,\n        },\n        \"schemaVersion\": 2,\n        \"layers\": [\n            {\n                \"mediaType\": \"application/vnd.oci.image.layer.v1.tar\",\n                \"digest\": layer_digest,\n                \"size\": layer_size,\n                \"annotations\": {\n                    \"org.opencontainers.image.ref.name\": \"artifact.txt\",\n                },\n            },\n        ],\n    }\n    # Set the image with tag \"latest\"\n    manifest_digest = client.set_manifest(self.repository_name, oci_manifest, tag=\"latest\")\n    print(f\"Uploaded manifest: digest - {manifest_digest}\")\n```\n\n<!-- END SNIPPET -->\n\n### Download images\n\nTo download a full image, we need to download its manifest and then download individual layers and configuration.\n\n<!-- SNIPPET:sample_set_get_image.download_blob_and_manifest -->\n\n```python\nwith ContainerRegistryClient(self.endpoint, self.credential) as client:\n    # Get the image\n    get_manifest_result = client.get_manifest(self.repository_name, \"latest\")\n    received_manifest = get_manifest_result.manifest\n    print(f\"Got manifest:\\n{received_manifest}\")\n    \n    # Download and write out the layers\n    for layer in received_manifest[\"layers\"]:\n        # Remove the \"sha256:\" prefix from digest\n        layer_file_name = layer[\"digest\"].split(\":\")[1]\n        try:\n            stream = client.download_blob(self.repository_name, layer[\"digest\"])\n            with open(layer_file_name, \"wb\") as layer_file:\n                for chunk in stream:\n                    layer_file.write(chunk)\n        except DigestValidationError:\n            print(f\"Downloaded layer digest value did not match. Deleting file {layer_file_name}.\")\n            os.remove(layer_file_name)\n        print(f\"Got layer: {layer_file_name}\")\n    # Download and write out the config\n    config_file_name = \"config.json\"\n    try:\n        stream = client.download_blob(self.repository_name, received_manifest[\"config\"][\"digest\"])\n        with open(config_file_name, \"wb\") as config_file:\n            for chunk in stream:\n                config_file.write(chunk)\n    except DigestValidationError:\n        print(f\"Downloaded config digest value did not match. Deleting file {config_file_name}.\")\n        os.remove(config_file_name)\n    print(f\"Got config: {config_file_name}\")\n```\n\n<!-- END SNIPPET -->\n\n### Delete manifest\n\n<!-- SNIPPET:sample_set_get_image.delete_manifest -->\n\n```python\nwith ContainerRegistryClient(self.endpoint, self.credential) as client:\n    get_manifest_result = client.get_manifest(self.repository_name, \"latest\")\n    # Delete the image\n    client.delete_manifest(self.repository_name, get_manifest_result.digest)\n```\n\n<!-- END SNIPPET -->\n\n### Delete blob\n\n<!-- SNIPPET:sample_set_get_image.delete_blob -->\n\n```python\nwith ContainerRegistryClient(self.endpoint, self.credential) as client:\n    get_manifest_result = client.get_manifest(self.repository_name, \"latest\")\n    received_manifest = get_manifest_result.manifest\n    # Delete the layers\n    for layer in received_manifest[\"layers\"]:\n        client.delete_blob(self.repository_name, layer[\"digest\"])\n    # Delete the config\n    client.delete_blob(self.repository_name, received_manifest[\"config\"][\"digest\"])\n```\n\n<!-- END SNIPPET -->\n\n\n## Troubleshooting\n\nFor infomation about troubleshooting, refer to the [troubleshooting guide].\n### General\nACR client library will raise exceptions defined in [Azure Core][azure_core_exceptions].\n\n### Logging\nThis library uses the standard\n[logging][python_logging] library for logging.\n\nBasic information about HTTP sessions (URLs, headers, etc.) is logged at `INFO` level.\n\nDetailed `DEBUG` level logging, including request/response bodies and **unredacted**\nheaders, can be enabled on the client or per-operation with the `logging_enable` keyword argument.\n\nSee full SDK logging documentation with examples [here][sdk_logging_docs].\n\n### Optional Configuration\n\nOptional keyword arguments can be passed in at the client and per-operation level.\nThe azure-core [reference documentation][azure_core_ref_docs]\ndescribes available configurations for retries, logging, transport protocols, and more.\n\n## Next steps\n\n- Go further with azure.containerregistry and our [samples][samples].\n- Watch a [demo or deep dive video](https://azure.microsoft.com/resources/videos/index/?service=container-registry).\n- Read more about the [Azure Container Registry service](https://docs.microsoft.com/azure/container-registry/container-registry-intro).\n\n## Contributing\n\nThis project welcomes contributions and suggestions.  Most contributions require\nyou to agree to a Contributor License Agreement (CLA) declaring that you have\nthe right to, and actually do, grant us the rights to use your contribution. For\ndetails, visit [cla.microsoft.com][cla].\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc].\nFor more information see the [Code of Conduct FAQ][coc_faq]\nor contact [opencode@microsoft.com][coc_contact] with any\nadditional questions or comments.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fsdk%2Fcontainerregistry%2Fazure-containerregistry%2FREADME.png)\n\n<!-- LINKS -->\n[source]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/containerregistry/azure-containerregistry\n[package]: https://pypi.org/project/azure-containerregistry/\n[docs]: https://azuresdkdocs.blob.core.windows.net/$web/python/azure-containerregistry/1.0.0b1/index.html\n[rest_docs]: https://docs.microsoft.com/rest/api/containerregistry/\n[product_docs]:  https://docs.microsoft.com/azure/container-registry\n[pip_link]: https://pypi.org\n[container_registry_docs]: https://docs.microsoft.com/azure/container-registry/container-registry-intro\n[container_registry_create_ps]: https://docs.microsoft.com/azure/container-registry/container-registry-get-started-powershell\n[container_registry_create_cli]: https://docs.microsoft.com/azure/container-registry/container-registry-get-started-azure-cli\n[container_registry_create_portal]: https://docs.microsoft.com/azure/container-registry/container-registry-get-started-portal\n[container_registry_concepts]: https://docs.microsoft.com/azure/container-registry/container-registry-concepts\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[identity]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/README.md\n[samples]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/containerregistry/azure-containerregistry/samples\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n[azure_core_ref_docs]: https://aka.ms/azsdk/python/core/docs\n[azure_core_exceptions]: https://aka.ms/azsdk/python/core/docs#module-azure.core.exceptions\n[python_logging]: https://docs.python.org/3/library/logging.html\n[sdk_logging_docs]: https://docs.microsoft.com/azure/developer/python/azure-sdk-logging\n[troubleshooting guide]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/containerregistry/azure-containerregistry/TROUBLESHOOTING.md\n",
        "repo_name": "containerregistry/azure-containerregistry",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/containerregistry/azure-containerregistry",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Container Registry Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-containerregistry\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.containerregistry import ContainerRegistryManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = ContainerRegistryManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\n\nCode samples for this package can be found at [Container Registry](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com and [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-containerregistry%2FREADME.png)\n",
        "repo_name": "containerregistry/azure-mgmt-containerregistry",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/containerregistry/azure-mgmt-containerregistry",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Container Service Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-containerservice\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.containerservice import ContainerServiceClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = ContainerServiceClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\nCode samples for this package can be found at:\n- [Search Container Service Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com\n- [Azure Python Mgmt SDK Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-containerservice%2FREADME.png)\n",
        "repo_name": "containerservice/azure-mgmt-containerservice",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/containerservice/azure-mgmt-containerservice",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "\n# Azure AI Content Safety client library for Python\n[Azure AI Content Safety][contentsafety_overview] detects harmful user-generated and AI-generated content in applications and services. Content Safety includes text and image APIs that allow you to detect material that is harmful.\n\n## Getting started\n\n### Prequisites\n\n- Python 3.7 or later is required to use this package.\n- You need an [Azure subscription][azure_sub] to use this package.\n- An existing [Azure AI Content Safety][contentsafety_overview] instance.\n\n### Installating the package\n\n```bash\npip install azure-ai-contentsafety\n```\n\n### Authenticate the client\n\n#### Get the endpoint\nYou can find the endpoint for your Azure AI Content Safety service resource using the [Azure Portal][azure_portal] or [Azure CLI][azure_cli_endpoint_lookup]:\n\n```bash\n# Get the endpoint for the Azure AI Content Safety service resource\naz cognitiveservices account show --name \"resource-name\" --resource-group \"resource-group-name\" --query \"properties.endpoint\"\n```\n\n#### Get the API key\n\nThe API key can be found in the [Azure Portal][azure_portal] or by running the following [Azure CLI][azure_cli_key_lookup] command:\n\n```bash\naz cognitiveservices account keys list --name \"<resource-name>\" --resource-group \"<resource-group-name>\"\n```\n\n#### Create a ContentSafetyClient with AzureKeyCredential\n\nTo use an API key as the `credential` parameter, pass the key as a string into an instance of `AzureKeyCredential`.\n\n```python\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.contentsafety import ContentSafetyClient\n\nendpoint = \"https://<my-custom-subdomain>.cognitiveservices.azure.com/\"\ncredential = AzureKeyCredential(\"<api_key>\")\nclient = ContentSafetyClient(endpoint, credential)\n```\n\n## Key concepts\n\n### Available features\nThere are different types of analysis available from this service. The following table describes the currently available APIs.\n\n|Feature  |Description  |\n|---------|---------|\n|Text Analysis API|Scans text for sexual content, violence, hate, and self harm with multi-severity levels.|\n|Image Analysis API|Scans images for sexual content, violence, hate, and self harm with multi-severity levels.|\n| Text Blocklist Management APIs|The default AI classifiers are sufficient for most content safety needs. However, you might need to screen for terms that are specific to your use case. You can create blocklists of terms to use with the Text API.|\n\n### Harm categories\nContent Safety recognizes four distinct categories of objectionable content.\n\n|Category|Description|\n|---------|---------|\n|Hate\t|Hate refers to any content that attacks or uses pejorative or discriminatory language in reference to a person or identity group based on certain differentiating attributes of that group. This includes but is not limited to race, ethnicity, nationality, gender identity and expression, sexual orientation, religion, immigration status, ability status, personal appearance, and body size.|\n|Sexual\t|Sexual describes content related to anatomical organs and genitals, romantic relationships, acts portrayed in erotic or affectionate terms, pregnancy, physical sexual acts\u2014including those acts portrayed as an assault or a forced sexual violent act against one\u2019s will\u2014, prostitution, pornography, and abuse.|\n|Violence\t|Violence describes content related to physical actions intended to hurt, injure, damage, or kill someone or something. It also includes weapons, guns and related entities, such as manufacturers, associations, legislation, and similar.|\n|Self-harm\t|Self-harm describes content related to physical actions intended to purposely hurt, injure, or damage one\u2019s body or kill oneself.|\n\nClassification can be multi-labeled. For example, when a text sample goes through the text moderation model, it could be classified as both Sexual content and Violence.\n\n### Severity levels\nEvery harm category the service applies also comes with a severity level rating. The severity level is meant to indicate the severity of the consequences of showing the flagged content.\n\n|Severity|Label|\n|---------|---------|\n|0\t|Safe|\n|2\t|Low|\n|4\t|Medium|\n|6\t|High|\n\n### Text blocklist management\nFollowing operations are supported to manage your text blocklist:\n- Create or modify a blocklist\n- List all blocklists\n- Get a blocklist by blocklistName\n- Add blockItems to a blocklist\n- Remove blockItems from a blocklist\n- List all blockItems in a blocklist by blocklistName\n- Get a blockItem in a blocklist by blockItemId and blocklistName\n- Delete a blocklist and all of its blockItems\n\nYou can set the blocklists you want to use when analyze text, then you can get blocklist match result from returned response.\n\n## Examples\n\nThe following section provides several code snippets covering some of the most common Content Safety service tasks, including:\n\n- [Analyze text](#analyze-text)\n- [Analyze image](#analyze-image)\n- [Manage text blocklist](#manage-text-blocklist)\n\nPlease refer to [sample data](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/contentsafety/azure-ai-contentsafety/samples/sample_data) for the data used here. For more samples, please refer to [samples](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/contentsafety/azure-ai-contentsafety/samples).\n\n### Analyze text\n\n#### Analyze text without blocklists\n<!-- SNIPPET:sample_analyze_text.analyze_text -->\n\n```python\n\n    import os\n    from azure.ai.contentsafety import ContentSafetyClient\n    from azure.core.credentials import AzureKeyCredential\n    from azure.core.exceptions import HttpResponseError\n    from azure.ai.contentsafety.models import AnalyzeTextOptions, TextCategory\n\n    key = os.environ[\"CONTENT_SAFETY_KEY\"]\n    endpoint = os.environ[\"CONTENT_SAFETY_ENDPOINT\"]\n    text_path = os.path.abspath(os.path.join(os.path.abspath(__file__), \"..\", \"./sample_data/text.txt\"))\n\n    # Create an Content Safety client\n    client = ContentSafetyClient(endpoint, AzureKeyCredential(key))\n\n    # Read sample data\n    with open(text_path) as f:\n        # Build request\n        request = AnalyzeTextOptions(text=f.readline(), categories=[TextCategory.HATE, TextCategory.SELF_HARM])\n\n    # Analyze text\n    try:\n        response = client.analyze_text(request)\n    except HttpResponseError as e:\n        print(\"Analyze text failed.\")\n        if e.error:\n            print(f\"Error code: {e.error.code}\")\n            print(f\"Error message: {e.error.message}\")\n            raise\n        print(e)\n        raise\n\n    if response.hate_result:\n        print(f\"Hate severity: {response.hate_result.severity}\")\n    if response.self_harm_result:\n        print(f\"SelfHarm severity: {response.self_harm_result.severity}\")\n```\n\n<!-- END SNIPPET -->\n\n#### Analyze text with blocklists\n<!-- SNIPPET:sample_manage_blocklist.analyze_text_with_blocklists -->\n\n```python\n\n    import os\n    from azure.ai.contentsafety import ContentSafetyClient\n    from azure.core.credentials import AzureKeyCredential\n    from azure.ai.contentsafety.models import AnalyzeTextOptions\n    from azure.core.exceptions import HttpResponseError\n\n    key = os.environ[\"CONTENT_SAFETY_KEY\"]\n    endpoint = os.environ[\"CONTENT_SAFETY_ENDPOINT\"]\n\n    # Create an Content Safety client\n    client = ContentSafetyClient(endpoint, AzureKeyCredential(key))\n\n    blocklist_name = \"TestBlocklist\"\n    input_text = \"I h*te you and I want to k*ll you.\"\n\n    try:\n        # After you edit your blocklist, it usually takes effect in 5 minutes, please wait some time before analyzing with blocklist after editing.\n        analysis_result = client.analyze_text(AnalyzeTextOptions(text=input_text, blocklist_names=[blocklist_name], break_by_blocklists=False))\n        if analysis_result and analysis_result.blocklists_match_results:\n            print(\"\\nBlocklist match results: \")\n            for match_result in analysis_result.blocklists_match_results:\n                print(f\"Block item was hit in text, Offset={match_result.offset}, Length={match_result.length}.\")\n                print(f\"BlocklistName: {match_result.blocklist_name}, BlockItemId: {match_result.block_item_id}, BlockItemText: {match_result.block_item_text}\")\n    except HttpResponseError as e:\n        print(\"\\nAnalyze text failed: \")\n        if e.error:\n            print(f\"Error code: {e.error.code}\")\n            print(f\"Error message: {e.error.message}\")\n            raise\n        print(e)\n        raise\n```\n\n<!-- END SNIPPET -->\n\n### Analyze image\n\n<!-- SNIPPET:sample_analyze_image.analyze_image -->\n\n```python\n\nimport os\nfrom azure.ai.contentsafety import ContentSafetyClient\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.core.exceptions import HttpResponseError\nfrom azure.ai.contentsafety.models import AnalyzeImageOptions, ImageData\n\nkey = os.environ[\"CONTENT_SAFETY_KEY\"]\nendpoint = os.environ[\"CONTENT_SAFETY_ENDPOINT\"]\nimage_path = os.path.abspath(os.path.join(os.path.abspath(__file__), \"..\", \"./sample_data/image.jpg\"))\n\n# Create an Content Safety client\nclient = ContentSafetyClient(endpoint, AzureKeyCredential(key))\n\n# Build request\nwith open(image_path, \"rb\") as file:\n    request = AnalyzeImageOptions(image=ImageData(content=file.read()))\n\n# Analyze image\ntry:\n    response = client.analyze_image(request)\nexcept HttpResponseError as e:\n    print(\"Analyze image failed.\")\n    if e.error:\n        print(f\"Error code: {e.error.code}\")\n        print(f\"Error message: {e.error.message}\")\n        raise\n    print(e)\n    raise\n\nif response.hate_result:\n    print(f\"Hate severity: {response.hate_result.severity}\")\nif response.self_harm_result:\n    print(f\"SelfHarm severity: {response.self_harm_result.severity}\")\nif response.sexual_result:\n    print(f\"Sexual severity: {response.sexual_result.severity}\")\nif response.violence_result:\n    print(f\"Violence severity: {response.violence_result.severity}\")\n```\n\n<!-- END SNIPPET -->\n\n### Manage text blocklist\n\n#### Create or update text blocklist\n<!-- SNIPPET:sample_manage_blocklist.create_or_update_text_blocklist -->\n\n```python\n\n    import os\n    from azure.ai.contentsafety import ContentSafetyClient\n    from azure.core.credentials import AzureKeyCredential\n    from azure.core.exceptions import HttpResponseError\n\n    key = os.environ[\"CONTENT_SAFETY_KEY\"]\n    endpoint = os.environ[\"CONTENT_SAFETY_ENDPOINT\"]\n\n    # Create an Content Safety client\n    client = ContentSafetyClient(endpoint, AzureKeyCredential(key))\n\n    blocklist_name = \"TestBlocklist\"\n    blocklist_description = \"Test blocklist management.\"\n\n    try:\n        blocklist = client.create_or_update_text_blocklist(blocklist_name=blocklist_name, resource={\"description\": blocklist_description})\n        if blocklist:\n            print(\"\\nBlocklist created or updated: \")\n            print(f\"Name: {blocklist.blocklist_name}, Description: {blocklist.description}\")\n    except HttpResponseError as e:\n        print(\"\\nCreate or update text blocklist failed: \")\n        if e.error:\n            print(f\"Error code: {e.error.code}\")\n            print(f\"Error message: {e.error.message}\")\n            raise\n        print(e)\n        raise\n```\n\n<!-- END SNIPPET -->\n\n#### List text blocklists\n<!-- SNIPPET:sample_manage_blocklist.list_text_blocklists -->\n\n```python\n\n    import os\n    from azure.ai.contentsafety import ContentSafetyClient\n    from azure.core.credentials import AzureKeyCredential\n    from azure.core.exceptions import HttpResponseError\n\n    key = os.environ[\"CONTENT_SAFETY_KEY\"]\n    endpoint = os.environ[\"CONTENT_SAFETY_ENDPOINT\"]\n\n    # Create an Content Safety client\n    client = ContentSafetyClient(endpoint, AzureKeyCredential(key))\n\n    try:\n        blocklists = client.list_text_blocklists()\n        if blocklists:\n            print(\"\\nList blocklists: \")\n            for blocklist in blocklists:\n                print(f\"Name: {blocklist.blocklist_name}, Description: {blocklist.description}\")\n    except HttpResponseError as e:\n        print(\"\\nList text blocklists failed: \")\n        if e.error:\n            print(f\"Error code: {e.error.code}\")\n            print(f\"Error message: {e.error.message}\")\n            raise\n        print(e)\n        raise\n```\n\n<!-- END SNIPPET -->\n\n#### Get text blocklist\n<!-- SNIPPET:sample_manage_blocklist.get_text_blocklist -->\n\n```python\n\n    import os\n    from azure.ai.contentsafety import ContentSafetyClient\n    from azure.core.credentials import AzureKeyCredential\n    from azure.core.exceptions import HttpResponseError\n\n    key = os.environ[\"CONTENT_SAFETY_KEY\"]\n    endpoint = os.environ[\"CONTENT_SAFETY_ENDPOINT\"]\n\n    # Create an Content Safety client\n    client = ContentSafetyClient(endpoint, AzureKeyCredential(key))\n\n    blocklist_name = \"TestBlocklist\"\n\n    try:\n        blocklist = client.get_text_blocklist(blocklist_name=blocklist_name)\n        if blocklist:\n            print(\"\\nGet blocklist: \")\n            print(f\"Name: {blocklist.blocklist_name}, Description: {blocklist.description}\")\n    except HttpResponseError as e:\n        print(\"\\nGet text blocklist failed: \")\n        if e.error:\n            print(f\"Error code: {e.error.code}\")\n            print(f\"Error message: {e.error.message}\")\n            raise\n        print(e)\n        raise\n```\n\n<!-- END SNIPPET -->\n\n#### Delete text blocklist\n<!-- SNIPPET:sample_manage_blocklist.delete_blocklist -->\n\n```python\n\n    import os\n    from azure.ai.contentsafety import ContentSafetyClient\n    from azure.core.credentials import AzureKeyCredential\n    from azure.core.exceptions import HttpResponseError\n\n    key = os.environ[\"CONTENT_SAFETY_KEY\"]\n    endpoint = os.environ[\"CONTENT_SAFETY_ENDPOINT\"]\n\n    # Create an Content Safety client\n    client = ContentSafetyClient(endpoint, AzureKeyCredential(key))\n\n    blocklist_name = \"TestBlocklist\"\n\n    try:\n        client.delete_text_blocklist(blocklist_name=blocklist_name)\n        print(f\"\\nDeleted blocklist: {blocklist_name}\")\n    except HttpResponseError as e:\n        print(\"\\nDelete blocklist failed:\")\n        if e.error:\n            print(f\"Error code: {e.error.code}\")\n            print(f\"Error message: {e.error.message}\")\n            raise\n        print(e)\n        raise\n```\n\n<!-- END SNIPPET -->\n\n#### Add blockItems\n<!-- SNIPPET:sample_manage_blocklist.add_block_items -->\n\n```python\n\n    import os\n    from azure.ai.contentsafety import ContentSafetyClient\n    from azure.core.credentials import AzureKeyCredential\n    from azure.ai.contentsafety.models import (\n        TextBlockItemInfo,\n        AddBlockItemsOptions\n    )\n    from azure.core.exceptions import HttpResponseError\n\n    key = os.environ[\"CONTENT_SAFETY_KEY\"]\n    endpoint = os.environ[\"CONTENT_SAFETY_ENDPOINT\"]\n\n    # Create an Content Safety client\n    client = ContentSafetyClient(endpoint, AzureKeyCredential(key))\n\n    blocklist_name = \"TestBlocklist\"\n    block_item_text_1 = \"k*ll\"\n    block_item_text_2 = \"h*te\"\n\n    block_items = [TextBlockItemInfo(text=block_item_text_1), TextBlockItemInfo(text=block_item_text_2)]\n    try:\n        result = client.add_block_items(\n            blocklist_name=blocklist_name,\n            body=AddBlockItemsOptions(block_items=block_items),\n        )\n        if result and result.value:\n            print(\"\\nBlock items added: \")\n            for block_item in result.value:\n                print(f\"BlockItemId: {block_item.block_item_id}, Text: {block_item.text}, Description: {block_item.description}\")\n    except HttpResponseError as e:\n        print(\"\\nAdd block items failed: \")\n        if e.error:\n            print(f\"Error code: {e.error.code}\")\n            print(f\"Error message: {e.error.message}\")\n            raise\n        print(e)\n        raise\n```\n\n<!-- END SNIPPET -->\n\n#### List blockItems\n<!-- SNIPPET:sample_manage_blocklist.list_block_items -->\n\n```python\n\n    import os\n    from azure.ai.contentsafety import ContentSafetyClient\n    from azure.core.credentials import AzureKeyCredential\n    from azure.core.exceptions import HttpResponseError\n\n    key = os.environ[\"CONTENT_SAFETY_KEY\"]\n    endpoint = os.environ[\"CONTENT_SAFETY_ENDPOINT\"]\n\n    # Create an Content Safety client\n    client = ContentSafetyClient(endpoint, AzureKeyCredential(key))\n\n    blocklist_name = \"TestBlocklist\"\n\n    try:\n        block_items = client.list_text_blocklist_items(blocklist_name=blocklist_name)\n        if block_items:\n            print(\"\\nList block items: \")\n            for block_item in block_items:\n                print(f\"BlockItemId: {block_item.block_item_id}, Text: {block_item.text}, Description: {block_item.description}\")\n    except HttpResponseError as e:\n        print(\"\\nList block items failed: \")\n        if e.error:\n            print(f\"Error code: {e.error.code}\")\n            print(f\"Error message: {e.error.message}\")\n            raise\n        print(e)\n        raise\n```\n\n<!-- END SNIPPET -->\n\n#### Get blockItem\n<!-- SNIPPET:sample_manage_blocklist.get_block_item -->\n\n```python\n\n    import os\n    from azure.ai.contentsafety import ContentSafetyClient\n    from azure.core.credentials import AzureKeyCredential\n    from azure.ai.contentsafety.models import TextBlockItemInfo, AddBlockItemsOptions\n    from azure.core.exceptions import HttpResponseError\n\n    key = os.environ[\"CONTENT_SAFETY_KEY\"]\n    endpoint = os.environ[\"CONTENT_SAFETY_ENDPOINT\"]\n\n    # Create an Content Safety client\n    client = ContentSafetyClient(endpoint, AzureKeyCredential(key))\n\n    blocklist_name = \"TestBlocklist\"\n    block_item_text_1 = \"k*ll\"\n\n    try:\n        # Add a blockItem\n        add_result = client.add_block_items(\n            blocklist_name=blocklist_name,\n            body=AddBlockItemsOptions(block_items=[TextBlockItemInfo(text=block_item_text_1)]),\n        )\n        if not add_result or not add_result.value or len(add_result.value) <= 0:\n            raise RuntimeError(\"BlockItem not created.\")\n        block_item_id = add_result.value[0].block_item_id\n\n        # Get this blockItem by blockItemId\n        block_item = client.get_text_blocklist_item(\n            blocklist_name=blocklist_name,\n            block_item_id= block_item_id\n        )\n        print(\"\\nGet blockitem: \")\n        print(f\"BlockItemId: {block_item.block_item_id}, Text: {block_item.text}, Description: {block_item.description}\")\n    except HttpResponseError as e:\n        print(\"\\nGet block item failed: \")\n        if e.error:\n            print(f\"Error code: {e.error.code}\")\n            print(f\"Error message: {e.error.message}\")\n            raise\n        print(e)\n        raise\n```\n\n<!-- END SNIPPET -->\n\n#### Remove blockItems\n<!-- SNIPPET:sample_manage_blocklist.remove_block_items -->\n\n```python\n\n    import os\n    from azure.ai.contentsafety import ContentSafetyClient\n    from azure.core.credentials import AzureKeyCredential\n    from azure.ai.contentsafety.models import (\n        TextBlockItemInfo,\n        AddBlockItemsOptions,\n        RemoveBlockItemsOptions\n    )\n    from azure.core.exceptions import HttpResponseError\n\n    key = os.environ[\"CONTENT_SAFETY_KEY\"]\n    endpoint = os.environ[\"CONTENT_SAFETY_ENDPOINT\"]\n\n    # Create an Content Safety client\n    client = ContentSafetyClient(endpoint, AzureKeyCredential(key))\n\n    blocklist_name = \"TestBlocklist\"\n    block_item_text_1 = \"k*ll\"\n\n    try:\n        # Add a blockItem\n        add_result = client.add_block_items(\n            blocklist_name=blocklist_name,\n            body=AddBlockItemsOptions(block_items=[TextBlockItemInfo(text=block_item_text_1)]),\n        )\n        if not add_result or not add_result.value or len(add_result.value) <= 0:\n            raise RuntimeError(\"BlockItem not created.\")\n        block_item_id = add_result.value[0].block_item_id\n\n        # Remove this blockItem by blockItemId\n        client.remove_block_items(\n            blocklist_name=blocklist_name,\n            body=RemoveBlockItemsOptions(block_item_ids=[block_item_id])\n        )\n        print(f\"\\nRemoved blockItem: {add_result.value[0].block_item_id}\")\n    except HttpResponseError as e:\n        print(\"\\nRemove block item failed: \")\n        if e.error:\n            print(f\"Error code: {e.error.code}\")\n            print(f\"Error message: {e.error.message}\")\n            raise\n        print(e)\n        raise\n```\n\n<!-- END SNIPPET -->\n\n## Troubleshooting\n\n### General\n\nAzure AI Content Safety client library will raise exceptions defined in [Azure Core][azure_core_exception]. Error codes are defined as below: \n\n|Error Code\t|Possible reasons\t|Suggestions|\n|-----------|-------------------|-----------|\n|InvalidRequestBody\t|One or more fields in the request body do not match the API definition.\t|1. Check the API version you specified in the API call.<br>2. Check the corresponding API definition for the API version you selected.|\n|InvalidResourceName\t|The resource name you specified in the URL does not meet the requirements, like the blocklist name, blocklist term ID, etc.\t|1. Check the API version you specified in the API call.<br>2. Check whether the given name has invalid characters according to the API definition.|\n|ResourceNotFound\t|The resource you specified in the URL may not exist, like the blocklist name.\t|1. Check the API version you specified in the API call.<br>2. Double check the existence of the resource specified in the URL.|\n|InternalError\t|Some unexpected situations on the server side have been triggered.\t|1. You may want to retry a few times after a small period and see it the issue happens again.<br>2. Contact Azure Support if this issue persists.|\n|ServerBusy\t|The server side cannot process the request temporarily.\t|1. You may want to retry a few times after a small period and see it the issue happens again.<br>2.Contact Azure Support if this issue persists.|\n|TooManyRequests\t|The current RPS has exceeded the quota for your current SKU.\t|1. Check the pricing table to understand the RPS quota.<br>2.Contact Azure Support if you need more QPS.|\n\n### Logging\n\nThis library uses the standard [logging](https://docs.python.org/3/library/logging.html) library for logging.\n\nBasic information about HTTP sessions (URLs, headers, etc.) is logged at `INFO` level.\n\nDetailed `DEBUG` level logging, including request/response bodies and **unredacted** headers, can be enabled on the client or per-operation with the `logging_enable` keyword argument.\n\nSee full SDK logging documentation with examples [here](https://learn.microsoft.com/azure/developer/python/sdk/azure-sdk-logging).\n\n### Optional Configuration\n\nOptional keyword arguments can be passed in at the client and per-operation level. The azure-core [reference documentation](https://azuresdkdocs.blob.core.windows.net/$web/python/azure-core/latest/azure.core.html) describes available configurations for retries, logging, transport protocols, and more.\n\n## Next steps\n\n### Additional documentation\n\nFor more extensive documentation on Azure Content Safety, see the [Azure AI Content Safety][contentsafety_overview] on docs.microsoft.com.\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require\nyou to agree to a Contributor License Agreement (CLA) declaring that you have\nthe right to, and actually do, grant us the rights to use your contribution.\nFor details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether\nyou need to provide a CLA and decorate the PR appropriately (e.g., label,\ncomment). Simply follow the instructions provided by the bot. You will only\nneed to do this once across all repos using our CLA.\n\nThis project has adopted the\n[Microsoft Open Source Code of Conduct][code_of_conduct]. For more information,\nsee the Code of Conduct FAQ or contact opencode@microsoft.com with any\nadditional questions or comments.\n\n<!-- LINKS -->\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[authenticate_with_token]: https://docs.microsoft.com/azure/cognitive-services/authentication?tabs=powershell#authenticate-with-an-authentication-token\n[azure_identity_credentials]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity#credentials\n[azure_identity_pip]: https://pypi.org/project/azure-identity/\n[default_azure_credential]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity#defaultazurecredential\n[pip]: https://pypi.org/project/pip/\n[azure_sub]: https://azure.microsoft.com/free/\n[contentsafety_overview]: https://aka.ms/acs-doc\n[azure_portal]: https://ms.portal.azure.com/\n[azure_cli_endpoint_lookup]: https://docs.microsoft.com/cli/azure/cognitiveservices/account?view=azure-cli-latest#az-cognitiveservices-account-show\n[azure_cli_key_lookup]: https://docs.microsoft.com/cli/azure/cognitiveservices/account/keys?view=azure-cli-latest#az-cognitiveservices-account-keys-list\n[azure_core_exception]: https://azuresdkdocs.blob.core.windows.net/$web/python/azure-core/latest/azure.core.html#module-azure.core.exceptions\n",
        "repo_name": "contentsafety/azure-ai-contentsafety",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/contentsafety/azure-ai-contentsafety",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure common code.\n\nThis package provides shared code by the Azure packages.\n\nIf you are looking to install the Azure client libraries, refer to the main Github repository:\nhttps://github.com/Azure/azure-sdk-for-python\n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-common%2FREADME.png)\n",
        "repo_name": "core/azure-common",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-common",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "\n# Azure Core Experimental client library for Python\n\nAzure Core Experimental client library provides experimental features that are not ready for stable release. The main reason might be because the feature depends on some other packages that there is no stable version available yet. If its dependant package introduces breaking changes, the features maybe break. It is not recommended to use azure core experimental library in production environment.\n\n## Getting started\n\nInstall the azure core experimental package with [pip](https://pypi.org/project/pip/):\n\n```bash\npip install azure-core-experimental\n```\n\n## Features list\n\n- pyodide transport\n- httpx transport\n\n## Contributing\n\nThis project welcomes contributions and suggestions.  Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n",
        "repo_name": "core/azure-core-experimental",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core-experimental",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "\n\n# Azure Core Tracing OpenCensus client library for Python\n\n## Getting started\n\nInstall the opencensus python for Python with [pip](https://pypi.org/project/pip/):\n\n```bash\npip install azure-core-tracing-opencensus --pre\n```\n\nNow you can use opencensus for Python as usual with any SDKs that is compatible\nwith azure-core tracing. This includes (not exhaustive list), azure-storage-blob, azure-keyvault-secrets, azure-eventhub, etc.\n\n## Key concepts\n\n* You don't need to pass any context, SDK will get it for you\n* The opencensus threading plugin is installed with this package\n\n## Examples\n\nThere is no explicit context to pass, you just create your usual opencensus and tracer and\ncall any SDK code that is compatible with azure-core tracing. This is an example\nusing Azure Monitor exporter, but you can use any exporter (Zipkin, etc.).\n\n```python\nfrom opencensus.ext.azure.trace_exporter import AzureExporter\n\nfrom opencensus.trace.tracer import Tracer\nfrom opencensus.trace.samplers import AlwaysOnSampler\n\nfrom azure.storage.blob import BlobServiceClient\n\nexporter = AzureExporter(\n    instrumentation_key=\"uuid of the instrumentation key (see your Azure Monitor account)\"\n)\n\ntracer = Tracer(exporter=exporter, sampler=AlwaysOnSampler())\nwith tracer.span(name=\"MyApplication\") as span:\n    client = BlobServiceClient.from_connection_string('connectionstring')\n    client.delete_container('my_container')  # Call will be traced\n```\n\n\n## Troubleshooting\n\nThis client raises exceptions defined in [Azure Core](https://docs.microsoft.com/python/api/azure-core/azure.core.exceptions?view=azure-python).\n\n\n## Next steps\n\nMore documentation on OpenCensus configuration can be found on the [OpenCensus website](https://opencensus.io)\n\n\n## Contributing\nThis project welcomes contributions and suggestions.  Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n",
        "repo_name": "core/azure-core-tracing-opencensus",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core-tracing-opencensus",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "\n\n# Azure Core Tracing OpenTelemetry client library for Python\n\n## Getting started\n\n### Install the package\n\nInstall the Azure Core OpenTelemetry Tracing plugin for Python with [pip](https://pypi.org/project/pip/):\n\n```bash\npip install azure-core-tracing-opentelemetry\n```\n\nNow you can use OpenTelemetry for Python as usual with any SDKs that are compatible\nwith azure-core tracing. This includes (not exhaustive list), azure-storage-blob, azure-keyvault-secrets, azure-eventhub, etc.\n\n## Key concepts\n\n* You don't need to pass any context, SDK will get it for you\n* These lines are the only ones you need to enable tracing\n\n  ``` python\n    from azure.core.settings import settings\n    from azure.core.tracing.ext.opentelemetry_span import OpenTelemetrySpan\n    settings.tracing_implementation = OpenTelemetrySpan\n  ```\n* Alternatively, if you have the latest version of `azure-core` installed, you can also set the following environment variable to\n  enable tracing with OpenTelemetry:\n\n  ```bash\n  AZURE_SDK_TRACING_IMPLEMENTATION=opentelemetry\n  ```\n\n## Examples\n\nThere is no explicit context to pass, you just create your usual opentelemetry tracer and\ncall any SDK code that is compatible with azure-core tracing. This is an example\nusing Azure Monitor exporter, but you can use any exporter (Zipkin, etc.).\n\n```python\n\n# Declare OpenTelemetry as enabled tracing plugin for Azure SDKs\nfrom azure.core.settings import settings\nfrom azure.core.tracing.ext.opentelemetry_span import OpenTelemetrySpan\n\nsettings.tracing_implementation = OpenTelemetrySpan\n\n# In the below example, we use a simple console exporter, uncomment these lines to use\n# the OpenTelemetry exporter for Azure Monitor.\n# Example of a trace exporter for Azure Monitor, but you can use anything OpenTelemetry supports\n# from azure.monitor.opentelemetry.exporter import AzureMonitorTraceExporter\n# exporter = AzureMonitorTraceExporter(\n#     connection_string=\"the connection string used for your Application Insights resource\"\n# )\n\n# Regular open telemetry usage from here, see https://github.com/open-telemetry/opentelemetry-python\n# for details\nfrom opentelemetry import trace\nfrom opentelemetry.sdk.trace import TracerProvider\nfrom opentelemetry.sdk.trace.export import ConsoleSpanExporter\nfrom opentelemetry.sdk.trace.export import SimpleSpanProcessor\n\n# Simple console exporter\nexporter = ConsoleSpanExporter()\n\ntrace.set_tracer_provider(TracerProvider())\ntracer = trace.get_tracer(__name__)\ntrace.get_tracer_provider().add_span_processor(\n    SimpleSpanProcessor(exporter)\n)\n\n# Example with Storage SDKs\n\nfrom azure.storage.blob import BlobServiceClient\n\nwith tracer.start_as_current_span(name=\"MyApplication\"):\n    client = BlobServiceClient.from_connection_string('connectionstring')\n    client.create_container('my_container')  # Call will be traced\n```\n\nThe Azure Monitor OpenTelemetry Exporter can be found in the [package](https://pypi.org/project/azure-monitor-opentelemetry-exporter/) `opentelemetry-azure-monitor-exporter`\n\n\n## Troubleshooting\n\nThis client raises exceptions defined in [Azure Core](https://learn.microsoft.com/python/api/azure-core/azure.core.exceptions?view=azure-python).\n\n\n## Next steps\n\nMore documentation on OpenTelemetry configuration can be found on the [OpenTelemetry website](https://opentelemetry.io)\n\n\n## Contributing\nThis project welcomes contributions and suggestions.  Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n",
        "repo_name": "core/azure-core-tracing-opentelemetry",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core-tracing-opentelemetry",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "\n# Azure Core shared client library for Python\n\nAzure core provides shared exceptions and modules for Python SDK client libraries.\nThese libraries follow the [Azure SDK Design Guidelines for Python](https://azure.github.io/azure-sdk/python/guidelines/index.html) .\n\nIf you are a client library developer, please reference [client library developer reference](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/CLIENT_LIBRARY_DEVELOPER.md) for more information.\n\n[Source code](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/) \n| [Package (Pypi)][package]\n| [Package (Conda)](https://anaconda.org/microsoft/azure-core/)\n| [API reference documentation](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/)\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to <https://github.com/Azure/azure-sdk-for-python/issues/20691>_\n\n## Getting started\n\nTypically, you will not need to install azure core;\nit will be installed when you install one of the client libraries using it.\nIn case you want to install it explicitly (to implement your own client library, for example),\nyou can find it [here](https://pypi.org/project/azure-core/).\n\n## Key concepts\n\n### Azure Core Library Exceptions\n\n#### AzureError\n\nAzureError is the base exception for all errors.\n\n```python\nclass AzureError(Exception):\n    def __init__(self, message, *args, **kwargs):\n        self.inner_exception = kwargs.get(\"error\")\n        self.exc_type, self.exc_value, self.exc_traceback = sys.exc_info()\n        self.exc_type = self.exc_type.__name__ if self.exc_type else type(self.inner_exception)\n        self.exc_msg = \"{}, {}: {}\".format(message, self.exc_type, self.exc_value)  # type: ignore\n        self.message = str(message)\n        self.continuation_token = kwargs.get(\"continuation_token\")\n        super(AzureError, self).__init__(self.message, *args)\n```\n\n*message* is any message (str) to be associated with the exception.\n\n*args* are any additional args to be included with exception.\n\n*kwargs* are keyword arguments to include with the exception. Use the keyword *error* to pass in an internal exception and *continuation_token* for a token reference to continue an incomplete operation.\n\n**The following exceptions inherit from AzureError:**\n\n#### ServiceRequestError\n\nAn error occurred while attempt to make a request to the service. No request was sent.\n\n#### ServiceResponseError\n\nThe request was sent, but the client failed to understand the response.\nThe connection may have timed out. These errors can be retried for idempotent or safe operations.\n\n#### HttpResponseError\n\nA request was made, and a non-success status code was received from the service.\n\n```python\nclass HttpResponseError(AzureError):\n    def __init__(self, message=None, response=None, **kwargs):\n        self.reason = None\n        self.response = response\n        if response:\n            self.reason = response.reason\n            self.status_code = response.status_code\n        self.error = self._parse_odata_body(ODataV4Format, response)  # type: Optional[ODataV4Format]\n        if self.error:\n            message = str(self.error)\n        else:\n            message = message or \"Operation returned an invalid status '{}'\".format(\n                self.reason\n            )\n\n        super(HttpResponseError, self).__init__(message=message, **kwargs)\n```\n\n*message* is the HTTP response error message (optional)\n\n*response* is the HTTP response (optional).\n\n*kwargs* are keyword arguments to include with the exception.\n\n**The following exceptions inherit from HttpResponseError:**\n\n#### DecodeError\n\nAn error raised during response de-serialization.\n\n#### IncompleteReadError\n\nAn error raised if peer closes the connection before we have received the complete message body.\n\n#### ResourceExistsError\n\nAn error response with status code 4xx. This will not be raised directly by the Azure core pipeline.\n\n#### ResourceNotFoundError\n\nAn error response, typically triggered by a 412 response (for update) or 404 (for get/post).\n\n#### ResourceModifiedError\n\nAn error response with status code 4xx, typically 412 Conflict. This will not be raised directly by the Azure core pipeline.\n\n#### ResourceNotModifiedError\n\nAn error response with status code 304. This will not be raised directly by the Azure core pipeline.\n\n#### ClientAuthenticationError\n\nAn error response with status code 4xx. This will not be raised directly by the Azure core pipeline.\n\n#### TooManyRedirectsError\n\nAn error raised when the maximum number of redirect attempts is reached. The maximum amount of redirects can be configured in the RedirectPolicy.\n\n```python\nclass TooManyRedirectsError(HttpResponseError):\n    def __init__(self, history, *args, **kwargs):\n        self.history = history\n        message = \"Reached maximum redirect attempts.\"\n        super(TooManyRedirectsError, self).__init__(message, *args, **kwargs)\n```\n\n*history* is used to document the requests/responses that resulted in redirected requests.\n\n*args* are any additional args to be included with exception.\n\n*kwargs* are keyword arguments to include with the exception.\n\n#### StreamConsumedError\n\nAn error thrown if you try to access the stream of `azure.core.rest.HttpResponse` or `azure.core.rest.AsyncHttpResponse` once\nthe response stream has been consumed.\n\n#### StreamClosedError\n\nAn error thrown if you try to access the stream of the `azure.core.rest.HttpResponse` or `azure.core.rest.AsyncHttpResponse` once\nthe response stream has been closed.\n\n#### ResponseNotReadError\n\nAn error thrown if you try to access the `content` of `azure.core.rest.HttpResponse` or `azure.core.rest.AsyncHttpResponse` before\nreading in the response's bytes first.\n\n### Configurations\n\nWhen calling the methods, some properties can be configured by passing in as kwargs arguments.\n\n| Parameters | Description |\n| --- | --- |\n| headers | The HTTP Request headers. |\n| request_id | The request id to be added into header. |\n| user_agent | If specified, this will be added in front of the user agent string. |\n| logging_enable| Use to enable per operation. Defaults to `False`. |\n| logger | If specified, it will be used to log information. |\n| response_encoding | The encoding to use if known for this service (will disable auto-detection). |\n| proxies | Maps protocol or protocol and hostname to the URL of the proxy. |\n| raw_request_hook | Callback function. Will be invoked on request. |\n| raw_response_hook | Callback function. Will be invoked on response. |\n| network_span_namer | A callable to customize the span name. |\n| tracing_attributes | Attributes to set on all created spans. |\n| permit_redirects | Whether the client allows redirects. Defaults to `True`. |\n| redirect_max | The maximum allowed redirects. Defaults to `30`. |\n| retry_total | Total number of retries to allow. Takes precedence over other counts. Default value is `10`. |\n| retry_connect | How many connection-related errors to retry on. These are errors raised before the request is sent to the remote server, which we assume has not triggered the server to process the request. Default value is `3`. |\n| retry_read | How many times to retry on read errors. These errors are raised after the request was sent to the server, so the request may have side-effects. Default value is `3`. |\n| retry_status | How many times to retry on bad status codes. Default value is `3`. |\n| retry_backoff_factor | A backoff factor to apply between attempts after the second try (most errors are resolved immediately by a second try without a delay). Retry policy will sleep for: `{backoff factor} * (2 ** ({number of total retries} - 1))` seconds. If the backoff_factor is 0.1, then the retry will sleep for [0.0s, 0.2s, 0.4s, ...] between retries. The default value is `0.8`. |\n| retry_backoff_max | The maximum back off time. Default value is `120` seconds (2 minutes). |\n| retry_mode | Fixed or exponential delay between attempts, default is `Exponential`. |\n| timeout | Timeout setting for the operation in seconds, default is `604800`s (7 days). |\n| connection_timeout | A single float in seconds for the connection timeout. Defaults to `300` seconds. |\n| read_timeout | A single float in seconds for the read timeout. Defaults to `300` seconds. |\n| connection_verify | SSL certificate verification. Enabled by default. Set to False to disable, alternatively can be set to the path to a CA_BUNDLE file or directory with certificates of trusted CAs. |\n| connection_cert | Client-side certificates. You can specify a local cert to use as client side certificate, as a single file (containing the private key and the certificate) or as a tuple of both files' paths. |\n| proxies | Dictionary mapping protocol or protocol and hostname to the URL of the proxy. |\n| cookies | Dict or CookieJar object to send with the `Request`. |\n| connection_data_block_size | The block size of data sent over the connection. Defaults to `4096` bytes. |\n\n### Async transport\n\nThe async transport is designed to be opt-in. [AioHttp](https://pypi.org/project/aiohttp/) is one of the supported implementations of async transport. It is not installed by default. You need to install it separately.\n\n### Shared modules\n\n#### MatchConditions\n\nMatchConditions is an enum to describe match conditions.\n\n```python\nclass MatchConditions(Enum):\n    Unconditionally = 1  # Matches any condition\n    IfNotModified = 2  # If the target object is not modified. Usually it maps to etag=<specific etag>\n    IfModified = 3  # Only if the target object is modified. Usually it maps to etag!=<specific etag>\n    IfPresent = 4   # If the target object exists. Usually it maps to etag='*'\n    IfMissing = 5   # If the target object does not exist. Usually it maps to etag!='*'\n```\n\n#### CaseInsensitiveEnumMeta\n\nA metaclass to support case-insensitive enums.\n\n```python\nfrom enum import Enum\n\nfrom azure.core import CaseInsensitiveEnumMeta\n\nclass MyCustomEnum(str, Enum, metaclass=CaseInsensitiveEnumMeta):\n    FOO = 'foo'\n    BAR = 'bar'\n```\n\n#### Null Sentinel Value\n\nA falsy sentinel object which is supposed to be used to specify attributes\nwith no data. This gets serialized to `null` on the wire.\n\n```python\nfrom azure.core.serialization import NULL\n\nassert bool(NULL) is False\n\nfoo = Foo(\n    attr=NULL\n)\n```\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require\nyou to agree to a Contributor License Agreement (CLA) declaring that you have\nthe right to, and actually do, grant us the rights to use your contribution.\nFor details, visit [https://cla.microsoft.com](https://cla.microsoft.com).\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether\nyou need to provide a CLA and decorate the PR appropriately (e.g., label,\ncomment). Simply follow the instructions provided by the bot. You will only\nneed to do this once across all repos using our CLA.\n\nThis project has adopted the\n[Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\nFor more information, see the\n[Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/)\nor contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any\nadditional questions or comments.\n\n<!-- LINKS -->\n[package]: https://pypi.org/project/azure-core/\n",
        "repo_name": "core/azure-core",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "\n# Azure Management Core Library\n\nAzure management core library defines extensions to Azure Core that are specific to ARM (Azure Resource Management) needed when you use client libraries.\n\nAs an end user, you don't need to manually install azure-mgmt-core because it will be installed automatically when you install other SDKs.\n\n[Source code](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-mgmt-core/) | [Package (Pypi)][package] | [API reference documentation](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-mgmt-core/)\n\n\n## Contributing\nThis project welcomes contributions and suggestions. Most contributions require\nyou to agree to a Contributor License Agreement (CLA) declaring that you have\nthe right to, and actually do, grant us the rights to use your contribution.\nFor details, visit [https://cla.microsoft.com](https://cla.microsoft.com).\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether\nyou need to provide a CLA and decorate the PR appropriately (e.g., label,\ncomment). Simply follow the instructions provided by the bot. You will only\nneed to do this once across all repos using our CLA.\n\nThis project has adopted the\n[Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\nFor more information, see the\n[Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/)\nor contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any\nadditional questions or comments.\n\n<!-- LINKS -->\n[package]: https://pypi.org/project/azure-mgmt-core/",
        "repo_name": "core/azure-mgmt-core",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-mgmt-core",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis package was the Microsoft Azure Resource Management bundle.\n\nStarting with v5.0.0, this package is deprecated. Please install the service specific packages prefixed by `azure-mgmt` needed for your application.\n\nThe complete list of available packages can be found at:\nhttps://aka.ms/azsdk/python/all\n\nHere's a non-exhaustive list of common packages:\n\n-  [azure-mgmt-compute](https://pypi.python.org/pypi/azure-mgmt-compute) : Management of Virtual Machines, etc.\n-  [azure-mgmt-network](https://pypi.python.org/pypi/azure-mgmt-network) : Management of Network interfaces, Public IP, etc.\n-  [azure-mgmt-storage](https://pypi.python.org/pypi/azure-mgmt-storage) : Management of storage accounts.\n-  [azure-mgmt-resource](https://pypi.python.org/pypi/azure-mgmt-resource) : Generic package about Azure Resource Management (ARM)\n\nA more comprehensive discussion of the rationale for this decision can be found in the following issue:\nhttps://github.com/Azure/azure-sdk-for-python/issues/10646\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt%2FREADME.png)\n",
        "repo_name": "core/azure-mgmt",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-mgmt",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Service Management Legacy Client Library.\n\nAll packages in this bundle have been tested with Python 2.7, 3.3, 3.4 and 3.5.\n\nFor the newer Azure Resource Management (ARM) libraries, see [azure-mgmt](https://pypi.python.org/pypi/azure-mgmt).\n\nFor a more complete set of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n\n# Compatibility\n\n**IMPORTANT**: If you have an earlier version of the azure package\n(version < 1.0), you should uninstall it before installing this package.\n\nYou can check the version using pip:\n\n```shell\npip freeze\n```\n\nIf you see azure==0.11.0 (or any version below 1.0), uninstall it first:\n\n```shell\npip uninstall azure\n```\n\n# Features\n\n-  Cloud Service management (Virtual Machines, VM Images, OS Images)\n-  Storage accounts management\n-  Scheduler management\n-  Service Bus management\n-  Affinity Group management\n-  Management certificate management\n-  Web Apps (Website) management\n\n\n# Installation\n\n## Download Package\n\nTo install via the Python Package Index (PyPI), type:\n\n```shell\npip install azure-servicemanagement-legacy\n```\n\n\n## Download Source Code\n\nTo get the source code of the SDK via **git** type:\n\n```shell\ngit clone https://github.com/Azure/azure-sdk-for-python.git\ncd azure-sdk-for-python\ncd azure-servicemanagement-legacy\npython setup.py install\n```\n\n\n# Usage\n\n## Authentication\n\n### Set-up certificates\n\nYou will need two certificates, one for the server (a .cer file) and one for\nthe client (a .pem file).\n\n### Using the Azure .PublishSettings certificate\n\nYou can download your Azure publish settings file and use the certificate that\nis embedded in that file to create the client certificate. The server\ncertificate already exists, so you won't need to upload one.\n\nTo do this, download your [publish settings](https://go.microsoft.com/fwlink/?LinkID=301775)\nthen use this code to create the .pem file.\n\n```python\nfrom azure.servicemanagement import get_certificate_from_publish_settings\n\nsubscription_id = get_certificate_from_publish_settings(\n    publish_settings_path='MyAccount.PublishSettings',\n    path_to_write_certificate='mycert.pem',\n    subscription_id='00000000-0000-0000-0000-000000000000',\n)\n```\n\nThe subscription id parameter is optional. If there are more than one\nsubscription in the publish settings, the first one will be used.\n\n### Creating and uploading new certificate with OpenSSL\n\nTo create the .pem file using [OpenSSL](https://www.openssl.org), execute this:\n\n```shell\nopenssl req -x509 -nodes -days 365 -newkey rsa:1024 -keyout mycert.pem -out mycert.pem\n```\nTo create the .cer certificate, execute this:\n\n```shell\nopenssl x509 -inform pem -in mycert.pem -outform der -out mycert.cer\n```\n\nAfter you have created the certificate, you will need to upload the .cer\nfile to Microsoft Azure via the \"Upload\" action of the \"Settings\" tab of\nthe [management portal](https://portal.azure.com).\n\n\n## ServiceManagementService\n\n### Initialization\n\nTo initialize the management service, pass in your subscription id and\nthe path to the .pem file.\n\n```python\nfrom azure.servicemanagement import ServiceManagementService\nsubscription_id = '00000000-0000-0000-0000-000000000000'\ncert_file = 'mycert.pem'\nsms = ServiceManagementService(subscription_id, cert_file)\n```\n\n### List Available Locations\n\n```python\nlocations = sms.list_locations()\nfor location in locations:\n    print(location.name)\n```\n\n### Create a Storage Service\n\nTo create a storage service, you need a name for the service (between 3\nand 24 lowercase characters and unique within Microsoft Azure), a label\n(up to 100 characters, automatically encoded to base-64), and either a\nlocation or an affinity group.\n\n```python\nname = \"mystorageservice\"\ndesc = name\nlabel = name\nlocation = 'West US'\n\nresult = sms.create_storage_account(name, desc, label, location=location)\nsms.wait_for_operation_status(result.request_id, timeout=30)\n```\n\n### Create a Cloud Service\n\nA cloud service is also known as a hosted service (from earlier versions\nof Microsoft Azure). The **create\\_hosted\\_service** method allows you\nto create a new hosted service by providing a hosted service name (which\nmust be unique in Microsoft Azure), a label (automatically encoded to\nbase-64), and the location *or* the affinity group for your service.\n\n```python\nname = \"myhostedservice\"\ndesc = name\nlabel = name\nlocation = 'West US'\n\nresult = sms.create_hosted_service(name, label, desc, location=location)\nsms.wait_for_operation_status(result.request_id, timeout=30)\n```\n\n### Create a Virtual Machine\n\nTo create a virtual machine, you first need to create a cloud service.\nThen create the virtual machine deployment using the\ncreate_virtual_machine_deployment method.\n\n```python\nfrom azure.servicemanagement import LinuxConfigurationSet, OSVirtualHardDisk\n\nname = \"myhostedservice\"\n\n# Name of an os image as returned by list_os_images\nimage_name = 'OpenLogic__OpenLogic-CentOS-62-20120531-en-us-30GB.vhd'\n\n# Destination storage account container/blob where the VM disk\n# will be created\nmedia_link = 'url_to_target_storage_blob_for_vm_hd'\n\n# Linux VM configuration, you can use WindowsConfigurationSet\n# for a Windows VM instead\nlinux_config = LinuxConfigurationSet(\n    'myhostname',\n    'myuser',\n    'mypassword',\n    disable_ssh_password_authentication=True,\n)\n\nos_hd = OSVirtualHardDisk(image_name, media_link)\n\nresult = sms.create_virtual_machine_deployment(\n    service_name=name,\n    deployment_name=name,\n    deployment_slot='production',\n    label=name,\n    role_name=name,\n    system_config=linux_config,\n    os_virtual_hard_disk=os_hd,\n    role_size='Small',\n)\nsms.wait_for_operation_status(result.request_id, timeout=600)\n```\n\n\n# Need Help?\n\nBe sure to check out the Microsoft Azure [Developer Forums on Stack\nOverflow](https://go.microsoft.com/fwlink/?LinkId=234489) if you have\ntrouble with the provided code.\n\n\n# Contribute Code or Provide Feedback\n\nIf you would like to become an active contributor to this project please\nfollow the instructions provided in [Microsoft Azure Projects\nContribution\nGuidelines](https://azure.github.io/guidelines.html).\n\nIf you encounter any bugs with the library please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project.\n\n\n# Learn More\n\n[Microsoft Azure Python Developer\nCenter](https://azure.microsoft.com/develop/python/)\n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-servicemanagement-legacy%2FREADME.png)\n",
        "repo_name": "core/azure-servicemanagement-legacy",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-servicemanagement-legacy",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis package was the Microsoft Azure bundle.\n\nStarting with v5.0.0, this package is deprecated. Please install the service specific packages prefixed by `azure` needed for your application.\n\nThe complete list of available packages can be found at:\nhttps://aka.ms/azsdk/python/all\n\nHere's a non-exhaustive list of common packages:\n\n-  [azure-mgmt-compute](https://pypi.python.org/pypi/azure-mgmt-compute) : Management of Virtual Machines, etc.\n-  [azure-mgmt-storage](https://pypi.python.org/pypi/azure-mgmt-storage) : Management of storage accounts.\n-  [azure-mgmt-resource](https://pypi.python.org/pypi/azure-mgmt-resource) : Generic package about Azure Resource Management (ARM)\n-  [azure-keyvault-secrets](https://pypi.python.org/pypi/azure-keyvault-secrets) : Access to secrets in Key Vault\n-  [azure-storage-blob](https://pypi.python.org/pypi/azure-storage-blob) : Access to blobs in storage accounts\n\nA more comprehensive discussion of the rationale for this decision can be found in the following issue:\nhttps://github.com/Azure/azure-sdk-for-python/issues/10646\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure%2FREADME.png)\n",
        "repo_name": "core/azure",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "## _Disclaimer_\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Azure Cosmos DB SQL API client library for Python\n\nAzure Cosmos DB is a globally distributed, multi-model database service that supports document, key-value, wide-column, and graph databases.\n\nUse the Azure Cosmos DB SQL API SDK for Python to manage databases and the JSON documents they contain in this NoSQL database service. High level capabilities are:\n\n* Create Cosmos DB **databases** and modify their settings\n* Create and modify **containers** to store collections of JSON documents\n* Create, read, update, and delete the **items** (JSON documents) in your containers\n* Query the documents in your database using **SQL-like syntax**\n\n[SDK source code][source_code]\n| [Package (PyPI)][cosmos_pypi]\n| [Package (Conda)](https://anaconda.org/microsoft/azure-cosmos/)\n| [API reference documentation][ref_cosmos_sdk]\n| [Product documentation][cosmos_docs]\n| [Samples][cosmos_samples]\n\n> This SDK is used for the [SQL API](https://docs.microsoft.com/azure/cosmos-db/sql-query-getting-started). For all other APIs, please check the [Azure Cosmos DB documentation](https://docs.microsoft.com/azure/cosmos-db/introduction) to evaluate the best SDK for your project.\n\n## Getting started\n\n### Important update on Python 2.x Support\n\nNew releases of this SDK won't support Python 2.x starting January 1st, 2022. Please check the [CHANGELOG](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/cosmos/azure-cosmos/CHANGELOG.md) for more information.\n\n### Prerequisites\n\n* Azure subscription - [Create a free account][azure_sub]\n* Azure [Cosmos DB account][cosmos_account] - SQL API\n* [Python 3.6+][python]\n\nIf you need a Cosmos DB SQL API account, you can create one with this [Azure CLI][azure_cli] command:\n\n```Bash\naz cosmosdb create --resource-group <resource-group-name> --name <cosmos-account-name>\n```\n\n### Install the package\n\n```bash\npip install azure-cosmos\n```\n\n#### Configure a virtual environment (optional)\n\nAlthough not required, you can keep your base system and Azure SDK environments isolated from one another if you use a virtual environment. Execute the following commands to configure and then enter a virtual environment with [venv][venv]:\n\n```Bash\npython3 -m venv azure-cosmosdb-sdk-environment\nsource azure-cosmosdb-sdk-environment/bin/activate\n```\n\n### Authenticate the client\n\nInteraction with Cosmos DB starts with an instance of the [CosmosClient][ref_cosmosclient] class. You need an **account**, its **URI**, and one of its **account keys** to instantiate the client object.\n\nUse the Azure CLI snippet below to populate two environment variables with the database account URI and its primary master key (you can also find these values in the Azure portal). The snippet is formatted for the Bash shell.\n\n```Bash\nRES_GROUP=<resource-group-name>\nACCT_NAME=<cosmos-db-account-name>\n\nexport ACCOUNT_URI=$(az cosmosdb show --resource-group $RES_GROUP --name $ACCT_NAME --query documentEndpoint --output tsv)\nexport ACCOUNT_KEY=$(az cosmosdb list-keys --resource-group $RES_GROUP --name $ACCT_NAME --query primaryMasterKey --output tsv)\n```\n\n### Create the client\n\nOnce you've populated the `ACCOUNT_URI` and `ACCOUNT_KEY` environment variables, you can create the [CosmosClient][ref_cosmosclient].\n\n```python\nfrom azure.cosmos import CosmosClient\n\nimport os\nURL = os.environ['ACCOUNT_URI']\nKEY = os.environ['ACCOUNT_KEY']\nclient = CosmosClient(URL, credential=KEY)\n```\n\n### AAD Authentication\n\nYou can also authenticate a client utilizing your service principal's AAD credentials and the azure identity package. \nYou can directly pass in the credentials information to ClientSecretCredential, or use the DefaultAzureCredential:\n```python\nfrom azure.cosmos import CosmosClient\nfrom azure.identity import ClientSecretCredential, DefaultAzureCredential\n\nimport os\nurl = os.environ['ACCOUNT_URI']\ntenant_id = os.environ['TENANT_ID']\nclient_id = os.environ['CLIENT_ID']\nclient_secret = os.environ['CLIENT_SECRET']\n\n# Using ClientSecretCredential\naad_credentials = ClientSecretCredential(\n    tenant_id=tenant_id,\n    client_id=client_id,\n    client_secret=client_secret)\n\n# Using DefaultAzureCredential (recommended)\naad_credentials = DefaultAzureCredential()\n\nclient = CosmosClient(url, aad_credentials)\n```\nAlways ensure that the managed identity you use for AAD authentication has `readMetadata` permissions. <br>\nMore information on how to set up AAD authentication: [Set up RBAC for AAD authentication](https://docs.microsoft.com/azure/cosmos-db/how-to-setup-rbac) <br>\nMore information on allowed operations for AAD authenticated clients: [RBAC Permission Model](https://aka.ms/cosmos-native-rbac)\n\n## Key concepts\n\nOnce you've initialized a [CosmosClient][ref_cosmosclient], you can interact with the primary resource types in Cosmos DB:\n\n* [Database][ref_database]: A Cosmos DB account can contain multiple databases. When you create a database, you specify the API you'd like to use when interacting with its documents: SQL, MongoDB, Gremlin, Cassandra, or Azure Table. Use the [DatabaseProxy][ref_database] object to manage its containers.\n\n* [Container][ref_container]: A container is a collection of JSON documents. You create (insert), read, update, and delete items in a container by using methods on the [ContainerProxy][ref_container] object.\n\n* Item: An Item is the dictionary-like representation of a JSON document stored in a container. Each Item you add to a container must include an `id` key with a value that uniquely identifies the item within the container.\n\nFor more information about these resources, see [Working with Azure Cosmos databases, containers and items][cosmos_resources].\n\n\n## How to use `enable_cross_partition_query`\n\nThe keyword-argument `enable_cross_partition_query` accepts 2 options: `None` (default) or `True`.\n\n## Note on using queries by id\n\nWhen using queries that try to find items based on an **id** value, always make sure you are passing in a string type variable. Azure Cosmos DB only allows string id values and if you use any other datatype, this SDK will return no results and no error messages.\n\n## Note on client consistency levels\n\nAs of release version 4.3.0b3, if a user does not pass in an explicit consistency level to their client initialization,\ntheir client will use their database account's default level. Previously, the default was being set to `Session` consistency.\nIf for some reason you'd like to keep doing this, you can change your client initialization to include the explicit parameter for this like shown:\n```python\nfrom azure.cosmos import CosmosClient\n\nimport os\nURL = os.environ['ACCOUNT_URI']\nKEY = os.environ['ACCOUNT_KEY']\nclient = CosmosClient(URL, credential=KEY, consistency_level='Session')\n```\n\n## Limitations\n\nCurrently the features below are **not supported**. For alternatives options, check the **Workarounds** section below.\n\n### Data Plane Limitations:\n\n* Group By queries\n* Queries with COUNT from a DISTINCT subquery: SELECT COUNT (1) FROM (SELECT DISTINCT C.ID FROM C)\n* Bulk/Transactional batch processing\n* Direct TCP Mode access\n* Continuation token for cross partitions queries\n* Change Feed: Processor\n* Change Feed: Read multiple partitions key values\n* Change Feed: Read specific time\n* Change Feed: Read from the beginning\n* Change Feed: Pull model\n* Cross-partition ORDER BY for mixed types\n* Enabling diagnostics for async query-type methods\n\n### Control Plane Limitations:\n\n* Get CollectionSizeUsage, DatabaseUsage, and DocumentUsage metrics\n* Create Geospatial Index\n* Get the connection string\n* Get the minimum RU/s of a container\n\n## Workarounds\n\n### Bulk processing Limitation Workaround\n\nIf you want to use Python SDK to perform bulk inserts to Cosmos DB, the best alternative is to use [stored procedures](https://docs.microsoft.com/azure/cosmos-db/how-to-write-stored-procedures-triggers-udfs) to write multiple items with the same partition key.\n\n### Control Plane Limitations Workaround\n\nTypically, you can use [Azure Portal](https://portal.azure.com/), [Azure Cosmos DB Resource Provider REST API](https://docs.microsoft.com/rest/api/cosmos-db-resource-provider), [Azure CLI](https://docs.microsoft.com/cli/azure/azure-cli-reference-for-cosmos-db) or [PowerShell](https://docs.microsoft.com/azure/cosmos-db/manage-with-powershell) for the control plane unsupported limitations.\n\n## Boolean Data Type\n\nWhile the Python language [uses](https://docs.python.org/3/library/stdtypes.html?highlight=boolean#truth-value-testing) \"True\" and \"False\" for boolean types, Cosmos DB [accepts](https://docs.microsoft.com/azure/cosmos-db/sql-query-is-bool) \"true\" and \"false\" only. In other words, the Python language uses Boolean values with the first uppercase letter and all other lowercase letters, while Cosmos DB and its SQL language use only lowercase letters for those same Boolean values. How to deal with this challenge?\n\n* Your JSON documents created with Python must use \"True\" and \"False\", to pass the language validation. The SDK will convert it to \"true\" and \"false\" for you. Meaning that \"true\" and \"false\" is what will be stored in Cosmos DB.\n* If you retrieve those documents with the Cosmos DB Portal's Data Explorer, you will see \"true\" and \"false\".\n* If you retrieve those documents with this Python SDK, \"true\" and \"false\" values will be automatically converted to \"True\" and \"False\".\n\n## SQL Queries x FROM Clause Subitems\n\nThis SDK uses the [query_items](https://docs.microsoft.com/python/api/azure-cosmos/azure.cosmos.containerproxy?preserve-view=true&view=azure-python#query-items-query--parameters-none--partition-key-none--enable-cross-partition-query-none--max-item-count-none--enable-scan-in-query-none--populate-query-metrics-none----kwargs-) method to submit SQL queries to Azure Cosmos DB.\n\nCosmos DB SQL language allows you to [get subitems by using the FROM clause](https://docs.microsoft.com/azure/cosmos-db/sql-query-from#get-subitems-by-using-the-from-clause), to reduce the source to a smaller subset. As an example, you can use `select * from Families.children` instead of `select * from Families`. But please note that:\n\n* For SQL queries using the `query_items` method, this SDK demands that you specify the `partition_key` or use the `enable_cross_partition_query` flag.\n* If you are getting subitems and specifying the `partition_key`, please make sure that your partition key is included in the subitems, which is not true for most of the cases.\n\n## Max Item Count\n\nThis is a parameter of the query_items method, an integer indicating the maximum number of items to be returned per page. The `None` value can be specified to let the service determine the optimal item count. This is the recommended configuration value, and the default behavior of this SDK when it is not set.\n\n## Examples\n\nThe following sections provide several code snippets covering some of the most common Cosmos DB tasks, including:\n\n* [Create a database](#create-a-database \"Create a database\")\n* [Create a container](#create-a-container \"Create a container\")\n* [Create an analytical store enabled container](#create-an-analytical-store-enabled-container \"Create a container\")\n* [Get an existing container](#get-an-existing-container \"Get an existing container\")\n* [Insert data](#insert-data \"Insert data\")\n* [Delete data](#delete-data \"Delete data\")\n* [Query the database](#query-the-database \"Query the database\")\n* [Get database properties](#get-database-properties \"Get database properties\")\n* [Get database and container throughputs](#get-database-and-container-throughputs \"Get database and container throughputs\")\n* [Modify container properties](#modify-container-properties \"Modify container properties\")\n* [Using the asynchronous client](#using-the-asynchronous-client \"Using the asynchronous client\")\n\n### Create a database\n\nAfter authenticating your [CosmosClient][ref_cosmosclient], you can work with any resource in the account. The code snippet below creates a SQL API database, which is the default when no API is specified when [create_database][ref_cosmosclient_create_database] is invoked.\n\n```python\nfrom azure.cosmos import CosmosClient, exceptions\nimport os\n\nURL = os.environ['ACCOUNT_URI']\nKEY = os.environ['ACCOUNT_KEY']\nclient = CosmosClient(URL, credential=KEY)\nDATABASE_NAME = 'testDatabase'\ntry:\n    database = client.create_database(DATABASE_NAME)\nexcept exceptions.CosmosResourceExistsError:\n    database = client.get_database_client(DATABASE_NAME)\n```\n\n### Create a container\n\nThis example creates a container with default settings. If a container with the same name already exists in the database (generating a `409 Conflict` error), the existing container is obtained instead.\n\n```python\nfrom azure.cosmos import CosmosClient, PartitionKey, exceptions\nimport os\n\nURL = os.environ['ACCOUNT_URI']\nKEY = os.environ['ACCOUNT_KEY']\nclient = CosmosClient(URL, credential=KEY)\nDATABASE_NAME = 'testDatabase'\ndatabase = client.get_database_client(DATABASE_NAME)\nCONTAINER_NAME = 'products'\n\ntry:\n    container = database.create_container(id=CONTAINER_NAME, partition_key=PartitionKey(path=\"/productName\"))\nexcept exceptions.CosmosResourceExistsError:\n    container = database.get_container_client(CONTAINER_NAME)\nexcept exceptions.CosmosHttpResponseError:\n    raise\n```\n\n### Create an analytical store enabled container\n\nThis example creates a container with [Analytical Store](https://docs.microsoft.com/azure/cosmos-db/analytical-store-introduction) enabled, for reporting, BI, AI, and Advanced Analytics with [Azure Synapse Link](https://docs.microsoft.com/azure/cosmos-db/synapse-link).\n\nThe options for analytical_storage_ttl are:\n\n+ 0 or Null or not informed: Not enabled.\n+ -1: The data will be stored infinitely.\n+ Any other number: the actual ttl, in seconds.\n\n\n```python\nCONTAINER_NAME = 'products'\ntry:\n    container = database.create_container(id=CONTAINER_NAME, partition_key=PartitionKey(path=\"/productName\"),analytical_storage_ttl=-1)\nexcept exceptions.CosmosResourceExistsError:\n    container = database.get_container_client(CONTAINER_NAME)\nexcept exceptions.CosmosHttpResponseError:\n    raise\n```\n\nThe preceding snippets also handle the [CosmosHttpResponseError][ref_httpfailure] exception if the container creation failed. For more information on error handling and troubleshooting, see the [Troubleshooting](#troubleshooting \"Troubleshooting\") section.\n\n### Get an existing container\n\nRetrieve an existing container from the database:\n\n```python\nfrom azure.cosmos import CosmosClient\nimport os\n\nURL = os.environ['ACCOUNT_URI']\nKEY = os.environ['ACCOUNT_KEY']\nclient = CosmosClient(URL, credential=KEY)\nDATABASE_NAME = 'testDatabase'\ndatabase = client.get_database_client(DATABASE_NAME)\nCONTAINER_NAME = 'products'\ncontainer = database.get_container_client(CONTAINER_NAME)\n```\n\n### Insert data\n\nTo insert items into a container, pass a dictionary containing your data to [ContainerProxy.upsert_item][ref_container_upsert_item]. Each item you add to a container must include an `id` key with a value that uniquely identifies the item within the container.\n\nThis example inserts several items into the container, each with a unique `id`:\n\n```python\nfrom azure.cosmos import CosmosClient\nimport os\n\nURL = os.environ['ACCOUNT_URI']\nKEY = os.environ['ACCOUNT_KEY']\nclient = CosmosClient(URL, credential=KEY)\nDATABASE_NAME = 'testDatabase'\ndatabase = client.get_database_client(DATABASE_NAME)\nCONTAINER_NAME = 'products'\ncontainer = database.get_container_client(CONTAINER_NAME)\n\nfor i in range(1, 10):\n    container.upsert_item({\n            'id': 'item{0}'.format(i),\n            'productName': 'Widget',\n            'productModel': 'Model {0}'.format(i)\n        }\n    )\n```\n\n### Delete data\n\nTo delete items from a container, use [ContainerProxy.delete_item][ref_container_delete_item]. The SQL API in Cosmos DB does not support the SQL `DELETE` statement.\n\n```python\nfrom azure.cosmos import CosmosClient\nimport os\n\nURL = os.environ['ACCOUNT_URI']\nKEY = os.environ['ACCOUNT_KEY']\nclient = CosmosClient(URL, credential=KEY)\nDATABASE_NAME = 'testDatabase'\ndatabase = client.get_database_client(DATABASE_NAME)\nCONTAINER_NAME = 'products'\ncontainer = database.get_container_client(CONTAINER_NAME)\n\nfor item in container.query_items(\n        query='SELECT * FROM products p WHERE p.productModel = \"Model 2\"',\n        enable_cross_partition_query=True):\n    container.delete_item(item, partition_key='Widget')\n```\n\n> NOTE: If you are using partitioned collection, the value of the `partitionKey` in the example code above, should be set to the value of the partition key for this particular item, not the name of the partition key column in your collection. This holds true for both point reads and deletes.\n\n### Query the database\n\nA Cosmos DB SQL API database supports querying the items in a container with [ContainerProxy.query_items][ref_container_query_items] using SQL-like syntax.\n\nThis example queries a container for items with a specific `id`:\n\n```python\nfrom azure.cosmos import CosmosClient\nimport os\n\nURL = os.environ['ACCOUNT_URI']\nKEY = os.environ['ACCOUNT_KEY']\nclient = CosmosClient(URL, credential=KEY)\nDATABASE_NAME = 'testDatabase'\ndatabase = client.get_database_client(DATABASE_NAME)\nCONTAINER_NAME = 'products'\ncontainer = database.get_container_client(CONTAINER_NAME)\n\n# Enumerate the returned items\nimport json\nfor item in container.query_items(\n        query='SELECT * FROM mycontainer r WHERE r.id=\"item3\"',\n        enable_cross_partition_query=True):\n    print(json.dumps(item, indent=True))\n```\n\n> NOTE: Although you can specify any value for the container name in the `FROM` clause, we recommend you use the container name for consistency.\n\nPerform parameterized queries by passing a dictionary containing the parameters and their values to [ContainerProxy.query_items][ref_container_query_items]:\n\n```python\ndiscontinued_items = container.query_items(\n    query='SELECT * FROM products p WHERE p.productModel = @model',\n    parameters=[\n        dict(name='@model', value='Model 7')\n    ],\n    enable_cross_partition_query=True\n)\nfor item in discontinued_items:\n    print(json.dumps(item, indent=True))\n```\n\nFor more information on querying Cosmos DB databases using the SQL API, see [Query Azure Cosmos DB data with SQL queries][cosmos_sql_queries].\n\n### Get database properties\n\nGet and display the properties of a database:\n\n```python\nfrom azure.cosmos import CosmosClient\nimport os\nimport json\n\nURL = os.environ['ACCOUNT_URI']\nKEY = os.environ['ACCOUNT_KEY']\nclient = CosmosClient(URL, credential=KEY)\nDATABASE_NAME = 'testDatabase'\ndatabase = client.get_database_client(DATABASE_NAME)\nproperties = database.read()\nprint(json.dumps(properties))\n```\n\n### Get database and container throughputs\n\nGet and display the throughput values of a database and of a container with dedicated throughput:\n\n```python\nfrom azure.cosmos import CosmosClient\nimport os\nimport json\n\nURL = os.environ['ACCOUNT_URI']\nKEY = os.environ['ACCOUNT_KEY']\nclient = CosmosClient(URL, credential=KEY)\n\n# Database\nDATABASE_NAME = 'testDatabase'\ndatabase = client.get_database_client(DATABASE_NAME)\ndb_offer = database.read_offer()\nprint('Found Offer \\'{0}\\' for Database \\'{1}\\' and its throughput is \\'{2}\\''.format(db_offer.properties['id'], database.id, db_offer.properties['content']['offerThroughput']))\n\n# Container with dedicated throughput only. Will return error \"offer not found\" for containers without dedicated throughput\nCONTAINER_NAME = 'testContainer'\ncontainer = database.get_container_client(CONTAINER_NAME)\ncontainer_offer = container.read_offer()\nprint('Found Offer \\'{0}\\' for Container \\'{1}\\' and its throughput is \\'{2}\\''.format(container_offer.properties['id'], container.id, container_offer.properties['content']['offerThroughput']))\n```\n\n\n### Modify container properties\n\nCertain properties of an existing container can be modified. This example sets the default time to live (TTL) for items in the container to 10 seconds:\n\n```python\nfrom azure.cosmos import CosmosClient, PartitionKey\nimport os\nimport json\n\nURL = os.environ['ACCOUNT_URI']\nKEY = os.environ['ACCOUNT_KEY']\nclient = CosmosClient(URL, credential=KEY)\nDATABASE_NAME = 'testDatabase'\ndatabase = client.get_database_client(DATABASE_NAME)\nCONTAINER_NAME = 'products'\ncontainer = database.get_container_client(CONTAINER_NAME)\n\ndatabase.replace_container(\n    container,\n    partition_key=PartitionKey(path=\"/productName\"),\n    default_ttl=10,\n)\n# Display the new TTL setting for the container\ncontainer_props = container.read()\nprint(json.dumps(container_props['defaultTtl']))\n```\n\nFor more information on TTL, see [Time to Live for Azure Cosmos DB data][cosmos_ttl].\n\n### Using the asynchronous client\n\nThe asynchronous cosmos client is a separate client that looks and works in a similar fashion to the existing synchronous client. However, the async client needs to be imported separately and its methods need to be used with the async/await keywords.\nThe Async client needs to be initialized and closed after usage, which can be done manually or with the use of a context manager. The example below shows how to do so manually.\n\n```python\nfrom azure.cosmos.aio import CosmosClient\nimport os\n\nURL = os.environ['ACCOUNT_URI']\nKEY = os.environ['ACCOUNT_KEY']\nDATABASE_NAME = 'testDatabase'\nCONTAINER_NAME = 'products'    \n\nasync def create_products():\n    client = CosmosClient(URL, credential=KEY)\n    database = client.get_database_client(DATABASE_NAME)\n    container = database.get_container_client(CONTAINER_NAME)\n    for i in range(10):\n        await container.upsert_item({\n                'id': 'item{0}'.format(i),\n                'productName': 'Widget',\n                'productModel': 'Model {0}'.format(i)\n            }\n        )\n    await client.close() # the async client must be closed manually if it's not initialized in a with statement\n```\n\nInstead of manually opening and closing the client, it is highly recommended to use the `async with` keywords. This creates a context manager that will initialize and later close the client once you're out of the statement. The example below shows how to do so.\n\n```python\nfrom azure.cosmos.aio import CosmosClient\nimport os\n\nURL = os.environ['ACCOUNT_URI']\nKEY = os.environ['ACCOUNT_KEY']\nDATABASE_NAME = 'testDatabase'\nCONTAINER_NAME = 'products'\n\nasync def create_products():\n    async with CosmosClient(URL, credential=KEY) as client: # the with statement will automatically initialize and close the async client\n        database = client.get_database_client(DATABASE_NAME)\n        container = database.get_container_client(CONTAINER_NAME)\n        for i in range(10):\n            await container.upsert_item({\n                    'id': 'item{0}'.format(i),\n                    'productName': 'Widget',\n                    'productModel': 'Model {0}'.format(i)\n                }\n            )\n```\n\n### Queries with the asynchronous client\n\nUnlike the synchronous client, the async client does not have an `enable_cross_partition` flag in the request. Queries without a specified partition key value will attempt to do a cross partition query by default. \n\nQuery results can be iterated, but the query's raw output returns an asynchronous iterator. This means that each object from the iterator is an awaitable object, and does not yet contain the true query result. In order to obtain the query results you can use an async for loop, which awaits each result as you iterate on the object, or manually await each query result as you iterate over the asynchronous iterator.\n\nSince the query results are an asynchronous iterator, they can't be cast into lists directly; instead, if you need to create lists from your results, use an async for loop or Python's list comprehension to populate a list:\n\n```python\nfrom azure.cosmos.aio import CosmosClient\nimport os\n\nURL = os.environ['ACCOUNT_URI']\nKEY = os.environ['ACCOUNT_KEY']\nclient = CosmosClient(URL, credential=KEY)\nDATABASE_NAME = 'testDatabase'\ndatabase = client.get_database_client(DATABASE_NAME)\nCONTAINER_NAME = 'products'\ncontainer = database.get_container_client(CONTAINER_NAME)\n\nasync def create_lists():\n    results = container.query_items(\n            query='SELECT * FROM products p WHERE p.productModel = \"Model 2\"')\n\n    # iterates on \"results\" iterator to asynchronously create a complete list of the actual query results\n\n    item_list = []\n    async for item in results:\n        item_list.append(item)\n\n    # Asynchronously creates a complete list of the actual query results. This code performs the same action as the for-loop example above.\n    item_list = [item async for item in results]\n    await client.close()\n```\n\n### Using Integrated Cache\nAn integrated cache is an in-memory cache that helps you ensure manageable costs and low latency as your request volume grows. The integrated cache has two parts: an item cache for point reads and a query cache for queries. The code snippet below shows you how to use this feature with the point read and query cache methods.\n\nThe benefit of using this is that the point reads and queries that hit the integrated cache won't use any RUs. This means you will have a much lower per-operation cost than reads from the backend.\n\n[How to configure the Azure Cosmos DB integrated cache (Preview)][cosmos_configure_integrated_cache]\n\n```python\nimport azure.cosmos.cosmos_client as cosmos_client\nimport os\n\nURL = os.environ['ACCOUNT_URI']\nKEY = os.environ['ACCOUNT_KEY']\nclient = cosmos_client.CosmosClient(URL, credential=KEY)\nDATABASE_NAME = 'testDatabase'\ndatabase = client.get_database_client(DATABASE_NAME)\nCONTAINER_NAME = 'testContainer'\ncontainer = database.get_container_client(CONTAINER_NAME)\n\ndef integrated_cache_snippet():\n    item_id = body['id'] \n    query = 'SELECT * FROM c'\n\n    #item cache\n    container.read_item(item=item_id, partition_key=item_id, max_integrated_cache_staleness_in_ms=30000)\n\n    #query cache   \n    container.query_items(query=query,\n         partition_key=item_id, max_integrated_cache_staleness_in_ms=30000)\n```\nFor more information on Integrated Cache, see [Azure Cosmos DB integrated cache - Overview][cosmos_integrated_cache].\n\n## Troubleshooting\n\n### General\n\nWhen you interact with Cosmos DB using the Python SDK, exceptions returned by the service correspond to the same HTTP status codes returned for REST API requests:\n\n[HTTP Status Codes for Azure Cosmos DB][cosmos_http_status_codes]\n\nFor example, if you try to create a container using an ID (name) that's already in use in your Cosmos DB database, a `409` error is returned, indicating the conflict. In the following snippet, the error is handled gracefully by catching the exception and displaying additional information about the error.\n\n```python\ntry:\n    database.create_container(id=CONTAINER_NAME, partition_key=PartitionKey(path=\"/productName\"))\nexcept exceptions.CosmosResourceExistsError:\n    print(\"\"\"Error creating container\nHTTP status code 409: The ID (name) provided for the container is already in use.\nThe container name must be unique within the database.\"\"\")\n\n```\n### Logging\n\nThis library uses the standard\n[logging](https://docs.python.org/3.5/library/logging.html) library for logging.\nBasic information about HTTP sessions (URLs, headers, etc.) is logged at INFO\nlevel.\n\nDetailed DEBUG level logging, including request/response bodies and unredacted\nheaders, can be enabled on a client with the `logging_enable` argument:\n```python\nimport sys\nimport logging\nfrom azure.cosmos import CosmosClient\n\n# Create a logger for the 'azure' SDK\nlogger = logging.getLogger('azure')\nlogger.setLevel(logging.DEBUG)\n\n# Configure a console output\nhandler = logging.StreamHandler(stream=sys.stdout)\nlogger.addHandler(handler)\n\n# This client will log detailed information about its HTTP sessions, at DEBUG level\nclient = CosmosClient(URL, credential=KEY, logging_enable=True)\n```\n\nSimilarly, `logging_enable` can enable detailed logging for a single operation,\neven when it isn't enabled for the client:\n```python\ndatabase = client.create_database(DATABASE_NAME, logging_enable=True)\n```\nAlternatively, you can log using the CosmosHttpLoggingPolicy, which extends from the azure core HttpLoggingPolicy, by passing in your logger to the `logger` argument.\nBy default, it will use the behaviour from HttpLoggingPolicy. Passing in the `enable_diagnostics_logging` argument will enable the\nCosmosHttpLoggingPolicy, and will have additional information in the response relevant to debugging Cosmos issues.\n```python\nimport logging\nfrom azure.cosmos import CosmosClient\n\n#Create a logger for the 'azure' SDK\nlogger = logging.getLogger('azure')\nlogger.setLevel(logging.DEBUG)\n\n# Configure a file output\nhandler = logging.FileHandler(filename=\"azure\")\nlogger.addHandler(handler)\n\n# This client will log diagnostic information from the HTTP session by using the CosmosHttpLoggingPolicy.\n# Since we passed in the logger to the client, it will log information on every request.\nclient = CosmosClient(URL, credential=KEY, logger=logger, enable_diagnostics_logging=True)\n```\nSimilarly, logging can be enabled for a single operation by passing in a logger to the singular request.\nHowever, if you desire to use the CosmosHttpLoggingPolicy to obtain additional information, the `enable_diagnostics_logging` argument needs to be passed in at the client constructor.\n```python\n# This example enables the CosmosHttpLoggingPolicy and uses it with the `logger` passed in to the `create_database` request.\nclient = CosmosClient(URL, credential=KEY, enable_diagnostics_logging=True)\ndatabase = client.create_database(DATABASE_NAME, logger=logger)\n```\n\n### Telemetry\nAzure Core provides the ability for our Python SDKs to use OpenTelemetry with them. The only packages that need to be installed\nto use this functionality are the following:\n```bash\npip install azure-core-tracing-opentelemetry\npip install opentelemetry-sdk\n```\nFor more information on this, we recommend taking a look at this [document](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core-tracing-opentelemetry/README.md) \nfrom Azure Core describing how to set it up. We have also added a [sample file][telemetry_sample] to show how it can\nbe used with our SDK. This works the same way regardless of the Cosmos client you are using.\n\n## Next steps\n\nFor more extensive documentation on the Cosmos DB service, see the [Azure Cosmos DB documentation][cosmos_docs] on docs.microsoft.com.\n\n<!-- LINKS -->\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_portal]: https://portal.azure.com\n[azure_sub]: https://azure.microsoft.com/free/\n[cloud_shell]: https://docs.microsoft.com/azure/cloud-shell/overview\n[cosmos_account_create]: https://docs.microsoft.com/azure/cosmos-db/how-to-manage-database-account\n[cosmos_account]: https://docs.microsoft.com/azure/cosmos-db/account-overview\n[cosmos_container]: https://docs.microsoft.com/azure/cosmos-db/databases-containers-items#azure-cosmos-containers\n[cosmos_database]: https://docs.microsoft.com/azure/cosmos-db/databases-containers-items#azure-cosmos-databases\n[cosmos_docs]: https://docs.microsoft.com/azure/cosmos-db/\n[cosmos_samples]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/cosmos/azure-cosmos/samples\n[cosmos_pypi]: https://pypi.org/project/azure-cosmos/\n[cosmos_http_status_codes]: https://docs.microsoft.com/rest/api/cosmos-db/http-status-codes-for-cosmosdb\n[cosmos_item]: https://docs.microsoft.com/azure/cosmos-db/databases-containers-items#azure-cosmos-items\n[cosmos_request_units]: https://docs.microsoft.com/azure/cosmos-db/request-units\n[cosmos_resources]: https://docs.microsoft.com/azure/cosmos-db/databases-containers-items\n[cosmos_sql_queries]: https://docs.microsoft.com/azure/cosmos-db/how-to-sql-query\n[cosmos_ttl]: https://docs.microsoft.com/azure/cosmos-db/time-to-live\n[cosmos_integrated_cache]: https://docs.microsoft.com/azure/cosmos-db/integrated-cache\n[cosmos_configure_integrated_cache]: https://docs.microsoft.com/azure/cosmos-db/how-to-configure-integrated-cache\n[python]: https://www.python.org/downloads/\n[ref_container_delete_item]: https://aka.ms/azsdk-python-cosmos-ref-delete-item\n[ref_container_query_items]: https://aka.ms/azsdk-python-cosmos-ref-query-items\n[ref_container_upsert_item]: https://aka.ms/azsdk-python-cosmos-ref-upsert-item\n[ref_container]: https://aka.ms/azsdk-python-cosmos-ref-container\n[ref_cosmos_sdk]: https://aka.ms/azsdk-python-cosmos-ref\n[ref_cosmosclient_create_database]: https://aka.ms/azsdk-python-cosmos-ref-create-database\n[ref_cosmosclient]: https://aka.ms/azsdk-python-cosmos-ref-cosmos-client\n[ref_database]: https://aka.ms/azsdk-python-cosmos-ref-database\n[ref_httpfailure]: https://aka.ms/azsdk-python-cosmos-ref-http-failure\n[sample_database_mgmt]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/cosmos/azure-cosmos/samples/database_management.py\n[sample_document_mgmt]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/cosmos/azure-cosmos/samples/document_management.py\n[sample_examples_misc]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/cosmos/azure-cosmos/samples/examples.py\n[source_code]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/cosmos/azure-cosmos\n[venv]: https://docs.python.org/3/library/venv.html\n[virtualenv]: https://virtualenv.pypa.io\n[telemetry_sample]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/cosmos/azure-cosmos/samples/tracing_open_telemetry.py\n\n## Contributing\n\nThis project welcomes contributions and suggestions.  Most contributions require you to agree to a\nContributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us\nthe rights to use your contribution. For details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide\na CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions\nprovided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or\ncontact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n",
        "repo_name": "cosmos/azure-cosmos",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/cosmos/azure-cosmos",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Cosmos DB Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-cosmosdb\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.cosmosdb import CosmosDBManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = CosmosDBManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\nCode samples for this package can be found at:\n- [Search Cosmos DB Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com\n- [Azure Python Mgmt SDK Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-cosmosdb%2FREADME.png)\n",
        "repo_name": "cosmos/azure-mgmt-cosmosdb",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/cosmos/azure-mgmt-cosmosdb",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "## Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure DocumentDB Management Client Library.\n\nAzure Resource Manager (ARM) is the next generation of management APIs\nthat replace the old Azure Service Management (ASM).\n\nThis package has been tested with Python 3.6+.\n\nFor the older Azure Service Management (ASM) libraries, see\n[azure-servicemanagement-legacy](https://pypi.python.org/pypi/azure-servicemanagement-legacy)\nlibrary.\n\nFor a more complete set of Azure libraries, see the\n[azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## Compatibility\n\n**IMPORTANT**: If you have an earlier version of the azure package\n(version < 1.0), you should uninstall it before installing this\npackage.\n\nYou can check the version using pip:\n\n``` shell\npip freeze\n```\n\nIf you see azure==0.11.0 (or any version below 1.0), uninstall it first:\n\n``` shell\npip uninstall azure\n```\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in\nthe [Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project.\n\n![image](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-documentdb%2FREADME.png)\n",
        "repo_name": "cosmos/azure-mgmt-documentdb",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/cosmos/azure-mgmt-documentdb",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Cost Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-costmanagement\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.costmanagement import CostManagementClient\n\nclient = CostManagementClient(credential=DefaultAzureCredential())\n```\n\n## Examples\n\nCode samples for this package can be found at:\n- [Search Cost Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com\n- [Azure Python Mgmt SDK Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-costmanagement%2FREADME.png)\n",
        "repo_name": "costmanagement/azure-mgmt-costmanagement",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/costmanagement/azure-mgmt-costmanagement",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Custom Providers Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/)\nCode samples for this package can be found at [Custom Providers Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-customproviders%2FREADME.png)\n",
        "repo_name": "customproviders/azure-mgmt-customproviders",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/customproviders/azure-mgmt-customproviders",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Dashboard Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/)\nCode samples for this package can be found at [Dashboard Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-dashboard%2FREADME.png)\n",
        "repo_name": "dashboard/azure-mgmt-dashboard",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/dashboard/azure-mgmt-dashboard",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Data Box Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-databox\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.databox import DataBoxManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = DataBoxManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\nCode samples for this package can be found at:\n- [Search Data Box Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com\n- [Azure Python Mgmt SDK Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-databox%2FREADME.png)\n",
        "repo_name": "databox/azure-mgmt-databox",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/databox/azure-mgmt-databox",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Data Box Edge Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-databoxedge\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.databoxedge import DataBoxEdgeManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = DataBoxEdgeManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\n\nCode samples for this package can be found at [Data Box Edge Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com and [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-databoxedge%2FREADME.png)\n",
        "repo_name": "databoxedge/azure-mgmt-databoxedge",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/databoxedge/azure-mgmt-databoxedge",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Data Bricks Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/)\nCode samples for this package can be found at [Data Bricks Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-databricks%2FREADME.png)\n",
        "repo_name": "databricks/azure-mgmt-databricks",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/databricks/azure-mgmt-databricks",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Datadog Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/)\nCode samples for this package can be found at [Datadog Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-datadog%2FREADME.png)\n",
        "repo_name": "datadog/azure-mgmt-datadog",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/datadog/azure-mgmt-datadog",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Data Factory Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-datafactory\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.datafactory import DataFactoryManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = DataFactoryManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\n\nCode samples for this package can be found at [Data Factory Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com and [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-datafactory%2FREADME.png)\n",
        "repo_name": "datafactory/azure-mgmt-datafactory",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/datafactory/azure-mgmt-datafactory",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Datalake-analytics Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/)\nCode samples for this package can be found at [Datalake-analytics Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-datalake-analytics%2FREADME.png)\n",
        "repo_name": "datalake/azure-mgmt-datalake-analytics",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/datalake/azure-mgmt-datalake-analytics",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Data Lake Store Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-datalake-store\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.datalake.store import DataLakeStoreAccountManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = DataLakeStoreAccountManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\n\nCode samples for this package can be found at [Data Lake Store Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com and [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-datalake-store%2FREADME.png)\n",
        "repo_name": "datalake/azure-mgmt-datalake-store",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/datalake/azure-mgmt-datalake-store",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Data Migration Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/)\nCode samples for this package can be found at [Data Migration](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-datamigration%2FREADME.png)\n",
        "repo_name": "datamigration/azure-mgmt-datamigration",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/datamigration/azure-mgmt-datamigration",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Data Protection Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-dataprotection\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.dataprotection import DataProtectionClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = DataProtectionClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\n\nCode samples for this package can be found at [Data Protection Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com and [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-dataprotection%2FREADME.png)\n",
        "repo_name": "dataprotection/azure-mgmt-dataprotection",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/dataprotection/azure-mgmt-dataprotection",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Data Share Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/)\nCode samples for this package can be found at [Data Share Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-datashare%2FREADME.png)\n",
        "repo_name": "datashare/azure-mgmt-datashare",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/datashare/azure-mgmt-datashare",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Defendereasm Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-defendereasm\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.defendereasm import EasmMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = EasmMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\n\nCode samples for this package can be found at [Defendereasm Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com and [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-defendereasm%2FREADME.png)\n",
        "repo_name": "defendereasm/azure-mgmt-defendereasm",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/defendereasm/azure-mgmt-defendereasm",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Deployment Manager Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/)\nCode samples for this package can be found at [Deployment Manager](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-deploymentmanager%2FREADME.png)\n",
        "repo_name": "deploymentmanager/azure-mgmt-deploymentmanager",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/deploymentmanager/azure-mgmt-deploymentmanager",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Desktop Virtualization Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-desktopvirtualization\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.desktopvirtualization import DesktopVirtualizationMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = DesktopVirtualizationMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\n\nCode samples for this package can be found at [Desktop Virtualization Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com and [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-desktopvirtualization%2FREADME.png)\n",
        "repo_name": "desktopvirtualization/azure-mgmt-desktopvirtualization",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/desktopvirtualization/azure-mgmt-desktopvirtualization",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "\n# Azure DevCenter Service client library for Python\nThe Azure DevCenter package provides access to manage resources for Microsoft Dev Box and Azure Deployment Environments. This SDK enables managing developer machines and environments in Azure.\n\nUse the package for Azure DevCenter to:\n> Create, access, manage, and delete Dev Box resources\n> Create, deploy, manage, and delete Environment resources\n\n## Getting started\n\n### Installating the package\n\n```bash\npython -m pip install azure-developer-devcenter\n```\n\n#### Prequisites\n\n- Python 3.7 or later is required to use this package.\n- You need an [Azure subscription][azure_sub] to use this package.\n- You must have [configured](https://learn.microsoft.com/azure/dev-box/quickstart-configure-dev-box-service) a DevCenter, Project, Network Connection, Dev Box Definition, and Pool before you can create Dev Boxes \n- You must have [configured](https://learn.microsoft.com/azure/deployment-environments/) a DevCenter, Project, Catalog, and Environment Type before you can create Environments\n\n#### Create with an Azure Active Directory Credential\nTo use an [Azure Active Directory (AAD) token credential][authenticate_with_token],\nprovide an instance of the desired credential type obtained from the\n[azure-identity][azure_identity_credentials] library.\n\nTo authenticate with AAD, you must first [pip][pip] install [`azure-identity`][azure_identity_pip]\n\nAfter setup, you can choose which type of [credential][azure_identity_credentials] from azure.identity to use.\nAs an example, [DefaultAzureCredential][default_azure_credential] can be used to authenticate the client:\n\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables:\n`AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`\n\nUse the returned token credential to authenticate the client:\n\n```python\n>>> import os\n>>> from azure.developer.devcenter import DevCenterClient\n>>> from azure.identity import DefaultAzureCredential\n>>> tenant_id = os.environ['AZURE_TENANT_ID']\n>>> endpoint = os.environ[\"DEVCENTER_ENDPOINT\"]\n>>> client = DevCenterClient(endpoint, credential=DefaultAzureCredential())\n```\n\n## Examples\n\n### Dev Box Management\n```python\n>>> import os\n>>> from azure.developer.devcenter import DevCenterClient\n>>> from azure.identity import DefaultAzureCredential\n>>> from azure.core.exceptions import HttpResponseError\n>>> tenant_id = os.environ['AZURE_TENANT_ID']\n>>> endpoint = os.environ[\"DEVCENTER_ENDPOINT\"]\n>>> client = DevCenterClient(endpoint, credential=DefaultAzureCredential())\n>>> try:\n        # Fetch control plane resource dependencies\n        projects = list(client.dev_center.list_projects(top=1))\n        target_project_name = projects[0]['name']\n\n        pools = list(client.dev_boxes.list_pools(target_project_name, top=1))\n        target_pool_name = pools[0]['name']\n\n        # Stand up a new dev box\n        create_response = client.dev_boxes.begin_create_dev_box(target_project_name, \"Test_DevBox\", {\"poolName\": target_pool_name})\n        devbox_result = create_response.result()\n\n        LOG.info(f\"Provisioned dev box with status {devbox_result['provisioningState']}.\")\n\n        # Connect to the provisioned dev box\n        remote_connection_response = client.dev_boxes.get_remote_connection(target_project_name, \"Test_DevBox\")\n        LOG.info(f\"Connect to the dev box using web URL {remote_connection_response['webUrl']}\")\n\n        # Tear down the dev box when finished\n        delete_response = client.dev_boxes.begin_delete_dev_box(target_project_name, \"Test_DevBox\")\n        delete_response.wait()\n        LOG.info(\"Deleted dev box successfully.\")\n    except HttpResponseError as e:\n        print('service responds error: {}'.format(e.response.json()))\n\n```\n\n### Environment Management\n```python\n>>> import os\n>>> from azure.developer.devcenter import DevCenterClient\n>>> from azure.identity import DefaultAzureCredential\n>>> from azure.core.exceptions import HttpResponseError\n>>> tenant_id = os.environ['AZURE_TENANT_ID']\n>>> endpoint = os.environ[\"DEVCENTER_ENDPOINT\"]\n>>> client = DevCenterClient(endpoint, credential=DefaultAzureCredential())\n>>> try:\n        # Fetch control plane resource dependencies\n        target_project_name = list(client.dev_center.list_projects(top=1))[0]['name']\n        target_catalog_item_name = list(client.environments.list_catalog_items(target_project_name, top=1))[0]['name']\n        target_environment_type_name = list(client.environments.list_environment_types(target_project_name, top=1))[0]['name']\n        target_catalog_name = list(client.environments.list_catalog_items(target_project_name, top=1))[0]['catalogName']\n\n        # Stand up a new environment\n        create_response = client.environments.begin_create_or_update_environment(target_project_name,\n                                                           \"Dev_Environment\",\n                                                           {\"catalogName\": target_catalog_name,\n                                                            \"catalogItemName\": target_catalog_item_name,\n                                                            \"environmentType\": target_environment_type_name\n                                                            })     \n        \n        environment_result = create_response.result()\n\n        LOG.info(f\"Provisioned environment with status {environment_result['provisioningState']}.\")\n\n        # Fetch deployment artifacts\n        environment = client.environments.get_environment_by_user(target_project_name, \"Dev_Environment\")\n        LOG.info(environment)\n\n        # Tear down the environment when finished\n        delete_response = client.environments.begin_delete_environment(target_project_name, \"Dev_Environment\")\n        delete_response.wait()\n        LOG.info(\"Completed deletion for the environment.\")\n    except HttpResponseError as e:\n        print('service responds error: {}'.format(e.response.json()))\n\n```\n## Key concepts\nDev Boxes refer to managed developer machines running in Azure. Dev Boxes are provisioned in Pools, which define the network and image used for a Dev Box.\n\nEnvironments refer to templated developer environments, which combine a template (Catalog Item) and parameters.\n\n## Troubleshooting\nErrors can occur during initial requests and long-running operations, and will provide information about how to resolve the error. \nBe sure to confirm that dependent resources, such as pools and catalogs, are set up properly and are in a healthy state. You will not be able to create resources with the package when your dependent resources are in a failed state.\n\n## Next steps\nGet started by exploring our samples and starting to use the package!\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require\nyou to agree to a Contributor License Agreement (CLA) declaring that you have\nthe right to, and actually do, grant us the rights to use your contribution.\nFor details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether\nyou need to provide a CLA and decorate the PR appropriately (e.g., label,\ncomment). Simply follow the instructions provided by the bot. You will only\nneed to do this once across all repos using our CLA.\n\nThis project has adopted the\n[Microsoft Open Source Code of Conduct][code_of_conduct]. For more information,\nsee the Code of Conduct FAQ or contact opencode@microsoft.com with any\nadditional questions or comments.\n\n<!-- LINKS -->\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[authenticate_with_token]: https://docs.microsoft.com/azure/cognitive-services/authentication?tabs=powershell#authenticate-with-an-authentication-token\n[azure_identity_credentials]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity#credentials\n[azure_identity_pip]: https://pypi.org/project/azure-identity/\n[default_azure_credential]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity#defaultazurecredential\n[pip]: https://pypi.org/project/pip/\n[azure_sub]: https://azure.microsoft.com/free/\n",
        "repo_name": "devcenter/azure-developer-devcenter",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/devcenter/azure-developer-devcenter",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Devcenter Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-devcenter\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.devcenter import DevCenterMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = DevCenterMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\nCode samples for this package can be found at:\n- [Search Devcenter Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com\n- [Azure Python Mgmt SDK Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-devcenter%2FREADME.png)\n",
        "repo_name": "devcenter/azure-mgmt-devcenter",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/devcenter/azure-mgmt-devcenter",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Devhub Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-devhub\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.devhub import DevHubMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = DevHubMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\nCode samples for this package can be found at:\n- [Search Devhub Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com\n- [Azure Python Mgmt SDK Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-devhub%2FREADME.png)\n",
        "repo_name": "devhub/azure-mgmt-devhub",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/devhub/azure-mgmt-devhub",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Azure Device Update for IoT Hub client library for Python\n\nThe library provides access to the Device Update for IoT Hub service that enables customers to publish updates for their IoT devices to the cloud, and then deploy these updates to their devices (approve updates to groups of devices managed and provisioned in IoT Hub).\n\n[Source code](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/deviceupdate/azure-iot-deviceupdate)\n| [Package (PyPI)](https://aka.ms/azsdk/python/deviceupdate-pypi)\n| [Package (Conda)](https://anaconda.org/microsoft/azure-iot-deviceupdate)\n| [Product documentation](https://docs.microsoft.com/azure/iot-hub-device-update/understand-device-update)\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Microsoft Azure Subscription: To call Microsoft Azure services, you need to create an [Azure subscription](https://azure.microsoft.com/free/)\n- Device Update for IoT Hub instance\n- Azure IoT Hub instance\n- Python 3.6 or later is required to use this package.\n\n### Install the package\n\nInstall the Device Update for IoT Hub client library for Python with [pip](https://pypi.org/project/pip/):\n\n```bash\npip install azure-iot-deviceupdate\n```\n\n## Key concepts\n\nDevice Update for IoT Hub is a managed service that enables you to deploy over-the-air updates for your IoT devices. The client library has one main component named **DeviceUpdateClient**. The component allows you to access all three main client services:\n\n- **UpdatesOperations**: update management (import, enumerate, delete, etc.)\n- **ManagementOperations**: deployment management (manage devices and deployments)\n\nYou can learn more about Device Update for IoT Hub by visiting [Device Update for IoT Hub](https://github.com/azure/iot-hub-device-update).\n\n## Examples\n\nYou can familiarize yourself with different APIs using [Samples](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/deviceupdate/azure-iot-deviceupdate/samples).\n\n## Troubleshooting\n\nThe Device Update for IoT Hub client will raise exceptions defined in [Azure Core](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/README.md).\n\n## Next steps\n\nGet started with our [Samples](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/deviceupdate/azure-iot-deviceupdate/samples).\n\n## Contributing\n\nIf you encounter any bugs or have suggestions, please file an issue in the [Issues](https://github.com/Azure/azure-sdk-for-python/issues) section of the project.\n\n<!-- LINKS -->\n[azure_core]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/README.md\n",
        "repo_name": "deviceupdate/azure-iot-deviceupdate",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/deviceupdate/azure-iot-deviceupdate",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Device Update Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/)\nCode samples for this package can be found at [Device Update Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-deviceupdate%2FREADME.png)\n",
        "repo_name": "deviceupdate/azure-mgmt-deviceupdate",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/deviceupdate/azure-mgmt-deviceupdate",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Dev Test Labs Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/devtest-labs)\nCode samples for this package can be found at [Dev Test Labs Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://github.com/Azure-Samples/azure-samples-python-management/tree/main/samples/devtestlabs)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-devtestlabs%2FREADME.png)\n",
        "repo_name": "devtestlabs/azure-mgmt-devtestlabs",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/devtestlabs/azure-mgmt-devtestlabs",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Azure Azure Digital Twins Core client library for Python\n\nThis package contains an SDK for Azure Digital Twins API to provide access to the Azure Digital Twins service for managing twins, models, relationships, etc.\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Introduction\n\nAzure Digital Twins is a developer platform for next-generation IoT solutions that lets you create, run, and manage digital representations of your business environment, securely and efficiently in the cloud. With Azure Digital Twins, creating live operational state representations is quick and cost-effective, and digital representations stay current with real-time data from IoT and other data sources. If you are new to Azure Digital Twins and would like to learn more about the platform, please make sure you check out the Azure Digital Twins [official documentation page](https://docs.microsoft.com/azure/digital-twins/overview).\n\nFor an introduction on how to program against the Azure Digital Twins service, visit the [coding tutorial page](https://docs.microsoft.com/azure/digital-twins/tutorial-code) for an easy step-by-step guide. Visit [this tutorial](https://docs.microsoft.com/azure/digital-twins/tutorial-command-line-app) to learn how to interact with an Azure Digital Twin instance using a command-line client application. Finally, for a quick guide on how to build an end-to-end Azure Digital Twins solution that is driven by live data from your environment, make sure you check out [this helpful guide](https://docs.microsoft.com/azure/digital-twins/tutorial-end-to-end).\n\nThe guides mentioned above can help you get started with key elements of Azure Digital Twins, such as creating Azure Digital Twins instances, models, twin graphs, etc. Use this samples guide below to familiarize yourself with the various APIs that help you program against Azure Digital Twins.\n\n### How to Install\n\nInstall [azure-digitaltwins-core][pypi_package_keys] and\n[azure-identity][azure_identity_pypi] with [pip][pip]:\n```Bash\npip install azure-digitaltwins-core azure-identity\n```\n[azure-identity][azure_identity] is used for Azure Active Directory\nauthentication as demonstrated below.\n\n### How to use\n\n#### Authentication, permission\n\nTo create a new digital twins client, you need the endpoint to an Azure Digital Twin instance and credentials.\nFor the samples below, the `AZURE_URL`, `AZURE_TENANT_ID`, `AZURE_CLIENT_ID`, and `AZURE_CLIENT_SECRET` environment variables have to be set.\nThe client requires an instance of [TokenCredential](https://docs.microsoft.com/dotnet/api/azure.core.tokencredential?view=azure-dotnet) or [ServiceClientCredentials](https://docs.microsoft.com/dotnet/api/microsoft.rest.serviceclientcredentials?view=azure-dotnet).\nIn this samples, we illustrate how to use one derived class: [DefaultAzureCredentials](https://docs.microsoft.com/dotnet/api/azure.identity.defaultazurecredential?view=azure-dotnet).\n\n> Note: In order to access the data plane for the Digital Twins service, the entity must be given permissions.\n> To do this, use the Azure CLI command: `az dt rbac assign-role --assignee '<user-email | application-id>' --role owner -n '<your-digital-twins-instance>'`\n\nDefaultAzureCredential supports different authentication mechanisms and determines the appropriate credential type based of the environment it is executing in.\nIt attempts to use multiple credential types in an order until it finds a working credential.\n\n##### Sample code\n\n```python Snippet:dt_create_digitaltwins_service_client.py\n# DefaultAzureCredential supports different authentication mechanisms and determines the appropriate credential type based of the environment it is executing in.\n# It attempts to use multiple credential types in an order until it finds a working credential.\n\n# - AZURE_URL: The URL to the ADT in Azure\nurl = os.getenv(\"AZURE_URL\")\n\n# DefaultAzureCredential expects the following three environment variables:\n# - AZURE_TENANT_ID: The tenant ID in Azure Active Directory\n# - AZURE_CLIENT_ID: The application (client) ID registered in the AAD tenant\n# - AZURE_CLIENT_SECRET: The client secret for the registered application\ncredential = DefaultAzureCredential()\nservice_client = DigitalTwinsClient(url, credential)\n```\n\n## Key concepts\n\nAzure Digital Twins is an Azure IoT service that creates comprehensive models of the physical environment. It can create spatial intelligence graphs to model the relationships and interactions between people, spaces, and devices.\nYou can learn more about Azure Digital Twins by visiting [Azure Digital Twins Documentation](https://docs.microsoft.com/azure/digital-twins/).\n\n## Examples\n\nYou can explore the digital twins APIs (using the client library) using the samples project.\n\nThe samples project demonstrates the following:\n\n- Instantiate the client\n- Create, get, and decommission models\n- Create, query, and delete a digital twin\n- Get and update components for a digital twin\n- Create, get, and delete relationships between digital twins\n- Create, get, and delete event routes for digital twin\n- Publish telemetry messages to a digital twin and digital twin component\n\n### Create, list, decommission, and delete models\n\n#### Create models\n\nLet's create models using the code below. You need to pass an array containing list of models.\n\n```python Snippet:dt_models_lifecycle\ntemporary_component = {\n    \"@id\": component_id,\n    \"@type\": \"Interface\",\n    \"@context\": \"dtmi:dtdl:context;2\",\n    \"displayName\": \"Component1\",\n    \"contents\": [\n    {\n        \"@type\": \"Property\",\n        \"name\": \"ComponentProp1\",\n        \"schema\": \"string\"\n    },\n    {\n        \"@type\": \"Telemetry\",\n        \"name\": \"ComponentTelemetry1\",\n        \"schema\": \"integer\"\n    }\n    ]\n}\n\ntemporary_model = {\n    \"@id\": model_id,\n    \"@type\": \"Interface\",\n    \"@context\": \"dtmi:dtdl:context;2\",\n    \"displayName\": \"TempModel\",\n    \"contents\": [\n    {\n        \"@type\": \"Property\",\n        \"name\": \"Prop1\",\n        \"schema\": \"string\"\n    },\n    {\n        \"@type\": \"Component\",\n        \"name\": \"Component1\",\n        \"schema\": component_id\n    },\n    {\n        \"@type\": \"Telemetry\",\n        \"name\": \"Telemetry1\",\n        \"schema\": \"integer\"\n    }\n    ]\n}\n\nnew_models = [temporary_component, temporary_model]\nmodels = service_client.create_models(new_models)\nprint('Created Models:')\nprint(models)\n```\n\n### List models\nUsing `list_models` to retrieve all created models\n\n```python Snippet:dt_models_lifecycle\nlisted_models = service_client.list_models()\nfor model in listed_models:\n    print(model)\n```\n\n### Get model\nUse `get_model` with model's unique identifier to get a specific model.\n\n```python Snippet:dt_models_lifecycle\n# Get a model\nget_model = service_client.get_model(model_id)\nprint('Get Model:')\nprint(get_model)\n```\n\n### Decommission model\nTo decommision a model, pass in a model Id for the model you want to decommision.\n\n```python Snippet:dt_models_lifecycle\n# Decommission a model\nservice_client.decommission_model(model_id)\n```\n\n### Delete model\nTo delete a model, pass in a model Id for the model you want to delete.\n\n```python Snippet:dt_models_lifecycle\n# Delete a model\nservice_client.delete_model(model_id)\n```\n\n## Create and delete digital twins\n\n### Create digital twins\nFor Creating Twin you will need to provide Id of a digital Twin such as `my_twin` and the application/json digital twin based on the model created earlier. You can look at sample application/json [here](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/digitaltwins/azure-digitaltwins-core/samples/dtdl/digital_twins).\n\n```python Snippet:dt_digitaltwins_lifecycle\ndigital_twin_id = 'digitalTwin-' + str(uuid.uuid4())\ntemporary_twin = {\n    \"$metadata\": {\n        \"$model\": model_id\n    },\n    \"$dtId\": digital_twin_id,\n    \"Prop1\": 42\n}\n\ncreated_twin = service_client.upsert_digital_twin(digital_twin_id, temporary_twin)\nprint('Created Digital Twin:')\nprint(created_twin)\n```\n\n### Get a digital twin\n\nGetting a digital twin is extremely easy.\n```python Snippet:dt_digitaltwins_lifecycle\nget_twin = service_client.get_digital_twin(digital_twin_id)\nprint('Get Digital Twin:')\nprint(get_twin)\n```\n\n### Query digital twins\n\nQuery the Azure Digital Twins instance for digital twins using the [Azure Digital Twins Query Store lanaguage](https://docs.microsoft.com/azure/digital-twins/concepts-query-language). Query calls support paging. Here's an example of how to query for digital twins and how to iterate over the results.\n\nNote that there may be a delay between before changes in your instance are reflected in queries.\nFor more details on query limitations, see (https://docs.microsoft.com/azure/digital-twins/how-to-query-graph#query-limitations)\n\n```python Snippet:dt_digitaltwins_query\nquery_expression = 'SELECT * FROM digitaltwins'\nquery_result = service_client.query_twins(query_expression)\nprint('DigitalTwins:')\nfor twin in query_result:\n    print(twin)\n```\n\n### Delete digital twins\n\nDelete a digital twin simply by providing Id of a digital twin as below.\n\n```python Snippet:dt_digitaltwins_lifecycle\nservice_client.delete_digital_twin(digital_twin_id)\n```\n\n## Get and update digital twin components\n\n### Update digital twin components\n\nTo update a component or in other words to replace, remove and/or add a component property or subproperty within Digital Twin, you would need Id of a digital twin, component name and application/json-patch+json operations to be performed on the specified digital twin's component. Here is the sample code on how to do it.\n\n```python Snippet:dt_component_lifecycle\ncomponent_name = \"Component1\"\npatch = [\n    {\n        \"op\": \"replace\",\n        \"path\": \"/ComponentProp1\",\n        \"value\": \"value2\"\n    }\n]\nservice_client.update_component(digital_twin_id, component_name, patch)\n```\n\n### Get digital twin components\n\nGet a component by providing name of a component and Id of digital twin to which it belongs.\n\n```python Snippet:dt_component_lifecycle\nget_component = service_client.get_component(digital_twin_id, component_name)\nprint('Get Component:')\nprint(get_component)\n```\n\n## Create and list digital twin relationships\n\n### Create digital twin relationships\n\n`upsert_relationship` creates a relationship on a digital twin provided with Id of a digital twin, name of relationship such as \"contains\", Id of an relationship such as \"FloorContainsRoom\" and an application/json relationship to be created. Must contain property with key \"\\$targetId\" to specify the target of the relationship. Sample payloads for relationships can be found [here](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-digitaltwins-core/samples/dtdl/relationships/hospitalRelationships.json).\n\n```python Snippet:dt_scenario\nhospital_relationships = [\n    {\n        \"$relationshipId\": \"BuildingHasFloor\",\n        \"$sourceId\": building_twin_id,\n        \"$relationshipName\": \"has\",\n        \"$targetId\": floor_twin_id,\n        \"isAccessRestricted\": False\n    },\n    {\n        \"$relationshipId\": \"BuildingIsEquippedWithHVAC\",\n        \"$sourceId\": building_twin_id,\n        \"$relationshipName\": \"isEquippedWith\",\n        \"$targetId\": hvac_twin_id\n    },\n    {\n        \"$relationshipId\": \"HVACCoolsFloor\",\n        \"$sourceId\": hvac_twin_id,\n        \"$relationshipName\": \"controlsTemperature\",\n        \"$targetId\": floor_twin_id\n    },\n    {\n        \"$relationshipId\": \"FloorContainsRoom\",\n        \"$sourceId\": floor_twin_id,\n        \"$relationshipName\": \"contains\",\n        \"$targetId\": room_twin_id\n    }\n]\n\nfor relationship in hospital_relationships:\n    service_client.upsert_relationship(\n        relationship[\"$sourceId\"],\n        relationship[\"$relationshipId\"],\n        relationship\n    )\n```\n\n### List digital twin relationships\n\n`list_relationships` and `list_incoming_relationships` lists all the relationships and all incoming relationships respectively of a digital twin.\n\n```python Snippet:dt_relationships_list\nrelationships = service_client.list_relationships(digital_twint_id)\nfor relationship in relationships:\n    print(relationship)\n```\n\n```python Snippet:dt_incoming_relationships_list\nincoming_relationships = service_client.list_incoming_relationships(digital_twin_id)\nfor incoming_relationship in incoming_relationships:\n    print(incoming_relationship)\n```\n\n## Create, list, and delete event routes of digital twins\n\n### Create event routes\n\nTo create an event route, provide an Id of an event route such as \"myEventRouteId\" and event route data containing the endpoint and optional filter like the example shown below.\n\n```python Snippet:dt_scenario\nevent_route_id = 'eventRoute-' + str(uuid.uuid4())\nevent_filter = \"$eventType = 'DigitalTwinTelemetryMessages' or $eventType = 'DigitalTwinLifecycleNotification'\"\nroute = DigitalTwinsEventRoute(\n    endpoint_name=event_hub_endpoint_name,\n    filter=event_filter\n)\nservice_client.upsert_event_route(event_route_id, route)\n```\n\nFor more information on the event route filter language, see the \"how to manage routes\" [filter events documentation](https://github.com/Azure/azure-digital-twins/blob/private-preview/Documentation/how-to-manage-routes.md#filter-events).\n\n### List event routes\n\nList a specific event route given event route Id or all event routes setting options with `list_event_routes`.\n\n```python Snippet:dt_event_routes_list\nevent_routes = service_client.list_event_routes()\nfor event_route in event_routes:\n    print(event_route)\n```\n\n### Delete event routes\n\nDelete an event route given event route Id.\n\n```python Snippet:dt_scenario\nservice_client.delete_event_route(event_route_id)\n```\n\n### Publish telemetry messages for a digital twin\n\nTo publish a telemetry message for a digital twin, you need to provide the digital twin Id, along with the payload on which telemetry that needs the update.\n\n```python Snippet:dt_publish_telemetry\ndigita_twin_id = \"<DIGITAL TWIN ID>\"\ntelemetry_payload = '{\"Telemetry1\": 5}'\nservice_client.publish_telemetry(\n    digita_twin_id,\n    telemetry_payload\n)\n```\n\nYou can also publish a telemetry message for a specific component in a digital twin. In addition to the digital twin Id and payload, you need to specify the target component Id.\n\n```python Snippet:dt_publish_component_telemetry\ndigita_twin_id = \"<DIGITAL TWIN ID>\"\ncomponent_name = \"<COMPONENT_NAME>\"\ntelemetry_payload = '{\"Telemetry1\": 5}'\nservice_client.publish_component_telemetry(\n    digita_twin_id,\n    component_name,\n    telemetry_payload\n)\n```\n\n## Troubleshooting\n\n## Logging\nThis library uses the standard logging library for logging. Basic information about HTTP sessions (URLs, headers, etc.) is logged at INFO level.\n\nDetailed DEBUG level logging, including request/response bodies and unredacted headers, can be enabled on a client with the logging_enable keyword argument:\n\n### Client level logging\n```python Snippet:dt_digitaltwins_get.py\nimport sys\nimport logging\n\n# Create logger\nlogger = logging.getLogger('azure')\nlogger.setLevel(logging.DEBUG)\nhandler = logging.StreamHandler(stream=sys.stdout)\nlogger.addHandler(handler)\n\n# Create service client and enable logging for all operations\nservice_client = DigitalTwinsClient(url, credential, logging_enable=True)\n```\n\n### Per-operation level logging\n```python Snippet:dt_models_get.py\nimport sys\nimport logging\n\n# Create logger\nlogger = logging.getLogger('azure')\nlogger.setLevel(logging.DEBUG)\nhandler = logging.StreamHandler(stream=sys.stdout)\nlogger.addHandler(handler)\n\n# Get model with logging enabled\nmodel = service_client.get_model(model_id, logging_enable=True)\n```\n\n### Optional Configuration\nOptional keyword arguments can be passed in at the client and per-operation level. The azure-core [reference documentation](https://azuresdkdocs.blob.core.windows.net/$web/python/azure-core/latest/azure.core.html) describes available configurations for retries, logging, transport protocols, and more.\n\n[azure_identity]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity\n[azure_identity_pypi]: https://pypi.org/project/azure-identity/\n[default_cred_ref]: https://aka.ms/azsdk/python/identity/docs#azure.identity.DefaultAzureCredential\n[pip]: https://pypi.org/project/pip/\n\n\n## Next steps\n\n### Provide Feedback\n\nIf you encounter bugs or have suggestions, please\n[open an issue](https://github.com/Azure/azure-sdk-for-python/issues).\n\n## Contributing\n\nThis project welcomes contributions and suggestions.  Most contributions require you to agree to a\nContributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us\nthe rights to use your contribution. For details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide\na CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions\nprovided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or\ncontact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.",
        "repo_name": "digitaltwins/azure-digitaltwins-core",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-digitaltwins-core",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Digital Twins Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-digitaltwins\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.digitaltwins import AzureDigitalTwinsManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = AzureDigitalTwinsManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\n\nCode samples for this package can be found at [Digital Twins Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com and [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-digitaltwins%2FREADME.png)\n",
        "repo_name": "digitaltwins/azure-mgmt-digitaltwins",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/digitaltwins/azure-mgmt-digitaltwins",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Dnsresolver Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-dnsresolver\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.dnsresolver import DnsresolverManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = DnsresolverManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\n\nCode samples for this package can be found at [Dnsresolver Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com and [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-dnsresolver%2FREADME.png)\n",
        "repo_name": "dnsresolver/azure-mgmt-dnsresolver",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/dnsresolver/azure-mgmt-dnsresolver",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Dynatrace Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-dynatrace\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.dynatrace import DynatraceObservabilityMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = DynatraceObservabilityMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\n\nCode samples for this package can be found at [Dynatrace Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com and [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-dynatrace%2FREADME.png)\n",
        "repo_name": "dynatrace/azure-mgmt-dynatrace",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/dynatrace/azure-mgmt-dynatrace",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "\n# Azure EASM Data Plane client library for Python\n*Microsoft Defender External Attack Surface Management (Defender EASM)* continuously discovers and maps your digital attack surface to provide an external view of your online infrastructure. This visibility enables security and IT teams to identify unknowns, prioritize risk, eliminate threats, and extend vulnerability and exposure control beyond the firewall. Defender EASM leverages Microsoft\u2019s crawling technology to discover assets that are related to your known online infrastructure, and actively scans these assets to discover new connections over time. Attack Surface Insights are generated by leveraging vulnerability and infrastructure data to showcase the key areas of concern for your organization.\n\n[Source Code][source_code] | [Package (pypi)][pypi] | [Api Reference Documentation][api_reference] | [Product Documentation][product_documentation]\n\n## Getting started\n### Installing the package\n\n#### pip\n```bash\npython -m pip install azure-defender-easm\n```\n\n#### from source\n```bash\npython setup.py intall\n```\n\n#### Prerequisites\n\n- Python 3.7 or later is required to use this package.\n- You need an [Azure subscription][azure_sub] to use this package.\n- An existing EASM Data Plane Client instance.\n\n#### Create with an Azure Active Directory Credential\nTo use an [Azure Active Directory (AAD) token credential][authenticate_with_token],\nprovide an instance of the desired credential type obtained from the\n[azure-identity][azure_identity_credentials] library.\n\nTo authenticate with AAD, you must first [pip][pip] install [`azure-identity`][azure_identity_pip]\n\nAfter setup, you can choose which type of [credential][azure_identity_credentials] from azure.identity to use.\nAs an example, [DefaultAzureCredential][default_azure_credential] can be used to authenticate the client:\n\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables:\n`AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`\n\nUse the returned token credential to authenticate the client:\n\n```python\nfrom azure.defender.easm import EasmClient\nfrom azure.identity import DefaultAzureCredential\n\nsub_id = '<your subscription ID here>'\nworkspace_name = '<your workspace name here>'\nresource_group = '<your resource group here>'\nregion = '<your region here>'\n\nendpoint = f'{region}.easm.defender.microsoft.com'\n\nclient = EasmClient(endpoint, resource_group, sub_id, workspace_name, credential=DefaultAzureCredential())\n```\n\n## Key concepts\nBasic understanding these terms will help to get started with EASM client library.\n\n### [Assets][assets_documentation]\nDefender EASM includes the discovery of the following kinds of assets:\n-   Domains\n-   Hosts\n-   Pages\n-   IP Blocks\n-   IP Addresses\n-   Autonomous System Numbers (ASNs)\n-   SSL Certificates\n-   WHOIS Contacts\n\nThese asset types comprise your attack surface inventory in Defender EASM. This solution discovers externally facing assets that are exposed to the open internet outside of traditional firewall protection; they need to be monitored and maintained to minimize risk and improve an organization\u2019s security posture. Microsoft Defender External Attack Surface Management (Defender EASM) actively discovers and monitors these assets, then surfacing key insights that help customers efficiently address any vulnerabilities in their organization.\n\n### [Discovery][discovery_documentation]\nMicrosoft Defender External Attack Surface Management (Defender EASM) relies on our proprietary discovery technology to continuously define your organization\u2019s unique Internet-exposed attack surface. Discovery scans known assets owned by your organization to uncover previously unknown and unmonitored properties. Discovered assets are indexed in a customer\u2019s inventory, providing a dynamic system of record of web applications, third party dependencies, and web infrastructure under the organization\u2019s management through a single pane of glass.\n\n#### [Discovery Groups][discovery_groups_documentation]\nCustom discoveries are organized into Discovery Groups. They are independent seed clusters that comprise a single discovery run and operate on their own recurrence schedules. Users can elect to organize their Discovery Groups to delineate assets in whatever way best benefits their company and workflows. Common options include organizing by responsible team/business unit, brands or subsidiaries.\n\n## Examples\nAfter authenticating as shown in the \"Create with an Azure Active Directory Credential\" section, you can get started building your inventory like this:\n\n### Create a discovery group\n```python\nfrom azure.defender.easm import EasmClient\nfrom azure.identity import DefaultAzureCredential\n\nsub_id = '<your subscription ID here>'\nworkspace_name = '<your workspace name here>'\nresource_group = '<your resource group here>'\nregion = '<your region here>'\n\nendpoint = f'{region}.easm.defender.microsoft.com'\n\nclient = EasmClient(endpoint, resource_group, sub_id, workspace_name, credential=DefaultAzureCredential())\n\nclient.discovery_groups.put(\"example group\", {\n\t'seeds': [\n\t    {'kind': 'host', 'name': 'example.org'}\n\t]\n})\nclient.discovery_groups.run(\"example group\")\n```\n\n### View assets\n```python\nfrom azure.defender.easm import EasmClient\nfrom azure.identity import DefaultAzureCredential\n\nsub_id = '<your subscription ID here>'\nworkspace_name = '<your workspace name here>'\nresource_group = '<your resource group here>'\nregion = '<your region here>'\n\nendpoint = f'{region}.easm.defender.microsoft.com'\n\nclient = EasmClient(endpoint, resource_group, sub_id, workspace_name, credential=DefaultAzureCredential())\n\nfor asset in client.assets.list():\n\tprint(f'{asset.kind}: {asset.name}')\n```\n### More examples\nMore examples can be viewed in the [samples directory][samples] of this repository\n\n### Troubleshooting\n\n### Next steps\n\n## Contributing\nThis project welcomes contributions and suggestions. Most contributions require\nyou to agree to a Contributor License Agreement (CLA) declaring that you have\nthe right to, and actually do, grant us the rights to use your contribution.\nFor details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether\nyou need to provide a CLA and decorate the PR appropriately (e.g., label,\ncomment). Simply follow the instructions provided by the bot. You will only\nneed to do this once across all repos using our CLA.\n\nThis project has adopted the\n[Microsoft Open Source Code of Conduct][code_of_conduct]. For more information,\nsee the Code of Conduct FAQ or contact opencode@microsoft.com with any\nadditional questions or comments.\n\n<!-- LINKS -->\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[authenticate_with_token]: https://docs.microsoft.com/azure/cognitive-services/authentication?tabs=powershell#authenticate-with-an-authentication-token\n[azure_identity_credentials]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity#credentials\n[azure_identity_pip]: https://pypi.org/project/azure-identity/\n[default_azure_credential]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity#defaultazurecredential\n[pip]: https://pypi.org/project/pip/\n[azure_sub]: https://azure.microsoft.com/free/\n[samples]: https://github.com/nathanfalke/azure-sdk-for-python/tree/main/sdk/easm/azure-defender-easm/samples\n[assets_documentation]: https://learn.microsoft.com/azure/external-attack-surface-management/understanding-inventory-assets\n[discovery_documentation]: https://learn.microsoft.com/azure/external-attack-surface-management/what-is-discovery\n[discovery_groups_documentation]: https://learn.microsoft.com/azure/external-attack-surface-management/using-and-managing-discovery#discovery-groups\n[source_code]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/easm/azure-defender-easm/\n[pypi]: https://pypi.org/project/azure-defender-easm/\n[api_reference]: https://review.learn.microsoft.com/rest/api/defenderforeasm/?branch=easm\n[product_documentation]:  https://learn.microsoft.com/azure/external-attack-surface-management/\n",
        "repo_name": "easm/azure-defender-easm",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/easm/azure-defender-easm",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Data Box Edge / Data Box Gateway Client Library.\nThis package has been tested with Python 3.6+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n\n\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/)\nCode samples for this package can be found at [Data Box Edge / Data Box Gateway](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-edgegateway%2FREADME.png)\n",
        "repo_name": "edgegateway/azure-mgmt-edgegateway",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/edgegateway/azure-mgmt-edgegateway",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Edge Order Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-edgeorder\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.edgeorder import EdgeOrderManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = EdgeOrderManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\n\nCode samples for this package can be found at [Edge Order Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com and [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-edgeorder%2FREADME.png)\n",
        "repo_name": "edgeorder/azure-mgmt-edgeorder",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/edgeorder/azure-mgmt-edgeorder",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Education Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/)\nCode samples for this package can be found at [Education Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-education%2FREADME.png)\n",
        "repo_name": "education/azure-mgmt-education",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/education/azure-mgmt-education",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Elastic Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-elastic\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.elastic import MicrosoftElastic\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = MicrosoftElastic(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\nCode samples for this package can be found at:\n- [Search Elastic Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com\n- [Azure Python Mgmt SDK Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-elastic%2FREADME.png)\n",
        "repo_name": "elastic/azure-mgmt-elastic",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/elastic/azure-mgmt-elastic",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Elasticsan Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/)\nCode samples for this package can be found at [Elasticsan Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-elasticsan%2FREADME.png)\n",
        "repo_name": "elasticsan/azure-mgmt-elasticsan",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/elasticsan/azure-mgmt-elasticsan",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Azure Event Grid client library for Python\n\nAzure Event Grid is a fully-managed intelligent event routing service that allows for uniform event consumption using a publish-subscribe model.\n\n[Source code][python-eg-src]\n| [Package (PyPI)][python-eg-pypi]\n| [Package (Conda)](https://anaconda.org/microsoft/azure-eventgrid/)\n| [API reference documentation][python-eg-ref-docs]\n| [Product documentation][python-eg-product-docs]\n| [Samples][python-eg-samples]\n| [Changelog][python-eg-changelog]\n\n## Getting started\n\n### Prerequisites\n* Python 3.7 or later is required to use this package.\n* You must have an [Azure subscription][azure_subscription] and an Event Grid Topic resource to use this package. Follow this [step-by-step tutorial](https://docs.microsoft.com/azure/event-grid/custom-event-quickstart-portal) to register the Event Grid resource provider and create Event Grid topics using the [Azure portal](https://portal.azure.com/). There is a [similar tutorial](https://docs.microsoft.com/azure/event-grid/custom-event-quickstart) using [Azure CLI](https://docs.microsoft.com/cli/azure).\n\n\n### Install the package\nInstall the Azure Event Grid client library for Python with [pip][pip]:\n\n```bash\npip install azure-eventgrid\n```\n\n* An existing Event Grid topic or domain is required. You can create the resource using [Azure Portal][azure_portal_create_EG_resource] or [Azure CLI][azure_cli_link]\n\nIf you use Azure CLI, replace `<resource-group-name>` and `<resource-name>` with your own unique names.\n\n#### Create an Event Grid Topic\n\n```\naz eventgrid topic --create --location <location> --resource-group <resource-group-name> --name <resource-name>\n```\n\n#### Create an Event Grid Domain\n\n```\naz eventgrid domain --create --location <location> --resource-group <resource-group-name> --name <resource-name>\n```\n\n### Authenticate the client\nIn order to interact with the Event Grid service, you will need to create an instance of a client.\nAn **endpoint** and **credential** are necessary to instantiate the client object.\n\n#### Using Azure Active Directory (AAD)\n\nAzure Event Grid provides integration with Azure Active Directory (Azure AD) for identity-based authentication of requests. With Azure AD, you can use role-based access control (RBAC) to grant access to your Azure Event Grid resources to users, groups, or applications.\n\nTo send events to a topic or domain with a `TokenCredential`, the authenticated identity should have the \"EventGrid Data Sender\" role assigned.\n\nWith the `azure-identity` package, you can seamlessly authorize requests in both development and production environments. To learn more about Azure Active Directory, see the [`azure-identity` README](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/README.md).\n\nFor example, you can use `DefaultAzureCredential` to construct a client which will authenticate using Azure Active Directory:\n\n<!-- SNIPPET:sample_authentication.client_auth_with_token_cred -->\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.eventgrid import EventGridPublisherClient, EventGridEvent\n\ncredential = DefaultAzureCredential()\nendpoint = os.environ[\"EVENTGRID_TOPIC_ENDPOINT\"]\nclient = EventGridPublisherClient(endpoint, credential)\n```\n\n<!-- END SNIPPET -->\n\n#### Looking up the endpoint\nYou can find the topic endpoint within the Event Grid Topic resource on the Azure portal. This will look like:\n`\"https://<event-grid-topic-name>.<topic-location>.eventgrid.azure.net/api/events\"`\n\n#### Create the client with AzureKeyCredential\n\nTo use an Access key as the `credential` parameter,\npass the key as a string into an instance of [AzureKeyCredential][azure-key-credential].\n\n> **Note:** The Access Key may be found in the azure portal in the \"Access Keys\" menu of the Event Grid Topic resource.  They may also be obtained via the azure CLI, or the `azure-mgmt-eventgrid` library. A guide for getting access keys can be found [here](https://docs.microsoft.com/azure/event-grid/get-access-keys).\n\n<!-- SNIPPET:sample_authentication.client_auth_with_key_cred -->\n\n```python\nimport os\nfrom azure.eventgrid import EventGridPublisherClient\nfrom azure.core.credentials import AzureKeyCredential\n\ntopic_key = os.environ[\"EVENTGRID_TOPIC_KEY\"]\nendpoint = os.environ[\"EVENTGRID_TOPIC_ENDPOINT\"]\n\ncredential = AzureKeyCredential(topic_key)\nclient = EventGridPublisherClient(endpoint, credential)\n```\n\n<!-- END SNIPPET -->\n\n> **Note:** A client may also be authenticated via SAS signature, using the `AzureSasCredential`. A sample demonstrating this, is available [here][python-eg-sample-send-using-sas] ([async_version][python-eg-sample-send-using-sas-async]).\n\n> **Note:** The `generate_sas` method can be used to generate a shared access signature. A sample demonstrating this can be seen [here][python-eg-generate-sas].\n\n## Key concepts\n\n### Topic\nA **[topic](https://docs.microsoft.com/azure/event-grid/concepts#topics)** is a channel within the EventGrid service to send events. The event schema that a topic accepts is decided at topic creation time. If events of a schema type are sent to a topic that requires a different schema type, errors will be raised.\n\n### Domain\nAn event **[domain](https://docs.microsoft.com/azure/event-grid/event-domains)** is a management tool for large numbers of Event Grid topics related to the same application. They allow you to publish events to thousands of topics. Domains also give you authorization and authentication control over each topic. For more information, visit [Event domain overview](https://docs.microsoft.com/azure/event-grid/event-domains).\n\nWhen you create an event domain, a publishing endpoint for this domain is made available to you. This process is similar to creating an Event Grid Topic. The only difference is that, when publishing to a domain, you must specify the topic within the domain that you'd like the event to be delivered to.\n\n### Event schemas\nAn **[event](https://docs.microsoft.com/azure/event-grid/concepts#events)** is the smallest amount of information that fully describes something that happened in the system. When a custom topic or domain is created, you must specify the schema that will be used when publishing events.\n\nEvent Grid supports multiple schemas for encoding events.\n\n#### Event Grid schema\nWhile you may configure your topic to use a [custom schema](https://docs.microsoft.com/azure/event-grid/input-mappings), it is more common to use the already-defined Event Grid schema. See the specifications and requirements [here](https://docs.microsoft.com/azure/event-grid/event-schema).\n\n#### CloudEvents v1.0 schema\nAnother option is to use the CloudEvents v1.0 schema. [CloudEvents](https://cloudevents.io/) is a Cloud Native Computing Foundation project which produces a specification for describing event data in a common way. The service summary of CloudEvents can be found [here](https://docs.microsoft.com/azure/event-grid/cloud-event-schema).\n\n### EventGridPublisherClient\n`EventGridPublisherClient` provides operations to send event data to a topic hostname specified during client initialization.\n\nRegardless of the schema that your topic or domain is configured to use, `EventGridPublisherClient` will be used to publish events to it. Use the `send` method publishing events.\n\nThe following formats of events are allowed to be sent:\n- A list or a single instance of strongly typed EventGridEvents.\n- A dict representation of a serialized EventGridEvent object.\n- A list or a single instance of strongly typed CloudEvents.\n- A dict representation of a serialized CloudEvent object.\n\n- A dict representation of any Custom Schema.\n\nPlease have a look at the [samples](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/eventgrid/azure-eventgrid/samples) for detailed examples.\n\n\n **Note:** It is important to know if your topic supports CloudEvents or EventGridEvents before publishing. If you send to a topic that does not support the schema of the event you are sending, send() will throw an exception.\n\n### System Topics\nA **[system topic](https://docs.microsoft.com/azure/event-grid/system-topics)** in Event Grid represents one or more events published by Azure services such as Azure Storage or Azure Event Hubs. For example, a system topic may represent all blob events or only blob creation and blob deletion events published for a specific storage account.\n\nThe names of the various event types for the system events published to Azure Event Grid are available in `azure.eventgrid.SystemEventNames`.\nFor complete list of recognizable system topics, visit [System Topics](https://docs.microsoft.com/azure/event-grid/system-topics).\n\n For more information about the key concepts on Event Grid, see [Concepts in Azure Event Grid][publisher-service-doc].\n\n## Event Grid on Kubernetes with Azure Arc\n\nEvent Grid on Kubernetes with Azure Arc is an offering that allows you to run Event Grid on your own Kubernetes cluster. This capability is enabled by the use of Azure Arc enabled Kubernetes. Through Azure Arc enabled Kubernetes, a supported Kubernetes cluster connects to Azure. Once connected, you are able to install Event Grid on it. Learn more about it [here](https://docs.microsoft.com/azure/event-grid/kubernetes/overview).\n\n### Support for CNCF Cloud Events\n\nStarting with v4.7.0, this package also supports publishing a CNCF cloud event from https://pypi.org/project/cloudevents/. You would be able to pass a CloudEvent object from this library to the `send` API.\n\n```python\n\nfrom cloudevents.http import CloudEvent\n\nevent = CloudEvent(...)\n\nclient.send(event)\n```\n\n## Examples\n\nThe following sections provide several code snippets covering some of the most common Event Grid tasks, including:\n\n* [Send an Event Grid Event](#send-an-event-grid-event)\n* [Send a Cloud Event](#send-a-cloud-event)\n* [Send Multiple Events](#send-multiple-events)\n* [Send events as Dictionaries](#send-events-as-dictionaries)\n* [Consume a payload from storage queue](#consume-from-storage-queue)\n* [Consume from ServiceBus](#consume-from-servicebus)\n\n### Send an Event Grid Event\n\nThis example publishes an Event Grid event.\n\n```python\nimport os\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.eventgrid import EventGridPublisherClient, EventGridEvent\n\nkey = os.environ[\"EG_ACCESS_KEY\"]\nendpoint = os.environ[\"EG_TOPIC_HOSTNAME\"]\n\nevent = EventGridEvent(\n    data={\"team\": \"azure-sdk\"},\n    subject=\"Door1\",\n    event_type=\"Azure.Sdk.Demo\",\n    data_version=\"2.0\"\n)\n\ncredential = AzureKeyCredential(key)\nclient = EventGridPublisherClient(endpoint, credential)\n\nclient.send(event)\n```\n\n### Send a Cloud Event\n\nThis example publishes a Cloud event.\n\n```python\nimport os\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.core.messaging import CloudEvent\nfrom azure.eventgrid import EventGridPublisherClient\n\nkey = os.environ[\"CLOUD_ACCESS_KEY\"]\nendpoint = os.environ[\"CLOUD_TOPIC_HOSTNAME\"]\n\nevent = CloudEvent(\n    type=\"Azure.Sdk.Sample\",\n    source=\"https://egsample.dev/sampleevent\",\n    data={\"team\": \"azure-sdk\"}\n)\n\ncredential = AzureKeyCredential(key)\nclient = EventGridPublisherClient(endpoint, credential)\n\nclient.send(event)\n```\n\n### Send Multiple events\n\nIt is possible to send events as a batch when sending multiple events to a topic or a domain. This example sends a list of CloudEvents using the send method.\n\n**WARNING:** When sending a list of multiple events at one time, iterating over and sending each event will not result in optimal performance. For best performance, it is highly recommended to send a list of events.\n\n```python\nimport os\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.core.messaging import CloudEvent\nfrom azure.eventgrid import EventGridPublisherClient\n\nkey = os.environ[\"CLOUD_ACCESS_KEY\"]\nendpoint = os.environ[\"CLOUD_TOPIC_HOSTNAME\"]\n\nevent0 = CloudEvent(\n    type=\"Azure.Sdk.Sample\",\n    source=\"https://egsample.dev/sampleevent\",\n    data={\"team\": \"azure-sdk\"}\n)\nevent1 = CloudEvent(\n    type=\"Azure.Sdk.Sample\",\n    source=\"https://egsample.dev/sampleevent\",\n    data={\"team2\": \"azure-eventgrid\"}\n)\n\nevents = [event0, event1]\n\ncredential = AzureKeyCredential(key)\nclient = EventGridPublisherClient(endpoint, credential)\n\nclient.send(events)\n```\n\n### Send events as dictionaries\n\nA dict representation of respective serialized models can also be used to publish CloudEvent(s) or EventGridEvent(s) apart from the strongly typed objects.\n\nUse a dict-like representation to send to a topic with custom schema as shown below.\n\n```python\nimport os\nimport uuid\nimport datetime as dt\nfrom msrest.serialization import UTC\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.eventgrid import EventGridPublisherClient\n\nkey = os.environ[\"CUSTOM_SCHEMA_ACCESS_KEY\"]\nendpoint = os.environ[\"CUSTOM_SCHEMA_TOPIC_HOSTNAME\"]\n\nevent = custom_schema_event = {\n    \"customSubject\": \"sample\",\n    \"customEventType\": \"sample.event\",\n    \"customDataVersion\": \"2.0\",\n    \"customId\": uuid.uuid4(),\n    \"customEventTime\": dt.datetime.now(UTC()).isoformat(),\n    \"customData\": \"sample data\"\n    }\n\ncredential = AzureKeyCredential(key)\nclient = EventGridPublisherClient(endpoint, credential)\n\nclient.send(event)\n```\n\n### Consume from storage queue\n\nThis example consumes a message received from storage queue and deserializes it to a CloudEvent object.\n\n```python\nfrom azure.core.messaging import CloudEvent\nfrom azure.storage.queue import QueueServiceClient, BinaryBase64DecodePolicy\nimport os\nimport json\n\n# all types of CloudEvents below produce same DeserializedEvent\nconnection_str = os.environ['STORAGE_QUEUE_CONN_STR']\nqueue_name = os.environ['STORAGE_QUEUE_NAME']\n\nwith QueueServiceClient.from_connection_string(connection_str) as qsc:\n    payload =  qsc.get_queue_client(\n        queue=queue_name,\n        message_decode_policy=BinaryBase64DecodePolicy()\n        ).peek_messages()\n\n    ## deserialize payload into a list of typed Events\n    events = [CloudEvent.from_dict(json.loads(msg.content)) for msg in payload]\n```\n\n### Consume from servicebus\n\nThis example consumes a payload message received from ServiceBus and deserializes it to an EventGridEvent object.\n\n```python\nfrom azure.eventgrid import EventGridEvent\nfrom azure.servicebus import ServiceBusClient\nimport os\nimport json\n\n# all types of EventGridEvents below produce same DeserializedEvent\nconnection_str = os.environ['SERVICE_BUS_CONN_STR']\nqueue_name = os.environ['SERVICE_BUS_QUEUE_NAME']\n\nwith ServiceBusClient.from_connection_string(connection_str) as sb_client:\n    payload =  sb_client.get_queue_receiver(queue_name).receive_messages()\n\n    ## deserialize payload into a list of typed Events\n    events = [EventGridEvent.from_dict(json.loads(next(msg.body).decode('utf-8'))) for msg in payload]\n```\n\n## Distributed Tracing with EventGrid\n\nYou can use OpenTelemetry for Python as usual with EventGrid since it's compatible with azure-core tracing integration.\n\nHere is an example of using OpenTelemetry to trace sending a CloudEvent.\n\nFirst, set OpenTelemetry as enabled tracing plugin for EventGrid.\n\n```python\nfrom azure.core.settings import settings\nfrom azure.core.tracing.ext.opentelemetry_span import OpenTelemetrySpan\n\nsettings.tracing_implementation = OpenTelemetrySpan\n```\n\nRegular open telemetry usage from here. See [OpenTelemetry](https://github.com/open-telemetry/opentelemetry-python) for details.\nThis example uses a simple console exporter to export the traces. Any exporter can be used here including `azure-monitor-opentelemetry-exporter`, `jaeger`, `zipkin` etc.\n\n```python\nfrom opentelemetry import trace\nfrom opentelemetry.sdk.trace import TracerProvider\nfrom opentelemetry.sdk.trace.export import ConsoleSpanExporter\nfrom opentelemetry.sdk.trace.export import SimpleSpanProcessor  # this requires opentelemetry >= 1.0.0\n\n# Simple console exporter\nexporter = ConsoleSpanExporter()\n\ntrace.set_tracer_provider(TracerProvider())\ntracer = trace.get_tracer(__name__)\ntrace.get_tracer_provider().add_span_processor(\n    SimpleSpanProcessor(exporter)\n)\n```\n\nOnce the `tracer` and `exporter` are set, please follow the example below to start collecting traces while using the `send` method from the `EventGridPublisherClient` to send a CloudEvent object.\n\n```python\nimport os\nfrom azure.eventgrid import EventGridPublisherClient\nfrom azure.core.messaging import CloudEvent\nfrom azure.core.credentials import AzureKeyCredential\n\nhostname = os.environ['CLOUD_TOPIC_HOSTNAME']\nkey = AzureKeyCredential(os.environ['CLOUD_ACCESS_KEY'])\ncloud_event = CloudEvent(\n    source = 'demo',\n    type = 'sdk.demo',\n    data = {'test': 'hello'},\n)\nwith tracer.start_as_current_span(name=\"MyApplication\"):\n    client = EventGridPublisherClient(hostname, key)\n    client.send(cloud_event)\n```\n\n## Troubleshooting\n\n- Enable `azure.eventgrid` logger to collect traces from the library.\n\n### General\nEvent Grid client library will raise exceptions defined in [Azure Core][azure_core_exceptions].\n\n### Logging\nThis library uses the standard\n[logging][python_logging] library for logging.\nBasic information about HTTP sessions (URLs, headers, etc.) is logged at INFO\nlevel.\n\n### Optional Configuration\n\nOptional keyword arguments can be passed in at the client and per-operation level.\nThe azure-core [reference documentation][azure_core_ref_docs]\ndescribes available configurations for retries, logging, transport protocols, and more.\n\n## Next steps\n\nThe following section provides several code snippets illustrating common patterns used in the Event Grid Python API.\n\n### More sample code\n\nThese code samples show common champion scenario operations with the Azure Event Grid client library.\n\n* Generate Shared Access Signature: [sample_generate_sas.py][python-eg-generate-sas]\n\n* Authenticate the client: [sample_authentication.py][python-eg-auth] ([async_version][python-eg-auth-async])\n\n* Publish events to a topic using SAS: [sample_publish_events_to_a_topic_using_sas_credential_async.py][python-eg-sample-send-using-sas] ([async_version][python-eg-sample-send-using-sas-async])\n* Publish Event Grid Events to a topic: [sample_publish_eg_events_to_a_topic.py][python-eg-sample-eg-event] ([async_version][python-eg-sample-eg-event-async])\n* Publish EventGrid Events to a domain topic: [sample_publish_eg_events_to_a_domain_topic.py][python-eg-sample-eg-event-to-domain] ([async_version][python-eg-sample-eg-event-to-domain-async])\n* Publish a Cloud Event: [sample_publish_events_using_cloud_events_1.0_schema.py][python-eg-sample-send-cloudevent] ([async_version][python-eg-sample-send-cloudevent-async])\n* Publish a Custom Schema: [sample_publish_custom_schema_to_a_topic.py][python-eg-publish-custom-schema] ([async_version][python-eg-publish-custom-schema-async])\n\nThe following samples cover publishing and consuming `dict` representations of EventGridEvents and CloudEvents.\n* Publish EventGridEvent as dict like representation: [sample_publish_eg_event_using_dict.py][python-eg-sample-send-eg-as-dict] ([async_version][python-eg-sample-send-eg-as-dict-async])\n\n* Publish CloudEvent as dict like representation: [sample_publish_cloud_event_using_dict.py][python-eg-sample-send-cloudevent-as-dict] ([async_version][python-eg-sample-send-cloudevent-as-dict-async])\n\n* Consume a Custom Payload of raw cloudevent data: [sample_consume_custom_payload.py][python-eg-sample-consume-custom-payload]\n\nMore samples can be found [here][python-eg-samples].\n\n* More samples related to the send scenario can be seen [here][python-eg-publish-samples].\n* To see more samples related to consuming a payload from different messaging services as a typed object, please visit [Consume Samples][python-eg-consume-samples]\n\n### Additional documentation\n\nFor more extensive documentation on Azure Event Grid, see the [Event Grid documentation][python-eg-product-docs] on docs.microsoft.com.\n\n## Contributing\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [cla.microsoft.com][cla].\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n\n[azure_cli_link]: https://pypi.org/project/azure-cli/\n[python-eg-src]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/\n[python-eg-pypi]: https://pypi.org/project/azure-eventgrid\n[python-eg-product-docs]: https://docs.microsoft.com/azure/event-grid/overview\n[python-eg-ref-docs]: https://azuresdkdocs.blob.core.windows.net/$web/python/azure-eventgrid/latest/index.html\n[publisher-service-doc]: https://docs.microsoft.com/azure/event-grid/concepts\n[python-eg-samples]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/eventgrid/azure-eventgrid/samples\n[python-eg-changelog]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/eventgrid/azure-eventgrid/CHANGELOG.md\n[pip]: https://pypi.org/project/pip/\n\n[azure_portal_create_EG_resource]: https://ms.portal.azure.com/#blade/HubsExtension/BrowseResource/resourceType/Microsoft.EventGrid%2Ftopics\n[azure-key-credential]: https://aka.ms/azsdk/python/core/azurekeycredential\n[azure_core_exceptions]: https://aka.ms/azsdk/python/core/docs#module-azure.core.exceptions\n[python_logging]: https://docs.python.org/3/library/logging.html\n[azure_core_ref_docs]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/core/azure-core#configurations\n[azure_subscription]: https://azure.microsoft.com/free/\n\n[python-eg-auth]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/samples/sync_samples/sample_authentication.py\n[python-eg-generate-sas]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/samples/sync_samples/sample_generate_sas.py\n[python-eg-sample-send-using-sas]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/samples/sync_samples/sample_publish_events_to_a_topic_using_sas_credential.py\n[python-eg-sample-eg-event]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/samples/sync_samples/sample_publish_eg_events_to_a_topic.py\n[python-eg-sample-eg-event-to-domain]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/samples/sync_samples/sample_publish_eg_events_to_a_domain.py\n[python-eg-sample-send-cloudevent]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/samples/sync_samples/sample_publish_events_using_cloud_events_1.0_schema.py\n[python-eg-publish-custom-schema]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/samples/sync_samples/sample_publish_custom_schema_to_a_topic.py\n[python-eg-sample-send-eg-as-dict]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/samples/sync_samples/sample_publish_eg_event_using_dict.py\n[python-eg-sample-send-cloudevent-as-dict]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/samples/sync_samples/sample_publish_cloud_event_using_dict.py\n\n[python-eg-auth-async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/samples/async_samples/sample_authentication_async.py\n[python-eg-sample-send-using-sas-async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/samples/async_samples/sample_publish_events_to_a_topic_using_sas_credential_async.py\n[python-eg-sample-eg-event-async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/samples/async_samples/sample_publish_eg_events_to_a_topic_async.py\n[python-eg-sample-eg-event-to-domain-async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/samples/async_samples/sample_publish_eg_events_to_a_domain_async.py\n[python-eg-sample-send-cloudevent-async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/samples/async_samples/sample_publish_events_using_cloud_events_1.0_schema_async.py\n[python-eg-publish-custom-schema-async]:https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/samples/async_samples/sample_publish_custom_schema_to_a_topic_async.py\n[python-eg-sample-send-eg-as-dict-async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/samples/async_samples/sample_publish_eg_event_using_dict_async.py\n[python-eg-sample-send-cloudevent-as-dict-async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/samples/async_samples/sample_publish_cloud_event_using_dict_async.py\n\n[python-eg-publish-samples]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/samples/publish_samples\n[python-eg-consume-samples]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/samples/consume_samples\n[python-eg-sample-consume-custom-payload]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/samples/sync_samples/sample_consume_custom_payload.py\n\n[cla]: https://cla.microsoft.com\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n",
        "repo_name": "eventgrid/azure-eventgrid",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Event Grid Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-eventgrid\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.eventgrid import EventGridManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = EventGridManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\nCode samples for this package can be found at:\n- [Search Event Grid Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com\n- [Azure Python Mgmt SDK Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-eventgrid%2FREADME.png)\n",
        "repo_name": "eventgrid/azure-mgmt-eventgrid",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-mgmt-eventgrid",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Azure EventHubs Checkpoint Store using Storage Blobs client library for Python\n\nAzure EventHubs Checkpoint Store is used for storing checkpoints while processing events from Azure Event Hubs.\nThis Checkpoint Store package works as a plug-in package to `EventHubConsumerClient`. It uses Azure Storage Blob as the persistent store for maintaining checkpoints and partition ownership information.\n\nPlease note that this is an async library, for sync version of the Azure EventHubs Checkpoint Store client library, please refer to [azure-eventhub-checkpointstoreblob](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub-checkpointstoreblob).\n\n[Source code](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub-checkpointstoreblob-aio/)\n| [Package (PyPi)](https://pypi.org/project/azure-eventhub-checkpointstoreblob-aio/)\n| [Package (Conda)](https://anaconda.org/microsoft/azure-eventhub/)\n| [API reference documentation](https://azuresdkdocs.blob.core.windows.net/$web/python/azure-eventhub/latest/azure.eventhub.aio.html#azure.eventhub.aio.CheckpointStore)\n| [Azure Eventhubs documentation](https://docs.microsoft.com/azure/event-hubs/)\n| [Azure Storage documentation](https://docs.microsoft.com/azure/storage/)\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7 or later.\n- **Microsoft Azure Subscription:**  To use Azure services, including Azure Event Hubs, you'll need a subscription.  If you do not have an existing Azure account, you may sign up for a free trial or use your MSDN subscriber benefits when you [create an account](https://azure.microsoft.com/).\n\n- **Event Hubs namespace with an Event Hub:** To interact with Azure Event Hubs, you'll also need to have a namespace and Event Hub  available.  If you are not familiar with creating Azure resources, you may wish to follow the step-by-step guide for [creating an Event Hub using the Azure portal](https://docs.microsoft.com/azure/event-hubs/event-hubs-create).  There, you can also find detailed instructions for using the Azure CLI, Azure PowerShell, or Azure Resource Manager (ARM) templates to create an Event Hub.\n\n- **Azure Storage Account:** You'll need to have an Azure Storage Account and create a Azure Blob Storage Block Container to store the checkpoint data with blobs. You may follow the guide [creating an Azure Block Blob Storage Account](https://docs.microsoft.com/azure/storage/blobs/storage-blob-create-account-block-blob).\n\n### Install the package\n\n```\n$ pip install azure-eventhub-checkpointstoreblob-aio\n```\n\n## Key concepts\n\n### Checkpointing\n\nCheckpointing is a process by which readers mark or commit their position within a partition event sequence.\nCheckpointing is the responsibility of the consumer and occurs on a per-partition basis within a consumer group.\nThis responsibility means that for each consumer group, each partition reader must keep track of its current position\nin the event stream, and can inform the service when it considers the data stream complete. If a reader disconnects from\na partition, when it reconnects it begins reading at the checkpoint that was previously submitted by the last reader of\nthat partition in that consumer group. When the reader connects, it passes the offset to the event hub to specify the\nlocation at which to start reading. In this way, you can use checkpointing to both mark events as \"complete\" by\ndownstream applications, and to provide resiliency if a failover between readers running on different machines occurs.\nIt is possible to return to older data by specifying a lower offset from this checkpointing process. Through this\nmechanism, checkpointing enables both failover resiliency and event stream replay.\n\n### Offsets & sequence numbers\nBoth offset & sequence number refer to the position of an event within a partition. You can think of them as a\nclient-side cursor. The offset is a byte numbering of the event. The offset/sequence number enables an event consumer\n(reader) to specify a point in the event stream from which they want to begin reading events. You can specify a\ntimestamp such that you receive events enqueued only after the given timestamp. Consumers are responsible for\nstoring their own offset values outside of the Event Hubs service. Within a partition, each event includes an offset,\nsequence number and the timestamp of when it was enqueued.\n\n## Examples\n- [Create an Azure EventHubs `EventHubConsumerClient`](#create-an-eventhubconsumerclient)\n- [Consume events using a `BlobCheckpointStore`](#consume-events-using-a-blobcheckpointstore-to-do-checkpoint)\n\n### Create an `EventHubConsumerClient`\nThe easiest way to create a `EventHubConsumerClient` is to use a connection string.\n```python\nfrom azure.eventhub.aio import EventHubConsumerClient\neventhub_client = EventHubConsumerClient.from_connection_string(\"my_eventhub_namespace_connection_string\", \"my_consumer_group\", eventhub_name=\"my_eventhub\")\n```\nFor other ways of creating a `EventHubConsumerClient`, refer to [EventHubs library](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub) for more details.\n\n### Consume events using a `BlobCheckpointStore` to do checkpoint\n```python\nimport asyncio\n\nfrom azure.eventhub.aio import EventHubConsumerClient\nfrom azure.eventhub.extensions.checkpointstoreblobaio import BlobCheckpointStore\n\nconnection_str = '<< CONNECTION STRING FOR THE EVENT HUBS NAMESPACE >>'\nconsumer_group = '<< CONSUMER GROUP >>'\neventhub_name = '<< NAME OF THE EVENT HUB >>'\nstorage_connection_str = '<< CONNECTION STRING OF THE STORAGE >>'\ncontainer_name = '<< STORAGE CONTAINER NAME>>'\n\nasync def on_event(partition_context, event):\n    # Put your code here.\n    await partition_context.update_checkpoint(event)  # Or update_checkpoint every N events for better performance.\n\nasync def main():\n    checkpoint_store = BlobCheckpointStore.from_connection_string(\n        storage_connection_str,\n        container_name\n    )\n    client = EventHubConsumerClient.from_connection_string(\n        connection_str,\n        consumer_group,\n        eventhub_name=eventhub_name,\n        checkpoint_store=checkpoint_store,\n    )\n\n    async with client:\n        await client.receive(on_event)\n\nif __name__ == '__main__':\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(main())\n```\n\n#### Use `BlobCheckpointStore` with a different version of Azure Storage Service API\nSome environments have different versions of Azure Storage Service API.\n`BlobCheckpointStore` by default uses the Storage Service API version 2019-07-07. To use it against a different\nversion, specify `api_version` when you create the `BlobCheckpointStore` object.\n\n\n## Troubleshooting\n\n### General\nEnabling logging will be helpful to do trouble shooting.\n\n### Logging\n\n- Enable `azure.eventhub.extensions.checkpointstoreblobaio` logger to collect traces from the library.\n- Enable `azure.eventhub` logger to collect traces from the main azure-eventhub library.\n- Enable `azure.eventhub.extensions.checkpointstoreblobaio._vendor.storage` logger to collect traces from azure storage blob library.\n- Enable `uamqp` logger to collect traces from the underlying uAMQP library.\n- Enable AMQP frame level trace by setting `logging_enable=True` when creating the client.\n\n## Next steps\n\n### More sample code\n\nGet started with our [EventHubs Checkpoint Store async samples](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub-checkpointstoreblob-aio/samples).\n\n- [receive_events_using_checkpoint_store_async.py](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub-checkpointstoreblob-aio/samples/receive_events_using_checkpoint_store_async.py) - EventHubConsumerClient with blob checkpoint store example\n- [receive_events_using_checkpoint_store_storage_api_version_async.py](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub-checkpointstoreblob-aio/samples/receive_events_using_checkpoint_store_storage_api_version_async.py) - EventHubConsumerClient with blob checkpoint store and storage version example\n\n### Documentation\n\nReference documentation is available [here](https://azuresdkdocs.blob.core.windows.net/$web/python/azure-eventhub/latest/azure.eventhub.aio.html#azure.eventhub.aio.CheckpointStore).\n\n### Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the [Issues](https://github.com/Azure/azure-sdk-for-python/issues) section of the project.\n\n## Contributing\n\nThis project welcomes contributions and suggestions.  Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python/sdk/eventhub/azure-eventhub-checkpointstoreblob-aio/README.png)\n",
        "repo_name": "eventhub/azure-eventhub-checkpointstoreblob-aio",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub-checkpointstoreblob-aio",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Azure EventHubs Checkpoint Store using Storage Blobs client library for Python\n\nAzure EventHubs Checkpoint Store is used for storing checkpoints while processing events from Azure Event Hubs.\nThis Checkpoint Store package works as a plug-in package to `EventHubConsumerClient`. It uses Azure Storage Blob as the persistent store for maintaining checkpoints and partition ownership information.\n\nPlease note that this is a sync library, for async version of the Azure EventHubs Checkpoint Store client library, please refer to [azure-eventhub-checkpointstoreblob-aio](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub-checkpointstoreblob-aio).\n\n[Source code](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub-checkpointstoreblob/)\n| [Package (PyPi)](https://pypi.org/project/azure-eventhub-checkpointstoreblob)\n| [Package (Conda)](https://anaconda.org/microsoft/azure-eventhub/)\n| [API reference documentation](https://azuresdkdocs.blob.core.windows.net/$web/python/azure-eventhub/latest/azure.eventhub.html#azure.eventhub.CheckpointStore)\n| [Azure Eventhubs documentation](https://docs.microsoft.com/azure/event-hubs/)\n| [Azure Storage documentation](https://docs.microsoft.com/azure/storage/)\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7 or later.\n- **Microsoft Azure Subscription:**  To use Azure services, including Azure Event Hubs, you'll need a subscription. If you do not have an existing Azure account, you may sign up for a free trial or use your MSDN subscriber benefits when you [create an account](https://azure.microsoft.com/).\n\n- **Event Hubs namespace with an Event Hub:** To interact with Azure Event Hubs, you'll also need to have a namespace and Event Hub  available.  If you are not familiar with creating Azure resources, you may wish to follow the step-by-step guide for [creating an Event Hub using the Azure portal](https://docs.microsoft.com/azure/event-hubs/event-hubs-create).  There, you can also find detailed instructions for using the Azure CLI, Azure PowerShell, or Azure Resource Manager (ARM) templates to create an Event Hub.\n\n- **Azure Storage Account:** You'll need to have an Azure Storage Account and create a Azure Blob Storage Block Container to store the checkpoint data with blobs. You may follow the guide [creating an Azure Block Blob Storage Account](https://docs.microsoft.com/azure/storage/blobs/storage-blob-create-account-block-blob).\n\n### Install the package\n\n```\n$ pip install azure-eventhub-checkpointstoreblob\n```\n\n## Key concepts\n\n### Checkpointing\n\nCheckpointing is a process by which readers mark or commit their position within a partition event sequence.\nCheckpointing is the responsibility of the consumer and occurs on a per-partition basis within a consumer group.\nThis responsibility means that for each consumer group, each partition reader must keep track of its current position\nin the event stream, and can inform the service when it considers the data stream complete. If a reader disconnects from\na partition, when it reconnects it begins reading at the checkpoint that was previously submitted by the last reader of\nthat partition in that consumer group. When the reader connects, it passes the offset to the event hub to specify the\nlocation at which to start reading. In this way, you can use checkpointing to both mark events as \"complete\" by\ndownstream applications, and to provide resiliency if a failover between readers running on different machines occurs.\nIt is possible to return to older data by specifying a lower offset from this checkpointing process. Through this\nmechanism, checkpointing enables both failover resiliency and event stream replay.\n\n### Offsets & sequence numbers\nBoth offset & sequence number refer to the position of an event within a partition. You can think of them as a\nclient-side cursor. The offset is a byte numbering of the event. The offset/sequence number enables an event consumer\n(reader) to specify a point in the event stream from which they want to begin reading events. You can specify a\ntimestamp such that you receive events enqueued only after the given timestamp. Consumers are responsible for\nstoring their own offset values outside of the Event Hubs service. Within a partition, each event includes an offset,\nsequence number and the timestamp of when it was enqueued.\n\n## Examples\n- [Create an Azure EventHubs `EventHubConsumerClient`](#create-an-eventhubconsumerclient)\n- [Consume events using a `BlobCheckpointStore`](#consume-events-using-a-blobcheckpointstore-to-do-checkpoint)\n\n### Create an `EventHubConsumerClient`\nThe easiest way to create a `EventHubConsumerClient` is to use a connection string.\n```python\nfrom azure.eventhub import EventHubConsumerClient\neventhub_client = EventHubConsumerClient.from_connection_string(\"my_eventhub_namespace_connection_string\", \"my_consumer_group\", eventhub_name=\"my_eventhub\")\n```\nFor other ways of creating a `EventHubConsumerClient`, refer to [EventHubs library](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub) for more details.\n\n### Consume events using a `BlobCheckpointStore` to do checkpoint\n```python\n\nfrom azure.eventhub import EventHubConsumerClient\nfrom azure.eventhub.extensions.checkpointstoreblob import BlobCheckpointStore\n\nconnection_str = '<< CONNECTION STRING FOR THE EVENT HUBS NAMESPACE >>'\nconsumer_group = '<< CONSUMER GROUP >>'\neventhub_name = '<< NAME OF THE EVENT HUB >>'\nstorage_connection_str = '<< CONNECTION STRING OF THE STORAGE >>'\ncontainer_name = '<< STORAGE CONTAINER NAME>>'\n\n\ndef on_event(partition_context, event):\n    # Put your code here.\n    partition_context.update_checkpoint(event)  # Or update_checkpoint every N events for better performance.\n\ndef main():\n    checkpoint_store = BlobCheckpointStore.from_connection_string(\n        storage_connection_str,\n        container_name\n    )\n    client = EventHubConsumerClient.from_connection_string(\n        connection_str,\n        consumer_group,\n        eventhub_name=eventhub_name,\n        checkpoint_store=checkpoint_store,\n    )\n\n    with client:\n        client.receive(on_event)\n\nif __name__ == '__main__':\n    main()\n```\n\n#### Use `BlobCheckpointStore` with a different version of Azure Storage Service API\nSome environments have different versions of Azure Storage Service API.\n`BlobCheckpointStore` by default uses the Storage Service API version 2019-07-07. To use it against a different\nversion, specify `api_version` when you create the `BlobCheckpointStore` object.\n\n\n## Troubleshooting\n\n### General\nEnabling logging will be helpful to do trouble shooting.\n\n### Logging\n\n- Enable `azure.eventhub.extensions.checkpointstoreblob` logger to collect traces from the library.\n- Enable `azure.eventhub` logger to collect traces from the main azure-eventhub library.\n- Enable `azure.eventhub.extensions.checkpointstoreblob._vendor.storage` logger to collect traces from azure storage blob library.\n- Enable `uamqp` logger to collect traces from the underlying uAMQP library.\n- Enable AMQP frame level trace by setting `logging_enable=True` when creating the client.\n\n## Next steps\n\n### More sample code\n\nGet started with our [EventHubs Checkpoint Store samples](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub-checkpointstoreblob/samples).\n\n- [receive_events_using_checkpoint_store.py](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub-checkpointstoreblob/samples/receive_events_using_checkpoint_store.py) - EventHubConsumerClient with blob checkpoint store example\n- [receive_events_using_checkpoint_store_storage_api_version.py](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub-checkpointstoreblob/samples/receive_events_using_checkpoint_store_storage_api_version.py) - EventHubConsumerClient with blob checkpoint store and storage version example\n\n### Documentation\n\nReference documentation is available [here](https://azuresdkdocs.blob.core.windows.net/$web/python/azure-eventhub/latest/azure.eventhub.html#azure.eventhub.CheckpointStore).\n\n### Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the [Issues](https://github.com/Azure/azure-sdk-for-python/issues) section of the project.\n\n## Contributing\n\nThis project welcomes contributions and suggestions.  Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python/sdk/eventhub/azure-eventhub-checkpointstoreblob/README.png)\n",
        "repo_name": "eventhub/azure-eventhub-checkpointstoreblob",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub-checkpointstoreblob",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "[![Build Status](https://dev.azure.com/azure-sdk/public/_apis/build/status/azure-sdk-for-python.client?branchName=main)](https://dev.azure.com/azure-sdk/public/_build/latest?definitionId=46?branchName=main)\n\n# Azure EventHubs Checkpoint Store client library for Python using Tables\n\nAzure EventHubs Checkpoint Store is used for storing checkpoints while processing events from Azure Event Hubs.\nThis Checkpoint Store package works as a plug-in package to `EventHubConsumerClient`. It uses Azure Tables as the persistent store for maintaining checkpoints and partition ownership information.\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 is ending 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Getting started\n\n### Prerequisites\n\n- Python2.7, Python 3.6 or later.\n- **Microsoft Azure Subscription:**  To use Azure services, including Azure Event Hubs, you'll need a subscription. If you do not have an existing Azure account, you may sign up for a free trial or use your MSDN subscriber benefits when you [create an account](https://azure.microsoft.com/).\n\n- **Event Hubs namespace with an Event Hub:** To interact with Azure Event Hubs, you'll also need to have a namespace and Event Hub  available.  If you are not familiar with creating Azure resources, you may wish to follow the step-by-step guide for [creating an Event Hub using the Azure portal](https://docs.microsoft.com/azure/event-hubs/event-hubs-create).  There, you can also find detailed instructions for using the Azure CLI, Azure PowerShell, or Azure Resource Manager (ARM) templates to create an Event Hub.\n\n- **Azure Storage Account:** You'll need to have an Azure Storage Account and create a Azure Table Storage to store the checkpoint data with entities. You may follow the guide [creating an Azure Table Storage Account]\n(https://docs.microsoft.com/azure/storage/tables/table-storage-overview).\n\n# Key concepts\n\nBullet point list of your library's main concepts.\n\n# Examples\n\nExamples of some of the key concepts for your library.\n\n# Troubleshooting\n\nRunning into issues? This section should contain details as to what to do there.\n\n# Next steps\n\nMore sample code should go here, along with links out to the appropriate example tests.\n\n# Contributing\n\nIf you encounter any bugs or have suggestions, please file an issue in the [Issues](<https://github.com/Azure/azure-sdk-for-python/issues>) section of the project.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fsdk%2Feventhub%2Fazure-eventhub-checkpointstoretable%2FREADME.png)\n",
        "repo_name": "eventhub/azure-eventhub-checkpointstoretable",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub-checkpointstoretable",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Azure Event Hubs client library for Python\n\nAzure Event Hubs is a highly scalable publish-subscribe service that can ingest millions of events per second and stream\nthem to multiple consumers. This lets you process and analyze the massive amounts of data produced by your connected\ndevices and applications. Once Event Hubs has collected the data, you can retrieve, transform, and store it by using\nany real-time analytics provider or with batching/storage adapters. If you would like to know more about Azure Event Hubs,\nyou may wish to review: [What is Event Hubs](https://docs.microsoft.com/azure/event-hubs/event-hubs-about)?\n\nThe Azure Event Hubs client library allows for publishing and consuming of Azure Event Hubs events and may be used to:\n\n- Emit telemetry about your application for business intelligence and diagnostic purposes.\n- Publish facts about the state of your application which interested parties may observe and use as a trigger for taking action.\n- Observe interesting operations and interactions happening within your business or other ecosystem, allowing loosely coupled systems to interact without the need to bind them together.\n- Receive events from one or more publishers, transform them to better meet the needs of your ecosystem, then publish the transformed events to a new stream for consumers to observe.\n\n[Source code](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub/)\n| [Package (PyPi)](https://pypi.org/project/azure-eventhub/)\n| [Package (Conda)](https://anaconda.org/microsoft/azure-eventhub/)\n| [API reference documentation][api_reference]\n| [Product documentation](https://docs.microsoft.com/azure/event-hubs/)\n| [Samples](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/eventhub/azure-eventhub/samples)\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7 or later.\n- **Microsoft Azure Subscription:**  To use Azure services, including Azure Event Hubs, you'll need a subscription.\nIf you do not have an existing Azure account, you may sign up for a free trial or use your MSDN subscriber benefits when you [create an account](https://account.windowsazure.com/Home/Index).\n\n- **Event Hubs namespace with an Event Hub:** To interact with Azure Event Hubs, you'll also need to have a namespace and Event Hub  available.\nIf you are not familiar with creating Azure resources, you may wish to follow the step-by-step guide\nfor [creating an Event Hub using the Azure portal](https://docs.microsoft.com/azure/event-hubs/event-hubs-create).\nThere, you can also find detailed instructions for using the Azure CLI, Azure PowerShell, or Azure Resource Manager (ARM) templates to create an Event Hub.\n\n### Install the package\n\nInstall the Azure Event Hubs client library for Python with pip:\n\n```\n$ pip install azure-eventhub\n```\n\n### Authenticate the client\n\nInteraction with Event Hubs starts with an instance of EventHubConsumerClient or EventHubProducerClient class. You need either the host name, SAS/AAD credential and event hub name or a connection string to instantiate the client object.\n\n**[Create client from connection string:](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub/samples/sync_samples/connection_string_authentication.py)**\n\nFor the Event Hubs client library to interact with an Event Hub, the easiest means is to use a connection string, which is created automatically when creating an Event Hubs namespace.\nIf you aren't familiar with shared access policies in Azure, you may wish to follow the step-by-step guide to [get an Event Hubs connection string](https://docs.microsoft.com/azure/event-hubs/event-hubs-get-connection-string).\n\n- The `from_connection_string` method takes the connection string of the form\n`Endpoint=sb://<yournamespace>.servicebus.windows.net/;SharedAccessKeyName=<yoursharedaccesskeyname>;SharedAccessKey=<yoursharedaccesskey>` and\nentity name to your Event Hub instance. You can get the connection string from the [Azure portal](https://docs.microsoft.com/azure/event-hubs/event-hubs-get-connection-string#get-connection-string-from-the-portal).\n\n**[Create client using the azure-identity library:](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub/samples/sync_samples/client_identity_authentication.py)**\n\nAlternately, one can use a Credential object to authenticate via AAD with the azure-identity package.\n\n- This constructor demonstrated in the sample linked above takes the host name and entity name of your Event Hub instance and credential that implements the\n[TokenCredential](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/azure/core/credentials.py)\nprotocol. There are implementations of the `TokenCredential` protocol available in the\n[azure-identity package](https://pypi.org/project/azure-identity/). The host name is of the format `<yournamespace.servicebus.windows.net>`.\n- To use the credential types provided by `azure-identity`, please install the package:\n```pip install azure-identity```\n- Additionally, to use the async API,  you must first install an async transport, such as [`aiohttp`](https://pypi.org/project/aiohttp/):\n```pip install aiohttp```\n- When using Azure Active Directory, your principal must be assigned a role which allows access to Event Hubs, such as the\nAzure Event Hubs Data Owner role. For more information about using Azure Active Directory authorization with Event Hubs,\nplease refer to [the associated documentation](https://docs.microsoft.com/azure/event-hubs/authorize-access-azure-active-directory).\n\n## Key concepts\n\n- An **EventHubProducerClient** is a source of telemetry data, diagnostics information, usage logs, or other log data,\nas part of an embedded device solution, a mobile device application, a game title running on a console or other device,\nsome client or server based business solution, or a web site.\n\n- An **EventHubConsumerClient** picks up such information from the Event Hub and processes it. Processing may involve aggregation,\ncomplex computation, and filtering. Processing may also involve distribution or storage of the information in a raw or transformed fashion.\nEvent Hub consumers are often robust and high-scale platform infrastructure parts with built-in analytics capabilities,\nlike Azure Stream Analytics, Apache Spark, or Apache Storm.\n\n- A **partition** is an ordered sequence of events that is held in an Event Hub. Azure Event Hubs provides message streaming\nthrough a partitioned consumer pattern in which each consumer only reads a specific subset, or partition, of the message stream.\nAs newer events arrive, they are added to the end of this sequence. The number of partitions is specified at the time an Event Hub is created and cannot be changed.\n\n- A **consumer group** is a view of an entire Event Hub. Consumer groups enable multiple consuming applications to each\nhave a separate view of the event stream, and to read the stream independently at their own pace and from their own position.\nThere can be at most 5 concurrent readers on a partition per consumer group; however it is recommended that there is only\none active consumer for a given partition and consumer group pairing. Each active reader receives all of the events from\nits partition; if there are multiple readers on the same partition, then they will receive duplicate events.\n\nFor more concepts and deeper discussion, see: [Event Hubs Features](https://docs.microsoft.com/azure/event-hubs/event-hubs-features).\nAlso, the concepts for AMQP are well documented in [OASIS Advanced Messaging Queuing Protocol (AMQP) Version 1.0](https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-overview-v1.0-os.html).\n\n## Examples\n\nThe following sections provide several code snippets covering some of the most common Event Hubs tasks, including:\n\n- [Inspect an Event Hub](#inspect-an-event-hub)\n- [Publish events to an Event Hub](#publish-events-to-an-event-hub)\n- [Consume events from an Event Hub](#consume-events-from-an-event-hub)\n- [Consume events from an Event Hub in batches](#consume-events-from-an-event-hub-in-batches)\n- [Publish events to an Event Hub asynchronously](#publish-events-to-an-event-hub-asynchronously)\n- [Consume events from an Event Hub asynchronously](#consume-events-from-an-event-hub-asynchronously)\n- [Consume events from an Event Hub in batches asynchronously](#consume-events-from-an-event-hub-in-batches-asynchronously)\n- [Consume events and save checkpoints using a checkpoint store](#consume-events-and-save-checkpoints-using-a-checkpoint-store)\n- [Use EventHubConsumerClient to work with IoT Hub](#use-eventhubconsumerclient-to-work-with-iot-hub)\n\n### Inspect an Event Hub\n\nGet the partition ids of an Event Hub.\n\n<!-- SNIPPET:connection_string_authentication.connection_string_authentication -->\n\n```python\nimport os\nfrom azure.eventhub import EventHubConsumerClient\n\nCONNECTION_STR = os.environ[\"EVENT_HUB_CONN_STR\"]\nEVENTHUB_NAME = os.environ['EVENT_HUB_NAME']\n\nconsumer_client = EventHubConsumerClient.from_connection_string(\n    conn_str=CONNECTION_STR,\n    consumer_group='$Default',\n    eventhub_name=EVENTHUB_NAME,\n)\n\nwith consumer_client:\n    pass # consumer_client is now ready to be used.\n```\n\n<!-- END SNIPPET -->\n\n### Publish events to an Event Hub\n\nUse the `create_batch` method on `EventHubProducerClient` to create an `EventDataBatch` object which can then be sent using the `send_batch` method.\nEvents may be added to the `EventDataBatch` using the `add` method until the maximum batch size limit in bytes has been reached.\n\n<!-- SNIPPET:send.send_event_data_batch -->\n\n```python\ndef send_event_data_batch(producer):\n    # Without specifying partition_id or partition_key\n    # the events will be distributed to available partitions via round-robin.\n    event_data_batch = producer.create_batch()\n    event_data_batch.add(EventData('Single message'))\n    producer.send_batch(event_data_batch)\n```\n\n<!-- END SNIPPET -->\n\n### Consume events from an Event Hub\n\nThere are multiple ways to consume events from an EventHub.  To simply trigger a callback when an event is received,\nthe `EventHubConsumerClient.receive` method will be of use as follows:\n\n```python\nimport logging\nfrom azure.eventhub import EventHubConsumerClient\n\nconnection_str = '<< CONNECTION STRING FOR THE EVENT HUBS NAMESPACE >>'\nconsumer_group = '<< CONSUMER GROUP >>'\neventhub_name = '<< NAME OF THE EVENT HUB >>'\nclient = EventHubConsumerClient.from_connection_string(connection_str, consumer_group, eventhub_name=eventhub_name)\n\nlogger = logging.getLogger(\"azure.eventhub\")\nlogging.basicConfig(level=logging.INFO)\n\ndef on_event(partition_context, event):\n    logger.info(\"Received event from partition {}\".format(partition_context.partition_id))\n    partition_context.update_checkpoint(event)\n\nwith client:\n    client.receive(\n        on_event=on_event,\n        starting_position=\"-1\",  # \"-1\" is from the beginning of the partition.\n    )\n    # receive events from specified partition:\n    # client.receive(on_event=on_event, partition_id='0')\n```\n\n### Consume events from an Event Hub in batches\n\nWhereas the above sample triggers the callback for each message as it is received, the following sample\ntriggers the callback on a batch of events, attempting to receive a number at a time.\n\n```python\nimport logging\nfrom azure.eventhub import EventHubConsumerClient\n\nconnection_str = '<< CONNECTION STRING FOR THE EVENT HUBS NAMESPACE >>'\nconsumer_group = '<< CONSUMER GROUP >>'\neventhub_name = '<< NAME OF THE EVENT HUB >>'\nclient = EventHubConsumerClient.from_connection_string(connection_str, consumer_group, eventhub_name=eventhub_name)\n\nlogger = logging.getLogger(\"azure.eventhub\")\nlogging.basicConfig(level=logging.INFO)\n\ndef on_event_batch(partition_context, events):\n    logger.info(\"Received event from partition {}\".format(partition_context.partition_id))\n    partition_context.update_checkpoint()\n\nwith client:\n    client.receive_batch(\n        on_event_batch=on_event_batch,\n        starting_position=\"-1\",  # \"-1\" is from the beginning of the partition.\n    )\n    # receive events from specified partition:\n    # client.receive_batch(on_event_batch=on_event_batch, partition_id='0')\n```\n\n### Publish events to an Event Hub asynchronously\n\nUse the `create_batch` method on `EventHubProducer` to create an `EventDataBatch` object which can then be sent using the `send_batch` method.\nEvents may be added to the `EventDataBatch` using the `add` method until the maximum batch size limit in bytes has been reached.\n```python\nimport asyncio\nfrom azure.eventhub.aio import EventHubProducerClient  # The package name suffixed with \".aio\" for async\nfrom azure.eventhub import EventData\n\nconnection_str = '<< CONNECTION STRING FOR THE EVENT HUBS NAMESPACE >>'\nconsumer_group = '<< CONSUMER GROUP >>'\neventhub_name = '<< NAME OF THE EVENT HUB >>'\n\nasync def create_batch(client):\n    event_data_batch = await client.create_batch()\n    can_add = True\n    while can_add:\n        try:\n            event_data_batch.add(EventData('Message inside EventBatchData'))\n        except ValueError:\n            can_add = False  # EventDataBatch object reaches max_size.\n    return event_data_batch\n\nasync def send():\n    client = EventHubProducerClient.from_connection_string(connection_str, eventhub_name=eventhub_name)\n    batch_data = await create_batch(client)\n    async with client:\n        await client.send_batch(batch_data)\n\nif __name__ == '__main__':\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(send())\n```\n\n### Consume events from an Event Hub asynchronously\n\nThis SDK supports both synchronous and asyncio based code.  To receive as demonstrated in the samples above, but within\naio, one would need the following:\n\n```python\nimport logging\nimport asyncio\nfrom azure.eventhub.aio import EventHubConsumerClient\n\nconnection_str = '<< CONNECTION STRING FOR THE EVENT HUBS NAMESPACE >>'\nconsumer_group = '<< CONSUMER GROUP >>'\neventhub_name = '<< NAME OF THE EVENT HUB >>'\n\nlogger = logging.getLogger(\"azure.eventhub\")\nlogging.basicConfig(level=logging.INFO)\n\nasync def on_event(partition_context, event):\n    logger.info(\"Received event from partition {}\".format(partition_context.partition_id))\n    await partition_context.update_checkpoint(event)\n\nasync def receive():\n    client = EventHubConsumerClient.from_connection_string(connection_str, consumer_group, eventhub_name=eventhub_name)\n    async with client:\n        await client.receive(\n            on_event=on_event,\n            starting_position=\"-1\",  # \"-1\" is from the beginning of the partition.\n        )\n        # receive events from specified partition:\n        # await client.receive(on_event=on_event, partition_id='0')\n\nif __name__ == '__main__':\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(receive())\n```\n\n### Consume events from an Event Hub in batches asynchronously\n\nAll synchronous functions are supported in aio as well.  As demonstrated above for synchronous batch receipt, one can accomplish\nthe same within asyncio as follows:\n\n```python\nimport logging\nimport asyncio\nfrom azure.eventhub.aio import EventHubConsumerClient\n\nconnection_str = '<< CONNECTION STRING FOR THE EVENT HUBS NAMESPACE >>'\nconsumer_group = '<< CONSUMER GROUP >>'\neventhub_name = '<< NAME OF THE EVENT HUB >>'\n\nlogger = logging.getLogger(\"azure.eventhub\")\nlogging.basicConfig(level=logging.INFO)\n\nasync def on_event_batch(partition_context, events):\n    logger.info(\"Received event from partition {}\".format(partition_context.partition_id))\n    await partition_context.update_checkpoint()\n\nasync def receive_batch():\n    client = EventHubConsumerClient.from_connection_string(connection_str, consumer_group, eventhub_name=eventhub_name)\n    async with client:\n        await client.receive_batch(\n            on_event_batch=on_event_batch,\n            starting_position=\"-1\",  # \"-1\" is from the beginning of the partition.\n        )\n        # receive events from specified partition:\n        # await client.receive_batch(on_event_batch=on_event_batch, partition_id='0')\n\nif __name__ == '__main__':\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(receive_batch())\n```\n\n### Consume events and save checkpoints using a checkpoint store\n\n`EventHubConsumerClient` is a high level construct which allows you to receive events from multiple partitions at once\nand load balance with other consumers using the same Event Hub and consumer group.\n\nThis also allows the user to track progress when events are processed using checkpoints.\n\nA checkpoint is meant to represent the last successfully processed event by the user from a particular partition of\na consumer group in an Event Hub instance. The `EventHubConsumerClient` uses an instance of `CheckpointStore` to update checkpoints\nand to store the relevant information required by the load balancing algorithm.\n\nSearch pypi with the prefix `azure-eventhub-checkpointstore` to\nfind packages that support this and use the `CheckpointStore` implementation from one such package. Please note that both sync and async libraries are provided.\n\nIn the below example, we create an instance of `EventHubConsumerClient` and use a `BlobCheckpointStore`. You need\nto [create an Azure Storage account](https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-portal)\nand a [Blob Container](https://docs.microsoft.com/azure/storage/blobs/storage-quickstart-blobs-portal#create-a-container) to run the code.\n\n[Azure Blob Storage Checkpoint Store Async](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub-checkpointstoreblob-aio)\nand [Azure Blob Storage Checkpoint Store Sync](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub-checkpointstoreblob)\nare one of the `CheckpointStore` implementations we provide that applies Azure Blob Storage as the persistent store.\n\n\n```python\nimport asyncio\n\nfrom azure.eventhub.aio import EventHubConsumerClient\nfrom azure.eventhub.extensions.checkpointstoreblobaio import BlobCheckpointStore\n\nconnection_str = '<< CONNECTION STRING FOR THE EVENT HUBS NAMESPACE >>'\nconsumer_group = '<< CONSUMER GROUP >>'\neventhub_name = '<< NAME OF THE EVENT HUB >>'\nstorage_connection_str = '<< CONNECTION STRING FOR THE STORAGE >>'\ncontainer_name = '<<NAME OF THE BLOB CONTAINER>>'\n\nasync def on_event(partition_context, event):\n    # do something\n    await partition_context.update_checkpoint(event)  # Or update_checkpoint every N events for better performance.\n\nasync def receive(client):\n    await client.receive(\n        on_event=on_event,\n        starting_position=\"-1\",  # \"-1\" is from the beginning of the partition.\n    )\n\nasync def main():\n    checkpoint_store = BlobCheckpointStore.from_connection_string(storage_connection_str, container_name)\n    client = EventHubConsumerClient.from_connection_string(\n        connection_str,\n        consumer_group,\n        eventhub_name=eventhub_name,\n        checkpoint_store=checkpoint_store,  # For load balancing and checkpoint. Leave None for no load balancing\n    )\n    async with client:\n        await receive(client)\n\nif __name__ == '__main__':\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(main())\n```\n\n### Use EventHubConsumerClient to work with IoT Hub\n\nYou can use `EventHubConsumerClient` to work with IoT Hub as well. This is useful for receiving telemetry data of IoT Hub from the\nlinked EventHub. The associated connection string will not have send claims, hence sending events is not possible.\n\nPlease notice that the connection string needs to be for an [Event Hub-compatible endpoint](https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messages-read-builtin),\ne.g. \"Endpoint=sb://my-iothub-namespace-[uid].servicebus.windows.net/;SharedAccessKeyName=my-SA-name;SharedAccessKey=my-SA-key;EntityPath=my-iot-hub-name\"\n\nThere are two ways to get the Event Hubs compatible endpoint:\n- Manually get the \"Built-in endpoints\" of the IoT Hub in Azure Portal and receive from it.\n```python\nfrom azure.eventhub import EventHubConsumerClient\n\nconnection_str = 'Endpoint=sb://my-iothub-namespace-[uid].servicebus.windows.net/;SharedAccessKeyName=my-SA-name;SharedAccessKey=my-SA-key;EntityPath=my-iot-hub-name'\nconsumer_group = '<< CONSUMER GROUP >>'\nclient = EventHubConsumerClient.from_connection_string(connection_str, consumer_group)\n\npartition_ids = client.get_partition_ids()\n```\n- Programmatically retrieve the built-in Event Hubs compatible endpoint.\nRefer to [IoT Hub Connection String Sample](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub/samples/async_samples/iot_hub_connection_string_receive_async.py).\n\n## Troubleshooting\n\nSee the `azure-eventhubs` [troubleshooting guide](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub/TROUBLESHOOTING.md) for details on how to diagnose various failure scenarios.\n\n## Next steps\n\n### More sample code\n\nPlease take a look at the [samples](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub/samples) directory for detailed examples of how to use this library to send and receive events to/from Event Hubs.\n\n### Documentation\n\nReference documentation is available [here](https://azuresdkdocs.blob.core.windows.net/$web/python/azure-eventhub/latest/azure.eventhub.html).\n\n### Schema Registry and Avro Encoder\n\nThe EventHubs SDK integrates nicely with the [Schema Registry][schemaregistry_service] service and [Avro][avro].\nFor more information, please refer to [Schema Registry SDK][schemaregistry_repo] and [Schema Registry Avro Encoder SDK][schemaregistry_avroencoder_repo].\n\n### Pure Python AMQP Transport and Backward Compatibility Support\n\nThe Azure Event Hubs client library is now based on a pure Python AMQP implementation. `uAMQP` has been removed as required dependency.\n\nTo use `uAMQP` as the underlying transport:\n\n1. Install `uamqp` with pip.\n\n```\n$ pip install uamqp \n```\n\n2. Pass `uamqp_transport=True` during client construction.\n\n```python\nfrom azure.eventhub import EventHubProducerClient, EventHubConsumerClient\n\nconnection_str = '<< CONNECTION STRING FOR THE EVENT HUBS NAMESPACE >>'\nconsumer_group = '<< CONSUMER GROUP >>'\neventhub_name = '<< NAME OF THE EVENT HUB >>'\n\nclient = EventHubProducerClient.from_connection_string(\n    connection_str, eventhub_name=eventhub_name, uamqp_transport=True\n)\nclient = EventHubConsumerClient.from_connection_string(\n    connection_str, consumer_group, eventhub_name=eventhub_name, uamqp_transport=True\n)\n```\n\nNote: The `message` attribute on `EventData`/`EventDataBatch`, which previously exposed the `uamqp.Message`, has been deprecated.\n The \"Legacy\" objects returned by `EventData.message`/`EventDataBatch.message` have been introduced to help facilitate the transition.\n\n### Building uAMQP wheel from source\n\nIf [uAMQP](https://pypi.org/project/uamqp/) is intended to be used as the underlying AMQP protocol implementation for `azure-eventhub`,\nuAMQP wheels can be found for most major operating systems.\n\nIf you intend to use `uAMQP` and you're running on a platform for which uAMQP wheels are not provided, please follow\n the [uAMQP Installation](https://github.com/Azure/azure-uamqp-python#installation) guidance to install from source.\n\n### Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the [Issues](https://github.com/Azure/azure-sdk-for-python/issues) section of the project.\n\n## Contributing\n\nThis project welcomes contributions and suggestions.  Most contributions require you to agree to a\nContributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the\nPR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\n[avro]: https://avro.apache.org/\n[api_reference]: https://docs.microsoft.com/python/api/overview/azure/eventhub-readme\n[schemaregistry_service]: https://aka.ms/schemaregistry\n[schemaregistry_repo]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/schemaregistry/azure-schemaregistry\n[schemaregistry_avroencoder_repo]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/schemaregistry/azure-schemaregistry-avroencoder\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python/sdk/eventhub/azure-eventhub/README.png)\n",
        "repo_name": "eventhub/azure-eventhub",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Event Hub Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-eventhub\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.eventhub import EventHubManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = EventHubManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\nCode samples for this package can be found at:\n- [Search Event Hub Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com\n- [Azure Python Mgmt SDK Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-eventhub%2FREADME.png)\n",
        "repo_name": "eventhub/azure-mgmt-eventhub",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-mgmt-eventhub",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Extended Location Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-extendedlocation\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.extendedlocation import CustomLocations\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = CustomLocations(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\n\nCode samples for this package can be found at [Extended Location Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com and [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-extendedlocation%2FREADME.png)\n",
        "repo_name": "extendedlocation/azure-mgmt-extendedlocation",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/extendedlocation/azure-mgmt-extendedlocation",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Fluid Relay Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/)\nCode samples for this package can be found at [Fluid Relay Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-fluidrelay%2FREADME.png)\n",
        "repo_name": "fluidrelay/azure-mgmt-fluidrelay",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/fluidrelay/azure-mgmt-fluidrelay",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Azure Form Recognizer client library for Python\n\nAzure Form Recognizer is a cloud service that uses machine learning to analyze text and structured data from your documents. It includes the following main features:\n\n- Layout - Extract content and structure (ex. words, selection marks, tables) from documents.\n- Document - Analyze key-value pairs in addition to general layout from documents.\n- Read - Read page information and detected languages from documents.\n- Prebuilt - Extract common field values from select document types (ex. receipts, invoices, business cards, ID documents, U.S. W-2 tax documents, among others) using prebuilt models.\n- Custom - Build custom models from your own data to extract tailored field values in addition to general layout from documents.\n- Classifiers - Build custom classification models that combine layout and language features to accurately detect and identify documents you process within your application.\n\n[Source code][python-fr-src]\n| [Package (PyPI)][python-fr-pypi]\n| [Package (Conda)](https://anaconda.org/microsoft/azure-ai-formrecognizer/)\n| [API reference documentation][python-fr-ref-docs]\n| [Product documentation][python-fr-product-docs]\n| [Samples][python-fr-samples]\n\n\n## Getting started\n\n### Prerequisites\n\n* Python 3.7 or later is required to use this package.\n* You must have an [Azure subscription][azure_subscription] and a\n[Cognitive Services or Form Recognizer resource][FR_or_CS_resource] to use this package.\n\n### Install the package\n\nInstall the Azure Form Recognizer client library for Python with [pip][pip]:\n\n```bash\npip install azure-ai-formrecognizer --pre\n```\n\n> Note: This version of the client library defaults to the `2023-02-28-preview` version of the service.\n\nThis table shows the relationship between SDK versions and supported API versions of the service:\n\n|SDK version|Supported API version of service\n|-|-\n|3.3.0bX - Latest beta release | 2.0, 2.1, 2022-08-31, 2023-02-28-preview (default)\n|3.2.X - Latest GA release | 2.0, 2.1, 2022-08-31 (default)\n|3.1.X| 2.0, 2.1 (default)\n|3.0.0| 2.0\n\n> Note: Starting with version `3.2.X`, a new set of clients were introduced to leverage the newest features\n> of the Form Recognizer service. Please see the [Migration Guide][migration-guide] for detailed instructions on how to update application\n> code from client library version `3.1.X` or lower to the latest version. Additionally, see the [Changelog][changelog] for more detailed information.\n> The below table describes the relationship of each client and its supported API version(s):\n\n|API version|Supported clients\n|-|-\n|2023-02-28-preview | DocumentAnalysisClient and DocumentModelAdministrationClient\n|2022-08-31 | DocumentAnalysisClient and DocumentModelAdministrationClient\n|2.1 | FormRecognizerClient and FormTrainingClient\n|2.0 | FormRecognizerClient and FormTrainingClient\n\n#### Create a Cognitive Services or Form Recognizer resource\n\nForm Recognizer supports both [multi-service and single-service access][cognitive_resource_portal]. Create a Cognitive Services resource if you plan to access multiple cognitive services under a single endpoint/key. For Form Recognizer access only, create a Form Recognizer resource. Please note that you will need a single-service resource if you intend to use [Azure Active Directory authentication](#create-the-client-with-an-azure-active-directory-credential).\n\nYou can create either resource using: \n\n* Option 1: [Azure Portal][cognitive_resource_portal].\n* Option 2: [Azure CLI][cognitive_resource_cli].\n\nBelow is an example of how you can create a Form Recognizer resource using the CLI:\n\n```PowerShell\n# Create a new resource group to hold the form recognizer resource\n# if using an existing resource group, skip this step\naz group create --name <your-resource-name> --location <location>\n```\n\n```PowerShell\n# Create form recognizer\naz cognitiveservices account create \\\n    --name <your-resource-name> \\\n    --resource-group <your-resource-group-name> \\\n    --kind FormRecognizer \\\n    --sku <sku> \\\n    --location <location> \\\n    --yes\n```\n\nFor more information about creating the resource or how to get the location and sku information see [here][cognitive_resource_cli].\n\n### Authenticate the client\n\nIn order to interact with the Form Recognizer service, you will need to create an instance of a client.\nAn **endpoint** and **credential** are necessary to instantiate the client object.\n\n#### Get the endpoint\n\nYou can find the endpoint for your Form Recognizer resource using the\n[Azure Portal][azure_portal_get_endpoint]\nor [Azure CLI][azure_cli_endpoint_lookup]:\n\n```bash\n# Get the endpoint for the form recognizer resource\naz cognitiveservices account show --name \"resource-name\" --resource-group \"resource-group-name\" --query \"properties.endpoint\"\n```\n\nEither a regional endpoint or a custom subdomain can be used for authentication. They are formatted as follows:\n\n```\nRegional endpoint: https://<region>.api.cognitive.microsoft.com/\nCustom subdomain: https://<resource-name>.cognitiveservices.azure.com/\n```\n\nA regional endpoint is the same for every resource in a region. A complete list of supported regional endpoints can be consulted [here][regional_endpoints]. Please note that regional endpoints do not support AAD authentication.\n\nA custom subdomain, on the other hand, is a name that is unique to the Form Recognizer resource. They can only be used by [single-service resources][cognitive_resource_portal].\n\n#### Get the API key\n\nThe API key can be found in the [Azure Portal][azure_portal] or by running the following Azure CLI command:\n\n```bash\naz cognitiveservices account keys list --name \"<resource-name>\" --resource-group \"<resource-group-name>\"\n```\n\n#### Create the client with AzureKeyCredential\n\nTo use an [API key][cognitive_authentication_api_key] as the `credential` parameter,\npass the key as a string into an instance of [AzureKeyCredential][azure-key-credential].\n\n```python\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.formrecognizer import DocumentAnalysisClient\n\nendpoint = \"https://<my-custom-subdomain>.cognitiveservices.azure.com/\"\ncredential = AzureKeyCredential(\"<api_key>\")\ndocument_analysis_client = DocumentAnalysisClient(endpoint, credential)\n```\n\n#### Create the client with an Azure Active Directory credential\n\n`AzureKeyCredential` authentication is used in the examples in this getting started guide, but you can also\nauthenticate with Azure Active Directory using the [azure-identity][azure_identity] library.\nNote that regional endpoints do not support AAD authentication. Create a [custom subdomain][custom_subdomain]\nname for your resource in order to use this type of authentication.\n\nTo use the [DefaultAzureCredential][default_azure_credential] type shown below, or other credential types provided\nwith the Azure SDK, please install the `azure-identity` package:\n\n```pip install azure-identity```\n\nYou will also need to [register a new AAD application and grant access][register_aad_app] to Form Recognizer by assigning the `\"Cognitive Services User\"` role to your service principal.\n\nOnce completed, set the values of the client ID, tenant ID, and client secret of the AAD application as environment variables:\n`AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\n<!-- SNIPPET:sample_authentication.create_da_client_with_aad -->\n\n```python\n\"\"\"DefaultAzureCredential will use the values from these environment\nvariables: AZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET\n\"\"\"\nfrom azure.ai.formrecognizer import DocumentAnalysisClient\nfrom azure.identity import DefaultAzureCredential\n\nendpoint = os.environ[\"AZURE_FORM_RECOGNIZER_ENDPOINT\"]\ncredential = DefaultAzureCredential()\n\ndocument_analysis_client = DocumentAnalysisClient(endpoint, credential)\n```\n\n<!-- END SNIPPET -->\n\n## Key concepts\n\n### DocumentAnalysisClient\n\n`DocumentAnalysisClient` provides operations for analyzing input documents using prebuilt and custom models through the `begin_analyze_document` and `begin_analyze_document_from_url` APIs.\nUse the `model_id` parameter to select the type of model for analysis. See a full list of supported models [here][fr-models]. \nThe `DocumentAnalysisClient` also provides operations for classifying documents through the `begin_classify_document` and `begin_classify_document_from_url` APIs. \nCustom classification models can classify each page in an input file to identify the document(s) within and can also identify multiple documents or multiple instances of a single document within an input file.\n\nSample code snippets are provided to illustrate using a DocumentAnalysisClient [here](#examples \"Examples\").\nMore information about analyzing documents, including supported features, locales, and document types can be found in the [service documentation][fr-models].\n\n### DocumentModelAdministrationClient\n\n`DocumentModelAdministrationClient` provides operations for:\n\n- Building custom models to analyze specific fields you specify by labeling your custom documents. A `DocumentModelDetails` is returned indicating the document type(s) the model can analyze, as well as the estimated confidence for each field. See the [service documentation][fr-build-model] for a more detailed explanation.\n- Creating a composed model from a collection of existing models.\n- Managing models created in your account.\n- Listing operations or getting a specific model operation created within the last 24 hours.\n- Copying a custom model from one Form Recognizer resource to another.\n- Build and manage a custom classification model to classify the documents you process within your application.\n\nPlease note that models can also be built using a graphical user interface such as [Form Recognizer Studio][fr-studio].\n\nSample code snippets are provided to illustrate using a DocumentModelAdministrationClient [here](#examples \"Examples\").\n\n### Long-running operations\n\nLong-running operations are operations which consist of an initial request sent to the service to start an operation,\nfollowed by polling the service at intervals to determine whether the operation has completed or failed, and if it has\nsucceeded, to get the result.\n\nMethods that analyze documents, build models, or copy/compose models are modeled as long-running operations.\nThe client exposes a `begin_<method-name>` method that returns an `LROPoller` or `AsyncLROPoller`. Callers should wait\nfor the operation to complete by calling `result()` on the poller object returned from the `begin_<method-name>` method.\nSample code snippets are provided to illustrate using long-running operations [below](#examples \"Examples\").\n\n## Examples\n\nThe following section provides several code snippets covering some of the most common Form Recognizer tasks, including:\n\n* [Extract Layout](#extract-layout \"Extract Layout\")\n* [Using the General Document Model](#using-the-general-document-model \"Using the General Document Model\")\n* [Using Prebuilt Models](#using-prebuilt-models \"Using Prebuilt Models\")\n* [Build a Custom Model](#build-a-custom-model \"Build a custom model\")\n* [Analyze Documents Using a Custom Model](#analyze-documents-using-a-custom-model \"Analyze Documents Using a Custom Model\")\n* [Manage Your Models](#manage-your-models \"Manage Your Models\")\n* [Classify Documents][classify_sample]\n\n### Extract Layout\n\nExtract text, selection marks, text styles, and table structures, along with their bounding region coordinates, from documents.\n\n```python\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.formrecognizer import DocumentAnalysisClient\n\nendpoint = os.environ[\"AZURE_FORM_RECOGNIZER_ENDPOINT\"]\nkey = os.environ[\"AZURE_FORM_RECOGNIZER_KEY\"]\n\ndocument_analysis_client = DocumentAnalysisClient(\n    endpoint=endpoint, credential=AzureKeyCredential(key)\n)\nwith open(path_to_sample_documents, \"rb\") as f:\n    poller = document_analysis_client.begin_analyze_document(\n        \"prebuilt-layout\", document=f\n    )\nresult = poller.result()\n\nfor idx, style in enumerate(result.styles):\n    print(\n        \"Document contains {} content\".format(\n            \"handwritten\" if style.is_handwritten else \"no handwritten\"\n        )\n    )\n\nfor page in result.pages:\n    print(\"----Analyzing layout from page #{}----\".format(page.page_number))\n    print(\n        \"Page has width: {} and height: {}, measured with unit: {}\".format(\n            page.width, page.height, page.unit\n        )\n    )\n\n    for line_idx, line in enumerate(page.lines):\n        words = line.get_words()\n        print(\n            \"...Line # {} has word count {} and text '{}' within bounding polygon '{}'\".format(\n                line_idx,\n                len(words),\n                line.content,\n                line.polygon,\n            )\n        )\n\n        for word in words:\n            print(\n                \"......Word '{}' has a confidence of {}\".format(\n                    word.content, word.confidence\n                )\n            )\n\n    for selection_mark in page.selection_marks:\n        print(\n            \"...Selection mark is '{}' within bounding polygon '{}' and has a confidence of {}\".format(\n                selection_mark.state,\n                selection_mark.polygon,\n                selection_mark.confidence,\n            )\n        )\n\nfor table_idx, table in enumerate(result.tables):\n    print(\n        \"Table # {} has {} rows and {} columns\".format(\n            table_idx, table.row_count, table.column_count\n        )\n    )\n    for region in table.bounding_regions:\n        print(\n            \"Table # {} location on page: {} is {}\".format(\n                table_idx,\n                region.page_number,\n                region.polygon,\n            )\n        )\n    for cell in table.cells:\n        print(\n            \"...Cell[{}][{}] has content '{}'\".format(\n                cell.row_index,\n                cell.column_index,\n                cell.content,\n            )\n        )\n        for region in cell.bounding_regions:\n            print(\n                \"...content on page {} is within bounding polygon '{}'\".format(\n                    region.page_number,\n                    region.polygon,\n                )\n            )\n\nprint(\"----------------------------------------\")\n```\n\n### Using the General Document Model\n\nAnalyze key-value pairs, tables, styles, and selection marks from documents using the general document model provided by the Form Recognizer service.\nSelect the General Document Model by passing `model_id=\"prebuilt-document\"` into the `begin_analyze_document` method:\n\n```python\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.formrecognizer import DocumentAnalysisClient\n\nendpoint = os.environ[\"AZURE_FORM_RECOGNIZER_ENDPOINT\"]\nkey = os.environ[\"AZURE_FORM_RECOGNIZER_KEY\"]\n\ndocument_analysis_client = DocumentAnalysisClient(\n    endpoint=endpoint, credential=AzureKeyCredential(key)\n)\nwith open(path_to_sample_documents, \"rb\") as f:\n    poller = document_analysis_client.begin_analyze_document(\n        \"prebuilt-document\", document=f\n    )\nresult = poller.result()\n\nfor style in result.styles:\n    if style.is_handwritten:\n        print(\"Document contains handwritten content: \")\n        print(\",\".join([result.content[span.offset:span.offset + span.length] for span in style.spans]))\n\nprint(\"----Key-value pairs found in document----\")\nfor kv_pair in result.key_value_pairs:\n    if kv_pair.key:\n        print(\n                \"Key '{}' found within '{}' bounding regions\".format(\n                    kv_pair.key.content,\n                    kv_pair.key.bounding_regions,\n                )\n            )\n    if kv_pair.value:\n        print(\n                \"Value '{}' found within '{}' bounding regions\\n\".format(\n                    kv_pair.value.content,\n                    kv_pair.value.bounding_regions,\n                )\n            )\n\nfor page in result.pages:\n    print(\"----Analyzing document from page #{}----\".format(page.page_number))\n    print(\n        \"Page has width: {} and height: {}, measured with unit: {}\".format(\n            page.width, page.height, page.unit\n        )\n    )\n\n    for line_idx, line in enumerate(page.lines):\n        words = line.get_words()\n        print(\n            \"...Line # {} has {} words and text '{}' within bounding polygon '{}'\".format(\n                line_idx,\n                len(words),\n                line.content,\n                line.polygon,\n            )\n        )\n\n        for word in words:\n            print(\n                \"......Word '{}' has a confidence of {}\".format(\n                    word.content, word.confidence\n                )\n            )\n\n    for selection_mark in page.selection_marks:\n        print(\n            \"...Selection mark is '{}' within bounding polygon '{}' and has a confidence of {}\".format(\n                selection_mark.state,\n                selection_mark.polygon,\n                selection_mark.confidence,\n            )\n        )\n\nfor table_idx, table in enumerate(result.tables):\n    print(\n        \"Table # {} has {} rows and {} columns\".format(\n            table_idx, table.row_count, table.column_count\n        )\n    )\n    for region in table.bounding_regions:\n        print(\n            \"Table # {} location on page: {} is {}\".format(\n                table_idx,\n                region.page_number,\n                region.polygon,\n            )\n        )\n    for cell in table.cells:\n        print(\n            \"...Cell[{}][{}] has content '{}'\".format(\n                cell.row_index,\n                cell.column_index,\n                cell.content,\n            )\n        )\n        for region in cell.bounding_regions:\n            print(\n                \"...content on page {} is within bounding polygon '{}'\\n\".format(\n                    region.page_number,\n                    region.polygon,\n                )\n            )\nprint(\"----------------------------------------\")\n```\n\n- Read more about the features provided by the `prebuilt-document` model [here][service_prebuilt_document].\n\n### Using Prebuilt Models\n\nExtract fields from select document types such as receipts, invoices, business cards, identity documents, and U.S. W-2 tax documents using prebuilt models provided by the Form Recognizer service.\n\nFor example, to analyze fields from a sales receipt, use the prebuilt receipt model provided by passing `model_id=\"prebuilt-receipt\"` into the `begin_analyze_document` method:\n\n<!-- SNIPPET:sample_analyze_receipts.analyze_receipts -->\n\n```python\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.formrecognizer import DocumentAnalysisClient\n\nendpoint = os.environ[\"AZURE_FORM_RECOGNIZER_ENDPOINT\"]\nkey = os.environ[\"AZURE_FORM_RECOGNIZER_KEY\"]\n\ndocument_analysis_client = DocumentAnalysisClient(\n    endpoint=endpoint, credential=AzureKeyCredential(key)\n)\nwith open(path_to_sample_documents, \"rb\") as f:\n    poller = document_analysis_client.begin_analyze_document(\n        \"prebuilt-receipt\", document=f, locale=\"en-US\"\n    )\nreceipts = poller.result()\n\nfor idx, receipt in enumerate(receipts.documents):\n    print(f\"--------Analysis of receipt #{idx + 1}--------\")\n    print(f\"Receipt type: {receipt.doc_type if receipt.doc_type else 'N/A'}\")\n    merchant_name = receipt.fields.get(\"MerchantName\")\n    if merchant_name:\n        print(\n            f\"Merchant Name: {merchant_name.value} has confidence: \"\n            f\"{merchant_name.confidence}\"\n        )\n    transaction_date = receipt.fields.get(\"TransactionDate\")\n    if transaction_date:\n        print(\n            f\"Transaction Date: {transaction_date.value} has confidence: \"\n            f\"{transaction_date.confidence}\"\n        )\n    if receipt.fields.get(\"Items\"):\n        print(\"Receipt items:\")\n        for idx, item in enumerate(receipt.fields.get(\"Items\").value):\n            print(f\"...Item #{idx + 1}\")\n            item_description = item.value.get(\"Description\")\n            if item_description:\n                print(\n                    f\"......Item Description: {item_description.value} has confidence: \"\n                    f\"{item_description.confidence}\"\n                )\n            item_quantity = item.value.get(\"Quantity\")\n            if item_quantity:\n                print(\n                    f\"......Item Quantity: {item_quantity.value} has confidence: \"\n                    f\"{item_quantity.confidence}\"\n                )\n            item_price = item.value.get(\"Price\")\n            if item_price:\n                print(\n                    f\"......Individual Item Price: {item_price.value} has confidence: \"\n                    f\"{item_price.confidence}\"\n                )\n            item_total_price = item.value.get(\"TotalPrice\")\n            if item_total_price:\n                print(\n                    f\"......Total Item Price: {item_total_price.value} has confidence: \"\n                    f\"{item_total_price.confidence}\"\n                )\n    subtotal = receipt.fields.get(\"Subtotal\")\n    if subtotal:\n        print(f\"Subtotal: {subtotal.value} has confidence: {subtotal.confidence}\")\n    tax = receipt.fields.get(\"TotalTax\")\n    if tax:\n        print(f\"Total tax: {tax.value} has confidence: {tax.confidence}\")\n    tip = receipt.fields.get(\"Tip\")\n    if tip:\n        print(f\"Tip: {tip.value} has confidence: {tip.confidence}\")\n    total = receipt.fields.get(\"Total\")\n    if total:\n        print(f\"Total: {total.value} has confidence: {total.confidence}\")\n    print(\"--------------------------------------\")\n```\n\n<!-- END SNIPPET -->\n\nYou are not limited to receipts! There are a few prebuilt models to choose from, each of which has its own set of supported fields. See other supported prebuilt models [here][fr-models].\n\n### Build a Custom Model\n\nBuild a custom model on your own document type. The resulting model can be used to analyze values from the types of documents it was trained on.\nProvide a container SAS URL to your Azure Storage Blob container where you're storing the training documents.\n\nMore details on setting up a container and required file structure can be found in the [service documentation][fr-build-training-set].\n\n<!-- SNIPPET:sample_build_model.build_model -->\n\n```python\nfrom azure.ai.formrecognizer import (\n    DocumentModelAdministrationClient,\n    ModelBuildMode,\n)\nfrom azure.core.credentials import AzureKeyCredential\n\nendpoint = os.environ[\"AZURE_FORM_RECOGNIZER_ENDPOINT\"]\nkey = os.environ[\"AZURE_FORM_RECOGNIZER_KEY\"]\ncontainer_sas_url = os.environ[\"CONTAINER_SAS_URL\"]\n\ndocument_model_admin_client = DocumentModelAdministrationClient(\n    endpoint, AzureKeyCredential(key)\n)\npoller = document_model_admin_client.begin_build_document_model(\n    ModelBuildMode.TEMPLATE,\n    blob_container_url=container_sas_url,\n    description=\"my model description\",\n)\nmodel = poller.result()\n\nprint(f\"Model ID: {model.model_id}\")\nprint(f\"Description: {model.description}\")\nprint(f\"Model created on: {model.created_on}\")\nprint(f\"Model expires on: {model.expires_on}\")\nprint(\"Doc types the model can recognize:\")\nfor name, doc_type in model.doc_types.items():\n    print(\n        f\"Doc Type: '{name}' built with '{doc_type.build_mode}' mode which has the following fields:\"\n    )\n    for field_name, field in doc_type.field_schema.items():\n        print(\n            f\"Field: '{field_name}' has type '{field['type']}' and confidence score \"\n            f\"{doc_type.field_confidence[field_name]}\"\n        )\n```\n\n<!-- END SNIPPET -->\n\n### Analyze Documents Using a Custom Model\n\nAnalyze document fields, tables, selection marks, and more. These models are trained with your own data, so they're tailored to your documents.\nFor best results, you should only analyze documents of the same document type that the custom model was built with.\n\n<!-- SNIPPET:sample_analyze_custom_documents.analyze_custom_documents -->\n\n```python\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.formrecognizer import DocumentAnalysisClient\n\nendpoint = os.environ[\"AZURE_FORM_RECOGNIZER_ENDPOINT\"]\nkey = os.environ[\"AZURE_FORM_RECOGNIZER_KEY\"]\nmodel_id = os.getenv(\"CUSTOM_BUILT_MODEL_ID\", custom_model_id)\n\ndocument_analysis_client = DocumentAnalysisClient(\n    endpoint=endpoint, credential=AzureKeyCredential(key)\n)\n\n# Make sure your document's type is included in the list of document types the custom model can analyze\nwith open(path_to_sample_documents, \"rb\") as f:\n    poller = document_analysis_client.begin_analyze_document(\n        model_id=model_id, document=f\n    )\nresult = poller.result()\n\nfor idx, document in enumerate(result.documents):\n    print(f\"--------Analyzing document #{idx + 1}--------\")\n    print(f\"Document has type {document.doc_type}\")\n    print(f\"Document has document type confidence {document.confidence}\")\n    print(f\"Document was analyzed with model with ID {result.model_id}\")\n    for name, field in document.fields.items():\n        field_value = field.value if field.value else field.content\n        print(\n            f\"......found field of type '{field.value_type}' with value '{field_value}' and with confidence {field.confidence}\"\n        )\n\n# iterate over tables, lines, and selection marks on each page\nfor page in result.pages:\n    print(f\"\\nLines found on page {page.page_number}\")\n    for line in page.lines:\n        print(f\"...Line '{line.content}'\")\n    for word in page.words:\n        print(f\"...Word '{word.content}' has a confidence of {word.confidence}\")\n    if page.selection_marks:\n        print(f\"\\nSelection marks found on page {page.page_number}\")\n        for selection_mark in page.selection_marks:\n            print(\n                f\"...Selection mark is '{selection_mark.state}' and has a confidence of {selection_mark.confidence}\"\n            )\n\nfor i, table in enumerate(result.tables):\n    print(f\"\\nTable {i + 1} can be found on page:\")\n    for region in table.bounding_regions:\n        print(f\"...{region.page_number}\")\n    for cell in table.cells:\n        print(\n            f\"...Cell[{cell.row_index}][{cell.column_index}] has text '{cell.content}'\"\n        )\nprint(\"-----------------------------------\")\n```\n\n<!-- END SNIPPET -->\n\nAlternatively, a document URL can also be used to analyze documents using the `begin_analyze_document_from_url` method.\n\n```python\ndocument_url = \"<url_of_the_document>\"\npoller = document_analysis_client.begin_analyze_document_from_url(model_id=model_id, document_url=document_url)\nresult = poller.result()\n```\n\n### Manage Your Models\n\nManage the custom models attached to your account.\n\n```python\nfrom azure.ai.formrecognizer import DocumentModelAdministrationClient\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.core.exceptions import ResourceNotFoundError\n\nendpoint = \"https://<my-custom-subdomain>.cognitiveservices.azure.com/\"\ncredential = AzureKeyCredential(\"<api_key>\")\n\ndocument_model_admin_client = DocumentModelAdministrationClient(endpoint, credential)\n\naccount_details = document_model_admin_client.get_resource_details()\nprint(\"Our account has {} custom models, and we can have at most {} custom models\".format(\n    account_details.custom_document_models.count, account_details.custom_document_models.limit\n))\n\n# Here we get a paged list of all of our models\nmodels = document_model_admin_client.list_document_models()\nprint(\"We have models with the following ids: {}\".format(\n    \", \".join([m.model_id for m in models])\n))\n\n# Replace with the custom model ID from the \"Build a model\" sample\nmodel_id = \"<model_id from the Build a Model sample>\"\n\ncustom_model = document_model_admin_client.get_document_model(model_id=model_id)\nprint(\"Model ID: {}\".format(custom_model.model_id))\nprint(\"Description: {}\".format(custom_model.description))\nprint(\"Model created on: {}\\n\".format(custom_model.created_on))\n\n# Finally, we will delete this model by ID\ndocument_model_admin_client.delete_document_model(model_id=custom_model.model_id)\n\ntry:\n    document_model_admin_client.get_document_model(model_id=custom_model.model_id)\nexcept ResourceNotFoundError:\n    print(\"Successfully deleted model with id {}\".format(custom_model.model_id))\n```\n\n## Troubleshooting\n\n### General\n\nForm Recognizer client library will raise exceptions defined in [Azure Core][azure_core_exceptions].\nError codes and messages raised by the Form Recognizer service can be found in the [service documentation][fr-errors].\n\n### Logging\n\nThis library uses the standard\n[logging][python_logging] library for logging.\n\nBasic information about HTTP sessions (URLs, headers, etc.) is logged at `INFO` level.\n\nDetailed `DEBUG` level logging, including request/response bodies and **unredacted**\nheaders, can be enabled on the client or per-operation with the `logging_enable` keyword argument.\n\nSee full SDK logging documentation with examples [here][sdk_logging_docs].\n\n### Optional Configuration\n\nOptional keyword arguments can be passed in at the client and per-operation level.\nThe azure-core [reference documentation][azure_core_ref_docs]\ndescribes available configurations for retries, logging, transport protocols, and more.\n\n## Next steps\n\n### More sample code\n\nSee the [Sample README][sample_readme] for several code snippets illustrating common patterns used in the Form Recognizer Python API.\n\n### Additional documentation\n\nFor more extensive documentation on Azure Cognitive Services Form Recognizer, see the [Form Recognizer documentation][python-fr-product-docs] on docs.microsoft.com.\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [cla.microsoft.com][cla].\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n\n[python-fr-src]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/formrecognizer/azure-ai-formrecognizer/azure/ai/formrecognizer\n[python-fr-pypi]: https://pypi.org/project/azure-ai-formrecognizer/\n[python-fr-product-docs]: https://learn.microsoft.com/azure/applied-ai-services/form-recognizer/overview?view=form-recog-3.0.0\n[python-fr-ref-docs]: https://aka.ms/azsdk/python/formrecognizer/docs\n[python-fr-samples]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/formrecognizer/azure-ai-formrecognizer/samples\n\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_portal]: https://ms.portal.azure.com/\n[regional_endpoints]: https://azure.microsoft.com/global-infrastructure/services/?products=form-recognizer\n[FR_or_CS_resource]: https://docs.microsoft.com/azure/cognitive-services/cognitive-services-apis-create-account?tabs=multiservice%2Cwindows\n[pip]: https://pypi.org/project/pip/\n[cognitive_resource_portal]: https://ms.portal.azure.com/#create/Microsoft.CognitiveServicesFormRecognizer\n[cognitive_resource_cli]: https://docs.microsoft.com/azure/cognitive-services/cognitive-services-apis-create-account-cli?tabs=windows\n[azure-key-credential]: https://aka.ms/azsdk/python/core/azurekeycredential\n[labeling-tool]: https://aka.ms/azsdk/formrecognizer/labelingtool\n[fr-studio]: https://aka.ms/azsdk/formrecognizer/formrecognizerstudio\n[fr-build-model]: https://aka.ms/azsdk/formrecognizer/buildmodel\n[fr-build-training-set]: https://aka.ms/azsdk/formrecognizer/buildtrainingset\n[fr-models]: https://aka.ms/azsdk/formrecognizer/models\n[fr-errors]: https://aka.ms/azsdk/formrecognizer/errors\n\n[azure_core_ref_docs]: https://aka.ms/azsdk/python/core/docs\n[azure_core_exceptions]: https://aka.ms/azsdk/python/core/docs#module-azure.core.exceptions\n[python_logging]: https://docs.python.org/3/library/logging.html\n[multi_and_single_service]: https://docs.microsoft.com/azure/cognitive-services/cognitive-services-apis-create-account?tabs=multiservice%2Cwindows\n[azure_cli_endpoint_lookup]: https://docs.microsoft.com/cli/azure/cognitiveservices/account?view=azure-cli-latest#az-cognitiveservices-account-show\n[azure_portal_get_endpoint]: https://docs.microsoft.com/azure/cognitive-services/cognitive-services-apis-create-account?tabs=multiservice%2Cwindows#get-the-keys-for-your-resource\n[cognitive_authentication_api_key]: https://docs.microsoft.com/azure/cognitive-services/cognitive-services-apis-create-account?tabs=multiservice%2Cwindows#get-the-keys-for-your-resource\n[register_aad_app]: https://docs.microsoft.com/azure/cognitive-services/authentication#assign-a-role-to-a-service-principal\n[custom_subdomain]: https://docs.microsoft.com/azure/cognitive-services/authentication#create-a-resource-with-a-custom-subdomain\n[azure_identity]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity\n[default_azure_credential]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity#defaultazurecredential\n[service_recognize_receipt]: https://aka.ms/azsdk/formrecognizer/receiptfieldschema\n[service_recognize_business_cards]: https://aka.ms/azsdk/formrecognizer/businesscardfieldschema\n[service_recognize_invoice]: https://aka.ms/azsdk/formrecognizer/invoicefieldschema\n[service_recognize_identity_documents]: https://aka.ms/azsdk/formrecognizer/iddocumentfieldschema\n[service_recognize_tax_documents]: https://aka.ms/azsdk/formrecognizer/taxusw2fieldschema\n[service_prebuilt_document]: https://docs.microsoft.com/azure/applied-ai-services/form-recognizer/concept-general-document#general-document-features\n[sdk_logging_docs]: https://docs.microsoft.com/azure/developer/python/sdk/azure-sdk-logging\n[sample_readme]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/formrecognizer/azure-ai-formrecognizer/samples\n[changelog]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/formrecognizer/azure-ai-formrecognizer/CHANGELOG.md\n[migration-guide]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/formrecognizer/azure-ai-formrecognizer/MIGRATION_GUIDE.md\n[classify_sample]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/formrecognizer/azure-ai-formrecognizer/samples/v3.2/sample_classify_document.py\n\n[cla]: https://cla.microsoft.com\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n",
        "repo_name": "formrecognizer/azure-ai-formrecognizer",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/formrecognizer/azure-ai-formrecognizer",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Graph RBAC Client Library.\n\n`azure-graphrbac` is about Azure AD Graph API, which is now deprecated. We do not support SDK fixes to this product anymore. Please refer to this issue for additional way to get support to move to Microsoft Graph API:\nhttps://github.com/azure-deprecation/dashboard/issues/60\n\nThe recommendation is to use MSGraph and its SDK instead to replace it:\nhttps://github.com/microsoftgraph/msgraph-sdk-python\n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-graphrbac%2FREADME.png)\n",
        "repo_name": "graphrbac/azure-graphrbac",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/graphrbac/azure-graphrbac",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Graphservices Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-graphservices\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.graphservices import GraphServicesMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = GraphServicesMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\nCode samples for this package can be found at:\n- [Search Graphservices Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com\n- [Azure Python Mgmt SDK Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-graphservices%2FREADME.png)\n",
        "repo_name": "graphservices/azure-mgmt-graphservices",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/graphservices/azure-mgmt-graphservices",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure SAP Hana on Azure Management Client Library.\nThis package has been tested with Python 3.6+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n\n\n \nFor docs and references, see [Python SDK References](https://learn.microsoft.com/python/api/overview/azure/sap-hana-on-azure)\nCode samples for this package can be found at [SAP Hana on Azure Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-hanaonazure%2FREADME.png)\n",
        "repo_name": "hanaonazure/azure-mgmt-hanaonazure",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/hanaonazure/azure-mgmt-hanaonazure",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure HDInsight Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/hdinsight)\nCode samples for this package can be found at [HDInsight Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://github.com/Azure-Samples/azure-samples-python-management/tree/main/samples/hdinsight)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-hdinsight%2FREADME.png)\n",
        "repo_name": "hdinsight/azure-mgmt-hdinsight",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/hdinsight/azure-mgmt-hdinsight",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Health Bot Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/)\nCode samples for this package can be found at [Health Bot Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-healthbot%2FREADME.png)\n",
        "repo_name": "healthbot/azure-mgmt-healthbot",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/healthbot/azure-mgmt-healthbot",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Health Care Apis Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/)\nCode samples for this package can be found at [Health Care Apis Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-healthcareapis%2FREADME.png)\n",
        "repo_name": "healthcareapis/azure-mgmt-healthcareapis",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/healthcareapis/azure-mgmt-healthcareapis",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Azure Cognitive Services Health Insights Cancer Profiling client library for Python\n\n[Health Insights][health_insights] is an Azure Applied AI Service built with the Azure Cognitive Services Framework, that leverages multiple Cognitive Services, Healthcare API services and other Azure resources.\n\nThe [Cancer Profiling model][cancer_profiling_docs] receives clinical records of oncology patients and outputs cancer staging, such as clinical stage TNM categories and pathologic stage TNM categories as well as tumor site, histology.\n\n\n[Source code][hi_source_code] | [Package (PyPI)][hi_pypi] | [API reference documentation][cancer_profiling_api_documentation] | [Product documentation][product_docs] | [Samples][hi_samples]\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7 or later is required to use this package.\n- You need an [Azure subscription][azure_sub] to use this package.\n- An existing Cognitive Services Health Insights instance.\n\n\n### Install the package\n\n```bash\npip install azure-healthinsights-cancerprofiling\n```\n\nThis table shows the relationship between SDK versions and supported API versions of the service:\n\n|SDK version|Supported API version of service |\n|-------------|---------------|\n|1.0.0b1 | 2023-03-01-preview|\n\n\n### Authenticate the client\n\n#### Get the endpoint\n\nYou can find the endpoint for your Health Insights service resource using the [Azure Portal][azure_portal] or [Azure CLI][azure_cli]\n\n\n```bash\n# Get the endpoint for the Health Insights service resource\naz cognitiveservices account show --name \"resource-name\" --resource-group \"resource-group-name\" --query \"properties.endpoint\"\n```\n\n#### Get the API Key\n\nYou can get the **API Key** from the Health Insights service resource in the Azure Portal.\nAlternatively, you can use **Azure CLI** snippet below to get the API key of your resource.\n\n```PowerShell\naz cognitiveservices account keys list --resource-group <your-resource-group-name> --name <your-resource-name>\n```\n\n#### Create a CancerProfilingClient with an API Key Credential\n\nOnce you have the value for the API key, you can pass it as a string into an instance of **AzureKeyCredential**. Use the key as the credential parameter to authenticate the client:\n\n```python\nimport os\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.healthinsights.cancerprofiling.aio import CancerProfilingClient\n\nKEY = os.environ[\"HEALTHINSIGHTS_KEY\"]\nENDPOINT = os.environ[\"HEALTHINSIGHTS_ENDPOINT\"]\n\ncancer_profiling_client = CancerProfilingClient(endpoint=ENDPOINT, credential=AzureKeyCredential(KEY))\n```\n\n### Long-Running Operations\n\nLong-running operations are operations which consist of an initial request sent to the service to start an operation,\nfollowed by polling the service at intervals to determine whether the operation has completed or failed, and if it has\nsucceeded, to get the result.\n\nMethods that support healthcare analysis, custom text analysis, or multiple analyses are modeled as long-running operations.\nThe client exposes a `begin_<method-name>` method that returns a poller object. Callers should wait\nfor the operation to complete by calling `result()` on the poller object returned from the `begin_<method-name>` method.\nSample code snippets are provided to illustrate using long-running operations [below](#examples \"Examples\").\n\n## Key concepts\n\nThe Cancer Profiling model allows you to infer cancer attributes such as tumor site, histology, clinical stage TNM categories and pathologic stage TNM categories from unstructured clinical documents.\n\n## Examples\n\nThe following section provides several code snippets covering some of the most common Health Insights - Cancer Profiling service tasks, including:\n- [Cancer Profiling](#cancer-profiling \"Cancer Profiling\")\n\n### Cancer Profiling\n\nInfer key cancer attributes such as tumor site, histology, clinical stage TNM categories and pathologic stage TNM categories from a patient's unstructured clinical documents.\n\n```python\nimport asyncio\nimport os\nimport datetime\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.healthinsights.cancerprofiling.aio import CancerProfilingClient\nfrom azure.healthinsights.cancerprofiling import models\n\nKEY = os.environ[\"HEALTHINSIGHTS_KEY\"]\nENDPOINT = os.environ[\"HEALTHINSIGHTS_ENDPOINT\"]\n\n# Create an Onco Phenotype client\n# <client>\ncancer_profiling_client = CancerProfilingClient(endpoint=ENDPOINT,\n                                                credential=AzureKeyCredential(KEY))\n# </client>\n\n# Construct patient\n# <PatientConstructor>\npatient1 = models.PatientRecord(id=\"patient_id\")\n# </PatientConstructor>\n\n# Add document list\n# <DocumentList>\ndoc_content1 = \"\"\"\n            15.8.2021\n            Jane Doe 091175-8967\n            42 year old female, married with 3 children, works as a nurse\n            Healthy, no medications taken on a regular basis.\n            PMHx is significant for migraines with aura, uses Mirena for contraception.\n            Smoking history of 10 pack years (has stopped and relapsed several times).\n            She is in c/o 2 weeks of productive cough and shortness of breath.\n            She has a fever of 37.8 and general weakness.\n            Denies night sweats and rash. She denies symptoms of rhinosinusitis, asthma, and heartburn.\n            On PE:\n            GENERAL: mild pallor, no cyanosis. Regular breathing rate.\n            LUNGS: decreased breath sounds on the base of the right lung. Vesicular breathing. \n                No crackles, rales, and wheezes. Resonant percussion.\n            PLAN:\n            Will be referred for a chest x-ray.\n            ======================================\n            CXR showed mild nonspecific opacities in right lung base.\n            PLAN:\n            Findings are suggestive of a working diagnosis of pneumonia. The patient is referred to a\n            follow-up CXR in 2 weeks.\"\"\"\n\npatient_document1 = models.PatientDocument(type=models.DocumentType.NOTE,\n                                           id=\"doc1\",\n                                           content=models.DocumentContent(\n                                               source_type=models.DocumentContentSourceType.INLINE,\n                                               value=doc_content1),\n                                           clinical_type=models.ClinicalDocumentType.IMAGING,\n                                           language=\"en\",\n                                           created_date_time=datetime.datetime(2021, 8, 15))\n\ndoc_content2 = \"\"\"\n            Oncology Clinic\n            20.10.2021\n            Jane Doe 091175-8967\n            42-year-old healthy female who works as a nurse in the ER of this hospital.\n            First menstruation at 11 years old. First delivery- 27 years old. She has 3 children.\n            Didn't breastfeed.\n            Contraception- Mirena.\n            Smoking- 10 pack years.\n            Mother- Belarusian. Father- Georgian. \n            About 3 months prior to admission, she stated she had SOB and was febrile.\n            She did a CXR as an outpatient which showed a finding in the base of the right lung-\n            possibly an infiltrate.\n            She was treated with antibiotics with partial response.\n            6 weeks later a repeat CXR was performed- a few solid dense findings in the right lung.\n            Therefore, she was referred for a PET-CT which demonstrated increased uptake in the right\n            breast, lymph nodes on the right a few areas in the lungs and liver.\n            On biopsy from the lesion in the right breast- triple negative adenocarcinoma. Genetic\n            testing has not been done thus far.\n            Genetic counseling- the patient denies a family history of breast, ovary, uterus,\n            and prostate cancer. Her mother has chronic lymphocytic leukemia (CLL).\n            She is planned to undergo genetic tests because the aggressive course of the disease,\n            and her young age.\n            Impression:\n            Stage 4 triple negative breast adenocarcinoma.\n            Could benefit from biological therapy.\n            Different treatment options were explained- the patient wants to get a second opinion.\"\"\"\n\npatient_document2 = models.PatientDocument(type=models.DocumentType.NOTE,\n                                           id=\"doc2\",\n                                           content=models.DocumentContent(\n                                               source_type=models.DocumentContentSourceType.INLINE,\n                                               value=doc_content2),\n                                           clinical_type=models.ClinicalDocumentType.PATHOLOGY,\n                                           language=\"en\",\n                                           created_date_time=datetime.datetime(2021, 10, 20))\n\ndoc_content3 = \"\"\"\n            PATHOLOGY REPORT\n                                    Clinical Information\n            Ultrasound-guided biopsy; A. 18 mm mass; most likely diagnosis based on imaging:  IDC\n                                        Diagnosis\n            A.  BREAST, LEFT AT 2:00 4 CM FN; ULTRASOUND-GUIDED NEEDLE CORE BIOPSIES:\n            - Invasive carcinoma of no special type (invasive ductal carcinoma), grade 1\n            Nottingham histologic grade:  1/3 (tubules 2; nuclear grade 2; mitotic rate 1;\n            total score; 5/9)\n            Fragments involved by invasive carcinoma:  2\n            Largest measurement of invasive carcinoma on a single fragment:  7 mm\n            Ductal carcinoma in situ (DCIS):  Present\n            Architectural pattern:  Cribriform\n            Nuclear grade:  2-\n                            -intermediate\n            Necrosis:  Not identified\n            Fragments involved by DCIS:  1\n            Largest measurement of DCIS on a single fragment:  Span 2 mm\n            Microcalcifications:  Present in benign breast tissue and invasive carcinoma\n            Blocks with invasive carcinoma:  A1\n            Special studies: Pending\"\"\"\n\npatient_document3 = models.PatientDocument(type=models.DocumentType.NOTE,\n                                           id=\"doc3\",\n                                           content=models.DocumentContent(\n                                               source_type=models.DocumentContentSourceType.INLINE,\n                                               value=doc_content3),\n                                           clinical_type=models.ClinicalDocumentType.PATHOLOGY,\n                                           language=\"en\",\n                                           created_date_time=datetime.datetime(2022, 1, 1))\n\npatient_doc_list = [patient_document1, patient_document2, patient_document3]\npatient1.data = patient_doc_list\n# <\\DocumentList>\n\n# Set configuration to include evidence for the cancer staging inferences\nconfiguration = models.OncoPhenotypeModelConfiguration(include_evidence=True)\n\n# Construct the request with the patient and configuration\ncancer_profiling_data = models.OncoPhenotypeData(patients=[patient1], configuration=configuration)\n\npoller = await cancer_profiling_client.begin_infer_cancer_profile(cancer_profiling_data)\ncancer_profiling_result = await poller.result()\nif cancer_profiling_result.status == models.JobStatus.SUCCEEDED:\n    results = cancer_profiling_result.results\n    for patient_result in results.patients:\n        print(f\"\\n==== Inferences of Patient {patient_result.id} ====\")\n        for inference in patient_result.inferences:\n            print(\n                f\"\\n=== Clinical Type: {str(inference.type)} Value: {inference.value}\\\n                    ConfidenceScore: {inference.confidence_score} ===\")\n            for evidence in inference.evidence:\n                data_evidence = evidence.patient_data_evidence\n                print(\n                    f\"Evidence {data_evidence.id} {data_evidence.offset} {data_evidence.length}\\\n                        {data_evidence.text}\")\nelse:\n    errors = cancer_profiling_result.errors\n    if errors is not None:\n        for error in errors:\n            print(f\"{error.code} : {error.message}\")\n```\n\n## Troubleshooting\n\n### General\n\nHealth Insights Cancer Profiling client library will raise exceptions defined in [Azure Core][azure_core].\n\n### Logging\n\nThis library uses the standard [logging](https://docs.python.org/3/library/logging.html) library for logging.\n\nBasic information about HTTP sessions (URLs, headers, etc.) is logged at `INFO` level.\n\nDetailed `DEBUG` level logging, including request/response bodies and **unredacted**\nheaders, can be enabled on the client or per-operation with the `logging_enable` keyword argument.\n\nSee full SDK logging documentation with examples [here](https://learn.microsoft.com/azure/developer/python/sdk/azure-sdk-logging).\n\n### Optional Configuration\n\nOptional keyword arguments can be passed in at the client and per-operation level.\nThe azure-core [reference documentation](https://azuresdkdocs.blob.core.windows.net/$web/python/azure-core/latest/azure.core.html) describes available configurations for retries, logging, transport protocols, and more.\n\n## Next steps\n\n## Additional documentation\nFor more extensive documentation on Azure Health Insights Cancer Profiling, see the [Cancer Profiling documentation][cancer_profiling_docs] on docs.microsoft.com.\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require\nyou to agree to a Contributor License Agreement (CLA) declaring that you have\nthe right to, and actually do, grant us the rights to use your contribution.\nFor details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether\nyou need to provide a CLA and decorate the PR appropriately (e.g., label,\ncomment). Simply follow the instructions provided by the bot. You will only\nneed to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct]. For more information,\nsee the Code of Conduct FAQ or contact opencode@microsoft.com with any\nadditional questions or comments.\n\n<!-- LINKS -->\n[health_insights]: https://learn.microsoft.com/azure/azure-health-insights/overview\n[azure_core]: https://azuresdkdocs.blob.core.windows.net/$web/python/azure-core/latest/azure.core.html#module-azure.core.exceptions\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://ms.portal.azure.com/#create/Microsoft.CognitiveServicesHealthInsights\n[azure_cli]: https://learn.microsoft.com/cli/azure/\n[cancer_profiling_docs]: https://learn.microsoft.com/azure/azure-health-insights/oncophenotype/overview\n[cancer_profiling_api_documentation]: https://learn.microsoft.com/rest/api/cognitiveservices/healthinsights/onco-phenotype\n[hi_pypi]: https://pypi.org/project/azure-healthinsights-cancerprofiling/\n[hi_pypi]: https://pypi.org/\n[product_docs]: https://learn.microsoft.com/azure/azure-health-insights/oncophenotype/\n[hi_samples]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/healthinsights/azure-healthinsights-cancerprofiling/samples\n[hi_source_code]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/healthinsights/azure-healthinsights-cancerprofiling/azure/healthinsights/cancerprofiling",
        "repo_name": "healthinsights/azure-healthinsights-cancerprofiling",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/healthinsights/azure-healthinsights-cancerprofiling",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Azure Cognitive Services Health Insights Clinical Matching client library for Python\n\n[Health Insights](https://review.learn.microsoft.com/azure/azure-health-insights/?branch=release-azure-health-insights) is an Azure Applied AI Service built with the Azure Cognitive Services Framework, that leverages multiple Cognitive Services, Healthcare API services and other Azure resources.\nThe [Clinical Matching model][clinical_matching_docs] receives patients data and clinical trials protocols, and provides relevant clinical trials based on eligibility criteria.\n\n[Source code][hi_source_code] | [Package (PyPI)][hi_pypi] | [API reference documentation][clinical_matching_api_documentation] | [Product documentation][product_docs] | [Samples][hi_samples]\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7 or later is required to use this package.\n- You need an [Azure subscription][azure_sub] to use this package.\n- An existing Cognitive Services Health Insights instance.\n\n\n### Install the package\n\n```bash\npip install azure-healthinsights-clinicalmatching\n```\n\nThis table shows the relationship between SDK versions and supported API versions of the service:\n\n| SDK version | Supported API version of service |\n|-------------|----------------------------------|\n| 1.0.0b1     | 2023-03-01-preview               |\n\n\n### Authenticate the client\n\n#### Get the endpoint\n\nYou can find the endpoint for your Health Insights service resource using the [Azure Portal][azure_portal] or [Azure CLI][azure_cli]\n\n\n```bash\n# Get the endpoint for the Health Insights service resource\naz cognitiveservices account show --name \"resource-name\" --resource-group \"resource-group-name\" --query \"properties.endpoint\"\n```\n\n#### Get the API Key\n\nYou can get the **API Key** from the Health Insights service resource in the Azure Portal.\nAlternatively, you can use **Azure CLI** snippet below to get the API key of your resource.\n\n```PowerShell\naz cognitiveservices account keys list --resource-group <your-resource-group-name> --name <your-resource-name>\n```\n\n#### Create a ClinicalMatchingClient with an API Key Credential\n\nOnce you have the value for the API key, you can pass it as a string into an instance of **AzureKeyCredential**. Use the key as the credential parameter to authenticate the client:\n\n```python\nimport os\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.healthinsights.clinicalmatching import ClinicalMatchingClient\n\nKEY = os.environ[\"HEALTHINSIGHTS_KEY\"]\nENDPOINT = os.environ[\"HEALTHINSIGHTS_ENDPOINT\"]\n\ntrial_matcher_client = ClinicalMatchingClient(endpoint=ENDPOINT, credential=AzureKeyCredential(KEY))\n```\n\n### Long-Running Operations\n\nLong-running operations are operations which consist of an initial request sent to the service to start an operation,\nfollowed by polling the service at intervals to determine whether the operation has completed or failed, and if it has\nsucceeded, to get the result.\n\nMethods that support healthcare analysis, custom text analysis, or multiple analyses are modeled as long-running operations.\nThe client exposes a `begin_<method-name>` method that returns a poller object. Callers should wait\nfor the operation to complete by calling `result()` on the poller object returned from the `begin_<method-name>` method.\nSample code snippets are provided to illustrate using long-running operations [below](#examples \"Examples\").\n\n## Key concepts\n\nTrial Matcher provides the user of the services two main modes of operation: patients centric and clinical trial centric.\n- On patient centric mode, the Trial Matcher model bases the patient matching on the clinical condition, location, priorities, eligibility criteria, and other criteria that the patient and/or service users may choose to prioritize. The model helps narrow down and prioritize the set of relevant clinical trials to a smaller set of trials to start with, that the specific patient appears to be qualified for.\n- On clinical trial centric, the Trial Matcher is finding a group of patients potentially eligible to a clinical trial. The Trial Matcher narrows down the patients, first filtered on clinical condition and selected clinical observations, and then focuses on those patients who met the baseline criteria, to find the group of patients that appears to be eligible patients to a trial.\n\n## Examples\n\nThe following section provides several code snippets covering some of the most common Health Insights - Clinical Matching service tasks, including:\n\n- [Match trials](#match-trials \"Match trials\")\n\n### Match trials\n\nFinding potential eligible trials for a patient.\n\n```python\nimport os\nimport datetime\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.healthinsights.clinicalmatching import ClinicalMatchingClient, models\n\nKEY = os.environ[\"HEALTHINSIGHTS_KEY\"]\nENDPOINT = os.environ[\"HEALTHINSIGHTS_ENDPOINT\"]\n\n# Create a Trial Matcher client\n# <client>\ntrial_matcher_client = ClinicalMatchingClient(endpoint=ENDPOINT,\n                                              credential=AzureKeyCredential(KEY))\n# </client>\n\n# Create clinical info list\n# <clinicalInfo>\nclinical_info_list = [models.ClinicalCodedElement(system=\"http://www.nlm.nih.gov/research/umls\",\n                                                  code=\"C0032181\",\n                                                  name=\"Platelet count\",\n                                                  value=\"250000\"),\n                      models.ClinicalCodedElement(system=\"http://www.nlm.nih.gov/research/umls\",\n                                                  code=\"C0002965\",\n                                                  name=\"Unstable Angina\",\n                                                  value=\"true\"),\n                      models.ClinicalCodedElement(system=\"http://www.nlm.nih.gov/research/umls\",\n                                                  code=\"C1522449\",\n                                                  name=\"Radiotherapy\",\n                                                  value=\"false\"),\n                      models.ClinicalCodedElement(system=\"http://www.nlm.nih.gov/research/umls\",\n                                                  code=\"C0242957\",\n                                                  name=\"GeneOrProtein-Expression\",\n                                                  value=\"Negative;EntityType:GENEORPROTEIN-EXPRESSION\"),\n                      models.ClinicalCodedElement(system=\"http://www.nlm.nih.gov/research/umls\",\n                                                  code=\"C1300072\",\n                                                  name=\"cancer stage\",\n                                                  value=\"2\")]\n\n# </clinicalInfo>\n\n# Construct Patient\n# <PatientConstructor>\npatient_info = models.PatientInfo(sex=models.PatientInfoSex.MALE, birth_date=datetime.date(1965, 12, 26),\n                                  clinical_info=clinical_info_list)\npatient1 = models.PatientRecord(id=\"patient_id\", info=patient_info)\n# </PatientConstructor>\n\n# Create registry filter\nregistry_filters = models.ClinicalTrialRegistryFilter()\n# Limit the trial to a specific patient condition (\"Non-small cell lung cancer\")\nregistry_filters.conditions = [\"non small cell lung cancer (nsclc)\"]\n# Specify the clinical trial registry source as ClinicalTrials.Gov\nregistry_filters.sources = [models.ClinicalTrialSource.CLINICALTRIALS_GOV]\n# Limit the clinical trial to a certain location, in this case California, USA\nregistry_filters.facility_locations = [\n    models.GeographicLocation(country_or_region=\"United States\", city=\"Gilbert\", state=\"Arizona\")]\n# Limit the trial to a specific recruitment status\nregistry_filters.recruitment_statuses = [models.ClinicalTrialRecruitmentStatus.RECRUITING]\n\n# Construct ClinicalTrial instance and attach the registry filter to it.\nclinical_trials = models.ClinicalTrials(registry_filters=[registry_filters])\n\n# Create TrialMatcherRequest\nconfiguration = models.TrialMatcherModelConfiguration(clinical_trials=clinical_trials)\ntrial_matcher_data = models.TrialMatcherData(patients=[patient1], configuration=configuration)\n\npoller = trial_matcher_client.begin_match_trials(trial_matcher_data)\ntrial_matcher_result = poller.result()\nif trial_matcher_result.status == models.JobStatus.SUCCEEDED:\n    tm_results = trial_matcher_result.results\n    for patient_result in tm_results.patients:\n        print(f\"Inferences of Patient {patient_result.id}\")\n        for tm_inferences in patient_result.inferences:\n            print(f\"Trial Id {tm_inferences.id}\")\n            print(f\"Type: {str(tm_inferences.type)}  Value: {tm_inferences.value}\")\n            print(f\"Description {tm_inferences.description}\")\nelse:\n    tm_errors = trial_matcher_result.errors\n    if tm_errors is not None:\n        for error in tm_errors:\n            print(f\"{error.code} : {error.message}\")\n```\n\n## Troubleshooting\n\n### General\n\nHealth Insights Clinical Matching client library will raise exceptions defined in [Azure Core][azure_core].\n\n### Logging\n\nThis library uses the standard [logging](https://docs.python.org/3/library/logging.html) library for logging.\n\nBasic information about HTTP sessions (URLs, headers, etc.) is logged at `INFO` level.\n\nDetailed `DEBUG` level logging, including request/response bodies and **unredacted**\nheaders, can be enabled on the client or per-operation with the `logging_enable` keyword argument.\n\nSee full SDK logging documentation with examples [here](https://learn.microsoft.com/azure/developer/python/sdk/azure-sdk-logging).\n\n### Optional Configuration\n\nOptional keyword arguments can be passed in at the client and per-operation level.\nThe azure-core [reference documentation](https://azuresdkdocs.blob.core.windows.net/$web/python/azure-core/latest/azure.core.html) describes available configurations for retries, logging, transport protocols, and more.\n\n## Next steps\n## Additional documentation\n\nFor more extensive documentation on Azure Health Insights Clinical Matching, see the [Clinical Matching documentation][clinical_matching_docs] on docs.microsoft.com.\n\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require\nyou to agree to a Contributor License Agreement (CLA) declaring that you have\nthe right to, and actually do, grant us the rights to use your contribution.\nFor details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether\nyou need to provide a CLA and decorate the PR appropriately (e.g., label,\ncomment). Simply follow the instructions provided by the bot. You will only\nneed to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct]. For more information,\nsee the Code of Conduct FAQ or contact opencode@microsoft.com with any\nadditional questions or comments.\n\n<!-- LINKS -->\n[azure_core]: https://azuresdkdocs.blob.core.windows.net/$web/python/azure-core/latest/azure.core.html#module-azure.core.exceptions\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://ms.portal.azure.com/#create/Microsoft.CognitiveServicesHealthInsights\n[azure_cli]: https://learn.microsoft.com/cli/azure/\n[clinical_matching_docs]: https://review.learn.microsoft.com/azure/cognitive-services/health-decision-support/trial-matcher/overview?branch=main\n[hi_pypi]: https://pypi.org/project/azure-healthinsights-clinicalmatching/\n[hi_pypi]: https://pypi.org/\n[product_docs]: https://review.learn.microsoft.com/azure/cognitive-services/health-decision-support/trial-matcher/?branch=main\n[clinical_matching_api_documentation]: https://review.learn.microsoft.com/rest/api/cognitiveservices/healthinsights/trial-matcher?branch=healthin202303\n[hi_samples]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/healthinsights/azure-healthinsights-clinicalmatching/samples\n[hi_source_code]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/healthinsights/azure-healthinsights-clinicalmatching/azure/healthinsights/clinicalmatching\n",
        "repo_name": "healthinsights/azure-healthinsights-clinicalmatching",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/healthinsights/azure-healthinsights-clinicalmatching",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Hybrid Compute Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-hybridcompute\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.hybridcompute import HybridComputeManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = HybridComputeManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\n\nCode samples for this package can be found at [Hybrid Compute Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com and [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-hybridcompute%2FREADME.png)\n",
        "repo_name": "hybridcompute/azure-mgmt-hybridcompute",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/hybridcompute/azure-mgmt-hybridcompute",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Hybridcontainerservice Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-hybridcontainerservice\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.hybridcontainerservice import HybridContainerServiceMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = HybridContainerServiceMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\n\nCode samples for this package can be found at [Hybridcontainerservice Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com and [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-hybridcontainerservice%2FREADME.png)\n",
        "repo_name": "hybridcontainerservice/azure-mgmt-hybridcontainerservice",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/hybridcontainerservice/azure-mgmt-hybridcontainerservice",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Hybrid Kubernetes Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/)\nCode samples for this package can be found at [Hybrid Kubernetes Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-hybridkubernetes%2FREADME.png)\n",
        "repo_name": "hybridkubernetes/azure-mgmt-hybridkubernetes",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/hybridkubernetes/azure-mgmt-hybridkubernetes",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Hybrid Network Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/)\nCode samples for this package can be found at [Hybrid Network Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-hybridnetwork%2FREADME.png)\n",
        "repo_name": "hybridnetwork/azure-mgmt-hybridnetwork",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/hybridnetwork/azure-mgmt-hybridnetwork",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Azure Identity client library for Python\n\nThe Azure Identity library provides [Azure Active Directory (Azure AD)](https://learn.microsoft.com/azure/active-directory/fundamentals/active-directory-whatis) token authentication support across the Azure SDK. It provides a set of [`TokenCredential`](https://learn.microsoft.com/python/api/azure-core/azure.core.credentials.tokencredential?view=azure-python) implementations, which can be used to construct Azure SDK clients that support Azure AD token authentication.\n\n[Source code](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity)\n| [Package (PyPI)](https://pypi.org/project/azure-identity/)\n| [Package (Conda)](https://anaconda.org/microsoft/azure-identity/)\n| [API reference documentation][ref_docs]\n| [Azure AD documentation](https://learn.microsoft.com/azure/active-directory/)\n\n## Getting started\n\n### Install the package\n\nInstall Azure Identity with pip:\n\n```sh\npip install azure-identity\n```\n\n### Prerequisites\n\n- An [Azure subscription](https://azure.microsoft.com/free/)\n- Python 3.7 or a recent version of Python 3 (this library doesn't support end-of-life versions)\n\n### Authenticate during local development\n\nWhen debugging and executing code locally, it's typical for developers to use their own accounts for authenticating calls to Azure services. The Azure Identity library supports authenticating through developer tools to simplify local development.\n\n#### Authenticate via Visual Studio Code\n\nDevelopers using Visual Studio Code can use the [Azure Account extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode.azure-account) to authenticate via the editor. Apps using `DefaultAzureCredential` or `VisualStudioCodeCredential` can then use this account to authenticate calls in their app when running locally.\n\nTo authenticate in Visual Studio Code, ensure the Azure Account extension is installed. Once installed, open the **Command Palette** and run the **Azure: Sign In** command.\n\nIt's a [known issue](https://github.com/Azure/azure-sdk-for-python/issues/23249) that `VisualStudioCodeCredential` doesn't work with [Azure Account extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode.azure-account) versions newer than **0.9.11**. A long-term fix to this problem is in progress. In the meantime, consider [authenticating via the Azure CLI](#authenticate-via-the-azure-cli).\n\n#### Authenticate via the Azure CLI\n\n`DefaultAzureCredential` and `AzureCliCredential` can authenticate as the user signed in to the [Azure CLI][azure_cli]. To sign in to the Azure CLI, run `az login`. On a system with a default web browser, the Azure CLI will launch the browser to authenticate a user.\n\nWhen no default browser is available, `az login` will use the device code authentication flow. This flow can also be selected manually by running `az login --use-device-code`.\n\n#### Authenticate via the Azure Developer CLI\n\nDevelopers coding outside of an IDE can also use the [Azure Developer CLI][azure_developer_cli] to authenticate. Applications using the `DefaultAzureCredential` or the `AzureDeveloperCliCredential` can then use this account to authenticate calls in their application when running locally.\n\nTo authenticate with the [Azure Developer CLI][azure_developer_cli], users can run the command `azd auth login`. For users running on a system with a default web browser, the Azure Developer CLI will launch the browser to authenticate the user.\n\nFor systems without a default web browser, the `azd auth login --use-device-code` command will use the device code authentication flow.\n\n## Key concepts\n\n### Credentials\n\nA credential is a class that contains or can obtain the data needed for a service client to authenticate requests. Service clients across the Azure SDK accept a credential instance when they're constructed, and use that credential to authenticate requests.\n\nThe Azure Identity library focuses on OAuth authentication with Azure AD. It offers various credential classes capable of acquiring an Azure AD access token. See the [Credential classes](#credential-classes \"Credential classes\") section below for a list of this library's credential classes.\n\n### DefaultAzureCredential\n\n`DefaultAzureCredential` is appropriate for most applications that will run in Azure because it combines common production credentials with development credentials. `DefaultAzureCredential` attempts to authenticate via the following mechanisms, in this order, stopping when one succeeds:\n\n>Note: `DefaultAzureCredential` is intended to simplify getting started with the library by handling common\n>scenarios with reasonable default behaviors. Developers who want more control or whose scenario\n>isn't served by the default settings should use other credential types.\n\n![DefaultAzureCredential authentication flow](https://raw.githubusercontent.com/Azure/azure-sdk-for-python/main/sdk/identity/azure-identity/images/mermaidjs/DefaultAzureCredentialAuthFlow.svg)\n\n1. **Environment** - `DefaultAzureCredential` will read account information specified via [environment variables](#environment-variables \"environment variables\") and use it to authenticate.\n1. **Workload Identity** - If the application is deployed to Azure Kubernetes Service with Managed Identity enabled, `DefaultAzureCredential` will authenticate with it.\n1. **Managed Identity** - If the application is deployed to an Azure host with Managed Identity enabled, `DefaultAzureCredential` will authenticate with it.\n1. **Azure CLI** - If a user has signed in via the Azure CLI `az login` command, `DefaultAzureCredential` will authenticate as that user.\n1. **Azure PowerShell** - If a user has signed in via Azure PowerShell's `Connect-AzAccount` command, `DefaultAzureCredential` will authenticate as that user.\n1. **Azure Developer CLI** - If the developer has authenticated via the Azure Developer CLI `azd auth login` command, the `DefaultAzureCredential` will authenticate with that account.\n1. **Interactive browser** - If enabled, `DefaultAzureCredential` will interactively authenticate a user via the default browser. This credential type is disabled by default.\n\n#### Note about `VisualStudioCodeCredential`\n\nDue to a [known issue](https://github.com/Azure/azure-sdk-for-python/issues/23249), `VisualStudioCodeCredential` has been removed from the `DefaultAzureCredential` token chain. When the issue is resolved in a future release, this change will be reverted.\n\n## Examples\n\nThe following examples are provided below:\n\n- [Authenticate with DefaultAzureCredential](#authenticate-with-defaultazurecredential \"Authenticate with DefaultAzureCredential\")\n- [Define a custom authentication flow with ChainedTokenCredential](#define-a-custom-authentication-flow-with-chainedtokencredential \"Define a custom authentication flow with ChainedTokenCredential\")\n- [Async credentials](#async-credentials \"Async credentials\")\n\n### Authenticate with `DefaultAzureCredential`\n\nMore details on configuring your environment to use the `DefaultAzureCredential` can be found in the class's [reference documentation][default_cred_ref].\n\nThis example demonstrates authenticating the `BlobServiceClient` from the [azure-storage-blob][azure_storage_blob] library using `DefaultAzureCredential`.\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.storage.blob import BlobServiceClient\n\ndefault_credential = DefaultAzureCredential()\n\nclient = BlobServiceClient(account_url, credential=default_credential)\n```\n\n#### Enable interactive authentication with `DefaultAzureCredential`\n\nInteractive authentication is disabled in the `DefaultAzureCredential` by default and can be enabled with a keyword argument:\n\n```python\nDefaultAzureCredential(exclude_interactive_browser_credential=False)\n```\n\nWhen enabled, `DefaultAzureCredential` falls back to interactively authenticating via the system's default web browser when no other credential is available.\n\n#### Specify a user-assigned managed identity for `DefaultAzureCredential`\n\nMany Azure hosts allow the assignment of a user-assigned managed identity. To configure `DefaultAzureCredential` to authenticate a user-assigned identity, use the `managed_identity_client_id` keyword argument:\n\n```python\nDefaultAzureCredential(managed_identity_client_id=client_id)\n```\n\nAlternatively, set the environment variable `AZURE_CLIENT_ID` to the identity's client ID.\n\n### Define a custom authentication flow with `ChainedTokenCredential`\n\n`DefaultAzureCredential` is generally the quickest way to get started developing applications for Azure. For more advanced scenarios, [ChainedTokenCredential][chain_cred_ref] links multiple credential instances to be tried sequentially when authenticating. It will try each chained credential in turn until one provides a token or fails to authenticate due to an error.\n\nThe following example demonstrates creating a credential that will first attempt to authenticate using managed identity. The credential will fall back to authenticating via the Azure CLI when a managed identity is unavailable. This example uses the `EventHubProducerClient` from the [azure-eventhub][azure_eventhub] client library.\n\n```python\nfrom azure.eventhub import EventHubProducerClient\nfrom azure.identity import AzureCliCredential, ChainedTokenCredential, ManagedIdentityCredential\n\nmanaged_identity = ManagedIdentityCredential()\nazure_cli = AzureCliCredential()\ncredential_chain = ChainedTokenCredential(managed_identity, azure_cli)\n\nclient = EventHubProducerClient(namespace, eventhub_name, credential_chain)\n```\n\n### Async credentials\n\nThis library includes a set of async APIs. To use the async credentials in [azure.identity.aio][ref_docs_aio], you must first install an async transport, such as [aiohttp](https://pypi.org/project/aiohttp/). For more information, see [azure-core documentation][azure_core_transport_doc].\n\nAsync credentials should be closed when they're no longer needed. Each async credential is an async context manager and defines an async `close` method. For example:\n\n```python\nfrom azure.identity.aio import DefaultAzureCredential\n\n# call close when the credential is no longer needed\ncredential = DefaultAzureCredential()\n...\nawait credential.close()\n\n# alternatively, use the credential as an async context manager\ncredential = DefaultAzureCredential()\nasync with credential:\n  ...\n```\n\nThis example demonstrates authenticating the asynchronous `SecretClient` from [azure-keyvault-secrets][azure_keyvault_secrets] with an asynchronous\ncredential.\n\n```python\nfrom azure.identity.aio import DefaultAzureCredential\nfrom azure.keyvault.secrets.aio import SecretClient\n\ndefault_credential = DefaultAzureCredential()\nclient = SecretClient(\"https://my-vault.vault.azure.net\", default_credential)\n```\n\n## Managed identity support\n\n[Managed identity authentication](https://learn.microsoft.com/azure/active-directory/managed-identities-azure-resources/overview) is supported via either the `DefaultAzureCredential` or the `ManagedIdentityCredential` directly for the following Azure services:\n\n- [Azure App Service and Azure Functions](https://learn.microsoft.com/azure/app-service/overview-managed-identity?tabs=python)\n- [Azure Arc](https://learn.microsoft.com/azure/azure-arc/servers/managed-identity-authentication)\n- [Azure Cloud Shell](https://learn.microsoft.com/azure/cloud-shell/msi-authorization)\n- [Azure Kubernetes Service](https://learn.microsoft.com/azure/aks/use-managed-identity)\n- [Azure Service Fabric](https://learn.microsoft.com/azure/service-fabric/concepts-managed-identity)\n- [Azure Virtual Machines](https://learn.microsoft.com/azure/active-directory/managed-identities-azure-resources/how-to-use-vm-token)\n- [Azure Virtual Machines Scale Sets](https://learn.microsoft.com/azure/active-directory/managed-identities-azure-resources/qs-configure-powershell-windows-vmss)\n\n### Examples\n\n#### Authenticate with a user-assigned managed identity\n\n```python\nfrom azure.identity import ManagedIdentityCredential\nfrom azure.keyvault.secrets import SecretClient\n\ncredential = ManagedIdentityCredential(client_id=managed_identity_client_id)\nclient = SecretClient(\"https://my-vault.vault.azure.net\", credential)\n```\n\n#### Authenticate with a system-assigned managed identity\n\n```python\nfrom azure.identity import ManagedIdentityCredential\nfrom azure.keyvault.secrets import SecretClient\n\ncredential = ManagedIdentityCredential()\nclient = SecretClient(\"https://my-vault.vault.azure.net\", credential)\n```\n\n## Cloud configuration\n\nCredentials default to authenticating to the Azure AD endpoint for Azure Public Cloud. To access resources in other clouds, such as Azure Government or a private cloud, configure credentials with the `authority` argument. [AzureAuthorityHosts](https://aka.ms/azsdk/python/identity/docs#azure.identity.AzureAuthorityHosts) defines authorities for well-known clouds:\n\n```python\nfrom azure.identity import AzureAuthorityHosts\n\nDefaultAzureCredential(authority=AzureAuthorityHosts.AZURE_GOVERNMENT)\n```\n\nNot all credentials require this configuration. Credentials that authenticate through a development tool, such as `AzureCliCredential`, use that tool's configuration. Similarly, `VisualStudioCodeCredential` accepts an `authority` argument but defaults to the authority matching VS Code's \"Azure: Cloud\" setting.\n\n## Credential classes\n\n### Authenticate Azure-hosted applications\n\n|Credential|Usage\n|-|-\n|[`DefaultAzureCredential`][default_cred_ref]| Provides a simplified authentication experience to quickly start developing applications run in Azure.\n|[`ChainedTokenCredential`][chain_cred_ref]| Allows users to define custom authentication flows composing multiple credentials.\n|[`EnvironmentCredential`][environment_cred_ref]| Authenticates a service principal or user via credential information specified in environment variables.\n|[`ManagedIdentityCredential`][managed_id_cred_ref]| Authenticates the managed identity of an Azure resource.\n|[`WorkloadIdentityCredential`][workload_id_cred_ref]| Supports [Azure AD workload identity](https://learn.microsoft.com/azure/aks/workload-identity-overview) on Kubernetes.\n\n### Authenticate service principals\n\n|Credential|Usage|Reference\n|-|-|-\n|[`CertificateCredential`][cert_cred_ref]| Authenticates a service principal using a certificate. | [Service principal authentication](https://learn.microsoft.com/azure/active-directory/develop/app-objects-and-service-principals)\n|[`ClientAssertionCredential`][client_assertion_cred_ref]| Authenticates a service principal using a signed client assertion. |\n|[`ClientSecretCredential`][client_secret_cred_ref]| Authenticates a service principal using a secret. | [Service principal authentication](https://learn.microsoft.com/azure/active-directory/develop/app-objects-and-service-principals)\n\n### Authenticate users\n\n|Credential|Usage|Reference\n|-|-|-\n|[`AuthorizationCodeCredential`][auth_code_cred_ref]| Authenticates a user with a previously obtained authorization code. | [OAuth2 authentication code](https://learn.microsoft.com/azure/active-directory/develop/v2-oauth2-auth-code-flow)\n|[`DeviceCodeCredential`][device_code_cred_ref]| Interactively authenticates a user on devices with limited UI. | [Device code authentication](https://learn.microsoft.com/azure/active-directory/develop/v2-oauth2-device-code)\n|[`InteractiveBrowserCredential`][interactive_cred_ref]| Interactively authenticates a user with the default system browser. | [OAuth2 authentication code](https://learn.microsoft.com/azure/active-directory/develop/v2-oauth2-auth-code-flow)\n|[`OnBehalfOfCredential`][obo_cred_ref]| Propagates the delegated user identity and permissions through the request chain. | [On-behalf-of authentication](https://learn.microsoft.com/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow)\n|[`UsernamePasswordCredential`][userpass_cred_ref]| Authenticates a user with a username and password (doesn't support multi-factor authentication). |  [Username + password authentication](https://learn.microsoft.com/azure/active-directory/develop/v2-oauth-ropc)\n\n### Authenticate via development tools\n\n|Credential|Usage|Reference\n|-|-|-\n|[`AzureCliCredential`][cli_cred_ref]| Authenticates in a development environment with the Azure CLI. | [Azure CLI authentication](https://learn.microsoft.com/cli/azure/authenticate-azure-cli)\n|[`AzureDeveloperCliCredential`][azd_cli_cred_ref]| Authenticates in a development environment with the Azure Developer CLI. | [Azure Developer CLI Reference](https://learn.microsoft.com/azure/developer/azure-developer-cli/reference)\n|[`AzurePowerShellCredential`][powershell_cred_ref]| Authenticates in a development environment with the Azure PowerShell. | [Azure PowerShell authentication](https://learn.microsoft.com/powershell/azure/authenticate-azureps)\n|[`VisualStudioCodeCredential`][vscode_cred_ref]| Authenticates as the user signed in to the Visual Studio Code Azure Account extension. | [VS Code Azure Account extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode.azure-account)\n\n## Environment variables\n\n[DefaultAzureCredential][default_cred_ref] and [EnvironmentCredential][environment_cred_ref] can be configured with environment variables. Each type of authentication requires values for specific\nvariables:\n\n### Service principal with secret\n\n|Variable name|Value\n|-|-\n|`AZURE_CLIENT_ID`|ID of an Azure AD application\n|`AZURE_TENANT_ID`|ID of the application's Azure AD tenant\n|`AZURE_CLIENT_SECRET`|one of the application's client secrets\n\n### Service principal with certificate\n\n|Variable name|Value\n|-|-\n|`AZURE_CLIENT_ID`|ID of an Azure AD application\n|`AZURE_TENANT_ID`|ID of the application's Azure AD tenant\n|`AZURE_CLIENT_CERTIFICATE_PATH`|path to a PEM or PKCS12 certificate file including private key\n|`AZURE_CLIENT_CERTIFICATE_PASSWORD`|password of the certificate file, if any\n\n### Username and password\n\n|Variable name|Value\n|-|-\n|`AZURE_CLIENT_ID`|ID of an Azure AD application\n|`AZURE_USERNAME`|a username (usually an email address)\n|`AZURE_PASSWORD`|that user's password\n\nConfiguration is attempted in the above order. For example, if values for a client secret and certificate are both present, the client secret will be used.\n\n## Token caching\n\nToken caching is a feature provided by the Azure Identity library that allows apps to:\n- Cache tokens in memory (default) or on disk (opt-in).\n- Improve resilience and performance.\n- Reduce the number of requests made to Azure AD to obtain access tokens.\n\nThe Azure Identity library offers both in-memory and persistent disk caching. For more details, see the [token caching documentation](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/TOKEN_CACHING.md).\n\n## Troubleshooting\n\nSee the [troubleshooting guide][troubleshooting_guide] for details on how to diagnose various failure scenarios.\n\n### Error handling\n\nCredentials raise `CredentialUnavailableError` when they're unable to attempt authentication because they lack required data or state. For example,\n[EnvironmentCredential][environment_cred_ref] will raise this exception when [its configuration](#environment-variables \"its configuration\") is incomplete.\n\nCredentials raise `azure.core.exceptions.ClientAuthenticationError` when they fail to authenticate. `ClientAuthenticationError` has a `message` attribute, which describes why authentication failed. When raised by `DefaultAzureCredential` or `ChainedTokenCredential`, the message collects error messages from each credential in the chain.\n\nFor more information on handling specific Azure AD errors, see the Azure AD [error code documentation](https://learn.microsoft.com/azure/active-directory/develop/reference-aadsts-error-codes).\n\n### Logging\n\nThis library uses the standard [logging](https://docs.python.org/3/library/logging.html) library for logging. Credentials log basic information, including HTTP sessions (URLs, headers, etc.) at INFO level. These log entries don't contain authentication secrets.\n\nDetailed DEBUG level logging, including request/response bodies and header values, isn't enabled by default. It can be enabled with the `logging_enable` argument. For example:\n\n```python\ncredential = DefaultAzureCredential(logging_enable=True)\n```\n\n> CAUTION: DEBUG level logs from credentials contain sensitive information.\n> These logs must be protected to avoid compromising account security.\n\n## Next steps\n\n### Client library support\n\nClient and management libraries listed on the [Azure SDK release page](https://azure.github.io/azure-sdk/releases/latest/python.html) that support Azure AD authentication accept credentials from this library. You can learn more about using these libraries in their documentation, which is linked from the release page.\n\n### Known issues\n\nThis library doesn't support [Azure AD B2C][b2c].\n\nFor other open issues, refer to the library's [GitHub repository](https://github.com/Azure/azure-sdk-for-python/issues?q=is%3Aopen+is%3Aissue+label%3AAzure.Identity).\n\n### Provide feedback\n\nIf you encounter bugs or have suggestions, [open an issue](https://github.com/Azure/azure-sdk-for-python/issues).\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [https://cla.microsoft.com](https://cla.microsoft.com).\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You'll only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information, see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\n[auth_code_cred_ref]: https://aka.ms/azsdk/python/identity/authorizationcodecredential\n[azd_cli_cred_ref]: https://aka.ms/azsdk/python/identity/azuredeveloperclicredential\n[azure_cli]: https://learn.microsoft.com/cli/azure\n[azure_developer_cli]:https://aka.ms/azure-dev\n[azure_core_transport_doc]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/CLIENT_LIBRARY_DEVELOPER.md#transport\n[azure_eventhub]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub\n[azure_keyvault_secrets]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-secrets\n[azure_storage_blob]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob\n[b2c]: https://learn.microsoft.com/azure/active-directory-b2c/overview\n[cert_cred_ref]: https://aka.ms/azsdk/python/identity/certificatecredential\n[chain_cred_ref]: https://aka.ms/azsdk/python/identity/chainedtokencredential\n[cli_cred_ref]: https://aka.ms/azsdk/python/identity/azclicredential\n[client_assertion_cred_ref]: https://aka.ms/azsdk/python/identity/clientassertioncredential\n[client_secret_cred_ref]: https://aka.ms/azsdk/python/identity/clientsecretcredential\n[default_cred_ref]: https://aka.ms/azsdk/python/identity/defaultazurecredential\n[device_code_cred_ref]: https://aka.ms/azsdk/python/identity/devicecodecredential\n[environment_cred_ref]: https://aka.ms/azsdk/python/identity/environmentcredential\n[interactive_cred_ref]: https://aka.ms/azsdk/python/identity/interactivebrowsercredential\n[managed_id_cred_ref]: https://aka.ms/azsdk/python/identity/managedidentitycredential\n[obo_cred_ref]: https://aka.ms/azsdk/python/identity/onbehalfofcredential\n[powershell_cred_ref]: https://aka.ms/azsdk/python/identity/powershellcredential\n[ref_docs]: https://aka.ms/azsdk/python/identity/docs\n[ref_docs_aio]: https://aka.ms/azsdk/python/identity/aio/docs\n[troubleshooting_guide]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/TROUBLESHOOTING.md\n[userpass_cred_ref]: https://aka.ms/azsdk/python/identity/usernamepasswordcredential\n[vscode_cred_ref]: https://aka.ms/azsdk/python/identity/vscodecredential\n[workload_id_cred_ref]: https://aka.ms/azsdk/python/identity/workloadidentitycredential\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fsdk%2Fidentity%2Fazure-identity%2FREADME.png)\n",
        "repo_name": "identity/azure-identity",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Azure IoT Device Provisioning client library for Python\n\nThe IoT Hub Device Provisioning Service (DPS) is a helper service for IoT Hub that enables zero-touch, just-in-time provisioning to the right IoT hub without requiring human intervention, allowing customers to provision millions of devices in a secure and scalable manner. \n\nThis service SDK\u202fprovides data plane operations for backend apps. You can use this service SDK to create and manage individual enrollments and enrollment groups, and to query and manage device registration records.\n\nLearn how to provision devices to your IoT hub(s) with our [quickstarts, tutorials, and samples](https://learn.microsoft.com/azure/iot-dps/).\n\n## Getting started\n\n### Prerequisites\n* Python 3.7 or later is required to use this package. For more details, please read our page on [Azure SDK for Python version support policy](https://github.com/Azure/azure-sdk-for-python/wiki/Azure-SDKs-Python-version-support-policy).\n* You must have an [Azure subscription](https://azure.microsoft.com/free/) and an\n[Azure IoT Hub Device Provisioning Service](https://learn.microsoft.com/azure/iot-dps/about-iot-dps) to use this package.\n\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n\n### Install the package\nInstall the Azure IoT Device Provisioning client library for Python with [pip](https://pypi.org/project/pip/):\n```bash\npip install azure-iot-deviceprovisioning\n```\n\n### Create an IoT Hub Device Provisioning Service\nIf you wish to create a new Device Provisioning Service, you can use the\n[Azure CLI](https://learn.microsoft.com/azure/iot-dps/quick-setup-auto-provision-cli):\n\n```bash\n# Create a new resource group (if necessary)\naz group create --name my-resource-group --location westus2\n\n# Create the DPS instance\naz iot dps create --name my-dps --resource-group my-resource-group --location westus2\n```\n\n[Azure Portal](https://learn.microsoft.com/azure/iot-dps/quick-setup-auto-provision),\nor [Bicep](https://learn.microsoft.com/azure/iot-dps/quick-setup-auto-provision-bicep?tabs=CLI),\n\n### Create the client\nThe Azure IoT Device Provisioning client library for Python allows you to interact with three main operational categories: individual enrollments, enrollment groups, and device registration states.\n\nInteraction with these resources starts with an instance of a DeviceProvisioningClient. To create the DeviceProvisioningClient object, you will need the DPS resource's endpoint URL and a credential that allows you to access the resource.\n\n#### Creating the client from Azure credentials\nTo use an [Azure Active Directory (AAD) token credential](https://learn.microsoft.com/azure/iot-dps/concepts-control-access-dps-azure-ad),\n   provide an instance of the desired credential type obtained from the\n   [azure-identity](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity#credentials) library.\n   For example, [DefaultAzureCredential](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity#defaultazurecredential)\n   can be used to authenticate the client.\n\n```python\nfrom azure.iot.deviceprovisioning import DeviceProvisioningClient\nfrom azure.identity import DefaultAzureCredential\n\n# Initialize credential object\ncredential = DefaultAzureCredential()\n\n# Create client using endpoint and credential\nclient = DeviceProvisioningClient(endpoint=\"https://my-dps.azure-device-provisioning.net/\", credential=credential)\n```\n\n#### Using a DPS connection string:\nDepending on your use case and authorization method, you may prefer to initialize a client instance with a DPS\nconnection string instead of providing the endpoint URL and credential separately. To do this, pass the DPS\nconnection string to the client's `from_connection_string` class method:\n\n```python\nfrom azure.iot.deviceprovisioning import DeviceProvisioningClient\n\nconnection_string = \"Hostname=https;SharedAccessKeyName=xxxx;SharedAccessKey=xxxx\"\nclient = DeviceProvisioningClient.from_connection_string(connection_string=connection_string)\n```\n\n#### Using SAS Credentials\nA client instance can also be initialized with an `AzureNamedKeyCredential` using individual components of a DPS resource's Shared Access Policy, as well as an `AzureSasCredential` using a SAS token generated from the policy components and the DPS endpoint string.\n\n```python\nfrom azure.iot.deviceprovisioning import DeviceProvisioningClient\nfrom azure.iot.deviceprovisioning import generate_sas_token\nfrom azure.core.credentials import AzureNamedKeyCredential, AzureSasCredential\n\ndps_endpoint = \"https://my-dps.azure-device-provisioning.net/\"\npolicy_name = \"<access_policy_name>\"\npolicy_key = \"<access_policy_primary_key>\"\n\n\n# AzureNamedKeyCredential\ncredential = AzureNamedKeyCredential(name=policy_name, key=policy_key)\n\n# AzureSasCredential\nsas_token = generate_sas_token(dps_endpoint, policy_name, policy_key)\ncredential = AzureSasCredential(signature=sas_token)\n\nclient = DeviceProvisioningClient(endpoint=dps_endpoint, credential=credential)\n```\n\n### Async Clients \nThis library includes a complete async API supported on Python 3.5+. To use it, you must\nfirst install an async transport, such as [aiohttp](https://pypi.org/project/aiohttp/).\nSee\n[azure-core documentation](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/CLIENT_LIBRARY_DEVELOPER.md#transport)\nfor more information.\n\n## Key concepts\nThe following operation groups comprise the Service data plane layer:\n1. [Individual enrollments](https://learn.microsoft.com/azure/iot-dps/concepts-service#individual-enrollment)\n2. [Enrollment groups](https://learn.microsoft.com/azure/iot-dps/concepts-service#enrollment-group)\n3. [Device registration](https://learn.microsoft.com/azure/iot-dps/concepts-service#registration-record)\n\nThe Azure IoT Device Provisioning client library for Python allows you to interact with each of these components through different operation namespaces on the DeviceProvisioningClient.\n\n## Examples\nThe following sections provide several code snippets covering some of the most common DPS service, including:\n\n* [Create an individual device enrollment](#create-an-individual-device-enrollment \"Create an individual device enrollment\")\n* [Create an enrollment with reprovisioning policies](#create-an-enrollment-with-reprovisioning-policies \"Create an enrollment with reprovisioning policies\")\n* [Create an intermediate x509 certificate enrollment group](#create-an-intermediate-x509-certificate-enrollment-group \"Create an intermediate x509 certificate enrollment group\")\n* [Create an x509 CA certificate enrollment group](#create-an-x509-ca-certificate-enrollment-group \"Create an x509 CA certificate enrollment group\")\n* [Check device registration status](#check-device-registration-status \"Check device registration status\")\n\n### Create an individual device enrollment\nCreate a symmetric key enrollment to provision an individual device and configure its initial state.\n```python\nfrom azure.iot.deviceprovisioning import DeviceProvisioningClient\n\n# Initialize client\nclient = DeviceProvisioningClient.from_connection_string(connection_string=\"<connection_string>\")\n\n# Construct initial twin with desired properties of {\"key\": \"value\"} and a tag of {\"env\": \"Development\"}\ninitial_twin = {\n    \"properties\": {\n        \"desired\": {\n            \"key\": \"value\"\n        }\n    },\n    \"tags\": {\n        \"env\": \"Development\"\n    }\n}\n\n# Create a symmetric key individual enrollment with initial twin\nclient.individual_enrollment.create_or_update(\n    id=\"<enrollment_id>\",\n    enrollment = {\n        \"registrationId\": \"<enrollment_id>\",\n        \"attestation\": {\n            \"type\": \"symmetricKey\",\n        },\n        \"deviceId\": \"<device_id>\",\n        \"initialTwin\": initial_twin\n    }\n)\n```\n\n### Create an enrollment with reprovisioning policies\nCreate an individual enrollment with a specific reprovisioning policy.\n```python\nfrom azure.iot.deviceprovisioning import DeviceProvisioningClient\n\n# Initialize client\nclient = DeviceProvisioningClient.from_connection_string(connection_string=\"<connection_string>\")\n\n# Create a reprovisioning policy to migrate the device's data and reassess hub assignment\nreprovision_policy = {\n    \"migrateDeviceData\": True,\n    \"updateHubAssignment\": True\n}\n\n# Create a symmetric key individual enrollment with reprovisioning policy\nclient.individual_enrollment.create_or_update(\n    id=\"<enrollment_id>\",\n    enrollment = {\n        \"registrationId\": \"<enrollment_id>\",\n        \"attestation\": {\n            \"type\": \"symmetricKey\",\n        },\n        \"deviceId\": \"<device_id>\",\n        \"reprovisionPolicy\": reprovision_policy\n    }\n)\n```\n\n### Create an intermediate x509 certificate enrollment group\nCreate an x509 enrollment group to provision one or more devices using x509 attestation.\n```python\nfrom azure.iot.deviceprovisioning import DeviceProvisioningClient\n\n# Initialize client\nclient = DeviceProvisioningClient.from_connection_string(connection_string=\"<connection_string>\")\n\n# Load certificate contents\ncertificate = open(\"certificate.pem\", \"rt\", encoding=\"utf-8\")\ncert_contents = certificate.read()\n\n# Create x509 enrollment group with an intermediate cert\nclient.enrollment_groups.create_or_update(\n    id=\"<enrollment_group_id>\",\n    enrollment_group={\n        \"enrollmentGroupId\": \"<enrollment_group_id>\",\n        \"attestation\": {\n            \"type\": \"x509\",\n            \"x509\": {\n                \"signingCertificates\": {\n                    \"primary\": {\"certificate\": f\"{cert_contents}\"},\n                    \"secondary\": {\"certificate\": f\"{cert_contents}\"},\n                }\n            },\n        },\n    }\n)\n```\n\n### Create an x509 CA certificate enrollment group\nCreate an enrollment group with an x509 CA certificate attestation. \nThis will ensure a registered device's certificate chain has been signed by the target CA cert at the control plane layer.\n```python\nfrom azure.iot.deviceprovisioning import DeviceProvisioningClient\n\n# Initialize client\nclient = DeviceProvisioningClient.from_connection_string(connection_string=\"<connection_string>\")\n\n# Load certificate contents\nca_certificate = open(\"ca_certificate.pem\", \"rt\", encoding=\"utf-8\")\nca_contents = certificate.read()\n\n# Create x509 enrollment group with CA References\nclient.enrollment_groups.create_or_update(\n    id=\"<enrollment_group_id>\",\n    enrollment_group={\n        \"enrollmentGroupId\": \"<enrollment_group_id>\",\n        \"attestation\": {\n            \"type\": \"x509\",\n            \"x509\": {\n                \"caReferences\": {\n                    \"primary\": f\"{ca_contents}\",\n                    \"secondary\": f\"{ca_contents}\",\n                }\n            },\n        },\n    }\n)\n```\n\n### Check device registration status\n```python\nfrom azure.iot.deviceprovisioningservice import DeviceProvisioningClient\n\n# Initialize client\nclient = DeviceProvisioningClient.from_connection_string(connection_string=\"<connection_string>\")\n\n# Query device registrations for an enrollment group\ndevice_registrations = client.device_registration_state.query(\n    id=\"<enrollment_group_id>\"\n)\n\n# Get device registration status for a particular device\nstate = client.device_registration_state.get(\n    id=\"<device_id>\"\n)\n```\n\n\n## Troubleshooting\n\n\n### Connection String errors\nIf you see an error message that states `IoT DPS connection string has missing property: [property]`, it indicates that your connection string is not formed correctly.\n\nPlease ensure your connection string is semicolon-delimited, and contains the following properties: `hostname`, `sharedaccesskeyname`, and `sharedaccesskey`.\n\n### Standard HTTPResponse errors\nThe client methods in this SDK raise an [HttpResponseError](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/core/azure-core#httpresponseerror) on request failure.\nThe HttpResponseError raised by the Azure IoT Hub Device Provisioning client library includes detailed error response information that provides useful insights into what went wrong and includes corrective actions to fix common issues.\n\nThis error information can be found inside the `message` property of the `HttpResponseError` instance.\n\nHere is an example of how to catch and handle these errors:\n\n```python\ntry:\n    client.individual_enrollment.create_or_update(\n        id=\"<enrollment_id>\",\n        enrollment = {\n            \"registrationId\": \"<enrollment_id>\",\n            \"attestation\": {\n                \"type\": \"symmetricKey\",\n            },\n        }\n    )\nexcept HttpResponseError as error:\n    # handle the error here\n    if error.status_code == 409:\n        pass\n```\n\n- `HTTP 400` errors indicate a malformed or bad request. Verify that your inputs are of the correct type and that you have provided all required properties.\n\n- `HTTP 401` errors indicate problems authenticating. Check the exception message or logs for more information.\n\n- `HTTP 403` errors indicate that the provided user credentials are not authorized to perform a specific operation on this Device Provisioning Service resource. \nThis can also occur if you have incorrectly generated a SAS credential. Verify your credentials and ensure access to your DPS resource.\n\n- `HTTP 409` errors indicate a resource conflict. This can occur if:\n  - You are trying to create an object that already exists\n  - You are updating an object using a `create_or_update_` method without providing an `eTag` / `if-match` value\n\n## Next steps\n\n### More sample code\nGet started with our [samples](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/iothub/azure-iot-deviceprovisioning/samples/).\nprov\nSeveral samples, as well as async samples, are available to you in the samples directory.\n\n- [Device Registration States](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/iothub/azure-iot-deviceprovisioning/samples/dps_service_sample_device_registration.py) ([async version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/iothub/azure-iot-deviceprovisioning/samples/dps_service_sample_device_registration_async.py)):\n    - Create a basic enrollment group\n    - Register a device (Requires device SDK)\n    - Query device registration states for an enrollment group\n    - Get device registration state\n    - Delete device registration state\n\n- [Enrollment Groups](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/iothub/azure-iot-deviceprovisioning/samples/dps_service_sample_enrollment_groups.py) ([async version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/iothub/azure-iot-deviceprovisioning/samples/dps_service_sample_enrollment_groups_async.py)):\n    - Create a symmetric key enrollment group\n    - Create an x509 certificate enrollment group\n    - Get an enrollment group\n    - Update an enrollment group\n    - Get enrollment group attestation mechanism\n    - Bulk enrollment group operations\n    - Delete enrollment group\n\n\n- [Individual Enrollments](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/iothub/azure-iot-deviceprovisioning/samples/dps_service_sample_individual_enrollments.py) ([async version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/iothub/azure-iot-deviceprovisioning/samples/dps_service_sample_individual_enrollments_async.py)):\n    - Create a symmetric key individual enrollment\n    - Create a TPM attestation individual enrollment\n    - Create an x509 certificate individual enrollment\n    - Get an individual enrollment\n    - Update an individual enrollment\n    - Get an individual enrollment's attestation mechanism\n    - Bulk individual enrollment operations\n    - Delete an individual enrollment\n\n### Additional documentation\nFor more extensive documentation on Azure IoT Hub Device Provisioning Service, see the [Azure IoT Hub Device Provisioning Service documentation](https://learn.microsoft.com/azure/iot-dps/) on learn.microsoft.com.\n\n## Contributing\nThis project welcomes contributions and suggestions.  Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n",
        "repo_name": "iothub/azure-iot-deviceprovisioning",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/iothub/azure-iot-deviceprovisioning",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Iot Central Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/)\nCode samples for this package can be found at [Iot Central Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-iotcentral%2FREADME.png)\n",
        "repo_name": "iothub/azure-mgmt-iotcentral",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/iothub/azure-mgmt-iotcentral",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure IoT Hub Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-iothub\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.iothub import IotHubClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = IotHubClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\nCode samples for this package can be found at:\n- [Search IoT Hub Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com\n- [Azure Python Mgmt SDK Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-iothub%2FREADME.png)\n",
        "repo_name": "iothub/azure-mgmt-iothub",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/iothub/azure-mgmt-iothub",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure IoT Hub Provisioning Services Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/iot)\nCode samples for this package can be found at [IoT Hub Provisioning Services](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://github.com/Azure-Samples/azure-samples-python-management/tree/main/samples/iothubprovisioningservices)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-iothubprovisioningservices%2FREADME.png)\n",
        "repo_name": "iothub/azure-mgmt-iothubprovisioningservices",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/iothub/azure-mgmt-iothubprovisioningservices",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Azure Key Vault Administration client library for Python\n\n>**Note:** The Administration library only works with [Managed HSM][managed_hsm] \u2013 functions targeting a Key Vault will fail.\n\nAzure Key Vault helps solve the following problems:\n- Vault administration (this library) - role-based access control (RBAC), and vault-level backup and restore options\n- Cryptographic key management ([azure-keyvault-keys](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-keys)) - create, store, and control\naccess to the keys used to encrypt your data\n- Secrets management\n([azure-keyvault-secrets](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-secrets)) -\nsecurely store and control access to tokens, passwords, certificates, API keys,\nand other secrets\n- Certificate management\n([azure-keyvault-certificates](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-certificates)) -\ncreate, manage, and deploy public and private SSL/TLS certificates\n\n[Source code][library_src]\n| [Package (PyPI)][pypi_package_administration]\n| [Package (Conda)](https://anaconda.org/microsoft/azure-keyvault/)\n| [API reference documentation][reference_docs]\n| [Product documentation][keyvault_docs]\n| [Samples][administration_samples]\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691._\n_Python 3.7 or later is required to use this package. For more details, please refer to [Azure SDK for Python version support policy](https://github.com/Azure/azure-sdk-for-python/wiki/Azure-SDKs-Python-version-support-policy)._\n\n## Getting started\n### Install packages\nInstall [azure-keyvault-administration][pypi_package_administration] and\n[azure-identity][azure_identity_pypi] with [pip][pip]:\n```Bash\npip install azure-keyvault-administration azure-identity\n```\n[azure-identity][azure_identity] is used for Azure Active Directory\nauthentication as demonstrated below.\n\n### Prerequisites\n* An [Azure subscription][azure_sub]\n* Python 3.7 or later\n* An existing [Key Vault Managed HSM][managed_hsm]. If you need to create one, you can do so using the Azure CLI by following the steps in [this document][managed_hsm_cli].\n\n### Authenticate the client\nIn order to interact with the Azure Key Vault service, you will need an instance of either a [KeyVaultAccessControlClient](#create-a-keyvaultaccesscontrolclient) or [KeyVaultBackupClient](#create-a-keyvaultbackupclient), as well as a **vault url** (which you may see as \"DNS Name\" in the Azure Portal) and a credential object. This document demonstrates using a [DefaultAzureCredential][default_cred_ref], which is appropriate for most scenarios, including local development and production environments. We recommend using a [managed identity][managed_identity] for authentication in production environments.\n\nSee [azure-identity][azure_identity] documentation for more information about other methods of authentication and their corresponding credential types.\n\n#### Create a KeyVaultAccessControlClient\nAfter configuring your environment for the [DefaultAzureCredential][default_cred_ref] to use a suitable method of authentication, you can do the following to create an access control client (replacing the value of `vault_url` with your Managed HSM's URL):\n\n<!-- SNIPPET:access_control_operations.create_an_access_control_client -->\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.keyvault.administration import KeyVaultAccessControlClient\n\nMANAGED_HSM_URL = os.environ[\"MANAGED_HSM_URL\"]\ncredential = DefaultAzureCredential()\nclient = KeyVaultAccessControlClient(vault_url=MANAGED_HSM_URL, credential=credential)\n```\n\n<!-- END SNIPPET -->\n\n> **NOTE:** For an asynchronous client, import `azure.keyvault.administration.aio`'s `KeyVaultAccessControlClient` instead.\n\n#### Create a KeyVaultBackupClient\nAfter configuring your environment for the [DefaultAzureCredential][default_cred_ref] to use a suitable method of authentication, you can do the following to create a backup client (replacing the value of `vault_url` with your Managed HSM's URL):\n\n<!-- SNIPPET:backup_restore_operations.create_a_backup_restore_client -->\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.keyvault.administration import KeyVaultBackupClient\n\nMANAGED_HSM_URL = os.environ[\"MANAGED_HSM_URL\"]\ncredential = DefaultAzureCredential()\nclient = KeyVaultBackupClient(vault_url=MANAGED_HSM_URL, credential=credential)\n```\n\n<!-- END SNIPPET -->\n\n> **NOTE:** For an asynchronous client, import `azure.keyvault.administration.aio`'s `KeyVaultBackupClient` instead.\n\n#### Create a KeyVaultSettingsClient\nAfter configuring your environment for the [DefaultAzureCredential][default_cred_ref] to use a suitable method of authentication, you can do the following to create a settings client (replacing the value of `vault_url` with your Managed HSM's URL):\n\n<!-- SNIPPET:settings_operations.create_a_settings_client -->\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.keyvault.administration import KeyVaultSettingsClient\n\nMANAGED_HSM_URL = os.environ[\"MANAGED_HSM_URL\"]\ncredential = DefaultAzureCredential()\nclient = KeyVaultSettingsClient(vault_url=MANAGED_HSM_URL, credential=credential)\n```\n\n<!-- END SNIPPET -->\n\n> **NOTE:** For an asynchronous client, import `azure.keyvault.administration.aio`'s `KeyVaultSettingsClient` instead.\n\n## Key concepts\n\n### Role definition\nA role definition defines the operations that can be performed, such as read, write, and delete. It can also define the operations that are excluded from allowed operations.\n\nA role definition is specified as part of a role assignment.\n\n### Role assignment\nA role assignment is the association of a role definition to a service principal. They can be created, listed, fetched individually, and deleted.\n\n### KeyVaultAccessControlClient\nA `KeyVaultAccessControlClient` manages role definitions and role assignments.\n\n### KeyVaultBackupClient\nA `KeyVaultBackupClient` performs full key backups, full key restores, and selective key restores.\n\n### KeyVaultSettingsClient\n\nA `KeyVaultSettingsClient` manages Managed HSM account settings.\n\n## Examples\nThis section contains code snippets covering common tasks:\n* Access control\n    * [List all role definitions](#list-all-role-definitions)\n    * [Set, get, and delete a role definition](#set-get-and-delete-a-role-defintion)\n    * [List all role assignments](#list-all-role-assignments)\n    * [Create, get, and delete a role assignment](#create-get-and-delete-a-role-assignment)\n* Backup and restore\n    * [Perform a full key backup](#perform-a-full-key-backup)\n    * [Perform a full key restore](#perform-a-full-key-restore)\n    * [Perform a selective key restore](#perform-a-selective-key-restore)\n\n### List all role definitions\n`list_role_definitions` can be used by a `KeyVaultAccessControlClient` to list the role definitions available for\nassignment.\n\n<!-- SNIPPET:access_control_operations.list_role_definitions -->\n\n```python\nfrom azure.keyvault.administration import KeyVaultRoleScope\n\nrole_definitions = client.list_role_definitions(scope=KeyVaultRoleScope.GLOBAL)\nfor definition in role_definitions:\n    print(f\"Role name: {definition.role_name}; Role definition name: {definition.name}\")\n```\n\n<!-- END SNIPPET -->\n\n### Set, get, and delete a role definition\n\n`set_role_definition` can be used by a `KeyVaultAccessControlClient` to either create a custom role definition or update\nan existing definition with the specified unique `name` (a UUID).\n\n<!-- SNIPPET:access_control_operations.create_a_role_definition -->\n\n```python\nfrom azure.keyvault.administration import KeyVaultDataAction, KeyVaultPermission, KeyVaultRoleScope\n\nrole_name = \"customRole\"\nscope = KeyVaultRoleScope.GLOBAL\npermissions = [KeyVaultPermission(data_actions=[KeyVaultDataAction.CREATE_HSM_KEY])]\nrole_definition = client.set_role_definition(scope=scope, role_name=role_name, permissions=permissions)\n```\n\n<!-- END SNIPPET -->\n\n<!-- SNIPPET:access_control_operations.update_a_role_definition -->\n\n```python\nnew_permissions = [\n    KeyVaultPermission(\n        data_actions=[KeyVaultDataAction.READ_HSM_KEY],\n        not_data_actions=[KeyVaultDataAction.CREATE_HSM_KEY]\n    )\n]\nunique_definition_name = role_definition.name\nupdated_definition = client.set_role_definition(\n    scope=scope, name=unique_definition_name, role_name=role_name, permissions=new_permissions\n)\n```\n\n<!-- END SNIPPET -->\n\n`get_role_definition` can be used by a `KeyVaultAccessControlClient` to fetch a role definition with the specified scope\nand unique name.\n\n<!-- SNIPPET:access_control_operations.get_a_role_definition -->\n\n```python\nfetched_definition = client.get_role_definition(scope=scope, name=unique_definition_name)\n```\n\n<!-- END SNIPPET -->\n\n`delete_role_definition` can be used by a `KeyVaultAccessControlClient` to delete a role definition with the specified\nscope and unique name.\n\n<!-- SNIPPET:access_control_operations.delete_a_role_definition -->\n\n```python\nclient.delete_role_definition(scope=scope, name=unique_definition_name)\n```\n\n<!-- END SNIPPET -->\n\n### List all role assignments\n`list_role_assignments` can be used by a `KeyVaultAccessControlClient` to list all of the current role assignments.\n\n<!-- SNIPPET:access_control_operations.list_role_assignments -->\n\n```python\nfrom azure.keyvault.administration import KeyVaultRoleScope\n\nrole_assignments = client.list_role_assignments(KeyVaultRoleScope.GLOBAL)\nfor assignment in role_assignments:\n    print(f\"Role assignment name: {assignment.name}\")\n    print(f\"Principal ID associated with this assignment: {assignment.properties.principal_id}\")\n```\n\n<!-- END SNIPPET -->\n\n### Create, get, and delete a role assignment\nRole assignments assign a role to a service principal. This will require a role definition ID and service principal\nobject ID. You can use an ID from the retrieved [list of role definitions](#list-all-role-definitions) for the former,\nand an assignment's `principal_id` from the list retrieved in the [above snippet](#list-all-role-assignments) for the\nlatter. Provide these values, and a scope, to a `KeyVaultAccessControlClient`'s `create_role_assignment` method.\n\n<!-- SNIPPET:access_control_operations.create_a_role_assignment -->\n\n```python\nfrom azure.keyvault.administration import KeyVaultRoleScope\n\nscope = KeyVaultRoleScope.GLOBAL\nrole_assignment = client.create_role_assignment(scope=scope, definition_id=definition_id, principal_id=principal_id)\nprint(f\"Role assignment {role_assignment.name} created successfully.\")\n```\n\n<!-- END SNIPPET -->\n\n`get_role_assignment` can be used by a `KeyVaultAccessControlClient` to fetch an existing role assignment with the\nspecified scope and unique name.\n\n<!-- SNIPPET:access_control_operations.get_a_role_assignment -->\n\n```python\nfetched_assignment = client.get_role_assignment(scope=scope, name=role_assignment.name)\nprint(f\"Role assignment for principal {fetched_assignment.properties.principal_id} fetched successfully.\")\n```\n\n<!-- END SNIPPET -->\n\n`delete_role_assignment` can be used by a `KeyVaultAccessControlClient` to delete a role assignment with the specified\nscope and unique name.\n\n<!-- SNIPPET:access_control_operations.delete_a_role_assignment -->\n\n```python\nclient.delete_role_assignment(scope=scope, name=role_assignment.name)\n```\n\n<!-- END SNIPPET -->\n\n### Perform a full key backup\nThe `KeyVaultBackupClient` can be used to back up your entire collection of keys. The backing store for full key\nbackups is a blob storage container using Shared Access Signature (SAS) authentication.\n\nFor more details on creating a SAS token using a `BlobServiceClient` from [`azure-storage-blob`][storage_blob], refer\nto the library's [credential documentation][sas_docs]. Alternatively, it is possible to\n[generate a SAS token in Storage Explorer][storage_explorer].\n\n<!-- SNIPPET:backup_restore_operations.begin_backup -->\n\n```python\nCONTAINER_URL = os.environ[\"CONTAINER_URL\"]\nSAS_TOKEN = os.environ[\"SAS_TOKEN\"]\n\nbackup_result = client.begin_backup(CONTAINER_URL, SAS_TOKEN).result()\nprint(f\"Azure Storage Blob URL of the backup: {backup_result.folder_url}\")\n```\n\n<!-- END SNIPPET -->\n\nNote that the `begin_backup` method returns a poller. Calling `result()` on this poller returns a\n`KeyVaultBackupResult` containing information about the backup. Calling `wait()` on the poller will instead block until\nthe operation is complete without returning an object.\n\n### Perform a full key restore\nThe `KeyVaultBackupClient` can be used to restore your entire collection of keys from a backup. The data source for a\nfull key restore is a storage blob accessed using Shared Access Signature authentication. You will also need the URL of\nthe backup (`KeyVaultBackupResult.folder_url`) from the [above snippet](#perform-a-full-key-backup).\n\nFor more details on creating a SAS token using a `BlobServiceClient` from [`azure-storage-blob`][storage_blob], refer\nto the library's [credential documentation][sas_docs]. Alternatively, it is possible to\n[generate a SAS token in Storage Explorer][storage_explorer].\n\n<!-- SNIPPET:backup_restore_operations.begin_backup -->\n\n```python\nCONTAINER_URL = os.environ[\"CONTAINER_URL\"]\nSAS_TOKEN = os.environ[\"SAS_TOKEN\"]\n\nbackup_result = client.begin_backup(CONTAINER_URL, SAS_TOKEN).result()\nprint(f\"Azure Storage Blob URL of the backup: {backup_result.folder_url}\")\n```\n\n<!-- END SNIPPET -->\n\nNote that the `begin_restore` method returns a poller. Unlike the poller returned by `begin_backup`, this poller's\n`result` method returns `None`; therefore, calling `wait()` is functionally the same.\n\n### Perform a selective key restore\n\nTo restore a single key from a backed up vault instead of all keys, provide the key name as a `key_name` argument to the\n`begin_restore` method [shown above](#perform-a-full-key-restore).\n\n## Troubleshooting\n\nSee the `azure-keyvault-administration`\n[troubleshooting guide](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-administration/TROUBLESHOOTING.md)\nfor details on how to diagnose various failure scenarios.\n\n### General\nKey Vault clients raise exceptions defined in [azure-core][azure_core_exceptions].\nFor example, if you try to get a role assignment that doesn't exist, KeyVaultAccessControlClient\nraises [ResourceNotFoundError](https://aka.ms/azsdk-python-core-exceptions-resource-not-found-error):\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.keyvault.administration import KeyVaultAccessControlClient\nfrom azure.core.exceptions import ResourceNotFoundError\n\ncredential = DefaultAzureCredential()\nclient = KeyVaultAccessControlClient(vault_url=\"https://my-managed-hsm-name.managedhsm.azure.net/\", credential=credential)\n\ntry:\n    client.get_role_assignment(\"/\", \"which-does-not-exist\")\nexcept ResourceNotFoundError as e:\n    print(e.message)\n```\n\nClients from the Administration library can only be used to perform operations on a managed HSM, so attempting to do so on a Key Vault will raise an error.\n\n## Next steps\nSeveral samples are available in the Azure SDK for Python GitHub repository. These samples provide example code for additional Key Vault scenarios:\n| File | Description |\n|-------------|-------------|\n| [access_control_operations.py][access_control_operations_sample] | create/update/delete role definitions and role assignments |\n| [access_control_operations_async.py][access_control_operations_async_sample] | create/update/delete role definitions and role assignments with an async client |\n| [backup_restore_operations.py][backup_operations_sample] | full backup and restore |\n| [backup_restore_operations_async.py][backup_operations_async_sample] | full backup and restore with an async client |\n| [settings_operations.py][settings_operations_sample] | list and update Key Vault settings |\n| [settings_operations_async.py][settings_operations_async_sample] | list and update Key Vault settings with an async client |\n\n###  Additional documentation\nFor more extensive documentation on Azure Key Vault, see the [API reference documentation][reference_docs].\n\nFor more extensive documentation on Managed HSM, see the [service documentation][managed_hsm].\n\n## Contributing\nThis project welcomes contributions and suggestions. Most contributions require\nyou to agree to a Contributor License Agreement (CLA) declaring that you have\nthe right to, and actually do, grant us the rights to use your contribution.\nFor details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether\nyou need to provide a CLA and decorate the PR appropriately (e.g., label,\ncomment). Simply follow the instructions provided by the bot. You will only\nneed to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct].\nFor more information, see the\n[Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or\ncontact opencode@microsoft.com with any additional questions or comments.\n\n\n<!-- LINKS -->\n[access_control]: https://docs.microsoft.com/azure/key-vault/managed-hsm/access-control\n[access_control_operations_sample]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-administration/samples/access_control_operations.py\n[access_control_operations_async_sample]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-administration/samples/access_control_operations_async.py\n[administration_samples]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-administration/samples\n[azure_cloud_shell]: https://shell.azure.com/bash\n[azure_core_exceptions]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/core/azure-core#azure-core-library-exceptions\n[azure_identity]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity\n[azure_identity_pypi]: https://pypi.org/project/azure-identity/\n[azure_sub]: https://azure.microsoft.com/free/\n\n[backup_operations_sample]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-administration/samples/backup_restore_operations.py\n[backup_operations_async_sample]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-administration/samples/backup_restore_operations_async.py\n[best_practices]: https://docs.microsoft.com/azure/key-vault/managed-hsm/best-practices\n[built_in_roles]: https://docs.microsoft.com/azure/key-vault/managed-hsm/built-in-roles\n\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n\n[default_cred_ref]: https://aka.ms/azsdk/python/identity/docs#azure.identity.DefaultAzureCredential\n\n[keyvault_docs]: https://docs.microsoft.com/azure/key-vault/\n\n[library_src]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-administration/azure/keyvault/administration\n\n[managed_hsm]: https://docs.microsoft.com/azure/key-vault/managed-hsm/overview\n[managed_hsm_cli]: https://docs.microsoft.com/azure/key-vault/managed-hsm/quick-create-cli\n[managed_identity]: https://docs.microsoft.com/azure/active-directory/managed-identities-azure-resources/overview\n\n[pip]: https://pypi.org/project/pip/\n[pypi_package_administration]: https://pypi.org/project/azure-keyvault-administration\n\n[reference_docs]: https://aka.ms/azsdk/python/keyvault-administration/docs\n\n[sas_docs]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-blob/README.md#types-of-credentials\n[settings_operations_sample]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-administration/samples/settings_operations.py\n[settings_operations_async_sample]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-administration/samples/settings_operations_async.py\n[storage_blob]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob/README.md\n[storage_explorer]: https://learn.microsoft.com/azure/vs-azure-tools-storage-manage-with-storage-explorer\n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fsdk%2Fkeyvault%2Fazure-keyvault-administration%2FREADME.png)\n",
        "repo_name": "keyvault/azure-keyvault-administration",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-administration",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Azure Key Vault Certificates client library for Python\nAzure Key Vault helps solve the following problems:\n- Certificate management (this library) - create, manage, and deploy public and private SSL/TLS certificates\n- Cryptographic key management\n([azure-keyvault-keys](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-keys)) - create, store, and control access to the keys used to encrypt your data\n- Secrets management\n([azure-keyvault-secrets](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-secrets)) -\nsecurely store and control access to tokens, passwords, certificates, API keys,\nand other secrets\n- Vault administration ([azure-keyvault-administration](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-administration)) - role-based access control (RBAC), and vault-level backup and restore options\n\n[Source code][library_src]\n| [Package (PyPI)][pypi_package_certificates]\n| [Package (Conda)](https://anaconda.org/microsoft/azure-keyvault/)\n| [API reference documentation][reference_docs]\n| [Product documentation][azure_keyvault]\n| [Samples][certificates_samples]\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_.\n_Python 3.7 or later is required to use this package. For more details, please refer to [Azure SDK for Python version support policy](https://github.com/Azure/azure-sdk-for-python/wiki/Azure-SDKs-Python-version-support-policy)._\n\n## Getting started\n### Install the package\nInstall [azure-keyvault-certificates][pypi_package_certificates] and\n[azure-identity][azure_identity_pypi] with [pip][pip]:\n```Bash\npip install azure-keyvault-certificates azure-identity\n```\n[azure-identity][azure_identity] is used for Azure Active Directory\nauthentication as demonstrated below.\n\n### Prerequisites\n* An [Azure subscription][azure_sub]\n* Python 3.7 or later\n* An existing [Azure Key Vault][azure_keyvault]. If you need to create one, you can do so using the Azure CLI by following the steps in [this document][azure_keyvault_cli].\n\n### Authenticate the client\nIn order to interact with the Azure Key Vault service, you will need an instance of a [CertificateClient][certificate_client_docs], as well as a **vault url** and a credential object. This document demonstrates using a [DefaultAzureCredential][default_cred_ref], which is appropriate for most scenarios, including local development and production environments. We recommend using a [managed identity][managed_identity] for authentication in production environments.\n\nSee [azure-identity][azure_identity] documentation for more information about other methods of authentication and their corresponding credential types.\n\n#### Create a client\nAfter configuring your environment for the [DefaultAzureCredential][default_cred_ref] to use a suitable method of authentication, you can do the following to create a certificate client (replacing the value of `VAULT_URL` with your vault's URL):\n\n<!-- SNIPPET:hello_world.create_a_certificate_client -->\n\n```python\nVAULT_URL = os.environ[\"VAULT_URL\"]\ncredential = DefaultAzureCredential()\nclient = CertificateClient(vault_url=VAULT_URL, credential=credential)\n```\n\n<!-- END SNIPPET -->\n\n> **NOTE:** For an asynchronous client, import `azure.keyvault.certificates.aio`'s `CertificateClient` instead.\n\n## Key concepts\n### CertificateClient\nWith a [CertificateClient][certificate_client_docs] you can get certificates from the vault, create new certificates and new versions of existing certificates, update certificate metadata, and delete certificates. You can also manage certificate issuers, contacts, and management policies of certificates. This is illustrated in the [examples](#examples) below.\n\n## Examples\nThis section contains code snippets covering common tasks:\n* [Create a certificate](#create-a-certificate)\n* [Retrieve a certificate](#retrieve-a-certificate)\n* [Update properties of an existing certificate](#update-properties-of-an-existing-certificate)\n* [Delete a certificate](#delete-a-certificate)\n* [List properties of certificates](#list-properties-of-certificates)\n* [Async operations](#async-operations)\n* [Asynchronously create a certificate](#asynchronously-create-a-certificate)\n* [Asynchronously list properties of certificates](#asynchronously-list-properties-of-certificates)\n\n### Create a certificate\n[begin_create_certificate](https://aka.ms/azsdk/python/keyvault-certificates/docs#azure.keyvault.certificates.CertificateClient.begin_create_certificate)\ncreates a certificate to be stored in the Azure Key Vault. If a certificate with the same name already exists, a new\nversion of the certificate is created. Before creating a certificate, a management policy for the certificate can be\ncreated or our default policy will be used. This method returns a long running operation poller.\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.keyvault.certificates import CertificateClient, CertificatePolicy\n\ncredential = DefaultAzureCredential()\n\ncertificate_client = CertificateClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\n\ncreate_certificate_poller = certificate_client.begin_create_certificate(\n    certificate_name=\"cert-name\", policy=CertificatePolicy.get_default()\n)\nprint(create_certificate_poller.result())\n```\nIf you would like to check the status of your certificate creation, you can call `status()` on the poller or\n[get_certificate_operation](https://aka.ms/azsdk/python/keyvault-certificates/docs#azure.keyvault.certificates.CertificateClient.get_certificate_operation)\nwith the name of the certificate.\n\n### Retrieve a certificate\n[get_certificate](https://aka.ms/azsdk/python/keyvault-certificates/docs#azure.keyvault.certificates.CertificateClient.get_certificate)\nretrieves the latest version of a certificate previously stored in the Key Vault.\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.keyvault.certificates import CertificateClient\n\ncredential = DefaultAzureCredential()\n\ncertificate_client = CertificateClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\n\ncertificate = certificate_client.get_certificate(\"cert-name\")\n\nprint(certificate.name)\nprint(certificate.properties.version)\nprint(certificate.policy.issuer_name)\n```\n\n[get_certificate_version](https://aka.ms/azsdk/python/keyvault-certificates/docs#azure.keyvault.certificates.CertificateClient.get_certificate_version)\nretrieves a specific version of a certificate.\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.keyvault.certificates import CertificateClient\n\ncredential = DefaultAzureCredential()\n\ncertificate_client = CertificateClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\ncertificate = certificate_client.get_certificate_version(certificate_name=\"cert-name\", version=\"cert-version\")\n\nprint(certificate.name)\nprint(certificate.properties.version)\n```\n\n### Update properties of an existing certificate\n[update_certificate_properties](https://aka.ms/azsdk/python/keyvault-certificates/docs#azure.keyvault.certificates.CertificateClient.update_certificate_properties)\nupdates a certificate previously stored in the Key Vault.\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.keyvault.certificates import CertificateClient\n\ncredential = DefaultAzureCredential()\n\ncertificate_client = CertificateClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\n\n# we will now disable the certificate for further use\nupdated_certificate= certificate_client.update_certificate_properties(\n    certificate_name=\"cert-name\", enabled=False\n)\n\nprint(updated_certificate.name)\nprint(updated_certificate.properties.enabled)\n```\n\n### Delete a certificate\n[begin_delete_certificate](https://aka.ms/azsdk/python/keyvault-certificates/docs#azure.keyvault.certificates.CertificateClient.begin_delete_certificate)\nrequests Key Vault delete a certificate, returning a poller which allows you to wait for the deletion to finish.\nWaiting is helpful when the vault has [soft-delete][soft_delete] enabled, and you want to purge\n(permanently delete) the certificate as soon as possible. When [soft-delete][soft_delete] is disabled,\n`begin_delete_certificate` itself is permanent.\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.keyvault.certificates import CertificateClient\n\ncredential = DefaultAzureCredential()\n\ncertificate_client = CertificateClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\n\ndeleted_certificate_poller = certificate_client.begin_delete_certificate(\"cert-name\")\n\ndeleted_certificate = deleted_certificate_poller.result()\nprint(deleted_certificate.name)\nprint(deleted_certificate.deleted_on)\n```\n### List properties of certificates\n[list_properties_of_certificates](https://aka.ms/azsdk/python/keyvault-certificates/docs#azure.keyvault.certificates.CertificateClient.list_properties_of_certificates)\nlists the properties of all certificates in the specified Key Vault.\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.keyvault.certificates import CertificateClient\n\ncredential = DefaultAzureCredential()\n\ncertificate_client = CertificateClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\n\ncertificates = certificate_client.list_properties_of_certificates()\n\nfor certificate in certificates:\n    # this list doesn't include versions of the certificates\n    print(certificate.name)\n```\n\n### Async operations\nThis library includes a complete set of async APIs. To use them, you must\nfirst install an async transport, such as [aiohttp](https://pypi.org/project/aiohttp/).\nSee\n[azure-core documentation](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/CLIENT_LIBRARY_DEVELOPER.md#transport)\nfor more information.\n\nAsync clients and credentials should be closed when they're no longer needed. These\nobjects are async context managers and define async `close` methods. For\nexample:\n\n```python\nfrom azure.identity.aio import DefaultAzureCredential\nfrom azure.keyvault.certificates.aio import CertificateClient\n\ncredential = DefaultAzureCredential()\n\n# call close when the client and credential are no longer needed\nclient = CertificateClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\n...\nawait client.close()\nawait credential.close()\n\n# alternatively, use them as async context managers (contextlib.AsyncExitStack can help)\nclient = CertificateClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\nasync with client:\n  async with credential:\n    ...\n```\n\n### Asynchronously create a certificate\n[create_certificate](https://aka.ms/azsdk/python/keyvault-certificates/aio/docs#azure.keyvault.certificates.aio.CertificateClient.create_certificate)\ncreates a certificate to be stored in the Azure Key Vault. If a certificate with the same name already exists, a new\nversion of the certificate is created. Before creating a certificate, a management policy for the certificate can be\ncreated or our default policy will be used. Awaiting `create_certificate` returns your created certificate if creation\nis successful, and a\n[CertificateOperation](https://aka.ms/azsdk/python/keyvault-certificates/docs#azure.keyvault.certificates.CertificateOperation)\nif it is not.\n```python\nfrom azure.identity.aio import DefaultAzureCredential\nfrom azure.keyvault.certificates.aio import CertificateClient\nfrom azure.keyvault.certificates import CertificatePolicy\n\ncredential = DefaultAzureCredential()\n\ncertificate_client = CertificateClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\n\ncreate_certificate_result = await certificate_client.create_certificate(\n    certificate_name=\"cert-name\", policy=CertificatePolicy.get_default()\n)\nprint(create_certificate_result)\n```\n\n### Asynchronously list properties of certificates\n[list_properties_of_certificates](https://aka.ms/azsdk/python/keyvault-certificates/aio/docs#azure.keyvault.certificates.aio.CertificateClient.list_properties_of_certificates)\nlists all the properties of the certificates in the client's vault:\n```python\nfrom azure.identity.aio import DefaultAzureCredential\nfrom azure.keyvault.certificates.aio import CertificateClient\n\ncredential = DefaultAzureCredential()\n\ncertificate_client = CertificateClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\n\ncertificates = certificate_client.list_properties_of_certificates()\nasync for certificate in certificates:\n    print(certificate.name)\n```\n\n## Troubleshooting\n\nSee the `azure-keyvault-certificates`\n[troubleshooting guide](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-certificates/TROUBLESHOOTING.md)\nfor details on how to diagnose various failure scenarios.\n\n### General\nKey Vault clients raise exceptions defined in [azure-core][azure_core_exceptions].\nFor example, if you try to get a key that doesn't exist in the vault, [CertificateClient][certificate_client_docs]\nraises [ResourceNotFoundError](https://aka.ms/azsdk-python-core-exceptions-resource-not-found-error):\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.keyvault.certificates import CertificateClient\nfrom azure.core.exceptions import ResourceNotFoundError\n\ncredential = DefaultAzureCredential()\ncertificate_client = CertificateClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\n\ntry:\n    certificate_client.get_certificate(\"which-does-not-exist\")\nexcept ResourceNotFoundError as e:\n    print(e.message)\n```\n### Logging\nThis library uses the standard\n[logging](https://docs.python.org/3.5/library/logging.html) library for logging.\nBasic information about HTTP sessions (URLs, headers, etc.) is logged at INFO\nlevel.\n\nDetailed DEBUG level logging, including request/response bodies and unredacted\nheaders, can be enabled on a client with the `logging_enable` argument:\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.keyvault.certificates import CertificateClient\nimport sys\nimport logging\n\n# Create a logger for the 'azure' SDK\nlogger = logging.getLogger('azure')\nlogger.setLevel(logging.DEBUG)\n\n# Configure a console output\nhandler = logging.StreamHandler(stream=sys.stdout)\nlogger.addHandler(handler)\n\ncredential = DefaultAzureCredential()\n\n# This client will log detailed information about its HTTP sessions, at DEBUG level\nclient = CertificateClient(\n    vault_url=\"https://my-key-vault.vault.azure.net/\",\n    credential=credential,\n    logging_enable=True\n)\n```\n\nNetwork trace logging can also be enabled for any single operation:\n```python\ncertificate = certificate_client.get_certificate(certificate_name=\"cert-name\", logging_enable=True)\n```\n\n## Next steps\nSeveral samples are available in the Azure SDK for Python GitHub repository. These samples provide example code for additional Key Vault scenarios:\n| File | Description |\n|-------------|-------------|\n| [hello_world.py][hello_world_sample] ([async version][hello_world_async_sample]) | create/get/update/delete certificates |\n| [backup_restore_operations.py][backup_operations_sample] ([async version][backup_operations_async_sample]) | back up and recover certificates |\n| [import_certificate.py][import_certificate_sample] ([async version][import_certificate_async_sample]) | import PKCS#12 (PFX) and PEM-formatted certificates into Key Vault |\n| [list_operations.py][list_operations_sample] ([async version][list_operations_async_sample]) | list certificates |\n| [recover_purge_operations.py][recover_purge_operations_sample] ([async version][recover_purge_operations_async_sample]) | recover and purge certificates |\n| [issuers.py][issuers_sample] ([async version][issuers_async_sample]) | manage certificate issuers |\n| [contacts.py][contacts_sample] ([async version][contacts_async_sample]) | manage certificate contacts |\n| [parse_certificate.py][parse_sample] ([async version][parse_async_sample]) | extract a certificate's private key |\n\n###  Additional documentation\nFor more extensive documentation on Azure Key Vault, see the [API reference documentation][reference_docs].\n\n## Contributing\nThis project welcomes contributions and suggestions. Most contributions require\nyou to agree to a Contributor License Agreement (CLA) declaring that you have\nthe right to, and actually do, grant us the rights to use your contribution.\nFor details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether\nyou need to provide a CLA and decorate the PR appropriately (e.g., label,\ncomment). Simply follow the instructions provided by the bot. You will only\nneed to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct].\nFor more information, see the\n[Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or\ncontact opencode@microsoft.com with any additional questions or comments.\n\n\n<!-- LINKS -->\n[azure_core_exceptions]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/core/azure-core#azure-core-library-exceptions\n[azure_identity]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity\n[azure_identity_pypi]: https://pypi.org/project/azure-identity/\n[azure_keyvault]: https://docs.microsoft.com/azure/key-vault/general/overview\n[azure_keyvault_cli]: https://docs.microsoft.com/azure/key-vault/general/quick-create-cli\n[azure_sub]: https://azure.microsoft.com/free/\n\n[backup_operations_sample]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-certificates/samples/backup_restore_operations.py\n[backup_operations_async_sample]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-certificates/samples/backup_restore_operations_async.py\n\n[certificate_client_docs]: https://aka.ms/azsdk/python/keyvault-certificates/docs#azure.keyvault.certificates.CertificateClient\n[certificates_samples]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-certificates/samples\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[contacts_sample]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-certificates/samples/contacts.py\n[contacts_async_sample]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-certificates/samples/contacts_async.py\n\n[default_cred_ref]: https://aka.ms/azsdk/python/identity/docs#azure.identity.DefaultAzureCredential\n\n[hello_world_sample]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-certificates/samples/hello_world.py\n[hello_world_async_sample]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-certificates/samples/hello_world_async.py\n\n[import_certificate_sample]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-certificates/samples/import_certificate.py\n[import_certificate_async_sample]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-certificates/samples/import_certificate_async.py\n[issuers_sample]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-certificates/samples/issuers.py\n[issuers_async_sample]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-certificates/samples/issuers_async.py\n\n[library_src]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-certificates/azure/keyvault/certificates\n[list_operations_sample]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-certificates/samples/list_operations.py\n[list_operations_async_sample]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-certificates/samples/list_operations_async.py\n\n[managed_identity]: https://docs.microsoft.com/azure/active-directory/managed-identities-azure-resources/overview\n\n[parse_sample]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-certificates/samples/parse_certificate.py\n[parse_async_sample]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-certificates/samples/parse_certificate_async.py\n[pip]: https://pypi.org/project/pip/\n[pypi_package_certificates]: https://pypi.org/project/azure-keyvault-certificates/\n\n[recover_purge_operations_sample]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-certificates/samples/recover_purge_operations.py\n[recover_purge_operations_async_sample]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-certificates/samples/recover_purge_operations_async.py\n[reference_docs]: https://aka.ms/azsdk/python/keyvault-certificates/docs\n\n[soft_delete]: https://docs.microsoft.com/azure/key-vault/general/soft-delete-overview\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fsdk%2Fkeyvault%2Fazure-keyvault-certificates%2FREADME.png)\n",
        "repo_name": "keyvault/azure-keyvault-certificates",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-certificates",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Azure Key Vault Keys client library for Python\nAzure Key Vault helps solve the following problems:\n- Cryptographic key management (this library) - create, store, and control\naccess to the keys used to encrypt your data\n- Secrets management\n([azure-keyvault-secrets](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-secrets)) -\nsecurely store and control access to tokens, passwords, certificates, API keys,\nand other secrets\n- Certificate management\n([azure-keyvault-certificates](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-certificates)) -\ncreate, manage, and deploy public and private SSL/TLS certificates\n- Vault administration ([azure-keyvault-administration](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-administration)) - role-based access control (RBAC), and vault-level backup and restore options\n\n[Source code][library_src]\n| [Package (PyPI)][pypi_package_keys]\n| [Package (Conda)](https://anaconda.org/microsoft/azure-keyvault/)\n| [API reference documentation][reference_docs]\n| [Product documentation][azure_keyvault]\n| [Samples][key_samples]\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_.\n\n_Python 3.7 or later is required to use this package. For more details, please refer to [Azure SDK for Python version support policy](https://github.com/Azure/azure-sdk-for-python/wiki/Azure-SDKs-Python-version-support-policy)._\n\n## Getting started\n### Install the package\nInstall [azure-keyvault-keys][pypi_package_keys] and\n[azure-identity][azure_identity_pypi] with [pip][pip]:\n```Bash\npip install azure-keyvault-keys azure-identity\n```\n[azure-identity][azure_identity] is used for Azure Active Directory authentication as demonstrated below.\n\n### Prerequisites\n* An [Azure subscription][azure_sub]\n* Python 3.7 or later\n* An existing [Azure Key Vault][azure_keyvault]. If you need to create one, you can do so using the Azure CLI by following the steps in [this document][azure_keyvault_cli].\n* If using Managed HSM, an existing [Key Vault Managed HSM][managed_hsm]. If you need to create a Managed HSM, you can do so using the Azure CLI by following the steps in [this document][managed_hsm_cli].\n\n### Authenticate the client\nIn order to interact with the Azure Key Vault service, you will need an instance of a [KeyClient][key_client_docs], as\nwell as a **vault URL** and a credential object. This document demonstrates using a\n[DefaultAzureCredential][default_cred_ref], which is appropriate for most scenarios. We recommend using a\n[managed identity][managed_identity] for authentication in production environments.\n\nSee [azure-identity][azure_identity] documentation for more information about other methods of authentication and their\ncorresponding credential types.\n\n#### Create a client\nAfter configuring your environment for the [DefaultAzureCredential][default_cred_ref] to use a suitable method of\nauthentication, you can do the following to create a key client (replacing the value of `VAULT_URL` with your vault's\nURL):\n\n<!-- SNIPPET:hello_world.create_a_key_client -->\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.keyvault.keys import KeyClient\n\nVAULT_URL = os.environ[\"VAULT_URL\"]\ncredential = DefaultAzureCredential()\nclient = KeyClient(vault_url=VAULT_URL, credential=credential)\n```\n\n<!-- END SNIPPET -->\n\n> **NOTE:** For an asynchronous client, import `azure.keyvault.keys.aio`'s `KeyClient` instead.\n\n## Key concepts\n### Keys\nAzure Key Vault can create and store RSA and elliptic curve keys. Both can optionally be protected by hardware security\nmodules (HSMs). Azure Key Vault can also perform cryptographic operations with them. For more information about keys\nand supported operations and algorithms, see the\n[Key Vault documentation](https://docs.microsoft.com/azure/key-vault/keys/about-keys).\n\n[KeyClient][key_client_docs] can create keys in the vault, get existing keys\nfrom the vault, update key metadata, and delete keys, as shown in the\n[examples](#examples) below.\n\n## Examples\nThis section contains code snippets covering common tasks:\n* [Create a key](#create-a-key)\n* [Retrieve a key](#retrieve-a-key)\n* [Update an existing key](#update-an-existing-key)\n* [Delete a key](#delete-a-key)\n* [Configure automatic key rotation](#configure-automatic-key-rotation)\n* [List keys](#list-keys)\n* [Perform cryptographic operations](#cryptographic-operations)\n* [Async API](#async-api)\n* [Asynchronously create a key](#asynchronously-create-a-key)\n* [Asynchronously list keys](#asynchronously-list-keys)\n\n### Create a key\nThe [create_key](https://aka.ms/azsdk/python/keyvault-keys/docs#azure.keyvault.keys.KeyClient.create_key) method can be\nused by a `KeyClient` to create a key of any type -- alternatively, specific helpers such as\n[create_rsa_key](https://aka.ms/azsdk/python/keyvault-keys/docs#azure.keyvault.keys.KeyClient.create_rsa_key) and\n[create_ec_key](https://aka.ms/azsdk/python/keyvault-keys/docs#azure.keyvault.keys.KeyClient.create_ec_key)\ncreate RSA and elliptic curve keys in the vault, respectively. If a key with the same name already exists, a new version\nof that key is created.\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.keyvault.keys import KeyClient\n\ncredential = DefaultAzureCredential()\n\nkey_client = KeyClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\n\n# Create an RSA key\nrsa_key = key_client.create_rsa_key(\"rsa-key-name\", size=2048)\nprint(rsa_key.name)\nprint(rsa_key.key_type)\n\n# Create an elliptic curve key\nec_key = key_client.create_ec_key(\"ec-key-name\", curve=\"P-256\")\nprint(ec_key.name)\nprint(ec_key.key_type)\n```\n\n### Retrieve a key\n[get_key](https://aka.ms/azsdk/python/keyvault-keys/docs#azure.keyvault.keys.KeyClient.get_key) retrieves a key\npreviously stored in the Vault.\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.keyvault.keys import KeyClient\n\ncredential = DefaultAzureCredential()\n\nkey_client = KeyClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\nkey = key_client.get_key(\"key-name\")\nprint(key.name)\n```\n\n### Update an existing key\n[update_key_properties](https://aka.ms/azsdk/python/keyvault-keys/docs#azure.keyvault.keys.KeyClient.update_key_properties)\nupdates the properties of a key previously stored in the Key Vault.\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.keyvault.keys import KeyClient\n\ncredential = DefaultAzureCredential()\n\nkey_client = KeyClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\n\n# we will now disable the key for further use\nupdated_key = key_client.update_key_properties(\"key-name\", enabled=False)\n\nprint(updated_key.name)\nprint(updated_key.properties.enabled)\n```\n\n### Delete a key\n[begin_delete_key](https://aka.ms/azsdk/python/keyvault-keys/docs#azure.keyvault.keys.KeyClient.begin_delete_key)\nrequests Key Vault delete a key, returning a poller which allows you to wait for the deletion to finish. Waiting is\nhelpful when the vault has [soft-delete][soft_delete] enabled, and you want to purge (permanently delete) the key as\nsoon as possible. When [soft-delete][soft_delete] is disabled, `begin_delete_key` itself is permanent.\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.keyvault.keys import KeyClient\n\ncredential = DefaultAzureCredential()\n\nkey_client = KeyClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\ndeleted_key = key_client.begin_delete_key(\"key-name\").result()\n\nprint(deleted_key.name)\nprint(deleted_key.deleted_date)\n```\n\n### Configure automatic key rotation\n[update_key_rotation_policy](https://aka.ms/azsdk/python/keyvault-keys/docs#azure.keyvault.keys.KeyClient.update_key_rotation_policy)\ncan be used by a `KeyClient` to configure automatic key rotation for a key by specifying a rotation policy.\n\n<!-- SNIPPET:key_rotation.update_a_rotation_policy -->\n\n```python\nfrom azure.keyvault.keys import KeyRotationLifetimeAction, KeyRotationPolicy, KeyRotationPolicyAction\n\n# Here we set the key's automated rotation policy to rotate the key two months after the key was created.\n# If you pass an empty KeyRotationPolicy() as the `policy` parameter, the rotation policy will be set to the\n# default policy. Any keyword arguments will update specified properties of the policy.\nactions = [KeyRotationLifetimeAction(KeyRotationPolicyAction.rotate, time_after_create=\"P2M\")]\nupdated_policy = client.update_key_rotation_policy(\n    \"rotation-sample-key\", policy=KeyRotationPolicy(), expires_in=\"P90D\", lifetime_actions=actions\n)\nassert updated_policy.expires_in == \"P90D\"\n```\n\n<!-- END SNIPPET -->\n\nIn addition,\n[rotate_key](https://aka.ms/azsdk/python/keyvault-keys/docs#azure.keyvault.keys.KeyClient.rotate_key)\nallows you to rotate a key on-demand by creating a new version of the given key.\n\n<!-- SNIPPET:key_rotation.rotate_key -->\n\n```python\nrotated_key = client.rotate_key(\"rotation-sample-key\")\nprint(f\"Rotated the key on-demand; new version is {rotated_key.properties.version}\")\n```\n\n<!-- END SNIPPET -->\n\n### List keys\n[list_properties_of_keys](https://aka.ms/azsdk/python/keyvault-keys/docs#azure.keyvault.keys.KeyClient.list_properties_of_keys)\nlists the properties of all of the keys in the client's vault.\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.keyvault.keys import KeyClient\n\ncredential = DefaultAzureCredential()\n\nkey_client = KeyClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\nkeys = key_client.list_properties_of_keys()\n\nfor key in keys:\n    # the list doesn't include values or versions of the keys\n    print(key.name)\n```\n\n### Cryptographic operations\n[CryptographyClient](https://aka.ms/azsdk/python/keyvault-keys/crypto/docs#azure.keyvault.keys.crypto.CryptographyClient)\nenables cryptographic operations (encrypt/decrypt, wrap/unwrap, sign/verify) using a particular key.\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.keyvault.keys import KeyClient\nfrom azure.keyvault.keys.crypto import CryptographyClient, EncryptionAlgorithm\n\ncredential = DefaultAzureCredential()\nkey_client = KeyClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\n\nkey = key_client.get_key(\"key-name\")\ncrypto_client = CryptographyClient(key, credential=credential)\nplaintext = b\"plaintext\"\n\nresult = crypto_client.encrypt(EncryptionAlgorithm.rsa_oaep, plaintext)\ndecrypted = crypto_client.decrypt(result.algorithm, result.ciphertext)\n```\n\nSee the\n[package documentation][crypto_client_docs]\nfor more details of the cryptography API.\n\n### Async API\nThis library includes a complete set of async APIs. To use them, you must\nfirst install an async transport, such as [aiohttp](https://pypi.org/project/aiohttp/).\nSee\n[azure-core documentation](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/CLIENT_LIBRARY_DEVELOPER.md#transport)\nfor more information.\n\nAsync clients and credentials should be closed when they're no longer needed. These\nobjects are async context managers and define async `close` methods. For\nexample:\n\n```python\nfrom azure.identity.aio import DefaultAzureCredential\nfrom azure.keyvault.keys.aio import KeyClient\n\ncredential = DefaultAzureCredential()\n\n# call close when the client and credential are no longer needed\nclient = KeyClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\n...\nawait client.close()\nawait credential.close()\n\n# alternatively, use them as async context managers (contextlib.AsyncExitStack can help)\nclient = KeyClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\nasync with client:\n  async with credential:\n    ...\n```\n\n### Asynchronously create a key\n[create_rsa_key](https://aka.ms/azsdk/python/keyvault-keys/aio/docs#azure.keyvault.keys.aio.KeyClient.create_rsa_key) and\n[create_ec_key](https://aka.ms/azsdk/python/keyvault-keys/aio/docs#azure.keyvault.keys.aio.KeyClient.create_ec_key)\ncreate RSA and elliptic curve keys in the vault, respectively. If a key with the same name already exists, a new\nversion of the key is created.\n\n```python\nfrom azure.identity.aio import DefaultAzureCredential\nfrom azure.keyvault.keys.aio import KeyClient\n\ncredential = DefaultAzureCredential()\nkey_client = KeyClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\n\n# Create an RSA key\nrsa_key = await key_client.create_rsa_key(\"rsa-key-name\", size=2048)\nprint(rsa_key.name)\nprint(rsa_key.key_type)\n\n# Create an elliptic curve key\nec_key = await key_client.create_ec_key(\"ec-key-name\", curve=\"P-256\")\nprint(ec_key.name)\nprint(ec_key.key_type)\n```\n\n### Asynchronously list keys\n[list_properties_of_keys](https://aka.ms/azsdk/python/keyvault-keys/aio/docs#azure.keyvault.keys.aio.KeyClient.list_properties_of_keys)\nlists the properties of all of the keys in the client's vault.\n\n```python\nfrom azure.identity.aio import DefaultAzureCredential\nfrom azure.keyvault.keys.aio import KeyClient\n\ncredential = DefaultAzureCredential()\nkey_client = KeyClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\nkeys = key_client.list_properties_of_keys()\n\nasync for key in keys:\n    print(key.name)\n```\n\n## Troubleshooting\n\nSee the `azure-keyvault-keys`\n[troubleshooting guide](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-keys/TROUBLESHOOTING.md)\nfor details on how to diagnose various failure scenarios.\n\n### General\nKey Vault clients raise exceptions defined in [azure-core][azure_core_exceptions].\nFor example, if you try to get a key that doesn't exist in the vault, [KeyClient][key_client_docs]\nraises [ResourceNotFoundError](https://aka.ms/azsdk-python-core-exceptions-resource-not-found-error):\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.keyvault.keys import KeyClient\nfrom azure.core.exceptions import ResourceNotFoundError\n\ncredential = DefaultAzureCredential()\nkey_client = KeyClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\n\ntry:\n    key_client.get_key(\"which-does-not-exist\")\nexcept ResourceNotFoundError as e:\n    print(e.message)\n```\n\n### Logging\nThis library uses the standard\n[logging](https://docs.python.org/3/library/logging.html) library for logging.\nBasic information about HTTP sessions (URLs, headers, etc.) is logged at INFO\nlevel.\n\nDetailed DEBUG level logging, including request/response bodies and unredacted\nheaders, can be enabled on a client with the `logging_enable` argument:\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.keyvault.keys import KeyClient\nimport sys\nimport logging\n\n# Create a logger for the 'azure' SDK\nlogger = logging.getLogger('azure')\nlogger.setLevel(logging.DEBUG)\n\n# Configure a console output\nhandler = logging.StreamHandler(stream=sys.stdout)\nlogger.addHandler(handler)\n\ncredential = DefaultAzureCredential()\n\n# This client will log detailed information about its HTTP sessions, at DEBUG level\nclient = KeyClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential, logging_enable=True)\n```\n\nSimilarly, `logging_enable` can enable detailed logging for a single operation,\neven when it isn't enabled for the client:\n```python\nclient.get_key(\"my-key\", logging_enable=True)\n```\n\n## Next steps\nSeveral samples are available in the Azure SDK for Python GitHub repository.\nThese provide example code for additional Key Vault scenarios:\n| File | Description |\n|-------------|-------------|\n| [hello_world.py][hello_world_sample] ([async version][hello_world_async_sample]) | create/get/update/delete keys |\n| [list_operations.py][list_operations_sample] ([async version][list_operations_async_sample]) | basic list operations for keys |\n| [backup_restore_operations.py][backup_operations_sample] ([async version][backup_operations_async_sample]) | back up and recover keys |\n| [recover_purge_operations.py][recover_purge_sample] ([async version][recover_purge_async_sample]) | recover and purge keys |\n| [key_rotation.py][key_rotation_sample] ([async version][key_rotation_async_sample]) | create/update key rotation policies and rotate keys on-demand |\n| [send_request.py][send_request_sample] | use the `send_request` client method |\n\n###  Additional documentation\nFor more extensive documentation on Azure Key Vault, see the\n[API reference documentation][reference_docs].\n\n## Contributing\nThis project welcomes contributions and suggestions. Most contributions require\nyou to agree to a Contributor License Agreement (CLA) declaring that you have\nthe right to, and actually do, grant us the rights to use your contribution.\nFor details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether\nyou need to provide a CLA and decorate the PR appropriately (e.g., label,\ncomment). Simply follow the instructions provided by the bot. You will only\nneed to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct].\nFor more information, see the\n[Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or\ncontact opencode@microsoft.com with any additional questions or comments.\n\n\n<!-- LINKS -->\n[azure_core_exceptions]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/core/azure-core#azure-core-library-exceptions\n[azure_identity]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity\n[azure_identity_pypi]: https://pypi.org/project/azure-identity/\n[azure_keyvault]: https://docs.microsoft.com/azure/key-vault/\n[azure_keyvault_cli]: https://docs.microsoft.com/azure/key-vault/general/quick-create-cli\n[azure_sub]: https://azure.microsoft.com/free/\n\n[backup_operations_sample]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-keys/samples/backup_restore_operations.py\n[backup_operations_async_sample]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-keys/samples/backup_restore_operations_async.py\n\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[crypto_client_docs]: https://aka.ms/azsdk/python/keyvault-keys/crypto/docs\n\n[default_cred_ref]: https://aka.ms/azsdk/python/identity/docs#azure.identity.DefaultAzureCredential\n\n[hello_world_sample]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-keys/samples/hello_world.py\n[hello_world_async_sample]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-keys/samples/hello_world_async.py\n\n[key_client_docs]: https://aka.ms/azsdk/python/keyvault-keys/docs#azure.keyvault.keys.KeyClient\n[key_rotation_sample]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-keys/samples/key_rotation.py\n[key_rotation_async_sample]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-keys/samples/key_rotation_async.py\n[key_samples]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-keys/samples\n\n[library_src]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-keys/azure/keyvault/keys\n[list_operations_sample]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-keys/samples/list_operations.py\n[list_operations_async_sample]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-keys/samples/list_operations_async.py\n\n[managed_hsm]: https://docs.microsoft.com/azure/key-vault/managed-hsm/overview\n[managed_hsm_cli]: https://docs.microsoft.com/azure/key-vault/managed-hsm/quick-create-cli\n[managed_identity]: https://docs.microsoft.com/azure/active-directory/managed-identities-azure-resources/overview\n\n[pip]: https://pypi.org/project/pip/\n[pypi_package_keys]: https://pypi.org/project/azure-keyvault-keys/\n\n[recover_purge_sample]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-keys/samples/recover_purge_operations.py\n[recover_purge_async_sample]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-keys/samples/recover_purge_operations_async.py\n[reference_docs]: https://aka.ms/azsdk/python/keyvault-keys/docs\n\n[send_request_sample]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-keys/samples/send_request.py\n[soft_delete]: https://docs.microsoft.com/azure/key-vault/general/soft-delete-overview\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fsdk%2Fkeyvault%2Fazure-keyvault-keys%2FREADME.png)\n",
        "repo_name": "keyvault/azure-keyvault-keys",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-keys",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Azure Key Vault Secrets client library for Python\nAzure Key Vault helps solve the following problems:\n\n- Secrets management (this library) -\nsecurely store and control access to tokens, passwords, certificates, API keys,\nand other secrets\n- Cryptographic key management\n([azure-keyvault-keys](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-keys)) -\ncreate, store, and control access to the keys used to encrypt your data\n- Certificate management\n([azure-keyvault-certificates](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-certificates)) -\ncreate, manage, and deploy public and private SSL/TLS certificates\n- Vault administration ([azure-keyvault-administration](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-administration)) - role-based access control (RBAC), and vault-level backup and restore options\n\n[Source code][library_src]\n| [Package (PyPI)][pypi_package_secrets]\n| [Package (Conda)](https://anaconda.org/microsoft/azure-keyvault/)\n| [API reference documentation][reference_docs]\n| [Product documentation][azure_keyvault]\n| [Samples][secret_samples]\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_.\n_Python 3.7 or later is required to use this package. For more details, please refer to [Azure SDK for Python version support policy](https://github.com/Azure/azure-sdk-for-python/wiki/Azure-SDKs-Python-version-support-policy)._\n\n## Getting started\n### Install packages\nInstall [azure-keyvault-secrets][pypi_package_secrets] and\n[azure-identity][azure_identity_pypi] with [pip][pip]:\n```Bash\npip install azure-keyvault-secrets azure-identity\n```\n[azure-identity][azure_identity] is used for Azure Active Directory\nauthentication as demonstrated below.\n\n### Prerequisites\n* An [Azure subscription][azure_sub]\n* Python 3.7 or later\n* An existing [Azure Key Vault][azure_keyvault]. If you need to create one, you can do so using the Azure CLI by following the steps in [this document][azure_keyvault_cli].\n\n### Authenticate the client\nIn order to interact with the Azure Key Vault service, you will need an instance of a [SecretClient][secret_client_docs], as well as a **vault url** and a credential object. This document demonstrates using a [DefaultAzureCredential][default_cred_ref], which is appropriate for most scenarios, including local development and production environments. We recommend using a [managed identity][managed_identity] for authentication in production environments.\n\nSee [azure-identity][azure_identity] documentation for more information about other methods of authentication and their corresponding credential types.\n\n#### Create a client\nAfter configuring your environment for the [DefaultAzureCredential][default_cred_ref] to use a suitable method of authentication, you can do the following to create a secret client (replacing the value of `VAULT_URL` with your vault's URL):\n\n<!-- SNIPPET:hello_world.create_secret_client -->\n\n```python\nVAULT_URL = os.environ[\"VAULT_URL\"]\ncredential = DefaultAzureCredential()\nclient = SecretClient(vault_url=VAULT_URL, credential=credential)\n```\n\n<!-- END SNIPPET -->\n\n> **NOTE:** For an asynchronous client, import `azure.keyvault.secrets.aio`'s `SecretClient` instead.\n\n## Key concepts\n### Secret\nA secret consists of a secret value and its associated metadata and management\ninformation. This library handles secret values as strings, but Azure Key Vault\ndoesn't store them as such. For more information about secrets and how Key\nVault stores and manages them, see the\n[Key Vault documentation](https://docs.microsoft.com/azure/key-vault/general/about-keys-secrets-certificates).\n\n[SecretClient][secret_client_docs] can set secret values in the vault, update\nsecret metadata, and delete secrets, as shown in the\n[examples](#examples) below.\n\n## Examples\nThis section contains code snippets covering common tasks:\n* [Set a secret](#set-a-secret)\n* [Retrieve a secret](#retrieve-a-secret)\n* [Update secret metadata](#update-secret-metadata)\n* [Delete a secret](#delete-a-secret)\n* [List secrets](#list-secrets)\n* [Async API](#async-api)\n* [Asynchronously create a secret](#asynchronously-create-a-secret)\n* [Asynchronously list secrets](#asynchronously-list-secrets)\n\n### Set a secret\n[set_secret](https://aka.ms/azsdk/python/keyvault-secrets/docs#azure.keyvault.secrets.SecretClient.set_secret)\ncreates new secrets and changes the values of existing secrets. If no secret with the\ngiven name exists, `set_secret` creates a new secret with that name and the\ngiven value. If the given name is in use, `set_secret` creates a new version\nof that secret, with the given value.\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.keyvault.secrets import SecretClient\n\ncredential = DefaultAzureCredential()\n\nsecret_client = SecretClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\nsecret = secret_client.set_secret(\"secret-name\", \"secret-value\")\n\nprint(secret.name)\nprint(secret.value)\nprint(secret.properties.version)\n```\n\n### Retrieve a secret\n[get_secret](https://aka.ms/azsdk/python/keyvault-secrets/docs#azure.keyvault.secrets.SecretClient.get_secret)\nretrieves a secret previously stored in the Key Vault.\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.keyvault.secrets import SecretClient\n\ncredential = DefaultAzureCredential()\n\nsecret_client = SecretClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\nsecret = secret_client.get_secret(\"secret-name\")\n\nprint(secret.name)\nprint(secret.value)\n```\n\n### Update secret metadata\n[update_secret_properties](https://aka.ms/azsdk/python/keyvault-secrets/docs#azure.keyvault.secrets.SecretClient.update_secret_properties)\nupdates a secret's metadata. It cannot change the secret's value; use [set_secret](#set-a-secret) to set a secret's\nvalue.\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.keyvault.secrets import SecretClient\n\ncredential = DefaultAzureCredential()\n\nsecret_client = SecretClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\n\n# Clients may specify the content type of a secret to assist in interpreting the secret data when it's retrieved\ncontent_type = \"text/plain\"\n\n# We will also disable the secret for further use\n\nupdated_secret_properties = secret_client.update_secret_properties(\"secret-name\", content_type=content_type, enabled=False)\n\nprint(updated_secret_properties.updated_on)\nprint(updated_secret_properties.content_type)\nprint(updated_secret_properties.enabled)\n```\n\n### Delete a secret\n[begin_delete_secret](https://aka.ms/azsdk/python/keyvault-secrets/docs#azure.keyvault.secrets.SecretClient.begin_delete_secret)\nrequests Key Vault delete a secret, returning a poller which allows you to wait for the deletion to finish. Waiting is\nhelpful when the vault has [soft-delete][soft_delete] enabled, and you want to purge (permanently delete) the secret as\nsoon as possible. When [soft-delete][soft_delete] is disabled, `begin_delete_secret` itself is permanent.\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.keyvault.secrets import SecretClient\n\ncredential = DefaultAzureCredential()\n\nsecret_client = SecretClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\ndeleted_secret = secret_client.begin_delete_secret(\"secret-name\").result()\n\nprint(deleted_secret.name)\nprint(deleted_secret.deleted_date)\n```\n\n### List secrets\n[list_properties_of_secrets](https://aka.ms/azsdk/python/keyvault-secrets/docs#azure.keyvault.secrets.SecretClient.list_properties_of_secrets)\nlists the properties of all of the secrets in the client's vault. This list doesn't include the secret's values.\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.keyvault.secrets import SecretClient\n\ncredential = DefaultAzureCredential()\n\nsecret_client = SecretClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\nsecret_properties = secret_client.list_properties_of_secrets()\n\nfor secret_property in secret_properties:\n    # the list doesn't include values or versions of the secrets\n    print(secret_property.name)\n```\n\n### Async API\nThis library includes a complete set of async APIs. To use them, you must\nfirst install an async transport, such as [aiohttp](https://pypi.org/project/aiohttp/).\nSee\n[azure-core documentation](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/CLIENT_LIBRARY_DEVELOPER.md#transport)\nfor more information.\n\nAsync clients and credentials should be closed when they're no longer needed. These\nobjects are async context managers and define async `close` methods. For\nexample:\n\n```python\nfrom azure.identity.aio import DefaultAzureCredential\nfrom azure.keyvault.secrets.aio import SecretClient\n\ncredential = DefaultAzureCredential()\n\n# call close when the client and credential are no longer needed\nclient = SecretClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\n...\nawait client.close()\nawait credential.close()\n\n# alternatively, use them as async context managers (contextlib.AsyncExitStack can help)\nclient = SecretClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\nasync with client:\n  async with credential:\n    ...\n```\n\n### Asynchronously create a secret\n[set_secret](https://aka.ms/azsdk/python/keyvault-secrets/aio/docs#azure.keyvault.secrets.aio.SecretClient.set_secret)\ncreates a secret in the Key Vault with the specified optional arguments.\n```python\nfrom azure.identity.aio import DefaultAzureCredential\nfrom azure.keyvault.secrets.aio import SecretClient\n\ncredential = DefaultAzureCredential()\nsecret_client = SecretClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\n\nsecret = await secret_client.set_secret(\"secret-name\", \"secret-value\")\n\nprint(secret.name)\nprint(secret.value)\nprint(secret.properties.version)\n```\n\n### Asynchronously list secrets\n[list_properties_of_secrets](https://aka.ms/azsdk/python/keyvault-secrets/aio/docs#azure.keyvault.secrets.aio.SecretClient.list_properties_of_secrets)\nlists the properties of all of the secrets in the client's vault.\n\n```python\nfrom azure.identity.aio import DefaultAzureCredential\nfrom azure.keyvault.secrets.aio import SecretClient\n\ncredential = DefaultAzureCredential()\nsecret_client = SecretClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\nsecret_properties = secret_client.list_properties_of_secrets()\n\nasync for secret_property in secret_properties:\n    # the list doesn't include values or versions of the secrets\n    print(secret_property.name)\n```\n\n## Troubleshooting\n\nSee the `azure-keyvault-secrets`\n[troubleshooting guide](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-secrets/TROUBLESHOOTING.md)\nfor details on how to diagnose various failure scenarios.\n\n### General\nKey Vault clients raise exceptions defined in [azure-core][azure_core_exceptions].\nFor example, if you try to get a key that doesn't exist in the vault,\n[SecretClient][secret_client_docs] raises\n[ResourceNotFoundError](https://aka.ms/azsdk-python-core-exceptions-resource-not-found-error):\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.keyvault.secrets import SecretClient\nfrom azure.core.exceptions import ResourceNotFoundError\n\ncredential = DefaultAzureCredential()\nsecret_client = SecretClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\n\ntry:\n    secret_client.get_secret(\"which-does-not-exist\")\nexcept ResourceNotFoundError as e:\n    print(e.message)\n```\n\n### Logging\nThis library uses the standard\n[logging](https://docs.python.org/3.5/library/logging.html) library for logging.\nBasic information about HTTP sessions (URLs, headers, etc.) is logged at INFO\nlevel.\n\nDetailed DEBUG level logging, including request/response bodies and unredacted\nheaders, can be enabled on a client with the `logging_enable` argument:\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.keyvault.secrets import SecretClient\nimport sys\nimport logging\n\n# Create a logger for the 'azure' SDK\nlogger = logging.getLogger('azure')\nlogger.setLevel(logging.DEBUG)\n\n# Configure a console output\nhandler = logging.StreamHandler(stream=sys.stdout)\nlogger.addHandler(handler)\n\ncredential = DefaultAzureCredential()\n\n# This client will log detailed information about its HTTP sessions, at DEBUG level\nsecret_client = SecretClient(\n    vault_url=\"https://my-key-vault.vault.azure.net/\",\n    credential=credential,\n    logging_enable=True\n)\n```\n\nSimilarly, `logging_enable` can enable detailed logging for a single operation,\neven when it isn't enabled for the client:\n```python\nsecret_client.get_secret(\"my-secret\", logging_enable=True)\n```\n\n## Next steps\nSeveral samples are available in the Azure SDK for Python GitHub repository.\nThese provide example code for additional Key Vault scenarios:\n| File | Description |\n|-------------|-------------|\n| [hello_world.py][hello_world_sample] ([async version][hello_world_async_sample]) | create/get/update/delete secrets |\n| [list_operations.py][list_operations_sample] ([async version][list_operations_async_sample]) | basic list operations for secrets |\n| [backup_restore_operations.py][backup_operations_sample] ([async version][backup_operations_async_sample]) | back up and restore secrets |\n| [recover_purge_operations.py][recover_purge_sample] ([async version][recover_purge_async_sample]) | recover and purge secrets |\n\n###  Additional Documentation\nFor more extensive documentation on Azure Key Vault, see the\n[API reference documentation][reference_docs].\n\n## Contributing\nThis project welcomes contributions and suggestions. Most contributions require\nyou to agree to a Contributor License Agreement (CLA) declaring that you have\nthe right to, and actually do, grant us the rights to use your contribution.\nFor details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether\nyou need to provide a CLA and decorate the PR appropriately (e.g., label,\ncomment). Simply follow the instructions provided by the bot. You will only\nneed to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct].\nFor more information, see the\n[Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or\ncontact opencode@microsoft.com with any additional questions or comments.\n\n\n<!-- LINKS -->\n[azure_cloud_shell]: https://shell.azure.com/bash\n[azure_core_exceptions]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/core/azure-core#azure-core-library-exceptions\n[azure_identity]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity\n[azure_identity_pypi]: https://pypi.org/project/azure-identity/\n[azure_keyvault]: https://docs.microsoft.com/azure/key-vault/general/overview\n[azure_keyvault_cli]: https://docs.microsoft.com/azure/key-vault/general/quick-create-cli\n[azure_sub]: https://azure.microsoft.com/free/\n\n[backup_operations_sample]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-secrets/samples/backup_restore_operations.py\n[backup_operations_async_sample]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-secrets/samples/backup_restore_operations_async.py\n\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n\n[default_cred_ref]: https://aka.ms/azsdk/python/identity/docs#azure.identity.DefaultAzureCredential\n\n[hello_world_sample]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-secrets/samples/hello_world.py\n[hello_world_async_sample]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-secrets/samples/hello_world_async.py\n\n[library_src]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-secrets/azure/keyvault/secrets\n[list_operations_sample]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-secrets/samples/list_operations.py\n[list_operations_async_sample]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-secrets/samples/list_operations_async.py\n\n[managed_identity]: https://docs.microsoft.com/azure/active-directory/managed-identities-azure-resources/overview\n\n[pip]: https://pypi.org/project/pip/\n[pypi_package_secrets]: https://pypi.org/project/azure-keyvault-secrets/\n\n[recover_purge_sample]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-secrets/samples/recover_purge_operations.py\n[recover_purge_async_sample]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-secrets/samples/recover_purge_operations_async.py\n[reference_docs]: https://aka.ms/azsdk/python/keyvault-secrets/docs\n\n[secret_client_docs]: https://aka.ms/azsdk/python/keyvault-secrets/docs#azure.keyvault.secrets.SecretClient\n[secret_samples]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-secrets/samples\n[soft_delete]: https://docs.microsoft.com/azure/key-vault/general/soft-delete-overview\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fsdk%2Fkeyvault%2Fazure-keyvault-secrets%2FREADME.png)\n",
        "repo_name": "keyvault/azure-keyvault-secrets",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-secrets",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Azure Key Vault client libraries for Python\n\nThis is the Microsoft Azure Key Vault libraries bundle.\n\nThis package does not contain any code in itself. It installs a set\nof packages that provide APIs for Key Vault operations:\n\n- [azure-keyvault-keys v4.x](https://pypi.python.org/pypi/azure-keyvault-keys)\n- [azure-keyvault-secrets v4.x](https://pypi.python.org/pypi/azure-keyvault-secrets)\n- [azure-keyvault-certificates v4.x](https://pypi.python.org/pypi/azure-keyvault-certificates)\n\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n_Python 3.7 or later is required to use this package. For more details, please refer to [Azure SDK for Python version support policy](https://github.com/Azure/azure-sdk-for-python/wiki/Azure-SDKs-Python-version-support-policy)._\n\n## Install the package\nInstall the Azure Key Vault client libraries for Python with [pip][pip]:\n\n```Bash\npip install azure-keyvault\n```\n\n## Documentation\n\nPlease refer to the individual packages for documentation.\n\n## Contributing\nThis project welcomes contributions and suggestions. Most contributions require\nyou to agree to a Contributor License Agreement (CLA) declaring that you have\nthe right to, and actually do, grant us the rights to use your contribution.\nFor details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether\nyou need to provide a CLA and decorate the PR appropriately (e.g., label,\ncomment). Simply follow the instructions provided by the bot. You will only\nneed to do this once across all repos using our CLA.\n\nThis project has adopted the\n[Microsoft Open Source Code of Conduct][code_of_conduct]. For more information,\nsee the Code of Conduct FAQ or contact opencode@microsoft.com with any\nadditional questions or comments.\n\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fsdk%2Fkeyvault%2Fazure-keyvault%2FFREADME.png)\n",
        "repo_name": "keyvault/azure-keyvault",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Key Vault Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-keyvault\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.keyvault import KeyVaultManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = KeyVaultManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\nCode samples for this package can be found at:\n- [Search Key Vault Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com\n- [Azure Python Mgmt SDK Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-keyvault%2FREADME.png)\n",
        "repo_name": "keyvault/azure-mgmt-keyvault",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-mgmt-keyvault",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Kubernetes Configuration Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-kubernetesconfiguration\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.kubernetesconfiguration import SourceControlConfigurationClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = SourceControlConfigurationClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\nCode samples for this package can be found at:\n- [Search Kubernetes Configuration Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com\n- [Azure Python Mgmt SDK Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-kubernetesconfiguration%2FREADME.png)\n",
        "repo_name": "kubernetesconfiguration/azure-mgmt-kubernetesconfiguration",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/kubernetesconfiguration/azure-mgmt-kubernetesconfiguration",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Kusto Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-kusto\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.kusto import KustoManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = KustoManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\n\nCode samples for this package can be found at [Kusto Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com and [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-kusto%2FREADME.png)\n",
        "repo_name": "kusto/azure-mgmt-kusto",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/kusto/azure-mgmt-kusto",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Lab Services Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/)\nCode samples for this package can be found at [Lab Services](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://github.com/Azure-Samples/azure-samples-python-management/tree/main/samples/labservices)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-labservices%2FREADME.png)\n",
        "repo_name": "labservices/azure-mgmt-labservices",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/labservices/azure-mgmt-labservices",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Azure Load Testing client library for Python\nAzure Load Testing provides client library in python to the user by which they can interact natively with Azure Load Testing service. Azure Load Testing is a fully managed load-testing service that enables you to generate high-scale load. The service simulates traffic for your applications, regardless of where they're hosted. Developers, testers, and quality assurance (QA) engineers can use it to optimize application performance, scalability, or capacity.\n\n## Documentation\nVarious documentation is available to help you get started\n\n<!-- - [Source code][source_code] -->\n- [API reference documentation][api_reference_doc]\n- [Product Documentation][product_documentation]\n\n## Getting started\n\n### Installing the package\n\n```bash\npython -m pip install azure-developer-loadtesting\n```\n\n#### Prequisites\n\n- Python 3.7 or later is required to use this package.\n- You need an [Azure subscription][azure_sub] to use this package.\n- An existing Azure Developer LoadTesting instance.\n\n#### Create with an Azure Active Directory Credential\n\nTo use an [Azure Active Directory (AAD) token credential][authenticate_with_token],\nprovide an instance of the desired credential type obtained from the\n[azure-identity][azure_identity_credentials] library.\n\nTo authenticate with AAD, you must first [pip][pip] install [`azure-identity`][azure_identity_pip]\n\nAfter setup, you can choose which type of [credential][azure_identity_credentials] from azure.identity to use.\n\nAs an example, sign in via the Azure CLI `az login` command and [DefaultAzureCredential](https://learn.microsoft.com/python/api/azure-identity/azure.identity.defaultazurecredential?view=azure-python) will authenticate as that user.\n\nUse the returned token credential to authenticate the client.\n\n#### Create the client\n\nAzure Developer LoadTesting SDK has 2 sub-clients of the main client (`LoadTestingClient`) to interact with the service, 'administration' and 'test_run'.\n\n```python\nfrom azure.developer.loadtesting import LoadTestAdministrationClient\n\n# for managing authentication and authorization\n# can be installed from pypi, follow: https://pypi.org/project/azure-identity/\n# using DefaultAzureCredentials, read more at: https://learn.microsoft.com/en-us/python/api/azure-identity/azure.identity.defaultazurecredential?view=azure-python\nfrom azure.identity import DefaultAzureCredential\n\nclient = LoadTestAdministrationClient(endpoint='<endpoint>', credential=DefaultAzureCredential())\n```\n\n`<endpoint>` refers to the data-plane endpoint/URL of the resource.\n\n## Key concepts\n\nThe Azure Load Test client library for python allows you to interact with each of these components through the use of clients. There are two top-level clients which are the main entry points for the library\n\n- `LoadTestAdministrationClient` (`azure.developer.loadtesting.LoadTestAdministrationClient`)\n- `LoadTestRunClient` (`azure.developer.loadtesting.LoadTestRunClient`)\n\nThese two clients also have there asynchronous counterparts, which are \n- `LoadTestAdministrationClient` (`azure.developer.loadtesting.aio.LoadTestAdministrationClient`)\n- `LoadTestRunClient` (`azure.developer.loadtesting.aio.LoadTestRunClient`)\n\n### Load Test Administration Client\n\nThe `LoadTestAdministrationClient` is used to administer and configure the load tests, app components and metrics.\n\n#### Test\n\nA test specifies the test script, and configuration settings for running a load test. You can create one or more tests in an Azure Load Testing resource.\n\n#### App Component\n\nWhen you run a load test for an Azure-hosted application, you can monitor resource metrics for the different Azure application components (server-side metrics). While the load test runs, and after completion of the test, you can monitor and analyze the resource metrics in the Azure Load Testing dashboard.\n\n#### Metrics\n\nDuring a load test, Azure Load Testing collects metrics about the test execution. There are two types of metrics:\n\n1. Client-side metrics give you details reported by the test engine. These metrics include the number of virtual users, the request response time, the number of failed requests, or the number of requests per second.\n\n2. Server-side metrics are available for Azure-hosted applications and provide information about your Azure application components. Metrics can be for the number of database reads, the type of HTTP responses, or container resource consumption.\n\n### Test Run Client\n\nThe `LoadTestRunClient`  is used to start and stop test runs corresponding to a load test. A test run represents one execution of a load test. It collects the logs associated with running the Apache JMeter script, the load test YAML configuration, the list of app components to monitor, and the results of the test.\n\n### Data-Plane Endpoint\n\nData-plane of Azure Load Testing resources is addressable using the following URL format:\n\n`00000000-0000-0000-0000-000000000000.aaa.cnt-prod.loadtesting.azure.com`\n\nThe first GUID `00000000-0000-0000-0000-000000000000` is the unique identifier used for accessing the Azure Load Testing resource. This is followed by  `aaa` which is the Azure region of the resource.\n\nThe data-plane endpoint is obtained from Control Plane APIs.\n\n**Example:** `1234abcd-12ab-12ab-12ab-123456abcdef.eus.cnt-prod.loadtesting.azure.com`\n\nIn the above example, `eus` represents the Azure region `East US`.\n\n## Examples\n\n### Creating a load test \n```python\nfrom azure.developer.loadtesting import LoadTestAdministrationClient\nfrom azure.identity import DefaultAzureCredential\nfrom azure.core.exceptions import HttpResponseError\nimport os\n\nTEST_ID = \"some-test-id\"  \nDISPLAY_NAME = \"my-load-test\"  \n\n# set SUBSCRIPTION_ID as an environment variable\nSUBSCRIPTION_ID = os.environ[\"SUBSCRIPTION_ID\"]  \n\nclient = LoadTestAdministrationClient(endpoint='<endpoint>', credential=DefaultAzureCredential())\n\ntry:\n    result = client.create_or_update_test(\n        TEST_ID,\n        {\n            \"description\": \"\",\n            \"displayName\": \"My New Load Test\",\n            \"loadTestConfig\": {\n                \"engineInstances\": 1,\n                \"splitAllCSVs\": False,\n            },\n            \"passFailCriteria\": {\n                \"passFailMetrics\": {\n                    \"condition1\": {\n                        \"clientmetric\": \"response_time_ms\",\n                        \"aggregate\": \"avg\",\n                        \"condition\": \">\",\n                        \"value\": 300\n                    },\n                    \"condition2\": {\n                        \"clientmetric\": \"error\",\n                        \"aggregate\": \"percentage\",\n                        \"condition\": \">\",\n                        \"value\": 50\n                    },\n                    \"condition3\": {\n                        \"clientmetric\": \"latency\",\n                        \"aggregate\": \"avg\",\n                        \"condition\": \">\",\n                        \"value\": 200,\n                        \"requestName\": \"GetCustomerDetails\"\n                    }\n                }\n            },\n            \"secrets\": {\n                \"secret1\": {\n                    \"value\": \"https://sdk-testing-keyvault.vault.azure.net/secrets/sdk-secret\",\n                    \"type\": \"AKV_SECRET_URI\"\n                }\n            },\n            \"environmentVariables\": {\n                \"my-variable\": \"value\"\n            }\n        }\n    )\n    print(result)\nexcept HttpResponseError as e:\n     print('Service responded with error: {}'.format(e.response.json()))\n\n```\n\n### Uploading .jmx file to a Test\n```python\nfrom azure.developer.loadtesting import LoadTestAdministrationClient\nfrom azure.identity import DefaultAzureCredential\nfrom azure.core.exceptions import HttpResponseError\n\nTEST_ID = \"some-test-id\"  \nFILE_NAME = \"some-file-name.jmx\"  \n\nclient = LoadTestAdministrationClient(endpoint='<endpoint>', credential=DefaultAzureCredential())\n\ntry:\n\n    # uploading .jmx file to a test\n    resultPoller = client.begin_upload_test_file(TEST_ID, FILE_NAME, open(\"sample.jmx\", \"rb\"))\n\n    # getting result of LRO poller with timeout of 600 secs\n    validationResponse = resultPoller.result(600)\n    print(validationResponse)\n    \nexcept HttpResponseError as e:\n    print(\"Failed with error: {}\".format(e.response.json()))\n```\n\n### Running a Test\n```python\nfrom azure.developer.loadtesting import LoadTestRunClient\nfrom azure.identity import DefaultAzureCredential\nfrom azure.core.exceptions import HttpResponseError\n\nTEST_ID = \"some-test-id\"  \nTEST_RUN_ID = \"some-testrun-id\" \nDISPLAY_NAME = \"my-load-test-run\"  \n\nclient = LoadTestRunClient(endpoint='<endpoint>', credential=DefaultAzureCredential())\n\ntry:\n    testRunPoller = client.begin_test_run(\n    TEST_RUN_ID,\n        {\n            \"testId\": TEST_ID,\n            \"displayName\": \"My New Load Test Run\",\n        }\n    )\n\n    #waiting for test run status to be completed with timeout = 3600 seconds\n    result = testRunPoller.result(3600)\n    \n    print(result)\nexcept HttpResponseError as e:\n    print(\"Failed with error: {}\".format(e.response.json()))\n```\n\n## Next steps\n\nMore samples can be found [here](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/loadtesting/azure-developer-loadtesting/samples).\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require\nyou to agree to a Contributor License Agreement (CLA) declaring that you have\nthe right to, and actually do, grant us the rights to use your contribution.\nFor details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether\nyou need to provide a CLA and decorate the PR appropriately (e.g., label,\ncomment). Simply follow the instructions provided by the bot. You will only\nneed to do this once across all repos using our CLA.\n\nThis project has adopted the\n[Microsoft Open Source Code of Conduct][code_of_conduct]. For more information,\nsee the Code of Conduct FAQ or contact opencode@microsoft.com with any\nadditional questions or comments.\n\n## Troubleshooting\nMore about it is coming soon...\n\n<!-- LINKS -->\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[authenticate_with_token]: https://docs.microsoft.com/azure/cognitive-services/authentication?tabs=powershell#authenticate-with-an-authentication-token\n[azure_identity_credentials]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity#credentials\n[azure_identity_pip]: https://pypi.org/project/azure-identity/\n[default_azure_credential]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity#defaultazurecredential\n[pip]: https://pypi.org/project/pip/\n[azure_sub]: https://azure.microsoft.com/free/\n[api_reference_doc]: https://docs.microsoft.com/rest/api/loadtesting/\n[product_documentation]: https://azure.microsoft.com/services/load-testing/",
        "repo_name": "loadtesting/azure-developer-loadtesting",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/loadtesting/azure-developer-loadtesting",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Loadtesting Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-loadtesting\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.loadtesting import LoadTestMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = LoadTestMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\n\nCode samples for this package can be found at [Loadtesting Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com and [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-loadtesting%2FREADME.png)\n",
        "repo_name": "loadtesting/azure-mgmt-loadtesting",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/loadtesting/azure-mgmt-loadtesting",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "## Microsoft Azure SDK for Python\n\nThis package is no longer being maintained. Use the [azure-monitor-query](https://pypi.org/project/azure-monitor-query/) package instead.\n\nFor migration instructions, see the [migration guide](https://aka.ms/azsdk/python/migrate/la-to-monitor-query).\n\n![image](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-loganalytics%2FREADME.png)\n",
        "repo_name": "loganalytics/azure-loganalytics",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/loganalytics/azure-loganalytics",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Log Analytics Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/)\nCode samples for this package can be found at [Log Analytics Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://github.com/Azure-Samples/azure-samples-python-management/tree/main/samples/loganalytics)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-loganalytics%2FREADME.png)\n",
        "repo_name": "loganalytics/azure-mgmt-loganalytics",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/loganalytics/azure-mgmt-loganalytics",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Logic Apps Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/logic-apps)\nCode samples for this package can be found at [Logic Apps Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://github.com/Azure-Samples/azure-samples-python-management/tree/main/samples/logic)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-logic%2FREADME.png)\n",
        "repo_name": "logic/azure-mgmt-logic",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/logic/azure-mgmt-logic",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Logz Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/)\nCode samples for this package can be found at [Logz Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-logz%2FREADME.png)\n",
        "repo_name": "logz/azure-mgmt-logz",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/logz/azure-mgmt-logz",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Guest Config Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/)\nCode samples for this package can be found at [Guest Config Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-guestconfig%2FREADME.png)\n",
        "repo_name": "machinelearning/azure-mgmt-guestconfig",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/machinelearning/azure-mgmt-guestconfig",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Machine Learning Compute Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/)\nCode samples for this package can be found at [Machine Learning Compute Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-machinelearningcompute%2FREADME.png)\n",
        "repo_name": "machinelearning/azure-mgmt-machinelearningcompute",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/machinelearning/azure-mgmt-machinelearningcompute",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Machine Learning Services Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-machinelearningservices\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.machinelearningservices import MachineLearningServicesMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = MachineLearningServicesMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\nCode samples for this package can be found at:\n- [Search Machine Learning Services Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com\n- [Azure Python Mgmt SDK Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-machinelearningservices%2FREADME.png)\n",
        "repo_name": "machinelearning/azure-mgmt-machinelearningservices",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/machinelearning/azure-mgmt-machinelearningservices",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Maintenance Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/)\nCode samples for this package can be found at [Maintenance Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-maintenance%2FREADME.png)\n",
        "repo_name": "maintenance/azure-mgmt-maintenance",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/maintenance/azure-mgmt-maintenance",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Managed Services Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/)\nCode samples for this package can be found at [Managed Services](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-managedservices%2FREADME.png)\n",
        "repo_name": "managedservices/azure-mgmt-managedservices",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/managedservices/azure-mgmt-managedservices",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Management Groups Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/)\nCode samples for this package can be found at [Management Groups](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-managementgroups%2FREADME.png)\n",
        "repo_name": "managementgroups/azure-mgmt-managementgroups",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/managementgroups/azure-mgmt-managementgroups",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Management Partner Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/)\nCode samples for this package can be found at [Management Partner Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-managementpartner%2FREADME.png)\n",
        "repo_name": "managementpartner/azure-mgmt-managementpartner",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/managementpartner/azure-mgmt-managementpartner",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Azure Maps Geolocation Package client library for Python\n\nThis package contains a Python SDK for Azure Maps Services for Geolocation.\nRead more about Azure Maps Services [here](https://docs.microsoft.com/azure/azure-maps/)\n\n[Source code](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/maps/azure-maps-geolocation) | [API reference documentation](https://docs.microsoft.com/rest/api/maps/geolocation) | [Product documentation](https://docs.microsoft.com/azure/azure-maps/)\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to <https://github.com/Azure/azure-sdk-for-python/issues/20691>_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7 or later is required to use this package.\n- An [Azure subscription][azure_subscription] and an [Azure Maps account](https://docs.microsoft.com/azure/azure-maps/how-to-manage-account-keys).\n- A deployed Maps Services resource. You can create the resource via [Azure Portal][azure_portal] or [Azure CLI][azure_cli].\n\nIf you use Azure CLI, replace `<resource-group-name>` and `<account-name>` of your choice, and select a proper [pricing tier](https://docs.microsoft.com/azure/azure-maps/choose-pricing-tier) based on your needs via the `<sku-name>` parameter. Please refer to [this page](https://docs.microsoft.com/cli/azure/maps/account?view=azure-cli-latest#az_maps_account_create) for more details.\n\n```bash\naz maps account create --resource-group <resource-group-name> --account-name <account-name> --sku <sku-name>\n```\n\n### Install the package\n\nInstall the Azure Maps Service Geolocation SDK.\n\n```bash\npip install azure-maps-geolocation\n```\n\n### Create and Authenticate the MapsGeolocationClient\n\nTo create a client object to access the Azure Maps Geolocation API, you will need a **credential** object. Azure Maps Geolocation client also support two ways to authenticate.\n\n#### 1. Authenticate with a Subscription Key Credential\n\nYou can authenticate with your Azure Maps Subscription Key.\nOnce the Azure Maps Subscription Key is created, set the value of the key as environment variable: `AZURE_SUBSCRIPTION_KEY`.\nThen pass an `AZURE_SUBSCRIPTION_KEY` as the `credential` parameter into an instance of [AzureKeyCredential][azure-key-credential].\n\n```python\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.maps.geolocation import MapsGeolocationClient\n\ncredential = AzureKeyCredential(os.environ.get(\"AZURE_SUBSCRIPTION_KEY\"))\n\ngeolocation_client = MapsGeolocationClient(\n    credential=credential,\n)\n```\n\n#### 2. Authenticate with an Azure Active Directory credential\n\nYou can authenticate with [Azure Active Directory (AAD) token credential][maps_authentication_aad] using the [Azure Identity library][azure_identity].\nAuthentication by using AAD requires some initial setup:\n\n- Install [azure-identity][azure-key-credential]\n- Register a [new AAD application][register_aad_app]\n- Grant access to Azure Maps by assigning the suitable role to your service principal. Please refer to the [Manage authentication page][manage_aad_auth_page].\n\nAfter setup, you can choose which type of [credential][azure-key-credential] from `azure.identity` to use.\nAs an example, [DefaultAzureCredential][default_azure_credential]\ncan be used to authenticate the client:\n\nNext, set the values of the client ID, tenant ID, and client secret of the AAD application as environment variables:\n`AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`\n\nYou will also need to specify the Azure Maps resource you intend to use by specifying the `clientId` in the client options. The Azure Maps resource client id can be found in the Authentication sections in the Azure Maps resource. Please refer to the [documentation][how_to_manage_authentication] on how to find it.\n\n```python\nfrom azure.maps.geolocation import MapsGeolocationClient\nfrom azure.identity import DefaultAzureCredential\n\ncredential = DefaultAzureCredential()\ngeolocation_client = MapsGeolocationClient(\n    client_id=\"<Azure Maps Client ID>\",\n    credential=credential\n)\n```\n\n## Key concepts\n\nThe Azure Maps Geolocation client library for Python allows you to interact with each of the components through the use of a dedicated client object.\n\n### Sync Clients\n\n`MapsGeolocationClient` is the primary client for developers using the Azure Maps Geolocation client library for Python.\nOnce you initialized a `MapsGeolocationClient` class, you can explore the methods on this client object to understand the different features of the Azure Maps Geolocation service that you can access.\n\n### Async Clients\n\nThis library includes a complete async API supported on Python 3.5+. To use it, you must first install an async transport, such as [aiohttp](https://pypi.org/project/aiohttp/).\nSee [azure-core documentation](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/CLIENT_LIBRARY_DEVELOPER.md#transport) for more information.\n\nAsync clients and credentials should be closed when they're no longer needed. These\nobjects are async context managers and define async `close` methods.\n\n## Examples\n\nThe following sections provide several code snippets covering some of the most common Azure Maps Geolocation tasks, including:\n\n- [Get Geolocation](#get-geolocation)\n\n### Get Geolocation\n\nThis service will return the ISO country code for the provided IP address. Developers can use this information to block or alter certain content based on geographical locations where the application is being viewed from.\n\n```python\nfrom azure.maps.geolocation import MapsGeolocationClient\n\nBLOCK_COUNTRY_LIST = ['US', 'TW', 'AF', 'AX', 'DL']\nINCOME_IP_ADDRESS = \"2001:4898:80e8:b::189\"\ngeolocation_result = client.get_country_code(ip_address=INCOME_IP_ADDRESS)\n\nresult_country_code = geolocation_result.iso_code\n\nif result_country_code in BLOCK_COUNTRY_LIST:\n    raise Exception(\"These IP address is from forebiden country\")\n```\n\n## Troubleshooting\n\n### General\n\nMaps Geolocation clients raise exceptions defined in [Azure Core](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/README.md).\n\nThis list can be used for reference to catch thrown exceptions. To get the specific error code of the exception, use the `error_code` attribute, i.e, `exception.error_code`.\n\n### Logging\n\nThis library uses the standard [logging](https://docs.python.org/3/library/logging.html) library for logging.\nBasic information about HTTP sessions (URLs, headers, etc.) is logged at INFO level.\n\nDetailed DEBUG level logging, including request/response bodies and unredacted headers, can be enabled on a client with the `logging_enable` argument:\n\n```python\nimport sys\nimport logging\nfrom azure.maps.geolocation import MapsGeolocationClient\n\n# Create a logger for the 'azure.maps.geolocation' SDK\nlogger = logging.getLogger('azure.maps.geolocation')\nlogger.setLevel(logging.DEBUG)\n\n# Configure a console output\nhandler = logging.StreamHandler(stream=sys.stdout)\nlogger.addHandler(handler)\n\n```\n\n### Additional\n\nStill running into issues? If you encounter any bugs or have suggestions, please file an issue in the [Issues](<https://github.com/Azure/azure-sdk-for-python/issues>) section of the project.\n\n## Next steps\n\n### More sample code\n\nGet started with our [Maps Geolocation samples](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/maps/azure-maps-geolocation/samples) ([Async Version samples](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/maps/azure-maps-geolocation/samples/async_samples)).\n\nSeveral Azure Maps Geolocation Python SDK samples are available to you in the SDK's GitHub repository. These samples provide example code for additional scenarios commonly encountered while working with Maps Geolocation\n\n```bash\nset AZURE_SUBSCRIPTION_KEY=\"<RealSubscriptionKey>\"\n\npip install azure-maps-geolocation --pre\n\npython samples/sample_authentication.py\npython sample/sample_get_country_code.py\n```\n\n> Notes: `--pre` flag can be optionally added, it is to include pre-release and development versions for `pip install`. By default, `pip` only finds stable versions.\n\nFurther detail please refer to [Samples Introduction](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/maps/azure-maps-geolocation/samples/README.md)\n\n### Additional documentation\n\nFor more extensive documentation on Azure Maps Geolocation, see the [Azure Maps Geolocation documentation](https://docs.microsoft.com/rest/api/maps/geolocation) on docs.microsoft.com.\n\n## Contributing\n\nThis project welcomes contributions and suggestions.  Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\n<!-- LINKS -->\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-python/blob/master/sdk/identity/azure-identity\n[azure_portal]: https://portal.azure.com\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure-key-credential]: https://aka.ms/azsdk/python/core/azurekeycredential\n[default_azure_credential]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity#defaultazurecredential\n[register_aad_app]: https://docs.microsoft.com/powershell/module/Az.Resources/New-AzADApplication?view=azps-8.0.0\n[maps_authentication_aad]: https://docs.microsoft.com/azure/azure-maps/how-to-manage-authentication\n[create_new_application_registration]: https://portal.azure.com/#blade/Microsoft_AAD_RegisteredApps/applicationsListBlade/quickStartType/AspNetWebAppQuickstartPage/sourceType/docs\n[manage_aad_auth_page]: https://docs.microsoft.com/azure/azure-maps/how-to-manage-authentication\n[how_to_manage_authentication]: https://docs.microsoft.com/azure/azure-maps/how-to-manage-authentication#view-authentication-details\n",
        "repo_name": "maps/azure-maps-geolocation",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-geolocation",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Azure Maps Render Package client library for Python\n\nThis package contains a Python SDK for Azure Maps Services for Render.\nRead more about Azure Maps Services [here](https://docs.microsoft.com/azure/azure-maps/)\n\n[Source code](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/maps/azure-maps-render) | [API reference documentation](https://docs.microsoft.com/rest/api/maps/render) | [Product documentation](https://docs.microsoft.com/azure/azure-maps/)\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to <https://github.com/Azure/azure-sdk-for-python/issues/20691>_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7 or later is required to use this package.\n- An [Azure subscription][azure_subscription] and an [Azure Maps account](https://docs.microsoft.com/azure/azure-maps/how-to-manage-account-keys).\n- A deployed Maps Services resource. You can create the resource via [Azure Portal][azure_portal] or [Azure CLI][azure_cli].\n\nIf you use Azure CLI, replace `<resource-group-name>` and `<account-name>` of your choice, and select a proper [pricing tier](https://docs.microsoft.com/azure/azure-maps/choose-pricing-tier) based on your needs via the `<sku-name>` parameter. Please refer to [this page](https://docs.microsoft.com/cli/azure/maps/account?view=azure-cli-latest#az_maps_account_create) for more details.\n\n```bash\naz maps account create --resource-group <resource-group-name> --account-name <account-name> --sku <sku-name>\n```\n\n### Install the package\n\nInstall the Azure Maps Service Render SDK.\n\n```bash\npip install azure-maps-render\n```\n\n### Create and Authenticate the MapsRenderClient\n\nTo create a client object to access the Azure Maps Render API, you will need a **credential** object. Azure Maps Render client also support two ways to authenticate.\n\n#### 1. Authenticate with a Subscription Key Credential\n\nYou can authenticate with your Azure Maps Subscription Key.\nOnce the Azure Maps Subscription Key is created, set the value of the key as environment variable: `AZURE_SUBSCRIPTION_KEY`.\nThen pass an `AZURE_SUBSCRIPTION_KEY` as the `credential` parameter into an instance of [AzureKeyCredential][azure-key-credential].\n\n```python\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.maps.render import MapsRenderClient\n\ncredential = AzureKeyCredential(os.environ.get(\"AZURE_SUBSCRIPTION_KEY\"))\n\nrender_client = MapsRenderClient(\n    credential=credential,\n)\n```\n\n#### 2. Authenticate with an Azure Active Directory credential\n\nYou can authenticate with [Azure Active Directory (AAD) token credential][maps_authentication_aad] using the [Azure Identity library][azure_identity].\nAuthentication by using AAD requires some initial setup:\n\n- Install [azure-identity][azure-key-credential]\n- Register a [new AAD application][register_aad_app]\n- Grant access to Azure Maps by assigning the suitable role to your service principal. Please refer to the [Manage authentication page][manage_aad_auth_page].\n\nAfter setup, you can choose which type of [credential][azure-key-credential] from `azure.identity` to use.\nAs an example, [DefaultAzureCredential][default_azure_credential]\ncan be used to authenticate the client:\n\nNext, set the values of the client ID, tenant ID, and client secret of the AAD application as environment variables:\n`AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`\n\nYou will also need to specify the Azure Maps resource you intend to use by specifying the `clientId` in the client options. The Azure Maps resource client id can be found in the Authentication sections in the Azure Maps resource. Please refer to the [documentation][how_to_manage_authentication] on how to find it.\n\n```python\nfrom azure.maps.render import MapsRenderClient\nfrom azure.identity import DefaultAzureCredential\n\ncredential = DefaultAzureCredential()\nrender_client = MapsRenderClient(\n    client_id=\"<Azure Maps Client ID>\",\n    credential=credential\n)\n```\n\n## Key concepts\n\nThe Azure Maps Render client library for Python allows you to interact with each of the components through the use of a dedicated client object.\n\n### Sync Clients\n\n`MapsRenderClient` is the primary client for developers using the Azure Maps Render client library for Python.\nOnce you initialized a `MapsRenderClient` class, you can explore the methods on this client object to understand the different features of the Azure Maps Render service that you can access.\n\n### Async Clients\n\nThis library includes a complete async API supported on Python 3.5+. To use it, you must first install an async transport, such as [aiohttp](https://pypi.org/project/aiohttp/).\nSee [azure-core documentation](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/CLIENT_LIBRARY_DEVELOPER.md#transport) for more information.\n\nAsync clients and credentials should be closed when they're no longer needed. These\nobjects are async context managers and define async `close` methods.\n\n## Examples\n\nThe following sections provide several code snippets covering some of the most common Azure Maps Render tasks, including:\n\n- [Get Maps Attribution](#get-maps-attribution)\n- [Get Maps Static Image](#get-maps-static-image)\n- [Get Maps Tile](#get-maps-tile)\n- [Get Maps Tileset](#get-maps-tileset)\n- [Get Maps Copyright for World](#get-maps-copyright-for-world)\n\n### Get Maps Attribution\n\nThis request allows users to request map copyright attribution information for a\nsection of a tileset.\n\n```python\nfrom azure.maps.render import MapsRenderClient\n\nresult = maps_render_client.get_map_attribution(\n    tileset_id=TilesetID.MICROSOFT_BASE,\n    zoom=6,\n    bounds=BoundingBox(\n        south=42.982261,\n        west=24.980233,\n        north=56.526017,\n        east=1.355233\n    )\n)\n```\n\n### Get Maps Tile\n\nThis request will return map tiles in vector or raster formats typically\nto be integrated into a map control or SDK. Some example tiles that can be requested are Azure\nMaps road tiles, real-time  Weather Radar tiles. By default, Azure Maps uses vector tiles for its web map\ncontrol (Web SDK) and Android SDK.\n\n```python\nfrom azure.maps.render import MapsRenderClient\n\nresult = maps_render_client.get_map_tile(\n    tileset_id=TilesetID.MICROSOFT_BASE,\n    z=6,\n    x=9,\n    y=22,\n    tile_size=\"512\"\n)\n```\n\n### Get Maps Tileset\n\nThis request will give metadata for a tileset.\n\n```python\nfrom azure.maps.render import MapsRenderClient\n\nresult = maps_render_client.get_map_tileset(tileset_id=TilesetID.MICROSOFT_BASE)\n```\n\n### Get Maps Static Image\n\nThis request will provide the static image service renders a user-defined, rectangular image containing a map section\nusing a zoom level from 0 to 20.\nThe static image service renders a user-defined,\nrectangular image containing a map section using a zoom level from 0 to 20.\nAnd also save the result to file as png.\n\n```python\nfrom azure.maps.render import MapsRenderClient\n\nresult = maps_render_client.get_map_static_image(img_format=\"png\", center=(52.41064,4.84228))\n# Save result to file as png\nfile = open('result.png', 'wb')\nfile.write(next(result))\nfile.close()\n```\n\n### Get Maps Copyright for World\n\nThis request will serve copyright information for Render Tile service.\n\n```python\nfrom azure.maps.render import MapsRenderClient\n\nresult = maps_render_client.get_copyright_for_world()\n```\n\n## Troubleshooting\n\n### General\n\nMaps Render clients raise exceptions defined in [Azure Core](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/README.md).\n\nThis list can be used for reference to catch thrown exceptions. To get the specific error code of the exception, use the `error_code` attribute, i.e, `exception.error_code`.\n\n### Logging\n\nThis library uses the standard [logging](https://docs.python.org/3/library/logging.html) library for logging.\nBasic information about HTTP sessions (URLs, headers, etc.) is logged at INFO level.\n\nDetailed DEBUG level logging, including request/response bodies and unredacted headers, can be enabled on a client with the `logging_enable` argument:\n\n```python\nimport sys\nimport logging\nfrom azure.maps.render import MapsRenderClient\n\n# Create a logger for the 'azure.maps.render' SDK\nlogger = logging.getLogger('azure.maps.render')\nlogger.setLevel(logging.DEBUG)\n\n# Configure a console output\nhandler = logging.StreamHandler(stream=sys.stdout)\nlogger.addHandler(handler)\n\n```\n\n### Additional\n\nStill running into issues? If you encounter any bugs or have suggestions, please file an issue in the [Issues](<https://github.com/Azure/azure-sdk-for-python/issues>) section of the project.\n\n## Next steps\n\n### More sample code\n\nGet started with our [Maps Render samples](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/maps/azure-maps-render/samples) ([Async Version samples](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/maps/azure-maps-render/samples/async_samples)).\n\nSeveral Azure Maps Render Python SDK samples are available to you in the SDK's GitHub repository. These samples provide example code for additional scenarios commonly encountered while working with Maps Render\n\n```bash\nset AZURE_SUBSCRIPTION_KEY=\"<RealSubscriptionKey>\"\n\npip install azure-maps-render --pre\n\npython samples/sample_authentication.py\npython sample/sample_get_copyright_caption.py\npython sample/sample_get_copyright_for_tile.py\npython sample/sample_get_copyright_for_world.py\npython sample/sample_get_copyright_from_bounding_box.py\npython sample/sample_get_map_attribution.py\npython sample/sample_get_map_static_image.py\npython sample/sample_get_map_tile.py\npython sample/sample_get_map_tileset.py\n```\n\n> Notes: `--pre` flag can be optionally added, it is to include pre-release and development versions for `pip install`. By default, `pip` only finds stable versions.\n\nFurther detail please refer to [Samples Introduction](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/maps/azure-maps-render/samples/README.md)\n\n### Additional documentation\n\nFor more extensive documentation on Azure Maps Render, see the [Azure Maps Render documentation](https://docs.microsoft.com/rest/api/maps/render) on docs.microsoft.com.\n\n## Contributing\n\nThis project welcomes contributions and suggestions.  Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\n<!-- LINKS -->\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-python/blob/master/sdk/identity/azure-identity\n[azure_portal]: https://portal.azure.com\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure-key-credential]: https://aka.ms/azsdk/python/core/azurekeycredential\n[default_azure_credential]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity#defaultazurecredential\n[register_aad_app]: https://docs.microsoft.com/powershell/module/Az.Resources/New-AzADApplication?view=azps-8.0.0\n[maps_authentication_aad]: https://docs.microsoft.com/azure/azure-maps/how-to-manage-authentication\n[create_new_application_registration]: https://portal.azure.com/#blade/Microsoft_AAD_RegisteredApps/applicationsListBlade/quickStartType/AspNetWebAppQuickstartPage/sourceType/docs\n[manage_aad_auth_page]: https://docs.microsoft.com/azure/azure-maps/how-to-manage-authentication\n[how_to_manage_authentication]: https://docs.microsoft.com/azure/azure-maps/how-to-manage-authentication#view-authentication-details\n",
        "repo_name": "maps/azure-maps-render",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-render",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Azure Maps Route Package client library for Python\n\nThis package contains a Python SDK for Azure Maps Services for Route.\nRead more about Azure Maps Services [here](https://docs.microsoft.com/azure/azure-maps/)\n\n[Source code](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/maps/azure-maps-route) | [API reference documentation](https://docs.microsoft.com/rest/api/maps/route) | [Product documentation](https://docs.microsoft.com/azure/azure-maps/)\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to <https://github.com/Azure/azure-sdk-for-python/issues/20691>_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.6 or later is required to use this package.\n- An [Azure subscription][azure_subscription] and an [Azure Maps account](https://docs.microsoft.com/azure/azure-maps/how-to-manage-account-keys).\n- A deployed Maps Services resource. You can create the resource via [Azure Portal][azure_portal] or [Azure CLI][azure_cli].\n\nIf you use Azure CLI, replace `<resource-group-name>` and `<account-name>` of your choice, and select a proper [pricing tier](https://docs.microsoft.com/azure/azure-maps/choose-pricing-tier) based on your needs via the `<sku-name>` parameter. Please refer to [this page](https://docs.microsoft.com/cli/azure/maps/account?view=azure-cli-latest#az_maps_account_create) for more details.\n\n```bash\naz maps account create --resource-group <resource-group-name> --account-name <account-name> --sku <sku-name>\n```\n\n### Install the package\n\nInstall the Azure Maps Service Route SDK.\n\n```bash\npip install azure-maps-route\n```\n\n### Create and Authenticate the MapsRouteClient\n\nTo create a client object to access the Azure Maps Route API, you will need a **credential** object. Azure Maps Route client also support two ways to authenticate.\n\n#### 1. Authenticate with a Subscription Key Credential\n\nYou can authenticate with your Azure Maps Subscription Key.\nOnce the Azure Maps Subscription Key is created, set the value of the key as environment variable: `AZURE_SUBSCRIPTION_KEY`.\nThen pass an `AZURE_SUBSCRIPTION_KEY` as the `credential` parameter into an instance of [AzureKeyCredential][azure-key-credential].\n\n```python\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.maps.route import MapsRouteClient\n\ncredential = AzureKeyCredential(os.environ.get(\"AZURE_SUBSCRIPTION_KEY\"))\n\nroute_client = MapsRouteClient(\n    credential=credential,\n)\n```\n\n#### 2. Authenticate with an Azure Active Directory credential\n\nYou can authenticate with [Azure Active Directory (AAD) token credential][maps_authentication_aad] using the [Azure Identity library][azure_identity].\nAuthentication by using AAD requires some initial setup:\n\n- Install [azure-identity][azure-key-credential]\n- Register a [new AAD application][register_aad_app]\n- Grant access to Azure Maps by assigning the suitable role to your service principal. Please refer to the [Manage authentication page][manage_aad_auth_page].\n\nAfter setup, you can choose which type of [credential][azure-key-credential] from `azure.identity` to use.\nAs an example, [DefaultAzureCredential][default_azure_credential]\ncan be used to authenticate the client:\n\nNext, set the values of the client ID, tenant ID, and client secret of the AAD application as environment variables:\n`AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`\n\nYou will also need to specify the Azure Maps resource you intend to use by specifying the `clientId` in the client options. The Azure Maps resource client id can be found in the Authentication sections in the Azure Maps resource. Please refer to the [documentation][how_to_manage_authentication] on how to find it.\n\n```python\nfrom azure.maps.route import MapsRouteClient\nfrom azure.identity import DefaultAzureCredential\n\ncredential = DefaultAzureCredential()\nroute_client = MapsRouteClient(\n    client_id=\"<Azure Maps Client ID>\",\n    credential=credential\n)\n```\n\n## Key concepts\n\nThe Azure Maps Route client library for Python allows you to interact with each of the components through the use of a dedicated client object.\n\n### Sync Clients\n\n`MapsRouteClient` is the primary client for developers using the Azure Maps Route client library for Python.\nOnce you initialized a `MapsRouteClient` class, you can explore the methods on this client object to understand the different features of the Azure Maps Route service that you can access.\n\n### Async Clients\n\nThis library includes a complete async API supported on Python 3.5+. To use it, you must first install an async transport, such as [aiohttp](https://pypi.org/project/aiohttp/).\nSee [azure-core documentation](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/CLIENT_LIBRARY_DEVELOPER.md#transport) for more information.\n\nAsync clients and credentials should be closed when they're no longer needed. These\nobjects are async context managers and define async `close` methods.\n\n## Examples\n\nThe following sections provide several code snippets covering some of the most common Azure Maps Route tasks, including:\n\n- [Request and Get Route Directions](#request-and-get-route-directions)\n- [Request and Get Route Range](#reqest-and-get-route-range)\n- [Get Route Matrix](#get-route-matrix)\n- [Get Route Directions Batch](#get-route-directions-batch)\n\n### Request and Get Route Directions\n\nThis service request returns a route between an origin and a destination, passing through waypoints if they are specified. The route will take into account factors such as current traffic and the typical road speeds on the requested day of the week and time of day. Refer the sample code [here](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-route/samples/sample_get_route_directions.py).\n\n```python\nfrom azure.maps.route import MapsRouteClient\n\nroute_directions_result = client.get_route_directions(route_points=[(47.60323, -122.33028), (53.2, -106)]);\n```\n\n### Request and Get Route Range\n\nThis service will calculate a set of locations that can be reached from the origin point by given coordinates and based on fuel, energy,  time or distance budget that is specified. Refer the sample code [here](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-route/samples/sample_get_route_range.py).\n\n```python\nfrom azure.maps.route import MapsRouteClient\n\nroute_range_result = client.get_route_range(coordinates=(47.60323, -122.33028), time_budget_in_sec=6000);\n```\n\n### Get Route Matrix\n\nIf the Matrix Route request was accepted successfully, the Location header in the response contains the URL to download the results of the request. Refer the sample code [here](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-route/samples/sample_get_route_matrix.py).\n\nRetrieves the result of a previous route matrix request.\nThe method returns a poller for retrieving the result.\n\n```python\nfrom azure.maps.route import MapsRouteClient\n\nroute_matrix_result = client.begin_get_route_matrix_result(matrix_id=\"11111111-2222-3333-4444-555555555555\");\n```\n\n### Get Route Directions Batch\n\nRetrieves the result of a previous route direction batch request.\nThe method returns a poller for retrieving the result. Refer sample code [here](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-route/samples/sample_get_route_directions_batch_sync.py).\n\n```python\nfrom azure.maps.route import MapsRouteClient\n\nroute_directions_batch_poller_result = client.begin_get_route_directions_batch_result(batch_id=\"11111111-2222-3333-4444-555555555555\");\n```\n\n## Troubleshooting\n\n### General\n\nMaps Route clients raise exceptions defined in [Azure Core](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/README.md).\n\nThis list can be used for reference to catch thrown exceptions. To get the specific error code of the exception, use the `error_code` attribute, i.e, `exception.error_code`.\n\n### Logging\n\nThis library uses the standard [logging](https://docs.python.org/3/library/logging.html) library for logging.\nBasic information about HTTP sessions (URLs, headers, etc.) is logged at INFO level.\n\nDetailed DEBUG level logging, including request/response bodies and unredacted headers, can be enabled on a client with the `logging_enable` argument:\n\n```python\nimport sys\nimport logging\nfrom azure.maps.route import MapsRouteClient\n\n# Create a logger for the 'azure.maps.route' SDK\nlogger = logging.getLogger('azure.maps.route')\nlogger.setLevel(logging.DEBUG)\n\n# Configure a console output\nhandler = logging.StreamHandler(stream=sys.stdout)\nlogger.addHandler(handler)\n\n```\n\n### Additional\n\nStill running into issues? If you encounter any bugs or have suggestions, please file an issue in the [Issues](<https://github.com/Azure/azure-sdk-for-python/issues>) section of the project.\n\n## Next steps\n\n### More sample code\n\nGet started with our [Maps Route samples](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/maps/azure-maps-route/samples) ([Async Version samples](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/maps/azure-maps-route/samples/async_samples)).\n\nSeveral Azure Maps Route Python SDK samples are available to you in the SDK's GitHub repository. These samples provide example code for additional scenarios commonly encountered while working with Maps Route\n\n```bash\nset AZURE_SUBSCRIPTION_KEY=\"<RealSubscriptionKey>\"\n\npip install azure-maps-route --pre\n\npython samples/sample_authentication.py\npython sample/sample_get_route_range.py\npython samples/sample_get_route_directions.py\npython samples/sample_request_route_matrix.py\npython samples/async_samples/sample_authentication_async.py\npython samples/async_samples/sample_get_route_range_async.py\npython samples/async_samples/sample_request_route_matrix_async.py\npython samples/async_samples/sample_get_route_directions_async.py\n```\n\n> Notes: `--pre` flag can be optionally added, it is to include pre-release and development versions for `pip install`. By default, `pip` only finds stable versions.\n\nFurther detail please refer to [Samples Introduction](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/maps/azure-maps-route/samples/README.md)\n\n### Additional documentation\n\nFor more extensive documentation on Azure Maps Route, see the [Azure Maps Route documentation](https://docs.microsoft.com/rest/api/maps/route) on docs.microsoft.com.\n\n## Contributing\n\nThis project welcomes contributions and suggestions.  Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\n<!-- LINKS -->\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-python/blob/master/sdk/identity/azure-identity\n[azure_portal]: https://portal.azure.com\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure-key-credential]: https://aka.ms/azsdk/python/core/azurekeycredential\n[default_azure_credential]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity#defaultazurecredential\n[register_aad_app]: https://docs.microsoft.com/powershell/module/Az.Resources/New-AzADApplication?view=azps-8.0.0\n[maps_authentication_aad]: https://docs.microsoft.com/azure/azure-maps/how-to-manage-authentication\n[create_new_application_registration]: https://portal.azure.com/#blade/Microsoft_AAD_RegisteredApps/applicationsListBlade/quickStartType/AspNetWebAppQuickstartPage/sourceType/docs\n[manage_aad_auth_page]: https://docs.microsoft.com/azure/azure-maps/how-to-manage-authentication\n[how_to_manage_authentication]: https://docs.microsoft.com/azure/azure-maps/how-to-manage-authentication#view-authentication-details\n",
        "repo_name": "maps/azure-maps-route",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-route",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Azure Maps Search Package client library for Python\n\nThis package contains a Python SDK for Azure Maps Services for Search.\nRead more about Azure Maps Services [here](https://docs.microsoft.com/azure/azure-maps/)\n\n[Source code](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/maps/azure-maps-search) | [API reference documentation](https://docs.microsoft.com/rest/api/maps/search) | [Product documentation](https://docs.microsoft.com/azure/azure-maps/)\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to <https://github.com/Azure/azure-sdk-for-python/issues/20691>_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.6 or later is required to use this package.\n- An [Azure subscription][azure_subscription] and an [Azure Maps account](https://docs.microsoft.com/azure/azure-maps/how-to-manage-account-keys).\n- A deployed Maps Services resource. You can create the resource via [Azure Portal][azure_portal] or [Azure CLI][azure_cli].\n\nIf you use Azure CLI, replace `<resource-group-name>` and `<account-name>` of your choice, and select a proper [pricing tier](https://docs.microsoft.com/azure/azure-maps/choose-pricing-tier) based on your needs via the `<sku-name>` parameter. Please refer to [this page](https://docs.microsoft.com/cli/azure/maps/account?view=azure-cli-latest#az_maps_account_create) for more details.\n\n```bash\naz maps account create --resource-group <resource-group-name> --account-name <account-name> --sku <sku-name>\n```\n\n### Install the package\n\nInstall the Azure Maps Service Search SDK.\n\n```bash\npip install azure-maps-search\n```\n\n### Create and Authenticate the MapsSearchClient\n\nTo create a client object to access the Azure Maps Search API, you will need a **credential** object. Azure Maps Search client also support two ways to authenticate.\n\n#### 1. Authenticate with a Subscription Key Credential\n\nYou can authenticate with your Azure Maps Subscription Key.\nOnce the Azure Maps Subscription Key is created, set the value of the key as environment variable: `AZURE_SUBSCRIPTION_KEY`.\nThen pass an `AZURE_SUBSCRIPTION_KEY` as the `credential` parameter into an instance of [AzureKeyCredential][azure-key-credential].\n\n```python\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.maps.search import MapsSearchClient\n\ncredential = AzureKeyCredential(os.environ.get(\"AZURE_SUBSCRIPTION_KEY\"))\n\nsearch_client = MapsSearchClient(\n    credential=credential,\n)\n```\n\n#### 2. Authenticate with an Azure Active Directory credential\n\nYou can authenticate with [Azure Active Directory (AAD) token credential][maps_authentication_aad] using the [Azure Identity library][azure_identity].\nAuthentication by using AAD requires some initial setup:\n\n- Install [azure-identity][azure-key-credential]\n- Register a [new AAD application][register_aad_app]\n- Grant access to Azure Maps by assigning the suitable role to your service principal. Please refer to the [Manage authentication page][manage_aad_auth_page].\n\nAfter setup, you can choose which type of [credential][azure-key-credential] from `azure.identity` to use.\nAs an example, [DefaultAzureCredential][default_azure_credential]\ncan be used to authenticate the client:\n\nNext, set the values of the client ID, tenant ID, and client secret of the AAD application as environment variables:\n`AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`\n\nYou will also need to specify the Azure Maps resource you intend to use by specifying the `clientId` in the client options. The Azure Maps resource client id can be found in the Authentication sections in the Azure Maps resource. Please refer to the [documentation][how_to_manage_authentication] on how to find it.\n\n```python\nfrom azure.maps.search import MapsSearchClient\nfrom azure.identity import DefaultAzureCredential\n\ncredential = DefaultAzureCredential()\nsearch_client = MapsSearchClient(credential=credential)\n```\n\n## Key concepts\n\nThe Azure Maps Search client library for Python allows you to interact with each of the components through the use of a dedicated client object.\n\n### Sync Clients\n\n`MapsSearchClient` is the primary client for developers using the Azure Maps Search client library for Python.\nOnce you initialized a `MapsSearchClient` class, you can explore the methods on this client object to understand the different features of the Azure Maps Search service that you can access.\n\n### Async Clients\n\nThis library includes a complete async API supported on Python 3.5+. To use it, you must first install an async transport, such as [aiohttp](https://pypi.org/project/aiohttp/).\nSee [azure-core documentation](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/CLIENT_LIBRARY_DEVELOPER.md#transport) for more information.\n\nAsync clients and credentials should be closed when they're no longer needed. These\nobjects are async context managers and define async `close` methods.\n\n## Examples\n\nThe following sections provide several code snippets covering some of the most common Azure Maps Search tasks, including:\n\n- [Request latitude and longitude coordinates for an address](#request-latitude-and-longitude-coordinates-for-an-address)\n\n- [Search for an address or Point of Interest](#search-for-an-address-or-point-of-interest)\n\n- [Make a Reverse Address Search to translate coordinate location to street address](#make-a-reverse-address-search-to-translate-coordinate-location-to-street-address)\n- [Translate coordinate location into a human understandable cross street](#translate-coordinate-location-into-a-human-understandable-cross-street)\n- [Get async fuzzy search batch with param and batchid](#get-async-fuzzy-search-batch-with-param-and-batchid)\n- [Fail to get fuzzy search batch sync](#fail-to-get-fuzzy-search-batch-sync)\n- [Search inside Geometry](#search-inside-geometry)\n\n- [Working with exist library for Search](#working-with-exist-library-for-search)\n\n### Request latitude and longitude coordinates for an address\n\nYou can use an authenticated client to convert an address into latitude and longitude coordinates. This process is also called geocoding. In addition to returning the coordinates, the response will also return detailed address properties such as street, postal code, municipality, and country/region information.\n\n```python\nfrom azure.maps.search import MapsSearchClient\n\nsearch_result = client.search_address(\"400 Broad, Seattle\");\n```\n\n### Search for an address or Point of Interest\n\nYou can use Fuzzy Search to search an address or a point of interest (POI). The following examples demostrate how to search for `pizza` over the scope of a specific country (`France`, in this example).\n\n```python\nfrom azure.maps.search import MapsSearchClient\n\nfuzzy_search_result = client.fuzzy_search(query: \"pizza\", country_filter: \"fr\" );\n\nresult_address = fuzzy_search_result.results[0].address\n```\n\n### Make a Reverse Address Search to translate coordinate location to street address\n\nYou can translate coordinates into human readable street addresses. This process is also called reverse geocoding.\nThis is often used for applications that consume GPS feeds and want to discover addresses at specific coordinate points.\n\n```python\nfrom azure.maps.search import MapsSearchClient\n\ncoordinates=(47.60323, -122.33028)\n\nreverse_search_result = client.reverse_search_address(coordinates=coordinates);\n\nresult_summary = reverse_search_result.summary\n```\n\n### Translate coordinate location into a human understandable cross street\n\nTranslate coordinate location into a human understandable cross street by using Search Address Reverse Cross Street API. Most often, this is needed in tracking applications that receive a GPS feed from a device or asset, and wish to know where the coordinate is located.\n\n```python\nfrom azure.maps.search import MapsSearchClient\n\ncoordinates=(47.60323, -122.33028)\n\nreverse_search_result = client.reverse_search_cross_street_address(coordinates=coordinates);\n\nresult_address = reverse_search_result.results[0].address\n```\n\n### Get async fuzzy search batch with param and batchid\n\nThis sample demonstrates how to perform fuzzy search by location and lat/lon with async batch method. This function is accepting both `search_queries` and `batch_id` and returning an `AsyncLRO` object. The `batch_id` here can be use to retrieve the LRO object later which last 14 days.\n\n```python\nmaps_search_client = MapsSearchClient(credential=AzureKeyCredential(subscription_key))\n\nasync with maps_search_client:\n    result = await maps_search_client.begin_fuzzy_search_batch(\n        search_queries=[\n            \"350 5th Ave, New York, NY 10118&limit=1\",\n            \"400 Broad St, Seattle, WA 98109&limit=6\"\n        ]\n    )\n\nbatch_id = result.batch_id\n```\n\nThe method `begin_fuzzy_search_batch()` also accepts `batch_id` as the parameter. The `batch_id` here can be use to retrieve the LRO object later which last 14 days.\n\n```python\nmaps_search_client = MapsSearchClient(credential=AzureKeyCredential(subscription_key))\n\nasync with maps_search_client:\n    result = await maps_search_client.begin_fuzzy_search_batch(\n        batch_id=batch_id\n    )\n\nresult = result.response\n```\n\n### Fail to get fuzzy search batch sync\n\nThis sample demonstrates how to check if there are failures in search of fuzzy_search_batch.\n\n```python\nmaps_search_client = MapsSearchClient(credential=AzureKeyCredential(subscription_key))\n\nresult = maps_search_client.fuzzy_search_batch(\n    search_queries=[\n        \"350 5th Ave, New York, NY 10118&limit=1\",\n        \"400 Broad St, Seattle, WA 98109&lim\"\n    ]\n)\nfor item in result.items:\n    count = 0\n    if item.response.error is not None:\n        count = count+1\n        print(f\"Error: {item.response.error.message}\")\nprint(f\"There are total of {count} search queries failed.\")\n```\n\n### Search inside Geometry\n\nThis sample demonstrates how to perform search inside geometry by given target such as `pizza` and multiple different geometry as input with GeoJson object.\n\n```python\nmaps_search_client = MapsSearchClient(credential=AzureKeyCredential(subscription_key))\n\ngeo_json_obj1 = {\n    \"type\": \"FeatureCollection\",\n    \"features\": [\n        {\n            \"type\": \"Feature\",\n            \"geometry\": {\n                \"type\": \"Polygon\",\n                \"coordinates\": [[\n                    [-122.143035,47.653536],\n                    [-122.187164,47.617556],\n                    [-122.114981,47.570599],\n                    [-122.132756,47.654009],\n                    [-122.143035,47.653536]\n                    ]]\n            },\n            \"properties\": {}\n        },\n        {\n            \"type\": \"Feature\",\n            \"geometry\": {\n                \"type\": \"Point\",\n                \"coordinates\": [-122.126986,47.639754]\n            },\n            \"properties\": {\n                \"subType\": \"Circle\",\n                \"radius\": 100\n            }\n        }\n    ]\n}\nresult1 = maps_search_client.search_inside_geometry(\n    query=\"pizza\",\n    geometry=geo_json_obj1\n)\nprint(\"Search inside geometry with standard GeoJson object as input, FeatureCollection:\")\nprint(result1)\n```\n\n### Working with exist library for Search\n\nThis sample demonstrates how to working with other existing packages such as `shapely` to perform search inside geometry by given target such as `pizza`.\n\n```python\nmaps_search_client = MapsSearchClient(credential=AzureKeyCredential(subscription_key))\n\nfrom shapely.geometry import Polygon\n\ngeo_interface_obj = Polygon([\n    [-122.43576049804686, 37.7524152343544],\n    [-122.43301391601562, 37.70660472542312],\n    [-122.36434936523438, 37.712059855877314],\n    [-122.43576049804686, 37.7524152343544]\n])\n\nresult3 = maps_search_client.search_inside_geometry(\n    query=\"pizza\",\n    geometry=geo_interface_obj\n)\nprint(\"Search inside geometry with Polygon from third party library `shapely` with geo_interface as result 3:\")\nprint(result2)\n```\n\n## Troubleshooting\n\n### General\n\nMaps Search clients raise exceptions defined in [Azure Core](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/README.md).\n\nThis list can be used for reference to catch thrown exceptions. To get the specific error code of the exception, use the `error_code` attribute, i.e, `exception.error_code`.\n\n### Logging\n\nThis library uses the standard [logging](https://docs.python.org/3/library/logging.html) library for logging.\nBasic information about HTTP sessions (URLs, headers, etc.) is logged at INFO level.\n\nDetailed DEBUG level logging, including request/response bodies and unredacted headers, can be enabled on a client with the `logging_enable` argument:\n\n```python\nimport sys\nimport logging\nfrom azure.maps.search import MapsSearchClient\n\n# Create a logger for the 'azure.maps.search' SDK\nlogger = logging.getLogger('azure.maps.search')\nlogger.setLevel(logging.DEBUG)\n\n# Configure a console output\nhandler = logging.StreamHandler(stream=sys.stdout)\nlogger.addHandler(handler)\n\n```\n\nSimilarly, `logging_enable` can enable detailed logging for a single operation,\neven when it isn't enabled for the client:\n\n```python\nservice_client.get_service_stats(logging_enable=True)\n```\n\n### Additional\n\nStill running into issues? If you encounter any bugs or have suggestions, please file an issue in the [Issues](<https://github.com/Azure/azure-sdk-for-python/issues>) section of the project.\n\n## Next steps\n\n### More sample code\n\nGet started with our [Maps Search samples](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/maps/azure-maps-search/samples) ([Async Version samples](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/maps/azure-maps-search/samples/async_samples)).\n\nSeveral Azure Maps Search Python SDK samples are available to you in the SDK's GitHub repository. These samples provide example code for additional scenarios commonly encountered while working with Maps Search\n\n```bash\nset AZURE_SUBSCRIPTION_KEY=\"<RealSubscriptionKey>\"\n\npip install azure-maps-search --pre\n\npython samples/sample_authentication.py\npython sample/sample_fuzzy_search.py\npython samples/sample_get_point_of_interest_categories.py\npython samples/sample_reverse_search_address.py\npython samples/sample_reverse_search_cross_street_address.py\npython samples/sample_search_nearby_point_of_interest.py\npython samples/sample_search_point_of_interest_category.py\npython samples/sample_search_point_of_interest.py\npython samples/sample_search_structured_address.py\n```\n\n> Notes: `--pre` flag can be optionally added, it is to include pre-release and development versions for `pip install`. By default, `pip` only finds stable versions.\n\nFurther detail please refer to [Samples Introduction](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/maps/azure-maps-search/samples/README.md)\n\n### Additional documentation\n\nFor more extensive documentation on Azure Maps Search, see the [Azure Maps Search documentation](https://docs.microsoft.com/rest/api/maps/search) on docs.microsoft.com.\n\n## Contributing\n\nThis project welcomes contributions and suggestions.  Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <https://cla.microsoft.com>.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\n<!-- LINKS -->\n[azure_subscription]: https://azure.microsoft.com/free/\n[azure_identity]: https://github.com/Azure/azure-sdk-for-python/blob/master/sdk/identity/azure-identity\n[azure_portal]: https://portal.azure.com\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure-key-credential]: https://aka.ms/azsdk/python/core/azurekeycredential\n[default_azure_credential]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity#defaultazurecredential\n[register_aad_app]: https://docs.microsoft.com/powershell/module/Az.Resources/New-AzADApplication?view=azps-8.0.0\n[maps_authentication_aad]: https://docs.microsoft.com/azure/azure-maps/how-to-manage-authentication\n[create_new_application_registration]: https://portal.azure.com/#blade/Microsoft_AAD_RegisteredApps/applicationsListBlade/quickStartType/AspNetWebAppQuickstartPage/sourceType/docs\n[manage_aad_auth_page]: https://docs.microsoft.com/azure/azure-maps/how-to-manage-authentication\n[how_to_manage_authentication]: https://docs.microsoft.com/azure/azure-maps/how-to-manage-authentication#view-authentication-details\n",
        "repo_name": "maps/azure-maps-search",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/maps/azure-maps-search",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Maps Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/)\nCode samples for this package can be found at [Maps](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-maps%2FREADME.png)\n",
        "repo_name": "maps/azure-mgmt-maps",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/maps/azure-mgmt-maps",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Market Place Ordering Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/)\nCode samples for this package can be found at [Market Place Ordering](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://github.com/Azure-Samples/azure-samples-python-management/tree/main/samples/marketplaceordering)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-marketplaceordering%2FREADME.png)\n",
        "repo_name": "marketplaceordering/azure-mgmt-marketplaceordering",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/marketplaceordering/azure-mgmt-marketplaceordering",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Azure Live Video Analytics for IoT Edge client library for Python\n\nThis package is no longer maintained. Please use [Azure Video Analyzer Edge client library for Python](https://pypi.org/project/azure-media-videoanalyzer-edge)\n",
        "repo_name": "media/azure-media-analytics-edge",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/media/azure-media-analytics-edge",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Media Services Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-media\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.media import MediaManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = MediaManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\n\nCode samples for this package can be found at [Media Services](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com and [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-media%2FREADME.png)\n",
        "repo_name": "media/azure-mgmt-media",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/media/azure-mgmt-media",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Azure Metrics Advisor client library for Python\nMetrics Advisor is a scalable real-time time series monitoring, alerting, and root cause analysis platform. Use Metrics Advisor to:\n\n- Analyze multi-dimensional data from multiple data sources\n- Identify and correlate anomalies\n- Configure and fine-tune the anomaly detection model used on your data\n- Diagnose anomalies and help with root cause analysis\n\n[Source code][src_code]\n| [Package (Pypi)][package]\n| [Package (Conda)](https://anaconda.org/microsoft/azure-ai-metricsadvisor/)\n| [API reference documentation][reference_documentation]\n| [Product documentation][ma_docs]\n| [Samples][samples_readme]\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Install the package\n\nInstall the Azure Metrics Advisor client library for Python with pip:\n\n```commandline\npip install azure-ai-metricsadvisor\n```\n\n### Prerequisites\n\n* Python 3.7 or later is required to use this package.\n* You need an [Azure subscription][azure_sub], and a [Metrics Advisor service][ma_service] to use this package.\n\n### Authenticate the client\n\nYou will need two keys to authenticate the client:\n\n1) The subscription key to your Metrics Advisor resource. You can find this in the Keys and Endpoint section of your resource in the Azure portal.\n2) The API key for your Metrics Advisor instance. You can find this in the web portal for Metrics Advisor, in API keys on the left navigation menu.\n\nWe can use the keys to create a new `MetricsAdvisorClient` or `MetricsAdvisorAdministrationClient`.\n\n<!-- SNIPPET:sample_authentication.authentication_client_with_metrics_advisor_credential -->\n\n```python\nfrom azure.ai.metricsadvisor import MetricsAdvisorKeyCredential, MetricsAdvisorClient\n\nservice_endpoint = os.getenv(\"METRICS_ADVISOR_ENDPOINT\")\nsubscription_key = os.getenv(\"METRICS_ADVISOR_SUBSCRIPTION_KEY\")\napi_key = os.getenv(\"METRICS_ADVISOR_API_KEY\")\n\nclient = MetricsAdvisorClient(service_endpoint,\n                              MetricsAdvisorKeyCredential(subscription_key, api_key))\n```\n\n<!-- END SNIPPET -->\n\n<!-- SNIPPET:sample_authentication.administration_client_with_metrics_advisor_credential -->\n\n```python\nfrom azure.ai.metricsadvisor import MetricsAdvisorKeyCredential, MetricsAdvisorAdministrationClient\n\nservice_endpoint = os.getenv(\"METRICS_ADVISOR_ENDPOINT\")\nsubscription_key = os.getenv(\"METRICS_ADVISOR_SUBSCRIPTION_KEY\")\napi_key = os.getenv(\"METRICS_ADVISOR_API_KEY\")\n\nclient = MetricsAdvisorAdministrationClient(service_endpoint,\n                              MetricsAdvisorKeyCredential(subscription_key, api_key))\n```\n\n<!-- END SNIPPET -->\n\n## Key concepts\n\n### MetricsAdvisorClient\n\n`MetricsAdvisorClient` helps with:\n\n- listing incidents\n- listing root causes of incidents\n- retrieving original time series data and time series data enriched by the service.\n- listing alerts\n- adding feedback to tune your model\n\n### MetricsAdvisorAdministrationClient\n\n`MetricsAdvisorAdministrationClient` allows you to\n\n- manage data feeds\n- manage anomaly detection configurations\n- manage anomaly alerting configurations\n- manage hooks\n\n### DataFeed\n\nA `DataFeed` is what Metrics Advisor ingests from your data source, such as Cosmos DB or a SQL server. A data feed contains rows of:\n\n- timestamps\n- zero or more dimensions\n- one or more measures\n\n### Metric\n\nA `DataFeedMetric` is a quantifiable measure that is used to monitor and assess the status of a specific business process. It can be a combination of multiple time series values divided into dimensions. For example a web health metric might contain dimensions for user count and the en-us market.\n\n### AnomalyDetectionConfiguration\n\n`AnomalyDetectionConfiguration` is required for every time series, and determines whether a point in the time series is an anomaly.\n\n### Anomaly & Incident\n\nAfter a detection configuration is applied to metrics, `AnomalyIncident`s are generated whenever any series within it has an `DataPointAnomaly`.\n\n### Alert\n\nYou can configure which anomalies should trigger an `AnomalyAlert`. You can set multiple alerts with different settings. For example, you could create an alert for anomalies with lower business impact, and another for more important alerts.\n\n### Notification Hook\n\nMetrics Advisor lets you create and subscribe to real-time alerts. These alerts are sent over the internet, using a notification hook like `EmailNotificationHook` or `WebNotificationHook`.\n\n## Examples\n\n- [Add a data feed from a sample or data source](#add-a-data-feed-from-a-sample-or-data-source \"Add a data feed from a sample or data source\")\n- [Check ingestion status](#check-ingestion-status \"Check ingestion status\")\n- [Configure anomaly detection configuration](#configure-anomaly-detection-configuration \"Configure anomaly detection configuration\")\n- [Configure alert configuration](#configure-alert-configuration \"Configure alert configuration\")\n- [Query anomaly detection results](#query-anomaly-detection-results \"Query anomaly detection results\")\n- [Query incidents](#query-incidents \"Query incidents\")\n- [Query root causes](#query-root-causes \"Query root causes\")\n- [Add hooks for receiving anomaly alerts](#add-hooks-for-receiving-anomaly-alerts \"Add hooks for receiving anomaly alerts\")\n\n### Add a data feed from a sample or data source\n\nMetrics Advisor supports connecting different types of data sources. Here is a sample to ingest data from SQL Server.\n\n<!-- SNIPPET:sample_data_feeds.create_data_feed -->\n\n```python\nfrom azure.ai.metricsadvisor import MetricsAdvisorKeyCredential, MetricsAdvisorAdministrationClient\nfrom azure.ai.metricsadvisor.models import (\n    SqlServerDataFeedSource,\n    DataFeedSchema,\n    DataFeedMetric,\n    DataFeedDimension,\n    DataFeedRollupSettings,\n    DataFeedMissingDataPointFillSettings,\n)\n\nservice_endpoint = os.getenv(\"METRICS_ADVISOR_ENDPOINT\")\nsubscription_key = os.getenv(\"METRICS_ADVISOR_SUBSCRIPTION_KEY\")\napi_key = os.getenv(\"METRICS_ADVISOR_API_KEY\")\nsql_server_connection_string = os.getenv(\"METRICS_ADVISOR_SQL_SERVER_CONNECTION_STRING\")\nquery = os.getenv(\"METRICS_ADVISOR_SQL_SERVER_QUERY\")\n\nclient = MetricsAdvisorAdministrationClient(service_endpoint,\n                              MetricsAdvisorKeyCredential(subscription_key, api_key))\n\ndata_feed = client.create_data_feed(\n    name=\"My data feed\",\n    source=SqlServerDataFeedSource(\n        connection_string=sql_server_connection_string,\n        query=query,\n    ),\n    granularity=\"Daily\",\n    schema=DataFeedSchema(\n        metrics=[\n            DataFeedMetric(name=\"cost\", display_name=\"Cost\"),\n            DataFeedMetric(name=\"revenue\", display_name=\"Revenue\")\n        ],\n        dimensions=[\n            DataFeedDimension(name=\"category\", display_name=\"Category\"),\n            DataFeedDimension(name=\"region\", display_name=\"region\")\n        ],\n        timestamp_column=\"Timestamp\"\n    ),\n    ingestion_settings=datetime.datetime(2019, 10, 1),\n    data_feed_description=\"cost/revenue data feed\",\n    rollup_settings=DataFeedRollupSettings(\n        rollup_type=\"AutoRollup\",\n        rollup_method=\"Sum\",\n        rollup_identification_value=\"__CUSTOM_SUM__\"\n    ),\n    missing_data_point_fill_settings=DataFeedMissingDataPointFillSettings(\n        fill_type=\"SmartFilling\"\n    ),\n    access_mode=\"Private\"\n)\n\nreturn data_feed\n```\n\n<!-- END SNIPPET -->\n\n### Check ingestion status\n\nAfter we start the data ingestion, we can check the ingestion status.\n\n<!-- SNIPPET:sample_ingestion.list_data_feed_ingestion_status -->\n\n```python\nimport datetime\nfrom azure.ai.metricsadvisor import MetricsAdvisorKeyCredential, MetricsAdvisorAdministrationClient\n\nservice_endpoint = os.getenv(\"METRICS_ADVISOR_ENDPOINT\")\nsubscription_key = os.getenv(\"METRICS_ADVISOR_SUBSCRIPTION_KEY\")\napi_key = os.getenv(\"METRICS_ADVISOR_API_KEY\")\ndata_feed_id = os.getenv(\"METRICS_ADVISOR_DATA_FEED_ID\")\n\nclient = MetricsAdvisorAdministrationClient(service_endpoint,\n                              MetricsAdvisorKeyCredential(subscription_key, api_key))\n\ningestion_status = client.list_data_feed_ingestion_status(\n    data_feed_id,\n    datetime.datetime(2020, 9, 20),\n    datetime.datetime(2020, 9, 25)\n)\nfor status in ingestion_status:\n    print(\"Timestamp: {}\".format(status.timestamp))\n    print(\"Status: {}\".format(status.status))\n    print(\"Message: {}\\n\".format(status.message))\n```\n\n<!-- END SNIPPET -->\n\n### Configure anomaly detection configuration\n\nWhile a default detection configuration is automatically applied to each metric, we can tune the detection modes used on our data by creating a customized anomaly detection configuration.\n\n<!-- SNIPPET:sample_detection_configuration.create_detection_config -->\n\n```python\nfrom azure.ai.metricsadvisor import MetricsAdvisorKeyCredential, MetricsAdvisorAdministrationClient\nfrom azure.ai.metricsadvisor.models import (\n    ChangeThresholdCondition,\n    HardThresholdCondition,\n    SmartDetectionCondition,\n    SuppressCondition,\n    MetricDetectionCondition,\n)\n\nservice_endpoint = os.getenv(\"METRICS_ADVISOR_ENDPOINT\")\nsubscription_key = os.getenv(\"METRICS_ADVISOR_SUBSCRIPTION_KEY\")\napi_key = os.getenv(\"METRICS_ADVISOR_API_KEY\")\nmetric_id = os.getenv(\"METRICS_ADVISOR_METRIC_ID\")\n\nclient = MetricsAdvisorAdministrationClient(service_endpoint,\n                              MetricsAdvisorKeyCredential(subscription_key, api_key))\n\nchange_threshold_condition = ChangeThresholdCondition(\n    anomaly_detector_direction=\"Both\",\n    change_percentage=20,\n    shift_point=10,\n    within_range=True,\n    suppress_condition=SuppressCondition(\n        min_number=5,\n        min_ratio=2\n    )\n)\nhard_threshold_condition = HardThresholdCondition(\n    anomaly_detector_direction=\"Up\",\n    upper_bound=100,\n    suppress_condition=SuppressCondition(\n        min_number=2,\n        min_ratio=2\n    )\n)\nsmart_detection_condition = SmartDetectionCondition(\n    anomaly_detector_direction=\"Up\",\n    sensitivity=10,\n    suppress_condition=SuppressCondition(\n        min_number=2,\n        min_ratio=2\n    )\n)\n\ndetection_config = client.create_detection_configuration(\n    name=\"my_detection_config\",\n    metric_id=metric_id,\n    description=\"anomaly detection config for metric\",\n    whole_series_detection_condition=MetricDetectionCondition(\n        condition_operator=\"OR\",\n        change_threshold_condition=change_threshold_condition,\n        hard_threshold_condition=hard_threshold_condition,\n        smart_detection_condition=smart_detection_condition\n    )\n)\n\nreturn detection_config\n```\n\n<!-- END SNIPPET -->\n\n### Configure alert configuration\n\nThen let's configure in which conditions an alert needs to be triggered.\n\n<!-- SNIPPET:sample_alert_configuration.create_alert_config -->\n\n```python\nfrom azure.ai.metricsadvisor import MetricsAdvisorKeyCredential, MetricsAdvisorAdministrationClient\nfrom azure.ai.metricsadvisor.models import (\n    MetricAlertConfiguration,\n    MetricAnomalyAlertScope,\n    TopNGroupScope,\n    MetricAnomalyAlertConditions,\n    SeverityCondition,\n    MetricBoundaryCondition,\n    MetricAnomalyAlertSnoozeCondition,\n)\nservice_endpoint = os.getenv(\"METRICS_ADVISOR_ENDPOINT\")\nsubscription_key = os.getenv(\"METRICS_ADVISOR_SUBSCRIPTION_KEY\")\napi_key = os.getenv(\"METRICS_ADVISOR_API_KEY\")\ndetection_configuration_id = os.getenv(\"METRICS_ADVISOR_DETECTION_CONFIGURATION_ID\")\nhook_id = os.getenv(\"METRICS_ADVISOR_HOOK_ID\")\n\nclient = MetricsAdvisorAdministrationClient(service_endpoint,\n                              MetricsAdvisorKeyCredential(subscription_key, api_key))\n\nalert_config = client.create_alert_configuration(\n    name=\"my alert config\",\n    description=\"alert config description\",\n    cross_metrics_operator=\"AND\",\n    metric_alert_configurations=[\n        MetricAlertConfiguration(\n            detection_configuration_id=detection_configuration_id,\n            alert_scope=MetricAnomalyAlertScope(\n                scope_type=\"WholeSeries\"\n            ),\n            alert_conditions=MetricAnomalyAlertConditions(\n                severity_condition=SeverityCondition(\n                    min_alert_severity=\"Low\",\n                    max_alert_severity=\"High\"\n                )\n            )\n        ),\n        MetricAlertConfiguration(\n            detection_configuration_id=detection_configuration_id,\n            alert_scope=MetricAnomalyAlertScope(\n                scope_type=\"TopN\",\n                top_n_group_in_scope=TopNGroupScope(\n                    top=10,\n                    period=5,\n                    min_top_count=5\n                )\n            ),\n            alert_conditions=MetricAnomalyAlertConditions(\n                metric_boundary_condition=MetricBoundaryCondition(\n                    direction=\"Up\",\n                    upper=50\n                )\n            ),\n            alert_snooze_condition=MetricAnomalyAlertSnoozeCondition(\n                auto_snooze=2,\n                snooze_scope=\"Metric\",\n                only_for_successive=True\n            )\n        ),\n    ],\n    hook_ids=[hook_id]\n)\n\nreturn alert_config\n```\n\n<!-- END SNIPPET -->\n\n### Query anomaly detection results\n\nWe can query the alerts and anomalies.\n\n<!-- SNIPPET:sample_alert_configuration.list_alerts -->\n\n```python\nimport datetime\nfrom azure.ai.metricsadvisor import MetricsAdvisorKeyCredential, MetricsAdvisorClient\n\nservice_endpoint = os.getenv(\"METRICS_ADVISOR_ENDPOINT\")\nsubscription_key = os.getenv(\"METRICS_ADVISOR_SUBSCRIPTION_KEY\")\napi_key = os.getenv(\"METRICS_ADVISOR_API_KEY\")\n\nclient = MetricsAdvisorClient(service_endpoint,\n                              MetricsAdvisorKeyCredential(subscription_key, api_key))\n\nresults = client.list_alerts(\n    alert_configuration_id=alert_config_id,\n    start_time=datetime.datetime(2021, 1, 1),\n    end_time=datetime.datetime(2021, 9, 9),\n    time_mode=\"AnomalyTime\",\n)\n\ntolist = []\nfor result in results:\n    tolist.append(result)\n    print(\"Alert id: {}\".format(result.id))\n    print(\"Create time: {}\".format(result.created_time))\nreturn tolist\n```\n\n<!-- END SNIPPET -->\n\n<!-- SNIPPET:sample_alert_configuration.list_anomalies_for_alert -->\n\n```python\nfrom azure.ai.metricsadvisor import MetricsAdvisorKeyCredential, MetricsAdvisorClient\n\nservice_endpoint = os.getenv(\"METRICS_ADVISOR_ENDPOINT\")\nsubscription_key = os.getenv(\"METRICS_ADVISOR_SUBSCRIPTION_KEY\")\napi_key = os.getenv(\"METRICS_ADVISOR_API_KEY\")\n\nclient = MetricsAdvisorClient(service_endpoint,\n                              MetricsAdvisorKeyCredential(subscription_key, api_key))\n\nresults = client.list_anomalies(\n        alert_configuration_id=alert_config_id,\n        alert_id=alert_id,\n    )\nfor result in results:\n    print(\"Create time: {}\".format(result.created_time))\n    print(\"Severity: {}\".format(result.severity))\n    print(\"Status: {}\".format(result.status))\n```\n\n<!-- END SNIPPET -->\n\n### Query incidents\n\nWe can query the incidents for a detection configuration.\n\n<!-- SNIPPET:sample_incidents.list_incidents_for_detection_configuration -->\n\n```python\nimport datetime\nfrom azure.ai.metricsadvisor import MetricsAdvisorKeyCredential, MetricsAdvisorClient\n\nservice_endpoint = os.getenv(\"METRICS_ADVISOR_ENDPOINT\")\nsubscription_key = os.getenv(\"METRICS_ADVISOR_SUBSCRIPTION_KEY\")\napi_key = os.getenv(\"METRICS_ADVISOR_API_KEY\")\ndetection_configuration_id = os.getenv(\"METRICS_ADVISOR_DETECTION_CONFIGURATION_ID\")\n\nclient = MetricsAdvisorClient(service_endpoint,\n                              MetricsAdvisorKeyCredential(subscription_key, api_key))\nresults = client.list_incidents(\n    detection_configuration_id=detection_configuration_id,\n    start_time=datetime.datetime(2021, 1, 1),\n    end_time=datetime.datetime(2021, 9, 9),\n)\nfor result in results:\n    print(\"Metric id: {}\".format(result.metric_id))\n    print(\"Incident ID: {}\".format(result.id))\n    print(\"Severity: {}\".format(result.severity))\n    print(\"Status: {}\".format(result.status))\n```\n\n<!-- END SNIPPET -->\n\n### Query root causes\n\nWe can also query the root causes of an incident\n\n<!-- SNIPPET:sample_incidents.list_incident_root_cause -->\n\n```python\nfrom azure.ai.metricsadvisor import MetricsAdvisorKeyCredential, MetricsAdvisorClient\n\nservice_endpoint = os.getenv(\"METRICS_ADVISOR_ENDPOINT\")\nsubscription_key = os.getenv(\"METRICS_ADVISOR_SUBSCRIPTION_KEY\")\napi_key = os.getenv(\"METRICS_ADVISOR_API_KEY\")\ndetection_configuration_id = os.getenv(\"METRICS_ADVISOR_DETECTION_CONFIGURATION_ID\")\nincident_id = os.getenv(\"METRICS_ADVISOR_INCIDENT_ID\")\n\nclient = MetricsAdvisorClient(service_endpoint,\n                              MetricsAdvisorKeyCredential(subscription_key, api_key))\nresults = client.list_incident_root_causes(\n    detection_configuration_id=detection_configuration_id,\n    incident_id=incident_id,\n)\nfor result in results:\n    print(\"Score: {}\".format(result.score))\n    print(\"Description: {}\".format(result.description))\n```\n\n<!-- END SNIPPET -->\n\n### Add hooks for receiving anomaly alerts\n\nWe can add some hooks so when an alert is triggered, we can get call back.\n\n<!-- SNIPPET:sample_hooks.create_hook -->\n\n```python\nfrom azure.ai.metricsadvisor import MetricsAdvisorKeyCredential, MetricsAdvisorAdministrationClient\nfrom azure.ai.metricsadvisor.models import EmailNotificationHook\n\nservice_endpoint = os.getenv(\"METRICS_ADVISOR_ENDPOINT\")\nsubscription_key = os.getenv(\"METRICS_ADVISOR_SUBSCRIPTION_KEY\")\napi_key = os.getenv(\"METRICS_ADVISOR_API_KEY\")\n\nclient = MetricsAdvisorAdministrationClient(service_endpoint,\n                              MetricsAdvisorKeyCredential(subscription_key, api_key))\n\nhook = client.create_hook(\n    hook=EmailNotificationHook(\n        name=\"email hook\",\n        description=\"my email hook\",\n        emails_to_alert=[\"alertme@alertme.com\"],\n        external_link=\"https://docs.microsoft.com/en-us/azure/cognitive-services/metrics-advisor/how-tos/alerts\"\n    )\n)\n\nreturn hook\n```\n\n<!-- END SNIPPET -->\n\n### Async APIs\n\nThis library includes a complete set of async APIs. To use them, you must\nfirst install an async transport, such as [aiohttp](https://pypi.org/project/aiohttp/).\nSee\n[azure-core documentation][azure_core_docs]\nfor more information.\n\n<!-- SNIPPET:sample_authentication_async.authentication_client_with_metrics_advisor_credential_async -->\n\n```python\nfrom azure.ai.metricsadvisor import MetricsAdvisorKeyCredential\nfrom azure.ai.metricsadvisor.aio import MetricsAdvisorClient\n\nservice_endpoint = os.getenv(\"METRICS_ADVISOR_ENDPOINT\")\nsubscription_key = os.getenv(\"METRICS_ADVISOR_SUBSCRIPTION_KEY\")\napi_key = os.getenv(\"METRICS_ADVISOR_API_KEY\")\n\nclient = MetricsAdvisorClient(service_endpoint,\n                              MetricsAdvisorKeyCredential(subscription_key, api_key))\n```\n\n<!-- END SNIPPET -->\n\n<!-- SNIPPET:sample_authentication_async.administration_client_with_metrics_advisor_credential_async -->\n\n```python\nfrom azure.ai.metricsadvisor import MetricsAdvisorKeyCredential\nfrom azure.ai.metricsadvisor.aio import MetricsAdvisorAdministrationClient\n\nservice_endpoint = os.getenv(\"METRICS_ADVISOR_ENDPOINT\")\nsubscription_key = os.getenv(\"METRICS_ADVISOR_SUBSCRIPTION_KEY\")\napi_key = os.getenv(\"METRICS_ADVISOR_API_KEY\")\n\nclient = MetricsAdvisorAdministrationClient(service_endpoint,\n                              MetricsAdvisorKeyCredential(subscription_key, api_key))\n```\n\n<!-- END SNIPPET -->\n\n## Troubleshooting\n\n### General\n\nThe Azure Metrics Advisor clients will raise exceptions defined in [Azure Core][azure_core].\n\n### Logging\nThis library uses the standard\n[logging][python_logging] library for logging.\n\nBasic information about HTTP sessions (URLs, headers, etc.) is logged at `INFO` level.\n\nDetailed `DEBUG` level logging, including request/response bodies and **unredacted**\nheaders, can be enabled on the client or per-operation with the `logging_enable` keyword argument.\n\nSee full SDK logging documentation with examples [here][sdk_logging_docs].\n\n## Next steps\n\n### More sample code\n\n For more details see the [samples README][samples_readme].\n\n## Contributing\n\nThis project welcomes contributions and suggestions.  Most contributions require\nyou to agree to a Contributor License Agreement (CLA) declaring that you have\nthe right to, and actually do, grant us the rights to use your contribution. For\ndetails, visit [cla.microsoft.com][cla].\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct].\nFor more information see the [Code of Conduct FAQ][coc_faq]\nor contact [opencode@microsoft.com][coc_contact] with any\nadditional questions or comments.\n\n<!-- LINKS -->\n[src_code]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/metricsadvisor/azure-ai-metricsadvisor\n[reference_documentation]: https://aka.ms/azsdk/python/metricsadvisor/docs\n[ma_docs]: https://learn.microsoft.com/azure/applied-ai-services/metrics-advisor/overview\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[package]: https://aka.ms/azsdk/python/metricsadvisor/pypi\n[ma_service]: https://go.microsoft.com/fwlink/?linkid=2142156\n[python_logging]: https://docs.python.org/3.5/library/logging.html\n[azure_core]: https://aka.ms/azsdk/python/core/docs#module-azure.core.exceptions\n[azure_core_docs]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/README.md#transport\n[sdk_logging_docs]: https://docs.microsoft.com/azure/developer/python/sdk/azure-sdk-logging\n[samples_readme]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/metricsadvisor/azure-ai-metricsadvisor/samples/README.md\n\n[cla]: https://cla.microsoft.com\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n",
        "repo_name": "metricsadvisor/azure-ai-metricsadvisor",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/metricsadvisor/azure-ai-metricsadvisor",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Mixed Reality Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/)\nCode samples for this package can be found at [Mixed Reality Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-mixedreality%2FREADME.png)\n",
        "repo_name": "mixedreality/azure-mgmt-mixedreality",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/mixedreality/azure-mgmt-mixedreality",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "[![Build Status](https://dev.azure.com/azure-sdk/public/_apis/build/status/azure-sdk-for-python.client?branchName=master)](https://dev.azure.com/azure-sdk/public/_build/latest?definitionId=46?branchName=master)\n\n# Azure Mixed Reality Authentication Package client library for Python\n\nMixed Reality services, like Azure Spatial Anchors, Azure Remote Rendering, and others, use the Mixed Reality security\ntoken service (STS) for authentication. This package supports exchanging Mixed Reality account credentials for an access\ntoken from the STS that can be used to access Mixed Reality services.\n\n![Mixed Reality service authentication diagram](https://docs.microsoft.com/azure/spatial-anchors/concepts/media/spatial-anchors-authentication-overview.png)\n\n# Getting started\n\n## Currently supported environments\n\nThis package has been tested with Python 3.7+.\n\n## Prerequisites\n\n- An [Azure subscription][azure_sub].\n- You must have an account with an [Azure Mixed Reality service](https://azure.microsoft.com/topic/mixed-reality/):\n  - [Azure Remote Rendering](https://docs.microsoft.com/azure/remote-rendering/)\n  - [Azure Spatial Anchors](https://docs.microsoft.com/azure/spatial-anchors/)\n- Familiarity with the authentication and credential concepts from the [Azure Identity library][azure_identity].\n- Python 3.7 or later is required to use this package.\n\n## Install the package\n\nInstall the Azure Mixed Reality Authentication SDK.\n\n```bash\npip install --pre azure-mixedreality-authentication\n```\n\n## Create and authenticate a `MixedRealityStsClient`\n\nTo create a client object to request an access token for a Mixed Reality service, you will need the `account identifier`\nand `account domain` of your Mixed Reality service resource and a `credential`.\n\nMixed Reality services support a few different forms of authentication:\n\n- Account Key authentication\n  - Account keys enable you to get started quickly with using Mixed Reality services. But before you deploy your application\n    to production, we recommend that you update your app to use Azure AD authentication.\n- Azure Active Directory (AD) token authentication\n  - If you're building an enterprise application and your company is using Azure AD as its identity system, you can use\n    user-based Azure AD authentication in your app. You then grant access to your Mixed Reality accounts by using your\n    existing Azure AD security groups. You can also grant access directly to users in your organization.\n  - Otherwise, we recommend that you obtain Azure AD tokens from a web service that supports your app. We recommend this\n    method for production applications because it allows you to avoid embedding the credentials for access to a Mixed\n    Reality service in your client application.\n\nSee [here][register_aad_app] for detailed instructions and information.\n\n### Using account key authentication\n\nUse the [Azure Portal][azure_portal] to browse to your Mixed Reality service resource and retrieve an `account key`.\n\nOnce you have an account key, you can use the `AzureKeyCredential` class to authenticate the client as follows:\n\n```python\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.mixedreality.authentication import MixedRealityStsClient\n\naccount_id = \"<ACCOUNT_ID>\"\naccount_domain = \"<ACCOUNT_DOMAIN>\"\naccount_key = \"<ACCOUNT_KEY>\"\nkey_credential = AzureKeyCredential(account_key)\n\nclient = MixedRealityStsClient(account_id, account_domain, key_credential)\n```\n\n> Note: Account key authentication is **not recommended** for production applications.\n\n### Using an Azure Active Directory Credential\n\nAccount key authentication is used in most of the examples, but you can also authenticate with Azure Active Directory\nusing the [Azure Identity library][azure_identity]. This is the recommended method for production applications. To use\nthe [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with\nthe Azure SDK, please install the `@azure/identity` package:\n\nYou will also need to [register a new AAD application][register_aad_app] and grant access to your Mixed Reality resource\nby assigning the appropriate role for your Mixed Reality service to your service principal.\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mixedreality.authentication import MixedRealityStsClient\n\naccount_id = \"<ACCOUNT_ID>\"\naccount_domain = \"<ACCOUNT_DOMAIN>\"\ndefault_credential = DefaultAzureCredential()\n\nclient = MixedRealityStsClient(account_id, account_domain, default_credential)\n```\n\n# Key concepts\n\n## MixedRealityStsClient\n\nThe `MixedRealityStsClient` is the client library used to access the Mixed Reality STS to get an access token. An access\ntoken can be retrieved by calling `get_token()` on an `MixedRealityStsClient` instance.\n\nTokens obtained from the Mixed Reality STS have a lifetime of **24 hours**.\n\n### Token result value\n\nThe return value for a successful call to `get_token` is an `azure.core.credentials.AccessToken`.\n\nSee the authentication examples [above](#authenticate-the-client) or [Azure Identity][azure_identity] for more complex\nauthentication scenarios.\n\n## Retrieve an access token synchronously\n\n```python\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.mixedreality.authentication import MixedRealityStsClient\n\naccount_id = \"<ACCOUNT_ID>\"\naccount_domain = \"<ACCOUNT_DOMAIN>\"\naccount_key = \"<ACCOUNT_KEY>\"\nkey_credential = AzureKeyCredential(account_key)\n\nclient = MixedRealityStsClient(account_id, account_domain, key_credential)\n\ntoken = client.get_token()\n```\n\n## Retrieve an access token asynchronously\n\n```python\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.mixedreality.authentication.aio import MixedRealityStsClient\n\naccount_id = \"<ACCOUNT_ID>\"\naccount_domain = \"<ACCOUNT_DOMAIN>\"\naccount_key = \"<ACCOUNT_KEY>\"\nkey_credential = AzureKeyCredential(account_key)\n\nclient = MixedRealityStsClient(account_id, account_domain, key_credential)\n\ntoken = await client.get_token()\n```\n\n# Examples\n\nThese are code samples that show common scenario operations with the Azure Mixed Reality Authentication client library.\nThe async versions of the samples (the python sample files appended with `_async`) show asynchronous operations,\nand require Python 3.5 or later.\nBefore running the sample code, refer to Prerequisites\n<!-- [Prerequisites](#Prerequisites) -->\nto create a resource, then set some Environment Variables\n\n```bash\nset MIXEDREALITY_ACCOUNT_DOMAIN=\"<the Mixed Reality account domain>\"\nset MIXEDREALITY_ACCOUNT_ID=\"<the Mixed Reality account identifier>\"\nset MIXEDREALITY_ACCOUNT_KEY=\"<the Mixed Reality account primary or secondary key>\"\n\npip install azure-mixedreality-authentication\n\npython samples\\client_sample.py\npython samples\\client_sample_async.py\n```\n\n# Troubleshooting\n\nThe [troubleshooting](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity#troubleshooting)\nsection for Azure Identity can be helpful when troubleshooting authentication issues.\n\n# Next steps\n\n## Mixed Reality client libraries\n\n- Coming soon\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a\nContributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us\nthe rights to use your contribution. For details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide\na CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions\nprovided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or\ncontact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\nIf you'd like to contribute to this library, please read the\n[contributing guide](https://github.com/Azure/azure-sdk-for-python/blob/main/CONTRIBUTING.md) to learn more about how to\nbuild and test the code.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fsdk%2Ftemplate%2Fazure-template%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity\n[register_aad_app]: https://docs.microsoft.com/azure/spatial-anchors/concepts/authentication\n[defaultazurecredential]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity#defaultazurecredential\n",
        "repo_name": "mixedreality/azure-mixedreality-authentication",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/mixedreality/azure-mixedreality-authentication",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Azure ML Package client library for Python\n\nWe are excited to introduce the GA of Azure Machine Learning Python SDK v2. The Python SDK v2 introduces new SDK capabilities like standalone local jobs, reusable components for pipelines and managed online/batch inferencing. Python SDK v2 allows you to move from simple to complex tasks easily and incrementally. This is enabled by using a common object model which brings concept reuse and consistency of actions across various tasks. The SDK v2 shares its foundation with the CLI v2 which is also GA.\n\n[Source code][source_code]\n| [Package (PyPI)][ml_pypi]\n| [Package (Conda)](https://anaconda.org/microsoft/azure-ai-ml/)\n| [API reference documentation][ml_ref_docs]\n| [Product documentation][product_documentation]\n| [Samples][ml_samples]\n\n\nThis package has been tested with Python 3.7, 3.8, 3.9 and 3.10.\n\nFor a more complete set of Azure libraries, see https://aka.ms/azsdk/python/all\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7 or later is required to use this package.\n- You must have an [Azure subscription][azure_subscription].\n- An [Azure Machine Learning Workspace][workspace].\n\n### Install the package\n\nInstall the Azure ML client library for Python with [pip][pip_link]:\n\n```bash\npip install azure-ai-ml\npip install azure-identity\n```\n\n### Authenticate the client\n\n```python\nfrom azure.ai.ml import MLClient\nfrom azure.identity import DefaultAzureCredential\n\nml_client = MLClient(\n    DefaultAzureCredential(), subscription_id, resource_group, workspace\n)\n```\n\n## Key concepts\n\nAzure Machine Learning Python SDK v2 comes with many new features like standalone local jobs, reusable components for pipelines and managed online/batch inferencing. The SDK v2 brings consistency and ease of use across all assets of the platform. The Python SDK v2 offers the following capabilities:\n* Run **Standalone Jobs** - run a discrete ML activity as Job. This job can be run locally or on the cloud. We currently support the following types of jobs:\n  * Command - run a command (Python, R, Windows Command, Linux Shell etc.)\n  * Sweep - run a hyperparameter sweep on your Command\n* Run multiple jobs using our **improved Pipelines**\n  * Run a series of commands stitched into a pipeline (**New**)\n  * **Components** - run pipelines using reusable components (**New**)\n* Use your models for **Managed Online inferencing** (**New**)\n* Use your models for Managed **batch inferencing**\n* Manage AML resources \u2013 workspace, compute, datastores\n* Manage AML assets - Datasets, environments, models\n* **AutoML** - run standalone AutoML training for various ml-tasks:\n  - Classification (Tabular data)\n  - Regression (Tabular data)\n  - Time Series Forecasting (Tabular data)\n  - Image Classification (Multi-class) (**New**)\n  - Image Classification (Multi-label) (**New**)\n  - Image Object Detection (**New**)\n  - Image Instance Segmentation (**New**)\n  - NLP Text Classification (Multi-class) (**New**)\n  - NLP Text Classification (Multi-label) (**New**)\n  - NLP Text Named Entity Recognition (NER) (**New**)\n\n## Examples\n\n- View our [samples][ml_samples].\n\n## Troubleshooting\n\n### General\n\nAzure ML clients raise exceptions defined in [Azure Core][azure_core_readme].\n\n```python\nfrom azure.core.exceptions import HttpResponseError\n\ntry:\n    ml_client.compute.get(\"cpu-cluster\")\nexcept HttpResponseError as error:\n    print(\"Request failed: {}\".format(error.message))\n```\n\n### Logging\n\nThis library uses the standard\n[logging][python_logging] library for logging.\nBasic information about HTTP sessions (URLs, headers, etc.) is logged at INFO\nlevel.\n\nDetailed DEBUG level logging, including request/response bodies and unredacted\nheaders, can be enabled on a client with the `logging_enable` argument.\n\nSee full SDK logging documentation with examples [here][sdk_logging_docs].\n\n### Telemetry\n\nThe Azure ML Python SDK includes a telemetry feature that collects usage and failure data about the SDK and sends it to Microsoft when you use the SDK in a Jupyter Notebook only.\n<u>Telemetry will **not** be collected for any use of the Python SDK outside of a Jupyter Notebook.</u>\n\nTelemetry data helps the SDK team understand how the SDK is used so it can be improved and the information about failures helps the team resolve problems and fix bugs.\nThe SDK telemetry feature is enabled by default for Jupyter Notebook usage and cannot be enabled for non-Jupyter scenarios. To opt out of the telemetry feature in a Jupyter scenario, pass in `enable_telemetry=False` when constructing your MLClient object.\n\n## Next steps\n\n- View our [samples][ml_samples].\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [cla.microsoft.com][cla].\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n\n[source_code]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/ml/azure-ai-ml\n[ml_pypi]: https://pypi.org/project/azure-ai-ml/\n[ml_ref_docs]: https://learn.microsoft.com/python/api/overview/azure/ai-ml-readme?view=azure-python\n[ml_samples]: https://github.com/Azure/azureml-examples/tree/main/sdk/python\n[product_documentation]: https://docs.microsoft.com/azure/machine-learning/\n[azure_subscription]: https://azure.microsoft.com/free/\n[workspace]: https://docs.microsoft.com/azure/machine-learning/concept-workspace\n[python_logging]: https://docs.python.org/3/library/logging.html\n[sdk_logging_docs]: https://docs.microsoft.com/azure/developer/python/azure-sdk-logging\n[azure_core_readme]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/README.md\n[pip_link]: https://pypi.org/project/pip/\n[azure_core_ref_docs]: https://aka.ms/azsdk-python-core-policies\n[azure_core]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/README.md\n[azure_identity]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity\n[python_logging]: https://docs.python.org/3/library/logging.html\n[cla]: https://cla.microsoft.com\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n",
        "repo_name": "ml/azure-ai-ml",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/ml/azure-ai-ml",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Mobilenetwork Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-mobilenetwork\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.mobilenetwork import MobileNetworkManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = MobileNetworkManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\n\nCode samples for this package can be found at [Mobilenetwork Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com and [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-mobilenetwork%2FREADME.png)\n",
        "repo_name": "mobilenetwork/azure-mgmt-mobilenetwork",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/mobilenetwork/azure-mgmt-mobilenetwork",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Azure IoT Models Repository client library for Python\n\nThe Azure IoT Models Repository Library for Python provides functionality for working with the Azure IoT Models Repository\n\n## Getting started\n\n### Install package\n\nInstall the Azure IoT Models Repository library for Python with [pip][pip]:\n\n```Shell\npip install azure-iot-modelsrepository\n```\n\n### Prerequisites\n* A models repository following [Azure IoT conventions][repo_conventions]\n    * The models repository can be hosted on the local filesystem or hosted on a webserver\n    * Azure IoT hosts the global [Azure IoT Models Repository][global_azure_repo] which the client will use if no custom location is provided\n\n### Publishing Models\nFollow the [guide](https://docs.microsoft.com/azure/iot-pnp/concepts-model-repository#publish-a-model) to publish models to the global Azure IoT Models Repository.\n\nIf using a custom local or remote repository, you can simply add your model files to a directory structure in the repository location, e.g. `dtmi/com/example/thermostat-1.json`\n\n### Authentication\nCurrently, no authentication mechanisms are supported. The global endpoint is not tied to an Azure subscription and does not support authentication. All models published are meant for anonymous public consumption.\n\n## Key concepts\n\nThe Azure IoT Models Repository enables builders to manage and share digital twin models. The models are [JSON-LD][json_ld] documents defined using the Digital Twins Definition Language ([DTDL][dtdl_spec]).\n\nThe repository defines a pattern to store DTDL interfaces in a directory structure based on the Digital Twin Model Identifier (DTMI). You can locate an interface in the repository by converting the DTMI to a relative path. For example, the DTMI `dtmi:com:example:Thermostat;1` translates to `/dtmi/com/example/thermostat-1.json`.\n\n## Examples\nThe following sections provide several snippets covering common Models Repository tasks:\n* [Initializing the ModelsRepositoryClient](#initializing-the-modelsrepositoryclient \"Initializing the ModelsRepositoryClient\")\n* [Get Models](#modelsrepositoryclient---get-models \"Get models\")\n* [DTMI Conventions](#dtmi-conventions \"DTMI Conventions\")\n\n### Initializing the ModelsRepositoryClient\n\n#### Repository Location\nWhen no repository location is provided during instantiation, the Azure IoT Models Repository global endpoint (https://devicemodels.azure.com/) is used\n\n```python\nclient = ModelsRepositoryClient()\n```\n\nAlternatively, you can provide a custom location for where your repository is located via the optional `repository_location` keyword. The client accepts the following location formats:\n* Web URL - e.g. `\"https://contoso.com/models/\"`\n* Local Filesystem URI - e.g. `\"file:///path/to/repository/\"`\n* POSIX filepath - e.g. `\"/path/to/repository/\"`\n* Drive letter filepath - e.g. `\"C:/path/to/repository/\"`\n```python\nclient = ModelsRepositoryClient(repository_location=\"https://contoso.com/models/\")\n```\n\n#### Dependency Resolution Mode\nThe client can be configured with an optional `dependency_resolution` mode at instantiation, using one of the following values:\n* `'disabled'` - The client will not resolve model dependencies\n* `'enabled'` - The client will resolve any model dependencies\n* `'tryFromExpanded'` - The client will attempt to resolve models using an expanded model definition (falling back on `'enabled'` mode if not possible)\n\n```python\nclient = ModelsRepositoryClient(dependency_resolution=\"enabled\")\n```\n\nIf the `dependency_resolution` mode is not specified:\n* Clients configured for the Azure IoT Models Repository global endpoint will default to using `'tryFromExpanded'`\n* Clients configured for a custom location (remote or local) will default to using `'enabled'`\n\n#### Additional Options\nIf you need to override default pipeline behavior from the [azure-core library][azure_core_docs], you can provide various [keyword arguments][azure_core_kwargs] during instantiation.\n\n#### Client cleanup\nWhen you are finished with your client, make sure to call `.close()` in order to free up resources\n\n```python\nclient = ModelsRepositoryClient()\n# Do things\nclient.close()\n```\n\nIn order to avoid having to do this, it is recommended that you use your client from within a context manager whenever possible, which will automatically close for you\n```python\nwith ModelsRepositoryClient() as client:\n    # Do things\n```\n\n### ModelsRepositoryClient - Get Models\nNote that you must first [publish models to your repository](#publishing-models \"Publishing models\") before you can fetch them. The following examples assume you are using the global Azure IoT Models Repository.\n\nCalling `.get_models()` will fetch the model at the provided DTMI and potentially its dependencies (depending on the dependency resolution mode). It will return a `dict` that maps DTMIs to model definitions.\n\n```python\ndtmi = \"dtmi:com:example:TemperatureController;1\"\nwith ModelsRepositoryClient() as client:\n    models = get_models(dtmi)\nprint(\"{} resolved in {} interfaces\".format(dtmi, len(models)))\n```\n\nIf you provide multiple DTMIs to the method, you can retrieve multiple models (and potentially their dependencies) at once\n```python\ndtmis = [\"dtmi:com:example:TemperatureController;1\", \"dtmi:com:example:azuresphere:sampledevice;1\"]\nwith ModelsRepositoryClient() as client:\n    models = get_models(dtmis)\nprint(\"{} resolved in {} interfaces\".format(dtmi, len(models)))\n```\n\nBy default the client will use whichever [dependency resolution mode](#dependency-resolution-mode \"Dependency resolution mode\") it was configured with at instantiation when retrieving models. However, this behavior can be overridden by passing any of the valid options in as an optional keyword argument to `.get_models()`\n\n```python\ndtmi = \"dtmi:com:example:TemperatureController;1\"\nwith ModelsRepositoryClient(dependency_resolution=\"disabled\") as client:\n    models = get_models(dtmi, dependency_resolution=\"enabled\")\n```\n\n### DTMI Conventions\nThe package contains a module called `dtmi_conventions`, which, when imported provides a series of utility operations for working with DTMIs\n\n```python\n# Returns True - this is a valid DTMI\ndtmi_conventions.is_valid_dtmi(\"dtmi:com:example:Thermostat;1\")\n\n# Returns False - this is NOT a valid DTMI\ndtmi_conventions.is_valid_dtmi(\"dtmi:com:example:Thermostat\")\n```\n\n```python\ndtmi = \"dtmi:com:example:Thermostat;1\"\n\n# Local repository example\nrepo_uri = \"file:///path/to/repository\"\nprint(dtmi_conventions.get_model_uri(dtmi, repo_uri))\n# Prints: \"file:///path/to/repository/dtmi/com/example/thermostat-1.json\"\nprint(dtmi_conventions.get_model_uri(dtmi, repo_uri, expanded=True))\n# Prints: \"file:///path/to/repository/dtmi/com/example/thermostat-1.expanded.json\"\n\n# Remote repository example\nrepo_uri = \"https://contoso.com/models/\"\nprint(dtmi_conventions.get_model_uri(dtmi, repo_uri))\n# Prints: \"https://contoso/com/models/dtmi/com/example/thermostat-1.json\"\nprint(dtmi_conventions.get_model_uri(dtmi, repo_uri, expanded=True))\n# Prints: \"https://contoso/com/models/dtmi/com/example/thermostat-1.expanded.json\"\n```\n\n\n## Troubleshooting\n\n### Logging\nThis library uses the standard [logging][logging_doc] library for logging. Information about HTTP sessions (URLs, headers, etc.) is logged at `DEBUG` level.\n\n### Exceptions\nModels Repository APIs may raise exceptions defined in [azure-core][azure_core_exceptions].\n\nAdditionally, they may raise exceptions defined in the `azure-iot-modelsrepository`:\n* `ModelError` - Indicates an error occurred while trying to parse/resolve a model definition. This generally means that there is a malformed model that does not comply with the [model DTDL specification][dtdl_spec]\n\n### Provide Feedback\nIf you encounter bugs or have suggestions, please\n[open an issue](https://github.com/Azure/azure-sdk-for-python/issues).\n\n## Next steps\n\n### Samples\nAdditional samples are available in the [samples repository][samples_repo].\n\n### Contributing\nThis project welcomes contributions and suggestions.  Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\n\n<!-- LINKS -->\n[azure_core_docs]: https://azuresdkdocs.blob.core.windows.net/$web/python/azure-core/latest/azure.core.html\n[azure_core_exceptions]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/core/azure-core#azure-core-library-exceptions\n[azure_core_kwargs]: https://aka.ms/azsdk/python/options\n[dtdl_spec]: https://github.com/Azure/opendigitaltwins-dtdl/blob/master/DTDL/v2/dtdlv2.md\n[global_azure_repo]: https://devicemodels.azure.com/\n[json_ld]: https://json-ld.org/\n[logging_doc]: https://docs.python.org/3.5/library/logging.html\n[pip]: https://pypi.org/project/pip/\n[repo_conventions]: https://github.com/Azure/iot-plugandplay-models-tools/wiki\n[samples_repo]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/modelsrepository/azure-iot-modelsrepository/samples/",
        "repo_name": "modelsrepository/azure-iot-modelsrepository",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/modelsrepository/azure-iot-modelsrepository",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Monitor Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-monitor\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.monitor import MonitorManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = MonitorManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\nCode samples for this package can be found at:\n- [Search Monitor](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com\n- [Azure Python Mgmt SDK Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-monitor%2FREADME.png)\n",
        "repo_name": "monitor/azure-mgmt-monitor",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-mgmt-monitor",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Azure Monitor Ingestion client library for Python\n\nThe Azure Monitor Ingestion client library is used to send custom logs to [Azure Monitor][azure_monitor_overview] using the [Logs Ingestion API][ingestion_overview].\n\nThis library allows you to send data from virtually any source to supported built-in tables or to custom tables that you create in Log Analytics workspace. You can even extend the schema of built-in tables with custom columns.\n\n**Resources:**\n\n- [Source code][source]\n- [Package (PyPI)][package]\n- [Package (Conda)](https://anaconda.org/microsoft/azure-monitor-ingestion/)\n- [API reference documentation][python-ingestion-ref-docs]\n- [Service documentation][azure_monitor_overview]\n- [Samples][samples]\n- [Change log][changelog]\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7 or later\n- An [Azure subscription][azure_subscription]\n- An [Azure Log Analytics workspace][azure_monitor_create_using_portal]\n- A [Data Collection Endpoint][data_collection_endpoint]\n- A [Data Collection Rule][data_collection_rule]\n\n### Install the package\n\nInstall the Azure Monitor Ingestion client library for Python with [pip][pip]:\n\n```bash\npip install azure-monitor-ingestion\n```\n\n### Create the client\n\nAn authenticated client is required to upload Logs to Azure Monitor. The library includes both synchronous and asynchronous forms of the clients. To authenticate, create an instance of a token credential. Use that instance when creating a `LogsIngestionClient`. The following examples use `DefaultAzureCredential` from the [azure-identity](https://pypi.org/project/azure-identity/) package.\n\n#### Synchronous clients\n\nConsider the following example, which creates synchronous clients for uploading logs:\n\n```python\nimport os\nfrom azure.identity import DefaultAzureCredential\nfrom azure.monitor.ingestion import LogsIngestionClient\n\nendpoint = os.environ['DATA_COLLECTION_ENDPOINT']\ncredential = DefaultAzureCredential()\nlogs_client = LogsIngestionClient(endpoint, credential)\n```\n\n#### Asynchronous clients\n\nThe asynchronous forms of the client APIs are found in the `.aio`-suffixed namespace. For example:\n\n```python\nimport os\nfrom azure.identity.aio import DefaultAzureCredential\nfrom azure.monitor.ingestion.aio import LogsIngestionClient\n\nendpoint = os.environ['DATA_COLLECTION_ENDPOINT']\ncredential = DefaultAzureCredential()\nlogs_client = LogsIngestionClient(endpoint, credential)\n```\n\n## Key concepts\n\n### Data Collection Endpoint\n\nData Collection Endpoints (DCEs) allow you to uniquely configure ingestion settings for Azure Monitor. [This article][data_collection_endpoint] provides an overview of data collection endpoints including their contents and structure and how you can create and work with them.\n\n### Data Collection Rule\n\nData collection rules (DCR) define data collected by Azure Monitor and specify how and where that data should be sent or stored. The REST API call must specify a DCR to use. A single DCE can support multiple DCRs, so you can specify a different DCR for different sources and target tables.\n\nThe DCR must understand the structure of the input data and the structure of the target table. If the two don't match, it can use a transformation to convert the source data to match the target table. You may also use the transform to filter source data and perform any other calculations or conversions.\n\nFor more information, see [Data collection rules in Azure Monitor][data_collection_rule], and see [this article][data_collection_rule_structure] for details about a DCR's structure. For information on how to retrieve a DCR ID, see [this tutorial][data_collection_rule_tutorial].\n\n### Log Analytics workspace tables\n\nCustom logs can send data to any custom table that you create and to certain built-in tables in your Log Analytics workspace. The target table must exist before you can send data to it. The following built-in tables are currently supported:\n\n- [CommonSecurityLog](https://learn.microsoft.com/azure/azure-monitor/reference/tables/commonsecuritylog)\n- [SecurityEvents](https://learn.microsoft.com/azure/azure-monitor/reference/tables/securityevent)\n- [Syslog](https://learn.microsoft.com/azure/azure-monitor/reference/tables/syslog)\n- [WindowsEvents](https://learn.microsoft.com/azure/azure-monitor/reference/tables/windowsevent)\n\n### Logs retrieval\n\nThe logs that were uploaded using this library can be queried using the [Azure Monitor Query][azure_monitor_query] client library.\n\n## Examples\n\n- [Upload custom logs](#upload-custom-logs)\n- [Upload with custom error handling](#upload-with-custom-error-handling)\n\n### Upload custom logs\n\nThis example shows uploading logs to Azure Monitor.\n\n```python\nimport os\n\nfrom azure.core.exceptions import HttpResponseError\nfrom azure.identity import DefaultAzureCredential\nfrom azure.monitor.ingestion import LogsIngestionClient\n\nendpoint = os.environ['DATA_COLLECTION_ENDPOINT']\ncredential = DefaultAzureCredential()\n\nclient = LogsIngestionClient(endpoint=endpoint, credential=credential, logging_enable=True)\n\nrule_id = os.environ['LOGS_DCR_RULE_ID']\nbody = [\n      {\n        \"Time\": \"2021-12-08T23:51:14.1104269Z\",\n        \"Computer\": \"Computer1\",\n        \"AdditionalContext\": \"context-2\"\n      },\n      {\n        \"Time\": \"2021-12-08T23:51:14.1104269Z\",\n        \"Computer\": \"Computer2\",\n        \"AdditionalContext\": \"context\"\n      }\n    ]\n\ntry:\n    client.upload(rule_id=rule_id, stream_name=os.environ['LOGS_DCR_STREAM_NAME'], logs=body)\nexcept HttpResponseError as e:\n    print(f\"Upload failed: {e}\")\n```\n\n### Upload with custom error handling\n\nTo upload logs with custom error handling, you can pass a callback function to the `on_error` parameter of the `upload` method. The callback function is called for each error that occurs during the upload and should expect one argument that corresponds to an `LogsUploadError` object. This object contains the error encountered and the list of logs that failed to upload.\n\n```python\n# Example 1: Collect all logs that failed to upload.\nfailed_logs = []\ndef on_error(error):\n    print(\"Log chunk failed to upload with error: \", error.error)\n    failed_logs.extend(error.failed_logs)\n\n# Example 2: Ignore all errors.\ndef on_error_pass(error):\n    pass\n\nclient.upload(rule_id=rule_id, stream_name=os.environ['LOGS_DCR_STREAM_NAME'], logs=body, on_error=on_error)\n```\n\n## Troubleshooting\n\nFor details on diagnosing various failure scenarios, see our [troubleshooting guide](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-ingestion/TROUBLESHOOTING.md).\n\n## Next steps\n\nTo learn more about Azure Monitor, see the [Azure Monitor service documentation][azure_monitor_overview].\n\n### Samples\n\nThe following code samples show common scenarios with the Azure Monitor Ingestion client library.\n\n#### Logs Ingestion samples\n\n- [Upload a list of logs][sample_send_small_logs] ([async sample][sample_send_small_logs_async])\n- [Upload a list of logs with custom error handling][sample_custom_error_callback] ([async sample][sample_custom_error_callback_async])\n- [Upload the contents of a file][sample_upload_file_contents] ([async sample][sample_upload_file_contents_async])\n- [Upload data in a pandas DataFrame][sample_upload_pandas_dataframe] ([async sample][sample_upload_pandas_dataframe_async])\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [cla.microsoft.com][cla].\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct]. For more information, see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n\n[azure_core_exceptions]: https://aka.ms/azsdk/python/core/docs#module-azure.core.exceptions\n[azure_core_ref_docs]: https://aka.ms/azsdk/python/core/docs\n[azure_monitor_create_using_portal]: https://learn.microsoft.com/azure/azure-monitor/logs/quick-create-workspace\n[azure_monitor_overview]: https://learn.microsoft.com/azure/azure-monitor/\n[azure_monitor_query]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/monitor/azure-monitor-query#readme\n[azure_subscription]: https://azure.microsoft.com/free/python/\n[changelog]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/monitor/azure-monitor-ingestion/CHANGELOG.md\n[data_collection_endpoint]: https://learn.microsoft.com/azure/azure-monitor/essentials/data-collection-endpoint-overview\n[data_collection_rule]: https://learn.microsoft.com/azure/azure-monitor/essentials/data-collection-rule-overview\n[data_collection_rule_structure]: https://learn.microsoft.com/azure/azure-monitor/essentials/data-collection-rule-structure\n[data_collection_rule_tutorial]: https://learn.microsoft.com/azure/azure-monitor/logs/tutorial-logs-ingestion-portal#collect-information-from-the-dcr\n[ingestion_overview]: https://learn.microsoft.com/azure/azure-monitor/logs/logs-ingestion-api-overview\n[package]: https://aka.ms/azsdk-python-monitor-ingestion-pypi\n[pip]: https://pypi.org/project/pip/\n[python_logging]: https://docs.python.org/3/library/logging.html\n[python-ingestion-ref-docs]: https://aka.ms/azsdk/python/monitor-ingestion/docs\n[samples]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/monitor/azure-monitor-ingestion/samples\n[source]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-ingestion/\n\n[sample_send_small_logs]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-ingestion/samples/sample_send_small_logs.py\n[sample_send_small_logs_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-ingestion/samples/async_samples/sample_send_small_logs_async.py\n[sample_custom_error_callback]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-ingestion/samples/sample_custom_error_callback.py\n[sample_custom_error_callback_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-ingestion/samples/async_samples/sample_custom_error_callback_async.py\n[sample_upload_file_contents]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-ingestion/samples/sample_upload_file_contents.py\n[sample_upload_file_contents_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-ingestion/samples/async_samples/sample_upload_file_contents_async.py\n[sample_upload_pandas_dataframe]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-ingestion/samples/sample_upload_pandas_dataframe.py\n[sample_upload_pandas_dataframe_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-ingestion/samples/async_samples/sample_upload_pandas_dataframe_async.py\n\n[cla]: https://cla.microsoft.com\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n",
        "repo_name": "monitor/azure-monitor-ingestion",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-ingestion",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft OpenTelemetry exporter for Azure Monitor\n\nThe exporter for Azure Monitor allows you to export data utilizing the OpenTelemetry SDK and send telemetry data to Azure Monitor for applications written in Python.\n\n[Source code](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/monitor/azure-monitor-opentelemetry-exporter) | [Package (PyPi)][pypi] | [API reference documentation][api_docs] | [Product documentation][product_docs] | [Samples][exporter_samples] | [Changelog](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-opentelemetry-exporter/CHANGELOG.md)\n\n## Getting started\n\n### Install the package\n\nInstall the Microsoft OpenTelemetry exporter for Azure Monitor with [pip][pip]:\n\n```Bash\npip install azure-monitor-opentelemetry-exporter --pre\n```\n\n### Prerequisites\n\nTo use this package, you must have:\n\n* Azure subscription - [Create a free account][azure_sub]\n* Azure Monitor - [How to use application insights][application_insights_namespace]\n* OpenTelemetry SDK - [OpenTelemetry SDK for Python][ot_sdk_python]\n* Python 3.7 or later - [Install Python][python]\n\n### Instantiate the client\n\nInteraction with Azure monitor exporter starts with an instance of the `AzureMonitorTraceExporter` class for distributed tracing, `AzureMonitorLogExporter` for logging and `AzureMonitorMetricExporter` for metrics. You will need a **connection_string** to instantiate the object.\nPlease find the samples linked below for demonstration as to how to construct the exporter using a connection string.\n\n#### Logging (experimental)\n\nNOTE: The logging signal for the `AzureMonitorLogExporter` is currently in an EXPERIMENTAL state. Possible breaking changes may ensue in the future.\n\n```python\nfrom azure.monitor.opentelemetry.exporter import AzureMonitorLogExporter\nexporter = AzureMonitorLogExporter(\n    connection_string=os.environ[\"APPLICATIONINSIGHTS_CONNECTION_STRING\"]\n)\n```\n\n#### Metrics\n\n```python\nfrom azure.monitor.opentelemetry.exporter import AzureMonitorMetricExporter\nexporter = AzureMonitorMetricExporter(\n    connection_string=os.environ[\"APPLICATIONINSIGHTS_CONNECTION_STRING\"]\n)\n```\n\n#### Tracing\n\n```python\nfrom azure.monitor.opentelemetry.exporter import AzureMonitorTraceExporter\nexporter = AzureMonitorTraceExporter(\n    connection_string=os.environ[\"APPLICATIONINSIGHTS_CONNECTION_STRING\"]\n)\n```\n\nYou can also instantiate the exporter directly via the constructor. In this case, the connection string will be automatically populated from the `APPLICATIONINSIGHTS_CONNECTION_STRING` environment variable.\n\n```python\nfrom azure.monitor.opentelemetry.exporter import AzureMonitorLogExporter\nexporter = AzureMonitorLogExporter()\n```\n\n```python\nfrom azure.monitor.opentelemetry.exporter import AzureMonitorMetricExporter\nexporter = AzureMonitorMetricExporter()\n```\n\n```python\nfrom azure.monitor.opentelemetry.exporter import AzureMonitorTraceExporter\nexporter = AzureMonitorTraceExporter()\n```\n\n## Key concepts\n\nSome of the key concepts for the Azure monitor exporter include:\n\n* [OpenTelemetry][opentelemetry_spec]: OpenTelemetry is a set of libraries used to collect and export telemetry data (metrics, logs, and traces) for analysis in order to understand your software's performance and behavior.\n\n* [Instrumentation][instrumentation_library]: The ability to call the OpenTelemetry API directly by any application is facilitated by instrumentation. A library that enables OpenTelemetry observability for another library is called an instrumentation Library.\n\n* [Log][log_concept]: Log refers to capturing of logging, exception and events.\n\n* [LogRecord][log_record]: Represents a log record emitted from a supported logging library.\n\n* [Logger][logger]: Converts a `LogRecord` into a readable `LogData`, and will be pushed through the SDK to be exported.\n\n* [Logger Provider][logger_provider]: Provides a `Logger` for the given instrumentation library.\n\n* [LogRecordProcessor][log_record_processor]: Interface to hook the log record emitting action.\n\n* [LoggingHandler][logging_handler]: A handler class which writes logging records in OpenTelemetry format from the standard Python `logging` library.\n\n* [AzureMonitorLogExporter][log_reference]: This is the class that is initialized to send logging related telemetry to Azure Monitor.\n\n* [Metric][metric_concept]: `Metric` refers to recording raw measurements with predefined aggregation and sets of attributes for a period in time.\n\n* [Measurement][measurement]: Represents a data point recorded at a point in time.\n\n* [Instrument][instrument]: Instruments are used to report `Measurement`s.\n\n* [Meter][meter]: The `Meter` is responsible for creating `Instruments`.\n\n* [Meter Provider][meter_provider]: Provides a `Meter` for the given instrumentation library.\n\n* [Metric Reader][metric_reader]: An SDK implementation object that provides the common configurable aspects of the OpenTelemetry Metrics SDK such as collection, flushing and shutdown.\n\n* [AzureMonitorMetricExporter][metric_reference]: This is the class that is initialized to send metric related telemetry to Azure Monitor.\n\n* [Trace][trace_concept]: Trace refers to distributed tracing. A distributed trace is a set of events, triggered as a result of a single logical operation, consolidated across various components of an application. In particular, a Trace can be thought of as a directed acyclic graph (DAG) of Spans, where the edges between Spans are defined as parent/child relationship.\n\n* [Span][span]: Represents a single operation within a `Trace`. Can be nested to form a trace tree. Each trace contains a root span, which typically describes the entire operation and, optionally, one ore more sub-spans for its sub-operations.\n\n* [Tracer][tracer]: Responsible for creating `Span`s.\n\n* [Tracer Provider][tracer_provider]: Provides a `Tracer` for use by the given instrumentation library.\n\n* [Span Processor][span_processor]: A span processor allows hooks for SDK's `Span` start and end method invocations. Follow the link for more information.\n\n* [AzureMonitorTraceExporter][trace_reference]: This is the class that is initialized to send tracing related telemetry to Azure Monitor.\n\n* [Sampling][sampler_ref]: Sampling is a mechanism to control the noise and overhead introduced by OpenTelemetry by reducing the number of samples of traces collected and sent to the backend.\n\n* ApplicationInsightsSampler: Application Insights specific sampler used for consistent sampling across Application Insights SDKs and OpenTelemetry-based SDKs sending data to Application Insights. This sampler MUST be used whenever `AzureMonitorTraceExporter` is used.\n\nFor more information about these resources, see [What is Azure Monitor?][product_docs].\n\n## Configuration\n\nAll configuration options can be passed through the constructors of exporters through `kwargs`. Below is a list of configurable options.\n\n* `connection_string`: The connection string used for your Application Insights resource.\n* `disable_offline_storage`: Boolean value to determine whether to disable storing failed telemetry records for retry. Defaults to `False`.\n* `storage_directory`: Storage directory in which to store retry files. Defaults to `<tempfile.gettempdir()>/Microsoft/AzureMonitor/opentelemetry-python-<your-instrumentation-key>`.\n* `credential`: Token credential, such as ManagedIdentityCredential or ClientSecretCredential, used for [Azure Active Directory (AAD) authentication][aad_for_ai_docs]. Defaults to None. See [samples][exporter_samples] for examples.\n\n## Examples\n\n### Logging (experimental)\n\nNOTE: The logging signal for the `AzureMonitorLogExporter` is currently in an EXPERIMENTAL state. Possible breaking changes may ensue in the future.\n\nThe following sections provide several code snippets covering some of the most common tasks, including:\n\n* [Exporting a log record](#export-hello-world-log)\n* [Exporting correlated log record](#export-correlated-log)\n* [Exporting log record with custom properties](#export-custom-properties-log)\n* [Exporting an exceptions log record](#export-exceptions-log)\n\nReview the [OpenTelemetry Logging SDK][ot_logging_sdk] to learn how to use OpenTelemetry components to collect logs.\n\n#### Export Hello World Log\n\n```python\n\"\"\"\nAn example to show an application using Opentelemetry logging sdk. Logging calls to the standard Python\nlogging library are tracked and telemetry is exported to application insights with the AzureMonitorLogExporter.\n\"\"\"\nimport os\nimport logging\n\nfrom opentelemetry.sdk._logs import (\n    LoggerProvider,\n    LoggingHandler,\n    set_logger_provider,\n)\nfrom opentelemetry.sdk._logs.export import BatchLogRecordProcessor\n\nfrom azure.monitor.opentelemetry.exporter import AzureMonitorLogExporter\n\nlogger_provider = LoggerProvider()\nset_logger_provider(logger_provider)\n\nexporter = AzureMonitorLogExporter(\n    connection_string=os.environ[\"APPLICATIONINSIGHTS_CONNECTION_STRING\"]\n)\n\nlogger_provider.add_log_record_processor(BatchLogRecordProcessor(exporter))\nhandler = LoggingHandler()\n\n# Attach LoggingHandler to root logger\nlogging.getLogger().addHandler(handler)\nlogging.getLogger().setLevel(logging.NOTSET)\n\nlogger = logging.getLogger(__name__)\n\nlogger.warning(\"Hello World!\")\n```\n\n#### Export Correlated Log\n\n```python\n\"\"\"\nAn example showing how to include context correlation information in logging telemetry.\n\"\"\"\nimport os\nimport logging\n\nfrom opentelemetry import trace\nfrom opentelemetry.sdk._logs import (\n    LoggerProvider,\n    LoggingHandler,\n    set_logger_provider,\n)\nfrom opentelemetry.sdk._logs.export import BatchLogRecordProcessor\nfrom opentelemetry.sdk.trace import TracerProvider\n\nfrom azure.monitor.opentelemetry.exporter import AzureMonitorLogExporter\n\ntrace.set_tracer_provider(TracerProvider())\ntracer = trace.get_tracer(__name__)\nlogger_provider = LoggerProvider()\nset_logger_provider(logger_provider)\n\nexporter = AzureMonitorLogExporter(\n    connection_string=os.environ[\"APPLICATIONINSIGHTS_CONNECTION_STRING\"]\n)\n\nlogger_provider.add_log_record_processor(BatchLogRecordProcessor(exporter))\nhandler = LoggingHandler()\n\n# Attach LoggingHandler to root logger\nlogging.getLogger().addHandler(handler)\nlogging.getLogger().setLevel(logging.NOTSET)\n\nlogger = logging.getLogger(__name__)\n\nlogger.info(\"INFO: Outside of span\")\nwith tracer.start_as_current_span(\"foo\"):\n    logger.warning(\"WARNING: Inside of span\")\nlogger.error(\"ERROR: After span\")\n```\n\n#### Export Custom Properties Log\n\n```python\n\"\"\"\nAn example showing how to add custom properties to logging telemetry.\n\"\"\"\nimport os\nimport logging\n\nfrom opentelemetry.sdk._logs import (\n    LoggerProvider,\n    LoggingHandler,\n    set_logger_provider,\n)\nfrom opentelemetry.sdk._logs.export import BatchLogRecordProcessor\n\nfrom azure.monitor.opentelemetry.exporter import AzureMonitorLogExporter\n\nlogger_provider = LoggerProvider()\nset_logger_provider(logger_provider)\n\nexporter = AzureMonitorLogExporter(\n    connection_string=os.environ[\"APPLICATIONINSIGHTS_CONNECTION_STRING\"]\n)\n\nlogger_provider.add_log_record_processor(BatchLogRecordProcessor(exporter))\nhandler = LoggingHandler()\n\n# Attach LoggingHandler to root logger\nlogging.getLogger().addHandler(handler)\nlogging.getLogger().setLevel(logging.NOTSET)\n\nlogger = logging.getLogger(__name__)\n\n# Custom properties\nlogger.debug(\"DEBUG: Debug with properties\", extra={\"debug\": \"true\"})\n```\n\n#### Export Exceptions Log\n\n```python\n\"\"\"\nAn example showing how to export exception telemetry using the AzureMonitorLogExporter.\n\"\"\"\nimport os\nimport logging\n\nfrom opentelemetry._logs import (\n    get_logger_provider,\n    set_logger_provider,\n)\nfrom opentelemetry.sdk._logs import (\n    LoggerProvider,\n    LoggingHandler,\n)\nfrom opentelemetry.sdk._logs.export import BatchLogRecordProcessor\n\nfrom azure.monitor.opentelemetry.exporter import AzureMonitorLogExporter\n\nset_logger_provider(LoggerProvider())\nexporter = AzureMonitorLogExporter(\n    connection_string=os.environ[\"APPLICATIONINSIGHTS_CONNECTION_STRING\"]\n)\nget_logger_provider().add_log_record_processor(BatchLogRecordProcessor(exporter))\n\n# Attach LoggingHandler to namespaced logger\nhandler = LoggingHandler()\nlogger = logging.getLogger(__name__)\nlogger.addHandler(handler)\nlogger.setLevel(logging.NOTSET)\n\n# The following code will generate two pieces of exception telemetry\n# that are identical in nature\ntry:\n    val = 1 / 0\n    print(val)\nexcept ZeroDivisionError:\n    logger.exception(\"Error: Division by zero\")\n\ntry:\n    val = 1 / 0\n    print(val)\nexcept ZeroDivisionError:\n    logger.error(\"Error: Division by zero\", stack_info=True, exc_info=True)\n```\n\n### Metrics\n\nThe following sections provide several code snippets covering some of the most common tasks, including:\n\n* [Using different metric instruments](#metric-instrument-usage)\n* [Customizing outputted metrics with views](#metric-custom-views)\n* [Recording instruments with attributes](#metric-record-attributes)\n\nReview the [OpenTelemetry Metrics SDK][ot_metrics_sdk] to learn how to use OpenTelemetry components to collect metrics.\n\n#### Metric instrument usage\n\n```python\n\"\"\"\nAn example to show an application using all instruments in the OpenTelemetry SDK. Metrics created\nand recorded using the sdk are tracked and telemetry is exported to application insights with the\nAzureMonitorMetricsExporter.\n\"\"\"\nimport os\nfrom typing import Iterable\n\nfrom opentelemetry import metrics\nfrom opentelemetry.metrics import CallbackOptions, Observation\nfrom opentelemetry.sdk.metrics import MeterProvider\nfrom opentelemetry.sdk.metrics.export import PeriodicExportingMetricReader\n\nfrom azure.monitor.opentelemetry.exporter import AzureMonitorMetricExporter\n\nexporter = AzureMonitorMetricExporter(\n    connection_string=os.environ[\"APPLICATIONINSIGHTS_CONNECTION_STRING\"]\n)\nreader = PeriodicExportingMetricReader(exporter, export_interval_millis=5000)\nmetrics.set_meter_provider(MeterProvider(metric_readers=[reader]))\n\n# Create a namespaced meter\nmeter = metrics.get_meter_provider().get_meter(\"sample\")\n\n# Callback functions for observable instruments\ndef observable_counter_func(options: CallbackOptions) -> Iterable[Observation]:\n    yield Observation(1, {})\n\n\ndef observable_up_down_counter_func(\n    options: CallbackOptions,\n) -> Iterable[Observation]:\n    yield Observation(-10, {})\n\n\ndef observable_gauge_func(options: CallbackOptions) -> Iterable[Observation]:\n    yield Observation(9, {})\n\n# Counter\ncounter = meter.create_counter(\"counter\")\ncounter.add(1)\n\n# Async Counter\nobservable_counter = meter.create_observable_counter(\n    \"observable_counter\", [observable_counter_func]\n)\n\n# UpDownCounter\nup_down_counter = meter.create_up_down_counter(\"up_down_counter\")\nup_down_counter.add(1)\nup_down_counter.add(-5)\n\n# Async UpDownCounter\nobservable_up_down_counter = meter.create_observable_up_down_counter(\n    \"observable_up_down_counter\", [observable_up_down_counter_func]\n)\n\n# Histogram\nhistogram = meter.create_histogram(\"histogram\")\nhistogram.record(99.9)\n\n# Async Gauge\ngauge = meter.create_observable_gauge(\"gauge\", [observable_gauge_func])\n\n```\n\n#### Metric custom views\n\n```python\n\"\"\"\nThis example shows how to customize the metrics that are output by the SDK using Views. Metrics created\nand recorded using the sdk are tracked and telemetry is exported to application insights with the\nAzureMonitorMetricsExporter.\n\"\"\"\nimport os\n\nfrom opentelemetry import metrics\nfrom opentelemetry.sdk.metrics import Counter, MeterProvider\nfrom opentelemetry.sdk.metrics.export import PeriodicExportingMetricReader\nfrom opentelemetry.sdk.metrics.view import View\n\nfrom azure.monitor.opentelemetry.exporter import AzureMonitorMetricExporter\n\nexporter = AzureMonitorMetricExporter.from_connection_string(\n    os.environ[\"APPLICATIONINSIGHTS_CONNECTION_STRING\"]\n)\n# Create a view matching the counter instrument `my.counter`\n# and configure the new name `my.counter.total` for the result metrics stream\nchange_metric_name_view = View(\n    instrument_type=Counter,\n    instrument_name=\"my.counter\",\n    name=\"my.counter.total\",\n)\n\nreader = PeriodicExportingMetricReader(exporter, export_interval_millis=5000)\nprovider = MeterProvider(\n    metric_readers=[\n        reader,\n    ],\n    views=[\n        change_metric_name_view,\n    ],\n)\nmetrics.set_meter_provider(provider)\n\nmeter = metrics.get_meter_provider().get_meter(\"view-name-change\")\nmy_counter = meter.create_counter(\"my.counter\")\nmy_counter.add(100)\n\n```\n\nMore examples with the metrics `Views` SDK can be found [here](https://github.com/open-telemetry/opentelemetry-python/tree/main/docs/examples/metrics/views).\n\n#### Metric record attributes\n\n```python\n\"\"\"\nAn example to show an application using different attributes with instruments in the OpenTelemetry SDK.\nMetrics created and recorded using the sdk are tracked and telemetry is exported to application insights\nwith the AzureMonitorMetricsExporter.\n\"\"\"\nimport os\n\nfrom opentelemetry import metrics\nfrom opentelemetry.sdk.metrics import MeterProvider\nfrom opentelemetry.sdk.metrics.export import PeriodicExportingMetricReader\n\nfrom azure.monitor.opentelemetry.exporter import AzureMonitorMetricExporter\n\nexporter = AzureMonitorMetricExporter.from_connection_string(\n    os.environ[\"APPLICATIONINSIGHTS_CONNECTION_STRING\"]\n)\nreader = PeriodicExportingMetricReader(exporter, export_interval_millis=5000)\nmetrics.set_meter_provider(MeterProvider(metric_readers=[reader]))\n\nattribute_set1 = {\n    \"key1\": \"val1\"\n}\nattribute_set2 = {\n    \"key2\": \"val2\"\n}\nlarge_attribute_set = {}\nfor i in range(20):\n    key = \"key{}\".format(i)\n    val = \"val{}\".format(i)\n    large_attribute_set[key] = val\n\nmeter = metrics.get_meter_provider().get_meter(\"sample\")\n\n# Counter\ncounter = meter.create_counter(\"attr1_counter\")\ncounter.add(1, attribute_set1)\n\n# Counter2\ncounter2 = meter.create_counter(\"attr2_counter\")\ncounter2.add(10, attribute_set1)\ncounter2.add(30, attribute_set2)\n\n# Counter3\ncounter3 = meter.create_counter(\"large_attr_counter\")\ncounter3.add(100, attribute_set1)\ncounter3.add(200, large_attribute_set)\n\n```\n\n### Tracing\n\nThe following sections provide several code snippets covering some of the most common tasks, including:\n\n* [Exporting a custom span](#export-hello-world-trace)\n* [Using an instrumentation to track a library](#instrumentation-with-requests-library)\n* [Enabling sampling to limit the amount of telemetry sent](#enabling-sampling)\n\nReview the [OpenTelemetry Tracing SDK][ot_tracing_sdk] to learn how to use OpenTelemetry components to collect logs.\n\n#### Export Hello World Trace\n\n```python\n\"\"\"\nAn example to show an application using Opentelemetry tracing api and sdk. Custom dependencies are\ntracked via spans and telemetry is exported to application insights with the AzureMonitorTraceExporter.\n\"\"\"\nimport os\nfrom opentelemetry import trace\nfrom opentelemetry.sdk.trace import TracerProvider\nfrom opentelemetry.sdk.trace.export import BatchSpanProcessor\nfrom azure.monitor.opentelemetry.exporter import AzureMonitorTraceExporter\n\ntrace.set_tracer_provider(TracerProvider())\ntracer = trace.get_tracer(__name__)\n# This is the exporter that sends data to Application Insights\nexporter = AzureMonitorTraceExporter(\n    connection_string=os.environ[\"APPLICATIONINSIGHTS_CONNECTION_STRING\"]\n)\nspan_processor = BatchSpanProcessor(exporter)\ntrace.get_tracer_provider().add_span_processor(span_processor)\n\nwith tracer.start_as_current_span(\"hello\"):\n    print(\"Hello, World!\")\n```\n\n#### Instrumentation with requests library\n\nOpenTelemetry also supports several instrumentations which allows to instrument with third party libraries.\n\nFor a list of instrumentations available in OpenTelemetry, visit the contrib [documentation](https://opentelemetry-python-contrib.readthedocs.io/en/latest/).\n\nThis example shows how to instrument with the [requests](https://pypi.org/project/requests/) library.\n\n* Install the requests instrumentation package using pip install opentelemetry-instrumentation-requests.\n\n```python\n\"\"\"\nAn example to show an application instrumented with the OpenTelemetry requests instrumentation.\nCalls made with the requests library will be automatically tracked and telemetry is exported to \napplication insights with the AzureMonitorTraceExporter.\nSee more info on the requests instrumentation here:\nhttps://github.com/open-telemetry/opentelemetry-python-contrib/tree/main/instrumentation/opentelemetry-instrumentation-requests\n\"\"\"\nimport os\nimport requests\nfrom opentelemetry import trace\nfrom opentelemetry.instrumentation.requests import RequestsInstrumentor\nfrom opentelemetry.sdk.trace import TracerProvider\nfrom opentelemetry.sdk.trace.export import BatchSpanProcessor\nfrom azure.monitor.opentelemetry.exporter import AzureMonitorTraceExporter\n\n# This line causes your calls made with the requests library to be tracked.\nRequestsInstrumentor().instrument()\n\ntrace.set_tracer_provider(TracerProvider())\ntracer = trace.get_tracer(__name__)\nexporter = AzureMonitorTraceExporter(\n    connection_string=os.environ[\"APPLICATIONINSIGHTS_CONNECTION_STRING\"]\n)\nspan_processor = BatchSpanProcessor(exporter)\ntrace.get_tracer_provider().add_span_processor(span_processor)\n\n# This request will be traced\nresponse = requests.get(url=\"https://azure.microsoft.com/\")\n```\n\n#### Enabling sampling\n\nYou can enable sampling to limit the amount of telemetry records you receive. In order to enable correct sampling in Application Insights, use the `ApplicationInsightsSampler` as shown below.\n\n```python\n\"\"\"\nAn example to show an application using the ApplicationInsightsSampler to enable sampling for your telemetry.\nSpecify a sampling rate for the sampler to limit the amount of telemetry records you receive. Custom dependencies\n are tracked via spans and telemetry is exported to application insights with the AzureMonitorTraceExporter.\n\"\"\"\nimport os\nfrom opentelemetry import trace\nfrom opentelemetry.sdk.trace import TracerProvider\nfrom opentelemetry.sdk.trace.export import BatchSpanProcessor\nfrom azure.monitor.opentelemetry.exporter import (\n    ApplicationInsightsSampler,\n    AzureMonitorTraceExporter,\n)\n\n# Sampler expects a sample rate of between 0 and 1 inclusive\n# A rate of 0.75 means approximately 75% of your telemetry will be sent\nsampler = ApplicationInsightsSampler(0.75)\ntrace.set_tracer_provider(TracerProvider(sampler=sampler))\ntracer = trace.get_tracer(__name__)\nexporter = AzureMonitorTraceExporter(\n    connection_string=os.environ[\"APPLICATIONINSIGHTS_CONNECTION_STRING\"]\n)\nspan_processor = BatchSpanProcessor(exporter)\ntrace.get_tracer_provider().add_span_processor(span_processor)\n\nfor i in range(100):\n    # Approximately 25% of these spans should be sampled out\n    with tracer.start_as_current_span(\"hello\"):\n        print(\"Hello, World!\")\n```\n\n## Troubleshooting\n\nThe exporter raises exceptions defined in [Azure Core](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/README.md#azure-core-library-exceptions).\n\n## Next steps\n\n### More sample code\n\nPlease find further examples in the [samples][exporter_samples] directory demonstrating common scenarios.\n\n### Additional documentation\n\nFor more extensive documentation on the Azure Monitor service, see the [Azure Monitor documentation][product_docs] on docs.microsoft.com.\n\nFor detailed overview of OpenTelemetry, visit their [overview](https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md) page.\n\nFor the official OpenTelemetry Python documentation and how to enable other telemetry scenarios, visit the official OpenTelemetry [website](https://opentelemetry.io/docs/instrumentation/python/).\n\nFor more information on the Azure Monitor OpenTelemetry Distro, which is a bundle of useful, pre-assembled components (one of them being this current package) that enable telemetry scenarios with Azure Monitor, visit the [README](https://github.com/microsoft/ApplicationInsights-Python/tree/main/azure-monitor-opentelemetry).\n\n## Contributing\n\nThis project welcomes contributions and suggestions.  Most contributions require you to agree to a\nContributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us\nthe rights to use your contribution. For details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide\na CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions\nprovided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or\ncontact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\n<!-- LINKS -->\n[aad_for_ai_docs]: https://learn.microsoft.com/azure/azure-monitor/app/azure-ad-authentication?tabs=python\n[api_docs]: https://azuresdkdocs.blob.core.windows.net/$web/python/azure-opentelemetry-exporter-azuremonitor/1.0.0b2/index.html\n[exporter_samples]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/monitor/azure-monitor-opentelemetry-exporter/samples\n[product_docs]: https://docs.microsoft.com/azure/azure-monitor/overview\n[azure_sub]: https://azure.microsoft.com/free/\n[pip]: https://pypi.org/project/pip/\n[pypi]: https://pypi.org/project/azure-monitor-opentelemetry-exporter/\n[python]: https://www.python.org/downloads/\n[ot_sdk_python]: https://github.com/open-telemetry/opentelemetry-python\n[application_insights_namespace]: https://docs.microsoft.com/azure/azure-monitor/app/app-insights-overview#how-do-i-use-application-insights\n[opentelemetry_spec]: https://opentelemetry.io/\n[instrumentation_library]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md#instrumentation-libraries\n[log_concept]: https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/overview.md#log-signal\n[log_record]: https://opentelemetry-python.readthedocs.io/en/stable/sdk/_logs.html#opentelemetry.sdk._logs.LogRecord\n[logger]: https://opentelemetry-python.readthedocs.io/en/stable/sdk/_logs.html#opentelemetry.sdk._logs.Logger\n[logger_provider]: https://opentelemetry-python.readthedocs.io/en/stable/sdk/_logs.html#opentelemetry.sdk._logs.LoggerProvider\n[log_record_processor]: https://opentelemetry-python.readthedocs.io/en/stable/sdk/_logs.html#opentelemetry.sdk._logs.LogRecordProcessor\n[logging_handler]: https://opentelemetry-python.readthedocs.io/en/stable/sdk/_logs.html#opentelemetry.sdk._logs.LoggingHandler\n[log_reference]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-opentelemetry-exporter/azure/monitor/opentelemetry/exporter/export/logs/_exporter.py\n[ot_logging_sdk]: https://opentelemetry-python.readthedocs.io/en/stable/sdk/_logs.html\n[metric_concept]: https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/overview.md#metric-signal\n[measurement]: https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/metrics/api.md#measurement\n[instrument]: https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/metrics/api.md#instrument\n[meter]: https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/metrics/api.md#meter\n[meter_provider]: https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/metrics/api.md#meterprovider\n[metric_reader]:https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/metrics/sdk.md#metricreader\n[metric_reference]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-opentelemetry-exporter/azure/monitor/opentelemetry/exporter/export/metrics/_exporter.py\n[ot_metrics_sdk]: https://opentelemetry-python.readthedocs.io/en/stable/sdk/metrics.html\n[trace_concept]: https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/overview.md#tracing-signal\n[span]: https://opentelemetry-python.readthedocs.io/en/stable/api/trace.html?highlight=TracerProvider#opentelemetry.trace.Span\n[tracer]: https://opentelemetry-python.readthedocs.io/en/stable/api/trace.html?highlight=TracerProvider#opentelemetry.trace.Tracer\n[tracer_provider]: https://opentelemetry-python.readthedocs.io/en/stable/api/trace.html?highlight=TracerProvider#opentelemetry.trace.TracerProvider\n[span_processor]: https://opentelemetry-python.readthedocs.io/en/stable/_modules/opentelemetry/sdk/trace.html?highlight=SpanProcessor#\n[trace_reference]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-opentelemetry-exporter/azure/monitor/opentelemetry/exporter/export/trace/_exporter.py\n[ot_tracing_sdk]: https://opentelemetry-python.readthedocs.io/en/stable/sdk/trace.html\n[sampler_ref]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/sdk.md#sampling\n",
        "repo_name": "monitor/azure-monitor-opentelemetry-exporter",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-opentelemetry-exporter",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Azure Monitor Query client library for Python\n\nThe Azure Monitor Query client library is used to execute read-only queries against [Azure Monitor][azure_monitor_overview]'s two data platforms:\n\n- [Logs](https://learn.microsoft.com/azure/azure-monitor/logs/data-platform-logs) - Collects and organizes log and performance data from monitored resources. Data from different sources such as platform logs from Azure services, log and performance data from virtual machines agents, and usage and performance data from apps can be consolidated into a single [Azure Log Analytics workspace](https://learn.microsoft.com/azure/azure-monitor/logs/data-platform-logs#log-analytics-and-workspaces). The various data types can be analyzed together using the [Kusto Query Language][kusto_query_language].\n- [Metrics](https://learn.microsoft.com/azure/azure-monitor/essentials/data-platform-metrics) - Collects numeric data from monitored resources into a time series database. Metrics are numerical values that are collected at regular intervals and describe some aspect of a system at a particular time. Metrics are lightweight and capable of supporting near real-time scenarios, making them useful for alerting and fast detection of issues.\n\n**Resources:**\n\n- [Source code][source]\n- [Package (PyPI)][package]\n- [Package (Conda)](https://anaconda.org/microsoft/azure-monitor-query/)\n- [API reference documentation][python-query-ref-docs]\n- [Service documentation][azure_monitor_overview]\n- [Samples][samples]\n- [Change log][changelog]\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7 or later\n- An [Azure subscription][azure_subscription]\n- A [TokenCredential](https://learn.microsoft.com/python/api/azure-core/azure.core.credentials.tokencredential?view=azure-python) implementation, such as an [Azure Identity library credential type](https://learn.microsoft.com/python/api/overview/azure/identity-readme?view=azure-python#credential-classes).\n- To query Logs, you need one of the following things:\n  - An [Azure Log Analytics workspace][azure_monitor_create_using_portal]\n  - An Azure resource of any kind (Storage Account, Key Vault, Cosmos DB, etc.)\n- To query Metrics, you need an Azure resource of any kind (Storage Account, Key Vault, Cosmos DB, etc.).\n\n### Install the package\n\nInstall the Azure Monitor Query client library for Python with [pip][pip]:\n\n```bash\npip install azure-monitor-query\n```\n\n### Create the client\n\nAn authenticated client is required to query Logs or Metrics. The library includes both synchronous and asynchronous forms of the clients. To authenticate, create an instance of a token credential. Use that instance when creating a `LogsQueryClient` or `MetricsQueryClient`. The following examples use `DefaultAzureCredential` from the [azure-identity](https://pypi.org/project/azure-identity/) package.\n\n#### Synchronous clients\n\nConsider the following example, which creates synchronous clients for both Logs and Metrics querying:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.monitor.query import LogsQueryClient, MetricsQueryClient\n\ncredential = DefaultAzureCredential()\nlogs_client = LogsQueryClient(credential)\nmetrics_client = MetricsQueryClient(credential)\n```\n\n#### Asynchronous clients\n\nThe asynchronous forms of the query client APIs are found in the `.aio`-suffixed namespace. For example:\n\n```python\nfrom azure.identity.aio import DefaultAzureCredential\nfrom azure.monitor.query.aio import LogsQueryClient, MetricsQueryClient\n\ncredential = DefaultAzureCredential()\nasync_logs_client = LogsQueryClient(credential)\nasync_metrics_client = MetricsQueryClient(credential)\n```\n\n#### Configure clients for non-public Azure clouds\n\nBy default, `LogsQueryClient` and `MetricsQueryClient` are configured to connect to the public Azure cloud. These can be configured to connect to non-public Azure clouds by passing in the correct `endpoint` argument: For example:\n\n```python\nlogs_client = LogsQueryClient(credential, endpoint=\"https://api.loganalytics.azure.cn/v1\")\nmetrics_client = MetricsQueryClient(credential, endpoint=\"https://management.chinacloudapi.cn\")\n```\n\n**Note**: Currently, `MetricsQueryClient` uses the Azure Resource Manager (ARM) endpoint for querying metrics, so you will need the corresponding management endpoint for your cloud when using this client. This is subject to change in the future.\n\n### Execute the query\n\nFor examples of Logs and Metrics queries, see the [Examples](#examples) section.\n\n## Key concepts\n\n### Logs query rate limits and throttling\n\nThe Log Analytics service applies throttling when the request rate is too high. Limits, such as the maximum number of rows returned, are also applied on the Kusto queries. For more information, see [Query API](https://learn.microsoft.com/azure/azure-monitor/service-limits#la-query-api).\n\nIf you're executing a batch logs query, a throttled request will return a `LogsQueryError` object. That object's `code` value will be `ThrottledError`.\n\n### Metrics data structure\n\nEach set of metric values is a time series with the following characteristics:\n\n- The time the value was collected\n- The resource associated with the value\n- A namespace that acts like a category for the metric\n- A metric name\n- The value itself\n- Some metrics may have multiple dimensions as described in multi-dimensional metrics. Custom metrics can have up to 10 dimensions.\n\n## Examples\n\n- [Logs query](#logs-query)\n  - [Specify timespan](#specify-timespan)\n  - [Handle logs query response](#handle-logs-query-response)\n- [Batch logs query](#batch-logs-query)\n- [Resource logs query](#resource-logs-query)\n- [Advanced logs query scenarios](#advanced-logs-query-scenarios)\n  - [Set logs query timeout](#set-logs-query-timeout)\n  - [Query multiple workspaces](#query-multiple-workspaces)\n  - [Include statistics](#include-statistics)\n  - [Include visualization](#include-visualization)\n- [Metrics query](#metrics-query)\n  - [Handle metrics query response](#handle-metrics-query-response)\n  - [Example of handling response](#example-of-handling-response)\n\n### Logs query\n\nThis example shows how to query a Log Analytics workspace. To handle the response and view it in a tabular form, the [pandas](https://pypi.org/project/pandas/) library is used. See the [samples][samples] if you choose not to use pandas.\n\n#### Specify timespan\n\nThe `timespan` parameter specifies the time duration for which to query the data. This value can be one of the following:\n\n- a `timedelta`\n- a `timedelta` and a start datetime\n- a start datetime/end datetime\n\nFor example:\n\n```python\nimport os\nimport pandas as pd\nfrom datetime import datetime, timezone\nfrom azure.monitor.query import LogsQueryClient, LogsQueryStatus\nfrom azure.identity import DefaultAzureCredential\nfrom azure.core.exceptions import HttpResponseError\n\ncredential = DefaultAzureCredential()\nclient = LogsQueryClient(credential)\n\nquery = \"\"\"AppRequests | take 5\"\"\"\n\nstart_time=datetime(2021, 7, 2, tzinfo=timezone.utc)\nend_time=datetime(2021, 7, 4, tzinfo=timezone.utc)\n\ntry:\n    response = client.query_workspace(\n        workspace_id=os.environ['LOG_WORKSPACE_ID'],\n        query=query,\n        timespan=(start_time, end_time)\n        )\n    if response.status == LogsQueryStatus.PARTIAL:\n        error = response.partial_error\n        data = response.partial_data\n        print(error)\n    elif response.status == LogsQueryStatus.SUCCESS:\n        data = response.tables\n    for table in data:\n        df = pd.DataFrame(data=table.rows, columns=table.columns)\n        print(df)\nexcept HttpResponseError as err:\n    print(\"something fatal happened\")\n    print(err)\n```\n\n#### Handle logs query response\n\nThe `query_workspace` API returns either a `LogsQueryResult` or a `LogsQueryPartialResult` object. The `batch_query` API returns a list that may contain `LogsQueryResult`, `LogsQueryPartialResult`, and `LogsQueryError` objects. Here's a hierarchy of the response:\n\n```\nLogsQueryResult\n|---statistics\n|---visualization\n|---tables (list of `LogsTable` objects)\n    |---name\n    |---rows\n    |---columns\n    |---columns_types\n\nLogsQueryPartialResult\n|---statistics\n|---visualization\n|---partial_error (a `LogsQueryError` object)\n    |---code\n    |---message\n    |---details\n    |---status\n|---partial_data (list of `LogsTable` objects)\n    |---name\n    |---rows\n    |---columns\n    |---columns_types\n```\n\nThe `LogsQueryResult` directly iterates over the table as a convenience. For example, to handle a logs query response with tables and display it using pandas:\n\n```python\nresponse = client.query(...)\nfor table in response:\n    df = pd.DataFrame(table.rows, columns=[col.name for col in table.columns])\n```\n\nA full sample can be found [here](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/sample_logs_single_query.py).\n\nIn a similar fashion, to handle a batch logs query response:\n\n```python\nfor result in response:\n    if result.status == LogsQueryStatus.SUCCESS:\n        for table in result:\n            df = pd.DataFrame(table.rows, columns=table.columns)\n            print(df)\n```\n\nA full sample can be found [here](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/sample_batch_query.py).\n\n### Batch logs query\n\nThe following example demonstrates sending multiple queries at the same time using the batch query API. The queries can either be represented as a list of `LogsBatchQuery` objects or a dictionary. This example uses the former approach.\n\n```python\nimport os\nfrom datetime import timedelta, datetime, timezone\nimport pandas as pd\nfrom azure.monitor.query import LogsQueryClient, LogsBatchQuery, LogsQueryStatus\nfrom azure.identity import DefaultAzureCredential\n\ncredential = DefaultAzureCredential()\nclient = LogsQueryClient(credential)\nrequests = [\n    LogsBatchQuery(\n        query=\"AzureActivity | summarize count()\",\n        timespan=timedelta(hours=1),\n        workspace_id=os.environ['LOG_WORKSPACE_ID']\n    ),\n    LogsBatchQuery(\n        query= \"\"\"bad query\"\"\",\n        timespan=timedelta(days=1),\n        workspace_id=os.environ['LOG_WORKSPACE_ID']\n    ),\n    LogsBatchQuery(\n        query= \"\"\"let Weight = 92233720368547758;\n        range x from 1 to 3 step 1\n        | summarize percentilesw(x, Weight * 100, 50)\"\"\",\n        workspace_id=os.environ['LOG_WORKSPACE_ID'],\n        timespan=(datetime(2021, 6, 2, tzinfo=timezone.utc), datetime(2021, 6, 5, tzinfo=timezone.utc)), # (start, end)\n        include_statistics=True\n    ),\n]\nresults = client.query_batch(requests)\n\nfor res in results:\n    if res.status == LogsQueryStatus.FAILURE:\n        # this will be a LogsQueryError\n        print(res.message)\n    elif res.status == LogsQueryStatus.PARTIAL:\n        ## this will be a LogsQueryPartialResult\n        print(res.partial_error)\n        for table in res.partial_data:\n            df = pd.DataFrame(table.rows, columns=table.columns)\n            print(df)\n    elif res.status == LogsQueryStatus.SUCCESS:\n        ## this will be a LogsQueryResult\n        table = res.tables[0]\n        df = pd.DataFrame(table.rows, columns=table.columns)\n        print(df)\n\n```\n\n### Resource logs query\n\nThe following example demonstrates how to query logs directly from an Azure resource without the use of a Log Analytics workspace. Here, the `query_resource` method is used instead of `query_workspace`, and instead of a workspace ID, an Azure resource identifier is passed in (e.g. `/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/{resource-provider}/{resource-type}/{resource-name}`).\n\n```python\nimport os\nimport pandas as pd\nfrom datetime import timedelta\nfrom azure.monitor.query import LogsQueryClient, LogsQueryStatus\nfrom azure.core.exceptions import HttpResponseError\nfrom azure.identity import DefaultAzureCredential\n\ncredential  = DefaultAzureCredential()\nclient = LogsQueryClient(credential)\n\nquery = \"\"\"AzureActivity | take 5\"\"\"\n\ntry:\n    response = client.query_resource(os.environ['LOGS_RESOURCE_ID'], query, timespan=timedelta(days=1))\n    if response.status == LogsQueryStatus.PARTIAL:\n        error = response.partial_error\n        data = response.partial_data\n        print(error)\n    elif response.status == LogsQueryStatus.SUCCESS:\n        data = response.tables\n    for table in data:\n        df = pd.DataFrame(data=table.rows, columns=table.columns)\n        print(df)\nexcept HttpResponseError as err:\n    print(\"something fatal happened\")\n    print(err)\n```\n\n### Advanced logs query scenarios\n\n#### Set logs query timeout\n\nThe following example shows setting a server timeout in seconds. A gateway timeout is raised if the query takes more time than the mentioned timeout. The default is 180 seconds and can be set up to 10 minutes (600 seconds).\n\n```python\nimport os\nfrom azure.monitor.query import LogsQueryClient\nfrom azure.identity import DefaultAzureCredential\n\ncredential = DefaultAzureCredential()\nclient = LogsQueryClient(credential)\n\nresponse = client.query_workspace(\n    os.environ['LOG_WORKSPACE_ID'],\n    \"range x from 1 to 10000000000 step 1 | count\",\n    timespan=timedelta(days=1),\n    server_timeout=600 # sets the timeout to 10 minutes\n    )\n```\n\n#### Query multiple workspaces\n\nThe same logs query can be executed across multiple Log Analytics workspaces. In addition to the Kusto query, the following parameters are required:\n\n- `workspace_id` - The first (primary) workspace ID.\n- `additional_workspaces` - A list of workspaces, excluding the workspace provided in the `workspace_id` parameter. The parameter's list items may consist of the following identifier formats:\n  - Qualified workspace names\n  - Workspace IDs\n  - Azure resource IDs\n\nFor example, the following query executes in three workspaces:\n\n```python\nclient.query_workspace(\n    <workspace_id>,\n    query,\n    timespan=timedelta(days=1),\n    additional_workspaces=['<workspace 2>', '<workspace 3>']\n    )\n```\n\nA full sample can be found [here](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/sample_log_query_multiple_workspaces.py).\n\n#### Include statistics\n\nTo get logs query execution statistics, such as CPU and memory consumption:\n\n1. Set the `include_statistics` parameter to `True`.\n2. Access the `statistics` field inside the `LogsQueryResult` object.\n\nThe following example prints the query execution time:\n\n```python\nquery = \"AzureActivity | top 10 by TimeGenerated\"\nresult = client.query_workspace(\n    <workspace_id>,\n    query,\n    timespan=timedelta(days=1),\n    include_statistics=True\n    )\n\nexecution_time = result.statistics.get(\"query\", {}).get(\"executionTime\")\nprint(f\"Query execution time: {execution_time}\")\n```\n\nThe `statistics` field is a `dict` that corresponds to the raw JSON response, and its structure can vary by query. The statistics are found within the `query` property. For example:\n\n```python\n{\n  \"query\": {\n    \"executionTime\": 0.0156478,\n    \"resourceUsage\": {...},\n    \"inputDatasetStatistics\": {...},\n    \"datasetStatistics\": [{...}]\n  }\n}\n```\n\n#### Include visualization\n\nTo get visualization data for logs queries using the [render operator](https://learn.microsoft.com/azure/data-explorer/kusto/query/renderoperator?pivots=azuremonitor):\n\n1. Set the `include_visualization` property to `True`.\n1. Access the `visualization` field inside the `LogsQueryResult` object.\n\nFor example:\n\n```python\nquery = (\n    \"StormEvents\"\n    \"| summarize event_count = count() by State\"\n    \"| where event_count > 10\"\n    \"| project State, event_count\"\n    \"| render columnchart\"\n)\nresult = client.query_workspace(\n    <workspace_id>,\n    query,\n    timespan=timedelta(days=1),\n    include_visualization=True\n    )\n\nprint(f\"Visualization result: {result.visualization}\")\n```\n\nThe `visualization` field is a `dict` that corresponds to the raw JSON response, and its structure can vary by query. For example:\n\n```python\n{\n  \"visualization\": \"columnchart\",\n  \"title\": \"the chart title\",\n  \"accumulate\": False,\n  \"isQuerySorted\": False,\n  \"kind\": None,\n  \"legend\": None,\n  \"series\": None,\n  \"yMin\": \"NaN\",\n  \"yMax\": \"NaN\",\n  \"xAxis\": None,\n  \"xColumn\": None,\n  \"xTitle\": \"x axis title\",\n  \"yAxis\": None,\n  \"yColumns\": None,\n  \"ySplit\": None,\n  \"yTitle\": None,\n  \"anomalyColumns\": None\n}\n```\n\nInterpretation of the visualization data is left to the library consumer. To use this data with the [Plotly graphing library](https://plotly.com/python/), see the [synchronous](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/sample_logs_query_visualization.py) or [asynchronous](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/async_samples/sample_logs_query_visualization_async.py) code samples.\n\n### Metrics query\n\nThe following example gets metrics for an Event Grid subscription. The resource URI is that of an Event Grid topic.\n\nThe resource URI must be that of the resource for which metrics are being queried. It's normally of the format `/subscriptions/<id>/resourceGroups/<rg-name>/providers/<source>/topics/<resource-name>`.\n\nTo find the resource URI:\n\n1. Navigate to your resource's page in the Azure portal.\n2. From the **Overview** blade, select the **JSON View** link.\n3. In the resulting JSON, copy the value of the `id` property.\n\n**NOTE**: The metrics are returned in the order of the metric_names sent.\n\n```python\nimport os\nfrom datetime import timedelta, datetime\nfrom azure.monitor.query import MetricsQueryClient\nfrom azure.identity import DefaultAzureCredential\n\ncredential = DefaultAzureCredential()\nclient = MetricsQueryClient(credential)\nstart_time = datetime(2021, 5, 25)\nduration = timedelta(days=1)\nmetrics_uri = os.environ['METRICS_RESOURCE_URI']\nresponse = client.query_resource(\n    metrics_uri,\n    metric_names=[\"PublishSuccessCount\"],\n    timespan=(start_time, duration)\n    )\n\nfor metric in response.metrics:\n    print(metric.name)\n    for time_series_element in metric.timeseries:\n        for metric_value in time_series_element.data:\n            print(metric_value.time_stamp)\n```\n\n#### Handle metrics query response\n\nThe metrics query API returns a `MetricsQueryResult` object. The `MetricsQueryResult` object contains properties such as a list of `Metric`-typed objects, `granularity`, `namespace`, and `timespan`. The `Metric` objects list can be accessed using the `metrics` param. Each `Metric` object in this list contains a list of `TimeSeriesElement` objects. Each `TimeSeriesElement` object contains `data` and `metadata_values` properties. In visual form, the object hierarchy of the response resembles the following structure:\n\n```\nMetricsQueryResult\n|---granularity\n|---timespan\n|---cost\n|---namespace\n|---resource_region\n|---metrics (list of `Metric` objects)\n    |---id\n    |---type\n    |---name\n    |---unit\n    |---timeseries (list of `TimeSeriesElement` objects)\n        |---metadata_values\n        |---data (list of data points represented by `MetricValue` objects)\n```\n\n#### Example of handling response\n\n```python\nimport os\nfrom azure.monitor.query import MetricsQueryClient, MetricAggregationType\nfrom azure.identity import DefaultAzureCredential\n\ncredential = DefaultAzureCredential()\nclient = MetricsQueryClient(credential)\n\nmetrics_uri = os.environ['METRICS_RESOURCE_URI']\nresponse = client.query_resource(\n    metrics_uri,\n    metric_names=[\"MatchedEventCount\"],\n    aggregations=[MetricAggregationType.COUNT]\n    )\n\nfor metric in response.metrics:\n    print(metric.name)\n    for time_series_element in metric.timeseries:\n        for metric_value in time_series_element.data:\n            if metric_value.count != 0:\n                print(\n                    \"There are {} matched events at {}\".format(\n                        metric_value.count,\n                        metric_value.time_stamp\n                    )\n                )\n```\n\n## Troubleshooting\n\nSee our [troubleshooting guide][troubleshooting_guide] for details on how to diagnose various failure scenarios.\n\n## Next steps\n\nTo learn more about Azure Monitor, see the [Azure Monitor service documentation][azure_monitor_overview].\n\n### Samples\n\nThe following code samples show common scenarios with the Azure Monitor Query client library.\n\n#### Logs query samples\n\n- [Send a single query with LogsQueryClient and handle the response as a table](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/sample_logs_single_query.py) ([async sample](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/async_samples/sample_log_query_async.py))\n- [Send a single query with LogsQueryClient and handle the response in key-value form](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/sample_logs_query_key_value_form.py)\n- [Send a single query with LogsQueryClient without pandas](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/sample_single_log_query_without_pandas.py)\n- [Send a single query with LogsQueryClient across multiple workspaces](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/sample_log_query_multiple_workspaces.py)\n- [Send multiple queries with LogsQueryClient](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/sample_batch_query.py)\n- [Send a single query with LogsQueryClient using server timeout](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/sample_server_timeout.py)\n\n#### Metrics query samples\n\n- [Send a query using MetricsQueryClient](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/sample_metrics_query.py) ([async sample](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/async_samples/sample_metrics_query_async.py))\n- [Get a list of metric namespaces](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/sample_metric_namespaces.py) ([async sample](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/async_samples/sample_metric_namespaces_async.py))\n- [Get a list of metric definitions](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/sample_metric_definitions.py) ([async sample](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/async_samples/sample_metric_definitions_async.py))\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [cla.microsoft.com][cla].\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n\n[azure_core_exceptions]: https://aka.ms/azsdk/python/core/docs#module-azure.core.exceptions\n[azure_core_ref_docs]: https://aka.ms/azsdk/python/core/docs\n[azure_monitor_create_using_portal]: https://learn.microsoft.com/azure/azure-monitor/logs/quick-create-workspace\n[azure_monitor_overview]: https://learn.microsoft.com/azure/azure-monitor/\n[azure_subscription]: https://azure.microsoft.com/free/python/\n[changelog]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/monitor/azure-monitor-query/CHANGELOG.md\n[kusto_query_language]: https://learn.microsoft.com/azure/data-explorer/kusto/query/\n[package]: https://aka.ms/azsdk-python-monitor-query-pypi\n[pip]: https://pypi.org/project/pip/\n[python_logging]: https://docs.python.org/3/library/logging.html\n[python-query-ref-docs]: https://aka.ms/azsdk/python/monitor-query/docs\n[samples]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/monitor/azure-monitor-query/samples\n[source]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/\n[troubleshooting_guide]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/TROUBLESHOOTING.md\n\n[cla]: https://cla.microsoft.com\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n",
        "repo_name": "monitor/azure-monitor-query",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure Monitor library for Python\n\nStarting with v0.4.0, this package cannot be installed anymore, please use [azure-mgmt-monitor](https://pypi.org/project/azure-mgmt-monitor/) instead.\n",
        "repo_name": "monitor/azure-monitor",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure NetApp Files Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-netapp\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.netapp import NetAppManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = NetAppManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\n\nCode samples for this package can be found at [NetApp Files Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com and [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-netapp%2FREADME.png)\n",
        "repo_name": "netapp/azure-mgmt-netapp",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/netapp/azure-mgmt-netapp",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure DNS Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-dns\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.dns import DnsManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = DnsManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\nCode samples for this package can be found at:\n- [Search DNS Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com\n- [Azure Python Mgmt SDK Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-dns%2FREADME.png)\n",
        "repo_name": "network/azure-mgmt-dns",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/network/azure-mgmt-dns",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Front Door Service Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-frontdoor\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.frontdoor import FrontDoorManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = FrontDoorManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\nCode samples for this package can be found at:\n- [Search Front Door Service](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com\n- [Azure Python Mgmt SDK Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-frontdoor%2FREADME.png)\n",
        "repo_name": "network/azure-mgmt-frontdoor",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/network/azure-mgmt-frontdoor",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Network Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-network\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.network import NetworkManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = NetworkManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\nCode samples for this package can be found at:\n- [Search Network Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com\n- [Azure Python Mgmt SDK Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-network%2FREADME.png)\n",
        "repo_name": "network/azure-mgmt-network",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/network/azure-mgmt-network",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure DNS Private Zones Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-privatedns\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.privatedns import PrivateDnsManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = PrivateDnsManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\nCode samples for this package can be found at:\n- [Search DNS Private Zones](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com\n- [Azure Python Mgmt SDK Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-privatedns%2FREADME.png)\n",
        "repo_name": "network/azure-mgmt-privatedns",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/network/azure-mgmt-privatedns",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Networkcloud Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-networkcloud\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.networkcloud import NetworkCloudMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = NetworkCloudMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\nCode samples for this package can be found at:\n- [Search Networkcloud Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com\n- [Azure Python Mgmt SDK Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-networkcloud%2FREADME.png)\n",
        "repo_name": "networkcloud/azure-mgmt-networkcloud",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/networkcloud/azure-mgmt-networkcloud",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Networkfunction Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/)\nCode samples for this package can be found at [Networkfunction Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-networkfunction%2FREADME.png)\n",
        "repo_name": "networkfunction/azure-mgmt-networkfunction",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/networkfunction/azure-mgmt-networkfunction",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Newrelicobservability Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-newrelicobservability\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.newrelicobservability import NewRelicObservabilityMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = NewRelicObservabilityMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\nCode samples for this package can be found at:\n- [Search Newrelicobservability Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com\n- [Azure Python Mgmt SDK Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-newrelicobservability%2FREADME.png)\n",
        "repo_name": "newrelicobservability/azure-mgmt-newrelicobservability",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/newrelicobservability/azure-mgmt-newrelicobservability",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Nginx Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-nginx\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.nginx import NginxManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = NginxManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\nCode samples for this package can be found at:\n- [Search Nginx Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com\n- [Azure Python Mgmt SDK Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n- [Other Nginx Management doc](https://github.com/nginxinc/nginxaas-for-azure-snippets/tree/main/snippets/sdk/python)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-nginx%2FREADME.png)\n",
        "repo_name": "nginx/azure-mgmt-nginx",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/nginx/azure-mgmt-nginx",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Notification Hubs Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/notification-hubs)\nCode samples for this package can be found at [Notification Hubs Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://github.com/Azure-Samples/azure-samples-python-management/tree/main/samples/notificationhubs)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-notificationhubs%2FREADME.png)\n",
        "repo_name": "notificationhubs/azure-mgmt-notificationhubs",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/notificationhubs/azure-mgmt-notificationhubs",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure AgriFood SDK for Python\n\nThis is the Microsoft Azure AgriFood namespace package.\n\nThis package is not intended to be installed directly by the end user.\n\nIt provides the necessary files for other packages to extend the\nazure.agrifood namespace.\n\nThe complete list of available packages can be found at:\nhttps://aka.ms/azsdk/python/all\n",
        "repo_name": "nspkg/azure-agrifood-nspkg",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/nspkg/azure-agrifood-nspkg",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure ai-language Services namespace package.\n\nThis package is not intended to be installed directly by the end user.\n\nSince version 3.0, this is Python 2 package only, Python 3.x SDKs will use `PEP420 <https://www.python.org/dev/peps/pep-0420/>` as namespace package strategy.\nTo avoid issues with package servers that does not support `python_requires`, a Python 3 package is installed but is empty.\n\nIt provides the necessary files for other packages to extend the azure.ai namespace.\n\nIf you are looking to install the Azure client libraries, see the\n`azure <https://pypi.python.org/pypi/azure>`__ bundle package.\n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fsdk%2Ftextanalytics%2Fazure-ai-nspkg%2FREADME.png)",
        "repo_name": "nspkg/azure-ai-language-nspkg",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/nspkg/azure-ai-language-nspkg",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure ai Services namespace package.\n\nThis package is not intended to be installed directly by the end user.\n\nSince version 3.0, this is Python 2 package only, Python 3.x SDKs will use `PEP420 <https://www.python.org/dev/peps/pep-0420/>` as namespace package strategy.\nTo avoid issues with package servers that does not support `python_requires`, a Python 3 package is installed but is empty.\n\nIt provides the necessary files for other packages to extend the azure.ai namespace.\n\nIf you are looking to install the Azure client libraries, see the\n`azure <https://pypi.python.org/pypi/azure>`__ bundle package.\n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fsdk%2Ftextanalytics%2Fazure-ai-nspkg%2FREADME.png)",
        "repo_name": "nspkg/azure-ai-nspkg",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/nspkg/azure-ai-nspkg",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure ai-translation Services namespace package.\n\nThis package is not intended to be installed directly by the end user.\n\nSince version 3.0, this is Python 2 package only, Python 3.x SDKs will use `PEP420 <https://www.python.org/dev/peps/pep-0420/>` as namespace package strategy.\nTo avoid issues with package servers that does not support `python_requires`, a Python 3 package is installed but is empty.\n\nIt provides the necessary files for other packages to extend the azure.ai namespace.\n\nIf you are looking to install the Azure client libraries, see the\n`azure <https://pypi.python.org/pypi/azure>`__ bundle package.\n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fsdk%2Ftextanalytics%2Fazure-ai-nspkg%2FREADME.png)",
        "repo_name": "nspkg/azure-ai-translation-nspkg",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/nspkg/azure-ai-translation-nspkg",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Cognitive Services Knowledge namespace\npackage.\n\nThis package is not intended to be installed directly by the end user.\n\nSince version 3.0, this is Python 2 package only, Python 3.x SDKs will\nuse `PEP420 <https://www.python.org/dev/peps/pep-0420/>` as\nnamespace package strategy. To avoid issues with package servers that\ndoes not support python_requires, a Python 3 package is installed but\nis empty.\n\nIt provides the necessary files for other packages to extend the\nazure.cognitiveservices.knowledge namespace.\n\nIf you are looking to install the Azure client libraries, see the\n[azure sdk python release](https://aka.ms/azsdk/python/all).\n\n![image](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-cognitiveservices-knowledge-nspkg%2FREADME.png)\n",
        "repo_name": "nspkg/azure-cognitiveservices-knowledge-nspkg",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/nspkg/azure-cognitiveservices-knowledge-nspkg",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Cognitive Services Language namespace\npackage.\n\nThis package is not intended to be installed directly by the end user.\n\nSince version 3.0, this is Python 2 package only, Python 3.x SDKs will\nuse [PEP420](https://www.python.org/dev/peps/pep-0420/) as\nnamespace package strategy. To avoid issues with package servers that\ndoes not support `python_requires`, a Python 3 package is installed\nbut is empty.\n\nIt provides the necessary files for other packages to extend the\nazure.cognitiveservices.language namespace.\n\nIf you are looking to install the Azure client libraries, see the\n[azure sdk python release](https://aka.ms/azsdk/python/all).\n\n![image](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-cognitiveservices-language-nspkg%2FREADME.png)\n",
        "repo_name": "nspkg/azure-cognitiveservices-language-nspkg",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/nspkg/azure-cognitiveservices-language-nspkg",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Cognitive Services namespace package.\n\nThis package is not intended to be installed directly by the end user.\n\nSince version 3.0, this is Python 2 package only, Python 3.x SDKs will\nuse [PEP420](https://www.python.org/dev/peps/pep-0420/) as\nnamespace package strategy. To avoid issues with package servers that\ndoes not support `python_requires`, a Python 3 package is installed\nbut is empty.\n\nIt provides the necessary files for other packages to extend the\nazure.cognitiveservices namespace.\n\nIf you are looking to install the Azure client libraries, see the\n[azure sdk python release](https://aka.ms/azsdk/python/all).\n\n![image](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-cognitiveservices-nspkg%2FREADME.png)\n",
        "repo_name": "nspkg/azure-cognitiveservices-nspkg",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/nspkg/azure-cognitiveservices-nspkg",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Cognitive Services Search namespace package.\n\nThis package is not intended to be installed directly by the end user.\n\nSince version 3.0, this is Python 2 package only, Python 3.x SDKs will\nuse [PEP420](https://www.python.org/dev/peps/pep-0420/) as\nnamespace package strategy. To avoid issues with package servers that\ndoes not support `python_requires`, a Python 3 package is installed\nbut is empty.\n\nIt provides the necessary files for other packages to extend the\nazure.cognitiveservices.search namespace.\n\nIf you are looking to install the Azure client libraries, see the\n[azure sdk python release](https://aka.ms/azsdk/python/all).\n\n![image](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-cognitiveservices-search-nspkg%2FREADME.png)\n",
        "repo_name": "nspkg/azure-cognitiveservices-search-nspkg",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/nspkg/azure-cognitiveservices-search-nspkg",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Cognitive Services Vision namespace package.\n\nThis package is not intended to be installed directly by the end user.\n\nSince version 3.0, this is Python 2 package only, Python 3.x SDKs will\nuse [PEP420](https://www.python.org/dev/peps/pep-0420/) as\nnamespace package strategy. To avoid issues with package servers that\ndoes not support `python_requires`, a Python 3 package is installed\nbut is empty.\n\nIt provides the necessary files for other packages to extend the\nazure.cognitiveservices.vision namespace.\n\nIf you are looking to install the Azure client libraries, see the\n[azure sdk python release](https://aka.ms/azsdk/python/all).\n\n![image](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-cognitiveservices-vision-nspkg%2FREADME.png)\n",
        "repo_name": "nspkg/azure-cognitiveservices-vision-nspkg",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/nspkg/azure-cognitiveservices-vision-nspkg",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure Communication SDK for Python\n\nThis is the Microsoft Azure Communication namespace package.\n\nThis package is not intended to be installed directly by the end user.\n\nIt provides the necessary files for other packages to extend the\nazure.communication namespace.\n\nThe complete list of available packages can be found at:\nhttps://aka.ms/azsdk/python/all\n",
        "repo_name": "nspkg/azure-communication-nspkg",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/nspkg/azure-communication-nspkg",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure Data SDK for Python\n\nThis is the Microsoft Azure Data namespace package.\n\nThis package is not intended to be installed directly by the end user.\n\nIt provides the necessary files for other packages to extend the\nazure.data namespace.\n\nIf you are looking to install the Azure Data libraries, see the\n[azure](https://pypi.python.org/pypi/azure) bundle package.\n",
        "repo_name": "nspkg/azure-data-nspkg",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/nspkg/azure-data-nspkg",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Digitaltwins namespace package. It isn't intended to\nbe installed directly. Digitaltwins client libraries are located elsewhere:\n- [`azure-digitaltwins-core`](https://pypi.org/project/azure-digitaltwins-core)\n\nThis package is for Python 2 only. It provides the necessary files for other\npackages to extend the `azure` namespace. Python 3.x libraries use\n[`PEP420`](https://www.python.org/dev/peps/pep-0420/) instead.\n",
        "repo_name": "nspkg/azure-digitaltwins-nspkg",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/nspkg/azure-digitaltwins-nspkg",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure IoT SDK for Python\n\nThis is the Microsoft Azure IoT namespace package.\n\nThis package is not intended to be installed directly by the end user.\n\nIt provides the necessary files for other packages to extend the\nazure.iot namespace.\n\nThe complete list of available packages can be found at:\nhttps://aka.ms/azsdk/python/all\n",
        "repo_name": "nspkg/azure-iot-nspkg",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/nspkg/azure-iot-nspkg",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Key Vault namespace package. It isn't intended to\nbe installed directly. Key Vault client libraries are located elsewhere:\n- [`azure-keyvault-certificates`](https://pypi.org/project/azure-keyvault-certificates)\n- [`azure-keyvault-keys`](https://pypi.org/project/azure-keyvault-keys/)\n- [`azure-keyvault-secrets`](https://pypi.org/project/azure-keyvault-secrets)\n\nThis package is for Python 2 only. It provides the necessary files for other\npackages to extend the `azure` namespace. Python 3.x libraries use\n[`PEP420`](https://www.python.org/dev/peps/pep-0420/) instead.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fsdk%2Fkeyvault%2Fazure-keyvault-nspkg%2FFREADME.png)\n",
        "repo_name": "nspkg/azure-keyvault-nspkg",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/nspkg/azure-keyvault-nspkg",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Media Services namespace package.\n\nThis package is not intended to be installed directly by the end user.\n\nSince version 3.0, this is Python 2 package only, Python 3.x SDKs will use `PEP420 <https://www.python.org/dev/peps/pep-0420/>` as namespace package strategy.\n\nIt provides the necessary files for other packages to extend the azure.media namespace.\n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fsdk%2Fmedia%2Fazure-media-nspkg%2FREADME.png)\n",
        "repo_name": "nspkg/azure-media-nspkg",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/nspkg/azure-media-nspkg",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Messaging namespace package.\n\nThis package is not intended to be installed directly by the end user.\n\nSince version 3.0, this is Python 2 package only, Python 3.x SDKs will use [PEP420](https://www.python.org/dev/peps/pep-0420/) as namespace package strategy.\nTo avoid issues with package servers that does not support `python_requires`, a Python 3 package is installed but is empty.\n\nIt provides the necessary files for other packages to extend the azure.messaging namespace.\n\nIf you are looking to install the Azure client libraries, see the\n[azure sdk python release](https://aka.ms/azsdk/python/all).\n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-messaging-nspkg%2FREADME.png)\n",
        "repo_name": "nspkg/azure-messaging-nspkg",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/nspkg/azure-messaging-nspkg",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Data Lake Management namespace package.\n\nThis package is not intended to be installed directly by the end user.\n\nSince version 3.0, this is Python 2 package only, Python 3.x SDKs will use [PEP420](https://www.python.org/dev/peps/pep-0420/) as namespace package strategy.\nTo avoid issues with package servers that does not support `python_requires`, a Python 3 package is installed but is empty.\n\nIt provides the necessary files for other packages to extend the azure.mgmt.datalake namespace.\n\nIf you are looking to install the Azure client libraries, see the\n[azure sdk python release](https://aka.ms/azsdk/python/all).\n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-datalake-nspkg%2FREADME.png)\n",
        "repo_name": "nspkg/azure-mgmt-datalake-nspkg",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/nspkg/azure-mgmt-datalake-nspkg",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Management namespace package.\n\nThis package is not intended to be installed directly by the end user.\n\nSince version 3.0, this is Python 2 package only, Python 3.x SDKs will use [PEP420](https://www.python.org/dev/peps/pep-0420/) as namespace package strategy.\nTo avoid issues with package servers that does not support `python_requires`, a Python 3 package is installed but is empty.\n\nIt provides the necessary files for other packages to extend the azure.mgmt namespace.\n\nIf you are looking to install the Azure client libraries, see the\n[azure sdk python release](https://aka.ms/azsdk/python/all).\n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-nspkg%2FREADME.png)\n",
        "repo_name": "nspkg/azure-mgmt-nspkg",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/nspkg/azure-mgmt-nspkg",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure namespace package.\n\nThis package is not intended to be installed directly by the end user.\n\nSince version 3.0, this is Python 2 package only, Python 3.x SDKs will use [PEP420](https://www.python.org/dev/peps/pep-0420/) as namespace package strategy.\nTo avoid issues with package servers that does not support `python_requires`, a Python 3 package is installed but is empty.\n\nIt provides the necessary files for other packages to extend the azure namespace.\n\nIf you are looking to install the Azure client libraries, see the\n[azure sdk python release](https://aka.ms/azsdk/python/all).\n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-nspkg%2FREADME.png)\n",
        "repo_name": "nspkg/azure-nspkg",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/nspkg/azure-nspkg",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure Purview SDK for Python\n\nThis is the Microsoft Azure Purview namespace package.\n\nThis package is not intended to be installed directly by the end user.\n\nIt provides the necessary files for other packages to extend the\nazure.purview namespace.\n\nThe complete list of available packages can be found at:\nhttps://aka.ms/azsdk/python/all\n",
        "repo_name": "nspkg/azure-purview-nspkg",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/nspkg/azure-purview-nspkg",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Search namespace package. It isn't intended to\nbe installed directly. Search client libraries are located elsewhere:\n- [`azure-search-documents`](https://pypi.org/project/azure-search-documents)\n\nThis package is for Python 2 only. It provides the necessary files for other\npackages to extend the `azure` namespace. Python 3.x libraries use\n[`PEP420`](https://www.python.org/dev/peps/pep-0420/) instead.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fsdk%search%2Fazure-search-nspkg%2FFREADME.png)\n",
        "repo_name": "nspkg/azure-search-nspkg",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/nspkg/azure-search-nspkg",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Security Services namespace package.\n\nThis package is not intended to be installed directly by the end user.\n\nSince version 3.0, this is Python 2 package only, Python 3.x SDKs will use `PEP420 <https://www.python.org/dev/peps/pep-0420/>` as namespace package strategy.\n\nIt provides the necessary files for other packages to extend the azure.security namespace.\n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fsdk%2Fsecurity%2Fazure-security-nspkg%2FREADME.png)",
        "repo_name": "nspkg/azure-security-nspkg",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/nspkg/azure-security-nspkg",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure Storage SDK for Python\n\nThis is the Microsoft Azure Storage namespace package.\n\nThis package is not intended to be installed directly by the end user.\n\nIt provides the necessary files for other packages to extend the\nazure.storage namespace.\n\nIf you are looking to install the Azure Storage libraries, see the\n[azure sdk python release](https://aka.ms/azsdk/python/all).\n",
        "repo_name": "nspkg/azure-storage-nspkg",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/nspkg/azure-storage-nspkg",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure Synapse SDK for Python\n\nThis is the Microsoft Azure Synapse namespace package.\n\nThis package is not intended to be installed directly by the end user.\n\nIt provides the necessary files for other packages to extend the\nazure.synapse namespace.\n\nThe complete list of available packages can be found at:\nhttps://aka.ms/azsdk/python/all\n",
        "repo_name": "nspkg/azure-synapse-nspkg",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/nspkg/azure-synapse-nspkg",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Oep Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/)\nCode samples for this package can be found at [Oep Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-oep%2FREADME.png)\n",
        "repo_name": "oep/azure-mgmt-oep",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/oep/azure-mgmt-oep",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Azure OpenAI testing placeholder\n\n > Note: This is not a real package. Its purpose is to run tests/validate Azure OpenAI endpoints with the official [Python SDK](https://github.com/openai/openai-python).",
        "repo_name": "openai/azure-openai",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/openai/azure-openai",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Operationsmanagement Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/)\nCode samples for this package can be found at [Operationsmanagement Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-operationsmanagement%2FREADME.png)\n",
        "repo_name": "operationsmanagement/azure-mgmt-operationsmanagement",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/operationsmanagement/azure-mgmt-operationsmanagement",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Orbital Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-orbital\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.orbital import AzureOrbital\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = AzureOrbital(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\n\nCode samples for this package can be found at [Orbital Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com and [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-orbital%2FREADME.png)\n",
        "repo_name": "orbital/azure-mgmt-orbital",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/orbital/azure-mgmt-orbital",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Paloaltonetworksngfw Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-paloaltonetworksngfw\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.paloaltonetworksngfw import PaloAltoNetworksNgfwMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = PaloAltoNetworksNgfwMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\nCode samples for this package can be found at:\n- [Search Paloaltonetworksngfw Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com\n- [Azure Python Mgmt SDK Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-paloaltonetworksngfw%2FREADME.png)\n",
        "repo_name": "paloaltonetworks/azure-mgmt-paloaltonetworksngfw",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/paloaltonetworks/azure-mgmt-paloaltonetworksngfw",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Peering Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/)\nCode samples for this package can be found at [Peering Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-peering%2FREADME.png)\n",
        "repo_name": "peering/azure-mgmt-peering",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/peering/azure-mgmt-peering",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Azure Personalizer client library for Python\n\n[Azure Personalizer][personalizer_doc]\nis a cloud-based service that helps your applications choose the best content item to show your users. You can use the Personalizer service to determine what product to suggest to shoppers or to figure out the optimal position for an advertisement. After the content is shown to the user, your application monitors the user's reaction and reports a reward score back to the Personalizer service. This ensures continuous improvement of the machine learning model, and Personalizer's ability to select the best content item based on the contextual information it receives.\n\n## Getting started\n\n### Prerequisites\n* Python 3.7 or later is required to use this package.\n* You must have an [Azure subscription][azure_subscription] and a\n[Personalizer resource][personalizer_account] to use this package.\n\n### Install the package\nInstall the Azure Personalizer client library for Python with [pip][pip]:\n\n```bash\npip install azure-ai-personalizer\n```\n\n> Note: This version of the client library defaults to the `2022-09-01-preview` version of the service.\n\nThis table shows the relationship between SDK versions and supported API versions of the service:\n\n|SDK version|Supported API version of service\n|-|-\n|1.0.0b1| 2022-09-01-preview\n\n## Key concepts\n\n### PersonalizerClient\nThe [synchronous PersonalizerClient][personalizer_sync_client] and\n[asynchronous PersonalizerClient][personalizer_async_client] provide synchronous and asynchronous operations to:\n- Manage the machine learning model and learning settings for the Personalizer service.\n- Manage the properties of the Personalizer service such as the [learning mode][learning_mode], [exploration percentage][exploration].\n- Run counterfactual evaluations on prior historical event data.\n- Rank a set of actions, then activate and reward the event. \n- Use [multi-slot personalization][multi_slot] when there are more than one slots.\n- Manage the properties of the Personalizer service.\n- Run counterfactual evaluations on prior historical event data.\n\n\n## Examples\nThe following examples outline the main scenarios when using personalizer in single-slot and multi-slot configurations.\n\n* [Send rank and reward when using a single slot](#send-rank-and-reward \"Send rank and reward\")\n* [Send rank and reward when using multiple slots](#send-multi-slot-rank-and-reward \"Send multi-slot rank and reward\")\n\n### Send rank and reward\n\n```python\nfrom azure.ai.personalizer import PersonalizerClient\nfrom azure.core.credentials import AzureKeyCredential\n\nendpoint = \"https://<my-personalizer-instance>.cognitiveservices.azure.com/\"\ncredential = AzureKeyCredential(\"<api_key>\")\n\nclient = PersonalizerClient(endpoint, credential)\n\n# The list of actions to be ranked with metadata associated for each action.\nactions = [\n    {\n        \"id\": \"Video1\",\n        \"features\": [\n            {\"videoType\": \"documentary\", \"videoLength\": 35, \"director\": \"CarlSagan\"},\n            {\"mostWatchedByAge\": \"50-55\"},\n        ],\n    },\n    {\n        \"id\": \"Video2\",\n        \"features\": [\n            {\"videoType\": \"movie\", \"videoLength\": 120, \"director\": \"StevenSpielberg\"},\n            {\"mostWatchedByAge\": \"40-45\"},\n        ],\n    },\n]\n\n# Context of the user to which the action must be presented.\ncontext_features = [\n    {\"currentContext\": {\"day\": \"tuesday\", \"time\": \"night\", \"weather\": \"rainy\"}},\n    {\n        \"userContext\": {\n            \"payingUser\": True,\n            \"favoriteGenre\": \"documentary\",\n            \"hoursOnSite\": 0.12,\n            \"lastWatchedType\": \"movie\",\n        },\n    },\n]\n\nrequest = {\n    \"actions\": actions,\n    \"contextFeatures\": context_features,\n}\n\nrank_response = client.rank(request)\nprint(\"Sending reward event\")\nclient.reward(rank_response.get(\"eventId\"), {\"value\": 1.0})\n```\n\n### Send multi-slot rank and reward\n\n```python\nfrom azure.ai.personalizer import PersonalizerClient\nfrom azure.core.credentials import AzureKeyCredential\n\nendpoint = \"https://<my-personalizer-instance>.cognitiveservices.azure.com/\"\ncredential = AzureKeyCredential(\"<api_key>\")\n\nclient = PersonalizerClient(endpoint, credential)\n\n# We want to rank the actions for two slots.\nslots = [\n    {\n        \"id\": \"Main Article\",\n        \"baselineAction\": \"NewsArticle\",\n        \"positionFeatures\": [{\"Size\": \"Large\", \"Position\": \"Top Middle\"}],\n    },\n    {\n        \"id\": \"Side Bar\",\n        \"baselineAction\": \"SportsArticle\",\n        \"positionFeatures\": [{\"Size\": \"Small\", \"Position\": \"Bottom Right\"}],\n    },\n]\n\n# The list of actions to be ranked with metadata associated for each action.\nactions = [\n    {\"id\": \"NewsArticle\", \"features\": [{\"type\": \"News\"}]},\n    {\"id\": \"SportsArticle\", \"features\": [{\"type\": \"Sports\"}]},\n    {\"id\": \"EntertainmentArticle\", \"features\": [{\"type\": \"Entertainment\"}]},\n]\n\n# Context of the user to which the action must be presented.\ncontext_features = [\n    {\"user\": {\"profileType\": \"AnonymousUser\", \"latLong\": \"47.6,-122.1\"}},\n    {\"environment\": {\"dayOfMonth\": \"28\", \"monthOfYear\": \"8\", \"weather\": \"Sunny\"}},\n    {\"device\": {\"mobile\": True, \"windows\": True}},\n    {\"recentActivity\": {\"itemsInCart\": 3}},\n]\n\nrequest = {\n    \"slots\": slots,\n    \"actions\": actions,\n    \"contextFeatures\": context_features,\n}\nrank_response = client.rank_multi_slot(request)\nprint(\"Sending reward event for Main Article slot\")\nclient.reward_multi_slot(\n    rank_response.get(\"eventId\"),\n    {\"reward\": [{\"slotId\": \"Main Article\", \"value\": 1.0}]})\n```\n\n## Troubleshooting\n\n### General\nPersonalizer client library will raise exceptions defined in [Azure Core][azure_core_exceptions].\n\n### Logging\nThis library uses the standard [logging][python_logging] library for logging.\n\nBasic information about HTTP sessions (URLs, headers, etc.) is logged at `INFO` level.\n\nDetailed `DEBUG` level logging, including request/response bodies and **unredacted**\nheaders, can be enabled on the client or per-operation with the `logging_enable` keyword argument.\n\nSee full SDK logging documentation with examples [here][sdk_logging_docs].\n\n### Optional Configuration\n\nOptional keyword arguments can be passed in at the client and per-operation level.\nThe azure-core [reference documentation][azure_core_ref_docs]\ndescribes available configurations for retries, logging, transport protocols, and more.\n\n## Next steps\n\n## Contributing\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [cla.microsoft.com][cla].\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n[personalizer_doc]: https://docs.microsoft.com/azure/cognitive-services/personalizer/\n[azure_subscription]: https://azure.microsoft.com/free\n[personalizer_account]: https://docs.microsoft.com/azure/cognitive-services/cognitive-services-apis-create-account?tabs=multiservice%2Cwindows\n[pip]: https://pypi.org/project/pip/\n[personalizer_sync_client]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/personalizer/azure-ai-personalizer/azure/ai/personalizer/_client.py\n[personalizer_async_client]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/personalizer/azure-ai-personalizer/azure/ai/personalizer/aio/_client.py\n[learning_mode]: https://docs.microsoft.com/azure/cognitive-services/personalizer/what-is-personalizer#learning-modes\n[exploration]: https://docs.microsoft.com/azure/cognitive-services/personalizer/concepts-exploration\n[multi_slot]: https://docs.microsoft.com/azure/cognitive-services/personalizer/concept-multi-slot-personalization\n[examples]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/personalizer/azure-ai-personalizer/samples\n[azure_core_exceptions]: https://aka.ms/azsdk/python/core/docs#module-azure.core.exceptions\n[python_logging]: https://docs.python.org/3/library/logging.html\n[sdk_logging_docs]: https://docs.microsoft.com/azure/developer/python/sdk/azure-sdk-logging\n[azure_core_ref_docs]: https://aka.ms/azsdk/python/core/docs\n[cla]: https://cla.microsoft.com\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n",
        "repo_name": "personalizer/azure-ai-personalizer",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/personalizer/azure-ai-personalizer",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Policy Insights Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-policyinsights\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.policyinsights import PolicyInsightsClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = PolicyInsightsClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\nCode samples for this package can be found at [Policy Insights](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com and [Samples Repo](https://github.com/Azure-Samples/azure-samples-python-management/tree/main/samples/policyinsights)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-policyinsights%2FREADME.png)\n",
        "repo_name": "policyinsights/azure-mgmt-policyinsights",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/policyinsights/azure-mgmt-policyinsights",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Portal Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/)\nCode samples for this package can be found at [Portal Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-portal%2FREADME.png)\n",
        "repo_name": "portal/azure-mgmt-portal",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/portal/azure-mgmt-portal",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Power BI Dedicated Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/)\nCode samples for this package can be found at [Power BI Dedicated Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-powerbidedicated%2FREADME.png)\n",
        "repo_name": "powerbidedicated/azure-mgmt-powerbidedicated",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/powerbidedicated/azure-mgmt-powerbidedicated",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Power BI Embedded Management Client Library.\nThis package has been tested with Python 3.6+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n\n\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/power-bi)\nCode samples for this package can be found at [Power BI Embedded Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-powerbiembedded%2FREADME.png)\n",
        "repo_name": "powerbiembedded/azure-mgmt-powerbiembedded",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/powerbiembedded/azure-mgmt-powerbiembedded",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Purview Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/)\nCode samples for this package can be found at [Purview Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-purview%2FREADME.png)\n",
        "repo_name": "purview/azure-mgmt-purview",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/purview/azure-mgmt-purview",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Azure Purview Administration client library for Python\n\nAzure Purview is a fully managed cloud service.\n\n**Please rely heavily on the [service's documentation][account_product_documentation] to use this library**\n\n[Source code][source_code] |  [Package (PyPI)][account_pypi] | [API reference documentation][account_ref_docs]| [Product documentation][account_product_documentation]\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.6 or later is required to use this package.\n- You must have an [Azure subscription][azure_subscription] and a [Purview][purview_resource] to use this package.\n\n#### Create a Purview Resource\n\nFollow [these][purview_resource] instructions to create your Purview resource\n\n### Install the package\n\nInstall the Azure Purview Account client library for Python with [pip][pip]:\n\n```bash\npip install azure-purview-administration\n```\n\n### Authenticate the client\n\nTo use an [Azure Active Directory (AAD) token credential][authenticate_with_token],\nprovide an instance of the desired credential type obtained from the\n[azure-identity][azure_identity_credentials] library.\n\nTo authenticate with AAD, you must first [pip][pip] install [`azure-identity`][azure_identity_pip] and\n[enable AAD authentication on your Purview resource][enable_aad]\n\nAfter setup, you can choose which type of [credential][azure_identity_credentials] from azure.identity to use.\nAs an example, [DefaultAzureCredential][default_azure_credential]\ncan be used to authenticate the client:\n\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables:\nAZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET\n\nUse the returned token credential to authenticate the client:\n\n```python\nfrom azure.purview.administration.account import PurviewAccountClient\nfrom azure.purview.administration.metadatapolicies import PurviewMetadataPoliciesClient\nfrom azure.identity import DefaultAzureCredential\n\ncredential = DefaultAzureCredential()\nendpoint = \"https://<my-account-name>.purview.azure.com\"\naccount_client = PurviewAccountClient(endpoint=endpoint, credential=credential)\nmetadatapolicy_client = PurviewMetadataPoliciesClient(endpoint=endpoint, credential=credential)\n```\n\n## Key concepts\n\n### Client\n\nThe package contains two kinds of client: `PurviewAccountClient` and `PurviewMetadataPoliciesClient`. You could use them \nwith one package according to your requirements. \n\n## Examples\n\nThe following section shows you how to initialize and authenticate your client, then list all of your keys.\n\n- [Get Keys](#get-keys \"Get All Keys\")\n\n### Get Keys\n\n```python\nfrom azure.purview.administration.account import PurviewAccountClient\nfrom azure.identity import DefaultAzureCredential\n\ncredential = DefaultAzureCredential()\nclient = PurviewAccountClient(endpoint=\"https://<my-account-name>.purview.azure.com\", credential=credential)\nresponse = client.accounts.get_access_keys()\nprint(response)\n```\n\nThe following section shows you how to initialize and authenticate your client, then list all of your roles.\n\n- [List_Roles](#list-roles \"List Roles\")\n\n### List Roles\n\n```python\nfrom azure.purview.administration.metadatapolicies import PurviewMetadataPoliciesClient\nfrom azure.identity import DefaultAzureCredential\n\ncredential = DefaultAzureCredential()\nclient = PurviewMetadataPoliciesClient(endpoint=\"https://<my-account-name>.purview.azure.com\", credential=credential)\nresponse = client.metadata_roles.list()\nresult = [item for item in response]\nprint(result)\n```\n\n## Troubleshooting\n\n### General\n\nThe Purview client will raise exceptions if status code of your responses is not defined.\n\n### Logging\n\nThis library uses the standard\n[logging][python_logging] library for logging.\nBasic information about HTTP sessions (URLs, headers, etc.) is logged at INFO\nlevel.\n\nDetailed DEBUG level logging, including request/response bodies and unredacted\nheaders, can be enabled on a client with the `logging_enable` keyword argument:\n\n```python\nimport sys\nimport logging\nfrom azure.identity import DefaultAzureCredential\nfrom azure.purview.administration.account import PurviewAccountClient\n\n# Create a logger for the 'azure' SDK\nlogger = logging.getLogger('azure')\nlogger.setLevel(logging.DEBUG)\n\n# Configure a console output\nhandler = logging.StreamHandler(stream=sys.stdout)\nlogger.addHandler(handler)\n\nendpoint = \"https://<my-account-name>.purview.azure.com\"\ncredential = DefaultAzureCredential()\n\n# This client will log detailed information about its HTTP sessions, at DEBUG level\nclient = PurviewAccountClient(endpoint=endpoint, credential=credential, logging_enable=True)\n```\n\nSimilarly, `logging_enable` can enable detailed logging for a single call,\neven when it isn't enabled for the client:\n\n```python\nresult = client.accounts.get_access_keys(logging_enable=True)\n```\n\n## Next steps\n\nFor more generic samples, see our [client docs][request_builders_and_client].\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [cla.microsoft.com][cla].\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n\n[source_code]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/purview/\n[account_pypi]: https://pypi.org/project/azure-purview-catalog/#history\n[account_ref_docs]: https://azure.github.io/azure-sdk-for-python/\n[account_product_documentation]: https://azure.microsoft.com/services/purview/\n[azure_subscription]: https://azure.microsoft.com/free/\n[purview_resource]: https://docs.microsoft.com/azure/purview/create-catalog-portal\n[pip]: https://pypi.org/project/pip/\n[authenticate_with_token]: https://docs.microsoft.com/azure/cognitive-services/authentication?tabs=powershell#authenticate-with-an-authentication-token\n[azure_identity_credentials]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity#credentials\n[azure_identity_pip]: https://pypi.org/project/azure-identity/\n[default_azure_credential]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity#defaultazurecredential\n[enable_aad]: https://docs.microsoft.com/azure/purview/create-catalog-portal#add-a-security-principal-to-a-data-plane-role\n[python_logging]: https://docs.python.org/3.5/library/logging.html\n[cla]: https://cla.microsoft.com\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n[request_builders_and_client]: https://aka.ms/azsdk/python/protocol/quickstart\n",
        "repo_name": "purview/azure-purview-administration",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/purview/azure-purview-administration",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Azure Purview Catalog client library for Python\n\nAzure Purview Catalog is a fully managed cloud service whose users can discover the data sources they need and understand the data sources they find. At the same time, Data Catalog helps organizations get more value from their existing investments.\n\n- Search for data using technical or business terms\n- Browse associated technical, business, semantic, and operational metadata\n- Identify the sensitivity level of data.\n\n**Please rely heavily on the [service's documentation][catalog_product_documentation] and our [client docs][request_builders_and_client] to use this library**\n\n[Source code][source_code] | [Package (PyPI)][catalog_pypi] | [API reference documentation][catalog_ref_docs]| [Product documentation][catalog_product_documentation]\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.6 or later is required to use this package.\n- You must have an [Azure subscription][azure_subscription] and a [Purview][purview_resource] to use this package.\n\n#### Create a Purview Resource\n\nFollow [these][purview_resource] instructions to create your Purview resource\n\n### Install the package\n\nInstall the Azure Purview Catalog client library for Python with [pip][pip]:\n\n```bash\npip install azure-purview-catalog\n```\n\n### Authenticate the client\n\nTo use an [Azure Active Directory (AAD) token credential][authenticate_with_token],\nprovide an instance of the desired credential type obtained from the\n[azure-identity][azure_identity_credentials] library.\n\nTo authenticate with AAD, you must first [pip][pip] install [`azure-identity`][azure_identity_pip] and\n[enable AAD authentication on your Purview resource][enable_aad]\n\nAfter setup, you can choose which type of [credential][azure_identity_credentials] from azure.identity to use.\nAs an example, [DefaultAzureCredential][default_azure_credential]\ncan be used to authenticate the client:\n\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables:\nAZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET\n\nUse the returned token credential to authenticate the client:\n\n```python\nfrom azure.purview.catalog import PurviewCatalogClient\nfrom azure.identity import DefaultAzureCredential\n\ncredential = DefaultAzureCredential()\nclient = PurviewCatalogClient(endpoint=\"https://<my-account-name>.purview.azure.com\", credential=credential)\n```\n\n## Key concepts\n\n### Client\n\nThis package offers request builders so you can build http requests and send these requests to the service using the `send_request` method.\nFor more information on how to use request builders and our clients, see [here][request_builders_and_client].\n\n## Examples\n\nThe following section shows you how to initialize and authenticate your client, then get all of your type-defs.\n\n- [Get All Type Definitions](#get-all-type-definitions \"Get All Type Definitions\")\n\n### Get All Type Definitions\n\n```python\nfrom azure.purview.catalog import PurviewCatalogClient\nfrom azure.identity import DefaultAzureCredential\nfrom azure.core.exceptions import HttpResponseError\n\ncredential = DefaultAzureCredential()\nclient = PurviewCatalogClient(endpoint=\"https://<my-account-name>.purview.azure.com\", credential=credential)\ntry:\n    response = client.types.get_all_type_definitions()\n    # print out all of your entity definitions\n    print(response['entityDefs'])\n\nexcept HttpResponseError as e:\n    print(e)\n```\n\n## Troubleshooting\n\n### General\n\nThe Purview Catalog client will raise exceptions defined in [Azure Core][azure_core] if you call `.raise_for_status()` on your responses.\n\n### Logging\n\nThis library uses the standard\n[logging][python_logging] library for logging.\nBasic information about HTTP sessions (URLs, headers, etc.) is logged at INFO\nlevel.\n\nDetailed DEBUG level logging, including request/response bodies and unredacted\nheaders, can be enabled on a client with the `logging_enable` keyword argument:\n\n```python\nimport sys\nimport logging\nfrom azure.identity import DefaultAzureCredential\nfrom azure.purview.catalog import PurviewCatalogClient\n\n# Create a logger for the 'azure' SDK\nlogger = logging.getLogger('azure')\nlogger.setLevel(logging.DEBUG)\n\n# Configure a console output\nhandler = logging.StreamHandler(stream=sys.stdout)\nlogger.addHandler(handler)\n\nendpoint = \"https://<my-account-name>.purview.azure.com\"\ncredential = DefaultAzureCredential()\n\n# This client will log detailed information about its HTTP sessions, at DEBUG level\nclient = PurviewCatalogClient(endpoint=endpoint, credential=credential, logging_enable=True)\n```\n\nSimilarly, `logging_enable` can enable detailed logging for a single `send_request` call,\neven when it isn't enabled for the client:\n\n```python\nresult = client.types.get_all_type_definitions(logging_enable=True)\n```\n\n## Next steps\n\nFor more generic samples, see our [client docs][request_builders_and_client].\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [cla.microsoft.com][cla].\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n\n[source_code]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/purview/azure-purview-catalog/azure/purview/catalog\n[catalog_pypi]: https://aka.ms/azsdk/python/purviewcatalog/pypi\n[catalog_ref_docs]: https://aka.ms/azsdk/python/purviewcatalog/ref-docs\n[catalog_product_documentation]: https://azure.microsoft.com/services/purview/\n[azure_subscription]: https://azure.microsoft.com/free/\n[purview_resource]: https://docs.microsoft.com/azure/purview/create-catalog-portal\n[pip]: https://pypi.org/project/pip/\n[authenticate_with_token]: https://docs.microsoft.com/azure/cognitive-services/authentication?tabs=powershell#authenticate-with-an-authentication-token\n[azure_identity_credentials]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity#credentials\n[azure_identity_pip]: https://pypi.org/project/azure-identity/\n[default_azure_credential]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity#defaultazurecredential\n[request_builders_and_client]: https://aka.ms/azsdk/python/protocol/quickstart\n[enable_aad]: https://docs.microsoft.com/azure/purview/create-catalog-portal#add-a-security-principal-to-a-data-plane-role\n[azure_core]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/README.md\n[python_logging]: https://docs.python.org/3.5/library/logging.html\n[cla]: https://cla.microsoft.com\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n",
        "repo_name": "purview/azure-purview-catalog",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/purview/azure-purview-catalog",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Azure Purview Scanning client library for Python\n\nAzure Purview Scanning is a fully managed cloud service whose users can scan your data into your data estate (also known as your **catalog**). Scanning is a process by which the catalog connects directly to a data source on a user-specified schedule.\n\n- Scan your data into your catalog\n- Examine your data\n- Extract schemas from your data\n\n**Please rely heavily on the [service's documentation][scanning_product_documentation] and our [client docs][request_builders_and_client] to use this library**\n\n[Source code][source_code] | [Package (PyPI)][scanning_pypi] | [API reference documentation][scanning_ref_docs]| [Product documentation][scanning_product_documentation]\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.6 or later is required to use this package.\n- You must have an [Azure subscription][azure_subscription] and a [Purview][purview_resource] to use this package.\n\n#### Create a Purview Resource\n\nFollow [these][purview_resource] instructions to create your Purview resource\n\n### Install the package\n\nInstall the Azure Purview Scanning client library for Python with [pip][pip]:\n\n```bash\npip install azure-purview-scanning\n```\n\n### Authenticate the client\n\nTo use an [Azure Active Directory (AAD) token credential][authenticate_with_token],\nprovide an instance of the desired credential type obtained from the\n[azure-identity][azure_identity_credentials] library.\n\nTo authenticate with AAD, you must first [pip][pip] install [`azure-identity`][azure_identity_pip] and\n[enable AAD authentication on your Purview resource][enable_aad]\n\nAfter setup, you can choose which type of [credential][azure_identity_credentials] from azure.identity to use.\nAs an example, [DefaultAzureCredential][default_azure_credential]\ncan be used to authenticate the client:\n\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables:\nAZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET\n\nUse the returned token credential to authenticate the client:\n\n```python\nfrom azure.purview.scanning import PurviewScanningClient\nfrom azure.identity import DefaultAzureCredential\n\ncredential = DefaultAzureCredential()\nclient = PurviewScanningClient(endpoint=\"https://<my-account-name>.scan.purview.azure.com\", credential=credential)\n```\n\n## Key concepts\n\n### Client\n\nThis package offers request builders so you can build http requests and send these requests to the service using the `send_request` method.\nFor more information on how to use request builders and our clients, see [here][request_builders_and_client].\n\n## Examples\n\nThe following section shows you how to initialize and authenticate your client, then list all of your data sources.\n\n- [List All Data Sources](#list-all-data-sources \"List All Data Sources\")\n\n### List All Data Sources\n\n```python\nfrom azure.purview.scanning import PurviewScanningClient\nfrom azure.identity import DefaultAzureCredential\nfrom azure.core.exceptions import HttpResponseError\n\ncredential = DefaultAzureCredential()\nclient = PurviewScanningClient(endpoint=\"https://<my-account-name>.scan.purview.azure.com\", credential=credential)\ntry:\n    response = client.data_sources.list_all()\n    result = [item for item in response]\n    print(result)\nexcept HttpResponseError as e:\n    print(e)\n```\n\n## Troubleshooting\n\n### General\n\nThe Purview Scanning client will raise exceptions defined in [Azure Core][azure_core] if you call `.raise_for_status()` on your responses.\n\n### Logging\n\nThis library uses the standard\n[logging][python_logging] library for logging.\nBasic information about HTTP sessions (URLs, headers, etc.) is logged at INFO\nlevel.\n\nDetailed DEBUG level logging, including request/response bodies and unredacted\nheaders, can be enabled on a client with the `logging_enable` keyword argument:\n\n```python\nimport sys\nimport logging\nfrom azure.identity import DefaultAzureCredential\nfrom azure.purview.scanning import PurviewScanningClient\n\n# Create a logger for the 'azure' SDK\nlogger = logging.getLogger('azure')\nlogger.setLevel(logging.DEBUG)\n\n# Configure a console output\nhandler = logging.StreamHandler(stream=sys.stdout)\nlogger.addHandler(handler)\n\nendpoint = \"https://<my-account-name>.scan.purview.azure.com\"\ncredential = DefaultAzureCredential()\n\n# This client will log detailed information about its HTTP sessions, at DEBUG level\nclient = PurviewScanningClient(endpoint=endpoint, credential=credential, logging_enable=True)\n```\n\nSimilarly, `logging_enable` can enable detailed logging for a single `send_request` call,\neven when it isn't enabled for the client:\n\n```python\nresult = client.data_sources.list_all(logging_enable=True)\n```\n\n## Next steps\n\nFor more generic samples, see our [client docs][request_builders_and_client].\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [cla.microsoft.com][cla].\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n\n[source_code]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/purview/azure-purview-scanning/azure/purview/scanning\n[scanning_pypi]: https://aka.ms/azsdk/python/purviewscanning/pypi\n[scanning_ref_docs]: https://aka.ms/azsdk/python/purviewscanning/ref-docs\n[scanning_product_documentation]: https://azure.microsoft.com/services/purview/\n[azure_subscription]: https://azure.microsoft.com/free/\n[purview_resource]: https://docs.microsoft.com/azure/purview/create-catalog-portal\n[pip]: https://pypi.org/project/pip/\n[authenticate_with_token]: https://docs.microsoft.com/azure/cognitive-services/authentication?tabs=powershell#authenticate-with-an-authentication-token\n[azure_identity_credentials]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity#credentials\n[azure_identity_pip]: https://pypi.org/project/azure-identity/\n[default_azure_credential]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity#defaultazurecredential\n[request_builders_and_client]: https://aka.ms/azsdk/python/protocol/quickstart\n[enable_aad]: https://docs.microsoft.com/azure/purview/create-catalog-portal#add-a-security-principal-to-a-data-plane-role\n[azure_core]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/README.md\n[python_logging]: https://docs.python.org/3.5/library/logging.html\n[cla]: https://cla.microsoft.com\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n",
        "repo_name": "purview/azure-purview-scanning",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/purview/azure-purview-scanning",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Azure Purview Sharing client library for Python\n\nMicrosoft Purview Share is a fully managed cloud service.\n\n**Please rely heavily on the [service's documentation][sharing_product_documentation] and our [protocol client docs][protocol_client_quickstart] to use this library**\n\n[Source code][source_code] | [Package (PyPI)][client_pypi_package] | [Product documentation][sharing_product_documentation]\n\n## Getting started\n\n### Install the package\n\nInstall the Azure Purview Sharing client library for Python with [pip][pip]:\n\n```bash\npip install azure-purview-sharing\n```\n\n### Prerequisites\n\n- You must have an [Azure subscription][azure_subscription] and a [Purview resource][purview_resource] to use this package.\n- Python 3.6 or later is required to use this package.\n\n### Authenticate the client\n\n#### Using Azure Active Directory\n\nThis document demonstrates using [DefaultAzureCredential][default_cred_ref] to authenticate via Azure Active Directory. However, any of the credentials offered by the [azure_identity][azure_identity] will be accepted.  See the [azure_identity][azure_identity] documentation for more information about other credentials.\n\nOnce you have chosen and configured your credential, you can create instances of the `PurviewSharingClient`.\n\n```python\nfrom azure.purview.sharing import PurviewSharingClient\nfrom azure.identity import DefaultAzureCredential\n\ncredential = DefaultAzureCredential()\nclient = PurviewSharingClient(endpoint=\"https://<my-account-name>.purview.azure.com\", credential=credential)\n```\n\n## Key concepts\n\n## Examples\n\nThe following section shows you how to initialize and authenticate your client and share data.\n\n### Create share\n\n```python Snippet:create_a_sent_share\nimport os, uuid, json\n\nfrom azure.purview.sharing import PurviewSharingClient\nfrom azure.identity import DefaultAzureCredential\n\nendpoint = os.environ[\"ENDPOINT\"]\ncredential = DefaultAzureCredential()\n\nclient = PurviewSharingClient(endpoint=endpoint, credential=credential)\n\nsent_share_id = uuid.uuid4()\n\nartifact = {\n    \"properties\": {\n        \"paths\": [\n            {\n                \"containerName\": \"container-name\",\n                \"receiverPath\": \"shared-file-name.txt\",\n                \"senderPath\": \"original/file-name.txt\"\n            }\n        ]\n    },\n    \"storeKind\": \"AdlsGen2Account\",\n    \"storeReference\": {\n        \"referenceName\": \"/subscriptions/{subscription-id}/resourceGroups/provider-storage-rg/providers/Microsoft.Storage/storageAccounts/providerstorage\",\n        \"type\": \"ArmResourceReference\"\n    }\n}\n\nsent_share = {\n    \"properties\": {\n        \"artifact\": artifact,\n        \"displayName\": \"sampleShare\",\n        \"description\": \"A sample share\"\n    },\n    \"shareKind\": \"InPlace\"\n}\n\nrequest = client.sent_shares.begin_create_or_replace(\n    str(sent_share_id),\n    sent_share=sent_share)\n\nresponse = request.result()\nprint(response)\n```\n\n### Get sent share\n\n```python Snippet:get_a_sent_share\nimport os, uuid\n\nfrom azure.purview.sharing import PurviewSharingClient\nfrom azure.identity import DefaultAzureCredential\n\nendpoint = os.environ[\"ENDPOINT\"]\ncredential = DefaultAzureCredential()\nsent_share_id = uuid.uuid4()\n\nclient = PurviewSharingClient(endpoint=endpoint, credential=credential)\n\nretrieved_sent_share = client.sent_shares.get(sent_share_id=str(sent_share_id))\nprint(retrieved_sent_share)\n```\n\n### List sent shares\n\n```python Snippet:get_all_sent_shares\nimport os\n\nfrom azure.purview.sharing import PurviewSharingClient\nfrom azure.identity import DefaultAzureCredential\n\nendpoint = os.environ[\"ENDPOINT\"]\ncredential = DefaultAzureCredential()\n\nclient = PurviewSharingClient(endpoint=endpoint, credential=credential)\n\nprovider_storage_account_resource_id = \"/subscriptions/{subscription-id}/resourceGroups/provider-storage-rg/providers/Microsoft.Storage/storageAccounts/providerstorage\"\n\nlist_request = client.sent_shares.list(\n    reference_name=provider_storage_account_resource_id,\n    orderby=\"properties/createdAt desc\")\n\nfor list_response in list_request:\n    print(list_response)\n```\n\n### Create sent share invitation\n\n```python Snippet:send_a_user_invitation\nimport os\n\nfrom azure.purview.sharing import PurviewSharingClient\nfrom azure.identity import DefaultAzureCredential\nfrom datetime import date\n\nendpoint = os.environ[\"ENDPOINT\"]\ncredential = DefaultAzureCredential()\n\nclient = PurviewSharingClient(endpoint=endpoint, credential=credential)\n\nsent_share_id = uuid.uuid4()\nsent_share_invitation_id = uuid.uuid4()\n\nconsumerEmail = \"consumer@contoso.com\"\ntoday = date.today()\ninvitation = {\n    \"invitationKind\": \"User\",\n    \"properties\": {\n        \"targetEmail\": consumerEmail,\n        \"notify\": \"true\",\n        \"expirationDate\": date(today.year+1,today.month,today.day).strftime(\"%Y-%m-%d\") + \" 00:00:00\"\n    }\n}\n\ninvitation_request = client.sent_shares.create_invitation(\n    sent_share_id=str(sent_share_id),\n    sent_share_invitation_id=str(sent_share_invitation_id),\n    sent_share_invitation=invitation)\n\ninvitation_response = invitation_request.result()\ncreated_invitation = json.loads(invitation_response)\nprint(created_invitation)\n```\n\n### List sent share invitations\n\n```python Snippet:view_sent_invitations\nimport os, uuid, json\n\nfrom azure.purview.sharing import PurviewSharingClient\nfrom azure.identity import DefaultAzureCredential\n\nendpoint = os.environ[\"ENDPOINT\"]\ncredential = DefaultAzureCredential()\n\nclient = PurviewSharingClient(endpoint=endpoint, credential=credential)\n\nsent_share_id = uuid.uuid4()\n\nlist_request = client.sent_shares.list_invitations(sent_share_id=str(sent_share_id))\n\nfor list_response in list_request:\n    print(list_response)\n```\n\n### List received shares\n\n```python Snippet:get_all_detached_received_shares\nimport os\n\nfrom azure.purview.sharing import PurviewSharingClient\nfrom azure.identity import DefaultAzureCredential\n\nendpoint = os.environ[\"ENDPOINT\"]\ncredential = DefaultAzureCredential()\n\nclient = PurviewSharingClient(endpoint=endpoint,credential=credential)\n\nlist_detached_response = client.received_shares.list_detached(orderby=\"properties/createdAt desc\")\nprint(list_detached_response)\n```\n\n### Attach a received share\n\n```python Snippet:attach_a_received_share\nimport os, json\n\nfrom azure.purview.sharing import PurviewSharingClient\nfrom azure.identity import DefaultAzureCredential\n\nendpoint = os.environ[\"ENDPOINT\"]\ncredential = DefaultAzureCredential()\n\nclient = PurviewSharingClient(endpoint=endpoint,credential=credential)\n\nconsumer_storage_account_resource_id = \"/subscriptions/{subscription-id}/resourceGroups/consumer-storage-rg/providers/Microsoft.Storage/storageAccounts/consumerstorage\"\n\nlist_detached_response = client.received_shares.list_detached(orderby=\"properties/createdAt desc\")\nreceived_share = next(x for x in list_detached_response)\n\nstore_reference = {\n    \"referenceName\": consumer_storage_account_resource_id,\n    \"type\": \"ArmResourceReference\"\n}\n\nsink = {\n    \"properties\": {\n        \"containerName\": \"container-test\",\n        \"folder\": \"folder-test\",\n        \"mountPath\": \"mountPath-test\",\n    },\n    \"storeKind\": \"AdlsGen2Account\",\n    \"storeReference\": store_reference\n}\n\nreceived_share['properties']['sink'] = sink\n\nupdate_request = client.received_shares.begin_create_or_replace(\n    received_share['id'],\n    content_type=\"application/json\",\n    content=json.dumps(received_share))\n\nupdate_response = update_request.result()\nprint(update_response)\n```\n\n### Get received share\n\n```python Snippet:get_a_received_share\nimport os\n\nfrom azure.purview.sharing import PurviewSharingClient\nfrom azure.identity import DefaultAzureCredential\n\nendpoint = os.environ[\"ENDPOINT\"]\ncredential = DefaultAzureCredential()\n\nclient = PurviewSharingClient(endpoint=endpoint,credential=credential)\n\nlist_detached_response = client.received_shares.list_detached(orderby=\"properties/createdAt desc\")\nlist_detached = json.loads(list_detached_response)\nreceived_share = list_detached[0]\n\nget_share_response = client.received_shares.get(received_share_id=received_share['id'])\nretrieved_share = json.loads(get_share_response)\nprint(retrieved_share)\n```\n\n### List attached shares\n\n```python Snippet:list_attached_received_shares\nimport os\n\nfrom azure.purview.sharing import PurviewSharingClient\nfrom azure.identity import DefaultAzureCredential\n\nendpoint = os.environ[\"ENDPOINT\"]\ncredential = DefaultAzureCredential()\n\nclient = PurviewSharingClient(endpoint=endpoint,credential=credential)\n\nconsumer_storage_account_resource_id = \"/subscriptions/{subscription-id}/resourceGroups/consumer-storage-rg/providers/Microsoft.Storage/storageAccounts/consumerstorage\"\n\nlist_attached_response = client.received_shares.list_attached(\n    reference_name=consumer_storage_account_resource_id,\n    orderby=\"properties/createdAt desc\")\nprint(list_attached_response)\n```\n\n### Delete received share\n\n```python Snippet:delete_a_received_share\nimport os\n\nfrom azure.purview.sharing import PurviewSharingClient\nfrom azure.identity import DefaultAzureCredential\n\nendpoint = os.environ[\"ENDPOINT\"]\ncredential = DefaultAzureCredential()\n\nclient = PurviewSharingClient(endpoint=endpoint,credential=credential)\n\ndelete_received_share_request = client.received_shares.begin_delete(received_share_id=received_share['id'])\ndelete_received_share_response = delete_received_share_request.result()\nprint(delete_received_share_response)\n```\n\n### Delete sent share\n\n```python Snippet:delete_a_sent_share\nimport os\n\nfrom azure.purview.sharing import PurviewSharingClient\nfrom azure.identity import DefaultAzureCredential\n\nendpoint = os.environ[\"ENDPOINT\"]\ncredential = DefaultAzureCredential()\n\nclient = PurviewSharingClient(endpoint=endpoint,credential=credential)\n\nsent_share_id=\"885E60CB-2001-4192-B95D-B98CE316C783\"\n\ndelete_request = client.sent_shares.begin_delete(sent_share_id=str(sent_share_id))\ndelete_response = delete_request.result()\nprint(delete_response)\n```\n\n## Troubleshooting\n\n### General\n\nThe Purview Catalog client will raise exceptions defined in [Azure Core][azure_core] if you call `.raise_for_status()` on your responses.\n\n### Logging\n\nThis library uses the standard\n[logging][python_logging] library for logging.\nBasic information about HTTP sessions (URLs, headers, etc.) is logged at INFO\nlevel.\n\nDetailed DEBUG level logging, including request/response bodies and unredacted\nheaders, can be enabled on a client with the `logging_enable` keyword argument:\n\n```python\nimport sys\nimport logging\nfrom azure.identity import DefaultAzureCredential\nfrom azure.purview.sharing import PurviewSharingClient\n\n# Create a logger for the 'azure' SDK\nlogger = logging.getLogger('azure')\nlogger.setLevel(logging.DEBUG)\n\n# Configure a console output\nhandler = logging.StreamHandler(stream=sys.stdout)\nlogger.addHandler(handler)\n\nendpoint = \"https://<my-account-name>.share.purview.azure.com\"\ncredential = DefaultAzureCredential()\n\n# This client will log detailed information about its HTTP sessions, at DEBUG level\nclient = PurviewSharingClient(endpoint=endpoint, credential=credential, logging_enable=True)\n```\n\nSimilarly, `logging_enable` can enable detailed logging for a single `send_request` call,\neven when it isn't enabled for the client:\n\n```python\nresult = client.types.get_all_type_definitions(logging_enable=True)\n```\n\n## Next steps\n\nFor more generic samples, see our [samples][samples].\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [cla.microsoft.com][cla].\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n\n[source_code]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/purview/azure-purview-sharing/azure/purview/sharing\n[client_pypi_package]: https://aka.ms/azsdk/python/purviewsharing/pypi\n[sharing_ref_docs]: https://aka.ms/azsdk/python/purviewcatalog/ref-docs\n[sharing_product_documentation]: https://azure.microsoft.com/services/purview/\n[azure_subscription]: https://azure.microsoft.com/free/\n[purview_resource]: https://docs.microsoft.com/azure/purview\n[pip]: https://pypi.org/project/pip/\n[authenticate_with_token]: https://docs.microsoft.com/azure/cognitive-services/authentication?tabs=powershell#authenticate-with-an-authentication-token\n[azure_identity_credentials]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity#credentials\n[azure_identity_pip]: https://pypi.org/project/azure-identity/\n[default_azure_credential]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity#defaultazurecredential\n[request_builders_and_client]: https://aka.ms/azsdk/python/protocol/quickstart\n[enable_aad]: https://docs.microsoft.com/azure/purview/\n[azure_core]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/README.md\n[python_logging]: https://docs.python.org/3.5/library/logging.html\n[cla]: https://cla.microsoft.com\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n[samples]: https://github.com/yamanwahsheh/azure-sdk-for-python/tree/yaman/share-v2-python-tests-and-samples/sdk/purview/azure-purview-sharing/samples",
        "repo_name": "purview/azure-purview-sharing",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/purview/azure-purview-sharing",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Azure Purview Workflow Service client library for Python\n\nWorkflows are automated, repeatable business processes that users can create within Microsoft Purview to validate and orchestrate CUD (create, update, delete) operations on their data entities. Enabling these processes allow organizations to track changes, enforce policy compliance, and ensure quality data across their data landscape.\n\nUse the client library for Purview Workflow to:\n\n- Manage workflows\n- Submit user requests and monitor workflow runs\n- View and respond to workflow tasks\n\nFor more details about how to use workflow, please refer to the [service documentation][product_documentation]\n\n## Getting started\n\n### Prequisites\n\n- Python 3.7 or later is required to use this package.\n- You need an [Azure subscription][azure_sub] to use this package.\n- An existing Azure [Purview account][purview_resource].\n  \n### Authentication\n\nTo authenticate with AAD, you must first [pip][pip] install [`azure-identity`][azure_identity_pip]\n\nAfter setup, you can choose which type of [credential][azure_identity_credentials] from azure.identity to use.\nFor Workflow service, it is recommended that use the [UsernamePasswordCredential][username_password_credential] to authenticate the client:\n\nSet the values of  client ID and tenant ID of the AAD application, set the values username and password of the AAD user as environment variables:\n`AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `USERNAME` and `PASSWORD`\n\nUse the returned token credential to authenticate the client:\n\n```python\nfrom azure.purview.workflow import PurviewWorkflowClient\nfrom azure.identity import UsernamePasswordCredential\nusername = os.getenv(\"USERNAME\")\npassword = os.getenv(\"PASSWORD\")\nclient_id = os.getenv(\"AZURE_CLIENT_ID\")\ntenant_id = os.getenv(\"AZURE_TENANT_ID\")\ncredential = UsernamePasswordCredential(client_id=client_id, username=username, password=password, tenant_id=tenant_id)\nclient = PurviewWorkflowClient(endpoint='<endpoint>', credential=credential)\n```\n\n## Examples\n\nThe following section shows you how to initialize and authenticate your client, then list all workflows.\n\n- [List All Workflows](#list-all-workflows \"List All Workflows\")\n\n### List All Workflows\n\n```python\nfrom azure.purview.workflow import PurviewWorkflowClient\nfrom azure.identity import UsernamePasswordCredential\nusername = os.getenv(\"USERNAME\")\npassword = os.getenv(\"PASSWORD\")\nclient_id = os.getenv(\"AZURE_CLIENT_ID\")\ntenant_id = os.getenv(\"AZURE_TENANT_ID\")\ncredential = UsernamePasswordCredential(client_id=client_id, username=username, password=password, tenant_id=tenant_id)\nclient = PurviewWorkflowClient(endpoint='<endpoint>', credential=credential)\ntry:\n    response = client.list_workflows()\n    for item in response:\n    print(item)\nexcept HttpResponseError as e:\n    print('service responds error: {}'.format(e.response.json()))\n```\n## Key concepts\n\n## Troubleshooting\n\n## Contributing\n\n## Next steps\n\nThis project welcomes contributions and suggestions. Most contributions require\nyou to agree to a Contributor License Agreement (CLA) declaring that you have\nthe right to, and actually do, grant us the rights to use your contribution.\nFor details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether\nyou need to provide a CLA and decorate the PR appropriately (e.g., label,\ncomment). Simply follow the instructions provided by the bot. You will only\nneed to do this once across all repos using our CLA.\n\nThis project has adopted the\n[Microsoft Open Source Code of Conduct][code_of_conduct]. For more information,\nsee the Code of Conduct FAQ or contact opencode@microsoft.com with any\nadditional questions or comments.\n\n<!-- LINKS -->\n[product_documentation]: https://learn.microsoft.com/azure/purview/concept-workflow\n[purview_resource]: https://docs.microsoft.com/azure/purview/create-catalog-portal\n[azure_identity_credentials]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity#credentials\n[username_password_credential]: https://learn.microsoft.com/python/api/azure-identity/azure.identity.usernamepasswordcredential?view=azure-python\n[azure_sub]: https://azure.microsoft.com/free/\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[azure_identity_pip]: https://pypi.org/project/azure-identity/\n[pip]: https://pypi.org/project/pip/",
        "repo_name": "purview/azure-purview-workflow",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/purview/azure-purview-workflow",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Quantum Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/)\nCode samples for this package can be found at [Quantum Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-quantum%2FREADME.png)\n",
        "repo_name": "quantum/azure-mgmt-quantum",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/quantum/azure-mgmt-quantum",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Qumulo Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-qumulo\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.qumulo import QumuloMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = QumuloMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\nCode samples for this package can be found at:\n- [Search Qumulo Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com\n- [Azure Python Mgmt SDK Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-qumulo%2FREADME.png)\n",
        "repo_name": "qumulo/azure-mgmt-qumulo",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/qumulo/azure-mgmt-qumulo",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Quota Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-quota\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.quota import QuotaMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = QuotaMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\nCode samples for this package can be found at:\n- [Search Quota Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com\n- [Azure Python Mgmt SDK Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-quota%2FREADME.png)\n",
        "repo_name": "quota/azure-mgmt-quota",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/quota/azure-mgmt-quota",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure RDBMS Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-rdbms\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.rdbms.mysql import MySQLManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = MySQLManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\nCode samples for this package can be found at:\n- [Search RDBMS Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com\n- [Azure Python Mgmt SDK Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-rdbms%2FREADME.png)\n",
        "repo_name": "rdbms/azure-mgmt-rdbms",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/rdbms/azure-mgmt-rdbms",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Recovery Services Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-recoveryservices\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.recoveryservices import RecoveryServicesClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = RecoveryServicesClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\nCode samples for this package can be found at:\n- [Search Recovery Services](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com\n- [Azure Python Mgmt SDK Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-recoveryservices%2FREADME.png)\n",
        "repo_name": "recoveryservices/azure-mgmt-recoveryservices",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/recoveryservices/azure-mgmt-recoveryservices",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Recovery Services Backup Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-recoveryservicesbackup\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.recoveryservicesbackup.activestamp import RecoveryServicesBackupClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = RecoveryServicesBackupClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\nCode samples for this package can be found at:\n- [Search Recovery Services Backup Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com\n- [Azure Python Mgmt SDK Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-recoveryservicesbackup%2FREADME.png)\n",
        "repo_name": "recoveryservices/azure-mgmt-recoveryservicesbackup",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/recoveryservices/azure-mgmt-recoveryservicesbackup",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Recovery Services Site Recovery Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/)\nCode samples for this package can be found at [Recovery Services Site Recovery Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-recoveryservicessiterecovery%2FREADME.png)\n",
        "repo_name": "recoveryservices/azure-mgmt-recoveryservicessiterecovery",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/recoveryservices/azure-mgmt-recoveryservicessiterecovery",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Red Hat Openshift Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-redhatopenshift\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.redhatopenshift import AzureRedHatOpenShiftClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = AzureRedHatOpenShiftClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\n\nCode samples for this package can be found at [Red Hat Openshift Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com and [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-redhatopenshift%2FREADME.png)\n",
        "repo_name": "redhatopenshift/azure-mgmt-redhatopenshift",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/redhatopenshift/azure-mgmt-redhatopenshift",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Redis Cache Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/redis)\nCode samples for this package can be found at [Redis Cache Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://github.com/Azure-Samples/azure-samples-python-management/tree/main/samples/redis)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-redis%2FREADME.png)\n",
        "repo_name": "redis/azure-mgmt-redis",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/redis/azure-mgmt-redis",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Redis Enterprise Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-redisenterprise\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.redisenterprise import RedisEnterpriseManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = RedisEnterpriseManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\nCode samples for this package can be found at:\n- [Search Redis Enterprise Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com\n- [Azure Python Mgmt SDK Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-redisenterprise%2FREADME.png)\n",
        "repo_name": "redisenterprise/azure-mgmt-redisenterprise",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/redisenterprise/azure-mgmt-redisenterprise",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure MyService Management Client Library.\nThis package has been tested with Python 3.6+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n\n\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/)\nCode samples for this package can be found at [MyService Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-regionmove%2FREADME.png)\n",
        "repo_name": "regionmove/azure-mgmt-regionmove",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/regionmove/azure-mgmt-regionmove",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Relay Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/relay)\nCode samples for this package can be found at [Relay](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://github.com/Azure-Samples/azure-samples-python-management/tree/main/samples/relay)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-relay%2FREADME.png)\n",
        "repo_name": "relay/azure-mgmt-relay",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/relay/azure-mgmt-relay",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "[![Build Status](https://dev.azure.com/azure-sdk/public/_apis/build/status/azure-sdk-for-python.client?branchName=master)](https://dev.azure.com/azure-sdk/public/_build/latest?definitionId=46?branchName=master)\n\n# Azure Remote Rendering client library for Python\n\nAzure Remote Rendering (ARR) is a service that enables you to render high-quality, interactive 3D content in the cloud and stream it in real time to devices, such as the HoloLens 2.\n\nThis SDK offers functionality to convert assets to the format expected by the runtime, and also to manage\nthe lifetime of remote rendering sessions.\n\nThis SDK supports version \"2021-01-01\" of the [Remote Rendering REST API](https://docs.microsoft.com/rest/api/mixedreality/2021-01-01/remote-rendering).\n\n> NOTE: Once a session is running, a client application will connect to it using one of the \"runtime SDKs\".\n> These SDKs are designed to best support the needs of an interactive application doing 3d rendering.\n> They are available in ([.net](https://docs.microsoft.com/dotnet/api/microsoft.azure.remoterendering)\n> or ([C++](https://docs.microsoft.com/cpp/api/remote-rendering/)).\n\n[Product documentation](https://docs.microsoft.com/azure/remote-rendering/)\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Getting started\n\n## Prerequisites\n\nYou will need an [Azure subscription](https://azure.microsoft.com/free/dotnet/) and an [Azure Remote Rendering account](https://docs.microsoft.com/azure/remote-rendering/how-tos/create-an-account) to use this package.\n\nIn order to follow this tutorial it is highly recommended that you [link your storage account with your ARR account](https://docs.microsoft.com/azure/remote-rendering/how-tos/create-an-account#link-storage-accounts).\n\n## Install the package\n\nInstall the Azure Remote Rendering client library for Python with [pip][pip]:\n\n```bash\npip install --pre azure-mixedreality-remoterendering\n```\n\n## Create and authenticate the client\n\nConstructing a remote rendering client requires an authenticated account, and a remote rendering endpoint.\nFor an account created in the eastus region, the account domain will have the form \"eastus.mixedreality.azure.com\".\nThere are several different forms of authentication:\n\n- Account Key authentication\n  - Account keys enable you to get started quickly with using Azure Remote Rendering. But before you deploy your application to production, we recommend that you update your app to use Azure AD authentication.\n- Azure Active Directory (AD) token authentication\n  - If you're building an enterprise application and your company is using Azure AD as its identity system, you can use user-based Azure AD authentication in your app. You then grant access to your Azure Remote Rendering accounts by using your existing Azure AD security groups. You can also grant access directly to users in your organization.\n  - Otherwise, we recommend that you obtain Azure AD tokens from a web service that supports your app. We recommend this method for production applications because it allows you to avoid embedding the credentials for access in your client application.\n\nSee [here](https://docs.microsoft.com/azure/remote-rendering/how-tos/authentication) for detailed instructions and information.\n\nIn all the following examples, the client is constructed with a `endpoint` parameter.\nThe available endpoints correspond to regions, and the choice of endpoint determines the region in which the service performs its work.\nAn example is `https://remoterendering.eastus2.mixedreality.azure.com`.\n\nA full list of endpoints in supported regions can be found in the [Azure Remote Rendering region list](https://docs.microsoft.com/azure/remote-rendering/reference/regions).\n\n> NOTE: For converting assets, it is preferable to pick a region close to the storage containing the assets.\n\n> NOTE: For rendering, it is strongly recommended that you pick the closest region to the devices using the service.\n> The time taken to communicate with the server impacts the quality of the experience.\n\n### Authenticating with account key authentication\n\nUse the `AzureKeyCredential` object to use an account identifier and account key to authenticate:\n\n```python\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.mixedreality.remoterendering import RemoteRenderingClient\n\naccount_id = \"<ACCOUNT_ID>\"\naccount_domain = \"<ACCOUNT_DOMAIN>\"\naccount_key = \"<ACCOUNT_KEY>\"\narr_endpoint = \"<ARR_ENDPOINT>\"\n\nkey_credential = AzureKeyCredential(account_key)\nclient = RemoteRenderingClient(\n    endpoint=arr_endpoint,\n    account_id=account_id,\n    account_domain=account_domain,\n    credential=key_credential\n)\n```\n\n### Authenticating with a static access token\n\nYou can pass a Mixed Reality access token as an `AccessToken` previously retrieved from the\n[Mixed Reality STS service](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/mixedreality/azure-mixedreality-authentication)\nto be used with a Mixed Reality client library:\n\n```python\nfrom azure.mixedreality.authentication import MixedRealityStsClient\nfrom azure.mixedreality.remoterendering import RemoteRenderingClient\naccount_id = \"<ACCOUNT_ID>\"\naccount_domain = \"<ACCOUNT_DOMAIN>\"\naccount_key = \"<ACCOUNT_KEY>\"\n\nkey_credential = AzureKeyCredential(account_key)\n\nclient = MixedRealityStsClient(account_id, account_domain, key_credential)\n\ntoken = client.get_token()\n\nclient = RemoteRenderingClient(\n    endpoint=arr_endpoint,\n    account_id=account_id,\n    account_domain=account_domain,\n    credential=token,\n)\n```\n\n### Authenticating with an Azure Active Directory Credential\n\nAccount key authentication is used in most of the examples, but you can also authenticate with Azure Active Directory\nusing the [Azure Identity library][azure_identity]. This is the recommended method for production applications. To use\nthe [DefaultAzureCredential][defaultazurecredential] provider shown below, or other credential providers provided with\nthe Azure SDK, please install the `@azure/identity` package:\n\nYou will also need to [register a new AAD application][register_aad_app] and grant access to your Mixed Reality resource\nby assigning the appropriate role for your Mixed Reality service to your service principal.\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mixedreality.remoterendering import RemoteRenderingClient\n\naccount_id = \"<ACCOUNT_ID>\"\naccount_domain = \"<ACCOUNT_DOMAIN>\"\ndefault_credential = DefaultAzureCredential()\n\nclient = RemoteRenderingClient(\n    endpoint=arr_endpoint,\n    account_id=account_id,\n    account_domain=account_domain,\n    credential=default_credential\n)\n```\n\n## Key concepts\n\n### RemoteRenderingClient\n\nThe `RemoteRenderingClient` is the client library used to access the RemoteRenderingService.\nIt provides methods to create and manage asset conversions and rendering sessions.\n\n### Long-Running Operations\nLong-running operations are operations which consist of an initial request sent to the service to start an operation,\nfollowed by polling the service at intervals to determine whether the operation has completed or failed, and if it has\nsucceeded, to get the result.\n\nMethods that convert assets, or spin up rendering sessions are modelled as long-running operations.\nThe client exposes a `begin_<method-name>` method that returns an LROPoller or AsyncLROPoller.\nCallers should wait for the operation to complete by calling result() on the poller object returned from the\n`begin_<method-name>` method. Sample code snippets are provided to illustrate using long-running operations\n[below](#examples \"Examples\").\n\n## Examples\n\n- [Convert an asset](#convert-an-asset)\n- [List conversions](#list-conversions)\n- [Create a session](#create-a-session)\n- [Extend the lease time of a session](#extend-the-lease-time-of-a-session)\n- [List sessions](#list-sessions)\n- [Stop a session](#stop-a-session)\n\n### Convert an asset\n\nWe assume that a RemoteRenderingClient has been constructed as described in the [Authenticate the Client](#authenticate-the-client) section.\nThe following snippet describes how to request that \"box.fbx\", found at at a path of \"/input/box/box.fbx\" of the blob container at the given storage container URI, gets converted.\n\nConverting an asset can take anywhere from seconds to hours.\nThis code uses an existing conversion poller and polls regularly until the conversion has finished or failed.\nThe default polling period is 5 seconds.\nNote that a conversion poller can be retrieved using the client.get_asset_conversion_poller using the id of an existing conversion and a client.\n\nOnce the conversion process finishes the output is written to the specified output container under a path of \"/output/<conversion_id>/box.arrAsset\".\nThe path can be retrieved from the output.asset_uri of a successful conversion.\n\n```python\n    conversion_id = str(uuid.uuid4()) # A randomly generated uuid is a good choice for a conversion_id.\n\n    input_settings = AssetConversionInputSettings(\n        storage_container_uri=\"<STORAGE CONTAINER URI>\",\n        relative_input_asset_path=\"box.fbx\",\n        blob_prefix=\"input/box\"\n    )\n    output_settings = AssetConversionOutputSettings(\n        storage_container_uri=\"<STORAGE CONTAINER URI>\",\n        blob_prefix=\"output/\"+conversion_id,\n        output_asset_filename=\"convertedBox.arrAsset\" #if no output_asset_filename <input asset filename>.arrAsset will be the name of the resulting converted asset\n    )\n    try:\n        conversion_poller = client.begin_asset_conversion(\n            conversion_id=conversion_id,\n            input_settings=input_settings,\n            output_settings=output_settings\n        )\n\n        print(\"Conversion with id:\", conversion_id, \"created. Waiting for completion.\")\n        conversion = conversion_poller.result()\n        print(\"conversion output:\", conversion.output.asset_uri)\n\n    except Exception as e:\n        print(\"Conversion failed\", e)\n```\n\n### List conversions\n\nYou can get information about your conversions using the `list_asset_conversions` method.\nThis method may return conversions which have yet to start, conversions which are running and conversions which have finished.\nIn this example, we list all conversions and print id and creation ad as well as the output asset URIs of successful conversions.\n\n```python\n    print(\"conversions:\")\n    for c in client.list_asset_conversions():\n        print(\n            \"\\t conversion:  id:\",\n            c.id,\n            \"status:\",\n            c.status,\n            \"created on:\",\n            c.created_on.strftime(\"%m/%d/%Y, %H:%M:%S\"),\n        )\n        if c.status == AssetConversionStatus.SUCCEEDED:\n            print(\"\\t\\tconversion result URI:\", c.output.asset_uri)\n```\n\n### Create a session\n\nWe assume that a RemoteRenderingClient has been constructed as described in the [Authenticate the Client](#authenticate-the-client) section.\nThe following snippet describes how to request that a new rendering session be started.\n\n```python\n    print(\"starting rendering session with id:\", session_id)\n    try:\n        session_poller = client.begin_rendering_session(\n            session_id=session_id, size=RenderingSessionSize.STANDARD, lease_time_minutes=20\n        )\n        print(\n            \"rendering session with id:\",\n            session_id,\n            \"created. Waiting for session to be ready.\",\n        )\n        session = session_poller.result()\n        print(\n            \"session with id:\",\n            session.id,\n            \"is ready. lease_time_minutes:\",\n            session.lease_time_minutes,\n        )\n    except Exception as e:\n        print(\"Session startup failed\", e)\n```\n\n### Extend the lease time of a session\n\nIf a session is approaching its maximum lease time, but you want to keep it alive, you will need to make a call to\nincrease its maximum lease time.\nThis example shows how to query the current properties and then extend the lease if it will expire soon.\n\n> NOTE: The runtime SDKs also offer this functionality, and in many typical scenarios, you would use them to\n> extend the session lease.\n\n```python\n    session = client.get_rendering_session(session_id)\n    if session.lease_time_minutes - session.elapsed_time_minutes < 2:\n        session = client.update_rendering_session(\n            session_id=session_id, lease_time_minutes=session.lease_time_minutes + 10\n        )\n```\n\n### List sessions\n\nYou can get information about your sessions using the `list_rendering_sessions` method of the client.\nThis method may return sessions which have yet to start and sessions which are ready.\n\n```python\n    print(\"sessions:\")\n    rendering_sessions = client.list_rendering_sessions()\n    for session in rendering_sessions:\n        print(\n            \"\\t session:  id:\",\n            session.id,\n            \"status:\",\n            session.status,\n            \"created on:\",\n            session.created_on.strftime(\"%m/%d/%Y, %H:%M:%S\"),\n        )\n```\n\n### Stop a Session\n\nThe following code will stop a running session with given id. Since running sessions incur ongoing costs it is\nrecommended to stop sessions which are not needed anymore.\n\n```python\n    client.stop_rendering_session(session_id)\n    print(\"session with id:\", session_id, \"stopped\")\n```\n\n## Troubleshooting\n\nFor general troubleshooting advice concerning Azure Remote Rendering, see [the Troubleshoot page](https://docs.microsoft.com/azure/remote-rendering/resources/troubleshoot) for remote rendering at docs.microsoft.com.\n\nThe client methods and waiting for poller results will throw exceptions if the request failed.\n\nIf the asset in a conversion is invalid, the conversion poller will throw an exception with an error containing details.\nOnce the conversion service is able to process the file, a &lt;assetName&gt;.result.json file will be written to the output container.\nIf the input asset is invalid, then that file will contain a more detailed description of the problem.\n\nSimilarly, sometimes when a session is requested, the session ends up in an error state.\nThe poller will throw an exception containing details of the error in this case. Session errors are usually transient\nand requesting a new session should succeed.\n\n### Logging\n\nThis library uses the standard\n[logging][python_logging] library for logging.\n\nBasic information about HTTP sessions (URLs, headers, etc.) is logged at `INFO` level.\n\nDetailed `DEBUG` level logging, including request/response bodies and **unredacted**\nheaders, can be enabled on the client or per-operation with the `logging_enable` keyword argument.\n\nSee full SDK logging documentation with examples [here][sdk_logging_docs].\n\n### Optional Configuration\n\nOptional keyword arguments can be passed in at the client and per-operation level.\nThe azure-core [reference documentation][azure_core_ref_docs]\ndescribes available configurations for retries, logging, transport protocols, and more.\n\n### Exceptions\n\nThe Remote Rendering client library will raise exceptions defined in [Azure Core][azure_core_exceptions].\n\n### Async APIs\n\nThis library also includes a complete async API supported on Python 3.7+. To use it, you must\nfirst install an async transport, such as [aiohttp](https://pypi.org/project/aiohttp/). Async clients\nare found under the `azure.mixedreality.remoterendering.aio` namespace.\n\n\n\n## Next steps\n\n- Read the [Product documentation](https://docs.microsoft.com/azure/remote-rendering/)\n- Learn about the runtime SDKs:\n  - .NET: https://docs.microsoft.com/dotnet/api/microsoft.azure.remoterendering\n  - C++: https://docs.microsoft.com/cpp/api/remote-rendering/\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a\nContributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us\nthe rights to use your contribution. For details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide\na CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions\nprovided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or\ncontact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\nIf you'd like to contribute to this library, please read the\n[contributing guide](https://github.com/Azure/azure-sdk-for-python/blob/master/CONTRIBUTING.md) to learn more about how\nto build and test the code.\n\n<!-- LINKS -->\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fsdk%remoterendering%2Fazure-mixedreality-remoterendering%2FREADME.png)\n\n[azure_core_ref_docs]: https://aka.ms/azsdk/python/core/docs\n[azure_core_exceptions]: https://aka.ms/azsdk/python/core/docs#module-azure.core.exceptions\n[azure_sub]: https://azure.microsoft.com/free/\n[azure_portal]: https://portal.azure.com\n[azure_identity]: https://github.com/Azure/azure-sdk-for-python/tree/master/sdk/identity/azure-identity\n\n[pip]: https://pypi.org/project/pip/\n[sdk_logging_docs]: https://docs.microsoft.com/azure/developer/python/azure-sdk-logging\n",
        "repo_name": "remoterendering/azure-mixedreality-remoterendering",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/remoterendering/azure-mixedreality-remoterendering",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Reservations Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-reservations\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.reservations import AzureReservationAPI\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = AzureReservationAPI(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\n\nCode samples for this package can be found at [Reservations](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com and [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-reservations%2FREADME.png)\n",
        "repo_name": "reservations/azure-mgmt-reservations",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/reservations/azure-mgmt-reservations",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Resource Connector Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-resourceconnector\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.resourceconnector import ResourceConnectorMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = ResourceConnectorMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\nCode samples for this package can be found at:\n- [Search Resource Connector Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com\n- [Azure Python Mgmt SDK Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-resourceconnector%2FREADME.png)\n",
        "repo_name": "resourceconnector/azure-mgmt-resourceconnector",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/resourceconnector/azure-mgmt-resourceconnector",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Resource Health Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-resourcehealth\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.resourcehealth import ResourceHealthMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = ResourceHealthMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\nCode samples for this package can be found at:\n- [Search Resource Health Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com\n- [Azure Python Mgmt SDK Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-resourcehealth%2FREADME.png)\n",
        "repo_name": "resourcehealth/azure-mgmt-resourcehealth",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/resourcehealth/azure-mgmt-resourcehealth",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Resource Mover Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/)\nCode samples for this package can be found at [Resource Mover Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-resourcemover%2FREADME.png)\n",
        "repo_name": "resourcemover/azure-mgmt-resourcemover",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/resourcemover/azure-mgmt-resourcemover",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Msi Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-msi\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.msi import ManagedServiceIdentityClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = ManagedServiceIdentityClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\n\nCode samples for this package can be found at [Msi Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com and [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-msi%2FREADME.png)\n",
        "repo_name": "resources/azure-mgmt-msi",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/resources/azure-mgmt-msi",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Resource Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-resource\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.resource import ResourceManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = ResourceManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\nCode samples for this package can be found at:\n- [Search Resource Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com\n- [Azure Python Mgmt SDK Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-resource%2FREADME.png)\n",
        "repo_name": "resources/azure-mgmt-resource",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/resources/azure-mgmt-resource",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Resource Graph Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/resource-graph)\nCode samples for this package can be found at [Resource Graph](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://github.com/Azure-Samples/azure-samples-python-management/tree/main/samples/resourcegraph)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-resourcegraph%2FREADME.png)\n",
        "repo_name": "resources/azure-mgmt-resourcegraph",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/resources/azure-mgmt-resourcegraph",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Scheduler Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/scheduler)\nCode samples for this package can be found at [Scheduler Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://github.com/Azure-Samples/azure-samples-python-management/tree/main/samples/scheduler)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-scheduler%2FREADME.png)\n",
        "repo_name": "scheduler/azure-mgmt-scheduler",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/scheduler/azure-mgmt-scheduler",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Azure Schema Registry Avro Encoder client library for Python\n\nAzure Schema Registry is a schema repository service hosted by Azure Event Hubs, providing schema storage, versioning,\nand management. This package provides an Avro encoder capable of encoding and decoding payloads containing\nSchema Registry schema identifiers and Avro-encoded content.\n\n[Source code][source_code] | [Package (PyPi)][pypi] | [API reference documentation][api_reference] | [Samples][sr_avro_samples] | [Changelog][change_log]\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Install the package\n\nInstall the Azure Schema Registry Avro Encoder client library for Python with [pip][pip]:\n\n```Bash\npip install azure-schemaregistry-avroencoder\n```\n\n### Prerequisites:\nTo use this package, you must have:\n* Azure subscription - [Create a free account][azure_sub]\n* [Azure Schema Registry][schemaregistry_service] - [Here is the quickstart guide][quickstart_guide] to create a Schema Registry group using the Azure portal.\n* Python 3.7 or later - [Install Python][python]\n\n### Authenticate the client\nInteraction with the Schema Registry Avro Encoder starts with an instance of AvroEncoder class, which takes the schema group name and the [Schema Registry Client][schemaregistry_client] class. The client constructor takes the Event Hubs fully qualified namespace and and Azure Active Directory credential:\n\n* The fully qualified namespace of the Schema Registry instance should follow the format: `<yournamespace>.servicebus.windows.net`.\n\n* An AAD credential that implements the [TokenCredential][token_credential_interface] protocol should be passed to the constructor. There are implementations of the `TokenCredential` protocol available in the\n[azure-identity package][pypi_azure_identity]. To use the credential types provided by `azure-identity`, please install the Azure Identity client library for Python with [pip][pip]:\n\n```Bash\npip install azure-identity\n```\n\n* Additionally, to use the async API, you must first install an async transport, such as [aiohttp](https://pypi.org/project/aiohttp/):\n\n```Bash\npip install aiohttp\n```\n\n**Create AvroEncoder using the azure-schemaregistry library:**\n\n```python\nimport os\nfrom azure.schemaregistry import SchemaRegistryClient\nfrom azure.schemaregistry.encoder.avroencoder import AvroEncoder\nfrom azure.identity import DefaultAzureCredential\n\ncredential = DefaultAzureCredential()\n# Namespace should be similar to: '<your-eventhub-namespace>.servicebus.windows.net'\nfully_qualified_namespace = os.environ['SCHEMAREGISTRY_FULLY_QUALIFIED_NAMESPACE']\ngroup_name = os.environ['SCHEMAREGISTRY_GROUP']\nschema_registry_client = SchemaRegistryClient(fully_qualified_namespace, credential)\nencoder = AvroEncoder(client=schema_registry_client, group_name=group_name)\n```\n\n## Key concepts\n\n### AvroEncoder\n\nProvides API to encode to and decode from Avro Binary Encoding plus a\ncontent type with schema ID. Uses [SchemaRegistryClient][schemaregistry_client] to get schema IDs from schema content or vice versa.\n\n### Supported message models\n\nSupport has been added to certain Azure Messaging SDK model classes for interoperability with the `AvroEncoder`. These models are subtypes of the `MessageType` protocol defined under the `azure.schemaregistry.encoder.avroencoder` namespace. Currently, the supported model classes are:\n\n- `azure.eventhub.EventData` for `azure-eventhub>=5.9.0`\n\n### Message format\n\nIf a message type that follows the MessageType protocol is provided to the encoder for encoding, it will set the corresponding content and content type properties, where:\n\n- `content`: Avro payload (in general, format-specific payload)\n  - Avro Binary Encoding\n  - NOT Avro Object Container File, which includes the schema and defeats the\n    purpose of this encoder to move the schema out of the message payload and\n    into the schema registry.\n\n- `content type`: a string of the format `avro/binary+<schema ID>`, where:\n  - `avro/binary` is the format indicator\n  - `<schema ID>` is the hexadecimal representation of GUID, same format and byte order as the string from the Schema Registry service.\n\nIf `EventData` is passed in as the message type, the following properties will be set on the `EventData` object:\n - The `body` property will be set to the content value.\n - The `content_type` property will be set to the content type value.\n\nIf message type is not provided, and by default, the encoder will create the following dict:\n`{\"content\": <Avro encoded payload>, \"content_type\": 'avro/binary+<schema ID>' }`\n\n## Examples\n\nThe following sections provide several code snippets covering some of the most common Schema Registry tasks, including:\n\n- [Encoding](#encoding)\n- [Decoding](#decoding)\n- [Event Hubs Sending Integration](#event-hubs-sending-integration)\n- [Event Hubs Receiving Integration](#event-hubs-receiving-integration)\n\n### Encoding\n\nUse the `AvroEncoder.encode` method to encode content with the given Avro schema.\nThe method will use a schema previously registered to the Schema Registry service and keep the schema cached for future encoding usage. In order to avoid pre-registering the schema to the service and automatically register it with the `encode` method, the keyword argument `auto_register=True` should be passed to the `AvroEncoder` constructor.\n\n```python\nimport os\nfrom azure.schemaregistry import SchemaRegistryClient\nfrom azure.schemaregistry.encoder.avroencoder import AvroEncoder\nfrom azure.identity import DefaultAzureCredential\nfrom azure.eventhub import EventData\n\ntoken_credential = DefaultAzureCredential()\nfully_qualified_namespace = os.environ['SCHEMAREGISTRY_FULLY_QUALIFIED_NAMESPACE']\ngroup_name = os.environ['SCHEMAREGISTRY_GROUP']\nname = \"example.avro.User\"\nformat = \"Avro\"\n\ndefinition = \"\"\"\n{\"namespace\": \"example.avro\",\n \"type\": \"record\",\n \"name\": \"User\",\n \"fields\": [\n     {\"name\": \"name\", \"type\": \"string\"},\n     {\"name\": \"favorite_number\",  \"type\": [\"int\", \"null\"]},\n     {\"name\": \"favorite_color\", \"type\": [\"string\", \"null\"]}\n ]\n}\"\"\"\n\nschema_registry_client = SchemaRegistryClient(fully_qualified_namespace, token_credential)\nschema_registry_client.register_schema(group_name, name, definition, format)\nencoder = AvroEncoder(client=schema_registry_client, group_name=group_name)\n\nwith encoder:\n    dict_content = {\"name\": \"Ben\", \"favorite_number\": 7, \"favorite_color\": \"red\"}\n    event_data = encoder.encode(dict_content, schema=definition, message_type=EventData)\n\n    # OR\n\n    message_content_dict = encoder.encode(dict_content, schema=definition)\n    event_data = EventData.from_message_content(message_content_dict[\"content\"], message_content_dict[\"content_type\"])\n```\n\n### Decoding\n\nUse the `AvroEncoder.decode` method to decode the Avro-encoded content by either:\n - Passing in a message object that is a subtype of the MessageType protocol.\n - Passing in a dict with keys `content`(type bytes) and `content_type` (type string).\nThe method automatically retrieves the schema from the Schema Registry Service and keeps the schema cached for future decoding usage.\n\n```python\nimport os\nfrom azure.schemaregistry import SchemaRegistryClient\nfrom azure.schemaregistry.encoder.avroencoder import AvroEncoder\nfrom azure.identity import DefaultAzureCredential\n\ntoken_credential = DefaultAzureCredential()\nfully_qualified_namespace = os.environ['SCHEMAREGISTRY_FULLY_QUALIFIED_NAMESPACE']\ngroup_name = \"<your-group-name>\"\n\nschema_registry_client = SchemaRegistryClient(fully_qualified_namespace, token_credential)\nencoder = AvroEncoder(client=schema_registry_client)\n\nwith encoder:\n    # event_data is an EventData object with Avro encoded body\n    dict_content = {\"name\": \"Ben\", \"favorite_number\": 7, \"favorite_color\": \"red\"}\n    event_data = encoder.encode(dict_content, schema=definition, message_type=EventData)\n    decoded_content = encoder.decode(event_data)\n\n    # OR \n\n    encoded_bytes = b'<content_encoded_by_azure_schema_registry_avro_encoder>'\n    content_type = 'avro/binary+<schema_id_of_corresponding_schema>'\n    content_dict = {\"content\": encoded_bytes, \"content_type\": content_type}\n    decoded_content = encoder.decode(content_dict)\n```\n\n### Event Hubs Sending Integration\n\nIntegration with [Event Hubs][eventhubs_repo] to send an `EventData` object with `body` set to Avro-encoded content and corresponding `content_type`.\n\n```python\nimport os\nfrom azure.eventhub import EventHubProducerClient, EventData\nfrom azure.schemaregistry import SchemaRegistryClient\nfrom azure.schemaregistry.encoder.avroencoder import AvroEncoder\nfrom azure.identity import DefaultAzureCredential\n\ntoken_credential = DefaultAzureCredential()\nfully_qualified_namespace = os.environ['SCHEMAREGISTRY_FULLY_QUALIFIED_NAMESPACE']\ngroup_name = os.environ['SCHEMAREGISTRY_GROUP']\neventhub_connection_str = os.environ['EVENT_HUB_CONN_STR']\neventhub_name = os.environ['EVENT_HUB_NAME']\n\ndefinition = \"\"\"\n{\"namespace\": \"example.avro\",\n \"type\": \"record\",\n \"name\": \"User\",\n \"fields\": [\n     {\"name\": \"name\", \"type\": \"string\"},\n     {\"name\": \"favorite_number\",  \"type\": [\"int\", \"null\"]},\n     {\"name\": \"favorite_color\", \"type\": [\"string\", \"null\"]}\n ]\n}\"\"\"\n\nschema_registry_client = SchemaRegistryClient(fully_qualified_namespace, token_credential)\navro_encoder = AvroEncoder(client=schema_registry_client, group_name=group_name, auto_register=True)\n\neventhub_producer = EventHubProducerClient.from_connection_string(\n    conn_str=eventhub_connection_str,\n    eventhub_name=eventhub_name\n)\n\nwith eventhub_producer, avro_encoder:\n    event_data_batch = eventhub_producer.create_batch()\n    dict_content = {\"name\": \"Bob\", \"favorite_number\": 7, \"favorite_color\": \"red\"}\n    event_data = avro_encoder.encode(dict_content, schema=definition, message_type=EventData)\n    event_data_batch.add(event_data)\n    eventhub_producer.send_batch(event_data_batch)\n```\n\n### Event Hubs Receiving Integration\n\nIntegration with [Event Hubs][eventhubs_repo] to receive an `EventData` object and decode the the Avro-encoded `body` value.\n\n```python\nimport os\nfrom azure.eventhub import EventHubConsumerClient\nfrom azure.schemaregistry import SchemaRegistryClient\nfrom azure.schemaregistry.encoder.avroencoder import AvroEncoder\nfrom azure.identity import DefaultAzureCredential\n\ntoken_credential = DefaultAzureCredential()\nfully_qualified_namespace = os.environ['SCHEMAREGISTRY_FULLY_QUALIFIED_NAMESPACE']\ngroup_name = os.environ['SCHEMAREGISTRY_GROUP']\neventhub_connection_str = os.environ['EVENT_HUB_CONN_STR']\neventhub_name = os.environ['EVENT_HUB_NAME']\n\nschema_registry_client = SchemaRegistryClient(fully_qualified_namespace, token_credential)\navro_encoder = AvroEncoder(client=schema_registry_client, group_name=group_name)\n\neventhub_consumer = EventHubConsumerClient.from_connection_string(\n    conn_str=eventhub_connection_str,\n    consumer_group='$Default',\n    eventhub_name=eventhub_name,\n)\n\ndef on_event(partition_context, event):\n    decoded_content = avro_encoder.decode(event)\n\nwith eventhub_consumer, avro_encoder:\n    eventhub_consumer.receive(on_event=on_event, starting_position=\"-1\")\n```\n\n## Troubleshooting\n\n### General\n\nAzure Schema Registry Avro Encoder raises exceptions defined in [Azure Core][azure_core] if errors are encountered when communicating with the Schema Registry service. Errors related to invalid content/content types and invalid schemas will be raised as `azure.schemaregistry.encoder.avroencoder.InvalidContentError` and `azure.schemaregistry.encoder.avroencoder.InvalidSchemaError`, respectively, where `__cause__` will contain the underlying exception raised by the Apache Avro library.\n\n### Logging\nThis library uses the standard\n[logging][python_logging] library for logging.\nBasic information about HTTP sessions (URLs, headers, etc.) is logged at INFO\nlevel.\n\nDetailed DEBUG level logging, including request/response bodies and unredacted\nheaders, can be enabled on a client with the `logging_enable` argument:\n```python\nimport sys\nimport os\nimport logging\nfrom azure.schemaregistry import SchemaRegistryClient\nfrom azure.schemaregistry.encoder.avroencoder import AvroEncoder\nfrom azure.identity import DefaultAzureCredential\n\n# Create a logger for the SDK\nlogger = logging.getLogger('azure.schemaregistry')\nlogger.setLevel(logging.DEBUG)\n\n# Configure a console output\nhandler = logging.StreamHandler(stream=sys.stdout)\nlogger.addHandler(handler)\n\nfully_qualified_namespace = os.environ['SCHEMAREGISTRY_FULLY_QUALIFIED_NAMESPACE']\ngroup_name = os.environ['SCHEMAREGISTRY_GROUP']\ncredential = DefaultAzureCredential()\nschema_registry_client = SchemaRegistryClient(fully_qualified_namespace, credential, logging_enable=True)\n# This client will log detailed information about its HTTP sessions, at DEBUG level\nencoder = AvroEncoder(client=schema_registry_client, group_name=group_name)\n```\n\nSimilarly, `logging_enable` can enable detailed logging for a single operation,\neven when it isn't enabled for the client:\n```python\nencoder.encode(dict_content, schema=definition, logging_enable=True)\n```\n\n## Next steps\n\n### More sample code\n\nFurther examples demonstrating common Azure Schema Registry Avro Encoder scenarios are in the [samples][sr_avro_samples] directory.\n\n## Contributing\n\nThis project welcomes contributions and suggestions.  Most contributions require you to agree to a\nContributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us\nthe rights to use your contribution. For details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide\na CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions\nprovided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or\ncontact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\n<!-- LINKS -->\n[pip]: https://pypi.org/project/pip/\n[pypi]: https://pypi.org/project/azure-schemaregistry-avroencoder/\n[python]: https://www.python.org/downloads/\n[azure_core]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/README.md\n[azure_sub]: https://azure.microsoft.com/free/\n[python_logging]: https://docs.python.org/3/library/logging.html\n[sr_avro_samples]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/schemaregistry/azure-schemaregistry-avroencoder/samples\n[api_reference]: https://docs.microsoft.com/python/api/overview/azure/schemaregistry-avroencoder-readme\n[source_code]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/schemaregistry/azure-schemaregistry-avroencoder\n[change_log]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/schemaregistry/azure-schemaregistry-avroencoder/CHANGELOG.md\n[schemaregistry_client]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/schemaregistry/azure-schemaregistry\n[schemaregistry_service]: https://aka.ms/schemaregistry\n[eventhubs_repo]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/eventhub/azure-eventhub\n[token_credential_interface]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/core/azure-core/azure/core/credentials.py\n[pypi_azure_identity]: https://pypi.org/project/azure-identity/\n[quickstart_guide]: https://docs.microsoft.com/azure/event-hubs/create-schema-registry",
        "repo_name": "schemaregistry/azure-schemaregistry-avroencoder",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/schemaregistry/azure-schemaregistry-avroencoder",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Azure Schema Registry client library for Python\n\nAzure Schema Registry is a schema repository service hosted by Azure Event Hubs, providing schema storage, versioning,\nand management. The registry is leveraged by serializers to reduce payload size while describing payload structure with\nschema identifiers rather than full schemas.\n\n[Source code][source_code]\n| [Package (PyPi)][pypi]\n| [Package (Conda)](https://anaconda.org/microsoft/azure-schemaregistry/)\n| [API reference documentation][api_reference]\n| [Samples][sr_samples]\n| [Changelog][change_log]\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended on 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Install the package\n\nInstall the Azure Schema Registry client library for Python with [pip][pip]:\n\n```Bash\npip install azure-schemaregistry\n```\n\n### Prerequisites:\nTo use this package, you must have:\n* Azure subscription - [Create a free account][azure_sub]\n* [Azure Schema Registry][schemaregistry_service] - [Here is the quickstart guide][quickstart_guide] to create a Schema Registry group using the Azure portal.\n* Python 3.7 or later - [Install Python][python]\n\n### Authenticate the client\n\nInteraction with Schema Registry starts with an instance of SchemaRegistryClient class. The client constructor takes the fully qualified namespace and an Azure Active Directory credential:\n\n* The fully qualified namespace of the Schema Registry instance should follow the format: `<yournamespace>.servicebus.windows.net`.\n\n* An AAD credential that implements the [TokenCredential][token_credential_interface] protocol should be passed to the constructor. There are implementations of the `TokenCredential` protocol available in the\n[azure-identity package][pypi_azure_identity]. To use the credential types provided by `azure-identity`, please install the Azure Identity client library for Python with [pip][pip]:\n\n```Bash\npip install azure-identity\n```\n\n* Additionally, to use the async API,  you must first install an async transport, such as [aiohttp](https://pypi.org/project/aiohttp/):\n\n```Bash\npip install aiohttp\n```\n\n**Create client using the azure-identity library:**\n\n```python\nfrom azure.schemaregistry import SchemaRegistryClient\nfrom azure.identity import DefaultAzureCredential\n\ncredential = DefaultAzureCredential()\n# Namespace should be similar to: '<your-eventhub-namespace>.servicebus.windows.net/'\nfully_qualified_namespace = '<< FULLY QUALIFIED NAMESPACE OF THE SCHEMA REGISTRY >>'\nschema_registry_client = SchemaRegistryClient(fully_qualified_namespace, credential)\n```\n\n## Key concepts\n\n- Schema: Schema is the organization or structure for data. More detailed information can be found [here][schemas].\n\n- Schema Group: A logical group of similar schemas based on business criteria, which can hold multiple versions of a schema. More detailed information can be found [here][schema_groups].\n\n- SchemaRegistryClient: `SchemaRegistryClient` provides the API for storing and retrieving schemas in schema registry.\n\n## Examples\n\nThe following sections provide several code snippets covering some of the most common Schema Registry tasks, including:\n\n- [Register a schema](#register-a-schema)\n- [Get the schema by id](#get-the-schema-by-id)\n- [Get the schema by version](#get-the-schema-by-version)\n- [Get the id of a schema](#get-the-id-of-a-schema)\n\n### Register a schema\n\nUse `SchemaRegistryClient.register_schema` method to register a schema.\n\n```python\nimport os\n\nfrom azure.identity import DefaultAzureCredential\nfrom azure.schemaregistry import SchemaRegistryClient\n\ntoken_credential = DefaultAzureCredential()\nfully_qualified_namespace = os.environ['SCHEMAREGISTRY_AVRO_FULLY_QUALIFIED_NAMESPACE']\ngroup_name = os.environ['SCHEMA_REGISTRY_GROUP']\nname = \"your-schema-name\"\nformat = \"Avro\"\ndefinition = \"\"\"\n{\"namespace\": \"example.avro\",\n \"type\": \"record\",\n \"name\": \"User\",\n \"fields\": [\n     {\"name\": \"name\", \"type\": \"string\"},\n     {\"name\": \"favorite_number\",  \"type\": [\"int\", \"null\"]},\n     {\"name\": \"favorite_color\", \"type\": [\"string\", \"null\"]}\n ]\n}\n\"\"\"\n\nschema_registry_client = SchemaRegistryClient(fully_qualified_namespace=fully_qualified_namespace, credential=token_credential)\nwith schema_registry_client:\n    schema_properties = schema_registry_client.register_schema(group_name, name, definition, format)\n    id = schema_properties.id\n```\n\n### Get the schema by id\n\nGet the schema definition and its properties by schema id.\n\n```python\nimport os\n\nfrom azure.identity import DefaultAzureCredential\nfrom azure.schemaregistry import SchemaRegistryClient\n\ntoken_credential = DefaultAzureCredential()\nfully_qualified_namespace = os.environ['SCHEMAREGISTRY_AVRO_FULLY_QUALIFIED_NAMESPACE']\nschema_id = 'your-schema-id'\n\nschema_registry_client = SchemaRegistryClient(fully_qualified_namespace=fully_qualified_namespace, credential=token_credential)\nwith schema_registry_client:\n    schema = schema_registry_client.get_schema(schema_id)\n    definition = schema.definition\n    properties = schema.properties\n```\n\n### Get the schema by version\n\nGet the schema definition and its properties by schema version.\n\n```python\nimport os\n\nfrom azure.identity import DefaultAzureCredential\nfrom azure.schemaregistry import SchemaRegistryClient\n\ntoken_credential = DefaultAzureCredential()\nfully_qualified_namespace = os.environ['SCHEMAREGISTRY_AVRO_FULLY_QUALIFIED_NAMESPACE']\ngroup_name = os.environ[\"SCHEMAREGISTRY_GROUP\"]\nname = \"your-schema-name\"\nversion = int(\"<your schema version>\")\n\nschema_registry_client = SchemaRegistryClient(fully_qualified_namespace=fully_qualified_namespace, credential=token_credential)\nwith schema_registry_client:\n    schema = schema_registry_client.get_schema(group_name=group_name, name=name, version=version)\n    definition = schema.definition\n    properties = schema.properties\n```\n\n### Get the id of a schema\n\nGet the schema id of a schema by schema definition and its properties.\n\n```python\nimport os\n\nfrom azure.identity import DefaultAzureCredential\nfrom azure.schemaregistry import SchemaRegistryClient\n\ntoken_credential = DefaultAzureCredential()\nfully_qualified_namespace = os.environ['SCHEMAREGISTRY_AVRO_FULLY_QUALIFIED_NAMESPACE']\ngroup_name = os.environ['SCHEMA_REGISTRY_GROUP']\nname = \"your-schema-name\"\nformat = \"Avro\"\ndefinition = \"\"\"\n{\"namespace\": \"example.avro\",\n \"type\": \"record\",\n \"name\": \"User\",\n \"fields\": [\n     {\"name\": \"name\", \"type\": \"string\"},\n     {\"name\": \"favorite_number\",  \"type\": [\"int\", \"null\"]},\n     {\"name\": \"favorite_color\", \"type\": [\"string\", \"null\"]}\n ]\n}\n\"\"\"\n\nschema_registry_client = SchemaRegistryClient(fully_qualified_namespace=fully_qualified_namespace, credential=token_credential)\nwith schema_registry_client:\n    schema_properties = schema_registry_client.register_schema(group_name, name, definition, format)\n    id = schema_properties.id\n```\n\n## Troubleshooting\n\n### General\n\nSchema Registry clients raise exceptions defined in [Azure Core][azure_core].\n\n### Logging\nThis library uses the standard\n[logging][python_logging] library for logging.\nBasic information about HTTP sessions (URLs, headers, etc.) is logged at INFO\nlevel.\n\nDetailed DEBUG level logging, including request/response bodies and unredacted\nheaders, can be enabled on a client with the `logging_enable` argument:\n```python\nimport sys\nimport logging\nfrom azure.schemaregistry import SchemaRegistryClient\nfrom azure.identity import DefaultAzureCredential\n\n# Create a logger for the SDK\nlogger = logging.getLogger('azure.schemaregistry')\nlogger.setLevel(logging.DEBUG)\n\n# Configure a console output\nhandler = logging.StreamHandler(stream=sys.stdout)\nlogger.addHandler(handler)\n\ncredential = DefaultAzureCredential()\n# This client will log detailed information about its HTTP sessions, at DEBUG level\nschema_registry_client = SchemaRegistryClient(\"your_fully_qualified_namespace\", credential, logging_enable=True)\n```\n\nSimilarly, `logging_enable` can enable detailed logging for a single operation,\neven when it isn't enabled for the client:\n```python\nschema_registry_client.get_schema(schema_id, logging_enable=True)\n```\n\n## Next steps\n\n### More sample code\n\nPlease take a look at the [samples][sr_samples] directory for detailed examples of how to use this library to register and retrieve schema to/from Schema Registry.\n\n## Contributing\n\nThis project welcomes contributions and suggestions.  Most contributions require you to agree to a\nContributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us\nthe rights to use your contribution. For details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide\na CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions\nprovided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or\ncontact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\n<!-- LINKS -->\n[pip]: https://pypi.org/project/pip/\n[pypi]: https://pypi.org/project/azure-schemaregistry\n[python]: https://www.python.org/downloads/\n[azure_core]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/README.md\n[azure_sub]: https://azure.microsoft.com/free/\n[python_logging]: https://docs.python.org/3/library/logging.html\n[sr_samples]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/schemaregistry/azure-schemaregistry/samples\n[api_reference]: https://docs.microsoft.com/python/api/overview/azure/schemaregistry-readme\n[source_code]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/schemaregistry/azure-schemaregistry\n[change_log]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/schemaregistry/azure-schemaregistry/CHANGELOG.md\n[schemas]: https://docs.microsoft.com/azure/event-hubs/schema-registry-overview#schemas\n[schema_groups]: https://docs.microsoft.com/azure/event-hubs/schema-registry-overview#schema-groups\n[schemaregistry_service]: https://aka.ms/schemaregistry\n[token_credential_interface]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/core/azure-core/azure/core/credentials.py\n[pypi_azure_identity]: https://pypi.org/project/azure-identity/\n[quickstart_guide]: https://docs.microsoft.com/azure/event-hubs/create-schema-registry",
        "repo_name": "schemaregistry/azure-schemaregistry",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/schemaregistry/azure-schemaregistry",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Scvmm Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/)\nCode samples for this package can be found at [Scvmm Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-scvmm%2FREADME.png)\n",
        "repo_name": "scvmm/azure-mgmt-scvmm",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/scvmm/azure-mgmt-scvmm",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Search Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-search\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.search import SearchManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = SearchManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\n\nCode samples for this package can be found at [Search Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com and [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-search%2FREADME.png)\n",
        "repo_name": "search/azure-mgmt-search",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/search/azure-mgmt-search",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Azure Cognitive Search client library for Python\n\n[Azure Cognitive Search](https://docs.microsoft.com/azure/search/) is a\nsearch-as-a-service cloud solution that gives developers APIs and tools\nfor adding a rich search experience over private, heterogeneous content\nin web, mobile, and enterprise applications.\n\nThe Azure Cognitive Search service is well suited for the following\n application scenarios:\n\n* Consolidate varied content types into a single searchable index.\n  To populate an index, you can push JSON documents that contain your content,\n  or if your data is already in Azure, create an indexer to pull in data\n  automatically.\n* Attach skillsets to an indexer to create searchable content from images\n  and large text documents. A skillset leverages AI from Cognitive Services\n  for built-in OCR, entity recognition, key phrase extraction, language\n  detection, text translation, and sentiment analysis. You can also add\n  custom skills to integrate external processing of your content during\n  data ingestion.\n* In a search client application, implement query logic and user experiences\n  similar to commercial web search engines.\n\nUse the Azure.Search.Documents client library to:\n\n* Submit queries for simple and advanced query forms that include fuzzy\n  search, wildcard search, regular expressions.\n* Implement filtered queries for faceted navigation, geospatial search,\n  or to narrow results based on filter criteria.\n* Create and manage search indexes.\n* Upload and update documents in the search index.\n* Create and manage indexers that pull data from Azure into an index.\n* Create and manage skillsets that add AI enrichment to data ingestion.\n* Create and manage analyzers for advanced text analysis or multi-lingual content.\n* Optimize results through scoring profiles to factor in business logic or freshness.\n\n[Source code](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/search/azure-search-documents)\n| [Package (PyPI)](https://pypi.org/project/azure-search-documents/)\n| [Package (Conda)](https://anaconda.org/microsoft/azure-search-documents/)\n| [API reference documentation](https://azuresdkdocs.blob.core.windows.net/$web/python/azure-search-documents/latest/index.html)\n| [Product documentation](https://docs.microsoft.com/azure/search/search-what-is-azure-search)\n| [Samples](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/search/azure-search-documents/samples)\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Install the package\n\nInstall the Azure Cognitive Search client library for Python with [pip](https://pypi.org/project/pip/):\n\n```bash\npip install azure-search-documents\n```\n\n### Prerequisites\n\n* Python 3.7 or later is required to use this package.\n* You need an [Azure subscription][azure_sub] and a\n[Azure Cognitive Search service][search_resource] to use this package.\n\nTo create a new search service, you can use the [Azure portal][create_search_service_docs], [Azure PowerShell][create_search_service_ps], or the [Azure CLI][create_search_service_cli].\n\n```Powershell\naz search service create --name <mysearch> --resource-group <mysearch-rg> --sku free --location westus\n```\n\nSee [choosing a pricing tier](https://docs.microsoft.com/azure/search/search-sku-tier)\n for more information about available options.\n\n### Authenticate the client\n\nAll requests to a search service need an api-key that was generated specifically\nfor your service. [The api-key is the sole mechanism for authenticating access to\nyour search service endpoint.](https://docs.microsoft.com/azure/search/search-security-api-keys)\nYou can obtain your api-key from the\n[Azure portal](https://portal.azure.com/) or via the Azure CLI:\n\n```Powershell\naz search admin-key show --service-name <mysearch> --resource-group <mysearch-rg>\n```\n\nThere are two types of keys used to access your search service: **admin**\n*(read-write)* and **query** *(read-only)* keys.  Restricting access and\noperations in client apps is essential to safeguarding the search assets on your\nservice.  Always use a query key rather than an admin key for any query\noriginating from a client app.\n\n*Note: The example Azure CLI snippet above retrieves an admin key so it's easier\nto get started exploring APIs, but it should be managed carefully.*\n\nWe can use the api-key to create a new `SearchClient`.\n\n<!-- SNIPPET:sample_authentication.create_search_client_with_key -->\n\n```python\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.search.documents import SearchClient\n\nservice_endpoint = os.getenv(\"AZURE_SEARCH_SERVICE_ENDPOINT\")\nindex_name = os.getenv(\"AZURE_SEARCH_INDEX_NAME\")\nkey = os.getenv(\"AZURE_SEARCH_API_KEY\")\n\nsearch_client = SearchClient(service_endpoint, index_name, AzureKeyCredential(key))\n```\n\n<!-- END SNIPPET -->\n\n## Key concepts\n\nAn Azure Cognitive Search service contains one or more indexes that provide\npersistent storage of searchable data in the form of JSON documents.  _(If\nyou're brand new to search, you can make a very rough analogy between\nindexes and database tables.)_  The Azure.Search.Documents client library\nexposes operations on these resources through two main client types.\n\n* `SearchClient` helps with:\n  * [Searching](https://docs.microsoft.com/azure/search/search-lucene-query-architecture)\n    your indexed documents using\n    [rich queries](https://docs.microsoft.com/azure/search/search-query-overview)\n    and [powerful data shaping](https://docs.microsoft.com/azure/search/search-filters)\n  * [Autocompleting](https://docs.microsoft.com/rest/api/searchservice/autocomplete)\n    partially typed search terms based on documents in the index\n  * [Suggesting](https://docs.microsoft.com/rest/api/searchservice/suggestions)\n    the most likely matching text in documents as a user types\n  * [Adding, Updating or Deleting Documents](https://docs.microsoft.com/rest/api/searchservice/addupdate-or-delete-documents)\n    documents from an index\n\n* `SearchIndexClient` allows you to:\n  * [Create, delete, update, or configure a search index](https://docs.microsoft.com/rest/api/searchservice/index-operations)\n  * [Declare custom synonym maps to expand or rewrite queries](https://docs.microsoft.com/rest/api/searchservice/synonym-map-operations)\n  * Most of the `SearchServiceClient` functionality is not yet available in our current preview\n\n* `SearchIndexerClient` allows you to:\n  * [Start indexers to automatically crawl data sources](https://docs.microsoft.com/rest/api/searchservice/indexer-operations)\n  * [Define AI powered Skillsets to transform and enrich your data](https://docs.microsoft.com/rest/api/searchservice/skillset-operations)\n\n_The `Azure.Search.Documents` client library (v1) is a brand new offering for\nPython developers who want to use search technology in their applications.  There\nis an older, fully featured `Microsoft.Azure.Search` client library (v10) with\nmany similar looking APIs, so please be careful to avoid confusion when\nexploring online resources._\n\n## Examples\n\nThe following examples all use a simple [Hotel data set](https://github.com/Azure-Samples/azure-search-sample-data/blob/master/README.md)\nthat you can [import into your own index from the Azure portal.](https://docs.microsoft.com/azure/search/search-get-started-portal#step-1---start-the-import-data-wizard-and-create-a-data-source)\nThese are just a few of the basics - please [check out our Samples](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/search/azure-search-documents/samples) for\nmuch more.\n\n\n* [Querying](#querying)\n* [Creating an index](#creating-an-index)\n* [Adding documents to your index](#adding-documents-to-your-index)\n* [Retrieving a specific document from your index](#retrieving-a-specific-document-from-your-index)\n* [Async APIs](#async-apis)\n\n\n### Querying\n\nLet's start by importing our namespaces.\n\n```python\nimport os\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.search.documents import SearchClient\n```\n\nWe'll then create a `SearchClient` to access our hotels search index.\n\n```python\nindex_name = \"hotels\"\n# Get the service endpoint and API key from the environment\nendpoint = os.environ[\"SEARCH_ENDPOINT\"]\nkey = os.environ[\"SEARCH_API_KEY\"]\n\n# Create a client\ncredential = AzureKeyCredential(key)\nclient = SearchClient(endpoint=endpoint,\n                      index_name=index_name,\n                      credential=credential)\n```\n\nLet's search for a \"luxury\" hotel.\n\n```python\nresults = client.search(search_text=\"luxury\")\n\nfor result in results:\n    print(\"{}: {})\".format(result[\"hotelId\"], result[\"hotelName\"]))\n```\n\n\n### Creating an index\n\nYou can use the `SearchIndexClient` to create a search index. Fields can be\ndefined using convenient `SimpleField`, `SearchableField`, or `ComplexField`\nmodels. Indexes can also define suggesters, lexical analyzers, and more.\n\n<!-- SNIPPET:sample_index_crud_operations.create_index -->\n\n```python\nname = \"hotels\"\nfields = [\n    SimpleField(name=\"hotelId\", type=SearchFieldDataType.String, key=True),\n    SimpleField(name=\"baseRate\", type=SearchFieldDataType.Double),\n    SearchableField(name=\"description\", type=SearchFieldDataType.String, collection=True),\n    ComplexField(name=\"address\", fields=[\n        SimpleField(name=\"streetAddress\", type=SearchFieldDataType.String),\n        SimpleField(name=\"city\", type=SearchFieldDataType.String),\n    ], collection=True)\n]\ncors_options = CorsOptions(allowed_origins=[\"*\"], max_age_in_seconds=60)\nscoring_profiles = []\nindex = SearchIndex(\n    name=name,\n    fields=fields,\n    scoring_profiles=scoring_profiles,\n    cors_options=cors_options)\n\nresult = client.create_index(index)\n```\n\n<!-- END SNIPPET -->\n\n### Adding documents to your index\n\nYou can `Upload`, `Merge`, `MergeOrUpload`, and `Delete` multiple documents from\nan index in a single batched request.  There are\n[a few special rules for merging](https://docs.microsoft.com/rest/api/searchservice/addupdate-or-delete-documents#document-actions)\nto be aware of.\n\n<!-- SNIPPET:sample_crud_operations.upload_document -->\n\n```python\nDOCUMENT = {\n    'Category': 'Hotel',\n    'HotelId': '1000',\n    'Rating': 4.0,\n    'Rooms': [],\n    'HotelName': 'Azure Inn',\n}\n\nresult = search_client.upload_documents(documents=[DOCUMENT])\n\nprint(\"Upload of new document succeeded: {}\".format(result[0].succeeded))\n```\n\n<!-- END SNIPPET -->\n\n### Authenticate in a National Cloud\n\nTo authenticate in a [National Cloud](https://docs.microsoft.com/azure/active-directory/develop/authentication-national-cloud), you will need to make the following additions to your client configuration:\n\n- Set the `AuthorityHost` in the credential options or via the `AZURE_AUTHORITY_HOST` environment variable\n- Set the `audience` in `SearchClient`, `SearchIndexClient`, or `SearchIndexerClient`\n\n```python\n# Create a SearchClient that will authenticate through AAD in the China national cloud.\nimport os\nfrom azure.identity import DefaultAzureCredential, AzureAuthorityHosts\nfrom azure.search.documents import SearchClient\n\nindex_name = \"hotels\"\nendpoint = os.environ[\"SEARCH_ENDPOINT\"]\nkey = os.environ[\"SEARCH_API_KEY\"]\ncredential = DefaultAzureCredential(authority=AzureAuthorityHosts.AZURE_CHINA)\n\nsearch_client = SearchClient(endpoint, index_name, crdential=credential, audience=\"https://search.azure.cn\")\n```\n\n### Retrieving a specific document from your index\n\nIn addition to querying for documents using keywords and optional filters,\nyou can retrieve a specific document from your index if you already know the\nkey. You could get the key from a query, for example, and want to show more\ninformation about it or navigate your customer to that document.\n\n<!-- SNIPPET:sample_get_document.get_document -->\n\n```python\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.search.documents import SearchClient\n\nsearch_client = SearchClient(service_endpoint, index_name, AzureKeyCredential(key))\n\nresult = search_client.get_document(key=\"23\")\n\nprint(\"Details for hotel '23' are:\")\nprint(\"        Name: {}\".format(result[\"HotelName\"]))\nprint(\"      Rating: {}\".format(result[\"Rating\"]))\nprint(\"    Category: {}\".format(result[\"Category\"]))\n```\n\n<!-- END SNIPPET -->\n\n### Async APIs\n\nThis library includes a complete async API. To use it, you must\nfirst install an async transport, such as [aiohttp](https://pypi.org/project/aiohttp/).\nSee\n[azure-core documentation](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/README.md#transport)\nfor more information.\n\n<!-- SNIPPET:sample_simple_query_async.simple_query_async -->\n\n```python\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.search.documents.aio import SearchClient\n\nsearch_client = SearchClient(service_endpoint, index_name, AzureKeyCredential(key))\n\nasync with search_client:\n    results = await search_client.search(search_text=\"spa\")\n\n    print(\"Hotels containing 'spa' in the name (or other fields):\")\n    async for result in results:\n        print(\"    Name: {} (rating {})\".format(result[\"HotelName\"], result[\"Rating\"]))\n```\n\n<!-- END SNIPPET -->\n\n## Troubleshooting\n\n### General\n\nThe Azure Cognitive Search client will raise exceptions defined in [Azure Core][azure_core].\n\n### Logging\n\nThis library uses the standard [logging][python_logging] library for logging.\nBasic information about HTTP sessions (URLs, headers, etc.) is logged at INFO\nlevel.\n\nDetailed DEBUG level logging, including request/response bodies and unredacted\nheaders, can be enabled on a client with the `logging_enable` keyword argument:\n```python\nimport sys\nimport logging\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.search.documents import SearchClient\n\n# Create a logger for the 'azure' SDK\nlogger = logging.getLogger('azure')\nlogger.setLevel(logging.DEBUG)\n\n# Configure a console output\nhandler = logging.StreamHandler(stream=sys.stdout)\nlogger.addHandler(handler)\n\n# This client will log detailed information about its HTTP sessions, at DEBUG level\nclient = SearchClient(\"<service endpoint>\", \"<index_name>\", AzureKeyCredential(\"<api key>\"), logging_enable=True)\n\n```\n\nSimilarly, `logging_enable` can enable detailed logging for a single operation,\neven when it isn't enabled for the client:\n```python\nresult =  client.search(search_text=\"spa\", logging_enable=True)\n```\n\n## Next steps\n\n* Go further with Azure.Search.Documents and our [https://github.com/Azure/azure-sdk-for-python/blob/master/sdk/search/azure-search-documents/samples](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/search/azure-search-documents/samples)\n* Watch a [demo or deep dive video](https://azure.microsoft.com/resources/videos/index/?services=search)\n* Read more about the [Azure Cognitive Search service](https://docs.microsoft.com/azure/search/search-what-is-azure-search)\n\n## Contributing\n\nSee our [Search CONTRIBUTING.md][search_contrib] for details on building,\ntesting, and contributing to this library.\n\nThis project welcomes contributions and suggestions.  Most contributions require\nyou to agree to a Contributor License Agreement (CLA) declaring that you have\nthe right to, and actually do, grant us the rights to use your contribution. For\ndetails, visit [cla.microsoft.com][cla].\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct].\nFor more information see the [Code of Conduct FAQ][coc_faq]\nor contact [opencode@microsoft.com][coc_contact] with any\nadditional questions or comments.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2Fsdk%2Fsearch%2FAzure.Search.Documents%2FREADME.png)\n\n## Related projects\n\n* [Microsoft Azure SDK for Python](https://github.com/Azure/azure-sdk-for-python)\n\n<!-- LINKS -->\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fsdk%2Fsearch%2Fazure-search-documents%2FREADME.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_core]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/README.md\n[azure_sub]: https://azure.microsoft.com/free/\n[search_resource]: https://docs.microsoft.com/azure/search/search-create-service-portal\n[azure_portal]: https://portal.azure.com\n\n[create_search_service_docs]: https://docs.microsoft.com/azure/search/search-create-service-portal\n[create_search_service_ps]: https://docs.microsoft.com/azure/search/search-manage-powershell#create-or-delete-a-service\n[create_search_service_cli]: https://docs.microsoft.com/cli/azure/search/service?view=azure-cli-latest#az-search-service-create\n[search_contrib]: https://github.com/Azure/azure-sdk-for-python/blob/main/CONTRIBUTING.md\n[python_logging]: https://docs.python.org/3.5/library/logging.html\n\n[cla]: https://cla.microsoft.com\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n",
        "repo_name": "search/azure-search-documents",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/search/azure-search-documents",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Security Center Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-security\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.security import SecurityCenter\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = SecurityCenter(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\nCode samples for this package can be found at:\n- [Search Security Center Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com\n- [Azure Python Mgmt SDK Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-security%2FREADME.png)\n",
        "repo_name": "security/azure-mgmt-security",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/security/azure-mgmt-security",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Securitydevops Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-securitydevops\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.securitydevops import MicrosoftSecurityDevOps\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = MicrosoftSecurityDevOps(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\n\nCode samples for this package can be found at [Securitydevops Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com and [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-securitydevops%2FREADME.png)\n",
        "repo_name": "securitydevops/azure-mgmt-securitydevops",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/securitydevops/azure-mgmt-securitydevops",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Security Insight Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-securityinsight\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.securityinsight import SecurityInsights\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = SecurityInsights(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\n\nCode samples for this package can be found at [Security Insight Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com and [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-securityinsight%2FREADME.png)\n",
        "repo_name": "securityinsight/azure-mgmt-securityinsight",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/securityinsight/azure-mgmt-securityinsight",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Selfhelp Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-selfhelp\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.selfhelp import SelfHelpMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = SelfHelpMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\nCode samples for this package can be found at:\n- [Search Selfhelp Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com\n- [Azure Python Mgmt SDK Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-selfhelp%2FREADME.png)\n",
        "repo_name": "selfhelp/azure-mgmt-selfhelp",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/selfhelp/azure-mgmt-selfhelp",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Serial Console Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/)\nCode samples for this package can be found at [Serial Console](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-serialconsole%2FREADME.png)\n",
        "repo_name": "serialconsole/azure-mgmt-serialconsole",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/serialconsole/azure-mgmt-serialconsole",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Server Manager Management Client Library.\nThis package has been tested with Python 3.6+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n\n\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/)\nCode samples for this package can be found at [Server Manager Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-servermanager%2FREADME.png)\n",
        "repo_name": "servermanager/azure-mgmt-servermanager",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/servermanager/azure-mgmt-servermanager",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Service Bus Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-servicebus\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.servicebus import ServiceBusManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = ServiceBusManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\n\nCode samples for this package can be found at [Service Bus Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com and [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-servicebus%2FREADME.png)\n",
        "repo_name": "servicebus/azure-mgmt-servicebus",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-mgmt-servicebus",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Azure Service Bus client library for Python\n\nAzure Service Bus is a high performance cloud-managed messaging service for providing real-time and fault-tolerant communication between distributed senders and receivers.\n\nService Bus provides multiple mechanisms for asynchronous highly reliable communication, such as structured first-in-first-out messaging,\npublish/subscribe capabilities, and the ability to easily scale as your needs grow.\n\nUse the Service Bus client library for Python to communicate between applications and services and implement asynchronous messaging patterns.\n\n* Create Service Bus namespaces, queues, topics, and subscriptions, and modify their settings.\n* Send and receive messages within your Service Bus channels.\n* Utilize message locks, sessions, and dead letter functionality to implement complex messaging patterns.\n\n[Source code](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/servicebus/azure-servicebus/)\n| [Package (PyPi)][pypi]\n| [Package (Conda)](https://anaconda.org/microsoft/azure-servicebus)\n| [API reference documentation][api_docs]\n| [Product documentation][product_docs]\n| [Samples](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/servicebus/azure-servicebus/samples)\n| [Changelog](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/servicebus/azure-servicebus/CHANGELOG.md)\n\n**NOTE**: If you are using version 0.50 or lower and want to migrate to the latest version\nof this package please look at our [migration guide to move from Service Bus V0.50 to Service Bus V7][migration_guide].\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Install the package\n\nInstall the Azure Service Bus client library for Python with [pip][pip]:\n\n```Bash\npip install azure-servicebus\n```\n\n### Prerequisites:\nTo use this package, you must have:\n* Azure subscription - [Create a free account][azure_sub]\n* Azure Service Bus - [Namespace and management credentials][service_bus_namespace]\n* Python 3.7 or later - [Install Python][python]\n\n\nIf you need an Azure service bus namespace, you can create it via the [Azure Portal][azure_namespace_creation].\nIf you do not wish to use the graphical portal UI, you can use the Azure CLI via [Cloud Shell][cloud_shell_bash], or Azure CLI run locally, to create one with this Azure CLI command:\n\n```Bash\naz servicebus namespace create --resource-group <resource-group-name> --name <servicebus-namespace-name> --location <servicebus-namespace-location>\n```\n\n### Authenticate the client\n\nInteraction with Service Bus starts with an instance of the `ServiceBusClient` class. You either need a **connection string with SAS key**, or a **namespace** and one of its **account keys** to instantiate the client object.\nPlease find the samples linked below for demonstration as to how to authenticate via either approach.\n\n#### [Create client from connection string][sample_authenticate_client_connstr]\n\n- To obtain the required credentials, one can use the [Azure CLI][azure_cli] snippet (Formatted for Bash Shell) at the top of the linked sample to populate an environment variable with the service bus connection string (you can also find these values in the [Azure Portal][azure_portal] by following the step-by-step guide to [Get a service bus connection string][get_servicebus_conn_str]).\n\n#### [Create client using the azure-identity library][sample_authenticate_client_aad]:\n\n- This constructor takes the fully qualified namespace of your Service Bus instance and a credential that implements the\n[TokenCredential][token_credential_interface]\nprotocol. There are implementations of the `TokenCredential` protocol available in the\n[azure-identity package][pypi_azure_identity]. The fully qualified namespace is of the format `<yournamespace.servicebus.windows.net>`.\n- To use the credential types provided by `azure-identity`, please install the package:\n```pip install azure-identity```\n- Additionally, to use the async API, you must first install an async transport, such as [`aiohttp`](https://pypi.org/project/aiohttp/):\n```pip install aiohttp```\n- When using Azure Active Directory, your principal must be assigned a role which allows access to Service Bus, such as the\nAzure Service Bus Data Owner role. For more information about using Azure Active Directory authorization with Service Bus,\nplease refer to [the associated documentation][servicebus_aad_authentication].\n\n>**Note:** client can be initialized without a context manager, but must be manually closed via client.close() to not leak resources.\n\n## Key concepts\n\nOnce you've initialized a `ServiceBusClient`, you can interact with the primary resource types within a Service Bus Namespace, of which multiple can exist and on which actual message transmission takes place, the namespace often serving as an application container:\n\n* [Queue][queue_concept]: Allows for Sending and Receiving of message.  Often used for point-to-point communication.\n\n* [Topic][topic_concept]: As opposed to Queues, Topics are better suited to publish/subscribe scenarios.  A topic can be sent to, but requires a subscription, of which there can be multiple in parallel, to consume from.\n\n* [Subscription][subscription_concept]: The mechanism to consume from a Topic.  Each subscription is independent, and receives a copy of each message sent to the topic.  Rules and Filters can be used to tailor which messages are received by a specific subscription.\n\nFor more information about these resources, see [What is Azure Service Bus?][service_bus_overview].\n\nTo interact with these resources, one should be familiar with the following SDK concepts:\n\n* [ServiceBusClient][client_reference]: This is the object a user should first initialize to connect to a Service Bus Namespace.  To interact with a queue, topic, or subscription, one would spawn a sender or receiver off of this client.\n\n* [ServiceBusSender][sender_reference]: To send messages to a Queue or Topic, one would use the corresponding `get_queue_sender` or `get_topic_sender` method off of a `ServiceBusClient` instance as seen [here](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/servicebus/azure-servicebus/samples/sync_samples/send_queue.py).\n\n* [ServiceBusReceiver][receiver_reference]: To receive messages from a Queue or Subscription, one would use the corresponding `get_queue_receiver` or `get_subscription_receiver` method off of a `ServiceBusClient` instance as seen [here](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/servicebus/azure-servicebus/samples/sync_samples/receive_queue.py).\n\n* [ServiceBusMessage][message_reference]: When sending, this is the type you will construct to contain your payload.  When receiving, this is where you will access the payload.\n\n## Examples\n\nThe following sections provide several code snippets covering some of the most common Service Bus tasks, including:\n\n* [Send messages to a queue](#send-messages-to-a-queue \"Send messages to a queue\")\n* [Receive messages from a queue](#receive-messages-from-a-queue \"Receive messages from a queue\")\n* [Send and receive a message from a session enabled queue](#send-and-receive-a-message-from-a-session-enabled-queue \"Send and receive a message from a session enabled queue\")\n* [Working with topics and subscriptions](#working-with-topics-and-subscriptions \"Working with topics and subscriptions\")\n* [Settle a message after receipt](#settle-a-message-after-receipt \"Settle a message after receipt\")\n* [Automatically renew Message or Session locks](#automatically-renew-message-or-session-locks \"Automatically renew Message or Session locks\")\n\nTo perform management tasks such as creating and deleting queues/topics/subscriptions, please utilize the azure-mgmt-servicebus library, available [here][servicebus_management_repository].\n\nPlease find further examples in the [samples](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/servicebus/azure-servicebus/samples) directory demonstrating common Service Bus scenarios such as sending, receiving, session management and message handling.\n\n### Send messages to a queue\n> **NOTE:** see reference documentation [here][send_reference].\n\nThis example sends single message and array of messages to a queue that is assumed to already exist, created via the Azure portal or az commands.\n\n```python\nfrom azure.servicebus import ServiceBusClient, ServiceBusMessage\n\nimport os\nconnstr = os.environ['SERVICE_BUS_CONNECTION_STR']\nqueue_name = os.environ['SERVICE_BUS_QUEUE_NAME']\n\nwith ServiceBusClient.from_connection_string(connstr) as client:\n    with client.get_queue_sender(queue_name) as sender:\n        # Sending a single message\n        single_message = ServiceBusMessage(\"Single message\")\n        sender.send_messages(single_message)\n\n        # Sending a list of messages\n        messages = [ServiceBusMessage(\"First message\"), ServiceBusMessage(\"Second message\")]\n        sender.send_messages(messages)\n```\n\n> **NOTE:** A message may be scheduled for delayed delivery using the `ServiceBusSender.schedule_messages()` method, or by specifying `ServiceBusMessage.scheduled_enqueue_time_utc` before calling `ServiceBusSender.send_messages()`\n\n> For more detail on scheduling and schedule cancellation please see a sample [here](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/servicebus/azure-servicebus/samples/sync_samples/schedule_messages_and_cancellation.py).\n\n### Receive messages from a queue\n\nTo receive from a queue, you can either perform an ad-hoc receive via `receiver.receive_messages()` or receive persistently through the receiver itself.\n\n#### [Receive messages from a queue through iterating over ServiceBusReceiver][streaming_receive_reference]\n\n```python\nfrom azure.servicebus import ServiceBusClient\n\nimport os\nconnstr = os.environ['SERVICE_BUS_CONNECTION_STR']\nqueue_name = os.environ['SERVICE_BUS_QUEUE_NAME']\n\nwith ServiceBusClient.from_connection_string(connstr) as client:\n    # max_wait_time specifies how long the receiver should wait with no incoming messages before stopping receipt.\n    # Default is None; to receive forever.\n    with client.get_queue_receiver(queue_name, max_wait_time=30) as receiver:\n        for msg in receiver:  # ServiceBusReceiver instance is a generator.\n            print(str(msg))\n            # If it is desired to halt receiving early, one can break out of the loop here safely.\n```\n\n> **NOTE:** Any message received with `receive_mode=PEEK_LOCK` (this is the default, with the alternative RECEIVE_AND_DELETE removing the message from the queue immediately on receipt)\n> has a lock that must be renewed via `receiver.renew_message_lock` before it expires if processing would take longer than the lock duration.\n> See [AutoLockRenewer](#automatically-renew-message-or-session-locks \"Automatically renew Message or Session locks\") for a helper to perform this in the background automatically.\n> Lock duration is set in Azure on the queue or topic itself.\n\n#### [Receive messages from a queue through ServiceBusReceiver.receive_messages()][receive_reference]\n\n> **NOTE:** `ServiceBusReceiver.receive_messages()` receives a single or constrained list of messages through an ad-hoc method call, as opposed to receiving perpetually from the generator. It always returns a list.\n\n```python\nfrom azure.servicebus import ServiceBusClient\n\nimport os\nconnstr = os.environ['SERVICE_BUS_CONNECTION_STR']\nqueue_name = os.environ['SERVICE_BUS_QUEUE_NAME']\n\nwith ServiceBusClient.from_connection_string(connstr) as client:\n    with client.get_queue_receiver(queue_name) as receiver:\n        received_message_array = receiver.receive_messages(max_wait_time=10)  # try to receive a single message within 10 seconds\n        if received_message_array:\n            print(str(received_message_array[0]))\n\n    with client.get_queue_receiver(queue_name) as receiver:\n        received_message_array = receiver.receive_messages(max_message_count=5, max_wait_time=10)  # try to receive maximum 5 messages in a batch within 10 seconds\n        for message in received_message_array:\n            print(str(message))\n```\n\nIn this example, max_message_count declares the maximum number of messages to attempt receiving before hitting a max_wait_time as specified in seconds.\n\n> **NOTE:** It should also be noted that `ServiceBusReceiver.peek_messages()` is subtly different than receiving, as it does not lock the messages being peeked, and thus they cannot be settled.\n\n\n### Send and receive a message from a session enabled queue\n> **NOTE:** see reference documentation for session [send][session_send_reference] and [receive][session_receive_reference].\n\nSessions provide first-in-first-out and single-receiver semantics on top of a queue or subscription.  While the actual receive syntax is the same, initialization differs slightly.\n\n```python\nfrom azure.servicebus import ServiceBusClient, ServiceBusMessage\n\nimport os\nconnstr = os.environ['SERVICE_BUS_CONNECTION_STR']\nqueue_name = os.environ['SERVICE_BUS_QUEUE_NAME']\nsession_id = os.environ['SERVICE_BUS_SESSION_ID']\n\nwith ServiceBusClient.from_connection_string(connstr) as client:\n    with client.get_queue_sender(queue_name) as sender:\n        sender.send_messages(ServiceBusMessage(\"Session Enabled Message\", session_id=session_id))\n\n    # If session_id is null here, will receive from the first available session.\n    with client.get_queue_receiver(queue_name, session_id=session_id) as receiver:\n        for msg in receiver:\n            print(str(msg))\n```\n\n> **NOTE**: Messages received from a session do not need their locks renewed like a non-session receiver; instead the lock management occurs at the\n> session level with a session lock that may be renewed with `receiver.session.renew_lock()`\n\n\n### Working with [topics][topic_reference] and [subscriptions][subscription_reference]\n> **NOTE:** see reference documentation for [topics][topic_reference] and [subscriptions][subscription_reference].\n\nTopics and subscriptions give an alternative to queues for sending and receiving messages.  See documents [here][topic_concept] for more overarching detail,\nand of how these differ from queues.\n\n```python\nfrom azure.servicebus import ServiceBusClient, ServiceBusMessage\n\nimport os\nconnstr = os.environ['SERVICE_BUS_CONNECTION_STR']\ntopic_name = os.environ['SERVICE_BUS_TOPIC_NAME']\nsubscription_name = os.environ['SERVICE_BUS_SUBSCRIPTION_NAME']\n\nwith ServiceBusClient.from_connection_string(connstr) as client:\n    with client.get_topic_sender(topic_name) as sender:\n        sender.send_messages(ServiceBusMessage(\"Data\"))\n\n    # If session_id is null here, will receive from the first available session.\n    with client.get_subscription_receiver(topic_name, subscription_name) as receiver:\n        for msg in receiver:\n            print(str(msg))\n```\n\n### Settle a message after receipt\n\nWhen receiving from a queue, you have multiple actions you can take on the messages you receive.\n\n> **NOTE**: You can only settle `ServiceBusReceivedMessage` objects which are received in `ServiceBusReceiveMode.PEEK_LOCK` mode (this is the default).\n> `ServiceBusReceiveMode.RECEIVE_AND_DELETE` mode removes the message from the queue on receipt.  `ServiceBusReceivedMessage` messages\n> returned from `peek_messages()` cannot be settled, as the message lock is not taken like it is in the aforementioned receive methods.\n\nIf the message has a lock as mentioned above, settlement will fail if the message lock has expired.\nIf processing would take longer than the lock duration, it must be maintained via `receiver.renew_message_lock` before it expires.\nLock duration is set in Azure on the queue or topic itself.\nSee [AutoLockRenewer](#automatically-renew-message-or-session-locks \"Automatically renew Message or Session locks\") for a helper to perform this in the background automatically.\n\n#### [Complete][complete_reference]\n\nDeclares the message processing to be successfully completed, removing the message from the queue.\n\n```python\nfrom azure.servicebus import ServiceBusClient\n\nimport os\nconnstr = os.environ['SERVICE_BUS_CONNECTION_STR']\nqueue_name = os.environ['SERVICE_BUS_QUEUE_NAME']\n\nwith ServiceBusClient.from_connection_string(connstr) as client:\n    with client.get_queue_receiver(queue_name) as receiver:\n        for msg in receiver:\n            print(str(msg))\n            receiver.complete_message(msg)\n```\n\n#### [Abandon][abandon_reference]\n\nAbandon processing of the message for the time being, returning the message immediately back to the queue to be picked up by another (or the same) receiver.\n\n```python\nfrom azure.servicebus import ServiceBusClient\n\nimport os\nconnstr = os.environ['SERVICE_BUS_CONNECTION_STR']\nqueue_name = os.environ['SERVICE_BUS_QUEUE_NAME']\n\nwith ServiceBusClient.from_connection_string(connstr) as client:\n    with client.get_queue_receiver(queue_name) as receiver:\n        for msg in receiver:\n            print(str(msg))\n            receiver.abandon_message(msg)\n```\n\n#### [DeadLetter][deadletter_reference]\n\nTransfer the message from the primary queue into a special \"dead-letter sub-queue\" where it can be accessed using the `ServiceBusClient.get_<queue|subscription>_receiver` function with parameter `sub_queue=ServiceBusSubQueue.DEAD_LETTER` and consumed from like any other receiver. (see sample [here](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/servicebus/azure-servicebus/samples/sync_samples/receive_deadlettered_messages.py))\n\n```python\nfrom azure.servicebus import ServiceBusClient\n\nimport os\nconnstr = os.environ['SERVICE_BUS_CONNECTION_STR']\nqueue_name = os.environ['SERVICE_BUS_QUEUE_NAME']\n\nwith ServiceBusClient.from_connection_string(connstr) as client:\n    with client.get_queue_receiver(queue_name) as receiver:\n        for msg in receiver:\n            print(str(msg))\n            receiver.dead_letter_message(msg)\n```\n\n#### [Defer][defer_reference]\n\nDefer is subtly different from the prior settlement methods.  It prevents the message from being directly received from the queue\nby setting it aside such that it must be received by sequence number in a call to `ServiceBusReceiver.receive_deferred_messages` (see sample [here](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/servicebus/azure-servicebus/samples/sync_samples/receive_deferred_message_queue.py))\n\n```python\nfrom azure.servicebus import ServiceBusClient\n\nimport os\nconnstr = os.environ['SERVICE_BUS_CONNECTION_STR']\nqueue_name = os.environ['SERVICE_BUS_QUEUE_NAME']\n\nwith ServiceBusClient.from_connection_string(connstr) as client:\n    with client.get_queue_receiver(queue_name) as receiver:\n        for msg in receiver:\n            print(str(msg))\n            receiver.defer_message(msg)\n```\n\n### Automatically renew Message or Session locks\n> **NOTE:** see reference documentation for [auto-lock-renewal][autolockrenew_reference].\n\n`AutoLockRenewer` is a simple method for ensuring your message or session remains locked even over long periods of time, if calling `receiver.renew_message_lock`/`receiver.session.renew_lock` is impractical or undesired.\nInternally, it is not much more than shorthand for creating a concurrent watchdog to do lock renewal if the object is nearing expiry.\nIt should be used as follows:\n\n* Message lock automatic renewing\n\n```python\nfrom azure.servicebus import ServiceBusClient, AutoLockRenewer\n\nimport os\nconnstr = os.environ['SERVICE_BUS_CONNECTION_STR']\nqueue_name = os.environ['SERVICE_BUS_QUEUE_NAME']\n\n# Can also be called via \"with AutoLockRenewer() as renewer\" to automate closing.\nrenewer = AutoLockRenewer()\nwith ServiceBusClient.from_connection_string(connstr) as client:\n    with client.get_queue_receiver(queue_name) as receiver:\n        for msg in receiver.receive_messages():\n            renewer.register(receiver, msg, max_lock_renewal_duration=60)\n            # Do your application logic here\n            receiver.complete_message(msg)\nrenewer.close()\n```\n\n* Session lock automatic renewing\n\n```python\nfrom azure.servicebus import ServiceBusClient, AutoLockRenewer\n\nimport os\nconnstr = os.environ['SERVICE_BUS_CONNECTION_STR']\nsession_queue_name = os.environ['SERVICE_BUS_SESSION_QUEUE_NAME']\nsession_id = os.environ['SERVICE_BUS_SESSION_ID']\n\n# Can also be called via \"with AutoLockRenewer() as renewer\" to automate closing.\nrenewer = AutoLockRenewer()\nwith ServiceBusClient.from_connection_string(connstr) as client:\n    with client.get_queue_receiver(session_queue_name, session_id=session_id) as receiver:\n        renewer.register(receiver, receiver.session, max_lock_renewal_duration=300) # Duration for how long to maintain the lock for, in seconds.\n\n        for msg in receiver.receive_messages():\n            # Do your application logic here\n            receiver.complete_message(msg)\nrenewer.close()\n```\n\nIf for any reason auto-renewal has been interrupted or failed, this can be observed via the `auto_renew_error` property on the object being renewed, or by having passed a callback to the `on_lock_renew_failure` parameter on renewer initialization.\nIt would also manifest when trying to take action (such as completing a message) on the specified object.\n\n## Troubleshooting\n\n### Logging\n\n- Enable `azure.servicebus` logger to collect traces from the library.\n- Enable `uamqp` logger to collect traces from the underlying uAMQP library.\n- Enable AMQP frame level trace by setting `logging_enable=True` when creating the client.\n- There may be cases where you consider the `uamqp` logging to be too verbose. To suppress unnecessary logging, add the following snippet to the top of your code:\n```python\nimport logging\n\n# The logging levels below may need to be changed based on the logging that you want to suppress.\nuamqp_logger = logging.getLogger('uamqp')\nuamqp_logger.setLevel(logging.ERROR)\n\n# or even further fine-grained control, suppressing the warnings in uamqp.connection module\nuamqp_connection_logger = logging.getLogger('uamqp.connection')\nuamqp_connection_logger.setLevel(logging.ERROR)\n```\n\n### Timeouts\n\nThere are various timeouts a user should be aware of within the library.\n- 10 minute service side link closure:  A link, once opened, will be closed after 10 minutes idle to protect the service against resource leakage.  This should largely\nbe transparent to a user, but if you notice a reconnect occurring after such a duration, this is why.  Performing any operations, including management operations, on the\nlink will extend this timeout.\n- max_wait_time: Provided on creation of a receiver or when calling `receive_messages()`, the time after which receiving messages will halt after no traffic.  This applies both to the imperative `receive_messages()` function as well as the length\na generator-style receive will run for before exiting if there are no messages.  Passing None (default) will wait forever, up until the 10 minute threshold if no other action is taken.\n\n> **NOTE:** If processing of a message or session is sufficiently long as to cause timeouts, as an alternative to calling `receiver.renew_message_lock`/`receiver.session.renew_lock` manually, one can\n> leverage the `AutoLockRenewer` functionality detailed [above](#automatically-renew-message-or-session-locks \"Automatically renew Message or Session locks\").\n\n### Common Exceptions\n\nThe Service Bus APIs generate the following exceptions in azure.servicebus.exceptions:\n\n- **ServiceBusConnectionError:** An error occurred in the connection to the service.\nThis may have been caused by a transient network issue or service problem. It is recommended to retry.\n- **ServiceBusAuthorizationError:** An error occurred when authorizing the connection to the service.\nThis may have been caused by the credentials not having the right permission to perform the operation.\nIt is recommended to check the permission of the credentials.\n- **ServiceBusAuthenticationError:** An error occurred when authenticate the connection to the service.\nThis may have been caused by the credentials being incorrect. It is recommended to check the credentials.\n- **OperationTimeoutError:** This indicates that the service did not respond to an operation within the expected amount of time.\nThis may have been caused by a transient network issue or service problem. The service may or may not have successfully completed the request; the status is not known.\nIt is recommended to attempt to verify the current state and retry if necessary.\n- **MessageSizeExceededError:** This indicate that the message content is larger than the service bus frame size.\nThis could happen when too many service bus messages are sent in a batch or the content passed into\nthe body of a `Message` is too large. It is recommended to reduce the count of messages being sent in a batch or the size of content being passed into a single `ServiceBusMessage`.\n- **MessageAlreadySettled:** This indicates failure to settle the message.\nThis could happen when trying to settle an already-settled message.\n- **MessageLockLostError:** The lock on the message has expired and it has been released back to the queue.\nIt will need to be received again in order to settle it.\nYou should be aware of the lock duration of a message and keep renewing the lock before expiration in case of long processing time.\n`AutoLockRenewer` could help on keeping the lock of the message automatically renewed.\n- **SessionLockLostError:** The lock on the session has expired.\nAll unsettled messages that have been received can no longer be settled.\nIt is recommended to reconnect to the session if receive messages again if necessary.\nYou should be aware of the lock duration of a session and keep renewing the lock before expiration in case of long processing time.\n`AutoLockRenewer` could help on keeping the lock of the session automatically renewed.\n- **MessageNotFoundError:** Attempt to receive a message with a particular sequence number. This message isn't found.\nMake sure the message hasn't been received already. Check the deadletter queue to see if the message has been deadlettered.\n- **MessagingEntityNotFoundError:** Entity associated with the operation doesn't exist or it has been deleted.\nPlease make sure the entity exists.\n- **MessagingEntityDisabledError:** Request for a runtime operation on a disabled entity. Please Activate the entity.\n- **ServiceBusQuotaExceededError:** The messaging entity has reached its maximum allowable size, or the maximum number of connections to a namespace has been exceeded.\nCreate space in the entity by receiving messages from the entity or its subqueues.\n- **ServiceBusServerBusyError:** Service isn't able to process the request at this time. Client can wait for a period of time, then retry the operation.\n- **ServiceBusCommunicationError:** Client isn't able to establish a connection to Service Bus.\nMake sure the supplied host name is correct and the host is reachable.\nIf your code runs in an environment with a firewall/proxy, ensure that the traffic to the Service Bus domain/IP address and ports isn't blocked.\n- **SessionCannotBeLockedError:** Attempt to connect to a session with a specific session ID, but the session is currently locked by another client.\nMake sure the session is unlocked by other clients.\n- **AutoLockRenewFailed:** An attempt to renew a lock on a message or session in the background has failed.\nThis could happen when the receiver used by `AutoLockRenewer` is closed or the lock of the renewable has expired.\nIt is recommended to re-register the renewable message or session by receiving the message or connect to the sessionful entity again.\n- **AutoLockRenewTimeout:** The time allocated to renew the message or session lock has elapsed. You could re-register the object that wants be auto lock renewed or extend the timeout in advance.\n- **ServiceBusError:** All other Service Bus related errors. It is the root error class of all the errors described above.\n\nPlease view the [exceptions reference docs][exception_reference] for detailed descriptions of our common Exception types.\n\n## Next steps\n\n### More sample code\n\nPlease find further examples in the [samples](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/servicebus/azure-servicebus/samples) directory demonstrating common Service Bus scenarios such as sending, receiving, session management and message handling.\n\n### Additional documentation\n\nFor more extensive documentation on the Service Bus service, see the [Service Bus documentation][service_bus_docs] on docs.microsoft.com.\n\n### Management capabilities and documentation\n\nFor users seeking to perform management operations against ServiceBus (Creating a queue/topic/etc, altering filter rules, enumerating entities)\nplease see the [azure-mgmt-servicebus documentation][service_bus_mgmt_docs] for API documentation.  Terse usage examples can be found\n[here](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/servicebus/azure-mgmt-servicebus/tests) as well.\n\n### Pure Python AMQP Transport and Backward Compatibility Support\n\nThe Azure Service Bus client library is now based on a pure Python AMQP implementation. `uAMQP` has been removed as required dependency.\n\nTo use `uAMQP` as the underlying transport:\n\n1. Install `uamqp` with pip.\n\n```\n$ pip install uamqp\n```\n\n2. Pass `uamqp_transport=True` during client construction.\n\n```python\nfrom azure.servicebus import ServiceBusClient\nconnection_str = '<< CONNECTION STRING FOR THE SERVICE BUS NAMESPACE >>'\nqueue_name = '<< NAME OF THE QUEUE >>'\nclient = ServiceBusClient.from_connection_string(\n    connection_str, uamqp_transport=True\n)\n```\n\nNote: The `message` attribute on `ServiceBusMessage`/`ServiceBusMessageBatch`/`ServiceBusReceivedMessage`, which previously exposed the `uamqp.Message`, has been deprecated.\n The \"Legacy\" objects returned by `message` attribute have been introduced to help facilitate the transition.\n\n### Building uAMQP wheel from source\n\n`azure-servicebus` depends on the [uAMQP](https://pypi.org/project/uamqp/) for the AMQP protocol implementation.\nuAMQP wheels are provided for most major operating systems and will be installed automatically when installing `azure-servicebus`.\nIf [uAMQP](https://pypi.org/project/uamqp/) is intended to be used as the underlying AMQP protocol implementation for `azure-servicebus`,\nuAMQP wheels can be found for most major operating systems.\n\nIf you're running on a platform for which uAMQP wheels are not provided, please follow\nIf you intend to use `uAMQP` and you're running on a platform for which uAMQP wheels are not provided, please follow\n the [uAMQP Installation](https://github.com/Azure/azure-uamqp-python#installation) guidance to install from source.\n\n## Contributing\n\nThis project welcomes contributions and suggestions.  Most contributions require you to agree to a\nContributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us\nthe rights to use your contribution. For details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide\na CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions\nprovided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or\ncontact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\n<!-- LINKS -->\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[api_docs]: https://docs.microsoft.com/python/api/overview/azure/servicebus-readme\n[product_docs]: https://docs.microsoft.com/azure/service-bus-messaging/\n[azure_portal]: https://portal.azure.com\n[azure_sub]: https://azure.microsoft.com/free/\n[cloud_shell]: https://docs.microsoft.com/azure/cloud-shell/overview\n[cloud_shell_bash]: https://shell.azure.com/bash\n[pip]: https://pypi.org/project/pip/\n[pypi]: https://pypi.org/project/azure-servicebus/\n[python]: https://www.python.org/downloads/\n[venv]: https://docs.python.org/3/library/venv.html\n[virtualenv]: https://virtualenv.pypa.io\n[service_bus_namespace]: https://docs.microsoft.com/azure/service-bus-messaging/service-bus-create-namespace-portal\n[service_bus_overview]: https://docs.microsoft.com/azure/service-bus-messaging/service-bus-messaging-overview\n[queue_status_codes]: https://docs.microsoft.com/rest/api/servicebus/create-queue#response-codes\n[service_bus_docs]: https://docs.microsoft.com/azure/service-bus/\n[service_bus_mgmt_docs]: https://docs.microsoft.com/python/api/azure-mgmt-servicebus/?view=azure-python\n[queue_concept]: https://docs.microsoft.com/azure/service-bus-messaging/service-bus-messaging-overview#queues\n[topic_concept]: https://docs.microsoft.com/azure/service-bus-messaging/service-bus-messaging-overview#topics\n[subscription_concept]: https://docs.microsoft.com/azure/service-bus-messaging/service-bus-queues-topics-subscriptions#topics-and-subscriptions\n[azure_namespace_creation]: https://docs.microsoft.com/azure/service-bus-messaging/service-bus-create-namespace-portal\n[servicebus_management_repository]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/servicebus/azure-mgmt-servicebus\n[get_servicebus_conn_str]: https://docs.microsoft.com/azure/service-bus-messaging/service-bus-create-namespace-portal#get-the-connection-string\n[servicebus_aad_authentication]: https://docs.microsoft.com/azure/service-bus-messaging/service-bus-authentication-and-authorization\n[token_credential_interface]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/core/azure-core/azure/core/credentials.py\n[pypi_azure_identity]: https://pypi.org/project/azure-identity/\n[message_reference]: https://azuresdkdocs.blob.core.windows.net/$web/python/azure-servicebus/latest/azure.servicebus.html#azure.servicebus.ServiceBusMessage\n[receiver_reference]: https://azuresdkdocs.blob.core.windows.net/$web/python/azure-servicebus/latest/azure.servicebus.html#azure.servicebus.ServiceBusReceiver\n[sender_reference]: https://azuresdkdocs.blob.core.windows.net/$web/python/azure-servicebus/latest/azure.servicebus.html#azure.servicebus.ServiceBusSender\n[client_reference]: https://azuresdkdocs.blob.core.windows.net/$web/python/azure-servicebus/latest/azure.servicebus.html#azure.servicebus.ServiceBusClient\n[send_reference]: https://azuresdkdocs.blob.core.windows.net/$web/python/azure-servicebus/latest/azure.servicebus.html?highlight=send_messages#azure.servicebus.ServiceBusSender.send_messages\n[receive_reference]: https://azuresdkdocs.blob.core.windows.net/$web/python/azure-servicebus/latest/azure.servicebus.html?highlight=receive_messages#azure.servicebus.ServiceBusReceiver.receive_messages\n[streaming_receive_reference]: https://azuresdkdocs.blob.core.windows.net/$web/python/azure-servicebus/latest/azure.servicebus.html?highlight=next#azure.servicebus.ServiceBusReceiver.next\n[session_receive_reference]: https://azuresdkdocs.blob.core.windows.net/$web/python/azure-servicebus/latest/azure.servicebus.html?highlight=session_id#azure.servicebus.ServiceBusSessionReceiver.receive_messages\n[session_send_reference]: https://azuresdkdocs.blob.core.windows.net/$web/python/azure-servicebus/latest/azure.servicebus.html?highlight=session_id#azure.servicebus.ServiceBusMessage.session_id\n[complete_reference]: https://azuresdkdocs.blob.core.windows.net/$web/python/azure-servicebus/latest/azure.servicebus.html?highlight=complete_message#azure.servicebus.ServiceBusReceiver.complete_message\n[abandon_reference]: https://azuresdkdocs.blob.core.windows.net/$web/python/azure-servicebus/latest/azure.servicebus.html?highlight=abandon_message#azure.servicebus.ServiceBusReceiver.abandon_message\n[defer_reference]: https://azuresdkdocs.blob.core.windows.net/$web/python/azure-servicebus/latest/azure.servicebus.html?highlight=defer_message#azure.servicebus.ServiceBusReceiver.defer_message\n[deadletter_reference]: https://azuresdkdocs.blob.core.windows.net/$web/python/azure-servicebus/latest/azure.servicebus.html?highlight=dead_letter_message#azure.servicebus.ServiceBusReceiver.dead_letter_message\n[autolockrenew_reference]: https://azuresdkdocs.blob.core.windows.net/$web/python/azure-servicebus/latest/azure.servicebus.html#azure.servicebus.AutoLockRenewer\n[exception_reference]: https://azuresdkdocs.blob.core.windows.net/$web/python/azure-servicebus/latest/azure.servicebus.html#module-azure.servicebus.exceptions\n[subscription_reference]: https://azuresdkdocs.blob.core.windows.net/$web/python/azure-servicebus/latest/azure.servicebus.aio.html?highlight=subscription#azure.servicebus.aio.ServiceBusClient.get_subscription_receiver\n[topic_reference]: https://azuresdkdocs.blob.core.windows.net/$web/python/azure-servicebus/latest/azure.servicebus.html?highlight=topic#azure.servicebus.ServiceBusClient.get_topic_sender\n[sample_authenticate_client_connstr]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/samples/sync_samples/authenticate_client_connstr.py\n[sample_authenticate_client_aad]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus/samples/sync_samples/client_identity_authentication.py\n[migration_guide]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/servicebus/azure-servicebus/migration_guide.md\n",
        "repo_name": "servicebus/azure-servicebus",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/servicebus/azure-servicebus",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Service Fabric Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/service-fabric)\nCode samples for this package can be found at [Service Fabric Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-servicefabric%2FREADME.png)\n",
        "repo_name": "servicefabric/azure-mgmt-servicefabric",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/servicefabric/azure-mgmt-servicefabric",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Service Fabric Client Library.\nThis package has been tested with Python 3.6+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\n\n\nFor code examples, see [Service Fabric](https://docs.microsoft.com/python/api/overview/azure/service-fabric) on docs.microsoft.com.\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-servicefabric%2FREADME.png)\n",
        "repo_name": "servicefabric/azure-servicefabric",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/servicefabric/azure-servicefabric",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Service Fabric Managed Clusters Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-servicefabricmanagedclusters\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.servicefabricmanagedclusters import ServiceFabricManagedClustersManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = ServiceFabricManagedClustersManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\nCode samples for this package can be found at:\n- [Search Service Fabric Managed Clusters Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com\n- [Azure Python Mgmt SDK Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-servicefabricmanagedclusters%2FREADME.png)\n",
        "repo_name": "servicefabricmanagedclusters/azure-mgmt-servicefabricmanagedclusters",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/servicefabricmanagedclusters/azure-mgmt-servicefabricmanagedclusters",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Service Linker Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/)\nCode samples for this package can be found at [Service Linker Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://github.com/Azure-Samples/azure-samples-python-management/tree/main/samples/servicelinker)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-servicelinker%2FREADME.png)\n",
        "repo_name": "servicelinker/azure-mgmt-servicelinker",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/servicelinker/azure-mgmt-servicelinker",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Servicenetworking Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-servicenetworking\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.servicenetworking import ServiceNetworkingMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = ServiceNetworkingMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\nCode samples for this package can be found at:\n- [Search Servicenetworking Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com\n- [Azure Python Mgmt SDK Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-servicenetworking%2FREADME.png)\n",
        "repo_name": "servicenetworking/azure-mgmt-servicenetworking",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/servicenetworking/azure-mgmt-servicenetworking",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure SignalR Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-signalr\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.signalr import SignalRManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = SignalRManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\n\nCode samples for this package can be found at [SignalR](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com and [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-signalr%2FREADME.png)\n",
        "repo_name": "signalr/azure-mgmt-signalr",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/signalr/azure-mgmt-signalr",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure SQL Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-sql\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.sql import SqlManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = SqlManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\nCode samples for this package can be found at:\n- [Search SQL Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com\n- [Azure Python Mgmt SDK Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-sql%2FREADME.png)\n",
        "repo_name": "sql/azure-mgmt-sql",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/sql/azure-mgmt-sql",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Sql Virtual Machine Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/)\nCode samples for this package can be found at [Sql Virtual Machine Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-sqlvirtualmachine%2FREADME.png)\n",
        "repo_name": "sql/azure-mgmt-sqlvirtualmachine",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/sql/azure-mgmt-sqlvirtualmachine",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Storage Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-storage\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.storage import StorageManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = StorageManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\n\nCode samples for this package can be found at [Storage Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com and [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-storage%2FREADME.png)\n",
        "repo_name": "storage/azure-mgmt-storage",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/storage/azure-mgmt-storage",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Storage Cache Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-storagecache\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.storagecache import StorageCacheManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = StorageCacheManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\n\nCode samples for this package can be found at [Storage Cache Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com and [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-storagecache%2FREADME.png)\n",
        "repo_name": "storage/azure-mgmt-storagecache",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/storage/azure-mgmt-storagecache",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Storage Import Export Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/)\nCode samples for this package can be found at [Storage Import Export Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-storageimportexport%2FREADME.png)\n",
        "repo_name": "storage/azure-mgmt-storageimportexport",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/storage/azure-mgmt-storageimportexport",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Storage Sync Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/)\nCode samples for this package can be found at [Storage Sync](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-storagesync%2FREADME.png)\n",
        "repo_name": "storage/azure-mgmt-storagesync",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/storage/azure-mgmt-storagesync",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Azure Storage Blob ChangeFeed client library for Python\n\nThis preview package for Python enables users to get blob change feed events. These events can be lazily generated, iterated by page, retrieved for a specific time interval, or iterated from a specific continuation token.\n\n\n[Source code](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-blob-changefeed/azure/storage/blob/changefeed) | [Package (PyPi)](https://pypi.org/project/azure-storage-blob-changefeed/) | [API reference documentation](https://aka.ms/azsdk-python-storage-blob-changefeed-ref) | [Product documentation](https://docs.microsoft.com/azure/storage/) | [Samples](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-blob-changefeed/samples)\n\n\n## Getting started\n\n### Prerequisites\n* Python 3.7 or later is required to use this package. For more details, please read our page on [Azure SDK for Python version support policy](https://github.com/Azure/azure-sdk-for-python/wiki/Azure-SDKs-Python-version-support-policy).\n* You must have an [Azure subscription](https://azure.microsoft.com/free/) and an\n[Azure storage account](https://docs.microsoft.com/azure/storage/blobs/data-lake-storage-quickstart-create-account) to use this package.\n\n### Install the package\nInstall the Azure Storage Blob ChangeFeed client library for Python with [pip](https://pypi.org/project/pip/):\n\n```bash\npip install azure-storage-blob-changefeed --pre\n```\n\n### Create a storage account\nIf you wish to create a new storage account, you can use the\n[Azure Portal](https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-portal),\n[Azure PowerShell](https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-powershell),\nor [Azure CLI](https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-cli):\n\n```bash\n# Create a new resource group to hold the storage account -\n# if using an existing resource group, skip this step\naz group create --name my-resource-group --location westus2\n\n# Create the storage account\naz storage account create -n my-storage-account-name -g my-resource-group\n```\n\nTo enable changefeed you can use:\n[Azure Portal](https://docs.microsoft.com/azure/storage/blobs/storage-blob-change-feed?tabs=azure-portal#enable-and-disable-the-change-feed),\n[Azure PowerShell](https://docs.microsoft.com/azure/storage/blobs/storage-blob-change-feed?tabs=azure-powershell#enable-and-disable-the-change-feed)\nor [Template](https://docs.microsoft.com/azure/storage/blobs/storage-blob-change-feed?tabs=template#enable-and-disable-the-change-feed).\n\n### Authenticate the client\n\nInteraction with Blob ChangeFeed client starts with an instance of the ChangeFeedClient class. You need an existing storage account, its URL, and a credential to instantiate the client object.\n\n#### Get credentials\n\nTo authenticate the client you have a few options:\n1. Use a SAS token string\n2. Use an account shared access key\n3. Use a token credential from [azure.identity](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity)\n\nAlternatively, you can authenticate with a storage connection string using the `from_connection_string` method. See example: [Client creation with a connection string](#client-creation-with-a-connection-string).\n\nYou can omit the credential if your account URL already has a SAS token.\n\n#### Create client\n\nOnce you have your account URL and credentials ready, you can create the ChangeFeedClient:\n\n```python\nfrom azure.storage.blob.changefeed import ChangeFeedClient\n\nservice = ChangeFeedClient(account_url=\"https://<my-storage-account-name>.blob.core.windows.net/\", credential=credential)\n```\n\n## Key concepts\n\n#### Clients\n\nThe Blob ChangeFeed SDK provides one client:\n* ChangeFeedClient: this client allows you to get change feed events by page, get all change feed events, get events in a time range, start listing events with a continuation token.\n\n## Examples\n\nThe following sections provide several code snippets covering some of the most common Storage Blob ChangeFeed, including:\n\n* [Client creation with a connection string](#client-creation-with-a-connection-string)\n* [Enumerating Events Within a Time Range](#enumerating-events-within-a-time-range)\n* [Enumerating All Events](#enumerating-all-events)\n* [Enumerating Events by Page](#enumerating-events-by-page)\n\n\n### Client creation with a connection string\nCreate the ChangeFeedClient using the connection string to your Azure Storage account.\n\n```python\nfrom azure.storage.blob.changefeed import ChangeFeedClient\n\nservice = ChangeFeedClient.from_connection_string(conn_str=\"my_connection_string\")\n```\n### Enumerating Events Within a Time Range\nList all events within a time range.\n\n```python\nfrom datetime import datetime\nfrom azure.storage.blob.changefeed import ChangeFeedClient\n\ncf_client = ChangeFeedClient(\"https://{}.blob.core.windows.net\".format(\"YOUR_ACCOUNT_NAME\"),\n                             credential=\"Your_ACCOUNT_KEY\")\nstart_time = datetime(2020, 1, 6)\nend_time = datetime(2020, 3, 4)\nchange_feed = cf_client.list_changes(start_time=start_time, end_time=end_time)\n\n# print range of events\nfor event in change_feed:\n    print(event)\n```\n\n### Enumerating All Events\nList all events.\n\n```python\nfrom azure.storage.blob.changefeed import ChangeFeedClient\n\ncf_client = ChangeFeedClient(\"https://{}.blob.core.windows.net\".format(\"YOUR_ACCOUNT_NAME\"),\n                             credential=\"Your_ACCOUNT_KEY\")\nchange_feed = cf_client.list_changes()\n\n# print all events\nfor event in change_feed:\n    print(event)\n```\n\n### Enumerating Events by Page\nList events by page.\n\n```python\nfrom azure.storage.blob.changefeed import ChangeFeedClient\n\ncf_client = ChangeFeedClient(\"https://{}.blob.core.windows.net\".format(\"YOUR_ACCOUNT_NAME\"),\n                             credential=\"Your_ACCOUNT_KEY\")\n\nchange_feed = cf_client.list_changes().by_page()\n\n# print first page of events\nchange_feed_page1 = next(change_feed)\nfor event in change_feed_page1:\n    print(event)\n```\n\n## Troubleshooting\n\n### Logging\nThis library uses the standard\n[logging](https://docs.python.org/3/library/logging.html) library for logging.\nBasic information about HTTP sessions (URLs, headers, etc.) is logged at INFO\nlevel.\n\nDetailed DEBUG level logging, including request/response bodies and unredacted\nheaders, can be enabled on a client with the `logging_enable` argument:\n```python\nimport sys\nimport logging\nfrom azure.storage.blob.changefeed import ChangeFeedClient\n\n# Create a logger for the 'azure.storage.blob.changefeed' SDK\nlogger = logging.getLogger('azure.storage')\nlogger.setLevel(logging.DEBUG)\n\n# Configure a console output\nhandler = logging.StreamHandler(stream=sys.stdout)\nlogger.addHandler(handler)\n\n# This client will log detailed information about its HTTP sessions, at DEBUG level\nservice_client = ChangeFeedClient.from_connection_string(\"your_connection_string\", logging_enable=True)\n```\n\n## Next steps\n\n### More sample code\n\nGet started with our [Azure Blob ChangeFeed samples](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-blob-changefeed/samples).\n\nSeveral Storage Blob ChangeFeed Python SDK samples are available to you in the SDK's GitHub repository. These samples provide example code for additional scenarios commonly encountered while working with Blob ChangeFeed:\n\n* [change_feed_samples.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-blob-changefeed/samples/change_feed_samples.py) - Examples for authenticating and operating on the client:\n    * list events by page\n    * list all events\n    * list events in a time range\n    * list events starting from a continuation token\n\n\n## Contributing\nThis project welcomes contributions and suggestions.  Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.",
        "repo_name": "storage/azure-storage-blob-changefeed",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob-changefeed",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Azure Storage Blobs client library for Python\nAzure Blob storage is Microsoft's object storage solution for the cloud. Blob storage is optimized for storing massive amounts of unstructured data, such as text or binary data.\n\nBlob storage is ideal for:\n\n* Serving images or documents directly to a browser\n* Storing files for distributed access\n* Streaming video and audio\n* Storing data for backup and restore, disaster recovery, and archiving\n* Storing data for analysis by an on-premises or Azure-hosted service\n\n[Source code](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-blob/azure/storage/blob)\n| [Package (PyPI)](https://pypi.org/project/azure-storage-blob/)\n| [Package (Conda)](https://anaconda.org/microsoft/azure-storage/)\n| [API reference documentation](https://aka.ms/azsdk-python-storage-blob-ref)\n| [Product documentation](https://docs.microsoft.com/azure/storage/)\n| [Samples](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-blob/samples)\n\n\n## Getting started\n\n### Prerequisites\n* Python 3.7 or later is required to use this package. For more details, please read our page on [Azure SDK for Python version support policy](https://github.com/Azure/azure-sdk-for-python/wiki/Azure-SDKs-Python-version-support-policy).\n* You must have an [Azure subscription](https://azure.microsoft.com/free/) and an\n[Azure storage account](https://docs.microsoft.com/azure/storage/common/storage-account-overview) to use this package.\n\n### Install the package\nInstall the Azure Storage Blobs client library for Python with [pip](https://pypi.org/project/pip/):\n\n```bash\npip install azure-storage-blob\n```\n\n### Create a storage account\nIf you wish to create a new storage account, you can use the\n[Azure Portal](https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-portal),\n[Azure PowerShell](https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-powershell),\nor [Azure CLI](https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-cli):\n\n```bash\n# Create a new resource group to hold the storage account -\n# if using an existing resource group, skip this step\naz group create --name my-resource-group --location westus2\n\n# Create the storage account\naz storage account create -n my-storage-account-name -g my-resource-group\n```\n\n### Create the client\nThe Azure Storage Blobs client library for Python allows you to interact with three types of resources: the storage\naccount itself, blob storage containers, and blobs. Interaction with these resources starts with an instance of a\n[client](#clients). To create a client object, you will need the storage account's blob service account URL and a\ncredential that allows you to access the storage account:\n\n```python\nfrom azure.storage.blob import BlobServiceClient\n\nservice = BlobServiceClient(account_url=\"https://<my-storage-account-name>.blob.core.windows.net/\", credential=credential)\n```\n\n#### Looking up the account URL\nYou can find the storage account's blob service URL using the\n[Azure Portal](https://docs.microsoft.com/azure/storage/common/storage-account-overview#storage-account-endpoints),\n[Azure PowerShell](https://docs.microsoft.com/powershell/module/az.storage/get-azstorageaccount),\nor [Azure CLI](https://docs.microsoft.com/cli/azure/storage/account?view=azure-cli-latest#az-storage-account-show):\n\n```bash\n# Get the blob service account url for the storage account\naz storage account show -n my-storage-account-name -g my-resource-group --query \"primaryEndpoints.blob\"\n```\n\n#### Types of credentials\nThe `credential` parameter may be provided in a number of different forms, depending on the type of\n[authorization](https://docs.microsoft.com/azure/storage/common/storage-auth) you wish to use:\n1. To use an [Azure Active Directory (AAD) token credential](https://docs.microsoft.com/azure/storage/common/storage-auth-aad),\n   provide an instance of the desired credential type obtained from the\n   [azure-identity](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity#credentials) library.\n   For example, [DefaultAzureCredential](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity#defaultazurecredential)\n   can be used to authenticate the client.\n\n   This requires some initial setup:\n   * [Install azure-identity](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity#install-the-package)\n   * [Register a new AAD application](https://docs.microsoft.com/azure/active-directory/develop/quickstart-register-app) and give permissions to access Azure Storage\n   * [Grant access](https://docs.microsoft.com/azure/storage/common/storage-auth-aad-rbac-portal) to Azure Blob data with RBAC in the Azure Portal\n   * Set the values of the client ID, tenant ID, and client secret of the AAD application as environment variables:\n     AZURE_TENANT_ID, AZURE_CLIENT_ID, AZURE_CLIENT_SECRET\n\n   Use the returned token credential to authenticate the client:\n    ```python\n        from azure.identity import DefaultAzureCredential\n        from azure.storage.blob import BlobServiceClient\n        token_credential = DefaultAzureCredential()\n\n        blob_service_client = BlobServiceClient(\n            account_url=\"https://<my_account_name>.blob.core.windows.net\",\n            credential=token_credential\n        )\n    ```\n\n2. To use a [shared access signature (SAS) token](https://docs.microsoft.com/azure/storage/common/storage-sas-overview),\n   provide the token as a string. If your account URL includes the SAS token, omit the credential parameter.\n   You can generate a SAS token from the Azure Portal under \"Shared access signature\" or use one of the `generate_sas()`\n   functions to create a sas token for the storage account, container, or blob:\n\n    ```python\n    from datetime import datetime, timedelta\n    from azure.storage.blob import BlobServiceClient, generate_account_sas, ResourceTypes, AccountSasPermissions\n\n    sas_token = generate_account_sas(\n        account_name=\"<storage-account-name>\",\n        account_key=\"<account-access-key>\",\n        resource_types=ResourceTypes(service=True),\n        permission=AccountSasPermissions(read=True),\n        expiry=datetime.utcnow() + timedelta(hours=1)\n    )\n\n    blob_service_client = BlobServiceClient(account_url=\"https://<my_account_name>.blob.core.windows.net\", credential=sas_token)\n    ```\n\n3. To use a storage account [shared key](https://docs.microsoft.com/rest/api/storageservices/authenticate-with-shared-key/)\n   (aka account key or access key), provide the key as a string. This can be found in the Azure Portal under the \"Access Keys\"\n   section or by running the following Azure CLI command:\n\n    ```az storage account keys list -g MyResourceGroup -n MyStorageAccount```\n\n    Use the key as the credential parameter to authenticate the client:\n    ```python\n    from azure.storage.blob import BlobServiceClient\n    service = BlobServiceClient(account_url=\"https://<my_account_name>.blob.core.windows.net\", credential=\"<account_access_key>\")\n    ```\n    \n    If you are using **customized url** (which means the url is not in this format `<my_account_name>.blob.core.windows.net`),\n    please instantiate the client using the credential below:\n    ```python\n    from azure.storage.blob import BlobServiceClient\n    service = BlobServiceClient(account_url=\"https://<my_account_name>.blob.core.windows.net\", \n       credential={\"account_name\": \"<your_account_name>\", \"account_key\":\"<account_access_key>\"})\n    ```\n\n4. To use [anonymous public read access](https://docs.microsoft.com/azure/storage/blobs/storage-manage-access-to-resources),\n   simply omit the credential parameter.\n\n#### Creating the client from a connection string\nDepending on your use case and authorization method, you may prefer to initialize a client instance with a storage\nconnection string instead of providing the account URL and credential separately. To do this, pass the storage\nconnection string to the client's `from_connection_string` class method:\n\n```python\nfrom azure.storage.blob import BlobServiceClient\n\nconnection_string = \"DefaultEndpointsProtocol=https;AccountName=xxxx;AccountKey=xxxx;EndpointSuffix=core.windows.net\"\nservice = BlobServiceClient.from_connection_string(conn_str=connection_string)\n```\n\nThe connection string to your storage account can be found in the Azure Portal under the \"Access Keys\" section or by running the following CLI command:\n\n```bash\naz storage account show-connection-string -g MyResourceGroup -n MyStorageAccount\n```\n\n## Key concepts\nThe following components make up the Azure Blob Service:\n* The storage account itself\n* A container within the storage account\n* A blob within a container\n\nThe Azure Storage Blobs client library for Python allows you to interact with each of these components through the\nuse of a dedicated client object.\n\n### Clients\nFour different clients are provided to interact with the various components of the Blob Service:\n1. [BlobServiceClient](https://aka.ms/azsdk-python-storage-blob-blobserviceclient) -\n    this client represents interaction with the Azure storage account itself, and allows you to acquire preconfigured\n    client instances to access the containers and blobs within. It provides operations to retrieve and configure the\n    account properties as well as list, create, and delete containers within the account. To perform operations on a\n    specific container or blob, retrieve a client using the `get_container_client` or `get_blob_client` methods.\n2. [ContainerClient](https://aka.ms/azsdk-python-storage-blob-containerclient) -\n    this client represents interaction with a specific container (which need not exist yet), and allows you to acquire\n    preconfigured client instances to access the blobs within. It provides operations to create, delete, or configure a\n    container and includes operations to list, upload, and delete the blobs within it. To perform operations on a\n    specific blob within the container, retrieve a client using the `get_blob_client` method.\n3. [BlobClient](https://aka.ms/azsdk-python-storage-blob-blobclient) -\n    this client represents interaction with a specific blob (which need not exist yet). It provides operations to\n    upload, download, delete, and create snapshots of a blob, as well as specific operations per blob type.\n4. [BlobLeaseClient](https://aka.ms/azsdk-python-storage-blob-blobleaseclient) -\n    this client represents lease interactions with a `ContainerClient` or `BlobClient`. It provides operations to\n    acquire, renew, release, change, and break a lease on a specified resource.\n\n### Async Clients \nThis library includes a complete async API supported on Python 3.5+. To use it, you must\nfirst install an async transport, such as [aiohttp](https://pypi.org/project/aiohttp/).\nSee\n[azure-core documentation](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/CLIENT_LIBRARY_DEVELOPER.md#transport)\nfor more information.\n\nAsync clients and credentials should be closed when they're no longer needed. These\nobjects are async context managers and define async `close` methods.\n\n### Blob Types\nOnce you've initialized a Client, you can choose from the different types of blobs:\n* [Block blobs](https://docs.microsoft.com/rest/api/storageservices/understanding-block-blobs--append-blobs--and-page-blobs#about-block-blobs)\n  store text and binary data, up to approximately 4.75 TiB. Block blobs are made up of blocks of data that can be\n  managed individually\n* [Append blobs](https://docs.microsoft.com/rest/api/storageservices/understanding-block-blobs--append-blobs--and-page-blobs#about-append-blobs)\n  are made up of blocks like block blobs, but are optimized for append operations. Append blobs are ideal for scenarios\n  such as logging data from virtual machines\n* [Page blobs](https://docs.microsoft.com/rest/api/storageservices/understanding-block-blobs--append-blobs--and-page-blobs#about-page-blobs)\n  store random access files up to 8 TiB in size. Page blobs store virtual hard drive (VHD) files and serve as disks for\n  Azure virtual machines\n\n## Examples\nThe following sections provide several code snippets covering some of the most common Storage Blob tasks, including:\n\n* [Create a container](#create-a-container \"Create a container\")\n* [Uploading a blob](#uploading-a-blob \"Uploading a blob\")\n* [Downloading a blob](#downloading-a-blob \"Downloading a blob\")\n* [Enumerating blobs](#enumerating-blobs \"Enumerating blobs\")\n\nNote that a container must be created before to upload or download a blob.\n\n### Create a container\n\nCreate a container from where you can upload or download blobs.\n```python\nfrom azure.storage.blob import ContainerClient\n\ncontainer_client = ContainerClient.from_connection_string(conn_str=\"<connection_string>\", container_name=\"mycontainer\")\n\ncontainer_client.create_container()\n```\n\nUse the async client to upload a blob\n\n```python\nfrom azure.storage.blob.aio import ContainerClient\n\ncontainer_client = ContainerClient.from_connection_string(conn_str=\"<connection_string>\", container_name=\"mycontainer\")\n\nawait container_client.create_container()\n```\n\n### Uploading a blob\nUpload a blob to your container\n\n```python\nfrom azure.storage.blob import BlobClient\n\nblob = BlobClient.from_connection_string(conn_str=\"<connection_string>\", container_name=\"mycontainer\", blob_name=\"my_blob\")\n\nwith open(\"./SampleSource.txt\", \"rb\") as data:\n    blob.upload_blob(data)\n```\n\nUse the async client to upload a blob\n\n```python\nfrom azure.storage.blob.aio import BlobClient\n\nblob = BlobClient.from_connection_string(conn_str=\"<connection_string>\", container_name=\"mycontainer\", blob_name=\"my_blob\")\n\nwith open(\"./SampleSource.txt\", \"rb\") as data:\n    await blob.upload_blob(data)\n```\n\n### Downloading a blob\nDownload a blob from your container\n\n```python\nfrom azure.storage.blob import BlobClient\n\nblob = BlobClient.from_connection_string(conn_str=\"<connection_string>\", container_name=\"mycontainer\", blob_name=\"my_blob\")\n\nwith open(\"./BlockDestination.txt\", \"wb\") as my_blob:\n    blob_data = blob.download_blob()\n    blob_data.readinto(my_blob)\n```\n\nDownload a blob asynchronously\n\n```python\nfrom azure.storage.blob.aio import BlobClient\n\nblob = BlobClient.from_connection_string(conn_str=\"<connection_string>\", container_name=\"mycontainer\", blob_name=\"my_blob\")\n\nwith open(\"./BlockDestination.txt\", \"wb\") as my_blob:\n    stream = await blob.download_blob()\n    data = await stream.readall()\n    my_blob.write(data)\n```\n\n### Enumerating blobs\nList the blobs in your container\n\n```python\nfrom azure.storage.blob import ContainerClient\n\ncontainer = ContainerClient.from_connection_string(conn_str=\"<connection_string>\", container_name=\"mycontainer\")\n\nblob_list = container.list_blobs()\nfor blob in blob_list:\n    print(blob.name + '\\n')\n```\n\nList the blobs asynchronously\n\n```python\nfrom azure.storage.blob.aio import ContainerClient\n\ncontainer = ContainerClient.from_connection_string(conn_str=\"<connection_string>\", container_name=\"mycontainer\")\n\nblob_list = []\nasync for blob in container.list_blobs():\n    blob_list.append(blob)\nprint(blob_list)\n```\n\n## Optional Configuration\n\nOptional keyword arguments that can be passed in at the client and per-operation level.\n\n### Retry Policy configuration\n\nUse the following keyword arguments when instantiating a client to configure the retry policy:\n\n* __retry_total__ (int): Total number of retries to allow. Takes precedence over other counts.\nPass in `retry_total=0` if you do not want to retry on requests. Defaults to 10.\n* __retry_connect__ (int): How many connection-related errors to retry on. Defaults to 3.\n* __retry_read__ (int): How many times to retry on read errors. Defaults to 3.\n* __retry_status__ (int): How many times to retry on bad status codes. Defaults to 3.\n* __retry_to_secondary__ (bool): Whether the request should be retried to secondary, if able.\nThis should only be enabled of RA-GRS accounts are used and potentially stale data can be handled.\nDefaults to `False`.\n\n### Encryption configuration\n\nUse the following keyword arguments when instantiating a client to configure encryption:\n\n* __require_encryption__ (bool): If set to True, will enforce that objects are encrypted and decrypt them.\n* __encryption_version__ (str): Specifies the version of encryption to use. Current options are `'2.0'` or `'1.0'` and\nthe default value is `'1.0'`. Version 1.0 is deprecated, and it is **highly recommended** to use version 2.0.\n* __key_encryption_key__ (object): The user-provided key-encryption-key. The instance must implement the following methods:\n    - `wrap_key(key)`--wraps the specified key using an algorithm of the user's choice.\n    - `get_key_wrap_algorithm()`--returns the algorithm used to wrap the specified symmetric key.\n    - `get_kid()`--returns a string key id for this key-encryption-key.\n* __key_resolver_function__ (callable): The user-provided key resolver. Uses the kid string to return a key-encryption-key\nimplementing the interface defined above.\n\n### Other client / per-operation configuration\n\nOther optional configuration keyword arguments that can be specified on the client or per-operation.\n\n**Client keyword arguments:**\n\n* __connection_timeout__ (int): The number of seconds the client will wait to establish a connection to the server.\nDefaults to 20 seconds.\n* __read_timeout__ (int): The number of seconds the client will wait, between consecutive read operations, for a\nresponse from the server. This is a socket level timeout and is not affected by overall data size. Client-side read \ntimeouts will be automatically retried. Defaults to 60 seconds.\n* __transport__ (Any): User-provided transport to send the HTTP request.\n\n**Per-operation keyword arguments:**\n\n* __raw_response_hook__ (callable): The given callback uses the response returned from the service.\n* __raw_request_hook__ (callable): The given callback uses the request before being sent to service.\n* __client_request_id__ (str): Optional user specified identification of the request.\n* __user_agent__ (str): Appends the custom value to the user-agent header to be sent with the request.\n* __logging_enable__ (bool): Enables logging at the DEBUG level. Defaults to False. Can also be passed in at\nthe client level to enable it for all requests.\n* __logging_body__ (bool): Enables logging the request and response body. Defaults to False. Can also be passed in at\nthe client level to enable it for all requests.\n* __headers__ (dict): Pass in custom headers as key, value pairs. E.g. `headers={'CustomValue': value}`\n\n## Troubleshooting\n### General\nStorage Blob clients raise exceptions defined in [Azure Core](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/README.md).\n\nThis list can be used for reference to catch thrown exceptions. To get the specific error code of the exception, use the `error_code` attribute, i.e, `exception.error_code`.\n\n### Logging\nThis library uses the standard\n[logging](https://docs.python.org/3/library/logging.html) library for logging.\nBasic information about HTTP sessions (URLs, headers, etc.) is logged at INFO\nlevel.\n\nDetailed DEBUG level logging, including request/response bodies and unredacted\nheaders, can be enabled on a client with the `logging_enable` argument:\n```python\nimport sys\nimport logging\nfrom azure.storage.blob import BlobServiceClient\n\n# Create a logger for the 'azure.storage.blob' SDK\nlogger = logging.getLogger('azure.storage.blob')\nlogger.setLevel(logging.DEBUG)\n\n# Configure a console output\nhandler = logging.StreamHandler(stream=sys.stdout)\nlogger.addHandler(handler)\n\n# This client will log detailed information about its HTTP sessions, at DEBUG level\nservice_client = BlobServiceClient.from_connection_string(\"your_connection_string\", logging_enable=True)\n```\n\nSimilarly, `logging_enable` can enable detailed logging for a single operation,\neven when it isn't enabled for the client:\n```python\nservice_client.get_service_stats(logging_enable=True)\n```\n\n## Next steps\n\n### More sample code\n\nGet started with our [Blob samples](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-blob/samples).\n\nSeveral Storage Blobs Python SDK samples are available to you in the SDK's GitHub repository. These samples provide example code for additional scenarios commonly encountered while working with Storage Blobs:\n\n* [blob_samples_container_access_policy.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-blob/samples/blob_samples_container_access_policy.py) ([async version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-blob/samples/blob_samples_container_access_policy_async.py)) - Examples to set Access policies:\n    * Set up Access Policy for container\n\n* [blob_samples_hello_world.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-blob/samples/blob_samples_hello_world.py) ([async version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-blob/samples/blob_samples_hello_world_async.py)) - Examples for common Storage Blob tasks:\n    * Set up a container\n    * Create a block, page, or append blob\n    * Upload blobs\n    * Download blobs\n    * Delete blobs\n\n* [blob_samples_authentication.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-blob/samples/blob_samples_authentication.py) ([async version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-blob/samples/blob_samples_authentication_async.py)) - Examples for authenticating and creating the client:\n    * From a connection string\n    * From a shared access key\n    * From a shared access signature token\n    * From active directory\n\n* [blob_samples_service.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-blob/samples/blob_samples_service.py) ([async version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-blob/samples/blob_samples_service_async.py)) - Examples for interacting with the blob service:\n    * Get account information\n    * Get and set service properties\n    * Get service statistics\n    * Create, list, and delete containers\n    * Get the Blob or Container client\n\n* [blob_samples_containers.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-blob/samples/blob_samples_containers.py) ([async version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-blob/samples/blob_samples_containers_async.py)) - Examples for interacting with containers:\n    * Create a container and delete containers\n    * Set metadata on containers\n    * Get container properties\n    * Acquire a lease on container\n    * Set an access policy on a container\n    * Upload, list, delete blobs in container\n    * Get the blob client to interact with a specific blob\n\n* [blob_samples_common.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-blob/samples/blob_samples_common.py) ([async version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-blob/samples/blob_samples_common_async.py)) - Examples common to all types of blobs:\n    * Create a snapshot\n    * Delete a blob snapshot\n    * Soft delete a blob\n    * Undelete a blob\n    * Acquire a lease on a blob\n    * Copy a blob from a URL\n\n* [blob_samples_directory_interface.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-blob/samples/blob_samples_directory_interface.py) - Examples for interfacing with Blob storage as if it were a directory on a filesystem:\n    * Copy (upload or download) a single file or directory\n    * List files or directories at a single level or recursively\n    * Delete a single file or recursively delete a directory\n\n### Additional documentation\nFor more extensive documentation on Azure Blob storage, see the [Azure Blob storage documentation](https://docs.microsoft.com/azure/storage/blobs/) on docs.microsoft.com.\n\n## Contributing\nThis project welcomes contributions and suggestions.  Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n",
        "repo_name": "storage/azure-storage-blob",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Azure DataLake service client library for Python\nOverview\n\nThis preview package for Python includes ADLS Gen2 specific API support made available in Storage SDK. This includes:\n1. New directory level operations (Create, Rename, Delete) for hierarchical namespace enabled (HNS) storage account. For HNS enabled accounts, the rename/move operations are atomic.\n2. Permission related operations (Get/Set ACLs) for hierarchical namespace enabled (HNS) accounts.\n\n\n[Source code](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-file-datalake/azure/storage/filedatalake)\n| [Package (PyPi)](https://pypi.org/project/azure-storage-file-datalake/)\n| [Package (Conda)](https://anaconda.org/microsoft/azure-storage/)\n| [API reference documentation](https://aka.ms/azsdk-python-storage-filedatalake-ref)\n| [Product documentation](https://docs.microsoft.com/azure/storage/)\n| [Samples](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-file-datalake/samples)\n\n\n## Getting started\n\n### Prerequisites\n* Python 3.7 or later is required to use this package. For more details, please read our page on [Azure SDK for Python version support policy](https://github.com/Azure/azure-sdk-for-python/wiki/Azure-SDKs-Python-version-support-policy).\n* You must have an [Azure subscription](https://azure.microsoft.com/free/) and an\n[Azure storage account](https://docs.microsoft.com/azure/storage/blobs/data-lake-storage-quickstart-create-account) to use this package.\n\n### Install the package\nInstall the Azure DataLake Storage client library for Python with [pip](https://pypi.org/project/pip/):\n\n```bash\npip install azure-storage-file-datalake --pre\n```\n\n### Create a storage account\nIf you wish to create a new storage account, you can use the\n[Azure Portal](https://docs.microsoft.com/azure/storage/blobs/data-lake-storage-quickstart-create-account#create-an-account-using-the-azure-portal),\n[Azure PowerShell](https://docs.microsoft.com/azure/storage/blobs/data-lake-storage-quickstart-create-account#create-an-account-using-powershell),\nor [Azure CLI](https://docs.microsoft.com/azure/storage/blobs/data-lake-storage-quickstart-create-account#create-an-account-using-azure-cli):\n\n```bash\n# Create a new resource group to hold the storage account -\n# if using an existing resource group, skip this step\naz group create --name my-resource-group --location westus2\n\n# Install the extension 'Storage-Preview'\naz extension add --name storage-preview\n\n# Create the storage account\naz storage account create --name my-storage-account-name --resource-group my-resource-group --sku Standard_LRS --kind StorageV2 --hierarchical-namespace true\n```\n\n### Authenticate the client\n\nInteraction with DataLake Storage starts with an instance of the DataLakeServiceClient class. You need an existing storage account, its URL, and a credential to instantiate the client object.\n\n#### Get credentials\n\nTo authenticate the client you have a few options:\n1. Use a SAS token string\n2. Use an account shared access key\n3. Use a token credential from [azure.identity](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity)\n\nAlternatively, you can authenticate with a storage connection string using the `from_connection_string` method. See example: [Client creation with a connection string](#client-creation-with-a-connection-string).\n\nYou can omit the credential if your account URL already has a SAS token.\n\n#### Create client\n\nOnce you have your account URL and credentials ready, you can create the DataLakeServiceClient:\n\n```python\nfrom azure.storage.filedatalake import DataLakeServiceClient\n\nservice = DataLakeServiceClient(account_url=\"https://<my-storage-account-name>.dfs.core.windows.net/\", credential=credential)\n```\n\n## Key concepts\n\nDataLake storage offers four types of resources:\n* The storage account\n* A file system in the storage account\n* A directory under the file system\n* A file in a the file system or under directory\n\n### Async Clients \nThis library includes a complete async API supported on Python 3.5+. To use it, you must\nfirst install an async transport, such as [aiohttp](https://pypi.org/project/aiohttp/).\nSee\n[azure-core documentation](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/CLIENT_LIBRARY_DEVELOPER.md#transport)\nfor more information.\n\nAsync clients and credentials should be closed when they're no longer needed. These\nobjects are async context managers and define async `close` methods.\n\n#### Clients\n\nThe DataLake Storage SDK provides four different clients to interact with the DataLake Service:\n1. **DataLakeServiceClient** - this client interacts with the DataLake Service at the account level.\n    It provides operations to retrieve and configure the account properties\n    as well as list, create, and delete file systems within the account.\n    For operations relating to a specific file system, directory or file, clients for those entities\n    can also be retrieved using the `get_file_client`, `get_directory_client` or `get_file_system_client` functions.\n2. **FileSystemClient** - this client represents interaction with a specific\n    file system, even if that file system does not exist yet. It provides operations to create, delete, or\n    configure file systems and includes operations to list paths under file system, upload, and delete file or\n    directory in the file system.\n    For operations relating to a specific file, the client can also be retrieved using\n    the `get_file_client` function.\n    For operations relating to a specific directory, the client can be retrieved using\n    the `get_directory_client` function.\n3. **DataLakeDirectoryClient** - this client represents interaction with a specific\n    directory, even if that directory does not exist yet. It provides directory operations create, delete, rename,\n    get properties and set properties operations.\n3. **DataLakeFileClient** - this client represents interaction with a specific\n    file, even if that file does not exist yet. It provides file operations to append data, flush data, delete,\n    create, and read file.\n4. **DataLakeLeaseClient** - this client represents lease interactions with a FileSystemClient, DataLakeDirectoryClient\n    or DataLakeFileClient. It provides operations to acquire, renew, release, change, and break leases on the resources.\n\n## Examples\n\nThe following sections provide several code snippets covering some of the most common Storage DataLake tasks, including:\n\n* [Client creation with a connection string](#client-creation-with-a-connection-string)\n* [Uploading a file](#uploading-a-file)\n* [Downloading a file](#downloading-a-file)\n* [Enumerating paths](#enumerating-paths)\n\n\n### Client creation with a connection string\nCreate the DataLakeServiceClient using the connection string to your Azure Storage account.\n\n```python\nfrom azure.storage.filedatalake import DataLakeServiceClient\n\nservice = DataLakeServiceClient.from_connection_string(conn_str=\"my_connection_string\")\n```\n\n### Uploading a file\nUpload a file to your file system.\n\n```python\nfrom azure.storage.filedatalake import DataLakeFileClient\n\ndata = b\"abc\"\nfile = DataLakeFileClient.from_connection_string(\"my_connection_string\",\n                                                 file_system_name=\"myfilesystem\", file_path=\"myfile\")\nfile.create_file ()\nfile.append_data(data, offset=0, length=len(data))\nfile.flush_data(len(data))\n```\n\n### Downloading a file\nDownload a file from your file system.\n\n```python\nfrom azure.storage.filedatalake import DataLakeFileClient\n\nfile = DataLakeFileClient.from_connection_string(\"my_connection_string\",\n                                                 file_system_name=\"myfilesystem\", file_path=\"myfile\")\n\nwith open(\"./BlockDestination.txt\", \"wb\") as my_file:\n    download = file.download_file()\n    download.readinto(my_file)\n```\n\n### Enumerating paths\nList the paths in your file system.\n\n```python\nfrom azure.storage.filedatalake import FileSystemClient\n\nfile_system = FileSystemClient.from_connection_string(\"my_connection_string\", file_system_name=\"myfilesystem\")\n\npaths = file_system.get_paths()\nfor path in paths:\n    print(path.name + '\\n')\n```\n\n## Optional Configuration\n\nOptional keyword arguments that can be passed in at the client and per-operation level.\n\n### Retry Policy configuration\n\nUse the following keyword arguments when instantiating a client to configure the retry policy:\n\n* __retry_total__ (int): Total number of retries to allow. Takes precedence over other counts.\nPass in `retry_total=0` if you do not want to retry on requests. Defaults to 10.\n* __retry_connect__ (int): How many connection-related errors to retry on. Defaults to 3.\n* __retry_read__ (int): How many times to retry on read errors. Defaults to 3.\n* __retry_status__ (int): How many times to retry on bad status codes. Defaults to 3.\n* __retry_to_secondary__ (bool): Whether the request should be retried to secondary, if able.\nThis should only be enabled of RA-GRS accounts are used and potentially stale data can be handled.\nDefaults to `False`.\n\n### Other client / per-operation configuration\n\nOther optional configuration keyword arguments that can be specified on the client or per-operation.\n\n**Client keyword arguments:**\n\n* __connection_timeout__ (int): The number of seconds the client will wait to establish a connection to the server.\nDefaults to 20 seconds.\n* __read_timeout__ (int): The number of seconds the client will wait, between consecutive read operations, for a\nresponse from the server. This is a socket level timeout and is not affected by overall data size. Client-side read \ntimeouts will be automatically retried. Defaults to 60 seconds.\n* __transport__ (Any): User-provided transport to send the HTTP request.\n\n**Per-operation keyword arguments:**\n\n* __raw_response_hook__ (callable): The given callback uses the response returned from the service.\n* __raw_request_hook__ (callable): The given callback uses the request before being sent to service.\n* __client_request_id__ (str): Optional user specified identification of the request.\n* __user_agent__ (str): Appends the custom value to the user-agent header to be sent with the request.\n* __logging_enable__ (bool): Enables logging at the DEBUG level. Defaults to False. Can also be passed in at\nthe client level to enable it for all requests.\n* __logging_body__ (bool): Enables logging the request and response body. Defaults to False. Can also be passed in at\nthe client level to enable it for all requests.\n* __headers__ (dict): Pass in custom headers as key, value pairs. E.g. `headers={'CustomValue': value}`\n\n## Troubleshooting\n### General\nDataLake Storage clients raise exceptions defined in [Azure Core](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/README.md).\n\nThis list can be used for reference to catch thrown exceptions. To get the specific error code of the exception, use the `error_code` attribute, i.e, `exception.error_code`.\n\n### Logging\nThis library uses the standard\n[logging](https://docs.python.org/3/library/logging.html) library for logging.\nBasic information about HTTP sessions (URLs, headers, etc.) is logged at INFO\nlevel.\n\nDetailed DEBUG level logging, including request/response bodies and unredacted\nheaders, can be enabled on a client with the `logging_enable` argument:\n```python\nimport sys\nimport logging\nfrom azure.storage.filedatalake import DataLakeServiceClient\n\n# Create a logger for the 'azure.storage.filedatalake' SDK\nlogger = logging.getLogger('azure.storage')\nlogger.setLevel(logging.DEBUG)\n\n# Configure a console output\nhandler = logging.StreamHandler(stream=sys.stdout)\nlogger.addHandler(handler)\n\n# This client will log detailed information about its HTTP sessions, at DEBUG level\nservice_client = DataLakeServiceClient.from_connection_string(\"your_connection_string\", logging_enable=True)\n```\n\nSimilarly, `logging_enable` can enable detailed logging for a single operation,\neven when it isn't enabled for the client:\n```python\nservice_client.list_file_systems(logging_enable=True)\n```\n\n## Next steps\n\n### More sample code\n\nGet started with our [Azure DataLake samples](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-file-datalake/samples).\n\nSeveral DataLake Storage Python SDK samples are available to you in the SDK's GitHub repository. These samples provide example code for additional scenarios commonly encountered while working with DataLake Storage:\n\n* [`datalake_samples_access_control.py`](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-file-datalake/samples/datalake_samples_access_control.py) - Examples for common DataLake Storage tasks:\n    * Set up a file system\n    * Create a directory\n    * Set/Get access control for the directory\n    * Create files under the directory\n    * Set/Get access control for each file\n    * Delete file system\n\n* [`datalake_samples_upload_download.py`](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-file-datalake/samples/datalake_samples_upload_download.py) - Examples for common DataLake Storage tasks:\n    * Set up a file system\n    * Create file\n    * Append data to the file\n    * Flush data to the file\n    * Download the uploaded data\n    * Delete file system\n\n\n### Additional documentation\n\nTable for [ADLS Gen1 to ADLS Gen2 API Mapping](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-file-datalake/GEN1_GEN2_MAPPING.md)\nFor more extensive REST documentation on Data Lake Storage Gen2, see the [Data Lake Storage Gen2 documentation](https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/filesystem) on docs.microsoft.com.\n\n\n## Contributing\nThis project welcomes contributions and suggestions.  Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n",
        "repo_name": "storage/azure-storage-file-datalake",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-file-datalake",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Azure Storage File Share client library for Python\nAzure File Share storage offers fully managed file shares in the cloud that are accessible via the industry standard [Server Message Block (SMB) protocol](https://docs.microsoft.com/windows/desktop/FileIO/microsoft-smb-protocol-and-cifs-protocol-overview). Azure file shares can be mounted concurrently by cloud or on-premises deployments of Windows, Linux, and macOS. Additionally, Azure file shares can be cached on Windows Servers with Azure File Sync for fast access near where the data is being used.\n\nAzure file shares can be used to:\n\n* Replace or supplement on-premises file servers\n* \"Lift and shift\" applications\n* Simplify cloud development with shared application settings, diagnostic share, and Dev/Test/Debug tools\n\n[Source code](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-file-share/azure/storage/fileshare)\n| [Package (PyPI)](https://pypi.org/project/azure-storage-file-share/)\n| [Package (Conda)](https://anaconda.org/microsoft/azure-storage/)\n| [API reference documentation](https://aka.ms/azsdk-python-storage-fileshare-ref)\n| [Product documentation](https://docs.microsoft.com/azure/storage/)\n| [Samples](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-file-share/samples)\n\n## Getting started\n\n### Prerequisites\n* Python 3.7 or later is required to use this package. For more details, please read our page on [Azure SDK for Python version support policy](https://github.com/Azure/azure-sdk-for-python/wiki/Azure-SDKs-Python-version-support-policy).\n* You must have an [Azure subscription](https://azure.microsoft.com/free/) and an\n[Azure storage account](https://docs.microsoft.com/azure/storage/common/storage-account-overview) to use this package.\n\n### Install the package\nInstall the Azure Storage File Share client library for Python with [pip](https://pypi.org/project/pip/):\n\n```bash\npip install azure-storage-file-share\n```\n\n### Create a storage account\nIf you wish to create a new storage account, you can use the\n[Azure Portal](https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-portal),\n[Azure PowerShell](https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-powershell),\nor [Azure CLI](https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-cli):\n\n```bash\n# Create a new resource group to hold the storage account -\n# if using an existing resource group, skip this step\naz group create --name my-resource-group --location westus2\n\n# Create the storage account\naz storage account create -n my-storage-account-name -g my-resource-group\n```\n\n### Create the client\nThe Azure Storage File Share client library for Python allows you to interact with four types of resources: the storage\naccount itself, file shares, directories, and files. Interaction with these resources starts with an instance of a\n[client](#clients). To create a client object, you will need the storage account's file service URL and a\ncredential that allows you to access the storage account:\n\n```python\nfrom azure.storage.fileshare import ShareServiceClient\n\nservice = ShareServiceClient(account_url=\"https://<my-storage-account-name>.file.core.windows.net/\", credential=credential)\n```\n\n#### Looking up the account URL\nYou can find the storage account's file service URL using the\n[Azure Portal](https://docs.microsoft.com/azure/storage/common/storage-account-overview#storage-account-endpoints),\n[Azure PowerShell](https://docs.microsoft.com/powershell/module/az.storage/get-azstorageaccount),\nor [Azure CLI](https://docs.microsoft.com/cli/azure/storage/account?view=azure-cli-latest#az-storage-account-show):\n\n```bash\n# Get the file service URL for the storage account\naz storage account show -n my-storage-account-name -g my-resource-group --query \"primaryEndpoints.file\"\n```\n\n#### Types of credentials\nThe `credential` parameter may be provided in a number of different forms, depending on the type of\n[authorization](https://docs.microsoft.com/azure/storage/common/storage-auth) you wish to use:\n1. To use a [shared access signature (SAS) token](https://docs.microsoft.com/azure/storage/common/storage-sas-overview),\n   provide the token as a string. If your account URL includes the SAS token, omit the credential parameter.\n   You can generate a SAS token from the Azure Portal under \"Shared access signature\" or use one of the `generate_sas()`\n   functions to create a sas token for the storage account, share, or file:\n\n    ```python\n    from datetime import datetime, timedelta\n    from azure.storage.fileshare import ShareServiceClient, generate_account_sas, ResourceTypes, AccountSasPermissions\n\n    sas_token = generate_account_sas(\n        account_name=\"<storage-account-name>\",\n        account_key=\"<account-access-key>\",\n        resource_types=ResourceTypes(service=True),\n        permission=AccountSasPermissions(read=True),\n        expiry=datetime.utcnow() + timedelta(hours=1)\n    )\n\n    share_service_client = ShareServiceClient(account_url=\"https://<my_account_name>.file.core.windows.net\", credential=sas_token)\n    ```\n\n2. To use a storage account [shared key](https://docs.microsoft.com/rest/api/storageservices/authenticate-with-shared-key/)\n   (aka account key or access key), provide the key as a string. This can be found in the Azure Portal under the \"Access Keys\"\n   section or by running the following Azure CLI command:\n\n    ```az storage account keys list -g MyResourceGroup -n MyStorageAccount```\n\n    Use the key as the credential parameter to authenticate the client:\n    ```python\n    from azure.storage.fileshare import ShareServiceClient\n    service = ShareServiceClient(account_url=\"https://<my_account_name>.file.core.windows.net\", credential=\"<account_access_key>\")\n    ```\n\n#### Creating the client from a connection string\nDepending on your use case and authorization method, you may prefer to initialize a client instance with a storage\nconnection string instead of providing the account URL and credential separately. To do this, pass the storage\nconnection string to the client's `from_connection_string` class method:\n\n```python\nfrom azure.storage.fileshare import ShareServiceClient\n\nconnection_string = \"DefaultEndpointsProtocol=https;AccountName=xxxx;AccountKey=xxxx;EndpointSuffix=core.windows.net\"\nservice = ShareServiceClient.from_connection_string(conn_str=connection_string)\n```\n\nThe connection string to your storage account can be found in the Azure Portal under the \"Access Keys\" section or by running the following CLI command:\n\n```bash\naz storage account show-connection-string -g MyResourceGroup -n MyStorageAccount\n```\n\n## Key concepts\nThe following components make up the Azure File Share Service:\n* The storage account itself\n* A file share within the storage account\n* An optional hierarchy of directories within the file share\n* A file within the file share, which may be up to 1 TiB in size\n\nThe Azure Storage File Share client library for Python allows you to interact with each of these components through the\nuse of a dedicated client object.\n\n### Async Clients \nThis library includes a complete async API supported on Python 3.5+. To use it, you must\nfirst install an async transport, such as [aiohttp](https://pypi.org/project/aiohttp/).\nSee\n[azure-core documentation](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/CLIENT_LIBRARY_DEVELOPER.md#transport)\nfor more information.\n\nAsync clients and credentials should be closed when they're no longer needed. These\nobjects are async context managers and define async `close` methods.\n\n### Clients\nFour different clients are provided to interact with the various components of the File Share Service:\n1. [ShareServiceClient](https://aka.ms/azsdk-python-storage-fileshare-shareserviceclient) -\n    this client represents interaction with the Azure storage account itself, and allows you to acquire preconfigured\n    client instances to access the file shares within. It provides operations to retrieve and configure the service\n    properties as well as list, create, and delete shares within the account. To perform operations on a specific share,\n    retrieve a client using the `get_share_client` method.\n2. [ShareClient](https://aka.ms/azsdk-python-storage-fileshare-shareclient) -\n    this client represents interaction with a specific file share (which need not exist yet), and allows you to acquire\n    preconfigured client instances to access the directories and files within. It provides operations to create, delete,\n    configure, or create snapshots of a share and includes operations to create and enumerate the contents of\n    directories within it. To perform operations on a specific directory or file, retrieve a client using the\n    `get_directory_client` or `get_file_client` methods.\n3. [ShareDirectoryClient](https://aka.ms/azsdk-python-storage-fileshare-sharedirectoryclient) -\n    this client represents interaction with a specific directory (which need not exist yet). It provides operations to\n    create, delete, or enumerate the contents of an immediate or nested subdirectory, and includes operations to create\n    and delete files within it. For operations relating to a specific subdirectory or file, a client for that entity can\n    also be retrieved using the `get_subdirectory_client` and `get_file_client` functions.\n4. [ShareFileClient](https://aka.ms/azsdk-python-storage-fileshare-sharefileclient) -\n    this client represents interaction with a specific file (which need not exist yet). It provides operations to\n    upload, download, create, delete, and copy a file.\n\nFor details on path naming restrictions, see [Naming and Referencing Shares, Directories, Files, and Metadata](https://docs.microsoft.com/rest/api/storageservices/naming-and-referencing-shares--directories--files--and-metadata).\n\n## Examples\nThe following sections provide several code snippets covering some of the most common Storage File Share tasks, including:\n\n* [Creating a file share](#creating-a-file-share \"Creating a file share\")\n* [Uploading a file](#uploading-a-file \"Uploading a file\")\n* [Downloading a file](#downloading-a-file \"Downloading a file\")\n* [Listing contents of a directory](#listing-contents-of-a-directory \"Listing contents of a directory\")\n\n### Creating a file share\nCreate a file share to store your files\n\n```python\nfrom azure.storage.fileshare import ShareClient\n\nshare = ShareClient.from_connection_string(conn_str=\"<connection_string>\", share_name=\"myshare\")\nshare.create_share()\n```\n\nUse the async client to create a file share\n\n```python\nfrom azure.storage.fileshare.aio import ShareClient\n\nshare = ShareClient.from_connection_string(conn_str=\"<connection_string>\", share_name=\"myshare\")\nawait share.create_share()\n```\n\n### Uploading a file\nUpload a file to the share\n\n```python\nfrom azure.storage.fileshare import ShareFileClient\n\nfile_client = ShareFileClient.from_connection_string(conn_str=\"<connection_string>\", share_name=\"myshare\", file_path=\"my_file\")\n\nwith open(\"./SampleSource.txt\", \"rb\") as source_file:\n    file_client.upload_file(source_file)\n```\n\nUpload a file asynchronously\n\n```python\nfrom azure.storage.fileshare.aio import ShareFileClient\n\nfile_client = ShareFileClient.from_connection_string(conn_str=\"<connection_string>\", share_name=\"myshare\", file_path=\"my_file\")\n\nwith open(\"./SampleSource.txt\", \"rb\") as source_file:\n    await file_client.upload_file(source_file)\n```\n\n### Downloading a file\nDownload a file from the share\n\n```python\nfrom azure.storage.fileshare import ShareFileClient\n\nfile_client = ShareFileClient.from_connection_string(conn_str=\"<connection_string>\", share_name=\"myshare\", file_path=\"my_file\")\n\nwith open(\"DEST_FILE\", \"wb\") as file_handle:\n    data = file_client.download_file()\n    data.readinto(file_handle)\n```\n\nDownload a file asynchronously\n\n```python\nfrom azure.storage.fileshare.aio import ShareFileClient\n\nfile_client = ShareFileClient.from_connection_string(conn_str=\"<connection_string>\", share_name=\"myshare\", file_path=\"my_file\")\n\nwith open(\"DEST_FILE\", \"wb\") as file_handle:\n    data = await file_client.download_file()\n    await data.readinto(file_handle)\n```\n\n### Listing contents of a directory\nList all directories and files under a parent directory\n\n```python\nfrom azure.storage.fileshare import ShareDirectoryClient\n\nparent_dir = ShareDirectoryClient.from_connection_string(conn_str=\"<connection_string>\", share_name=\"myshare\", directory_path=\"parent_dir\")\n\nmy_list = list(parent_dir.list_directories_and_files())\nprint(my_list)\n```\n\nList contents of a directory asynchronously\n\n```python\nfrom azure.storage.fileshare.aio import ShareDirectoryClient\n\nparent_dir = ShareDirectoryClient.from_connection_string(conn_str=\"<connection_string>\", share_name=\"myshare\", directory_path=\"parent_dir\")\n\nmy_files = []\nasync for item in parent_dir.list_directories_and_files():\n    my_files.append(item)\nprint(my_files)\n```\n\n## Optional Configuration\n\nOptional keyword arguments that can be passed in at the client and per-operation level.\n\n### Retry Policy configuration\n\nUse the following keyword arguments when instantiating a client to configure the retry policy:\n\n* __retry_total__ (int): Total number of retries to allow. Takes precedence over other counts.\nPass in `retry_total=0` if you do not want to retry on requests. Defaults to 10.\n* __retry_connect__ (int): How many connection-related errors to retry on. Defaults to 3.\n* __retry_read__ (int): How many times to retry on read errors. Defaults to 3.\n* __retry_status__ (int): How many times to retry on bad status codes. Defaults to 3.\n* __retry_to_secondary__ (bool): Whether the request should be retried to secondary, if able.\nThis should only be enabled of RA-GRS accounts are used and potentially stale data can be handled.\nDefaults to `False`.\n\n### Other client / per-operation configuration\n\nOther optional configuration keyword arguments that can be specified on the client or per-operation.\n\n**Client keyword arguments:**\n\n* __connection_timeout__ (int): The number of seconds the client will wait to establish a connection to the server.\nDefaults to 20 seconds.\n* __read_timeout__ (int): The number of seconds the client will wait, between consecutive read operations, for a\nresponse from the server. This is a socket level timeout and is not affected by overall data size. Client-side read \ntimeouts will be automatically retried. Defaults to 60 seconds.\n* __transport__ (Any): User-provided transport to send the HTTP request.\n\n**Per-operation keyword arguments:**\n\n* __raw_response_hook__ (callable): The given callback uses the response returned from the service.\n* __raw_request_hook__ (callable): The given callback uses the request before being sent to service.\n* __client_request_id__ (str): Optional user specified identification of the request.\n* __user_agent__ (str): Appends the custom value to the user-agent header to be sent with the request.\n* __logging_enable__ (bool): Enables logging at the DEBUG level. Defaults to False. Can also be passed in at\nthe client level to enable it for all requests.\n* __logging_body__ (bool): Enables logging the request and response body. Defaults to False. Can also be passed in at\nthe client level to enable it for all requests.\n* __headers__ (dict): Pass in custom headers as key, value pairs. E.g. `headers={'CustomValue': value}`\n\n\n## Troubleshooting\n### General\nStorage File clients raise exceptions defined in [Azure Core](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/README.md).\n\nThis list can be used for reference to catch thrown exceptions. To get the specific error code of the exception, use the `error_code` attribute, i.e, `exception.error_code`.\n\n### Logging\nThis library uses the standard\n[logging](https://docs.python.org/3/library/logging.html) library for logging.\nBasic information about HTTP sessions (URLs, headers, etc.) is logged at INFO\nlevel.\n\nDetailed DEBUG level logging, including request/response bodies and unredacted\nheaders, can be enabled on a client with the `logging_enable` argument:\n```python\nimport sys\nimport logging\nfrom azure.storage.fileshare import ShareServiceClient\n\n# Create a logger for the 'azure.storage.fileshare' SDK\nlogger = logging.getLogger('azure.storage.fileshare')\nlogger.setLevel(logging.DEBUG)\n\n# Configure a console output\nhandler = logging.StreamHandler(stream=sys.stdout)\nlogger.addHandler(handler)\n\n# This client will log detailed information about its HTTP sessions, at DEBUG level\nservice_client = ShareServiceClient.from_connection_string(\"your_connection_string\", logging_enable=True)\n```\n\nSimilarly, `logging_enable` can enable detailed logging for a single operation,\neven when it isn't enabled for the client:\n```python\nservice_client.get_service_properties(logging_enable=True)\n```\n\n## Next steps\n\n### More sample code\n\nGet started with our [File Share samples](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-file-share/samples).\n\nSeveral Storage File Share Python SDK samples are available to you in the SDK's GitHub repository. These samples provide example code for additional scenarios commonly encountered while working with Storage File Share:\n\n* [file_samples_hello_world.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-file-share/samples/file_samples_hello_world.py) ([async version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-file-share/samples/file_samples_hello_world_async.py)) - Examples found in this article:\n    * Client creation\n    * Create a file share\n    * Upload a file\n\n* [file_samples_authentication.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-file-share/samples/file_samples_authentication.py) ([async version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-file-share/samples/file_samples_authentication_async.py)) - Examples for authenticating and creating the client:\n    * From a connection string\n    * From a shared access key\n    * From a shared access signature token\n\n* [file_samples_service.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-file-share/samples/file_samples_service.py) ([async version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-file-share/samples/file_samples_service_async.py)) - Examples for interacting with the file service:\n    * Get and set service properties\n    * Create, list, and delete shares\n    * Get a share client\n\n* [file_samples_share.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-file-share/samples/file_samples_share.py) ([async version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-file-share/samples/file_samples_share_async.py)) - Examples for interacting with file shares:\n    * Create a share snapshot\n    * Set share quota and metadata\n    * List directories and files\n    * Get the directory or file client to interact with a specific entity\n\n* [file_samples_directory.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-file-share/samples/file_samples_directory.py) ([async version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-file-share/samples/file_samples_directory_async.py)) - Examples for interacting with directories:\n    * Create a directory and add files\n    * Create and delete subdirectories\n    * Get the subdirectory client\n\n* [file_samples_client.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-file-share/samples/file_samples_client.py) ([async version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-file-share/samples/file_samples_client_async.py)) - Examples for interacting with files:\n    * Create, upload, download, and delete files\n    * Copy a file from a URL\n\n### Additional documentation\nFor more extensive documentation on Azure File Share storage, see the [Azure File Share storage documentation](https://docs.microsoft.com/azure/storage/files/) on docs.microsoft.com.\n\n## Contributing\nThis project welcomes contributions and suggestions.  Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n",
        "repo_name": "storage/azure-storage-file-share",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-file-share",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Azure Storage Queues client library for Python\n\nAzure Queue storage is a service for storing large numbers of messages that can be accessed from anywhere in the world via authenticated calls using HTTP or HTTPS. A single queue message can be up to 64 KiB in size, and a queue can contain millions of messages, up to the total capacity limit of a storage account.\n\nCommon uses of Queue storage include:\n\n* Creating a backlog of work to process asynchronously\n* Passing messages between different parts of a distributed application\n\n[Source code](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-queue/azure/storage/queue)\n| [Package (PyPI)](https://pypi.org/project/azure-storage-queue/)\n| [Package (Conda)](https://anaconda.org/microsoft/azure-storage/)\n| [API reference documentation](https://aka.ms/azsdk-python-storage-queue-ref)\n| [Product documentation](https://docs.microsoft.com/azure/storage/)\n| [Samples](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-queue/samples)\n\n## Getting started\n\n### Prerequisites\n* Python 3.7 or later is required to use this package. For more details, please read our page on [Azure SDK for Python version support policy](https://github.com/Azure/azure-sdk-for-python/wiki/Azure-SDKs-Python-version-support-policy).\n* You must have an [Azure subscription](https://azure.microsoft.com/free/) and an\n[Azure storage account](https://docs.microsoft.com/azure/storage/common/storage-account-overview) to use this package.\n\n### Install the package\nInstall the Azure Storage Queues client library for Python with [pip](https://pypi.org/project/pip/):\n\n```bash\npip install azure-storage-queue\n```\n\n### Create a storage account\nIf you wish to create a new storage account, you can use the\n[Azure Portal](https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-portal),\n[Azure PowerShell](https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-powershell),\nor [Azure CLI](https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-cli):\n\n```bash\n# Create a new resource group to hold the storage account -\n# if using an existing resource group, skip this step\naz group create --name my-resource-group --location westus2\n\n# Create the storage account\naz storage account create -n my-storage-account-name -g my-resource-group\n```\n\n### Create the client\nThe Azure Storage Queues client library for Python allows you to interact with three types of resources: the storage\naccount itself, queues, and messages. Interaction with these resources starts with an instance of a [client](#clients).\nTo create a client object, you will need the storage account's queue service endpoint URL and a credential that allows\nyou to access the storage account:\n\n```python\nfrom azure.storage.queue import QueueServiceClient\n\nservice = QueueServiceClient(account_url=\"https://<my-storage-account-name>.queue.core.windows.net/\", credential=credential)\n```\n\n#### Looking up the account URL\nYou can find the storage account's queue service URL using the\n[Azure Portal](https://docs.microsoft.com/azure/storage/common/storage-account-overview#storage-account-endpoints),\n[Azure PowerShell](https://docs.microsoft.com/powershell/module/az.storage/get-azstorageaccount),\nor [Azure CLI](https://docs.microsoft.com/cli/azure/storage/account?view=azure-cli-latest#az-storage-account-show):\n\n```bash\n# Get the queue service URL for the storage account\naz storage account show -n my-storage-account-name -g my-resource-group --query \"primaryEndpoints.queue\"\n```\n\n#### Types of credentials\nThe `credential` parameter may be provided in a number of different forms, depending on the type of\n[authorization](https://docs.microsoft.com/azure/storage/common/storage-auth) you wish to use:\n1. To use a [shared access signature (SAS) token](https://docs.microsoft.com/azure/storage/common/storage-sas-overview),\n   provide the token as a string. If your account URL includes the SAS token, omit the credential parameter.\n   You can generate a SAS token from the Azure Portal under \"Shared access signature\" or use one of the `generate_sas()`\n   functions to create a sas token for the storage account or queue:\n\n    ```python\n    from datetime import datetime, timedelta\n    from azure.storage.queue import QueueServiceClient, generate_account_sas, ResourceTypes, AccountSasPermissions\n\n    sas_token = generate_account_sas(\n        account_name=\"<storage-account-name>\",\n        account_key=\"<account-access-key>\",\n        resource_types=ResourceTypes(service=True),\n        permission=AccountSasPermissions(read=True),\n        start=datetime.utcnow(),\n        expiry=datetime.utcnow() + timedelta(hours=1)\n    )\n\n    queue_service_client = QueueServiceClient(account_url=\"https://<my_account_name>.queue.core.windows.net\", credential=sas_token)\n    ```\n\n2. To use a storage account [shared key](https://docs.microsoft.com/rest/api/storageservices/authenticate-with-shared-key/)\n   (aka account key or access key), provide the key as a string. This can be found in the Azure Portal under the \"Access Keys\"\n   section or by running the following Azure CLI command:\n\n    ```az storage account keys list -g MyResourceGroup -n MyStorageAccount```\n\n    Use the key as the credential parameter to authenticate the client:\n    ```python\n    from azure.storage.queue import QueueServiceClient\n    service = QueueServiceClient(account_url=\"https://<my_account_name>.queue.core.windows.net\", credential=\"<account_access_key>\")\n    ```\n\n3. To use an [Azure Active Directory (AAD) token credential](https://docs.microsoft.com/azure/storage/common/storage-auth-aad),\n   provide an instance of the desired credential type obtained from the\n   [azure-identity](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity#credentials) library.\n   For example, [DefaultAzureCredential](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity#defaultazurecredential)\n   can be used to authenticate the client.\n\n   This requires some initial setup:\n   * [Install azure-identity](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity#install-the-package)\n   * [Register a new AAD application](https://docs.microsoft.com/azure/active-directory/develop/quickstart-register-app) and give permissions to access Azure Storage\n   * [Grant access](https://docs.microsoft.com/azure/storage/common/storage-auth-aad-rbac-portal) to Azure Queue data with RBAC in the Azure Portal\n   * Set the values of the client ID, tenant ID, and client secret of the AAD application as environment variables:\n     AZURE_TENANT_ID, AZURE_CLIENT_ID, AZURE_CLIENT_SECRET\n\n   Use the returned token credential to authenticate the client:\n    ```python\n        from azure.identity import DefaultAzureCredential\n        from azure.storage.queue import QueueServiceClient\n        token_credential = DefaultAzureCredential()\n\n        queue_service_client = QueueServiceClient(\n            account_url=\"https://<my_account_name>.queue.core.windows.net\",\n            credential=token_credential\n        )\n    ```\n\n#### Creating the client from a connection string\nDepending on your use case and authorization method, you may prefer to initialize a client instance with a storage\nconnection string instead of providing the account URL and credential separately. To do this, pass the storage\nconnection string to the client's `from_connection_string` class method:\n\n```python\nfrom azure.storage.queue import QueueServiceClient\n\nconnection_string = \"DefaultEndpointsProtocol=https;AccountName=xxxx;AccountKey=xxxx;EndpointSuffix=core.windows.net\"\nservice = QueueServiceClient.from_connection_string(conn_str=connection_string)\n```\n\nThe connection string to your storage account can be found in the Azure Portal under the \"Access Keys\" section or by running the following CLI command:\n\n```bash\naz storage account show-connection-string -g MyResourceGroup -n MyStorageAccount\n```\n\n## Key concepts\nThe following components make up the Azure Queue Service:\n* The storage account itself\n* A queue within the storage account, which contains a set of messages\n* A message within a queue, in any format, of up to 64 KiB\n\nThe Azure Storage Queues client library for Python allows you to interact with each of these components through the\nuse of a dedicated client object.\n\n### Async Clients \nThis library includes a complete async API supported on Python 3.5+. To use it, you must\nfirst install an async transport, such as [aiohttp](https://pypi.org/project/aiohttp/).\nSee\n[azure-core documentation](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/CLIENT_LIBRARY_DEVELOPER.md#transport)\nfor more information.\n\nAsync clients and credentials should be closed when they're no longer needed. These\nobjects are async context managers and define async `close` methods.\n\n### Clients\nTwo different clients are provided to interact with the various components of the Queue Service:\n1. [QueueServiceClient](https://aka.ms/azsdk-python-storage-queue-queueserviceclient) -\n    this client represents interaction with the Azure storage account itself, and allows you to acquire preconfigured\n    client instances to access the queues within. It provides operations to retrieve and configure the account\n    properties as well as list, create, and delete queues within the account. To perform operations on a specific queue,\n    retrieve a client using the `get_queue_client` method.\n2. [QueueClient](https://aka.ms/azsdk-python-storage-queue-queueclient) -\n    this client represents interaction with a specific queue (which need not exist yet). It provides operations to\n    create, delete, or configure a queue and includes operations to send, receive, peek, delete, and update messages\n    within it.\n\n### Messages\n* **Send** - Adds a message to the queue and optionally sets a visibility timeout for the message.\n* **Receive** - Retrieves a message from the queue and makes it invisible to other consumers.\n* **Peek** - Retrieves a message from the front of the queue, without changing the message visibility.\n* **Update** - Updates the visibility timeout of a message and/or the message contents.\n* **Delete** - Deletes a specified message from the queue.\n* **Clear** - Clears all messages from the queue.\n\n\n## Examples\n\nThe following sections provide several code snippets covering some of the most common Storage Queue tasks, including:\n\n* [Creating a queue](#creating-a-queue \"Creating a queue\")\n* [Sending messages](#sending-messages \"Sending messages\")\n* [Receiving messages](#receiving-messages \"Receiving messages\")\n\n### Creating a queue\nCreate a queue in your storage account\n\n```python\nfrom azure.storage.queue import QueueClient\n\nqueue = QueueClient.from_connection_string(conn_str=\"<connection_string>\", queue_name=\"myqueue\")\nqueue.create_queue()\n```\n\nUse the async client to create a queue\n```python\nfrom azure.storage.queue.aio import QueueClient\n\nqueue = QueueClient.from_connection_string(conn_str=\"<connection_string>\", queue_name=\"myqueue\")\nawait queue.create_queue()\n```\n\n### Sending messages\nSend messages to your queue\n\n```python\nfrom azure.storage.queue import QueueClient\n\nqueue = QueueClient.from_connection_string(conn_str=\"<connection_string>\", queue_name=\"myqueue\")\nqueue.send_message(\"I'm using queues!\")\nqueue.send_message(\"This is my second message\")\n```\n\nSend messages asynchronously\n\n```python\nimport asyncio\nfrom azure.storage.queue.aio import QueueClient\n\nqueue = QueueClient.from_connection_string(conn_str=\"<connection_string>\", queue_name=\"myqueue\")\nawait asyncio.gather(\n    queue.send_message(\"I'm using queues!\"),\n    queue.send_message(\"This is my second message\")\n)\n```\n\n### Receiving messages\nReceive and process messages from your queue\n\n```python\nfrom azure.storage.queue import QueueClient\n\nqueue = QueueClient.from_connection_string(conn_str=\"<connection_string>\", queue_name=\"myqueue\")\nresponse = queue.receive_messages()\n\nfor message in response:\n    print(message.content)\n    queue.delete_message(message)\n\n# Printed messages from the front of the queue:\n# >> I'm using queues!\n# >> This is my second message\n```\n\nReceive and process messages in batches\n\n```python\nfrom azure.storage.queue import QueueClient\n\nqueue = QueueClient.from_connection_string(conn_str=\"<connection_string>\", queue_name=\"myqueue\")\nresponse = queue.receive_messages(messages_per_page=10)\n\nfor message_batch in response.by_page():\n    for message in message_batch:\n        print(message.content)\n        queue.delete_message(message)\n```\n\nReceive and process messages asynchronously\n\n```python\nfrom azure.storage.queue.aio import QueueClient\n\nqueue = QueueClient.from_connection_string(conn_str=\"<connection_string>\", queue_name=\"myqueue\")\nresponse = queue.receive_messages()\n\nasync for message in response:\n    print(message.content)\n    await queue.delete_message(message)\n```\n\n## Optional Configuration\n\nOptional keyword arguments that can be passed in at the client and per-operation level.\n\n### Retry Policy configuration\n\nUse the following keyword arguments when instantiating a client to configure the retry policy:\n\n* __retry_total__ (int): Total number of retries to allow. Takes precedence over other counts.\nPass in `retry_total=0` if you do not want to retry on requests. Defaults to 10.\n* __retry_connect__ (int): How many connection-related errors to retry on. Defaults to 3.\n* __retry_read__ (int): How many times to retry on read errors. Defaults to 3.\n* __retry_status__ (int): How many times to retry on bad status codes. Defaults to 3.\n* __retry_to_secondary__ (bool): Whether the request should be retried to secondary, if able.\nThis should only be enabled of RA-GRS accounts are used and potentially stale data can be handled.\nDefaults to `False`.\n\n### Other client / per-operation configuration\n\nOther optional configuration keyword arguments that can be specified on the client or per-operation.\n\n**Client keyword arguments:**\n\n* __connection_timeout__ (int): The number of seconds the client will wait to establish a connection to the server.\nDefaults to 20 seconds.\n* __read_timeout__ (int): The number of seconds the client will wait, between consecutive read operations, for a\nresponse from the server. This is a socket level timeout and is not affected by overall data size. Client-side read \ntimeouts will be automatically retried. Defaults to 60 seconds.\n* __transport__ (Any): User-provided transport to send the HTTP request.\n\n**Per-operation keyword arguments:**\n\n* __raw_response_hook__ (callable): The given callback uses the response returned from the service.\n* __raw_request_hook__ (callable): The given callback uses the request before being sent to service.\n* __client_request_id__ (str): Optional user specified identification of the request.\n* __user_agent__ (str): Appends the custom value to the user-agent header to be sent with the request.\n* __logging_enable__ (bool): Enables logging at the DEBUG level. Defaults to False. Can also be passed in at\nthe client level to enable it for all requests.\n* __logging_body__ (bool): Enables logging the request and response body. Defaults to False. Can also be passed in at\nthe client level to enable it for all requests.\n* __headers__ (dict): Pass in custom headers as key, value pairs. E.g. `headers={'CustomValue': value}`\n\n\n## Troubleshooting\n### General\nStorage Queue clients raise exceptions defined in [Azure Core](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/README.md).\n\nThis list can be used for reference to catch thrown exceptions. To get the specific error code of the exception, use the `error_code` attribute, i.e, `exception.error_code`.\n\n### Logging\nThis library uses the standard\n[logging](https://docs.python.org/3/library/logging.html) library for logging.\nBasic information about HTTP sessions (URLs, headers, etc.) is logged at INFO\nlevel.\n\nDetailed DEBUG level logging, including request/response bodies and unredacted\nheaders, can be enabled on a client with the `logging_enable` argument:\n```python\nimport sys\nimport logging\nfrom azure.storage.queue import QueueServiceClient\n\n# Create a logger for the 'azure.storage.queue' SDK\nlogger = logging.getLogger('azure.storage.queue')\nlogger.setLevel(logging.DEBUG)\n\n# Configure a console output\nhandler = logging.StreamHandler(stream=sys.stdout)\nlogger.addHandler(handler)\n\n# This client will log detailed information about its HTTP sessions, at DEBUG level\nservice_client = QueueServiceClient.from_connection_string(\"your_connection_string\", logging_enable=True)\n```\n\nSimilarly, `logging_enable` can enable detailed logging for a single operation,\neven when it isn't enabled for the client:\n```python\nservice_client.get_service_stats(logging_enable=True)\n```\n\n## Next steps\n### More sample code\n\nGet started with our [Queue samples](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-queue/samples).\n\nSeveral Storage Queues Python SDK samples are available to you in the SDK's GitHub repository. These samples provide example code for additional scenarios commonly encountered while working with Storage Queues:\n\n* [queue_samples_hello_world.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-queue/samples/queue_samples_hello_world.py) ([async version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-queue/samples/queue_samples_hello_world_async.py)) - Examples found in this article:\n    * Client creation\n    * Create a queue\n    * Send messages\n    * Receive messages\n\n* [queue_samples_authentication.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-queue/samples/queue_samples_authentication.py) ([async version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-queue/samples/queue_samples_authentication_async.py)) - Examples for authenticating and creating the client:\n    * From a connection string\n    * From a shared access key\n    * From a shared access signature token\n    * From Azure Active Directory\n\n* [queue_samples_service.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-queue/samples/queue_samples_service.py) ([async version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-queue/samples/queue_samples_service_async.py)) - Examples for interacting with the queue service:\n    * Get and set service properties\n    * List queues in a storage account\n    * Create and delete a queue from the service\n    * Get the QueueClient\n\n* [queue_samples_message.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-queue/samples/queue_samples_message.py) ([async version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-queue/samples/queue_samples_message_async.py)) - Examples for working with queues and messages:\n    * Set an access policy\n    * Get and set queue metadata\n    * Send and receive messages\n    * Delete specified messages and clear all messages\n    * Peek and update messages\n\n### Additional documentation\nFor more extensive documentation on Azure Queue storage, see the [Azure Queue storage documentation](https://docs.microsoft.com/azure/storage/queues/) on docs.microsoft.com.\n\n## Contributing\nThis project welcomes contributions and suggestions.  Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n",
        "repo_name": "storage/azure-storage-queue",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-queue",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure Storage SDK for Python\n\nThis package was the Microsoft Azure Storage bundle.\n\nStarting with v0.37.0, this package is deprecated. Please install the service specific packages prefixed by `azure-storage` needed for your application.\n\nThe complete list of available packages can be found at:\nhttps://aka.ms/azsdk/python/all\n\nHere's a non-exhaustive list of common packages:\n\n- [azure-storage-blob](https://pypi.org/project/azure-storage-blob) : Blob storage client\n- [azure-storage-file-share](https://pypi.org/project/azure-storage-file-share) : Storage file share client\n- [azure-storage-file-datalake](https://pypi.org/project/azure-storage-file-datalake) : ADLS Gen2 client\n- [azure-storage-queue](https://pypi.org/project/azure-storage-queue): Queue storage client\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-storage%2FREADME.png)\n",
        "repo_name": "storage/azure-storage",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Storagemover Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-storagemover\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.storagemover import StorageMoverMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = StorageMoverMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\n\nCode samples for this package can be found at [Storagemover Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com and [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-storagemover%2FREADME.png)\n",
        "repo_name": "storagemover/azure-mgmt-storagemover",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/storagemover/azure-mgmt-storagemover",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Storage Pool Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/)\nCode samples for this package can be found at [Storage Pool Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-storagepool%2FREADME.png)\n",
        "repo_name": "storagepool/azure-mgmt-storagepool",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/storagepool/azure-mgmt-storagepool",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Stream Analytics Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/?view=azure-python-preview)\nCode samples for this package can be found at [Stream Analytics Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-streamanalytics%2FREADME.png)\n",
        "repo_name": "streamanalytics/azure-mgmt-streamanalytics",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/streamanalytics/azure-mgmt-streamanalytics",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Subscription Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-subscription\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.subscription import SubscriptionClient\n\nclient = SubscriptionClient(credential=DefaultAzureCredential())\n```\n\n## Examples\n\n\nCode samples for this package can be found at [Subscription Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com and [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-subscription%2FREADME.png)\n",
        "repo_name": "subscription/azure-mgmt-subscription",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/subscription/azure-mgmt-subscription",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Support Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/)\nCode samples for this package can be found at [Support Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-support%2FREADME.png)\n",
        "repo_name": "support/azure-mgmt-support",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/support/azure-mgmt-support",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Synapse Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-synapse\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.synapse import SynapseManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = SynapseManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\n\nCode samples for this package can be found at [Synapse Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com and [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-synapse%2FREADME.png)\n",
        "repo_name": "synapse/azure-mgmt-synapse",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/synapse/azure-mgmt-synapse",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Synapse AccessControl Client Library.\nThis package has been tested with Python 3.6, 3.7, 3.8, 3.9 and 3.10.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\nFor code examples, see [Synapse AccessControl](https://docs.microsoft.com/python/api/overview/azure/) on docs.microsoft.com.\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project.\n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-synapse-accesscontrol%2FREADME.png)\n",
        "repo_name": "synapse/azure-synapse-accesscontrol",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/synapse/azure-synapse-accesscontrol",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Synapse Artifacts Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\nFor code examples, see [Synapse Artifacts](https://docs.microsoft.com/python/api/overview/azure/) on docs.microsoft.com.\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-synapse-artifacts%2FREADME.png)\n",
        "repo_name": "synapse/azure-synapse-artifacts",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/synapse/azure-synapse-artifacts",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Synapse Managed Private Endpoints Client Library.\nThis package has been tested with Python 3.6, 3.7, 3.8, 3.9 and 3.10.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\nFor code examples, see [Synapse Managed Private Endpoints](https://docs.microsoft.com/python/api/overview/azure/) on docs.microsoft.com.\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-synapse-managedprivateendpoints%2FREADME.png)\n",
        "repo_name": "synapse/azure-synapse-managedprivateendpoints",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/synapse/azure-synapse-managedprivateendpoints",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Synapse Monitoring Client Library.\nThis package has been tested with Python 3.6, 3.7, 3.8, 3.9 and 3.10.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\nFor code examples, see [Synapse Monitoring](https://docs.microsoft.com/python/api/overview/azure/) on docs.microsoft.com.\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-synapse-monitoring%2FREADME.png)\n",
        "repo_name": "synapse/azure-synapse-monitoring",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/synapse/azure-synapse-monitoring",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Synapse Spark Client Library.\nThis package has been tested with Python 3.6, 3.7, 3.8, 3.9 and 3.10.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\nFor code examples, see [Synapse Spark](https://docs.microsoft.com/python/api/overview/azure/) on docs.microsoft.com.\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-synapse-spark%2FREADME.png)\n",
        "repo_name": "synapse/azure-synapse-spark",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/synapse/azure-synapse-spark",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure Synapse SDK for Python\n\nThis package was the Microsoft Azure Synapse bundle.\n\nIt is deprecated. Please install the service specific packages prefixed by azure-synapse needed for your application.\n\nThe complete list of available packages can be found at: https://aka.ms/azsdk/python/all\n\nHere's a non-exhaustive list of common packages:\n\n* [azure-synapse-accesscontrol](https://pypi.org/project/azure-synapse-accesscontrol/)\n* [azure-synapse-artifacts](https://pypi.org/project/azure-synapse-artifacts/)\n* [azure-synapse-spark](https://pypi.org/project/azure-synapse-spark/)\n* [azure-synapse-managedprivateendpoints](https://pypi.org/project/azure-synapse-managedprivateendpoints/)\n* [azure-synapse-monitoring](https://pypi.org/project/azure-synapse-monitoring/)",
        "repo_name": "synapse/azure-synapse",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/synapse/azure-synapse",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Azure Tables client library for Python\n\nAzure Tables is a NoSQL data storage service that can be accessed from anywhere in the world via authenticated calls using HTTP or HTTPS.\nTables scales as needed to support the amount of data inserted, and allow for the storing of data with non-complex accessing.\nThe Azure Tables client can be used to access Azure Storage or Cosmos accounts. This document covers [`azure-data-tables`][Tables_pypi].\n\nPlease note, this package is a replacement for [`azure-cosmosdb-tables`](https://github.com/Azure/azure-cosmos-table-python/tree/master/azure-cosmosdb-table) which is now deprecated. See the [migration guide][migration_guide] for more details.\n\n[Source code][source_code]\n| [Package (PyPI)][Tables_pypi]\n| [Package (Conda)](https://anaconda.org/microsoft/azure-data-tables/)\n| [API reference documentation][Tables_ref_docs]\n| [Samples][Tables_samples]\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n_Python 3.7 or later is required to use this package. For more details, please refer to [Azure SDK for Python version support policy](https://github.com/Azure/azure-sdk-for-python/wiki/Azure-SDKs-Python-version-support-policy)._\n\n## Getting started\nThe Azure Tables SDK can access an Azure Storage or CosmosDB account.\n\n### Prerequisites\n* Python 3.7 or later is required to use this package.\n* You must have an [Azure subscription][azure_subscription] and either\n    * an [Azure Storage account][azure_storage_account] or\n    * an [Azure Cosmos Account][azure_cosmos_account].\n\n#### Create account\n* To create a new storage account, you can use [Azure Portal][azure_portal_create_account], [Azure PowerShell][azure_powershell_create_account], or [Azure CLI][azure_cli_create_account]:\n* To create a new cosmos storage account, you can use the [Azure CLI][azure_cli_create_cosmos] or [Azure Portal][azure_portal_create_cosmos].\n\n### Install the package\nInstall the Azure Tables client library for Python with [pip][pip_link]:\n```bash\npip install azure-data-tables\n```\n\n#### Create the client\nThe Azure Tables library allows you to interact with two types of resources:\n* the tables in your account\n* the entities within those tables.\nInteraction with these resources starts with an instance of a [client](#clients). To create a client object, you will need the account's table service endpoint URL and a credential that allows you to access the account. The `endpoint` can be found on the page for your storage account in the [Azure Portal][azure_portal_account_url] under the \"Access Keys\" section or by running the following Azure CLI command:\n\n```bash\n# Get the table service URL for the account\naz storage account show -n mystorageaccount -g MyResourceGroup --query \"primaryEndpoints.table\"\n```\n\nOnce you have the account URL, it can be used to create the service client:\n```python\nfrom azure.data.tables import TableServiceClient\nservice = TableServiceClient(endpoint=\"https://<my_account_name>.table.core.windows.net/\", credential=credential)\n```\n\nFor more information about table service URL's and how to configure custom domain names for Azure Storage check out the [official documentation][azure_portal_account_url]\n\n#### Types of credentials\nThe `credential` parameter may be provided in a number of different forms, depending on the type of authorization you wish to use. The Tables library supports the following authorizations:\n* Shared Key\n* Connection String\n* Shared Access Signature Token\n\n##### Creating the client from a shared key\nTo use an account [shared key][azure_shared_key] (aka account key or access key), provide the key as a string. This can be found in your storage account in the [Azure Portal][azure_portal_account_url] under the \"Access Keys\" section or by running the following Azure CLI command:\n\n```bash\naz storage account keys list -g MyResourceGroup -n MyStorageAccount\n```\n\nUse the key as the credential parameter to authenticate the client:\n```python\nfrom azure.core.credentials import AzureNamedKeyCredential\nfrom azure.data.tables import TableServiceClient\n\ncredential = AzureNamedKeyCredential(\"my_account_name\", \"my_access_key\")\n\nservice = TableServiceClient(endpoint=\"https://<my_account_name>.table.core.windows.net\", credential=credential)\n```\n\n##### Creating the client from a connection string\nDepending on your use case and authorization method, you may prefer to initialize a client instance with a connection string instead of providing the account URL and credential separately. To do this, pass the\nconnection string to the client's `from_connection_string` class method. The connection string can be found in your storage account in the [Azure Portal][azure_portal_account_url] under the \"Access Keys\" section or with the following Azure CLI command:\n\n```bash\naz storage account show-connection-string -g MyResourceGroup -n MyStorageAccount\n```\n\n```python\nfrom azure.data.tables import TableServiceClient\nconnection_string = \"DefaultEndpointsProtocol=https;AccountName=<my_account_name>;AccountKey=<my_account_key>;EndpointSuffix=core.windows.net\"\nservice = TableServiceClient.from_connection_string(conn_str=connection_string)\n```\n\n##### Creating the client from a SAS token\nTo use a [shared access signature (SAS) token][azure_sas_token], provide the token as a string. If your account URL includes the SAS token, omit the credential parameter. You can generate a SAS token from the Azure Portal under [Shared access signature](https://docs.microsoft.com/rest/api/storageservices/create-service-sas) or use one of the `generate_*_sas()`\n   functions to create a sas token for the account or table:\n\n```python\nfrom datetime import datetime, timedelta\nfrom azure.data.tables import TableServiceClient, generate_account_sas, ResourceTypes, AccountSasPermissions\nfrom azure.core.credentials import AzureNamedKeyCredential, AzureSasCredential\n\ncredential = AzureNamedKeyCredential(\"my_account_name\", \"my_access_key\")\nsas_token = generate_account_sas(\n    credential,\n    resource_types=ResourceTypes(service=True),\n    permission=AccountSasPermissions(read=True),\n    expiry=datetime.utcnow() + timedelta(hours=1),\n)\n\ntable_service_client = TableServiceClient(endpoint=\"https://<my_account_name>.table.core.windows.net\", credential=AzureSasCredential(sas_token))\n```\n\n\n## Key concepts\nCommon uses of the Table service included:\n* Storing TBs of structured data capable of serving web scale applications\n* Storing datasets that do not require complex joins, foreign keys, or stored procedures and can be de-normalized for fast access\n* Quickly querying data using a clustered index\n* Accessing data using the OData protocol and LINQ filter expressions\n\n[comment]: # ( cspell:ignore LINQ )\n\nThe following components make up the Azure Tables Service:\n* The account\n* A table within the account, which contains a set of entities\n* An entity within a table, as a dictionary\n\nThe Azure Tables client library for Python allows you to interact with each of these components through the\nuse of a dedicated client object.\n\n### Clients\nTwo different clients are provided to interact with the various components of the Table Service:\n1. **`TableServiceClient`** -\n    * Get and set account setting\n    * Query, create, and delete tables within the account.\n    * Get a `TableClient` to access a specific table using the `get_table_client` method.\n2. **`TableClient`** -\n    * Interacts with a specific table (which need not exist yet).\n    * Create, delete, query, and upsert entities within the specified table.\n    * Create or delete the specified table itself.\n\n### Entities\nEntities are similar to rows. An entity has a **`PartitionKey`**, a **`RowKey`**, and a set of properties. A property is a name value pair, similar to a column. Every entity in a table does not need to have the same properties. Entities can be represented as dictionaries like this as an example:\n```python\nentity = {\n    'PartitionKey': 'color',\n    'RowKey': 'brand',\n    'text': 'Marker',\n    'color': 'Purple',\n    'price': '5'\n}\n```\n* **[create_entity][create_entity]** - Add an entity to the table.\n* **[delete_entity][delete_entity]** - Delete an entity from the table.\n* **[update_entity][update_entity]** - Update an entity's information by either merging or replacing the existing entity.\n    * `UpdateMode.MERGE` will add new properties to an existing entity it will not delete an existing properties\n    * `UpdateMode.REPLACE` will replace the existing entity with the given one, deleting any existing properties not included in the submitted entity\n* **[query_entities][query_entities]** - Query existing entities in a table using [OData filters][odata_syntax].\n* **[get_entity][get_entity]** - Get a specific entity from a table by partition and row key.\n* **[upsert_entity][upsert_entity]** - Merge or replace an entity in a table, or if the entity does not exist, inserts the entity.\n    * `UpdateMode.MERGE` will add new properties to an existing entity it will not delete an existing properties\n    * `UpdateMode.REPLACE` will replace the existing entity with the given one, deleting any existing properties not included in the submitted entity\n\n## Examples\n\nThe following sections provide several code snippets covering some of the most common Table tasks, including:\n\n* [Creating a table](#creating-a-table \"Creating a table\")\n* [Creating entities](#creating-entities \"Creating entities\")\n* [Querying entities](#querying-entities \"Querying entities\")\n\n\n### Creating a table\nCreate a table in your account and get a `TableClient` to perform operations on the newly created table:\n\n```python\nfrom azure.data.tables import TableServiceClient\ntable_service_client = TableServiceClient.from_connection_string(conn_str=\"<connection_string>\")\ntable_name = \"myTable\"\ntable_client = table_service_client.create_table(table_name=table_name)\n```\n\n### Creating entities\nCreate entities in the table:\n\n```python\nfrom azure.data.tables import TableServiceClient\nfrom datetime import datetime\n\nPRODUCT_ID = u'001234'\nPRODUCT_NAME = u'RedMarker'\n\nmy_entity = {\n    u'PartitionKey': PRODUCT_NAME,\n    u'RowKey': PRODUCT_ID,\n    u'Stock': 15,\n    u'Price': 9.99,\n    u'Comments': u\"great product\",\n    u'OnSale': True,\n    u'ReducedPrice': 7.99,\n    u'PurchaseDate': datetime(1973, 10, 4),\n    u'BinaryRepresentation': b'product_name'\n}\n\ntable_service_client = TableServiceClient.from_connection_string(conn_str=\"<connection_string>\")\ntable_client = table_service_client.get_table_client(table_name=\"myTable\")\n\nentity = table_client.create_entity(entity=my_entity)\n```\n\n### Querying entities\nQuerying entities in the table:\n\n```python\nfrom azure.data.tables import TableClient\nmy_filter = \"PartitionKey eq 'RedMarker'\"\ntable_client = TableClient.from_connection_string(conn_str=\"<connection_string>\", table_name=\"myTable\")\nentities = table_client.query_entities(my_filter)\nfor entity in entities:\n    for key in entity.keys():\n        print(\"Key: {}, Value: {}\".format(key, entity[key]))\n```\n\n## Optional Configuration\nOptional keyword arguments can be passed in at the client and per-operation level. The azure-core [reference documentation][azure_core_ref_docs] describes available configurations for retries, logging, transport protocols, and more.\n\n\n### Retry Policy configuration\n\nUse the following keyword arguments when instantiating a client to configure the retry policy:\n\n* __retry_total__ (int): Total number of retries to allow. Takes precedence over other counts.\nPass in `retry_total=0` if you do not want to retry on requests. Defaults to 10.\n* __retry_connect__ (int): How many connection-related errors to retry on. Defaults to 3.\n* __retry_read__ (int): How many times to retry on read errors. Defaults to 3.\n* __retry_status__ (int): How many times to retry on bad status codes. Defaults to 3.\n* __retry_to_secondary__ (bool): Whether the request should be retried to secondary, if able.\nThis should only be enabled of RA-GRS accounts are used and potentially stale data can be handled.\nDefaults to `False`.\n\n### Other client / per-operation configuration\n\nOther optional configuration keyword arguments that can be specified on the client or per-operation.\n\n**Client keyword arguments:**\n\n* __connection_timeout__ (int): Optionally sets the connect and read timeout value, in seconds.\n* __transport__ (Any): User-provided transport to send the HTTP request.\n\n**Per-operation keyword arguments:**\n\n* __raw_response_hook__ (callable): The given callback uses the response returned from the service.\n* __raw_request_hook__ (callable): The given callback uses the request before being sent to service.\n* __client_request_id__ (str): Optional user specified identification of the request.\n* __user_agent__ (str): Appends the custom value to the user-agent header to be sent with the request.\n* __logging_enable__ (bool): Enables logging at the DEBUG level. Defaults to False. Can also be passed in at\nthe client level to enable it for all requests.\n* __headers__ (dict): Pass in custom headers as key, value pairs. E.g. `headers={'CustomValue': value}`\n\n\n## Troubleshooting\n\n### General\nAzure Tables clients raise exceptions defined in [Azure Core][azure_core_readme].\nWhen you interact with the Azure table library using the Python SDK, errors returned by the service respond ot the same HTTP status codes for [REST API][tables_rest] requests. The Table service operations will throw a `HttpResponseError` on failure with helpful [error codes][tables_error_codes].\n\nFor examples, if you try to create a table that already exists, a `409` error is returned indicating \"Conflict\".\n```python\nfrom azure.data.tables import TableServiceClient\nfrom azure.core.exceptions import HttpResponseError\ntable_name = 'YourTableName'\n\nservice_client = TableServiceClient.from_connection_string(connection_string)\n\n# Create the table if it does not already exist\ntc = service_client.create_table_if_not_exists(table_name)\n\ntry:\n    service_client.create_table(table_name)\nexcept HttpResponseError:\n    print(\"Table with name {} already exists\".format(table_name))\n```\n\n### Logging\nThis library uses the standard\n[logging][python_logging] library for logging.\nBasic information about HTTP sessions (URLs, headers, etc.) is logged at INFO\nlevel.\n\nDetailed DEBUG level logging, including request/response bodies and unredacted\nheaders, can be enabled on a client with the `logging_enable` argument:\n```python\nimport sys\nimport logging\nfrom azure.data.tables import TableServiceClient\n# Create a logger for the 'azure' SDK\nlogger = logging.getLogger('azure')\nlogger.setLevel(logging.DEBUG)\n\n# Configure a console output\nhandler = logging.StreamHandler(stream=sys.stdout)\nlogger.addHandler(handler)\n\n# This client will log detailed information about its HTTP sessions, at DEBUG level\nservice_client = TableServiceClient.from_connection_string(\"your_connection_string\", logging_enable=True)\n```\n\nSimilarly, `logging_enable` can enable detailed logging for a single operation,\neven when it is not enabled for the client:\n```python\nservice_client.create_entity(entity=my_entity, logging_enable=True)\n```\n\n## Next steps\n\nGet started with our [Table samples][tables_samples].\n\nSeveral Azure Tables Python SDK samples are available to you in the SDK's GitHub repository. These samples provide example code for additional scenarios commonly encountered while working with Tables.\n\n### Common Scenarios\nThese code samples show common scenario operations with the Azure Tables client library. The async versions of the samples (the python sample files appended with _async) show asynchronous operations.\n\n* Create and delete tables: [sample_create_delete_table.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/tables/azure-data-tables/samples/sample_create_delete_table.py) ([async version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/tables/azure-data-tables/samples/async_samples/sample_create_delete_table_async.py))\n* List and query tables: [sample_query_tables.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/tables/azure-data-tables/samples/sample_query_tables.py) ([async version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/tables/azure-data-tables/samples/async_samples/sample_query_tables_async.py))\n* Insert and delete entities: [sample_insert_delete_entities.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/tables/azure-data-tables/samples/sample_insert_delete_entities.py) ([async version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/tables/azure-data-tables/samples/async_samples/sample_insert_delete_entities_async.py))\n* Query and list entities: [sample_query_table.py](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/tables/azure-data-tables/samples/sample_query_table.py) ([async version](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/tables/azure-data-tables/samples/async_samples/sample_query_table_async.py))\n* Update, upsert, and merge entities: [sample_update_upsert_merge_entities.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/tables/azure-data-tables/samples/sample_update_upsert_merge_entities.py) ([async version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/tables/azure-data-tables/samples/async_samples/sample_update_upsert_merge_entities_async.py))\n* Committing many requests in a single transaction: [sample_batching.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/tables/azure-data-tables/samples/sample_batching.py) ([async version](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/tables/azure-data-tables/samples/async_samples/sample_batching_async.py))\n\n### Additional documentation\nFor more extensive documentation on Azure Tables, see the [Azure Tables documentation][Tables_product_doc] on docs.microsoft.com.\n\n## Known Issues\nA list of currently known issues relating to Cosmos DB table endpoints can be found [here](https://aka.ms/tablesknownissues).\n\n## Contributing\nThis project welcomes contributions and suggestions.  Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][msft_oss_coc]. For more information see the [Code of Conduct FAQ][msft_oss_coc_faq] or contact [opencode@microsoft.com][contact_msft_oss] with any additional questions or comments.\n\n<!-- LINKS -->\n[source_code]:https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/tables/azure-data-tables\n[Tables_pypi]:https://aka.ms/azsdk/python/tablespypi\n[Tables_ref_docs]:https://docs.microsoft.com/python/api/overview/azure/data-tables-readme?view=azure-python\n[Tables_product_doc]:https://docs.microsoft.com/azure/cosmos-db/table-introduction\n[Tables_samples]:https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/tables/azure-data-tables/samples\n[migration_guide]:https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/tables/azure-data-tables/migration_guide.md\n\n[azure_subscription]:https://azure.microsoft.com/free/\n[azure_storage_account]:https://docs.microsoft.com/azure/storage/common/storage-account-create?tabs=azure-portal\n[azure_cosmos_account]:https://docs.microsoft.com/azure/cosmos-db/create-cosmosdb-resources-portal\n[pip_link]:https://pypi.org/project/pip/\n\n[azure_create_cosmos]:https://docs.microsoft.com/azure/cosmos-db/create-cosmosdb-resources-portal\n[azure_cli_create_cosmos]:https://docs.microsoft.com/azure/cosmos-db/scripts/cli/table/create\n[azure_portal_create_cosmos]:https://docs.microsoft.com/azure/cosmos-db/create-cosmosdb-resources-portal\n[azure_portal_create_account]:https://docs.microsoft.com/azure/storage/common/storage-account-create?tabs=azure-portal\n[azure_powershell_create_account]:https://docs.microsoft.com/azure/storage/common/storage-account-create?tabs=azure-powershell\n[azure_cli_create_account]: https://docs.microsoft.com/azure/storage/common/storage-account-create?tabs=azure-cli\n\n[azure_cli_account_url]:https://docs.microsoft.com/cli/azure/storage/account?view=azure-cli-latest#az-storage-account-show\n[azure_powershell_account_url]:https://docs.microsoft.com/powershell/module/az.storage/get-azstorageaccount?view=azps-4.6.1\n[azure_portal_account_url]:https://docs.microsoft.com/azure/storage/common/storage-account-overview#storage-account-endpoints\n\n[azure_sas_token]:https://docs.microsoft.com/azure/storage/common/storage-sas-overview\n[azure_shared_key]:https://docs.microsoft.com/rest/api/storageservices/authorize-with-shared-key\n\n[odata_syntax]:https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/tables/azure-data-tables/samples/README.md#writing-filters\n\n[azure_core_ref_docs]: https://azuresdkdocs.blob.core.windows.net/$web/python/azure-core/latest/azure.core.html\n[azure_core_readme]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/README.md\n\n[python_logging]: https://docs.python.org/3/library/logging.html\n[tables_error_codes]: https://docs.microsoft.com/rest/api/storageservices/table-service-error-codes\n\n[msft_oss_coc]:https://opensource.microsoft.com/codeofconduct/\n[msft_oss_coc_faq]:https://opensource.microsoft.com/codeofconduct/faq/\n[contact_msft_oss]:mailto:opencode@microsoft.com\n\n[tables_rest]: https://docs.microsoft.com/rest/api/storageservices/table-service-rest-api\n\n[create_entity]:https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/tables/azure-data-tables/samples/sample_insert_delete_entities.py#L67-L73\n[delete_entity]:https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/tables/azure-data-tables/samples/sample_insert_delete_entities.py#L89-L92\n[update_entity]:https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/tables/azure-data-tables/samples/sample_update_upsert_merge_entities.py#L165-L181\n[query_entities]:https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/tables/azure-data-tables/samples/sample_query_table.py#L75-L89\n[get_entity]:https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/tables/azure-data-tables/samples/sample_update_upsert_merge_entities.py#L67-L71\n[upsert_entity]:https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/tables/azure-data-tables/samples/sample_update_upsert_merge_entities.py#L155-L163\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python/sdk/tables/azure-data-tables/README.png)\n",
        "repo_name": "tables/azure-data-tables",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/tables/azure-data-tables",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "[![Build Status](https://dev.azure.com/azure-sdk/public/_apis/build/status/472?branchName=main)](https://dev.azure.com/azure-sdk/public/_build/latest?definitionId=472)\n\n# Azure Template Package client library for Python\n\nThis template package matches necessary patterns that the development team has established to create a unified SDK. The packages contained herein can be installed singly or as part of the `azure` namespace. Any other introductory text should go here.\n\nThis package has been tested with Python 3.7+.\n\nFor a more complete set of Azure libraries, see https://aka.ms/azsdk/python/all.\n\n# Getting started\n\nFor a rich example of a well formatted readme, please check [here.](https://github.com/Azure/azure-sdk/blob/main/docs/policies/README-TEMPLATE.md) In addition, this is an [example readme](https://github.com/Azure/azure-sdk/blob/main/docs/policies/README-EXAMPLE.md) that should be emulated. Note that the top-level sections in this template align with that of the [template.](https://github.com/Azure/azure-sdk/blob/main/docs/policies/README-TEMPLATE.md)\n\n# Key concepts\n\nBullet point list of your library's main concepts.\n\n# Examples\n\nExamples of some of the key concepts for your library.\n\n# Troubleshooting\n\nRunning into issues? This section should contain details as to what to do there.\n\n# Next steps\n\nMore sample code should go here, along with links out to the appropriate example tests.\n\n# Contributing\n\nIf you encounter any bugs or have suggestions, please file an issue in the [Issues](<https://github.com/Azure/azure-sdk-for-python/issues>) section of the project.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fsdk%2Ftemplate%2Fazure-template%2FREADME.png)\n",
        "repo_name": "template/azure-template",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/template/azure-template",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Testbase Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/)\nCode samples for this package can be found at [Testbase Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://github.com/Azure-Samples/azure-samples-python-management/tree/main/samples/testbase)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-testbase%2FREADME.png)\n",
        "repo_name": "testbase/azure-mgmt-testbase",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/testbase/azure-mgmt-testbase",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Azure Text Analytics client library for Python\n\nThe Azure Cognitive Service for Language is a cloud-based service that provides Natural Language Processing (NLP) features for understanding and analyzing text, and includes the following main features:\n\n- Sentiment Analysis\n- Named Entity Recognition\n- Language Detection\n- Key Phrase Extraction\n- Entity Linking\n- Multiple Analysis\n- Personally Identifiable Information (PII) Detection\n- Text Analytics for Health\n- Custom Named Entity Recognition\n- Custom Text Classification\n- Extractive Text Summarization\n- Abstractive Text Summarization\n\n[Source code][source_code]\n| [Package (PyPI)][ta_pypi]\n| [Package (Conda)](https://anaconda.org/microsoft/azure-ai-textanalytics/)\n| [API reference documentation][ta_ref_docs]\n| [Product documentation][language_product_documentation]\n| [Samples][ta_samples]\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7 later is required to use this package.\n- You must have an [Azure subscription][azure_subscription] and a\n  [Cognitive Services or Language service resource][ta_or_cs_resource] to use this package.\n\n#### Create a Cognitive Services or Language service resource\n\nThe Language service supports both [multi-service and single-service access][multi_and_single_service].\nCreate a Cognitive Services resource if you plan to access multiple cognitive services under a single endpoint/key. For Language service access only, create a Language service resource.\nYou can create the resource using the [Azure Portal][azure_portal_create_ta_resource] or [Azure CLI][azure_cli] following the steps in [this document][azure_cli_create_ta_resource].\n\nInteraction with the service using the client library begins with a [client](#textanalyticsclient \"TextAnalyticsClient\").\nTo create a client object, you will need the Cognitive Services or Language service `endpoint` to\nyour resource and a `credential` that allows you access:\n\n```python\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.textanalytics import TextAnalyticsClient\n\ncredential = AzureKeyCredential(\"<api_key>\")\ntext_analytics_client = TextAnalyticsClient(endpoint=\"https://<resource-name>.cognitiveservices.azure.com/\", credential=credential)\n```\n\nNote that for some Cognitive Services resources the endpoint might look different from the above code snippet.\nFor example, `https://<region>.api.cognitive.microsoft.com/`.\n\n### Install the package\n\nInstall the Azure Text Analytics client library for Python with [pip][pip]:\n\n```bash\npip install azure-ai-textanalytics\n```\n\n<!-- SNIPPET:sample_authentication.create_ta_client_with_key -->\n\n```python\nimport os\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.textanalytics import TextAnalyticsClient\nendpoint = os.environ[\"AZURE_LANGUAGE_ENDPOINT\"]\nkey = os.environ[\"AZURE_LANGUAGE_KEY\"]\n\ntext_analytics_client = TextAnalyticsClient(endpoint, AzureKeyCredential(key))\n```\n\n<!-- END SNIPPET -->\n\n> Note that `5.2.X` and newer targets the Azure Cognitive Service for Language APIs. These APIs include the text analysis and natural language processing features found in the previous versions of the Text Analytics client library.\nIn addition, the service API has changed from semantic to date-based versioning. This version of the client library defaults to the latest supported API version, which currently is `2023-04-01`.\n\nThis table shows the relationship between SDK versions and supported API versions of the service\n\n| SDK version  | Supported API version of service  |\n| ------------ | --------------------------------- |\n| 5.3.X - Latest stable release | 3.0, 3.1, 2022-05-01, 2023-04-01 (default) |\n| 5.2.X  | 3.0, 3.1, 2022-05-01 (default) |\n| 5.1.0  | 3.0, 3.1 (default) |\n| 5.0.0  | 3.0 |\n\nAPI version can be selected by passing the [api_version][text_analytics_client] keyword argument into the client.\nFor the latest Language service features, consider selecting the most recent beta API version. For production scenarios, the latest stable version is recommended. Setting to an older version may result in reduced feature compatibility.\n\n### Authenticate the client\n\n#### Get the endpoint\n\nYou can find the endpoint for your Language service resource using the\n[Azure Portal][azure_portal_get_endpoint]\nor [Azure CLI][azure_cli_endpoint_lookup]:\n\n```bash\n# Get the endpoint for the Language service resource\naz cognitiveservices account show --name \"resource-name\" --resource-group \"resource-group-name\" --query \"properties.endpoint\"\n```\n\n#### Get the API Key\n\nYou can get the [API key][cognitive_authentication_api_key] from the Cognitive Services or Language service resource in the [Azure Portal][azure_portal_get_endpoint].\nAlternatively, you can use [Azure CLI][azure_cli_endpoint_lookup] snippet below to get the API key of your resource.\n\n`az cognitiveservices account keys list --name \"resource-name\" --resource-group \"resource-group-name\"`\n\n#### Create a TextAnalyticsClient with an API Key Credential\n\nOnce you have the value for the API key, you can pass it as a string into an instance of [AzureKeyCredential][azure-key-credential]. Use the key as the credential parameter\nto authenticate the client:\n\n<!-- SNIPPET:sample_authentication.create_ta_client_with_key -->\n\n```python\nimport os\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.textanalytics import TextAnalyticsClient\nendpoint = os.environ[\"AZURE_LANGUAGE_ENDPOINT\"]\nkey = os.environ[\"AZURE_LANGUAGE_KEY\"]\n\ntext_analytics_client = TextAnalyticsClient(endpoint, AzureKeyCredential(key))\n```\n\n<!-- END SNIPPET -->\n\n#### Create a TextAnalyticsClient with an Azure Active Directory Credential\n\nTo use an [Azure Active Directory (AAD) token credential][cognitive_authentication_aad],\nprovide an instance of the desired credential type obtained from the\n[azure-identity][azure_identity_credentials] library.\nNote that regional endpoints do not support AAD authentication. Create a [custom subdomain][custom_subdomain]\nname for your resource in order to use this type of authentication.\n\nAuthentication with AAD requires some initial setup:\n\n- [Install azure-identity][install_azure_identity]\n- [Register a new AAD application][register_aad_app]\n- [Grant access][grant_role_access] to the Language service by assigning the `\"Cognitive Services Language Reader\"` role to your service principal.\n\nAfter setup, you can choose which type of [credential][azure_identity_credentials] from azure.identity to use.\nAs an example, [DefaultAzureCredential][default_azure_credential]\ncan be used to authenticate the client:\n\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables:\nAZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET\n\nUse the returned token credential to authenticate the client:\n\n<!-- SNIPPET:sample_authentication.create_ta_client_with_aad -->\n\n```python\nimport os\nfrom azure.ai.textanalytics import TextAnalyticsClient\nfrom azure.identity import DefaultAzureCredential\n\nendpoint = os.environ[\"AZURE_LANGUAGE_ENDPOINT\"]\ncredential = DefaultAzureCredential()\n\ntext_analytics_client = TextAnalyticsClient(endpoint, credential=credential)\n```\n\n<!-- END SNIPPET -->\n\n## Key concepts\n\n### TextAnalyticsClient\n\nThe Text Analytics client library provides a [TextAnalyticsClient][text_analytics_client] to do analysis on [batches of documents](#examples \"Examples\").\nIt provides both synchronous and asynchronous operations to access a specific use of text analysis, such as language detection or key phrase extraction.\n\n### Input\n\nA **document** is a single unit to be analyzed by the predictive models in the Language service.\nThe input for each operation is passed as a **list** of documents.\n\nEach document can be passed as a string in the list, e.g.\n\n```python\ndocuments = [\"I hated the movie. It was so slow!\", \"The movie made it into my top ten favorites. What a great movie!\"]\n```\n\nor, if you wish to pass in a per-item document `id` or `language`/`country_hint`, they can be passed as a list of\n[DetectLanguageInput][detect_language_input] or\n[TextDocumentInput][text_document_input]\nor a dict-like representation of the object:\n\n```python\ndocuments = [\n    {\"id\": \"1\", \"language\": \"en\", \"text\": \"I hated the movie. It was so slow!\"},\n    {\"id\": \"2\", \"language\": \"en\", \"text\": \"The movie made it into my top ten favorites. What a great movie!\"},\n]\n```\n\nSee [service limitations][service_limits] for the input, including document length limits, maximum batch size, and supported text encoding.\n\n### Return Value\n\nThe return value for a single document can be a result or error object.\nA heterogeneous list containing a collection of result and error objects is returned from each operation.\nThese results/errors are index-matched with the order of the provided documents.\n\nA **result**, such as [AnalyzeSentimentResult][analyze_sentiment_result],\nis the result of a text analysis operation and contains a prediction or predictions about a document input.\n\nThe **error** object, [DocumentError][document_error], indicates that the service had trouble processing the document and contains\nthe reason it was unsuccessful.\n\n### Document Error Handling\n\nYou can filter for a result or error object in the list by using the `is_error` attribute. For a result object this is always `False` and for a\n[DocumentError][document_error] this is `True`.\n\nFor example, to filter out all DocumentErrors you might use list comprehension:\n\n```python\nresponse = text_analytics_client.analyze_sentiment(documents)\nsuccessful_responses = [doc for doc in response if not doc.is_error]\n```\n\nYou can also use the `kind` attribute to filter between result types:\n\n```python\npoller = text_analytics_client.begin_analyze_actions(documents, actions)\nresponse = poller.result()\nfor result in response:\n    if result.kind == \"SentimentAnalysis\":\n        print(f\"Sentiment is {result.sentiment}\")\n    elif result.kind == \"KeyPhraseExtraction\":\n        print(f\"Key phrases: {result.key_phrases}\")\n    elif result.is_error is True:\n        print(f\"Document error: {result.code}, {result.message}\")\n```\n\n### Long-Running Operations\n\nLong-running operations are operations which consist of an initial request sent to the service to start an operation,\nfollowed by polling the service at intervals to determine whether the operation has completed or failed, and if it has\nsucceeded, to get the result.\n\nMethods that support healthcare analysis, custom text analysis, or multiple analyses are modeled as long-running operations.\nThe client exposes a `begin_<method-name>` method that returns a poller object. Callers should wait\nfor the operation to complete by calling `result()` on the poller object returned from the `begin_<method-name>` method.\nSample code snippets are provided to illustrate using long-running operations [below](#examples \"Examples\").\n\n## Examples\n\nThe following section provides several code snippets covering some of the most common Language service tasks, including:\n\n- [Analyze Sentiment](#analyze-sentiment \"Analyze sentiment\")\n- [Recognize Entities](#recognize-entities \"Recognize entities\")\n- [Recognize Linked Entities](#recognize-linked-entities \"Recognize linked entities\")\n- [Recognize PII Entities](#recognize-pii-entities \"Recognize pii entities\")\n- [Extract Key Phrases](#extract-key-phrases \"Extract key phrases\")\n- [Detect Language](#detect-language \"Detect language\")\n- [Healthcare Entities Analysis](#healthcare-entities-analysis \"Healthcare Entities Analysis\")\n- [Multiple Analysis](#multiple-analysis \"Multiple analysis\")\n- [Custom Entity Recognition][recognize_custom_entities_sample]\n- [Custom Single Label Classification][single_label_classify_sample]\n- [Custom Multi Label Classification][multi_label_classify_sample]\n- [Extractive Summarization][extract_summary_sample]\n- [Abstractive Summarization][abstract_summary_sample]\n\n### Analyze Sentiment\n\n[analyze_sentiment][analyze_sentiment] looks at its input text and determines whether its sentiment is positive, negative, neutral or mixed. It's response includes per-sentence sentiment analysis and confidence scores.\n\n<!-- SNIPPET:sample_analyze_sentiment.analyze_sentiment -->\n\n```python\nimport os\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.textanalytics import TextAnalyticsClient\n\nendpoint = os.environ[\"AZURE_LANGUAGE_ENDPOINT\"]\nkey = os.environ[\"AZURE_LANGUAGE_KEY\"]\n\ntext_analytics_client = TextAnalyticsClient(endpoint=endpoint, credential=AzureKeyCredential(key))\n\ndocuments = [\n    \"\"\"I had the best day of my life. I decided to go sky-diving and it made me appreciate my whole life so much more.\n    I developed a deep-connection with my instructor as well, and I feel as if I've made a life-long friend in her.\"\"\",\n    \"\"\"This was a waste of my time. All of the views on this drop are extremely boring, all I saw was grass. 0/10 would\n    not recommend to any divers, even first timers.\"\"\",\n    \"\"\"This was pretty good! The sights were ok, and I had fun with my instructors! Can't complain too much about my experience\"\"\",\n    \"\"\"I only have one word for my experience: WOW!!! I can't believe I have had such a wonderful skydiving company right\n    in my backyard this whole time! I will definitely be a repeat customer, and I want to take my grandmother skydiving too,\n    I know she'll love it!\"\"\"\n]\n\n\nresult = text_analytics_client.analyze_sentiment(documents, show_opinion_mining=True)\ndocs = [doc for doc in result if not doc.is_error]\n\nprint(\"Let's visualize the sentiment of each of these documents\")\nfor idx, doc in enumerate(docs):\n    print(f\"Document text: {documents[idx]}\")\n    print(f\"Overall sentiment: {doc.sentiment}\")\n```\n\n<!-- END SNIPPET -->\n\nThe returned response is a heterogeneous list of result and error objects: list[[AnalyzeSentimentResult][analyze_sentiment_result], [DocumentError][document_error]]\n\nPlease refer to the service documentation for a conceptual discussion of [sentiment analysis][sentiment_analysis]. To see how to conduct more granular analysis into the opinions related to individual aspects (such as attributes of a product or service) in a text, see [here][opinion_mining_sample].\n\n### Recognize Entities\n\n[recognize_entities][recognize_entities] recognizes and categories entities in its input text as people, places, organizations, date/time, quantities, percentages, currencies, and more.\n\n<!-- SNIPPET:sample_recognize_entities.recognize_entities -->\n\n```python\nimport os\nimport typing\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.textanalytics import TextAnalyticsClient\n\nendpoint = os.environ[\"AZURE_LANGUAGE_ENDPOINT\"]\nkey = os.environ[\"AZURE_LANGUAGE_KEY\"]\n\ntext_analytics_client = TextAnalyticsClient(endpoint=endpoint, credential=AzureKeyCredential(key))\nreviews = [\n    \"\"\"I work for Foo Company, and we hired Contoso for our annual founding ceremony. The food\n    was amazing and we all can't say enough good words about the quality and the level of service.\"\"\",\n    \"\"\"We at the Foo Company re-hired Contoso after all of our past successes with the company.\n    Though the food was still great, I feel there has been a quality drop since their last time\n    catering for us. Is anyone else running into the same problem?\"\"\",\n    \"\"\"Bar Company is over the moon about the service we received from Contoso, the best sliders ever!!!!\"\"\"\n]\n\nresult = text_analytics_client.recognize_entities(reviews)\nresult = [review for review in result if not review.is_error]\norganization_to_reviews: typing.Dict[str, typing.List[str]] = {}\n\nfor idx, review in enumerate(result):\n    for entity in review.entities:\n        print(f\"Entity '{entity.text}' has category '{entity.category}'\")\n        if entity.category == 'Organization':\n            organization_to_reviews.setdefault(entity.text, [])\n            organization_to_reviews[entity.text].append(reviews[idx])\n\nfor organization, reviews in organization_to_reviews.items():\n    print(\n        \"\\n\\nOrganization '{}' has left us the following review(s): {}\".format(\n            organization, \"\\n\\n\".join(reviews)\n        )\n    )\n```\n\n<!-- END SNIPPET -->\n\nThe returned response is a heterogeneous list of result and error objects: list[[RecognizeEntitiesResult][recognize_entities_result], [DocumentError][document_error]]\n\nPlease refer to the service documentation for a conceptual discussion of [named entity recognition][named_entity_recognition]\nand [supported types][named_entity_categories].\n\n### Recognize Linked Entities\n\n[recognize_linked_entities][recognize_linked_entities] recognizes and disambiguates the identity of each entity found in its input text (for example,\ndetermining whether an occurrence of the word Mars refers to the planet, or to the\nRoman god of war). Recognized entities are associated with URLs to a well-known knowledge base, like Wikipedia.\n\n<!-- SNIPPET:sample_recognize_linked_entities.recognize_linked_entities -->\n\n```python\nimport os\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.textanalytics import TextAnalyticsClient\n\nendpoint = os.environ[\"AZURE_LANGUAGE_ENDPOINT\"]\nkey = os.environ[\"AZURE_LANGUAGE_KEY\"]\n\ntext_analytics_client = TextAnalyticsClient(endpoint=endpoint, credential=AzureKeyCredential(key))\ndocuments = [\n    \"\"\"\n    Microsoft was founded by Bill Gates with some friends he met at Harvard. One of his friends,\n    Steve Ballmer, eventually became CEO after Bill Gates as well. Steve Ballmer eventually stepped\n    down as CEO of Microsoft, and was succeeded by Satya Nadella.\n    Microsoft originally moved its headquarters to Bellevue, Washington in January 1979, but is now\n    headquartered in Redmond.\n    \"\"\"\n]\n\nresult = text_analytics_client.recognize_linked_entities(documents)\ndocs = [doc for doc in result if not doc.is_error]\n\nprint(\n    \"Let's map each entity to it's Wikipedia article. I also want to see how many times each \"\n    \"entity is mentioned in a document\\n\\n\"\n)\nentity_to_url = {}\nfor doc in docs:\n    for entity in doc.entities:\n        print(\"Entity '{}' has been mentioned '{}' time(s)\".format(\n            entity.name, len(entity.matches)\n        ))\n        if entity.data_source == \"Wikipedia\":\n            entity_to_url[entity.name] = entity.url\n```\n\n<!-- END SNIPPET -->\n\nThe returned response is a heterogeneous list of result and error objects: list[[RecognizeLinkedEntitiesResult][recognize_linked_entities_result], [DocumentError][document_error]]\n\nPlease refer to the service documentation for a conceptual discussion of [entity linking][linked_entity_recognition]\nand [supported types][linked_entities_categories].\n\n### Recognize PII Entities\n\n[recognize_pii_entities][recognize_pii_entities] recognizes and categorizes Personally Identifiable Information (PII) entities in its input text, such as\nSocial Security Numbers, bank account information, credit card numbers, and more.\n\n<!-- SNIPPET:sample_recognize_pii_entities.recognize_pii_entities -->\n\n```python\nimport os\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.textanalytics import TextAnalyticsClient\n\nendpoint = os.environ[\"AZURE_LANGUAGE_ENDPOINT\"]\nkey = os.environ[\"AZURE_LANGUAGE_KEY\"]\n\ntext_analytics_client = TextAnalyticsClient(\n    endpoint=endpoint, credential=AzureKeyCredential(key)\n)\ndocuments = [\n    \"\"\"Parker Doe has repaid all of their loans as of 2020-04-25.\n    Their SSN is 859-98-0987. To contact them, use their phone number\n    555-555-5555. They are originally from Brazil and have Brazilian CPF number 998.214.865-68\"\"\"\n]\n\nresult = text_analytics_client.recognize_pii_entities(documents)\ndocs = [doc for doc in result if not doc.is_error]\n\nprint(\n    \"Let's compare the original document with the documents after redaction. \"\n    \"I also want to comb through all of the entities that got redacted\"\n)\nfor idx, doc in enumerate(docs):\n    print(f\"Document text: {documents[idx]}\")\n    print(f\"Redacted document text: {doc.redacted_text}\")\n    for entity in doc.entities:\n        print(\"...Entity '{}' with category '{}' got redacted\".format(\n            entity.text, entity.category\n        ))\n```\n\n<!-- END SNIPPET -->\n\nThe returned response is a heterogeneous list of result and error objects: list[[RecognizePiiEntitiesResult][recognize_pii_entities_result], [DocumentError][document_error]]\n\nPlease refer to the service documentation for [supported PII entity types][pii_entity_categories].\n\nNote: The Recognize PII Entities service is available in API version v3.1 and newer.\n\n### Extract Key Phrases\n\n[extract_key_phrases][extract_key_phrases] determines the main talking points in its input text. For example, for the input text \"The food was delicious and there were wonderful staff\", the API returns: \"food\" and \"wonderful staff\".\n\n<!-- SNIPPET:sample_extract_key_phrases.extract_key_phrases -->\n\n```python\nimport os\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.textanalytics import TextAnalyticsClient\n\nendpoint = os.environ[\"AZURE_LANGUAGE_ENDPOINT\"]\nkey = os.environ[\"AZURE_LANGUAGE_KEY\"]\n\ntext_analytics_client = TextAnalyticsClient(endpoint=endpoint, credential=AzureKeyCredential(key))\narticles = [\n    \"\"\"\n    Washington, D.C. Autumn in DC is a uniquely beautiful season. The leaves fall from the trees\n    in a city chock-full of forests, leaving yellow leaves on the ground and a clearer view of the\n    blue sky above...\n    \"\"\",\n    \"\"\"\n    Redmond, WA. In the past few days, Microsoft has decided to further postpone the start date of\n    its United States workers, due to the pandemic that rages with no end in sight...\n    \"\"\",\n    \"\"\"\n    Redmond, WA. Employees at Microsoft can be excited about the new coffee shop that will open on campus\n    once workers no longer have to work remotely...\n    \"\"\"\n]\n\nresult = text_analytics_client.extract_key_phrases(articles)\nfor idx, doc in enumerate(result):\n    if not doc.is_error:\n        print(\"Key phrases in article #{}: {}\".format(\n            idx + 1,\n            \", \".join(doc.key_phrases)\n        ))\n```\n\n<!-- END SNIPPET -->\n\nThe returned response is a heterogeneous list of result and error objects: list[[ExtractKeyPhrasesResult][extract_key_phrases_result], [DocumentError][document_error]]\n\nPlease refer to the service documentation for a conceptual discussion of [key phrase extraction][key_phrase_extraction].\n\n### Detect Language\n\n[detect_language][detect_language] determines the language of its input text, including the confidence score of the predicted language.\n\n<!-- SNIPPET:sample_detect_language.detect_language -->\n\n```python\nimport os\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.textanalytics import TextAnalyticsClient\n\nendpoint = os.environ[\"AZURE_LANGUAGE_ENDPOINT\"]\nkey = os.environ[\"AZURE_LANGUAGE_KEY\"]\n\ntext_analytics_client = TextAnalyticsClient(endpoint=endpoint, credential=AzureKeyCredential(key))\ndocuments = [\n    \"\"\"\n    The concierge Paulette was extremely helpful. Sadly when we arrived the elevator was broken, but with Paulette's help we barely noticed this inconvenience.\n    She arranged for our baggage to be brought up to our room with no extra charge and gave us a free meal to refurbish all of the calories we lost from\n    walking up the stairs :). Can't say enough good things about my experience!\n    \"\"\",\n    \"\"\"\n    \u6700\u8fd1\u7531\u4e8e\u5de5\u4f5c\u538b\u529b\u592a\u5927\uff0c\u6211\u4eec\u51b3\u5b9a\u53bb\u5bcc\u9152\u5e97\u5ea6\u5047\u3002\u90a3\u513f\u7684\u6e29\u6cc9\u5b9e\u5728\u592a\u8212\u670d\u4e86\uff0c\u6211\u8ddf\u6211\u4e08\u592b\u90fd\u5b8c\u5168\u6062\u590d\u4e86\u5de5\u4f5c\u524d\u7684\u9752\u6625\u7cbe\u795e\uff01\u52a0\u6cb9\uff01\n    \"\"\"\n]\n\nresult = text_analytics_client.detect_language(documents)\nreviewed_docs = [doc for doc in result if not doc.is_error]\n\nprint(\"Let's see what language each review is in!\")\n\nfor idx, doc in enumerate(reviewed_docs):\n    print(\"Review #{} is in '{}', which has ISO639-1 name '{}'\\n\".format(\n        idx, doc.primary_language.name, doc.primary_language.iso6391_name\n    ))\n```\n\n<!-- END SNIPPET -->\n\nThe returned response is a heterogeneous list of result and error objects: list[[DetectLanguageResult][detect_language_result], [DocumentError][document_error]]\n\nPlease refer to the service documentation for a conceptual discussion of [language detection][language_detection]\nand [language and regional support][language_and_regional_support].\n\n### Healthcare Entities Analysis\n\n[Long-running operation](#long-running-operations) [begin_analyze_healthcare_entities][analyze_healthcare_entities] extracts entities recognized within the healthcare domain, and identifies relationships between entities within the input document and links to known sources of information in various well known databases, such as UMLS, CHV, MSH, etc.\n\n<!-- SNIPPET:sample_analyze_healthcare_entities.analyze_healthcare_entities -->\n\n```python\nimport os\nimport typing\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.textanalytics import TextAnalyticsClient, HealthcareEntityRelation\n\nendpoint = os.environ[\"AZURE_LANGUAGE_ENDPOINT\"]\nkey = os.environ[\"AZURE_LANGUAGE_KEY\"]\n\ntext_analytics_client = TextAnalyticsClient(\n    endpoint=endpoint,\n    credential=AzureKeyCredential(key),\n)\n\ndocuments = [\n    \"\"\"\n    Patient needs to take 100 mg of ibuprofen, and 3 mg of potassium. Also needs to take\n    10 mg of Zocor.\n    \"\"\",\n    \"\"\"\n    Patient needs to take 50 mg of ibuprofen, and 2 mg of Coumadin.\n    \"\"\"\n]\n\npoller = text_analytics_client.begin_analyze_healthcare_entities(documents)\nresult = poller.result()\n\ndocs = [doc for doc in result if not doc.is_error]\n\nprint(\"Let's first visualize the outputted healthcare result:\")\nfor doc in docs:\n    for entity in doc.entities:\n        print(f\"Entity: {entity.text}\")\n        print(f\"...Normalized Text: {entity.normalized_text}\")\n        print(f\"...Category: {entity.category}\")\n        print(f\"...Subcategory: {entity.subcategory}\")\n        print(f\"...Offset: {entity.offset}\")\n        print(f\"...Confidence score: {entity.confidence_score}\")\n        if entity.data_sources is not None:\n            print(\"...Data Sources:\")\n            for data_source in entity.data_sources:\n                print(f\"......Entity ID: {data_source.entity_id}\")\n                print(f\"......Name: {data_source.name}\")\n        if entity.assertion is not None:\n            print(\"...Assertion:\")\n            print(f\"......Conditionality: {entity.assertion.conditionality}\")\n            print(f\"......Certainty: {entity.assertion.certainty}\")\n            print(f\"......Association: {entity.assertion.association}\")\n    for relation in doc.entity_relations:\n        print(f\"Relation of type: {relation.relation_type} has the following roles\")\n        for role in relation.roles:\n            print(f\"...Role '{role.name}' with entity '{role.entity.text}'\")\n    print(\"------------------------------------------\")\n\nprint(\"Now, let's get all of medication dosage relations from the documents\")\ndosage_of_medication_relations = [\n    entity_relation\n    for doc in docs\n    for entity_relation in doc.entity_relations if entity_relation.relation_type == HealthcareEntityRelation.DOSAGE_OF_MEDICATION\n]\n```\n\n<!-- END SNIPPET -->\n\nNote: Healthcare Entities Analysis is only available with API version v3.1 and newer.\n\n### Multiple Analysis\n\n[Long-running operation](#long-running-operations) [begin_analyze_actions][analyze_actions] performs multiple analyses over one set of documents in a single request. Currently it is supported using any combination of the following Language APIs in a single request:\n\n- Entities Recognition\n- PII Entities Recognition\n- Linked Entity Recognition\n- Key Phrase Extraction\n- Sentiment Analysis\n- Custom Entity Recognition (API version 2022-05-01 and newer)\n- Custom Single Label Classification (API version 2022-05-01 and newer)\n- Custom Multi Label Classification (API version 2022-05-01 and newer)\n- Healthcare Entities Analysis (API version 2022-05-01 and newer)\n- Extractive Summarization (API version 2023-04-01 and newer)\n- Abstractive Summarization (API version 2023-04-01 and newer)\n\n<!-- SNIPPET:sample_analyze_actions.analyze -->\n\n```python\nimport os\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.textanalytics import (\n    TextAnalyticsClient,\n    RecognizeEntitiesAction,\n    RecognizeLinkedEntitiesAction,\n    RecognizePiiEntitiesAction,\n    ExtractKeyPhrasesAction,\n    AnalyzeSentimentAction,\n)\n\nendpoint = os.environ[\"AZURE_LANGUAGE_ENDPOINT\"]\nkey = os.environ[\"AZURE_LANGUAGE_KEY\"]\n\ntext_analytics_client = TextAnalyticsClient(\n    endpoint=endpoint,\n    credential=AzureKeyCredential(key),\n)\n\ndocuments = [\n    'We went to Contoso Steakhouse located at midtown NYC last week for a dinner party, and we adore the spot! '\n    'They provide marvelous food and they have a great menu. The chief cook happens to be the owner (I think his name is John Doe) '\n    'and he is super nice, coming out of the kitchen and greeted us all.'\n    ,\n\n    'We enjoyed very much dining in the place! '\n    'The Sirloin steak I ordered was tender and juicy, and the place was impeccably clean. You can even pre-order from their '\n    'online menu at www.contososteakhouse.com, call 312-555-0176 or send email to order@contososteakhouse.com! '\n    'The only complaint I have is the food didn\\'t come fast enough. Overall I highly recommend it!'\n]\n\npoller = text_analytics_client.begin_analyze_actions(\n    documents,\n    display_name=\"Sample Text Analysis\",\n    actions=[\n        RecognizeEntitiesAction(),\n        RecognizePiiEntitiesAction(),\n        ExtractKeyPhrasesAction(),\n        RecognizeLinkedEntitiesAction(),\n        AnalyzeSentimentAction(),\n    ],\n)\n\ndocument_results = poller.result()\nfor doc, action_results in zip(documents, document_results):\n    print(f\"\\nDocument text: {doc}\")\n    for result in action_results:\n        if result.kind == \"EntityRecognition\":\n            print(\"...Results of Recognize Entities Action:\")\n            for entity in result.entities:\n                print(f\"......Entity: {entity.text}\")\n                print(f\".........Category: {entity.category}\")\n                print(f\".........Confidence Score: {entity.confidence_score}\")\n                print(f\".........Offset: {entity.offset}\")\n\n        elif result.kind == \"PiiEntityRecognition\":\n            print(\"...Results of Recognize PII Entities action:\")\n            for pii_entity in result.entities:\n                print(f\"......Entity: {pii_entity.text}\")\n                print(f\".........Category: {pii_entity.category}\")\n                print(f\".........Confidence Score: {pii_entity.confidence_score}\")\n\n        elif result.kind == \"KeyPhraseExtraction\":\n            print(\"...Results of Extract Key Phrases action:\")\n            print(f\"......Key Phrases: {result.key_phrases}\")\n\n        elif result.kind == \"EntityLinking\":\n            print(\"...Results of Recognize Linked Entities action:\")\n            for linked_entity in result.entities:\n                print(f\"......Entity name: {linked_entity.name}\")\n                print(f\".........Data source: {linked_entity.data_source}\")\n                print(f\".........Data source language: {linked_entity.language}\")\n                print(\n                    f\".........Data source entity ID: {linked_entity.data_source_entity_id}\"\n                )\n                print(f\".........Data source URL: {linked_entity.url}\")\n                print(\".........Document matches:\")\n                for match in linked_entity.matches:\n                    print(f\"............Match text: {match.text}\")\n                    print(f\"............Confidence Score: {match.confidence_score}\")\n                    print(f\"............Offset: {match.offset}\")\n                    print(f\"............Length: {match.length}\")\n\n        elif result.kind == \"SentimentAnalysis\":\n            print(\"...Results of Analyze Sentiment action:\")\n            print(f\"......Overall sentiment: {result.sentiment}\")\n            print(\n                f\"......Scores: positive={result.confidence_scores.positive}; \\\n                neutral={result.confidence_scores.neutral}; \\\n                negative={result.confidence_scores.negative} \\n\"\n            )\n\n        elif result.is_error is True:\n            print(\n                f\"...Is an error with code '{result.error.code}' and message '{result.error.message}'\"\n            )\n\n    print(\"------------------------------------------\")\n```\n\n<!-- END SNIPPET -->\n\nThe returned response is an object encapsulating multiple iterables, each representing results of individual analyses.\n\nNote: Multiple analysis is available in API version v3.1 and newer.\n\n## Optional Configuration\n\nOptional keyword arguments can be passed in at the client and per-operation level.\nThe azure-core [reference documentation][azure_core_ref_docs]\ndescribes available configurations for retries, logging, transport protocols, and more.\n\n## Troubleshooting\n\n### General\n\nThe Text Analytics client will raise exceptions defined in [Azure Core][azure_core].\n\n### Logging\n\nThis library uses the standard\n[logging][python_logging] library for logging.\nBasic information about HTTP sessions (URLs, headers, etc.) is logged at INFO\nlevel.\n\nDetailed DEBUG level logging, including request/response bodies and unredacted\nheaders, can be enabled on a client with the `logging_enable` keyword argument:\n\n```python\nimport sys\nimport logging\nfrom azure.identity import DefaultAzureCredential\nfrom azure.ai.textanalytics import TextAnalyticsClient\n\n# Create a logger for the 'azure' SDK\nlogger = logging.getLogger('azure')\nlogger.setLevel(logging.DEBUG)\n\n# Configure a console output\nhandler = logging.StreamHandler(stream=sys.stdout)\nlogger.addHandler(handler)\n\nendpoint = \"https://<resource-name>.cognitiveservices.azure.com/\"\ncredential = DefaultAzureCredential()\n\n# This client will log detailed information about its HTTP sessions, at DEBUG level\ntext_analytics_client = TextAnalyticsClient(endpoint, credential, logging_enable=True)\nresult = text_analytics_client.analyze_sentiment([\"I did not like the restaurant. The food was too spicy.\"])\n```\n\nSimilarly, `logging_enable` can enable detailed logging for a single operation,\neven when it isn't enabled for the client:\n\n```python\nresult = text_analytics_client.analyze_sentiment(documents, logging_enable=True)\n```\n\n## Next steps\n\n### More sample code\n\nThese code samples show common scenario operations with the Azure Text Analytics client library.\n\nAuthenticate the client with a Cognitive Services/Language service API key or a token credential from [azure-identity][azure_identity]:\n\n- [sample_authentication.py][sample_authentication] ([async version][sample_authentication_async])\n\nCommon scenarios\n\n- Analyze sentiment: [sample_analyze_sentiment.py][analyze_sentiment_sample] ([async version][analyze_sentiment_sample_async])\n- Recognize entities: [sample_recognize_entities.py][recognize_entities_sample] ([async version][recognize_entities_sample_async])\n- Recognize personally identifiable information: [sample_recognize_pii_entities.py][recognize_pii_entities_sample] ([async version][recognize_pii_entities_sample_async])\n- Recognize linked entities: [sample_recognize_linked_entities.py][recognize_linked_entities_sample] ([async version][recognize_linked_entities_sample_async])\n- Extract key phrases: [sample_extract_key_phrases.py][extract_key_phrases_sample] ([async version][extract_key_phrases_sample_async])\n- Detect language: [sample_detect_language.py][detect_language_sample] ([async version][detect_language_sample_async])\n- Healthcare Entities Analysis: [sample_analyze_healthcare_entities.py][analyze_healthcare_entities_sample] ([async version][analyze_healthcare_entities_sample_async])\n- Multiple Analysis: [sample_analyze_actions.py][analyze_sample] ([async version][analyze_sample_async])\n- Custom Entity Recognition: [sample_recognize_custom_entities.py][recognize_custom_entities_sample] ([async_version][recognize_custom_entities_sample_async])\n- Custom Single Label Classification: [sample_single_label_classify.py][single_label_classify_sample] ([async_version][single_label_classify_sample_async])\n- Custom Multi Label Classification: [sample_multi_label_classify.py][multi_label_classify_sample] ([async_version][multi_label_classify_sample_async])\n- Extractive text summarization: [sample_extract_summary.py][extract_summary_sample] ([async version][extract_summary_sample_async])\n- Abstractive text summarization: [sample_abstract_summary.py][abstract_summary_sample] ([async version][abstract_summary_sample_async])\n\nAdvanced scenarios\n\n- Opinion Mining: [sample_analyze_sentiment_with_opinion_mining.py][opinion_mining_sample] ([async_version][opinion_mining_sample_async])\n\n### Additional documentation\n\nFor more extensive documentation on Azure Cognitive Service for Language, see the [Language Service documentation][language_product_documentation] on docs.microsoft.com.\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [cla.microsoft.com][cla].\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n\n[source_code]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/textanalytics/azure-ai-textanalytics/azure/ai/textanalytics\n[ta_pypi]: https://pypi.org/project/azure-ai-textanalytics/\n[ta_ref_docs]: https://aka.ms/azsdk-python-textanalytics-ref-docs\n[ta_samples]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/samples\n[language_product_documentation]: https://docs.microsoft.com/azure/cognitive-services/language-service\n[azure_subscription]: https://azure.microsoft.com/free/\n[ta_or_cs_resource]: https://docs.microsoft.com/azure/cognitive-services/cognitive-services-apis-create-account?tabs=multiservice%2Cwindows\n[pip]: https://pypi.org/project/pip/\n[azure_portal_create_ta_resource]: https://ms.portal.azure.com/#create/Microsoft.CognitiveServicesTextAnalytics\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_cli_create_ta_resource]: https://learn.microsoft.com/azure/cognitive-services/cognitive-services-apis-create-account-cli\n[multi_and_single_service]: https://docs.microsoft.com/azure/cognitive-services/cognitive-services-apis-create-account?tabs=multiservice%2Cwindows\n[azure_cli_endpoint_lookup]: https://docs.microsoft.com/cli/azure/cognitiveservices/account?view=azure-cli-latest#az-cognitiveservices-account-show\n[azure_portal_get_endpoint]: https://docs.microsoft.com/azure/cognitive-services/cognitive-services-apis-create-account?tabs=multiservice%2Cwindows#get-the-keys-for-your-resource\n[cognitive_authentication]: https://docs.microsoft.com/azure/cognitive-services/authentication\n[cognitive_authentication_api_key]: https://docs.microsoft.com/azure/cognitive-services/cognitive-services-apis-create-account?tabs=multiservice%2Cwindows#get-the-keys-for-your-resource\n[install_azure_identity]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity#install-the-package\n[register_aad_app]: https://docs.microsoft.com/azure/cognitive-services/authentication#assign-a-role-to-a-service-principal\n[grant_role_access]: https://docs.microsoft.com/azure/cognitive-services/authentication#assign-a-role-to-a-service-principal\n[cognitive_custom_subdomain]: https://docs.microsoft.com/azure/cognitive-services/cognitive-services-custom-subdomains\n[custom_subdomain]: https://docs.microsoft.com/azure/cognitive-services/authentication#create-a-resource-with-a-custom-subdomain\n[cognitive_authentication_aad]: https://docs.microsoft.com/azure/cognitive-services/authentication#authenticate-with-azure-active-directory\n[azure_identity_credentials]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity#credentials\n[default_azure_credential]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity#defaultazurecredential\n[service_limits]: https://aka.ms/azsdk/textanalytics/data-limits\n[azure-key-credential]: https://aka.ms/azsdk-python-core-azurekeycredential\n[document_error]: https://aka.ms/azsdk-python-textanalytics-documenterror\n[detect_language_result]: https://aka.ms/azsdk-python-textanalytics-detectlanguageresult\n[recognize_entities_result]: https://aka.ms/azsdk-python-textanalytics-recognizeentitiesresult\n[recognize_pii_entities_result]: https://aka.ms/azsdk-python-textanalytics-recognizepiientitiesresult\n[recognize_linked_entities_result]: https://aka.ms/azsdk-python-textanalytics-recognizelinkedentitiesresult\n[analyze_sentiment_result]: https://aka.ms/azsdk-python-textanalytics-analyzesentimentresult\n[extract_key_phrases_result]: https://aka.ms/azsdk-python-textanalytics-extractkeyphrasesresult\n[text_document_input]: https://aka.ms/azsdk-python-textanalytics-textdocumentinput\n[detect_language_input]: https://aka.ms/azsdk-python-textanalytics-detectlanguageinput\n[text_analytics_client]: https://aka.ms/azsdk-python-textanalytics-textanalyticsclient\n[analyze_sentiment]: https://aka.ms/azsdk-python-textanalytics-analyzesentiment\n[analyze_actions]: https://aka.ms/azsdk/python/docs/ref/textanalytics#azure.ai.textanalytics.TextAnalyticsClient.begin_analyze_actions\n[analyze_healthcare_entities]: https://aka.ms/azsdk/python/docs/ref/textanalytics#azure.ai.textanalytics.TextAnalyticsClient.begin_analyze_healthcare_entities\n[recognize_entities]: https://aka.ms/azsdk-python-textanalytics-recognizeentities\n[recognize_pii_entities]: https://aka.ms/azsdk-python-textanalytics-recognizepiientities\n[recognize_linked_entities]: https://aka.ms/azsdk-python-textanalytics-recognizelinkedentities\n[extract_key_phrases]: https://aka.ms/azsdk-python-textanalytics-extractkeyphrases\n[detect_language]: https://aka.ms/azsdk-python-textanalytics-detectlanguage\n[language_detection]: https://docs.microsoft.com/azure/cognitive-services/language-service/language-detection/overview\n[language_and_regional_support]: https://docs.microsoft.com/azure/cognitive-services/language-service/language-detection/language-support\n[sentiment_analysis]: https://docs.microsoft.com/azure/cognitive-services/language-service/sentiment-opinion-mining/overview\n[key_phrase_extraction]: https://docs.microsoft.com/azure/cognitive-services/language-service/key-phrase-extraction/overview\n[linked_entities_categories]: https://aka.ms/taner\n[linked_entity_recognition]: https://docs.microsoft.com/azure/cognitive-services/language-service/entity-linking/overview\n[pii_entity_categories]: https://aka.ms/azsdk/language/pii\n[named_entity_recognition]: https://docs.microsoft.com/azure/cognitive-services/language-service/named-entity-recognition/overview\n[named_entity_categories]: https://aka.ms/taner\n[azure_core_ref_docs]: https://aka.ms/azsdk-python-core-policies\n[azure_core]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/README.md\n[azure_identity]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity\n[python_logging]: https://docs.python.org/3/library/logging.html\n[sample_authentication]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/samples/sample_authentication.py\n[sample_authentication_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/samples/async_samples/sample_authentication_async.py\n[detect_language_sample]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/samples/sample_detect_language.py\n[detect_language_sample_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/samples/async_samples/sample_detect_language_async.py\n[analyze_sentiment_sample]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/samples/sample_analyze_sentiment.py\n[analyze_sentiment_sample_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/samples/async_samples/sample_analyze_sentiment_async.py\n[extract_key_phrases_sample]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/samples/sample_extract_key_phrases.py\n[extract_key_phrases_sample_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/samples/async_samples/sample_extract_key_phrases_async.py\n[recognize_entities_sample]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/samples/sample_recognize_entities.py\n[recognize_entities_sample_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/samples/async_samples/sample_recognize_entities_async.py\n[recognize_linked_entities_sample]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/samples/sample_recognize_linked_entities.py\n[recognize_linked_entities_sample_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/samples/async_samples/sample_recognize_linked_entities_async.py\n[recognize_pii_entities_sample]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/samples/sample_recognize_pii_entities.py\n[recognize_pii_entities_sample_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/samples/async_samples/sample_recognize_pii_entities_async.py\n[analyze_healthcare_entities_sample]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/samples/sample_analyze_healthcare_entities.py\n[analyze_healthcare_entities_sample_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/samples/async_samples/sample_analyze_healthcare_entities_async.py\n[analyze_sample]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/samples/sample_analyze_actions.py\n[analyze_sample_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/samples/async_samples/sample_analyze_actions_async.py\n[opinion_mining_sample]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/samples/sample_analyze_sentiment_with_opinion_mining.py\n[opinion_mining_sample_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/samples/async_samples/sample_analyze_sentiment_with_opinion_mining_async.py\n[recognize_custom_entities_sample]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/samples/sample_recognize_custom_entities.py\n[recognize_custom_entities_sample_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/samples/async_samples/sample_recognize_custom_entities_async.py\n[single_label_classify_sample]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/samples/sample_single_label_classify.py\n[single_label_classify_sample_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/samples/async_samples/sample_single_label_classify_async.py\n[multi_label_classify_sample]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/samples/sample_multi_label_classify.py\n[multi_label_classify_sample_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/samples/async_samples/sample_multi_label_classify_async.py\n[healthcare_action_sample]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/samples/sample_analyze_healthcare_action.py\n[extract_summary_sample]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/samples/sample_extract_summary.py\n[extract_summary_sample_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/samples/async_samples/sample_extract_summary_async.py\n[abstract_summary_sample]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/samples/sample_abstract_summary.py\n[abstract_summary_sample_async]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics/samples/async_samples/sample_abstract_summary_async.py\n[cla]: https://cla.microsoft.com\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n",
        "repo_name": "textanalytics/azure-ai-textanalytics",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/textanalytics/azure-ai-textanalytics",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Time Series Insights Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/)\nCode samples for this package can be found at [Time Series Insights Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-timeseriesinsights%2FREADME.png)\n",
        "repo_name": "timeseriesinsights/azure-mgmt-timeseriesinsights",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/timeseriesinsights/azure-mgmt-timeseriesinsights",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Traffic Manager Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n# Usage\n\n\nTo learn how to use this package, see the [quickstart guide](https://aka.ms/azsdk/python/mgmt)\n \nFor docs and references, see [Python SDK References](https://docs.microsoft.com/python/api/overview/azure/)\nCode samples for this package can be found at [Traffic Manager Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com.\nAdditional code samples for different Azure services are available at [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n# Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-trafficmanager%2FREADME.png)\n",
        "repo_name": "trafficmanager/azure-mgmt-trafficmanager",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/trafficmanager/azure-mgmt-trafficmanager",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Azure Document Translation client library for Python\n\nAzure Cognitive Services Document Translation is a cloud service that can be used to translate multiple and complex documents across languages and dialects while preserving original document structure and data format.\nUse the client library for Document Translation to:\n\n* Translate numerous, large files from an Azure Blob Storage container to a target container in your language of choice.\n* Check the translation status and progress of each document in the translation operation.\n* Apply a custom translation model or glossaries to tailor translation to your specific case.\n\n[Source code][python-dt-src]\n| [Package (PyPI)][python-dt-pypi]\n| [Package (Conda)](https://anaconda.org/microsoft/azure-ai-translation-document/)\n| [API reference documentation][python-dt-ref-docs]\n| [Product documentation][python-dt-product-docs]\n| [Samples][python-dt-samples]\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n* Python 3.7 or later is required to use this package.\n* You must have an [Azure subscription][azure_subscription] and a\n[Translator resource][DT_resource] to use this package.\n\n### Install the package\n\nInstall the Azure Document Translation client library for Python with [pip][pip]:\n\n```bash\npip install azure-ai-translation-document\n```\n\n> Note: This version of the client library defaults to the v1.0 version of the service\n\n#### Create a Translator resource\n\nThe Document Translation feature supports [single-service access][single_service] only.\nTo access the service, create a Translator resource.\n\nYou can create the resource using\n\n**Option 1:** [Azure Portal][azure_portal_create_DT_resource]\n\n**Option 2:** [Azure CLI][azure_cli_create_DT_resource].\nBelow is an example of how you can create a Translator resource using the CLI:\n\n```bash\n# Create a new resource group to hold the Translator resource -\n# if using an existing resource group, skip this step\naz group create --name my-resource-group --location westus2\n```\n\n```bash\n# Create document translation\naz cognitiveservices account create \\\n    --name document-translation-resource \\\n    --custom-domain document-translation-resource \\\n    --resource-group my-resource-group \\\n    --kind TextTranslation \\\n    --sku S1 \\\n    --location westus2 \\\n    --yes\n```\n\n### Authenticate the client\n\nIn order to interact with the Document Translation feature service, you will need to create an instance of a client.\nAn **endpoint** and **credential** are necessary to instantiate the client object.\n\n#### Looking up the endpoint\n\nYou can find the endpoint for your Translator resource using the\n[Azure Portal][azure_portal_get_endpoint].\n\n> Note that the service requires a custom domain endpoint. Follow the instructions in the above link to format your endpoint:\n> https://{NAME-OF-YOUR-RESOURCE}.cognitiveservices.azure.com/\n\n#### Get the API key\n\nThe API key can be found in the Azure Portal or by running the following Azure CLI command:\n\n```az cognitiveservices account keys list --name \"resource-name\" --resource-group \"resource-group-name\"```\n\n#### Create the client with AzureKeyCredential\n\nTo use an [API key][cognitive_authentication_api_key] as the `credential` parameter,\npass the key as a string into an instance of [AzureKeyCredential][azure-key-credential].\n\n<!-- SNIPPET:sample_authentication.create_dt_client_with_key -->\n\n```python\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.translation.document import DocumentTranslationClient\n\nendpoint = os.environ[\"AZURE_DOCUMENT_TRANSLATION_ENDPOINT\"]\nkey = os.environ[\"AZURE_DOCUMENT_TRANSLATION_KEY\"]\n\ndocument_translation_client = DocumentTranslationClient(endpoint, AzureKeyCredential(key))\n```\n\n<!-- END SNIPPET -->\n\n#### Create the client with an Azure Active Directory credential\n\n`AzureKeyCredential` authentication is used in the examples in this getting started guide, but you can also\nauthenticate with Azure Active Directory using the [azure-identity][azure_identity] library.\n\nTo use the [DefaultAzureCredential][default_azure_credential] type shown below, or other credential types provided\nwith the Azure SDK, please install the `azure-identity` package:\n\n```pip install azure-identity```\n\nYou will also need to [register a new AAD application and grant access][register_aad_app] to your\nTranslator resource by assigning the `\"Cognitive Services User\"` role to your service principal.\n\nOnce completed, set the values of the client ID, tenant ID, and client secret of the AAD application as environment variables:\n`AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\n<!-- SNIPPET:sample_authentication.create_dt_client_with_aad -->\n\n```python\n\"\"\"DefaultAzureCredential will use the values from these environment\nvariables: AZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET\n\"\"\"\nfrom azure.identity import DefaultAzureCredential\nfrom azure.ai.translation.document import DocumentTranslationClient\n\nendpoint = os.environ[\"AZURE_DOCUMENT_TRANSLATION_ENDPOINT\"]\ncredential = DefaultAzureCredential()\n\ndocument_translation_client = DocumentTranslationClient(endpoint, credential)\n```\n\n<!-- END SNIPPET -->\n\n## Key concepts\n\nThe Document Translation service requires that you upload your files to an Azure Blob Storage source container and provide\na target container where the translated documents can be written. Additional information about setting this up can be found in\nthe service documentation:\n\n- [Set up Azure Blob Storage containers][source_containers] with your documents\n- Optionally apply [glossaries][glossary] or a [custom model for translation][custom_model]\n- Allow access to your storage account with either of the following options:\n    - Generate [SAS tokens][sas_token] to your containers (or files) with the appropriate [permissions][sas_token_permissions]\n    - Create and use a [managed identity][managed_identity] to grant access to your storage account\n\n### DocumentTranslationClient\n\nInteraction with the Document Translation client library begins with an instance of the `DocumentTranslationClient`.\nThe client provides operations for:\n\n - Creating a translation operation to translate documents in your source container(s) and write results to you target container(s).\n - Checking the status of individual documents in the translation operation and monitoring each document's progress.\n - Enumerating all past and current translation operations.\n - Identifying supported glossary and document formats.\n\n### Translation Input\n\nInput to the `begin_translation` client method can be provided in two different ways:\n\n1) A single source container with documents can be translated to a different language:\n\n```python\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.translation.document import DocumentTranslationClient\n\ndocument_translation_client = DocumentTranslationClient(\"<endpoint>\", AzureKeyCredential(\"<api_key>\"))\npoller = document_translation_client.begin_translation(\"<sas_url_to_source>\", \"<sas_url_to_target>\", \"<target_language>\")\n```\n\n2) Or multiple different sources can be provided each with their own targets.\n\n<!-- SNIPPET:sample_translate_multiple_inputs.multiple_translation -->\n\n```python\nimport os\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.translation.document import (\n    DocumentTranslationClient,\n    DocumentTranslationInput,\n    TranslationTarget\n)\n\nendpoint = os.environ[\"AZURE_DOCUMENT_TRANSLATION_ENDPOINT\"]\nkey = os.environ[\"AZURE_DOCUMENT_TRANSLATION_KEY\"]\nsource_container_url_1 = os.environ[\"AZURE_SOURCE_CONTAINER_URL_1\"]\nsource_container_url_2 = os.environ[\"AZURE_SOURCE_CONTAINER_URL_2\"]\ntarget_container_url_fr = os.environ[\"AZURE_TARGET_CONTAINER_URL_FR\"]\ntarget_container_url_ar = os.environ[\"AZURE_TARGET_CONTAINER_URL_AR\"]\ntarget_container_url_es = os.environ[\"AZURE_TARGET_CONTAINER_URL_ES\"]\n\nclient = DocumentTranslationClient(endpoint, AzureKeyCredential(key))\n\npoller = client.begin_translation(inputs=[\n        DocumentTranslationInput(\n            source_url=source_container_url_1,\n            targets=[\n                TranslationTarget(\n                    target_url=target_container_url_fr,\n                    language=\"fr\"\n                ),\n                TranslationTarget(\n                    target_url=target_container_url_ar,\n                    language=\"ar\"\n                )\n            ]\n        ),\n        DocumentTranslationInput(\n            source_url=source_container_url_2,\n            targets=[\n                TranslationTarget(\n                    target_url=target_container_url_es,\n                    language=\"es\"\n                )\n            ]\n        )\n    ]\n)\nresult = poller.result()\n\nprint(f\"Status: {poller.status()}\")\nprint(f\"Created on: {poller.details.created_on}\")\nprint(f\"Last updated on: {poller.details.last_updated_on}\")\nprint(f\"Total number of translations on documents: {poller.details.documents_total_count}\")\n\nprint(\"\\nOf total documents...\")\nprint(f\"{poller.details.documents_failed_count} failed\")\nprint(f\"{poller.details.documents_succeeded_count} succeeded\")\n\nfor document in result:\n    print(f\"Document ID: {document.id}\")\n    print(f\"Document status: {document.status}\")\n    if document.status == \"Succeeded\":\n        print(f\"Source document location: {document.source_document_url}\")\n        print(f\"Translated document location: {document.translated_document_url}\")\n        print(f\"Translated to language: {document.translated_to}\\n\")\n    elif document.error:\n        print(f\"Error Code: {document.error.code}, Message: {document.error.message}\\n\")\n```\n\n<!-- END SNIPPET -->\n\n> Note: the target_url for each target language must be unique.\n\nTo translate documents under a folder, or only translate certain documents, see [sample_begin_translation_with_filters.py][sample_begin_translation_with_filters].\nSee the service documentation for all [supported languages][supported_languages].\n\n### Long-Running Operations\n\nLong-running operations are operations which consist of an initial request sent to the service to start an operation,\nfollowed by polling the service at intervals to determine whether the operation has completed or failed, and if it has\nsucceeded, to get the result.\n\nMethods that translate documents are modeled as long-running operations.\nThe client exposes a `begin_<method-name>` method that returns a `DocumentTranslationLROPoller` or `AsyncDocumentTranslationLROPoller`. Callers should wait\nfor the operation to complete by calling `result()` on the poller object returned from the `begin_<method-name>` method.\nSample code snippets are provided to illustrate using long-running operations [below](#examples \"Examples\").\n\n## Examples\n\nThe following section provides several code snippets covering some of the most common Document Translation tasks, including:\n\n* [Translate your documents](#translate-your-documents \"Translate Your Documents\")\n* [Translate multiple inputs](#translate-multiple-inputs \"Translate Multiple Inputs\")\n* [List translation operations](#list-translation-operations \"List Translation Operations\")\n\n### Translate your documents\n\nTranslate all the documents in your source container to the target container. To translate documents under a folder, or only translate certain documents, see [sample_begin_translation_with_filters.py][sample_begin_translation_with_filters].\n\n```python\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.translation.document import DocumentTranslationClient\n\nendpoint = \"https://<resource-name>.cognitiveservices.azure.com/\"\ncredential = AzureKeyCredential(\"<api_key>\")\nsource_container_sas_url_en = \"<sas-url-en>\"\ntarget_container_sas_url_es = \"<sas-url-es>\"\n\ndocument_translation_client = DocumentTranslationClient(endpoint, credential)\n\npoller = document_translation_client.begin_translation(source_container_sas_url_en, target_container_sas_url_es, \"es\")\n\nresult = poller.result()\n\nprint(f\"Status: {poller.status()}\")\nprint(f\"Created on: {poller.details.created_on}\")\nprint(f\"Last updated on: {poller.details.last_updated_on}\")\nprint(f\"Total number of translations on documents: {poller.details.documents_total_count}\")\n\nprint(\"\\nOf total documents...\")\nprint(f\"{poller.details.documents_failed_count} failed\")\nprint(f\"{poller.details.documents_succeeded_count} succeeded\")\n\nfor document in result:\n    print(f\"Document ID: {document.id}\")\n    print(f\"Document status: {document.status}\")\n    if document.status == \"Succeeded\":\n        print(f\"Source document location: {document.source_document_url}\")\n        print(f\"Translated document location: {document.translated_document_url}\")\n        print(f\"Translated to language: {document.translated_to}\\n\")\n    else:\n        print(f\"Error Code: {document.error.code}, Message: {document.error.message}\\n\")\n```\n\n### Translate multiple inputs\n\nBegin translating with documents in multiple source containers to multiple target containers in different languages.\n\n<!-- SNIPPET:sample_translate_multiple_inputs.multiple_translation -->\n\n```python\nimport os\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.translation.document import (\n    DocumentTranslationClient,\n    DocumentTranslationInput,\n    TranslationTarget\n)\n\nendpoint = os.environ[\"AZURE_DOCUMENT_TRANSLATION_ENDPOINT\"]\nkey = os.environ[\"AZURE_DOCUMENT_TRANSLATION_KEY\"]\nsource_container_url_1 = os.environ[\"AZURE_SOURCE_CONTAINER_URL_1\"]\nsource_container_url_2 = os.environ[\"AZURE_SOURCE_CONTAINER_URL_2\"]\ntarget_container_url_fr = os.environ[\"AZURE_TARGET_CONTAINER_URL_FR\"]\ntarget_container_url_ar = os.environ[\"AZURE_TARGET_CONTAINER_URL_AR\"]\ntarget_container_url_es = os.environ[\"AZURE_TARGET_CONTAINER_URL_ES\"]\n\nclient = DocumentTranslationClient(endpoint, AzureKeyCredential(key))\n\npoller = client.begin_translation(inputs=[\n        DocumentTranslationInput(\n            source_url=source_container_url_1,\n            targets=[\n                TranslationTarget(\n                    target_url=target_container_url_fr,\n                    language=\"fr\"\n                ),\n                TranslationTarget(\n                    target_url=target_container_url_ar,\n                    language=\"ar\"\n                )\n            ]\n        ),\n        DocumentTranslationInput(\n            source_url=source_container_url_2,\n            targets=[\n                TranslationTarget(\n                    target_url=target_container_url_es,\n                    language=\"es\"\n                )\n            ]\n        )\n    ]\n)\nresult = poller.result()\n\nprint(f\"Status: {poller.status()}\")\nprint(f\"Created on: {poller.details.created_on}\")\nprint(f\"Last updated on: {poller.details.last_updated_on}\")\nprint(f\"Total number of translations on documents: {poller.details.documents_total_count}\")\n\nprint(\"\\nOf total documents...\")\nprint(f\"{poller.details.documents_failed_count} failed\")\nprint(f\"{poller.details.documents_succeeded_count} succeeded\")\n\nfor document in result:\n    print(f\"Document ID: {document.id}\")\n    print(f\"Document status: {document.status}\")\n    if document.status == \"Succeeded\":\n        print(f\"Source document location: {document.source_document_url}\")\n        print(f\"Translated document location: {document.translated_document_url}\")\n        print(f\"Translated to language: {document.translated_to}\\n\")\n    elif document.error:\n        print(f\"Error Code: {document.error.code}, Message: {document.error.message}\\n\")\n```\n\n<!-- END SNIPPET -->\n\n### List translation operations\n\nEnumerate over the translation operations submitted for the resource.\n\n<!-- SNIPPET:sample_list_translations.list_translations -->\n\n```python\nfrom azure.core.credentials import AzureKeyCredential\nfrom azure.ai.translation.document import DocumentTranslationClient\n\n\nendpoint = os.environ[\"AZURE_DOCUMENT_TRANSLATION_ENDPOINT\"]\nkey = os.environ[\"AZURE_DOCUMENT_TRANSLATION_KEY\"]\n\nclient = DocumentTranslationClient(endpoint, AzureKeyCredential(key))\noperations = client.list_translation_statuses()\n\nfor operation in operations:\n    print(f\"ID: {operation.id}\")\n    print(f\"Status: {operation.status}\")\n    print(f\"Created on: {operation.created_on}\")\n    print(f\"Last updated on: {operation.last_updated_on}\")\n    print(f\"Total number of operations on documents: {operation.documents_total_count}\")\n    print(f\"Total number of characters charged: {operation.total_characters_charged}\")\n\n    print(\"\\nOf total documents...\")\n    print(f\"{operation.documents_failed_count} failed\")\n    print(f\"{operation.documents_succeeded_count} succeeded\")\n    print(f\"{operation.documents_canceled_count} canceled\\n\")\n```\n\n<!-- END SNIPPET -->\n\nTo see how to use the Document Translation client library with Azure Storage Blob to upload documents, create SAS tokens\nfor your containers, and download the finished translated documents, see this [sample][sample_translation_with_azure_blob].\nNote that you will need to install the [azure-storage-blob][azure_storage_blob] library to run this sample.\n\n## Advanced Topics\n\nThe following section provides some insights for some advanced translation features such as glossaries and custom translation models.\n\n### **Glossaries**\n\nGlossaries are domain-specific dictionaries. For example, if you want to translate some medical-related documents, you may need support for the many words, terminology, and idioms in the medical field which you can't find in the standard translation dictionary, or you simply need specific translation. This is why Document Translation provides support for glossaries.\n\n#### **How To Create Glossary File**\n\nDocument Translation supports glossaries in the following formats:\n\n|**File Type**|**Extension**|**Description**|**Samples**|\n|---------------|---------------|---------------|---------------|\n|Tab-Separated Values/TAB|.tsv, .tab|Read more on [wikipedia][tsv_files_wikipedia]|[glossary_sample.tsv][sample_tsv_file]|\n|Comma-Separated Values|.csv|Read more on [wikipedia][csv_files_wikipedia]|[glossary_sample.csv][sample_csv_file]|\n|Localization Interchange File Format|.xlf, .xliff|Read more on [wikipedia][xlf_files_wikipedia]|[glossary_sample.xlf][sample_xlf_file]|\n\nView all supported formats [here][supported_glossary_formats].\n\n#### **How Use Glossaries in Document Translation**\n\nIn order to use glossaries with Document Translation, you first need to upload your glossary file to a blob container, and then provide the SAS URL to the file as in the code samples [sample_translation_with_glossaries.py][sample_translation_with_glossaries].\n\n### **Custom Translation Models**\n\nInstead of using Document Translation's engine for translation, you can use your own custom Azure machine/deep learning model.\n\n#### **How To Create a Custom Translation Model**\n\nFor more info on how to create, provision, and deploy your own custom Azure translation model, please follow the instructions here: [Build, deploy, and use a custom model for translation][custom_translation_article]\n\n#### **How To Use a Custom Translation Model With Document Translation**\n\nIn order to use a custom translation model with Document Translation, you first \nneed to create and deploy your model, then follow the code sample [sample_translation_with_custom_model.py][sample_translation_with_custom_model] to use with Document Translation.\n\n## Troubleshooting\n\n### General\n\nDocument Translation client library will raise exceptions defined in [Azure Core][azure_core_exceptions].\n\n### Logging\n\nThis library uses the standard\n[logging][python_logging] library for logging.\n\nBasic information about HTTP sessions (URLs, headers, etc.) is logged at `INFO` level.\n\nDetailed `DEBUG` level logging, including request/response bodies and **unredacted**\nheaders, can be enabled on the client or per-operation with the `logging_enable` keyword argument.\n\nSee full SDK logging documentation with examples [here][sdk_logging_docs].\n\n### Optional Configuration\n\nOptional keyword arguments can be passed in at the client and per-operation level.\nThe azure-core [reference documentation][azure_core_ref_docs]\ndescribes available configurations for retries, logging, transport protocols, and more.\n\n## Next steps\n\nThe following section provides several code snippets illustrating common patterns used in the Document Translation Python client library.\nMore samples can be found under the [samples][samples] directory.\n\n### More sample code\n\nThese code samples show common scenario operations with the Azure Document Translation client library.\n\n* Client authentication: [sample_authentication.py][sample_authentication]\n* Begin translating documents: [sample_begin_translation.py][sample_begin_translation]\n* Translate with multiple inputs: [sample_translate_multiple_inputs.py][sample_translate_multiple_inputs]\n* Check the status of documents: [sample_check_document_statuses.py][sample_check_document_statuses]\n* List all submitted translation operations: [sample_list_translations.py][sample_list_translations]\n* Apply a custom glossary to translation: [sample_translation_with_glossaries.py][sample_translation_with_glossaries]\n* Use Azure Blob Storage to set up translation resources: [sample_translation_with_azure_blob.py][sample_translation_with_azure_blob]\n\n### Async samples\n\nThis library also includes a complete set of async APIs. To use them, you must\nfirst install an async transport, such as [aiohttp](https://pypi.org/project/aiohttp/). Async clients\nare found under the `azure.ai.translation.document.aio` namespace.\n\n* Client authentication: [sample_authentication_async.py][sample_authentication_async]\n* Begin translating documents: [sample_begin_translation_async.py][sample_begin_translation_async]\n* Translate with multiple inputs: [sample_translate_multiple_inputs_async.py][sample_translate_multiple_inputs_async]\n* Check the status of documents: [sample_check_document_statuses_async.py][sample_check_document_statuses_async]\n* List all submitted translation operations: [sample_list_translations_async.py][sample_list_translations_async]\n* Apply a custom glossary to translation: [sample_translation_with_glossaries_async.py][sample_translation_with_glossaries_async]\n* Use Azure Blob Storage to set up translation resources: [sample_translation_with_azure_blob_async.py][sample_translation_with_azure_blob_async]\n\n### Additional documentation\n\nFor more extensive documentation on Azure Cognitive Services Document Translation, see the [Document Translation documentation][python-dt-product-docs] on docs.microsoft.com.\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [cla.microsoft.com][cla].\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n\n[python-dt-src]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/translation/azure-ai-translation-document/azure/ai/translation/document\n[python-dt-pypi]: https://aka.ms/azsdk/python/texttranslation/pypi\n[python-dt-product-docs]: https://docs.microsoft.com/azure/cognitive-services/translator/document-translation/overview\n[python-dt-ref-docs]: https://aka.ms/azsdk/python/documenttranslation/docs\n[python-dt-samples]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/translation/azure-ai-translation-document/samples\n\n[azure_subscription]: https://azure.microsoft.com/free/\n[DT_resource]: https://docs.microsoft.com/azure/cognitive-services/translator/document-translation/get-started-with-document-translation?tabs=python\n[single_service]: https://docs.microsoft.com/azure/cognitive-services/cognitive-services-apis-create-account?tabs=singleservice%2Cwindows\n[pip]: https://pypi.org/project/pip/\n[azure_portal_create_DT_resource]: https://ms.portal.azure.com/#create/Microsoft.CognitiveServicesTextTranslation\n[azure_cli_create_DT_resource]: https://docs.microsoft.com/azure/cognitive-services/cognitive-services-apis-create-account-cli?tabs=windows\n[azure-key-credential]: https://aka.ms/azsdk/python/core/azurekeycredential\n[supported_languages]: https://docs.microsoft.com/azure/cognitive-services/translator/language-support#translate\n[source_containers]: https://docs.microsoft.com/azure/cognitive-services/translator/document-translation/get-started-with-document-translation?tabs=csharp#create-azure-blob-storage-containers\n[custom_model]: https://docs.microsoft.com/azure/cognitive-services/translator/custom-translator/quickstart-build-deploy-custom-model\n[glossary]: https://docs.microsoft.com/azure/cognitive-services/translator/document-translation/overview#supported-glossary-formats\n[sas_token]: https://docs.microsoft.com/azure/cognitive-services/translator/document-translation/create-sas-tokens?tabs=Containers#create-your-sas-tokens-with-azure-storage-explorer\n[sas_token_permissions]: https://aka.ms/azsdk/documenttranslation/sas-permissions\n[azure_storage_blob]: https://pypi.org/project/azure-storage-blob/\n\n[azure_core_ref_docs]: https://aka.ms/azsdk/python/core/docs\n[azure_core_exceptions]: https://aka.ms/azsdk/python/core/docs#module-azure.core.exceptions\n[python_logging]: https://docs.python.org/3/library/logging.html\n[azure_cli_endpoint_lookup]: https://docs.microsoft.com/cli/azure/cognitiveservices/account?view=azure-cli-latest#az-cognitiveservices-account-show\n[azure_portal_get_endpoint]: https://docs.microsoft.com/azure/cognitive-services/translator/document-translation/get-started-with-document-translation?tabs=csharp#get-your-custom-domain-name-and-subscription-key\n[cognitive_authentication_api_key]: https://docs.microsoft.com/azure/cognitive-services/translator/document-translation/get-started-with-document-translation?tabs=csharp#get-your-subscription-key\n[register_aad_app]: https://docs.microsoft.com/azure/cognitive-services/authentication?tabs=powershell#authenticate-with-azure-active-directory\n[custom_subdomain]: https://docs.microsoft.com/azure/cognitive-services/authentication#create-a-resource-with-a-custom-subdomain\n[azure_identity]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity\n[default_azure_credential]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity#defaultazurecredential\n[managed_identity]: https://aka.ms/azsdk/documenttranslation/managed-identity\n[sdk_logging_docs]: https://docs.microsoft.com/azure/developer/python/sdk/azure-sdk-logging\n\n[samples]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/translation/azure-ai-translation-document/samples\n[sample_authentication]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/translation/azure-ai-translation-document/samples/sample_authentication.py\n[sample_authentication_async]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/translation/azure-ai-translation-document/samples/async_samples/sample_authentication_async.py\n[sample_begin_translation]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/translation/azure-ai-translation-document/samples/sample_begin_translation.py\n[sample_begin_translation_async]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/translation/azure-ai-translation-document/samples/async_samples/sample_begin_translation_async.py\n[sample_translate_multiple_inputs]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/translation/azure-ai-translation-document/samples/sample_translate_multiple_inputs.py\n[sample_translate_multiple_inputs_async]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/translation/azure-ai-translation-document/samples/async_samples/sample_translate_multiple_inputs_async.py\n[sample_check_document_statuses]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/translation/azure-ai-translation-document/samples/sample_check_document_statuses.py\n[sample_check_document_statuses_async]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/translation/azure-ai-translation-document/samples/async_samples/sample_check_document_statuses_async.py\n[sample_list_translations]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/translation/azure-ai-translation-document/samples/sample_list_translations.py\n[sample_list_translations_async]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/translation/azure-ai-translation-document/samples/async_samples/sample_list_translations_async.py\n[sample_translation_with_glossaries]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/translation/azure-ai-translation-document/samples/sample_translation_with_glossaries.py\n[sample_translation_with_glossaries_async]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/translation/azure-ai-translation-document/samples/async_samples/sample_translation_with_glossaries_async.py\n[sample_translation_with_azure_blob]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/translation/azure-ai-translation-document/samples/sample_translation_with_azure_blob.py\n[sample_translation_with_azure_blob_async]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/translation/azure-ai-translation-document/samples/async_samples/sample_translation_with_azure_blob_async.py\n[sample_translation_with_custom_model]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/translation/azure-ai-translation-document/samples/sample_translation_with_custom_model.py\n[sample_translation_with_custom_model_async]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/translation/azure-ai-translation-document/samples/async_samples/sample_translation_with_custom_model_async.py\n[sample_begin_translation_with_filters]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/translation/azure-ai-translation-document/samples/sample_begin_translation_with_filters.py\n\n[supported_glossary_formats]: https://docs.microsoft.com/azure/cognitive-services/translator/document-translation/overview#supported-glossary-formats\n[custom_translation_article]: https://docs.microsoft.com/azure/cognitive-services/translator/custom-translator/quickstart-build-deploy-custom-model\n[tsv_files_wikipedia]: https://wikipedia.org/wiki/Tab-separated_values\n[xlf_files_wikipedia]: https://wikipedia.org/wiki/XLIFF\n[csv_files_wikipedia]: https://wikipedia.org/wiki/Comma-separated_values\n[sample_tsv_file]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/translation/azure-ai-translation-document/samples/assets/glossary_sample.tsv\n[sample_csv_file]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/translation/azure-ai-translation-document/samples/assets/glossary_sample.csv\n[sample_xlf_file]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/translation/azure-ai-translation-document/samples/assets/glossary_sample.xlf\n\n[cla]: https://cla.microsoft.com\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n",
        "repo_name": "translation/azure-ai-translation-document",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/translation/azure-ai-translation-document",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Azure Text Translation client library for Python\n\nText Translation is a cloud-based REST API feature of the Translator service that uses neural machine translation technology to enable quick and accurate source-to-target text translation in real time across all supported languages.\n\nUse the Text Translation client library for Python to:\n\n* Return a list of languages supported by Translate, Transliterate, and Dictionary operations.\n\n* Render single source-language text to multiple target-language texts with a single request.\n\n* Convert text of a source language in letters of a different script.\n\n* Return equivalent words for the source term in the target language.\n\n* Return grammatical structure and context examples for the source term and target term pair.\n\n[Source code][python-dt-src]\n| [Package (PyPI)][python-dt-pypi]\n| [API reference documentation][python-dt-ref-docs]\n| [Product documentation][python-dt-product-docs]\n| [Samples][python-dt-samples]\n\n## Getting started\n\n### Prerequisites\n\n* Python 3.7 or later is required to use this package.\n* An existing Translator service or Cognitive Services resource.\n\n### Install the package\n\nInstall the Azure Text Translation client library for Python with [pip][pip]:\n\n```bash\npip install azure-ai-translation-text\n```\n\n#### Create a Translator service resource\n\nYou can create Translator resource following [Create a Translator resource][translator_resource_create].\n\n### Authenticate the client\n\nInteraction with the service using the client library begins with creating an instance of the [TextTranslationClient][translator_client_class] class. You will need an **API key** or ``TokenCredential`` to instantiate a client object. For more information regarding authenticating with cognitive services, see [Authenticate requests to Translator Service][translator_auth].\n\n#### Get an API key\n\nYou can get the `endpoint`, `API key` and `Region` from the Cognitive Services resource or Translator service resource information in the [Azure Portal][azure_portal].\n\nAlternatively, use the [Azure CLI][azure_cli] snippet below to get the API key from the Translator service resource.\n\n```PowerShell\naz cognitiveservices account keys list --resource-group <your-resource-group-name> --name <your-resource-name>\n```\n\n#### Create a `TextTranslationClient` using an API key and Region credential\n\nOnce you have the value for the API key and Region, create an `TranslatorCredential`. This will allow you to\nupdate the API key without creating a new client.\n\nWith the value of the endpoint, `TranslatorCredential` and a `Region`, you can create the [TextTranslationClient][translator_client_class]:\n\n```Python\ntext_translator = TextTranslationClient(credential = TranslatorCredential(\"<apiKey>\", \"<apiRegion>\"));\n```\n\n## Key concepts\n\n### `TextTranslationClient`\n\nA `TextTranslationClient` is the primary interface for developers using the Text Translation client library.  It provides both synchronous and asynchronous operations to access a specific use of text translator, such as get supported languages detection or text translation.\n\n### Input\n\nA **text element** (`string`), is a single unit of input to be processed by the translation models in the Translator service. Operations on `TextTranslationClient` may take a single text element or a collection of text elements.\nFor text element length limits, maximum requests size, and supported text encoding see [here][translator_limits].\n\n## Examples\n\nThe following section provides several code snippets using the `client` [created above](#create-a-texttranslationclient-using-an-api-key-and-region-credential), and covers the main features present in this client library. Although most of the snippets below make use of synchronous service calls, keep in mind that the Text Translation for Python library package supports both synchronous and asynchronous APIs.\n\n### Get Supported Languages\n\nGets the set of languages currently supported by other operations of the Translator.\n\n```python\ntry:\n    response = text_translator.get_languages()\n\n    print(f\"Number of supported languages for translate operation: {len(response.translation) if response.translation is not None else 0}\")\n    print(f\"Number of supported languages for transliterate operation: {len(response.transliteration) if response.transliteration is not None else 0}\")\n    print(f\"Number of supported languages for dictionary operations: {len(response.dictionary) if response.dictionary is not None else 0}\")\n\n    if response.translation is not None:\n        print(\"Translation Languages:\")\n        for key, value in response.translation.items():\n            print(f\"{key} -- name: {value.name} ({value.native_name})\")\n\n    if response.transliteration is not None:\n        print(\"Transliteration Languages:\")\n        for key, value in response.transliteration.items():\n            print(f\"{key} -- name: {value.name}, supported script count: {len(value.scripts)}\")\n\n    if response.dictionary is not None:\n        print(\"Dictionary Languages:\")\n        for key, value in response.dictionary.items():\n            print(f\"{key} -- name: {value.name}, supported target languages count: {len(value.translations)}\")\n\nexcept HttpResponseError as exception:\n    print(f\"Error Code: {exception.error.code}\")\n    print(f\"Message: {exception.error.message}\")\n```\n\nFor samples on using the `languages` endpoint refer to more samples [here][languages_sample].\n\nPlease refer to the service documentation for a conceptual discussion of [languages][languages_doc].\n\n### Translate\n\nRenders single source-language text to multiple target-language texts with a single request.\n\n```python\ntry:\n    source_language = \"en\"\n    target_languages = [\"cs\"]\n    input_text_elements = [ InputTextItem(text = \"This is a test\") ]\n\n    response = text_translator.translate(content = input_text_elements, to = target_languages, from_parameter = source_language)\n    translation = response[0] if response else None\n\n    if translation:\n        for translated_text in translation.translations:\n            print(f\"Text was translated to: '{translated_text.to}' and the result is: '{translated_text.text}'.\")\n\nexcept HttpResponseError as exception:\n    print(f\"Error Code: {exception.error.code}\")\n    print(f\"Message: {exception.error.message}\")\n```\n\nFor samples on using the `translate` endpoint refer to more samples [here][translate_sample].\n\nPlease refer to the service documentation for a conceptual discussion of [translate][translate_doc].\n\n### Transliterate\n\nConverts characters or letters of a source language to the corresponding characters or letters of a target language.\n\n```python\ntry:\n    language = \"zh-Hans\"\n    from_script = \"Hans\"\n    to_script = \"Latn\"\n    input_text_elements = [ InputTextItem(text = \"\u8fd9\u662f\u4e2a\u6d4b\u8bd5\u3002\") ]\n\n    response = text_translator.transliterate(content = input_text_elements, language = language, from_script = from_script, to_script = to_script)\n    transliteration = response[0] if response else None\n\n    if transliteration:\n        print(f\"Input text was transliterated to '{transliteration.script}' script. Transliterated text: '{transliteration.text}'.\")\n\nexcept HttpResponseError as exception:\n    print(f\"Error Code: {exception.error.code}\")\n    print(f\"Message: {exception.error.message}\")\n```\n\nFor samples on using the `transliterate` endpoint refer to more samples [here][transliterate_sample].\n\nPlease refer to the service documentation for a conceptual discussion of [transliterate][transliterate_doc].\n\n### Break Sentence\n\nIdentifies the positioning of sentence boundaries in a piece of text.\n\n```python\ntry:\n    source_language = \"zh-Hans\"\n    source_script = \"Latn\"\n    input_text_elements = [ InputTextItem(text = \"zh\u00e8 sh\u00ec g\u00e8 c\u00e8 sh\u00ec\u3002\") ]\n\n    response = text_translator.find_sentence_boundaries(content = input_text_elements, language = source_language, script = source_script)\n    sentence_boundaries = response[0] if response else None\n\n    if sentence_boundaries:\n        detected_language = sentence_boundaries.detected_language\n        if detected_language:\n            print(f\"Detected languages of the input text: {detected_language.language} with score: {detected_language.score}.\")\n        print(f\"The detected sentence boundaries:\")\n        for boundary in sentence_boundaries.sent_len:\n            print(boundary)\n\nexcept HttpResponseError as exception:\n    print(f\"Error Code: {exception.error.code}\")\n    print(f\"Message: {exception.error.message}\")\n```\n\nFor samples on using the `break sentence` endpoint refer to more samples [here][breaksentence_sample].\n\nPlease refer to the service documentation for a conceptual discussion of [break sentence][breaksentence_doc].\n\n### Dictionary Lookup\n\nReturns equivalent words for the source term in the target language.\n\n```python\ntry:\n    source_language = \"en\"\n    target_language = \"es\"\n    input_text_elements = [ InputTextItem(text = \"fly\") ]\n\n    response = text_translator.lookup_dictionary_entries(content = input_text_elements, from_parameter = source_language, to = target_language)\n    dictionary_entry = response[0] if response else None\n\n    if dictionary_entry:\n        print(f\"For the given input {len(dictionary_entry.translations)} entries were found in the dictionary.\")\n        print(f\"First entry: '{dictionary_entry.translations[0].display_target}', confidence: {dictionary_entry.translations[0].confidence}.\")\n\nexcept HttpResponseError as exception:\n    print(f\"Error Code: {exception.error.code}\")\n    print(f\"Message: {exception.error.message}\")\n```\n\nFor samples on using the `dictionary lookup` endpoint refer to more samples [here][dictionarylookup_sample].\n\nPlease refer to the service documentation for a conceptual discussion of [dictionary lookup][dictionarylookup_doc].\n\n### Dictionary Examples\n\nReturns grammatical structure and context examples for the source term and target term pair.\n\n```python\nfrom azure.ai.translation.text.models import DictionaryExampleTextItem\n\ntry:\n    source_language = \"en\"\n    target_language = \"es\"\n    input_text_elements = [ DictionaryExampleTextItem(text = \"fly\", translation = \"volar\") ]\n\n    response = text_translator.lookup_dictionary_examples(content = input_text_elements, from_parameter = source_language, to = target_language)\n    dictionary_entry = response[0] if response else None\n\n    if dictionary_entry:\n        print(f\"For the given input {len(dictionary_entry.examples)} entries were found in the dictionary.\")\n        print(f\"First example: '{dictionary_entry.examples[0].target_prefix}{dictionary_entry.examples[0].target_term}{dictionary_entry.examples[0].target_suffix}'.\")\n\nexcept HttpResponseError as exception:\n    print(f\"Error Code: {exception.error.code}\")\n    print(f\"Message: {exception.error.message}\")\n```\n\nFor samples on using the `dictionary examples` endpoint refer to more samples [here][dictionaryexamples_sample].\n\nPlease refer to the service documentation for a conceptual discussion of [dictionary examples][dictionaryexamples_doc].\n\n## Troubleshooting\n\nWhen you interact with the Translator Service using the TextTranslator client library, errors returned by the Translator service correspond to the same HTTP status codes returned for REST API requests.\n\nFor example, if you submit a translation request without a target translate language, a `400` error is returned, indicating \"Bad Request\".\n\nYou can find the different error codes returned by the service in the [Service Documentation][service_errors].\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project.\n\n## Next steps\n\nMore samples can be found under the [samples][samples] directory.\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [cla.microsoft.com][cla].\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n\n[python-dt-src]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/translation/azure-ai-translation-text/azure/ai/translation/text\n[python-dt-pypi]: https://aka.ms/azsdk/python/texttranslation/pypi\n[python-dt-product-docs]: https://learn.microsoft.com/azure/cognitive-services/translator/\n[python-dt-ref-docs]: https://learn.microsoft.com/azure/cognitive-services/translator/reference/v3-0-reference\n[python-dt-samples]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/translation/azure-ai-translation-text/samples\n\n[pip]: https://pypi.org/project/pip/\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_portal]: https://portal.azure.com\n\n[translator_resource_create]: https://learn.microsoft.com/azure/cognitive-services/Translator/create-translator-resource\n\n[translator_client_class]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/translation/azure-ai-translation-text/azure/ai/translation/text/_client.py\n\n[translator_auth]: https://learn.microsoft.com/azure/cognitive-services/translator/reference/v3-0-reference#authentication\n[translator_limits]: https://learn.microsoft.com/azure/cognitive-services/translator/request-limits\n[service_errors]: https://learn.microsoft.com/azure/cognitive-services/translator/reference/v3-0-reference#errors\n\n[languages_doc]: https://learn.microsoft.com/azure/cognitive-services/translator/reference/v3-0-languages\n[translate_doc]: https://learn.microsoft.com/azure/cognitive-services/translator/reference/v3-0-translate\n[transliterate_doc]: https://learn.microsoft.com/azure/cognitive-services/translator/reference/v3-0-transliterate\n[breaksentence_doc]: https://learn.microsoft.com/azure/cognitive-services/translator/reference/v3-0-break-sentence\n[dictionarylookup_doc]: https://learn.microsoft.com/azure/cognitive-services/translator/reference/v3-0-dictionary-lookup\n[dictionaryexamples_doc]: https://learn.microsoft.com/azure/cognitive-services/translator/reference/v3-0-dictionary-examples\n\n[languages_sample]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/translation/azure-ai-translation-text/samples/Sample1_GetLanguages.md\n[translate_sample]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/translation/azure-ai-translation-text/samples/Sample2_Translate.md\n[transliterate_sample]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/translation/azure-ai-translation-text/samples/Sample3_Transliterate.md\n[breaksentence_sample]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/translation/azure-ai-translation-text/samples/Sample4_BreakSentence.md\n[dictionarylookup_sample]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/translation/azure-ai-translation-text/samples/Sample5_DictionaryLookup.md\n[dictionaryexamples_sample]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/translation/azure-ai-translation-text/samples/Sample6_DictionaryExamples.md\n\n[samples]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/translation/azure-ai-translation-text/samples\n\n[cla]: https://cla.microsoft.com\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n",
        "repo_name": "translation/azure-ai-translation-text",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/translation/azure-ai-translation-text",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Azure Video Analyzer Edge client library for Python\n\nDeprecated. We\u2019re retiring the Azure Video Analyzer preview service, you're advised to transition your applications off of Video Analyzer by 01 December 2022. This SDK is not longer maintained.\n\nAzure Video Analyzer is an [Azure Applied AI Service][applied-ai-service] that provides a platform for you to build intelligent video applications that can span both edge and cloud infrastructures. The platform offers the capability to capture, record, and analyze live video along with publishing the results, video and video analytics, to Azure services at the edge or in the cloud. It is designed to be an extensible platform, enabling you to connect different video inferencing edge modules such as Cognitive services modules, or custom inferencing modules that have been trained with your own data using either open-source machine learning or [Azure Machine Learning][machine-learning].\n\nUse the client library for Video Analyzer Edge to:\n\n- Simplify interactions with the [Microsoft Azure IoT SDKs](https://github.com/azure/azure-iot-sdks)\n- Programmatically construct pipeline topologies and live pipelines\n\n[Package (PyPI)][package] | [Product documentation][doc_product] | [Direct methods][doc_direct_methods] | [Archived MS Docs][doc_pipelines] | [Source code][source] | [Samples][samples]\n\n## Getting started\n\n### Install the package\n\nInstall the Video Analyzer Edge client library for Python with pip:\n\n```bash\npip install azure-media-videoanalyzer-edge\n```\n\n### Prerequisites\n\n- 3.6 or later is required to use this package.\n- You need an active [Azure subscription][azure_sub], and a IoT device connection string to use this package.\n- To interact with Azure IoT Hub you will need to run `pip install azure-iot-hub`\n- You will need to use the version of the SDK that corresponds to the version of the Video Analyzer Edge module you are using.\n\n    | SDK  | Video Analyzer edge module  |\n    |---|---|\n    | 1.0.0b3  | 1.1  |\n    | 1.0.0b2  | 1.0  |\n    | 1.0.0b1  | 1.0  |\n\n### Creating a pipeline topology and making requests\n\nPlease visit the [Examples](#examples) for starter code.\n\n## Key concepts\n\n### Pipeline topology vs live pipeline\n\nA _pipeline topology_ is a blueprint or template for creating live pipelines. It defines the parameters of the pipeline using placeholders as values for them. A _live pipeline_ references a pipeline topology and specifies the parameters. This way you are able to have multiple live pipelines referencing the same topology but with different values for parameters. For more information please visit [pipeline topologies and live pipelines][doc_pipelines].\n\n### CloudToDeviceMethod\n\nThe `CloudToDeviceMethod` is part of the [azure-iot-hub SDk][iot-hub-sdk]. This method allows you to communicate one way notifications to a device in your IoT hub. In our case, we want to communicate various direct methods such as `PipelineTopologySetRequest` and `PipelineTopologyGetRequest`. To use `CloudToDeviceMethod` you need to pass in two parameters: `method_name` and `payload`.\n\nThe first parameter, `method_name`, is the name of the direct method request you are sending. Make sure to use each method's predefined `method_name` property. For example, `PipelineTopologySetRequest.method_name`.\n\nThe second parameter, `payload`, sends the entire serialization of the pipeline topology request. For example, `PipelineTopologySetRequest.serialize()`\n\n## Examples\n\n### Creating a pipeline topology\n\nTo create a pipeline topology you need to define sources and sinks.\n\n```python\n#Parameters\nuser_name_param = ParameterDeclaration(name=\"rtspUserName\",type=\"String\",default=\"testusername\")\npassword_param = ParameterDeclaration(name=\"rtspPassword\",type=\"SecretString\",default=\"testpassword\")\nurl_param = ParameterDeclaration(name=\"rtspUrl\",type=\"String\",default=\"rtsp://www.sample.com\")\n\n#Source and Sink\nsource = RtspSource(name=\"rtspSource\", endpoint=UnsecuredEndpoint(url=\"${rtspUrl}\",credentials=UsernamePasswordCredentials(username=\"${rtspUserName}\",password=\"${rtspPassword}\")))\nnode = NodeInput(node_name=\"rtspSource\")\nsink = VideoSink(name=\"videoSink\", inputs=[node], video_name=\"video\", local_media_cache_path=\"/var/lib/videoanalyzer/tmp/\", local_media_cache_maximum_size_mi_b=\"1024\");\n    \npipeline_topology_properties = PipelineTopologyProperties()\npipeline_topology_properties.parameters = [user_name_param, password_param, url_param]\npipeline_topology_properties.sources = [source]\npipeline_topology_properties.sinks = [sink]\npipeline_topology = PipelineTopology(name=pipeline_topology_name,properties=pipeline_topology_properties)\n\n```\n\n### Creating a live pipeline\n\nTo create a live pipeline, you need to have an existing pipeline topology.\n\n```python\nurl_param = ParameterDefinition(name=\"rtspUrl\", value=pipeline_url)\npass_param = ParameterDefinition(name=\"rtspPassword\", value=\"secret_password\")\nlive_pipeline_properties = LivePipelineProperties(description=\"Sample pipeline description\", topology_name=pipeline_topology_name, parameters=[url_param])\n\nlive_pipeline = LivePipeline(name=live_pipeline_name, properties=live_pipeline_properties)\n\n```\n\n### Invoking a direct method\n\nTo invoke a direct method on your device you need to first define the request using the Video Analyzer Edge SDK, then send that method request using the IoT SDK's `CloudToDeviceMethod`.\n\n```python\nset_method_request = PipelineTopologySetRequest(pipeline_topology=pipeline_topology)\ndirect_method = CloudToDeviceMethod(method_name=set_method_request.method_name, payload=set_method_request.serialize())\nregistry_manager = IoTHubRegistryManager(connection_string)\n\nregistry_manager.invoke_device_module_method(device_id, module_d, direct_method)\n```\n\nTo try different pipeline topologies with the SDK, please see the official [Samples][samples].\n\n## Troubleshooting\n\n- When sending a method request using the IoT Hub's `CloudToDeviceMethod` remember to not type in the method request name directly. Instead use `[MethodRequestName.method_name]`\n- Make sure to serialize the entire method request before passing it to `CloudToDeviceMethod`\n\n## Next steps\n\n- [Samples][samples]\n- [Azure IoT Device SDK][iot-device-sdk]\n- [Azure IoTHub Service SDK][iot-hub-sdk]\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require\nyou to agree to a Contributor License Agreement (CLA) declaring that you have\nthe right to, and actually do, grant us the rights to use your contribution.\nFor details, visit https://cla.microsoft.com.\n\nIf you encounter any issues, please open an issue on our [Github][github-page-issues].\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether\nyou need to provide a CLA and decorate the PR appropriately (e.g., label,\ncomment). Simply follow the instructions provided by the bot. You will only\nneed to do this once across all repos using our CLA.\n\nThis project has adopted the\n[Microsoft Open Source Code of Conduct][code_of_conduct]. For more information,\nsee the Code of Conduct FAQ or contact opencode@microsoft.com with any\nadditional questions or comments.\n\n<!-- LINKS -->\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n\n[cla]: https://cla.microsoft.com\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n[doc_pipelines]: https://github.com/MicrosoftDocs/azure-docs/blob/4ba87bedc7b17a32903c99afb3ca4163be0dcc90/articles/azure-video-analyzer/video-analyzer-docs/overview.md\n[package]: https://aka.ms/ava/sdk/client/python\n[source]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/videoanalyzer\n[samples]: https://go.microsoft.com/fwlink/?linkid=2162278\n[doc_product]: https://github.com/MicrosoftDocs/azure-docs/blob/4ba87bedc7b17a32903c99afb3ca4163be0dcc90/articles/azure-video-analyzer/video-analyzer-docs/overview.md\n[doc_direct_methods]: https://github.com/MicrosoftDocs/azure-docs/blob/4ba87bedc7b17a32903c99afb3ca4163be0dcc90/articles/azure-video-analyzer/video-analyzer-docs/overview.md\n[iot-device-sdk]: https://pypi.org/project/azure-iot-device/\n[iot-hub-sdk]: https://pypi.org/project/azure-iot-hub/\n[github-page-issues]: https://github.com/Azure/azure-sdk-for-python/issues\n[applied-ai-service]: https://azure.microsoft.com/product-categories/applied-ai-services/#services\n[machine-learning]: https://azure.microsoft.com/services/machine-learning\n",
        "repo_name": "videoanalyzer/azure-media-videoanalyzer-edge",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/videoanalyzer/azure-media-videoanalyzer-edge",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\n We\u2019re retiring the Azure Video Analyzer preview service; you're advised to transition your applications off of Video Analyzer by 01 December 2022. This SDK is no longer maintained and won\u2019t work after the service is retired. To learn how to transition off, please refer to: [Transition from Azure Video Analyzer - Azure Video Analyzer | Archived Microsoft Docs](https://github.com/MicrosoftDocs/azure-docs/blob/4ba87bedc7b17a32903c99afb3ca4163be0dcc90/articles/azure-video-analyzer/video-analyzer-docs/transition-from-video-analyzer.md)\n\nThe complete list of available packages can be found at: https://aka.ms/azsdk/python/all\n",
        "repo_name": "videoanalyzer/azure-mgmt-videoanalyzer",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/videoanalyzer/azure-mgmt-videoanalyzer",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Voiceservices Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-voiceservices\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.voiceservices import VoiceServicesMgmtClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = VoiceServicesMgmtClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\nCode samples for this package can be found at:\n- [Search Voiceservices Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com\n- [Azure Python Mgmt SDK Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-voiceservices%2FREADME.png)\n",
        "repo_name": "voiceservices/azure-mgmt-voiceservices",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/voiceservices/azure-mgmt-voiceservices",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Azure Web PubSub client library for Python\n\n[Azure Web PubSub](https://aka.ms/awps/doc) is a cloud service that helps developers easily build real-time features in web applications with publish-subscribe patterns at scale.\n\nAny scenario that requires real-time messaging between server and clients or among clients following publish-subscribe patterns can benefit from using Web PubSub. Developers no longer need to poll the server by sending repeated HTTP requests at intervals, which is wasteful and hard-to-scale.\n\nAs shown in the diagram below, your clients establish WebSocket connections with your Web PubSub resource. This client library:\n\n- simplifies managing client connections\n- simplifies sending messages among clients\n- automatically retries after unintended drops of client connection\n- reliably deliveries messages in number and in order after recovering from connection drops\n\n![overflow](https://user-images.githubusercontent.com/668244/140014067-25a00959-04dc-47e8-ac25-6957bd0a71ce.png)\n\nDetails about the terms used here are described in [key concepts](#key-concepts) section.\n\n_This library is hosted on [pypi][pypi]._\n\n## Getting started\n\n### Currently supported environments\n\n- [Python 3.7+](https://www.python.org/downloads/)\n\n### Prerequisites\n\n- An [Azure subscription][azure_sub].\n- A [Web PubSub resource][create_instance]\n\n### 1. Install the `azure-messaging-webpubsubclient` package\n\n```bash\npip install azure-messaging-webpubsubclient\n```\n\n### 2. Connect with your Web PubSub resource\n\nA client uses a Client Access URL to connect and authenticate with the service, which follows a pattern of `wss://<service_name>.webpubsub.azure.com/client/hubs/<hub_name>?access_token=<token>`. A client can have a few ways to obtain the Client Access URL. For this quick start, you can copy and paste one from Azure Portal shown below.\n\n![get_client_url](https://learn.microsoft.com/azure/azure-web-pubsub/media/howto-websocket-connect/generate-client-url.png)\n\nAs shown in the diagram above, the client has the permissions to send messages to and join a specific group named \"_group1_\". \n\n```python\nfrom azure.messaging.webpubsubclient import WebPubSubClient\n\nclient = WebPubSubClient(\"<<client-access-url>>\")\nwith client:\n    # The client can join/leave groups, send/receive messages to and from those groups all in real-time\n    ...\n```\n\n### 3. Join groups\n\nNote that a client can only receive messages from groups that it has joined and you need to add a callback to specify the logic when receiving messages.\n\n```python\n# ...continues the code snippet from above\n\n# Registers a listener for the event 'group-message' early before joining a group to not miss messages\ngroup_name = \"group1\";\nclient.on(\"group-message\", lambda e: print(f\"Received message: {e.data}\"));\n\n# A client needs to join the group it wishes to receive messages from\nclient.join_group(groupName);\n```\n\n### 4. Send messages to a group\n\n```python\n# ...continues the code snippet from above\n\n# Send a message to a joined group\nclient.send_to_group(group_name, \"hello world\", \"text\");\n\n# In the Console tab of your developer tools found in your browser, you should see the message printed there.\n```\n\n---\n## Examples\n### Add callbacks for connected, disconnected and stopped events\n#### \n1. When a client is successfully connected to your Web PubSub resource, the `connected` event is triggered.\n\n```python\nclient.on(\"connected\", lambda e: print(f\"Connection {e.connection_id} is connected\"))\n```\n\n2. When a client is disconnected and fails to recover the connection, the `disconnected` event is triggered.\n\n```python\nclient.on(\"disconnected\", lambda e: print(f\"Connection disconnected: {e.message}\"))\n```\n\n3. The `stopped` event will be triggered when the client is disconnected *and* the client stops trying to reconnect. This usually happens after the `client.stop()` is called, or `auto_reconnect` is disabled or a specified limit to trying to reconnect has reached. If you want to restart the client, you can call `client.start()` in the stopped event.\n\n```python\nclient.on(\"stopped\", lambda : print(\"Client has stopped\"))\n```\n\n---\n### A client consumes messages from the application server or joined groups\n\nA client can add callbacks to consume messages from your application server or groups. Please note, for `group-message` event the client can _only_ receive group messages that it has joined.\n\n```python\n# Registers a listener for the \"server-message\". The callback will be invoked when your application server sends message to the connectionID, to or broadcast to all connections.\nclient.on(\"server-message\", lambda e: print(f\"Received message {e.data}\"))\n\n# Registers a listener for the \"group-message\". The callback will be invoked when the client receives a message from the groups it has joined.\nclient.on(\"group-message\", lambda e: print(f\"Received message from {e.group}: {e.data}\"))\n```\n\n---\n### Handle rejoin failure\nWhen a client is disconnected and fails to recover, all group contexts will be cleaned up in your Web PubSub resource. This means when the client reconnects, it needs to rejoin groups. By default, the client has `auto_rejoin_groups` option enabled. \n\nHowever, you should be aware of `auto_rejoin_groups`'s limitations. \n- The client can only rejoin groups that it's originally joined by the client code _not_ by the server side code. \n- \"rejoin group\" operations may fail due to various reasons, e.g. the client doesn't have permission to join the groups. In such cases, you need to add a callback to handle this failure.\n\n```python\n# By default auto_rejoin_groups=True. You can disable it by setting to False.\nclient = WebPubSubClient(\"<client-access-url>\", auto_rejoin_groups=True);\n\n# Registers a listener to handle \"rejoin-group-failed\" event\nclient.on(\"rejoin-group-failed\", lambda e: print(f\"Rejoin group {e.group} failed: {e.error}\"))\n```\n\n---\n### Operation and retry\n\nBy default, the operation such as `client.join_group()`, `client.leave_group()`, `client.send_to_group()`, `client.send_event()` has three retries. You can configure through the key-word arguments. If all retries have failed, an error will be thrown. You can keep retrying by passing in the same `ack_id` as previous retries so that the Web PubSub service can deduplicate the operation.\n\n```python\ntry:\n  client.join_group(group_name)\nexcept SendMessageError as e:\n  client.join_group(group_name, ack_id=e.ack_id)\n```\n\n---\n### Specify subprotocol\n\nYou can change the subprotocol to be used by the client. By default, the client uses `json.reliable.webpubsub.azure.v1`. You can choose to use `json.reliable.webpubsub.azure.v1` or `json.webpubsub.azure.v1`.\n\n```python\nfrom azure.messaging.webpubsubclient.models import WebPubSubProtocolType\n# Change to use json.webpubsub.azure.v1\nconst client = new WebPubSubClient(\"<client-access-url>\", protocol_type=WebPubSubProtocolType.JSON);\n```\n\n```python\nfrom azure.messaging.webpubsubclient.models import WebPubSubProtocolType\n# Change to use json.reliable.webpubsub.azure.v1\nconst client = new WebPubSubClient(\"<client-access-url>\", protocol_type=WebPubSubProtocolType.JSON_RELIABLE);\n```\n\n---\n## Key concepts\n\n### Connection\n\nA connection, also known as a client or a client connection, represents an individual WebSocket connection connected to the Web PubSub. When successfully connected, a unique connection ID is assigned to this connection by the Web PubSub. Each `WebPubSubClient` creates its own exclusive connection.\n\n### Recovery\n\nIf a client using reliable protocols disconnects, a new WebSocket tries to establish using the connection ID of the lost connection. If the new WebSocket connection is successfully connected, the connection is recovered. Throughout the time a client is disconnected, the service retains the client's context as well as all messages that the client was subscribed to, and when the client recovers, the service will send these messages to the client. If the service returns WebSocket error code `1008` or the recovery attempt lasts more than 30 seconds, the recovery fails.\n\n### Reconnect\n\nReconnection happens when the client connection drops and fails to recover. Reconnection starts a new connection and the new connection has a new connection ID. Unlike recovery, the service treats the reconnected client as a new client connection. The client connection needs to rejoin groups. By default, the client library rejoins groups after reconnection.\n\n### Hub\n\nA hub is a logical concept for a set of client connections. Usually, you use one hub for one purpose, for example, a chat hub, or a notification hub. When a client connection is created, it connects to a hub, and during its lifetime, it belongs to that hub. Different applications can share one Web PubSub by using different hub names.\n\n### Group\n\nA group is a subset of connections to the hub. You can add a client connection to a group, or remove the client connection from the group, anytime you want. For example, when a client joins a chat room, or when a client leaves the chat room, this chat room can be considered to be a group. A client can join multiple groups, and a group can contain multiple clients.\n\n### User\n\nConnections to Web PubSub can belong to one user. A user might have multiple connections, for example when a single user is connected across multiple devices or multiple browser tabs.\n\n---\n## Client Lifetime\n\nEach of the Web PubSub clients is safe to cache and be used as a singleton for the lifetime of the application. The registered event callbacks share the same lifetime with the client. This means you can add or remove callbacks at any time and the registration status will not change after reconnection or the client being stopped.\n\n## Troubleshooting\n\nThis library uses the standard [logging](https://docs.python.org/3/library/logging.html) library for logging. If you want detailed `DEBUG` level logging, including payload of request, you can set `logging_enable=True` in client or per-operation\n\n## Next steps\n\nYou can also find [more samples here](https://github.com/Azure/azure-webpubsub/tree/main/samples/python).\n\n## Additional resources\n\n- Learn more about client permission, see [permissions](https://learn.microsoft.com/azure/azure-web-pubsub/reference-json-reliable-webpubsub-subprotocol#permissions)\n\n- [Product documentation](https://aka.ms/awps/doc)\n\n## Contributing\n\nIf you'd like to contribute to this library, please read the [contributing guide](https://github.com/Azure/azure-sdk-for-python/blob/main/CONTRIBUTING.md) to learn more about how to build and test the code.\n\n[azure_sub]: https://azure.microsoft.com/free/\n[create_instance]: https://learn.microsoft.com/azure/azure-web-pubsub/howto-develop-create-instance\n[pypi]: https://pypi.org/",
        "repo_name": "webpubsub/azure-messaging-webpubsubclient",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/webpubsub/azure-messaging-webpubsubclient",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Azure Web PubSub service client library for Python\n\n[Azure Web PubSub Service](https://aka.ms/awps/doc) is an Azure-managed service that helps developers easily build web applications with real-time features and publish-subscribe pattern. Any scenario that requires real-time publish-subscribe messaging between server and clients or among clients can use Azure Web PubSub service. Traditional real-time features that often require polling from server or submitting HTTP requests can also use Azure Web PubSub service.\n\nYou can use this library in your app server side to manage the WebSocket client connections, as shown in below diagram:\n\n![overflow](https://user-images.githubusercontent.com/668244/140014067-25a00959-04dc-47e8-ac25-6957bd0a71ce.png)\n\nUse this library to:\n- Send messages to hubs and groups.\n- Send messages to particular users and connections.\n- Organize users and connections into groups.\n- Close connections\n- Grant, revoke, and check permissions for an existing connection\n\n[Source code](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/webpubsub/azure-messaging-webpubsubservice)\n| [Package (Pypi)][package]\n| [Package (Conda)](https://anaconda.org/microsoft/azure-messaging-webpubsubservice)\n| [API reference documentation](https://aka.ms/awps/sdk/python)\n| [Product documentation][webpubsubservice_docs]\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.6 or later is required to use this package.\n- You need an [Azure subscription][azure_sub], and a [Azure WebPubSub service instance][webpubsubservice_docs] to use this package.\n- An existing Azure Web PubSub service instance.\n\n### 1. Install the package\n\n```bash\npython -m pip install azure-messaging-webpubsubservice\n```\n\n### 2. Create and authenticate a WebPubSubServiceClient\n\nYou can authenticate the `WebPubSubServiceClient` using [connection string][connection_string]:\n\n```python\n>>> from azure.messaging.webpubsubservice import WebPubSubServiceClient\n\n>>> service = WebPubSubServiceClient.from_connection_string(connection_string='<connection_string>', hub='hub')\n```\n\nOr using the service endpoint and the access key:\n\n```python\n>>> from azure.messaging.webpubsubservice import WebPubSubServiceClient\n>>> from azure.core.credentials import AzureKeyCredential\n\n>>> service = WebPubSubServiceClient(endpoint='<endpoint>', hub='hub', credential=AzureKeyCredential(\"<access_key>\"))\n```\n\nOr using [Azure Active Directory][aad_doc]:\n1. [pip][pip] install [`azure-identity`][azure_identity_pip]\n2. Follow the document to [enable AAD authentication on your Webpubsub resource][aad_doc]\n3. Update code to use [DefaultAzureCredential][default_azure_credential]\n\n    ```python\n    >>> from azure.messaging.webpubsubservice import WebPubSubServiceClient\n    >>> from azure.identity import DefaultAzureCredential\n    >>> service = WebPubSubServiceClient(endpoint='<endpoint>', hub='hub', credential=DefaultAzureCredential())\n    ```\n\n## Key concepts\n\n### Connection\n\nA connection, also known as a client or a client connection, represents an individual WebSocket connection connected to the Web PubSub service. When successfully connected, a unique connection ID is assigned to this connection by the Web PubSub service.\n\n### Hub\n\nA hub is a logical concept for a set of client connections. Usually you use one hub for one purpose, for example, a chat hub, or a notification hub. When a client connection is created, it connects to a hub, and during its lifetime, it belongs to that hub. Different applications can share one Azure Web PubSub service by using different hub names.\n\n### Group\n\nA group is a subset of connections to the hub. You can add a client connection to a group, or remove the client connection from the group, anytime you want. For example, when a client joins a chat room, or when a client leaves the chat room, this chat room can be considered to be a group. A client can join multiple groups, and a group can contain multiple clients.\n\n### User\n\nConnections to Web PubSub can belong to one user. A user might have multiple connections, for example when a single user is connected across multiple devices or multiple browser tabs.\n\n### Message\n\nWhen the client is connected, it can send messages to the upstream application, or receive messages from the upstream application, through the WebSocket connection.\n\n## Examples\n\n### Broadcast messages in JSON format\n\n```python\n>>> from azure.messaging.webpubsubservice import WebPubSubServiceClient\n\n>>> service = WebPubSubServiceClient.from_connection_string('<connection_string>', hub='hub1')\n>>> service.send_to_all(message = {\n        'from': 'user1',\n        'data': 'Hello world'\n    })\n```\n\nThe WebSocket client will receive JSON serialized text: `{\"from\": \"user1\", \"data\": \"Hello world\"}`.\n\n### Broadcast messages in plain-text format\n\n```python\n>>> from azure.messaging.webpubsubservice import WebPubSubServiceClient\n>>> service = WebPubSubServiceClient.from_connection_string('<connection_string>', hub='hub1')\n>>> service.send_to_all(message = 'Hello world', content_type='text/plain')\n```\n\nThe WebSocket client will receive text: `Hello world`.\n\n### Broadcast messages in binary format\n\n```python\n>>> import io\n>>> from azure.messaging.webpubsubservice import WebPubSubServiceClient\n>>> service = WebPubSubServiceClient.from_connection_string('<connection_string>', hub='hub')\n>>> service.send_to_all(message=io.StringIO('Hello World'), content_type='application/octet-stream')\n```\nThe WebSocket client will receive binary text: `b'Hello world'`.\n\n## Troubleshooting\n\n### Logging\n\nThis SDK uses Python standard logging library.\nYou can configure logging print out debugging information to the stdout or anywhere you want.\n\n```python\nimport sys\nimport logging\nfrom azure.identity import DefaultAzureCredential\n>>> from azure.messaging.webpubsubservice import WebPubSubServiceClient\n\n# Create a logger for the 'azure' SDK\nlogger = logging.getLogger('azure')\nlogger.setLevel(logging.DEBUG)\n\n# Configure a console output\nhandler = logging.StreamHandler(stream=sys.stdout)\nlogger.addHandler(handler)\n\nendpoint = \"<endpoint>\"\ncredential = DefaultAzureCredential()\n\n# This WebPubSubServiceClient will log detailed information about its HTTP sessions, at DEBUG level\nservice = WebPubSubServiceClient(endpoint=endpoint, hub='hub', credential=credential, logging_enable=True)\n```\n\nSimilarly, `logging_enable` can enable detailed logging for a single call,\neven when it isn't enabled for the WebPubSubServiceClient:\n\n```python\nresult = service.send_to_all(..., logging_enable=True)\n```\n\nHttp request and response details are printed to stdout with this logging config.\n\n## Next steps\n\nCheck [more samples here][samples].\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require\nyou to agree to a Contributor License Agreement (CLA) declaring that you have\nthe right to, and actually do, grant us the rights to use your contribution.\nFor details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether\nyou need to provide a CLA and decorate the PR appropriately (e.g., label,\ncomment). Simply follow the instructions provided by the bot. You will only\nneed to do this once across all repos using our CLA.\n\nThis project has adopted the\n[Microsoft Open Source Code of Conduct][code_of_conduct]. For more information,\nsee the Code of Conduct FAQ or contact opencode@microsoft.com with any\nadditional questions or comments.\n\n<!-- LINKS -->\n[webpubsubservice_docs]: https://aka.ms/awps/doc\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[package]: https://pypi.org/project/azure-messaging-webpubsubservice/\n[default_cred_ref]: https://aka.ms/azsdk-python-identity-default-cred-ref\n[cla]: https://cla.microsoft.com\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n[authenticate_with_token]: https://docs.microsoft.com/azure/cognitive-services/authentication?tabs=powershell#authenticate-with-an-authentication-token\n[azure_identity_credentials]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity#credentials\n[azure_identity_pip]: https://pypi.org/project/azure-identity/\n[default_azure_credential]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity#defaultazurecredential\n[pip]: https://pypi.org/project/pip/\n[enable_aad]: https://docs.microsoft.com/azure/azure-web-pubsub/howto-develop-create-instance\n[api_key]: https://docs.microsoft.com/azure/azure-web-pubsub/howto-websocket-connect?tabs=browser#authorization\n[connection_string]: https://docs.microsoft.com/azure/azure-web-pubsub/howto-websocket-connect?tabs=browser#authorization\n[azure_portal]: https://docs.microsoft.com/azure/azure-web-pubsub/howto-develop-create-instance\n[azure-key-credential]: https://aka.ms/azsdk-python-core-azurekeycredential\n[aad_doc]: https://aka.ms/awps/aad\n[samples]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/webpubsub/azure-messaging-webpubsubservice/samples\n",
        "repo_name": "webpubsub/azure-messaging-webpubsubservice",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/webpubsub/azure-messaging-webpubsubservice",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure WebPubSub Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-webpubsub\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.webpubsub import WebPubSubManagementClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = WebPubSubManagementClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\n\nCode samples for this package can be found at [WebPubSub Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com and [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-webpubsub%2FREADME.png)\n",
        "repo_name": "webpubsub/azure-mgmt-webpubsub",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/webpubsub/azure-mgmt-webpubsub",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "The package has been deprecated. For more info, please see https://github.com/azure-deprecation/dashboard/issues/239\n",
        "repo_name": "workloadmonitor/azure-mgmt-workloadmonitor",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/workloadmonitor/azure-mgmt-workloadmonitor",
        "language": [
            "Python"
        ]
    },
    {
        "README_text": "# Microsoft Azure SDK for Python\n\nThis is the Microsoft Azure Workloads Management Client Library.\nThis package has been tested with Python 3.7+.\nFor a more complete view of Azure libraries, see the [azure sdk python release](https://aka.ms/azsdk/python/all).\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.7+ is required to use this package.\n- [Azure subscription](https://azure.microsoft.com/free/)\n\n### Install the package\n\n```bash\npip install azure-mgmt-workloads\npip install azure-identity\n```\n\n### Authentication\n\nBy default, [Azure Active Directory](https://aka.ms/awps/aad) token authentication depends on correct configure of following environment variables.\n\n- `AZURE_CLIENT_ID` for Azure client ID.\n- `AZURE_TENANT_ID` for Azure tenant ID.\n- `AZURE_CLIENT_SECRET` for Azure client secret.\n\nIn addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n\nWith above configuration, client can be authenticated by following code:\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.workloads import WorkloadsClient\nimport os\n\nsub_id = os.getenv(\"AZURE_SUBSCRIPTION_ID\")\nclient = WorkloadsClient(credential=DefaultAzureCredential(), subscription_id=sub_id)\n```\n\n## Examples\n\n\nCode samples for this package can be found at [Workloads Management](https://docs.microsoft.com/samples/browse/?languages=python&term=Getting%20started%20-%20Managing&terms=Getting%20started%20-%20Managing) on docs.microsoft.com and [Samples Repo](https://aka.ms/azsdk/python/mgmt/samples)\n\n\n## Troubleshooting\n\n## Next steps\n\n## Provide Feedback\n\nIf you encounter any bugs or have suggestions, please file an issue in the\n[Issues](https://github.com/Azure/azure-sdk-for-python/issues)\nsection of the project. \n\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fazure-mgmt-workloads%2FREADME.png)\n",
        "repo_name": "workloads/azure-mgmt-workloads",
        "link_to_repo": "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/workloads/azure-mgmt-workloads",
        "language": [
            "Python"
        ]
    }
]