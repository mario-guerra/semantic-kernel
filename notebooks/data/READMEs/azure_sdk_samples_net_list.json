[{"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.Advisor.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "advisor/Azure.ResourceManager.Advisor/samples/Azure.ResourceManager.Advisor.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/advisor/Azure.ResourceManager.Advisor/samples/Azure.ResourceManager.Advisor.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.AgFoodPlatform.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "agrifood/Azure.ResourceManager.AgFoodPlatform/samples/Azure.ResourceManager.AgFoodPlatform.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/agrifood/Azure.ResourceManager.AgFoodPlatform/samples/Azure.ResourceManager.AgFoodPlatform.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.AlertsManagement.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "alertsmanagement/Azure.ResourceManager.AlertsManagement/samples/Azure.ResourceManager.AlertsManagement.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/alertsmanagement/Azure.ResourceManager.AlertsManagement/samples/Azure.ResourceManager.AlertsManagement.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "---\npage_type: sample\nlanguages:\n- csharp\nproducts:\n- azure\n- azure-cognitive-services\n- azure-anomaly-detector\nname: Azure Anomaly Detector samples for .NET\ndescription: Samples for the Azure.AI.AnomalyDetector client library\n---\n\n# Azure Anomaly Detector client SDK Samples\nThese code samples show common scenario operations with the Anomaly Detector client library.\n\n|**Sample Name**|**Description**|\n|----------------|-------------|\n|[Sample1_DetectEntireSeriesAnomaly][sample_detect_entire_series_anomaly] |Detecting anomalies in the entire time series.|\n|[Sample2_DetectLastPointAnomaly][sample_detect_last_point_anomaly] |Detecting the anomaly status of the latest data point.|\n|[Sample3_DetectChangePoint][sample_detect_change_point] |Detecting change points in the entire time series.|\n|[Sample4_MultivariateDetect][sample_multivariate_detect] |Detecting the anomalies in the multivariate time series.|\n\n<!-- LINKS -->\n[sample_detect_entire_series_anomaly]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/anomalydetector/Azure.AI.AnomalyDetector/samples/Sample1_DetectEntireSeriesAnomaly.md\n[sample_detect_last_point_anomaly]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/anomalydetector/Azure.AI.AnomalyDetector/samples/Sample2_DetectLastPointAnomaly.md\n[sample_detect_change_point]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/anomalydetector/Azure.AI.AnomalyDetector/samples/Sample3_DetectChangePoint.md\n[sample_multivariate_detect]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/anomalydetector/Azure.AI.AnomalyDetector/samples/Sample4_MultivariateDetect.md\n", "repo_name": "anomalydetector/Azure.AI.AnomalyDetector/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/anomalydetector/Azure.AI.AnomalyDetector/samples", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.ApiManagement.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "apimanagement/Azure.ResourceManager.ApiManagement/samples/Azure.ResourceManager.ApiManagement.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/apimanagement/Azure.ResourceManager.ApiManagement/samples/Azure.ResourceManager.ApiManagement.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.AppComplianceAutomation.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "appcomplianceautomation/Azure.ResourceManager.AppComplianceAutomation/samples/Azure.ResourceManager.AppComplianceAutomation.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/appcomplianceautomation/Azure.ResourceManager.AppComplianceAutomation/samples/Azure.ResourceManager.AppComplianceAutomation.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "---\npage_type: sample\nlanguages:\n- csharp\nproducts:\n- azure\n- azure-app-configuration\nname: Azure.Data.AppConfiguration samples for .NET\ndescription: Samples for the Azure.Data.AppConfiguration client library\n---\n\n# Azure App Configuration client SDK samples\n\n - [Create, Retrieve and Delete a Configuration Setting](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/appconfiguration/Azure.Data.AppConfiguration/samples/Sample1_HelloWorld.md)\n - [Asynchronously Create, Update and Delete Configuration Setting With Labels](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/appconfiguration/Azure.Data.AppConfiguration/samples/Sample2_HelloWorldExtended.md)\n - [Make a Configuration Setting Read-Only](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/appconfiguration/Azure.Data.AppConfiguration/samples/Sample3_SetClearReadOnly.md)\n - [Read Revision History](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/appconfiguration/Azure.Data.AppConfiguration/samples/Sample4_ReadRevisionHistory.md)\n - [Get a Configuration Setting](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/appconfiguration/Azure.Data.AppConfiguration/samples/Sample5_GetSettingIfChanged.md)\n - [Update a Configuration If Unchanged](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/appconfiguration/Azure.Data.AppConfiguration/samples/Sample6_UpdateSettingIfUnchanged.md)\n - [Mock a client for testing using the Moq library](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/appconfiguration/Azure.Data.AppConfiguration/samples/Sample7_MockClient.md)\n - [Reacting to setting change notification](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/appconfiguration/Azure.Data.AppConfiguration/samples/Sample8_ChangeNotification.md)\n - [Create, Retrieve and Delete a Feature Flag](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/appconfiguration/Azure.Data.AppConfiguration/samples/Sample9_FeatureFlags.md)\n - [Create, Retrieve and Delete a Secret Reference](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/appconfiguration/Azure.Data.AppConfiguration/samples/Sample10_SecretReference.md)", "repo_name": "appconfiguration/Azure.Data.AppConfiguration/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/appconfiguration/Azure.Data.AppConfiguration/samples", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.AppConfiguration.csproj\" />\n    <PackageReference Include=\"Azure.ResourceManager.Network\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "appconfiguration/Azure.ResourceManager.AppConfiguration/samples/Azure.ResourceManager.AppConfiguration.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/appconfiguration/Azure.ResourceManager.AppConfiguration/samples/Azure.ResourceManager.AppConfiguration.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.ApplicationInsights.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "applicationinsights/Azure.ResourceManager.ApplicationInsights/samples/Azure.ResourceManager.ApplicationInsights.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/applicationinsights/Azure.ResourceManager.ApplicationInsights/samples/Azure.ResourceManager.ApplicationInsights.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.ArcScVmm.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "arc-scvmm/Azure.ResourceManager.ArcScVmm/samples/Azure.ResourceManager.ArcScVmm.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/arc-scvmm/Azure.ResourceManager.ArcScVmm/samples/Azure.ResourceManager.ArcScVmm.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.Attestation.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "attestation/Azure.ResourceManager.Attestation/samples/Azure.ResourceManager.Attestation.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/attestation/Azure.ResourceManager.Attestation/samples/Azure.ResourceManager.Attestation.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.Authorization.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "authorization/Azure.ResourceManager.Authorization/samples/Azure.ResourceManager.Authorization.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/authorization/Azure.ResourceManager.Authorization/samples/Azure.ResourceManager.Authorization.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.Automanage.csproj\" />\n  </ItemGroup>\n\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n</Project>\n", "repo_name": "automanage/Azure.ResourceManager.Automanage/samples/Azure.ResourceManager.Automanage.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/automanage/Azure.ResourceManager.Automanage/samples/Azure.ResourceManager.Automanage.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "<Project Sdk=\"Microsoft.NET.Sdk\\\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"/>\n    <PackageReference Include=\"NUnit3TestAdapter\"/>\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.Automation.csproj\"/>\n  </ItemGroup>\n</Project>\n", "repo_name": "automation/Azure.ResourceManager.Automation/samples/Azure.ResourceManager.Automation.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/automation/Azure.ResourceManager.Automation/samples/Azure.ResourceManager.Automation.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "<Project Sdk=\"Microsoft.NET.Sdk\\\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"/>\n    <PackageReference Include=\"NUnit3TestAdapter\"/>\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.Avs.csproj\"/>\n  </ItemGroup>\n</Project>\n", "repo_name": "avs/Azure.ResourceManager.Avs/samples/Azure.ResourceManager.Avs.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/avs/Azure.ResourceManager.Avs/samples/Azure.ResourceManager.Avs.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.Hci.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "azurestackhci/Azure.ResourceManager.Hci/samples/Azure.ResourceManager.Hci.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/azurestackhci/Azure.ResourceManager.Hci/samples/Azure.ResourceManager.Hci.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.Billing.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "billing/Azure.ResourceManager.Billing/samples/Azure.ResourceManager.Billing.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/billing/Azure.ResourceManager.Billing/samples/Azure.ResourceManager.Billing.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "<Project Sdk=\"Microsoft.NET.Sdk\\\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"/>\n    <PackageReference Include=\"NUnit3TestAdapter\"/>\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.Blueprint.csproj\"/>\n  </ItemGroup>\n</Project>\n", "repo_name": "blueprint/Azure.ResourceManager.Blueprint/samples/Azure.ResourceManager.Blueprint.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/blueprint/Azure.ResourceManager.Blueprint/samples/Azure.ResourceManager.Blueprint.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "<Project Sdk=\"Microsoft.NET.Sdk\\\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"/>\n    <PackageReference Include=\"NUnit3TestAdapter\"/>\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.BotService.csproj\"/>\n  </ItemGroup>\n</Project>\n", "repo_name": "botservice/Azure.ResourceManager.BotService/samples/Azure.ResourceManager.BotService.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/botservice/Azure.ResourceManager.BotService/samples/Azure.ResourceManager.BotService.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.Cdn.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "cdn/Azure.ResourceManager.Cdn/samples/Azure.ResourceManager.Cdn.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/cdn/Azure.ResourceManager.Cdn/samples/Azure.ResourceManager.Cdn.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "<Project Sdk=\"Microsoft.NET.Sdk\\\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"/>\n    <PackageReference Include=\"NUnit3TestAdapter\"/>\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.Chaos.csproj\"/>\n  </ItemGroup>\n</Project>\n", "repo_name": "chaos/Azure.ResourceManager.Chaos/samples/Azure.ResourceManager.Chaos.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/chaos/Azure.ResourceManager.Chaos/samples/Azure.ResourceManager.Chaos.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "---\npage_type: sample\nlanguages:\n- csharp\nproducts:\n- azure-cognitive-services\n- azure-language-understanding\n- language-service\nname: Azure.AI.Language.Conversations samples for .NET\ndescription: Samples for the Azure.AI.Language.Conversations client library\n---\n\n# Azure.AI.Language.Conversations Samples\n\nConversation Analysis is a cloud-based conversational AI service that applies custom machine-learning intelligence to a user's conversational, natural language text to predict overall meaning, and pull out relevant, detailed information.\n\nYou can work with request and response content more easily by using our [Dynamic JSON](https://aka.ms/azsdk/net/dynamiccontent) feature. This is illustrated in the following samples:\n\n- [Analyze an utterance - Conversation project](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/cognitivelanguage/Azure.AI.Language.Conversations/samples/Sample1_AnalyzeConversation_ConversationPrediction.md)\n- [Analyze an utterance - Orchestration project](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/cognitivelanguage/Azure.AI.Language.Conversations/samples/Sample2_AnalyzeConversation_OrchestrationPrediction.md)\n- [Analyze an utterance in a different language](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/cognitivelanguage/Azure.AI.Language.Conversations/samples/Sample3_AnalyzeConversationWithLanguage.md)\n- [Analyze an utterance using extra options](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/cognitivelanguage/Azure.AI.Language.Conversations/samples/Sample4_AnalyzeConversationWithOptions.md)\n- [Import a project](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/cognitivelanguage/Azure.AI.Language.Conversations/samples/Sample5_ImportProject.md)\n- [Analyze a conversation with Conversation Summarization](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/cognitivelanguage/Azure.AI.Language.Conversations/samples/Sample6_AnalyzeConversation_ConversationSummarization.md)\n- [Export a project](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/cognitivelanguage/Azure.AI.Language.Conversations/samples/Sample7_ExportProject.md)\n", "repo_name": "cognitivelanguage/Azure.AI.Language.Conversations/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/cognitivelanguage/Azure.AI.Language.Conversations/samples", "language": ["C#", ".NET"]}, {"README_text": "---\npage_type: sample\nlanguages:\n- csharp\nproducts:\n- azure-cognitive-services\n- azure-qna-maker\n- language-service\nname: Azure.AI.Language.QuestionAnswering samples for .NET\ndescription: Samples for the Azure.AI.Language.QuestionAnswering client library\n---\n\n# Azure.AI.Language.QuestionAnswering Samples\n\nQuestion Answering is a cloud-based API service that lets you create a conversational question-and-answer layer over your existing data. Use it to build a knowledge base by extracting questions and answers from your semi-structured content, including FAQ, manuals, and documents. Answer users\u2019 questions with the best answers from the QnAs in your knowledge base\u2014automatically. Your knowledge base gets smarter, too, as it continually learns from user behavior.\n\n- [Ask a question](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/cognitivelanguage/Azure.AI.Language.QuestionAnswering/samples/Sample1_GetAnswers.md)\n- [Ask a follow-up question (chit-chat)](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/cognitivelanguage/Azure.AI.Language.QuestionAnswering/samples/Sample2_Chat.md)\n- [Create and deploy a project](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/cognitivelanguage/Azure.AI.Language.QuestionAnswering/samples/Sample3_CreateAndDeploy.md)\n- [Export and Import a project](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/cognitivelanguage/Azure.AI.Language.QuestionAnswering/samples/Sample4_ExportAndImport.md)\n- [Update Knowledge sources](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/cognitivelanguage/Azure.AI.Language.QuestionAnswering/samples/Sample5_UpdateKnowledgeSources.md)\n", "repo_name": "cognitivelanguage/Azure.AI.Language.QuestionAnswering/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/cognitivelanguage/Azure.AI.Language.QuestionAnswering/samples", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.CognitiveServices.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "cognitiveservices/Azure.ResourceManager.CognitiveServices/samples/Azure.ResourceManager.CognitiveServices.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/cognitiveservices/Azure.ResourceManager.CognitiveServices/samples/Azure.ResourceManager.CognitiveServices.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "---\npage_type: sample\nlanguages:\n- csharp\nproducts:\n- azure\n- azure-communication-services\nname: Azure.Communication.AlphaIds samples for .NET\ndescription: Samples for the Azure.Communication.AlphaIds client library.\n---\n\n# Azure.Communication.AlphaIds Samples\n\nThese sample programs show how to use the C# client libraries for Azure Communication Services - Alpha Ids in some common scenarios.\n", "repo_name": "communication/Azure.Communication.AlphaIds/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/communication/Azure.Communication.AlphaIds/samples", "language": ["C#", ".NET"]}, {"README_text": "---\npage_type: sample\nlanguages:\n- csharp\nproducts:\n- azure\n- azure-communication-services\nname: Azure Communication CallAutomation samples for .NET\ndescription: Samples for the Azure.Communication.CallingServer client library\n---\n\n# Azure Communication CallAutomation SDK samples\n\nAzure Communication CallAutomation is a client library that provides the functionality to make call between user identities.\nTo get started you will need to have an Azure Subscription. Once you have this you can go into the Azure portal and create Azure Communication Services resource. The page will give you necessary information to be able to use the sample codes here such as connections string, shared access key, etc.\n\nThis client library allows to do following operations:\n - Create a Call from a Azure Communication Resource identity to a phone number\n - Specify request payload for the created call.\n\n #### You can find samples for each of these functions below.\n - CreateCall [synchronously][sample_callautomation] or [asynchronously][sample_callautomation_async]\n\n<!-- LINKS -->\n[sample_callautomation]: https://github.com/Azure/azure-sdk-for-net/blob/a20e269162fa88a43e5ba0e5bb28f2e76c74a484/sdk/communication/Azure.Communication.CallingServer/samples/Sample1_CreateCall.md\n[sample_callautomation_async]: https://github.com/Azure/azure-sdk-for-net/blob/a20e269162fa88a43e5ba0e5bb28f2e76c74a484/sdk/communication/Azure.Communication.CallingServer/samples/Sample1_CreateCallAsync.md\n", "repo_name": "communication/Azure.Communication.CallAutomation/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/communication/Azure.Communication.CallAutomation/samples", "language": ["C#", ".NET"]}, {"README_text": "---\npage_type: sample\nlanguages:\n- csharp\nproducts:\n- azure\n- azure-communication-services\nname: Azure Communication CallAutomation samples for .NET\ndescription: Samples for the Azure.Communication.CallingServer client library\n---\n\n# Azure Communication CallAutomation SDK samples\n\nAzure Communication CallAutomation is a client library that provides the functionality to make call between user identities.\nTo get started you will need to have an Azure Subscription. Once you have this you can go into the Azure portal and create Azure Communication Services resource. The page will give you necessary information to be able to use the sample codes here such as connections string, shared access key, etc.\n\nThis client library allows to do following operations:\n - Create a Call from a Azure Communication Resource identity to a phone number\n - Specify request payload for the created call.\n\n #### You can find samples for each of these functions below.\n - CreateCall [synchronously][sample_callautomation] or [asynchronously][sample_callautomation_async]\n\n<!-- LINKS -->\n[sample_callautomation]: https://github.com/Azure/azure-sdk-for-net/blob/a20e269162fa88a43e5ba0e5bb28f2e76c74a484/sdk/communication/Azure.Communication.CallingServer/samples/Sample1_CreateCall.md\n[sample_callautomation_async]: https://github.com/Azure/azure-sdk-for-net/blob/a20e269162fa88a43e5ba0e5bb28f2e76c74a484/sdk/communication/Azure.Communication.CallingServer/samples/Sample1_CreateCallAsync.md\n", "repo_name": "communication/Azure.Communication.CallingServer/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/communication/Azure.Communication.CallingServer/samples", "language": ["C#", ".NET"]}, {"README_text": "---\npage_type: sample\nlanguages:\n- csharp\nproducts:\n- azure\n- azure-communication-services\nname: Azure Communication Email samples for .NET\ndescription: Samples for the Azure.Communication.Email client library\n---\n\n# Azure Communication Email SDK samples\n\nAzure Communication Email is a client library that provides the functionality to send emails.\nTo get started you will need to have an Azure Subscription. Once you have this you can go into the Azure portal and create an Azure Communication Services resource, an Azure Communication Email resource with a domain. The page will give you necessary information to be able to use the sample codes here such as connections string, shared access key, etc.\n\nThis client library allows to do following operations:\n - Send a simple email message with automatic polling for status\n - Send a simple email message with manual polling for status\n - Specify optional paramters while sending Emails\n - Send an email message to multiple recipients\n - Send an email message with attachments\n\n #### You can find samples for each of these functions below.\n - Send simple email message with automatic polling for status [synchronously][sample_simpleemail_autopolling] or [asynchronously][sample_simpleemail_autopolling_async]\n - Send simple email message with manual polling for status [asynchronously][sample_simpleemail_manualpolling_async]\n - Specify optional paramters while sending Emails [synchronously][sample_emailwithoptions] or [asynchronously][sample_emailwithoptions_async]\n - Send an email message to multiple recipients [synchronously][sample_email_multiplerecipients] or [asynchronously][sample_email_multiplerecipients_async]\n - Send an email message with attachments [synchronously][sample_email_attachments] or [asynchronously][sample_email_attachments_async]\n\n<!-- LINKS -->\n[sample_simpleemail_autopolling]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/communication/Azure.Communication.Email/samples/Sample1_SendSimpleEmailWithAutomaticPollingForStatus.md\n[sample_simpleemail_autopolling_async]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/communication/Azure.Communication.Email/samples/Sample1_SendSimpleEmailWithAutomaticPollingForStatusAsync.md\n[sample_simpleemail_manualpolling_async]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/communication/Azure.Communication.Email/samples/Sample2_SendSimpleEmailWithManualPollingForStatusAsync.md\n[sample_emailwithoptions]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/communication/Azure.Communication.Email/samples/Sample3_SendEmailWithMoreOptions.md\n[sample_emailwithoptions_async]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/communication/Azure.Communication.Email/samples/Sample3_SendEmailWithMoreOptionsAsync.md\n[sample_email_multiplerecipients]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/communication/Azure.Communication.Email/samples/Sample4_SendEmailToMultipleRecipients.md\n[sample_email_multiplerecipients_async]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/communication/Azure.Communication.Email/samples/Sample4_SendEmailToMultipleRecipientsAsync.md\n[sample_email_attachments]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/communication/Azure.Communication.Email/samples/Sample5_SendEmailWithAttachment.md\n[sample_email_attachments_async]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/communication/Azure.Communication.Email/samples/Sample5_SendEmailWithAttachmentAsync.md\n", "repo_name": "communication/Azure.Communication.Email/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/communication/Azure.Communication.Email/samples", "language": ["C#", ".NET"]}, {"README_text": "---\npage_type: sample\nlanguages:\n- csharp\nproducts:\n- azure\n- azure-communication-services\nname: Azure Communication Identity samples for .NET\ndescription: Samples for the Azure.Communication.Identity client library\n---\n\n# Azure Communication Identity SDK samples\n\nAzure Communication Identity is a client library that is used to do operations necessary for identities and tokens.\nTo get started you will need to have an Azure Subscription. Once you have this you can go into the Azure portal and create Azure Communication Services resource. The page will give you necessary information to be able to use the sample codes here such as connections string, shared access key, etc.\n\nThis client library allows to do following operations:\n - Generate user tokens that allows the holders to access Azure Communication Services.\n - Purchase, configure and release phone numbers.\n\n #### You can find samples for each of these functions below.\n - Generate user tokens [synchronously][sample_identity] or [asynchronously][sample_identity_async]\n \n<!-- LINKS -->\n[sample_identity]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/communication/Azure.Communication.Identity/samples/Sample1_CommunicationIdentityClient.md\n[sample_identity_async]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/communication/Azure.Communication.Identity/samples/Sample1_CommunicationIdentityClientAsync.md\n", "repo_name": "communication/Azure.Communication.Identity/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/communication/Azure.Communication.Identity/samples", "language": ["C#", ".NET"]}, {"README_text": "# Azure.Communication.JobRouter Samples - Classification Policy CRUD operations (sync)\n\n## Import the namespaces\n\n```C# Snippet:Azure_Communication_JobRouter_Tests_Samples_UsingStatements\nusing Azure.Communication.JobRouter;\nusing Azure.Communication.JobRouter.Models;\n```\n\n## Create a client\n\nCreate a `RouterClient`.\n\n```C# Snippet:Azure_Communication_JobRouter_Tests_Samples_CreateClient\nJobRouterClient routerClient = new JobRouterClient(\"<< CONNECTION STRING >>\");\nJobRouterAdministrationClient routerAdministrationClient = new JobRouterAdministrationClient(\"<< CONNECTION STRING >>\");\n```\n\n## Create a classification policy\n\n```C# Snippet:Azure_Communication_JobRouter_Tests_Samples_Crud_CreateClassificationPolicy\nstring classificationPolicyId = \"my-classification-policy\";\n\nResponse<ClassificationPolicy> classificationPolicy = routerAdministrationClient.CreateClassificationPolicy(\n    options: new CreateClassificationPolicyOptions(classificationPolicyId)\n    {\n        Name = \"Sample classification policy\",\n        PrioritizationRule = new StaticRule(new LabelValue(10)),\n        QueueSelectors =\n        {\n            new StaticQueueSelectorAttachment(new RouterQueueSelector(\"Region\", LabelOperator.Equal, new LabelValue(\"NA\"))),\n            new ConditionalQueueSelectorAttachment(\n                condition: new ExpressionRule(\"If(job.Product = \\\"O365\\\", true, false)\"),\n                queueSelectors: new List<RouterQueueSelector>()\n                {\n                    new RouterQueueSelector(\"Product\", LabelOperator.Equal, new LabelValue(\"O365\")),\n                    new RouterQueueSelector(\"QGroup\", LabelOperator.Equal, new LabelValue(\"NA_O365\"))\n                }),\n        },\n        WorkerSelectors =\n        {\n            new ConditionalWorkerSelectorAttachment(\n                condition: new ExpressionRule(\"If(job.Product = \\\"O365\\\", true, false)\"),\n                workerSelectors: new List<RouterWorkerSelector>()\n                {\n                    new RouterWorkerSelector(\"Skill_O365\", LabelOperator.Equal, new LabelValue(true)),\n                    new RouterWorkerSelector(\"Skill_O365_Lvl\", LabelOperator.GreaterThanEqual, new LabelValue(1))\n                }),\n            new ConditionalWorkerSelectorAttachment(\n                condition: new ExpressionRule(\"If(job.HighPriority = \\\"true\\\", true, false)\"),\n                workerSelectors: new List<RouterWorkerSelector>()\n                {\n                    new RouterWorkerSelector(\"Skill_O365_Lvl\", LabelOperator.GreaterThanEqual, new LabelValue(10))\n                })\n        }\n    });\n\nConsole.WriteLine($\"Classification Policy successfully created with id: {classificationPolicy.Value.Id}\");\n```\n\n*NOTE: it is not necessary to specify all the properties when creating a classification policy. Router provides the flexibility to pick and choose whichever functionality of the classification process someone may use.\n\n## Get a classification policy\n\n```C# Snippet:Azure_Communication_JobRouter_Tests_Samples_Crud_GetClassificationPolicy\nResponse<ClassificationPolicy> queriedClassificationPolicy = routerAdministrationClient.GetClassificationPolicy(classificationPolicyId);\n\nConsole.WriteLine($\"Successfully fetched classification policy with id: {queriedClassificationPolicy.Value.Id}\");\n```\n\n## Update a classification policy\n\n```C# Snippet:Azure_Communication_JobRouter_Tests_Samples_Crud_UpdateClassificationPolicy\nResponse<ClassificationPolicy> updatedClassificationPolicy = routerAdministrationClient.UpdateClassificationPolicy(\n    new UpdateClassificationPolicyOptions(classificationPolicyId)\n    {\n        PrioritizationRule = new ExpressionRule(\"If(job.HighPriority = \\\"true\\\", 50, 10)\")\n    });\n\nConsole.WriteLine($\"Classification policy successfully update with new prioritization rule. RuleType: {updatedClassificationPolicy.Value.PrioritizationRule.Kind}\");\n```\n\n*NOTE: It is not possible to update a single QueueSelectorAttachment or WorkerSelectorAttachment. In order to add QueueSelectorAttachment to an already existing set of QueueSelectorAttachment(s), either specify all the QueueSelectorAttachment(s) again OR perform a Get operation first to retrieve the current value of the classification policy (preferred).\n\n## Remove from classification policy\n\n```C# Snippet:Azure_Communication_JobRouter_Tests_Samples_Crud_UpdateClassificationPolicyRemoveProp\nResponse updatedClassificationPolicyWithoutName = routerAdministrationClient.UpdateClassificationPolicy(classificationPolicyId,\n    RequestContent.Create(new { Name = (string?)null }));\n\nResponse<ClassificationPolicy> queriedClassificationPolicyWithoutName = routerAdministrationClient.GetClassificationPolicy(classificationPolicyId);\n\nConsole.WriteLine($\"Classification policy successfully updated: 'Name' has been removed. Status: {string.IsNullOrWhiteSpace(queriedClassificationPolicyWithoutName.Value.Name)}\");\n```\n\n## List classification policies\n\n```C# Snippet:Azure_Communication_JobRouter_Tests_Samples_Crud_GetClassificationPolicies\nPageable<ClassificationPolicyItem> classificationPolicies = routerAdministrationClient.GetClassificationPolicies();\nforeach (Page<ClassificationPolicyItem> asPage in classificationPolicies.AsPages(pageSizeHint: 10))\n{\n    foreach (ClassificationPolicyItem? policy in asPage.Values)\n    {\n        Console.WriteLine($\"Listing classification policy with id: {policy.ClassificationPolicy.Id}\");\n    }\n}\n```\n\n## Delete classification policy\n\n```C# Snippet:Azure_Communication_JobRouter_Tests_Samples_Crud_DeleteClassificationPolicy\n_ = routerAdministrationClient.DeleteClassificationPolicy(classificationPolicyId);\n```\n", "repo_name": "communication/Azure.Communication.JobRouter/samples/ClassificationPolicyCrud.md", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/communication/Azure.Communication.JobRouter/samples/ClassificationPolicyCrud.md", "language": ["C#", ".NET"]}, {"README_text": "---\npage_type: sample\nlanguages:\n- csharp\nproducts:\n- azure\n- azure-communication-services\nname: Azure Communication NetworkTraversal samples for .NET\ndescription: Samples for the Azure.Communication.NetworkTraversal client library\n---\n\n# Azure Communication NetworkTraversal SDK samples\n\nAzure Communication NetworkTraversal is a client library that is used for fetching relay configuration information for STUN and TURN services.\n\nTo get started you will need to have an Azure Subscription. Once you have this you can go into the Azure portal and create Azure Communication Services resource. The page will give you necessary information to be able to use the sample codes here such as connections string, shared access key, etc.\n\nThis client library allows for the following operations:\n - Fetch information that allow the bearers to access a TURN server for data relay.\n\n You can find samples for each of these functions below.\n - Fetch relay information [synchronously][sample_relay] or [asynchronously][sample_relay_async]\n\n<!-- LINKS -->\n[sample_relay]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/communication/Azure.Communication.NetworkTraversal/samples/Sample1_CommunicationRelayClient.md\n[sample_relay_async]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/communication/Azure.Communication.NetworkTraversal/samples/Sample1_CommunicationRelayClientAsync.md\n\n", "repo_name": "communication/Azure.Communication.NetworkTraversal/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/communication/Azure.Communication.NetworkTraversal/samples", "language": ["C#", ".NET"]}, {"README_text": "---\npage_type: sample\nlanguages:\n- csharp\nproducts:\n- azure\n- azure-communication-services\nname: Azure Communication Phone Number samples for .NET\ndescription: Samples for the Azure.Communication.PhoneNumbers client library\n---\n\n# Azure Communication Phone Number SDK samples\n\nAzure Communication Phone Number is a client library that is used to do operations necessary for using different services offered by Azure Communication Services, such as calling, chat, SMS, PSTN etc.\nTo get started you will need to have an Azure Subscription. Once you have this you can go into the Azure portal and create Azure Communication Services resource. The page will give you necessary information to be able to use the sample codes here such as connections string, shared access key, etc.\n\nThis client library allows to do following operations:\n - Purchase, configure and release phone numbers.\n - Manage SIP routing configuration.\n\n #### You can find samples for each of these functions below.\n - Manage phone numbers [synchronously][sample_phonenumbers] or [asynchronously][sample_phonenumbers_async]\n - Manage SIP routing configuration [synchronously][sample_siprouting] or [asynchronously][sample_siprouting_async]\n\n<!-- LINKS -->\n[sample_phonenumbers]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/communication/Azure.Communication.PhoneNumbers/samples/Sample_PhoneNumbersClient.md\n[sample_phonenumbers_async]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/communication/Azure.Communication.PhoneNumbers/samples/Sample_PhoneNumbersClientAsync.md\n[sample_siprouting]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/communication/Azure.Communication.PhoneNumbers/samples/Sample_SipRoutingClient.md\n[sample_siprouting_async]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/communication/Azure.Communication.PhoneNumbers/samples/Sample_SipRoutingClientAsync.md\n", "repo_name": "communication/Azure.Communication.PhoneNumbers/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/communication/Azure.Communication.PhoneNumbers/samples", "language": ["C#", ".NET"]}, {"README_text": "---\npage_type: sample\nlanguages:\n- csharp\nproducts:\n- azure\n- azure-communication-services\nname: Azure Communication Short Codes samples for .NET\ndescription: Samples for the Azure.Communication.ShortCodes client library.\n---\n\n# Azure Communication Short Codes Samples\n\nThese sample programs show how to use the C# client libraries for Azure Communication Services - Short Codes in some common scenarios.\n\n<!--\n You can find samples for each of these functions below.\n - [Get a Short Code](https://github.com/Azure/azure-sdk-for-net/tree/master/sdk/communication/Azure.Communication.ShortCodes/samples/Sample1_ShortCodesClient.md)\n-->", "repo_name": "communication/Azure.Communication.ShortCodes/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/communication/Azure.Communication.ShortCodes/samples", "language": ["C#", ".NET"]}, {"README_text": "---\npage_type: sample\nlanguages:\n- csharp\nproducts:\n- azure\n- azure-communication-services\nname: Azure Communication SMS samples for .NET\ndescription: Samples for the Azure.Communication.Sms client library\n---\n\n# Azure Communication SMS SDK samples\n\nAzure Communication Sms is a client library that provides the functionality to send messages between phone numbers.\nTo get started you will need to have an Azure Subscription. Once you have this you can go into the Azure portal and create Azure Communication Services resource. The page will give you necessary information to be able to use the sample codes here such as connections string, shared access key, etc.\n\nThis client library allows to do following operations:\n - Send SMS to one or more recipients\n - Specify optional paramters while sending SMS\n\n #### You can find samples for each of these functions below.\n - Send SMS Messages [synchronously][sample_sms] or [asynchronously][sample_sms_async]\n \n<!-- LINKS -->\n[sample_sms]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/communication/Azure.Communication.Sms/samples/Sample1_SendSms.md\n[sample_sms_async]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/communication/Azure.Communication.Sms/samples/Sample1_SendSmsAsync.md\n", "repo_name": "communication/Azure.Communication.Sms/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/communication/Azure.Communication.Sms/samples", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.Communication.csproj\" />\n  </ItemGroup>\n\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n</Project>\n", "repo_name": "communication/Azure.ResourceManager.Communication/samples/Azure.ResourceManager.Communication.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/communication/Azure.ResourceManager.Communication/samples/Azure.ResourceManager.Communication.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.Compute.csproj\" />\n    <PackageReference Include=\"Azure.ResourceManager.Network\" />\n  </ItemGroup>\n\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n</Project>\n", "repo_name": "compute/Azure.ResourceManager.Compute/samples/Azure.ResourceManager.Compute.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/compute/Azure.ResourceManager.Compute/samples/Azure.ResourceManager.Compute.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.ConfidentialLedger.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "confidentialledger/Azure.ResourceManager.ConfidentialLedger/samples/Azure.ResourceManager.ConfidentialLedger.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/confidentialledger/Azure.ResourceManager.ConfidentialLedger/samples/Azure.ResourceManager.ConfidentialLedger.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.Confluent.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "confluent/Azure.ResourceManager.Confluent/samples/Azure.ResourceManager.Confluent.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/confluent/Azure.ResourceManager.Confluent/samples/Azure.ResourceManager.Confluent.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.ConnectedVMwarevSphere.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "connectedvmwarevsphere/Azure.ResourceManager.ConnectedVMwarevSphere/samples/Azure.ResourceManager.ConnectedVMwarevSphere.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/connectedvmwarevsphere/Azure.ResourceManager.ConnectedVMwarevSphere/samples/Azure.ResourceManager.ConnectedVMwarevSphere.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "<Project Sdk=\"Microsoft.NET.Sdk\\\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"/>\n    <PackageReference Include=\"NUnit3TestAdapter\"/>\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.Consumption.csproj\"/>\n  </ItemGroup>\n</Project>\n", "repo_name": "consumption/Azure.ResourceManager.Consumption/samples/Azure.ResourceManager.Consumption.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/consumption/Azure.ResourceManager.Consumption/samples/Azure.ResourceManager.Consumption.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "<Project Sdk=\"Microsoft.NET.Sdk\\\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"/>\n    <PackageReference Include=\"NUnit3TestAdapter\"/>\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.AppContainers.csproj\"/>\n  </ItemGroup>\n</Project>\n", "repo_name": "containerapps/Azure.ResourceManager.AppContainers/samples/Azure.ResourceManager.AppContainers.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/containerapps/Azure.ResourceManager.AppContainers/samples/Azure.ResourceManager.AppContainers.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.ContainerInstance.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "containerinstance/Azure.ResourceManager.ContainerInstance/samples/Azure.ResourceManager.ContainerInstance.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/containerinstance/Azure.ResourceManager.ContainerInstance/samples/Azure.ResourceManager.ContainerInstance.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "---\npage_type: sample\nlanguages:\n- csharp\nproducts:\n- azure\n- azure-container-registry\nname: Azure.Containers.ContainerRegistry samples for .NET\ndescription: Samples for the Azure.Containers.ContainerRegistry client library\n---\n\n# Azure.Containers.ContainerRegistry Samples\n\n- Get started with the HelloWorld sample either [synchronously](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/containerregistry/Azure.Containers.ContainerRegistry/samples/Sample01a_HelloWorld.md) or [asynchronously](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/containerregistry/Azure.Containers.ContainerRegistry/samples/Sample01b_HelloWorldAsync.md).\n- Manage a registry by deleting old images [synchronously](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/containerregistry/Azure.Containers.ContainerRegistry/samples/Sample02a_DeleteImages.md) or [asynchronously](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/containerregistry/Azure.Containers.ContainerRegistry/samples/Sample02b_DeleteImagesAsync.md).\n- Set read/write/delete properties on an image [synchronously](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/containerregistry/Azure.Containers.ContainerRegistry/samples/Sample03a_SetImageProperties.md) or [asynchronously](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/containerregistry/Azure.Containers.ContainerRegistry/samples/Sample03b_SetImagePropertiesAsync.md).\n- List tags on an image using an anonymous access client  [synchronously](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/containerregistry/Azure.Containers.ContainerRegistry/samples/Sample04a_AnonymousListTags.md) or [asynchronously](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/containerregistry/Azure.Containers.ContainerRegistry/samples/Sample04b_AnonymousListTagsAsync.md).\n- Upload and download images [asynchronously](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/containerregistry/Azure.Containers.ContainerRegistry/samples/Sample05_UploadDownloadImage.md).\n", "repo_name": "containerregistry/Azure.Containers.ContainerRegistry/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/containerregistry/Azure.Containers.ContainerRegistry/samples", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.ContainerRegistry.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "containerregistry/Azure.ResourceManager.ContainerRegistry/samples/Azure.ResourceManager.ContainerRegistry.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/containerregistry/Azure.ResourceManager.ContainerRegistry/samples/Azure.ResourceManager.ContainerRegistry.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "---\npage_type: sample\nlanguages:\n- csharp\nproducts:\n- azure\n- azure-cognitive-services\nname: Azure AI Content Safety samples for .NET\ndescription: Samples for the Azure.AI.ContentSafety client library\n---\n\n# Azure AI Content Safety client SDK Samples\n\nThese code samples show common scenario operations with the Content Safety client library.\n\n|**Sample Name**|**Description**|\n|----------------|-------------|\n|[Sample1_AnalyzeText](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/contentsafety/Azure.AI.ContentSafety/samples/Sample1_AnalyzeText.md) |Scans text for sexual content, violence, hate, and self harm with multi-severity levels.|\n|[Sample2_AnalyzeImage](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/contentsafety/Azure.AI.ContentSafety/samples/Sample2_AnalyzeImage.md) |Scans images for sexual content, violence, hate, and self harm with multi-severity levels.|\n|[Sample3_ManageTextBlocklist](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/contentsafety/Azure.AI.ContentSafety/samples/Sample3_ManageTextBlocklist.md) |The default AI classifiers are sufficient for most content safety needs; however, you might need to screen for terms that are specific to your use case. You can create blocklists of terms to use with the Text API.|\n", "repo_name": "contentsafety/Azure.AI.ContentSafety/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/contentsafety/Azure.AI.ContentSafety/samples", "language": ["C#", ".NET"]}, {"README_text": "# Azure client configuration samples\n\n**NOTE:** Samples in this file apply only to packages that follow [Azure SDK Design Guidelines](https://azure.github.io/azure-sdk/dotnet_introduction.html). Names of such packages usually start with `Azure`.\n\n## Configuring retry options\n\nTo modify the retry options, use the `Retry` property of the `ClientOptions` class.\n\nBy default, clients are setup to retry 3 times using an exponential retry strategy with an initial delay of 0.8 sec, and a max delay of 1 minute.\n\n```C# Snippet:RetryOptions\nSecretClientOptions options = new SecretClientOptions()\n{\n    Retry =\n    {\n        Delay = TimeSpan.FromSeconds(2),\n        MaxRetries = 10,\n        Mode = RetryMode.Fixed\n    }\n};\n```\n\n## Setting a custom retry policy\n\nUsing `RetryOptions` to configure retry behavior is sufficient for the vast majority of scenarios. For more advanced scenarios, it's possible to use a custom retry policy by setting the `RetryPolicy` property of client options class. This can be accomplished by implementing a retry policy that derives from the `RetryPolicy` class, or by passing in a `DelayStrategy` into the existing `RetryPolicy` constructor. The `RetryPolicy` class contains hooks to determine if a request should be retried and how long to wait before retrying. \n\nIn the following example, we implement a policy that will prevent retries from taking place if the overall processing time has exceeded a configured threshold. Notice that the policy takes in `RetryOptions` as one of the constructor parameters and passes it to the base constructor. By doing this, we are able to delegate to the base `RetryPolicy` as needed (either by explicitly invoking the base methods, or by not overriding methods that we do not need to customize) which will respect the `RetryOptions`.\n\n```C# Snippet:GlobalTimeoutRetryPolicy\ninternal class GlobalTimeoutRetryPolicy : RetryPolicy\n{\n    private readonly TimeSpan _timeout;\n\n    public GlobalTimeoutRetryPolicy(int maxRetries, DelayStrategy delayStrategy, TimeSpan timeout) : base(maxRetries, delayStrategy)\n    {\n        _timeout = timeout;\n    }\n\n    protected internal override bool ShouldRetry(HttpMessage message, Exception exception)\n    {\n        return ShouldRetryInternalAsync(message, exception, false).EnsureCompleted();\n    }\n    protected internal override ValueTask<bool> ShouldRetryAsync(HttpMessage message, Exception exception)\n    {\n        return ShouldRetryInternalAsync(message, exception, true);\n    }\n\n    private ValueTask<bool> ShouldRetryInternalAsync(HttpMessage message, Exception exception, bool async)\n    {\n        TimeSpan elapsedTime = message.ProcessingContext.StartTime - DateTimeOffset.UtcNow;\n        if (elapsedTime > _timeout)\n        {\n            return new ValueTask<bool>(false);\n        }\n\n        return async ? base.ShouldRetryAsync(message, exception) : new ValueTask<bool>(base.ShouldRetry(message, exception));\n    }\n}\n```\n\nHere is how we would configure the client to use the policy we just created.\n\n```C# Snippet:SetGlobalTimeoutRetryPolicy\nvar delay = DelayStrategy.CreateFixedDelayStrategy(TimeSpan.FromSeconds(2));\nSecretClientOptions options = new SecretClientOptions()\n{\n    RetryPolicy = new GlobalTimeoutRetryPolicy(maxRetries: 4, delayStrategy: delay, timeout: TimeSpan.FromSeconds(30))\n};\n```\n\nAnother scenario where it may be helpful to use a custom retry policy is when you need to customize the delay behavior, but don't need to adjust the logic used to determine whether a request should be retried or not. In this case, it isn't necessary to create a custom `RetryPolicy` class - instead, you can pass in a `DelayStrategy` into the `RetryPolicy` constructor.  \n\nIn the below example, we create a customized delay strategy that uses a fixed sequence of delays that are iterated through as the number of retries increases. We then pass the strategy into the `RetryPolicy` constructor and set the constructed policy in our options.\n```C# Snippet:SequentialDelayStrategy\npublic class SequentialDelayStrategy : DelayStrategy\n{\n    private static readonly TimeSpan[] PollingSequence = new TimeSpan[]\n    {\n        TimeSpan.FromSeconds(1),\n        TimeSpan.FromSeconds(1),\n        TimeSpan.FromSeconds(1),\n        TimeSpan.FromSeconds(2),\n        TimeSpan.FromSeconds(4),\n        TimeSpan.FromSeconds(8),\n        TimeSpan.FromSeconds(16),\n        TimeSpan.FromSeconds(32)\n    };\n    private static readonly TimeSpan MaxDelay = PollingSequence[PollingSequence.Length - 1];\n\n    protected override TimeSpan GetNextDelayCore(Response response, int retryNumber)\n    {\n        int index = retryNumber - 1;\n        return index >= PollingSequence.Length ? MaxDelay : PollingSequence[index];\n    }\n}\n```\n\nHere is how the custom delay would be used in the client options.\n```C# Snippet:CustomizedDelay\nSecretClientOptions options = new SecretClientOptions()\n{\n    RetryPolicy = new RetryPolicy(delayStrategy: new SequentialDelayStrategy())\n};\n```\n\nIt's also possible to have full control over the retry logic by setting the `RetryPolicy` property to an implementation of `HttpPipelinePolicy` where you would need to implement the retry loop yourself. One use case for this is if you want to implement your own retry policy with Polly. Note that if you replace the `RetryPolicy` with a `HttpPipelinePolicy`, you will need to make sure to update the `HttpMessage.ProcessingContext` that other pipeline policies may be relying on.\n\n```C# Snippet:PollyPolicy\ninternal class PollyPolicy : HttpPipelinePolicy\n{\n    public override void Process(HttpMessage message, ReadOnlyMemory<HttpPipelinePolicy> pipeline)\n    {\n        Policy.Handle<IOException>()\n            .Or<RequestFailedException>(ex => ex.Status == 0)\n            .OrResult<Response>(r => r.Status >= 400)\n            .WaitAndRetry(\n                new[]\n                {\n                    // some custom retry delay pattern\n                    TimeSpan.FromSeconds(1),\n                    TimeSpan.FromSeconds(2),\n                    TimeSpan.FromSeconds(3)\n                },\n                onRetry: (result, _) =>\n                {\n                    // Since we are overriding the RetryPolicy, it is our responsibility to increment the RetryNumber\n                    // that other policies in the pipeline may be depending on.\n                    var context = message.ProcessingContext;\n                    context.RetryNumber++;\n                }\n            )\n            .Execute(() =>\n            {\n                ProcessNext(message, pipeline);\n                return message.Response;\n            });\n    }\n\n    public override ValueTask ProcessAsync(HttpMessage message, ReadOnlyMemory<HttpPipelinePolicy> pipeline)\n    {\n        // async version omitted for brevity\n        throw new NotImplementedException();\n    }\n}\n```\n\nTo set the policy, use the `RetryPolicy` property of client options class.\n```C# Snippet:SetPollyRetryPolicy\nSecretClientOptions options = new SecretClientOptions()\n{\n    RetryPolicy = new PollyPolicy()\n};\n```\n\n> **_A note to library authors:_**\nLibrary-specific response classifiers _will_ be respected if a user sets a custom policy deriving from `RetryPolicy` as long as they call into the base `ShouldRetry` method. If a user doesn't call the base method, or sets a `HttpPipelinePolicy` in the `RetryPolicy` property, then the library-specific response classifiers _will not_ be respected. \n\n## User provided HttpClient instance\n\n```C# Snippet:SettingHttpClient\nusing HttpClient client = new HttpClient();\n\nSecretClientOptions options = new SecretClientOptions\n{\n    Transport = new HttpClientTransport(client)\n};\n```\n\n## Configuring a proxy\n\n```C# Snippet:HttpClientProxyConfiguration\nusing HttpClientHandler handler = new HttpClientHandler()\n{\n    Proxy = new WebProxy(new Uri(\"http://example.com\"))\n};\n\nSecretClientOptions options = new SecretClientOptions\n{\n    Transport = new HttpClientTransport(handler)\n};\n```\n\n## Configuring a proxy using environment variables\n\nYou can also configure a proxy using the following environment variables:\n\n* `HTTP_PROXY`: the proxy server used on HTTP requests.\n* `HTTPS_PROXY`: the proxy server used on HTTPS requests.\n* `ALL_PROXY`: the proxy server used on HTTP and HTTPS requests in case `HTTP_PROXY` or `HTTPS_PROXY` are not defined.\n* `NO_PROXY`: a comma-separated list of hostnames that should be excluded from proxying.\n\n**Warning:** setting these environment variables will affect every new client created within the current process.\n", "repo_name": "core/Azure.Core/samples/Configuration.md", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Configuration.md", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.CosmosDBForPostgreSql.csproj\" />\n  </ItemGroup>\n</Project>", "repo_name": "cosmosdbforpostgresql/Azure.ResourceManager.CosmosDBForPostgreSql/samples/Azure.ResourceManager.CosmosDBForPostgreSql.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/cosmosdbforpostgresql/Azure.ResourceManager.CosmosDBForPostgreSql/samples/Azure.ResourceManager.CosmosDBForPostgreSql.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\" />\n    <PackageReference Include=\"NUnit\" />\n    <PackageReference Include=\"NUnit3TestAdapter\" />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.CostManagement.csproj\" />\n  </ItemGroup>\n</Project>", "repo_name": "costmanagement/Azure.ResourceManager.CostManagement/samples/Azure.ResourceManager.CostManagement.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/costmanagement/Azure.ResourceManager.CostManagement/samples/Azure.ResourceManager.CostManagement.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.CustomerInsights.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "customer-insights/Azure.ResourceManager.CustomerInsights/samples/Azure.ResourceManager.CustomerInsights.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/customer-insights/Azure.ResourceManager.CustomerInsights/samples/Azure.ResourceManager.CustomerInsights.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "<Project Sdk=\"Microsoft.NET.Sdk\\\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"/>\n    <PackageReference Include=\"NUnit3TestAdapter\"/>\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.DataBox.csproj\"/>\n  </ItemGroup>\n</Project>\n", "repo_name": "databox/Azure.ResourceManager.DataBox/samples/Azure.ResourceManager.DataBox.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/databox/Azure.ResourceManager.DataBox/samples/Azure.ResourceManager.DataBox.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.DataBoxEdge.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "databoxedge/Azure.ResourceManager.DataBoxEdge/samples/Azure.ResourceManager.DataBoxEdge.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/databoxedge/Azure.ResourceManager.DataBoxEdge/samples/Azure.ResourceManager.DataBoxEdge.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "<Project Sdk=\"Microsoft.NET.Sdk\\\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"/>\n    <PackageReference Include=\"NUnit3TestAdapter\"/>\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.Datadog.csproj\"/>\n  </ItemGroup>\n</Project>\n", "repo_name": "datadog/Azure.ResourceManager.Datadog/samples/Azure.ResourceManager.Datadog.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/datadog/Azure.ResourceManager.Datadog/samples/Azure.ResourceManager.Datadog.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.DataFactory.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "datafactory/Azure.ResourceManager.DataFactory/samples/Azure.ResourceManager.DataFactory.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/datafactory/Azure.ResourceManager.DataFactory/samples/Azure.ResourceManager.DataFactory.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "<Project Sdk=\"Microsoft.NET.Sdk\\\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"/>\n    <PackageReference Include=\"NUnit3TestAdapter\"/>\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.DataLakeAnalytics.csproj\"/>\n  </ItemGroup>\n</Project>\n", "repo_name": "datalake-analytics/Azure.ResourceManager.DataLakeAnalytics/samples/Azure.ResourceManager.DataLakeAnalytics.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/datalake-analytics/Azure.ResourceManager.DataLakeAnalytics/samples/Azure.ResourceManager.DataLakeAnalytics.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "<Project Sdk=\"Microsoft.NET.Sdk\\\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"/>\n    <PackageReference Include=\"NUnit3TestAdapter\"/>\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.DataMigration.csproj\"/>\n  </ItemGroup>\n</Project>\n", "repo_name": "datamigration/Azure.ResourceManager.DataMigration/samples/Azure.ResourceManager.DataMigration.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/datamigration/Azure.ResourceManager.DataMigration/samples/Azure.ResourceManager.DataMigration.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.DataShare.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "datashare/Azure.ResourceManager.DataShare/samples/Azure.ResourceManager.DataShare.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/datashare/Azure.ResourceManager.DataShare/samples/Azure.ResourceManager.DataShare.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "<Project Sdk=\"Microsoft.NET.Sdk\\\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"/>\n    <PackageReference Include=\"NUnit3TestAdapter\"/>\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.DeploymentManager.csproj\"/>\n  </ItemGroup>\n</Project>\n", "repo_name": "deploymentmanager/Azure.ResourceManager.DeploymentManager/samples/Azure.ResourceManager.DeploymentManager.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/deploymentmanager/Azure.ResourceManager.DeploymentManager/samples/Azure.ResourceManager.DeploymentManager.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "<Project Sdk=\"Microsoft.NET.Sdk\\\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"/>\n    <PackageReference Include=\"NUnit3TestAdapter\"/>\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.DesktopVirtualization.csproj\"/>\n  </ItemGroup>\n</Project>\n", "repo_name": "desktopvirtualization/Azure.ResourceManager.DesktopVirtualization/samples/Azure.ResourceManager.DesktopVirtualization.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/desktopvirtualization/Azure.ResourceManager.DesktopVirtualization/samples/Azure.ResourceManager.DesktopVirtualization.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "---\npage_type: sample\nlanguages:\n- csharp\nproducts:\n# Including relevant stubs from https://review.docs.microsoft.com/help/contribute/metadata-taxonomies#product\n- azure\nname: Azure.Developer.DevCenter samples for .NET\ndescription: Samples for the Azure.Developer.DevCenter client library.\n---\n\n# Azure.Developer.DevCenter Samples\n\n* [Create and delete a Dev Box](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/devcenter/Azure.Developer.DevCenter/samples/Sample_CreateDeleteDevBoxAsync.md)\n* [Create and delete an Environment](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/devcenter/Azure.Developer.DevCenter/samples/Sample_CreateDeleteDevBoxAsync.md)\n\n", "repo_name": "devcenter/Azure.Developer.DevCenter/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/devcenter/Azure.Developer.DevCenter/samples", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.DevCenter.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "devcenter/Azure.ResourceManager.DevCenter/samples/Azure.ResourceManager.DevCenter.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/devcenter/Azure.ResourceManager.DevCenter/samples/Azure.ResourceManager.DevCenter.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.DeviceProvisioningServices.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "deviceprovisioningservices/Azure.ResourceManager.DeviceProvisioningServices/samples/Azure.ResourceManager.DeviceProvisioningServices.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/deviceprovisioningservices/Azure.ResourceManager.DeviceProvisioningServices/samples/Azure.ResourceManager.DeviceProvisioningServices.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "---\npage_type: sample\nlanguages:\n- csharp\nproducts:\n- azure\n- azure-iot\nname: Azure.IoT.DeviceUpdate samples for .NET\ndescription: Samples for the Azure.IoT.DeviceUpdate client library\n---\n\n# Device Update for IoT Hub client SDK samples\n\n - [Simple device update enumerations](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/deviceupdate/Azure.IoT.DeviceUpdate/samples/Sample1_HelloWorld.md)\n - [Get device update metadata and device update files metadata](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/deviceupdate/Azure.IoT.DeviceUpdate/samples/Sample2_GetUpdates.md)\n - [Import new device update](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/deviceupdate/Azure.IoT.DeviceUpdate/samples/Sample3_ImportUpdate.md)\n - [Delete existing device update](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/deviceupdate/Azure.IoT.DeviceUpdate/samples/Sample4_DeleteUpdate.md)\n - [Get device information](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/deviceupdate/Azure.IoT.DeviceUpdate/samples/Sample5_GetDevice.md)\n - [Deploy device update](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/deviceupdate/Azure.IoT.DeviceUpdate/samples/Sample6_DeployUpdate.md)\n", "repo_name": "deviceupdate/Azure.IoT.DeviceUpdate/samples/Readme.md", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/deviceupdate/Azure.IoT.DeviceUpdate/samples/Readme.md", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.DeviceUpdate.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "deviceupdate/Azure.ResourceManager.DeviceUpdate/samples/Azure.ResourceManager.DeviceUpdate.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/deviceupdate/Azure.ResourceManager.DeviceUpdate/samples/Azure.ResourceManager.DeviceUpdate.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.DevSpaces.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "devspaces/Azure.ResourceManager.DevSpaces/samples/Azure.ResourceManager.DevSpaces.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/devspaces/Azure.ResourceManager.DevSpaces/samples/Azure.ResourceManager.DevSpaces.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.DevTestLabs.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "devtestlabs/Azure.ResourceManager.DevTestLabs/samples/Azure.ResourceManager.DevTestLabs.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/devtestlabs/Azure.ResourceManager.DevTestLabs/samples/Azure.ResourceManager.DevTestLabs.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "# Introduction\n\nAzure Digital Twins is a developer platform for next-generation IoT solutions that lets you create, run, and manage digital representations of your business environment, securely and efficiently in the cloud. With Azure Digital Twins, creating live operational state representations is quick and cost-effective, and digital representations stay current with real-time data from IoT and other data sources. If you are new to Azure Digital Twins and would like to learn more about the platform, please make sure you check out the Azure Digital Twins [official documentation page](https://docs.microsoft.com/azure/digital-twins/overview). \n\nFor an introduction on how to program against the Azure Digital Twins service, visit the [coding tutorial page](https://docs.microsoft.com/azure/digital-twins/tutorial-code) for an easy step-by-step guide. Visit [this tutorial](https://docs.microsoft.com/azure/digital-twins/tutorial-command-line-app) to learn how to interact with an Azure Digital Twin instance using a command-line client application. Finally, for a quick guide on how to build an end-to-end Azure Digital Twins solution that is driven by live data from your environment, make sure you check out [this helpful guide](https://docs.microsoft.com/azure/digital-twins/tutorial-end-to-end).\n\nThe guides mentioned above can help you get started with key elements of Azure Digital Twins, such as creating Azure Digital Twins instances, models, twin graphs, etc. Use this samples guide below to familiarize yourself with the various APIs that help you program against Azure Digital Twins.\n\n# Digital Twins Samples\n\nYou can explore the digital twins APIs (using the client library) using the samples project.\n\nThe samples project demonstrates the following:\n\n- Instantiate the client\n- Create, get, and decommission models\n- Create, query, and delete a digital twin\n- Get and update components for a digital twin\n- Create, get, and delete relationships between digital twins\n- Create, get, and delete event routes for digital twin\n- Publish telemetry messages to a digital twin and digital twin component\n\n## Creating the digital twins client\n\n### Simple creation\n\nTo create a new digital twins client, you need the endpoint to an Azure Digital Twin instance and credentials.\nIn the sample below, you can set `AdtEndpoint`, `TenantId`, `ClientId`, and `ClientSecret` as command-line arguments.\nThe client requires an instance of [TokenCredential](https://docs.microsoft.com/dotnet/api/azure.core.tokencredential?view=azure-dotnet).\nIn this samples, we illustrate how to use one derived class: ClientSecretCredential.\n\n> Note: In order to access the data plane for the Digital Twins service, the entity must be given permissions.\n> To do this, use the Azure CLI command: `az dt rbac assign-role --assignee '<user-email | application-id>' --role owner -n '<your-digital-twins-instance>'`\n\n```C# Snippet:DigitalTwinsSampleCreateServiceClientWithClientSecret\n// DefaultAzureCredential supports different authentication mechanisms and determines the appropriate credential type based of the environment it is executing in.\n// It attempts to use multiple credential types in an order until it finds a working credential.\nTokenCredential tokenCredential = new DefaultAzureCredential();\n\nvar client = new DigitalTwinsClient(\n    new Uri(adtEndpoint),\n    tokenCredential);\n```\n\n### Override options\n\nIf you need to override pipeline behavior, such as provide your own HttpClient instance, you can do that via the other constructor that takes a\n[DigitalTwinsClientOptions](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/digitaltwins/Azure.DigitalTwins.Core/src/DigitalTwinsClientOptions.cs) parameter.\nIt provides an opportunity to override default behavior including:\n\n- Overriding [transport](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Pipeline.md)\n- Enabling [diagnostics](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md)\n- Controlling [retry strategy](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Configuration.md)\n- Specifying API version\n- Object serializer (see below)\n\n#### Object serializer\n\nThe digital twins client has methods that will serialize your custom digital twins and relationship types for transport, and deserialize the response back to a type specified by you.\nThe default object serializer, [JsonObjectSerializer](https://docs.microsoft.com/dotnet/api/azure.core.serialization.jsonobjectserializer?view=azure-dotnet),\nworks using the `System.Text.Json` library.\nIt uses a default [JsonSerializerOptions](https://docs.microsoft.com/dotnet/api/system.text.json.jsonserializeroptions?view=net-5.0) instance.\n\nSet the `Serializer` property to a custom instance of `JsonObjectSerializer` or your own implementation that inherits from\n[ObjectSerializer](https://docs.microsoft.com/dotnet/api/azure.core.serialization.objectserializer?view=azure-dotnet).\n\nOne reason for customizing would be to provide custom de/serialization settings, for example setting the `IgnoreNullValues` property to `true`.\nSee more examples and options of working with `JsonSerializerOptions` [here](https://docs.microsoft.com/dotnet/standard/serialization/system-text-json-how-to?pivots=dotnet-5-0#ignore-all-null-value-properties).\nThis would prevent unset properties on your digital twin or relationship from being included in the payload sent to the service.\n\n## Create, list, decommission, and delete models\n\n### Create models\n\nLet's create models using the code below. You need to pass in `List<string>` containing list of json models.\nCheck out sample models [here](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/digitaltwins/Azure.DigitalTwins.Core/samples/DigitalTwinsClientSample/DTDL/Models).\n\n```C# Snippet:DigitalTwinsSampleCreateModels\nawait client.CreateModelsAsync(new[] { newComponentModelPayload, newModelPayload });\nConsole.WriteLine($\"Created models '{componentModelId}' and '{sampleModelId}'.\");\n```\n\n### List models\n\nUsing `GetModelsAsync`, all created models are returned as `AsyncPageable<DigitalTwinsModelData>`.\n\n```C# Snippet:DigitalTwinsSampleGetModels\nAsyncPageable<DigitalTwinsModelData> allModels = client.GetModelsAsync();\nawait foreach (DigitalTwinsModelData model in allModels)\n{\n    Console.WriteLine($\"Retrieved model '{model.Id}', \" +\n        $\"display name '{model.LanguageDisplayNames[\"en\"]}', \" +\n        $\"uploaded on '{model.UploadedOn}', \" +\n        $\"and decommissioned '{model.Decommissioned}'\");\n}\n```\n\nUse `GetModelAsync` with model's unique identifier to get a specific model.\n\n```C# Snippet:DigitalTwinsSampleGetModel\nResponse<DigitalTwinsModelData> sampleModelResponse = await client.GetModelAsync(sampleModelId);\nConsole.WriteLine($\"Retrieved model '{sampleModelResponse.Value.Id}'.\");\n```\n\n### Decommission models\n\nTo decommision a model, pass in a model Id for the model you want to decommision.\n\n```C# Snippet:DigitalTwinsSampleDecommisionModel\ntry\n{\n    await client.DecommissionModelAsync(sampleModelId);\n    Console.WriteLine($\"Decommissioned model '{sampleModelId}'.\");\n}\ncatch (RequestFailedException ex)\n{\n    FatalError($\"Failed to decommision model '{sampleModelId}' due to:\\n{ex}\");\n}\n```\n\n### Delete models\n\nTo delete a model, pass in a model Id for the model you want to delete.\n\n```C# Snippet:DigitalTwinsSampleDeleteModel\ntry\n{\n    await client.DeleteModelAsync(sampleModelId);\n    Console.WriteLine($\"Deleted model '{sampleModelId}'.\");\n}\ncatch (Exception ex)\n{\n    FatalError($\"Failed to delete model '{sampleModelId}' due to:\\n{ex}\");\n}\n```\n\n## Create and delete digital twins\n\n### Create digital twins\n\nFor Creating Twin you will need to provide Id of a digital Twin such as `myTwin` and the application/json digital twin based on the model created earlier. You can look at sample application/json [here](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/digitaltwins/Azure.DigitalTwins.Core/samples/DigitalTwinsClientSample/DTDL/DigitalTwins \"DigitalTwin\").\n\nOne option is to use the provided class BasicDigitalTwin for serialization and deserialization.\nIt uses functionality from the `System.Text.Json` library to maintain any unmapped json properties to a dictionary.\n\n```C# Snippet:DigitalTwinsSampleCreateBasicTwin\n// Create digital twin with component payload using the BasicDigitalTwin serialization helper\n\nvar basicTwin = new BasicDigitalTwin\n{\n    Id = basicDtId,\n    // model Id of digital twin\n    Metadata =\n    {\n        ModelId = modelId,\n        PropertyMetadata = new Dictionary<string, DigitalTwinPropertyMetadata>\n        {\n            {\n                \"Prop2\",\n                new DigitalTwinPropertyMetadata\n                {\n                    // must always be serialized as ISO 8601\n                    SourceTime = DateTimeOffset.UtcNow,\n                }\n            }\n        },\n    },\n    Contents =\n    {\n        // digital twin properties\n        { \"Prop1\", \"Value1\" },\n        { \"Prop2\", 987 },\n        // component\n        {\n            \"Component1\",\n            new BasicDigitalTwinComponent\n            {\n                // writeable component metadata\n                Metadata =  new Dictionary<string, DigitalTwinPropertyMetadata>\n                {\n                    {\n                        \"ComponentProp2\",\n                        new DigitalTwinPropertyMetadata\n                        {\n                            // must always be serialized as ISO 8601\n                            SourceTime = DateTimeOffset.UtcNow,\n                        }\n                    }\n                },\n                // component properties\n                Contents =\n                {\n                    { \"ComponentProp1\", \"Component value 1\" },\n                    { \"ComponentProp2\", 123 },\n                },\n            }\n        },\n    },\n};\n\nResponse<BasicDigitalTwin> createDigitalTwinResponse = await client.CreateOrReplaceDigitalTwinAsync(basicDtId, basicTwin);\nConsole.WriteLine($\"Created digital twin '{createDigitalTwinResponse.Value.Id}'.\");\n```\n\nAlternatively, you can create your own custom data types to serialize and deserialize your digital twins.\nBy specifying your properties and types directly, it requires less code or knowledge of the type for interaction.\nYou can review the [CustomDigitalTwin definition](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/digitaltwins/Azure.DigitalTwins.Core/samples/DigitalTwinsClientSample/CustomDigitalTwin.cs).\n\n```C# Snippet:DigitalTwinsSampleCreateCustomTwin\nvar customTwin = new CustomDigitalTwin\n{\n    Id = customDtId,\n    Metadata = { ModelId = modelId },\n    Prop1 = \"Prop1 val\",\n    Prop2 = 987,\n    Component1 = new MyCustomComponent\n    {\n        ComponentProp1 = \"Component prop1 val\",\n        ComponentProp2 = 123,\n    },\n};\nResponse<CustomDigitalTwin> createCustomDigitalTwinResponse = await client.CreateOrReplaceDigitalTwinAsync(customDtId, customTwin);\nConsole.WriteLine($\"Created digital twin '{createCustomDigitalTwinResponse.Value.Id}'.\");\n```\n\n### Get and deserialize a digital twin\n\n\nYou can get a digital twin and deserialize it into a BasicDigitalTwin.\nIt works well for basic stuff, but as you can see it gets more difficult when delving into more complex properties, like components.\n\n```C# Snippet:DigitalTwinsSampleGetBasicDigitalTwin\nResponse<BasicDigitalTwin> getBasicDtResponse = await client.GetDigitalTwinAsync<BasicDigitalTwin>(basicDtId);\nBasicDigitalTwin basicDt = getBasicDtResponse.Value;\n\n// Must cast Component1 as a JsonElement and get its raw text in order to deserialize it as a dictionary\nstring component1RawText = ((JsonElement)basicDt.Contents[\"Component1\"]).GetRawText();\nvar component1 = JsonSerializer.Deserialize<BasicDigitalTwinComponent>(component1RawText);\n\nConsole.WriteLine($\"Retrieved and deserialized digital twin {basicDt.Id}:\\n\\t\" +\n    $\"ETag: {basicDt.ETag}\\n\\t\" +\n    $\"ModelId: {basicDt.Metadata.ModelId}\\n\\t\" +\n    $\"LastUpdatedOn: {basicDt.LastUpdatedOn}\\n\\t\" +\n    $\"Prop1: {basicDt.Contents[\"Prop1\"]}, last updated on {basicDt.Metadata.PropertyMetadata[\"Prop1\"].LastUpdatedOn}\\n\\t\" +\n    $\"Prop2: {basicDt.Contents[\"Prop2\"]}, last updated on {basicDt.Metadata.PropertyMetadata[\"Prop2\"].LastUpdatedOn} and sourced at {basicDt.Metadata.PropertyMetadata[\"Prop2\"].SourceTime}\\n\\t\" +\n    $\"Component1.LastUpdatedOn: {component1.LastUpdatedOn}\\n\\t\" +\n    $\"Component1.Prop1: {component1.Contents[\"ComponentProp1\"]}, last updated on: {component1.Metadata[\"ComponentProp1\"].LastUpdatedOn}\\n\\t\" +\n    $\"Component1.Prop2: {component1.Contents[\"ComponentProp2\"]}, last updated on: {component1.Metadata[\"ComponentProp2\"].LastUpdatedOn} and sourced at: {component1.Metadata[\"ComponentProp2\"].SourceTime}\");\n```\n\nGetting and deserializing a digital twin into a custom data type is extremely easy.\nCustom types provide the best possible experience.\n\n```C# Snippet:DigitalTwinsSampleGetCustomDigitalTwin\nResponse<CustomDigitalTwin> getCustomDtResponse = await client.GetDigitalTwinAsync<CustomDigitalTwin>(customDtId);\nCustomDigitalTwin customDt = getCustomDtResponse.Value;\nConsole.WriteLine($\"Retrieved and deserialized digital twin {customDt.Id}:\\n\\t\" +\n    $\"ETag: {customDt.ETag}\\n\\t\" +\n    $\"ModelId: {customDt.Metadata.ModelId}\\n\\t\" +\n    $\"Prop1: [{customDt.Prop1}] last updated on {customDt.Metadata.Prop1.LastUpdatedOn}\\n\\t\" +\n    $\"Prop2: [{customDt.Prop2}] last updated on {customDt.Metadata.Prop2.LastUpdatedOn}\\n\\t\" +\n    $\"ComponentProp1: [{customDt.Component1.ComponentProp1}] last updated {customDt.Component1.Metadata.ComponentProp1.LastUpdatedOn}\\n\\t\" +\n    $\"ComponentProp2: [{customDt.Component1.ComponentProp2}] last updated {customDt.Component1.Metadata.ComponentProp2.LastUpdatedOn}\");\n```\n\n### Query digital twins\n\nQuery the Azure Digital Twins instance for digital twins using the [Azure Digital Twins Query Store lanaguage](https://review.docs.microsoft.com/azure/digital-twins-v2/concepts-query-language?branch=pr-en-us-114648). Query calls support paging. Here's an example of how to query for digital twins and how to iterate over the results.\n\n```C# Snippet:DigitalTwinsSampleQueryTwins\n// This code snippet demonstrates the simplest way to iterate over the digital twin results, where paging\n// happens under the covers.\nAsyncPageable<BasicDigitalTwin> asyncPageableResponse = client.QueryAsync<BasicDigitalTwin>(\"SELECT * FROM digitaltwins\");\n\n// Iterate over the twin instances in the pageable response.\n// The \"await\" keyword here is required because new pages will be fetched when necessary,\n// which involves a request to the service.\nawait foreach (BasicDigitalTwin twin in asyncPageableResponse)\n{\n    Console.WriteLine($\"Found digital twin '{twin.Id}'\");\n}\n```\n\nThe SDK also allows you to extract the `query-charge` header from the pageable response. Here's an example of how to query for digital twins and how to iterate over the pageable response to extract the `query-charge` header.\n\n```C# Snippet:DigitalTwinsSampleQueryTwinsWithQueryCharge\n// This code snippet demonstrates how you could extract the query charges incurred when calling\n// the query API. It iterates over the response pages first to access to the query-charge header,\n// and then the digital twin results within each page.\n\nAsyncPageable<BasicDigitalTwin> asyncPageableResponseWithCharge = client.QueryAsync<BasicDigitalTwin>(\"SELECT * FROM digitaltwins\");\nint pageNum = 0;\n\n// The \"await\" keyword here is required as a call is made when fetching a new page.\nawait foreach (Page<BasicDigitalTwin> page in asyncPageableResponseWithCharge.AsPages())\n{\n    Console.WriteLine($\"Page {++pageNum} results:\");\n\n    // Extract the query-charge header from the page\n    if (QueryChargeHelper.TryGetQueryCharge(page, out float queryCharge))\n    {\n        Console.WriteLine($\"Query charge was: {queryCharge}\");\n    }\n\n    // Iterate over the twin instances.\n    // The \"await\" keyword is not required here as the paged response is local.\n    foreach (BasicDigitalTwin twin in page.Values)\n    {\n        Console.WriteLine($\"Found digital twin '{twin.Id}'\");\n    }\n}\n```\n\n### Delete digital twins\n\nDelete a digital twin simply by providing Id of a digital twin as below.\n\n```C# Snippet:DigitalTwinsSampleDeleteTwin\nawait client.DeleteDigitalTwinAsync(digitalTwinId);\nConsole.WriteLine($\"Deleted digital twin '{digitalTwinId}'.\");\n```\n\n## Get and update digital twin components\n\n### Update digital twin components\n\nTo update a component or in other words to replace, remove and/or add a component property or subproperty within Digital Twin, you would need Id of a digital twin, component name and application/json-patch+json operations to be performed on the specified digital twin's component. Here is the sample code on how to do it.\n\n```C# Snippet:DigitalTwinsSampleUpdateComponent\n// Update Component1 by replacing the property ComponentProp1 value,\n// using an optional utility to build the payload.\nvar componentJsonPatchDocument = new JsonPatchDocument();\ncomponentJsonPatchDocument.AppendReplace(\"/ComponentProp1\", \"Some new value\");\nawait client.UpdateComponentAsync(basicDtId, \"Component1\", componentJsonPatchDocument);\nConsole.WriteLine($\"Updated component for digital twin '{basicDtId}'.\");\n```\n\n### Get digital twin components\n\nGet a component by providing name of a component and Id of digital twin to which it belongs.\n\n```C# Snippet:DigitalTwinsSampleGetComponent\nawait client.GetComponentAsync<MyCustomComponent>(basicDtId, SamplesConstants.ComponentName);\nConsole.WriteLine($\"Retrieved component for digital twin '{basicDtId}'.\");\n```\n\n## Create, get,  list and delete digital twin relationships\n\n### Create digital twin relationships\n\n`CreateRelationshipAsync` creates a relationship on a digital twin provided with Id of a digital twin, name of relationship such as \"contains\", Id of an relationship such as \"FloorContainsRoom\" and an application/json relationship to be created. Must contain property with key \"$targetId\" to specify the target of the relationship. Sample payloads for relationships can be found [here](https://github.com/Azure/azure-sdk-for-net-pr/blob/feature/IoT-ADT/sdk/iot/Azure.Iot.DigitalTwins/samples/DigitalTwinServiceClientSample/DTDL/Relationships/HospitalRelationships.json \"RelationshipExamples\").\n\nOne option is to use the provided class BasicRelationship for serialization and deserialization. \nIt uses functionality from the `System.Text.Json` library to maintain any unmapped json properties to a dictionary.\n\n```C# Snippet:DigitalTwinsSampleCreateBasicRelationship\nvar buildingFloorRelationshipPayload = new BasicRelationship\n{\n    Id = \"buildingFloorRelationshipId\",\n    SourceId = \"buildingTwinId\",\n    TargetId = \"floorTwinId\",\n    Name = \"contains\",\n    Properties =\n    {\n        { \"Prop1\", \"Prop1 value\" },\n        { \"Prop2\", 6 }\n    }\n};\n\nResponse<BasicRelationship> createBuildingFloorRelationshipResponse = await client\n    .CreateOrReplaceRelationshipAsync<BasicRelationship>(\"buildingTwinId\", \"buildingFloorRelationshipId\", buildingFloorRelationshipPayload);\nConsole.WriteLine($\"Created a digital twin relationship '{createBuildingFloorRelationshipResponse.Value.Id}' \" +\n    $\"from twin '{createBuildingFloorRelationshipResponse.Value.SourceId}' to twin '{createBuildingFloorRelationshipResponse.Value.TargetId}'.\");\n```\n\nAlternatively, you can create your own custom data types to serialize and deserialize your relationships.\nBy specifying your properties and types directly, it requires less code or knowledge of the type for interaction.\nYou can review the [CustomRelationship definition](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/digitaltwins/Azure.DigitalTwins.Core/samples/DigitalTwinsClientSample/CustomRelationship.cs).\n\n```C# Snippet:DigitalTwinsSampleCreateCustomRelationship\nvar floorBuildingRelationshipPayload = new CustomRelationship\n{\n    Id = \"floorBuildingRelationshipId\",\n    SourceId = \"floorTwinId\",\n    TargetId = \"buildingTwinId\",\n    Name = \"containedIn\",\n    Prop1 = \"Prop1 val\",\n    Prop2 = 4\n};\n\nResponse<CustomRelationship> createCustomRelationshipResponse = await client\n    .CreateOrReplaceRelationshipAsync<CustomRelationship>(\"floorTwinId\", \"floorBuildingRelationshipId\", floorBuildingRelationshipPayload);\nConsole.WriteLine($\"Created a digital twin relationship '{createCustomRelationshipResponse.Value.Id}' \" +\n    $\"from twin '{createCustomRelationshipResponse.Value.SourceId}' to twin '{createCustomRelationshipResponse.Value.TargetId}'.\");\n```\n\n### Get and deserialize a digital twin relationship\nYou can get a digital twin relationship and deserialize it into a BasicRelationship.\n\n```C# Snippet:DigitalTwinsSampleGetBasicRelationship\nResponse<BasicRelationship> getBasicRelationshipResponse = await client.GetRelationshipAsync<BasicRelationship>(\n    \"buildingTwinId\",\n    \"buildingFloorRelationshipId\");\nif (getBasicRelationshipResponse.GetRawResponse().Status == (int)HttpStatusCode.OK)\n{\n    BasicRelationship basicRelationship = getBasicRelationshipResponse.Value;\n    Console.WriteLine($\"Retrieved relationship '{basicRelationship.Id}' from twin {basicRelationship.SourceId}.\\n\\t\" +\n        $\"Prop1: {basicRelationship.Properties[\"Prop1\"]}\\n\\t\" +\n        $\"Prop2: {basicRelationship.Properties[\"Prop2\"]}\");\n}\n```\n\nGetting and deserializing a digital twin relationship into a custom data type is as easy.\n```C# Snippet:DigitalTwinsSampleGetCustomRelationship\nResponse<CustomRelationship> getCustomRelationshipResponse = await client.GetRelationshipAsync<CustomRelationship>(\n    \"floorTwinId\",\n    \"floorBuildingRelationshipId\");\nCustomRelationship getCustomRelationship = getCustomRelationshipResponse.Value;\nConsole.WriteLine($\"Retrieved and deserialized relationship '{getCustomRelationship.Id}' from twin '{getCustomRelationship.SourceId}'.\\n\\t\" +\n    $\"Prop1: {getCustomRelationship.Prop1}\\n\\t\" +\n    $\"Prop2: {getCustomRelationship.Prop2}\");\n```\n\n### List digital twin relationships\n\n`GetRelationshipsAsync` lists all the relationships of a digital twin. You can get digital twin relationships and deserialize them into `BasicRelationship`.\n\n```C# Snippet:DigitalTwinsSampleGetAllRelationships\nAsyncPageable<BasicRelationship> relationships = client.GetRelationshipsAsync<BasicRelationship>(\"buildingTwinId\");\nawait foreach (BasicRelationship relationship in relationships)\n{\n    Console.WriteLine($\"Retrieved relationship '{relationship.Id}' with source {relationship.SourceId}' and \" +\n        $\"target {relationship.TargetId}.\\n\\t\" +\n        $\"Prop1: {relationship.Properties[\"Prop1\"]}\\n\\t\" +\n        $\"Prop2: {relationship.Properties[\"Prop2\"]}\");\n}\n```\n\n`GetIncomingRelationshipsAsync` lists all incoming relationships of digital twin.\n\n```C# Snippet:DigitalTwinsSampleGetIncomingRelationships\nAsyncPageable<IncomingRelationship> incomingRelationships = client.GetIncomingRelationshipsAsync(\"buildingTwinId\");\n\nawait foreach (IncomingRelationship incomingRelationship in incomingRelationships)\n{\n    Console.WriteLine($\"Found an incoming relationship '{incomingRelationship.RelationshipId}' from '{incomingRelationship.SourceId}'.\");\n}\n```\n\n### Delete a digital twin relationship\n\nTo delete all outgoing relationships for a digital twin, simply iterate over the relationships and delete them iteratively.\n\n```C# Snippet:DigitalTwinsSampleDeleteRelationship\nawait client.DeleteRelationshipAsync(\"buildingTwinId\", \"buildingFloorRelationshipId\");\nConsole.WriteLine($\"Deleted relationship 'buildingFloorRelationshipId'.\");\n```\n\n## Create, list, and delete event routes of digital twins\n\n### Create event routes\n\nTo create an event route, provide an Id of an event route such as \"sampleEventRoute\" and event route data containing the endpoint and optional filter like the example shown below.\n\n```C# Snippet:DigitalTwinsSampleCreateEventRoute\nstring eventFilter = \"$eventType = 'DigitalTwinTelemetryMessages' or $eventType = 'DigitalTwinLifecycleNotification'\";\nvar eventRoute = new DigitalTwinsEventRoute(eventhubEndpointName, eventFilter);\n\nawait client.CreateOrReplaceEventRouteAsync(_eventRouteId, eventRoute);\nConsole.WriteLine($\"Created event route '{_eventRouteId}'.\");\n```\n\nFor more information on the event route filter language, see the \"how to manage routes\" [filter events documentation](https://github.com/Azure/azure-digital-twins/blob/private-preview/Documentation/how-to-manage-routes.md#filter-events).\n\n### List event routes\n\nList a specific event route given event route Id or all event routes setting options with `GetEventRouteAsync` and `GetEventRoutesAsync`.\n\n```C# Snippet:DigitalTwinsSampleGetEventRoutes\nAsyncPageable<DigitalTwinsEventRoute> response = client.GetEventRoutesAsync();\nawait foreach (DigitalTwinsEventRoute er in response)\n{\n    Console.WriteLine($\"Event route '{er.Id}', endpoint name '{er.EndpointName}'\");\n}\n```\n\n### Delete event routes\n\nDelete an event route given event route Id.\n\n```C# Snippet:DigitalTwinsSampleDeleteEventRoute\nawait client.DeleteEventRouteAsync(_eventRouteId);\nConsole.WriteLine($\"Deleted event route '{_eventRouteId}'.\");\n```\n\n### Publish telemetry messages for a digital twin\n\nTo publish a telemetry message for a digital twin, you need to provide the digital twin Id, along with the payload on which telemetry that needs the update.\n\n```C# Snippet:DigitalTwinsSamplePublishTelemetry\n// construct your json telemetry payload by hand.\nawait client.PublishTelemetryAsync(twinId, Guid.NewGuid().ToString(), \"{\\\"Telemetry1\\\": 5}\");\nConsole.WriteLine($\"Published telemetry message to twin '{twinId}'.\");\n```\n\nYou can also publish a telemetry message for a specific component in a digital twin. In addition to the digital twin Id and payload, you need to specify the target component Id.\n\n```C# Snippet:DigitalTwinsSamplePublishComponentTelemetry\n// construct your json telemetry payload by serializing a dictionary.\nvar telemetryPayload = new Dictionary<string, int>\n{\n    { \"ComponentTelemetry1\", 9 }\n};\nawait client.PublishComponentTelemetryAsync(\n    twinId,\n    \"Component1\",\n    Guid.NewGuid().ToString(),\n    JsonSerializer.Serialize(telemetryPayload));\nConsole.WriteLine($\"Published component telemetry message to twin '{twinId}'.\");\n```\n", "repo_name": "digitaltwins/Azure.DigitalTwins.Core/samples/Readme.md", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/digitaltwins/Azure.DigitalTwins.Core/samples/Readme.md", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.DigitalTwins.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "digitaltwins/Azure.ResourceManager.DigitalTwins/samples/Azure.ResourceManager.DigitalTwins.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/digitaltwins/Azure.ResourceManager.DigitalTwins/samples/Azure.ResourceManager.DigitalTwins.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "<Project Sdk=\"Microsoft.NET.Sdk\\\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"/>\n    <PackageReference Include=\"NUnit3TestAdapter\"/>\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.Dns.csproj\"/>\n  </ItemGroup>\n</Project>\n", "repo_name": "dns/Azure.ResourceManager.Dns/samples/Azure.ResourceManager.Dns.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/dns/Azure.ResourceManager.Dns/samples/Azure.ResourceManager.Dns.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "<Project Sdk=\"Microsoft.NET.Sdk\\\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"/>\n    <PackageReference Include=\"NUnit3TestAdapter\"/>\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.DnsResolver.csproj\"/>\n  </ItemGroup>\n</Project>\n", "repo_name": "dnsresolver/Azure.ResourceManager.DnsResolver/samples/Azure.ResourceManager.DnsResolver.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/dnsresolver/Azure.ResourceManager.DnsResolver/samples/Azure.ResourceManager.DnsResolver.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "<Project Sdk=\"Microsoft.NET.Sdk\\\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"/>\n    <PackageReference Include=\"NUnit3TestAdapter\"/>\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.EdgeOrder.csproj\"/>\n  </ItemGroup>\n</Project>\n", "repo_name": "edgeorder/Azure.ResourceManager.EdgeOrder/samples/Azure.ResourceManager.EdgeOrder.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/edgeorder/Azure.ResourceManager.EdgeOrder/samples/Azure.ResourceManager.EdgeOrder.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "<Project Sdk=\"Microsoft.NET.Sdk\\\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"/>\n    <PackageReference Include=\"NUnit3TestAdapter\"/>\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.Elastic.csproj\"/>\n  </ItemGroup>\n</Project>\n", "repo_name": "elastic/Azure.ResourceManager.Elastic/samples/Azure.ResourceManager.Elastic.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/elastic/Azure.ResourceManager.Elastic/samples/Azure.ResourceManager.Elastic.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.ElasticSan.csproj\" />\n  </ItemGroup>\n</Project>", "repo_name": "elasticsan/Azure.ResourceManager.ElasticSan/samples/Azure.ResourceManager.ElasticSan.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/elasticsan/Azure.ResourceManager.ElasticSan/samples/Azure.ResourceManager.ElasticSan.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "---\npage_type: sample\nlanguages:\n- csharp\nproducts:\n- azure\n- azure-event-grid\nname: Azure Event Grid samples for .NET\ndescription: Samples for the Azure.Messaging.EventGrid client library\n---\n\n# Azure Event Grid SDK Samples\nBefore starting, take a look at the Azure Event Grid [README](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/eventgrid/Azure.Messaging.EventGrid/README.md) for more information on how to create an Event Grid custom topic or domain using the Azure portal/Azure CLI, and retrieving the designated endpoint and credential.\n\n- [Publishing Events to an Event Grid Topic](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/eventgrid/Azure.Messaging.EventGrid/samples/Sample1_PublishEventsToTopic.md)\n- [Publishing Events to an Event Grid Domain](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/eventgrid/Azure.Messaging.EventGrid/samples/Sample2_PublishEventsToDomain.md)\n- [Deserializing Events Delivered to Event Handlers ](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/eventgrid/Azure.Messaging.EventGrid/samples/Sample3_ParseAndDeserializeEvents.md)\n", "repo_name": "eventgrid/Azure.Messaging.EventGrid/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/eventgrid/Azure.Messaging.EventGrid/samples", "language": ["C#", ".NET"]}, {"README_text": "<Project Sdk=\"Microsoft.NET.Sdk\\\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"/>\n    <PackageReference Include=\"NUnit3TestAdapter\"/>\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.EventGrid.csproj\"/>\n  </ItemGroup>\n</Project>\n", "repo_name": "eventgrid/Azure.ResourceManager.EventGrid/samples/Azure.ResourceManager.EventGrid.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/eventgrid/Azure.ResourceManager.EventGrid/samples/Azure.ResourceManager.EventGrid.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "---\npage_type: sample\nlanguages:\n- csharp\nproducts:\n- azure\n- azure-event-hubs\nname: Samples for the Azure.Messaging.EventHubs.Processor client library\ndescription: Samples for the Azure.Messaging.EventHubs.Processor client library\n---\n\n# Azure.Messaging.EventHubs.Processor Samples\n\nThe Azure Event Hubs Processor client library offers samples in two forms.  Common application scenarios are presented as markdown documents, providing a detailed explanation of context while also demonstrating implementation details with snippets of code.  More specialized scenarios are presented as stand-alone projects to both illustrate the deeper end-to-end context and allow exploring interactively.\n\nThe markdown-based samples are ordered by increasing complexity, starting with more basic scenarios to help get started quickly.  Though each sample is independent, they will assume an understanding of the content discussed in earlier samples.\n\nEach of the application samples are intended to be self-contained and focused on illustrating one specific scenario.  The simplest way to begin is to launch the project for debugging in Visual Studio, or your preferred IDE, and provide the Event Hubs connection information in response to the prompts.  Each of these sample applications is accompanied by a dedicated README, offering more specific detail about its hosting needs and operation. \n\n## Getting started\n\n- **Azure Subscription:**  To use Azure services, including Azure Event Hubs, you'll need a subscription.  If you do not have an existing Azure account, you may sign up for a [free trial](https://azure.microsoft.com/free/dotnet/) or use your [Visual Studio Subscription](https://visualstudio.microsoft.com/subscriptions/) benefits when you [create an account](https://azure.microsoft.com/account)).\n\n- **Event Hubs namespace with an Event Hub:** To interact with Azure Event Hubs, you'll also need to have a namespace and Event Hub available.  If you are not familiar with creating Azure resources, you may wish to follow the step-by-step guide for [creating an Event Hub using the Azure portal](https://docs.microsoft.com/azure/event-hubs/event-hubs-create).  There, you can also find detailed instructions for using the Azure CLI, Azure PowerShell, or Azure Resource Manager (ARM) templates to create an Event Hub.\n\n- **Azure Storage account with blob storage:** To persist checkpoints as blobs in Azure Storage, you'll need to have an Azure Storage account with blobs available.  The Azure Storage account used for the processor should have soft delete and blob versioning disabled.  If you are not familiar with Azure Storage accounts, you may wish to follow the step-by-step guide for [creating a storage account using the Azure portal](https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?toc=%2Fazure%2Fstorage%2Fblobs%2Ftoc.json&tabs=azure-portal).  There, you can also find detailed instructions for using the Azure CLI, Azure PowerShell, or Azure Resource Manager (ARM) templates to create storage accounts.\n\n- **Azure Storage blob container:** Checkpoint and ownership data in Azure Storage will be written to blobs in a specific container.  The `EventProcessorClient` requires an existing container and will not implicitly create one to help guard against accidental misconfiguration.  It is recommended that you use a unique container for each Event Hub and consumer group combination.  If you are not familiar with Azure Storage containers, you may wish to refer to the documentation on [managing containers](https://docs.microsoft.com/azure/storage/blobs/storage-blob-container-create?tabs=dotnet).  There, you can find detailed instructions for using .NET, the Azure CLI, or Azure PowerShell to create a container.\n\n- **C# 8.0:** The Azure Event Hubs client library makes use of new features that were introduced in C# 8.0.  In order to take advantage of the C# 8.0 syntax, it is recommended that you compile using the [.NET Core SDK](https://dotnet.microsoft.com/download) 3.0 or higher with a [language version](https://docs.microsoft.com/dotnet/csharp/language-reference/configure-language-version#override-a-default) of `latest`. \n\n  Visual Studio users wishing to take full advantage of the C# 8.0 syntax will need to use Visual Studio 2019 or later.  Visual Studio 2019, including the free Community edition, can be downloaded [here](https://visualstudio.microsoft.com).  Users of Visual Studio 2017 can take advantage of the C# 8 syntax by making use of the [Microsoft.Net.Compilers NuGet package](https://www.nuget.org/packages/Microsoft.Net.Compilers/) and setting the language version, though the editing experience may not be ideal.\n\n  You can still use the library with previous C# language versions, but will need to manage asynchronous enumerable and asynchronous disposable members manually rather than benefiting from the new syntax.  You may still target any framework version supported by your .NET Core SDK, including earlier versions of .NET Core or the .NET framework.  For more information, see: [how to specify target frameworks](https://docs.microsoft.com/dotnet/standard/frameworks#how-to-specify-target-frameworks).  \n\nTo quickly create a basic set of resources in Azure and to receive a connection string for them, you can deploy our sample template by clicking:\n\n[![Deploy to Azure](https://aka.ms/deploytoazurebutton)](https://portal.azure.com/#create/Microsoft.Template/uri/https%3A%2F%2Fraw.githubusercontent.com%2FAzure%2Fazure-sdk-for-net%2Fmaster%2Fsdk%2Feventhub%2FAzure.Messaging.EventHubs.Processor%2Fassets%2Fsamples-azure-deploy.json)\n\n### Install the package\n\nInstall the Azure Event Hubs client library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.Messaging.EventHubs.Processor\n```\n\n### Authenticate the client\n\n#### Obtain an Event Hubs connection string\n\nFor the Event Hubs client library to interact with an Event Hub, it will need to understand how to connect and authorize with it.  The easiest means for doing so is to use a connection string, which is created automatically when creating an Event Hubs namespace.  If you aren't familiar with using connection strings with Event Hubs, you may wish to follow the step-by-step guide to [get an Event Hubs connection string](https://docs.microsoft.com/azure/event-hubs/event-hubs-get-connection-string).\n\n#### Obtain an Azure Storage connection string\n\nFor the event processor client to make use of Azure Storage blobs for checkpointing, it will need to understand how to connect to a storage account and authorize with it.  The most straightforward method of doing so is to use a connection string, which is generated at the time that the storage account is created.  If you aren't familiar with storage account connection string authorization in Azure, you may wish to follow the step-by-step guide to [configure Azure Storage connection strings](https://docs.microsoft.com/azure/storage/common/storage-configure-connection-string).\n\n## Common samples\n\n- [Hello world](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/eventhub/Azure.Messaging.EventHubs.Processor/samples/Sample01_HelloWorld.md)  \n  An introduction to the Event Processor client, illustrating how to create the client and perform basic operations.  \n  \n- [Event Processor Configuration](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/eventhub/Azure.Messaging.EventHubs.Processor/samples/Sample02_EventProcessorConfiguration.md)  \n  A demonstration of the options for customizing the Event Processor client configuration, such as specifying a proxy. \n  \n- [Event Processor Handlers](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/eventhub/Azure.Messaging.EventHubs.Processor/samples/Sample03_EventProcessorHandlers.md)  \n  A discussion of using event handlers for interacting with the Event Processor client as it is running, illustrating the available events and common usage scenarios like processing events, detecting errors, and specifying a position to begin reading events if a checkpoint does not exist.\n  \n- [Processing Events](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/eventhub/Azure.Messaging.EventHubs.Processor/samples/Sample04_ProcessingEvents.md)  \n  A deep dive into processing events, handling errors, and creating checkpoints using the Event Processor client. \n  \n- [Identity and Shared Access Credentials](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/eventhub/Azure.Messaging.EventHubs.Processor/samples/Sample05_IdentityAndSharedAccessCredentials.md)  \n  A discussion of the different types of authorization supported, focusing on identity-based credentials for Azure Active Directory and use the of shared access signatures and keys.\n  \n- [Requesting Azure Storage Service Versions](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/eventhub/Azure.Messaging.EventHubs.Processor/samples/Sample06_RequestingStorageServiceVersions.md)  \n  An illustration of configuring the Blob Storage client to use a specific version of the service, rather than the default (latest).  This is useful when the Azure host environment that you are targeting supports a different version of Blob Storage service than is available in the Azure public cloud, such as Azure Stack Hub 2002.\n\n- [Processing Events in Batches](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/eventhub/Azure.Messaging.EventHubs.Processor/samples/Sample07_BatchProcessing.md)  \n  A demonstration of how events can be processed in batches rather than individually.\n  \n- [Mocking Client Types](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/eventhub/Azure.Messaging.EventHubs.Processor/samples/Sample08_MockingClientTypes.md)  \n  A demonstration of how to mock the types in the Event Hubs Processor client library, focusing on common application scenarios.\n\n## Contributing  \n\nThis project welcomes contributions and suggestions.  Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\nPlease see our [contributing guide](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/eventhub/Azure.Messaging.EventHubs/CONTRIBUTING.md) for more information.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2Fsdk%2Feventhub%2FAzure.Messaging.EventHubs.Processor/samples/%2FREADME.png)\n", "repo_name": "eventhub/Azure.Messaging.EventHubs.Processor/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/eventhub/Azure.Messaging.EventHubs.Processor/samples", "language": ["C#", ".NET"]}, {"README_text": "---\npage_type: sample\nlanguages:\n- csharp\nproducts:\n- azure\n- azure-event-hubs\nname: Samples for the Azure.Messaging.EventHubs client library\ndescription: Samples for the Azure.Messaging.EventHubs client library\n---\n\n# Azure.Messaging.EventHubs Samples\n\nThe Azure Event Hubs client library offers samples in two forms. Common application scenarios are presented as markdown documents, providing a detailed explanation of context while also demonstrating implementation details with snippets of code.  More specialized scenarios are presented as stand-alone projects to both illustrate the deeper end-to-end context and allow exploring interactively.  \n\nThe markdown-based samples are ordered by increasing complexity, starting with more basic scenarios to help get started quickly.  Though each sample is independent, they will assume an understanding of the content discussed in earlier samples.\n\nEach of the application samples are intended to be self-contained and focused on illustrating one specific scenario.  The simplest way to begin is to launch the project for debugging in Visual Studio, or your preferred IDE, and provide the Event Hubs connection information in response to the prompts.  Each of these sample applications is accompanied by a dedicated README, offering more specific detail about its hosting needs and operation. \n\n## Getting started\n\n### Prerequisites\n\n- **Azure Subscription:**  To use Azure services, including Azure Event Hubs, you'll need a subscription.  If you do not have an existing Azure account, you may sign up for a [free trial](https://azure.microsoft.com/free/dotnet/) or use your [Visual Studio Subscription](https://visualstudio.microsoft.com/subscriptions/) benefits when you [create an account](https://azure.microsoft.com/account).\n\n- **Event Hubs namespace with an Event Hub:** To interact with Azure Event Hubs, you'll also need to have a namespace and Event Hub available.  If you are not familiar with creating Azure resources, you may wish to follow the step-by-step guide for [creating an Event Hub using the Azure portal](https://docs.microsoft.com/azure/event-hubs/event-hubs-create).  There, you can also find detailed instructions for using the Azure CLI, Azure PowerShell, or Azure Resource Manager (ARM) templates to create an Event Hub.\n\n- **C# 8.0:** The Azure Event Hubs client library makes use of new features that were introduced in C# 8.0.  In order to take advantage of the C# 8.0 syntax, it is recommended that you compile using the [.NET Core SDK](https://dotnet.microsoft.com/download) 3.0 or higher with a [language version](https://docs.microsoft.com/dotnet/csharp/language-reference/configure-language-version#override-a-default) of `latest`.\n\n  Visual Studio users wishing to take full advantage of the C# 8.0 syntax will need to use Visual Studio 2019 or later.  Visual Studio 2019, including the free Community edition, can be downloaded [here](https://visualstudio.microsoft.com).  Users of Visual Studio 2017 can take advantage of the C# 8 syntax by making use of the [Microsoft.Net.Compilers NuGet package](https://www.nuget.org/packages/Microsoft.Net.Compilers/) and setting the language version, though the editing experience may not be ideal.\n\n  You can still use the library with previous C# language versions, but will need to manage asynchronous enumerable and asynchronous disposable members manually rather than benefiting from the new syntax.  You may still target any framework version supported by your .NET Core SDK, including earlier versions of .NET Core or the .NET framework.  For more information, see: [how to specify target frameworks](https://docs.microsoft.com/dotnet/standard/frameworks#how-to-specify-target-frameworks).  \n\nTo quickly create a basic set of Event Hubs resources in Azure and to receive a connection string for them, you can deploy our sample template by clicking:\n\n[![Deploy to Azure](https://aka.ms/deploytoazurebutton)](https://portal.azure.com/#create/Microsoft.Template/uri/https%3A%2F%2Fraw.githubusercontent.com%2FAzure%2Fazure-sdk-for-net%2Fmaster%2Fsdk%2Feventhub%2FAzure.Messaging.EventHubs%2Fassets%2Fsamples-azure-deploy.json)\n\n### Install the package\n\nInstall the Azure Event Hubs client library for .NET with [NuGet](https://www.nuget.org/):\n\n```dotnetcli\ndotnet add package Azure.Messaging.EventHubs\n```\n\n### Authenticate the client\n\nFor the Event Hubs client library to interact with an Event Hub, it will need to understand how to connect and authorize with it.  The easiest means for doing so is to use a connection string, which is created automatically when creating an Event Hubs namespace.  If you aren't familiar with using connection strings with Event Hubs, you may wish to follow the step-by-step guide to [get an Event Hubs connection string](https://docs.microsoft.com/azure/event-hubs/event-hubs-get-connection-string).\n\n## Common samples\n\n- [Hello world](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/eventhub/Azure.Messaging.EventHubs/samples/Sample01_HelloWorld.md)  \n  An introduction to Event Hubs, illustrating the basic flow of events through an Event Hub, with the goal of quickly allowing you to view events being published and read from the Event Hubs service.  \n  \n- [Event Hubs Clients](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/eventhub/Azure.Messaging.EventHubs/samples/Sample02_EventHubsClients.md)  \n  An overview of the Event Hubs clients, detailing the available client types, the scenarios they serve, and demonstrating options for customizing their configuration, such as specifying a proxy.  \n\n- [Event Hubs Metadata](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/eventhub/Azure.Messaging.EventHubs/samples/Sample03_EventHubMetadata.md)  \n  A discussion of the metadata available for an Event Hub instance and demonstration of how to query and inspect the information.  \n  \n- [Publishing Events](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/eventhub/Azure.Messaging.EventHubs/samples/Sample04_PublishingEvents.md)  \n  A deep dive into publishing events using the Event Hubs client library, detailing the different options available and illustrating common scenarios.  \n  \n- [Reading Events](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/eventhub/Azure.Messaging.EventHubs/samples/Sample05_ReadingEvents.md)  \n  A deep dive into reading events using the Event Hubs client library, detailing the different options available and illustrating common scenarios.  \n  \n- [Identity and Shared Access Credentials](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/eventhub/Azure.Messaging.EventHubs/samples/Sample06_IdentityAndSharedAccessCredentials.md)  \n  A discussion of the different types of authorization supported, focusing on identity-based credentials for Azure Active Directory and use the of shared access signatures and keys.  \n  \n- [Earlier Language Versions](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/eventhub/Azure.Messaging.EventHubs/samples/Sample07_EarlierLanguageVersions.md)  \n  A demonstration of how to interact with the client library using earlier versions of C#, where newer syntax for asynchronous enumeration and disposal are not available.\n\n- [Building a Custom Event Processor using EventProcessor&lt;TPartition&gt;](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/eventhub/Azure.Messaging.EventHubs/samples/Sample08_CustomEventProcessor.md)  \n  An introduction to the `EventProcessor<TPartition>` base class which is used when building advanced processors which need full control over state management.\n\n- [Observable Event Data Batch](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/eventhub/Azure.Messaging.EventHubs/samples/Sample09_ObservableEventBatch.md)  \n  A demonstration of how to write an `ObservableEventDataBatch` class that wraps an `EventDataBatch` in order to allow an application to read events that have been added to a batch.\n\n- [Capturing Event Hubs logs using AzureEventSourceListener class](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/eventhub/Azure.Messaging.EventHubs/samples/Sample10_AzureEventSourceListener.md)  \n  A demonstration of how to use the [`AzureEventSourceListener`](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md#logging) from the `Azure.Core` package to capture logs emitted by the Event Hubs client library.\n  \n- [Mocking Client Types](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/eventhub/Azure.Messaging.EventHubs/samples/Sample11_MockingClientTypes.md)  \n  A demonstration of how to mock the types in the Event Hubs client library, focusing on common application scenarios.\n\n## Contributing  \n\nThis project welcomes contributions and suggestions.  Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\nPlease see our [contributing guide](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/eventhub/Azure.Messaging.EventHubs/CONTRIBUTING.md) for more information.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2Fsdk%2Feventhub%2FAzure.Messaging.EventHubs/samples/%2FREADME.png)\n", "repo_name": "eventhub/Azure.Messaging.EventHubs/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/eventhub/Azure.Messaging.EventHubs/samples", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.EventHubs.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "eventhub/Azure.ResourceManager.EventHubs/samples/Azure.ResourceManager.EventHubs.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/eventhub/Azure.ResourceManager.EventHubs/samples/Azure.ResourceManager.EventHubs.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.ExtendedLocations.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "extendedlocation/Azure.ResourceManager.ExtendedLocations/samples/Azure.ResourceManager.ExtendedLocations.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/extendedlocation/Azure.ResourceManager.ExtendedLocations/samples/Azure.ResourceManager.ExtendedLocations.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Azure.WebJobs;\nusing Microsoft.Azure.WebJobs.Extensions.Http;\nusing Microsoft.AspNetCore.Http;\nusing Azure.Storage.Blobs;\nusing System.Linq;\n\nnamespace Azure.Extensions.WebJobs.Sample\n{\n    #region Snippet:AzureClientInFunction\n    public static class Function1\n    {\n        [FunctionName(\"Function1\")]\n        public static IActionResult Run(\n            [HttpTrigger(AuthorizationLevel.Anonymous, \"get\", \"post\", Route = null)] HttpRequest req,\n            [AzureClient(\"MyStorageConnection\")] BlobServiceClient client)\n        {\n            return new OkObjectResult(client.GetBlobContainers().ToArray());\n        }\n    }\n    #endregion\n}\n", "repo_name": "extensions/Microsoft.Azure.WebJobs.Extensions.Clients/samples/Function1.cs", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/extensions/Microsoft.Azure.WebJobs.Extensions.Clients/samples/Function1.cs", "language": ["C#", ".NET"]}, {"README_text": "\ufeff// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nusing Azure.Core;\nusing Azure.Core.Pipeline;\nusing Microsoft.AspNetCore.Hosting;\n\nnamespace Microsoft.Extensions.Azure.Samples\n{\n    internal class DependencyInjectionEnabledPolicy : HttpPipelineSynchronousPolicy\n    {\n        private readonly IWebHostEnvironment _environment;\n\n        public DependencyInjectionEnabledPolicy(IWebHostEnvironment environment)\n        {\n            this._environment = environment;\n        }\n\n        public override void OnSendingRequest(HttpMessage message)\n        {\n            message.Request.Headers.Add(\"application-name\", _environment.ApplicationName);\n            base.OnSendingRequest(message);\n        }\n    }\n}", "repo_name": "extensions/Microsoft.Extensions.Azure/samples/DependencyInjectionEnabledPolicy.cs", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/extensions/Microsoft.Extensions.Azure/samples/DependencyInjectionEnabledPolicy.cs", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.FluidRelay.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "fluidrelay/Azure.ResourceManager.FluidRelay/samples/Azure.ResourceManager.FluidRelay.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/fluidrelay/Azure.ResourceManager.FluidRelay/samples/Azure.ResourceManager.FluidRelay.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "---\npage_type: sample\nlanguages:\n- csharp\nproducts:\n- azure\n- azure-cognitive-services\n- azure-form-recognizer\nname: Azure Form Recognizer samples for .NET\ndescription: Samples for the Azure.AI.FormRecognizer client library\n---\n\n# Azure Form Recognizer client SDK Samples\n> Note: Starting with version `4.0.0`, a new set of clients were introduced to leverage the newest features of the Form Recognizer service. Please see the [Migration Guide][migration_guide] for detailed instructions on how to update application code from client library version `3.1.X` or lower to the latest version. Additionally, see the [Changelog][changelog] for more detailed information.\n\nAzure Cognitive Services Form Recognizer is a cloud service that uses machine learning to analyze text and structured data from your documents. It includes the following main features:\n\n- Layout - Extract text, selection marks, table structures, styles, and paragraphs, along with their bounding region coordinates from documents.\n- General document - Analyze key-value pairs in addition to general layout from documents.\n- Read - Read information about textual elements, such as page words and lines in addition to text language information.\n- Prebuilt - Analyze data from certain types of common documents using prebuilt models. Supported documents include receipts, invoices, business cards, identity documents, vaccination cards, US W2 tax forms, and US health insurance cards.\n- Custom - Build custom models to analyze text, field values, selection marks, table structures, styles, and paragraphs from documents. Custom models are built with your own data, so they're tailored to your documents.\n\n## Common scenarios samples for client library version 4.0.0\n- [Extract the layout of a document](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/formrecognizer/Azure.AI.FormRecognizer/samples/Sample_ExtractLayout.md)\n- [Analyze with the prebuilt general document model](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/formrecognizer/Azure.AI.FormRecognizer/samples/Sample_AnalyzePrebuiltDocument.md)\n- [Analyze with the prebuilt read model](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/formrecognizer/Azure.AI.FormRecognizer/samples/Sample_AnalyzePrebuiltRead.md)\n- [Analyze a document with a custom model](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/formrecognizer/Azure.AI.FormRecognizer/samples/Sample_AnalyzeWithCustomModel.md)\n- [Analyze a document with a prebuilt model](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/formrecognizer/Azure.AI.FormRecognizer/samples/Sample_AnalyzeWithPrebuiltModel.md)\n- [Build a custom model](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/formrecognizer/Azure.AI.FormRecognizer/samples/Sample_BuildCustomModel.md)\n- [Manage models](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/formrecognizer/Azure.AI.FormRecognizer/samples/Sample_ManageModels.md)\n\n## Advanced samples for client library version 4.0.0\n- [Compose a model](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/formrecognizer/Azure.AI.FormRecognizer/samples/Sample_ModelCompose.md)\n- [Get and List document model operations](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/formrecognizer/Azure.AI.FormRecognizer/samples/Sample_GetAndListOperations.md)\n- [Copy a custom model between Form Recognizer resources](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/formrecognizer/Azure.AI.FormRecognizer/samples/Sample_CopyCustomModel.md)\n- [Mock a client for testing using the Moq library](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/formrecognizer/Azure.AI.FormRecognizer/samples/Sample_MockClient.md)\n\n## Samples for client library versions 3.1.x and below\nPlease see the samples [here][v31samples].\n\n[changelog]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/formrecognizer/Azure.AI.FormRecognizer/CHANGELOG.md\n[v31samples]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/formrecognizer/Azure.AI.FormRecognizer/samples/V3.1/README.md\n[migration_guide]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/formrecognizer/Azure.AI.FormRecognizer/MigrationGuide.md\n", "repo_name": "formrecognizer/Azure.AI.FormRecognizer/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/formrecognizer/Azure.AI.FormRecognizer/samples", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.FrontDoor.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "frontdoor/Azure.ResourceManager.FrontDoor/samples/Azure.ResourceManager.FrontDoor.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/frontdoor/Azure.ResourceManager.FrontDoor/samples/Azure.ResourceManager.FrontDoor.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "<Project Sdk=\"Microsoft.NET.Sdk\\\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"/>\n    <PackageReference Include=\"NUnit3TestAdapter\"/>\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.Grafana.csproj\"/>\n  </ItemGroup>\n</Project>\n", "repo_name": "grafana/Azure.ResourceManager.Grafana/samples/Azure.ResourceManager.Grafana.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/grafana/Azure.ResourceManager.Grafana/samples/Azure.ResourceManager.Grafana.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.GraphServices.csproj\" />\n  </ItemGroup>\n</Project>", "repo_name": "graphservices/Azure.ResourceManager.GraphServices/samples/Azure.ResourceManager.GraphServices.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/graphservices/Azure.ResourceManager.GraphServices/samples/Azure.ResourceManager.GraphServices.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "<Project Sdk=\"Microsoft.NET.Sdk\\\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"/>\n    <PackageReference Include=\"NUnit3TestAdapter\"/>\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.GuestConfiguration.csproj\"/>\n  </ItemGroup>\n</Project>\n", "repo_name": "guestconfiguration/Azure.ResourceManager.GuestConfiguration/samples/Azure.ResourceManager.GuestConfiguration.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/guestconfiguration/Azure.ResourceManager.GuestConfiguration/samples/Azure.ResourceManager.GuestConfiguration.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "<Project Sdk=\"Microsoft.NET.Sdk\\\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"/>\n    <PackageReference Include=\"NUnit3TestAdapter\"/>\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.HDInsight.csproj\"/>\n  </ItemGroup>\n</Project>\n", "repo_name": "hdinsight/Azure.ResourceManager.HDInsight/samples/Azure.ResourceManager.HDInsight.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/hdinsight/Azure.ResourceManager.HDInsight/samples/Azure.ResourceManager.HDInsight.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.HealthBot.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "healthbot/Azure.ResourceManager.HealthBot/samples/Azure.ResourceManager.HealthBot.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/healthbot/Azure.ResourceManager.HealthBot/samples/Azure.ResourceManager.HealthBot.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.HealthcareApis.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "healthcareapis/Azure.ResourceManager.HealthcareApis/samples/Azure.ResourceManager.HealthcareApis.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/healthcareapis/Azure.ResourceManager.HealthcareApis/samples/Azure.ResourceManager.HealthcareApis.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "---\npage_type: sample\nlanguages:\n- csharp\nproducts:\n- azure\n- azure-cognitive-services\n- azure-health-insights\nname: Azure Health Insights - Cancer Profiling samples for .NET\ndescription: Samples for the Azure.Health.Insights.CancerProfiling client library\n---\n\n# Azure Health Insights CancerProfiling client SDK Samples\nThese code samples show common scenario operations with the Azure Health Insights CancerProfiling client library.\n\n|**Sample Name**|**Description**|\n|----------------|-------------|\n|[Sample01_InferCancerProfile][sample_get_the_inferred_cancer_staging_for_an_oncology_patient] |Get the inferred cancer staging for an oncology patient (Sync).|\n|[Sample01_InferCancerProfileAsync][sample_get_the_inferred_cancer_staging_for_an_oncology_patient_async] |Get the inferred cancer staging for an oncology patient (Async).|\n\n\n[sample_get_the_inferred_cancer_staging_for_an_oncology_patient_async]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/healthinsights/Azure.Health.Insights.CancerProfiling/samples/Sample01_InferCancerProfile.md\n[sample_get_the_inferred_cancer_staging_for_an_oncology_patient]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/healthinsights/Azure.Health.Insights.CancerProfiling/samples/Sample01_InferCancerProfileAsync.md\n\n", "repo_name": "healthinsights/Azure.Health.Insights.CancerProfiling/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/healthinsights/Azure.Health.Insights.CancerProfiling/samples", "language": ["C#", ".NET"]}, {"README_text": "---\npage_type: sample\nlanguages:\n- csharp\nproducts:\n- azure\n- azure-cognitive-services\n- azure-health-insights\nname: Azure Health Insights - Clinical Matching samples for .NET\ndescription: Samples for the Azure.Health.Insights.ClinicalMatching client library\n---\n\n# Azure Health Insights ClinicalMatching client SDK Samples\nThese code samples show common scenario operations with the Azure Health Insights ClinicalMatching client library.\n\n|**Sample Name**|**Description**|\n|----------------|-------------|\n|[Sample01_MatchTrials][sample_get_all_matching_clinical_trials_for_a_specific_patient] |Get all matching clinical trials for a specific patient. (sync)|\n|[Sample01_MatchTrialsAsync][sample_get_all_matching_clinical_trials_for_a_specific_patient_async] |Get all matching clinical trials for a specific patient. (async)|\n\n<!-- LINKS -->\n[sample_get_all_matching_clinical_trials_for_a_specific_patient]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/healthinsights/Azure.Health.Insights.ClinicalMatching/samples/Sample01_MatchTrials.md\n[sample_get_all_matching_clinical_trials_for_a_specific_patient_async]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/healthinsights/Azure.Health.Insights.ClinicalMatching/samples/Sample01_MatchTrialsAsync.md\n", "repo_name": "healthinsights/Azure.Health.Insights.ClinicalMatching/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/healthinsights/Azure.Health.Insights.ClinicalMatching/samples", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.HybridContainerService.csproj\" />\n  </ItemGroup>\n</Project>", "repo_name": "hybridaks/Azure.ResourceManager.HybridContainerService/samples/Azure.ResourceManager.HybridContainerService.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/hybridaks/Azure.ResourceManager.HybridContainerService/samples/Azure.ResourceManager.HybridContainerService.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.HybridCompute.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "hybridcompute/Azure.ResourceManager.HybridCompute/samples/Azure.ResourceManager.HybridCompute.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/hybridcompute/Azure.ResourceManager.HybridCompute/samples/Azure.ResourceManager.HybridCompute.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.HybridConnectivity.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "hybridconnectivity/Azure.ResourceManager.HybridConnectivity/samples/Azure.ResourceManager.HybridConnectivity.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/hybridconnectivity/Azure.ResourceManager.HybridConnectivity/samples/Azure.ResourceManager.HybridConnectivity.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.HybridData.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "hybriddatamanager/Azure.ResourceManager.HybridData/samples/Azure.ResourceManager.HybridData.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/hybriddatamanager/Azure.ResourceManager.HybridData/samples/Azure.ResourceManager.HybridData.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.Kubernetes.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "hybridkubernetes/Azure.ResourceManager.Kubernetes/samples/Azure.ResourceManager.Kubernetes.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/hybridkubernetes/Azure.ResourceManager.Kubernetes/samples/Azure.ResourceManager.Kubernetes.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "# Using the ClientCertificateCredential\n\nApplications which execute in a protected environment can authenticate using a client assertion signed by a private key whose public key or root certificate is registered with AAD. The Azure.Identity library provides the `ClientCertificateCredential` for applications choosing to authenticate this way. Below are some examples of how applications can utilize the `ClientCertificateCredential` to authenticate clients.\n\n\n## Loading certificates from disk\n\nApplications commonly need to load a client certificate from disk. One approach is for the application to construct the `ClientCertificateCredential` by specifying the applications tenant id, client id, and the path to the certificate.\n\n```C# Snippet:Identity_CertificateCredenetial_CreateWithPath\nvar credential = new ClientCertificateCredential(tenantId, clientId, \"./certs/cert.pfx\");\n```\nAlternatively, the application can construct the `X509Certificate2` themselves, such as in the following example, where the certificate key is password protected.\n\n```C# Snippet:Identity_CertificateCredenetial_CreateWithX509Cert\nvar certificate = new X509Certificate2(\"./certs/cert-password-protected.pfx\", \"password\");\n\nvar credential = new ClientCertificateCredential(tenantId, clientId, certificate);\n```\n\n## Loading certificates from an X509Store\n\nApplications running on platforms which provide a secure certificate store might prefer to store and retrieve certificates from there. While the `ClientCertificateCredential` doesn't directly provide a mechanism for this, the application can retrieve the appropriate certificate from the store and use it to construct the `ClientCertificateCredential`. \n\nConsider the scenario where a pinned certificate used for development authentication is stored in the Personal certificate store. Since the certificate is pinned it can be identified by its thumbprint, which the application might read from configuration or the environment.\n\n```C# Snippet:Identity_CertificateCredenetial_CreateFromStore\nusing var store = new X509Store(StoreName.My, StoreLocation.LocalMachine);\n\nstore.Open(OpenFlags.ReadOnly);\n\nvar certificate = store.Certificates.Cast<X509Certificate2>().FirstOrDefault(cert => cert.Thumbprint == thumbprint);\n\nvar credential = new ClientCertificateCredential(tenantId, clientId, certificate);\n```\n\n## Rolling Certificates\n\nLong running applications may have the need to roll certificates during process execution. Certificate rotation is not currently supported by the `ClientCertficateCredential` which treats the certificate used to construct the credential as immutable. This means that any clients constructed with an `ClientCertificateCredential` using a particular cert would fail to authenticate requests after that cert has been rolled and the original is no longer valid. \n\nHowever, if an application wants to roll this certificate without creating new service clients, it can accomplish this by creating its own `TokenCredential` implementation which wraps the `ClientCertificateCredential`. The implementation of this custom credential `TokenCredential` would somewhat depend on how the application handles certificate rotation.\n\n### Explicit rotation\n\nIf the application get's notified of certificate rotations and it can directly respond, it might choose to wrap the `ClientCertificateCredential` in a custom credential which provides a means for rotating the certificate. \n\n```C# Snippet:Identity_CertificateCredenetial_RotatableCredential\npublic class RotatableCertificateCredential : TokenCredential\n{\n    private readonly string _tenantId;\n    private readonly string _clientId;\n    private ClientCertificateCredential _credential;\n\n    public RotatableCertificateCredential(string tenantId, string clientId, X509Certificate2 certificate)\n    {\n        _tenantId = tenantId;\n        _clientId = clientId;\n        _credential = new ClientCertificateCredential(_tenantId, _clientId, certificate);\n    }\n\n    public override AccessToken GetToken(TokenRequestContext requestContext, CancellationToken cancellationToken)\n    {\n        return _credential.GetToken(requestContext, cancellationToken);\n    }\n\n    public async override ValueTask<AccessToken> GetTokenAsync(TokenRequestContext requestContext, CancellationToken cancellationToken)\n    {\n        return await _credential.GetTokenAsync(requestContext, cancellationToken);\n    }\n\n    public void RotateCertificate(X509Certificate2 certificate)\n    {\n        _credential = new ClientCertificateCredential(_tenantId, _clientId, certificate);\n    }\n}\n```\n\nThe above example shows a custom credential type `RotatableCertificateCredential` which provides a `RotateCertificateMethod`. The implementation internally relies on a `ClientCertificateCredential` instance `_credential`, and `RotateCertificate` simply replaces this instance with a new instance using the updated certificate.\n\n### Implicit rotation\nSome applications might want to respond to certificate rotations which are external to the application, for instance a separate process rotates the certificate by updating it on disk. Here the application create a custom credential which checks for certificate updates when tokens are requested. \n\n```C# Snippet:Identity_CertificateCredenetial_RotatingCredential\npublic class RotatingCertificateCredential : TokenCredential\n{\n    private readonly string _tenantId;\n    private readonly string _clientId;\n    private readonly string _path;\n    private readonly object _refreshLock = new object();\n    private DateTimeOffset _credentialLastModified;\n    private ClientCertificateCredential _credential;\n\n    public RotatingCertificateCredential(string tenantId, string clientId, string path)\n    {\n        _tenantId = tenantId;\n        _clientId = clientId;\n        _path = path;\n\n        RefreshCertificate();\n    }\n\n    public override AccessToken GetToken(TokenRequestContext requestContext, CancellationToken cancellationToken)\n    {\n        RefreshCertificate();\n\n        return _credential.GetToken(requestContext, cancellationToken);\n    }\n\n    public async override ValueTask<AccessToken> GetTokenAsync(TokenRequestContext requestContext, CancellationToken cancellationToken)\n    {\n        RefreshCertificate();\n\n        return await _credential.GetTokenAsync(requestContext, cancellationToken);\n    }\n\n    public void RefreshCertificate()\n    {\n        lock (_refreshLock)\n        {\n            var certificateLastModified = File.GetLastWriteTimeUtc(_path);\n\n            if (_credentialLastModified < certificateLastModified)\n            {\n                _credential = new ClientCertificateCredential(_tenantId, _clientId, new X509Certificate2(_path));\n\n                _credentialLastModified = certificateLastModified;\n            }\n        }\n    }\n}\n```\n\nIn this example the custom credential type `RotatingCertifiateCredential` again uses a `ClientCertificateCredential` instance `_credential` to retrieve tokens. However, in this case it will attempt to refresh the certificate prior to obtaining the token. The method `RefreshCertificate` will query to see if the certificate has changed, and if so it will replace the instance `_credential` with a new instance using the new certificate.\n", "repo_name": "identity/Azure.Identity/samples/ClientCertificateCredentialSamples.md", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/samples/ClientCertificateCredentialSamples.md", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.IotFirmwareDefense.csproj\" />\n  </ItemGroup>\n</Project>", "repo_name": "iot/Azure.ResourceManager.IotFirmwareDefense/samples/Azure.ResourceManager.IotFirmwareDefense.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/iot/Azure.ResourceManager.IotFirmwareDefense/samples/Azure.ResourceManager.IotFirmwareDefense.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.IotCentral.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "iotcentral/Azure.ResourceManager.IotCentral/samples/Azure.ResourceManager.IotCentral.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/iotcentral/Azure.ResourceManager.IotCentral/samples/Azure.ResourceManager.IotCentral.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.IotHub.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "iothub/Azure.ResourceManager.IotHub/samples/Azure.ResourceManager.IotHub.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/iothub/Azure.ResourceManager.IotHub/samples/Azure.ResourceManager.IotHub.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.KeyVault.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "keyvault/Azure.ResourceManager.KeyVault/samples/Azure.ResourceManager.KeyVault.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/keyvault/Azure.ResourceManager.KeyVault/samples/Azure.ResourceManager.KeyVault.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "---\npage_type: sample\nlanguages:\n- csharp\nproducts:\n- azure\n- azure-key-vault\nname: Azure.Security.KeyVault.Administration samples for .NET\ndescription: Samples for the Azure.Security.KeyVault.Administration client library.\n---\n\n# Azure.Security.KeyVault.Administration Samples\n\n- Creating, getting, and deleting role assignments and definitions [synchronously](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/keyvault/Azure.Security.KeyVault.Administration/samples/Sample1_RbacHelloWorldSync.md) or [asynchronously](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/keyvault/Azure.Security.KeyVault.Administration/samples/Sample1_RbacHelloWorldAsync.md)\n- [Assigning roles for specific scopes](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/keyvault/Azure.Security.KeyVault.Administration/samples/Sample2_RbacScopeAssignment.md)\n- Performing a full key backup and restore [synchronously](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/keyvault/Azure.Security.KeyVault.Administration/samples/Sample1_BackupHelloWorldSync.md) and [asynchronously](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/keyvault/Azure.Security.KeyVault.Administration/samples/Sample1_BackupHelloWorldAsync.md)\n- [Performing selective key restore](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/keyvault/Azure.Security.KeyVault.Administration/samples/Sample2_SelectiveRestore.md)\n- [Checking the status of a previously started backup or restore](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/keyvault/Azure.Security.KeyVault.Administration/samples/Sample3_BackRestoreResume.md)\n", "repo_name": "keyvault/Azure.Security.KeyVault.Administration/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/keyvault/Azure.Security.KeyVault.Administration/samples", "language": ["C#", ".NET"]}, {"README_text": "---\npage_type: sample\nlanguages:\n- csharp\nproducts:\n- azure\n- azure-key-vault\nname: Azure.Security.KeyVault.Certificates samples for .NET\ndescription: Samples for the Azure.Security.KeyVault.Certificates client library.\n---\n\n# Azure.Security.KeyVault.Certificates Samples\n\n- [Setting, getting, updating, and deleting certificates](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/keyvault/Azure.Security.KeyVault.Certificates/samples/Sample1_HelloWorld.md)\n- [Listing certificates, certificate versions, and deleted certificates](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/keyvault/Azure.Security.KeyVault.Certificates/samples/Sample2_GetCertificates.md)\n- [Importing PKCS#12 (PFX) and PEM-formatted certificates](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/keyvault/Azure.Security.KeyVault.Certificates/samples/Sample2_ImportCertificate.md)\n", "repo_name": "keyvault/Azure.Security.KeyVault.Certificates/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/keyvault/Azure.Security.KeyVault.Certificates/samples", "language": ["C#", ".NET"]}, {"README_text": "---\npage_type: sample\nlanguages:\n- csharp\nproducts:\n- azure\n- azure-key-vault\nname: Azure.Security.KeyVault.Keys samples for .NET\ndescription: Samples for the Azure.Security.KeyVault.Keys client library.\n---\n\n# Azure.Security.KeyVault.Keys Samples\n\n- [Creating, getting, updating, and deleting keys](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/keyvault/Azure.Security.KeyVault.Keys/samples/Sample1_HelloWorld.md)\n- [Back up and restore a key](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/keyvault/Azure.Security.KeyVault.Keys/samples/Sample2_BackupAndRestore.md)\n- [Listing keys, key versions, and deleted keys](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/keyvault/Azure.Security.KeyVault.Keys/samples/Sample3_GetKeys.md)\n- [Encrypting and decrypt keys](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/keyvault/Azure.Security.KeyVault.Keys/samples/Sample4_EncryptDecrypt.md)\n- [Signing and verifying keys](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/keyvault/Azure.Security.KeyVault.Keys/samples/Sample5_SignVerify.md)\n- [Wrapping and unwrap a key](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/keyvault/Azure.Security.KeyVault.Keys/samples/Sample6_WrapUnwrap.md)\n", "repo_name": "keyvault/Azure.Security.KeyVault.Keys/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/keyvault/Azure.Security.KeyVault.Keys/samples", "language": ["C#", ".NET"]}, {"README_text": "---\npage_type: sample\nlanguages:\n- csharp\nproducts:\n- azure\n- azure-key-vault\nname: Azure.Security.KeyVault.Secrets samples for .NET\ndescription: Samples for the Azure.Security.KeyVault.Secrets client library.\n---\n\n# Azure.Security.KeyVault.Secrets Samples\n\n- [Creating, getting, updating, and deleting secrets](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/keyvault/Azure.Security.KeyVault.Secrets/samples/Sample1_HelloWorld.md)\n- [Back up and restore a secret](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/keyvault/Azure.Security.KeyVault.Secrets/samples/Sample2_BackupAndRestore.md)\n- [Listing secrets, secret versions, and deleted secrets](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/keyvault/Azure.Security.KeyVault.Secrets/samples/Sample3_GetSecrets.md)\n", "repo_name": "keyvault/Azure.Security.KeyVault.Secrets/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/keyvault/Azure.Security.KeyVault.Secrets/samples", "language": ["C#", ".NET"]}, {"README_text": "<Project Sdk=\"Microsoft.NET.Sdk\\\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"/>\n    <PackageReference Include=\"NUnit3TestAdapter\"/>\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.KubernetesConfiguration.csproj\"/>\n  </ItemGroup>\n</Project>\n", "repo_name": "kubernetesconfiguration/Azure.ResourceManager.KubernetesConfiguration/samples/Azure.ResourceManager.KubernetesConfiguration.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/kubernetesconfiguration/Azure.ResourceManager.KubernetesConfiguration/samples/Azure.ResourceManager.KubernetesConfiguration.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.Kusto.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "kusto/Azure.ResourceManager.Kusto/samples/Azure.ResourceManager.Kusto.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/kusto/Azure.ResourceManager.Kusto/samples/Azure.ResourceManager.Kusto.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.LabServices.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "labservices/Azure.ResourceManager.LabServices/samples/Azure.ResourceManager.LabServices.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/labservices/Azure.ResourceManager.LabServices/samples/Azure.ResourceManager.LabServices.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "---\npage_type: sample\nlanguages:\n- csharp\nproducts:\n- azure\nname: Azure.Developer.LoadTesting samples for .NET\ndescription: Samples for the Azure.Developer.LoadTesting client library.\n---\n\n# Azure.Developer.LoadTesting Samples\n\nPlease find code snippets to some commong use cases.\n\n- [Sample1_CreateOrUpdateTest.cs](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/loadtestservice/Azure.Developer.LoadTesting/tests/Samples/Sample1_CreateOrUpdateTest.cs)\n- [Sample2_BeginUploadTestFile.cs](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/loadtestservice/Azure.Developer.LoadTesting/tests/Samples/Sample2_BeginUploadTestFile.cs)\n- [Sample3_CreateOrUpdateAppComponent.cs](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/loadtestservice/Azure.Developer.LoadTesting/tests/Samples/Sample3_CreateOrUpdateAppComponent.cs)\n- [Sample4_BeginTestRun.cs](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/loadtestservice/Azure.Developer.LoadTesting/tests/Samples/Sample4_BeginTestRun.cs)\n- [Sample5_GetMetrics.cs](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/loadtestservice/Azure.Developer.LoadTesting/tests/Samples/Sample5_GetMetrics.cs)\n", "repo_name": "loadtestservice/Azure.Developer.LoadTesting/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/loadtestservice/Azure.Developer.LoadTesting/samples", "language": ["C#", ".NET"]}, {"README_text": "<Project Sdk=\"Microsoft.NET.Sdk\\\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"/>\n    <PackageReference Include=\"NUnit3TestAdapter\"/>\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.LoadTesting.csproj\"/>\n  </ItemGroup>\n</Project>\n", "repo_name": "loadtestservice/Azure.ResourceManager.LoadTesting/samples/Azure.ResourceManager.LoadTesting.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/loadtestservice/Azure.ResourceManager.LoadTesting/samples/Azure.ResourceManager.LoadTesting.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "<Project Sdk=\"Microsoft.NET.Sdk\\\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"/>\n    <PackageReference Include=\"NUnit3TestAdapter\"/>\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.Logic.csproj\"/>\n  </ItemGroup>\n</Project>\n", "repo_name": "logic/Azure.ResourceManager.Logic/samples/Azure.ResourceManager.Logic.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/logic/Azure.ResourceManager.Logic/samples/Azure.ResourceManager.Logic.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.MachineLearningCompute.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "machinelearningcompute/Azure.ResourceManager.MachineLearningCompute/samples/Azure.ResourceManager.MachineLearningCompute.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/machinelearningcompute/Azure.ResourceManager.MachineLearningCompute/samples/Azure.ResourceManager.MachineLearningCompute.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "<Project Sdk=\"Microsoft.NET.Sdk\\\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"/>\n    <PackageReference Include=\"NUnit3TestAdapter\"/>\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.MachineLearning.csproj\"/>\n  </ItemGroup>\n</Project>\n", "repo_name": "machinelearningservices/Azure.ResourceManager.MachineLearning/samples/Azure.ResourceManager.MachineLearning.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/machinelearningservices/Azure.ResourceManager.MachineLearning/samples/Azure.ResourceManager.MachineLearning.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.Maintenance.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "maintenance/Azure.ResourceManager.Maintenance/samples/Azure.ResourceManager.Maintenance.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/maintenance/Azure.ResourceManager.Maintenance/samples/Azure.ResourceManager.Maintenance.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.ManagedNetwork.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "managednetwork/Azure.ResourceManager.ManagedNetwork/samples/Azure.ResourceManager.ManagedNetwork.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/managednetwork/Azure.ResourceManager.ManagedNetwork/samples/Azure.ResourceManager.ManagedNetwork.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.ManagedNetworkFabric.csproj\" />\n  </ItemGroup>\n</Project>", "repo_name": "managednetworkfabric/Azure.ResourceManager.ManagedNetworkFabric/samples/Azure.ResourceManager.ManagedNetworkFabric.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/managednetworkfabric/Azure.ResourceManager.ManagedNetworkFabric/samples/Azure.ResourceManager.ManagedNetworkFabric.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.ManagedServiceIdentities.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "managedserviceidentity/Azure.ResourceManager.ManagedServiceIdentities/samples/Azure.ResourceManager.ManagedServiceIdentities.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/managedserviceidentity/Azure.ResourceManager.ManagedServiceIdentities/samples/Azure.ResourceManager.ManagedServiceIdentities.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.ManagedServices.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "managedservices/Azure.ResourceManager.ManagedServices/samples/Azure.ResourceManager.ManagedServices.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/managedservices/Azure.ResourceManager.ManagedServices/samples/Azure.ResourceManager.ManagedServices.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.ManagementPartner.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "managementpartner/Azure.ResourceManager.ManagementPartner/samples/Azure.ResourceManager.ManagementPartner.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/managementpartner/Azure.ResourceManager.ManagementPartner/samples/Azure.ResourceManager.ManagementPartner.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "# LocalizedMapView\n\n`LocalizedMapView` is a enum-like struct user can assign localized map view for geo-political concern. The possible example looks like:\n\n```C# Snippet:LocalizedMapViewUsage\nvar unifiedView = new LocalizedMapView(\"Unified\");\nvar autoView = new LocalizedMapView(\"auto\");\nvar unitedArabEmirates = new LocalizedMapView(\"AE\");\n```\n", "repo_name": "maps/Azure.Maps.Common/samples/LocalizedMapView.md", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/maps/Azure.Maps.Common/samples/LocalizedMapView.md", "language": ["C#", ".NET"]}, {"README_text": "# Get Location Samples\n\nTo use these samples, you'll first need to set up resources. See [getting started](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/maps/Azure.Maps.Geolocation#getting-started) for details.\n\n## Get Location with IP Address\n\nThe sample below returns the for the provided IP address:\n\n```C# Snippet:GetCountryCode\n//Get location by given IP address\nIPAddress ipAddress = IPAddress.Parse(\"2001:4898:80e8:b::189\");\nResponse<CountryRegionResult> result = client.GetCountryCode(ipAddress);\n\n//Get location result country code\nConsole.WriteLine($\"Country code results by given IP Address: {result.Value.IsoCode}\");\n```\n", "repo_name": "maps/Azure.Maps.Geolocation/samples/GetCountryCodeSamples.md", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/maps/Azure.Maps.Geolocation/samples/GetCountryCodeSamples.md", "language": ["C#", ".NET"]}, {"README_text": "# Render Tiles, Imageries, and Images\n\n## Import the namespaces\n\n```C# Snippet:RenderImportNamespace\nusing Azure.Maps.Rendering;\n```\n\n## Create Render Client\n\nBefore rendering any images or tiles, create a `MapsRenderingClient` first. Either use subscription key or AAD.\n\nInstantiate render client with subscription key:\n\n```C# Snippet:InstantiateRenderClientViaSubscriptionKey\n// Create a MapsRenderingClient that will authenticate through Subscription Key (Shared key)\nAzureKeyCredential credential = new AzureKeyCredential(\"<My Subscription Key>\");\nMapsRenderingClient client = new MapsRenderingClient(credential);\n```\n\nInstantiate render client via AAD authentication:\n\n```C# #region Snippet:InstantiateRenderClientViaAAD\nvar client = new MapsRouteClient(credential, clientId);\n```\n\n## Get correct tile index\n\nRendering map tiles requires the knowledge about [zoom levels and tile grid system](https://docs.microsoft.com/azure/azure-maps/zoom-levels-and-tile-grid). We provide APIs for you to find out the correct tile index and zoom level they need.\n\nFor example, if you wants to render a tile in Germany with a specific bounding box range, one can use utility function `PositionToTileXY` method from `TileMath`. With the desired coordinate, zoom level and tile size, one can get tile X and Y index:\n\n```C# Snippet:GetTileXY\nint zoom = 10, tileSize = 256;\n\n// Get tile X, Y index by coordinate, zoom and tile size information\nMapTileIndex tileIndex = MapsRenderingClient.PositionToTileXY(new GeoPosition(13.3854, 52.517), zoom, tileSize);\n```\n\n## Get Tile Set ID Metadata\n\nWe can get Tile set metadata by assigning Tile set ID and utilize the tile information when needed:\n\n```C# Snippet:GetMapTileSet\nResponse<MapTileSet> tileSetMetadata = client.GetMapTileSet(MapTileSetId.MicrosoftBaseRoad);\n\nConsole.WriteLine(\"TileSet ID: {0}\", tileSetMetadata.Value.TileSetName);\nConsole.WriteLine(\"Tile scheme: {0}\", tileSetMetadata.Value.TileScheme);\nforeach (string endpoint in tileSetMetadata.Value.TileEndpoints)\n{\n    Console.WriteLine(\"TileSet endpoint: {0}\", endpoint);\n}\n```\n\n## Render imagery tiles\n\nFrom previous section, we get the tile X, Y index we want, we amy continue to get the satellite imagery we need. First, import `System.IO` to use `File` class so we can save image to file:\n\n```C# Snippet:SaveToFile\nusing System.IO;\n```\n\nCall get Map imagery tile API and save the result to file by previously calculated tile X, Y index:\n\n```C# Snippet:GetImageryMapTiles\nint zoom = 10, tileSize = 256;\n\n// Get tile X, Y index by coordinate, zoom and tile size information\nMapTileIndex tileIndex = MapsRenderingClient.PositionToTileXY(new GeoPosition(13.3854, 52.517), zoom, tileSize);\n\n// Fetch imagery map tiles\nGetMapTileOptions GetMapTileOptions = new GetMapTileOptions(\n    MapTileSetId.MicrosoftImagery,\n    new MapTileIndex(tileIndex.X, tileIndex.Y, zoom)\n);\nResponse<Stream> mapTile = client.GetMapTile(GetMapTileOptions);\n\n// Prepare a file stream to save the imagery\nusing (FileStream fileStream = File.Create(\".\\\\BerlinImagery.png\"))\n{\n    mapTile.Value.CopyTo(fileStream);\n}\n```\n\nThe imagery will look like:\n\n![BerlinImagery](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/maps/Azure.Maps.Rendering/tests/BerlinImagery.png?raw=true \"Berlin satellite image\")\n\n## Render static images\n\nTo a get static image, one can assign bounding box and zoom level or coordinate and image width and height with `RenderStaticImageOptions`:\n\n```C# Snippet:RenderStaticImages\n// Prepare static image options\nGetMapStaticImageOptions staticImageOptions = new GetMapStaticImageOptions(new GeoBoundingBox(13.228,52.4559,13.5794,52.629))\n{\n    MapImageLayer = MapImageLayer.Basic,\n    MapImageStyle = MapImageStyle.Dark,\n    ZoomLevel = 10,\n    Language = RenderingLanguage.EnglishUsa,\n};\n\n// Get static image\nResponse<Stream> image = client.GetMapStaticImage(staticImageOptions);\n\n// Prepare a file stream to save the imagery\nusing (FileStream fileStream = File.Create(\".\\\\BerlinStaticImage.png\"))\n{\n    image.Value.CopyTo(fileStream);\n}\n```\n\nThe image will look like:\n\n![BerlinStaticImage](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/maps/Azure.Maps.Rendering/tests/BerlinStaticImage.png?raw=true \"Berlin static map image\")\n\nIn a more complex scenario, we can also add pushpins and paths on the map to make it more vivid:\n\n```C# Snippet:RenderStaticImagesWithPinsAndPaths\n// Prepare pushpin styles\nImagePushpinStyle pushpinSet1 = new ImagePushpinStyle(\n    new List<PushpinPosition>()\n    {\n        new PushpinPosition(13.35, 52.577, \"Label start\"),\n        new PushpinPosition(13.2988, 52.6, \"Label end\"),\n    }\n)\n{\n    PushpinScaleRatio = 0.9,\n    PushpinColor = Color.Red,\n    LabelColor = Color.Blue,\n    LabelScaleRatio = 18\n};\nImagePushpinStyle pushpinSet2 = new ImagePushpinStyle(\n    new List<PushpinPosition>() {new PushpinPosition(13.495, 52.497, \"Label 3\")}\n)\n{\n    PushpinScaleRatio = 1.2,\n    PushpinColor = Color.Beige,\n    LabelColor = Color.White,\n    LabelScaleRatio = 18\n};\n\n// Prepare path styles\nImagePathStyle path1 = new ImagePathStyle(\n    new List<GeoPosition>() {\n        new GeoPosition(13.35, 52.577),\n        new GeoPosition(13.2988, 52.6)\n    }\n)\n{\n    LineColor = Color.Beige,\n    LineWidthInPixels = 5\n};\n\n// Prepare static image options\nGetMapStaticImageOptions staticImageOptions = new GetMapStaticImageOptions(\n    new GeoBoundingBox(13.228, 52.4559, 13.5794, 52.629),\n    new List<ImagePushpinStyle>() { pushpinSet1, pushpinSet2 },\n    new List<ImagePathStyle>() { path1 }\n)\n{\n    MapImageLayer = MapImageLayer.Basic,\n    MapImageStyle = MapImageStyle.Dark,\n    ZoomLevel = 10,\n    Language = RenderingLanguage.EnglishUsa\n};\n\n// Get static image\nResponse<Stream> image = client.GetMapStaticImage(staticImageOptions);\n\n// Prepare a file stream to save the imagery\nusing (FileStream fileStream = File.Create(\".\\\\BerlinStaticImageWithPinsAndPaths.png\"))\n{\n    image.Value.CopyTo(fileStream);\n}\n```\n\nThe rendered image will look like:\n\n![RenderStaticImagesWithPinsAndPaths](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/maps/Azure.Maps.Rendering/tests/BerlinStaticImageWithPinsAndPaths.png?raw=true \"Static map image with pushpin and path\")\n\n## Render tiles\n\nTo render map tiles, one can decide map tile X, Y index and zoom level and then decide the tile style in `RenderTileOptions`:\n\n```C# Snippet:RenderMapTiles\nint zoom = 10, tileSize = 256;\n\n// Get tile X, Y index by coordinate, zoom and tile size information\nMapTileIndex tileIndex = MapsRenderingClient.PositionToTileXY(new GeoPosition(13.3854, 52.517), zoom, tileSize);\n\n// Fetch map tiles\nGetMapTileOptions GetMapTileOptions = new GetMapTileOptions(\n    MapTileSetId.MicrosoftBaseRoad,\n    new MapTileIndex(tileIndex.X, tileIndex.Y, zoom)\n);\nResponse<Stream> mapTile = client.GetMapTile(GetMapTileOptions);\n\n// Prepare a file stream to save the imagery\nusing (FileStream fileStream = File.Create(\".\\\\BerlinMapTile.png\"))\n{\n    mapTile.Value.CopyTo(fileStream);\n}\n```\n\nThe image will look like:\n\n![BerlinMapTile](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/maps/Azure.Maps.Rendering/tests/BerlinMapTile.png?raw=true \"Berlin map tile image\")\n", "repo_name": "maps/Azure.Maps.Rendering/samples/MapsRenderingTilesImageriesImagesSamples.md", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/maps/Azure.Maps.Rendering/samples/MapsRenderingTilesImageriesImagesSamples.md", "language": ["C#", ".NET"]}, {"README_text": "---\npage_type: sample\nlanguages:\n- csharp\nproducts:\n- azure\n- azure-maps\nname: Azure.Maps.Routing samples for .NET\ndescription: Samples for the Azure.Maps.Routing client library.\n---\n\n# Azure.Maps.Routing Samples\n\nFor different APIs, please refer the following samples:\n\n* [Route Directions](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/maps/Azure.Maps.Routing/samples/RouteDirectionsSamples.md)\n* [Route Range](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/maps/Azure.Maps.Routing/samples/RouteRangeSamples.md)\n* [Route Matrix](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/maps/Azure.Maps.Routing/samples/RouteMatrixSamples.md)\n", "repo_name": "maps/Azure.Maps.Routing/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/maps/Azure.Maps.Routing/samples", "language": ["C#", ".NET"]}, {"README_text": "# Fuzzy Search Samples\n\nTo use these samples, you'll first need to set up resources. See [getting started](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/maps/Azure.Maps.Search#getting-started) for details.\n\n## Import the namespaces\n\n```C# Snippet:SearchImportNamespace\nusing Azure.Core.GeoJson;\nusing Azure.Maps.Search;\nusing Azure.Maps.Search.Models;\n```\n\n## Create Search Client\n\nBefore searching addresses, create a `MapsSearchClient` first. Either use subscription key or AAD.\n\nInstantiate search client with subscription key:\n\n```C# Snippet:InstantiateSearchClientViaSubscriptionKey\n// Create a SearchClient that will authenticate through Subscription Key (Shared key)\nAzureKeyCredential credential = new AzureKeyCredential(\"<My Subscription Key>\");\nMapsSearchClient client = new MapsSearchClient(credential);\n```\n\nInstantiate route client via AAD authentication:\n\n```C# Snippet:InstantiateSearchClientViaAAD\n// Create a MapsSearchClient that will authenticate through AAD\nDefaultAzureCredential credential = new DefaultAzureCredential();\nstring clientId = \"<My Map Account Client Id>\";\nMapsSearchClient client = new MapsSearchClient(credential, clientId);\n```\n\n## Fuzzy Search\n\nSometimes, we want to search some point of interests, entities, or addresses.  `FuzzySearch` (or `FuzzySearchAsync` for asynchronous call) can help you accomplish the free form search. The example below search the starbucks nearby specific coordinate:\n\n```C# Snippet:FuzzySearch\nResponse<SearchAddressResult> fuzzySearchResponse = await client.FuzzySearchAsync(\"coffee\", new FuzzySearchOptions\n{\n    Coordinates = new GeoPosition(121.56, 25.04),\n    Language = SearchLanguage.EnglishUsa\n});\n\n// Print out the possible results\nConsole.WriteLine(\"The possible results for coffee shop:\");\nforeach (SearchAddressResultItem result in fuzzySearchResponse.Value.Results)\n{\n    Console.WriteLine(\"Coordinate: {0}, Address: {1}\",\n        result.Position, result.Address.FreeformAddress);\n}\n```\n\nYou can also search multiple free form searches at one time. If the queries are less than 100, use `GetImmediateFuzzyBatchSearch` (or `GetImmediateFuzzyBatchSearchAsync` for asynchronous call). The API will return the results immediately:\n\n```C# Snippet:GetImmediateFuzzyBatchSearch\nList<FuzzySearchQuery> queries = new List<FuzzySearchQuery>\n{\n    new FuzzySearchQuery(\"coffee\", new FuzzySearchOptions()\n    {\n        BoundingBox = new GeoBoundingBox(121.53, 25.0, 121.56, 25.04)\n    }),\n    new FuzzySearchQuery(\"amusement park\", new FuzzySearchOptions()\n    {\n        BoundingBox = new GeoBoundingBox(121.5, 25.0, 121.6, 25.1)\n    }),\n};\nResponse<SearchAddressBatchResult> fuzzySearchResults = client.GetImmediateFuzzyBatchSearch(queries);\n\n// Print out the results for all queries\nforeach (SearchAddressBatchItemResponse resultItemResponse in fuzzySearchResults.Value.Results)\n{\n    Console.WriteLine(\"The possible results for {0}:\", resultItemResponse.Query);\n    SearchAddressResultItem resultItem = resultItemResponse.Results[0];\n    Console.WriteLine(\"Coordinate: {0}, Address: {1}\",\n        resultItem.Position, resultItem.Address.FreeformAddress);\n}\n```\n\nIf you want to search more than 100 addresses, you can use `FuzzyBatchSearch` (or `FuzzyBatchSearchAsync` for asynchronous call), which is a long-running operation (LRO) and accepts up to 10000 queries. It will return `FuzzyBatchSearchOperation` object. You can get the results from the operation object.\n\n```C# Snippet:FuzzyBatchSearch\nList<FuzzySearchQuery> queries = new List<FuzzySearchQuery>\n{\n    new FuzzySearchQuery(\"coffee\", new FuzzySearchOptions()\n    {\n        BoundingBox = new GeoBoundingBox(121.53, 25.0, 121.56, 25.04)\n    }),\n    new FuzzySearchQuery(\"amusement park\", new FuzzySearchOptions()\n    {\n        BoundingBox = new GeoBoundingBox(121.5, 25.0, 121.6, 25.1)\n    }),\n};\nFuzzySearchBatchOperation operation = client.FuzzyBatchSearch(WaitUntil.Started, queries);\n\n// After a while, get the result back\nResponse<SearchAddressBatchResult> result = operation.WaitForCompletion();\n```\n\nThe search address batch result will be cached for 14 days. You can fetch the result from server via a `FuzzyBatchSearchOperation` with the same `Id`:\n\n```C# Snippet:FuzzyBatchSearchWithOperationId\nList<FuzzySearchQuery> queries = new List<FuzzySearchQuery>\n{\n    new FuzzySearchQuery(\"coffee\", new FuzzySearchOptions()\n    {\n        BoundingBox = new GeoBoundingBox(121.53, 25.0, 121.56, 25.04)\n    }),\n    new FuzzySearchQuery(\"amusement park\", new FuzzySearchOptions()\n    {\n        BoundingBox = new GeoBoundingBox(121.5, 25.0, 121.6, 25.1)\n    }),\n};\nFuzzySearchBatchOperation operation = client.FuzzyBatchSearch(WaitUntil.Started, queries);\n\n// Get the operation ID and store somewhere\nstring operationId = operation.Id;\n```\n\nWithin 14 days, you can use the same operation ID to fetch the same result. Precondition is the client endpoint should be the same:\n\n```C# Snippet:FuzzyBatchSearchWithOperationId2\n// Within 14 days, users can retrive the cached result with operation ID\n// The `endpoint` argument in `clientOptions` should be the same!\nFuzzySearchBatchOperation newFuzzySearchBatchOperation = new FuzzySearchBatchOperation(client, operationId);\nResponse<SearchAddressBatchResult> searchResults = newFuzzySearchBatchOperation.WaitForCompletion();\n\n// Show the results\nforeach (SearchAddressBatchItemResponse searchResult in searchResults.Value.Results)\n{\n    Console.WriteLine(\"Result for query: \\\"{0}\\\"\", searchResult.Query);\n    SearchAddressResultItem result = searchResult.Results[0];\n    Console.WriteLine(\"Coordinate: {0}, Address: {1}\",\n        result.Position, result.Address.FreeformAddress);\n}\n```\n", "repo_name": "maps/Azure.Maps.Search/samples/FuzzySearchSamples.md", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/maps/Azure.Maps.Search/samples/FuzzySearchSamples.md", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.Maps.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "maps/Azure.ResourceManager.Maps/samples/Azure.ResourceManager.Maps.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/maps/Azure.ResourceManager.Maps/samples/Azure.ResourceManager.Maps.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "<Project Sdk=\"Microsoft.NET.Sdk\\\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"/>\n    <PackageReference Include=\"NUnit3TestAdapter\"/>\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.Marketplace.csproj\"/>\n  </ItemGroup>\n</Project>\n", "repo_name": "marketplace/Azure.ResourceManager.Marketplace/samples/Azure.ResourceManager.Marketplace.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/marketplace/Azure.ResourceManager.Marketplace/samples/Azure.ResourceManager.Marketplace.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "<Project Sdk=\"Microsoft.NET.Sdk\\\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"/>\n    <PackageReference Include=\"NUnit3TestAdapter\"/>\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.MarketplaceOrdering.csproj\"/>\n  </ItemGroup>\n</Project>\n", "repo_name": "marketplaceordering/Azure.ResourceManager.MarketplaceOrdering/samples/Azure.ResourceManager.MarketplaceOrdering.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/marketplaceordering/Azure.ResourceManager.MarketplaceOrdering/samples/Azure.ResourceManager.MarketplaceOrdering.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.Media.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "mediaservices/Azure.ResourceManager.Media/samples/Azure.ResourceManager.Media.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/mediaservices/Azure.ResourceManager.Media/samples/Azure.ResourceManager.Media.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "---\npage_type: sample\nlanguages:\n- csharp\nproducts:\n- azure\n- azure-cognitive-services\n- azure-metrics-advisor\nname: Azure Metrics Advisor samples for .NET\ndescription: Samples for the Azure.AI.MetricsAdvisor client library\n---\n\n# Azure Metrics Advisor client SDK samples\n\nAzure Cognitive Services Metrics Advisor is a cloud service that uses machine learning to monitor and detect anomalies in time series data. It includes the following capabilities:\n\n- Analyze multi-dimensional data from multiple data sources.\n- Identify and correlate anomalies.\n- Configure and fine-tune the anomaly detection model used on your data.\n- Diagnose anomalies and help with root cause analysis.\n\n# Samples\n\n|**Sample**|**Description**|\n|---|---|\n|[Data feed CRUD operations][metricsadv-sample1]|Create, get, update, list, and delete data feeds|\n|[Credential entity CRUD operations][metricsadv-sample2]|Create, get, update, list, and delete credential entities|\n|[Data feed ingestion operations][metricsadv-sample3]|Check and refresh a data feed's ingestion status|\n|[Anomaly detection configuration CRUD operations][metricsadv-sample4]|Create, get, update, list, and delete anomaly detection configurations|\n|[Hook CRUD operations][metricsadv-sample5]|Create, get, update, list, and delete hooks|\n|[Anomaly alert configuration CRUD operations][metricsadv-sample6]|Create, get, update, list, and delete anomaly alert configurations|\n|[Query triggered alerts][metricsadv-sample7]|Get the alerts triggered by the service|\n|[Query detected anomalies][metricsadv-sample8]|Get the anomalies detected by the service|\n|[Query incidents and their root causes][metricsadv-sample9]|Get the incidents created by the service and root cause analysis|\n|[Query time series information][metricsadv-sample10]|Get information about the time series monitored by the service|\n|[Feedback CRUD operations][metricsadv-sample11]|Create, get, and list feedback|\n\n<!-- LINKS -->\n[metricsadv-sample1]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/metricsadvisor/Azure.AI.MetricsAdvisor/tests/Samples/Sample01_DataFeedCrudOperations.cs\n[metricsadv-sample2]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/metricsadvisor/Azure.AI.MetricsAdvisor/tests/Samples/Sample02_CredentialEntityCrudOperations.cs\n[metricsadv-sample3]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/metricsadvisor/Azure.AI.MetricsAdvisor/tests/Samples/Sample03_DataFeedIngestionOperations.cs\n[metricsadv-sample4]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/metricsadvisor/Azure.AI.MetricsAdvisor/tests/Samples/Sample04_DetectionConfigurationCrudOperations.cs\n[metricsadv-sample5]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/metricsadvisor/Azure.AI.MetricsAdvisor/tests/Samples/Sample05_HookCrudOperations.cs\n[metricsadv-sample6]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/metricsadvisor/Azure.AI.MetricsAdvisor/tests/Samples/Sample06_AlertConfigurationCrudOperations.cs\n[metricsadv-sample7]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/metricsadvisor/Azure.AI.MetricsAdvisor/tests/Samples/Sample07_QueryTriggeredAlerts.cs\n[metricsadv-sample8]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/metricsadvisor/Azure.AI.MetricsAdvisor/tests/Samples/Sample08_QueryDetectedAnomalies.cs\n[metricsadv-sample9]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/metricsadvisor/Azure.AI.MetricsAdvisor/tests/Samples/Sample09_QueryIncidentsAndRootCauses.cs\n[metricsadv-sample10]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/metricsadvisor/Azure.AI.MetricsAdvisor/tests/Samples/Sample10_QueryTimeSeriesInformation.cs\n[metricsadv-sample11]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/metricsadvisor/Azure.AI.MetricsAdvisor/tests/Samples/Sample11_FeedbackCrudOperations.cs", "repo_name": "metricsadvisor/Azure.AI.MetricsAdvisor/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/metricsadvisor/Azure.AI.MetricsAdvisor/samples", "language": ["C#", ".NET"]}, {"README_text": "<Project Sdk=\"Microsoft.NET.Sdk\\\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"/>\n    <PackageReference Include=\"NUnit3TestAdapter\"/>\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.MixedReality.csproj\"/>\n  </ItemGroup>\n</Project>\n", "repo_name": "mixedreality/Azure.ResourceManager.MixedReality/samples/Azure.ResourceManager.MixedReality.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/mixedreality/Azure.ResourceManager.MixedReality/samples/Azure.ResourceManager.MixedReality.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "# IoT Models Repository Samples\n\nThe Azure IoT Models Repository enables builders to manage and share digital twin models for global consumption. The models are [JSON-LD][json_ld_reference] documents defined using the Digital Twins Definition Language ([DTDL][dtdlv2_reference]).\n\nFor more info about the Azure IoT Models Repository checkout the [docs][modelsrepository_msdocs].\n\n## Introduction\n\nYou can explore the models repository APIs with the client library using the samples project.\n\nThe samples project demonstrates the following:\n\n- Instantiating the client\n- Get models and their dependencies from either a remote endpoint or local repository.\n- Integration with the Digital Twins Model Parser\n\n## Initializing the models repository client\n\n```C# Snippet:ModelsRepositorySamplesCreateServiceClientWithGlobalEndpoint\n// When no URI is provided for instantiation, the Azure IoT Models Repository global endpoint\n// https://devicemodels.azure.com/ is used.\nvar client = new ModelsRepositoryClient(new ModelsRepositoryClientOptions());\nConsole.WriteLine($\"Initialized client pointing to the global endpoint: {client.RepositoryUri.AbsoluteUri}\");\n```\n\n```C# Snippet:ModelsRepositorySamplesCreateServiceClientWithCustomEndpoint\n// This form shows specifing a custom URI for the models repository with default client options.\nconst string remoteRepoEndpoint = \"https://contoso.com/models\";\nclient = new ModelsRepositoryClient(new Uri(remoteRepoEndpoint));\nConsole.WriteLine($\"Initialized client pointing to a custom endpoint: {client.RepositoryUri.AbsoluteUri}\");\n```\n\n```C# Snippet:ModelsRepositorySamplesCreateServiceClientWithLocalRepository\n// The client will also work with a local filesystem URI.\nclient = new ModelsRepositoryClient(new Uri(ClientSamplesLocalModelsRepository));\nConsole.WriteLine($\"Initialized client pointing to a local path: {client.RepositoryUri.LocalPath}\");\n```\n\n### Repository metadata\n\nModels repositories that implement Azure IoT conventions can **optionally** include a `metadata.json` file at the root of the repository.\nThe `metadata.json` file provides key attributes of a repository including the features that it provides.\nA client can use the repository metadata to make decisions around how to optimally handle an operation.\n\nThe following snippet shows how to configure the client to disable repository metadata processing:\n\n```C# Snippet:ModelsRepositorySamplesCreateServiceClientConfigureMetadataClientOption\n// ModelsRepositoryClientOptions supports configuration enabling consumption of repository\n// metadata within ModelsRepositoryClientOptions.RepositoryMetadata.\n// Fetching repository metadata is enabled by default.\n// This can be disabled as shown in the following snippet\nvar customClientOptions = new ModelsRepositoryClientOptions();\ncustomClientOptions.RepositoryMetadata.IsMetadataProcessingEnabled = false;\nclient = new ModelsRepositoryClient(options: customClientOptions);\nConsole.WriteLine($\"Initialized client with disabled metadata fetching pointing \" +\n    $\"to the global endpoint: {client.RepositoryUri.AbsoluteUri}.\");\n```\n\n### Override options\n\nIf you need to override pipeline behavior, such as provide your own `HttpClient` instance, you can do that via constructor that takes a [ModelsRepositoryClientOptions][modelsrepository_clientoptions] parameter.\nIt provides an opportunity to override default behavior including:\n\n- Overriding [transport][azure_core_transport]\n- Enabling [diagnostics][azure_core_diagnostics]\n- Controlling [retry strategy](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Configuration.md)\n\n## Publish Models\n\nPublishing models to the models repository requires [exercising][modelsrepository_publish_msdocs] common GitHub workflows.\n\n## Get Models\n\nAfter publishing, your model(s) will be available for consumption from the global repository endpoint. The following snippet shows how to retrieve the corresponding JSON-LD content.\n\n```C# Snippet:ModelsRepositorySamplesGetModelsFromGlobalRepoAsync\n// Global endpoint client\nvar client = new ModelsRepositoryClient();\n\n// The returned ModelResult from GetModelAsync() will include at least the definition for the target dtmi\n// within the contained content dictionary.\n// If model dependency resolution is enabled (the default), then models in which the\n// target dtmi depends on will also be included.\nvar dtmi = \"dtmi:com:example:TemperatureController;1\";\nModelResult result = await client.GetModelAsync(dtmi).ConfigureAwait(false);\n\n// In this case the above dtmi has 2 model dependencies.\n// dtmi:com:example:Thermostat;1 and dtmi:azure:DeviceManagement:DeviceInformation;1\nConsole.WriteLine($\"{dtmi} resolved in {result.Content.Count} interfaces.\");\n```\n\nGitHub pull-request workflows are a core aspect of the IoT Models Repository service. To submit models, the user is expected to fork and clone the global [models repository project][modelsrepository_github_repo] then iterate against the local copy. Changes would then be pushed to the fork (ideally in a new branch) and a PR created against the global repository.\n\nTo support this workflow and similar use cases, the client supports initialization with a local file-system URI. You can use this for example, to test and ensure newly added models to the locally cloned models repository are in their proper locations.\n\n```C# Snippet:ModelsRepositorySamplesGetModelsFromLocalRepoAsync\n// Local sample repository client\nvar client = new ModelsRepositoryClient(new Uri(ClientSamplesLocalModelsRepository));\n\n// The output of GetModelAsync() will include at least the definition for the target dtmi.\n// If the model dependency resolution configuration is not disabled, then models in which the\n// target dtmi depends on will also be included in the returned ModelResult.Content dictionary.\nvar dtmi = \"dtmi:com:example:TemperatureController;1\";\nModelResult result = await client.GetModelAsync(dtmi).ConfigureAwait(false);\n\n// In this case the above dtmi has 2 model dependencies.\n// dtmi:com:example:Thermostat;1 and dtmi:azure:DeviceManagement:DeviceInformation;1\nConsole.WriteLine($\"{dtmi} resolved in {result.Content.Count} interfaces.\");\n```\n\nBy default model dependency resolution is enabled. This can be changed by overriding the default\nvalue for the `dependencyResolution` parameter of the `GetModels` operation.\n\n```C# Snippet:ModelsRepositorySamplesGetModelsDisabledDependencyResolution\n// Global endpoint client\nvar client = new ModelsRepositoryClient();\n\n// In this example model dependency resolution is disabled by passing in ModelDependencyResolution.Disabled\n// as the value for the dependencyResolution parameter of GetModelAsync(). By default the parameter has a value\n// of ModelDependencyResolution.Enabled.\n// When model dependency resolution is disabled, only the input dtmi(s) will be processed and\n// model dependencies (if any) will be ignored.\nvar dtmi = \"dtmi:com:example:TemperatureController;1\";\nModelResult result = await client.GetModelAsync(dtmi, ModelDependencyResolution.Disabled).ConfigureAwait(false);\n\n// In this case the above dtmi has 2 model dependencies but are not returned\n// due to disabling model dependency resolution.\nConsole.WriteLine($\"{dtmi} resolved in {result.Content.Count} interfaces.\");\n```\n\n## Digital Twins Model Parser Integration\n\nThe samples provide two different patterns to integrate with the Digital Twins Model Parser.\n\nThe following snippet shows first fetching model definitions from the Azure IoT Models Repository then parsing them.\n\n```C# Snippet:ModelsRepositorySamplesParserIntegrationGetModelsAndParseAsync\nvar client = new ModelsRepositoryClient();\nvar dtmi = \"dtmi:com:example:TemperatureController;1\";\nModelResult result = await client.GetModelAsync(dtmi).ConfigureAwait(false);\nvar parser = new ModelParser();\nIReadOnlyDictionary<Dtmi, DTEntityInfo> parseResult = await parser.ParseAsync(result.Content.Values);\nConsole.WriteLine($\"{dtmi} resolved in {result.Content.Count} interfaces with {parseResult.Count} entities.\");\n```\n\nAlternatively, the following snippet shows parsing a model, then fetching dependent model definitions during parsing.\nThis is achieved by configuring the `ModelParser` to use the sample [ParserDtmiResolver][modelsrepository_sample_extension] client extension.\n\n```C# Snippet:ModelsRepositorySamplesParserIntegrationParseAndGetModelsAsync\nvar client = new ModelsRepositoryClient();\nvar dtmi = \"dtmi:com:example:TemperatureController;1\";\nModelResult result = await client.GetModelAsync(dtmi, ModelDependencyResolution.Disabled).ConfigureAwait(false);\nvar parser = new ModelParser\n{\n    // Usage of the ModelsRepositoryClientExtensions.ParserDtmiResolver extension.\n    DtmiResolver = client.ParserDtmiResolver\n};\nIReadOnlyDictionary<Dtmi, DTEntityInfo> parseResult = await parser.ParseAsync(result.Content.Values);\nConsole.WriteLine($\"{dtmi} resolved in {result.Content.Count} interfaces with {parseResult.Count} entities.\");\n```\n\n## DtmiConventions utility functions\n\nThe IoT Models Repository applies a set of conventions for organizing digital twin models. This package exposes a class\ncalled `DtmiConventions` which exposes utility functions supporting these conventions. These same functions are used throughout the client.\n\n```C# Snippet:ModelsRepositorySamplesDtmiConventionsIsValidDtmi\n// This snippet shows how to validate a given DTMI string is well-formed.\n\n// Returns true\nDtmiConventions.IsValidDtmi(\"dtmi:com:example:Thermostat;1\");\n\n// Returns false\nDtmiConventions.IsValidDtmi(\"dtmi:com:example:Thermostat\");\n```\n\n```C# Snippet:ModelsRepositorySamplesDtmiConventionsGetModelUri\n// This snippet shows obtaining a fully qualified path to a model file.\n\n// Local repository example\nUri localRepositoryUri = new Uri(\"file:///path/to/repository/\");\nstring fullyQualifiedModelPath =\n    DtmiConventions.GetModelUri(\"dtmi:com:example:Thermostat;1\", localRepositoryUri).AbsolutePath;\n\n// Prints '/path/to/repository/dtmi/com/example/thermostat-1.json'\nConsole.WriteLine(fullyQualifiedModelPath);\n\n// Remote repository example\nUri remoteRepositoryUri = new Uri(\"https://contoso.com/models/\");\nfullyQualifiedModelPath =\n    DtmiConventions.GetModelUri(\"dtmi:com:example:Thermostat;1\", remoteRepositoryUri).AbsoluteUri;\n\n// Prints 'https://contoso.com/models/dtmi/com/example/thermostat-1.json'\nConsole.WriteLine(fullyQualifiedModelPath);\n```\n\n<!-- LINKS -->\n[modelsrepository_github_repo]: https://github.com/Azure/iot-plugandplay-models\n[modelsrepository_sample_extension]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/modelsrepository/Azure.IoT.ModelsRepository/samples/ModelsRepositoryClientSamples/ModelsRepositoryClientExtensions.cs\n[modelsrepository_clientoptions]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/modelsrepository/Azure.IoT.ModelsRepository/src/ModelsRepositoryClientOptions.cs\n[modelsrepository_msdocs]: https://docs.microsoft.com/azure/iot-pnp/concepts-model-repository\n[modelsrepository_publish_msdocs]: https://docs.microsoft.com/azure/iot-pnp/concepts-model-repository#publish-a-model\n[modelsrepository_iot_endpoint]: https://devicemodels.azure.com/\n[json_ld_reference]: https://json-ld.org\n[dtdlv2_reference]: https://github.com/Azure/opendigitaltwins-dtdl/blob/master/DTDL/v2/dtdlv2.md\n[azure_core_transport]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Pipeline.md\n[azure_core_diagnostics]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Diagnostics.md\n[azure_core_configuration]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/Configuration.md\n", "repo_name": "modelsrepository/Azure.IoT.ModelsRepository/samples/readme.md", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/modelsrepository/Azure.IoT.ModelsRepository/samples/readme.md", "language": ["C#", ".NET"]}, {"README_text": "---\npage_type: sample\nlanguages:\n- csharp\nproducts:\n# Including relevant stubs from https://review.docs.microsoft.com/help/contribute/metadata-taxonomies#product\n- azure\nname: Azure.Monitor.Ingestion samples for .NET\ndescription: Samples for the Azure Monitor Ingestion client library.\n---\n\n# Azure.Monitor.Ingestion Samples\n* [LogData](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/monitor/Azure.Monitor.Ingestion/samples/Sample1_LogData.md)\n* [LogData (Async)](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/monitor/Azure.Monitor.Ingestion/samples/Sample1_LogDataAsync.md)\n* [VerifyLogs](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/monitor/Azure.Monitor.Ingestion/samples/Sample2_VerifyLogs.md)\n* [VerifyLogs (Async)](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/monitor/Azure.Monitor.Ingestion/samples/Sample2_VerifyLogsAsync.md) ", "repo_name": "monitor/Azure.Monitor.Ingestion/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/monitor/Azure.Monitor.Ingestion/samples", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.Monitor.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "monitor/Azure.ResourceManager.Monitor/samples/Azure.ResourceManager.Monitor.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/monitor/Azure.ResourceManager.Monitor/samples/Azure.ResourceManager.Monitor.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "<Project Sdk=\"Microsoft.NET.Sdk\\\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"/>\n    <PackageReference Include=\"NUnit3TestAdapter\"/>\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.NetApp.csproj\"/>\n  </ItemGroup>\n</Project>\n", "repo_name": "netapp/Azure.ResourceManager.NetApp/samples/Azure.ResourceManager.NetApp.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/netapp/Azure.ResourceManager.NetApp/samples/Azure.ResourceManager.NetApp.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.Network.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "network/Azure.ResourceManager.Network/samples/Azure.ResourceManager.Network.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/network/Azure.ResourceManager.Network/samples/Azure.ResourceManager.Network.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.NetworkCloud.csproj\" />\n  </ItemGroup>\n</Project>", "repo_name": "networkcloud/Azure.ResourceManager.NetworkCloud/samples/Azure.ResourceManager.NetworkCloud.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/networkcloud/Azure.ResourceManager.NetworkCloud/samples/Azure.ResourceManager.NetworkCloud.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.NetworkFunction.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "networkfunction/Azure.ResourceManager.NetworkFunction/samples/Azure.ResourceManager.NetworkFunction.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/networkfunction/Azure.ResourceManager.NetworkFunction/samples/Azure.ResourceManager.NetworkFunction.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.NewRelicObservability.csproj\" />\n  </ItemGroup>\n</Project>", "repo_name": "newrelicobservability/Azure.ResourceManager.NewRelicObservability/samples/Azure.ResourceManager.NewRelicObservability.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/newrelicobservability/Azure.ResourceManager.NewRelicObservability/samples/Azure.ResourceManager.NewRelicObservability.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "<Project Sdk=\"Microsoft.NET.Sdk\\\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"/>\n    <PackageReference Include=\"NUnit3TestAdapter\"/>\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.Nginx.csproj\"/>\n  </ItemGroup>\n</Project>\n", "repo_name": "nginx/Azure.ResourceManager.Nginx/samples/Azure.ResourceManager.Nginx.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/nginx/Azure.ResourceManager.Nginx/samples/Azure.ResourceManager.Nginx.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.NotificationHubs.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "notificationhubs/Azure.ResourceManager.NotificationHubs/samples/Azure.ResourceManager.NotificationHubs.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/notificationhubs/Azure.ResourceManager.NotificationHubs/samples/Azure.ResourceManager.NotificationHubs.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "<Project Sdk=\"Microsoft.NET.Sdk\\\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"/>\n    <PackageReference Include=\"NUnit3TestAdapter\"/>\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.OperationalInsights.csproj\"/>\n  </ItemGroup>\n</Project>\n", "repo_name": "operationalinsights/Azure.ResourceManager.OperationalInsights/samples/Azure.ResourceManager.OperationalInsights.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/operationalinsights/Azure.ResourceManager.OperationalInsights/samples/Azure.ResourceManager.OperationalInsights.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "<Project Sdk=\"Microsoft.NET.Sdk\\\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"/>\n    <PackageReference Include=\"NUnit3TestAdapter\"/>\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.Orbital.csproj\"/>\n  </ItemGroup>\n</Project>\n", "repo_name": "orbital/Azure.ResourceManager.Orbital/samples/Azure.ResourceManager.Orbital.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/orbital/Azure.ResourceManager.Orbital/samples/Azure.ResourceManager.Orbital.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.PaloAltoNetworks.Ngfw.csproj\" />\n  </ItemGroup>\n</Project>", "repo_name": "paloaltonetworks.ngfw/Azure.ResourceManager.PaloAltoNetworks.Ngfw/samples/Azure.ResourceManager.PaloAltoNetworks.Ngfw.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/paloaltonetworks.ngfw/Azure.ResourceManager.PaloAltoNetworks.Ngfw/samples/Azure.ResourceManager.PaloAltoNetworks.Ngfw.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "<Project Sdk=\"Microsoft.NET.Sdk\\\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"/>\n    <PackageReference Include=\"NUnit3TestAdapter\"/>\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.Peering.csproj\"/>\n  </ItemGroup>\n</Project>\n", "repo_name": "peering/Azure.ResourceManager.Peering/samples/Azure.ResourceManager.Peering.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/peering/Azure.ResourceManager.Peering/samples/Azure.ResourceManager.Peering.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "<Project Sdk=\"Microsoft.NET.Sdk\\\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\" />\n    <PackageReference Include=\"NUnit\" />\n    <PackageReference Include=\"NUnit3TestAdapter\" />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.PolicyInsights.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "policyinsights/Azure.ResourceManager.PolicyInsights/samples/Azure.ResourceManager.PolicyInsights.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/policyinsights/Azure.ResourceManager.PolicyInsights/samples/Azure.ResourceManager.PolicyInsights.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.PowerBIDedicated.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "powerbidedicated/Azure.ResourceManager.PowerBIDedicated/samples/Azure.ResourceManager.PowerBIDedicated.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/powerbidedicated/Azure.ResourceManager.PowerBIDedicated/samples/Azure.ResourceManager.PowerBIDedicated.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "<Project Sdk=\"Microsoft.NET.Sdk\\\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"/>\n    <PackageReference Include=\"NUnit3TestAdapter\"/>\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.PrivateDns.csproj\"/>\n  </ItemGroup>\n</Project>\n", "repo_name": "privatedns/Azure.ResourceManager.PrivateDns/samples/Azure.ResourceManager.PrivateDns.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/privatedns/Azure.ResourceManager.PrivateDns/samples/Azure.ResourceManager.PrivateDns.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.ProviderHub.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "providerhub/Azure.ResourceManager.ProviderHub/samples/Azure.ResourceManager.ProviderHub.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/providerhub/Azure.ResourceManager.ProviderHub/samples/Azure.ResourceManager.ProviderHub.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "---\npage_type: sample\nlanguages:\n- csharp\nproducts:\n# Including relevant stubs from https://review.docs.microsoft.com/help/contribute/metadata-taxonomies#product\n- azure\nname: Azure.Analytics.Purview.Sharing samples for .NET\ndescription: Samples for the Azure.Analytics.Purview.Sharing client library.\n---\n\n# Azure.Analytics.Purview.Sharing Samples\n\n- [Create a sent share](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/purview/Azure.Analytics.Purview.Sharing/samples/Sample1_CreateSentShare.md)\n- [Create a sent share invitation](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/purview/Azure.Analytics.Purview.Sharing/samples/Sample2_CreateSentShareInvitation.md)\n- [Get a sent share invitation](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/purview/Azure.Analytics.Purview.Sharing/samples/Sample3_GetSentShareInvitation.md)\n- [List sent share invitations](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/purview/Azure.Analytics.Purview.Sharing/samples/Sample4_ListSentShareInvitations.md)\n- [Delete a sent share invitation](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/purview/Azure.Analytics.Purview.Sharing/samples/Sample5_DeleteSentShareInvitation.md)\n- [Delete a sent share](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/purview/Azure.Analytics.Purview.Sharing/samples/Sample6_DeleteSentShare.md)\n- [Get a sent share](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/purview/Azure.Analytics.Purview.Sharing/samples/Sample7_GetSentShare.md)\n- [List sent shares](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/purview/Azure.Analytics.Purview.Sharing/samples/Sample8_ListSentShares.md)\n- [Create a received share](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/purview/Azure.Analytics.Purview.Sharing/samples/Sample9_CreateReceivedShare.md)\n- [List detached received shares](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/purview/Azure.Analytics.Purview.Sharing/samples/Sample10_ListDetachedReceivedShares.md)\n- [List attached received shares](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/purview/Azure.Analytics.Purview.Sharing/samples/Sample11_ListAttachedReceivedShares.md)\n- [Delete a received share](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/purview/Azure.Analytics.Purview.Sharing/samples/Sample12_DeleteReceivedShare.md)\n- [Get a received share](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/purview/Azure.Analytics.Purview.Sharing/samples/Sample13_GetReceivedShare.md)\n", "repo_name": "purview/Azure.Analytics.Purview.Sharing/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/purview/Azure.Analytics.Purview.Sharing/samples", "language": ["C#", ".NET"]}, {"README_text": "# Create and get a Workflow\n\nThis sample shows how to create and get a workflow.\n\n## Create a WorkflowClient\n\nTo create a new `WorkflowClient`, you need the endpoint, API version, and credentials from your resource. In the sample below you'll use `UsernamePasswordCredential` to authenticate.\nYou can set `endpoint`, `username`, `password` etc. based on an environment variable, a configuration setting, or any way that works for your application.\n\n```C# Snippet:Azure_Analytics_Purview_Workflows_CreateClient\nUri endpoint = new Uri(Environment.GetEnvironmentVariable(\"WORKFLOW_ENDPOINT\"));\nstring clientId = Environment.GetEnvironmentVariable(\"ClientId\");\nstring tenantId = Environment.GetEnvironmentVariable(\"TenantId\");\nstring username = Environment.GetEnvironmentVariable(\"Username\");\nstring password = Environment.GetEnvironmentVariable(\"Password\");\n\nTokenCredential usernamePasswordCredential = new UsernamePasswordCredential(clientId,tenantId, username,password, null);\nvar client = new PurviewWorkflowServiceClient(endpoint, usernamePasswordCredential);\n```\n\n## Create a Workflow\n\n```C# Snippet:Azure_Analytics_Purview_Workflows_CreateWorkflow\nGuid workflowId = Guid.NewGuid();\n\nstring workflow = \"{\\\"name\\\":\\\"Create glossary term workflow\\\",\\\"description\\\":\\\"\\\",\\\"triggers\\\":[{\\\"type\\\":\\\"when_term_creation_is_requested\\\",\\\"underGlossaryHierarchy\\\":\\\"/glossaries/20031e20-b4df-4a66-a61d-1b0716f3fa48\\\"}],\\\"isEnabled\\\":true,\\\"actionDag\\\":{\\\"actions\\\":{\\\"Startandwaitforanapproval\\\":{\\\"type\\\":\\\"Approval\\\",\\\"inputs\\\":{\\\"parameters\\\":{\\\"approvalType\\\":\\\"PendingOnAll\\\",\\\"title\\\":\\\"ApprovalRequestforCreateGlossaryTerm\\\",\\\"assignedTo\\\":[\\\"eece94d9-0619-4669-bb8a-d6ecec5220bc\\\"]}},\\\"runAfter\\\":{}},\\\"Condition\\\":{\\\"type\\\":\\\"If\\\",\\\"expression\\\":{\\\"and\\\":[{\\\"equals\\\":[\\\"@outputs('Startandwaitforanapproval')['body/outcome']\\\",\\\"Approved\\\"]}]},\\\"actions\\\":{\\\"Createglossaryterm\\\":{\\\"type\\\":\\\"CreateTerm\\\",\\\"runAfter\\\":{}},\\\"Sendemailnotification\\\":{\\\"type\\\":\\\"EmailNotification\\\",\\\"inputs\\\":{\\\"parameters\\\":{\\\"emailSubject\\\":\\\"GlossaryTermCreate-APPROVED\\\",\\\"emailMessage\\\":\\\"YourrequestforGlossaryTerm@{triggerBody()['request']['term']['name']}isapproved.\\\",\\\"emailRecipients\\\":[\\\"@{triggerBody()['request']['requestor']}\\\"]}},\\\"runAfter\\\":{\\\"Createglossaryterm\\\":[\\\"Succeeded\\\"]}}},\\\"else\\\":{\\\"actions\\\":{\\\"Sendrejectemailnotification\\\":{\\\"type\\\":\\\"EmailNotification\\\",\\\"inputs\\\":{\\\"parameters\\\":{\\\"emailSubject\\\":\\\"GlossaryTermCreate-REJECTED\\\",\\\"emailMessage\\\":\\\"YourrequestforGlossaryTerm@{triggerBody()['request']['term']['name']}isrejected.\\\",\\\"emailRecipients\\\":[\\\"@{triggerBody()['request']['requestor']}\\\"]}},\\\"runAfter\\\":{}}}},\\\"runAfter\\\":{\\\"Startandwaitforanapproval\\\":[\\\"Succeeded\\\"]}}}}}\";\n\nResponse createResult = await client.CreateOrReplaceWorkflowAsync(workflowId, RequestContent.Create(workflow));\n```\n\n## Get a Workflow\n\n```C# Snippet:Azure_Analytics_Purview_Workflows_GetWorkflow\n// This workflowId represents an existing workflow. The id can be obtained by calling CreateOrReplaceWorkflowAsync API or list workflows by calling GetWorkflowsAsync API.\nGuid workflowId = new Guid(\"8af1ecae-16ee-4b2d-8972-00d611dd2f99\");\n\nResponse getResult = await client.GetWorkflowAsync(workflowId);\n```\n\n", "repo_name": "purview/Azure.Analytics.Purview.Workflows/samples/Sample1_Workflows.md", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/purview/Azure.Analytics.Purview.Workflows/samples/Sample1_Workflows.md", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\" />\n    <PackageReference Include=\"NUnit\" />\n    <PackageReference Include=\"NUnit3TestAdapter\" />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.Purview.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "purview/Azure.ResourceManager.Purview/samples/Azure.ResourceManager.Purview.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/purview/Azure.ResourceManager.Purview/samples/Azure.ResourceManager.Purview.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n\n  <PropertyGroup>\n    <Description>Azure Quantum Jobs library samples</Description>\n    <AssemblyTitle>Azure Quantum Jobs Samples</AssemblyTitle>\n    <Version>1.0.0-beta.3</Version>\n    <PackageTags>Azure;Quantum;Quantum Jobs</PackageTags>\n    <TargetFrameworks>$(RequiredTargetFrameworks)</TargetFrameworks>\n    <OutputType>Exe</OutputType>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.Quantum.Jobs.csproj\" />\n  </ItemGroup>\n\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\" />\n    <PackageReference Include=\"Azure.Storage.Blobs\" />\n  </ItemGroup>\n\n  <ItemGroup>\n    <None Update=\"problem.json\">\n      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\n    </None>\n  </ItemGroup>\n\n</Project>\n", "repo_name": "quantum/Azure.Quantum.Jobs/samples/Azure.Quantum.Jobs.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/quantum/Azure.Quantum.Jobs/samples/Azure.Quantum.Jobs.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.Quantum.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "quantum/Azure.ResourceManager.Quantum/samples/Azure.ResourceManager.Quantum.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/quantum/Azure.ResourceManager.Quantum/samples/Azure.ResourceManager.Quantum.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.Qumulo.csproj\" />\n  </ItemGroup>\n</Project>", "repo_name": "qumulo/Azure.ResourceManager.Qumulo/samples/Azure.ResourceManager.Qumulo.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/qumulo/Azure.ResourceManager.Qumulo/samples/Azure.ResourceManager.Qumulo.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.Quota.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "quota/Azure.ResourceManager.Quota/samples/Azure.ResourceManager.Quota.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/quota/Azure.ResourceManager.Quota/samples/Azure.ResourceManager.Quota.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "<Project Sdk=\"Microsoft.NET.Sdk\\\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"/>\n    <PackageReference Include=\"NUnit3TestAdapter\"/>\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.RecoveryServicesBackup.csproj\"/>\n  </ItemGroup>\n</Project>\n", "repo_name": "recoveryservices-backup/Azure.ResourceManager.RecoveryServicesBackup/samples/Azure.ResourceManager.RecoveryServicesBackup.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/recoveryservices-backup/Azure.ResourceManager.RecoveryServicesBackup/samples/Azure.ResourceManager.RecoveryServicesBackup.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.RecoveryServicesSiteRecovery.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "recoveryservices-siterecovery/Azure.ResourceManager.RecoveryServicesSiteRecovery/samples/Azure.ResourceManager.RecoveryServicesSiteRecovery.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/recoveryservices-siterecovery/Azure.ResourceManager.RecoveryServicesSiteRecovery/samples/Azure.ResourceManager.RecoveryServicesSiteRecovery.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "<Project Sdk=\"Microsoft.NET.Sdk\\\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"/>\n    <PackageReference Include=\"NUnit3TestAdapter\"/>\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.RecoveryServices.csproj\"/>\n  </ItemGroup>\n</Project>\n", "repo_name": "recoveryservices/Azure.ResourceManager.RecoveryServices/samples/Azure.ResourceManager.RecoveryServices.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/recoveryservices/Azure.ResourceManager.RecoveryServices/samples/Azure.ResourceManager.RecoveryServices.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.Redis.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "redis/Azure.ResourceManager.Redis/samples/Azure.ResourceManager.Redis.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/redis/Azure.ResourceManager.Redis/samples/Azure.ResourceManager.Redis.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.RedisEnterprise.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "redisenterprise/Azure.ResourceManager.RedisEnterprise/samples/Azure.ResourceManager.RedisEnterprise.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/redisenterprise/Azure.ResourceManager.RedisEnterprise/samples/Azure.ResourceManager.RedisEnterprise.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.Relay.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "relay/Azure.ResourceManager.Relay/samples/Azure.ResourceManager.Relay.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/relay/Azure.ResourceManager.Relay/samples/Azure.ResourceManager.Relay.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.Reservations.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "reservations/Azure.ResourceManager.Reservations/samples/Azure.ResourceManager.Reservations.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/reservations/Azure.ResourceManager.Reservations/samples/Azure.ResourceManager.Reservations.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "<Project Sdk=\"Microsoft.NET.Sdk\\\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"/>\n    <PackageReference Include=\"NUnit3TestAdapter\"/>\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.ResourceGraph.csproj\"/>\n  </ItemGroup>\n</Project>\n", "repo_name": "resourcegraph/Azure.ResourceManager.ResourceGraph/samples/Azure.ResourceManager.ResourceGraph.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcegraph/Azure.ResourceManager.ResourceGraph/samples/Azure.ResourceManager.ResourceGraph.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.ResourceHealth.csproj\" />\n  </ItemGroup>\n</Project>", "repo_name": "resourcehealth/Azure.ResourceManager.ResourceHealth/samples/Azure.ResourceManager.ResourceHealth.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcehealth/Azure.ResourceManager.ResourceHealth/samples/Azure.ResourceManager.ResourceHealth.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "---\npage_type: sample\nlanguages:\n- csharp\nproducts:\n- azure\n- azure-resource-manager\nname: Azure.ResourceManager samples for .NET\ndescription: Samples for the Azure.ResourceManager client library\n---\n\n# Azure.ResourceManager Samples\n\n- [Hello World - Getting a subscription](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/samples/Sample1_HelloWorld.md)\n- [Hello World - Getting a subscription async](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/samples/Sample1_HelloWorldAsync.md)\n- [Managing Resource Groups](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/samples/Sample2_ManagingResourceGroups.md)\n- [Creating a virtual network](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/samples/Sample3_CreatingAVirtualNetwork.md)\n- [Enable Cross-Tenant Authentication](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/samples/Sample4_MultiTenant.md)\n", "repo_name": "resourcemanager/Azure.ResourceManager/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemanager/Azure.ResourceManager/samples", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.ResourceMover.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "resourcemover/Azure.ResourceManager.ResourceMover/samples/Azure.ResourceManager.ResourceMover.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resourcemover/Azure.ResourceManager.ResourceMover/samples/Azure.ResourceManager.ResourceMover.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.Resources.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "resources/Azure.ResourceManager.Resources/samples/Azure.ResourceManager.Resources.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/resources/Azure.ResourceManager.Resources/samples/Azure.ResourceManager.Resources.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "# Registering and retrieving Avro, Json, and custom schemas\n\nThe following shows examples of how to use the basic functionality of the `SchemaRegistryClient` with each of the available schema format types. All of the client methods can be used with each format by passing in the proper 'SchemaFormat' value when needed.\n\nSchema Registry schema groups can only accept one format of schemas.\n\nIn the current service version, the Schema Registry service only accepts and validates draft 3 JSON schemas. Functionality to support additional drafts of JSON will be added.\n\n- [Registering and retrieving Avro, Json, and custom schemas](#registering-and-retrieving-avro-json-and-custom-schemas)\n    - [Register an Avro schema](#register-an-avro-schema)\n    - [Retrieve an Avro schema](#retrieve-an-avro-schema)\n    - [Register a Json schema (preview)](#register-a-json-schema-preview)\n    - [Retrieve a Json schema (preview)](#retrieve-a-json-schema-preview)\n    - [Register a custom schema (preview)](#register-a-custom-schema-preview)\n    - [Retrieve a custom schema (preview)](#retrieve-a-custom-schema-preview)\n\n### Register an Avro schema\n\nRegister an Avro schema to be stored in the Azure Schema Registry.\n\n```C# Snippet:SchemaRegistryRegisterSchemaAvro\nstring name = \"employeeSample\";\nSchemaFormat format = SchemaFormat.Avro;\n// Example schema's definition\nstring definition = @\"\n{\n   \"\"type\"\" : \"\"record\"\",\n    \"\"namespace\"\" : \"\"TestSchema\"\",\n    \"\"name\"\" : \"\"Employee\"\",\n    \"\"fields\"\" : [\n    { \"\"name\"\" : \"\"Name\"\" , \"\"type\"\" : \"\"string\"\" },\n    { \"\"name\"\" : \"\"Age\"\", \"\"type\"\" : \"\"int\"\" }\n    ]\n}\";\n\nResponse<SchemaProperties> schemaProperties = avroClient.RegisterSchema(groupName, name, definition, format);\n```\n\n### Retrieve an Avro schema\n\nRetrieve a previously registered schema's content from the Azure Schema Registry with either a schema ID or the group name, schema name, and version. This is the same regardless of schema format.\n\n```C# Snippet:SchemaRegistryRetrieveSchemaAvro\nSchemaRegistrySchema schema = avroClient.GetSchema(schemaId);\nstring definition = schema.Definition;\n```\n\n### Register a Json schema (preview)\n\nRegister a Json schema to be stored in the Azure Schema Registry.\n\n```C# Snippet:SchemaRegistryRegisterSchemaJson\nstring name = \"employeeSample\";\nSchemaFormat format = SchemaFormat.Json;\n// Example schema's definition\nstring definition = @\"\n{\n    $schema: \"\"https://json-schema.org/draft/2020-12/schema\"\",\n    $id: \"\"https://example.com/product.schema.json\"\",\n    title: \"\"Product\"\",\n    description: \"\"A product from the catalog\"\",\n    type: \"\"object\"\",\n    properties: {\n        name: {\n            type: \"\"string\"\",\n            required: true,\n        },\n        favoriteNumber: {\n            type: \"\"integer\"\",\n            required: true,\n        },\n    }\n}\";\n\nResponse<SchemaProperties> schemaProperties = jsonClient.RegisterSchema(groupName, name, definition, format);\n```\n\n### Retrieve a Json schema (preview)\n\nRetrieve a previously registered schema's content from the Azure Schema Registry with either a schema ID or the group name, schema name, and version. This is the same regardless of schema format.\n\n```C# Snippet:SchemaRegistryRetrieveSchemaJson\nSchemaRegistrySchema schema = jsonClient.GetSchema(schemaId);\nstring definition = schema.Definition;\n```\n\n### Register a custom schema (preview)\n\nRegister a custom schema to be stored in the Azure Schema Registry.\n\n```C# Snippet:SchemaRegistryRegisterSchemaCustom\nstring name = \"employeeSample\";\nSchemaFormat format = SchemaFormat.Custom;\n// Example schema's definition\nstring definition = @\"\n{\n    NAME: string\n    OCCUPATION: string\n    EMAIL: string\n}\";\n\nResponse<SchemaProperties> schemaProperties = customClient.RegisterSchema(groupName, name, definition, format);\n```\n\n### Retrieve a custom schema (preview)\n\nRetrieve a previously registered schema's content from the Azure Schema Registry with either a schema ID or the group name, schema name, and version. This is the same regardless of schema format.\n\n```C# Snippet:SchemaRegistryRetrieveSchemaCustom\nSchemaRegistrySchema schema = customClient.GetSchema(schemaId);\nstring definition = schema.Definition;\n```\n", "repo_name": "schemaregistry/Azure.Data.SchemaRegistry/samples/Sample01_HelloWorld.md", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/schemaregistry/Azure.Data.SchemaRegistry/samples/Sample01_HelloWorld.md", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.Search.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "search/Azure.ResourceManager.Search/samples/Azure.ResourceManager.Search.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/search/Azure.ResourceManager.Search/samples/Azure.ResourceManager.Search.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "---\npage_type: sample\nlanguages:\n- csharp\nproducts:\n- azure\n- azure-search\nname: Azure.Search.Documents samples for .NET\ndescription: Samples for the Azure.Search.Documents client library\n---\n\n# Azure.Search.Documents Samples\n\n- Get started either [synchronously](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/search/Azure.Search.Documents/samples/Sample01a_HelloWorld.md) or [asynchronously](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/search/Azure.Search.Documents/samples/Sample01b_HelloWorldAsync.md).\n- Perform [service level operations](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/search/Azure.Search.Documents/samples/Sample02_Service.md).\n- Perform [index level operations](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/search/Azure.Search.Documents/samples/Sample03_Index.md).\n- Use [`[FieldBuilderIgnore]`](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/search/Azure.Search.Documents/samples/Sample04_FieldBuilderIgnore.md) to add fields for unsupported properties using `FieldBuilder`.\n- Learn about different ways to [index documents](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/search/Azure.Search.Documents/samples/Sample05_IndexingDocuments.md).\n- Use your own Key Vault key to [encrypt your data source connections, skillsets, indexers, and index](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/search/Azure.Search.Documents/samples/Sample06_EncryptedIndex.md).\n", "repo_name": "search/Azure.Search.Documents/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/search/Azure.Search.Documents/samples", "language": ["C#", ".NET"]}, {"README_text": "<Project Sdk=\"Microsoft.NET.Sdk\\\">\n  <PropertyGroup>\n    <NoWarn>CS0618</NoWarn>\n  </PropertyGroup>\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"/>\n    <PackageReference Include=\"NUnit3TestAdapter\"/>\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.SecurityCenter.csproj\"/>\n  </ItemGroup>\n</Project>\n", "repo_name": "securitycenter/Azure.ResourceManager.SecurityCenter/samples/Azure.ResourceManager.SecurityCenter.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/securitycenter/Azure.ResourceManager.SecurityCenter/samples/Azure.ResourceManager.SecurityCenter.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.SelfHelp.csproj\" />\n  </ItemGroup>\n</Project>", "repo_name": "selfhelp/Azure.ResourceManager.SelfHelp/samples/Azure.ResourceManager.SelfHelp.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/selfhelp/Azure.ResourceManager.SelfHelp/samples/Azure.ResourceManager.SelfHelp.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project ToolsVersion=\"15.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n  <PropertyGroup>\n    <!-- Signal that samples are building in the repo as opposed to a standalone download from Samples Browser -->\n    <IsSamplesProject>true</IsSamplesProject>\n    <IsPackable>false</IsPackable>\n    <ExcludeFromCodeCoverage>true</ExcludeFromCodeCoverage>\n    <ImportRepoCommonSettings>true</ImportRepoCommonSettings>\n    <WarnOnPackingNonPackableProject>false</WarnOnPackingNonPackableProject>\n  </PropertyGroup>\n\n  <Import Project=\"..\\Directory.Build.props\" />\n\n  <PropertyGroup>\n    <InheritDocEnabled>false</InheritDocEnabled>\n    <IsShippingLibrary>false</IsShippingLibrary>\n  </PropertyGroup>\n</Project>\n", "repo_name": "servicebus/Azure.Messaging.ServiceBus/samples/Directory.Build.props", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/servicebus/Azure.Messaging.ServiceBus/samples/Directory.Build.props", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.ServiceBus.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "servicebus/Azure.ResourceManager.ServiceBus/samples/Azure.ResourceManager.ServiceBus.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/servicebus/Azure.ResourceManager.ServiceBus/samples/Azure.ResourceManager.ServiceBus.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.ServiceFabric.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "servicefabric/Azure.ResourceManager.ServiceFabric/samples/Azure.ResourceManager.ServiceFabric.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/servicefabric/Azure.ResourceManager.ServiceFabric/samples/Azure.ResourceManager.ServiceFabric.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.ServiceFabricManagedClusters.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "servicefabricmanagedclusters/Azure.ResourceManager.ServiceFabricManagedClusters/samples/Azure.ResourceManager.ServiceFabricManagedClusters.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/servicefabricmanagedclusters/Azure.ResourceManager.ServiceFabricManagedClusters/samples/Azure.ResourceManager.ServiceFabricManagedClusters.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.ServiceLinker.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "servicelinker/Azure.ResourceManager.ServiceLinker/samples/Azure.ResourceManager.ServiceLinker.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/servicelinker/Azure.ResourceManager.ServiceLinker/samples/Azure.ResourceManager.ServiceLinker.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\" />\n    <PackageReference Include=\"NUnit\" />\n    <PackageReference Include=\"NUnit3TestAdapter\" />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.ServiceNetworking.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "servicenetworking/Azure.ResourceManager.ServiceNetworking/samples/Azure.ResourceManager.ServiceNetworking.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/servicenetworking/Azure.ResourceManager.ServiceNetworking/samples/Azure.ResourceManager.ServiceNetworking.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "# Strongly Typed Serverless Hub\n\nStrongly typed serverless hub is a programming model which allows you to define your SignalR client methods in an interface, and the RPC implementation will be done by SignalR.\n\nThis sample demonstrates how to create a strongly typed serverless hub and invoke SignalR client methods in it. To see more details on serverless hub, please go [here](https://docs.microsoft.com/azure/azure-signalr/signalr-concept-serverless-development-config#class-based-model).\n\n## Define a strongly typed serverless hub class\n\nLet's say you want to invoke a SignalR client method `ReceiveMessage` with a string parameter when a HTTP request comes.\n\nFirstly you need to define an interface for the client method.\n\n```C# Snippet:StronglyTypedHub_ClientMethodInterface\npublic interface IChatClient\n{\n    Task ReceiveMessage(string message);\n}\n```\n\nThen you creates a strongly typed hub with the interface:\n\n```C# Snippet:StronglyTypedHub\npublic class StronglyTypedHub : ServerlessHub<IChatClient>\n{\n    [FunctionName(nameof(Broadcast))]\n    public async Task Broadcast([HttpTrigger(AuthorizationLevel.Anonymous)] HttpRequest _, string message)\n    {\n        await Clients.All.ReceiveMessage(message);\n    }\n}\n```\n\n## Call client methods\n\nThe code snippet above defines a method in the hub, which broadcasts the message to all the clients once triggered by HTTP request.\n", "repo_name": "signalr/Microsoft.Azure.WebJobs.Extensions.SignalRService/samples/Sample01_StronglyTypedHub.md", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/signalr/Microsoft.Azure.WebJobs.Extensions.SignalRService/samples/Sample01_StronglyTypedHub.md", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.Sphere.csproj\" />\n  </ItemGroup>\n</Project>", "repo_name": "sphere/Azure.ResourceManager.Sphere/samples/Azure.ResourceManager.Sphere.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/sphere/Azure.ResourceManager.Sphere/samples/Azure.ResourceManager.Sphere.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "<Project Sdk=\"Microsoft.NET.Sdk\\\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"/>\n    <PackageReference Include=\"NUnit3TestAdapter\"/>\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.Sql.csproj\"/>\n  </ItemGroup>\n</Project>\n", "repo_name": "sqlmanagement/Azure.ResourceManager.Sql/samples/Azure.ResourceManager.Sql.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/sqlmanagement/Azure.ResourceManager.Sql/samples/Azure.ResourceManager.Sql.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "<Project Sdk=\"Microsoft.NET.Sdk\\\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"/>\n    <PackageReference Include=\"NUnit3TestAdapter\"/>\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.SqlVirtualMachine.csproj\"/>\n  </ItemGroup>\n</Project>\n", "repo_name": "sqlvirtualmachine/Azure.ResourceManager.SqlVirtualMachine/samples/Azure.ResourceManager.SqlVirtualMachine.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/sqlvirtualmachine/Azure.ResourceManager.SqlVirtualMachine/samples/Azure.ResourceManager.SqlVirtualMachine.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.Storage.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "storage/Azure.ResourceManager.Storage/samples/Azure.ResourceManager.Storage.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/storage/Azure.ResourceManager.Storage/samples/Azure.ResourceManager.Storage.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <PropertyGroup>\n    <TargetFrameworks>$(RequiredTargetFrameworks)</TargetFrameworks>\n    <AssemblyTitle>Microsoft Azure.Storage.Blobs.Batch client library samples</AssemblyTitle>\n    <IsPackable>false</IsPackable>\n  </PropertyGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"$(MSBuildThisFileDirectory)..\\..\\Azure.Storage.Blobs\\src\\Azure.Storage.Blobs.csproj\" />\n    <ProjectReference Include=\"$(MSBuildThisFileDirectory)..\\..\\Azure.Storage.Common\\src\\Azure.Storage.Common.csproj\" />\n    <ProjectReference Include=\"$(MSBuildThisFileDirectory)..\\..\\Azure.Storage.Blobs.Batch\\src\\Azure.Storage.Blobs.Batch.csproj\" />\n  </ItemGroup>\n  <ItemGroup>\n    <Compile Include=\"$(AzureStorageSharedTestSources)\\**\\*.cs\" LinkBase=\"Shared\" />\n    <Compile Remove=\"$(AzureStorageSharedTestSources)\\AzuriteFixture.cs\" />\n    <Compile Remove=\"$(AzureStorageSharedTestSources)\\AzuriteNUnitFixture.cs\" />\n    <Compile Remove=\"$(AzureStorageSharedTestSources)\\ClientSideEncryptionTestExtensions.cs\" />\n    <Compile Remove=\"$(AzureStorageSharedTestSources)\\StorageTestBase.SasVersion.cs\" />\n    <Compile Remove=\"$(AzureStorageSharedTestSources)\\Sas\\*.cs\" />\n    <Compile Remove=\"$(AzureStorageSharedTestSources)\\RepeatingStream.cs\" />\n    <Compile Remove=\"$(AzureStorageSharedTestSources)\\TransferValidationTestBase.cs\" />\n    <None Include=\"$(AzureStorageSharedTestSources)\\*.xml\">\n      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\n    </None>\n  </ItemGroup>\n  <ItemGroup>\n    <!-- Required Shared Source for testing -->\n    <Compile Include=\"$(AzureCoreSharedSources)ArrayBufferWriter.cs\" LinkBase=\"Shared\\Core\" />\n    <Compile Include=\"$(AzureCoreSharedSources)NoBodyResponseOfT.cs\" LinkBase=\"Shared\\Core\" />\n    <Compile Include=\"$(AzureCoreSharedSources)TaskExtensions.cs\" LinkBase=\"Shared\\Core\" />\n    <Compile Include=\"$(AzureStorageSharedSources)Constants.cs\" LinkBase=\"Shared\" />\n    <Compile Include=\"$(AzureStorageSharedSources)Errors.cs\" LinkBase=\"Shared\" />\n    <Compile Include=\"$(AzureStorageSharedSources)StorageConnectionString.cs\" LinkBase=\"Shared\" />\n    <Compile Include=\"$(AzureStorageSharedSources)SharedAccessSignatureCredentials.cs\" LinkBase=\"Shared\" />\n    <Compile Include=\"$(AzureStorageSharedSources)UriExtensions.cs\" LinkBase=\"Shared\" />\n    <Compile Include=\"$(AzureStorageSharedSources)UriQueryParamsCollection.cs\" LinkBase=\"Shared\" />\n    <Compile Include=\"$(AzureStorageSharedSources)StorageExceptionExtensions.cs\" LinkBase=\"Shared\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "storage/Azure.Storage.Blobs.Batch/samples/Azure.Storage.Blobs.Batch.Samples.Tests.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/storage/Azure.Storage.Blobs.Batch/samples/Azure.Storage.Blobs.Batch.Samples.Tests.csproj", "language": ["C#", ".NET"]}, {"README_text": "<Project Sdk=\"Microsoft.NET.Sdk\">\n  <PropertyGroup>\n    <TargetFrameworks>$(RequiredTargetFrameworks)</TargetFrameworks>\n    <AssemblyTitle>Microsoft Azure.Storage.Blobs.ChangeFeed client library samples</AssemblyTitle>\n    <IsPackable>false</IsPackable>\n  </PropertyGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"$(MSBuildThisFileDirectory)..\\src\\Azure.Storage.Blobs.ChangeFeed.csproj\" />\n    <ProjectReference Include=\"$(MSBuildThisFileDirectory)..\\..\\Azure.Storage.Common\\src\\Azure.Storage.Common.csproj\" />\n  </ItemGroup>\n  <ItemGroup>\n    <Compile Include=\"$(AzureStorageSharedTestSources)\\**\\*.cs\" LinkBase=\"Shared\" />\n    <Compile Remove=\"$(AzureStorageSharedTestSources)\\AzuriteFixture.cs\" />\n    <Compile Remove=\"$(AzureStorageSharedTestSources)\\AzuriteNUnitFixture.cs\" />\n    <Compile Remove=\"$(AzureStorageSharedTestSources)\\RepeatingStream.cs\" />\n    <Compile Remove=\"$(AzureStorageSharedTestSources)\\StorageTestBase.SasVersion.cs\" />\n    <Compile Remove=\"$(AzureStorageSharedTestSources)\\TransferValidationTestBase.cs\" />\n    <Compile Remove=\"$(AzureStorageSharedTestSources)\\ClientSideEncryptionTestExtensions.cs\" />\n    <Compile Remove=\"$(AzureStorageSharedTestSources)\\Sas\\*.cs\" />\n    <None Include=\"$(AzureStorageSharedTestSources)\\*.xml\">\n      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\n    </None>\n  </ItemGroup>\n  <ItemGroup>\n    <!-- Required Shared Source for testing -->\n    <Compile Include=\"$(AzureCoreSharedSources)ArrayBufferWriter.cs\" LinkBase=\"Shared\\Core\" />\n    <Compile Include=\"$(AzureCoreSharedSources)NoBodyResponseOfT.cs\" LinkBase=\"Shared\\Core\" />\n    <Compile Include=\"$(AzureCoreSharedSources)TaskExtensions.cs\" LinkBase=\"Shared\\Core\" />\n    <Compile Include=\"$(AzureStorageSharedSources)Constants.cs\" LinkBase=\"Shared\" />\n    <Compile Include=\"$(AzureStorageSharedSources)Errors.cs\" LinkBase=\"Shared\" />\n    <Compile Include=\"$(AzureStorageSharedSources)StorageConnectionString.cs\" LinkBase=\"Shared\" />\n    <Compile Include=\"$(AzureStorageSharedSources)SharedAccessSignatureCredentials.cs\" LinkBase=\"Shared\" />\n    <Compile Include=\"$(AzureStorageSharedSources)UriExtensions.cs\" LinkBase=\"Shared\" />\n    <Compile Include=\"$(AzureStorageSharedSources)UriQueryParamsCollection.cs\" LinkBase=\"Shared\" />\n    <Compile Include=\"$(AzureStorageSharedSources)StorageExceptionExtensions.cs\" LinkBase=\"Shared\" />\n    <Compile Remove=\"$(AzureStorageSharedTestSources)\\TransferValidationTestBase.cs\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "storage/Azure.Storage.Blobs.ChangeFeed/samples/Azure.Storage.Blobs.ChangeFeed.Samples.Tests.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/storage/Azure.Storage.Blobs.ChangeFeed/samples/Azure.Storage.Blobs.ChangeFeed.Samples.Tests.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <PropertyGroup>\n    <TargetFrameworks>$(RequiredTargetFrameworks)</TargetFrameworks>\n    <AssemblyTitle>Microsoft Azure.Storage.Blobs client library samples</AssemblyTitle>\n    <IsPackable>false</IsPackable>\n  </PropertyGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"$(MSBuildThisFileDirectory)..\\src\\Azure.Storage.Blobs.csproj\" />\n    <ProjectReference Include=\"$(MSBuildThisFileDirectory)..\\..\\Azure.Storage.Common\\src\\Azure.Storage.Common.csproj\" />\n    <ProjectReference Include=\"$(MSBuildThisFileDirectory)..\\..\\Azure.Storage.Blobs.Batch\\src\\Azure.Storage.Blobs.Batch.csproj\" />\n  </ItemGroup>\n  <ItemGroup>\n    <Compile Include=\"$(AzureStorageSharedTestSources)\\**\\*.cs\" LinkBase=\"Shared\" />\n    <Compile Remove=\"$(AzureStorageSharedTestSources)\\AzuriteFixture.cs\" />\n    <Compile Remove=\"$(AzureStorageSharedTestSources)\\AzuriteNUnitFixture.cs\" />\n    <Compile Remove=\"$(AzureStorageSharedTestSources)\\ClientSideEncryptionTestExtensions.cs\" />\n    <Compile Remove=\"$(AzureStorageSharedTestSources)\\RepeatingStream.cs\" />\n    <Compile Remove=\"$(AzureStorageSharedTestSources)\\StorageTestBase.SasVersion.cs\" />\n    <Compile Remove=\"$(AzureStorageSharedTestSources)\\Sas\\*.cs\" />\n    <Compile Remove=\"$(AzureStorageSharedTestSources)\\TransferValidationTestBase.cs\" />\n    <None Include=\"$(AzureStorageSharedTestSources)\\*.xml\">\n      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\n    </None>\n  </ItemGroup>\n  <ItemGroup>\n    <!-- Required Shared Source for testing -->\n    <Compile Include=\"$(AzureCoreSharedSources)ArrayBufferWriter.cs\" LinkBase=\"Shared\\Core\" />\n    <Compile Include=\"$(AzureCoreSharedSources)NoBodyResponseOfT.cs\" LinkBase=\"Shared\\Core\" />\n    <Compile Include=\"$(AzureCoreSharedSources)TaskExtensions.cs\" LinkBase=\"Shared\\Core\" />\n    <Compile Include=\"$(AzureStorageSharedSources)Constants.cs\" LinkBase=\"Shared\" />\n    <Compile Include=\"$(AzureStorageSharedSources)Errors.cs\" LinkBase=\"Shared\" />\n    <Compile Include=\"$(AzureStorageSharedSources)StorageConnectionString.cs\" LinkBase=\"Shared\" />\n    <Compile Include=\"$(AzureStorageSharedSources)SharedAccessSignatureCredentials.cs\" LinkBase=\"Shared\" />\n    <Compile Include=\"$(AzureStorageSharedSources)UriExtensions.cs\" LinkBase=\"Shared\" />\n    <Compile Include=\"$(AzureStorageSharedSources)UriQueryParamsCollection.cs\" LinkBase=\"Shared\" />\n    <Compile Include=\"$(AzureStorageSharedSources)StorageExceptionExtensions.cs\" LinkBase=\"Shared\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "storage/Azure.Storage.Blobs/samples/Azure.Storage.Blobs.Samples.Tests.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/storage/Azure.Storage.Blobs/samples/Azure.Storage.Blobs.Samples.Tests.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <PropertyGroup>\n    <TargetFrameworks>$(RequiredTargetFrameworks)</TargetFrameworks>\n    <AssemblyTitle>Microsoft Azure.Storage.Common client library samples</AssemblyTitle>\n    <IsPackable>false</IsPackable>\n    <RootNamespace>Azure.Storage.Samples.Tests</RootNamespace>\n  </PropertyGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"$(MSBuildThisFileDirectory)..\\..\\Azure.Storage.Blobs\\src\\Azure.Storage.Blobs.csproj\" />\n    <ProjectReference Include=\"$(MSBuildThisFileDirectory)..\\..\\Azure.Storage.Files.Shares\\src\\Azure.Storage.Files.Shares.csproj\" />\n    <ProjectReference Include=\"$(MSBuildThisFileDirectory)..\\..\\Azure.Storage.Queues\\src\\Azure.Storage.Queues.csproj\" />\n    <ProjectReference Include=\"$(MSBuildThisFileDirectory)..\\..\\Azure.Storage.Common\\src\\Azure.Storage.Common.csproj\" />\n  </ItemGroup>\n  <ItemGroup>\n    <Compile Include=\"$(AzureStorageSharedTestSources)\\**\\*.cs\" LinkBase=\"Shared\" />\n    <Compile Remove=\"$(AzureStorageSharedTestSources)\\AzuriteFixture.cs\" />\n    <Compile Remove=\"$(AzureStorageSharedTestSources)\\AzuriteNUnitFixture.cs\" />\n    <Compile Remove=\"$(AzureStorageSharedTestSources)\\ClientSideEncryptionTestExtensions.cs\" />\n    <Compile Remove=\"$(AzureStorageSharedTestSources)\\RepeatingStream.cs\" />\n    <Compile Remove=\"$(AzureStorageSharedTestSources)\\StorageTestBase.SasVersion.cs\" />\n    <Compile Remove=\"$(AzureStorageSharedTestSources)\\Sas\\*.cs\" />\n    <Compile Remove=\"$(AzureStorageSharedTestSources)\\TransferValidationTestBase.cs\" />\n    <None Include=\"$(AzureStorageSharedTestSources)\\*.xml\">\n      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\n    </None>\n  </ItemGroup>\n  <ItemGroup>\n    <!-- Required Shared Source for testing -->\n    <Compile Include=\"$(AzureCoreSharedSources)ArrayBufferWriter.cs\" LinkBase=\"Shared\\Core\" />\n    <Compile Include=\"$(AzureCoreSharedSources)NoBodyResponseOfT.cs\" LinkBase=\"Shared\\Core\" />\n    <Compile Include=\"$(AzureCoreSharedSources)TaskExtensions.cs\" LinkBase=\"Shared\\Core\" />\n    <Compile Include=\"$(AzureStorageSharedSources)Constants.cs\" LinkBase=\"Shared\" />\n    <Compile Include=\"$(AzureStorageSharedSources)Errors.cs\" LinkBase=\"Shared\" />\n    <Compile Include=\"$(AzureStorageSharedSources)StorageConnectionString.cs\" LinkBase=\"Shared\" />\n    <Compile Include=\"$(AzureStorageSharedSources)SharedAccessSignatureCredentials.cs\" LinkBase=\"Shared\" />\n    <Compile Include=\"$(AzureStorageSharedSources)UriExtensions.cs\" LinkBase=\"Shared\" />\n    <Compile Include=\"$(AzureStorageSharedSources)UriQueryParamsCollection.cs\" LinkBase=\"Shared\" />\n    <Compile Include=\"$(AzureStorageSharedSources)StorageExceptionExtensions.cs\" LinkBase=\"Shared\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "storage/Azure.Storage.Common/samples/Azure.Storage.Common.Samples.Tests.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/storage/Azure.Storage.Common/samples/Azure.Storage.Common.Samples.Tests.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <PropertyGroup>\n    <TargetFrameworks>$(RequiredTargetFrameworks)</TargetFrameworks>\n    <AssemblyTitle>Microsoft Azure.Storage.DataMovement.Blobs client library samples</AssemblyTitle>\n    <IsPackable>false</IsPackable>\n  </PropertyGroup>\n  <ItemGroup>\n    <Compile Include=\"$(AzureStorageSharedTestSources)\\**\\*.cs\" LinkBase=\"Shared\" />\n    <Compile Remove=\"$(AzureStorageSharedTestSources)\\AzuriteFixture.cs\" />\n    <Compile Remove=\"$(AzureStorageSharedTestSources)\\AzuriteNUnitFixture.cs\" />\n    <Compile Remove=\"$(AzureStorageSharedTestSources)\\StorageTestBase.SasVersion.cs\" />\n    <Compile Remove=\"$(AzureStorageSharedTestSources)\\ClientSideEncryptionTestExtensions.cs\" />\n    <Compile Remove=\"$(AzureStorageSharedTestSources)\\RepeatingStream.cs\" />\n    <Compile Remove=\"$(AzureStorageSharedTestSources)\\TransferValidationTestBase.cs\" />\n    <Compile Remove=\"$(AzureStorageSharedTestSources)\\Sas\\*.cs\" />\n    <None Include=\"$(AzureStorageSharedTestSources)\\*.xml\">\n      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\n    </None>\n  </ItemGroup>\n  <ItemGroup>\n    <!-- Required Shared Source for testing -->\n    <Compile Include=\"$(AzureCoreSharedSources)ArrayBufferWriter.cs\" LinkBase=\"Shared\\Core\" />\n    <Compile Include=\"$(AzureCoreSharedSources)NoBodyResponseOfT.cs\" LinkBase=\"Shared\\Core\" />\n    <Compile Include=\"$(AzureCoreSharedSources)TaskExtensions.cs\" LinkBase=\"Shared\\Core\" />\n    <Compile Include=\"$(AzureStorageSharedSources)Constants.cs\" LinkBase=\"Shared\" />\n    <Compile Include=\"$(AzureStorageSharedSources)Errors.cs\" LinkBase=\"Shared\" />\n    <Compile Include=\"$(AzureStorageSharedSources)SasExtensions.cs\" LinkBase=\"Shared\" />\n    <Compile Include=\"$(AzureStorageSharedSources)StorageConnectionString.cs\" LinkBase=\"Shared\" />\n    <Compile Include=\"$(AzureStorageSharedSources)SharedAccessSignatureCredentials.cs\" LinkBase=\"Shared\" />\n    <Compile Include=\"$(AzureStorageSharedSources)UriExtensions.cs\" LinkBase=\"Shared\" />\n    <Compile Include=\"$(AzureStorageSharedSources)UriQueryParamsCollection.cs\" LinkBase=\"Shared\" />\n    <Compile Include=\"$(AzureStorageSharedSources)StorageExceptionExtensions.cs\" LinkBase=\"Shared\" />\n    <Compile Include=\"$(AzureStorageSharedSources)TransferValidationOptionsExtensions.cs\" LinkBase=\"Shared\" />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.Storage.DataMovement.Blobs.csproj\" />\n    <ProjectReference Include=\"$(MSBuildThisFileDirectory)..\\..\\Azure.Storage.DataMovement\\src\\Azure.Storage.DataMovement.csproj\" />\n    <ProjectReference Include=\"$(MSBuildThisFileDirectory)..\\..\\Azure.Storage.Blobs\\src\\Azure.Storage.Blobs.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "storage/Azure.Storage.DataMovement.Blobs/samples/Azure.Storage.DataMovement.Blobs.Samples.Tests.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/storage/Azure.Storage.DataMovement.Blobs/samples/Azure.Storage.DataMovement.Blobs.Samples.Tests.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <PropertyGroup>\n    <TargetFrameworks>$(RequiredTargetFrameworks)</TargetFrameworks>\n    <AssemblyTitle>Microsoft Azure.Storage.Files.DataLake client library samples</AssemblyTitle>\n    <IsPackable>false</IsPackable>\n  </PropertyGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"$(MSBuildThisFileDirectory)..\\src\\Azure.Storage.Files.DataLake.csproj\" />\n    <ProjectReference Include=\"$(MSBuildThisFileDirectory)..\\..\\Azure.Storage.Common\\src\\Azure.Storage.Common.csproj\" />\n  </ItemGroup>\n  <ItemGroup>\n    <Compile Include=\"$(AzureStorageSharedTestSources)\\**\\*.cs\" LinkBase=\"Shared\" />\n    <Compile Remove=\"$(AzureStorageSharedTestSources)\\AzuriteFixture.cs\" />\n    <Compile Remove=\"$(AzureStorageSharedTestSources)\\AzuriteNUnitFixture.cs\" />\n    <Compile Remove=\"$(AzureStorageSharedTestSources)\\ClientSideEncryptionTestExtensions.cs\" />\n    <Compile Remove=\"$(AzureStorageSharedTestSources)\\RepeatingStream.cs\" />\n    <Compile Remove=\"$(AzureStorageSharedTestSources)\\StorageTestBase.SasVersion.cs\" />\n    <Compile Remove=\"$(AzureStorageSharedTestSources)\\Sas\\*.cs\" />\n    <Compile Remove=\"$(AzureStorageSharedTestSources)\\TransferValidationTestBase.cs\" />\n    <None Include=\"$(AzureStorageSharedTestSources)\\*.xml\">\n      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\n    </None>\n  </ItemGroup>\n  <ItemGroup>\n    <!-- Required Shared Source for testing -->\n    <Compile Include=\"$(AzureCoreSharedSources)ArrayBufferWriter.cs\" LinkBase=\"Shared\\Core\" />\n    <Compile Include=\"$(AzureCoreSharedSources)NoBodyResponseOfT.cs\" LinkBase=\"Shared\\Core\" />\n    <Compile Include=\"$(AzureCoreSharedSources)TaskExtensions.cs\" LinkBase=\"Shared\\Core\" />\n    <Compile Include=\"$(AzureStorageSharedSources)Constants.cs\" LinkBase=\"Shared\" />\n    <Compile Include=\"$(AzureStorageSharedSources)Errors.cs\" LinkBase=\"Shared\" />\n    <Compile Include=\"$(AzureStorageSharedSources)StorageConnectionString.cs\" LinkBase=\"Shared\" />\n    <Compile Include=\"$(AzureStorageSharedSources)SharedAccessSignatureCredentials.cs\" LinkBase=\"Shared\" />\n    <Compile Include=\"$(AzureStorageSharedSources)UriExtensions.cs\" LinkBase=\"Shared\" />\n    <Compile Include=\"$(AzureStorageSharedSources)UriQueryParamsCollection.cs\" LinkBase=\"Shared\" />\n    <Compile Include=\"$(AzureStorageSharedSources)StorageExceptionExtensions.cs\" LinkBase=\"Shared\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "storage/Azure.Storage.Files.DataLake/samples/Azure.Storage.Files.DataLake.Samples.Tests.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/storage/Azure.Storage.Files.DataLake/samples/Azure.Storage.Files.DataLake.Samples.Tests.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <PropertyGroup>\n    <TargetFrameworks>$(RequiredTargetFrameworks)</TargetFrameworks>\n    <AssemblyTitle>Microsoft Azure.Storage.Files.Shares client library samples</AssemblyTitle>\n    <IsPackable>false</IsPackable>\n  </PropertyGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"$(MSBuildThisFileDirectory)..\\src\\Azure.Storage.Files.Shares.csproj\" />\n    <ProjectReference Include=\"$(MSBuildThisFileDirectory)..\\..\\Azure.Storage.Common\\src\\Azure.Storage.Common.csproj\" />\n  </ItemGroup>\n  <ItemGroup>\n    <Compile Include=\"$(AzureStorageSharedTestSources)\\**\\*.cs\" LinkBase=\"Shared\" />\n    <Compile Remove=\"$(AzureStorageSharedTestSources)\\AzuriteFixture.cs\" />\n    <Compile Remove=\"$(AzureStorageSharedTestSources)\\AzuriteNUnitFixture.cs\" />\n    <Compile Remove=\"$(AzureStorageSharedTestSources)\\ClientSideEncryptionTestExtensions.cs\" />\n    <Compile Remove=\"$(AzureStorageSharedTestSources)\\RepeatingStream.cs\" />\n    <Compile Remove=\"$(AzureStorageSharedTestSources)\\StorageTestBase.SasVersion.cs\" />\n    <Compile Remove=\"$(AzureStorageSharedTestSources)\\Sas\\*.cs\" />\n    <Compile Remove=\"$(AzureStorageSharedTestSources)\\TransferValidationTestBase.cs\" />\n    <None Include=\"$(AzureStorageSharedTestSources)\\*.xml\">\n      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\n    </None>\n  </ItemGroup>\n  <ItemGroup>\n    <!-- Required Shared Source for testing -->\n    <Compile Include=\"$(AzureCoreSharedSources)ArrayBufferWriter.cs\" LinkBase=\"Shared\\Core\" />\n    <Compile Include=\"$(AzureCoreSharedSources)NoBodyResponseOfT.cs\" LinkBase=\"Shared\\Core\" />\n    <Compile Include=\"$(AzureCoreSharedSources)TaskExtensions.cs\" LinkBase=\"Shared\\Core\" />\n    <Compile Include=\"$(AzureStorageSharedSources)Constants.cs\" LinkBase=\"Shared\" />\n    <Compile Include=\"$(AzureStorageSharedSources)Errors.cs\" LinkBase=\"Shared\" />\n    <Compile Include=\"$(AzureStorageSharedSources)StorageConnectionString.cs\" LinkBase=\"Shared\" />\n    <Compile Include=\"$(AzureStorageSharedSources)SharedAccessSignatureCredentials.cs\" LinkBase=\"Shared\" />\n    <Compile Include=\"$(AzureStorageSharedSources)UriExtensions.cs\" LinkBase=\"Shared\" />\n    <Compile Include=\"$(AzureStorageSharedSources)UriQueryParamsCollection.cs\" LinkBase=\"Shared\" />\n    <Compile Include=\"$(AzureStorageSharedSources)StorageExceptionExtensions.cs\" LinkBase=\"Shared\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "storage/Azure.Storage.Files.Shares/samples/Azure.Storage.Files.Shares.Samples.Tests.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/storage/Azure.Storage.Files.Shares/samples/Azure.Storage.Files.Shares.Samples.Tests.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <PropertyGroup>\n    <TargetFrameworks>$(RequiredTargetFrameworks)</TargetFrameworks>\n    <AssemblyTitle>Microsoft Azure.Storage.Queues client library samples</AssemblyTitle>\n    <IsPackable>false</IsPackable>\n  </PropertyGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"$(MSBuildThisFileDirectory)..\\src\\Azure.Storage.Queues.csproj\" />\n    <ProjectReference Include=\"$(MSBuildThisFileDirectory)..\\..\\Azure.Storage.Common\\src\\Azure.Storage.Common.csproj\" />\n  </ItemGroup>\n  <ItemGroup>\n    <Compile Include=\"$(AzureStorageSharedTestSources)\\**\\*.cs\" LinkBase=\"Shared\" />\n    <Compile Remove=\"$(AzureStorageSharedTestSources)\\AzuriteFixture.cs\" />\n    <Compile Remove=\"$(AzureStorageSharedTestSources)\\AzuriteNUnitFixture.cs\" />\n    <Compile Remove=\"$(AzureStorageSharedTestSources)\\ClientSideEncryptionTestExtensions.cs\" />\n    <Compile Remove=\"$(AzureStorageSharedTestSources)\\StorageTestBase.SasVersion.cs\" />\n    <Compile Remove=\"$(AzureStorageSharedTestSources)\\Sas\\*.cs\" />\n    <Compile Remove=\"$(AzureStorageSharedTestSources)\\RepeatingStream.cs\" />\n    <Compile Remove=\"$(AzureStorageSharedTestSources)\\TransferValidationTestBase.cs\" />\n    <None Include=\"$(AzureStorageSharedTestSources)\\*.xml\">\n      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\n    </None>\n  </ItemGroup>\n  <ItemGroup>\n    <!-- Required Shared Source for testing -->\n    <Compile Include=\"$(AzureCoreSharedSources)ArrayBufferWriter.cs\" LinkBase=\"Shared\\Core\" />\n    <Compile Include=\"$(AzureCoreSharedSources)NoBodyResponseOfT.cs\" LinkBase=\"Shared\\Core\" />\n    <Compile Include=\"$(AzureCoreSharedSources)TaskExtensions.cs\" LinkBase=\"Shared\\Core\" />\n    <Compile Include=\"$(AzureStorageSharedSources)Constants.cs\" LinkBase=\"Shared\" />\n    <Compile Include=\"$(AzureStorageSharedSources)Errors.cs\" LinkBase=\"Shared\" />\n    <Compile Include=\"$(AzureStorageSharedSources)StorageConnectionString.cs\" LinkBase=\"Shared\" />\n    <Compile Include=\"$(AzureStorageSharedSources)SharedAccessSignatureCredentials.cs\" LinkBase=\"Shared\" />\n    <Compile Include=\"$(AzureStorageSharedSources)UriExtensions.cs\" LinkBase=\"Shared\" />\n    <Compile Include=\"$(AzureStorageSharedSources)UriQueryParamsCollection.cs\" LinkBase=\"Shared\" />\n    <Compile Include=\"$(AzureStorageSharedSources)StorageExceptionExtensions.cs\" LinkBase=\"Shared\" />\n  </ItemGroup>\n  <ItemGroup>\n    <Compile Remove=\"$(AzureStorageSharedTestSources)\\TransferValidationTestBase.cs\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "storage/Azure.Storage.Queues/samples/Azure.Storage.Queues.Samples.Tests.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/storage/Azure.Storage.Queues/samples/Azure.Storage.Queues.Samples.Tests.csproj", "language": ["C#", ".NET"]}, {"README_text": "<Project ToolsVersion=\"15.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n  <PropertyGroup>\n    <!-- Signal that samples are building in the repo as opposed to a standalone download from Samples Browser -->\n    <IsSamplesProject>true</IsSamplesProject>\n    <IsPackable>false</IsPackable>\n    <ExcludeFromCodeCoverage>true</ExcludeFromCodeCoverage>\n    <WarnOnPackingNonPackableProject>false</WarnOnPackingNonPackableProject>\n  </PropertyGroup>\n\n  <Import Project=\"..\\..\\Directory.Build.props\" />\n\n  <PropertyGroup>\n    <InheritDocEnabled>false</InheritDocEnabled>\n  </PropertyGroup>\n</Project>", "repo_name": "storage/Microsoft.Azure.WebJobs.Extensions.Storage.Blobs/samples/Directory.Build.props", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/storage/Microsoft.Azure.WebJobs.Extensions.Storage.Blobs/samples/Directory.Build.props", "language": ["C#", ".NET"]}, {"README_text": "<Project ToolsVersion=\"15.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n  <PropertyGroup>\n    <!-- Signal that samples are building in the repo as opposed to a standalone download from Samples Browser -->\n    <IsSamplesProject>true</IsSamplesProject>\n    <IsPackable>false</IsPackable>\n    <ExcludeFromCodeCoverage>true</ExcludeFromCodeCoverage>\n    <WarnOnPackingNonPackableProject>false</WarnOnPackingNonPackableProject>\n  </PropertyGroup>\n\n  <Import Project=\"..\\..\\Directory.Build.props\" />\n\n  <PropertyGroup>\n    <InheritDocEnabled>false</InheritDocEnabled>\n  </PropertyGroup>\n</Project>", "repo_name": "storage/Microsoft.Azure.WebJobs.Extensions.Storage.Queues/samples/Directory.Build.props", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/storage/Microsoft.Azure.WebJobs.Extensions.Storage.Queues/samples/Directory.Build.props", "language": ["C#", ".NET"]}, {"README_text": "<Project Sdk=\"Microsoft.NET.Sdk\\\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"/>\n    <PackageReference Include=\"NUnit3TestAdapter\"/>\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.StorageCache.csproj\"/>\n  </ItemGroup>\n</Project>\n", "repo_name": "storagecache/Azure.ResourceManager.StorageCache/samples/Azure.ResourceManager.StorageCache.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/storagecache/Azure.ResourceManager.StorageCache/samples/Azure.ResourceManager.StorageCache.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.StoragePool.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "storagepool/Azure.ResourceManager.StoragePool/samples/Azure.ResourceManager.StoragePool.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/storagepool/Azure.ResourceManager.StoragePool/samples/Azure.ResourceManager.StoragePool.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.StorageSync.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "storagesync/Azure.ResourceManager.StorageSync/samples/Azure.ResourceManager.StorageSync.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/storagesync/Azure.ResourceManager.StorageSync/samples/Azure.ResourceManager.StorageSync.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "<Project Sdk=\"Microsoft.NET.Sdk\\\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"/>\n    <PackageReference Include=\"NUnit3TestAdapter\"/>\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.StreamAnalytics.csproj\"/>\n  </ItemGroup>\n</Project>\n", "repo_name": "streamanalytics/Azure.ResourceManager.StreamAnalytics/samples/Azure.ResourceManager.StreamAnalytics.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/streamanalytics/Azure.ResourceManager.StreamAnalytics/samples/Azure.ResourceManager.StreamAnalytics.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.Subscription.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "subscription/Azure.ResourceManager.Subscription/samples/Azure.ResourceManager.Subscription.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/subscription/Azure.ResourceManager.Subscription/samples/Azure.ResourceManager.Subscription.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.Support.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "support/Azure.ResourceManager.Support/samples/Azure.ResourceManager.Support.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/support/Azure.ResourceManager.Support/samples/Azure.ResourceManager.Support.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "# Create, Retrieve and Delete a Synapse Role Assignment\n\nThis sample demonstrates basic operations with two core classes in this library: `AccessControlClient` and `RoleAssignmentDetails`. `AccessControlClient` is used to call the Azure Synapse service - each method call sends a request to the service's REST API. `RoleAssignmentDetails` is an entity that represents a role assignment within Synapse. The sample walks through the basics of adding, retrieving, and deleting role assignment. To get started, you'll need a connection endpoint to Azure Synapse. See the [README](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/synapse/Azure.Analytics.Synapse.AccessControl/README.md) for links and instructions.\n\n## Create access control client\n\nTo interact with Azure Synapse, you need to instantiate a `AccessControlClient`. It requires an endpoint URL and a `TokenCredential`.\n\n```C# Snippet:CreateAccessControlClient\n// Replace the string below with your actual endpoint url.\nstring endpoint = \"<my-endpoint-url>\";\n\nRoleAssignmentsClient roleAssignmentsClient = new RoleAssignmentsClient(new Uri(endpoint), new DefaultAzureCredential());\nRoleDefinitionsClient definitionsClient = new RoleDefinitionsClient(new Uri(endpoint), new DefaultAzureCredential());\n```\n\n## Create a role assignment\n\nFirst, you need to the determine the ID of the role you wish to assign, along with the ID of the principal you wish to assign that role.\n\n```C# Snippet:PrepCreateRoleAssignment\nResponse roleDefinitionsResponse = definitionsClient.GetRoleDefinitions(true);\nBinaryData roleDefinitionsContent = roleDefinitionsResponse.Content;\nusing JsonDocument roleDefinitionsJson = JsonDocument.Parse(roleDefinitionsContent.ToMemory());\n\nJsonElement adminRoleJson = roleDefinitionsJson.RootElement.EnumerateArray().\n    Single(role => role.GetProperty(\"name\").ToString() == \"Synapse Administrator\");\nGuid adminRoleId = new Guid(adminRoleJson.GetProperty(\"id\").ToString());\n\nstring assignedScope = \"workspaces/<my-workspace-name>\";\n\n// Replace the string below with the ID you'd like to assign the role.\nGuid principalId = /*<my-principal-id>\"*/ Guid.NewGuid();\n\n// Replace the string below with the ID of the assignment you'd like to use.\nstring assignmentId = \"<my-assignment-id>\";\n```\n\nThen create an instance of `RoleAssignmentOptions` with the requested values. Finally call `CreateRoleAssignment` with the options to create the role assignment.\n\n```C# Snippet:CreateRoleAssignment\nvar roleAssignmentDetails = new\n{\n    roleId = adminRoleId,\n    principalId = Guid.NewGuid(),\n    scope = assignedScope\n};\n\nResponse addedRoleAssignmentResponse = roleAssignmentsClient.CreateRoleAssignment(assignmentId, RequestContent.Create(roleAssignmentDetails), ContentType.ApplicationJson);\nBinaryData addedRoleAssignmentContent = addedRoleAssignmentResponse.Content;\nusing JsonDocument addedRoleAssignmentJson = JsonDocument.Parse(addedRoleAssignmentContent.ToMemory());\nstring addedRoleAssignmentId = addedRoleAssignmentJson.RootElement.GetProperty(\"id\").ToString();\n```\n\n## Retrieve a role assignment\n\nTo retrieve the details of assignment call `GetRoleAssignmentById`, passing in the assignment ID.\n\n```C# Snippet:RetrieveRoleAssignment\nResponse roleAssignmentResponse = roleAssignmentsClient.GetRoleAssignmentById(addedRoleAssignmentId, new());\nBinaryData roleAssignmentContent = roleAssignmentResponse.Content;\nusing JsonDocument roleAssignmentJson = JsonDocument.Parse(roleAssignmentContent.ToMemory());\nstring roleAssignmentRoleDefinitionId = roleAssignmentJson.RootElement.GetProperty(\"roleDefinitionId\").ToString();\nstring roleAssignmentPrincipalId = roleAssignmentJson.RootElement.GetProperty(\"principalId\").ToString();\nConsole.WriteLine($\"Role {roleAssignmentRoleDefinitionId} is assigned to {roleAssignmentPrincipalId}.\");\n```\n\n## List role assignments\n\nTo enumerate all role assignments in the Synapse workspace call `GetRoleAssignments`.\n\n```C# Snippet:ListRoleAssignments\nResponse roleAssignmentsResponse = roleAssignmentsClient.GetRoleAssignments();\nBinaryData roleAssignmentsContent = roleAssignmentsResponse.Content;\nusing JsonDocument roleAssignmentsJson = JsonDocument.Parse(roleAssignmentsContent.ToMemory());\n\nforeach (JsonElement assignmentJson in roleAssignmentsJson.RootElement.GetProperty(\"value\").EnumerateArray())\n{\n    Console.WriteLine(assignmentJson.GetProperty(\"id\").ToString());\n}\n```\n\n## Delete a role assignment\n\nTo delete a role assignment no longer needed you can call `DeleteRoleAssignmentById`, passing in the assignment ID.\n\n```C# Snippet:DeleteRoleAssignment\nroleAssignmentsClient.DeleteRoleAssignmentById(addedRoleAssignmentId);\n```\n", "repo_name": "synapse/Azure.Analytics.Synapse.AccessControl/samples/Sample1_HelloWorld.md", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/synapse/Azure.Analytics.Synapse.AccessControl/samples/Sample1_HelloWorld.md", "language": ["C#", ".NET"]}, {"README_text": "# Create, Retrieve and Delete Synapse Pipelines\n\nThis sample demonstrates basic operations with two core classes in this library: `PipelineClient` and `PipelineResource`. `PipelineClient` is used to call the Azure Synapse Pipeline service - each method call sends a request to the service's REST API. `PipelineResource` is an entity that represents a pipeline within Synapse. The sample walks through the basics of adding, retrieving, and deleting pipeline. To get started, you'll need a connection endpoint to Azure Synapse. See the [README](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/synapse/Azure.Analytics.Synapse.Artifacts/README.md) for links and instructions.\n\n## Create pipeline client\n\nTo interact with the Azure Synapse Pipelines, you need to instantiate a `PipelineClient`. It requires an endpoint URL and a `TokenCredential`.\n\n```C# Snippet:CreatePipelineClientPrep\n// Replace the string below with your actual endpoint url.\nstring endpoint = \"<my-endpoint-url>\";\n\nstring pipelineName = \"Test-Pipeline\";\n```\n\n```C# Snippet:CreatePipelineClient\nvar client = new PipelineClient(endpoint: new Uri(endpoint), credential: new DefaultAzureCredential());\n```\n\n## Create a pipeline\n\nTo create an empty pipeline, pass an empty instance of `PipelineResource` to `StartCreateOrUpdatePipeline`.\n\n```C# Snippet:CreatePipeline\nPipelineCreateOrUpdatePipelineOperation operation = client.StartCreateOrUpdatePipeline(pipelineName, new PipelineResource());\nResponse<PipelineResource> createdPipeline = await operation.WaitForCompletionAsync();\n```\n\nAdditional activities such as `SynapseSparkJobDefinitionActivity` can be added to the resources as necessary.\n\n## Retrieve a pipeline\n\nYou can retrieve the details of pipeline by calling `GetPipeline`, passing in the pipeline name.\n\n```C# Snippet:RetrievePipeline\nPipelineResource retrievedPipeline = client.GetPipeline(pipelineName);\nConsole.WriteLine(\"Pipeline ID: {0}\", retrievedPipeline.Id);\n```\n\n## Running a pipeline\n\nYou can start the execution of a pipeline by calling `CreatePipelineRunAsync`, passing in the pipeline name.\n\n```C# Snippet:RunPipeline\nConsole.WriteLine(\"Running pipeline.\");\nCreateRunResponse runOperation = await client.CreatePipelineRunAsync(pipelineName);\nConsole.WriteLine(\"Run started. ID: {0}\", runOperation.RunId);\n```\n\n## List pipelines\n\nTo enumerate all pipelines in the Synapse workspace call `GetPipelinesByWorkspace`.\n\n```C# Snippet:ListPipelines\nPageable<PipelineResource> pipelines = client.GetPipelinesByWorkspace();\nforeach (PipelineResource pipeline in pipelines)\n{\n    Console.WriteLine(pipeline.Name);\n}\n```\n\n## Delete a pipeline\n\nTo delete a pipeline no longer needed call `StartDeletePipeline`, passing in the pipeline name.\n\n```C# Snippet:DeletePipeline\nPipelineDeletePipelineOperation deleteOperation = client.StartDeletePipeline(pipelineName);\nawait deleteOperation.WaitForCompletionResponseAsync();\n```\n", "repo_name": "synapse/Azure.Analytics.Synapse.Artifacts/samples/Sample1_HelloWorldPipeline.md", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/synapse/Azure.Analytics.Synapse.Artifacts/samples/Sample1_HelloWorldPipeline.md", "language": ["C#", ".NET"]}, {"README_text": "```C# Snippet:CreateManagedPrivateClient\n// Replace the string below with your actual endpoint url.\nstring endpoint = \"<my-endpoint-url>\";\nManagedPrivateEndpointsClient client = new ManagedPrivateEndpointsClient(endpoint: new Uri(endpoint), credential: new DefaultAzureCredential(includeInteractiveCredentials: true));\n```\n\n```C# Snippet:CreateManagedPrivateEndpoint\nstring managedVnetName = \"default\";\nstring managedPrivateEndpointName = \"myPrivateEndpoint\";\nstring fakedStorageAccountName = \"myStorageAccount\";\nstring privateLinkResourceId = $\"/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/myResourceGroup/providers/Microsoft.Storage/accounts/{fakedStorageAccountName}\";\nstring groupId = \"blob\";\nclient.Create(managedVnetName, new ManagedPrivateEndpoint\n{\n    Properties = new ManagedPrivateEndpointProperties\n    {\n        PrivateLinkResourceId = privateLinkResourceId,\n        GroupId = groupId\n    }\n});\n```\n\n```C# Snippet:ListManagedPrivateEndpoints\nList<ManagedPrivateEndpoint> privateEndpoints = client.List(managedVnetName).ToList();\nforeach (ManagedPrivateEndpoint privateEndpoint in privateEndpoints)\n{\n    Console.WriteLine(privateEndpoint.Id);\n}\n```\n\n```C# Snippet:RetrieveManagedPrivateEndpoint\nManagedPrivateEndpoint retrievedPrivateEndpoint = client.Get(managedVnetName, managedPrivateEndpointName);\nConsole.WriteLine(retrievedPrivateEndpoint.Id);\n```\n\n```C# Snippet:DeleteManagedPrivateEndpoint\nclient.Delete(managedVnetName, managedPrivateEndpointName);\n```\n", "repo_name": "synapse/Azure.Analytics.Synapse.ManagedPrivateEndpoints/samples/Sample1_HelloManangedPrivateEndpoint.md", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/synapse/Azure.Analytics.Synapse.ManagedPrivateEndpoints/samples/Sample1_HelloManangedPrivateEndpoint.md", "language": ["C#", ".NET"]}, {"README_text": "# Monitoring Synapse Spark Jobs\n\nThis sample demonstrates basic operations with a core classes in this library: `MonitoringClient`. `MonitoringClient` is used to monitor Spark Jobs running on Azure Synapse - each method call sends a request to the service's REST API. The sample walks through the basics of monitoring Spark jobs. To get started, you'll need a connection endpoint to Azure Synapse. See the [README](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/synapse/Azure.Analytics.Synapse.Monitoring/README.md) for links and instructions.\n\n## Create pipeline client\n\nTo monitor Spark jobs on Azure Synapse, you need to instantiate a `MonitoringClient`. It requires an endpoint URL and a `TokenCredential`.\n\n```C# Snippet:CreateMonitoringClient\nstring endpoint = TestEnvironment.EndpointUrl;\nMonitoringClient client = new MonitoringClient(new Uri(endpoint), new DefaultAzureCredential());\n```\n\n## Create monitoring client\n\nCalling `GetSparkJobList` on the `MonitoringClient` returns a list of jobs both currently and previously ran in the Synapse Workspace. Each `SparkJob` instance contains information the respective Spark job, including its name, current state, and duration of execution.\n\n```C# Snippet:GetSparkJobList\nSparkJobListViewResponse sparkJobList = client.GetSparkJobList();\nforeach (var sparkJob in sparkJobList.SparkJobs)\n{\n    if (sparkJob.State == \"Running\")\n    {\n        Console.WriteLine ($\"{sparkJob.Name} has been running for {sparkJob.RunningDuration}\");\n    }\n    else\n    {\n        Console.WriteLine ($\"{sparkJob.Name} has been in {sparkJob.State} for {sparkJob.QueuedDuration}\");\n    }\n}\n```\n\n## Obtaining SQL Job Query\n\nTo obtain a OD/DW (Dedicated SQL pool/Data Warehouse) Query string for the workspace call `GetSqlJobQueryString`.\n\n```C# Snippet:GetSqlJobQueryString\nSqlQueryStringDataModel sqlQuery = client.GetSqlJobQueryString();\n```\n", "repo_name": "synapse/Azure.Analytics.Synapse.Monitoring/samples/Sample1_PipelineMonitoring.md", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/synapse/Azure.Analytics.Synapse.Monitoring/samples/Sample1_PipelineMonitoring.md", "language": ["C#", ".NET"]}, {"README_text": "# Create, Run and Cancel Synapse Spark jobs\n\nThis sample demonstrates basic operations with two core classes in this library: `SparkBatchClient` and `SparkBatchJob`. `SparkBatchClient` is used to interact with Spark jobs running on Azure Synapse - each method call sends a request to the service's REST API. `SparkBatchJob` is an entity that represents a batched Spark job within Synapse. The sample walks through the basics of creating, running, and canceling job requests. To get started, you'll need a connection endpoint to Azure Synapse. See the [README](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/synapse/Azure.Analytics.Synapse.Spark/README.md) for links and instructions.\n\n## Create Spark batch client\n\nTo interact with Spark jobs running on Azure Synapse, you need to instantiate a `SparkBatchClient`. It requires an endpoint URL and a `TokenCredential`.\n\n```C# Snippet:CreateSparkBatchClient\n// Replace the strings below with the spark, endpoint, and file system information\nstring sparkPoolName = \"<my-spark-pool-name>\";\nstring endpoint = \"<my-endpoint-url>\";\nstring storageAccount = \"<my-storage-account-name>\";\nstring fileSystem = \"<my-storage-filesystem-name>\";\n\nSparkBatchClient client = new SparkBatchClient(new Uri(endpoint), sparkPoolName, new DefaultAzureCredential());\n```\n\n## Submitting Spark jobs\n\nTo submit a Spark job, first create a `SparkBatchJob`, passing in an instance of `SparkBatchJobOptions` describing the job's parameters. Calling `StartCreateSparkBatchJob` with that job will submit it to Synapse.\n\n```C# Snippet:SubmitSparkBatchJob\nstring name = $\"batch-{Guid.NewGuid()}\";\nstring file = string.Format(\"abfss://{0}@{1}.dfs.core.windows.net/samples/net/wordcount/wordcount.zip\", fileSystem, storageAccount);\nSparkBatchJobOptions request = new SparkBatchJobOptions(name, file)\n{\n    ClassName = \"WordCount\",\n    Arguments =\n    {\n        string.Format(\"abfss://{0}@{1}.dfs.core.windows.net/samples/net/wordcount/shakespeare.txt\", fileSystem, storageAccount),\n        string.Format(\"abfss://{0}@{1}.dfs.core.windows.net/samples/net/wordcount/result/\", fileSystem, storageAccount),\n    },\n    DriverMemory = \"28g\",\n    DriverCores = 4,\n    ExecutorMemory = \"28g\",\n    ExecutorCores = 4,\n    ExecutorCount = 2\n};\n\nSparkBatchOperation createOperation = client.StartCreateSparkBatchJob(request);\nwhile (!createOperation.HasCompleted)\n{\n    System.Threading.Thread.Sleep(2000);\n    createOperation.UpdateStatus();\n}\nSparkBatchJob jobCreated = createOperation.Value;\n```\n\n## Retrieve a Spark job\n\nTo retrieve the details of a Spark job call `StartGetSparkBatchJob`, passing in the Spark job ID.\n\n```C# Snippet:GetSparkBatchJob\nSparkBatchJob retrievedJob = client.GetSparkBatchJob(jobCreated.Id);\nDebug.WriteLine($\"Job is returned with name {retrievedJob.Name} and state {retrievedJob.State}\");\n```\n\n## List Spark jobs\n\nTo enumerate all Spark jobs in the Synapse workspace call `GetSparkBatchJobs`.\n\n```C# Snippet:ListSparkBatchJobs\nResponse<SparkBatchJobCollection> jobs = client.GetSparkBatchJobs();\nforeach (SparkBatchJob job in jobs.Value.Sessions)\n{\n    Console.WriteLine(job.Name);\n}\n```\n\n## Canceling a Spark job\n\nTo cancel a submitted Spark job call `CancelSparkBatchJob`, passing in the Spark job ID.\n\n```C# Snippet:CancelSparkBatchJob\nResponse operation = client.CancelSparkBatchJob(jobCreated.Id);\n```\n", "repo_name": "synapse/Azure.Analytics.Synapse.Spark/samples/Sample1_SubmitSparkJob.md", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/synapse/Azure.Analytics.Synapse.Spark/samples/Sample1_SubmitSparkJob.md", "language": ["C#", ".NET"]}, {"README_text": "<Project Sdk=\"Microsoft.NET.Sdk\\\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"/>\n    <PackageReference Include=\"NUnit3TestAdapter\"/>\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.Synapse.csproj\"/>\n  </ItemGroup>\n</Project>\n", "repo_name": "synapse/Azure.ResourceManager.Synapse/samples/Azure.ResourceManager.Synapse.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/synapse/Azure.ResourceManager.Synapse/samples/Azure.ResourceManager.Synapse.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "---\npage_type: sample\nlanguages:\n- csharp\nproducts:\n- azure\n- azure-storage\n- azure-table-storage\nname: Azure Tables samples for .NET\ndescription: Samples for the Azure.Data.Tables client library\n---\n\n# Azure Tables client SDK Samples\n\nYou can find samples for the most common features of the tables SDK below.\nTo get started you'll need an Azure Tables endpoint and credentials. See Azure Tables Client Library [Readme](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/tables/Azure.Data.Tables/README.md) for more information and instructions.\n\n* [Create/delete tables](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/tables/Azure.Data.Tables/samples/Sample1CreateDeleteTables.md)\n* [Query tables](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/tables/Azure.Data.Tables/samples/Sample3QueryTables.md)\n* [Create/delete table entities](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/tables/Azure.Data.Tables/samples/Sample2CreateDeleteEntities.md)\n* [Upsert/update table entities](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/tables/Azure.Data.Tables/samples/Sample5UpdateUpsertEntities.md)\n* [Query table entities](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/tables/Azure.Data.Tables/samples/Sample4QueryEntities.md)\n* [Auth](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/tables/Azure.Data.Tables/samples/Sample0Auth.md): Authenticate with connection strings, shared keys, and shared access signatures0.\n* [Transactional batches](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/tables/Azure.Data.Tables/samples/Sample6TransactionalBatch.md)\n* [Customizing serialization](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/tables/Azure.Data.Tables/samples/Sample7Serialization.md)\n", "repo_name": "tables/Azure.Data.Tables/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/tables/Azure.Data.Tables/samples", "language": ["C#", ".NET"]}, {"README_text": "---\npage_type: sample\nlanguages:\n- csharp\nproducts:\n# Including relevant stubs from https://review.docs.microsoft.com/help/contribute/metadata-taxonomies#product\n- azure\nname: Azure.Template samples for .NET\ndescription: Samples for the Azure.Template client library.\n---\n\n# Azure.Template Samples\n\n<!-- please refer to <ReadmeLink> to write sample readme. -->\n", "repo_name": "template/.content/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/template/.content/samples", "language": ["C#", ".NET"]}, {"README_text": "---\npage_type: sample\nlanguages:\n- csharp\nproducts:\n# Including relevant stubs from https://review.docs.microsoft.com/help/contribute/metadata-taxonomies#product\n- azure\nname: Azure.Template samples for .NET\ndescription: Samples for the Azure.Template client library.\n---\n\n# Azure.Template Samples\n\nThese code samples show common scenarios with the Azure Template client library.\n\n|[Sample1_HelloWorld](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/template/Azure.Template/tests/Samples/Sample1_HelloWorld.cs) |Get secrets synchronously.|\n|[Sample1_HelloWorld_Async](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/template/Azure.Template/tests/Samples/Sample1_HelloWorldAsync.cs)] |Get secrets asynchronously.|\n", "repo_name": "template/Azure.Template/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/template/Azure.Template/samples", "language": ["C#", ".NET"]}, {"README_text": "---\npage_type: sample\nlanguages:\n- csharp\nproducts:\n- azure-cognitive-services\n- azure-text-analytics\n- language-service\nname: Azure Text Analytics samples for .NET\ndescription: Samples for the Azure.AI.TextAnalytics client library\n---\n\n# Azure Cognitive Services Text Analytics client library for .NET\n\nText Analytics is part of the Azure Cognitive Service for Language, a cloud-based service that provides Natural Language Processing (NLP) features for understanding and analyzing text. This client library offers the following features:\n\n* Language detection\n* Sentiment analysis\n* Key phrase extraction\n* Named entity recognition (NER)\n* Personally identifiable information (PII) entity recognition\n* Entity linking\n* Text analytics for health\n* Custom named entity recognition (Custom NER)\n* Custom text classification\n* Extractive text summarization\n* Abstractive text summarization\n\nSee the [README][README] of the Text Analytics client library for more information, including useful links and instructions.\n\n## Common scenarios samples\n\n* [Detect Language](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/textanalytics/Azure.AI.TextAnalytics/samples/Sample1_DetectLanguage.md)\n* [Analyze Sentiment](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/textanalytics/Azure.AI.TextAnalytics/samples/Sample2_AnalyzeSentiment.md)\n* [Extract Key Phrases](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/textanalytics/Azure.AI.TextAnalytics/samples/Sample3_ExtractKeyPhrases.md)\n* [Recognize Named Entities](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/textanalytics/Azure.AI.TextAnalytics/samples/Sample4_RecognizeEntities.md)\n* [Recognize PII Entities](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/textanalytics/Azure.AI.TextAnalytics/samples/Sample5_RecognizePiiEntities.md)\n* [Recognize Linked Entities](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/textanalytics/Azure.AI.TextAnalytics/samples/Sample6_RecognizeLinkedEntities.md)\n* [Analyze Healthcare Entities](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/textanalytics/Azure.AI.TextAnalytics/samples/Sample7_AnalyzeHealthcareEntities.md)\n* [Custom Named Entity Recognition](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/textanalytics/Azure.AI.TextAnalytics/samples/Sample8_RecognizeCustomEntities.md)\n* [Custom Single Label Classification](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/textanalytics/Azure.AI.TextAnalytics/samples/Sample9_SingleLabelClassify.md)\n* [Custom Multi Label Classification](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/textanalytics/Azure.AI.TextAnalytics/samples/Sample10_MultiLabelClassify.md)\n* [Extractive Summarization](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/textanalytics/Azure.AI.TextAnalytics/samples/Sample11_ExtractiveSummarize.md)\n* [Abstractive Summarization](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/textanalytics/Azure.AI.TextAnalytics/samples/Sample12_AbstractiveSummarize.md)\n\n## Advanced samples\n\n* [Understand how to work with long-running operations](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/textanalytics/Azure.AI.TextAnalytics/samples/Sample_LROPolling.md)\n* [Perform multiple text analysis actions](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/textanalytics/Azure.AI.TextAnalytics/samples/Sample_AnalyzeActions.md)\n* [Analyze Sentiment with Opinion Mining](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/textanalytics/Azure.AI.TextAnalytics/samples/Sample2.1_AnalyzeSentimentWithOpinionMining.md)\n* [Recognize PII Entities with specific categories](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/textanalytics/Azure.AI.TextAnalytics/tests/samples/Sample5_RecognizePiiEntitiesWithCategoriesFilter.cs)\n* [Mock a client for testing](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/textanalytics/Azure.AI.TextAnalytics/samples/Sample_MockClient.md) using the [Moq](https://github.com/Moq/moq4/) library\n\n[README]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/textanalytics/Azure.AI.TextAnalytics/README.md", "repo_name": "textanalytics/Azure.AI.TextAnalytics/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/textanalytics/Azure.AI.TextAnalytics/samples", "language": ["C#", ".NET"]}, {"README_text": "# Introduction\n\nA `TimeSeriesInsightsClient` is the primary interface for developers using the Time Series Insights client library. It provides both synchronous and asynchronous operations to perform operations on a Time Series Insights environment. The `TimeSeriesInsightsClient` exposes several properties that a developer will use to perform specific operations on a Time Series Insights environment. For example, `ModelSettings` is the property that a developer can use to perform operations on the model settings of the TSI environment. `Instances` can be used to perform operations on TSI instances. Other properties include `Types`, `Hierarchies` and `Query`.\n\n## Creating TimeSeriesInsightsClient\n\nTo create a new Time Series Insights client, you need the endpoint to an Azure Time Series Insights environment and supply credentials.\nTo use the [DefaultAzureCredential][DefaultAzureCredential] provider shown below,\nor other credential providers provided with the Azure SDK, please install the Azure.Identity package:\n\n```dotnetcli\ndotnet add package Azure.Identity\n```\n\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables: AZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET.\n\n```C# Snippet:TimeSeriesInsightsSampleCreateServiceClientWithClientSecret\n// DefaultAzureCredential supports different authentication mechanisms and determines the appropriate credential type based on the environment it is executing in.\n// It attempts to use multiple credential types in an order until it finds a working credential.\nvar tokenCredential = new DefaultAzureCredential();\n\nvar client = new TimeSeriesInsightsClient(\n    tsiEndpoint,\n    tokenCredential);\n```\n\n# Time Series Insights Samples\n\nThe following section provides several code snippets using the `client` created above, and covers the main functions of Time Series Insights. You can explore and learn more about the Time Series Insights client library APIs through using the samples project.\n\n- [Time Series Insights ID](#time-series-insights-id)\n- [Time Series Insights Model Settings](#time-series-insights-model-settings)\n- [Time Series Insights Instances](#time-series-insights-instances)\n- [Time Series Insights Types](#time-series-insights-types)\n- [Time Series Insights Hierarchies](#time-series-insights-hierarchies)\n- [Time Series Insights Query](#time-series-insights-query)\n\n## Time Series Insights ID\nA single Time Series ID value is composed of up to 3 string values that uniquely identify a Time Series instance. The keys that make up the Time Series ID are chosen when creating a Time Series Insights Gen2 environment through the Azure portal. The position of values must match Time Series ID properties specified on the environment and returned by Get Model Setting API.  For example, if your Time Series Insights environment is setup with ID properties `Building`, `Floor` and `Room`, then this code snippet illustrates creating a Time Series instance ID using `TimeSeriesId` class for `Building` : 'Millennium', `Floor` : 'Floor2' and `Room` : '2A01'. Visit [this page][tsi_id_learn_more] to check out the best practices for choosing a Time Series ID.\n\n```csharp\nvar instanceId =  new TimeSeriesId(\"Millennium\", \"Floor2\", \"2A01\");\n```\n\n> **Please note that this sample is set up to work best when the Time Series Insights ID key that is configured with your environment is not one of the default telemetry system properties, such as iothub-connection-device-id. The reason being is that this sample will generate random unique strings for each TSI ID key that you have set up for your TSI environment, and use these randomly generated strings when sending telemetry to IoT Hub. But since the iothub-connection-device-id is already a random identifier for a device, setting up your TSI environment with ID key as iothub-connection-device-id will not make the sample run as expected since TSI will create an instance per device. For this sample to mimic a more realistic TSI environment, use Building, Floor and Room as properties for your Time Series Insights IDs.**\n\n## Time Series Insights Model Settings\n\nUse `ModelSettings` in [TimeSeriesInsightsClient](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/timeseriesinsights/Azure.IoT.TimeSeriesInsights/src/TimeSeriesInsightsClient.cs) to learn more about the environment model settings, such as name, default type ID, and the properties that define the Time Series ID during environment creation.\n\n```C# Snippet:TimeSeriesInsightsSampleGetModelSettings\nTimeSeriesInsightsModelSettings modelSettingsClient = client.GetModelSettingsClient();\nTimeSeriesInsightsTypes typesClient = client.GetTypesClient();\nResponse<TimeSeriesModelSettings> getModelSettingsResponse = await modelSettingsClient.GetAsync();\nConsole.WriteLine($\"Retrieved Time Series Insights model settings \\nname : '{getModelSettingsResponse.Value.Name}', \" +\n    $\"default type Id: {getModelSettingsResponse.Value.DefaultTypeId}'\");\nIReadOnlyList<TimeSeriesIdProperty> timeSeriesIdProperties = getModelSettingsResponse.Value.TimeSeriesIdProperties;\nforeach (TimeSeriesIdProperty property in timeSeriesIdProperties)\n{\n    Console.WriteLine($\"Time Series Id property name : '{property.Name}', type : '{property.PropertyType}'.\");\n}\n```\n\nHere's what a retrieved model settings object looks like.\n```json\n{\n  \"Name\": \"sampleModel\",\n  \"TimeSeriesIdProperties\": [\n    {\n      \"Name\": \"Building\",\n      \"Type\": {\n        \"HasValue\": true, \n        \"Value\": {\n          \n        }\n      }\n    },\n    {\n      \"Name\": \"Floor\",\n      \"Type\": {\n        \"HasValue\": true,\n        \"Value\": {\n          \n        }\n      }\n    },\n    {\n      \"Name\": \"Room\",\n      \"Type\": {\n        \"HasValue\": true,\n        \"Value\": {\n          \n        }\n      }\n    }\n  ],\n  \"DefaultTypeId\": \"86fc3da5-a7cb-443a-b7c3-00a7d9ebb72d\"\n}\n```\n\nYou can also use `ModelSettings` object to make changes to the model settings name and/or default type ID.\n\n```C# Snippet:TimeSeriesInsightsSampleUpdateModelSettingsName\nResponse<TimeSeriesModelSettings> updateModelSettingsNameResponse = await modelSettingsClient.UpdateNameAsync(\"NewModelSettingsName\");\nConsole.WriteLine($\"Updated Time Series Insights model settings name: \" +\n    $\"{updateModelSettingsNameResponse.Value.Name}\");\n```\n\n```C# Snippet:TimeSeriesInsightsSampleUpdateModelSettingsDefaultType\nResponse<TimeSeriesModelSettings> updateDefaultTypeIdResponse = await modelSettingsClient\n    .UpdateDefaultTypeIdAsync(tsiTypeId);\nConsole.WriteLine($\"Updated Time Series Insights model settings default type Id: \" +\n    $\"{updateDefaultTypeIdResponse.Value.Name}\");\n```\n\n## Time Series Insights Instances\n\nTime Series Model instances are virtual representations of the time series themselves. To learn more about Time Series Model instances, make sure you visit [this page][tsi_instances_learn_more].\n\nUse `Instances` in [TimeSeriesInsightsClient](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/timeseriesinsights/Azure.IoT.TimeSeriesInsights/src/TimeSeriesInsightsClient.cs) to perform a variety of operations on the environment's instances.\n\nThis code snippet demonstrates retrieving all created instances in your TSI environment.\n```C# Snippet:TimeSeriesInsightsGetAllInstances\n// Get all instances for the Time Series Insights environment\nAsyncPageable<TimeSeriesInstance> tsiInstances = instancesClient.GetAsync();\nawait foreach (TimeSeriesInstance tsiInstance in tsiInstances)\n{\n    Console.WriteLine($\"Retrieved Time Series Insights instance with Id '{tsiInstance.TimeSeriesId}' and name '{tsiInstance.Name}'.\");\n}\n```\n\nThis code snippet demonstrates creating a list of Time Series instances in your environment.\n```C# Snippet:TimeSeriesInsightsSampleCreateInstance\n// Create a Time Series Instance object with the default Time Series Insights type Id.\n// The default type Id can be obtained programmatically by using the ModelSettings client.\n// tsId is created above using `TimeSeriesIdHelper.CreateTimeSeriesId`.\nvar instance = new TimeSeriesInstance(tsId, defaultTypeId)\n{\n    Name = \"instance1\",\n};\n\nvar tsiInstancesToCreate = new List<TimeSeriesInstance>\n{\n    instance,\n};\n\nResponse<TimeSeriesOperationError[]> createInstanceErrors = await instancesClient\n    .CreateOrReplaceAsync(tsiInstancesToCreate);\n\n// The response of calling the API contains a list of error objects corresponding by position to the input parameter\n// array in the request. If the error object is set to null, this means the operation was a success.\nfor (int i = 0; i < createInstanceErrors.Value.Length; i++)\n{\n    TimeSeriesId tsiId = tsiInstancesToCreate[i].TimeSeriesId;\n\n    if (createInstanceErrors.Value[i] == null)\n    {\n        Console.WriteLine($\"Created Time Series Insights instance with Id '{tsiId}'.\");\n    }\n    else\n    {\n        Console.WriteLine($\"Failed to create a Time Series Insights instance with Id '{tsiId}', \" +\n            $\"Error Message: '{createInstanceErrors.Value[i].Message}, \" +\n            $\"Error code: '{createInstanceErrors.Value[i].Code}'.\");\n    }\n}\n```\n\nYou can also retrieve specific instances by their unique identifier, or by the Time Series instance names.\n\n```C# Snippet:TimeSeriesInsightsGetnstancesById\n// Get Time Series Insights instances by Id\n// tsId is created above using `TimeSeriesIdHelper.CreateTimeSeriesId`.\nvar timeSeriesIds = new List<TimeSeriesId>\n{\n    tsId,\n};\n\nResponse<InstancesOperationResult[]> getByIdsResult = await instancesClient.GetByIdAsync(timeSeriesIds);\n\n// The response of calling the API contains a list of instance or error objects corresponding by position to the array in the request.\n// Instance object is set when operation is successful and error object is set when operation is unsuccessful.\nfor (int i = 0; i < getByIdsResult.Value.Length; i++)\n{\n    InstancesOperationResult currentOperationResult = getByIdsResult.Value[i];\n\n    if (currentOperationResult.Instance != null)\n    {\n        Console.WriteLine($\"Retrieved Time Series Insights instance with Id '{currentOperationResult.Instance.TimeSeriesId}' and name '{currentOperationResult.Instance.Name}'.\");\n    }\n    else if (currentOperationResult.Error != null)\n    {\n        Console.WriteLine($\"Failed to retrieve a Time Series Insights instance with Id '{timeSeriesIds[i]}'. Error message: '{currentOperationResult.Error.Message}'.\");\n    }\n}\n```\n\nSimilarly, you can delete specific instances by their unique identifier, or by the Time Series instances names.\n\n```C# Snippet:TimeSeriesInsightsSampleDeleteInstanceById\n// tsId is created above using `TimeSeriesIdHelper.CreateTimeSeriesId`.\nvar instancesToDelete = new List<TimeSeriesId>\n{\n    tsId,\n};\n\nResponse<TimeSeriesOperationError[]> deleteInstanceErrors = await instancesClient\n    .DeleteByIdAsync(instancesToDelete);\n\n// The response of calling the API contains a list of error objects corresponding by position to the input parameter\n// array in the request. If the error object is set to null, this means the operation was a success.\nfor (int i = 0; i < deleteInstanceErrors.Value.Length; i++)\n{\n    TimeSeriesId tsiId = instancesToDelete[i];\n\n    if (deleteInstanceErrors.Value[i] == null)\n    {\n        Console.WriteLine($\"Deleted Time Series Insights instance with Id '{tsiId}'.\");\n    }\n    else\n    {\n        Console.WriteLine($\"Failed to delete a Time Series Insights instance with Id '{tsiId}'. Error Message: '{deleteInstanceErrors.Value[i].Message}'\");\n    }\n}\n```\n\nThis code snippet demonstrates replacing an existing Time Series instance.\n```C# Snippet:TimeSeriesInsightsReplaceInstance\n// Get Time Series Insights instances by Id\n// tsId is created above using `TimeSeriesIdHelper.CreateTimeSeriesId`.\nvar instanceIdsToGet = new List<TimeSeriesId>\n{\n    tsId,\n};\n\nResponse<InstancesOperationResult[]> getInstancesByIdResult = await instancesClient.GetByIdAsync(instanceIdsToGet);\n\nTimeSeriesInstance instanceResult = getInstancesByIdResult.Value[0].Instance;\nConsole.WriteLine($\"Retrieved Time Series Insights instance with Id '{instanceResult.TimeSeriesId}' and name '{instanceResult.Name}'.\");\n\n// Now let's replace the instance with an updated name\ninstanceResult.Name = \"newInstanceName\";\n\nvar instancesToReplace = new List<TimeSeriesInstance>\n{\n    instanceResult,\n};\n\nResponse<InstancesOperationResult[]> replaceInstancesResult = await instancesClient.ReplaceAsync(instancesToReplace);\n\n// The response of calling the API contains a list of error objects corresponding by position to the input parameter.\n// array in the request. If the error object is set to null, this means the operation was a success.\nfor (int i = 0; i < replaceInstancesResult.Value.Length; i++)\n{\n    TimeSeriesId tsiId = instancesToReplace[i].TimeSeriesId;\n\n    TimeSeriesOperationError currentError = replaceInstancesResult.Value[i].Error;\n\n    if (currentError != null)\n    {\n        Console.WriteLine($\"Failed to replace Time Series Insights instance with Id '{tsiId}',\" +\n            $\" Error Message: '{currentError.Message}', Error code: '{currentError.Code}'.\");\n    }\n    else\n    {\n        Console.WriteLine($\"Replaced Time Series Insights instance with Id '{tsiId}'.\");\n    }\n}\n```\n\n## Time Series Insights Types\nUse `Types` in [TimeSeriesInsightsClient](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/timeseriesinsights/Azure.IoT.TimeSeriesInsights/src/TimeSeriesInsightsClient.cs) to create, retrieve, replace and delete Time Series types in your environment.\n\nThis snippet demonstrates creating a Time Series type in your environment.\n\n```C# Snippet:TimeSeriesInsightsSampleCreateType\nTimeSeriesInsightsTypes typesClient = client.GetTypesClient();\n\n// Create a type with an aggregate variable\nvar timeSeriesTypes = new List<TimeSeriesType>();\n\nvar countExpression = new TimeSeriesExpression(\"count()\");\nvar aggregateVariable = new AggregateVariable(countExpression);\nvar variables = new Dictionary<string, TimeSeriesVariable>();\nvariables.Add(\"aggregateVariable\", aggregateVariable);\n\ntimeSeriesTypes.Add(new TimeSeriesType(\"Type1\", variables) { Id = \"Type1Id\" });\ntimeSeriesTypes.Add(new TimeSeriesType(\"Type2\", variables) { Id = \"Type2Id\" });\n\nResponse<TimeSeriesTypeOperationResult[]> createTypesResult = await typesClient\n    .CreateOrReplaceAsync(timeSeriesTypes);\n\n// The response of calling the API contains a list of error objects corresponding by position to the input parameter array in the request.\n// If the error object is set to null, this means the operation was a success.\nfor (int i = 0; i < createTypesResult.Value.Length; i++)\n{\n    if (createTypesResult.Value[i].Error == null)\n    {\n        Console.WriteLine($\"Created Time Series type successfully.\");\n    }\n    else\n    {\n        Console.WriteLine($\"Failed to create a Time Series Insights type: {createTypesResult.Value[i].Error.Message}.\");\n    }\n}\n```\n\nThis snippet demonstrates retrieving all created types in your environment in pages. You can enumerate an AsyncPageable object using the `async foreach` loop.\n\n```C# Snippet:TimeSeriesInsightsSampleGetAllTypes\n// Get all Time Series types in the environment\nAsyncPageable<TimeSeriesType> getAllTypesResponse = typesClient.GetTypesAsync();\n\nawait foreach (TimeSeriesType tsiType in getAllTypesResponse)\n{\n    Console.WriteLine($\"Retrieved Time Series Insights type with Id: '{tsiType?.Id}' and Name: '{tsiType?.Name}'\");\n}\n```\n\nThis snippet highlights how you can retrieve a list of specific Time Series types by their unique identifiers or names.\n\n```C# Snippet:TimeSeriesInsightsSampleGetTypeById\n// Code snippet below shows getting a default Type using Id\n// The default type Id can be obtained programmatically by using the ModelSettings client.\n\nTimeSeriesInsightsModelSettings modelSettingsClient = client.GetModelSettingsClient();\nTimeSeriesModelSettings modelSettings = await modelSettingsClient.GetAsync();\nResponse<TimeSeriesTypeOperationResult[]> getTypeByIdResults = await typesClient\n    .GetByIdAsync(new string[] { modelSettings.DefaultTypeId });\n\n// The response of calling the API contains a list of type or error objects corresponding by position to the input parameter array in the request.\n// If the error object is set to null, this means the operation was a success.\nfor (int i = 0; i < getTypeByIdResults.Value.Length; i++)\n{\n    if (getTypeByIdResults.Value[i].Error == null)\n    {\n        Console.WriteLine($\"Retrieved Time Series type with Id: '{getTypeByIdResults.Value[i].TimeSeriesType.Id}'.\");\n    }\n    else\n    {\n        Console.WriteLine($\"Failed to retrieve a Time Series type due to '{getTypeByIdResults.Value[i].Error.Message}'.\");\n    }\n}\n```\n\nSimilarly, you can delete Time Series types by providing a list of Time Series type Ids or names.\n\n```C# Snippet:TimeSeriesInsightsSampleDeleteTypeById\n// Delete Time Series types with Ids\n\nvar typesIdsToDelete = new List<string> { \"Type1Id\", \" Type2Id\" };\nResponse<TimeSeriesOperationError[]> deleteTypesResponse = await typesClient\n    .DeleteByIdAsync(typesIdsToDelete);\n\n// The response of calling the API contains a list of error objects corresponding by position to the input parameter\n// array in the request. If the error object is set to null, this means the operation was a success.\nforeach (var result in deleteTypesResponse.Value)\n{\n    if (result != null)\n    {\n        Console.WriteLine($\"Failed to delete a Time Series Insights type: {result.Message}.\");\n    }\n    else\n    {\n        Console.WriteLine($\"Deleted a Time Series Insights type successfully.\");\n    }\n}\n```\n\nThis code snippet demonstrates replacing an existing Time Series type.\n\n```C# Snippet:TimeSeriesInsightsSampleReplaceType\n// Update variables with adding a new variable\nforeach (TimeSeriesType type in timeSeriesTypes)\n{\n    type.Description = \"Description\";\n}\n\nResponse<TimeSeriesTypeOperationResult[]> updateTypesResult = await typesClient\n    .CreateOrReplaceAsync(timeSeriesTypes);\n\n// The response of calling the API contains a list of error objects corresponding by position to the input parameter array in the request.\n// If the error object is set to null, this means the operation was a success.\nfor (int i = 0; i < updateTypesResult.Value.Length; i++)\n{\n    if (updateTypesResult.Value[i].Error == null)\n    {\n        Console.WriteLine($\"Updated Time Series type successfully.\");\n    }\n    else\n    {\n        Console.WriteLine($\"Failed to update a Time Series Insights type due to: {updateTypesResult.Value[i].Error.Message}.\");\n    }\n}\n```\n\n## Time Series Insights Hierarchies\n\nTime Series Model hierarchies organize instances by specifying property names and their relationships. You can configure multiple hierarchies in a given Azure Time Series Insights Gen2 environment. A Time Series Model instance can map to a single hierarchy or multiple hierarchies (many-to-many relationship). To learn more about Time Series Model hierarchies, make sure you visit [this page][tsi_hierarchies_learn_more].\n\nUse `Hierarchies` in [TimeSeriesInsightsClient](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/timeseriesinsights/Azure.IoT.TimeSeriesInsights/src/TimeSeriesInsightsClient.cs) to perform a variety of operations on the environment's hierarchies.\n\nThis code snippet demonstrates creating hierarchies in your Time Series Insights environment.\n\n```C# Snippet:TimeSeriesInsightsSampleCreateHierarchies\nTimeSeriesInsightsHierarchies hierarchiesClient = client.GetHierarchiesClient();\n\nvar hierarchySource = new TimeSeriesHierarchySource();\nhierarchySource.InstanceFieldNames.Add(\"hierarchyLevel1\");\n\nvar tsiHierarchy = new TimeSeriesHierarchy(\"sampleHierarchy\", hierarchySource)\n{\n    Id = \"sampleHierarchyId\"\n};\n\nvar timeSeriesHierarchies = new List<TimeSeriesHierarchy>\n{\n    tsiHierarchy\n};\n\n// Create Time Series hierarchies\nResponse<TimeSeriesHierarchyOperationResult[]> createHierarchiesResult = await hierarchiesClient\n    .CreateOrReplaceAsync(timeSeriesHierarchies);\n\n// The response of calling the API contains a list of error objects corresponding by position to the input parameter array in the request.\n// If the error object is set to null, this means the operation was a success.\nfor (int i = 0; i < createHierarchiesResult.Value.Length; i++)\n{\n    if (createHierarchiesResult.Value[i].Error == null)\n    {\n        Console.WriteLine($\"Created Time Series hierarchy successfully.\");\n    }\n    else\n    {\n        Console.WriteLine($\"Failed to create a Time Series hierarchy: {createHierarchiesResult.Value[i].Error.Message}.\");\n    }\n}\n```\n\nThis code snippet demonstrates retrieving all hierarchies in your environment in pages. You can enumerate an AsyncPageable object using the `async foreach` loop.\n\n```C# Snippet:TimeSeriesInsightsSampleGetAllHierarchies\n// Get all Time Series hierarchies in the environment\nAsyncPageable<TimeSeriesHierarchy> getAllHierarchies = hierarchiesClient.GetAsync();\nawait foreach (TimeSeriesHierarchy hierarchy in getAllHierarchies)\n{\n    Console.WriteLine($\"Retrieved Time Series Insights hierarchy with Id: '{hierarchy.Id}' and Name: '{hierarchy.Name}'.\");\n}\n```\n\nYou can use a list of hierarchy IDs or names to get specific hierarchies, as demonstrated in this code snippet.\n\n```C# Snippet:TimeSeriesInsightsSampleGetHierarchiesById\nvar tsiHierarchyIds = new List<string>\n{\n    \"sampleHierarchyId\"\n};\n\nResponse<TimeSeriesHierarchyOperationResult[]> getHierarchiesByIdsResult = await hierarchiesClient\n            .GetByIdAsync(tsiHierarchyIds);\n\n// The response of calling the API contains a list of hieararchy or error objects corresponding by position to the input parameter array in the request.\n// If the error object is set to null, this means the operation was a success.\nfor (int i = 0; i < getHierarchiesByIdsResult.Value.Length; i++)\n{\n    if (getHierarchiesByIdsResult.Value[i].Error == null)\n    {\n        Console.WriteLine($\"Retrieved Time Series hieararchy with Id: '{getHierarchiesByIdsResult.Value[i].Hierarchy.Id}'.\");\n    }\n    else\n    {\n        Console.WriteLine($\"Failed to retrieve a Time Series hieararchy due to '{getHierarchiesByIdsResult.Value[i].Error.Message}'.\");\n    }\n}\n```\n\nSimilarly, you can use a list of hierarchies Ids or names to be able to delete hierarchies, as demonstrated in this code snippet.\n```C# Snippet:TimeSeriesInsightsSampleDeleteHierarchiesById\n// Delete Time Series hierarchies with Ids\nvar tsiHierarchyIdsToDelete = new List<string>\n{\n    \"sampleHiearchyId\"\n};\n\nResponse<TimeSeriesOperationError[]> deleteHierarchiesResponse = await hierarchiesClient\n        .DeleteByIdAsync(tsiHierarchyIdsToDelete);\n\n// The response of calling the API contains a list of error objects corresponding by position to the input parameter\n// array in the request. If the error object is set to null, this means the operation was a success.\nforeach (TimeSeriesOperationError result in deleteHierarchiesResponse.Value)\n{\n    if (result != null)\n    {\n        Console.WriteLine($\"Failed to delete a Time Series Insights hierarchy: {result.Message}.\");\n    }\n    else\n    {\n        Console.WriteLine($\"Deleted a Time Series Insights hierarchy successfully.\");\n    }\n}\n```\n\nThis code snippet demonstrates replacing a Time Series hierarchy.\n\n```C# Snippet:TimeSeriesInsightsSampleReplaceHierarchies\n// Update hierarchies with adding a new instance field\nforeach (TimeSeriesHierarchy hierarchy in timeSeriesHierarchies)\n{\n    hierarchy.Source.InstanceFieldNames.Add(\"hierarchyLevel2\");\n}\n\nResponse<TimeSeriesHierarchyOperationResult[]> updateHierarchiesResult = await hierarchiesClient\n        .CreateOrReplaceAsync(timeSeriesHierarchies);\n\n// The response of calling the API contains a list of error objects corresponding by position to the input parameter array in the request.\n// If the error object is set to null, this means the operation was a success.\nfor (int i = 0; i < updateHierarchiesResult.Value.Length; i++)\n{\n    if (updateHierarchiesResult.Value[i].Error == null)\n    {\n        Console.WriteLine($\"Updated Time Series hierarchy successfully.\");\n    }\n    else\n    {\n        Console.WriteLine($\"Failed to update a Time Series Insights hierarchy due to: {updateHierarchiesResult.Value[i].Error.Message}.\");\n    }\n}\n```\n\n## Time Series Insights Query\n\nUse `Queries` in [TimeSeriesInsightsClient](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/timeseriesinsights/Azure.IoT.TimeSeriesInsights/src/TimeSeriesInsightsClient.cs) to query for:\n- Raw events for a given Time Series ID and search span.\n- Computed values and the associated event timestamps by applying calculations defined by variables on raw events. These variables can be defined in either the Time Series Model or provided inline in the query.\n- Aggregated values and the associated interval timestamps by applying calculations defined by variables on raw events. These variables can be defined in either the Time Series Model or provided inline in the query.\n\nResponse for the `Query` APIs are of type `QueryAnalyzer`. The QueryAnalyzer allows a developer to query for pages of results, while being able to perform operations on the result set as a whole. For example, to get a list of `TimeSeriesPoint` in pages, call the `GetResultsAsync` method on the `TimeSeriesQuery` object. You can enumerate an AsyncPageable object using the `async foreach` loop.\n\nThis code snippet demonstrates querying for raw events with using a time span interval.\n\n```C# Snippet:TimeSeriesInsightsSampleQueryEventsUsingTimeSpan\nConsole.WriteLine(\"\\n\\nQuery for raw humidity events over the past 30 seconds.\\n\");\n\nTimeSeriesQueryAnalyzer humidityEventsQuery = queriesClient.CreateEventsQuery(tsId, TimeSpan.FromSeconds(30));\nawait foreach (TimeSeriesPoint point in humidityEventsQuery.GetResultsAsync())\n{\n    TimeSeriesValue humidityValue = point.GetValue(\"Humidity\");\n\n    // Figure out what is the underlying type for the time series value. Since you know your Time Series Insights\n    // environment best, you probably do not need this logic and you can skip to directly casting to the proper\n    // type. This logic demonstrates how you can figure out what type to cast to in the case where you are not\n    // too familiar with the property type.\n    if (humidityValue.Type == typeof(double?))\n    {\n        Console.WriteLine($\"{point.Timestamp} - Humidity: {point.GetNullableDouble(\"Humidity\")}\");\n    }\n    else if (humidityValue.Type == typeof(int?))\n    {\n        Console.WriteLine($\"{point.Timestamp} - Humidity: {point.GetNullableInt(\"Humidity\")}\");\n    }\n    else\n    {\n        Console.WriteLine(\"The type of the Time Series value for Humidity is not numeric.\");\n    }\n}\n```\n\nThe client library also provides a way to query for raw events using using a start and end time, as demonstrated in this code snippet.\n\n```C# Snippet:TimeSeriesInsightsSampleQueryEvents\nConsole.WriteLine(\"\\n\\nQuery for raw temperature events over the past 10 minutes.\\n\");\n\n// Get events from last 10 minute\nDateTimeOffset endTime = DateTime.UtcNow;\nDateTimeOffset startTime = endTime.AddMinutes(-10);\n\nTimeSeriesQueryAnalyzer temperatureEventsQuery = queriesClient.CreateEventsQuery(tsId, startTime, endTime);\nawait foreach (TimeSeriesPoint point in temperatureEventsQuery.GetResultsAsync())\n{\n    TimeSeriesValue temperatureValue = point.GetValue(\"Temperature\");\n\n    // Figure out what is the underlying type for the time series value. Since you know your Time Series Insights\n    // environment best, you probably do not need this logic and you can skip to directly casting to the proper\n    // type. This logic demonstrates how you can figure out what type to cast to in the case where you are not\n    // too familiar with the property type.\n    if (temperatureValue.Type == typeof(double?))\n    {\n        Console.WriteLine($\"{point.Timestamp} - Temperature: {point.GetNullableDouble(\"Temperature\")}\");\n    }\n    else if (temperatureValue.Type == typeof(int?))\n    {\n        Console.WriteLine($\"{point.Timestamp} - Temperature: {point.GetNullableInt(\"Temperature\")}\");\n    }\n    else\n    {\n        Console.WriteLine(\"The type of the Time Series value for Temperature is not numeric.\");\n    }\n}\n```\n\nThis code snippet demonstrates querying for series events. In this snippet, we query for the temperature both in Celsius and fahrenheit. The Time Series instance that we query from has predefined numeric variables, one for the Celsius and the other for Fahrenheit.\n\n```C# Snippet:TimeSeriesInsightsSampleQuerySeries\nConsole.WriteLine($\"\\n\\nQuery for temperature series in Celsius and Fahrenheit over the past 10 minutes. \" +\n    $\"The Time Series instance belongs to a type that has predefined numeric variable that represents the temperature \" +\n    $\"in Celsuis, and a predefined numeric variable that represents the temperature in Fahrenheit.\\n\");\n\nDateTimeOffset endTime = DateTime.UtcNow;\nDateTimeOffset startTime = endTime.AddMinutes(-10);\nTimeSeriesQueryAnalyzer seriesQuery = queriesClient.CreateSeriesQuery(\n    tsId,\n    startTime,\n    endTime);\n\nawait foreach (TimeSeriesPoint point in seriesQuery.GetResultsAsync())\n{\n    double? tempInCelsius = point.GetNullableDouble(celsiusVariableName);\n    double? tempInFahrenheit = point.GetNullableDouble(fahrenheitVariableName);\n\n    Console.WriteLine($\"{point.Timestamp} - Average temperature in Celsius: {tempInCelsius}. \" +\n        $\"Average temperature in Fahrenheit: {tempInFahrenheit}.\");\n}\n```\n\nYou can also query for series events with variables defined in the request options. In this snippet, we create two [numeric variables][tsi_numeric_variables], one for the Celsius and the other for Fahrenheit. These variables are then added as inline variables to the request options.\n\n```C# Snippet:TimeSeriesInsightsSampleQuerySeriesWithInlineVariables\nConsole.WriteLine(\"\\n\\nQuery for temperature series in Celsius and Fahrenheit over the past 10 minutes.\\n\");\n\nvar celsiusVariable = new NumericVariable(\n    new TimeSeriesExpression(\"$event.Temperature\"),\n    new TimeSeriesExpression(\"avg($value)\"));\nvar fahrenheitVariable = new NumericVariable(\n    new TimeSeriesExpression(\"$event.Temperature * 1.8 + 32\"),\n    new TimeSeriesExpression(\"avg($value)\"));\n\nvar querySeriesRequestOptions = new QuerySeriesRequestOptions();\nquerySeriesRequestOptions.InlineVariables[\"TemperatureInCelsius\"] = celsiusVariable;\nquerySeriesRequestOptions.InlineVariables[\"TemperatureInFahrenheit\"] = fahrenheitVariable;\n\nTimeSeriesQueryAnalyzer seriesQuery = queriesClient.CreateSeriesQuery(\n    tsId,\n    TimeSpan.FromMinutes(10),\n    null,\n    querySeriesRequestOptions);\n\nawait foreach (TimeSeriesPoint point in seriesQuery.GetResultsAsync())\n{\n    double? tempInCelsius = (double?)point.GetValue(\"TemperatureInCelsius\");\n    double? tempInFahrenheit = (double?)point.GetValue(\"TemperatureInFahrenheit\");\n\n    Console.WriteLine($\"{point.Timestamp} - Average temperature in Celsius: {tempInCelsius}. Average temperature in Fahrenheit: {tempInFahrenheit}.\");\n}\n```\n\nThis code snippet demonstrates querying for aggregated values. More specifically, the number of temperature events that the TSI environment has ingested over the past 3 minutes, in 1-minute time slots. In order to achieve this, a `count` [AggregateVariable][tsi_aggregate_variables] is added as an inline variable to the request options.\n\n```C# Snippet:TimeSeriesInsightsSampleQueryAggregateSeriesWithAggregateVariable\nConsole.WriteLine(\"\\n\\nCount the number of temperature events over the past 3 minutes, in 1-minute time slots.\\n\");\n\n// Get the count of events in 60-second time slots over the past 3 minutes\nDateTimeOffset endTime = DateTime.UtcNow;\nDateTimeOffset startTime = endTime.AddMinutes(-3);\n\nvar aggregateVariable = new AggregateVariable(\n    new TimeSeriesExpression(\"count()\"));\n\nvar countVariableName = \"Count\";\n\nvar aggregateSeriesRequestOptions = new QueryAggregateSeriesRequestOptions();\naggregateSeriesRequestOptions.InlineVariables[countVariableName] = aggregateVariable;\naggregateSeriesRequestOptions.ProjectedVariableNames.Add(countVariableName);\n\nTimeSeriesQueryAnalyzer query = queriesClient.CreateAggregateSeriesQuery(\n    tsId,\n    startTime,\n    endTime,\n    TimeSpan.FromSeconds(60),\n    aggregateSeriesRequestOptions);\n\nawait foreach (TimeSeriesPoint point in query.GetResultsAsync())\n{\n    long? temperatureCount = (long?)point.GetValue(countVariableName);\n    Console.WriteLine($\"{point.Timestamp} - Temperature count: {temperatureCount}\");\n}\n```\n\n<!-- LINKS -->\n[DefaultAzureCredential]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/identity/Azure.Identity/README.md\n[tsi_instances_learn_more]: https://docs.microsoft.com/azure/time-series-insights/concepts-model-overview#time-series-model-instances\n[tsi_id_learn_more]: https://docs.microsoft.com/azure/time-series-insights/how-to-select-tsid\n[tsi_hierarchies_learn_more]: https://docs.microsoft.com/azure/time-series-insights/concepts-model-overview#time-series-model-hierarchies\n[tsi_numeric_variables]: https://docs.microsoft.com/azure/time-series-insights/concepts-variables#numeric-variables\n[tsi_aggregate_variables]: https://docs.microsoft.com/azure/time-series-insights/concepts-variables#aggregate-variables\n", "repo_name": "timeseriesinsights/Azure.IoT.TimeSeriesInsights/samples/Readme.md", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/timeseriesinsights/Azure.IoT.TimeSeriesInsights/samples/Readme.md", "language": ["C#", ".NET"]}, {"README_text": "<Project Sdk=\"Microsoft.NET.Sdk\\\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"/>\n    <PackageReference Include=\"NUnit3TestAdapter\"/>\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.TrafficManager.csproj\"/>\n  </ItemGroup>\n</Project>\n", "repo_name": "trafficmanager/Azure.ResourceManager.TrafficManager/samples/Azure.ResourceManager.TrafficManager.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/trafficmanager/Azure.ResourceManager.TrafficManager/samples/Azure.ResourceManager.TrafficManager.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "---\npage_type: sample\nlanguages:\n- csharp\nproducts:\n- azure\n- azure-cognitive-services\n- azure-translator\nname: Azure DocumentTranslation samples for .NET\ndescription: Samples for the Azure.AI.Translation.Document client library\n---\n\n# Azure Document Translation client SDK Samples\nAzure Cognitive Services Document Translation is a cloud service that translates documents to and from 90 languages and dialects while preserving document structure and data format. Use the client library for Document Translation to:\n\n* Translate numerous, large files from an Azure Blob Storage container to a target container in your language of choice.\n* Check the translation status and progress of each document in the translation operation.\n* Apply a custom translation model or glossaries to tailor translation to your specific case.\n\n## Common scenarios samples\n- [Start Translation](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/translation/Azure.AI.Translation.Document/samples/Sample1_StartTranslation.md)\n- [Poll Documents Status](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/translation/Azure.AI.Translation.Document/samples/Sample2_PollIndividualDocuments.md)\n- [Operations History](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/translation/Azure.AI.Translation.Document/samples/Sample3_OperationsHistory.md)\n\n## Advanced samples\n- [Multiple Inputs](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/translation/Azure.AI.Translation.Document/samples/Sample4_MultipleInputs.md)\n- [Create Storage Containers And Submit Operation (code sample)](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/translation/Azure.AI.Translation.Document/tests/samples/Sample_StartTranslationWithAzureBlob.cs)\n\n[README]: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/textanalytics/Azure.AI.TextAnalytics/README.md\n", "repo_name": "translation/Azure.AI.Translation.Document/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/translation/Azure.AI.Translation.Document/samples", "language": ["C#", ".NET"]}, {"README_text": "---\npage_type: sample\nlanguages:\n- csharp\nproducts:\n- azure\n- azure-cognitive-services\n- azure-translator\nname: Azure.AI.Translation.Text samples for .NET\ndescription: Samples for the Azure.AI.Translation.Text client library.\n---\n\n# Azure Text Translation client library for .NET\n\nTranslator Service is a cloud-based neural machine translation service that is part of the Azure Cognitive Services family of REST APIs and can be used with any operating system. This client library offers the following features:\n\n* Get Supported Languages\n* Translate\n* Transliterate\n* Break Sentence\n* Dictionary Lookup\n* Dictionary Examples\n\nSee the [README][README] of the Text Analytics client library for more information, including useful links and instructions.\n\n## Common scenarios samples\n\n* [Create a `TextTranslationClient`][create_client_sample]\n* [Get Languages][languages_sample]\n* [Translate][translate_sample]\n* [Transliterate][transliterate_sample]\n* [Break Sentence][breaksentence_sample]\n* [Dictionary Lookup][dictionarylookup_sample]\n* [Dictionary Examples][dictionaryexamples_sample]\n\n\n[README]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/translation/Azure.AI.Translation.Text/README.md\n\n[create_client_sample]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/translation/Azure.AI.Translation.Text/samples/Sample0_CreateClient.md\n[languages_sample]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/translation/Azure.AI.Translation.Text/samples/Sample1_GetLanguages.md\n[translate_sample]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/translation/Azure.AI.Translation.Text/samples/Sample2_Translate.md\n[transliterate_sample]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/translation/Azure.AI.Translation.Text/samples/Sample3_Transliterate.md\n[breaksentence_sample]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/translation/Azure.AI.Translation.Text/samples/Sample4_BreakSentence.md\n[dictionarylookup_sample]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/translation/Azure.AI.Translation.Text/samples/Sample5_DictionaryLookup.md\n[dictionaryexamples_sample]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/translation/Azure.AI.Translation.Text/samples/Sample6_DictionaryExamples.md\n", "repo_name": "translation/Azure.AI.Translation.Text/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/translation/Azure.AI.Translation.Text/samples", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n\n  <PropertyGroup>\n    <TargetFrameworks>$(RequiredTargetFrameworks)</TargetFrameworks>\n    <IsPackable>false</IsPackable>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include=\"Microsoft.Azure.Devices\" />\n    <PackageReference Include=\"Microsoft.Azure.Devices.Client\" />\n    <PackageReference Include=\"NUnit\" />\n    <PackageReference Include=\"NUnit3TestAdapter\" />\n    <PackageReference Include=\"Microsoft.NET.Test.Sdk\" />\n    <PackageReference Include=\"Moq\" />\n  </ItemGroup>\n\n  <ItemGroup>\n    <ProjectReference Include=\"$(AzureCoreTestFramework)\" />\n    <ProjectReference Include=\"..\\src\\Azure.Media.VideoAnalyzer.Edge.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "videoanalyzer/Azure.Media.VideoAnalyzer.Edge/samples/Azure.Media.VideoAnalyzer.Edge.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/videoanalyzer/Azure.Media.VideoAnalyzer.Edge/samples/Azure.Media.VideoAnalyzer.Edge.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.VoiceServices.csproj\" />\n  </ItemGroup>\n</Project>", "repo_name": "voiceservices/Azure.ResourceManager.VoiceServices/samples/Azure.ResourceManager.VoiceServices.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/voiceservices/Azure.ResourceManager.VoiceServices/samples/Azure.ResourceManager.VoiceServices.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "---\npage_type: sample\nlanguages:\n- csharp\nproducts:\n- azure\nname: Azure.Messaging.WebPubSub.Client samples for .NET\ndescription: Samples for the Azure.Messaging.WebPubSub.Client client library\n---\n\n# Web PubSub client SDK samples\n\n- Create client, publish and subscribe group messages\n", "repo_name": "webpubsub/Azure.Messaging.WebPubSub.Client/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/webpubsub/Azure.Messaging.WebPubSub.Client/samples", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n    <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.WebPubSub.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "webpubsub/Azure.ResourceManager.WebPubSub/samples/Azure.ResourceManager.WebPubSub.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/webpubsub/Azure.ResourceManager.WebPubSub/samples/Azure.ResourceManager.WebPubSub.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "---\npage_type: sample\nlanguages:\n- csharp\nproducts:\n- azure\n- azure-web-pubsub\nname: Microsoft.Azure.Functions.Worker.Extensions.WebPubSub samples for .NET\ndescription: Samples for the Microsoft.Azure.Functions.Worker.Extensions.WebPubSub client library\n---\n\n# Azure Web PubSub isolated worker process client SDK samples\n\n<!-- TODO: update to sdk main after first check-in -->\n - [Negotiate](https://github.com/JialinXin/azure-sdk-for-net/blob/awps/isolated-func/sdk/webpubsub/Microsoft.Azure.Functions.Worker.Extensions.WebPubSub/samples/Sample1_Negotiate.md)\n - [SendMessage](https://github.com/JialinXin/azure-sdk-for-net/blob/awps/isolated-func/sdk/webpubsub/Microsoft.Azure.Functions.Worker.Extensions.WebPubSub/samples/Sample2_SendMessage.md)\n - [EventNotification](https://github.com/JialinXin/azure-sdk-for-net/blob/awps/isolated-func/sdk/webpubsub/Microsoft.Azure.Functions.Worker.Extensions.WebPubSub/samples/Sample3_EventNotification.md)\n - [Input Binding under `HttpTrigger`](https://github.com/JialinXin/azure-sdk-for-net/blob/awps/isolated-func/sdk/webpubsub/Microsoft.Azure.Functions.Worker.Extensions.WebPubSub/samples/Sample4_HttpTriggerInputBinding.md)", "repo_name": "webpubsub/Microsoft.Azure.Functions.Worker.Extensions.WebPubSub/samples", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/webpubsub/Microsoft.Azure.Functions.Worker.Extensions.WebPubSub/samples", "language": ["C#", ".NET"]}, {"README_text": "\ufeff// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nusing System;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.Azure.WebJobs.Extensions.Http;\nusing Microsoft.Azure.WebJobs.Extensions.WebPubSub;\n\nnamespace Microsoft.Azure.WebJobs.Samples\n{\n    #region Snippet:WebPubSubConnectionBindingFunction\n    public static class WebPubSubConnectionBindingFunction\n    {\n        [FunctionName(\"WebPubSubConnectionBindingFunction\")]\n        public static WebPubSubConnection Run(\n            [HttpTrigger(AuthorizationLevel.Anonymous, \"get\", \"post\")] HttpRequest req,\n            [WebPubSubConnection(Hub = \"hub\", UserId = \"{query.userid}\", Connection = \"<connection-string>\")] WebPubSubConnection connection)\n        {\n            Console.WriteLine(\"login\");\n            return connection;\n        }\n    }\n    #endregion\n}\n", "repo_name": "webpubsub/Microsoft.Azure.WebJobs.Extensions.WebPubSub/samples/WebPubSubConnectionBindingFunction.cs", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/webpubsub/Microsoft.Azure.WebJobs.Extensions.WebPubSub/samples/WebPubSubConnectionBindingFunction.cs", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.AppService.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "websites/Azure.ResourceManager.AppService/samples/Azure.ResourceManager.AppService.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/websites/Azure.ResourceManager.AppService/samples/Azure.ResourceManager.AppService.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"  />\n    <PackageReference Include=\"NUnit3TestAdapter\"  />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.WorkloadMonitor.csproj\" />\n  </ItemGroup>\n</Project>\n", "repo_name": "workloadmonitor/Azure.ResourceManager.WorkloadMonitor/samples/Azure.ResourceManager.WorkloadMonitor.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/workloadmonitor/Azure.ResourceManager.WorkloadMonitor/samples/Azure.ResourceManager.WorkloadMonitor.Samples.csproj", "language": ["C#", ".NET"]}, {"README_text": "<Project Sdk=\"Microsoft.NET.Sdk\\\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Identity\"/>\n    <PackageReference Include=\"NUnit\"/>\n    <PackageReference Include=\"NUnit3TestAdapter\"/>\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\src\\Azure.ResourceManager.Workloads.csproj\"/>\n  </ItemGroup>\n</Project>\n", "repo_name": "workloads/Azure.ResourceManager.Workloads/samples/Azure.ResourceManager.Workloads.Samples.csproj", "link_to_repo": "https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/workloads/Azure.ResourceManager.Workloads/samples/Azure.ResourceManager.Workloads.Samples.csproj", "language": ["C#", ".NET"]}]